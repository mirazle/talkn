!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=224)}([function(e,t,n){var r=n(4),o=n(29),a=n(18),i=n(19),u=n(30),l=function(e,t,n){var s,c,f,d,p=e&l.F,h=e&l.G,g=e&l.S,y=e&l.P,m=e&l.B,v=h?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),x=b.prototype||(b.prototype={});for(s in h&&(n=t),n)f=((c=!p&&v&&void 0!==v[s])?v:n)[s],d=m&&c?u(f,r):y&&"function"==typeof f?u(Function.call,f):f,v&&i(v,s,f,e&l.U),b[s]!=f&&a(b,s,d),y&&x[s]!=f&&(x[s]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(u(n(8)),u(n(17))),i=u(n(184));u(n(45));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};arguments[1];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),o=n.connection?n.connection:"/",i=n.name?n.name:"talkn",u=n.talknIndex?n.talknIndex:0,l=t.getWidth(n),c=t.getHeight(n),f=n.postsHeight?n.postsHeight:0,d=t.getScreenMode(l),p=n.extensionMode?n.extensionMode:"NONE",h=n.extensionWidth?n.extensionWidth:"0%",g=n.extensionOpenHeight?n.extensionOpenHeight:0,y=n.extensionCloseHeight?n.extensionCloseHeight:0,m=n.menuComponent?n.menuComponent:t.getDefaultMenuComponent(n),v=a.default.isSet(n.isMediaConnection)?n.isMediaConnection:t.getIsMediaConnection(o),b=!!a.default.isSet(n.isRootConnection)&&n.isRootConnection,x=n.rootConnection?n.rootConnection:o,k=t.getMediaSrc(n.protocol,o),w=t.getMediaType(k,n),T=n&&n.connectioned?n.connectioned:"",S=t.getDispThreadType(n,v),C=!a.default.isSet(n.multistream)||n.multistream,E=!(!n||!n.multistreamed)&&n.multistreamed,_=n&&n.threadScrollY?n.threadScrollY:0,O=n&&n.offsetFindId?n.offsetFindId:t.defaultOffsetFindId,M=n&&n.offsetTimelineFindId?n.offsetTimelineFindId:t.defaultOffsetFindId,P=n&&n.offsetSingleFindId?n.offsetSingleFindId:t.defaultOffsetFindId,L=n&&n.offsetMultiFindId?n.offsetMultiFindId:t.defaultOffsetFindId,B=n&&n.offsetChildFindId?n.offsetChildFindId:t.defaultOffsetFindId,I=n&&n.offsetLogsFindId?n.offsetLogsFindId:t.defaultOffsetFindId,A=n.detailConnection?n.detailConnection:o,R=n.inputPost?n.inputPost:"",N=n.inputCurrentTime?n.inputCurrentTime:0,j=n.inputSearch?n.inputSearch:"",F=t.getIsOpenPosts({height:c,extensionMode:p,extensionOpenHeight:g,extensionCloseHeight:y}),D=!!n.isOpenSetting&&n.isOpenSetting,U=!!n.isOpenMenu&&n.isOpenMenu,W=!!n.isOpenDetail&&n.isOpenDetail,H=!!n.isOpenNewPost&&n.isOpenNewPost,z=!!n.isOpenNotif&&n.isOpenNotif,G=!!a.default.isSet(n.isOpenPostsSupporter)&&n.isOpenPostsSupporter,V=a.default.isSet(n.isOpenBoard)?n.isOpenBoard:t.getIsOpenBoard({screenMode:d}),q=!a.default.isSet(n.isBubblePost)||n.isBubblePost,K=!!a.default.isSet(n.isDispPosts)&&n.isDispPosts,Y=!!a.default.isSet(n.isOpenLinks)&&n.isOpenLinks,$=n.openInnerNotif?n.openInnerNotif:"",X=n.openLockMenu?n.openLockMenu:t.openLockMenuLabelNo,Q=t.getIncludeIframeTag(n,p),J=n&&n.actioned?n.actioned:"",Z=!!a.default.isSet(n.isTransition)&&n.isTransition,ee=a.default.isSet(n.debug)?n.debug:"";return e=r.create({name:i,talknIndex:u,width:l,height:c,postsHeight:f,screenMode:d,extensionMode:p,extensionWidth:h,extensionOpenHeight:g,extensionCloseHeight:y,menuComponent:m,isRootConnection:b,isMediaConnection:v,rootConnection:x,connectionType:w,dispThreadType:S,connectioned:T,multistream:C,multistreamed:E,threadScrollY:_,offsetFindId:O,offsetTimelineFindId:M,offsetSingleFindId:P,offsetMultiFindId:L,offsetChildFindId:B,offsetLogsFindId:I,detailConnection:A,inputPost:R,inputCurrentTime:N,inputSearch:j,isOpenPosts:F,isOpenSetting:D,isOpenMenu:U,isOpenDetail:W,isOpenNewPost:H,isOpenNotif:z,isOpenPostsSupporter:G,isBubblePost:q,isOpenBoard:V,isDispPosts:K,isOpenLinks:Y,openInnerNotif:$,openLockMenu:X,includeIframeTag:Q,actioned:J,isTransition:Z,debug:ee}),s(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),o(t,null,[{key:"getDefaultMenuComponent",value:function(){return t.menuComponentIndexLabel}},{key:"getMediaType",value:function(e,n){return n&&n.connectionType?n.connectionType:t.getMediaTypeFromSrc(e)}},{key:"getMediaTypeFromSrc",value:function(e){for(var n=Object.keys(t.mediaConnectionTagTypes),r=n.length,o="html",a=0;a<r;a++){var i=new RegExp("."+n[a]+"$");if(e.match(i)){o=t.mediaConnectionTagTypes[n[a]];break}}return o}},{key:"validInputPost",value:function(e){return!!/\r\n$|\n$|\r$/gim.test(e)&&"LAST TYPE BREAK LINE."}},{key:"validPost",value:function(e){return""===e?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(e)?"ONLY NEW LINE":/^\s+$/g.test(e)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(e)&&"EMPTY POST"}},{key:"getWidth",value:function(e){return"object"===("undefined"==typeof window?"undefined":r(window))&&window.innerWidth?window.innerWidth:e.width?"string"==typeof e.width&&e.width.indexOf("px")>=0?Number(e.width.replace("px","")):e.width:0}},{key:"getHeight",value:function(e){return"object"===("undefined"==typeof window?"undefined":r(window))&&window.innerHeight?window.innerHeight:0}},{key:"openLockMenuLabelNo",get:function(){return"No"}},{key:"openLockMenuLabelLike",get:function(){return"Like"}},{key:"openLockMenuLabelShare",get:function(){return"Share"}},{key:"openLockMenuLabelAbout",get:function(){return"About"}},{key:"menuComponentUsersLabel",get:function(){return"Users"}},{key:"menuComponentIndexLabel",get:function(){return"Index"}},{key:"menuComponentLogsLabel",get:function(){return"Logs"}},{key:"menuComponentSettingLabel",get:function(){return"Setting"}},{key:"screenModeIndexLabel",get:function(){return"MENU"}},{key:"screenModeThreadLabel",get:function(){return"THREAD"}},{key:"screenModeDetailLabel",get:function(){return"DETAIL"}},{key:"screenModeSmallWidthPx",get:function(){return 600}},{key:"screenModeMiddleWidthPx",get:function(){return 960}},{key:"defaultOffsetFindId",get:function(){return i.default.defaultFindId}},{key:"dispThreadTypeTimeline",get:function(){return"Timeline"}},{key:"dispThreadTypeSingle",get:function(){return"Single"}},{key:"dispThreadTypeMulti",get:function(){return"Multi"}},{key:"dispThreadTypeChild",get:function(){return"Child"}},{key:"dispThreadTypeLogs",get:function(){return"Logs"}},{key:"screenModeUndispLabel",get:function(){return"UNDISP"}},{key:"screenModeSmallLabel",get:function(){return"SMALL"}},{key:"screenModeMiddleLabel",get:function(){return"MIDDLE"}},{key:"screenModeLargeLabel",get:function(){return"LARGE"}},{key:"extensionModeExtNoneLabel",get:function(){return"NONE"}},{key:"extensionModeExtModalLabel",get:function(){return"EXT_MODAL"}},{key:"extensionModeExtBottomLabel",get:function(){return"EXT_BOTTOM"}},{key:"extensionModeExtIncludeLabel",get:function(){return"EXT_INCLUDE"}},{key:"mediaTagTypeAudio",get:function(){return"audio"}},{key:"mediaTagTypeVideo",get:function(){return"video"}},{key:"mediaTypeM4a",get:function(){return"m4a"}},{key:"mediaTypeMp3",get:function(){return"mp3"}},{key:"mediaTypeMp4",get:function(){return"mp4"}},{key:"mediaConnections",get:function(){return[t.mediaTypeMp3,t.mediaTypeMp4,t.mediaTypeM4a]}},{key:"mediaConnectionTagTypes",get:function(){var e;return l(e={},t.mediaTypeMp3,t.mediaTagTypeAudio),l(e,t.mediaTypeMp4,t.mediaTagTypeVideo),l(e,t.mediaTypeM4a,t.mediaTagTypeAudio),e}}]),o(t,null,[{key:"isMediaContentType",value:function(e){return t.isAudioContentType(e)||t.isVideoContentType(e)}},{key:"isAudioContentType",value:function(e){return e.indexOf(t.mediaTagTypeAudio)>=0}},{key:"isVideoContentType",value:function(e){return e.indexOf(t.mediaTagTypeVideo)>=0}},{key:"getMediaSrc",value:function(e,t){return e+"/"+t.replace(/\/$/,"")}},{key:"getScreenMode",value:function(e){if(!e){if(window&&0===window.innerWidth||0===window.innerHeight)return t.screenModeUndispLabel;window&&window.innerWidth>0&&(e=window.innerWidth)}return"string"==typeof e&&(e=e.replace("px","")),t.screenModeSmallWidthPx>=e?t.screenModeSmallLabel:t.screenModeSmallWidthPx<e&&t.screenModeMiddleWidthPx>=e?t.screenModeMiddleLabel:t.screenModeLargeLabel}},{key:"getIncludeIframeTag",value:function(e,n){switch(n){case t.extensionModeExtIncludeLabel:return!0;default:return a.default.isSet(e.includeIframeTag)?a.default.getBool(e.includeIframeTag):!!a.default.isSet(e.includeiframetag)&&a.default.getBool(e.includeiframetag)}}},{key:"getIsMediaConnection",value:function(e){return t.mediaConnections.some(function(t){var n=new RegExp("."+t+"/$");return e.match(n)})}},{key:"getIsOpenPosts",value:function(e,n){var r=e.extensionMode,o=e.height,a=e.extensionOpenHeight,i=e.extensionCloseHeight;return r!==t.extensionModeExtBottomLabel&&r!==t.extensionModeExtModalLabel||("number"!=typeof o&&(o=Number(o)),"number"!=typeof a&&(a=Number(a)),0!==o&&(i!==o&&a<=o))}},{key:"getIsOpenBoard",value:function(e){switch(e.screenMode){case t.screenModeSmallLabel:return!1;case t.screenModeMiddleLabel:case t.screenModeLargeLabel:return!0}}},{key:"isActiveMultistream",value:function(e,n){return"Index"===e.menuComponent&&!e.isMediaConnection&&e.dispThreadType===t.dispThreadTypeMulti}},{key:"getDispThreadType",value:function(e,n){return e&&e.dispThreadType?e.dispThreadType:n?t.dispThreadTypeTimeline:t.dispThreadTypeMulti}},{key:"getOffsetFindId",value:function(e){var t=e.posts;return t&&t[0]&&t[0]._id?t[0]._id:i.default.defaultFindId}},{key:"getStepToDispThreadType",value:function(e,n,r){var o=e.app,a=o.dispThreadType;return{app:o=t.getStepDispThreadType({app:o},n,r),stepTo:a+" to "+o.dispThreadType}}},{key:"getStepDispThreadType",value:function(e){var n=e.app,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments[2];return r.isMediaConnection?(n.dispThreadType=t.dispThreadTypeTimeline,n.offsetFindId=n.offsetTimelineFindId?n.offsetTimelineFindId:t.defaultOffsetFindId,n.isMediaConnection=!0,n):(n.rootConnection===o?n.multistream?(n.dispThreadType=t.dispThreadTypeMulti,n.offsetFindId=n.offsetMultiFindId?n.offsetMultiFindId:t.defaultOffsetFindId):(n.dispThreadType=t.dispThreadTypeSingle,n.offsetFindId=n.offsetSingleFindId?n.offsetSingleFindId:t.defaultOffsetFindId):(n.dispThreadType=t.dispThreadTypeChild,n.offsetFindId=n.offsetChildFindId?n.offsetChildFindId:t.defaultOffsetFindId),n)}},{key:"getAppUpdatedOpenFlgs",value:function(e,n){var r=e.app;switch(n){case"toggleMain":case"headerDetailIcon":switch(r.screenMode){case t.screenModeSmallLabel:r.isOpenDetail=!r.isOpenDetail;break;case t.screenModeMiddleLabel:r.isOpenDetail?r.detailConnection===r.rootConnection?(r.isOpenDetail=!1,r.isOpenMenu=!0):(r.isOpenMenu=!1,r.isOpenDetail=!1):(r.isOpenMenu=!1,r.isOpenDetail=!0)}break;case"headerMenuIcon":switch(r.screenMode){case t.screenModeMiddleLabel:r.isOpenDetail,r.isOpenMenu=!0,r.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(r.screenMode){case t.screenModeSmallLabel:r.isOpenDetail=!r.isOpenDetail;break;case t.screenModeMiddleLabel:r.isOpenMenu=!1,r.isOpenDetail=!0}}return r}}]),t}();t.default=c},function(e,t,n){"use strict";e.exports=n(427)},function(e,t,n){var r=n(7);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),a=s(n(9)),i=s(n(27)),u=s(n(133)),l=s(n(22));s(n(77));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),multistreamIconWrap:e.getMultistreamIconWrap(t),newPost:e.getNewPost(t),hideScreenBottom:e.getHideScreenBottom(t)}}return r(e,null,[{key:"getThemeRGBA",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.8;return"rgba("+e.themeRGBString+", "+t+")"}},{key:"getTransitionOn",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=e.transitionOn;return r=t?t.isTransition?e.transitionOn+"ms":e.transitionOff+"ms":e.transitionOn+"ms",n?a.default.trimUnit(r):r}},{key:"getTransition",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.isTransition?e.transitionOn+"ms":e.transitionOff+"ms";return n?a.default.trimUnit(r):r}},{key:"getTransitionFirstOn",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.isTransition?e.transitionFirstOn+"ms":e.transitionOff+"ms";return n?a.default.trimUnit(r):r}},{key:"getNotifTranslateY",value:function(t){return t.isOpenNewPost?e.notifOpenTranslateY:e.notifCloseTranslateY}},{key:"getNewPostDisplay",value:function(e){return e.isOpenNotif?"none":"flex"}},{key:"getWidthPx",value:function(t){var n=t.bootOption,r=t.app;return n?n.width?n.width:e.width:r.width}},{key:"getRightPx",value:function(e,t){e.app;return"0%"}},{key:"getSelf",value:function(e){var t=e.app,n=e.bootOption,r=t.extensionMode===o.default.extensionModeExtBottomLabel?"hidden":"inherit",i="0px";n&&n["border-radius"]?i=n["border-radius"]:"0px"===i&&t.extensionMode===o.default.extensionModeExtModalLabel&&(i="3px");var u=a.default.getLayoutBlock({display:"initial",width:"100%",height:"100%",overflow:r,borderRadius:i}),l=a.default.getContentBase({}),s=a.default.getAnimationBase();return a.default.get({layout:u,content:l,animation:s})}},{key:"getMultistreamIconWrapTop",value:function(t){return t.extensionMode===o.default.extensionModeExtBottomLabel?i.default.headerHeight+e.multistreamWrapDefaultTop+"px":(t.extensionMode,o.default.extensionModeExtModalLabel,i.default.headerHeight+e.multistreamWrapDefaultTop+"px")}},{key:"getMultistreamIconWrapRight",value:function(e){switch(e.screenMode){case o.default.screenModeUndispLabel:case o.default.screenModeSmallLabel:return"5%";case o.default.screenModeMiddleLabel:return"20px";case o.default.screenModeLargeLabel:return"calc( "+u.default.getWidth(e)+" + 20px)"}}},{key:"getMultistreamIconWrap",value:function(t){t.app;var n=a.default.getLayoutBlock({width:"30px",height:"30px",margin:"0 auto",background:"rgba(255, 255, 255, 0.8)"}),r=a.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",fontSize:"12px",lineHeight:2,cursor:"pointer"}),o=a.default.getAnimationBase({transition:e.transitionOff});return a.default.get({layout:n,content:r,animation:o})}},{key:"getNewPost",value:function(t){var n=t.app,r=e.getNewPostDisplay(n),i="0px",s="0px";switch(n.screenMode){case o.default.screenModeUndispLabel:case o.default.screenModeSmallLabel:i="25%",s="50%";break;case o.default.screenModeMiddleLabel:s=.5*(n.width-l.default.getWidth(n,!0)),i=l.default.getWidth(n,!0)+Math.floor(s/2);break;case o.default.screenModeLargeLabel:var c=Math.floor(n.width*u.default.otherWidthRate);s=.5*Math.floor(c-l.default.getWidth(n,!0)),i=l.default.getWidth(n,!0)+Math.floor(s/2)}var f=a.default.getLayoutFlex({display:r,position:"fixed",bottom:"-"+e.notifHeight+"px",left:i,width:s,height:e.notifHeight,margin:"0px auto",alignItems:"center",justifyContent:"center",zIndex:"1",background:e.darkRGBA,borderRadius:"20px"}),d=a.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",fontSize:"12px",lineHeight:2,cursor:"pointer"}),p=a.default.getAnimationBase({transition:e.getTransition(n)});return a.default.get({layout:f,content:d,animation:p})}},{key:"getHideScreenBottom",value:function(t){t.app;var n=a.default.getLayoutFlex({position:"fixed",top:"100vh",width:"100vw",height:"300px",background:e.reliefRGB}),r=a.default.getContentBase({}),o=a.default.getAnimationBase({});return a.default.get({layout:n,content:r,animation:o})}},{key:"width",get:function(){return"100%"}},{key:"widthRatio",get:function(){return.94}},{key:"radius",get:function(){return"7px"}},{key:"radiuses",get:function(){return e.radius+" "+e.radius+" 0px 0px"}},{key:"openHeight",get:function(){return 360}},{key:"closeHeight",get:function(){return 360}},{key:"threadHeight",get:function(){return 360}},{key:"maxZIndex",get:function(){return 2147483647}},{key:"openBottom",get:function(){return e.footerHeight}},{key:"closeBottom",get:function(){return 0}},{key:"merginRatio",get:function(){return.034}},{key:"notifOpenTranslate",get:function(){return 20}},{key:"notifHeight",get:function(){return 20}},{key:"borderRGB",get:function(){return a.default.mono220RGB}},{key:"border",get:function(){return"1px solid "+e.borderRGB}},{key:"shadow",get:function(){return a.default.mono230RGB+" 0px 0px 5px 0px"}},{key:"darkRGB",get:function(){return a.default.darkRGB}},{key:"darkRGBA",get:function(){return a.default.darkRGBA}},{key:"reliefRGB",get:function(){return a.default.mono180RGB}},{key:"reliefRGBA",get:function(){return a.default.mono180RGBA}},{key:"silverRGB",get:function(){return a.default.mono192RGB}},{key:"silverRGBA",get:function(){return a.default.mono192RGBA}},{key:"lightGrayRGB",get:function(){return a.default.mono211RGB}},{key:"lightGrayRGBA",get:function(){return a.default.mono211RGBA}},{key:"chromeOffTabRGB",get:function(){return a.default.mono225RGB}},{key:"chromeOffTabRGBA",get:function(){return a.default.mono225RGBA}},{key:"calmRGB",get:function(){return a.default.mono240RGB}},{key:"calmRGBA",get:function(){return a.default.mono240RGBA}},{key:"lightRGB",get:function(){return a.default.mono245RGB}},{key:"lightRGBA",get:function(){return a.default.mono245RGBA}},{key:"offWhiteRGB",get:function(){return a.default.mono250RGB}},{key:"offWhiteRGBA",get:function(){return a.default.mono250RGBA}},{key:"offWhitePlusRGB",get:function(){return a.default.mono252RGB}},{key:"offWhitePlusRGBA",get:function(){return a.default.mono252RGBA}},{key:"whiteRGB",get:function(){return a.default.mono255RGB}},{key:"whiteRGBA",get:function(){return a.default.mono255RGBA}},{key:"fontBaseRGB",get:function(){return a.default.fontBaseRGB}},{key:"themeRGBString",get:function(){return"79, 174, 159"}},{key:"themeRGB",get:function(){return"rgb("+e.themeRGBString+")"}},{key:"themeRGBA",get:function(){return"rgba("+e.themeRGBString+", 0.8)"}},{key:"transitionOn",get:function(){return 600}},{key:"transitionNotif",get:function(){return 300}},{key:"transitionNotifDisp",get:function(){return 3e3}},{key:"transitionFirstOn",get:function(){return 300}},{key:"transitionOff",get:function(){return 0}},{key:"notifOpenTranslateY",get:function(){return"translate3d( 0px, -80px, 0px )"}},{key:"notifCloseTranslateY",get:function(){return"translate3d( 0px, 0px, 0px )"}},{key:"multistreamWrapDefaultTop",get:function(){return 5}}]),e}();t.default=c},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={PRODUCTION:"production",DEVELOPMENT:"development",PRODUCTION_IP:"ip-172-31-27-3",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",EXT:"ext"},APP_TYPES:{PORTAL:"portal",EXTENSION:"extension"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=P(n(5)),i=P(n(21)),u=P(n(438)),l=P(n(27)),s=P(n(77)),c=P(n(191)),f=P(n(47)),d=P(n(192)),p=P(n(93)),h=P(n(22)),g=P(n(440)),y=P(n(67)),m=P(n(441)),v=P(n(136)),b=P(n(48)),x=P(n(78)),k=P(n(137)),w=P(n(135)),T=P(n(134)),S=P(n(193)),C=P(n(66)),E=P(n(194)),_=P(n(195)),O=P(n(196)),M=P(n(197));function P(e){return e&&e.__esModule?e:{default:e}}var L=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=new a.default(t),r=new l.default(t),o=new s.default(t),P=new c.default(t),L=new f.default(t),B=new d.default(t),I=new h.default(t),A=new g.default(t),R=new y.default(t),N=new m.default(t),j=new M.default(t),F=new v.default(t),D=new b.default(t),U=new x.default(t),W=new S.default(t),H=new C.default(t),z=new E.default(t),G=new _.default(t),V=new w.default(t),q=new T.default(t),K=new k.default(t),Y=new i.default(t);return{container:n,header:r,footer:o,postsSupporter:P,postsFooter:L,menuFooter:B,detailFooter:new u.default(t),menu:I,menuIndex:A,menuIndexList:R,menuUsers:N,extScreen:j,lockMenu:F,posts:D,post:U,notif:W,audio:V,video:q,board:H,links:z,link:G,innerNotif:K,detail:Y,icon:new p.default(t),loading:new O.default(t)}}return o(e,null,[{key:"fontBaseRGB",get:function(){return"rgb(160, 160, 160)"}},{key:"darkRGB",get:function(){return"rgb(0, 0, 0)"}},{key:"darkRGBA",get:function(){return"rgba(0, 0, 0, 0.4)"}},{key:"mono180RGB",get:function(){return"rgb(180, 180, 180)"}},{key:"mono192RGB",get:function(){return"rgb(192, 192, 192)"}},{key:"mono200RGB",get:function(){return"rgb(200, 200, 200)"}},{key:"mono205RGB",get:function(){return"rgb(205, 205, 205)"}},{key:"mono210RGB",get:function(){return"rgb(210, 210, 210)"}},{key:"mono211RGB",get:function(){return"rgb(211, 211, 211)"}},{key:"mono215RGB",get:function(){return"rgb(215, 215, 215)"}},{key:"mono220RGB",get:function(){return"rgb(220, 220, 220)"}},{key:"mono225RGB",get:function(){return"rgb(225, 225, 225)"}},{key:"mono230RGB",get:function(){return"rgb(230, 230, 230)"}},{key:"mono235RGB",get:function(){return"rgb(235, 235, 235)"}},{key:"mono240RGB",get:function(){return"rgb(240, 240, 240)"}},{key:"mono245RGB",get:function(){return"rgb(245, 245, 245)"}},{key:"mono250RGB",get:function(){return"rgb(250, 250, 250)"}},{key:"mono251RGB",get:function(){return"rgb(251, 251, 251)"}},{key:"mono252RGB",get:function(){return"rgb(252, 252, 252)"}},{key:"mono253RGB",get:function(){return"rgb(253, 253, 253)"}},{key:"mono254RGB",get:function(){return"rgb(254, 254, 254)"}},{key:"mono255RGB",get:function(){return"rgb(255, 255, 255)"}},{key:"mono180RGBA",get:function(){return"rgba(180, 180, 180, 0.96)"}},{key:"mono192RGBA",get:function(){return"rgba(192, 192, 192, 0.96)"}},{key:"mono200RGBA",get:function(){return"rgba(200, 200, 200, 0.96)"}},{key:"mono205RGBA",get:function(){return"rgba(205, 205, 205, 0.96)"}},{key:"mono210RGBA",get:function(){return"rgba(210, 210, 210, 0.96)"}},{key:"mono211RGBA",get:function(){return"rgba(211, 211, 211, 0.96)"}},{key:"mono215RGBA",get:function(){return"rgba(215, 215, 215, 0.96)"}},{key:"mono220RGBA",get:function(){return"rgba(220, 220, 220, 0.96)"}},{key:"mono225RGBA",get:function(){return"rgba(225, 225, 225, 0.96)"}},{key:"mono230RGBA",get:function(){return"rgba(230, 230, 230, 0.96)"}},{key:"mono235RGBA",get:function(){return"rgba(235, 235, 235, 0.96)"}},{key:"mono240RGBA",get:function(){return"rgba(240, 240, 240, 0.96)"}},{key:"mono245RGBA",get:function(){return"rgba(245, 245, 245, 0.96)"}},{key:"mono250RGBA",get:function(){return"rgba(250, 250, 250, 0.96)"}},{key:"mono252RGBA",get:function(){return"rgba(252, 252, 252, 0.96)"}},{key:"mono255RGBA",get:function(){return"rgba(255, 255, 255, 0.96)"}},{key:"twitterRGB",get:function(){return"rgba(76, 160, 235)"}},{key:"twitterRGBA",get:function(){return"rgba(76, 160, 235, 0.96)"}},{key:"facebookRGB",get:function(){return"rgba(73, 104, 173)"}},{key:"facebookRGBA",get:function(){return"rgba(73, 104, 173, 0.96)"}}]),o(e,null,[{key:"get",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{layout:{},content:{},animation:{}};return r({},e.layout,e.content,e.animation)}},{key:"getLayoutBase",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return r({},{display:"block",boxSizing:"border-box",overflow:"hidden",width:"inherit",height:"inherit",minWidth:"auto",minHeight:"auto",maxWidth:"inherit",maxHeight:"inherit",padding:0,margin:0,font:0,lineHeight:1,listStyle:"none",userSelect:"none",textDecoration:"none",verticalAlign:"baseline",borderCollapse:"collapse",borderSpacing:0,border:0,borderRadius:0,zIndex:1,align:"center"},e)}},{key:"getLayoutFlex",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"});return r({},n,t)}},{key:"getLayoutInlineFlex",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"inline-flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"});return r({},n,t)}},{key:"getLayoutTable",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"table"});return r({},n,t)}},{key:"getLayoutTableRow",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"table-row"});return r({},n,t)}},{key:"getLayoutTableCol",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"table-cell"});return r({},n,t)}},{key:"getLayoutFlexChild",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({width:"auto",height:"auto"});return r({},n,t)}},{key:"getLayoutBlock",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"block"});return r({},n,t)}},{key:"getLayoutInlineBlock",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"inline-block",align:"center",verticalAlign:"middle"});return r({},n,t)}},{key:"getLayoutInline",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getLayoutBase({display:"inline"});return r({},n,t)}},{key:"getContentBase",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.getFontBase();return r({},{letterSpacing:"1.5px",wordWrap:"breakWord",whiteSpace:"normal",quotes:"none",content:"none",cursor:"default"},n,t)}},{key:"getFontBase",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n={textAlign:"center",color:e.fontBaseRGB,font:"inherit",fontFamily:'"Myriad Set Pro", "Lucida Grande", "Helvetica Neue", "Helvetica", "Arial", "Verdana", "sans-serif"'};return r({},n,t)}},{key:"getAnimationBase",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={transition:a.default.transitionOff,transform:"translate3d(0px, 0px, 0px)"};return r({},t,e)}},{key:"trimUnit",value:function(e){return Number(e.toString().replace(/px|%|vw|vh|ms/,""))}}]),e}();t.default=L},function(e,t,n){var r=n(71)("wks"),o=n(51),a=n(4).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(32),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){e.exports=!n(6)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(3),o=n(146),a=n(34),i=Object.defineProperty;t.f=n(12)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(35);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(8)),o=a(n(436));function a(e){return e&&e.__esModule?e:{default:e}}var i=r.default.PRODUCTION,u=r.default.DEVELOPMENT,l=r.default.PRODUCTION_IP,s=r.default.PRODUCTION_DOMAIN,c=r.default.DEVELOPMENT_DOMAIN,f=r.default.SUB_DOMAINS,d=o.default.hostname(),p=d===l||d.indexOf(s)>=0?i:u,h=p===i?s:c,g=f.WWW+"."+h,y=f.DESC+"."+h,m=f.PORTAL+"."+h,v=f.CLIENT+"."+h,b=f.ASSETS+"."+h,x=f.AUTO+"."+h,k=f.EXT+"."+h,w=b+"/img/",T=b+"/icon/",S=b+"/js/",C=f.SESSION+"."+h;t.default={domain:h,env:p,wwwURL:g,descURL:y,portalURL:m,clientURL:v,assetsURL:b,autoURL:x,extURL:k,assetsImgPath:w,assetsIconPath:T,assetsJsPath:S,sessionURL:C,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",findOnePostCnt:30,findOneLimitCnt:300}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,[{key:"create",value:function(t){var n=this,o=this.constructor.name;e.getType(t);return Object.keys(t).forEach(function(a){var i=void 0,u=null,l=void 0,s=!1,c=!1,f=function(){},d=null;if("Object"===e.getType(t[a])){i=t[a];var p=0===Object.keys(i).length;s=i.isAcceptNull?i.isAcceptNull:s,c=i.isAcceptBlank?i.isAcceptBlank:c,u=!p&&i.def?i.def:u,d=p||!i.value&&""!==i.value?i:i.value,d=p&&u?u:d,l=e.getType(d),f=i.valid?i.valid:f}else u=d=t[a],s=s,c=c,l=e.getType(d),f=f;var h=function(t){var n=null,r=o+"."+a,i=d,u=l,p=t,h=e.getType(t);return h!==l&&(n="SCHEMA_TYPE : "+r+" [validType: "+l+"][paramsType: "+h+"]"),s&&null===t&&(n="SCHEMA_IS_ACCEPT_NULL :  "+r),c&&""===t&&(n="SCHEMA_IS_ACCEPT_BLANK :  "+r),"Function"===e.getType(f)&&f(t)&&(n="SCHEMA_YOUR_VALID_METHOD :  "+r),{pointer:r,validValue:i,validType:u,paramsValue:p,paramsType:h,error:n}},g=h(d),y=(g.pointer,g.validValue,g.validType,g.paramsValue,g.paramsType,g.error);if(null===y)Object.defineProperty(n,a,{get:function(){return d},set:function(e){var t=h(d);if(null===y)return r({},n,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},a,d=e));throw n.validWarn(t),y},enumerable:!0,configurable:!0});else{if(n.errorThrow)throw y;console.warn(y)}}),this}},{key:"canSet",value:function(e,t){var n=this[e];return!(this[e]=t).error&&(this[e]=n,!0)}},{key:"merge",value:function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];try{var a=e.getType(n),i=Object.keys(n);if(i.length>0){var u=r({},this);return i.forEach(function(e){t[e]!==n[e]&&t.canSet(e,n[e])&&(u[e]=n[e])}),"Array"===a?(u=Object.values(u),o?new this.constructor(u):u):o?new this.constructor(u):u}return n}catch(t){if(this.errorThrow)throw console.warn(n),console.warn(t),"BAD MERGE: "+e.getType(n)+" "+t;return console.warn(n),console.warn(t),console.warn("BAD MERGE: "+e.getType(n)+" "+t),n}}},{key:"toJSON",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,n={};return Object.keys(t).forEach(function(r){var o=t[r];"Object"===o.constructor.name&&(o.type||o.default||(o=e.toJSON(o))),o.default||""===o.default||0===o.default?n[r]=o.default:n[r]=o}),n}},{key:"forEach",value:function(e){return Object.values(this).forEach(e)}},{key:"map",value:function(e){return this.returnImmutable(Object.values(this).map(e),e)}},{key:"filter",value:function(e){return this.returnImmutable(Object.values(this).filter(e),e)}},{key:"reduce",value:function(e){return this.returnImmutable(Object.values(this).reduce(e),e)}},{key:"find",value:function(e){return Object.values(this).find(e)}},{key:"sort",value:function(e){return Object.values(this).sort(e)}},{key:"push",value:function(e){var t=Object.values(this);return t.push(e),this.returnImmutable(t)}},{key:"unshift",value:function(e){var t=Object.values(this);return t.unshift(e),this.returnImmutable(t)}},{key:"getShift",value:function(){var e=Object.values(this).shift();return this.returnImmutable(e)}},{key:"pop",value:function(e){var t=Object.values(this);return t.pop(e),this.returnImmutable(t)}},{key:"returnImmutable",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};return void 0===e?new this.constructor({}):0===e.length&&0===Object.keys(this).length?String(t).indexOf("createElement")>0?[]:new this.constructor(e):e[0]&&e[0].$$typeof&&"Symbol"===e[0].$$typeof.constructor.name?e:new this.constructor(e)}},{key:"validWarn",value:function(e){console.warn("##########################"),console.warn("#"+e.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(e.validType),console.warn("### initializedValidValue"),console.warn(e.validValue),console.warn("### paramsType"),console.warn(e.paramsType),console.warn("### paramsValue"),console.warn(e.paramsValue),console.warn("##########################")}}],[{key:"getType",value:function(e){return null===e?"Null":void 0===e?"Undefined":e.constructor.name}},{key:"isSet",value:function(t){return"Undefined"!==e.getType(t)}},{key:"getBool",value:function(e){return"boolean"==typeof e?e:"true"===e}},{key:"isAnonymousFunc",value:function(e){var t=e.toString();return"function () {}"===t||"()=>{}"===t}}]),e}();t.default=a},function(e,t,n){var r=n(13),o=n(50);e.exports=n(12)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(4),o=n(18),a=n(23),i=n(51)("src"),u=n(228),l=(""+u).split("toString");n(29).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var s="function"==typeof n;s&&(a(n,"name")||o(n,"name",t)),e[t]!==n&&(s&&(a(n,i)||o(n,i,e[t]?""+e[t]:l.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[i]||u.call(this)})},function(e,t,n){var r=n(0),o=n(6),a=n(35),i=/"/g,u=function(e,t,n,r){var o=String(a(e)),u="<"+t;return""!==n&&(u+=" "+n+'="'+String(r).replace(i,"&quot;")+'"'),u+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(u),r(r.P+r.F*o(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(p(n(8)),p(n(1))),i=p(n(9)),u=p(n(5)),l=p(n(22)),s=p(n(133)),c=p(n(190)),f=p(n(27)),d=p(n(45));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=t.app,r={},o=e.getDetailClass(n);return r["self"+e.detailRightSelfKey]=e.getDetailRightSelf(t),r["self"+e.detailModalSelfKey]=e.getDetailModalSelf(t),r.header=o.getHeader(t),r.headerP=o.getHeaderP(t),r.body=o.getBody(t),r.meta=o.getMeta(t),r.img=o.getImg(t),r.description=o.getDescription(t),r.metaContentTypeWrap=o.getMetaContentTypeWrap(t),r.metaContentType=o.getMetaContentType(t),r.connection=o.getConnection(t),r.analyze=o.getAnalyze(t),r.analyzeRow=o.getAnalyzeRow(t),r.analyzeCol=o.getAnalyzeCol(t),r.analyzeLabel=o.getAnalyzeLabel(t),r.analyzeValue=o.getAnalyzeValue(t),r.analyzeHr=o.getAnalyzeHr(t),r.h1s=o.getH1s(t),r.h1sLi=o.getH1sLi(t),r.footer=o.getFooter(t),r.footerChild=o.getFooterChild(t),r.footerChildLike=o.getFooterChildLike(t),r.footerChildMoney=o.getFooterChildMoney(t),r.footerChildShare=o.getFooterChildShare(t),r.metaItems=o.getMetaItems(t),r}return o(e,null,[{key:"getDetailClass",value:function(t){return e.isRightDetail(t)?s.default:c.default}},{key:"isRightDetail",value:function(t){return t.screenMode===e.screenModeOfRightDetail}},{key:"detailRightSelfKey",get:function(){return"Right"}},{key:"detailModalSelfKey",get:function(){return"Modal"}},{key:"screenModeOfRightDetail",get:function(){return a.default.screenModeLargeLabel}},{key:"padding",get:function(){return 20}},{key:"margin",get:function(){return 5}}]),o(e,null,[{key:"getDetailModalSelf",value:function(e){var t=e.app,n=a.default.getScreenMode(t.width),r=n===a.default.screenModeLargeLabel?"none":"block",o=n===a.default.scrennModeUndispLabel||n===a.default.screenModeSmallLabel?"0px":l.default.baseWidth,s=(t.extensionMode,a.default.extensionModeExtBottomLabel,u.default.reliefRGB),f=c.default.getHeight(t),d=i.default.getLayoutBlock({display:r,position:"fixed",top:"100%",left:o,width:c.default.getWidth(t),height:f,margin:c.default.getMargin(t),background:s,border:u.default.border,borderBottom:0,borderRadius:u.default.radiuses,WebkitOverflowScrolling:"touch",zIndex:1}),p=i.default.getContentBase(),h=i.default.getAnimationBase({transform:c.default.getTransform(t),transition:u.default.getTransition(t)});return i.default.get({layout:d,content:p,animation:h})}},{key:"getDetailRightSelf",value:function(e){var t=e.app,n=i.default.getLayoutBlock({position:"fixed",top:"0px",right:"0px",width:s.default.getWidth(t),minWidth:s.default.getWidth(t),height:"calc( 100% - "+f.default.headerHeight+"px )",WebkitOverflowScrolling:"touch",background:u.default.calmRGB,overflow:"scroll",margin:f.default.headerHeight+"px 0px 0px 0px",borderLeft:u.default.border,zIndex:0}),r=i.default.getContentBase(),o=i.default.getAnimationBase({transition:"0ms"});return i.default.get({layout:n,content:r,animation:o})}},{key:"getFooterBorders",value:function(e){return{borderTop:u.default.border}}},{key:"getFooterPositions",value:function(e){switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:return{};case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:return{position:"absolute",right:"0px",bottom:"0px"}}}},{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n="100%";switch(e.screenMode){case a.default.screenModeLargeLabel:n="30%"}return t?n:i.default.trimUnit(n)}},{key:"getTransform",value:function(t){return e.getDetailClass(t).getTransform(t)}},{key:"getHeader",value:function(){var e=i.default.getLayoutFlex({width:"100%",height:f.default.headerHeight,maxHeight:f.default.headerHeight,borderBottom:u.default.border,background:u.default.whiteRGB,padding:"0px 20px"}),t=i.default.getContentBase({}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getHeaderP",value:function(){var e=i.default.getLayoutBlock({width:"100%",height:"auto",maxHeight:f.default.headerHeight}),t=i.default.getContentBase({lineHeight:"1.8",fontSize:"16px",textOverflow:"ellipsis"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getBody",value:function(){var e=i.default.getLayoutBlock({overflow:"scroll",width:"100%",height:"calc( 100% - "+2*f.default.headerHeight+"px )",background:u.default.reliefRGB,zIndex:0}),t=i.default.getContentBase(),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getMeta",value:function(){var e=i.default.getLayoutBlock({width:"100%",height:"initial",background:u.default.whiteRGBA,borderBottom:u.default.border}),t=i.default.getContentBase(),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getImg",value:function(){var e=i.default.getLayoutBlock({width:"100%",height:"30vh",maxHeight:"400px",backgroundColor:u.default.whiteRGB,backgroundImage:"url(//"+d.default.assetsImgPath+"talkn_logo1.png)",backgroundPosition:"center center",backgroundSize:"60%",backgroundRepeat:"no-repeat"}),t=i.default.getContentBase(),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getDescription",value:function(){var e=i.default.getLayoutBlock({width:"90%",height:"initial",margin:"7%"}),t=i.default.getContentBase({lineHeight:2,fontSize:"16px",textAlign:"left"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getMetaContentTypeWrap",value:function(){var t=i.default.getLayoutFlex({flexDirection:"column",alignItems:"flex-end",width:"initial",height:"initial",borderRadius:"10px",margin:2*e.margin+"% "+e.margin+"%"}),n=i.default.getContentBase({fontsize:"14px",textAlign:"right"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getMetaContentType",value:function(){var e=i.default.getLayoutBlock({background:u.default.reliefRGB,width:"initial",height:"initial",margin:"10px 0px",padding:"10px 20px 10px 20px",justifyContent:"flex-end",borderRadius:"30px"}),t=i.default.getContentBase({fontSize:"12px",color:u.default.whiteRGB,textAlign:"right"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getConnection",value:function(){var e=i.default.getLayoutBlock({width:"100%",height:"initial",background:u.default.whiteRGB,borderTop:u.default.border,borderBottom:u.default.border,padding:"15px",margin:"0px 0px 45px 0px"}),t=i.default.getContentBase({fontSize:"14px",textAlign:"left",lineHeight:"30px",wordBreak:"break-word"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getAnalyze",value:function(){var e=i.default.getLayoutTable({width:"100%",height:"initial",background:u.default.whiteRGB,borderTop:u.default.border,borderBottom:u.default.border}),t=i.default.getContentBase({textAlign:"center"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getAnalyzeRow",value:function(){var e=i.default.getLayoutTableRow({}),t=i.default.getContentBase({}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getAnalyzeCol",value:function(){var e=i.default.getLayoutTableCol({width:"33.3%",height:"120px",verticalAlign:"middle",margin:"40px auto 40px auto"}),t=i.default.getContentBase({}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getAnalyzeLabel",value:function(){var e=i.default.getLayoutBlock({width:"initial",height:"initial",marginBottom:"20px"}),t=i.default.getContentBase({lineHeight:"14px",fontSize:"12px"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getAnalyzeValue",value:function(){var e=i.default.getLayoutBlock({margin:"0 auto",width:"initial",height:"initial"}),t=i.default.getContentBase({fontSize:"1.8em",color:u.default.themeRGBA}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getAnalyzeHr",value:function(){var e=i.default.getLayoutBlock({width:"70%",height:"initial",margin:"10px auto 10px auto",borderTop:"1px solid "+u.default.borderRGB}),t=i.default.getContentBase({}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getH1s",value:function(){var t=i.default.getLayoutBlock({width:"100%",height:"initial",margin:e.margin+"px auto",background:u.default.whiteRGB,borderTop:u.default.border,borderBottom:u.default.border}),n=i.default.getContentBase({textAlign:"left"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getH1sLi",value:function(){var t=i.default.getLayoutBlock({width:"90%",height:"initial",margin:"5px "+e.margin+"% 5px "+e.margin+"%"}),n=i.default.getContentBase({fontSize:"14px",lineHeight:2,textAlign:"left"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getFooter",value:function(t){var n=t.app,o=e.getFooterPositions(n),a=e.getFooterBorders(n),l=i.default.getLayoutFlex(r({width:"100%",background:u.default.offWhiteRGB,height:f.default.headerHeight,"zÎndex":"1px"},o,a)),s=i.default.getContentBase(),c=i.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px)"});return i.default.get({layout:l,content:s,animation:c})}},{key:"getFooterChild",value:function(){var e=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),t=i.default.getContentBase({fontSize:"0.5em",cursor:"pointer"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getFooterChildLike",value:function(e){e.app;var t=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=i.default.getContentBase({fontSize:"0.5em"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getFooterChildMoney",value:function(e){e.app;var t=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=i.default.getContentBase({fontSize:"0.5em"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getFooterChildShare",value:function(e){e.app;var t=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=i.default.getContentBase({fontSize:"0.5em"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getMetaItems",value:function(t){t.app;var n=i.default.getLayoutFlex({width:"90%",margin:e.margin+"%"}),r=i.default.getContentBase({}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:r,animation:o})}}]),e}();t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=c(n(9)),i=c(n(5)),u=c(n(27)),l=(c(n(8)),c(n(1))),s=c(n(76));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),wrapComponent:e.getWrapComponent(t),footer:e.getFooter(t),footerChild:e.getFooterChild(t),footerChildMoney:e.getFooterChildMoney(t)}}return o(e,null,[{key:"getWidth",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=0;switch(t.screenMode){case l.default.screenModeUndispLabel:case l.default.screenModeSmallLabel:r="100.0%";break;case l.default.screenModeMiddleLabel:case l.default.screenModeLargeLabel:r=e.baseWidth}return n?a.default.trimUnit(r):r}},{key:"getTransform",value:function(e){var t="translate3d( 0px, 0px, 0px )";switch(e.screenMode){case l.default.screenModeUndispLabel:case l.default.screenModeSmallLabel:t=e.isOpenMenu?"translate3d( 0%, 0%, 0px )":"translate3d( -100% , 0%, 0px )";break;case l.default.screenModeMiddleLabel:e.isOpenDetail,t="translate3d( 0px ,0px, 0px )";break;case l.default.screenModeLargeLabel:t="translate3d( 0px ,0px, 0px )"}return t}},{key:"baseWidth",get:function(){return"300px"}}]),o(e,null,[{key:"getSelf",value:function(t){var n=t.app,r=n.screenMode===l.default.screenModeUndispLabel?"none":"block",o=n.extensionMode===l.default.extensionModeExtBottomLabel?"none":i.default.reliefRGB,s=a.default.getLayoutBlock({display:r,position:"fixed",top:"0px",left:"0px",width:e.getWidth(n),minWidth:e.getWidth(n),height:"100%",minHeight:"auto",maHeight:"auto",margin:u.default.headerHeight+"px 0px 0px 0px",background:o,WebkitOverflowScrolling:"touch",overflow:"scroll"}),c=a.default.getAnimationBase({transition:i.default.getTransition(n),transform:e.getTransform(n)});return a.default.get({layout:s,content:{},animation:c})}},{key:"getWrapComponent",value:function(e){var t=e.app,n=t.extensionMode===l.default.extensionModeExtBottomLabel?"90%":"100%",o=t.screenMode===l.default.screenModeUndispLabel||t.screenMode===l.default.screenModeSmallLabel?{borderRight:i.default.border,borderLeft:i.default.border}:{borderLeft:i.default.border},u=a.default.getLayoutBlock(r({width:n,minWidth:"inherit",maxWidth:"inherit",height:"calc( 100% - "+2*s.default.headerHeight+"px )",margin:"0 auto"},o)),c=a.default.getAnimationBase();return a.default.get({layout:u,content:{},animation:c})}},{key:"getWrap",value:function(){var e=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:i.default.border}),t=a.default.getContentBase({textAlign:"left"}),n=a.default.getAnimationBase({});return a.default.get({layout:e,content:t,animation:n})}},{key:"getFooter",value:function(e){var t=e.app,n=(t.screenMode===l.default.screenModeUndispLabel||(t.screenMode,l.default.screenModeSmallLabel),{border:i.default.border}),o=a.default.getLayoutFlex(r({width:"100%",background:i.default.offWhiteRGB,height:s.default.headerHeight+"px"},n)),u=a.default.getContentBase({}),c=a.default.getAnimationBase();return a.default.get({layout:o,content:u,animation:c})}},{key:"getFooterChild",value:function(){var e=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),t=a.default.getContentBase({fontSize:"0.5em"}),n=a.default.getAnimationBase();return a.default.get({layout:e,content:t,animation:n})}},{key:"getFooterChildMoney",value:function(){var e=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),t=a.default.getContentBase({fontSize:"0.5em"}),n=a.default.getAnimationBase();return a.default.get({layout:e,content:t,animation:n})}}]),e}();t.default=f},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(72),o=n(35);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(73),o=n(50),a=n(24),i=n(34),u=n(23),l=n(146),s=Object.getOwnPropertyDescriptor;t.f=n(12)?s:function(e,t){if(e=a(e),t=i(t,!0),l)try{return s(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(23),o=n(14),a=n(104)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(s(n(8)),s(n(1))),i=s(n(9)),u=s(n(5)),l=s(n(47));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),headTab:e.getHeadTab(t),rightIcon:e.getRightIcon(t),leftIcon:e.getLeftIcon(t),userIcon:e.getUserIcon(t),userIconImg:e.getUserIconImg(t),childAnalyzeWrap:e.getChildAnalyzeWrap(t),childAnalyzeType:e.getChildAnalyzeType(t),childAnalyzeCnt:e.getChildAnalyzeCnt(t),childTalknLogo:e.getChildTalknLogo(t)}}return o(e,null,[{key:"selfHeight",get:function(){return"100%"}},{key:"headerHeight",get:function(){return 45}},{key:"notifHeight",get:function(){return 20}},{key:"notifOpenTranslate",get:function(){return 20}},{key:"widthRatio",get:function(){return.94}}]),o(e,null,[{key:"getNotifTranslateY",value:function(t){return t.isOpenNotif?e.notifOpenTranslateY:e.notifCloseTranslateY}},{key:"getMargin",value:function(e){return e.extensionMode===a.default.extensionModeExtBottomLabel?"0px 5% 0px 5%":"0 auto"}},{key:"getChildAnalyzeRight",value:function(e){switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:return"5%";case a.default.screenModeMiddleLabel:return"10%";case a.default.screenModeLargeLabel:return"15%"}}},{key:"getChildAnalyzePositions",value:function(t){return t.extensionMode===a.default.extensionModeExtBottomLabel||t.extensionMode===a.default.extensionModeExtModalLabel?{position:"absolute",top:"0px",margin:"8px"}:{position:"absolute",top:"0px",right:e.getChildAnalyzeRight(t),margin:"8px"}}},{key:"getBorderRadius",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.extensionMode===a.default.extensionModeExtBottomLabel?"100%"===e.extensionWidth?"0px 0px 0px 0px":u.default.radius+" "+u.default.radius+" 0px 0px":e.extensionMode===a.default.extensionModeExtModalLabel?u.default.radius+" "+u.default.radius+" 0px 0px":0}},{key:"getSelf",value:function(t){var n=t.app,r=n.extensionMode===a.default.extensionModeExtBottomLabel?"90%":"100%",o=e.getBorderRadius(n),l=i.default.getLayoutFlex({position:"fixed",top:"0px",width:r,height:e.headerHeight+"px",border:u.default.border,borderRadius:o,background:u.default.whiteRGB,margin:e.getMargin(n),zIndex:1e3}),s=i.default.getContentBase({textAlign:"center"}),c=i.default.getAnimationBase({transform:e.getNotifTranslateY(n)});return i.default.get({layout:l,content:s,animation:c})}},{key:"getUserIcon",value:function(e){var t=i.default.getLayoutBlock({flexGrow:2,height:"auto"}),n=i.default.getAnimationBase();return i.default.get({layout:t,content:{},animation:n})}},{key:"getUserIconImg",value:function(e){var t=i.default.getLayoutInlineBlock({width:"30px",margin:"0px 10px 0px 0px"}),n=i.default.getAnimationBase();return i.default.get({layout:t,content:{},animation:n})}},{key:"getHeadTab",value:function(e){var t=i.default.getLayoutFlex({justifyContent:"center",flexGrow:2,height:"100%"}),n=i.default.getAnimationBase();return i.default.get({layout:t,content:{},animation:n})}},{key:"getRightIcon",value:function(e){var t=i.default.getLayoutBlock({flexFlow:"column",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),n=i.default.getAnimationBase();return i.default.get({layout:t,content:{},animation:n})}},{key:"getLeftIcon",value:function(e){var t=i.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),n=i.default.getContentBase({}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getChildAnalyzeWrap",value:function(t){var n=t.app,o=e.getChildAnalyzePositions(n),a=i.default.getLayoutInlineBlock(r({},o,{width:"40px",height:"40px"})),u=i.default.getContentBase({}),l=i.default.getAnimationBase();return i.default.get({layout:a,content:u,animation:l})}},{key:"getChildAnalyzeType",value:function(e){var t=e.app.screenMode===a.default.screenModeSmallLabel?"8px":"12px",n=i.default.getLayoutBlock({height:"10px",marginBottom:"6px"}),r=i.default.getContentBase({fontSize:t,color:u.default.themeRGBA,fontWeight:"bold"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:r,animation:o})}},{key:"getChildAnalyzeCnt",value:function(e){var t=e.app,n=t.extensionMode===a.default.screenModeUndispLabel||t.screenMode===a.default.screenModeSmallLabel?{fontSize:"10px",color:u.default.themeRGBA}:{fontSize:"12px"},o=i.default.getLayoutBlock({height:"10px"}),l=i.default.getContentBase(r({},n,{color:u.default.themeRGBA,fontWeight:"bold"})),s=i.default.getAnimationBase();return i.default.get({layout:o,content:l,animation:s})}},{key:"getChildTalknLogo",value:function(e){var t=i.default.getLayoutInlineBlock({position:"absolute",width:"45px",height:"45px"}),n=i.default.getContentBase({color:u.default.themeRGBA,fontWeight:"bold"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getNotif",value:function(e){var t=e.app,n=i.default.getLayoutBlock({position:"relative",top:l.default.selfHeight+"px",width:"50%",height:u.default.notifHeight,margin:"0 auto",zIndex:"10",background:"rgba(0, 0, 0, 0.4)",borderRadius:"20px"}),r=i.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",fontSize:"12px",lineHeight:2,cursor:"pointer"}),o=i.default.getAnimationBase({transition:u.default.getTransition(t)});return i.default.get({layout:n,content:r,animation:o})}},{key:"notifOpenTranslateY",get:function(){return"translate3d( 0px, "+e.headerHeight+"px, 0px )"}},{key:"notifCloseTranslateY",get:function(){return"translate3d( 0px, 0px, 0px )"}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();a(n(1)),a(n(185));function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,null,[{key:"getRequestState",value:function(t,n,o){var a=t.replace(e.CLIENT_TO_SERVER_EMIT,""),u=e.map[a],l=u.requestPublicState,s=u.requestPrivateState,c=i({},e.REDUX_ACTION_KEY,a);return Object.keys(s).length>0&&Object.keys(s).forEach(function(e){var t=s[e];c[e]||(c[e]={}),"*"===t?c=r({},c,i({},e,n[e].toJSON())):t.forEach(function(t){var r=t.columnName,a=t.valid,i=n[e][r],u=!!a&&a(i);if(u)throw"VALID PRIVATE SEQUENCE: "+e+"."+r+"="+i+" ["+u+"]";if(!c[e][r]){var l=n[e][r];!n[e][r]&&o&&o[e]&&o[e][r]&&(l=o[e][r]),c[e][r]=l}})}),Object.keys(l).length>0&&Object.keys(l).forEach(function(e){var t=l[e];c[e]||(c[e]={}),t.forEach(function(t){var r=t.columnName,a=t.valid;if(!n[e].canSet(r,o))throw"VALID PUBLIC STATE: "+e+"."+r+"="+o;var i=!!a&&a(o);if(i)throw"VALID PUBLIC SEQUENCE: "+e+"."+r+"="+o+" ["+i+"]";c[e][r]||(c[e][r]=o)})}),c}},{key:"getResponseState",value:function(t,n,o){var a=n.type,u=e.map[a]["response"+t+"State"],l=i({},e.REDUX_ACTION_KEY,a);return Object.keys(u).forEach(function(e){if(!o[e])throw"SEQUENCE ERROR: NO_UPDATE_STATE_KEY: "+n.type+": "+e;var t=u[e],a=o[e];switch(a.constructor.name){case"model":delete(a=a.toJSON())._id,delete a.__v}"*"===t?l=r({},l,i({},e,a)):t.forEach(function(t){if(void 0===o[e][t])throw"SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: "+n.type+": "+e+"."+t;l=r({},l,i({},e,r({},l[e],i({},t,o[e][t]))))})}),l}},{key:"getRequestActionState",value:function(e,t){return r({},t,{type:e})}},{key:"TALKN_PROTOCOL",get:function(){return"talkn:"}},{key:"HTTP_PROTOCOL",get:function(){return"http:"}},{key:"HTTPS_PROTOCOL",get:function(){return"https:"}},{key:"UNKNOWN_PROTOCOL",get:function(){return"????:"}},{key:"CATCH_ME_KEY",get:function(){return"@CATCH_ME"}},{key:"CLIENT_TO_SERVER_EMIT",get:function(){return"CLIENT_TO_SERVER[EMIT]:"}},{key:"SERVER_TO_CLIENT_EMIT",get:function(){return"SERVER_TO_CLIENT[EMIT]:"}},{key:"SERVER_TO_CLIENT_BROADCAST",get:function(){return"SERVER_TO_CLIENT[BROADCAST]:"}},{key:"CLIENT_TO_CLIENT_EMIT",get:function(){return"CLIENT_TO_CLIENT[EMIT]:"}},{key:"PREFIX_REQUEST",get:function(){return"REQUEST:"}},{key:"PREFIX_RESPONSE",get:function(){return"RESPONSE:"}},{key:"REDUX_ACTION_KEY",get:function(){return"type"}},{key:"map",get:function(){return{initClientState:{requestPublicState:{},requestPrivateState:{thread:[{columnName:"connection"}]},responseEmitState:{user:["uid"],setting:"*"},responseBroadcastState:{}},find:{requestPublicState:{thread:[{columnName:"connection"}]},requestPrivateState:{thread:[{columnName:"protocol"},{columnName:"host"},{columnName:"hasSlash"}],app:[{columnName:"multistream"},{columnName:"rootConnection"},{columnName:"dispThreadType"},{columnName:"actioned"},{columnName:"offsetFindId"}]},responseEmitState:{posts:"*",thread:"*",app:["dispThreadType","offsetFindId","connectioned","multistreamed"]},responseBroadcastState:{thread:["watchCnt","connection"]}},getMore:{requestPublicState:{},requestPrivateState:{thread:[{columnName:"connection"}],app:[{columnName:"multistream"},{columnName:"dispThreadType"},{columnName:"offsetFindId"},{columnName:"multistreamed"}]},responseEmitState:{thread:"*",app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{thread:[{columnName:"connection"}]},requestPrivateState:{thread:[{columnName:"protocol"},{columnName:"host"},{columnName:"hasSlash"}],app:[{columnName:"connectioned"},{columnName:"rootConnection"},{columnName:"multistream"},{columnName:"dispThreadType"},{columnName:"offsetFindId"},{columnName:"multistreamed"}]},responseEmitState:{app:["connectioned"]},responseBroadcastState:{thread:["watchCnt","connection"]}},changeThreadDetail:{requestPublicState:{thread:[{columnName:"connection"}]},requestPrivateState:{},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{thread:[{columnName:"connection"}]},requestPrivateState:{},responseEmitState:{thread:"*"},responseBroadcastState:{}},findMenuIndex:{requestPublicState:{thread:[{columnName:"connection"}]},requestPrivateState:{},responseEmitState:{menuIndex:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:[{columnName:"uid"},{columnName:"utype"}],app:[{columnName:"multistream"},{columnName:"inputPost"},{columnName:"inputCurrentTime"},{columnName:"dispThreadType"},{columnName:"multistreamed"}],thread:[{columnName:"title"},{columnName:"protocol"},{columnName:"connection"},{columnName:"connections"},{columnName:"favicon"},{columnName:"contentType"}]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:"*",menuIndex:"*"}},updateThreadServerMetas:{requestPublicState:{thread:[{columnName:"serverMetas"}]},requestPrivateState:{thread:[{columnName:"host"},{columnName:"protocol"},{columnName:"connection"}],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:[{columnName:"requestLoginType"}]},requestPrivateState:{user:[i({columnName:"uid"},"columnName","href")]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["watchCnt","connection"]}}}}}]),e}();t.default=u},function(e,t){var n=e.exports={version:"2.6.4"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(15);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){var r=n(7);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(0),o=n(29),a=n(6);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],i={};i[e]=t(n),r(r.S+r.F*a(function(){n(1)}),"Object",i)}},function(e,t,n){var r=n(30),o=n(72),a=n(14),i=n(11),u=n(120);e.exports=function(e,t){var n=1==e,l=2==e,s=3==e,c=4==e,f=6==e,d=5==e||f,p=t||u;return function(t,u,h){for(var g,y,m=a(t),v=o(m),b=r(u,h,3),x=i(v.length),k=0,w=n?p(t,x):l?p(t,0):void 0;x>k;k++)if((d||k in v)&&(y=b(g=v[k],k,m),e))if(n)w[k]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return k;case 2:w.push(g)}else if(c)return!1;return f?-1:s||c?c:w}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(2),u=c(i),l=c(n(93)),s=c(n(17));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),a(t,null,[{key:"generateImageIcon",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Twitter",n=arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(l.default["get"+e]){var a=o.onClick?o.onClick:function(){},i=o.href?o.href:"",c=t.getOveredStyle(l.default["get"+e](r,o),n);return s.default.isAnonymousFunc(a)?""!==i?u.default.createElement("a",{href:i,"data-component-type":"Icon"+e,style:c}):u.default.createElement("div",{"data-component-type":"Icon"+e,style:c}):u.default.createElement("div",{"data-component-type":"Icon"+e,onClick:a,style:c})}return null}},{key:"getOveredStyle",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(t).forEach(function(n){e[n]&&("object"===o(e[n])?e[n]=r({},e[n],t[n]):e[n]=t[n])}),e}},{key:"smallSize",get:function(){return l.default.smallSize}},{key:"middleSize",get:function(){return l.default.middleSize}},{key:"largeSize",get:function(){return l.default.largeSize}},{key:"bigSize",get:function(){return l.default.bigSize}}]),a(t,null,[{key:"getDecolationProps1",value:function(e,t,n){return{onMouseOver:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 20px rgba(240, 240, 240, 0.7 ) inset",transition:"200ms",transform:"scale( 1 )",borderRadius:"100px",cursor:"pointer"}})},onMouseLeave:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 0px rgba(240, 240, 240, 0.7)",transition:"600ms",transform:"scale( 1 )",borderRadius:"100px",cursor:"default"}})},onMouseDown:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 30px rgba(235, 235, 235, 0.7) inset ",transform:"scale( 0.8 )",borderRadius:"100px",cursor:"pointer"}})},onMouseUp:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 20px rgba(240, 240, 240, 0.7) inset",transform:"scale( 1 )",borderRadius:"100px",cursor:"pointer"}})}}}},{key:"getDecolationProps2",value:function(e,t,n){return{onMouseOver:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 20px rgba(200, 200, 200, 0.7 ) inset",transition:"200ms",transform:"scale( 1 )",borderRadius:"0px",cursor:"pointer"}})},onMouseLeave:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 0px rgba(220, 220, 220, 0.7)",transition:"600ms",transform:"scale( 1 )",borderRadius:"0px",cursor:"default"}})},onMouseDown:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 30px rgba(200, 200, 200, 0.7) inset ",transform:"scale( 0.8 )",borderRadius:"0px",cursor:"pointer"}})},onMouseUp:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 20px rgba(240, 240, 240, 0.7) inset",transform:"scale( 1 )",borderRadius:"0px",cursor:"pointer"}})}}}},{key:"getDecolationProps3",value:function(e,t,n){return{onMouseOver:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 20px rgba(240, 240, 240, 0.7 ) inset",transition:"200ms",transform:"scale( 1 )",cursor:"pointer"}})},onMouseLeave:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 0px rgba(240, 240, 240, 0.7)",transition:"600ms",transform:"scale( 1 )",cursor:"default"}})},onMouseDown:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 30px rgba(235, 235, 235, 0.7) inset ",transform:"scale( 0.8 )",cursor:"pointer"}})},onMouseUp:function(){talknAPI.updateStyle({styleKey:e,eleType:t,tagName:n,style:{boxShadow:"0px 0px 20px rgba(240, 240, 240, 0.7) inset",transform:"scale( 1 )",cursor:"pointer"}})}}}},{key:"getEmpty",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=t.getOveredStyle(l.default.getEmpty(n,r),e);return u.default.createElement("div",{"data-component-type":"IconEmpty",style:o})}},{key:"getMultistreamIcon",value:function(e){var n=e.state,r=n.style,o=n.app,a=t.getThunder(l.default.getThunder(n));return"Index"===o.menuComponent&&o.isRootConnection?u.default.createElement("div",{"data-component-name":"multistreamIcon",style:r.container.multistreamIconWrap},a):null}},{key:"getTwitter",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("Twitter",e,n,r)}},{key:"getFacebook",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("Facebook",e,n,r)}},{key:"getAppstore",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("Appstore",e,n,r)}},{key:"getAndroid",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("Android",e,n,r)}},{key:"getHome",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("Home",e,n,r)}},{key:"getGraph",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=r.onClick?r.onClick:function(){},a=t.getOveredStyle(l.default.getGraph(n,r),e);return u.default.createElement("div",{"data-component-type":"IconGraph",onClick:o,style:a})}},{key:"getTalkn",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("Talkn",e,n,r)}},{key:"getTalknLogo",value:function(e){return u.default.createElement("div",{"data-component-type":"IconTalknLogo",style:e.img})}},{key:"getChromeExtension",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.generateImageIcon("ChromeExtension",e,n,r)}},{key:"getTag",value:function(e){return u.default.createElement("div",{"data-component-type":"IconTag",style:e.div},u.default.createElement("div",{style:e.left}),u.default.createElement("div",{style:e.right}),u.default.createElement("div",{style:e.bar}))}},{key:"getHomeCss",value:function(e){return u.default.createElement("div",{"data-component-type":"IconHomeCss",style:e.div},u.default.createElement("div",{style:e.leaf}),u.default.createElement("div",{style:e.base}),u.default.createElement("div",{style:e.door}))}},{key:"getSearch",value:function(e){return u.default.createElement("div",{"data-component-type":"IconSearch",style:e.div},u.default.createElement("span",{style:e.circle}),u.default.createElement("span",{style:e.bar}))}},{key:"getUser",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.getOveredStyle(l.default.getUser(),e);return u.default.createElement("div",{"data-component-type":"IconUser",style:n.div},u.default.createElement("span",{style:n.bottom}),u.default.createElement("span",{style:n.top}))}},{key:"getHeaderUser",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.getOveredStyle(l.default.getHeaderUser(),e);return u.default.createElement("div",{"data-component-type":"IconUser",style:n.div},u.default.createElement("span",{style:n.bottom}),u.default.createElement("span",{style:n.top}))}},{key:"getLogs",value:function(e){var n=t.getOveredStyle(l.default.getLogs(),e);return u.default.createElement("div",{"data-component-type":"IconLogs",style:n.div},u.default.createElement("div",{style:n.foot1},u.default.createElement("span",{style:n.foot1Top}),u.default.createElement("span",{style:n.foot1Bottom}),u.default.createElement("span",{style:n.foot1Space})),u.default.createElement("div",{style:n.foot2},u.default.createElement("span",{style:n.foot2Top}),u.default.createElement("span",{style:n.foot2Bottom}),u.default.createElement("span",{style:n.foot2Space})))}},{key:"getSetting",value:function(e){var n=t.getOveredStyle(l.default.getSetting(),e);return u.default.createElement("div",{"data-component-type":"IconSetting",style:n.div},u.default.createElement("div",{style:n.wing1}),u.default.createElement("div",{style:n.wing2}),u.default.createElement("div",{style:n.wing3}),u.default.createElement("div",{style:n.wing4}),u.default.createElement("div",{style:n.wing5}),u.default.createElement("div",{style:n.wing6}),u.default.createElement("div",{style:n.wing7}),u.default.createElement("div",{style:n.wing8}),u.default.createElement("div",{style:n.circle}))}},{key:"getMenu",value:function(e){return u.default.createElement("div",{"data-component-type":"IconMenu",style:e.div},u.default.createElement("div",{style:e.dot}),u.default.createElement("div",{style:e.dot}),u.default.createElement("div",{style:e.dot}))}},{key:"getIndex",value:function(e){var n=t.getOveredStyle(l.default.getIndex(),e);return u.default.createElement("div",{"data-component-type":"IconIndex",style:n.div},u.default.createElement("div",{style:n.wrap},u.default.createElement("span",{style:n.top}),u.default.createElement("span",{style:n.middle}),u.default.createElement("span",{style:n.bottom})))}},{key:"getDetail",value:function(e){return u.default.createElement("div",{"data-component-type":"IconDetail",style:e.div},u.default.createElement("div",{style:e.wrap},u.default.createElement("span",{style:e.bar1}),u.default.createElement("span",{style:e.bar2}),u.default.createElement("span",{style:e.bar3}),u.default.createElement("span",{style:e.bar4}),u.default.createElement("span",{style:e.mekuri})))}},{key:"getThunder",value:function(e){return u.default.createElement("div",{"data-component-type":"IconThunder",style:e.div},u.default.createElement("div",{"data-component-type":"IconThunderWrap",style:e.wrap},u.default.createElement("span",{"data-component-type":"IconThunderTop",style:e.top}),u.default.createElement("span",{"data-component-type":"IconThunderBottom",style:e.bottom})))}},{key:"getBubble",value:function(e){return u.default.createElement("div",{"data-component-type":"IconBubbleDiv",style:e.div},u.default.createElement("div",{"data-component-type":"IconBubble",style:e.bubble}),u.default.createElement("div",{"data-component-type":"IconBubbleBar",style:e.bubbleBar}))}},{key:"getPlay",value:function(e){return u.default.createElement("div",{"data-component-type":"IconPlayDiv",style:e.div},u.default.createElement("div",{"data-component-type":"IconPlayCircle",style:e.playCircle}),u.default.createElement("div",{"data-component-type":"IconPlayTriangle",style:e.playTriangle}))}},{key:"getHeadTab",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getHeadTab(n),e);return u.default.createElement("div",{"data-component-type":"IconHeadTab",style:r.div},u.default.createElement("span",{style:r.left}),u.default.createElement("span",{style:r.right}))}},{key:"getHeart",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getHeart(n),e);return u.default.createElement("div",{"data-component-type":"IconHeart",style:r.div},u.default.createElement("div",{style:r.before}),u.default.createElement("div",{style:r.after}))}},{key:"getShare",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getShare(n),e);return u.default.createElement("div",{"data-component-type":"IconShare",style:r.div},u.default.createElement("div",{style:r.arrow}),u.default.createElement("div",{style:r.bar}),u.default.createElement("div",{style:r.whiteBar1}),u.default.createElement("div",{style:r.whiteBar2}),u.default.createElement("div",{style:r.base}))}},{key:"getMoney",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getMoney(n),e);return u.default.createElement("div",{"data-component-type":"IconMoney",style:r.div},u.default.createElement("div",{style:r.outer},u.default.createElement("div",{style:r.inner})))}},{key:"getOpenEmoji",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getOpenEmoji(n),e);return u.default.createElement("div",{"data-component-type":"IconOpenEmoji",style:r.div})}},{key:"getCloseEmoji",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getCloseEmoji(n),e);return u.default.createElement("div",{"data-component-type":"IconCloseEmoji",style:r.div})}},{key:"getClose",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getClose(n),e);return u.default.createElement("div",{"data-component-type":"IconClose",style:r.div},u.default.createElement("div",{style:r.circle},u.default.createElement("div",{style:r.bar1}),u.default.createElement("div",{style:r.bar2})))}},{key:"getUpdate",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.getOveredStyle(l.default.getUpdate(n),e);return u.default.createElement("div",{"data-component-type":"IconUpdate",style:r.div},u.default.createElement("div",{style:r.circle},u.default.createElement("div",{style:r.bar}),u.default.createElement("div",{style:r.white})))}}]),t}();t.default=f},function(e,t,n){"use strict";if(n(12)){var r=n(42),o=n(4),a=n(6),i=n(0),u=n(89),l=n(128),s=n(30),c=n(57),f=n(50),d=n(18),p=n(59),h=n(32),g=n(11),y=n(174),m=n(53),v=n(34),b=n(23),x=n(62),k=n(7),w=n(14),T=n(117),S=n(54),C=n(26),E=n(55).f,_=n(119),O=n(51),M=n(10),P=n(37),L=n(79),B=n(75),I=n(122),A=n(64),R=n(84),N=n(56),j=n(121),F=n(163),D=n(13),U=n(25),W=D.f,H=U.f,z=o.RangeError,G=o.TypeError,V=o.Uint8Array,q=Array.prototype,K=l.ArrayBuffer,Y=l.DataView,$=P(0),X=P(2),Q=P(3),J=P(4),Z=P(5),ee=P(6),te=L(!0),ne=L(!1),re=I.values,oe=I.keys,ae=I.entries,ie=q.lastIndexOf,ue=q.reduce,le=q.reduceRight,se=q.join,ce=q.sort,fe=q.slice,de=q.toString,pe=q.toLocaleString,he=M("iterator"),ge=M("toStringTag"),ye=O("typed_constructor"),me=O("def_constructor"),ve=u.CONSTR,be=u.TYPED,xe=u.VIEW,ke=P(1,function(e,t){return Ee(B(e,e[me]),t)}),we=a(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),Te=!!V&&!!V.prototype.set&&a(function(){new V(1).set({})}),Se=function(e,t){var n=h(e);if(n<0||n%t)throw z("Wrong offset!");return n},Ce=function(e){if(k(e)&&be in e)return e;throw G(e+" is not a typed array!")},Ee=function(e,t){if(!(k(e)&&ye in e))throw G("It is not a typed array constructor!");return new e(t)},_e=function(e,t){return Oe(B(e,e[me]),t)},Oe=function(e,t){for(var n=0,r=t.length,o=Ee(e,r);r>n;)o[n]=t[n++];return o},Me=function(e,t,n){W(e,t,{get:function(){return this._d[n]}})},Pe=function(e){var t,n,r,o,a,i,u=w(e),l=arguments.length,c=l>1?arguments[1]:void 0,f=void 0!==c,d=_(u);if(null!=d&&!T(d)){for(i=d.call(u),r=[],t=0;!(a=i.next()).done;t++)r.push(a.value);u=r}for(f&&l>2&&(c=s(c,arguments[2],2)),t=0,n=g(u.length),o=Ee(this,n);n>t;t++)o[t]=f?c(u[t],t):u[t];return o},Le=function(){for(var e=0,t=arguments.length,n=Ee(this,t);t>e;)n[e]=arguments[e++];return n},Be=!!V&&a(function(){pe.call(new V(1))}),Ie=function(){return pe.apply(Be?fe.call(Ce(this)):Ce(this),arguments)},Ae={copyWithin:function(e,t){return F.call(Ce(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(Ce(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return j.apply(Ce(this),arguments)},filter:function(e){return _e(this,X(Ce(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(Ce(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Ce(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){$(Ce(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Ce(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Ce(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return se.apply(Ce(this),arguments)},lastIndexOf:function(e){return ie.apply(Ce(this),arguments)},map:function(e){return ke(Ce(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ue.apply(Ce(this),arguments)},reduceRight:function(e){return le.apply(Ce(this),arguments)},reverse:function(){for(var e,t=Ce(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return Q(Ce(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return ce.call(Ce(this),e)},subarray:function(e,t){var n=Ce(this),r=n.length,o=m(e,r);return new(B(n,n[me]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,g((void 0===t?r:m(t,r))-o))}},Re=function(e,t){return _e(this,fe.call(Ce(this),e,t))},Ne=function(e){Ce(this);var t=Se(arguments[1],1),n=this.length,r=w(e),o=g(r.length),a=0;if(o+t>n)throw z("Wrong length!");for(;a<o;)this[t+a]=r[a++]},je={entries:function(){return ae.call(Ce(this))},keys:function(){return oe.call(Ce(this))},values:function(){return re.call(Ce(this))}},Fe=function(e,t){return k(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},De=function(e,t){return Fe(e,t=v(t,!0))?f(2,e[t]):H(e,t)},Ue=function(e,t,n){return!(Fe(e,t=v(t,!0))&&k(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?W(e,t,n):(e[t]=n.value,e)};ve||(U.f=De,D.f=Ue),i(i.S+i.F*!ve,"Object",{getOwnPropertyDescriptor:De,defineProperty:Ue}),a(function(){de.call({})})&&(de=pe=function(){return se.call(this)});var We=p({},Ae);p(We,je),d(We,he,je.values),p(We,{slice:Re,set:Ne,constructor:function(){},toString:de,toLocaleString:Ie}),Me(We,"buffer","b"),Me(We,"byteOffset","o"),Me(We,"byteLength","l"),Me(We,"length","e"),W(We,ge,{get:function(){return this[be]}}),e.exports=function(e,t,n,l){var s=e+((l=!!l)?"Clamped":"")+"Array",f="get"+e,p="set"+e,h=o[s],m=h||{},v=h&&C(h),b=!h||!u.ABV,w={},T=h&&h.prototype,_=function(e,n){W(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,we)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](n*t+o.o,r,we)}(this,n,e)},enumerable:!0})};b?(h=n(function(e,n,r,o){c(e,h,s,"_d");var a,i,u,l,f=0,p=0;if(k(n)){if(!(n instanceof K||"ArrayBuffer"==(l=x(n))||"SharedArrayBuffer"==l))return be in n?Oe(h,n):Pe.call(h,n);a=n,p=Se(r,t);var m=n.byteLength;if(void 0===o){if(m%t)throw z("Wrong length!");if((i=m-p)<0)throw z("Wrong length!")}else if((i=g(o)*t)+p>m)throw z("Wrong length!");u=i/t}else u=y(n),a=new K(i=u*t);for(d(e,"_d",{b:a,o:p,l:i,e:u,v:new Y(a)});f<u;)_(e,f++)}),T=h.prototype=S(We),d(T,"constructor",h)):a(function(){h(1)})&&a(function(){new h(-1)})&&R(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=n(function(e,n,r,o){var a;return c(e,h,s),k(n)?n instanceof K||"ArrayBuffer"==(a=x(n))||"SharedArrayBuffer"==a?void 0!==o?new m(n,Se(r,t),o):void 0!==r?new m(n,Se(r,t)):new m(n):be in n?Oe(h,n):Pe.call(h,n):new m(y(n))}),$(v!==Function.prototype?E(m).concat(E(v)):E(m),function(e){e in h||d(h,e,m[e])}),h.prototype=T,r||(T.constructor=h));var O=T[he],M=!!O&&("values"==O.name||null==O.name),P=je.values;d(h,ye,!0),d(T,be,s),d(T,xe,!0),d(T,me,h),(l?new h(1)[ge]==s:ge in T)||W(T,ge,{get:function(){return s}}),w[s]=h,i(i.G+i.W+i.F*(h!=m),w),i(i.S,s,{BYTES_PER_ELEMENT:t}),i(i.S+i.F*a(function(){m.of.call(h,1)}),s,{from:Pe,of:Le}),"BYTES_PER_ELEMENT"in T||d(T,"BYTES_PER_ELEMENT",t),i(i.P,s,Ae),N(s),i(i.P+i.F*Te,s,{set:Ne}),i(i.P+i.F*!M,s,je),r||T.toString==de||(T.toString=de),i(i.P+i.F*a(function(){new h(1).slice()}),s,{slice:Re}),i(i.P+i.F*(a(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!a(function(){T.toLocaleString.call([1,2])})),s,{toLocaleString:Ie}),A[s]=M?O:P,r||M||d(T,he,P)}}else e.exports=function(){}},function(e,t,n){var r=n(169),o=n(0),a=n(71)("metadata"),i=a.store||(a.store=new(n(172))),u=function(e,t,n){var o=i.get(e);if(!o){if(!n)return;i.set(e,o=new r)}var a=o.get(t);if(!a){if(!n)return;o.set(t,a=new r)}return a};e.exports={store:i,map:u,has:function(e,t,n){var r=u(t,n,!1);return void 0!==r&&r.has(e)},get:function(e,t,n){var r=u(t,n,!1);return void 0===r?void 0:r.get(e)},set:function(e,t,n,r){u(n,r,!0).set(e,t)},keys:function(e,t){var n=u(e,t,!1),r=[];return n&&n.forEach(function(e,t){r.push(t)}),r},key:function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp:function(e){o(o.S,"Reflect",e)}}},function(e,t,n){e.exports=n(431)()},function(e,t){e.exports=!1},function(e,t,n){var r=n(51)("meta"),o=n(7),a=n(23),i=n(13).f,u=0,l=Object.isExtensible||function(){return!0},s=!n(6)(function(){return l(Object.preventExtensions({}))}),c=function(e){i(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,r)){if(!l(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!a(e,r)){if(!l(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&l(e)&&!a(e,r)&&c(e),e}}},function(e,t,n){var r=n(10)("unscopables"),o=Array.prototype;null==o[r]&&n(18)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=i(n(8)),a=i(n(16));function i(e){return e&&e.__esModule?e:{default:e}}o.default.PRODUCTION,o.default.DEVELOPMENT,o.default.PRODUCTION_DOMAIN,o.default.DEVELOPMENT_DOMAIN,o.default.PORTS;var u=o.default.SUB_DOMAINS,l=(a.default.env,a.default.domain),s="object"===("undefined"==typeof location?"undefined":r(location));a.default.mediaSecondInterval=200,a.default.protcol=s?0===location.href.indexOf("https")?"https":"http":"",a.default.server=l,a.default.portalPath="//"+u.PORTAL+"."+l+"/",a.default.clientPath="//"+u.CLIENT+"."+l+"/",a.default.assetsPath="//"+u.ASSETS+"."+l+"/",a.default.sessionPath="//"+u.SESSION+"."+l+"/",a.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"},t.default=a.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(a(n(17)),a(n(1)));function a(e){return e&&e.__esModule?e:{default:e}}var i=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),[]}return r(e,null,[{key:"getDispPosts",value:function(e){var t=e.app,n=e.postsTimeline,r=e.postsMulti,a=e.postsSingle,i=e.postsChild,u=e.postsLogs;switch(t.dispThreadType){case o.default.dispThreadTypeTimeline:return n;case o.default.dispThreadTypeMulti:return r;case o.default.dispThreadTypeSingle:return a;case o.default.dispThreadTypeChild:return i;case o.default.dispThreadTypeLogs:return u}}},{key:"getAnyActionPosts",value:function(e){var t=e.app,n=e.posts,r=n&&n.length>0;switch(t.dispThreadType){case o.default.dispThreadTypeTimeline:e.postsTimeline=r?n:[];break;case o.default.dispThreadTypeMulti:e.postsMulti=r?n:[];break;case o.default.dispThreadTypeSingle:e.postsSingle=r?n:[];break;case o.default.dispThreadTypeChild:e.postsChild=r?n:[];break;case o.default.dispThreadTypeLogs:e.postsLogs=r?n:[]}return e}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(c(n(8)),c(n(1))),i=c(n(9)),u=c(n(5)),l=c(n(48)),s=c(n(22));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),icon:e.getIcon(t),textarea:e.getTextarea(t),modalTextarea:e.getModalTextarea(t),button:e.getButton(t),upper:e.getUpper(t),bottom:e.getBottom(t)}}return o(e,null,[{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;if(e.extensionMode===a.default.extensionModeExtBottomLabel||e.extensionMode===a.default.extensionModeExtModalLabel)n="100%";else switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:n="100%";break;case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:n=l.default.getWidth(e)}return t?i.default.trimUnit(n):n}},{key:"getLeft",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;if(e.extensionMode===a.default.extensionModeExtBottomLabel)return 0;if(e.extensionMode===a.default.extensionModeExtModalLabel)return 0;switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:n="0px";break;case a.default.screenModeMiddleLabel:n=""+s.default.getWidth(e);break;case a.default.screenModeLargeLabel:n=s.default.getWidth(e)}return t?i.default.trimUnit(n):n}},{key:"getBorder",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];switch(e.extensionMode){case a.default.extensionModeExtBottomLabel:return{borderTop:u.default.border,borderRight:u.default.border,borderLeft:u.default.border};case a.default.extensionModeExtModalLabel:return{border:u.default.border};default:return e.includeIframeTag?{border:u.default.border}:(e.screenMode===a.default.screenModeUndispLabel||(e.screenMode,a.default.screenModeSmallLabe),{borderTop:u.default.border,borderBottom:u.default.border})}}},{key:"getBorderRadius",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.extensionMode===a.default.extensionModeExtBottomLabel?"100%"===e.extensionWidth?"0px 0px 0px 0px":u.default.radius+" "+u.default.radius+" 0px 0px":e.extensionMode===a.default.extensionModeExtModalLabel?"0px 0px "+u.default.radius+" "+u.default.radius:0}},{key:"getTransform",value:function(e){var t="translate3d( 0px, 0px, 0px )";switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:t=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case a.default.screenModeMiddleLabel:e.isOpenDetail,t="translate3d( 0px ,0px, 0px )";break;case a.default.screenModeLargeLabel:t="translate3d( 0px ,0px, 0px )"}return t}},{key:"selfHeight",get:function(){return 45}}]),o(e,null,[{key:"getSelf",value:function(t){var n=t.app,o=e.getBorder(n),a=e.getBorderRadius(n),l=i.default.getLayoutFlex(r({position:"fixed",bottom:0,left:e.getLeft(n),flexGrow:1,height:e.selfHeight,width:e.getWidth(n),maxWidth:e.getWidth(n),background:u.default.offWhiteRGBA,justifyContent:"flex-start",borderRadius:a},o)),s=i.default.getAnimationBase({transform:e.getTransform(n)});return i.default.get({layout:l,content:{},animation:s})}},{key:"getIcon",value:function(e){e.thread;var t=i.default.getLayoutInlineBlock({width:"20%",maxWidth:"20%",height:"55%",backgroundImage:"url()",backgroundPosition:"center center",backgroundSize:"24px 24px",backgroundRepeat:"no-repeat",zIndex:9999}),n=i.default.getContentBase({cursor:"pointer"});return i.default.get({layout:t,content:n,animation:{}})}},{key:"getTextarea",value:function(e){var t=e.app.extensionMode===a.default.extensionModeExtModalLabel?"60%":"54%",n=i.default.getLayoutInlineBlock({width:t,maxWidth:t,height:"25px",background:u.default.whiteRGB,padding:"6px",margin:"0 3% 0 0",outline:"none",resize:"none",lineHeight:"0.9",border:u.default.border,borderRadius:"3px",WebkitAppearance:"none"}),r=i.default.getContentBase({fontSize:"12px",textAlign:"left"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:r,animation:o})}},{key:"getModalTextarea",value:function(){var e=i.default.getLayoutInlineBlock({width:"60%",maxWidth:"60%",height:"55%",background:u.default.whiteRGB,padding:"6px",margin:"0 0% 0 0",outline:"none",resize:"none",lineHeight:"0.9",border:u.default.border,borderRadius:"3px",WebkitAppearance:"none"}),t=i.default.getContentBase({fontSize:"12px",textAlign:"left"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getButton",value:function(e){e.app;var t=i.default.getLayoutInlineBlock({outline:"none",width:"20%",maxWidth:"20%",height:"55%",margin:"0px 3% 0px 0%",background:"rgb(245, 245, 245)",border:u.default.border,borderRadius:"3px"}),n=i.default.getContentBase({fontSize:"12px",cursor:"pointer"}),r=i.default.getAnimationBase();return i.default.get({layout:t,content:n,animation:r})}},{key:"getUpper",value:function(){var e=i.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start"}),t=i.default.getContentBase({}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getBottom",value:function(){var e=i.default.getLayoutFlex({alignItems:"center",justifyContent:"center"}),t=i.default.getContentBase({fontSize:"10px"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}}]),e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(g(n(8)),g(n(1))),i=g(n(9)),u=g(n(5)),l=g(n(27)),s=g(n(47)),c=g(n(76)),f=g(n(22)),d=g(n(21)),p=g(n(134)),h=g(n(135));function g(e){return e&&e.__esModule?e:{default:e}}var y=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),ol:e.getOl(t),more:e.getMore(t)}}return o(e,null,[{key:"getSelfDisplay",value:function(e){return e.isOpenNotif?"none":"flex"}},{key:"getMinWidth",value:function(e){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?i.default.trimUnit("200px"):"200px"}},{key:"getOlWidth",value:function(e){var t=e.app,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.extensionMode===a.default.extensionModeExtBottomLabel?"90%":"100%";return n?i.default.trimUnit(r):r}},{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n="100%";if(e.extensionMode===a.default.extensionModeExtBottomLabel)n="90%";else switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:return"100%";case a.default.screenModeMiddleLabel:return"calc(100% - "+f.default.getWidth(e,!1)+")";case a.default.screenModeLargeLabel:n="calc( "+(100-d.default.getWidth(e,!1))+"% - "+f.default.getWidth(e,!1)+" )"}return t?i.default.trimUnit(n):n}}]),o(e,null,[{key:"closeIndexTransform",value:function(e){var t=e.app;switch(t.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:return"translate3d( -"+t.width+"px, 0px, 0px)";case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:return"translate3d( -"+f.default.getWidth(t)+"px, 0px, 0px)"}}},{key:"openIndexTransform",value:function(e){return"translate3d( 0px, 0px, 0px)"}},{key:"getBorders",value:function(e){return e.includeIframeTag?{borderRight:u.default.border,borderLeft:u.default.border}:e.extensionMode===a.default.screenModeUndispLabel||e.extensionMode===a.default.screenModeSmallLabel?{borderRight:u.default.border,borderLeft:u.default.border}:{}}},{key:"getMargin",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var t,n=0;if(e.connectionType===a.default.mediaTagTypeVideo)return e.isBubblePost?"0px 0px "+s.default.selfHeight+"px "+f.default.getWidth(e):"10px 0px "+s.default.selfHeight+"px "+f.default.getWidth(e);if(n=l.default.headerHeight+"px 0px 0px 0px",t=e.isMediaConnection?h.default.height+20+"px":"0px",e.connectionType===a.default.mediaTagTypeVideo){switch(e.screenMode){case a.default.screenModeSmallLabel:return 0;case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:return"0px 0px 0px "+f.default.getWidth(e)}return 0}if(e.extensionMode===a.default.extensionModeExtBottomLabel)n=t+" 5% "+l.default.headerHeight+"px 5%";else if(e.extensionMode===a.default.extensionModeExtModalLabel)n=t+" 0px "+s.default.selfHeight+"px 0px";else switch(e.screenMode){case a.default.screenModeSmallLabel:n=t+" 0px 0px 0px";break;case a.default.screenModeMiddleLabel:n=t+" 0px "+s.default.selfHeight+"px "+f.default.getWidth(e);break;case a.default.screenModeLargeLabel:n=t+" 0px "+l.default.headerHeight+"px "+f.default.getWidth(e)}return n}},{key:"getPadding",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e.extensionMode===a.default.extensionModeExtBottomLabel)return"0px";if(e.extensionMode===a.default.extensionModeExtModalLabel)return"0px";switch(e.screenMode){case a.default.screenModeUndispLabel:return"0px 0px 25px 0px";case a.default.screenModeSmallLabel:return"0px 0px "+s.default.selfHeight+"px 0px";case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:return"0px"}}},{key:"getSelfTransform",value:function(e){return e.extensionMode===a.default.extensionModeExtBottomLabel?e.isDispPosts?"translate3d(0px, 0px, 0px)":"translate3d(0px, calc( 100% + "+s.default.selfHeight+"px ), 0px)":"translate3d(0px, 0px, 0px)"}},{key:"getSelfHeight",value:function(e){return e.connectionType===a.default.mediaTagTypeVideo?"auto":e.extensionMode===a.default.extensionModeExtBottomLabel||e.extensionMode===a.default.extensionModeExtModalLabel?"calc( 100% - "+2*s.default.selfHeight+"px )":"auto"}},{key:"getSelfMinHeight",value:function(e){return e.connectionType===a.default.mediaTagTypeVideo?"calc( 100% - "+(p.default.height+s.default.selfHeight+l.default.headerHeight)+"px)":e.extensionMode===a.default.extensionModeExtBottomLabel||e.extensionMode===a.default.extensionModeExtModalLabel?"calc( 100% - "+2*s.default.selfHeight+"px )":"auto"}},{key:"getSelfTop",value:function(e){return e.connectionType===a.default.mediaTagTypeVideo?l.default.headerHeight+p.default.height+"px":l.default.headerHeight+"px"}},{key:"getSelf",value:function(t){var n=t.app,o="relative",l="hidden",s={borderRight:0,borderLeft:0},c=u.default.whiteRGBA,f=1;n.extensionMode===a.default.extensionModeExtBottomLabel||n.extensionMode===a.default.extensionModeExtModalLabel?(o="fixed",l="scroll",s.borderRight=u.default.border,s.borderLeft=u.default.border,f=-2):s=e.getBorders(n);var d=i.default.getLayoutBlock(r({position:o,top:e.getSelfTop(n),width:e.getWidth(n),minWidth:e.getMinWidth(n),height:e.getSelfHeight(n),minHeight:e.getSelfMinHeight(n),maxHeight:"auto",margin:e.getMargin(n),padding:e.getPadding(n),background:c,overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflow:l},s,{zIndex:f})),p=i.default.getAnimationBase({});return i.default.get({layout:d,content:{},animation:p})}},{key:"getOl",value:function(t){var n=t.app,r="100%",o="0",l="0",s="0";n.extensionMode===a.default.extensionModeExtBottomLabel&&(r=e.getOlWidth({app:n}),o="0px 0px 0px 5%",l=u.default.border,s=u.default.border);var f=i.default.getLayoutBlock({width:r,margin:o,height:"calc( 100% - "+c.default.headerHeight+"px )",minHeight:"inherit",borderRight:l,borderLeft:s}),d=i.default.getAnimationBase({transition:u.default.getTransition(n)});return i.default.get({layout:f,content:{},animation:d})}},{key:"getMore",value:function(e){var t=e.app,n=t.isBubblePost?u.default.themeRGBA:u.default.reliefRGBA,r=t.isBubblePost?"15px auto":"10px auto",o=i.default.getLayoutFlex({width:"50%",height:u.default.notifHeight,margin:r,alignItems:"center",justifyContent:"center",zIndex:"10",background:n,borderRadius:"20px"}),a=i.default.getContentBase({lineHeight:2,fontSize:"12px",color:u.default.whiteRGB,cursor:"pointer"}),l=i.default.getAnimationBase();return i.default.get({layout:o,content:a,animation:l})}},{key:"headerHeight",get:function(){return 35}}]),e}();t.default=y},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(148),o=n(105);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(32),o=Math.max,a=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):a(e,t)}},function(e,t,n){var r=n(3),o=n(149),a=n(105),i=n(104)("IE_PROTO"),u=function(){},l=function(){var e,t=n(102)("iframe"),r=a.length;for(t.style.display="none",n(106).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[a[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[i]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(148),o=n(105).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){"use strict";var r=n(4),o=n(13),a=n(12),i=n(10)("species");e.exports=function(e){var t=r[e];a&&t&&!t[i]&&o.f(t,i,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(30),o=n(161),a=n(117),i=n(3),u=n(11),l=n(119),s={},c={};(t=e.exports=function(e,t,n,f,d){var p,h,g,y,m=d?function(){return e}:l(e),v=r(n,f,t?2:1),b=0;if("function"!=typeof m)throw TypeError(e+" is not iterable!");if(a(m)){for(p=u(e.length);p>b;b++)if((y=t?v(i(h=e[b])[0],h[1]):v(e[b]))===s||y===c)return y}else for(g=m.call(e);!(h=g.next()).done;)if((y=o(g,v,h.value,t))===s||y===c)return y}).BREAK=s,t.RETURN=c},function(e,t,n){var r=n(19);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){var r=n(7);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,n){var r=n(13).f,o=n(23),a=n(10)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,a)&&r(e,a,{configurable:!0,value:t})}},function(e,t,n){var r=n(31),o=n(10)("toStringTag"),a="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:a?r(t):"Object"==(i=r(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,n){var r=n(0),o=n(35),a=n(6),i=n(108),u="["+i+"]",l=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),c=function(e,t,n){var o={},u=a(function(){return!!i[e]()||"​"!="​"[e]()}),l=o[e]=u?t(f):i[e];n&&(o[n]=l),r(r.P+r.F*u,"String",o)},f=c.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(l,"")),2&t&&(e=e.replace(s,"")),e};e.exports=c},function(e,t){e.exports={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(45)),a=u(n(17)),i=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),i=t.isWindowObj(n)?t.constructorFromWindow(n,r,o):n;return e=a.create(i),l(a,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),r(t,null,[{key:"getDefaultTitle",value:function(){return"talkn"}},{key:"getDefaultFavicon",value:function(){return"user.png"}},{key:"isWindowObj",value:function(e){return!!e.alert}}]),r(t,[{key:"getMediaSrc",value:function(){return i.default.getMediaSrc(this.protocol,this.connection)}},{key:"getMediaTagType",value:function(){var e=this.getMediaSrc();return i.default.getMediaType(e)}},{key:"setConnection",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",n=0===e.indexOf("/")?e:"/"+e,r=User.getConnectionTop(n),o=User.getContentType(n),a=t.getConnections(n);return this.set("connection",n).set("connectionTop",r).set("connections",a).set("extentionType",o)}}],[{key:"constructorFromWindow",value:function(e,n,r){var o=!!n.connection&&n.connection,i=t.getConnection(n,o);if(r.connection&&r.connection===i)return r;var u={location:{},href:""};return u.connection=i,u.connections=["/"],u.hasSlash=!!n.hasslash&&a.default.getBool(n.hasslash),u.protocol="talkn:",u.contentType="",u.charset="UTF-8",u.host="",u.favicon=t.getDefaultFavicon(),o?(u.protocol=t.getProtocol(o),u.host=t.getHost(o),u.connections=o.connections&&o.connections.length>0?o.connections:t.getConnections(i)):(u.protocol=location.protocol?location.protocol:"????:",u.connections=params.connections&&params.connections.length>0?params.connections:t.getConnections(i),u.contentType=document.contentType?document.contentType:"",u.charset=document.charset?document.charset:"",u.host=location.host?location.host:"",u.favicon=t.getFaviconFromWindow(e)),u.title=t.getDefaultTitle(),u.metas=[],u.serverMetas={},u.clientMetas={},u.links=[],u.h1s=[],u.audios=[],u.videos=[],u.layer=t.getLayer(u.connection),u.mediaIndex=[],u.postCnt=0,u.multiPostCnt=0,u.isSelfConnection=t.getIsSelfConnection(u.href,u.connection),u.createTime="",u.updateTime="",u}},{key:"getConnection",value:function(e,t){return t||(location=window.location?window.location:{},href=location.href?location.href:"",""!==href?(href="/"===href.slice(-1)?href.slice(0,-1):href,href=href.replace("http:/",""),href=href.replace("https:/",""),href):"/")}},{key:"getConnectionTop",value:function(e){return""!==e?"/"+e.split("/")[1]:""}},{key:"getConnections",value:function(e){var t=["/"];if(""!==e){var n="/"===e.slice(-1)?e:e+"/";if("/"!==n)for(var r=n.split("/"),o=r.length,a="",i=1;i<o;i++)""!==r[i]&&(a="/"===(a="/"===(a+=r[i]).slice(-1)?a:a+"/").slice(0,1)?a:"/"+a,t.push(a))}return t}},{key:"getHost",value:function(e){return e.indexOf(".")>=0?(e=e.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):o.default.domain}},{key:"getProtocol",value:function(e){return e.indexOf("http:")>=0?"http:":e.indexOf("https:")>=0?"https:":"????:"}},{key:"getIsSelfConnection",value:function(e,t){return e.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===t}},{key:"getLayer",value:function(e){return e.split("/").length-1}},{key:"getFaviconFromWindow",value:function(e){if(e&&e.document){var t=e.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",e.document,null,2,null).stringValue,n="http://",r=location.host;if(t.indexOf(n)||t.indexOf("https://")){var o=n+r+(t||"/favicon.ico");return 1===o.split("//").length-1?o:t}return t}return""}},{key:"getStatus",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={dispType:"",isSchema:!1,isRequireUpsert:!1,isMultistream:!1,isMediaConnection:!1,isToggleMultistream:!1};return o.isSchema=t.getStatusIsSchema(e),o.isRequireUpsert=t.getStatusIsRequireUpsert(e,r,o.isSchema),o.isMultistream=t.getStatusIsMultistream(n),o.isToggleMultistream=t.getStatusIsToggleMultistream(n),o.isMediaConnection=t.getStatusIsMediaConnection(e.connection),o}},{key:"getStatusIsSchema",value:function(e){if((e.createTime.getTime?e.createTime.getTime():e.createTime)===(e.updateTime.getTime?e.updateTime.getTime():e.updateTime)&&e.lastPost.createTime.getTime()===e.lastPost.updateTime.getTime())return!0;return!1}},{key:"getStatusIsRequireUpsert",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e.updateTime.getTime?e.updateTime.getTime():e.updateTime,o=new Date,a=o.getFullYear(),i=o.getMonth(),u=o.getDate(),l=o.getHours(),s=(o.getMinutes(),new Date(a,i,u,l-t.server.findOneThreadActiveHour).getTime());return!!n||r<s}},{key:"getStatusIsMultistream",value:function(e){return e.dispThreadType===i.default.dispThreadTypeMulti&&e.multistream}},{key:"getStatusIsMediaConnection",value:function(e){return i.default.getIsMediaConnection(e)}},{key:"getStatusIsToggleMultistream",value:function(e){return"ON_CLICK_MULTISTREAM"===e.actioned}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),a=s(n(9)),i=s(n(5)),u=s(n(21)),l=(s(n(48)),s(n(22)));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),menu:e.getMenu(t),menuUl:e.getMenuUl(t),menuLi:e.getMenuLi(t),menuLiChild:e.getMenuLiChild(t),menuLiBubble:e.getMenuLiBubble(t),menuLiLinks:e.getMenuLiLinks(t),menuToggle:e.getMenuToggle(t),links:e.getLinks(t),linksUl:e.getLinksUl(t),linksLi:e.getLinksLi(t),linksLiActive:e.getLinksLiActive(t),linksLiUnactive:e.getLinksLiUnactive(t),linksTuneLi:e.getLinksTuneLi(t),linkMenuUl:e.getLinkMenuUl(t),linkMenuLi:e.getLinkMenuLi(t),linksTabActive:e.getLinksTabActive(t),linksTabUnactive:e.getLinksTabUnactive(t),linksTabLast:e.getLinksTabLast(t)}}return r(e,null,[{key:"tuneSize",get:function(){return 50}},{key:"size",get:function(){return 54}},{key:"padding",get:function(){return 5}},{key:"right",get:function(){return 0}},{key:"activeColor",get:function(){return i.default.themeRGB}},{key:"unactiveColor",get:function(){return i.default.fontBaseRGB}}]),r(e,null,[{key:"getTotalWidth",value:function(t){return e.size+2*e.padding+e.right}},{key:"getSelfTop",value:function(e){return"55px"}},{key:"getSelfWidth",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r="93%";if(t.isOpenLinks)if(t.extensionMode===o.default.extensionModeExtBottomLabel)r="93%";else switch(t.screenMode){case o.default.screenModeSmallLabel:return"93%";case o.default.screenModeMiddleLabel:return"calc(97% - "+l.default.getWidth(t,!1)+")";case o.default.screenModeLargeLabel:r="calc( "+(97-u.default.getWidth(t,!1))+"% - "+l.default.getWidth(t,!1)+" )"}else r=e.getTotalWidth(t)+"px";return n?a.default.trimUnit(r):r}},{key:"getSelfHeight",value:function(e){return e.isOpenBoard?"237px":"64px"}},{key:"getSelfBorderRadius",value:function(e){return"10px 0px 0px 10px"}},{key:"getSelfBackground",value:function(e){return e.isOpenBoard?i.default.lightRGBA:i.default.whiteRGBA}},{key:"getSelfRight",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.screenMode===o.default.screenModeLargeLabel?"calc( "+u.default.getWidth(t,!0)+" + "+e.right+"px )":e.right+"px";return n?r:a.default.trimUnit(r)}},{key:"getSelfBoxShadow",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.isOpenLinks,"rgb(220, 220, 220) 0px 0px 5px"}},{key:"getLinksDisplay",value:function(e){return e.isOpenLinks?"flex":"none"}},{key:"getSelf",value:function(t){var n=t.app,r=e.getSelfWidth(n),o=e.getSelfHeight(n),u=e.getSelfBorderRadius(n),l=e.getSelfBackground(n),s=e.getSelfRight(n,!0),c=e.getSelfBoxShadow(n),f=a.default.getLayoutFlex({position:"fixed",top:e.getSelfTop(n),overflow:"hide",right:s,height:o,width:r,padding:"5px",background:l,flexDirection:"row",alignItems:"flex-start",justifyContent:"flex-end",boxShadow:c,borderRadius:u}),d=a.default.getAnimationBase({transition:i.default.getTransitionFirstOn(n)});return a.default.get({layout:f,content:{},animation:d})}},{key:"getMenu",value:function(t){var n=t.app,r=a.default.getLayoutFlex({width:e.getTotalWidth(n)+"px",height:"100%",flexDirection:"column",alignItems:"flex-end"});return a.default.get({layout:r,content:{},animation:{}})}},{key:"getMenuUl",value:function(e){var t=e.app,n=a.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column"}),r=a.default.getAnimationBase({transition:i.default.getTransition(t)});return a.default.get({layout:n,content:{},animation:r})}},{key:"getMenuLi",value:function(t){var n=t.app,r=e.size+"px",o=a.default.getLayoutFlex({flexDirection:"column",width:r,height:r,minWidth:r,minHeight:r,maxWidth:r,maxHeight:r,background:i.default.whiteRGBA,borderRadius:"5px",marginBottom:"5px"}),u=a.default.getContentBase({fontSize:"10px",lineHeight:"17px"}),l=a.default.getAnimationBase({transition:i.default.getTransition(n)});return a.default.get({layout:o,content:u,animation:l})}},{key:"getMenuLiChild",value:function(t){var n=t.app,r=o.default.isActiveMultistream(n,"getLiChild")?e.activeColor:e.unactiveColor,i=a.default.getContentBase({color:r}),u=a.default.getAnimationBase();return a.default.get({layout:{},content:i,animation:u})}},{key:"getMenuLiBubble",value:function(t){var n=t.app.isBubblePost?e.activeColor:e.unactiveColor,r=a.default.getContentBase({color:n}),o=a.default.getAnimationBase();return a.default.get({layout:{},content:r,animation:o})}},{key:"getMenuLiLinks",value:function(e){var t=e.app.isOpenLinks?i.default.themeRGB:i.default.reliefRGB,n=a.default.getContentBase({color:t}),r=a.default.getAnimationBase();return a.default.get({layout:{},content:n,animation:r})}},{key:"getMenuToggle",value:function(t){var n=t.app,r=e.size-4+"px",o=a.default.getLayoutFlex({width:r,height:r,minHeight:r,maxHeight:r}),u=a.default.getAnimationBase({transition:i.default.getTransition(n)});return a.default.get({layout:o,content:{},animation:u})}},{key:"getLinks",value:function(t){var n=t.app,r=e.getLinksDisplay(n),o=a.default.getLayoutFlex({display:r,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),i=a.default.getContentBase({fontSize:"14px"});return a.default.get({layout:o,content:i,animation:{}})}},{key:"getLinksUl",value:function(e){var t=e.app,n=a.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),r=a.default.getAnimationBase({transition:i.default.getTransition(t)});return a.default.get({layout:n,content:{},animation:r})}},{key:"getLinksLi",value:function(t){var n=t.app,r=e.size+"px",o=a.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:r,minHeight:r,maxHeight:r,background:i.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),u=a.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px"}),l=a.default.getAnimationBase({transition:i.default.getTransition(n)});return a.default.get({layout:o,content:u,animation:l})}},{key:"getLinksLiActive",value:function(t){var n=t.app,r=e.getLinksLi({app:n});return r.background=i.default.whiteRGB,r.color=i.default.fontBaseRGB,r}},{key:"getLinksLiUnactive",value:function(t){var n=t.app,r=e.getLinksLi({app:n});return r.background=i.default.calmRGB,r.color=i.default.fontBaseRGB,r}},{key:"getLinksTuneLi",value:function(t){var n=t.app,r=e.getLinksLi({app:n});return r.alignItems="center",r}},{key:"getLinkMenuUl",value:function(t){var n=t.app,r=e.size+"px",o=a.default.getLayoutFlex({minHeight:r,height:r,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),u=a.default.getAnimationBase({transition:i.default.getTransition(n)});return a.default.get({layout:o,content:{},animation:u})}},{key:"getLinkMenuLi",value:function(t){var n=t.app,r=e.size-4+"px",o=a.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:r,minHeight:r,maxHeight:r,background:i.default.reliefRGB,borderRadius:"5px"}),u=a.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px",color:i.default.whiteRGB}),l=a.default.getAnimationBase({transition:i.default.getTransition(n)});return a.default.get({layout:o,content:u,animation:l})}},{key:"getLinksTabActive",value:function(e){e.app;var t={};return t.background=i.default.whiteRGBA,t.color=i.default.fontBaseRGB,t}},{key:"getLinksTabUnactive",value:function(t){var n=t.app;return e.getLinkMenuLi({app:n})}},{key:"getLinksTabLast",value:function(e){e.app;var t={margin:"5px 0px 0px 0px"};return t}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(s(n(8)),s(n(1))),i=s(n(16)),u=s(n(9)),l=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{activeLiSelf:e.getActiveLiSelf(t),unactiveLiSelf:e.getUnactiveLiSelf(t),upper:e.getUpper(),upperSpace:e.getUpperSpace(),upperRankWrap:e.getUpperRankWrap(),upperRank:e.getUpperRank(),upperRight:e.getUpperRight(),bottom:e.getBottom(),bottomIcon:e.getBottomIcon(),bottomPost:e.getBottomPost(),bottomWatchCnt:e.getBottomWatchCnt(),bottomWatchCntWrap:e.getBottomWatchCntWrap()}}return o(e,null,[{key:"getUnactiveLiBorder",value:function(e){return e.extensionMode===a.default.extensionModeExtBottomLabel?{borderBottom:l.default.border}:e.screenMode===a.default.screenModeUndispLabel||e.screenMode===a.default.screenModeSmallLabel?{borderBottom:l.default.border,borderLeft:0}:{borderRight:l.default.border,borderBottom:l.default.border,borderLeft:0}}},{key:"getDispRankBackground",value:function(t){switch(t){case 0:return e.tuneRGB;case 1:return e.rank1RGB;case 2:return e.rank2RGB;case 3:return e.rank3RGB;default:return e.rankOtherRGB}}},{key:"getDispRankWidth",value:function(t){switch(String(t).length){case 0:case 1:return e.oneDigitWidth;case 2:return e.twoDigitWidth;case 3:default:return e.thirdDigitWidth}}},{key:"tuneRGB",get:function(){return l.default.themeRGB}},{key:"rank1RGB",get:function(){return"rgb(255, 100, 78)"}},{key:"rank2RGB",get:function(){return"rgb(255, 147, 0)"}},{key:"rank3RGB",get:function(){return"rgb(0, 162, 255)"}},{key:"rankOtherRGB",get:function(){return l.default.silverRGB}},{key:"oneDigitWidth",get:function(){return"17%"}},{key:"twoDigitWidth",get:function(){return"18%"}},{key:"thirdDigitWidth",get:function(){return"19%"}},{key:"fontSize",get:function(){return 14}},{key:"iconSize",get:function(){return 24}},{key:"liHeight",get:function(){return 90}},{key:"activeLiSelfLabel",get:function(){return"activeLiSelf"}},{key:"unactiveLiSelfLabel",get:function(){return"unactiveLiSelf"}},{key:"activeLiSelfBackground",get:function(){return l.default.whiteRGB}},{key:"activeLiSelfMouseOverBackground",get:function(){return l.default.whiteRGB}},{key:"activeLiSelfMouseDownBackground",get:function(){return l.default.whiteRGB}},{key:"unactiveLiSelfBackground",get:function(){return l.default.lightRGB}},{key:"unactiveLiSelfMouseOverBackground",get:function(){return l.default.offWhitePlusRGB}},{key:"unactiveLiSelfMouseDownBackground",get:function(){return l.default.whiteRGB}},{key:"activeLiSelfBorderRightColor",get:function(){return"1px solid "+l.default.whiteRGB}},{key:"unactiveLiSelfBorderRightColor",get:function(){return l.default.border}}]),o(e,null,[{key:"getActiveLiSelf",value:function(){var t=u.default.getLayoutBlock({width:"initial",height:e.liHeight+"px",padding:"10px",borderBottom:l.default.border,borderRight:"1px solid "+l.default.whiteRGB,background:e.activeLiSelfBackground,cursor:"pointer"}),n=u.default.getContentBase(),r=u.default.getAnimationBase();return u.default.get({layout:t,content:n,animation:r})}},{key:"getUnactiveLiSelf",value:function(t){var n=t.app,o=e.getUnactiveLiBorder(n),a=u.default.getLayoutBlock(r({width:"initial",height:e.liHeight+"px",padding:"10px"},o,{background:e.unactiveLiSelfBackground,cursor:"pointer"})),i=u.default.getContentBase(),s=u.default.getAnimationBase({transition:l.default.transitionFirstOn});return u.default.get({layout:a,content:i,animation:s})}},{key:"getUpper",value:function(){var t=u.default.getLayoutBlock({width:"100%",height:"20px"}),n=u.default.getContentBase({fontSize:e.fontSize+"px"}),r=u.default.getAnimationBase();return u.default.get({layout:t,content:n,animation:r})}},{key:"getUpperSpace",value:function(){var e=u.default.getLayoutInlineBlock({width:"18%",margin:"0px 2% 0px 0px"}),t=u.default.getContentBase({}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getUpperRankWrap",value:function(){var t=u.default.getLayoutInlineFlex({position:"absolute",left:"5px",top:"10px",width:e.thirdDigitWidth,height:"20px",background:e.rankOtherRGB,borderRadius:"10px",margin:"0"}),n=u.default.getContentBase({}),r=u.default.getAnimationBase();return u.default.get({layout:t,content:n,animation:r})}},{key:"getUpperRank",value:function(){var e=u.default.getLayoutFlex({width:"100%"}),t=u.default.getContentBase({fontSize:"10px",fontWeight:"bold",color:l.default.whiteRGB,lineHeight:"1.5"}),n=u.default.getAnimationBase({transform:"scale(0.8)"});return u.default.get({layout:e,content:t,animation:n})}},{key:"getUpperRight",value:function(){var e=u.default.getLayoutInlineBlock({width:"80%"}),t=u.default.getContentBase({lineHeight:"1.5",textAlign:"left"}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottom",value:function(){var e=u.default.getLayoutBlock({width:"100%",height:"50px"}),t=u.default.getContentBase(),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottomIcon",value:function(){var e=u.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:'url("'+i.default.assetsURL+'/favicon.ico")',backgroundPosition:"50% 30%",backgroundSize:"24px 24px",backgroundRepeat:"no-repeat"}),t=u.default.getContentBase(),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottomPost",value:function(){var t=u.default.getLayoutInlineBlock({width:"60%"}),n=u.default.getContentBase({fontSize:e.fontSize+"px",lineHeight:2.8,textAlign:"left",whiteSpace:"nowrap"}),r=u.default.getAnimationBase();return u.default.get({layout:t,content:n,animation:r})}},{key:"getBottomWatchCnt",value:function(){var e=u.default.getLayoutInlineFlex({width:"20%"}),t=u.default.getContentBase({textAlign:"center"}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottomWatchCntWrap",value:function(){var e=u.default.getLayoutInlineFlex({position:"relative",top:"-7px",width:"26px",height:"26px",background:l.default.themeRGBA,borderRadius:"20px"}),t=u.default.getContentBase({fontSize:"10px",lineHeight:2,textAlign:"center",color:l.default.whiteRGB}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}}]),e}();t.default=c},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){var r,o=n(456),a=n(204),i=n(458),u=n(459),l=n(460);"undefined"!=typeof ArrayBuffer&&(r=n(461));var s="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),c="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=s||c;t.protocol=3;var d=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=o(d),h={type:"error",data:"parser error"},g=n(462);function y(e,t,n){for(var r=new Array(e.length),o=u(e.length,n),a=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},i=0;i<e.length;i++)a(i,e[i],o)}t.encodePacket=function(e,n,r,o){"function"==typeof n&&(o=n,n=!1),"function"==typeof r&&(o=r,r=null);var a=void 0===e.data?void 0:e.data.buffer||e.data;if("undefined"!=typeof ArrayBuffer&&a instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,a=new Uint8Array(o),i=new Uint8Array(1+o.byteLength);i[0]=d[e.type];for(var u=0;u<a.length;u++)i[u+1]=a[u];return r(i.buffer)}(e,n,o);if(void 0!==g&&a instanceof g)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){t.encodePacket({type:e.type,data:o.result},n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=d[e.type];var a=new g([o.buffer,e.data]);return r(a)}(e,n,o);if(a&&a.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(e,o);var i=d[e.type];return void 0!==e.data&&(i+=r?l.encode(String(e.data),{strict:!1}):String(e.data)),o(""+i)},t.encodeBase64Packet=function(e,n){var r,o="b"+t.packets[e.type];if(void 0!==g&&e.data instanceof g){var a=new FileReader;return a.onload=function(){var e=a.result.split(",")[1];n(o+e)},a.readAsDataURL(e.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(t){for(var i=new Uint8Array(e.data),u=new Array(i.length),l=0;l<i.length;l++)u[l]=i[l];r=String.fromCharCode.apply(null,u)}return o+=btoa(r),n(o)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=l.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&p[o]?e.length>1?{type:p[o],data:e.substring(1)}:{type:p[o]}:h}o=new Uint8Array(e)[0];var a=i(e,1);return g&&"blob"===n&&(a=new g([a])),{type:p[o],data:a}},t.decodeBase64Packet=function(e,t){var n=p[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&g&&(o=new g([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=a(e);if(n&&o)return g&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");y(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var a,i,u="",l=0,s=e.length;l<s;l++){var c=e.charAt(l);if(":"===c){if(""===u||u!=(a=Number(u)))return r(h,0,1);if(u!=(i=e.substr(l+1,a)).length)return r(h,0,1);if(i.length){if(o=t.decodePacket(i,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,l+a,s))return}l+=a,u=""}else u+=c}return""!==u?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));y(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),a=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),i=0;i<e.length;i++)r[i]=e.charCodeAt(i);n=r.buffer}o[a++]=t?0:1;var u=n.byteLength.toString();for(i=0;i<u.length;i++)o[a++]=parseInt(u[i]);o[a++]=255;for(r=new Uint8Array(n),i=0;i<r.length;i++)o[a++]=r[i]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){y(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var a=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),i=new Uint8Array(a.length+1);for(o=0;o<a.length;o++)i[o]=parseInt(a[o]);if(i[a.length]=255,g){var u=new g([t.buffer,i.buffer,e]);n(null,u)}})},function(e,t){return n(new g(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,a=[];o.byteLength>0;){for(var u=new Uint8Array(o),l=0===u[0],s="",c=1;255!==u[c];c++){if(s.length>310)return r(h,0,1);s+=u[c]}o=i(o,2+s.length),s=parseInt(s);var f=i(o,0,s);if(l)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var d=new Uint8Array(f);f="";for(c=0;c<d.length;c++)f+=String.fromCharCode(d[c])}a.push(f),o=i(o,s)}var p=a.length;a.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,p)})}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){var r=n(29),o=n(4),a=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(42)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(31);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";var r=n(3);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(3),o=n(15),a=n(10)("species");e.exports=function(e,t){var n,i=r(e).constructor;return void 0===i||null==(n=r(i)[a])?t:o(n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(l(n(8)),l(n(9))),a=l(n(5)),i=l(n(77)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);return{self:e.getSelf(t),notif:{}}}return r(e,null,[{key:"getOpenHeight",value:function(e,t){switch(e.extensionMode){case u.default.extensionModeExtModalLabel:case u.default.extensionModeExtBottomLabel:return 450;default:return window.innerHeight}}},{key:"selfHeight",get:function(){return"100%"}},{key:"closeHeight",get:function(){return 45}},{key:"headerHeight",get:function(){return 45}},{key:"notifHeight",get:function(){return 20}},{key:"notifOpenTranslate",get:function(){return 20}},{key:"widthRatio",get:function(){return.94}}]),r(e,null,[{key:"getWidth",value:function(e){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?o.default.trimUnit("100%"):"100%"}},{key:"getSelfHeightPx",value:function(){return"calc( 100vh - "+i.default.selfHeight+"px )"}},{key:"getSelfRight",value:function(e,t){e.bootOption,e.app;return arguments.length>2&&void 0!==arguments[2]&&arguments[2]?o.default.trimUnit("0px"):"0px"}},{key:"getSelfOpenTranslateY",value:function(){return-i.default.selfHeight+"px"}},{key:"getSelfCloseTranslateY",value:function(){return e.getSelfHeightPx()}},{key:"getSelf",value:function(t){var n=t.app,r=(t.bootOption,e.getWidth(n)),i=e.getSelfHeightPx(t),u=e.getSelfRight(t,r),l=e.getSelfOpenTranslateY(),s=o.default.getLayoutBlock({position:"absolute",width:r,height:i,right:u,bottom:0,overflow:"visible",borderBottom:"none",margin:"0 auto",zIndex:a.default.maxZIndex}),c=o.default.getContentBase({textAlign:"left"}),f=o.default.getAnimationBase({transform:"translate3d(0px, "+l+", 0px)",transition:a.default.getTransition(n)});return o.default.get({layout:s,content:c,animation:f})}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=c(n(1)),i=c(n(9)),u=c(n(5)),l=c(n(21)),s=c(n(22));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t)}}return o(e,null,[{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:n="200%";break;case a.default.screenModeMiddleLabel:n=e.isOpenDetail?"calc( 100% + "+s.default.getWidth(e)+" )":"calc( 100% + "+l.default.getWidth(e)+" )";break;case a.default.screenModeLargeLabel:n="100%"}return t?i.default.trimUnit(n):n}},{key:"getLeft",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:n="0px"}return t?i.default.trimUnit(n):n}},{key:"getTransform",value:function(e){var t="translate3d( 0px, 0px, 0px )";if(e.extensionMode===a.default.extensionModeExtBottomLabel)t=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( -50%, 0px, 0px )";else switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:t=e.isOpenMenu?"translate3d( 100%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case a.default.screenModeMiddleLabel:t=e.isOpenDetail?"translate3d( -"+s.default.baseWidth+", 0px, 0px )":"translate3d( 0px ,0px, 0px )";break;case a.default.screenModeLargeLabel:t="translate3d( 0px ,0px, 0px )"}return t}},{key:"getBorders",value:function(e){return e.extensionMode===a.default.extensionModeExtBottomLabel?{border:0}:e.screenMode===a.default.screenModeUndispLabel||e.screenMode===a.default.screenModeSmallLabel?{border:u.default.border}:{borderTop:u.default.border,borderBottom:u.default.border}}},{key:"selfHeight",get:function(){return 45}}]),o(e,null,[{key:"getSelf",value:function(t){var n=t.app,o=e.getBorders(n),l=n.extensionMode===a.default.extensionModeExtBottomLabel?u.default.radiuses:"0px",s=i.default.getLayoutFlex(r({position:"fixed",bottom:"0px",left:e.getLeft(n),height:e.selfHeight,width:e.getWidth(n),zIndex:u.default.maxZIndex,borderRadius:l,justifyContent:"flex-start"},o)),c=i.default.getAnimationBase({transform:e.getTransform(n),transition:u.default.getTransition(n)});return i.default.get({layout:s,content:{},animation:c})}}]),e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(16)),a=u(n(9)),i=u(n(5));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),upper:e.getUpper(t),upperChild:e.getUpperChild(t),upperTitle:e.getUpperTitle(t),upperTimeago:e.getUpperTimeago(t),bottom:e.getBottom(t),bottomIcon:e.getBottomIcon(t),bottomPost:e.getBottomPost(t)}}return r(e,null,[{key:"bubbleStampScale",get:function(){return 2}},{key:"stampScale",get:function(){return 1}},{key:"stampStyle",get:function(){return"display: flex;justify-content: center;align-items: center;width: 100%;height: 100%;transform: scale("+e.bubbleStampScale+");font-size: 50px;"}},{key:"fontSize",get:function(){return 14}},{key:"iconSize",get:function(){return"25px"}}]),r(e,null,[{key:"getSelf",value:function(e){var t=e.app,n=t.isBubblePost?"10px 0px 10px 0px":"0px 0px 0px 0px",r=t.isBubblePost?"75px":"40px",o="calc( 100% - 0px )",i=a.default.getLayoutBlock({width:o,minWidth:"calc( 100% - 20px )",maxWidth:o,height:"auto",minHeight:r,padding:n}),u=a.default.getContentBase(),l=a.default.getAnimationBase();return a.default.get({layout:i,content:u,animation:l})}},{key:"getUpper",value:function(e){var t=e.app.isBubblePost?"flex":"none",n=a.default.getLayoutFlex({display:t,justifyContent:"space-between",height:"20px"}),r=a.default.getContentBase({fontSize:"8px"}),o=a.default.getAnimationBase();return a.default.get({layout:n,content:r,animation:o})}},{key:"getUpperChild",value:function(){var e=a.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"center",flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%"}),t=a.default.getContentBase({textAlign:"left",textIndent:"10px"}),n=a.default.getAnimationBase();return a.default.get({layout:e,content:t,animation:n})}},{key:"getUpperTitle",value:function(){var e=a.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:6,width:"60%",minWidth:"60%",maxWidth:"60%",margin:"0px 10px 0px 5px"}),t=a.default.getContentBase({textAlign:"left",whiteSpace:"nowrap",wordBreak:"break-all"}),n=a.default.getAnimationBase();return a.default.get({layout:e,content:t,animation:n})}},{key:"getUpperTimeago",value:function(){var e=a.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:2,padding:"0px 20px 0px 0px",width:"20%",minWidth:"20%",maxWidth:"20%"}),t=a.default.getContentBase({textAlign:"right",letterSpacing:"0.5px"}),n=a.default.getAnimationBase();return a.default.get({layout:e,content:t,animation:n})}},{key:"getBottom",value:function(){var e=a.default.getLayoutFlex({padding:"0px 10px 0px 0px"}),t=a.default.getContentBase(),n=a.default.getAnimationBase();return a.default.get({layout:e,content:t,animation:n})}},{key:"getBottomIcon",value:function(){var t=a.default.getLayoutBlock({flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%",height:e.iconSize,backgroundImage:"url("+o.default.protcol+":"+o.default.assetsPath+'favicon.ico")',backgroundPosition:"50% 50%",backgroundSize:"24px 24px",backgroundRepeat:"no-repeat"}),n=a.default.getContentBase(),r=a.default.getAnimationBase();return a.default.get({layout:t,content:n,animation:r})}},{key:"getBottomPost",value:function(t){var n=t.app,r=n.isBubblePost?i.default.themeRGBA:"none",o=n.isBubblePost?i.default.whiteRGBA:"rgba(160, 160, 160)",u=n.isBubblePost?"15px 15px 15px 25px":"0px",l=a.default.getLayoutBlock({flexGrow:8,width:"79%",minWidth:"79%",maxWidth:"79%",background:r,padding:u,margin:"0px 1% 0px 0px",borderRadius:"10px"}),s=a.default.getContentBase({color:o,lineHeight:1.7,fontSize:e.fontSize+"px",textAlign:"left",cursor:"pointer",wordWrap:"break-word",overflowWrap:"break-word"}),c=a.default.getAnimationBase();return a.default.get({layout:l,content:s,animation:c})}}]),e}();t.default=l},function(e,t,n){var r=n(24),o=n(11),a=n(53);e.exports=function(e){return function(t,n,i){var u,l=r(t),s=o(l.length),c=a(i,s);if(e&&n!=n){for(;s>c;)if((u=l[c++])!=u)return!0}else for(;s>c;c++)if((e||c in l)&&l[c]===n)return e||c||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(31);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(32),o=n(35);e.exports=function(e){return function(t,n){var a,i,u=String(o(t)),l=r(n),s=u.length;return l<0||l>=s?e?"":void 0:(a=u.charCodeAt(l))<55296||a>56319||l+1===s||(i=u.charCodeAt(l+1))<56320||i>57343?e?u.charAt(l):a:e?u.slice(l,l+2):i-56320+(a-55296<<10)+65536}}},function(e,t,n){var r=n(7),o=n(31),a=n(10)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(10)("iterator"),o=!1;try{var a=[7][r]();a.return=function(){o=!0},Array.from(a,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var a=[7],i=a[r]();i.next=function(){return{done:n=!0}},a[r]=function(){return i},e(a)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(62),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var a=n.call(e,t);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(165);var r=n(19),o=n(18),a=n(6),i=n(35),u=n(10),l=n(123),s=u("species"),c=!a(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=u(e),p=!a(function(){var t={};return t[d]=function(){return 7},7!=""[e](t)}),h=p?!a(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[s]=function(){return n}),n[d](""),!t}):void 0;if(!p||!h||"replace"===e&&!c||"split"===e&&!f){var g=/./[d],y=n(i,d,""[e],function(e,t,n,r,o){return t.exec===l?p&&!o?{done:!0,value:g.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),m=y[0],v=y[1];r(String.prototype,e,m),o(RegExp.prototype,d,2==t?function(e,t){return v.call(e,this,t)}:function(e){return v.call(e,this)})}}},function(e,t,n){var r=n(4).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(4),o=n(0),a=n(19),i=n(59),u=n(43),l=n(58),s=n(57),c=n(7),f=n(6),d=n(84),p=n(61),h=n(109);e.exports=function(e,t,n,g,y,m){var v=r[e],b=v,x=y?"set":"add",k=b&&b.prototype,w={},T=function(e){var t=k[e];a(k,e,"delete"==e?function(e){return!(m&&!c(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return m&&!c(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(m||k.forEach&&!f(function(){(new b).entries().next()}))){var S=new b,C=S[x](m?{}:-0,1)!=S,E=f(function(){S.has(1)}),_=d(function(e){new b(e)}),O=!m&&f(function(){for(var e=new b,t=5;t--;)e[x](t,t);return!e.has(-0)});_||((b=t(function(t,n){s(t,b,e);var r=h(new v,t,b);return null!=n&&l(n,y,r[x],r),r})).prototype=k,k.constructor=b),(E||O)&&(T("delete"),T("has"),y&&T("get")),(O||C)&&T(x),m&&k.clear&&delete k.clear}else b=g.getConstructor(t,e,y,x),i(b.prototype,n),u.NEED=!0;return p(b,e),w[e]=b,o(o.G+o.W+o.F*(b!=v),w),m||g.setStrong(b,e,y),b}},function(e,t,n){for(var r,o=n(4),a=n(18),i=n(51),u=i("typed_array"),l=i("view"),s=!(!o.ArrayBuffer||!o.DataView),c=s,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[d[f++]])?(a(r.prototype,u,!0),a(r.prototype,l,!0)):c=!1;e.exports={ABV:s,CONSTR:c,TYPED:u,VIEW:l}},function(e,t,n){"use strict";e.exports=n(42)||!n(6)(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete n(4)[e]})},function(e,t,n){"use strict";var r=n(0);e.exports=function(e){r(r.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,n){"use strict";var r=n(0),o=n(15),a=n(30),i=n(58);e.exports=function(e){r(r.S,e,{from:function(e){var t,n,r,u,l=arguments[1];return o(this),(t=void 0!==l)&&o(l),null==e?new this:(n=[],t?(r=0,u=a(l,arguments[2],2),i(e,!1,function(e){n.push(u(e,r++))})):i(e,!1,n.push,n),new this(n))}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(9)),i=s(n(5)),u=s(n(45)),l=s(n(1));n(439);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);r({},t.bootOption,t.app);var n=e.getHeadTab(t),o=e.getMenu(t),a=e.getTalknLogo(t),i=e.getUser(t),u=e.getHeaderUser(t),l=e.getTag(t),s=e.getHome(t),c=e.getGraph(t);return{headTab:n,menu:o,talknLogo:a,user:i,headerUser:u,search:e.getSearch(t),tag:l,home:s,graph:c,index:e.getIndex(t),logs:e.getLogs(t),setting:e.getSetting(t),thunder:e.getThunder(t),bubble:e.getBubble(t),detail:e.getDetail(t),heart:e.getHeart(t),share:e.getShare(t),money:e.getMoney(t),openEmoji:e.getOpenEmoji(t),close:e.getClose(t),update:e.getUpdate(t)}}return o(e,null,[{key:"defaultOption",get:function(){return{sizePx:e.largeSize,active:!0}}},{key:"smallSize",get:function(){return"24px"}},{key:"middleSize",get:function(){return"36px"}},{key:"largeSize",get:function(){return"48px"}},{key:"bigSize",get:function(){return"64px"}}]),o(e,null,[{key:"getEmpty",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:i}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getTwitter",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"twitter.png":"twitter_gray.png",l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getFacebook",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"facebook.png":"facebook_gray.png",l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getAppstore",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"appstore.png":"appstore_gray.png",l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getAndroid",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"android.png":"android_gray.png",l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getHome",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"home.png":"home_gray.png",l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getGraph",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=n.active?"graph.png":"graph_gray.png",l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getTalkn",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(n=r({},e.defaultOption,n)).sizePx?n.sizePx:e.middleSize,i=(n.active,"talkn.png"),l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:o,height:o,minWidth:o,minHeight:o,backgroundSize:o,backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+i+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getTalknLogo",value:function(e){e.app;return{img:a.default.get({layout:a.default.getLayoutBlock({backgroundImage:"url("+u.default.assetsImgPath+"talkn_logo2.png)",backgroundPosition:"center center",backgroundSize:"90%",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}},{key:"getChromeExtension",value:function(t){t.app;var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=((n=r({},e.defaultOption,n)).active,"chrome_extension.png"),l=n.active?"pointer":"default";return a.default.get({layout:a.default.getLayoutBlock({flexGrow:"1",width:"100%",minWidth:"100%",height:"180px",minHeight:"60px",backgroundColor:i.default.reliefRGB,backgroundSize:"75%",backgroundPosition:"center",backgroundImage:"url(https://"+u.default.assetsImgPath+o+")",backgroundRepeat:"no-repeat"}),content:a.default.getContentBase({cursor:l}),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}},{key:"getTag",value:function(e){e.app;return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:a.default.getContentBase({cursor:"pointer"}),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),left:a.default.get({layout:a.default.getLayoutInlineBlock({borderBottom:"2px solid "+i.default.reliefRGB,borderLeft:"2px solid "+i.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"rotate(45deg) translate3d(5px, 5px, 0px)"})}),right:a.default.get({layout:a.default.getLayoutInlineBlock({borderBottom:"2px solid "+i.default.reliefRGB,borderLeft:"2px solid "+i.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"rotate(-135deg) translate3d(-6px, -4px, 0px)"})}),bar:a.default.get({layout:a.default.getLayoutInlineBlock({background:i.default.reliefRGB,width:"2px",height:"13px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"rotate(40deg) translate3d(-5px, 13px, 0px)"})})}}},{key:"getHomeCss",value:function(e){e.app;var t=a.default.get({layout:a.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:a.default.getContentBase({cursor:"pointer"}),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),n=a.default.get({layout:a.default.getLayoutInlineBlock({borderBottom:"2px solid "+i.default.reliefRGB,borderLeft:"2px solid "+i.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"19px",height:"18px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"rotate(135deg) translate3d(5px, -3px, 0px)"})}),r=a.default.get({layout:a.default.getLayoutInlineBlock({borderRight:"2px solid "+i.default.reliefRGB,borderBottom:"2px solid "+i.default.reliefRGB,borderLeft:"2px solid "+i.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"20px",height:"12px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(2px, -6px, 0px)"})});return{div:t,leaf:n,door:a.default.get({layout:a.default.getLayoutInlineBlock({background:""+i.default.reliefRGB,width:"6px",height:"8px",margin:"0 auto",borderRadius:"5px 5px 0px 0px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(-11px, -5px, 0px)"})}),base:r}}},{key:"getSearch",value:function(e){var t=e.app;return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"45px",height:"45px",borderRadius:"100px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),circle:a.default.get({layout:a.default.getLayoutBlock({position:"absolute",top:"4px",left:"16px",margin:"7px auto",width:"18px",height:"18px",borderRadius:"100px",border:"3px solid "+i.default.chromeOffTabRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bar:a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",top:"23px",left:"13px",margin:"0 auto",background:i.default.chromeOffTabRGB,width:"4px",height:"12px",borderRadius:"10px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.getTransition(t),transform:"scale(1) translate3d(0px, 0px, 0px) rotate(45deg)"})})}}},{key:"getUser",value:function(){return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"22px",height:e.smallSize,margin:"2px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),top:a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:i.default.reliefRGB,width:"12px",height:"12px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:i.default.reliefRGB,width:"8px",height:"12px",borderRadius:"6px",position:"relative",top:"8px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}},{key:"getHeaderUser",value:function(){return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"5px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),top:a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:""+i.default.chromeOffTabRGB,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:""+i.default.chromeOffTabRGB,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"12px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}},{key:"getIndex",value:function(){var t=a.default.get({layout:a.default.getLayoutInlineBlock({width:"22px",height:e.smallSize,margin:"2px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),n=a.default.get({layout:a.default.getLayoutBlock({width:"22px",height:"22px",margin:"0 auto",borderRadius:"4px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()}),r=a.default.get({layout:a.default.getLayoutBlock({width:"16px",height:"2px",margin:"4px auto",borderRadius:"6px",background:i.default.reliefRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()});return{div:t,wrap:n,top:a.default.get({layout:r,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),middle:a.default.get({layout:r,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bottom:a.default.get({layout:r,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})})}}},{key:"getLogs",value:function(){var t=a.default.get({layout:a.default.getLayoutInlineBlock({width:"22px",height:e.smallSize,margin:"2px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),n=a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",top:"3px",left:"-6px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 ) rotate(-15deg)"})}),r=a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:i.default.reliefRGB,width:"8px",height:"12px",borderRadius:"45px 30px 45px 45px",position:"relative",left:"2px",zIndex:"0"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),o=a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:i.default.reliefRGB,width:"5px",height:"7px",borderRadius:"10px",position:"relative",top:"-2px",left:"2px",zIndex:"0"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),u=a.default.get({layout:a.default.getLayoutBlock({width:"7px",height:"2px",background:i.default.offWhiteRGB,margin:"0 auto",zIndex:"1000",position:"relative",left:"1px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, -8px, 1000px )"})}),l=a.default.get({layout:a.default.getLayoutInlineBlock({width:"36px",height:"36px",position:"absolute",top:"-4px",left:"0px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 0.5 ) rotate(30deg)"})}),s=a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:i.default.reliefRGB,width:"10px",height:"20px",borderRadius:"30px 50px 40px 40px",position:"relative",left:"-5px",zIndex:"0"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),c=a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",background:i.default.reliefRGB,width:"7px",height:"7px",borderRadius:"2px 2px 3px 3px",position:"relative",left:"-5px",zIndex:"0"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:t,foot1:n,foot1Top:r,foot1Space:u,foot1Bottom:o,foot2:l,foot2Top:s,foot2Space:a.default.get({layout:a.default.getLayoutBlock({width:"19px",height:"3px",background:i.default.offWhiteRGB,margin:"0 auto",zIndex:"1000"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, -10px, 1000px )"})}),foot2Bottom:c}}},{key:"getSetting",value:function(){var t=a.default.get({layout:a.default.getLayoutInlineBlock({width:"22px",height:e.smallSize,margin:"2px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"scale( 1 )"})}),n=a.default.get({layout:a.default.getLayoutBlock({position:"absolute",margin:"0 auto",background:i.default.reliefRGB,width:"3px",height:"3px",borderRadius:"1px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:t,wing1:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(9.5px, 2px, 0px) rotate(0deg)"})}),wing2:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 15px, 4.5px, 0px ) rotate( 45deg )"})}),wing3:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 16.5px, 9px, 0px ) rotate( 90deg )"})}),wing4:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 15.5px, 14px, 0px ) rotate( 125deg )"})}),wing5:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 10px, 17px, 0px ) rotate( 180deg )"})}),wing6:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 4px, 14.5px, 0px ) rotate( 225deg )"})}),wing7:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 2.5px, 9.5px, 0px ) rotate( 270deg )"})}),wing8:a.default.get({layout:n,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 4px, 4.5px, 0px ) rotate( 315deg )"})}),circle:a.default.get({layout:a.default.getLayoutBlock({position:"absolute",top:"3px",left:"4px",width:"14px",height:"14px",border:"3px solid "+i.default.reliefRGB,borderRadius:"50px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 1px, 0px )"})})}}},{key:"getThunder",value:function(e){var t=e.app,n=i.default.reliefRGBA;return l.default.isActiveMultistream(t)&&(n=i.default.themeRGBA),{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"rotate(0deg) translate(0px, 0px)"})}),wrap:a.default.get({layout:a.default.getLayoutInlineBlock({borderRadius:"50px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"rotate(90deg) translate3d(0px,0px,0px)"})}),top:a.default.get({layout:a.default.getLayoutBlock({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:"transparent",borderRightColor:"transparent",borderBottomColor:""+n,borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(-3px, -3px)"})}),bottom:a.default.get({layout:a.default.getLayoutFlex({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:""+n,borderRightColor:"transparent",borderBottomColor:"transparent",borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(15px, -3px)"})})}}},{key:"getPlay",value:function(e){var t=e.app.isOpenLinks?i.default.themeRGB:i.default.reliefRGB;return{div:a.default.get({layout:a.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"translate(0px, 0px)"})}),playCircle:a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",top:"5px",width:"24px",height:"24px",minWidth:"24px",minHeight:"24px",border:"2px solid "+t,borderRadius:"30px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),playTriangle:a.default.get({layout:a.default.getLayoutInlineBlock({position:"relative",width:"6px",height:"6px",borderTop:"6px solid transparent",borderRight:"6px solid transparent",borderBottom:"6px solid transparent",borderLeft:"6px solid "+t}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"translate3d(4px, 1.5px, 0px)"})})}}},{key:"getBubble",value:function(e){var t=e.app.isBubblePost?i.default.themeRGB:i.default.reliefRGBA;return{div:a.default.get({layout:a.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"30px",height:"30px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"translate(0px, 0px)"})}),bubble:a.default.get({layout:a.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"18px",height:"14px",background:t,borderRadius:"30px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),bubbleBar:a.default.get({layout:a.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"5px",height:"10px",background:t,border:"3px solid "+t}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.transitionOff,transform:"skew(30deg, 28deg) rotate(30deg) translate3d(-2px, -7px, 0px)"})})}}},{key:"getDetail",value:function(e){var t=e.app,n=a.default.get({layout:a.default.getLayoutBlock({width:"40px",height:"40px",borderRadius:"100px",margin:"1px auto",cursor:"pointer"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()}),o=a.default.get({layout:a.default.getLayoutBlock({width:"26px",height:"28px",margin:"7px auto",borderRadius:"2px",background:""+i.default.calmRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()}),u=a.default.get({layout:a.default.getLayoutBlock({width:"14px",height:"2px",margin:"3px auto",borderRadius:"6px",background:i.default.whiteRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()});return{div:n,wrap:o,bar1:a.default.get({layout:r({},u,{width:"7px",margin:"5px 0px 0px 6px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar2:a.default.get({layout:u,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar3:a.default.get({layout:u,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.getTransition(t),transform:"translate3d( 0px, 0px, 0px )"})}),bar4:a.default.get({layout:u,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.getTransition(t),transform:"translate3d( 0px, 0px, 0px )"})}),mekuri:a.default.get({layout:r({},u,{position:"absolute",top:0,rightt:0,width:0,height:0,borderRadius:0,borderTop:"4px solid "+i.default.whiteRGB,borderLeft:"4px solid "+i.default.whiteRGB,borderRight:"4px solid "+i.default.reliefRGB,borderBottom:"4px solid "+i.default.reliefRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(18px, -3px, 0px) rotate( 90deg )"})})}}},{key:"getMenu",value:function(e){var t=e.app;return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"4px auto"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.getTransition(t)})}),dot:a.default.get({layout:a.default.getLayoutBlock({width:"6px",height:"6px",margin:"4px auto",borderRadius:"6px",background:i.default.calmRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()})}}},{key:"getHeadTabLeftTransform",value:function(){return e.getHeadTabLeftOpenTransform}},{key:"getHeadTabRightTransform",value:function(){return e.getHeadTabRightOpenTransform}},{key:"getHeadTab",value:function(t){var n=t.app,r=a.default.getLayoutInlineBlock({width:"4px",borderRadius:"10px",background:i.default.calmRGB});return{div:a.default.get({layout:a.default.getLayoutBlock({width:"40px",height:"20px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase()}),left:a.default.get({layout:r,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.getTransition(n),transform:e.getHeadTabLeftTransform()})}),right:a.default.get({layout:r,content:a.default.getContentBase(),animation:a.default.getAnimationBase({transition:i.default.getTransition(n),transform:e.getHeadTabRightTransform()})})}}},{key:"getHeart",value:function(t){t.app.openLockMenu===l.default.openLockMenuLabelShare?i.default.themeRGBA:i.default.reliefRGB;return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:e.smallSize,height:e.smallSize,margin:"2px"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({})}),before:a.default.get({layout:a.default.getLayoutBase({width:"10px",height:"17px",borderRadius:"10px 10px 0 0",background:i.default.reliefRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"rotate(-45deg) translate3d(0px, 7px, 0px)"})}),after:a.default.get({layout:a.default.getLayoutBase({width:"17px",height:"10px",borderRadius:"0 10px 10px 0",background:i.default.reliefRGB}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"rotate(-45deg) translate3d(11px, -1px, 0px)"})})}}},{key:"getShare",value:function(t){var n=t.app.openLockMenu===l.default.openLockMenuLabelShare?i.default.themeRGBA:i.default.reliefRGB,r=a.default.get({layout:a.default.getLayoutInlineBlock({width:e.smallSize,height:e.smallSize,margin:"2px"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({})}),o=a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"9px",width:"16px",height:"14px",margin:"0 auto",border:"2px solid "+n,borderRadius:"3px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px)"})}),u=a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",top:"6px",left:"16px",width:"2px",height:"11px",margin:"0 auto",background:n}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px)"})});return{div:r,base:o,whiteBar1:a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"11px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d(-4px, 0px, 0px)"})}),whiteBar2:a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"18px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d(-4px, 0px, 0px)"})}),bar:u,arrow:a.default.get({layout:a.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"13px",width:"8px",height:"8px",borderTop:"2px solid "+n,borderRight:"2px solid "+n}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px) rotate( -45deg)"})})}}},{key:"getMoney",value:function(){return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:e.smallSize,height:e.smallSize,margin:"2px"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({})}),outer:a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",width:"22px",height:"22px",borderRadius:"24px",border:"2px solid "+i.default.reliefRGB}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(0px, 3px, 0px)"})}),inner:a.default.get({layout:a.default.getLayoutBlock({margin:"0 auto",width:"8px",height:"8px",borderRadius:"8px",border:"2px solid "+i.default.reliefRGB}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d(0px, 5px, 0px)"})})}}},{key:"getOpenEmoji",value:function(e){var t=e.app;return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"5px",height:"5px",minWidth:"5px",minHeight:"5px",borderRight:"5px solid transparent",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid rgba(200,200,200,0.8)"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:i.default.getTransition(t)})})}}},{key:"getCloseEmoji",value:function(e){var t=e.app;return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"5px",height:"5px",minWidth:"5px",minHeight:"5px",borderRight:"5px solid rgba(200,200,200,0.8)",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid transparent"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:i.default.getTransition(t)})})}}},{key:"getClose",value:function(){return{div:a.default.get({layout:a.default.getLayoutInlineBlock({width:"26px",height:"26px",margin:"1px"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({})}),circle:a.default.get({layout:a.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"26px",height:"26px",border:"2px solid "+i.default.calmRGB,borderRadius:"30px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(0deg)"})}),bar1:a.default.get({layout:a.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"18px",background:i.default.calmRGBA,borderRadius:"2px"}),content:a.default.getContentBase(),animation:a.default.getAnimationBase({transform:"translate3d(10px, 2px, 0px) rotate(45deg)"})}),bar2:a.default.get({layout:a.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"18px",background:i.default.calmRGBA,borderRadius:"2px"}),content:a.default.getContentBase({}),animation:a.default.getAnimationBase({transform:"translate3d(10px, 2px, 0px) rotate(-45deg)"})})}}},{key:"getUpdate",value:function(t){t.app;return{div:a.default.get({layout:a.default.getLayoutFlex({width:e.middleSize,height:e.middleSize}),content:a.default.getContentBase({cursor:"pointer"}),animation:a.default.getAnimationBase({})}),circle:a.default.get({layout:a.default.getLayoutBase({width:"55%",height:"55%",borderRadius:"30px",border:"2px solid "+i.default.borderRGB,overflow:"visible"}),content:a.default.getContentBase({cursor:"pointer"}),animation:a.default.getAnimationBase({})}),bar:a.default.get({layout:a.default.getLayoutBase({position:"relative",left:"10px",width:"8px",height:"8px",background:"none",borderTop:"0px solid "+i.default.lightRGB,borderRight:"2px solid "+i.default.borderRGB,borderBottom:"2px solid "+i.default.borderRGB,borderLeft:"0px solid "+i.default.lightRGB}),content:a.default.getContentBase({cursor:"pointer"}),animation:a.default.getAnimationBase({transform:"rotate(25deg)"})}),white:a.default.get({layout:a.default.getLayoutBase({position:"relative",top:"2px",left:"12px",width:"10px",height:"4px",background:i.default.lightRGB}),content:a.default.getContentBase({cursor:"pointer"}),animation:a.default.getAnimationBase({transform:"rotate(25deg)"})})}}},{key:"getHeadTabLeftOpenTransform",get:function(){return"rotate( 120deg ) translate3d(3px, 5px, 0px)"}},{key:"getHeadTabRightOpenTransform",get:function(){return"rotate( -120deg ) translate3d(-3px, 5px, 0px)"}},{key:"getHeadTabLeftCloseTransform",get:function(){return"rotate( 90deg ) translate3d(3px, 5px, 0px)"}},{key:"getHeadTabRightCloseTransform",get:function(){return"rotate( -90deg ) translate3d(-3px, 5px, 0px)"}}]),e}();t.default=c},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var l,s=[],c=!1,f=-1;function d(){c&&l&&(c=!1,l.length?s=l.concat(s):f=-1,s.length&&p())}function p(){if(!c){var e=u(d);c=!0;for(var t=s.length;t;){for(l=s,s=[];++f<t;)l&&l[f].run();f=-1,t=s.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(i(n(45)),i(n(8)));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,null,[{key:"getBaseKey",value:function(e){return""+a.default.storageKey.baseKey+e}},{key:"setStorage",value:function(t,n,o){if(n){var a=e.getBaseKey(t),i=JSON.parse(localStorage.getItem(a));return i=JSON.stringify(r({},i,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},n,o))),localStorage.setItem(a,i),!0}return!1}},{key:"getStorage",value:function(t,n){var r=e.getBaseKey(t),o=JSON.parse(localStorage.getItem(r));return o&&o[n]?o[n]:{}}},{key:"getCaches",value:function(t){return{menuLogs:e.getStorage(t,a.default.storageKey.menuLogs),app:e.getStorage(t,a.default.storageKey.app),thread:e.getStorage(t,a.default.storageKey.thread),setting:e.getStorage(t,a.default.storageKey.setting)}}}]),e}();t.default=u},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(445)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,a=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(a=o))}),e.splice(a,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(94))},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var a=n[r].split("=");t[decodeURIComponent(a[0])]=decodeURIComponent(a[1])}return t}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(463)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,a=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(a=o))}),e.splice(a,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(94))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={isUrl:function(e){return!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*|\\/)?$","i").test(e)},getSaveFaviconName:function(e){var t=e.replace(/\u002f/g,"_");return t.indexOf(".png")>0?t:t+".png"},trimPx:function(e){return e.toString().replace("px","")}}},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return s}),n.d(t,"bindActionCreators",function(){return f}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return p}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return a});var r=n(145),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,s=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function g(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1)}}}function y(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}return y({type:a.INIT}),(o={dispatch:y,subscribe:g,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,y({type:a.REPLACE})}})[r.a]=function(){var e,t=g;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var s=u[a],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=l(s,t);throw new Error(p)}o[s]=d,r=r||d!==f}return r?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],i=e[a];"function"==typeof i&&(r[a]=c(i,t))}return r}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){d(e,t,n[t])})}return e}({},n,{dispatch:r=p.apply(void 0,a)(n.dispatch)})}}}},function(e,t,n){var r=n(7),o=n(4).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var r=n(4),o=n(29),a=n(42),i=n(147),u=n(13).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=a?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:i.f(e)})}},function(e,t,n){var r=n(71)("keys"),o=n(51);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(4).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(7),o=n(3),a=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(30)(Function.call,n(25).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return a(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:a}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(7),o=n(107).set;e.exports=function(e,t,n){var a,i=t.constructor;return i!==n&&"function"==typeof i&&(a=i.prototype)!==n.prototype&&r(a)&&o&&o(e,a),e}},function(e,t,n){"use strict";var r=n(32),o=n(35);e.exports=function(e){var t=String(o(this)),n="",a=r(e);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(t+=t))1&a&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){"use strict";var r=n(42),o=n(0),a=n(19),i=n(18),u=n(64),l=n(114),s=n(61),c=n(26),f=n(10)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,g,y,m){l(n,t,h);var v,b,x,k=function(e){if(!d&&e in C)return C[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},w=t+" Iterator",T="values"==g,S=!1,C=e.prototype,E=C[f]||C["@@iterator"]||g&&C[g],_=E||k(g),O=g?T?k("entries"):_:void 0,M="Array"==t&&C.entries||E;if(M&&(x=c(M.call(new e)))!==Object.prototype&&x.next&&(s(x,w,!0),r||"function"==typeof x[f]||i(x,f,p)),T&&E&&"values"!==E.name&&(S=!0,_=function(){return E.call(this)}),r&&!m||!d&&!S&&C[f]||i(C,f,_),u[t]=_,u[w]=p,g)if(v={values:T?_:k("values"),keys:y?_:k("keys"),entries:O},m)for(b in v)b in C||a(C,b,v[b]);else o(o.P+o.F*(d||S),t,v);return v}},function(e,t,n){"use strict";var r=n(54),o=n(50),a=n(61),i={};n(18)(i,n(10)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(i,{next:o(1,n)}),a(e,t+" Iterator")}},function(e,t,n){var r=n(83),o=n(35);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(10)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(64),o=n(10)("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||a[o]===e)}},function(e,t,n){"use strict";var r=n(13),o=n(50);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(62),o=n(10)("iterator"),a=n(64);e.exports=n(29).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||a[r(e)]}},function(e,t,n){var r=n(317);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){"use strict";var r=n(14),o=n(53),a=n(11);e.exports=function(e){for(var t=r(this),n=a(t.length),i=arguments.length,u=o(i>1?arguments[1]:void 0,n),l=i>2?arguments[2]:void 0,s=void 0===l?n:o(l,n);s>u;)t[u++]=e;return t}},function(e,t,n){"use strict";var r=n(44),o=n(164),a=n(64),i=n(24);e.exports=n(113)(Array,"Array",function(e,t){this._t=i(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,o,a=n(74),i=RegExp.prototype.exec,u=String.prototype.replace,l=i,s=(r=/a/,o=/b*/g,i.call(r,"a"),i.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),c=void 0!==/()??/.exec("")[1];(s||c)&&(l=function(e){var t,n,r,o,l=this;return c&&(n=new RegExp("^"+l.source+"$(?!\\s)",a.call(l))),s&&(t=l.lastIndex),r=i.call(l,e),s&&r&&(l.lastIndex=l.global?r.index+r[0].length:t),c&&r&&r.length>1&&u.call(r[0],n,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),e.exports=l},function(e,t,n){"use strict";var r=n(82)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,o,a,i=n(30),u=n(154),l=n(106),s=n(102),c=n(4),f=c.process,d=c.setImmediate,p=c.clearImmediate,h=c.MessageChannel,g=c.Dispatch,y=0,m={},v=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},b=function(e){v.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return m[++y]=function(){u("function"==typeof e?e:Function(e),t)},r(y),y},p=function(e){delete m[e]},"process"==n(31)(f)?r=function(e){f.nextTick(i(v,e,1))}:g&&g.now?r=function(e){g.now(i(v,e,1))}:h?(a=(o=new h).port2,o.port1.onmessage=b,r=i(a.postMessage,a,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(e){c.postMessage(e+"","*")},c.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(e){l.appendChild(s("script")).onreadystatechange=function(){l.removeChild(this),v.call(e)}}:function(e){setTimeout(i(v,e,1),0)}),e.exports={set:d,clear:p}},function(e,t,n){var r=n(4),o=n(125).set,a=r.MutationObserver||r.WebKitMutationObserver,i=r.process,u=r.Promise,l="process"==n(31)(i);e.exports=function(){var e,t,n,s=function(){var r,o;for(l&&(r=i.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(l)n=function(){i.nextTick(s)};else if(!a||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var c=u.resolve(void 0);n=function(){c.then(s)}}else n=function(){o.call(r,s)};else{var f=!0,d=document.createTextNode("");new a(s).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){"use strict";var r=n(15);function o(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},function(e,t,n){"use strict";var r=n(4),o=n(12),a=n(42),i=n(89),u=n(18),l=n(59),s=n(6),c=n(57),f=n(32),d=n(11),p=n(174),h=n(55).f,g=n(13).f,y=n(121),m=n(61),v="prototype",b="Wrong index!",x=r.ArrayBuffer,k=r.DataView,w=r.Math,T=r.RangeError,S=r.Infinity,C=x,E=w.abs,_=w.pow,O=w.floor,M=w.log,P=w.LN2,L=o?"_b":"buffer",B=o?"_l":"byteLength",I=o?"_o":"byteOffset";function A(e,t,n){var r,o,a,i=new Array(n),u=8*n-t-1,l=(1<<u)-1,s=l>>1,c=23===t?_(2,-24)-_(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=E(e))!=e||e===S?(o=e!=e?1:0,r=l):(r=O(M(e)/P),e*(a=_(2,-r))<1&&(r--,a*=2),(e+=r+s>=1?c/a:c*_(2,1-s))*a>=2&&(r++,a/=2),r+s>=l?(o=0,r=l):r+s>=1?(o=(e*a-1)*_(2,t),r+=s):(o=e*_(2,s-1)*_(2,t),r=0));t>=8;i[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,u+=t;u>0;i[f++]=255&r,r/=256,u-=8);return i[--f]|=128*d,i}function R(e,t,n){var r,o=8*n-t-1,a=(1<<o)-1,i=a>>1,u=o-7,l=n-1,s=e[l--],c=127&s;for(s>>=7;u>0;c=256*c+e[l],l--,u-=8);for(r=c&(1<<-u)-1,c>>=-u,u+=t;u>0;r=256*r+e[l],l--,u-=8);if(0===c)c=1-i;else{if(c===a)return r?NaN:s?-S:S;r+=_(2,t),c-=i}return(s?-1:1)*r*_(2,c-t)}function N(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function j(e){return[255&e]}function F(e){return[255&e,e>>8&255]}function D(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function U(e){return A(e,52,8)}function W(e){return A(e,23,4)}function H(e,t,n){g(e[v],t,{get:function(){return this[n]}})}function z(e,t,n,r){var o=p(+n);if(o+t>e[B])throw T(b);var a=e[L]._b,i=o+e[I],u=a.slice(i,i+t);return r?u:u.reverse()}function G(e,t,n,r,o,a){var i=p(+n);if(i+t>e[B])throw T(b);for(var u=e[L]._b,l=i+e[I],s=r(+o),c=0;c<t;c++)u[l+c]=s[a?c:t-c-1]}if(i.ABV){if(!s(function(){x(1)})||!s(function(){new x(-1)})||s(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){for(var V,q=(x=function(e){return c(this,x),new C(p(e))})[v]=C[v],K=h(C),Y=0;K.length>Y;)(V=K[Y++])in x||u(x,V,C[V]);a||(q.constructor=x)}var $=new k(new x(2)),X=k[v].setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||l(k[v],{setInt8:function(e,t){X.call(this,e,t<<24>>24)},setUint8:function(e,t){X.call(this,e,t<<24>>24)}},!0)}else x=function(e){c(this,x,"ArrayBuffer");var t=p(e);this._b=y.call(new Array(t),0),this[B]=t},k=function(e,t,n){c(this,k,"DataView"),c(e,x,"DataView");var r=e[B],o=f(t);if(o<0||o>r)throw T("Wrong offset!");if(o+(n=void 0===n?r-o:d(n))>r)throw T("Wrong length!");this[L]=e,this[I]=o,this[B]=n},o&&(H(x,"byteLength","_l"),H(k,"buffer","_b"),H(k,"byteLength","_l"),H(k,"byteOffset","_o")),l(k[v],{getInt8:function(e){return z(this,1,e)[0]<<24>>24},getUint8:function(e){return z(this,1,e)[0]},getInt16:function(e){var t=z(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=z(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return N(z(this,4,e,arguments[1]))},getUint32:function(e){return N(z(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return R(z(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return R(z(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){G(this,1,e,j,t)},setUint8:function(e,t){G(this,1,e,j,t)},setInt16:function(e,t){G(this,2,e,F,t,arguments[2])},setUint16:function(e,t){G(this,2,e,F,t,arguments[2])},setInt32:function(e,t){G(this,4,e,D,t,arguments[2])},setUint32:function(e,t){G(this,4,e,D,t,arguments[2])},setFloat32:function(e,t){G(this,4,e,W,t,arguments[2])},setFloat64:function(e,t){G(this,8,e,U,t,arguments[2])}});m(x,"ArrayBuffer"),m(k,"DataView"),u(k[v],i.VIEW,!0),t.ArrayBuffer=x,t.DataView=k},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=b(n(2)),i=b(n(130)),u=n(222),l=b(n(435)),s=b(n(8)),c=b(n(45)),f=b(n(1)),d=b(n(185)),p=b(n(132)),h=b(n(95)),g=b(n(442)),y=b(n(473)),m=b(n(495)),v=b(n(143));function b(e){return e&&e.__esModule?e:{default:e}}var x=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id="talkn1",this.talknIndex=t,this.appType=e.getAppType(),this.talknAPI={},this.resizeTimer=null,this.parentUrl=null,this.threadHeight=0,this.innerHeight=0,this.scrollHeight=0,this.mediaTasking=!1,this.mediaCurrentTime=0,this.isLoaded=!1,this.isMessageed=!1,this.isExistParentWindow=!1,this.isAnimateScrolling=!1,this.isScrollBottom=!1,this.load=this.load.bind(this),this.resize=this.resize.bind(this),this.scroll=this.scroll.bind(this),this.message=this.message.bind(this),this.parentTo=this.parentTo.bind(this),this.resizeStartWindow=this.resizeStartWindow.bind(this),this.resizeEndWindow=this.resizeEndWindow.bind(this),this.setIsScrollBottom=this.setIsScrollBottom.bind(this),this.setupPostsTimeline=this.setupPostsTimeline.bind(this),this.dom={},this.dom.html=document.querySelector("html"),this.dom.body=document.querySelector("body"),this.dom.talkn1=document.querySelector("#talkn1"),this.listenAsyncBoot()}return o(e,null,[{key:"getAppType",value:function(){return window.name===s.default.APP_TYPES.EXTENSION?s.default.APP_TYPES.EXTENSION:s.default.APP_TYPES.PORTAL}},{key:"getInitialApp",value:function(e){return e.extensionMode&&"EXT_INCLUDE"===e.extensionMode?{width:e.extensionWidth,height:e.extensionOpenHeight}:{}}},{key:"getPostsHeight",value:function(){var e=0;return document.querySelectorAll("[data-component-name=Post]").forEach(function(t){e+=t.clientHeight}),e}},{key:"getLastPostHeight",value:function(){var e=document.querySelector("[data-component-name=Posts]");return e&&e.lastChild&&e.lastChild.clientHeight?e.lastChild.clientHeight:0}},{key:"sleep",value:function(e){for(var t=new Date;new Date-t<e;);}},{key:"resizeInterval",get:function(){return 300}}]),o(e,[{key:"setupWindow",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];document.querySelector("html").style.cssText+="width 100% !important;height: 100% !important;margin: 0px auto !important;padding-top: 0px !important;",document.querySelector("body").style.cssText+="width 100% !important;height: 100% !important;margin: 0px auto !important;visibility: visible !important;opacity: 1 !important;",window.TalknAPI||(window.TalknAPI=g.default),window.__talknAPI__||(window.__talknAPI__=[]),window.talknAPI=window.__talknAPI__[window.talknIndex]}},{key:"listenAsyncBoot",value:function(){var e=this,t=[];switch(t.push(new Promise(function(t){window.addEventListener("load",function(n){e.load(n,t)})})),this.appType){case s.default.APP_TYPES.PORTAL:window.addEventListener("resize",this.resize),window.addEventListener("scroll",this.scroll),window.addEventListener("message",function(e){"https://www.youtube.com"===e.origin&&console.log(e)});break;case s.default.APP_TYPES.EXTENSION:t.push(new Promise(function(t){window.addEventListener("message",function(n){e.message(n,t)})})),window.addEventListener("resize",this.resize),window.addEventListener("scroll",this.scroll)}Promise.all(t).then(function(t){var n=document.querySelector("script#talkn"),o=p.default.rebuildAttributes(n.attributes),a=t[1]?r({},o,t[1]):o;e.boot(a)})}},{key:"boot",value:function(t){var n=t.connection,r=e.getInitialApp(t),o=(0,y.default)(),s=h.default.getCaches(n),c=new d.default(this.talknIndex,window,t,r,s);return this.talknAPI=new g.default(this.talknIndex,o,c,n),this.talknAPI.initClientState(c),i.default.render(a.default.createElement(u.Provider,{store:this.talknAPI.store},a.default.createElement(m.default,{talknAPI:this.talknAPI,timeago:new l.default})),document.getElementById(this.id),function(){}),!0}},{key:"message",value:function(e,t){if("talkn"===e.data.type)switch(e.data.method){case"bootExtension":this.parentUrl=e.data.url,this.parentTo("bootExtension",c.default),t(e.data.params);break;default:void 0!==window.talknAPI&&talknAPI[e.data.method]&&"function"==typeof talknAPI[e.data.method]&&talknAPI[e.data.method](e.data.params)}}},{key:"load",value:function(e,t){this.threadHeight=document.querySelector("html").scrollHeight,this.scrollHeight=window.scrollY,this.innerHeight=window.innerHeight,this.setupWindow(),t(!0)}},{key:"ready",value:function(e){}},{key:"resize",value:function(t){var n=this;if(window.talknAPI){var r=window.talknAPI.store.getState().app;"EXT_BOTTOM"===r.extensionMode||"EXT_MODAL"===r.extensionMode?null===this.resizeTimer&&(this.resizeTimer=setTimeout(function(){n.resizeEndWindow(r)},e.resizeInterval)):null===this.resizeTimer&&(this.resizeTimer=setTimeout(function(e){n.resizeEndWindow(e)},e.resizeInterval))}}},{key:"scroll",value:function(e){talknAPI.store.getState().app.isOpenNewPost&&talknAPI.closeNewPost(),this.setIsScrollBottom()}},{key:"setIsScrollBottom",value:function(){var e=document.querySelector("html").scrollHeight;this.innerHeight=window.innerHeight,this.scrollHeight=window.scrollY;document.querySelector("body").scrollTop;this.isScrollBottom=e===this.innerHeight+this.scrollHeight}},{key:"resizeStartWindow",value:function(e){e.width=window.innerWidth,e.height=window.innerHeight,e.isTransition=!1,e.screenMode=f.default.getScreenMode();var t=talknAPI.store.getState().setting;talknAPI.onResizeStartWindow({app:e,setting:t})}},{key:"resizeEndWindow",value:function(e){clearTimeout(this.resizeTimer),this.resizeTimer=null,(e=talknAPI.store.getState().app).width=window.innerWidth,e.height=window.innerHeight,e.screenMode=f.default.getScreenMode();var t=talknAPI.store.getState().setting,n=talknAPI.store.getState().bootOption;talknAPI.onResizeEndWindow({app:e,setting:t,bootOption:n})}},{key:"animateScrollTo",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:99999,t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:400,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};if(0===n)window.scrollTo(0,e);else if(!this.isAnimateScrolling){var o=window.scrollY,a=e-o,i=0;!function e(){i+=20;var u=Math.easeInOutQuad(i,o,a,n);screenTop=Math.floor(u),window.scrollTo(0,u),i<n?(t.isAnimateScrolling=!0,setTimeout(e,20)):(t.isAnimateScrolling=!1,r())}()}}},{key:"lockWindow",value:function(){return this.dom.html.style.overflow="hidden",this.dom.body.style.overflow="hidden",this.dom.talkn1.style.overflow="hidden",window.scrollY}},{key:"unlockWindow",value:function(){this.dom.html.style.overflow="inherit",this.dom.body.style.overflow="inherit",this.dom.talkn1.style.overflow="inherit"}},{key:"appendRoot",value:function(){var e=document.createElement("talkn");return e.id=this.id,document.body.appendChild(e),!0}},{key:"getMediaCurrentTime",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;return Math.floor(e*t)/t}},{key:"setupPostsTimeline",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"audio",o=(v.default.getStoragePostsTimelineZero(e),v.default.getStoragePostsTimeline(e)),a=[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o)),i=a.length,u=document.querySelector(r+"[src='"+t+"']");if(null===u)return!1;u.addEventListener("ended",function(){n.mediaCurrentTime=n.getMediaCurrentTime(u.currentTime);for(var e=a.length,t=0;t<e&&(a[t]&&a[t].currentTime<=n.mediaCurrentTime);t++)n.talknAPI.nextPostsTimeline([a[t]])});setInterval(function(){if(u&&u.paused)return!1;if(n.mediaTasking)return!1;var e=n.getMediaCurrentTime(u.currentTime);if(n.mediaTasking=!0,n.mediaCurrentTime===e||n.mediaCurrentTime<e)for(n.mediaCurrentTime=e;n.mediaTasking;)if(0===i)n.mediaTasking=!1;else{if(!(a[0]&&a[0].currentTime<=e)){n.mediaTasking=!1;break}var t=a.shift();n.mediaCurrentTime=t.currentTime,n.talknAPI.nextPostsTimeline([t])}else if(n.mediaTasking){var r=window.talknAPI.store.getState().postsTimeline;n.mediaCurrentTime=e,n.talknAPI.clearPostsTimeline(e),a=r.concat(o).filter(function(t,n,r){return r.indexOf(t)===n&&t.currentTime>e}),n.mediaTasking=!1}},c.default.mediaSecondInterval)}},{key:"parentTo",value:function(e,t){this.parentUrl&&window.top.postMessage({type:"talkn",method:e,params:t},this.parentUrl)}}]),e}();t.default=x},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(428)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(17)),a=i(n(184));function i(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),o=n&&n.uid?n.uid:"",a=n&&n.utype?n.utype:"",i=n&&n.connectioned?n.connectioned:"",l=!(!n||!n.multistreamed)&&n.multistreamed,s=n&&n.actioned?n.actioned:"",c=n&&n.offsetFindId?n.offsetFindId:t.defaultOffsetFindId,f=n&&n.offsetSingleFindId?n.offsetSingleFindId:t.defaultOffsetFindId,d=n&&n.offsetMultiFindId?n.offsetMultiFindId:t.defaultOffsetFindId,p=n&&n.offsetChildFindId?n.offsetChildFindId:t.defaultOffsetFindId,h=n&&n.offsetLogsFindId?n.offsetLogsFindId:t.defaultOffsetFindId;n.requestLoginType&&n.requestLoginType;return e=r.create({uid:o,utype:a,connectioned:i,multistreamed:l,actioned:s,offsetFindId:c,offsetSingleFindId:f,offsetMultiFindId:d,offsetChildFindId:p,offsetLogsFindId:h,friends:[]}),u(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,null,[{key:"defaultOffsetFindId",get:function(){return a.default.defaultFindId}}]),r(t,null,[{key:"getOffsetFindId",value:function(e){var t=e.posts;return t&&t[0]&&t[0]._id?t[0]._id:a.default.defaultFindId}},{key:"getHref",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:e&&e.href?e.href:"/"}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(17),u=(r=i)&&r.__esModule?r:{default:r};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=r.create(o({},n)),l(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default),a(t,null,[{key:"rebuildAttributes",value:function(e){var t={};return Object.keys(e).forEach(function(n){t[e[n].name]=e[n].value}),t}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(1)),a=u(n(9)),i=u(n(21));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;switch(e.screenMode){case o.default.screenModeUndispLabel:case o.default.screenModeSmallLabel:case o.default.screenModeMiddleLabel:n="0%";break;case o.default.screenModeLargeLabel:n="30%"}return t?a.default.trimUnit(n):n}},{key:"getMinWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;switch(e.screenMode){case o.default.screenModeUndispLabel:case o.default.screenModeSmallLabel:n="0%";break;case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:n="320px"}return t?a.default.trimUnit(n):n}},{key:"getTransform",value:function(t){var n=e.closeTransform;switch(t.screenMode){case o.default.screenModeUndispLabel:case o.default.screenModeSmallLabel:case o.default.screenModeMiddleLabel:n=e.closeTransform;break;case o.default.screenModeLargeLabel:t.isOpenDetail&&(n=e.closeTransform)}return n}},{key:"getHeader",value:function(e){return i.default.getHeader(e)}},{key:"getHeaderP",value:function(e){return i.default.getHeaderP(e)}},{key:"getBody",value:function(e){return i.default.getBody(e)}},{key:"getMeta",value:function(e){return i.default.getMeta(e)}},{key:"getImg",value:function(e){return i.default.getImg(e)}},{key:"getDescription",value:function(e){return i.default.getDescription(e)}},{key:"getMetaContentTypeWrap",value:function(e){return i.default.getMetaContentTypeWrap(e)}},{key:"getMetaContentType",value:function(e){return i.default.getMetaContentType(e)}},{key:"getConnection",value:function(e){return i.default.getConnection(e)}},{key:"getAnalyze",value:function(e){return i.default.getAnalyze(e)}},{key:"getAnalyzeRow",value:function(e){return i.default.getAnalyzeRow(e)}},{key:"getAnalyzeCol",value:function(e){return i.default.getAnalyzeCol(e)}},{key:"getAnalyzeLabel",value:function(e){return i.default.getAnalyzeLabel(e)}},{key:"getAnalyzeValue",value:function(e){return i.default.getAnalyzeValue(e)}},{key:"getAnalyzeHr",value:function(e){return i.default.getAnalyzeHr(e)}},{key:"getH1s",value:function(e){return i.default.getH1s(e)}},{key:"getH1sLi",value:function(e){return i.default.getH1sLi(e)}},{key:"getFooter",value:function(e){return i.default.getFooter(e)}},{key:"getFooterChild",value:function(e){return i.default.getFooterChild(e)}},{key:"getFooterChildLike",value:function(e){return i.default.getFooterChildLike(e)}},{key:"getFooterChildMoney",value:function(e){return i.default.getFooterChildMoney(e)}},{key:"getFooterChildShare",value:function(e){return i.default.getFooterChildShare(e)}},{key:"getMetaItems",value:function(e){return i.default.getMetaItems(e)}},{key:"widthRate",get:function(){return.3}},{key:"otherWidthRate",get:function(){return 1-e.widthRate}},{key:"closeSelfTransform",get:function(){return"translate3d(0%, calc( 100% + "+2*i.default.padding+"px ), 0px)"}},{key:"openSelfTransform",get:function(){return"translate3d(0%, 0%, 0px)"}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),a=s(n(9)),i=s(n(27)),u=s(n(21)),l=s(n(22));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t)}}return r(e,null,[{key:"marginBase",get:function(){return 5}},{key:"marginLeftMag",get:function(){return 0}},{key:"marginRightMag",get:function(){return 0}},{key:"marginLeft",get:function(){return e.marginBase*e.marginLeftMag}},{key:"marginRight",get:function(){return e.marginBase*e.marginRightMag}},{key:"height",get:function(){return 260}}]),r(e,null,[{key:"getSelfWidth",value:function(t){var n=0,r=e.marginLeftMag+e.marginRightMag;switch(t.screenMode){case o.default.screenModeSmallLabel:n=100-r+"%";break;case o.default.screenModeMiddleLabel:n="calc( "+(100-r)+"% - "+l.default.getWidth(t,!0)+"px )";break;case o.default.screenModeLargeLabel:n="calc( "+(100-u.default.getWidth(t,!1)-r)+"% - "+(l.default.getWidth(t,!0)+r)+"px )"}return n}},{key:"getSelfLeft",value:function(e){var t="0px";switch(e.screenMode){case o.default.screenModeSmallLabel:t="0px";break;case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:t=l.default.getWidth(e,!0)}return t}},{key:"getSelf",value:function(t){var n=t.app,r=n.isMediaConnection?"block":"none",o=e.getSelfWidth(n),u=e.getSelfLeft(n),l=a.default.getLayoutBlock({display:r,position:"fixed",background:"black",top:i.default.headerHeight+"px",left:u,margin:"0px "+e.marginRightMag+"% 0px "+e.marginLeftMag+"%",width:o,zIndex:1,height:e.height+"px",outline:"none"});return a.default.get({layout:l,content:{},animation:{}})}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(1)),a=c(n(9)),i=(c(n(5)),c(n(27))),u=c(n(21)),l=c(n(22)),s=c(n(66));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t)}}return r(e,null,[{key:"marginBase",get:function(){return 5}},{key:"marginLeftMag",get:function(){return 5}},{key:"marginRightMag",get:function(){return 1}},{key:"marginLeft",get:function(){return Math.floor(.05*window.innerWidth)}},{key:"marginRight",get:function(){return e.marginBase*e.marginRightMag}},{key:"height",get:function(){return 50}}]),r(e,null,[{key:"getSelfWidth",value:function(t){var n=0,r=e.marginLeft+e.marginRight+s.default.getTotalWidth(t);switch(t.screenMode){case o.default.screenModeSmallLabel:n="calc( 100% - "+r+"px )";break;case o.default.screenModeMiddleLabel:n="calc( 100% - "+(l.default.getWidth(t,!0)+r)+"px )";break;case o.default.screenModeLargeLabel:n="calc( "+(100-u.default.getWidth(t,!1))+"% - "+(l.default.getWidth(t,!0)+r)+"px )"}return n}},{key:"getSelfLeft",value:function(e){var t="0px";switch(e.screenMode){case o.default.screenModeSmallLabel:t="0px";break;case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:t=l.default.getWidth(e,!0)}return t}},{key:"getSelf",value:function(t){var n=t.app,r=n.isMediaConnection?"block":"none",o=e.getSelfWidth(n),u=e.getSelfLeft(n),l=a.default.getLayoutBlock({display:r,position:"fixed",top:i.default.headerHeight+10+"px",left:u,margin:"0px "+e.marginRight+"px 0px "+e.marginLeft+"px",width:o,height:e.height+"px"});return a.default.get({layout:l,content:{},animation:{}})}}]),e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(9)),a=s(n(1)),i=s(n(5)),u=s(n(27)),l=s(n(76));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{menuShare:e.getMenuShare(t),header:e.getHeader(t),ul:e.getUl(t),liGoWeb:e.getLiGoWeb(t),liTwitter:e.getLiTwitter(t),liFacebook:e.getLiFacebook(t),liEmbed:e.getLiEmbed(t),liEmbedInput:e.getLiEmbedInput(t),shareLabel:e.getShareLabel(t)}}return r(e,null,[{key:"getCommonLayout",value:function(e){var t={position:"fixed",width:"90%",height:"fit-content",minHeight:"fit-content",maxHeight:"fit-content",top:"calc( 100% + "+u.default.headerHeight+"px)",left:"5%",flexFlow:"column",border:i.default.border,borderRadius:"5px",background:i.default.whiteRGB,zIndex:0};switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:case a.default.screenModeMiddleLabel:t.width=""+100*i.default.widthRatio,t.left=(100-t.width)/2,t.width=t.width+"%",t.left=t.left+"%",t.zIndex=0;break;case a.default.screenModeLargeLabel:t.width="33.3%",t.left="33.3%",t.zIndex=1}return t}},{key:"getCommonTransform",value:function(e){return e.openLockMenu===a.default.openLockMenuLabelNo?"translate3d(0px, 0px, 0px)":"translate3d(0px, -70vh, 0px)"}},{key:"getPaddingLi",value:function(e){switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:return"15px";case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:return"15px 15px 15px 20px"}}},{key:"headTabUpdate",get:function(){return{div:{position:"absolute",top:"13px",right:"10px",transform:"scale(0.5)"}}}}]),r(e,null,[{key:"getMenuShare",value:function(t){var n=t.app,r=e.getCommonLayout(n),a=o.default.getLayoutFlex(r),u=o.default.getContentBase(),l=o.default.getAnimationBase({transition:i.default.getTransition(n),transform:e.getCommonTransform(n)});return o.default.get({layout:a,content:u,animation:l})}},{key:"getHeader",value:function(e){e.app;var t=o.default.getLayoutFlex({width:"100%",height:l.default.headerHeight,maxHeight:l.default.headerHeight,borderBottom:i.default.border,background:i.default.whiteRGB,padding:"0px 20px"}),n=o.default.getContentBase(),r=o.default.getAnimationBase();return o.default.get({layout:t,content:n,animation:r})}},{key:"getUl",value:function(e){e.app;var t=o.default.getLayoutBlock({width:"100%"}),n=o.default.getContentBase({}),r=o.default.getAnimationBase();return o.default.get({layout:t,content:n,animation:r})}},{key:"getLiGoWeb",value:function(t){var n=t.app,r=o.default.getLayoutFlex({width:"100%",height:"45px",padding:e.getPaddingLi(n)}),a=o.default.getContentBase({cursor:"pointer"}),i=o.default.getAnimationBase();return o.default.get({layout:r,content:a,animation:i})}},{key:"getLiTwitter",value:function(t){var n=t.app,r=o.default.getLayoutFlex({width:"100%",height:"45px",padding:e.getPaddingLi(n),borderBottom:i.default.border}),a=o.default.getContentBase({cursor:"pointer"}),u=o.default.getAnimationBase();return o.default.get({layout:r,content:a,animation:u})}},{key:"getLiFacebook",value:function(t){var n=t.app,r=o.default.getLayoutFlex({width:"100%",height:"45px",padding:e.getPaddingLi(n),borderBottom:i.default.border}),a=o.default.getContentBase({cursor:"pointer"}),u=o.default.getAnimationBase();return o.default.get({layout:r,content:a,animation:u})}},{key:"getLiEmbed",value:function(t){var n=t.app,r=o.default.getLayoutFlex({width:"100%",height:"45px",padding:e.getPaddingLi(n)}),a=o.default.getContentBase({cursor:"pointer"}),i=o.default.getAnimationBase();return o.default.get({layout:r,content:a,animation:i})}},{key:"getLiEmbedInput",value:function(e){e.app;var t=o.default.getLayoutFlex({width:"98%",height:"25px",margin:"0px 0px 0px 20px",border:i.default.border,borderRadius:"5px",padding:"5px"}),n=o.default.getContentBase({fontSize:"12px",outline:0,cursor:"pointer"}),r=o.default.getAnimationBase();return o.default.get({layout:t,content:n,animation:r})}},{key:"getShareLabel",value:function(e){e.app;var t=o.default.getLayoutFlex({flexGrow:"1"}),n=o.default.getContentBase({color:"inherit",justifyContent:"flex-start",textIndent:"20px",textAlign:"left"}),r=o.default.getAnimationBase();return o.default.get({layout:t,content:n,animation:r})}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(l(n(8)),l(n(9))),a=l(n(5)),i=l(n(27)),u=l(n(48));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t)}}return r(e,null,[{key:"selfHeight",get:function(){return i.default.headerHeight}}]),r(e,null,[{key:"getSelf",value:function(e){var t=e.app,n=u.default.getOlWidth({app:t},!0),r=(100-n)/2,l=t.isOpenInnerNotif?i.default.headerHeight:0,s=o.default.getLayoutFlex({position:"fixed",top:i.default.headerHeight+"px",alignItems:"center",justifyContent:"center",width:"calc( "+n+"% - 2px )",margin:"0px calc( "+r+"% + 1px ) 0px calc( "+r+"% + 1px )",height:l,background:a.default.themeRGBA}),c=o.default.getContentBase({color:a.default.whiteRGB}),f=o.default.getAnimationBase({transition:a.default.transitionNotif+"ms"});return o.default.get({layout:s,content:c,animation:f})}}]),e}();t.default=s},function(e,t){var n=1e3,r=60*n,o=60*r,a=24*o,i=365.25*a;function u(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var l,s=typeof e;if("string"===s&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var u=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*i;case"days":case"day":case"d":return u*a;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(e);if("number"===s&&!1===isNaN(e))return t.long?u(l=e,a,"day")||u(l,o,"hour")||u(l,r,"minute")||u(l,n,"second")||l+" ms":function(e){if(e>=a)return Math.round(e/a)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){var r=n(446)("socket.io-parser"),o=n(68),a=n(448),i=n(199),u=n(200);function l(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=l,t.Decoder=f;var s=t.ERROR+'"encode error"';function c(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return s;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function d(e){this.reconPack=e,this.buffers=[]}function p(e){return{type:t.ERROR,data:"parser error: "+e}}l.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){a.removeBlobs(e,function(e){var n=a.deconstructPacket(e),r=c(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([c(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return p("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var a="";"-"!==e.charAt(++n)&&(a+=e.charAt(n),n!=e.length););if(a!=Number(a)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(a)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var u=e.charAt(n);if(","===u)break;if(o.nsp+=u,n===e.length)break}else o.nsp="/";var l=e.charAt(n+1);if(""!==l&&Number(l)==l){for(o.id="";++n;){var u=e.charAt(n);if(null==u||Number(u)!=u){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var s=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),c=!1!==s&&(o.type===t.ERROR||i(s));if(!c)return p("invalid payload");o.data=s}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new d(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!u(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},d.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=a.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},d.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(449),o=n(450),a=n(451);function i(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return s(this,e,t,n)}function s(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=d(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=u(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|p(t.length);return 0===(e=u(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?u(e,0):d(e,t);if("Buffer"===t.type&&a(t.data))return d(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=u(e,t<0?0:0|p(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|p(t.length);e=u(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function p(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function h(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(e).length;default:if(r)return U(e).length;t=(""+t).toLowerCase(),r=!0}}function g(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function y(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=l.from(t,r)),l.isBuffer(t))return 0===t.length?-1:m(e,t,n,r,o);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):m(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,n,r,o){var a,i=1,u=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;i=2,u/=2,l/=2,n/=2}function s(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var c=-1;for(a=n;a<u;a++)if(s(e,a)===s(t,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===l)return c*i}else-1!==c&&(a-=a-c),c=-1}else for(n+l>u&&(n=u-l),a=n;a>=0;a--){for(var f=!0,d=0;d<l;d++)if(s(e,a+d)!==s(t,d)){f=!1;break}if(f)return a}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var i=0;i<r;++i){var u=parseInt(t.substr(2*i,2),16);if(isNaN(u))return i;e[n+i]=u}return i}function b(e,t,n,r){return H(U(t,e.length-n),e,n,r)}function x(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function k(e,t,n,r){return x(e,t,n,r)}function w(e,t,n,r){return H(W(t),e,n,r)}function T(e,t,n,r){return H(function(e,t){for(var n,r,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),r=n>>8,o=n%256,a.push(o),a.push(r);return a}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function C(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var a,i,u,l,s=e[o],c=null,f=s>239?4:s>223?3:s>191?2:1;if(o+f<=n)switch(f){case 1:s<128&&(c=s);break;case 2:128==(192&(a=e[o+1]))&&(l=(31&s)<<6|63&a)>127&&(c=l);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(l=(15&s)<<12|(63&a)<<6|63&i)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:a=e[o+1],i=e[o+2],u=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&u)&&(l=(15&s)<<18|(63&a)<<12|(63&i)<<6|63&u)>65535&&l<1114112&&(c=l)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=f}return function(e){var t=e.length;if(t<=E)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=E));return n}(r)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return s(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?u(e,t):void 0!==n?"string"==typeof r?u(e,t).fill(n,r):u(e,t).fill(n):u(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return f(null,e)},l.allocUnsafeSlow=function(e){return f(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,a=Math.min(n,r);o<a;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=l.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var i=e[n];if(!l.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,o),o+=i.length}return r},l.byteLength=h,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return M(this,t,n);case"utf8":case"utf-8":return C(this,t,n);case"ascii":return _(this,t,n);case"latin1":case"binary":return O(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,r,o){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(r>>>=0),i=(n>>>=0)-(t>>>=0),u=Math.min(a,i),s=this.slice(r,o),c=e.slice(t,n),f=0;f<u;++f)if(s[f]!==c[f]){a=s[f],i=c[f];break}return a<i?-1:i<a?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},l.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return x(this,e,t,n);case"latin1":case"binary":return k(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var E=4096;function _(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function O(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function M(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",a=t;a<n;++a)o+=D(e[a]);return o}function P(e,t,n){for(var r=e.slice(t,n),o="",a=0;a<r.length;a+=2)o+=String.fromCharCode(r[a]+256*r[a+1]);return o}function L(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function B(e,t,n,r,o,a){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function I(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-n,2);o<a;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function A(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-n,4);o<a;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function R(e,t,n,r,o,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function N(e,t,n,r,a){return a||R(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function j(e,t,n,r,a){return a||R(e,0,n,8),o.write(e,t,n,r,52,8),n+8}l.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var o=t-e;n=new l(o,void 0);for(var a=0;a<o;++a)n[a]=this[a+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||L(e,t,this.length);for(var r=this[e],o=1,a=0;++a<t&&(o*=256);)r+=this[e+a]*o;return r},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||L(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},l.prototype.readUInt8=function(e,t){return t||L(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||L(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||L(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||L(e,t,this.length);for(var r=this[e],o=1,a=0;++a<t&&(o*=256);)r+=this[e+a]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||L(e,t,this.length);for(var r=t,o=1,a=this[e+--r];r>0&&(o*=256);)a+=this[e+--r]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},l.prototype.readInt8=function(e,t){return t||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||L(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||L(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||L(e,4,this.length),o.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||L(e,4,this.length),o.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||L(e,8,this.length),o.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||L(e,8,this.length),o.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||B(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,a=0;for(this[t]=255&e;++a<n&&(o*=256);)this[t+a]=e/o&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||B(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):A(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):A(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);B(this,e,t,n,o-1,-o)}var a=0,i=1,u=0;for(this[t]=255&e;++a<n&&(i*=256);)e<0&&0===u&&0!==this[t+a-1]&&(u=1),this[t+a]=(e/i>>0)-u&255;return t+n},l.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);B(this,e,t,n,o-1,-o)}var a=n-1,i=1,u=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===u&&0!==this[t+a+1]&&(u=1),this[t+a]=(e/i>>0)-u&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):A(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||B(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):A(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return N(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return N(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return j(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return j(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,a=r-n;if(this===e&&n<t&&t<r)for(o=a-1;o>=0;--o)e[o+t]=this[o+n];else if(a<1e3||!l.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+a),t);return a},l.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var a;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{var i=l.isBuffer(e)?e:U(new l(e,r).toString()),u=i.length;for(a=0;a<n-t;++a)this[a+t]=i[a%u]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function D(e){return e<16?"0"+e.toString(16):e.toString(16)}function U(e,t){var n;t=t||1/0;for(var r=e.length,o=null,a=[],i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&a.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function W(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(F,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(49))},function(e,t,n){var r=n(454);e.exports=function(e){var t=e.xdomain,n=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(e){}if(!t)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},function(e,t,n){var r=n(69),o=n(68);function a(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.isReactNative=e.isReactNative,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=a,o(a.prototype),a.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},a.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},a.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},a.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},a.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},a.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},a.prototype.onPacket=function(e){this.emit("packet",e)},a.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(8)),o=i(n(1)),a=i(n(95));function i(e){return e&&e.__esModule?e:{default:e}}function u(e,t){var n=e.app,o=r.default.storageKey;if(n.isRootConnection){var i=e.postsMulti,u=e.postsSingle;a.default.setStorage(n.rootConnection,o.postsMulti,i),a.default.setStorage(n.rootConnection,o.postsSingle,u)}return{state:e,props:t}}function l(e){var t=r.default.storageKey;return a.default.getStorage(e,t.postsTimelineZero)}function s(e){var t=r.default.storageKey;return a.default.getStorage(e,t.postsTimeline)}t.default={"SERVER_TO_CLIENT[BROADCAST]:post":u,"SERVER_TO_CLIENT[EMIT]:getMore":u,"SERVER_TO_CLIENT[EMIT]:find":function(e,t){return{state:e,props:t}},"SERVER_TO_CLIENT[EMIT]:changeThread":function(e,t){var n=e.app,i=n.rootConnection,u=r.default.storageKey,l=n.dispThreadType===o.default.dispThreadTypeMulti?u.postSingle:u.postMulti;return a.default.setStorage(i,r.default.storageKey[l],[]),{state:e,props:t}},ON__CLICK_MULTISTREAM:u,ON_CLICK_TOGGLE_DISP_MENU:function(e,t){var n=e.app;return n.screenMode===o.default.screenModeSmallLabel&&(n.isOpenMenu||(talknWindow.unlockWindow(),window.scrollTo(0,n.threadScrollY))),{state:e,props:t}},ON_CLICK_MENU:function(e,t){var n=e.app.rootConnection;return a.default.setStorage(n,r.default.storageKey.app,e.app),{state:e,props:t}},RESIZE_END_WINDOW:function(e,t){return{state:e,props:t}},setStoragePosts:u,setStoragePostsTimeline:function(e){var t=e.app,n=e.postsTimeline,o=r.default.storageKey;if(t.isMediaConnection){for(var i=n&&n.length?n.length:0,u=[],l=[],s=0;s<i;s++)0===n[s].currentTime?u.push(n[s]):l.push(n[s]);e.postsTimeline=u,a.default.setStorage(t.rootConnection,o.postsTimelineZero,u),a.default.setStorage(t.rootConnection,o.postsTimeline,l)}return e},addStoragePostsTimeline:function(e){var t=e.app;e.postsTimeline,r.default.storageKey;if(t.isMediaConnection){var n=a[0],o=[],a=[],i=0;if(0===n.currentTime){o=l(t.rootConnection),i=o.length;for(var u=0;u<i;u++);p.splice(4,0,p2)}else a=s(t.rootConnection),a.length;for(var c=0;c<i;c++);}},getStoragePostsTimeline:s,getStoragePostsTimelineZero:l}},function(e,t,n){"use strict";var r=n(183),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var u=l(t),g=l(n),y=0;y<i.length;++y){var m=i[y];if(!(a[m]||r&&r[m]||g&&g[m]||u&&u[m])){var v=d(n,m);try{s(t,m,v)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e,r){var o,a=n(223);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(49),n(434)(e))},function(e,t,n){e.exports=!n(12)&&!n(6)(function(){return 7!=Object.defineProperty(n(102)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){t.f=n(10)},function(e,t,n){var r=n(23),o=n(24),a=n(79)(!1),i=n(104)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),l=0,s=[];for(n in u)n!=i&&r(u,n)&&s.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~a(s,n)||s.push(n));return s}},function(e,t,n){var r=n(13),o=n(3),a=n(52);e.exports=n(12)?Object.defineProperties:function(e,t){o(e);for(var n,i=a(t),u=i.length,l=0;u>l;)r.f(e,n=i[l++],t[n]);return e}},function(e,t,n){var r=n(24),o=n(55).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(r(e))}},function(e,t,n){"use strict";var r=n(52),o=n(80),a=n(73),i=n(14),u=n(72),l=Object.assign;e.exports=!l||n(6)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=l({},e)[n]||Object.keys(l({},t)).join("")!=r})?function(e,t){for(var n=i(e),l=arguments.length,s=1,c=o.f,f=a.f;l>s;)for(var d,p=u(arguments[s++]),h=c?r(p).concat(c(p)):r(p),g=h.length,y=0;g>y;)f.call(p,d=h[y++])&&(n[d]=p[d]);return n}:l},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(15),o=n(7),a=n(154),i=[].slice,u={};e.exports=Function.bind||function(e){var t=r(this),n=i.call(arguments,1),l=function(){var r=n.concat(i.call(arguments));return this instanceof l?function(e,t,n){if(!(t in u)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";u[t]=Function("F,a","return new F("+r.join(",")+")")}return u[t](e,n)}(t,r.length,r):a(t,r,e)};return o(t.prototype)&&(l.prototype=t.prototype),l}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(4).parseInt,o=n(63).trim,a=n(108),i=/^[-+]?0[xX]/;e.exports=8!==r(a+"08")||22!==r(a+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(i.test(n)?16:10))}:r},function(e,t,n){var r=n(4).parseFloat,o=n(63).trim;e.exports=1/r(n(108)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(31);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(7),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(111),o=Math.pow,a=o(2,-52),i=o(2,-23),u=o(2,127)*(2-i),l=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),s=r(e);return o<l?s*(o/l/i+1/a-1/a)*l*i:(n=(t=(1+i/a)*o)-(t-o))>u||n!=n?s*(1/0):s*n}},function(e,t,n){var r=n(3);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var a=e.return;throw void 0!==a&&r(a.call(e)),t}}},function(e,t,n){var r=n(15),o=n(14),a=n(72),i=n(11);e.exports=function(e,t,n,u,l){r(t);var s=o(e),c=a(s),f=i(s.length),d=l?f-1:0,p=l?-1:1;if(n<2)for(;;){if(d in c){u=c[d],d+=p;break}if(d+=p,l?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;l?d>=0:f>d;d+=p)d in c&&(u=t(u,c[d],d,s));return u}},function(e,t,n){"use strict";var r=n(14),o=n(53),a=n(11);e.exports=[].copyWithin||function(e,t){var n=r(this),i=a(n.length),u=o(e,i),l=o(t,i),s=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===s?i:o(s,i))-l,i-u),f=1;for(l<u&&u<l+c&&(f=-1,l+=c-1,u+=c-1);c-- >0;)l in n?n[u]=n[l]:delete n[u],u+=f,l+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(123);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(12)&&"g"!=/./g.flags&&n(13).f(RegExp.prototype,"flags",{configurable:!0,get:n(74)})},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(3),o=n(7),a=n(127);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=a.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(170),o=n(60);e.exports=n(88)("Map",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(13).f,o=n(54),a=n(59),i=n(30),u=n(57),l=n(58),s=n(113),c=n(164),f=n(56),d=n(12),p=n(43).fastKey,h=n(60),g=d?"_s":"size",y=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,s){var c=e(function(e,r){u(e,c,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[g]=0,null!=r&&l(r,n,e[s],e)});return a(c.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[g]=0},delete:function(e){var n=h(this,t),r=y(n,e);if(r){var o=r.n,a=r.p;delete n._i[r.i],r.r=!0,a&&(a.n=o),o&&(o.p=a),n._f==r&&(n._f=o),n._l==r&&(n._l=a),n[g]--}return!!r},forEach:function(e){h(this,t);for(var n,r=i(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!y(h(this,t),e)}}),d&&r(c.prototype,"size",{get:function(){return h(this,t)[g]}}),c},def:function(e,t,n){var r,o,a=y(e,t);return a?a.v=n:(e._l=a={i:o=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=a),r&&(r.n=a),e[g]++,"F"!==o&&(e._i[o]=a)),e},getEntry:y,setStrong:function(e,t,n){s(e,t,function(e,n){this._t=h(e,t),this._k=n,this._l=void 0},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?c(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,c(1))},n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(170),o=n(60);e.exports=n(88)("Set",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,o=n(4),a=n(37)(0),i=n(19),u=n(43),l=n(151),s=n(173),c=n(7),f=n(60),d=n(60),p=!o.ActiveXObject&&"ActiveXObject"in o,h=u.getWeak,g=Object.isExtensible,y=s.ufstore,m=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},v={get:function(e){if(c(e)){var t=h(e);return!0===t?y(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return s.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(88)("WeakMap",m,v,s,!0,!0);d&&p&&(l((r=s.getConstructor(m,"WeakMap")).prototype,v),u.NEED=!0,a(["delete","has","get","set"],function(e){var t=b.prototype,n=t[e];i(t,e,function(t,o){if(c(t)&&!g(t)){this._f||(this._f=new r);var a=this._f[e](t,o);return"set"==e?this:a}return n.call(this,t,o)})}))},function(e,t,n){"use strict";var r=n(59),o=n(43).getWeak,a=n(3),i=n(7),u=n(57),l=n(58),s=n(37),c=n(23),f=n(60),d=s(5),p=s(6),h=0,g=function(e){return e._l||(e._l=new y)},y=function(){this.a=[]},m=function(e,t){return d(e.a,function(e){return e[0]===t})};y.prototype={get:function(e){var t=m(this,e);if(t)return t[1]},has:function(e){return!!m(this,e)},set:function(e,t){var n=m(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,a){var s=e(function(e,r){u(e,s,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&l(r,n,e[a],e)});return r(s.prototype,{delete:function(e){if(!i(e))return!1;var n=o(e);return!0===n?g(f(this,t)).delete(e):n&&c(n,this._i)&&delete n[this._i]},has:function(e){if(!i(e))return!1;var n=o(e);return!0===n?g(f(this,t)).has(e):n&&c(n,this._i)}}),s},def:function(e,t,n){var r=o(a(t),!0);return!0===r?g(e).set(t,n):r[e._i]=n,e},ufstore:g}},function(e,t,n){var r=n(32),o=n(11);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(55),o=n(80),a=n(3),i=n(4).Reflect;e.exports=i&&i.ownKeys||function(e){var t=r.f(a(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){"use strict";var r=n(81),o=n(7),a=n(11),i=n(30),u=n(10)("isConcatSpreadable");e.exports=function e(t,n,l,s,c,f,d,p){for(var h,g,y=c,m=0,v=!!d&&i(d,p,3);m<s;){if(m in l){if(h=v?v(l[m],m,n):l[m],g=!1,o(h)&&(g=void 0!==(g=h[u])?!!g:r(h)),g&&f>0)y=e(t,n,h,a(h.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=h}y++}m++}return y}},function(e,t,n){var r=n(11),o=n(110),a=n(35);e.exports=function(e,t,n,i){var u=String(a(e)),l=u.length,s=void 0===n?" ":String(n),c=r(t);if(c<=l||""==s)return u;var f=c-l,d=o.call(s,Math.ceil(f/s.length));return d.length>f&&(d=d.slice(0,f)),i?d+u:u+d}},function(e,t,n){var r=n(52),o=n(24),a=n(73).f;e.exports=function(e){return function(t){for(var n,i=o(t),u=r(i),l=u.length,s=0,c=[];l>s;)a.call(i,n=u[s++])&&c.push(e?[n,i[n]]:i[n]);return c}}},function(e,t,n){var r=n(62),o=n(180);e.exports=function(e){return function(){if(r(this)!=e)throw TypeError(e+"#toJSON isn't generic");return o(this)}}},function(e,t,n){var r=n(58);e.exports=function(e,t){var n=[];return r(e,!1,n.push,n,t),n}},function(e,t){e.exports=Math.scale||function(e,t,n,r,o){return 0===arguments.length||e!=e||t!=t||n!=n||r!=r||o!=o?NaN:e===1/0||e===-1/0?e:(e-t)*(o-r)/(n-t)+r}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,u=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(u[i[c]]=n[i[c]])}}return u}},function(e,t,n){"use strict";e.exports=n(433)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(17),i=(r=a)&&r.__esModule?r:{default:r};function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){var e;arguments.length>0&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=n.create({}),u(n,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,null,[{key:"defaultFindId",get:function(){return"000000000000000000000000"}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(g(n(8)),g(n(1))),i=g(n(131)),u=g(n(186)),l=g(n(187)),s=g(n(46)),c=g(n(188)),f=g(n(132)),d=g(n(65)),p=g(n(189)),h=g(n(437));function g(e){return e&&e.__esModule?e:{default:e}}var y=function(){function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},g=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.menuIndex=new u.default,this.menuLogs=new l.default(g.menuLogs),this.posts=new s.default,this.analyze=new c.default,this.bootOption=new f.default(r),this.thread=new d.default(n,this.bootOption,g.thread),this.setting=new p.default(g.setting),this.app=new a.default(e.getAppParams(t,this.thread,this.bootOption,o,g)),this.user=new i.default(e.getUserParams(this,g)),this.style=new h.default(this)}return o(e,[{key:"appName",get:function(){return this.app.name}},{key:"talknIndex",get:function(){return this.app.talknIndex}},{key:"connection",get:function(){return this.thread.connection}}],[{key:"getAppParams",value:function(e,t,n,o,a){return r({isTransition:!0,talknIndex:e},n,o,t)}},{key:"getUserParams",value:function(e,t){return t&&t.user&&t.user.uid?r({},t.user):{dispThreadType:e.thread.connection===e.app.rootConnection?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}}]),e}();t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(17),a=(r=o)&&r.__esModule?r:{default:r};function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=r.create(n),i(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(17),a=(r=o)&&r.__esModule?r:{default:r};function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n=n||[],e=r.create(n),i(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(17),a=(r=o)&&r.__esModule?r:{default:r};function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var e;arguments.length>0&&void 0!==arguments[0]&&arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=n.create({watchCnt:0}),i(n,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(17),a=(r=o)&&r.__esModule?r:{default:r};function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),o=n&&n.client?n.client:{},a=n&&n.common?n.common:{},u=n&&n.server?n.server:{};return e=r.create({client:o,common:a,server:u}),i(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(d(n(8)),d(n(9))),a=d(n(5)),i=d(n(1)),u=d(n(27)),l=d(n(48)),s=d(n(21)),c=d(n(47)),f=d(n(22));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;return e.extensionMode===i.default.extensionModeExtBottomLabel?"84%":e.extensionMode===i.default.extensionModeExtModalLabel?"94%":(n=e.screenMode===i.default.screenModeUndispLabel||e.screenMode===i.default.screenModeSmallLabel?Math.floor(e.width*a.default.widthRatio):"calc( "+100*a.default.widthRatio+"% - "+f.default.getWidth(e)+" )",t?o.default.trimUnit(n):n)}},{key:"getBaseMarginRate",value:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Math.floor((1-a.default.widthRatio)/2*100)}},{key:"getBaseMargin",value:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];return l.default.getWidth(t,!0)*(e.getBaseMarginRate()/100)}},{key:"getMargin",value:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t.extensionMode===i.default.extensionModeExtBottomLabel)return"0% 8%";switch(t.screenMode){case i.default.screenModeUndispLabel:case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:var n=e.getBaseMarginRate();return"0% "+n+"% 0% "+n+"%"}}},{key:"getHeight",value:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var n=e.getBaseMarginRate();switch(t.screenMode){case i.default.screenModeUndispLabel:case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:return"calc( "+(100-n)+"% - "+2*u.default.headerHeight+"px )";case i.default.screenModeLargeLabel:var r=e.getBaseMargin(t);return"calc( 100% - "+(2*u.default.headerHeight+r)+"px )"}}},{key:"getTransform",value:function(t){return t.isOpenDetail?e.getOpenSelfTransform(t):e.getCloseSelfTransform(t)}},{key:"getCloseSelfTransform",value:function(e){return"translate3d(0%, 0px, 0px)"}},{key:"getOpenSelfTransform",value:function(e){return"translate3d(0%, calc( -100% - "+c.default.selfHeight+"px ), 0px)"}},{key:"getHeader",value:function(e){return s.default.getHeader(e)}},{key:"getHeaderP",value:function(e){return s.default.getHeaderP(e)}},{key:"getBody",value:function(e){return s.default.getBody(e)}},{key:"getMeta",value:function(e){return s.default.getMeta(e)}},{key:"getImg",value:function(e){return s.default.getImg(e)}},{key:"getDescription",value:function(e){return s.default.getDescription(e)}},{key:"getMetaContentTypeWrap",value:function(e){return s.default.getMetaContentTypeWrap(e)}},{key:"getMetaContentType",value:function(e){return s.default.getMetaContentType(e)}},{key:"getConnection",value:function(e){return s.default.getConnection(e)}},{key:"getAnalyze",value:function(e){return s.default.getAnalyze(e)}},{key:"getAnalyzeRow",value:function(e){return s.default.getAnalyzeRow(e)}},{key:"getAnalyzeCol",value:function(e){return s.default.getAnalyzeCol(e)}},{key:"getAnalyzeLabel",value:function(e){return s.default.getAnalyzeLabel(e)}},{key:"getAnalyzeValue",value:function(e){return s.default.getAnalyzeValue(e)}},{key:"getAnalyzeHr",value:function(e){return s.default.getAnalyzeHr(e)}},{key:"getH1s",value:function(e){return s.default.getH1s(e)}},{key:"getH1sLi",value:function(e){return s.default.getH1sLi(e)}},{key:"getFooter",value:function(e){return s.default.getFooter(e)}},{key:"getFooterChild",value:function(e){return s.default.getFooterChild(e)}},{key:"getFooterChildLike",value:function(e){return s.default.getFooterChildLike(e)}},{key:"getFooterChildMoney",value:function(e){return s.default.getFooterChildMoney(e)}},{key:"getFooterChildShare",value:function(e){return s.default.getFooterChildShare(e)}},{key:"getMetaItems",value:function(e){return s.default.getMetaItems(e)}}]),e}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(u(n(8)),u(n(1)),u(n(9))),a=u(n(5)),i=u(n(47));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),emoji:e.getEmoji(t)}}return r(e,null,[{key:"getTransform",value:function(t){return t.isOpenPostsSupporter?"translate3d( 0px, -"+(e.selfHeight+i.default.selfHeight)+"px, 0px )":"translate3d( 0px, 0px, 0px )"}},{key:"selfHeight",get:function(){return 45}}]),r(e,null,[{key:"getSelf",value:function(t){var n=t.app,r=o.default.getLayoutFlex({display:"flex",position:"fixed",bottom:"-"+e.selfHeight+"px",left:i.default.getLeft(n),height:i.default.selfHeight,width:i.default.getWidth(n),maxWidth:i.default.getWidth(n),color:a.default.whiteRGB,alignItems:"center",justifyContent:"flex-start",background:a.default.darkRGBA,whiteSpace:"nowrap",overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflowX:"scroll",overflowY:"hidden"}),u=o.default.getAnimationBase({transition:a.default.getTransitionFirstOn(n),transform:e.getTransform(n)});return o.default.get({layout:r,content:{},animation:u})}},{key:"getEmoji",value:function(e){var t=e.app,n=o.default.getLayoutFlex({minWidth:"60px",alignItems:"center",justifyContent:"center"}),r=o.default.getContentBase({fontSize:"30px",cursor:"pointer"}),i=o.default.getAnimationBase({transition:a.default.getTransition(t),transform:"scale(1.0)"});return o.default.get({layout:n,content:r,animation:i})}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(c(n(8)),c(n(1))),i=c(n(9)),u=c(n(5)),l=c(n(76)),s=c(n(22));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),child:e.getChild(t),childIndex:e.getChildIndex(t)}}return o(e,null,[{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;if(e.extensionMode===a.default.extensionModeExtBottomLabel)n="50%";else switch(e.screenMode){case a.default.screenModeUndispLabel:case a.default.screenModeSmallLabel:n="100%";break;case a.default.screenModeMiddleLabel:case a.default.screenModeLargeLabel:n=s.default.baseWidth}return t?i.default.trimUnit(n):n}}]),o(e,null,[{key:"getSelf",value:function(t){var n=t.app,o=(n.screenMode===a.default.screenModeUndispLabel||(n.screenMode,a.default.screenModeSmallLabel),{border:u.default.border}),s=n.extensionMode===a.default.extensionModeExtBottomLabel?u.default.radiuses:"0px",c=i.default.getLayoutFlex(r({width:e.getWidth(n),minWidth:e.getWidth(n),height:l.default.headerHeight+"px",background:u.default.offWhiteRGB,borderRadius:s},o)),f=i.default.getContentBase({}),d=i.default.getAnimationBase();return i.default.get({layout:c,content:f,animation:d})}},{key:"getChild",value:function(){var e=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),t=i.default.getContentBase({fontSize:"0.5em",fontWeight:"bold"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}},{key:"getChildIndex",value:function(){var e=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),t=i.default.getContentBase({fontSize:"0.5em",fontWeight:"bold"}),n=i.default.getAnimationBase();return i.default.get({layout:e,content:t,animation:n})}}]),e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(s(n(8)),s(n(1))),a=s(n(9)),i=s(n(5)),u=s(n(77)),l=s(n(48));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{notifs:e.getNotifs(t),self:e.getSelf(t),bottom:e.getBottom(t),bottomIcon:e.getBottomIcon(t),bottomPost:e.getBottomPost(t)}}return r(e,null,[{key:"getNotifsDisplay",value:function(e){return e.extensionMode===o.default.extensionModeExtBottomLabel?"block":"none"}},{key:"getNotifsHeight",value:function(t){return t.extensionMode===o.default.extensionModeExtBottomLabel?t.isOpenPosts?"0px":t.isOpenNotif?u.default.selfHeight+e.selfHeight+"px":e.selfHeight+"px":"0px"}},{key:"selfHeight",get:function(){return 40}}]),r(e,null,[{key:"getNotifs",value:function(t){var n=t.app,r=e.getNotifsDisplay(n),o=e.getNotifsHeight(n),i=a.default.getLayoutBlock({display:r,position:"absolute",top:"0px",width:"100%",height:o,overflow:"visible"}),u=a.default.getContentBase(),l=a.default.getAnimationBase();return a.default.get({layout:i,content:u,animation:l})}},{key:"getSelf",value:function(t){var n=t.app,r=e.getNotifsDisplay(n),o=l.default.getOlWidth({app:n},!0),u=(100-o)/2,s=a.default.getLayoutBlock({display:r,position:"absolute",top:0,width:o+"%",height:e.selfHeight+"px",background:i.default.whiteRGBA,marginLeft:u+"%",borderTop:i.default.border,borderLeft:i.default.border,borderRight:i.default.border,borderRadius:"3px 3px 0px 0px"}),c=a.default.getContentBase({textAlign:"left"}),f=a.default.getAnimationBase({transform:"translate3d(0px, 40px, 0px)",transition:i.default.transitionNotif+"ms"});return a.default.get({layout:s,content:c,animation:f})}},{key:"getBottom",value:function(e){e.app;return a.default.get({layout:{width:"100%"},content:{},animation:{}})}},{key:"getBottomIcon",value:function(e){e.app;return a.default.get({layout:{},content:{},animation:{}})}},{key:"getBottomPost",value:function(e){e.app;var t={lineHeight:"0.8",whiteSpace:"nowrap",color:a.default.fontBaseRGB};return a.default.get({layout:{overflow:"hidden",padding:"15px 15px 15px 0px",background:"none"},content:t,animation:{}})}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(i(n(1)),i(n(9))),a=i(n(5));i(n(21)),i(n(48)),i(n(22));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),linksUl:e.getLinksUl(t),linksLi:e.getLinksLi(t),linksLiActive:e.getLinksLiActive(t),linksLiUnactive:e.getLinksLiUnactive(t),linkMenuUl:e.getLinkMenuUl(t),linkMenuLi:e.getLinkMenuLi(t),linksTabActive:e.getLinksTabActive(t),linksTabUnactive:e.getLinksTabUnactive(t),linksTabLast:e.getLinksTabLast(t)}}return r(e,null,[{key:"tuneSize",get:function(){return 50}},{key:"size",get:function(){return 54}},{key:"padding",get:function(){return 5}},{key:"right",get:function(){return 0}},{key:"activeColor",get:function(){return a.default.themeRGB}},{key:"unactiveColor",get:function(){return a.default.fontBaseRGB}}]),r(e,null,[{key:"getSelfDisplay",value:function(e){return e.isOpenLinks?"flex":"none"}},{key:"getSelf",value:function(t){var n=t.app,r=e.getSelfDisplay(n),a=o.default.getLayoutFlex({display:r,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),i=o.default.getContentBase({fontSize:"14px"});return o.default.get({layout:a,content:i,animation:{}})}},{key:"getLinksUl",value:function(e){var t=e.app,n=o.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),r=o.default.getAnimationBase({transition:a.default.getTransition(t)});return o.default.get({layout:n,content:{},animation:r})}},{key:"getLinksLi",value:function(t){var n=t.app,r=e.size+"px",i=o.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:r,minHeight:r,maxHeight:r,background:a.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),u=o.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px"}),l=o.default.getAnimationBase({transition:a.default.getTransition(n)});return o.default.get({layout:i,content:u,animation:l})}},{key:"getLinksLiActive",value:function(t){var n=t.app,r=e.getLinksLi({app:n});return r.background=a.default.whiteRGB,r.color=a.default.fontBaseRGB,r}},{key:"getLinksLiUnactive",value:function(t){var n=t.app,r=e.getLinksLi({app:n});return r.background=a.default.calmRGB,r.color=a.default.fontBaseRGB,r}},{key:"getLinkMenuUl",value:function(t){var n=t.app,r=e.size+"px",i=o.default.getLayoutFlex({minHeight:r,height:r,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),u=o.default.getAnimationBase({transition:a.default.getTransition(n)});return o.default.get({layout:i,content:{},animation:u})}},{key:"getLinkMenuLi",value:function(t){var n=t.app,r=e.size-4+"px",i=o.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:r,minHeight:r,maxHeight:r,background:a.default.reliefRGB,borderRadius:"5px"}),u=o.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px",color:a.default.whiteRGB}),l=o.default.getAnimationBase({transition:a.default.getTransition(n)});return o.default.get({layout:i,content:u,animation:l})}},{key:"getLinksTabActive",value:function(e){e.app;var t={};return t.background=a.default.whiteRGBA,t.color=a.default.fontBaseRGB,t}},{key:"getLinksTabUnactive",value:function(t){var n=t.app;return e.getLinkMenuLi({app:n})}},{key:"getLinksTabLast",value:function(e){e.app;var t={margin:"5px 0px 0px 0px"};return t}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(i(n(1)),i(n(9))),a=i(n(5));i(n(67));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),tuneLi:e.getTuneLi(t),activeLi:e.getActiveLi(t),unactiveLi:e.getUnactiveLi(t)}}return r(e,null,[{key:"tuneSize",get:function(){return 50}},{key:"size",get:function(){return 54}},{key:"padding",get:function(){return 5}},{key:"right",get:function(){return 0}},{key:"activeColor",get:function(){return a.default.themeRGB}},{key:"unactiveColor",get:function(){return a.default.fontBaseRGB}},{key:"activeBgColor",get:function(){return a.default.whiteRGBA}},{key:"unactiveBgColor",get:function(){return"rgba( 240, 240, 240, 0.96 )"}}]),r(e,null,[{key:"getSelf",value:function(t){var n=t.app,r=e.size+"px",i=o.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:r,minHeight:r,maxHeight:r,background:e.activeBgColor,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),u=o.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px"}),l=o.default.getAnimationBase({transition:a.default.getTransition(n)});return o.default.get({layout:i,content:u,animation:l})}},{key:"getTuneLi",value:function(t){var n=t.app,r=e.getActiveLi({app:n});return r.alignItems="center",console.log(r),r}},{key:"getActiveLi",value:function(t){var n=t.app,r=e.getSelf({app:n});return r.background=e.activeBgColor,r.color=a.default.fontBaseRGB,r}},{key:"getUnactiveLi",value:function(t){var n=t.app,r=e.getSelf({app:n});return r.background=e.unactiveBgColor,r.color=a.default.fontBaseRGB,r}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(9),i=(r=a)&&r.__esModule?r:{default:r};var u=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t)}}return o(e,null,[{key:"getSelf",value:function(){var e=i.default.getLayoutFlex({margin:"0 auto",height:"100vh",width:"10%"}),t=i.default.getAnimationBase();return i.default.get({layout:e,content:{},animation:t})}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(u(n(8)),u(n(1))),a=u(n(9)),i=u(n(5));u(n(47));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t)}}return r(e,null,[{key:"getTop",value:function(e){return e.extensionMode===o.default.extensionModeExtModalLabel?"0%":"100%"}},{key:"getSelfTransform",value:function(e,t){return e.extensionMode===o.default.extensionModeExtBottomLabel?e.isDispPosts?"translate3d(0px, -100%, 0px)":"translate3d(0px, 0%, 0px)":"translate3d(0px, 0px, 0px)"}},{key:"getSelfTransition",value:function(e){return e.extensionMode===o.default.extensionModeExtBottomLabel?(e.isDispPosts,i.default.transitionOn+"ms"):"0ms"}},{key:"getSelf",value:function(t){var n=t.app,r=a.default.getLayoutFlex({position:"fixed",top:e.getTop(n),justifyContent:"flex-start",alignItems:"flex-start",height:"100%"}),o=a.default.getContentBase(),i=a.default.getAnimationBase({transform:e.getSelfTransform(n),transition:e.getSelfTransition(n)});return a.default.get({layout:r,content:o,animation:i})}}]),e}();t.default=l},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),a=e.indexOf("]");-1!=o&&-1!=a&&(e=e.substring(0,o)+e.substring(o,a).replace(/:/g,";")+e.substring(a,e.length));for(var i=n.exec(e||""),u={},l=14;l--;)u[r[l]]=i[l]||"";return-1!=o&&-1!=a&&(u.source=t,u.host=u.host.substring(1,u.host.length-1).replace(/;/g,":"),u.authority=u.authority.replace("[","").replace("]","").replace(/;/g,":"),u.ipv6uri=!0),u}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.isBuffer(e)||r&&(e instanceof ArrayBuffer||o(e))};var n="function"==typeof t&&"function"==typeof t.isBuffer,r="function"==typeof ArrayBuffer,o=function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}}).call(this,n(140).Buffer)},function(e,t,n){var r=n(452),o=n(207),a=n(68),i=n(139),u=n(208),l=n(209),s=n(96)("socket.io-client:manager"),c=n(206),f=n(468),d=Object.prototype.hasOwnProperty;function p(e,t){if(!(this instanceof p))return new p(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||i;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=p,p.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)d.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},p.prototype.updateSocketIds=function(){for(var e in this.nsps)d.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},p.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},a(p.prototype),p.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},p.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},p.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(e,t){if(s("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;s("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var a=u(n,"open",function(){o.onopen(),e&&e()}),i=u(n,"error",function(t){if(s("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var l=this._timeout;s("connect attempt will timeout after %d",l);var c=setTimeout(function(){s("connect attempt timed out after %d",l),a.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",l)},l);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(a),this.subs.push(i),this},p.prototype.onopen=function(){s("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(u(e,"data",l(this,"ondata"))),this.subs.push(u(e,"ping",l(this,"onping"))),this.subs.push(u(e,"pong",l(this,"onpong"))),this.subs.push(u(e,"error",l(this,"onerror"))),this.subs.push(u(e,"close",l(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",l(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(e){this.decoder.add(e)},p.prototype.ondecoded=function(e){this.emit("packet",e)},p.prototype.onerror=function(e){s("error",e),this.emitAll("error",e)},p.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",a),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&a()}function a(){~c(r.connecting,n)||r.connecting.push(n)}return n},p.prototype.destroy=function(e){var t=c(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},p.prototype.packet=function(e){s("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},p.prototype.cleanup=function(){s("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){s("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(e){s("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)s("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();s("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(s("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(s("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(s("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},p.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){var r=n(141),o=n(455),a=n(464),i=n(465);t.polling=function(e){var t=!1,n=!1,i=!1!==e.jsonp;if("undefined"!=typeof location){var u="https:"===location.protocol,l=location.port;l||(l=u?443:80),t=e.hostname!==location.hostname||l!==e.port,n=e.secure!==u}if(e.xdomain=t,e.xscheme=n,"open"in new r(e)&&!e.forceJSONP)return new o(e);if(!i)throw new Error("JSONP disabled");return new a(e)},t.websocket=i},function(e,t,n){var r=n(142),o=n(97),a=n(69),i=n(98),u=n(205),l=n(99)("engine.io-client:polling");e.exports=c;var s=null!=new(n(141))({xdomain:!1}).responseType;function c(e){var t=e&&e.forceBase64;s&&!t||(this.supportsBinary=!1),r.call(this,e)}i(c,r),c.prototype.name="polling",c.prototype.doOpen=function(){this.poll()},c.prototype.pause=function(e){var t=this;function n(){l("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(l("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){l("pre-pause polling complete"),--r||n()})),this.writable||(l("we are currently writing - waiting to pause"),r++,this.once("drain",function(){l("pre-pause writing complete"),--r||n()}))}else n()},c.prototype.poll=function(){l("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},c.prototype.onData=function(e){var t=this;l("polling got data %s",e);a.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():l('ignoring poll - transport state "%s"',this.readyState))},c.prototype.doClose=function(){var e=this;function t(){l("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(l("transport open - closing"),t()):(l("transport not open - deferring close"),this.once("open",t))},c.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};a.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},c.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(t){var r=n(457),o=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,u=n.length;o<u;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||a&&n instanceof Blob||i&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var l in n)if(Object.prototype.hasOwnProperty.call(n,l)&&e(n[l]))return!0;return!1}}).call(this,n(140).Buffer)},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64,i={},u=0,l=0;function s(e){var t="";do{t=o[e%a]+t,e=Math.floor(e/a)}while(e>0);return t}function c(){var e=s(+new Date);return e!==r?(u=0,r=e):e+"."+s(u++)}for(;l<a;l++)i[o[l]]=l;c.encode=s,c.decode=function(e){var t=0;for(l=0;l<e.length;l++)t=t*a+i[e.charAt(l)];return t},e.exports=c},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(139),o=n(68),a=n(467),i=n(208),u=n(209),l=n(96)("socket.io-client:socket"),s=n(97),c=n(204);e.exports=p;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=o.prototype.emit;function p(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(p.prototype),p.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[i(e,"open",u(this,"onopen")),i(e,"packet",u(this,"onpacket")),i(e,"close",u(this,"onclose"))]}},p.prototype.open=p.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},p.prototype.send=function(){var e=a(arguments);return e.unshift("message"),this.emit.apply(this,e),this},p.prototype.emit=function(e){if(f.hasOwnProperty(e))return d.apply(this,arguments),this;var t=a(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:c(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(l("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},p.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},p.prototype.onopen=function(){if(l("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?s.encode(this.query):this.query;l("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},p.prototype.onclose=function(e){l("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},p.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},p.prototype.onevent=function(e){var t=e.data||[];l("emitting event %j",t),null!=e.id&&(l("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?d.apply(this,t):this.receiveBuffer.push(t)},p.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=a(arguments);l("sending ack %j",o),t.packet({type:c(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},p.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(l("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):l("bad ack %s",e.id)},p.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},p.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)d.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},p.prototype.ondisconnect=function(){l("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},p.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},p.prototype.close=p.prototype.disconnect=function(){return this.connected&&(l("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},p.prototype.compress=function(e){return this.flags.compress=e,this},p.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=a(n(8));a(n(469));function a(e){return e&&e.__esModule?e:{default:e}}t.default={updateStyle:function(e){return{type:"UPDATE_STYLE",styleKey:e.styleKey,eleType:e.eleType,tagName:e.tagName,style:e.style}},onClickToggleMain:function(e){return{type:"ON_CLICK_TOGGLE_MAIN",app:e.app}},onClickToTimelineThread:function(e,t){return{type:"ON_CLICK_TO_TIMELINE_THREAD",app:t.app,thread:{connection:e}}},onClickToMultiThread:function(e,t){return{type:"ON_CLICK_TO_MULTI_THREAD",app:t.app,thread:{connection:e}}},onClickToSingleThread:function(e,t){return{type:"ON_CLICK_TO_SINGLE_THREAD",app:t.app,thread:{connection:e}}},onClickToChildThread:function(e,t){return{type:"ON_CLICK_TO_CHILD_THREAD",app:t.app,thread:{connection:e}}},onClickToLogsThread:function(e,t){return{type:"ON_CLICK_TO_LOGS_THREAD",app:t.app,thread:{connection:e}}},onChangeInputPost:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{type:"ON_CHANGE_INPUT_POST",app:{inputPost:e="string"==typeof e?e:""}}},toggleDispMain:function(e){return{type:"TOGGLE_DISP_MAIN",app:e}},toggleDispBoard:function(e){return{type:"TOGGLE_DISP_BOARD",app:e}},toggleBubblePost:function(){return{type:"TOGGLE_BUBBLE_POST"}},toggleLinks:function(){return{type:"TOGGLE_LINKS"}},onClickMultistream:function(e){return{type:"ON_CLICK_MULTISTREAM",app:e.app,postsMulti:e.postsMulti,postsSingle:e.postsSingle}},onClickToggleDispMenu:function(){return{type:"ON_CLICK_TOGGLE_DISP_MENU"}},onClickToggleDispDetail:function(e){return{type:"ON_CLICK_TOGGLE_DISP_DETAIL",threadDetail:e.threadDetail,app:e.app}},onClickLike:function(e){return{type:"ON_CLICK_LIKE",app:{inputPost:e}}},onClickMoney:function(e){return{type:"ON_CLICK_MONEY",app:{inputPost:e}}},onClickShare:function(e){return{type:"ON_CLICK_SHARE",app:{inputPost:e}}},onResizeStartWindow:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{app:{},setting:{}};return r({type:"RESIZE_START_WINDOW"},e)},onResizeEndWindow:function(e){return{type:"RESIZE_END_WINDOW",app:e.app,setting:e.setting,bootOption:e.bootOption}},onTransition:function(){return{type:"ON_TRANSITION",app:{isTransition:!0}}},offTransition:function(){return{type:"OFF_TRANSITION",app:{isTransition:!1}}},onTransitionEnd:function(){return{type:"ON_TRANSITION_END"}},onClickMenu:function(e){return{type:"ON_CLICK_MENU",app:{menuComponent:e}}},onClickSetting:function(e,t){return{type:"ON_CLICK_SETTING",settingType:e,setting:t.setting}},openInnerNotif:function(){return{type:"OPEN_INNER_NOTIF",app:{openInnerNotif:arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.default.noInnerNotif}}},closeInnerNotif:function(){return{type:"CLOSE_INNER_NOTIF",app:{openInnerNotif:""}}},openNotif:function(){return{type:"OPEN_NOTIF",app:{isOpenNotif:!0}}},closeNotif:function(){return{type:"CLOSE_NOTIF",app:{isOpenNotif:!1}}},onClickOpenLockMenu:function(e){return{type:"ON_CLICK_OPEN_LOCK_MENU",app:{openLockMenu:e}}},openNewPost:function(){return{type:"OPEN_NEW_POST",app:{isOpenNewPost:!0}}},closeNewPost:function(){return{type:"CLOSE_NEW_POST",app:{isOpenNewPost:!1}}},openMenuTransitionEnd:function(e){return{type:"OPEN_MENU_TRANSITION_END",app:{threadScrollY:e}}},startDispPosts:function(){return{type:"START_DISP_POSTS",app:{isDispPosts:!0}}},startUndispPosts:function(){return{type:"START_UNDISP_POSTS",app:{isDispPosts:!1}}},componentDidMounts:function(e){return{type:"COMPONENT_DID_MOUNTS",componentDidMounts:e}},bootExtension:function(e){return{type:"BOOT_EXTENSION"}},updateExtension:function(e){return{type:"UPDATE_EXTENSION",app:e}},getClientMetas:function(e){return{type:"GET_CLIENT_METAS",clientMetas:e}},toggleDispPostsSupporter:function(){return{type:"TOGGLE_DISP_POSTS_SUPPORTER"}},closeDispPostsSupporter:function(){return{type:"CLOSE_DISP_POSTS_SUPPORTER",app:{isOpenPostsSupporter:!1}}},nextPostsTimeline:function(){return{type:"NEXT_POSTS_TIMELINE",postsTimeline:arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]}},unmountPostsTimeline:function(){return{type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:arguments.length>0&&void 0!==arguments[0]?arguments[0]:0}},clearPostsTimeline:function(){return{type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:arguments.length>0&&void 0!==arguments[0]?arguments[0]:0}},prevPostsTimeline:function(){return{type:"PREV_POSTS_TIMELINE",postsTimeline:arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]}},delegatePost:function(e){return{type:"DELEGATE_POST",app:{inputPost:e.inputPost,inputCurrentTime:e.inputCurrentTime}}},playVideo:function(){return{type:"PLAY_VIDEO"}},stopVideo:function(){return{type:"STOP_VIDEO"}},debug:function(e){return{type:"DEBUG",app:e}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(17),i=(r=a)&&r.__esModule?r:{default:r};function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=r.create(n),u(r,e)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default),o(t,null,[{key:"getMergedThreads",value:function(e,t){return e[t.connection]=t,e}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=p(a),u=p(n(28)),l=p(n(100)),s=p(n(16)),c=p(n(1)),f=p(n(78)),d=p(n(213));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=e.style,r=e.app,o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return o.state={active:!0,style:n,timeId:o.getTimeId(),isBubblePost:r.isBubblePost},o.mountTimeago=o.mountTimeago.bind(o),o.renderUpper=o.renderUpper.bind(o),o.renderTime=o.renderTime.bind(o),o.getDecolationProps=o.getDecolationProps.bind(o),o.handleOnClickPost=o.handleOnClickPost.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){e.actionLog;var t=e.dispFlg,n=this.state,o=n.style,a=n.isBubblePost;if(t){var i=a,u=e.app.isBubblePost;i!==u&&(!i&&u&&this.mountTimeago(),this.setState({style:r({},o,{self:r({},e.style.self),upper:r({},o.upper,{display:e.style.upper.display}),bottomPost:r({},e.style.bottomPost)}),isBubblePost:u}))}else this.setState({active:!1})}},{key:"getDecolationProps",value:function(){var e=this,t=this.props.app;return{onMouseOver:function(){t.isBubblePost&&e.setState({style:r({},e.state.style,{self:r({},e.state.style.self,{transition:"200ms",transform:"scale( 1.05 )",cursor:"pointer"})})})},onMouseLeave:function(){t.isBubblePost&&e.setState({style:r({},e.state.style,{self:r({},e.state.style.self,{transition:"600ms",transform:"scale( 1 )",cursor:"default"})})})},onMouseDown:function(){t.isBubblePost&&e.setState({style:r({},e.state.style,{self:r({},e.state.style.self,{transform:"scale( 1 )",cursor:"pointer"})})})},onMouseUp:function(){t.isBubblePost&&e.setState({style:r({},e.state.style,{self:r({},e.state.style.self,{transform:"scale( 1.05 )",cursor:"pointer"})})})}}}},{key:"getTimeId",value:function(){return"timeAgo:"+this.props._id}},{key:"componentDidMount",value:function(){this.mountTimeago()}},{key:"componentWillUnmount",value:function(){this.props._id;this.setState({active:!1})}},{key:"shouldComponentUpdate",value:function(e){var t=e.app;e.actionLog;return t.isMediaConnection,!0}},{key:"mountTimeago",value:function(){var e=this.props,t=e.app,n=e.timeago;t.isMediaConnection||this.refs[this.state.timeId]&&n.render(this.refs[this.state.timeId])}},{key:"handleOnClickPost",value:function(){var e=this.props.threads,t=this.props,n=t.app,r=t.connection;e[r]?(n=c.default.getAppUpdatedOpenFlgs({app:n},"post"),talknAPI.onClickToggleDispDetail({threadDetail:e[r],app:n})):talknAPI.changeThreadDetail(r)}},{key:"renderTime",value:function(){var e=this.state.style,t=this.props,n=t.app,r=t.createTime,o=t.currentTime;if(n.isMediaConnection){var a=String(o).split(".")[0];return i.default.createElement("time",{style:e.upperTimeago},a," Second.")}return i.default.createElement("time",{style:e.upperTimeago,ref:this.state.timeId,className:"timeAgo",dateTime:r},r)}},{key:"renderUpper",value:function(){var e=this.props,t=e.childLayerCnt,n=e.title,r=this.state.style,o=t>0?t+"child":"";return i.default.createElement("div",{style:r.upper},i.default.createElement("div",{style:r.upperChild},o),i.default.createElement("div",{style:r.upperTitle},i.default.createElement(d.default,{text:n,loop:!0,hoverToStop:!1,trailing:0,leading:0})),this.renderTime())}},{key:"renderPost",value:function(e,t){return!t.isBubblePost&&0===e.indexOf('<div class="talknStamps"')&&e.indexOf("scale("+f.default.bubbleStampScale+")")?e.replace("scale("+f.default.bubbleStampScale+")","scale("+f.default.stampScale+")").replace("height: 100%","height:60px").replace("height:100%","height:60px").replace("justify-content: center","justify-content: flex-start").replace("justify-content:center","justify-content: flex-start"):e}},{key:"render",value:function(){var e=this.props,t=e.app,n=e.thread,o=e.post,a=e.favicon,c=e._id,f=this.state,d=f.active,p=f.style,h=s.default.assetsIconPath+l.default.getSaveFaviconName(a);return 0!==h.indexOf(u.default.HTTPS_PROTOCOL)&&0!==h.indexOf(u.default.HTTP_PROTOCOL)&&(h=n.protocol===u.default.TALKN_PROTOCOL?u.default.HTTPS_PROTOCOL+"//"+h:n.protocol+"//"+h),d?i.default.createElement("li",r({"data-component-name":"Post",id:c,style:p.self},this.getDecolationProps()),this.renderUpper(),i.default.createElement("div",{onClick:this.handleOnClickPost,style:p.bottom},i.default.createElement("span",{style:r({},p.bottomIcon,{backgroundImage:"url( "+h+" )"})}),i.default.createElement("span",{style:p.bottomPost,dangerouslySetInnerHTML:{__html:this.renderPost(o,t)}}))):null}}]),t}();t.default=h},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=l(o),i=l(n(41)),u=l(n(130));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={animatedWidth:0,overflowWidth:0},n.handleMouseEnter=n.handleMouseEnter.bind(n),n.handleMouseLeave=n.handleMouseLeave.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this._measureText(),this.props.hoverToStop&&this._startAnimation()}},{key:"componentDidUpdate",value:function(){this._measureText(),this.props.hoverToStop&&this._startAnimation()}},{key:"componentWillUnmount",value:function(){clearTimeout(this._marqueeTimer)}},{key:"componentWillReceiveProps",value:function(e){this.props.text.length!=e.text.length&&(clearTimeout(this._marqueeTimer),this.setState({animatedWidth:0}))}},{key:"handleMouseEnter",value:function(){this.props.hoverToStop?clearTimeout(this._marqueeTimer):this.state.overflowWidth>0&&this._startAnimation()}},{key:"handleMouseLeave",value:function(){this.props.hoverToStop&&this.state.overflowWidth>0?this._startAnimation():(clearTimeout(this._marqueeTimer),this.setState({animatedWidth:0}))}},{key:"render",value:function(){var e={position:"relative",right:this.state.animatedWidth,whiteSpace:"nowrap"};return this.state.overflowWidth<0?a.default.createElement("div",{"data-component-name":"Marquee",className:"ui-marquee "+this.props.className,style:{overflow:"hidden"}},a.default.createElement("span",{ref:"text",style:e,title:this.props.text},this.props.text)):a.default.createElement("div",{"data-component-name":"Marquee",className:"ui-marquee "+this.props.className,style:{overflow:"hidden"},onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave},a.default.createElement("span",{ref:"text",style:e,title:this.props.text},this.props.text))}},{key:"_startAnimation",value:function(){var e=this;clearTimeout(this._marqueeTimer);var t=0===this.state.animatedWidth?this.props.leading:1/60*1e3;this._marqueeTimer=setTimeout(function t(){var n=e.state.overflowWidth,r=e.state.animatedWidth+1,o=r>n;if(o){if(!e.props.loop)return;r=0}o&&e.props.trailing?e._marqueeTimer=setTimeout(function(){e.setState({animatedWidth:r}),e._marqueeTimer=setTimeout(t,1/60*1e3)},e.props.trailing):(e.setState({animatedWidth:r}),e._marqueeTimer=setTimeout(t,1/60*1e3))},t)}},{key:"_measureText",value:function(){var e=u.default.findDOMNode(this),t=u.default.findDOMNode(this.refs.text);if(e&&t){var n=e.offsetWidth,r=t.offsetWidth-n;r!==this.state.overflowWidth&&this.setState({overflowWidth:r})}}}]),t}();s.defaultProps={text:"",hoverToStop:!1,loop:!1,leading:0,trailing:0},s.propTypes={text:i.default.string,hoverToStop:i.default.bool,loop:i.default.bool,leading:i.default.number,trailing:i.default.number,className:i.default.string},e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=s(a),u=(s(n(8)),s(n(1))),l=s(n(38));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleOnClickMenuIcon=n.handleOnClickMenuIcon.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"handleOnClickMenuIcon",value:function(e){var t=this.props.state,n=t.app;if("NONE"===n.extensionMode){switch(n.screenMode){case u.default.screenModeSmallLabel:break;default:n=u.default.getAppUpdatedOpenFlgs(t,"headerMenuIcon")}talknAPI.onClickToggleDispMenu(n)}}},{key:"renderWatchCntComponent",value:function(){var e=this.props.state,t=e.thread,n=e.style;return i.default.createElement("span",{"data-component-name":"Header-WatchCnt",style:n.header.childAnalyzeWrap},i.default.createElement("div",{style:n.header.childAnalyzeType},"LIVE"),i.default.createElement("div",{style:n.header.childAnalyzeCnt},t.watchCnt))}},{key:"renderLeft",value:function(){var e=this.props,t=e.openInnerNotif,n=e.state,o=n.app,a=n.style,s=a.icon,c=l.default.getHeaderUser(),f=l.default.getMenu(s.menu);return o.extensionMode===u.default.extensionModeExtBottomLabel||o.extensionMode===u.default.extensionModeExtModalLabel||o.extensionMode===u.default.extensionModeExtIncludeLabel?i.default.createElement("span",r({"data-component-name":"Header-left",style:a.header.leftIcon,onClick:function(){return t()}},l.default.getDecolationProps3("icon","headerUser","div")),c):i.default.createElement("span",r({"data-component-name":this.constructor.name+"-left",style:a.header.leftIcon,onClick:this.handleOnClickMenuIcon},l.default.getDecolationProps1("icon","menu","div")),f)}},{key:"renderRight",value:function(){var e=this.props.handleOnClickToggleDetail,t=this.props.state,n=(t.app,t.thread,t.style),o=n.icon,a=l.default.getDetail(o.detail);return i.default.createElement("span",r({"data-component-name":this.constructor.name+"-right",style:n.header.rightIcon,onClick:e},l.default.getDecolationProps3("icon","detail","div")),a,this.renderWatchCntComponent())}},{key:"render",value:function(){var e=this.props,t=e.state,n=e.handleOnClickToggleMain,r=t.style,o=(t.app,r.icon),a=l.default.getHeadTab(o.headTab);return i.default.createElement("header",{"data-component-name":"Header",style:r.header.self},this.renderLeft(),i.default.createElement("span",{"data-component-name":"Header-center",style:r.header.headTab,onClick:n},a),this.renderRight())}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=c(a),u=c(n(1)),l=c(n(100)),s=c(n(16));function c(e){return e&&e.__esModule?e:{default:e}}var f=/^\s*$/,d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={focusSetIntervalId:0},n.renderButton=n.renderButton.bind(n),n.handleOnClick=n.handleOnClick.bind(n),n.handleOnChange=n.handleOnChange.bind(n),n.handleOnKeyPress=n.handleOnKeyPress.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){talknAPI.componentDidMounts("PostsFooter")}},{key:"handleOnClick",value:function(e){var t=this.refs.postArea.innerHTML;u.default.validInputPost(t)||(talknAPI.post(),talknAPI.onChangeInputPost(""))}},{key:"handleOnChange",value:function(e){u.default.validInputPost(e.target.value)||talknAPI.onChangeInputPost(e.target.value)}},{key:"handleOnKeyPress",value:function(e){clearInterval(this.state.focusSetIntervalId);this.props.state.app;13===e.nativeEvent.keyCode&&(e.nativeEvent.shiftKey?talknAPI.onChangeInputPost(e.target.value+"\n"):f.test(e.target.value)||(talknAPI.post(),talknAPI.onChangeInputPost("")))}},{key:"getIconStyle",value:function(){var e=this.props.state,t=e.thread,n=e.style,o="https://"+s.default.assetsIconPath+l.default.getSaveFaviconName(t.favicon);return t.favicon?r({},n.postsFooter.icon,{backgroundImage:"url("+o+")"}):n.postsFooter.icon}},{key:"renderButton",value:function(){var e=this.props.state,t=e.style,n=e.app;return n.extensionMode===u.default.extensionModeExtModalLabel||n.extensionMode===u.default.extensionModeExtBottomLabel?null:i.default.createElement("button",{style:t.postsFooter.button,onClick:this.handleOnClick},"talkn")}},{key:"render",value:function(){var e=this.props,t=e.state,n=e.handleOnClickFooterIcon,r=t.style,o=t.app,a=o.inputPost,l=o.extensionMode===u.default.extensionModeExtModalLabel||o.extensionMode===u.default.extensionModeExtBottomLabel;return i.default.createElement("div",{"data-component-name":"PostsFooter",style:r.postsFooter.self},i.default.createElement("div",{style:this.getIconStyle(),onClick:n}),i.default.createElement("textarea",{"data-component-name":"postArea",style:r.postsFooter.textarea,ref:"postArea",rows:1,readOnly:l,onChange:this.handleOnChange,onKeyPress:this.handleOnKeyPress,onFocus:this.handleOnFocus,onBlur:this.handleOnBlur,value:a,placeholder:"Comment to web"}),this.renderButton())}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=s(a),u=(s(n(1)),s(n(5))),l=s(n(38));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"getIndexBackground",value:function(){var e=u.default.themeRGBA;return{top:{background:e},middle:{background:e},bottom:{background:e}}}},{key:"render",value:function(){var e=this.props.openInnerNotif,t=this.props.state.style,n=l.default.getUser(),o=l.default.getIndex(this.getIndexBackground()),a=l.default.getLogs(),s=l.default.getSetting();return i.default.createElement("div",{"data-component-name":"MenuFooter",style:t.menuFooter.self},i.default.createElement("div",r({style:t.menuFooter.child,onClick:function(){return e()}},l.default.getDecolationProps1("icon","user","div")),n,i.default.createElement("div",null,"SOCIAL")),i.default.createElement("div",r({style:t.menuFooter.childIndex},l.default.getDecolationProps1("icon","index","div")),o,i.default.createElement("div",{style:{color:u.default.themeRGBA}},"RANK")),i.default.createElement("div",r({style:t.menuFooter.child,onClick:function(){return e()}},l.default.getDecolationProps1("icon","logs","div")),a,i.default.createElement("div",null,"LOGS")),i.default.createElement("div",r({style:t.menuFooter.child,onClick:function(){return e()}},l.default.getDecolationProps1("icon","setting","div")),s,i.default.createElement("div",null,"SETTING")))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=c(o),i=c(n(16)),u=(c(n(8)),c(n(1))),l=c(n(38)),s=c(n(5));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleOnClickLike=n.handleOnClickLike.bind(n),n.handleOnClickShare=n.handleOnClickShare.bind(n),n.handleOnClickPortal=n.handleOnClickPortal.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"handleOnClickLike",value:function(){var e=this.props,t=e.state,n=e.onClickOpenLockMenu,r=e.openInnerNotif;t.app.openLockMenu!==u.default.openLockMenuLabelNo?n(u.default.openLockMenuLabelNo):r()}},{key:"handleOnClickShare",value:function(){var e=this.props,t=e.state,n=e.onClickOpenLockMenu;e.openInnerNotif;t.app.openLockMenu!==u.default.openLockMenuLabelNo?n(u.default.openLockMenuLabelNo):n(u.default.openLockMenuLabelShare)}},{key:"handleOnClickPortal",value:function(){var e=this.props.state.app;e.extensionMode===u.default.extensionModeExtBottomLabel||e.extensionMode===u.default.extensionModeExtModalLabel?talknWindow.parentTo("linkTo",{href:"https://"+i.default.wwwURL}):location.href="https://"+i.default.wwwURL}},{key:"render",value:function(){var e=this.props,t=e.mode,n=e.state,r=n.app,o=n.style;if(r.extensionMode!==u.default.extensionModeExtBottomLabel&&r.extensionMode!==u.default.extensionModeExtModalLabel||"default"!==t){var i=l.default.getHeart({},n),c=l.default.getShare({},n),f=l.default.getMoney({},n),d=n.app.openLockMenu===u.default.openLockMenuLabelShare?s.default.themeRGBA:s.default.fontBaseRGB;return a.default.createElement("footer",{"data-component-name":"DetailFooter",style:o.detailFooter.self},a.default.createElement("div",{style:o.detailFooter.childLike,onClick:this.handleOnClickLike},i,a.default.createElement("div",null,"LIKE")),a.default.createElement("div",{style:o.detailFooter.childShare,onClick:this.handleOnClickShare},c,a.default.createElement("div",{style:{color:d}},"SHARE")),a.default.createElement("div",{style:o.detailFooter.childMoney,onClick:this.handleOnClickPortal},f,a.default.createElement("div",null,"ABOUT")))}return null}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=g(a),u=g(n(16)),l=g(n(8)),s=g(n(28)),c=g(n(1)),f=g(n(213)),d=g(n(217)),p=g(n(219)),h=g(n(38));function g(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"handleOnClickLike",value:function(){var e=this.props,t=e.state,n=e.onClickOpenLockMenu,r=e.openInnerNotif;t.app.openLockMenu!==c.default.openLockMenuLabelNo?n(c.default.openLockMenuLabelNo):r()}},{key:"handleOnClickShare",value:function(){var e=this.props,t=e.state,n=e.onClickOpenLockMenu;t.app.openLockMenu!==c.default.openLockMenuLabelNo?n(c.default.openLockMenuLabelNo):n(c.default.openLockMenuLabelShare)}},{key:"handleOnClickPortal",value:function(){var e=this.props,t=e.state,n=e.onClickOpenLockMenu;t.app.openLockMenu!==c.default.openLockMenuLabelNo&&n(c.default.openLockMenuLabelNo)}},{key:"getImgStyle",value:function(e,t,n){var o=e.detail.img.backgroundImage,a=e.detail.img.backgroundSize;return n["og:image"]&&(o=0===(""+n["og:image"]).indexOf(s.default.HTTPS_PROTOCOL)||0===(""+n["og:image"]).indexOf(s.default.HTTP_PROTOCOL)?'url("'+n["og:image"]+'")':t===s.default.TALKN_PROTOCOL?'url("'+s.default.HTTPS_PROTOCOL+n["og:image"]+'")':'url("'+t+n["og:image"]+'")',a="cover"),r({},e.detail.img,{backgroundImage:o,backgroundSize:a})}},{key:"getDescription",value:function(e){return e.description!==u.default.description?e.description:e["og:description"]?e["og:description"]:u.default.description}},{key:"renderHeader",value:function(){var e=this.props,t=e.state,n=e.handleOnClickToggleDetail,r=t.threadDetail,o=t.style;return i.default.createElement("header",{"data-component-name":"DetailHeader",onClick:n,style:o.detail.header},i.default.createElement("span",{style:o.detail.headerP},i.default.createElement(f.default,{text:r.serverMetas.title,loop:!0,hoverToStop:!1,trailing:0,leading:0})))}},{key:"getTwitterIcon",value:function(e){var t=e.app,n=e.threadDetail.serverMetas,r=""!==n["twitter:site"],o=r?""+l.default.URL.twitter+n["twitter:site"].replace("@",""):"",a="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:o})}:function(){};return h.default.getTwitter({},e,{active:r,href:o,onClick:a})}},{key:"getFacebookIcon",value:function(e){var t=e.app,n=e.threadDetail.serverMetas,r=""!==n["fb:page_id"],o=r?""+l.default.URL.facebook+n["fb:page_id"]:"",a="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:o})}:function(){};return h.default.getFacebook({},e,{active:r,href:o,onClick:a})}},{key:"getAppstoreIcon",value:function(e){var t=e.app,n=e.threadDetail.serverMetas,r=""!==n["al:ios:app_store_id"],o=r?""+l.default.URL.appstore+n["al:ios:app_store_id"]:"",a="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:o})}:function(){};return h.default.getAppstore({},e,{active:r,href:o,onClick:a})}},{key:"getAndroidIcon",value:function(e){var t=e.app,n=e.threadDetail.serverMetas,r=""!==n["al:android:package"],o=r?""+l.default.URL.playstore+n["al:android:package"]:"",a="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:o})}:function(){};return h.default.getAndroid({},e,{active:r,href:o,onClick:a})}},{key:"getHomeIcon",value:function(e){var t=e.app,n=e.threadDetail,r=n.protocol,o=n.connection,a=n.hasSlash,i=s.default.HTTPS_PROTOCOL+"//"+u.default.domain+o;r!==s.default.TALKN_PROTOCOL&&(i=a&&o.lastIndexOf("/")===o.length-1?(r+"/"+o).replace(/\/$/,""):r+"/"+o);var l="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:i})}:function(){};return h.default.getHome({},e,{active:!0,href:i,onClick:l})}},{key:"getTalknIcon",value:function(e){var t=e.app,n=e.threadDetail,r=n.connection,o=(n.hasSlash,s.default.HTTPS_PROTOCOL+"//"+u.default.domain+r),a="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:o})}:function(){};return h.default.getTalkn({},e,{active:!0,href:o,onClick:a})}},{key:"getDispContentType",value:function(e){var t=this.props.state.style;return e.split(";").map(function(e,n){return i.default.createElement("div",{key:e+"_"+n,style:t.detail.metaContentType},e)})}},{key:"renderMeta",value:function(){var e=this.props.state,t=e.threadDetail,n=e.style,r=t.serverMetas,o=t.contentType,a=(t.h1s,t.protocol);n.detail.img=this.getImgStyle(n,a,r);var u=this.getDescription(r),l=this.getTwitterIcon(e),s=this.getFacebookIcon(e),c=this.getAppstoreIcon(e),f=this.getAndroidIcon(e),d=this.getHomeIcon(e),p=this.getTalknIcon(e),g=h.default.getGraph({},e,{active:!1}),y=h.default.getEmpty({},e,{active:!1}),m=this.getDispContentType(o);return i.default.createElement("div",{"data-component-name":"DetaiMeta",style:n.detail.meta},i.default.createElement("div",{style:n.detail.img}),i.default.createElement("div",{style:n.detail.description},u),i.default.createElement("div",{style:n.detail.metaItems},l,s,c,f),i.default.createElement("div",{style:n.detail.metaItems},d,p,g,y),i.default.createElement("div",{style:n.detail.metaContentTypeWrap},m))}},{key:"renderConnection",value:function(){var e=this.props.state,t=e.threadDetail,n=e.style;return i.default.createElement("div",{style:n.detail.connection}," CH",i.default.createElement("br",null),t.connection)}},{key:"renderAnalyze",value:function(){var e=this.props.state,t=e.threadDetail,n=e.style;return i.default.createElement("div",{style:n.detail.analyze},i.default.createElement("div",{style:n.detail.analyzeRow},i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"LIVE"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},t.watchCnt)),i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"POSITIBITY"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},"1.5")),i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"GROWTH"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},"2.0%"))),i.default.createElement("div",{style:n.detail.analyzeRow},i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"TOTAL POST"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},t.postCnt)),i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"AD POWER"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},"102")),i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"RANK"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},"2"))),i.default.createElement("div",{style:n.detail.analyzeRow},i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"LIKE"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},t.postCnt)),i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"SHARE"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},"12")),i.default.createElement("div",{style:n.detail.analyzeCol},i.default.createElement("div",{style:n.detail.analyzeLabel},"MONEY"),i.default.createElement("hr",{style:n.detail.analyzeHr}),i.default.createElement("div",{style:n.detail.analyzeValue},"13200"))))}},{key:"renderH1s",value:function(){var e=this.props.state,t=e.threadDetail,n=e.style,r=t.h1s.map(function(e,t){return i.default.createElement("li",{style:n.detail.h1sLi,key:"h1s"+t},"・",e)});return i.default.createElement("ol",{style:n.detail.h1s},r)}},{key:"renderLockMenu",value:function(){switch(this.props.state.app.screenMode){case c.default.screenModeSmallLabel:case c.default.screenModeMiddleLabel:return i.default.createElement(p.default,this.props);case c.default.screenModeLargeLabel:return null}}},{key:"renderDetailFooter",value:function(){switch(this.props.state.app.screenMode){case c.default.screenModeSmallLabel:case c.default.screenModeMiddleLabel:case c.default.screenModeLargeLabel:return i.default.createElement(d.default,this.props)}}},{key:"renderExtension",value:function(){var e=this.props.state,t=e.app,n="https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en",r="NONE"!==t.extensionMode?function(){talknWindow.parentTo("linkTo",{href:n})}:function(){};return h.default.getChromeExtension({},e,{active:!0,href:n,onClick:r})}},{key:"render",value:function(){var e=this.props.state.style;return i.default.createElement("div",{"data-component-name":"Detail",style:e.detail.self},this.renderHeader(),i.default.createElement("div",{"data-component-name":"DetailBody",style:e.detail.body},this.renderMeta(),this.renderExtension(),this.renderConnection(),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement("br",null)),this.renderLockMenu(),this.renderDetailFooter())}}]),t}();t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=h(a),u=h(n(16)),l=h(n(28)),s=h(n(1)),c=h(n(9)),f=h(n(5)),d=h(n(136)),p=h(n(38));function h(e){return e&&e.__esModule?e:{default:e}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=e.state.style.lockMenu;return n.state={style:r},n.getDecolationProps1=n.getDecolationProps1.bind(n),n.handleOnClickToWeb=n.handleOnClickToWeb.bind(n),n.handleOnClickToTalkn=n.handleOnClickToTalkn.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"getDecolationProps1",value:function(e){var t=this;return{onMouseOver:function(){"liEmbed"===e&&document.querySelector("[data-component-share-input]").select(),t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{color:f.default.whiteRGB,background:f.default.getThemeRGBA(.7)})))})},onMouseLeave:function(){"liEmbed"===e&&document.getSelection().empty(),t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{color:c.default.fontBaseRGB,background:f.default.whiteRGBA,transform:"scale( 1 )"})))})},onMouseDown:function(){t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{transition:"200ms",transform:"scale( 1.05 )"})))})},onMouseUp:function(){t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{transition:"200ms",transform:"scale( 1 )"})))})}}}},{key:"getDecolationPropsEmbed",value:function(){var e=this;return{onMouseOver:function(){e.setState({style:r({},e.state.style,{liEmbed:r({},e.state.style.liEmbed,{color:f.default.whiteRGB,background:f.default.themeRGB})})})},onMouseLeave:function(){e.setState({style:r({},e.state.style,{liEmbed:r({},e.state.style.liEmebed,{color:c.default.fontBaseRGB,background:f.default.whiteRGBA,transform:"scale( 1 )"})})})},onMouseDown:function(){e.setState({style:r({},e.state.style,{liEmbed:r({},e.state.style.liEmbed,{transition:"200ms",transform:"scale( 1.05 )"})})})},onMouseUp:function(){e.setState({style:r({},e.state.style,{liEmbed:r({},e.state.style.liEmbed,{transition:"200ms",transform:"scale( 1 )"})})})}}}}]),o(t,[{key:"handleOnClickToWeb",value:function(){var e=this.props.state.threadDetail;e.protocol===l.default.TALKN_PROTOCOL?location.href=e.connection:location.href=e.protocol+"/"+e.connection}},{key:"handleOnClickToTalkn",value:function(){var e=this.props.state.threadDetail;location.href="//"+u.default.domain+e.connection}},{key:"render",value:function(){var e=this.state,t=e.style,n=this.props,o=n.openInnerNotif,a=n.onClickOpenLockMenu,l=this.props.state,c=l.style,f=l.threadDetail,h=p.default.getHeadTab(d.default.headTabUpdate),g=p.default.getTwitter({},e,{sizePx:p.default.middleSize}),y=p.default.getFacebook({},e,{sizePx:p.default.middleSize}),m=p.default.getTalkn({},e,{sizePx:p.default.middleSize});return i.default.createElement("div",{"data-component-name":"LockMenu",style:c.lockMenu.menuShare},i.default.createElement("header",{style:c.lockMenu.header,onClick:function(){return a(s.default.openLockMenuLabelNo)}},"SHARE",h),i.default.createElement("ul",{style:c.lockMenu.ul},i.default.createElement("li",r({style:t.liTwitter,onClick:function(){return o()}},this.getDecolationProps1("liTwitter")),g,i.default.createElement("div",{style:c.lockMenu.shareLabel},"Twitter")),i.default.createElement("li",r({style:t.liFacebook,onClick:function(){return o()}},this.getDecolationProps1("liFacebook")),y,i.default.createElement("div",{style:c.lockMenu.shareLabel},"Facebook")),i.default.createElement("li",r({style:t.liEmbed,onClick:function(){document.querySelector("[data-component-share-input]").select(),document.execCommand("copy"),o("Success copy script tag.")}},this.getDecolationProps1("liEmbed")),m,i.default.createElement("div",{style:c.lockMenu.shareLabel},i.default.createElement("input",{"data-component-share-input":!0,type:"text",style:t.liEmbedInput,readOnly:!0,value:'<script type="text/javascript" async src=\'//'+u.default.domain+f.connection+"'><\/script>"})))))}}]),t}();t.default=y},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=l(o),i=l(n(41)),u=l(n(130));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={animatedWidth:0,overflowWidth:0},n.handleMouseEnter=n.handleMouseEnter.bind(n),n.handleMouseLeave=n.handleMouseLeave.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this._measureText(),this.props.hoverToStop&&this._startAnimation()}},{key:"componentDidUpdate",value:function(){this._measureText(),this.props.hoverToStop&&this._startAnimation()}},{key:"componentWillUnmount",value:function(){clearTimeout(this._marqueeTimer)}},{key:"componentWillReceiveProps",value:function(e){this.props.text.length!=e.text.length&&(clearTimeout(this._marqueeTimer),this.setState({animatedWidth:0}))}},{key:"handleMouseEnter",value:function(){this.props.hoverToStop?clearTimeout(this._marqueeTimer):this.state.overflowWidth>0&&this._startAnimation()}},{key:"handleMouseLeave",value:function(){this.props.hoverToStop&&this.state.overflowWidth>0?this._startAnimation():(clearTimeout(this._marqueeTimer),this.setState({animatedWidth:0}))}},{key:"render",value:function(){var e={position:"relative",right:this.state.animatedWidth,whiteSpace:"nowrap"};return this.state.overflowWidth<0?a.default.createElement("div",{className:"ui-marquee "+this.props.className,style:{overflow:"hidden"}},a.default.createElement("span",{ref:"text",style:e,title:this.props.text},this.props.text)):a.default.createElement("div",{className:"ui-marquee "+this.props.className,style:{overflow:"hidden"},onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave},a.default.createElement("span",{ref:"text",style:e,title:this.props.text},this.props.text))}},{key:"_startAnimation",value:function(){var e=this;clearTimeout(this._marqueeTimer);var t=0===this.state.animatedWidth?this.props.leading:50;this._marqueeTimer=setTimeout(function t(){var n=e.state.overflowWidth,r=e.state.animatedWidth+1,o=r>n;if(o){if(!e.props.loop)return;r=0}o&&e.props.trailing?e._marqueeTimer=setTimeout(function(){e.setState({animatedWidth:r}),e._marqueeTimer=setTimeout(t,50)},e.props.trailing):(e.setState({animatedWidth:r}),e._marqueeTimer=setTimeout(t,50))},t)}},{key:"_measureText",value:function(){var e=u.default.findDOMNode(this),t=u.default.findDOMNode(this.refs.text);if(e&&t){var n=e.offsetWidth,r=t.offsetWidth-n;r!==this.state.overflowWidth&&this.setState({overflowWidth:r})}}}]),t}();s.defaultProps={text:"",hoverToStop:!1,loop:!1,leading:0,trailing:0},s.propTypes={text:i.default.string,hoverToStop:i.default.bool,loop:i.default.bool,leading:i.default.number,trailing:i.default.number,className:i.default.string},e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(h(n(8)),n(2)),i=h(a),u=h(n(220)),l=h(n(1)),s=h(n(65)),c=h(n(100)),f=h(n(16)),d=(h(n(5)),h(n(67))),p=h(n(78));function h(e){return e&&e.__esModule?e:{default:e}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=e.style.menuIndexList;return n.state={style:r},n.onClickEvents=n.onClickEvents.bind(n),n.getDecolationEvents=n.getDecolationEvents.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){var e=this.props,t=(e.app,e.menuIndexList);talknAPI.onCatchConnectionAPI(t.connection)}},{key:"getDecolationEvents",value:function(e){var t=this;if(e===d.default.unactiveLiSelfLabel)return{onMouseOver:function(){t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{background:d.default[e+"MouseOverBackground"]})))})},onMouseLeave:function(){t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{background:d.default[e+"Background"]})))})},onMouseDown:function(){t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{background:d.default[e+"MouseDownBackground"]})))})},onMouseUp:function(){t.setState({style:r({},t.state.style,g({},e,r({},t.state.style[e],{background:d.default[e+"MouseOverBackground"]})))})}}}},{key:"onClickEvents",value:function(){var e=this.props,t=e.thread,n=(e.setting,e.menuIndexList),o=e.handleOnClickConnection,a=n.connection,i=t.connection===a,u=i?d.default.activeLiSelfLabel:d.default.unactiveLiSelfLabel,s=this.props.app;i?s.screenMode===l.default.screenModeSmallLabel&&talknAPI.onClickToggleDispMenu():o(a),this.setState({style:r({},this.state.style,g({},u,r({},this.state.style[u],{background:d.default[u+"Background"]})))})}},{key:"getDispRank",value:function(e){var t=this.state.style,n=t.upperRankWrap,o=t.upperRank;if(e){var a=d.default.getDispRankBackground(e),u=d.default.getDispRankWidth(e);return i.default.createElement("span",{style:r({},n,{background:a,width:u})},i.default.createElement("span",{style:o},"RANK",e))}if(0===e){var l=d.default.getDispRankBackground(e),s=d.default.getDispRankWidth(e);return i.default.createElement("span",{style:r({},n,{background:l,width:s})},i.default.createElement("span",{style:o},"TUNE"))}return null}},{key:"getDispConnection",value:function(e){var t=this.props,n=t.thread,r=t.menuIndexList;return e?n.connection:"/"===r.connection?r.connection.replace(n.connection,""):r.connection?0===r.connection.indexOf("//")?r.connection.replace("//","/"):r.connection:""}},{key:"getDispFavicon",value:function(){var e=this.state.isFocusConnection,t=this.props,n=t.thread,r=t.menuIndexList,o=s.default.getDefaultFavicon();return e?r.favicon===o?n.favicon===o?"//"+f.default.assetsIconPath+c.default.getSaveFaviconName(r.favicon):"//"+f.default.assetsIconPath+c.default.getSaveFaviconName(n.favicon):"//"+f.default.assetsIconPath+c.default.getSaveFaviconName(r.favicon):r.favicon===o?"//"+f.default.assetsIconPath+c.default.getSaveFaviconName(menuIndex.favicon):"//"+f.default.assetsIconPath+c.default.getSaveFaviconName(r.favicon)}},{key:"getDispWatchCnt",value:function(){var e=this.state.style,t=this.props.menuIndexList;return 0===t.watchCnt||t.watchCnt>0?i.default.createElement("span",{style:e.bottomWatchCnt},i.default.createElement("span",{style:e.bottomWatchCntWrap},t.watchCnt)):i.default.createElement("span",{style:e.bottomWatchCnt})}},{key:"renderPost",value:function(e,t){return 0===e.indexOf('<div class="talknStamps"')&&e.indexOf("scale("+p.default.bubbleStampScale+")")?e.replace("scale("+p.default.bubbleStampScale+")","scale("+p.default.stampScale+")").replace("height: 100%","height:60px").replace("height:100%","height:60px"):e}},{key:"render",value:function(){var e=this.state.style,t=this.props,n=t.app,o=t.thread,a=t.menuIndexList,l=t.rank,s=o.connection===a.connection,c=s?d.default.activeLiSelfLabel:d.default.unactiveLiSelfLabel,f="talkn";f=s?o.title:""!==a.title?a.title:o.title;var p=this.getDispRank(l),h=this.getDispFavicon(),g=this.getDispWatchCnt(),y=e[c];return i.default.createElement("li",r({"data-component-name":"MenuIndexList",key:a.connection,style:y,onClick:this.onClickEvents},this.getDecolationEvents(c)),p,i.default.createElement("div",{style:e.upper},i.default.createElement("span",{style:e.upperSpace}),i.default.createElement("span",{style:e.upperRight},i.default.createElement(u.default,{text:f,loop:!0,hoverToStop:!1,trailing:0,leading:0}))),i.default.createElement("div",{style:e.bottom},i.default.createElement("span",{style:r({},e.bottomIcon,{backgroundImage:"url( "+h+" )"})}),i.default.createElement("span",{style:e.bottomPost,dangerouslySetInnerHTML:{__html:this.renderPost(a.post,n)}}),g))}}]),t}();t.default=y},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t);var o=n(2),a=n.n(o),i=n(41),u=n.n(i),l=a.a.createContext(null),s=function(e){function t(t){var n;n=e.call(this,t)||this;var r=t.store;return n.state={storeState:r.getState(),store:r},n}r(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.subscribe()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(e){this.props.store!==e.store&&(this.unsubscribe&&this.unsubscribe(),this.subscribe())},n.subscribe=function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){var n=t.getState();e._isMounted&&e.setState(function(e){return e.storeState===n?null:{storeState:n}})});var n=t.getState();n!==this.state.storeState&&this.setState({storeState:n})},n.render=function(){var e=this.props.context||l;return a.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(o.Component);s.propTypes={store:u.a.shape({subscribe:u.a.func.isRequired,dispatch:u.a.func.isRequired,getState:u.a.func.isRequired}),context:u.a.object,children:u.a.any};var c=s;function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var h=n(144),g=n.n(h),y=n(70),m=n.n(y);n(183);function v(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,s=n.methodName,c=void 0===s?"connectAdvanced":s,h=n.renderCountProp,y=void 0===h?void 0:h,v=n.shouldHandleStateChanges,b=void 0===v||v,x=n.storeKey,k=void 0===x?"store":x,w=n.withRef,T=void 0!==w&&w,S=n.forwardRef,C=void 0!==S&&S,E=n.context,_=void 0===E?l:E,O=p(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);m()(void 0===y,"renderCountProp is removed. render counting is built into the latest React dev tools profiling extension"),m()(!T,"withRef is removed. To access the wrapped instance, use a ref on the connected component");var M="To use a custom Redux store for specific components,  create a custom React context with React.createContext(), and pass the context object to React-Redux's Provider and specific components like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";m()("store"===k,"storeKey has been removed and does not do anything. "+M);var P=_;return function(t){var n=t.displayName||t.name||"Component",i=u(n),l=d({},O,{getDisplayName:u,methodName:c,renderCountProp:y,shouldHandleStateChanges:b,storeKey:k,displayName:i,wrappedComponentName:n,WrappedComponent:t}),s=O.pure,p=o.Component,h=t;s&&(p=o.PureComponent);var v=function(t){function n(n){var r,o,i,u,c,p,g,y,v;return r=t.call(this,n)||this,m()(C?!n.wrapperProps[k]:!n[k],"Passing redux store in props has been removed and does not do anything. "+M),r.selectDerivedProps=function(t,n,r){if(s&&o===n&&i===t)return u;r!==c&&(c=r,p=e(r.dispatch,l)),o=n,i=t;var a=p(t,n);return u===a?u:u=a},r.selectChildElement=function(e,t){return e===g&&t===y||(g=e,y=t,v=a.a.createElement(h,d({},e,{ref:t}))),v},r.renderWrappedComponent=r.renderWrappedComponent.bind(f(f(r))),r}r(n,t);var o=n.prototype;return o.renderWrappedComponent=function(e){m()(e,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var t,n=e.storeState,r=e.store,o=this.props;C&&(o=this.props.wrapperProps,t=this.props.forwardedRef);var a=this.selectDerivedProps(n,o,r);return this.selectChildElement(a,t)},o.render=function(){var e=this.props.context||P;return a.a.createElement(e.Consumer,null,this.renderWrappedComponent)},n}(p);if(v.WrappedComponent=t,v.displayName=i,C){var x=a.a.forwardRef(function(e,t){return a.a.createElement(v,{wrapperProps:e,forwardedRef:t})});return x.displayName=i,x.WrappedComponent=t,g()(x,t)}return g()(v,t)}}var b=Object.prototype.hasOwnProperty;function x(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(x(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!b.call(t,n[o])||!x(e[n[o]],t[n[o]]))return!1;return!0}var w=n(101);function T(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function S(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function C(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=S(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=S(o),o=r(t,n)),o},r}}var E=[function(e){return"function"==typeof e?C(e):void 0},function(e){return e?void 0:T(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?T(function(t){return Object(w.bindActionCreators)(e,t)}):void 0}];var _=[function(e){return"function"==typeof e?C(e):void 0},function(e){return e?void 0:T(function(){return{}})}];function O(e,t,n){return d({},n,e,t)}var M=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,u){var l=e(t,n,u);return i?o&&a(l,r)||(r=l):(i=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return O}}];function P(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function L(e,t,n,r,o){var a,i,u,l,s,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,g,y=!f(p,i),m=!c(o,a);return a=o,i=p,y&&m?(u=e(a,i),t.dependsOnOwnProps&&(l=t(r,i)),s=n(u,l,i)):y?(e.dependsOnOwnProps&&(u=e(a,i)),t.dependsOnOwnProps&&(l=t(r,i)),s=n(u,l,i)):m?(h=e(a,i),g=!d(h,u),u=h,g&&(s=n(u,l,i)),s):s}return function(o,c){return p?h(o,c):(u=e(a=o,i=c),l=t(r,i),s=n(u,l,i),p=!0,s)}}function B(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?L:P)(i,u,l,e,a)}function I(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function A(e,t){return e===t}var R,N,j,F,D,U,W,H,z,G,V,q,K=(j=(N=void 0===R?{}:R).connectHOC,F=void 0===j?v:j,D=N.mapStateToPropsFactories,U=void 0===D?_:D,W=N.mapDispatchToPropsFactories,H=void 0===W?E:W,z=N.mergePropsFactories,G=void 0===z?M:z,V=N.selectorFactory,q=void 0===V?B:V,function(e,t,n,r){void 0===r&&(r={});var o=r,a=o.pure,i=void 0===a||a,u=o.areStatesEqual,l=void 0===u?A:u,s=o.areOwnPropsEqual,c=void 0===s?k:s,f=o.areStatePropsEqual,h=void 0===f?k:f,g=o.areMergedPropsEqual,y=void 0===g?k:g,m=p(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=I(e,U,"mapStateToProps"),b=I(t,H,"mapDispatchToProps"),x=I(n,G,"mergeProps");return F(q,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:b,initMergeProps:x,pure:i,areStatesEqual:l,areOwnPropsEqual:c,areStatePropsEqual:h,areMergedPropsEqual:y},m))});n.d(t,"Provider",function(){return c}),n.d(t,"connectAdvanced",function(){return v}),n.d(t,"ReactReduxContext",function(){return l}),n.d(t,"connect",function(){return K})},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n(225);var r=o(n(129));function o(e){return e&&e.__esModule?e:{default:e}}o(n(521)).default.setupMath();var a=window.talknIndex?window.talknIndex+1:1,i=new r.default(a);window.talknWindow||(window.talknWindow=i),window.__talknWindow__||(window.__talknWindow__=[]),window.__talknWindow__[a]||(window.__talknWindow__[a]=i)},function(e,t,n){"use strict";(function(e){if(n(226),n(423),n(424),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;var t="defineProperty";function r(e,n,r){e[n]||Object[t](e,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(e){[][e]&&r(Array,e,Function.call.bind([][e]))})}).call(this,n(49))},function(e,t,n){n(227),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(307),n(308),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(122),n(331),n(165),n(332),n(166),n(333),n(334),n(335),n(336),n(337),n(169),n(171),n(172),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),n(351),n(352),n(353),n(354),n(355),n(356),n(357),n(358),n(359),n(360),n(361),n(362),n(363),n(364),n(365),n(366),n(367),n(368),n(369),n(370),n(371),n(372),n(373),n(374),n(375),n(376),n(377),n(378),n(379),n(380),n(381),n(382),n(383),n(384),n(385),n(386),n(387),n(388),n(389),n(390),n(391),n(392),n(393),n(394),n(395),n(396),n(397),n(398),n(399),n(400),n(401),n(402),n(403),n(404),n(405),n(406),n(407),n(408),n(409),n(410),n(411),n(412),n(413),n(414),n(415),n(416),n(417),n(418),n(419),n(420),n(421),n(422),e.exports=n(29)},function(e,t,n){"use strict";var r=n(4),o=n(23),a=n(12),i=n(0),u=n(19),l=n(43).KEY,s=n(6),c=n(71),f=n(61),d=n(51),p=n(10),h=n(147),g=n(103),y=n(229),m=n(81),v=n(3),b=n(7),x=n(24),k=n(34),w=n(50),T=n(54),S=n(150),C=n(25),E=n(13),_=n(52),O=C.f,M=E.f,P=S.f,L=r.Symbol,B=r.JSON,I=B&&B.stringify,A=p("_hidden"),R=p("toPrimitive"),N={}.propertyIsEnumerable,j=c("symbol-registry"),F=c("symbols"),D=c("op-symbols"),U=Object.prototype,W="function"==typeof L,H=r.QObject,z=!H||!H.prototype||!H.prototype.findChild,G=a&&s(function(){return 7!=T(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=O(U,t);r&&delete U[t],M(e,t,n),r&&e!==U&&M(U,t,r)}:M,V=function(e){var t=F[e]=T(L.prototype);return t._k=e,t},q=W&&"symbol"==typeof L.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof L},K=function(e,t,n){return e===U&&K(D,t,n),v(e),t=k(t,!0),v(n),o(F,t)?(n.enumerable?(o(e,A)&&e[A][t]&&(e[A][t]=!1),n=T(n,{enumerable:w(0,!1)})):(o(e,A)||M(e,A,w(1,{})),e[A][t]=!0),G(e,t,n)):M(e,t,n)},Y=function(e,t){v(e);for(var n,r=y(t=x(t)),o=0,a=r.length;a>o;)K(e,n=r[o++],t[n]);return e},$=function(e){var t=N.call(this,e=k(e,!0));return!(this===U&&o(F,e)&&!o(D,e))&&(!(t||!o(this,e)||!o(F,e)||o(this,A)&&this[A][e])||t)},X=function(e,t){if(e=x(e),t=k(t,!0),e!==U||!o(F,t)||o(D,t)){var n=O(e,t);return!n||!o(F,t)||o(e,A)&&e[A][t]||(n.enumerable=!0),n}},Q=function(e){for(var t,n=P(x(e)),r=[],a=0;n.length>a;)o(F,t=n[a++])||t==A||t==l||r.push(t);return r},J=function(e){for(var t,n=e===U,r=P(n?D:x(e)),a=[],i=0;r.length>i;)!o(F,t=r[i++])||n&&!o(U,t)||a.push(F[t]);return a};W||(u((L=function(){if(this instanceof L)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===U&&t.call(D,n),o(this,A)&&o(this[A],e)&&(this[A][e]=!1),G(this,e,w(1,n))};return a&&z&&G(U,e,{configurable:!0,set:t}),V(e)}).prototype,"toString",function(){return this._k}),C.f=X,E.f=K,n(55).f=S.f=Q,n(73).f=$,n(80).f=J,a&&!n(42)&&u(U,"propertyIsEnumerable",$,!0),h.f=function(e){return V(p(e))}),i(i.G+i.W+i.F*!W,{Symbol:L});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=_(p.store),ne=0;te.length>ne;)g(te[ne++]);i(i.S+i.F*!W,"Symbol",{for:function(e){return o(j,e+="")?j[e]:j[e]=L(e)},keyFor:function(e){if(!q(e))throw TypeError(e+" is not a symbol!");for(var t in j)if(j[t]===e)return t},useSetter:function(){z=!0},useSimple:function(){z=!1}}),i(i.S+i.F*!W,"Object",{create:function(e,t){return void 0===t?T(e):Y(T(e),t)},defineProperty:K,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:Q,getOwnPropertySymbols:J}),B&&i(i.S+i.F*(!W||s(function(){var e=L();return"[null]"!=I([e])||"{}"!=I({a:e})||"{}"!=I(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!q(e))return m(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!q(t))return t}),r[1]=t,I.apply(B,r)}}),L.prototype[R]||n(18)(L.prototype,R,L.prototype.valueOf),f(L,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(71)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(52),o=n(80),a=n(73);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var i,u=n(e),l=a.f,s=0;u.length>s;)l.call(e,i=u[s++])&&t.push(i);return t}},function(e,t,n){var r=n(0);r(r.S,"Object",{create:n(54)})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(12),"Object",{defineProperty:n(13).f})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(12),"Object",{defineProperties:n(149)})},function(e,t,n){var r=n(24),o=n(25).f;n(36)("getOwnPropertyDescriptor",function(){return function(e,t){return o(r(e),t)}})},function(e,t,n){var r=n(14),o=n(26);n(36)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(14),o=n(52);n(36)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){n(36)("getOwnPropertyNames",function(){return n(150).f})},function(e,t,n){var r=n(7),o=n(43).onFreeze;n(36)("freeze",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(7),o=n(43).onFreeze;n(36)("seal",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(7),o=n(43).onFreeze;n(36)("preventExtensions",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(7);n(36)("isFrozen",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(7);n(36)("isSealed",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(7);n(36)("isExtensible",function(e){return function(t){return!!r(t)&&(!e||e(t))}})},function(e,t,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(151)})},function(e,t,n){var r=n(0);r(r.S,"Object",{is:n(152)})},function(e,t,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(107).set})},function(e,t,n){"use strict";var r=n(62),o={};o[n(10)("toStringTag")]="z",o+""!="[object z]"&&n(19)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){var r=n(0);r(r.P,"Function",{bind:n(153)})},function(e,t,n){var r=n(13).f,o=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in o||n(12)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(7),o=n(26),a=n(10)("hasInstance"),i=Function.prototype;a in i||n(13).f(i,a,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(0),o=n(155);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){var r=n(0),o=n(156);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){"use strict";var r=n(4),o=n(23),a=n(31),i=n(109),u=n(34),l=n(6),s=n(55).f,c=n(25).f,f=n(13).f,d=n(63).trim,p=r.Number,h=p,g=p.prototype,y="Number"==a(n(54)(g)),m="trim"in String.prototype,v=function(e){var t=u(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,a=(t=m?t.trim():d(t,3)).charCodeAt(0);if(43===a||45===a){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===a){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var i,l=t.slice(2),s=0,c=l.length;s<c;s++)if((i=l.charCodeAt(s))<48||i>o)return NaN;return parseInt(l,r)}}return+t};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof p&&(y?l(function(){g.valueOf.call(n)}):"Number"!=a(n))?i(new h(v(t)),n,p):v(t)};for(var b,x=n(12)?s(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),k=0;x.length>k;k++)o(h,b=x[k])&&!o(p,b)&&f(p,b,c(h,b));p.prototype=g,g.constructor=p,n(19)(r,"Number",p)}},function(e,t,n){"use strict";var r=n(0),o=n(32),a=n(157),i=n(110),u=1..toFixed,l=Math.floor,s=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*s[n],s[n]=r%1e7,r=l(r/1e7)},d=function(e){for(var t=6,n=0;--t>=0;)n+=s[t],s[t]=l(n/e),n=n%e*1e7},p=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==s[e]){var n=String(s[e]);t=""===t?n:t+i.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(6)(function(){u.call({})})),"Number",{toFixed:function(e){var t,n,r,u,l=a(this,c),s=o(e),g="",y="0";if(s<0||s>20)throw RangeError(c);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(g="-",l=-l),l>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(l*h(2,69,1))-69)<0?l*h(2,-t,1):l/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=s;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)d(1<<23),r-=23;d(1<<r),f(1,1),d(2),y=p()}else f(0,n),f(1<<-t,0),y=p()+i.call("0",s);return y=s>0?g+((u=y.length)<=s?"0."+i.call("0",s-u)+y:y.slice(0,u-s)+"."+y.slice(u-s)):g+y}})},function(e,t,n){"use strict";var r=n(0),o=n(6),a=n(157),i=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==i.call(1,void 0)})||!o(function(){i.call({})})),"Number",{toPrecision:function(e){var t=a(this,"Number#toPrecision: incorrect invocation!");return void 0===e?i.call(t):i.call(t,e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(0),o=n(4).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{isInteger:n(158)})},function(e,t,n){var r=n(0);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(0),o=n(158),a=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&a(e)<=9007199254740991}})},function(e,t,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(0),o=n(156);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(0),o=n(155);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(0),o=n(159),a=Math.sqrt,i=Math.acosh;r(r.S+r.F*!(i&&710==Math.floor(i(Number.MAX_VALUE))&&i(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+a(e-1)*a(e+1))}})},function(e,t,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(0),o=n(111);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(0),o=n(112);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(0);r(r.S,"Math",{fround:n(160)})},function(e,t,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,a=0,i=0,u=arguments.length,l=0;i<u;)l<(n=o(arguments[i++]))?(a=a*(r=l/n)*r+1,l=n):a+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*Math.sqrt(a)}})},function(e,t,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(6)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,a=65535&r;return 0|o*a+((65535&n>>>16)*a+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log1p:n(159)})},function(e,t,n){var r=n(0);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(0);r(r.S,"Math",{sign:n(111)})},function(e,t,n){var r=n(0),o=n(112),a=Math.exp;r(r.S+r.F*n(6)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(a(e-1)-a(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(0),o=n(112),a=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(a(e)+a(-e))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(0),o=n(53),a=String.fromCharCode,i=String.fromCodePoint;r(r.S+r.F*(!!i&&1!=i.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,i=0;r>i;){if(t=+arguments[i++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?a(t):a(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(0),o=n(24),a=n(11);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=a(t.length),r=arguments.length,i=[],u=0;n>u;)i.push(String(t[u++])),u<r&&i.push(String(arguments[u]));return i.join("")}})},function(e,t,n){"use strict";n(63)("trim",function(e){return function(){return e(this,3)}})},function(e,t,n){"use strict";var r=n(82)(!0);n(113)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";var r=n(0),o=n(82)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(0),o=n(11),a=n(115),i="".endsWith;r(r.P+r.F*n(116)("endsWith"),"String",{endsWith:function(e){var t=a(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),l=String(e);return i?i.call(t,l,u):t.slice(u-l.length,u)===l}})},function(e,t,n){"use strict";var r=n(0),o=n(115);r(r.P+r.F*n(116)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(0);r(r.P,"String",{repeat:n(110)})},function(e,t,n){"use strict";var r=n(0),o=n(11),a=n(115),i="".startsWith;r(r.P+r.F*n(116)("startsWith"),"String",{startsWith:function(e){var t=a(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return i?i.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(20)("anchor",function(e){return function(t){return e(this,"a","name",t)}})},function(e,t,n){"use strict";n(20)("big",function(e){return function(){return e(this,"big","","")}})},function(e,t,n){"use strict";n(20)("blink",function(e){return function(){return e(this,"blink","","")}})},function(e,t,n){"use strict";n(20)("bold",function(e){return function(){return e(this,"b","","")}})},function(e,t,n){"use strict";n(20)("fixed",function(e){return function(){return e(this,"tt","","")}})},function(e,t,n){"use strict";n(20)("fontcolor",function(e){return function(t){return e(this,"font","color",t)}})},function(e,t,n){"use strict";n(20)("fontsize",function(e){return function(t){return e(this,"font","size",t)}})},function(e,t,n){"use strict";n(20)("italics",function(e){return function(){return e(this,"i","","")}})},function(e,t,n){"use strict";n(20)("link",function(e){return function(t){return e(this,"a","href",t)}})},function(e,t,n){"use strict";n(20)("small",function(e){return function(){return e(this,"small","","")}})},function(e,t,n){"use strict";n(20)("strike",function(e){return function(){return e(this,"strike","","")}})},function(e,t,n){"use strict";n(20)("sub",function(e){return function(){return e(this,"sub","","")}})},function(e,t,n){"use strict";n(20)("sup",function(e){return function(){return e(this,"sup","","")}})},function(e,t,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(0),o=n(14),a=n(34);r(r.P+r.F*n(6)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(e){var t=o(this),n=a(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(0),o=n(306);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(6),o=Date.prototype.getTime,a=Date.prototype.toISOString,i=function(e){return e>9?e:"0"+e};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-5e13-1))})||!r(function(){a.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+i(e.getUTCMonth()+1)+"-"+i(e.getUTCDate())+"T"+i(e.getUTCHours())+":"+i(e.getUTCMinutes())+":"+i(e.getUTCSeconds())+"."+(n>99?n:"0"+i(n))+"Z"}:a},function(e,t,n){var r=Date.prototype,o=r.toString,a=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(19)(r,"toString",function(){var e=a.call(this);return e==e?o.call(this):"Invalid Date"})},function(e,t,n){var r=n(10)("toPrimitive"),o=Date.prototype;r in o||n(18)(o,r,n(309))},function(e,t,n){"use strict";var r=n(3),o=n(34);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(0);r(r.S,"Array",{isArray:n(81)})},function(e,t,n){"use strict";var r=n(30),o=n(0),a=n(14),i=n(161),u=n(117),l=n(11),s=n(118),c=n(119);o(o.S+o.F*!n(84)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,d=a(e),p="function"==typeof this?this:Array,h=arguments.length,g=h>1?arguments[1]:void 0,y=void 0!==g,m=0,v=c(d);if(y&&(g=r(g,h>2?arguments[2]:void 0,2)),null==v||p==Array&&u(v))for(n=new p(t=l(d.length));t>m;m++)s(n,m,y?g(d[m],m):d[m]);else for(f=v.call(d),n=new p;!(o=f.next()).done;m++)s(n,m,y?i(f,g,[o.value,m],!0):o.value);return n.length=m,n}})},function(e,t,n){"use strict";var r=n(0),o=n(118);r(r.S+r.F*n(6)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),o=n(24),a=[].join;r(r.P+r.F*(n(72)!=Object||!n(33)(a)),"Array",{join:function(e){return a.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(0),o=n(106),a=n(31),i=n(53),u=n(11),l=[].slice;r(r.P+r.F*n(6)(function(){o&&l.call(o)}),"Array",{slice:function(e,t){var n=u(this.length),r=a(this);if(t=void 0===t?n:t,"Array"==r)return l.call(this,e,t);for(var o=i(e,n),s=i(t,n),c=u(s-o),f=new Array(c),d=0;d<c;d++)f[d]="String"==r?this.charAt(o+d):this[o+d];return f}})},function(e,t,n){"use strict";var r=n(0),o=n(15),a=n(14),i=n(6),u=[].sort,l=[1,2,3];r(r.P+r.F*(i(function(){l.sort(void 0)})||!i(function(){l.sort(null)})||!n(33)(u)),"Array",{sort:function(e){return void 0===e?u.call(a(this)):u.call(a(this),o(e))}})},function(e,t,n){"use strict";var r=n(0),o=n(37)(0),a=n(33)([].forEach,!0);r(r.P+r.F*!a,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(7),o=n(81),a=n(10)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[a])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(0),o=n(37)(1);r(r.P+r.F*!n(33)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(37)(2);r(r.P+r.F*!n(33)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(37)(3);r(r.P+r.F*!n(33)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(37)(4);r(r.P+r.F*!n(33)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(162);r(r.P+r.F*!n(33)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(0),o=n(162);r(r.P+r.F*!n(33)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(0),o=n(79)(!1),a=[].indexOf,i=!!a&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(i||!n(33)(a)),"Array",{indexOf:function(e){return i?a.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(24),a=n(32),i=n(11),u=[].lastIndexOf,l=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(l||!n(33)(u)),"Array",{lastIndexOf:function(e){if(l)return u.apply(this,arguments)||0;var t=o(this),n=i(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,a(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(0);r(r.P,"Array",{copyWithin:n(163)}),n(44)("copyWithin")},function(e,t,n){var r=n(0);r(r.P,"Array",{fill:n(121)}),n(44)("fill")},function(e,t,n){"use strict";var r=n(0),o=n(37)(5),a=!0;"find"in[]&&Array(1).find(function(){a=!1}),r(r.P+r.F*a,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(44)("find")},function(e,t,n){"use strict";var r=n(0),o=n(37)(6),a="findIndex",i=!0;a in[]&&Array(1)[a](function(){i=!1}),r(r.P+r.F*i,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(44)(a)},function(e,t,n){n(56)("Array")},function(e,t,n){var r=n(4),o=n(109),a=n(13).f,i=n(55).f,u=n(83),l=n(74),s=r.RegExp,c=s,f=s.prototype,d=/a/g,p=/a/g,h=new s(d)!==d;if(n(12)&&(!h||n(6)(function(){return p[n(10)("match")]=!1,s(d)!=d||s(p)==p||"/a/i"!=s(d,"i")}))){s=function(e,t){var n=this instanceof s,r=u(e),a=void 0===t;return!n&&r&&e.constructor===s&&a?e:o(h?new c(r&&!a?e.source:e,t):c((r=e instanceof s)?e.source:e,r&&a?l.call(e):t),n?this:f,s)};for(var g=function(e){e in s||a(s,e,{configurable:!0,get:function(){return c[e]},set:function(t){c[e]=t}})},y=i(c),m=0;y.length>m;)g(y[m++]);f.constructor=s,s.prototype=f,n(19)(r,"RegExp",s)}n(56)("RegExp")},function(e,t,n){"use strict";n(166);var r=n(3),o=n(74),a=n(12),i=/./.toString,u=function(e){n(19)(RegExp.prototype,"toString",e,!0)};n(6)(function(){return"/a/b"!=i.call({source:"a",flags:"b"})})?u(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!a&&e instanceof RegExp?o.call(e):void 0)}):"toString"!=i.name&&u(function(){return i.call(this)})},function(e,t,n){"use strict";var r=n(3),o=n(11),a=n(124),i=n(85);n(86)("match",1,function(e,t,n,u){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=u(n,e,this);if(t.done)return t.value;var l=r(e),s=String(this);if(!l.global)return i(l,s);var c=l.unicode;l.lastIndex=0;for(var f,d=[],p=0;null!==(f=i(l,s));){var h=String(f[0]);d[p]=h,""===h&&(l.lastIndex=a(s,o(l.lastIndex),c)),p++}return 0===p?null:d}]})},function(e,t,n){"use strict";var r=n(3),o=n(14),a=n(11),i=n(32),u=n(124),l=n(85),s=Math.max,c=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(86)("replace",2,function(e,t,n,h){return[function(r,o){var a=e(this),i=null==r?void 0:r[t];return void 0!==i?i.call(r,a,o):n.call(String(a),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),d=String(this),p="function"==typeof t;p||(t=String(t));var y=f.global;if(y){var m=f.unicode;f.lastIndex=0}for(var v=[];;){var b=l(f,d);if(null===b)break;if(v.push(b),!y)break;""===String(b[0])&&(f.lastIndex=u(d,a(f.lastIndex),m))}for(var x,k="",w=0,T=0;T<v.length;T++){b=v[T];for(var S=String(b[0]),C=s(c(i(b.index),d.length),0),E=[],_=1;_<b.length;_++)E.push(void 0===(x=b[_])?x:String(x));var O=b.groups;if(p){var M=[S].concat(E,C,d);void 0!==O&&M.push(O);var P=String(t.apply(void 0,M))}else P=g(S,d,C,E,O,t);C>=w&&(k+=d.slice(w,C)+P,w=C+S.length)}return k+d.slice(w)}];function g(e,t,r,a,i,u){var l=r+e.length,s=a.length,c=p;return void 0!==i&&(i=o(i),c=d),n.call(u,c,function(n,o){var u;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(l);case"<":u=i[o.slice(1,-1)];break;default:var c=+o;if(0===c)return n;if(c>s){var d=f(c/10);return 0===d?n:d<=s?void 0===a[d-1]?o.charAt(1):a[d-1]+o.charAt(1):n}u=a[c-1]}return void 0===u?"":u})}})},function(e,t,n){"use strict";var r=n(3),o=n(152),a=n(85);n(86)("search",1,function(e,t,n,i){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=i(n,e,this);if(t.done)return t.value;var u=r(e),l=String(this),s=u.lastIndex;o(s,0)||(u.lastIndex=0);var c=a(u,l);return o(u.lastIndex,s)||(u.lastIndex=s),null===c?-1:c.index}]})},function(e,t,n){"use strict";var r=n(83),o=n(3),a=n(75),i=n(124),u=n(11),l=n(85),s=n(123),c=n(6),f=Math.min,d=[].push,p=!c(function(){RegExp(4294967295,"y")});n(86)("split",2,function(e,t,n,c){var h;return h="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var a,i,u,l=[],c=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,p=void 0===t?4294967295:t>>>0,h=new RegExp(e.source,c+"g");(a=s.call(h,o))&&!((i=h.lastIndex)>f&&(l.push(o.slice(f,a.index)),a.length>1&&a.index<o.length&&d.apply(l,a.slice(1)),u=a[0].length,f=i,l.length>=p));)h.lastIndex===a.index&&h.lastIndex++;return f===o.length?!u&&h.test("")||l.push(""):l.push(o.slice(f)),l.length>p?l.slice(0,p):l}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),a=null==n?void 0:n[t];return void 0!==a?a.call(n,o,r):h.call(String(o),n,r)},function(e,t){var r=c(h,e,this,t,h!==n);if(r.done)return r.value;var s=o(e),d=String(this),g=a(s,RegExp),y=s.unicode,m=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(p?"y":"g"),v=new g(p?s:"^(?:"+s.source+")",m),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===d.length)return null===l(v,d)?[d]:[];for(var x=0,k=0,w=[];k<d.length;){v.lastIndex=p?k:0;var T,S=l(v,p?d:d.slice(k));if(null===S||(T=f(u(v.lastIndex+(p?0:k)),d.length))===x)k=i(d,k,y);else{if(w.push(d.slice(x,k)),w.length===b)return w;for(var C=1;C<=S.length-1;C++)if(w.push(S[C]),w.length===b)return w;k=x=T}}return w.push(d.slice(x)),w}]})},function(e,t,n){"use strict";var r,o,a,i,u=n(42),l=n(4),s=n(30),c=n(62),f=n(0),d=n(7),p=n(15),h=n(57),g=n(58),y=n(75),m=n(125).set,v=n(126)(),b=n(127),x=n(167),k=n(87),w=n(168),T=l.TypeError,S=l.process,C=S&&S.versions,E=C&&C.v8||"",_=l.Promise,O="process"==c(S),M=function(){},P=o=b.f,L=!!function(){try{var e=_.resolve(1),t=(e.constructor={})[n(10)("species")]=function(e){e(M,M)};return(O||"function"==typeof PromiseRejectionEvent)&&e.then(M)instanceof t&&0!==E.indexOf("6.6")&&-1===k.indexOf("Chrome/66")}catch(e){}}(),B=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;v(function(){for(var r=e._v,o=1==e._s,a=0,i=function(t){var n,a,i,u=o?t.ok:t.fail,l=t.resolve,s=t.reject,c=t.domain;try{u?(o||(2==e._h&&N(e),e._h=1),!0===u?n=r:(c&&c.enter(),n=u(r),c&&(c.exit(),i=!0)),n===t.promise?s(T("Promise-chain cycle")):(a=B(n))?a.call(n,l,s):l(n)):s(r)}catch(e){c&&!i&&c.exit(),s(e)}};n.length>a;)i(n[a++]);e._c=[],e._n=!1,t&&!e._h&&A(e)})}},A=function(e){m.call(l,function(){var t,n,r,o=e._v,a=R(e);if(a&&(t=x(function(){O?S.emit("unhandledRejection",o,e):(n=l.onunhandledrejection)?n({promise:e,reason:o}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=O||R(e)?2:1),e._a=void 0,a&&t.e)throw t.v})},R=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(e){m.call(l,function(){var t;O?S.emit("rejectionHandled",e):(t=l.onrejectionhandled)&&t({promise:e,reason:e._v})})},j=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},F=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw T("Promise can't be resolved itself");(t=B(e))?v(function(){var r={_w:n,_d:!1};try{t.call(e,s(F,r,1),s(j,r,1))}catch(e){j.call(r,e)}}):(n._v=e,n._s=1,I(n,!1))}catch(e){j.call({_w:n,_d:!1},e)}}};L||(_=function(e){h(this,_,"Promise","_h"),p(e),r.call(this);try{e(s(F,this,1),s(j,this,1))}catch(e){j.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(59)(_.prototype,{then:function(e,t){var n=P(y(this,_));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=O?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new r;this.promise=e,this.resolve=s(F,e,1),this.reject=s(j,e,1)},b.f=P=function(e){return e===_||e===i?new a(e):o(e)}),f(f.G+f.W+f.F*!L,{Promise:_}),n(61)(_,"Promise"),n(56)("Promise"),i=n(29).Promise,f(f.S+f.F*!L,"Promise",{reject:function(e){var t=P(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!L),"Promise",{resolve:function(e){return w(u&&this===i?_:this,e)}}),f(f.S+f.F*!(L&&n(84)(function(e){_.all(e).catch(M)})),"Promise",{all:function(e){var t=this,n=P(t),r=n.resolve,o=n.reject,a=x(function(){var n=[],a=0,i=1;g(e,!1,function(e){var u=a++,l=!1;n.push(void 0),i++,t.resolve(e).then(function(e){l||(l=!0,n[u]=e,--i||r(n))},o)}),--i||r(n)});return a.e&&o(a.v),n.promise},race:function(e){var t=this,n=P(t),r=n.reject,o=x(function(){g(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t,n){"use strict";var r=n(173),o=n(60);n(88)("WeakSet",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(0),o=n(89),a=n(128),i=n(3),u=n(53),l=n(11),s=n(7),c=n(4).ArrayBuffer,f=n(75),d=a.ArrayBuffer,p=a.DataView,h=o.ABV&&c.isView,g=d.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(c!==d),{ArrayBuffer:d}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||s(e)&&y in e}}),r(r.P+r.U+r.F*n(6)(function(){return!new d(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(e,t){if(void 0!==g&&void 0===t)return g.call(i(this),e);for(var n=i(this).byteLength,r=u(e,n),o=u(void 0===t?n:t,n),a=new(f(this,d))(l(o-r)),s=new p(this),c=new p(a),h=0;r<o;)c.setUint8(h++,s.getUint8(r++));return a}}),n(56)("ArrayBuffer")},function(e,t,n){var r=n(0);r(r.G+r.W+r.F*!n(89).ABV,{DataView:n(128).DataView})},function(e,t,n){n(39)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(39)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(39)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){var r=n(0),o=n(15),a=n(3),i=(n(4).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(6)(function(){i(function(){})}),"Reflect",{apply:function(e,t,n){var r=o(e),l=a(n);return i?i(r,t,l):u.call(r,t,l)}})},function(e,t,n){var r=n(0),o=n(54),a=n(15),i=n(3),u=n(7),l=n(6),s=n(153),c=(n(4).Reflect||{}).construct,f=l(function(){function e(){}return!(c(function(){},[],e)instanceof e)}),d=!l(function(){c(function(){})});r(r.S+r.F*(f||d),"Reflect",{construct:function(e,t){a(e),i(t);var n=arguments.length<3?e:a(arguments[2]);if(d&&!f)return c(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(s.apply(e,r))}var l=n.prototype,p=o(u(l)?l:Object.prototype),h=Function.apply.call(e,p,t);return u(h)?h:p}})},function(e,t,n){var r=n(13),o=n(0),a=n(3),i=n(34);o(o.S+o.F*n(6)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(e,t,n){a(e),t=i(t,!0),a(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),o=n(25).f,a=n(3);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(a(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(0),o=n(3),a=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(114)(a,"Object",function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}}),r(r.S,"Reflect",{enumerate:function(e){return new a(e)}})},function(e,t,n){var r=n(25),o=n(26),a=n(23),i=n(0),u=n(7),l=n(3);i(i.S,"Reflect",{get:function e(t,n){var i,s,c=arguments.length<3?t:arguments[2];return l(t)===c?t[n]:(i=r.f(t,n))?a(i,"value")?i.value:void 0!==i.get?i.get.call(c):void 0:u(s=o(t))?e(s,n,c):void 0}})},function(e,t,n){var r=n(25),o=n(0),a=n(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(a(e),t)}})},function(e,t,n){var r=n(0),o=n(26),a=n(3);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(a(e))}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(0),o=n(3),a=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!a||a(e)}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(175)})},function(e,t,n){var r=n(0),o=n(3),a=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return a&&a(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(13),o=n(25),a=n(26),i=n(23),u=n(0),l=n(50),s=n(3),c=n(7);u(u.S,"Reflect",{set:function e(t,n,u){var f,d,p=arguments.length<4?t:arguments[3],h=o.f(s(t),n);if(!h){if(c(d=a(t)))return e(d,n,u,p);h=l(0)}if(i(h,"value")){if(!1===h.writable||!c(p))return!1;if(f=o.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(p,n,f)}else r.f(p,n,l(0,u));return!0}return void 0!==h.set&&(h.set.call(p,u),!0)}})},function(e,t,n){var r=n(0),o=n(107);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){"use strict";var r=n(0),o=n(79)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(44)("includes")},function(e,t,n){"use strict";var r=n(0),o=n(176),a=n(14),i=n(11),u=n(15),l=n(120);r(r.P,"Array",{flatMap:function(e){var t,n,r=a(this);return u(e),t=i(r.length),n=l(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(44)("flatMap")},function(e,t,n){"use strict";var r=n(0),o=n(176),a=n(14),i=n(11),u=n(32),l=n(120);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=a(this),n=i(t.length),r=l(t,0);return o(r,t,t,n,0,void 0===e?1:u(e)),r}}),n(44)("flatten")},function(e,t,n){"use strict";var r=n(0),o=n(82)(!0);r(r.P,"String",{at:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(0),o=n(177),a=n(87);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(a),"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){"use strict";var r=n(0),o=n(177),a=n(87);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(a),"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){"use strict";n(63)("trimLeft",function(e){return function(){return e(this,1)}},"trimStart")},function(e,t,n){"use strict";n(63)("trimRight",function(e){return function(){return e(this,2)}},"trimEnd")},function(e,t,n){"use strict";var r=n(0),o=n(35),a=n(11),i=n(83),u=n(74),l=RegExp.prototype,s=function(e,t){this._r=e,this._s=t};n(114)(s,"RegExp String",function(){var e=this._r.exec(this._s);return{value:e,done:null===e}}),r(r.P,"String",{matchAll:function(e){if(o(this),!i(e))throw TypeError(e+" is not a regexp!");var t=String(this),n="flags"in l?String(e.flags):u.call(e),r=new RegExp(e.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=a(e.lastIndex),new s(r,t)}})},function(e,t,n){n(103)("asyncIterator")},function(e,t,n){n(103)("observable")},function(e,t,n){var r=n(0),o=n(175),a=n(24),i=n(25),u=n(118);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=a(e),l=i.f,s=o(r),c={},f=0;s.length>f;)void 0!==(n=l(r,t=s[f++]))&&u(c,t,n);return c}})},function(e,t,n){var r=n(0),o=n(178)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){var r=n(0),o=n(178)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){"use strict";var r=n(0),o=n(14),a=n(15),i=n(13);n(12)&&r(r.P+n(90),"Object",{__defineGetter__:function(e,t){i.f(o(this),e,{get:a(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),o=n(14),a=n(15),i=n(13);n(12)&&r(r.P+n(90),"Object",{__defineSetter__:function(e,t){i.f(o(this),e,{set:a(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),o=n(14),a=n(34),i=n(26),u=n(25).f;n(12)&&r(r.P+n(90),"Object",{__lookupGetter__:function(e){var t,n=o(this),r=a(e,!0);do{if(t=u(n,r))return t.get}while(n=i(n))}})},function(e,t,n){"use strict";var r=n(0),o=n(14),a=n(34),i=n(26),u=n(25).f;n(12)&&r(r.P+n(90),"Object",{__lookupSetter__:function(e){var t,n=o(this),r=a(e,!0);do{if(t=u(n,r))return t.set}while(n=i(n))}})},function(e,t,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(179)("Map")})},function(e,t,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(179)("Set")})},function(e,t,n){n(91)("Map")},function(e,t,n){n(91)("Set")},function(e,t,n){n(91)("WeakMap")},function(e,t,n){n(91)("WeakSet")},function(e,t,n){n(92)("Map")},function(e,t,n){n(92)("Set")},function(e,t,n){n(92)("WeakMap")},function(e,t,n){n(92)("WeakSet")},function(e,t,n){var r=n(0);r(r.G,{global:n(4)})},function(e,t,n){var r=n(0);r(r.S,"System",{global:n(4)})},function(e,t,n){var r=n(0),o=n(31);r(r.S,"Error",{isError:function(e){return"Error"===o(e)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{clamp:function(e,t,n){return Math.min(n,Math.max(t,e))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(e,t,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(e){return e*o}})},function(e,t,n){var r=n(0),o=n(181),a=n(160);r(r.S,"Math",{fscale:function(e,t,n,r,i){return a(o(e,t,n,r,i))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{iaddh:function(e,t,n,r){var o=e>>>0,a=n>>>0;return(t>>>0)+(r>>>0)+((o&a|(o|a)&~(o+a>>>0))>>>31)|0}})},function(e,t,n){var r=n(0);r(r.S,"Math",{isubh:function(e,t,n,r){var o=e>>>0,a=n>>>0;return(t>>>0)-(r>>>0)-((~o&a|~(o^a)&o-a>>>0)>>>31)|0}})},function(e,t,n){var r=n(0);r(r.S,"Math",{imulh:function(e,t){var n=+e,r=+t,o=65535&n,a=65535&r,i=n>>16,u=r>>16,l=(i*a>>>0)+(o*a>>>16);return i*u+(l>>16)+((o*u>>>0)+(65535&l)>>16)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(e,t,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(e){return e*o}})},function(e,t,n){var r=n(0);r(r.S,"Math",{scale:n(181)})},function(e,t,n){var r=n(0);r(r.S,"Math",{umulh:function(e,t){var n=+e,r=+t,o=65535&n,a=65535&r,i=n>>>16,u=r>>>16,l=(i*a>>>0)+(o*a>>>16);return i*u+(l>>>16)+((o*u>>>0)+(65535&l)>>>16)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{signbit:function(e){return(e=+e)!=e?e:0==e?1/e==1/0:e>0}})},function(e,t,n){"use strict";var r=n(0),o=n(29),a=n(4),i=n(75),u=n(168);r(r.P+r.R,"Promise",{finally:function(e){var t=i(this,o.Promise||a.Promise),n="function"==typeof e;return this.then(n?function(n){return u(t,e()).then(function(){return n})}:e,n?function(n){return u(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var r=n(0),o=n(127),a=n(167);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=a(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){var r=n(40),o=n(3),a=r.key,i=r.set;r.exp({defineMetadata:function(e,t,n,r){i(e,t,o(n),a(r))}})},function(e,t,n){var r=n(40),o=n(3),a=r.key,i=r.map,u=r.store;r.exp({deleteMetadata:function(e,t){var n=arguments.length<3?void 0:a(arguments[2]),r=i(o(t),n,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var l=u.get(t);return l.delete(n),!!l.size||u.delete(t)}})},function(e,t,n){var r=n(40),o=n(3),a=n(26),i=r.has,u=r.get,l=r.key,s=function(e,t,n){if(i(e,t,n))return u(e,t,n);var r=a(t);return null!==r?s(e,r,n):void 0};r.exp({getMetadata:function(e,t){return s(e,o(t),arguments.length<3?void 0:l(arguments[2]))}})},function(e,t,n){var r=n(171),o=n(180),a=n(40),i=n(3),u=n(26),l=a.keys,s=a.key,c=function(e,t){var n=l(e,t),a=u(e);if(null===a)return n;var i=c(a,t);return i.length?n.length?o(new r(n.concat(i))):i:n};a.exp({getMetadataKeys:function(e){return c(i(e),arguments.length<2?void 0:s(arguments[1]))}})},function(e,t,n){var r=n(40),o=n(3),a=r.get,i=r.key;r.exp({getOwnMetadata:function(e,t){return a(e,o(t),arguments.length<3?void 0:i(arguments[2]))}})},function(e,t,n){var r=n(40),o=n(3),a=r.keys,i=r.key;r.exp({getOwnMetadataKeys:function(e){return a(o(e),arguments.length<2?void 0:i(arguments[1]))}})},function(e,t,n){var r=n(40),o=n(3),a=n(26),i=r.has,u=r.key,l=function(e,t,n){if(i(e,t,n))return!0;var r=a(t);return null!==r&&l(e,r,n)};r.exp({hasMetadata:function(e,t){return l(e,o(t),arguments.length<3?void 0:u(arguments[2]))}})},function(e,t,n){var r=n(40),o=n(3),a=r.has,i=r.key;r.exp({hasOwnMetadata:function(e,t){return a(e,o(t),arguments.length<3?void 0:i(arguments[2]))}})},function(e,t,n){var r=n(40),o=n(3),a=n(15),i=r.key,u=r.set;r.exp({metadata:function(e,t){return function(n,r){u(e,t,(void 0!==r?o:a)(n),i(r))}}})},function(e,t,n){var r=n(0),o=n(126)(),a=n(4).process,i="process"==n(31)(a);r(r.G,{asap:function(e){var t=i&&a.domain;o(t?t.bind(e):e)}})},function(e,t,n){"use strict";var r=n(0),o=n(4),a=n(29),i=n(126)(),u=n(10)("observable"),l=n(15),s=n(3),c=n(57),f=n(59),d=n(18),p=n(58),h=p.RETURN,g=function(e){return null==e?void 0:l(e)},y=function(e){var t=e._c;t&&(e._c=void 0,t())},m=function(e){return void 0===e._o},v=function(e){m(e)||(e._o=void 0,y(e))},b=function(e,t){s(e),this._c=void 0,this._o=e,e=new x(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:l(n),this._c=n)}catch(t){return void e.error(t)}m(this)&&y(this)};b.prototype=f({},{unsubscribe:function(){v(this)}});var x=function(e){this._s=e};x.prototype=f({},{next:function(e){var t=this._s;if(!m(t)){var n=t._o;try{var r=g(n.next);if(r)return r.call(n,e)}catch(e){try{v(t)}finally{throw e}}}},error:function(e){var t=this._s;if(m(t))throw e;var n=t._o;t._o=void 0;try{var r=g(n.error);if(!r)throw e;e=r.call(n,e)}catch(e){try{y(t)}finally{throw e}}return y(t),e},complete:function(e){var t=this._s;if(!m(t)){var n=t._o;t._o=void 0;try{var r=g(n.complete);e=r?r.call(n,e):void 0}catch(e){try{y(t)}finally{throw e}}return y(t),e}}});var k=function(e){c(this,k,"Observable","_f")._f=l(e)};f(k.prototype,{subscribe:function(e){return new b(e,this._f)},forEach:function(e){var t=this;return new(a.Promise||o.Promise)(function(n,r){l(e);var o=t.subscribe({next:function(t){try{return e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n})})}}),f(k,{from:function(e){var t="function"==typeof this?this:k,n=g(s(e)[u]);if(n){var r=s(n.call(e));return r.constructor===t?r:new t(function(e){return r.subscribe(e)})}return new t(function(t){var n=!1;return i(function(){if(!n){try{if(p(e,!1,function(e){if(t.next(e),n)return h})===h)return}catch(e){if(n)throw e;return void t.error(e)}t.complete()}}),function(){n=!0}})},of:function(){for(var e=0,t=arguments.length,n=new Array(t);e<t;)n[e]=arguments[e++];return new("function"==typeof this?this:k)(function(e){var t=!1;return i(function(){if(!t){for(var r=0;r<n.length;++r)if(e.next(n[r]),t)return;e.complete()}}),function(){t=!0}})}}),d(k.prototype,u,function(){return this}),r(r.G,{Observable:k}),n(56)("Observable")},function(e,t,n){var r=n(4),o=n(0),a=n(87),i=[].slice,u=/MSIE .\./.test(a),l=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&i.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*u,{setTimeout:l(r.setTimeout),setInterval:l(r.setInterval)})},function(e,t,n){var r=n(0),o=n(125);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){for(var r=n(122),o=n(52),a=n(19),i=n(4),u=n(18),l=n(64),s=n(10),c=s("iterator"),f=s("toStringTag"),d=l.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),g=0;g<h.length;g++){var y,m=h[g],v=p[m],b=i[m],x=b&&b.prototype;if(x&&(x[c]||u(x,c,d),x[f]||u(x,f,m),l[m]=d,v))for(y in r)x[y]||a(x,y,r[y],!0)}},function(e,t,n){(function(t){!function(t){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag",s="object"==typeof e,c=t.regeneratorRuntime;if(c)s&&(e.exports=c);else{(c=t.regeneratorRuntime=s?e.exports:{}).wrap=x;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",g={},y={};y[i]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(L([])));v&&v!==r&&o.call(v,i)&&(y=v);var b=S.prototype=w.prototype=Object.create(y);T.prototype=b.constructor=S,S.constructor=T,S[l]=T.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===T||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,S):(e.__proto__=S,l in e||(e[l]="GeneratorFunction")),e.prototype=Object.create(b),e},c.awrap=function(e){return{__await:e}},C(E.prototype),E.prototype[u]=function(){return this},c.AsyncIterator=E,c.async=function(e,t,n,r){var o=new E(x(e,t,n,r));return c.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},C(b),b[l]="Generator",b[i]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=L,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(M),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return u.type="throw",u.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=o.call(i,"catchLoc"),s=o.call(i,"finallyLoc");if(l&&s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),M(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;M(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:L(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),g}}}function x(e,t,n,r){var o=t&&t.prototype instanceof w?t:w,a=Object.create(o.prototype),i=new P(r||[]);return a._invoke=function(e,t,n){var r=f;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw a;return B()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var u=_(i,n);if(u){if(u===g)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=k(e,t,n);if("normal"===l.type){if(r=n.done?h:d,l.arg===g)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(e,n,i),a}function k(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function w(){}function T(){}function S(){}function C(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){function n(t,r,a,i){var u=k(e[t],e,r);if("throw"!==u.type){var l=u.arg,s=l.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(e){n("next",e,a,i)},function(e){n("throw",e,a,i)}):Promise.resolve(s).then(function(e){l.value=e,a(l)},i)}i(u.arg)}var r;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(e,t){function o(){return new Promise(function(r,o){n(e,t,r,o)})}return r=r?r.then(o,o):o()}}function _(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,_(e,t),"throw"===t.method))return g;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var o=k(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,g;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,g):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,g)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function M(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function L(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return a.next=a}}return{next:B}}function B(){return{value:n,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(49))},function(e,t,n){n(425),e.exports=n(29).RegExp.escape},function(e,t,n){var r=n(0),o=n(426)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(e){return o(e)}})},function(e,t){e.exports=function(e,t){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(t).replace(e,n)}}},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(182),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,g=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,a,i,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,a,i,u],s=0;(e=Error(t.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function k(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||b}function w(){}function T(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||b}k.prototype.isReactComponent={},k.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},k.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=k.prototype;var S=T.prototype=new w;S.constructor=T,r(S,k.prototype),S.isPureReactComponent=!0;var C={current:null},E={current:null},_=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function M(e,t,n){var r=void 0,o={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:a,type:e,key:i,ref:u,props:o,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var L=/\/+/g,B=[];function I(e,t,n,r){if(B.length){var o=B.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>B.length&&B.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case i:l=!0}}if(l)return r(o,t,""===n?"."+N(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+N(u=t[s],s);l+=e(u,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=m&&t[m]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(u=t.next()).done;)l+=e(u=u.value,c=n+N(u,s++),r,o);else"object"===u&&v("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,function(e){return e}):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(L,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(L,"$&/")+"/"),R(e,F,t=I(t,a,r,o)),A(t)}function U(){var e=C.current;return null===e&&v("307"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,j,t=I(null,null,t,n)),A(t)},count:function(e){return R(e,function(){return null},null)},toArray:function(e){var t=[];return D(e,t,null,function(e){return e}),t},only:function(e){return P(e)||v("143"),e}},createRef:function(){return{current:null}},Component:k,PureComponent:T,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:g,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:M,cloneElement:function(e,t,n){null==e&&v("267",e);var o=void 0,i=r({},e.props),u=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=E.current),void 0!==t.key&&(u=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)_.call(t,o)&&!O.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:a,type:e.type,key:u,ref:l,props:i,_owner:s}},createFactory:function(e){var t=M.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.8.1",unstable_ConcurrentMode:d,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentOwner:E,assign:r}},H={default:W},z=H&&W||H;e.exports=z.default||z},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2),o=n(182),a=n(429);function i(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,a,i,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,a,i,u],s=0;(e=Error(t.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||i("227");var u=!1,l=null,s=!1,c=null,f={onError:function(e){u=!0,l=e}};function d(e,t,n,r,o,a,i,s,c){u=!1,l=null,function(e,t,n,r,o,a,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function g(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||i("96",e),!m[n])for(var r in t.extractEvents||i("97",e),m[n]=t,n=t.eventTypes){var o=void 0,a=n[r],u=t,l=r;v.hasOwnProperty(l)&&i("99",l),v[l]=a;var s=a.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&y(s[o],u,l);o=!0}else a.registrationName?(y(a.registrationName,u,l),o=!0):o=!1;o||i("98",r,e)}}}function y(e,t,n){b[e]&&i("100",e),b[e]=t,x[e]=t.eventTypes[n].dependencies}var m=[],v={},b={},x={},k=null,w=null,T=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,a,f,p,h){if(d.apply(this,arguments),u){if(u){var g=l;u=!1,l=null}else i("198"),g=void 0;s||(s=!0,c=g)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&i("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function E(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var _=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var M={injectEventPluginOrder:function(e){p&&i("101"),p=Array.prototype.slice.call(e),g()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&i("102",t),h[t]=r,n=!0)}n&&g()}};function P(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&i("231",t,typeof n),n)}function L(e){if(null!==e&&(_=C(_,e)),e=_,_=null,e&&(E(e,O),_&&i("95"),s))throw e=c,s=!1,c=null,e}var B=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+B,A="__reactEventHandlers$"+B;function R(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[I]).tag||6===e.tag?e:null}function N(e){return!(e=e[I])||5!==e.tag&&6!==e.tag?null:e}function j(e){if(5===e.tag||6===e.tag)return e.stateNode;i("33")}function F(e){return e[A]||null}function D(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function U(e,t,n){(t=P(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=D(t);for(t=n.length;0<t--;)U(n[t],"captured",e);for(t=0;t<n.length;t++)U(n[t],"bubbled",e)}}function H(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=P(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function z(e){e&&e.dispatchConfig.registrationName&&H(e._targetInst,null,e)}function G(e){E(e,W)}var V=!("undefined"==typeof window||!window.document||!window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var K={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},Y={},$={};function X(e){if(Y[e])return Y[e];if(!K[e])return e;var t,n=K[e];for(t in n)if(n.hasOwnProperty(t)&&t in $)return Y[e]=n[t];return e}V&&($=document.createElement("div").style,"AnimationEvent"in window||(delete K.animationend.animation,delete K.animationiteration.animation,delete K.animationstart.animation),"TransitionEvent"in window||delete K.transitionend.transition);var Q=X("animationend"),J=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ae(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ie(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ie:ue,this.isPropagationStopped=ue,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||i("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var de=le.extend({data:null}),pe=le.extend({data:null}),he=[9,13,27,32],ge=V&&"CompositionEvent"in window,ye=null;V&&"documentMode"in document&&(ye=document.documentMode);var me=V&&"TextEvent"in window&&!ye,ve=V&&(!ge||ye&&8<ye&&11>=ye),be=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},ke=!1;function we(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Te(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(ge)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else Se?we(e,n)&&(o=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(ve&&"ko"!==n.locale&&(Se||o!==xe.compositionStart?o===xe.compositionEnd&&Se&&(a=ae()):(re="value"in(ne=r)?ne.value:ne.textContent,Se=!0)),o=de.getPooled(o,t,n,r),a?o.data=a:null!==(a=Te(n))&&(o.data=a),G(o),a=o):a=null,(e=me?function(e,t){switch(e){case"compositionend":return Te(t);case"keypress":return 32!==t.which?null:(ke=!0,be);case"textInput":return(e=t.data)===be&&ke?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!ge&&we(e,t)?(e=ae(),oe=re=ne=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ve&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(xe.beforeInput,t,n,r)).data=e,G(t)):t=null,null===a?t:null===t?a:[a,t]}},Ee=null,_e=null,Oe=null;function Me(e){if(e=w(e)){"function"!=typeof Ee&&i("280");var t=k(e.stateNode);Ee(e.stateNode,e.type,t)}}function Pe(e){_e?Oe?Oe.push(e):Oe=[e]:_e=e}function Le(){if(_e){var e=_e,t=Oe;if(Oe=_e=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function Be(e,t){return e(t)}function Ie(e,t,n){return e(t,n)}function Ae(){}var Re=!1;function Ne(e,t){if(Re)return e(t);Re=!0;try{return Be(e,t)}finally{Re=!1,(null!==_e||null!==Oe)&&(Ae(),Le())}}var je={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!je[e.type]:"textarea"===t}function De(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ue(e){if(!V)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ze(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ge=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ge.hasOwnProperty("ReactCurrentDispatcher")||(Ge.ReactCurrentDispatcher={current:null});var Ve=/^(.*)[\\\/]/,qe="function"==typeof Symbol&&Symbol.for,Ke=qe?Symbol.for("react.element"):60103,Ye=qe?Symbol.for("react.portal"):60106,$e=qe?Symbol.for("react.fragment"):60107,Xe=qe?Symbol.for("react.strict_mode"):60108,Qe=qe?Symbol.for("react.profiler"):60114,Je=qe?Symbol.for("react.provider"):60109,Ze=qe?Symbol.for("react.context"):60110,et=qe?Symbol.for("react.concurrent_mode"):60111,tt=qe?Symbol.for("react.forward_ref"):60112,nt=qe?Symbol.for("react.suspense"):60113,rt=qe?Symbol.for("react.memo"):60115,ot=qe?Symbol.for("react.lazy"):60116,at="function"==typeof Symbol&&Symbol.iterator;function it(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=at&&e[at]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case $e:return"Fragment";case Ye:return"Portal";case Qe:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ut(e.type);n=null,r&&(n=ut(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(Ve,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var gt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(st.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function vt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=vt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function kt(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function wt(e,t){kt(e,t);var n=vt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,vt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gt,yt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new pt("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Et(e,t,n){return(e=le.getPooled(Ct.change,e,t,n)).type="change",Pe(n),G(e),e}var _t=null,Ot=null;function Mt(e){L(e)}function Pt(e){if(ze(j(e)))return e}function Lt(e,t){if("change"===e)return t}var Bt=!1;function It(){_t&&(_t.detachEvent("onpropertychange",At),Ot=_t=null)}function At(e){"value"===e.propertyName&&Pt(Ot)&&Ne(Mt,e=Et(Ot,e,De(e)))}function Rt(e,t,n){"focus"===e?(It(),Ot=n,(_t=t).attachEvent("onpropertychange",At)):"blur"===e&&It()}function Nt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Pt(Ot)}function jt(e,t){if("click"===e)return Pt(t)}function Ft(e,t){if("input"===e||"change"===e)return Pt(t)}V&&(Bt=Ue("input")&&(!document.documentMode||9<document.documentMode));var Dt={eventTypes:Ct,_isInputEventSupported:Bt,extractEvents:function(e,t,n,r){var o=t?j(t):window,a=void 0,i=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?a=Lt:Fe(o)?Bt?a=Ft:(a=Nt,i=Rt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=jt),a&&(a=a(e,t)))return Et(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&St(o,"number",o.value)}},Ut=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function zt(){return Ht}var Gt=0,Vt=0,qt=!1,Kt=!1,Yt=Ut.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:zt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Gt;return Gt=e.screenX,qt?"mousemove"===e.type?e.screenX-t:0:(qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Vt;return Vt=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),$t=Yt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?R(t):null):a=null,a===t)return null;var i=void 0,u=void 0,l=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(i=Yt,u=Xt.mouseLeave,l=Xt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=$t,u=Xt.pointerLeave,l=Xt.pointerEnter,s="pointer");var c=null==a?o:j(a);if(o=null==t?o:j(t),(e=i.getPooled(u,a,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=i.getPooled(l,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,a&&r)e:{for(o=r,s=0,i=t=a;i;i=D(i))s++;for(i=0,l=o;l;l=D(l))i++;for(;0<s-i;)t=D(t),s--;for(;0<i-s;)o=D(o),i--;for(;s--;){if(t===o||t===o.alternate)break e;t=D(t),o=D(o)}t=null}else t=null;for(o=t,t=[];a&&a!==o&&(null===(s=a.alternate)||s!==o);)t.push(a),a=D(a);for(a=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)a.push(r),r=D(r);for(r=0;r<t.length;r++)H(t[r],"bubbled",e);for(r=a.length;0<r--;)H(a[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&i("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&i("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}i("188")}if(n.return!==r.return)n=o,r=a;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}u||i("189")}}n.alternate!==r&&i("190")}return 3!==n.tag&&i("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=Ut.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Ut.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:zt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Yt.extend({dataTransfer:null}),pn=Ut.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:zt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),gn=Yt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[Q,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},vn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,vn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),yn.forEach(function(e){bn(e,!1)});var xn={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=vn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=vn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Yt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case Q:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Ut;break;case"wheel":e=gn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=$t;break;default:e=le}return G(t=e.getPooled(o,t,n,r)),t}},kn=xn.isInteractiveTopLevelEventType,wn=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=R(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=De(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=null,u=0;u<m.length;u++){var l=m[u];l&&(l=l.extractEvents(r,t,a,o))&&(i=C(i,l))}L(i)}}var Sn=!0;function Cn(e,t){if(!t)return null;var n=(kn(e)?_n:On).bind(null,e);t.addEventListener(e,n,!1)}function En(e,t){if(!t)return null;var n=(kn(e)?_n:On).bind(null,e);t.addEventListener(e,n,!0)}function _n(e,t){Ie(On,e,t)}function On(e,t){if(Sn){var n=De(t);if(null===(n=R(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),wn.length){var r=wn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ne(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>wn.length&&wn.push(e)}}}var Mn={},Pn=0,Ln="_reactListenersID"+(""+Math.random()).slice(2);function Bn(e){return Object.prototype.hasOwnProperty.call(e,Ln)||(e[Ln]=Pn++,Mn[e[Ln]]={}),Mn[e[Ln]]}function In(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function An(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Rn(e,t){var n,r=An(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=An(r)}}function Nn(){for(var e=window,t=In();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=In(e.document)}return t}function jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Fn=V&&"documentMode"in document&&11>=document.documentMode,Dn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Un=null,Wn=null,Hn=null,zn=!1;function Gn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return zn||null==Un||Un!==In(n)?null:("selectionStart"in(n=Un)&&jn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hn&&en(Hn,n)?null:(Hn=n,(e=le.getPooled(Dn.select,Wn,e,t)).type="select",e.target=Un,G(e),e))}var Vn={eventTypes:Dn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Bn(a),o=x.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?j(t):window,e){case"focus":(Fe(a)||"true"===a.contentEditable)&&(Un=a,Wn=t,Hn=null);break;case"blur":Hn=Wn=Un=null;break;case"mousedown":zn=!0;break;case"contextmenu":case"mouseup":case"dragend":return zn=!1,Gn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Gn(n,r)}return null}};function qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+vt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&i("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function $n(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&i("92"),Array.isArray(t)&&(1>=t.length||i("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:vt(n)}}function Xn(e,t){var n=vt(t.value),r=vt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Qn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=F,w=N,T=j,M.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:Qt,ChangeEventPlugin:Dt,SelectEventPlugin:Vn,BeforeInputEventPlugin:Ce});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ir=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function lr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ar).forEach(function(e){ir.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&i("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&i("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||i("61")),null!=t.style&&"object"!=typeof t.style&&i("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=Bn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":En("scroll",e);break;case"focus":case"blur":En("focus",e),En("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Ue(o)&&En(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Cn(o,e)}n[o]=!0}}}function pr(){}var hr=null,gr=null;function yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function mr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var vr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0,xr=a.unstable_scheduleCallback,kr=a.unstable_cancelCallback;function wr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Tr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Sr=[],Cr=-1;function Er(e){0>Cr||(e.current=Sr[Cr],Sr[Cr]=null,Cr--)}function _r(e,t){Sr[++Cr]=e.current,e.current=t}var Or={},Mr={current:Or},Pr={current:!1},Lr=Or;function Br(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ir(e){return null!=(e=e.childContextTypes)}function Ar(e){Er(Pr),Er(Mr)}function Rr(e){Er(Pr),Er(Mr)}function Nr(e,t,n){Mr.current!==Or&&i("168"),_r(Mr,t),_r(Pr,n)}function jr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())a in e||i("108",ut(t)||"Unknown",a);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Lr=Mr.current,_r(Mr,t),_r(Pr,Pr.current),!0}function Dr(e,t,n){var r=e.stateNode;r||i("169"),n?(t=jr(e,t,Lr),r.__reactInternalMemoizedMergedChildContext=t,Er(Pr),Er(Mr),_r(Mr,t)):Er(Pr),_r(Pr,n)}var Ur=null,Wr=null;function Hr(e){return function(t){try{return e(t)}catch(e){}}}function zr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Gr(e,t,n,r){return new zr(e,t,n,r)}function Vr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qr(e,t){var n=e.alternate;return null===n?((n=Gr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Vr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case $e:return Yr(n.children,o,a,t);case et:return $r(n,3|o,a,t);case Xe:return $r(n,2|o,a,t);case Qe:return(e=Gr(12,n,t,4|o)).elementType=Qe,e.type=Qe,e.expirationTime=a,e;case nt:return(e=Gr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:u=10;break e;case Ze:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}i("130",null==e?e:typeof e,"")}return(t=Gr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Yr(e,t,n,r){return(e=Gr(7,e,r,t)).expirationTime=n,e}function $r(e,t,n,r){return e=Gr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Gr(6,e,null,t)).expirationTime=n,e}function Qr(e,t,n){return(t=Gr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),to(t,e)}function Zr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),to(t,e)}function eo(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function to(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,a=t.latestPingedTime;0===(o=0!==o?o:a)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function no(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ro=(new r.Component).refs;function oo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=bu(),o=$a(r=Vi(r,e));o.payload=t,null!=n&&(o.callback=n),Ui(),Qa(e,o),Yi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=bu(),o=$a(r=Vi(r,e));o.tag=za,o.payload=t,null!=n&&(o.callback=n),Ui(),Qa(e,o),Yi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=bu(),r=$a(n=Vi(n,e));r.tag=Ga,null!=t&&(r.callback=t),Ui(),Qa(e,r),Yi(e,n)}};function io(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,a))}function uo(e,t,n){var r=!1,o=Or,a=t.contextType;return"object"==typeof a&&null!==a?a=Wa(a):(o=Ir(t)?Lr:Mr.current,a=(r=null!=(r=t.contextTypes))?Br(e,o):Or),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ao.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ro;var a=t.contextType;"object"==typeof a&&null!==a?o.context=Wa(a):(a=Ir(t)?Lr:Mr.current,o.context=Br(e,a)),null!==(a=e.updateQueue)&&(ti(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(oo(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ao.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(ti(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var co=Array.isArray;function fo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&i("309"),r=n.stateNode),r||i("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ro&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&i("284"),n._owner||i("290",e)}return e}function po(e,t){"textarea"!==e.type&&i("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=qr(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=fo(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=fo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Yr(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=fo(e,null,t),n.return=e,n;case Ye:return(t=Qr(t,e.mode,n)).return=e,t}if(co(t)||it(t))return(t=Yr(t,e.mode,n,null)).return=e,t;po(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===o?n.type===$e?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case Ye:return n.key===o?c(e,t,n,r):null}if(co(n)||it(n))return null!==o?null:f(e,t,n,r,null);po(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===$e?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case Ye:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(co(r)||it(r))return f(t,e=e.get(n)||null,r,o,null);po(t,r)}return null}function g(o,i,u,l){for(var s=null,c=null,f=i,g=i=0,y=null;null!==f&&g<u.length;g++){f.index>g?(y=f,f=null):y=f.sibling;var m=p(o,f,u[g],l);if(null===m){null===f&&(f=y);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===c?s=m:c.sibling=m,c=m,f=y}if(g===u.length)return n(o,f),s;if(null===f){for(;g<u.length;g++)(f=d(o,u[g],l))&&(i=a(f,i,g),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);g<u.length;g++)(y=h(f,o,g,u[g],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?g:y.key),i=a(y,i,g),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(o,e)}),s}function y(o,u,l,s){var c=it(l);"function"!=typeof c&&i("150"),null==(l=c.call(l))&&i("151");for(var f=c=null,g=u,y=u=0,m=null,v=l.next();null!==g&&!v.done;y++,v=l.next()){g.index>y?(m=g,g=null):m=g.sibling;var b=p(o,g,v.value,s);if(null===b){g||(g=m);break}e&&g&&null===b.alternate&&t(o,g),u=a(b,u,y),null===f?c=b:f.sibling=b,f=b,g=m}if(v.done)return n(o,g),c;if(null===g){for(;!v.done;y++,v=l.next())null!==(v=d(o,v.value,s))&&(u=a(v,u,y),null===f?c=v:f.sibling=v,f=v);return c}for(g=r(o,g);!v.done;y++,v=l.next())null!==(v=h(g,o,y,v.value,s))&&(e&&null!==v.alternate&&g.delete(null===v.key?y:v.key),u=a(v,u,y),null===f?c=v:f.sibling=v,f=v);return e&&g.forEach(function(e){return t(o,e)}),c}return function(e,r,a,l){var s="object"==typeof a&&null!==a&&a.type===$e&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case Ke:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?a.type===$e:s.elementType===a.type){n(e,s.sibling),(r=o(s,a.type===$e?a.props.children:a.props)).ref=fo(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===$e?((r=Yr(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Kr(a.type,a.key,a.props,null,e.mode,l)).ref=fo(e,r,a),l.return=e,e=l)}return u(e);case Ye:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qr(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Xr(a,e.mode,l)).return=e,e=r),u(e);if(co(a))return g(e,r,a,l);if(it(a))return y(e,r,a,l);if(c&&po(e,a),void 0===a&&!s)switch(e.tag){case 1:case 0:i("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var go=ho(!0),yo=ho(!1),mo={},vo={current:mo},bo={current:mo},xo={current:mo};function ko(e){return e===mo&&i("174"),e}function wo(e,t){_r(xo,t),_r(bo,e),_r(vo,mo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Er(vo),_r(vo,t)}function To(e){Er(vo),Er(bo),Er(xo)}function So(e){ko(xo.current);var t=ko(vo.current),n=er(t,e.type);t!==n&&(_r(bo,e),_r(vo,n))}function Co(e){bo.current===e&&(Er(vo),Er(bo))}var Eo=0,_o=2,Oo=4,Mo=8,Po=16,Lo=32,Bo=64,Io=128,Ao=Ge.ReactCurrentDispatcher,Ro=0,No=null,jo=null,Fo=null,Do=null,Uo=null,Wo=null,Ho=0,zo=null,Go=0,Vo=!1,qo=null,Ko=0;function Yo(){i("307")}function $o(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,a){if(Ro=a,No=t,Fo=null!==e?e.memoizedState:null,Ao.current=null===Fo?sa:ca,t=n(r,o),Vo){do{Vo=!1,Ko+=1,Fo=null!==e?e.memoizedState:null,Wo=Do,zo=Uo=jo=null,Ao.current=ca,t=n(r,o)}while(Vo);qo=null,Ko=0}return Ao.current=la,(e=No).memoizedState=Do,e.expirationTime=Ho,e.updateQueue=zo,e.effectTag|=Go,e=null!==jo&&null!==jo.next,Ro=0,Wo=Uo=Do=Fo=jo=No=null,Ho=0,zo=null,Go=0,e&&i("300"),t}function Qo(){Ao.current=la,Ro=0,Wo=Uo=Do=Fo=jo=No=null,Ho=0,zo=null,Go=0,Vo=!1,qo=null,Ko=0}function Jo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Uo?Do=Uo=e:Uo=Uo.next=e,Uo}function Zo(){if(null!==Wo)Wo=(Uo=Wo).next,Fo=null!==(jo=Fo)?jo.next:null;else{null===Fo&&i("310");var e={memoizedState:(jo=Fo).memoizedState,baseState:jo.baseState,queue:jo.queue,baseUpdate:jo.baseUpdate,next:null};Uo=null===Uo?Do=e:Uo.next=e,Fo=jo.next}return Uo}function ea(e,t){return"function"==typeof t?t(e):t}function ta(e){var t=Zo(),n=t.queue;if(null===n&&i("311"),0<Ko){var r=n.dispatch;if(null!==qo){var o=qo.get(n);if(void 0!==o){qo.delete(n);var a=t.memoizedState;do{a=e(a,o.action),o=o.next}while(null!==o);return Jt(a,t.memoizedState)||(ka=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),[a,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(a=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,s=r,c=!1;do{var f=s.expirationTime;f<Ro?(c||(c=!0,l=u,o=a),f>Ho&&(Ho=f)):a=s.eagerReducer===e?s.eagerState:e(a,s.action),u=s,s=s.next}while(null!==s&&s!==r);c||(l=u,o=a),Jt(a,t.memoizedState)||(ka=!0),t.memoizedState=a,t.baseUpdate=l,t.baseState=o,n.eagerReducer=e,n.eagerState=a}return[t.memoizedState,n.dispatch]}function na(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===zo?(zo={lastEffect:null}).lastEffect=e.next=e:null===(t=zo.lastEffect)?zo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,zo.lastEffect=e),e}function ra(e,t,n,r){var o=Jo();Go|=e,o.memoizedState=na(t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Zo();r=void 0===r?null:r;var a=void 0;if(null!==jo){var i=jo.memoizedState;if(a=i.destroy,null!==r&&$o(r,i.deps))return void na(Eo,n,a,r)}Go|=e,o.memoizedState=na(t,n,a,r)}function aa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ia(){}function ua(e,t,n){25>Ko||i("301");var r=e.alternate;if(e===No||null!==r&&r===No)if(Vo=!0,e={expirationTime:Ro,action:n,eagerReducer:null,eagerState:null,next:null},null===qo&&(qo=new Map),void 0===(n=qo.get(t)))qo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ui();var o=bu(),a={expirationTime:o=Vi(o,e),action:n,eagerReducer:null,eagerState:null,next:null},u=t.last;if(null===u)a.next=a;else{var l=u.next;null!==l&&(a.next=l),u.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.eagerReducer))try{var s=t.eagerState,c=r(s,n);if(a.eagerReducer=r,a.eagerState=c,Jt(c,s))return}catch(e){}Yi(e,o)}}var la={readContext:Wa,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo},sa={readContext:Wa,useCallback:function(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e},useContext:Wa,useEffect:function(e,t){return ra(516,Io|Bo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):[e],ra(4,Oo|Lo,aa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,Oo|Lo,e,t)},useMemo:function(e,t){var n=Jo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Jo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,eagerReducer:e,eagerState:t}).dispatch=ua.bind(null,No,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:function(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,eagerReducer:ea,eagerState:e}).dispatch=ua.bind(null,No,e),[t.memoizedState,e]},useDebugValue:ia},ca={readContext:Wa,useCallback:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$o(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Wa,useEffect:function(e,t){return oa(516,Io|Bo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):[e],oa(4,Oo|Lo,aa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oa(4,Oo|Lo,e,t)},useMemo:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$o(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ta,useRef:function(){return Zo().memoizedState},useState:function(e){return ta(ea)},useDebugValue:ia},fa=null,da=null,pa=!1;function ha(e,t){var n=Gr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ga(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function ya(e){if(pa){var t=da;if(t){var n=t;if(!ga(e,t)){if(!(t=wr(n))||!ga(e,t))return e.effectTag|=2,pa=!1,void(fa=e);ha(fa,n)}fa=e,da=Tr(t)}else e.effectTag|=2,pa=!1,fa=e}}function ma(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;fa=e}function va(e){if(e!==fa)return!1;if(!pa)return ma(e),pa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!mr(t,e.memoizedProps))for(t=da;t;)ha(e,t),t=wr(t);return ma(e),da=fa?wr(e.stateNode):null,!0}function ba(){da=fa=null,pa=!1}var xa=Ge.ReactCurrentOwner,ka=!1;function wa(e,t,n,r){t.child=null===e?yo(t,null,n,r):go(t,e.child,n,r)}function Ta(e,t,n,r,o){n=n.render;var a=t.ref;return Ua(t,o),r=Xo(e,t,n,r,a,o),null===e||ka?(t.effectTag|=1,wa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ba(e,t,o))}function Sa(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Vr(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ca(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ba(e,t,a):(t.effectTag|=1,(e=qr(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ca(e,t,n,r,o,a){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(ka=!1,o<a)?Ba(e,t,a):_a(e,t,n,r,a)}function Ea(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function _a(e,t,n,r,o){var a=Ir(n)?Lr:Mr.current;return a=Br(t,a),Ua(t,o),n=Xo(e,t,n,r,a,o),null===e||ka?(t.effectTag|=1,wa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ba(e,t,o))}function Oa(e,t,n,r,o){if(Ir(n)){var a=!0;Fr(t)}else a=!1;if(Ua(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),uo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=Wa(s):s=Br(t,s=Ir(n)?Lr:Mr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==s)&&lo(t,i,r,s),qa=!1;var d=t.memoizedState;l=i.state=d;var p=t.updateQueue;null!==p&&(ti(t,p,r,i,o),l=t.memoizedState),u!==r||d!==l||Pr.current||qa?("function"==typeof c&&(oo(t,n,c,r),l=t.memoizedState),(u=qa||io(t,n,u,r,d,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=s,r=u):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,u=t.memoizedProps,i.props=t.type===t.elementType?u:no(t.type,u),l=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=Wa(s):s=Br(t,s=Ir(n)?Lr:Mr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==s)&&lo(t,i,r,s),qa=!1,l=t.memoizedState,d=i.state=l,null!==(p=t.updateQueue)&&(ti(t,p,r,i,o),d=t.memoizedState),u!==r||l!==d||Pr.current||qa?("function"==typeof c&&(oo(t,n,c,r),d=t.memoizedState),(c=qa||io(t,n,u,r,l,d,s))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ma(e,t,n,r,a,o)}function Ma(e,t,n,r,o,a){Ea(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Dr(t,n,!1),Ba(e,t,a);r=t.stateNode,xa.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=go(t,e.child,null,a),t.child=go(t,null,u,a)):wa(e,t,u,a),t.memoizedState=r.state,o&&Dr(t,n,!0),t.child}function Pa(e){var t=e.stateNode;t.pendingContext?Nr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Nr(0,t.context,!1),wo(e,t.containerInfo)}function La(e,t,n){var r=t.mode,o=t.pendingProps,a=t.memoizedState;if(0==(64&t.effectTag)){a=null;var i=!1}else a={timedOutAt:null!==a?a.timedOutAt:0},i=!0,t.effectTag&=-65;if(null===e)if(i){var u=o.fallback;e=Yr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Yr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=yo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,i?(n=o.fallback,o=qr(r,r.pendingProps),0==(1&t.mode)&&((i=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=i)),r=o.sibling=qr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=go(t,r.child,o.children,n)):(u=e.child,i?(i=o.fallback,(o=Yr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Yr(i,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=go(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=a,t.child=n,r}function Ba(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&i("153"),null!==t.child){for(n=qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ia(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Pr.current)ka=!0;else if(r<n){switch(ka=!1,t.tag){case 3:Pa(t),ba();break;case 5:So(t);break;case 1:Ir(t.type)&&Fr(t);break;case 4:wo(t,t.stateNode.containerInfo);break;case 10:Fa(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?La(e,t,n):null!==(t=Ba(e,t,n))?t.sibling:null}return Ba(e,t,n)}}else ka=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Br(t,Mr.current);if(Ua(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Qo(),Ir(r)){var a=!0;Fr(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&oo(t,r,u,e),o.updater=ao,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Ma(null,t,r,!0,a,n)}else t.tag=0,wa(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),a=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Vr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),a=no(e,a),u=void 0,o){case 0:u=_a(null,t,e,a,n);break;case 1:u=Oa(null,t,e,a,n);break;case 11:u=Ta(null,t,e,a,n);break;case 14:u=Sa(null,t,e,no(e.type,a),r,n);break;default:i("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,_a(e,t,r,o=t.elementType===r?o:no(r,o),n);case 1:return r=t.type,o=t.pendingProps,Oa(e,t,r,o=t.elementType===r?o:no(r,o),n);case 3:return Pa(t),null===(r=t.updateQueue)&&i("282"),o=null!==(o=t.memoizedState)?o.element:null,ti(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ba(),t=Ba(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(da=Tr(t.stateNode.containerInfo),fa=t,o=pa=!0),o?(t.effectTag|=2,t.child=yo(t,null,r,n)):(wa(e,t,r,n),ba()),t=t.child),t;case 5:return So(t),null===e&&ya(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,mr(r,o)?u=null:null!==a&&mr(r,a)&&(t.effectTag|=16),Ea(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(wa(e,t,u,n),t=t.child),t;case 6:return null===e&&ya(t),null;case 13:return La(e,t,n);case 4:return wo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=go(t,null,r,n):wa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ta(e,t,r,o=t.elementType===r?o:no(r,o),n);case 7:return wa(e,t,t.pendingProps,n),t.child;case 8:case 12:return wa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,Fa(t,a=o.value),null!==u){var l=u.value;if(0===(a=Jt(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!Pr.current){t=Ba(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.contextDependencies;if(null!==s){u=l.child;for(var c=s.first;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=$a(n)).tag=Ga,Qa(l,c)),l.expirationTime<n&&(l.expirationTime=n),null!==(c=l.alternate)&&c.expirationTime<n&&(c.expirationTime=n);for(var f=l.return;null!==f;){if(c=f.alternate,f.childExpirationTime<n)f.childExpirationTime=n,null!==c&&c.childExpirationTime<n&&(c.childExpirationTime=n);else{if(!(null!==c&&c.childExpirationTime<n))break;c.childExpirationTime=n}f=f.return}s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}wa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,Ua(t,n),r=r(o=Wa(o,a.unstable_observedBits)),t.effectTag|=1,wa(e,t,r,n),t.child;case 14:return a=no(o=t.type,t.pendingProps),Sa(e,t,o,a=no(o.type,a),r,n);case 15:return Ca(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:no(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ir(r)?(e=!0,Fr(t)):e=!1,Ua(t,n),uo(t,r,o),so(t,r,o,n),Ma(null,t,r,!0,e,n);default:i("156")}}var Aa={current:null},Ra=null,Na=null,ja=null;function Fa(e,t){var n=e.type._context;_r(Aa,n._currentValue),n._currentValue=t}function Da(e){var t=Aa.current;Er(Aa),e.type._context._currentValue=t}function Ua(e,t){Ra=e,ja=Na=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(ka=!0),e.contextDependencies=null}function Wa(e,t){return ja!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(ja=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Na?(null===Ra&&i("308"),Na=t,Ra.contextDependencies={first:t,expirationTime:0}):Na=Na.next=t),e._currentValue}var Ha=0,za=1,Ga=2,Va=3,qa=!1;function Ka(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ya(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function $a(e){return{expirationTime:e,tag:Ha,payload:null,callback:null,next:null,nextEffect:null}}function Xa(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Qa(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Ka(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Ka(e.memoizedState),o=n.updateQueue=Ka(n.memoizedState)):r=e.updateQueue=Ya(o):null===o&&(o=n.updateQueue=Ya(r));null===o||r===o?Xa(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xa(r,t),Xa(o,t)):(Xa(r,t),o.lastUpdate=t)}function Ja(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ka(e.memoizedState):Za(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Za(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ya(t)),t}function ei(e,t,n,r,a,i){switch(n.tag){case za:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case Va:e.effectTag=-2049&e.effectTag|64;case Ha:if(null==(a="function"==typeof(e=n.payload)?e.call(i,r,a):e))break;return o({},r,a);case Ga:qa=!0}return r}function ti(e,t,n,r,o){qa=!1;for(var a=(t=Za(e,t)).baseState,i=null,u=0,l=t.firstUpdate,s=a;null!==l;){var c=l.expirationTime;c<o?(null===i&&(i=l,a=s),u<c&&(u=c)):(s=ei(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===c&&(c=l,null===i&&(a=s)),u<f&&(u=f)):(s=ei(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,e.expirationTime=u,e.memoizedState=s}function ni(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ri(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ri(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ri(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&i("191",n),n.call(r)}e=e.nextEffect}}function oi(e,t){return{value:e,source:t,stack:lt(t)}}function ai(e){e.effectTag|=4}var ii=void 0,ui=void 0,li=void 0,si=void 0;ii=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ui=function(){},li=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var u=t.stateNode;switch(ko(vo.current),e=null,n){case"input":i=bt(u,i),r=bt(u,r),e=[];break;case"option":i=qn(u,i),r=qn(u,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Yn(u,i),r=Yn(u,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(u.onclick=pr)}cr(n,r),u=n=void 0;var l=null;for(n in i)if(!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&null!=i[n])if("style"===n){var s=i[n];for(u in s)s.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=i?i[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(l||(l={}),l[u]=c[u])}else l||(e||(e=[]),e.push(n,l)),l=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&dr(a,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}l&&(e=e||[]).push("style",l),a=e,(t.updateQueue=a)&&ai(t)}},si=function(e,t,n,r){n!==r&&ai(t)};var ci="function"==typeof WeakSet?WeakSet:Set;function fi(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function di(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Gi(e,t)}else t.current=null}function pi(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Eo){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Eo&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function hi(e){switch("function"==typeof Wr&&Wr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Gi(o,e)}}n=n.next}while(n!==t)}break;case 1:if(di(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Gi(e,t)}break;case 5:di(e);break;case 4:mi(e)}}function gi(e){return 5===e.tag||3===e.tag||4===e.tag}function yi(e){e:{for(var t=e.return;null!==t;){if(gi(t)){var n=t;break e}t=t.return}i("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:i("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,u=o.stateNode,l=n;8===a.nodeType?a.parentNode.insertBefore(u,l):a.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(a=u.parentNode).insertBefore(l,u):(a=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==a.onclick||(a.onclick=pr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function mi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&i("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,u=a;;)if(hi(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===a)break;for(;null===u.sibling;){if(null===u.return||u.return===a)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(a=r,u=t.stateNode,8===a.nodeType?a.parentNode.removeChild(u):a.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):hi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function vi(e,t){switch(t.tag){case 0:case 11:case 14:case 15:pi(Oo,Mo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&function(e,t,n,r,o){e[A]=o,"input"===n&&"radio"===o.type&&null!=o.name&&kt(e,o),fr(n,r),r=fr(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?lr(e,u):"dangerouslySetInnerHTML"===i?rr(e,u):"children"===i?or(e,u):mt(e,i,u,r)}switch(n){case"input":wt(e,o);break;case"textarea":Xn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,a,o,e,r)}break;case 6:null===t.stateNode&&i("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=bu())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ur("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new ci),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Vi(t=bu(),e),null!==(e=Ki(e,t))&&(Jr(e,t),0!==(t=e.expirationTime)&&xu(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:i("163")}}var bi="function"==typeof WeakMap?WeakMap:Map;function xi(e,t,n){(n=$a(n)).tag=Va,n.payload={element:null};var r=t.value;return n.callback=function(){Mu(r),fi(e,t)},n}function ki(e,t,n){(n=$a(n)).tag=Va;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fi?Fi=new Set([this]):Fi.add(this));var n=t.value,o=t.stack;fi(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function wi(e){switch(e.tag){case 1:Ir(e.type)&&Ar();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return To(),Rr(),0!=(64&(t=e.effectTag))&&i("285"),e.effectTag=-2049&t|64,e;case 5:return Co(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return To(),null;case 10:return Da(e),null;default:return null}}var Ti=Ge.ReactCurrentDispatcher,Si=Ge.ReactCurrentOwner,Ci=1073741822,Ei=0,_i=!1,Oi=null,Mi=null,Pi=0,Li=-1,Bi=!1,Ii=null,Ai=!1,Ri=null,Ni=null,ji=null,Fi=null;function Di(){if(null!==Oi)for(var e=Oi.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ar();break;case 3:To(),Rr();break;case 5:Co(t);break;case 4:To();break;case 10:Da(t)}e=e.return}Mi=null,Pi=0,Li=-1,Bi=!1,Oi=null}function Ui(){null!==Ni&&kr(Ni),null!==ji&&ji()}function Wi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Oi=e;e:{var a=t,u=Pi,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ir(t.type)&&Ar();break;case 3:To(),Rr(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==a&&null!==a.child||(va(t),t.effectTag&=-3),ui(t);break;case 5:Co(t);var s=ko(xo.current);if(u=t.type,null!==a&&null!=t.stateNode)li(a,t,u,l,s),a.ref!==t.ref&&(t.effectTag|=128);else if(l){var c=ko(vo.current);if(va(t)){a=(l=t).stateNode;var f=l.type,d=l.memoizedProps,p=s;switch(a[I]=l,a[A]=d,u=void 0,s=f){case"iframe":case"object":Cn("load",a);break;case"video":case"audio":for(f=0;f<te.length;f++)Cn(te[f],a);break;case"source":Cn("error",a);break;case"img":case"image":case"link":Cn("error",a),Cn("load",a);break;case"form":Cn("reset",a),Cn("submit",a);break;case"details":Cn("toggle",a);break;case"input":xt(a,d),Cn("invalid",a),dr(p,"onChange");break;case"select":a._wrapperState={wasMultiple:!!d.multiple},Cn("invalid",a),dr(p,"onChange");break;case"textarea":$n(a,d),Cn("invalid",a),dr(p,"onChange")}for(u in cr(s,d),f=null,d)d.hasOwnProperty(u)&&(c=d[u],"children"===u?"string"==typeof c?a.textContent!==c&&(f=["children",c]):"number"==typeof c&&a.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(u)&&null!=c&&dr(p,u));switch(s){case"input":He(a),Tt(a,d,!0);break;case"textarea":He(a),Qn(a);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(a.onclick=pr)}u=f,l.updateQueue=u,(l=null!==u)&&ai(t)}else{d=t,a=u,p=l,f=9===s.nodeType?s:s.ownerDocument,c===Jn.html&&(c=Zn(a)),c===Jn.html?"script"===a?((a=f.createElement("div")).innerHTML="<script><\/script>",f=a.removeChild(a.firstChild)):"string"==typeof p.is?f=f.createElement(a,{is:p.is}):(f=f.createElement(a),"select"===a&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,a),(a=f)[I]=d,a[A]=l,ii(a,t,!1,!1),p=a;var h=s,g=fr(f=u,d=l);switch(f){case"iframe":case"object":Cn("load",p),s=d;break;case"video":case"audio":for(s=0;s<te.length;s++)Cn(te[s],p);s=d;break;case"source":Cn("error",p),s=d;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),s=d;break;case"form":Cn("reset",p),Cn("submit",p),s=d;break;case"details":Cn("toggle",p),s=d;break;case"input":xt(p,d),s=bt(p,d),Cn("invalid",p),dr(h,"onChange");break;case"option":s=qn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},s=o({},d,{value:void 0}),Cn("invalid",p),dr(h,"onChange");break;case"textarea":$n(p,d),s=Yn(p,d),Cn("invalid",p),dr(h,"onChange");break;default:s=d}cr(f,s),c=void 0;var y=f,m=p,v=s;for(c in v)if(v.hasOwnProperty(c)){var x=v[c];"style"===c?lr(m,x):"dangerouslySetInnerHTML"===c?null!=(x=x?x.__html:void 0)&&rr(m,x):"children"===c?"string"==typeof x?("textarea"!==y||""!==x)&&or(m,x):"number"==typeof x&&or(m,""+x):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=x&&dr(h,c):null!=x&&mt(m,c,x,g))}switch(f){case"input":He(p),Tt(p,d,!1);break;case"textarea":He(p),Qn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+vt(d.value));break;case"select":(s=p).multiple=!!d.multiple,null!=(p=d.value)?Kn(s,!!d.multiple,p,!1):null!=d.defaultValue&&Kn(s,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof s.onClick&&(p.onclick=pr)}(l=yr(u,l))&&ai(t),t.stateNode=a}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&i("166");break;case 6:a&&null!=t.stateNode?si(a,t,a.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&i("166")),a=ko(xo.current),ko(vo.current),va(t)?(u=(l=t).stateNode,a=l.memoizedProps,u[I]=l,(l=u.nodeValue!==a)&&ai(t)):(u=t,(l=(9===a.nodeType?a:a.ownerDocument).createTextNode(l))[I]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Oi=t;break e}l=null!==l,u=null!==a&&null!==a.memoizedState,null!==a&&!l&&u&&(null!==(a=a.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=a,a.nextEffect=s):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),(l||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:To(),ui(t);break;case 10:Da(t);break;case 9:case 14:break;case 17:Ir(t.type)&&Ar();break;default:i("156")}Oi=null}if(t=e,1===Pi||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(a=u.expirationTime)>l&&(l=a),(s=u.childExpirationTime)>l&&(l=s),u=u.sibling;t.childExpirationTime=l}if(null!==Oi)return Oi;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=wi(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Hi(e){var t=Ia(e.alternate,e,Pi);return e.memoizedProps=e.pendingProps,null===t&&(t=Wi(e)),Si.current=null,t}function zi(e,t){_i&&i("243"),Ui(),_i=!0;var n=Ti.current;Ti.current=la;var r=e.nextExpirationTimeToWorkOn;r===Pi&&e===Mi&&null!==Oi||(Di(),Pi=r,Oi=qr((Mi=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Oi&&!Tu();)Oi=Hi(Oi);else for(;null!==Oi;)Oi=Hi(Oi)}catch(t){if(ja=Na=Ra=null,Qo(),null===Oi)o=!0,Mu(t);else{null===Oi&&i("271");var a=Oi,u=a.return;if(null!==u){e:{var l=e,s=u,c=a,f=t;if(u=Pi,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var d=f;f=s;var p=-1,h=-1;do{if(13===f.tag){var g=f.alternate;if(null!==g&&null!==(g=g.memoizedState)){h=10*(1073741822-g.timedOutAt);break}"number"==typeof(g=f.pendingProps.maxDuration)&&(0>=g?p=0:(-1===p||g<p)&&(p=g))}f=f.return}while(null!==f);f=s;do{if((g=13===f.tag)&&(g=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),g){if(null===(s=f.updateQueue)?((s=new Set).add(d),f.updateQueue=s):s.add(d),0==(1&f.mode)){f.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((u=$a(1073741823)).tag=Ga,Qa(c,u))),c.expirationTime=1073741823;break e}null===(c=l.pingCache)?(c=l.pingCache=new bi,s=new Set,c.set(d,s)):void 0===(s=c.get(d))&&(s=new Set,c.set(d,s)),s.has(u)||(s.add(u),c=qi.bind(null,l,d,u),d.then(c,c)),-1===p?l=1073741823:(-1===h&&(h=10*(1073741822-eo(l,u))-5e3),l=h+p),0<=l&&Li<l&&(Li=l),f.effectTag|=2048,f.expirationTime=u;break e}f=f.return}while(null!==f);f=Error((ut(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(c))}Bi=!0,f=oi(f,c),l=s;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=u,Ja(l,u=xi(l,f,u));break e;case 1:if(d=f,p=l.type,h=l.stateNode,0==(64&l.effectTag)&&("function"==typeof p.getDerivedStateFromError||null!==h&&"function"==typeof h.componentDidCatch&&(null===Fi||!Fi.has(h)))){l.effectTag|=2048,l.expirationTime=u,Ja(l,u=ki(l,d,u));break e}}l=l.return}while(null!==l)}Oi=Wi(a);continue}o=!0,Mu(t)}}break}if(_i=!1,Ti.current=n,ja=Na=Ra=null,Qo(),o)Mi=null,e.finishedWork=null;else if(null!==Oi)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&i("281"),Mi=null,Bi){if(o=e.latestPendingTime,a=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<r||0!==a&&a<r||0!==u&&u<r)return Zr(e,r),void vu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void vu(e,n,r,t,-1)}t&&-1!==Li?(Zr(e,r),(t=10*(1073741822-eo(e,r)))<Li&&(Li=t),t=10*(1073741822-bu()),t=Li-t,vu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Gi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fi||!Fi.has(r)))return Qa(n,e=ki(n,e=oi(t,e),1073741823)),void Yi(n,1073741823);break;case 3:return Qa(n,e=xi(n,e=oi(t,e),1073741823)),void Yi(n,1073741823)}n=n.return}3===e.tag&&(Qa(e,n=xi(e,n=oi(t,e),1073741823)),Yi(e,1073741823))}function Vi(e,t){return 0!==Ei?e=Ei:_i?e=Ai?1073741823:Pi:1&t.mode?(e=lu?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Mi&&e===Pi&&--e):e=1073741823,lu&&(0===ru||e<ru)&&(ru=e),e}function qi(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Mi&&Pi===n?Mi=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),to(n,e),0!==(n=e.expirationTime)&&xu(e,n)))}function Ki(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Yi(e,t){null!==(e=Ki(e,t))&&(!_i&&0!==Pi&&t>Pi&&Di(),Jr(e,t),_i&&!Ai&&Mi===e||xu(e,e.expirationTime),hu>pu&&(hu=0,i("185")))}function $i(e,t,n,r,o){var a=Ei;Ei=1073741823;try{return e(t,n,r,o)}finally{Ei=a}}var Xi=null,Qi=null,Ji=0,Zi=void 0,eu=!1,tu=null,nu=0,ru=0,ou=!1,au=null,iu=!1,uu=!1,lu=!1,su=null,cu=a.unstable_now(),fu=1073741822-(cu/10|0),du=fu,pu=50,hu=0,gu=null;function yu(){fu=1073741822-((a.unstable_now()-cu)/10|0)}function mu(e,t){if(0!==Ji){if(t<Ji)return;null!==Zi&&a.unstable_cancelCallback(Zi)}Ji=t,e=a.unstable_now()-cu,Zi=a.unstable_scheduleCallback(Su,{timeout:10*(1073741822-t)-e})}function vu(e,t,n,r,o){e.expirationTime=r,0!==o||Tu()?0<o&&(e.timeoutHandle=vr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,yu(),du=fu,Eu(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function bu(){return eu?du:(ku(),0!==nu&&1!==nu||(yu(),du=fu),du)}function xu(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===Qi?(Xi=Qi=e,e.nextScheduledRoot=e):(Qi=Qi.nextScheduledRoot=e).nextScheduledRoot=Xi):t>e.expirationTime&&(e.expirationTime=t),eu||(iu?uu&&(tu=e,nu=1073741823,_u(e,1073741823,!1)):1073741823===t?Cu(1073741823,!1):mu(e,t))}function ku(){var e=0,t=null;if(null!==Qi)for(var n=Qi,r=Xi;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===Qi)&&i("244"),r===r.nextScheduledRoot){Xi=Qi=r.nextScheduledRoot=null;break}if(r===Xi)Xi=o=r.nextScheduledRoot,Qi.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Qi){(Qi=n).nextScheduledRoot=Xi,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===Qi)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}tu=t,nu=e}var wu=!1;function Tu(){return!!wu||!!a.unstable_shouldYield()&&(wu=!0)}function Su(){try{if(!Tu()&&null!==Xi){yu();var e=Xi;do{var t=e.expirationTime;0!==t&&fu<=t&&(e.nextExpirationTimeToWorkOn=fu),e=e.nextScheduledRoot}while(e!==Xi)}Cu(0,!0)}finally{wu=!1}}function Cu(e,t){if(ku(),t)for(yu(),du=fu;null!==tu&&0!==nu&&e<=nu&&!(wu&&fu>nu);)_u(tu,nu,fu>nu),ku(),yu(),du=fu;else for(;null!==tu&&0!==nu&&e<=nu;)_u(tu,nu,!1),ku();if(t&&(Ji=0,Zi=null),0!==nu&&mu(tu,nu),hu=0,gu=null,null!==su)for(e=su,su=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ou||(ou=!0,au=e)}}if(ou)throw e=au,au=null,ou=!1,e}function Eu(e,t){eu&&i("253"),tu=e,nu=t,_u(e,t,!1),Cu(1073741823,!1)}function _u(e,t,n){if(eu&&i("245"),eu=!0,n){var r=e.finishedWork;null!==r?Ou(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),zi(e,n),null!==(r=e.finishedWork)&&(Tu()?e.finishedWork=r:Ou(e,r,t)))}else null!==(r=e.finishedWork)?Ou(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),zi(e,n),null!==(r=e.finishedWork)&&Ou(e,r,t));eu=!1}function Ou(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===su?su=[r]:su.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===gu?hu++:(gu=e,hu=0),Ai=_i=!0,e.current===t&&i("177"),0===(n=e.pendingCommitExpirationTime)&&i("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(r<e.latestPingedTime&&(e.latestPingedTime=0),0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Jr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Jr(e,r)):r>o&&Jr(e,r)),to(0,e),Si.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Sn,jn(o=Nn())){if("selectionStart"in o)var a={start:o.selectionStart,end:o.selectionEnd};else e:{var u=(a=(a=o.ownerDocument)&&a.defaultView||window).getSelection&&a.getSelection();if(u&&0!==u.rangeCount){a=u.anchorNode;var l=u.anchorOffset,s=u.focusNode;u=u.focusOffset;try{a.nodeType,s.nodeType}catch(e){a=null;break e}var c=0,f=-1,d=-1,p=0,h=0,g=o,y=null;t:for(;;){for(var m;g!==a||0!==l&&3!==g.nodeType||(f=c+l),g!==s||0!==u&&3!==g.nodeType||(d=c+u),3===g.nodeType&&(c+=g.nodeValue.length),null!==(m=g.firstChild);)y=g,g=m;for(;;){if(g===o)break t;if(y===a&&++p===l&&(f=c),y===s&&++h===u&&(d=c),null!==(m=g.nextSibling))break;y=(g=y).parentNode}g=m}a=-1===f||-1===d?null:{start:f,end:d}}else a=null}a=a||{start:0,end:0}}else a=null;for(gr={focusedElem:o,selectionRange:a},Sn=!1,Ii=r;null!==Ii;){o=!1,a=void 0;try{for(;null!==Ii;){if(256&Ii.effectTag)e:{var v=Ii.alternate;switch((l=Ii).tag){case 0:case 11:case 15:pi(_o,Eo,l);break e;case 1:if(256&l.effectTag&&null!==v){var b=v.memoizedProps,x=v.memoizedState,k=l.stateNode,w=k.getSnapshotBeforeUpdate(l.elementType===l.type?b:no(l.type,b),x);k.__reactInternalSnapshotBeforeUpdate=w}break e;case 3:case 5:case 6:case 4:case 17:break e;default:i("163")}}Ii=Ii.nextEffect}}catch(e){o=!0,a=e}o&&(null===Ii&&i("178"),Gi(Ii,a),null!==Ii&&(Ii=Ii.nextEffect))}for(Ii=r;null!==Ii;){v=!1,b=void 0;try{for(;null!==Ii;){var T=Ii.effectTag;if(16&T&&or(Ii.stateNode,""),128&T){var S=Ii.alternate;if(null!==S){var C=S.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(14&T){case 2:yi(Ii),Ii.effectTag&=-3;break;case 6:yi(Ii),Ii.effectTag&=-3,vi(Ii.alternate,Ii);break;case 4:vi(Ii.alternate,Ii);break;case 8:mi(x=Ii),x.return=null,x.child=null,x.memoizedState=null,x.updateQueue=null;var E=x.alternate;null!==E&&(E.return=null,E.child=null,E.memoizedState=null,E.updateQueue=null)}Ii=Ii.nextEffect}}catch(e){v=!0,b=e}v&&(null===Ii&&i("178"),Gi(Ii,b),null!==Ii&&(Ii=Ii.nextEffect))}if(C=gr,S=Nn(),T=C.focusedElem,v=C.selectionRange,S!==T&&T&&T.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(T.ownerDocument.documentElement,T)){null!==v&&jn(T)&&(S=v.start,void 0===(C=v.end)&&(C=S),"selectionStart"in T?(T.selectionStart=S,T.selectionEnd=Math.min(C,T.value.length)):(C=(S=T.ownerDocument||document)&&S.defaultView||window).getSelection&&(C=C.getSelection(),b=T.textContent.length,E=Math.min(v.start,b),v=void 0===v.end?E:Math.min(v.end,b),!C.extend&&E>v&&(b=v,v=E,E=b),b=Rn(T,E),x=Rn(T,v),b&&x&&(1!==C.rangeCount||C.anchorNode!==b.node||C.anchorOffset!==b.offset||C.focusNode!==x.node||C.focusOffset!==x.offset)&&((S=S.createRange()).setStart(b.node,b.offset),C.removeAllRanges(),E>v?(C.addRange(S),C.extend(x.node,x.offset)):(S.setEnd(x.node,x.offset),C.addRange(S))))),S=[];for(C=T;C=C.parentNode;)1===C.nodeType&&S.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof T.focus&&T.focus(),T=0;T<S.length;T++)(C=S[T]).element.scrollLeft=C.left,C.element.scrollTop=C.top}for(gr=null,Sn=!!hr,hr=null,e.current=t,Ii=r;null!==Ii;){T=!1,S=void 0;try{for(C=e,E=n;null!==Ii;){var _=Ii.effectTag;if(36&_){var O=Ii.alternate;switch(b=E,(v=Ii).tag){case 0:case 11:case 15:pi(Po,Lo,v);break;case 1:var M=v.stateNode;if(4&v.effectTag)if(null===O)M.componentDidMount();else{var P=v.elementType===v.type?O.memoizedProps:no(v.type,O.memoizedProps);M.componentDidUpdate(P,O.memoizedState,M.__reactInternalSnapshotBeforeUpdate)}var L=v.updateQueue;null!==L&&ni(0,L,M);break;case 3:var B=v.updateQueue;if(null!==B){if(x=null,null!==v.child)switch(v.child.tag){case 5:x=v.child.stateNode;break;case 1:x=v.child.stateNode}ni(0,B,x)}break;case 5:var I=v.stateNode;null===O&&4&v.effectTag&&yr(v.type,v.memoizedProps)&&I.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:i("163")}}if(128&_){var A=Ii.ref;if(null!==A){var R=Ii.stateNode;switch(Ii.tag){case 5:var N=R;break;default:N=R}"function"==typeof A?A(N):A.current=N}}512&_&&(Ri=C),Ii=Ii.nextEffect}}catch(e){T=!0,S=e}T&&(null===Ii&&i("178"),Gi(Ii,S),null!==Ii&&(Ii=Ii.nextEffect))}null!==r&&null!==Ri&&(_=function(e,t){ji=Ni=Ri=null;var n=eu;eu=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var a=t;pi(Io,Eo,a),pi(Eo,Bo,a)}catch(e){r=!0,o=e}r&&Gi(t,o)}t=t.nextEffect}while(null!==t);eu=n,0!==(n=e.expirationTime)&&xu(e,n)}.bind(null,e,r),Ni=xr(_),ji=_),_i=Ai=!1,"function"==typeof Ur&&Ur(t.stateNode),_=t.expirationTime,0===(t=(t=t.childExpirationTime)>_?t:_)&&(Fi=null),e.expirationTime=t,e.finishedWork=null}function Mu(e){null===tu&&i("246"),tu.expirationTime=0,ou||(ou=!0,au=e)}function Pu(e,t){var n=iu;iu=!0;try{return e(t)}finally{(iu=n)||eu||Cu(1073741823,!1)}}function Lu(e,t){if(iu&&!uu){uu=!0;try{return e(t)}finally{uu=!1}}return e(t)}function Bu(e,t,n){if(lu)return e(t,n);iu||eu||0===ru||(Cu(ru,!1),ru=0);var r=lu,o=iu;iu=lu=!0;try{return e(t,n)}finally{lu=r,(iu=o)||eu||Cu(1073741823,!1)}}function Iu(e,t,n,r,o){var a=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||i("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Ir(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);i("171"),u=void 0}if(1===n.tag){var l=n.type;if(Ir(l)){n=jr(n,l,u);break e}}n=u}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=$a(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ui(),Qa(a,o),Yi(a,r),r}function Au(e,t,n,r){var o=t.current;return Iu(e,t,n,o=Vi(bu(),o),r)}function Ru(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Nu(e){var t=1073741822-25*(1+((1073741822-bu()+500)/25|0));t>=Ci&&(t=Ci-1),this._expirationTime=Ci=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ju(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Fu(e,t,n){e={current:t=Gr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Du(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Uu(e,t,n,r,o){var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=Ru(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Fu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Ru(a._internalRoot);u.call(e)}}Lu(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return Ru(a._internalRoot)}function Wu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Du(t)||i("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ee=function(e,t,n){switch(t){case"input":if(wt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=F(r);o||i("90"),ze(r),wt(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Nu.prototype.render=function(e){this._defer||i("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new ju;return Iu(e,t,null,n,r._onCommit),r},Nu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Nu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||i("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&i("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Eu(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Nu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ju.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ju.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&i("191",n),n()}}},Fu.prototype.render=function(e,t){var n=this._internalRoot,r=new ju;return null!==(t=void 0===t?null:t)&&r.then(t),Au(e,n,null,r._onCommit),r},Fu.prototype.unmount=function(e){var t=this._internalRoot,n=new ju;return null!==(e=void 0===e?null:e)&&n.then(e),Au(null,t,null,n._onCommit),n},Fu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new ju;return null!==(n=void 0===n?null:n)&&o.then(n),Au(t,r,e,o._onCommit),o},Fu.prototype.createBatch=function(){var e=new Nu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Be=Pu,Ie=Bu,Ae=function(){eu||0===ru||(Cu(ru,!1),ru=0)};var Hu={createPortal:Wu,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?i("188"):i("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Du(t)||i("200"),Uu(null,e,t,!0,n)},render:function(e,t,n){return Du(t)||i("200"),Uu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Du(n)||i("200"),(null==e||void 0===e._reactInternalFiber)&&i("38"),Uu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Du(e)||i("40"),!!e._reactRootContainer&&(Lu(function(){Uu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Wu.apply(void 0,arguments)},unstable_batchedUpdates:Pu,unstable_interactiveUpdates:Bu,flushSync:function(e,t){eu&&i("187");var n=iu;iu=!0;try{return $i(e,t)}finally{iu=n,Cu(1073741823,!1)}},unstable_createRoot:function(e,t){return Du(e)||i("299","unstable_createRoot"),new Fu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=iu;iu=!0;try{$i(e)}finally{(iu=t)||eu||Cu(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[N,j,F,M.injectEventPluginsByName,v,G,function(e){E(e,z)},Pe,Le,On,L]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ur=Hr(function(e){return t.onCommitFiberRoot(n,e)}),Wr=Hr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:Ge.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:R,bundleType:0,version:"16.8.1",rendererPackageName:"react-dom"});var zu={default:Hu},Gu=zu&&Hu||zu;e.exports=Gu.default||Gu},function(e,t,n){"use strict";e.exports=n(430)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,a=-1,i=-1,u=!1,l=!1;function s(){if(!u){var e=n.expirationTime;l?T():l=!0,w(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var a=o,u=i;o=e,i=t;try{var l=r()}finally{o=a,i=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,s()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===a&&null!==n&&1===n.priorityLevel){u=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?s():l=!1}}}function d(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var a=t.unstable_now();if(!(n.expirationTime<=a))break;do{c()}while(null!==n&&n.expirationTime<=a)}else if(null!==n)do{c()}while(null!==n&&!S())}finally{u=!1,r=o,null!==n?s():l=!1,f()}}var p,h,g=Date,y="function"==typeof setTimeout?setTimeout:void 0,m="function"==typeof clearTimeout?clearTimeout:void 0,v="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function x(e){p=v(function(t){m(h),e(t)}),h=y(function(){b(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var k=performance;t.unstable_now=function(){return k.now()}}else t.unstable_now=function(){return g.now()};var w,T,S,C=null;if("undefined"!=typeof window?C=window:void 0!==e&&(C=e),C&&C._schedMock){var E=C._schedMock;w=E[0],T=E[1],S=E[2],t.unstable_now=E[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var _=null,O=function(e){if(null!==_)try{_(e)}finally{_=null}};w=function(e){null!==_?setTimeout(w,0,e):(_=e,setTimeout(O,0,!1))},T=function(){_=null},S=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof v&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var M=null,P=!1,L=-1,B=!1,I=!1,A=0,R=33,N=33;S=function(){return A<=t.unstable_now()};var j=new MessageChannel,F=j.port2;j.port1.onmessage=function(){P=!1;var e=M,n=L;M=null,L=-1;var r=t.unstable_now(),o=!1;if(0>=A-r){if(!(-1!==n&&n<=r))return B||(B=!0,x(D)),M=e,void(L=n);o=!0}if(null!==e){I=!0;try{e(o)}finally{I=!1}}};var D=function(e){if(null!==M){x(D);var t=e-A+N;t<N&&R<N?(8>t&&(t=8),N=t<R?R:t):R=t,A=e+N,P||(P=!0,F.postMessage(void 0))}else B=!1};w=function(e,t){M=e,L=t,I||0>t?F.postMessage(void 0):B||(B=!0,x(D))},T=function(){M=null,P=!1,L=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,i=a;o=e,a=t.unstable_now();try{return n()}finally{o=r,a=i,f()}},t.unstable_scheduleCallback=function(e,r){var i=-1!==a?a:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=i+r.timeout;else switch(o){case 1:r=i+-1;break;case 2:r=i+250;break;case 5:r=i+1073741823;break;case 4:r=i+1e4;break;default:r=i+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{i=null;var u=n;do{if(u.expirationTime>r){i=u;break}u=u.next}while(u!==n);null===i?i=n:i===n&&(n=e,s()),(r=i.previous).next=i.previous=e,e.next=i,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,i=a;o=n,a=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,a=i,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<i||S())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(49))},function(e,t,n){"use strict";var r=n(432);function o(){}e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,g=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116;function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case s:return e;default:return t}}case y:case g:case a:return t}}}function v(e){return m(e)===d}t.typeOf=m,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=y,t.Memo=g,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===g||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p)},t.isAsyncMode=function(e){return v(e)||m(e)===f},t.isConcurrentMode=v,t.isContextConsumer=function(e){return m(e)===c},t.isContextProvider=function(e){return m(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return m(e)===p},t.isFragment=function(e){return m(e)===i},t.isLazy=function(e){return m(e)===y},t.isMemo=function(e){return m(e)===g},t.isPortal=function(e){return m(e)===a},t.isProfiler=function(e){return m(e)===l},t.isStrictMode=function(e){return m(e)===u},t.isSuspense=function(e){return m(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r,o;r="undefined"!=typeof window?window:this,o=function(){function e(e){return e instanceof Date?e:isNaN(e)?/^\d+$/.test(e)?new Date(t(e)):(e=(e||"").trim().replace(/\.\d+/,"").replace(/-/,"/").replace(/-/,"/").replace(/(\d)T(\d)/,"$1 $2").replace(/Z/," UTC").replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"),new Date(e)):new Date(t(e))}function t(e){return parseInt(e)}function n(e,n,r){n=c[n]?n:c[r]?r:"en";for(var o=0,a=e<0?1:0,i=e=Math.abs(e);e>=f[o]&&o<d;o++)e/=f[o];return(e=t(e))>(0===(o*=2)?9:1)&&(o+=1),c[n](e,o,i)[a].replace("%s",e)}function r(t,n){return((n=n?e(n):new Date)-e(t))/1e3}function o(e){return a(e,"data-timeago")||a(e,"datetime")}function a(e,t){return e.getAttribute?e.getAttribute(t):e.attr?e.attr(t):void 0}function i(e,t){this.nowDate=e,this.defaultLocale=t||"en"}function u(e,t){return new i(e,t)}var l="second_minute_hour_day_week_month_year".split("_"),s="秒_分钟_小时_天_周_月_年".split("_"),c={en:function(e,t){if(0===t)return["just now","right now"];var n=l[parseInt(t/2)];return e>1&&(n+="s"),[e+" "+n+" ago","in "+e+" "+n]},zh_CN:function(e,t){if(0===t)return["刚刚","片刻后"];var n=s[parseInt(t/2)];return[e+n+"前",e+n+"后"]}},f=[60,60,24,7,365/7/12,12],d=6,p="data-tid",h={};return i.prototype.doRender=function(e,t,o){var a,i=r(t,this.nowDate),u=this;e.innerHTML=n(i,o,this.defaultLocale),h[a=setTimeout(function(){u.doRender(e,t,o),delete h[a]},Math.min(1e3*function(e){for(var t=1,n=0,r=Math.abs(e);e>=f[n]&&n<d;n++)e/=f[n],t*=f[n];return r=(r%=t)?t-r:t,Math.ceil(r)}(i),2147483647))]=0,function(e,t){e.setAttribute?e.setAttribute(p,t):e.attr&&e.attr(p,t)}(e,a)},i.prototype.format=function(e,t){return n(r(e,this.nowDate),t,this.defaultLocale)},i.prototype.render=function(e,t){void 0===e.length&&(e=[e]);for(var n=0,r=e.length;n<r;n++)this.doRender(e[n],o(e[n]),t)},i.prototype.setLocale=function(e){this.defaultLocale=e},u.register=function(e,t){c[e]=t},u.cancel=function(e){var t;if(e)(t=a(e,p))&&(clearTimeout(t),delete h[t]);else{for(t in h)clearTimeout(t);h={}}},u},e.exports?(e.exports=o(),e.exports.default=e.exports):r.timeago=o()},function(e,t){t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n",t.homedir=function(){return"/"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(9),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(1)),a=i(n(21));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=t.app,r=a.default.getDetailClass(n);return{self:r.getFooter(t),child:r.getFooterChild(t),childLike:r.getFooterChildLike(t),childMoney:r.getFooterChildMoney(t),childShare:r.getFooterChildShare(t)}}return r(e,null,[{key:"getDetailClass",value:function(e){return e.screenMode===o.default.screenModeUndispLabel||e.screenMode===o.default.screenModeSmallLabel?DetailModal:DetailRight}},{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];switch(e.screenMode){case o.default.screenModeUndispLabel:case o.default.screenModeSmallLabel:return"100%";case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:return a.default.getDetailClass(e).getWidth(e,t)}}},{key:"padding",get:function(){return 20}},{key:"margin",get:function(){return 5}}]),e}();t.default=u},function(e,t,n){(function(e){function n(e,t){for(var n=0,r=e.length-1;r>=0;r--){var o=e[r];"."===o?e.splice(r,1):".."===o?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}var r=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(e){return r.exec(e).slice(1)};function a(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}t.resolve=function(){for(var t="",r=!1,o=arguments.length-1;o>=-1&&!r;o--){var i=o>=0?arguments[o]:e.cwd();if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(t=i+"/"+t,r="/"===i.charAt(0))}return(r?"/":"")+(t=n(a(t.split("/"),function(e){return!!e}),!r).join("/"))||"."},t.normalize=function(e){var r=t.isAbsolute(e),o="/"===i(e,-1);return(e=n(a(e.split("/"),function(e){return!!e}),!r).join("/"))||r||(e="."),e&&o&&(e+="/"),(r?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(a(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,n){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var o=r(e.split("/")),a=r(n.split("/")),i=Math.min(o.length,a.length),u=i,l=0;l<i;l++)if(o[l]!==a[l]){u=l;break}var s=[];for(l=u;l<o.length;l++)s.push("..");return(s=s.concat(a.slice(u))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=o(e),n=t[0],r=t[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},t.basename=function(e,t){var n=o(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){return o(e)[3]};var i="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(94))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=c(n(16)),i=c(n(1)),u=c(n(9)),l=c(n(5)),s=c(n(76));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{self:e.getSelf(t),header:e.getHeader(t),headerSearchIcon:e.getHeaderSearchIcon(t),headerInput:e.getHeaderInput(t),headerUpdateIcon:e.getHeaderUpdateIcon(t),ol:e.getOl(t)}}return o(e,null,[{key:"iconSize",get:function(){return"25px"}},{key:"liHeight",get:function(){return 90}}]),o(e,null,[{key:"getSelf",value:function(e){e.app;var t=u.default.getLayoutBlock({width:"100%",height:"100%",margin:"0 auto"}),n=u.default.getContentBase({}),r=u.default.getAnimationBase({});return u.default.get({layout:t,content:n,animation:r})}},{key:"getHeader",value:function(t){var n=t.app,o=n.screenMode===i.default.screenModeUndispLabel||n.screenMode===i.default.screenModeSmallLabel?{borderBottom:l.default.border,borderLeft:0}:{borderBottom:l.default.border,borderLeft:0,borderRight:l.default.border},a=u.default.getLayoutFlex(r({width:"100%",height:e.liHeight/2+"px"},o,{background:l.default.lightRGB})),s=u.default.getContentBase({textAlign:"left"}),c=u.default.getAnimationBase({transition:l.default.getTransition(n)});return u.default.get({layout:a,content:s,animation:c})}},{key:"getHeaderSearchIcon",value:function(e){var t=e.app,n=u.default.getLayoutBlock({width:"50px",height:"45px"}),r=u.default.getContentBase({}),o=u.default.getAnimationBase({transition:l.default.getTransition(t)});return u.default.get({layout:n,content:r,animation:o})}},{key:"getHeaderInput",value:function(){var e=u.default.getLayoutInlineBlock({width:"calc( 100% - 100px )",height:"25px",padding:"0px 0px 0px 10px",background:l.default.whiteRGB,outline:"none",resize:"none",border:l.default.border,borderRadius:"3px",WebkitAppearance:"none"}),t=u.default.getContentBase({whiteSpace:"nowrap",fontSize:"12px",lineHeight:"2",textAlign:"left"}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getHeaderUpdateIcon",value:function(e){var t=e.app,n=u.default.getLayoutFlex({width:"50px",height:"50px",alignItems:"center",justifyContent:"center"}),r=u.default.getContentBase({cursor:"pointer"}),o=u.default.getAnimationBase({transition:l.default.getTransition(t)});return u.default.get({layout:n,content:r,animation:o})}},{key:"getOl",value:function(e){var t=e.app,n=u.default.getLayoutBlock({width:"100%",height:"calc( 100% - "+s.default.headerHeight+"px )",overflow:"scroll"}),r=u.default.getAnimationBase({transition:l.default.getTransition(t)});return u.default.get({layout:n,content:{},animation:r})}},{key:"getLiActive",value:function(){var t=u.default.getLayoutBlock({position:"relative",width:"initial",height:e.liHeight+"px",padding:"10px",borderBottom:l.default.border,zIndex:3,borderRight:"1px solid "+l.default.white,background:l.default.whiteRGB}),n=u.default.getContentBase(),r=u.default.getAnimationBase();return u.default.get({layout:t,content:n,animation:r})}},{key:"getLiUnactive",value:function(){var t=u.default.getLayoutBlock({position:"relative",width:"initial",height:e.liHeight+"px",padding:"10px",borderBottom:l.default.border,background:l.default.offWhiteRGB,borderRight:l.default.border}),n=u.default.getContentBase(),r=u.default.getAnimationBase();return u.default.get({layout:t,content:n,animation:r})}},{key:"getUpper",value:function(){var e=u.default.getLayoutBlock({width:"100%",height:"20px"}),t=u.default.getContentBase({fontSize:"10px"}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getUpperSpace",value:function(){var e=u.default.getLayoutInlineBlock({width:"20%"}),t=u.default.getContentBase(),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getUpperRight",value:function(){var e=u.default.getLayoutInlineBlock({width:"80%"}),t=u.default.getContentBase({textAlign:"left"}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottom",value:function(){var e=u.default.getLayoutBlock({width:"100%",height:"50px"}),t=u.default.getContentBase(),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottomIcon",value:function(){var e=u.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:"url("+a.default.protcol+":"+a.default.assetsPath+'favicon.ico")',backgroundPosition:"50% 15%",backgroundSize:"20px 20px",backgroundRepeat:"no-repeat"}),t=u.default.getContentBase(),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}},{key:"getBottomPost",value:function(){var e=u.default.getLayoutInlineBlock({width:"80%",flexGrow:2}),t=u.default.getContentBase({lineHeight:2,textAlign:"left"}),n=u.default.getAnimationBase();return u.default.get({layout:e,content:t,animation:n})}}]),e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(9)),a=u(n(5)),i=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=e.getSelf(t),r=e.getColumns(t),o=e.getColumn(t),a=e.getColumnLast(t),i=e.getImg(t),u=e.getWrap(t);return{self:n,columns:r,column:o,columnLast:a,img:i,imgWrap:e.getImgWrap(t),wrap:u,names:e.getNames(t),namesAddConnection:e.getNamesAddConnection(t)}}return r(e,null,[{key:"getWidth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0;switch(e.screenMode){case i.default.screenModeUndispLabel:case i.default.screenModeSmallLabel:n="100.0%";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:n="300px"}return t?o.default.trimUnit(n):n}},{key:"getTransform",value:function(e){var t="translate3d( 0px ,0px, 0px )";switch(e.screenMode){case i.default.screenModeUndispLabel:case i.default.screenModeSmallLabel:t="translate3d( 0px ,0px, 0px )";break;case i.default.screenModeMiddleLabel:e.isOpenDetail,t="translate3d( 0px ,0px, 0px )";break;case i.default.screenModeLargeLabel:t="translate3d( 0px ,0px, 0px )"}return t}}]),r(e,null,[{key:"getSelf",value:function(t){var n=t.app,r=o.default.getLayoutInlineBlock({position:"relative",width:e.getWidth(n),minWidth:e.getWidth(n),maxWidth:"inherit",height:"100%",WebkitOverflowScrolling:"touch",overflow:"scroll",borderTop:0,borderRight:a.default.border,borderBottom:0,borderLeft:0}),i=o.default.getAnimationBase();return o.default.get({layout:r,content:{},animation:i})}},{key:"getColumns",value:function(){var e=o.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",height:"auto",borderBottom:a.default.border,borderRight:a.default.border,background:a.default.whiteRGB,overflow:"scroll"}),t=o.default.getContentBase({whiteSpace:"nowrap"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:t,animation:n})}},{key:"getColumn",value:function(){var e=o.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",borderBottom:a.default.border,borderRight:a.default.border}),t=o.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:t,animation:n})}},{key:"getColumnLast",value:function(){var e=o.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",marginLeft:"20px"}),t=o.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:t,animation:n})}},{key:"getWrap",value:function(){var e=o.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:a.default.border}),t=o.default.getContentBase({textAlign:"left",content:"getWrap"}),n=o.default.getAnimationBase({});return o.default.get({layout:e,content:t,animation:n})}},{key:"getImgWrap",value:function(){var e=o.default.getLayoutBlock({flexGrow:1,margin:"22px 0px 0px 0px",width:"60px",maxWidth:"60px",minWidth:"60px",height:"60px"}),t=o.default.getContentBase({}),n=o.default.getAnimationBase({});return o.default.get({layout:e,content:t,animation:n})}},{key:"getImg",value:function(){var e=o.default.getLayoutInlineBlock({borderRadius:"50%",width:"34px",height:"34px"}),t=o.default.getContentBase({}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:t,animation:n})}},{key:"getNamesAddConnection",value:function(){var e=o.default.getLayoutBlock({padding:"5px 10px 5px 5px",flexGrow:4}),t=o.default.getContentBase({fontSize:"12px",textAlign:"left",lineHeight:"2"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:t,animation:n})}},{key:"getNames",value:function(){var e=o.default.getLayoutBlock({flexGrow:4}),t=o.default.getContentBase({fontSize:"12px",textAlign:"left",lineHeight:"1.7"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:t,animation:n})}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(443)),a=d(n(28)),i=d(n(8)),u=d(n(45)),l=d(n(210)),s=d(n(470)),c=d(n(471)),f=d(n(472));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(){function e(t,n,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var l=u.default.server,s=i.default.PORTS;this.ws=(0,o.default)("https://"+l+":"+s.SOCKET_IO,{forceNew:!0}),this.talknIndex=t,this.store=n,this.state=r,this.connectionKeys=[],this.connection=a,this.onHandleAPI(),this.onCatchMeAPI(),this.onCatchConnectionAPI(),this.onTalknAPI(),window.__talknAPI__[t]=this}return r(e,[{key:"onHandleAPI",value:function(){for(var e=l.default,t=this.talknIndex,n=Object.keys(e),r=n.length,o=0;o<r;o++){var a=n[o];this[a]=this.getHandleAPI(t,a)}}},{key:"onCatchMeAPI",value:function(){var e=this.talknIndex,t=this.getToMeAPI(e,s.default);this.on(a.default.CATCH_ME_KEY,t)}},{key:"onCatchConnectionAPI",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.connection,t=this.talknIndex,n=this.getCatchConnectionAPI(t,f.default);this.on(e,n)}},{key:"offCatchConnectionAPI",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.connection;this.talknIndex;this.off(e)}},{key:"onTalknAPI",value:function(){for(var e=c.default,t=this.talknIndex,n=Object.keys(e),r=n.length,o=0;o<r;o++){var i=n[o],u=i.replace(a.default.CLIENT_TO_SERVER_EMIT,""),l=e[i];this[u]=this.getTalknAPI(t,i,l)}}},{key:"on",value:function(e,t){this.connectionKeys.includes(e)||(this.ws.on(e,t),this.connectionKeys.push(e))}},{key:"off",value:function(e){this.ws.off(e),delete ws.indexConnectionMap[e]}},{key:"getHandleAPI",value:function(t,n){return function(r){if(e.handle(t)){var o=l.default[n](r);window.talknAPI.store.getState();return window.talknAPI.store.dispatch(o)}}}},{key:"getTalknAPI",value:function(t,n,r){var o=this;return function(i){if(e.handle(t)){var u=window.talknAPI.store.getState(),l=a.default.getRequestState(n,u,i),s=a.default.getRequestActionState(n,i),c=r(u,l,s),f=c.requestState,d=c.actionState;return o.ws.emit(f.type,f),window.talknAPI.store.dispatch(d)}}}},{key:"getToMeAPI",value:function(t,n){return function(r){if(e.handle(t)){var o=n(r);return window.talknAPI.store.dispatch(o)}}}},{key:"getCatchConnectionAPI",value:function(t,n){return function(r){if(e.handle(t)){var o=n(r);return window.talknAPI.store.dispatch(o)}}}}],[{key:"handle",value:function(e){if(void 0===__talknAPI__[e])throw"BAD TALKN_API HANDLE TALKN_INDEX "+e+".";return window.talknAPI=window.__talknAPI__[e],!0}}]),e}();t.default=p},function(e,t,n){var r=n(444),o=n(139),a=n(201),i=n(96)("socket.io-client");e.exports=t=l;var u=t.managers={};function l(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),l=o.source,s=o.id,c=o.path,f=u[s]&&c in u[s].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||f?(i("ignoring socket cache for %s",l),n=a(l,t)):(u[s]||(i("new io instance for %s",l),u[s]=a(l,t)),n=u[s]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=l,t.Manager=n(201),t.Socket=n(207)},function(e,t,n){var r=n(198),o=n(96)("socket.io-client:url");e.exports=function(e,t){var n=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),o("parse %s",e),n=r(e));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var a=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+a+":"+n.port,n.href=n.protocol+"://"+a+(t&&t.port===n.port?"":":"+n.port),n}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,a=o-(n||o);e.diff=a,e.prev=n,e.curr=o,n=o;for(var i=new Array(arguments.length),u=0;u<i.length;u++)i[u]=arguments[u];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var l=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;l++;var o=t.formatters[r];if("function"==typeof o){var a=i[l];n=o.call(e,a),i.splice(l,1),l--}return n}),t.formatArgs.call(e,i),(r.log||t.log||console.log.bind(console)).apply(e,i)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var a=t.instances[n];a.enabled=t.enabled(a.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(138),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(447)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,a=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(a=o))}),e.splice(a,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(94))},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,a=o-(n||o);e.diff=a,e.prev=n,e.curr=o,n=o;for(var i=new Array(arguments.length),u=0;u<i.length;u++)i[u]=arguments[u];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var l=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;l++;var o=t.formatters[r];if("function"==typeof o){var a=i[l];n=o.call(e,a),i.splice(l,1),l--}return n}),t.formatArgs.call(e,i),(r.log||t.log||console.log.bind(console)).apply(e,i)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var a=t.instances[n];a.enabled=t.enabled(a.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(138),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){var r=n(199),o=n(200),a=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===a.call(Blob),u="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===a.call(File);t.deconstructPacket=function(e){var t=[],n=e.data,a=e;return a.data=function e(t,n){if(!t)return t;if(o(t)){var a={_placeholder:!0,num:n.length};return n.push(t),a}if(r(t)){for(var i=new Array(t.length),u=0;u<t.length;u++)i[u]=e(t[u],n);return i}if("object"==typeof t&&!(t instanceof Date)){var i={};for(var l in t)i[l]=e(t[l],n);return i}return t}(n,t),a.attachments=t.length,{packet:a,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var a in t)t[a]=e(t[a],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,a=e;!function e(l,s,c){if(!l)return l;if(i&&l instanceof Blob||u&&l instanceof File){n++;var f=new FileReader;f.onload=function(){c?c[s]=this.result:a=this.result,--n||t(a)},f.readAsArrayBuffer(l)}else if(r(l))for(var d=0;d<l.length;d++)e(l[d],d,l);else if("object"==typeof l&&!o(l))for(var p in l)e(l[p],p,l)}(a),n||t(a)}},function(e,t,n){"use strict";t.byteLength=function(e){var t=s(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=s(e),r=n[0],i=n[1],u=new a(function(e,t,n){return 3*(t+n)/4-n}(0,r,i)),l=0,c=i>0?r-4:r,f=0;f<c;f+=4)t=o[e.charCodeAt(f)]<<18|o[e.charCodeAt(f+1)]<<12|o[e.charCodeAt(f+2)]<<6|o[e.charCodeAt(f+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===i&&(t=o[e.charCodeAt(f)]<<2|o[e.charCodeAt(f+1)]>>4,u[l++]=255&t);1===i&&(t=o[e.charCodeAt(f)]<<10|o[e.charCodeAt(f+1)]<<4|o[e.charCodeAt(f+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,a=[],i=0,u=n-o;i<u;i+=16383)a.push(c(e,i,i+16383>u?u:i+16383));1===o?(t=e[n-1],a.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],a.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return a.join("")};for(var r=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,l=i.length;u<l;++u)r[u]=i[u],o[i.charCodeAt(u)]=u;function s(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var o,a,i=[],u=t;u<n;u+=3)o=(e[u]<<16&16711680)+(e[u+1]<<8&65280)+(255&e[u+2]),i.push(r[(a=o)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var a,i,u=8*o-r-1,l=(1<<u)-1,s=l>>1,c=-7,f=n?o-1:0,d=n?-1:1,p=e[t+f];for(f+=d,a=p&(1<<-c)-1,p>>=-c,c+=u;c>0;a=256*a+e[t+f],f+=d,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=r;c>0;i=256*i+e[t+f],f+=d,c-=8);if(0===a)a=1-s;else{if(a===l)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,r),a-=s}return(p?-1:1)*i*Math.pow(2,a-r)},t.write=function(e,t,n,r,o,a){var i,u,l,s=8*a-o-1,c=(1<<s)-1,f=c>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:a-1,h=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(u=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),(t+=i+f>=1?d/l:d*Math.pow(2,1-f))*l>=2&&(i++,l/=2),i+f>=c?(u=0,i=c):i+f>=1?(u=(t*l-1)*Math.pow(2,o),i+=f):(u=t*Math.pow(2,f-1)*Math.pow(2,o),i=0));o>=8;e[n+p]=255&u,p+=h,u/=256,o-=8);for(i=i<<o|u,s+=o;s>0;e[n+p]=255&i,p+=h,i/=256,s-=8);e[n+p-h]|=128*g}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){e.exports=n(453),e.exports.parser=n(69)},function(e,t,n){var r=n(202),o=n(68),a=n(99)("engine.io-client:socket"),i=n(206),u=n(69),l=n(198),s=n(97);function c(e,t){if(!(this instanceof c))return new c(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=l(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=l(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=s.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||null,this.key=t.key||null,this.passphrase=t.passphrase||null,this.cert=t.cert||null,this.ca=t.ca||null,this.ciphers=t.ciphers||null,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=c,c.priorWebsocketSuccess=!1,o(c.prototype),c.protocol=u.protocol,c.Socket=c,c.Transport=n(142),c.transports=n(202),c.parser=n(69),c.prototype.createTransport=function(e){a('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=u.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},c.prototype.open=function(){var e;if(this.rememberUpgrade&&c.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},c.prototype.setTransport=function(e){a("setting transport %s",e.name);var t=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},c.prototype.probe=function(e){a('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(a('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(a('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;c.priorWebsocketSuccess="websocket"===t.name,a('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(a("changing transport and sending upgrade packet"),d(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{a('probe transport "%s" failed',e);var i=new Error("probe error");i.transport=t.name,r.emit("upgradeError",i)}}))}function i(){n||(n=!0,d(),t.close(),t=null)}function u(n){var o=new Error("probe error: "+n);o.transport=t.name,i(),a('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function l(){u("transport closed")}function s(){u("socket closed")}function f(e){t&&e.name!==t.name&&(a('"%s" works - aborting "%s"',e.name,t.name),i())}function d(){t.removeListener("open",o),t.removeListener("error",u),t.removeListener("close",l),r.removeListener("close",s),r.removeListener("upgrading",f)}c.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",u),t.once("close",l),this.once("close",s),this.once("upgrading",f),t.open()},c.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",c.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},c.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a('packet received with socket readyState "%s"',this.readyState)},c.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},c.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},c.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},c.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},c.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},c.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},c.prototype.write=c.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},c.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},c.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),a("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},c.prototype.onError=function(e){a("socket error %j",e),c.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},c.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},c.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~i(this.transports,e[n])&&t.push(e[n]);return t}},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){var r=n(141),o=n(203),a=n(68),i=n(98),u=n(99)("engine.io-client:polling-xhr");function l(){}function s(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,"undefined"!=typeof location){var t="https:"===location.protocol,n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}}function c(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}if(e.exports=s,e.exports.Request=c,i(s,o),s.prototype.supportsBinary=!0,s.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new c(e)},s.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},s.prototype.doPoll=function(){u("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},a(c.prototype),c.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new r(e),n=this;try{u("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&t.setRequestHeader(o,this.extraHeaders[o])}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=!0),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{var e=t.getResponseHeader("Content-Type");n.supportsBinary&&"application/octet-stream"===e&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout(function(){n.onError(t.status)},0))},u("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout(function(){n.onError(e)},0)}"undefined"!=typeof document&&(this.index=c.requestsCount++,c.requests[this.index]=this)},c.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},c.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},c.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},c.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=l:this.xhr.onreadystatechange=l,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete c.requests[this.index],this.xhr=null}},c.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},c.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},c.prototype.abort=function(){this.cleanup()},c.requestsCount=0,c.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",d);else if("function"==typeof addEventListener){var f="onpagehide"in self?"pagehide":"unload";addEventListener(f,d,!1)}function d(){for(var e in c.requests)c.requests.hasOwnProperty(e)&&c.requests[e].abort()}},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),a=new Uint8Array(n-t),i=t,u=0;i<n;i++,u++)a[u]=o[i];return a.buffer}},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,a.count=e,0===e?t():a;function a(e,n){if(a.count<=0)throw new Error("after called too many times");--a.count,e?(o=!0,t(e),t=r):0!==a.count||o||t(null,n)}}},function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,o,a=String.fromCharCode;function i(e){for(var t,n,r=[],o=0,a=e.length;o<a;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<a?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function u(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function l(e,t){return a(e>>t&63|128)}function s(e,t){if(0==(4294967168&e))return a(e);var n="";return 0==(4294965248&e)?n=a(e>>6&31|192):0==(4294901760&e)?(u(e,t)||(e=65533),n=a(e>>12&15|224),n+=l(e,6)):0==(4292870144&e)&&(n=a(e>>18&7|240),n+=l(e,12),n+=l(e,6)),n+=a(63&e|128)}function c(){if(o>=r)throw Error("Invalid byte index");var e=255&n[o];if(o++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function f(e){var t,a;if(o>r)throw Error("Invalid byte index");if(o==r)return!1;if(t=255&n[o],o++,0==(128&t))return t;if(192==(224&t)){if((a=(31&t)<<6|c())>=128)return a;throw Error("Invalid continuation byte")}if(224==(240&t)){if((a=(15&t)<<12|c()<<6|c())>=2048)return u(a,e)?a:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(a=(7&t)<<18|c()<<12|c()<<6|c())>=65536&&a<=1114111)return a;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=i(e),o=r.length,a=-1,u="";++a<o;)u+=s(r[a],n);return u},decode:function(e,t){var u=!1!==(t=t||{}).strict;n=i(e),r=n.length,o=0;for(var l,s=[];!1!==(l=f(u));)s.push(l);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=a((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=a(t);return o}(s)}}},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,a="";for(n=0;n<o;n+=3)a+=e[r[n]>>2],a+=e[(3&r[n])<<4|r[n+1]>>4],a+=e[(15&r[n+1])<<2|r[n+2]>>6],a+=e[63&r[n+2]];return o%3==2?a=a.substring(0,a.length-1)+"=":o%3==1&&(a=a.substring(0,a.length-2)+"=="),a},t.decode=function(e){var t,r,o,a,i,u=.75*e.length,l=e.length,s=0;"="===e[e.length-1]&&(u--,"="===e[e.length-2]&&u--);var c=new ArrayBuffer(u),f=new Uint8Array(c);for(t=0;t<l;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],a=n[e.charCodeAt(t+2)],i=n[e.charCodeAt(t+3)],f[s++]=r<<2|o>>4,f[s++]=(15&o)<<4|a>>2,f[s++]=(3&a)<<6|63&i;return c}}()},function(e,t){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),a=n&&n.prototype.append&&n.prototype.getBlob;function i(e){return e.map(function(e){if(e.buffer instanceof ArrayBuffer){var t=e.buffer;if(e.byteLength!==t.byteLength){var n=new Uint8Array(e.byteLength);n.set(new Uint8Array(t,e.byteOffset,e.byteLength)),t=n.buffer}return t}return e})}function u(e,t){t=t||{};var r=new n;return i(e).forEach(function(e){r.append(e)}),t.type?r.getBlob(t.type):r.getBlob()}function l(e,t){return new Blob(i(e),t||{})}"undefined"!=typeof Blob&&(u.prototype=Blob.prototype,l.prototype=Blob.prototype),e.exports=r?o?Blob:l:a?u:void 0},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,a=o-(n||o);e.diff=a,e.prev=n,e.curr=o,n=o;for(var i=new Array(arguments.length),u=0;u<i.length;u++)i[u]=arguments[u];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var l=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;l++;var o=t.formatters[r];if("function"==typeof o){var a=i[l];n=o.call(e,a),i.splice(l,1),l--}return n}),t.formatArgs.call(e,i),(r.log||t.log||console.log.bind(console)).apply(e,i)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var a=t.instances[n];a.enabled=t.enabled(a.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(138),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){(function(t){var r=n(203),o=n(98);e.exports=c;var a,i=/\n/g,u=/\\n/g;function l(){}function s(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{}}function c(e){if(r.call(this,e),this.query=this.query||{},!a){var t=s();a=t.___eio=t.___eio||[]}this.index=a.length;var n=this;a.push(function(e){n.onData(e)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){n.script&&(n.script.onerror=l)},!1)}o(c,r),c.prototype.supportsBinary=!1,c.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},c.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},c.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),a=document.createElement("textarea"),l=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=l,o.method="POST",o.setAttribute("accept-charset","utf-8"),a.name="d",o.appendChild(a),document.body.appendChild(o),this.form=o,this.area=a}function s(){c(),t()}function c(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),c(),e=e.replace(u,"\\\n"),this.area.value=e.replace(i,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&s()}:this.iframe.onload=s}}).call(this,n(49))},function(e,t,n){(function(t){var r,o,a=n(142),i=n(69),u=n(97),l=n(98),s=n(205),c=n(99)("engine.io-client:websocket");if("undefined"!=typeof WebSocket)r=WebSocket;else if("undefined"!=typeof self)r=self.WebSocket||self.MozWebSocket;else try{o=n(466)}catch(e){}var f=r||o;function d(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=r&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=o),a.call(this,e)}e.exports=d,l(d,a),d.prototype.name="websocket",d.prototype.supportsBinary=!0,d.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},d.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},d.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,a=r;o<a;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var a={};if(e.options&&(a.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(a.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,a)}catch(e){c("websocket closed before onclose event")}--r||u()})}(e[o]);function u(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},d.prototype.onClose=function(){a.prototype.onClose.call(this)},d.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},d.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||(e.b64=1),(e=u.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},d.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===d.prototype.name)}}).call(this,n(140).Buffer)},function(e,t){},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(16)),o=a(n(28));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{protocol:{type:String,default:o.default.TALKN_PROTOCOL},contentType:{type:String,default:"text/html"},serverMetas:{title:{type:String,default:"talkn"},keywords:{type:String,default:"talkn, blockchain, art, internet"},description:{type:String,default:r.default.description},"og:type":{type:String,default:""},"og:title":{type:String,default:"talkn"},"og:image":{type:String,default:"//"+r.default.assetsImgPath+"talkn_logo1.png"},"og:description":{type:String,default:r.default.description},"og:locale":{type:String,default:""},"fb:app_id":{type:String,default:""},"fb:page_id":{type:String,default:""},"twitter:app:country":{type:String,default:""},"twitter:card":{type:String,default:""},"twitter:title":{type:String,default:""},"twitter:description":{type:String,default:""},"twitter:site":{type:String,default:""},"twitter:image":{type:String,default:""},"twitter:app:name:iphone":{type:String,default:""},"twitter:app:id:iphone":{type:String,default:""},"twitter:app:url:iphone":{type:String,default:""},"twitter:app:name:googleplay":{type:String,default:""},"twitter:app:id:googleplay":{type:String,default:""},"twitter:app:url:googleplay":{type:String,default:""},"al:ios:app_name":{type:String,default:""},"al:ios:app_store_id":{type:String,default:""},"al:ios:url":{type:String,default:""},"al:android:app_name":{type:String,default:""},"al:android:app_store_id":{type:String,default:""},"al:android:package":{type:String,default:""},"al:android:url":{type:String,default:""}},links:{type:[],default:[]},h1s:{type:[],default:[]},iframes:{type:[],default:[]},audios:{type:[],default:[]},videos:{type:[],default:[]}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(28),i=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){var t=""+i.default.SERVER_TO_CLIENT_EMIT+e.type;return o({},e,{type:t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(28),a=(r=o)&&r.__esModule?r:{default:r};var i={};Object.keys(a.default.map).forEach(function(e){var t=""+a.default.CLIENT_TO_SERVER_EMIT+e;i[t]=function(e,t,n){return u[t.type]?u[t.type](e,t,n):{requestState:t,actionState:n}}});var u={post:function(e,t,n){var r=e.app,o=e.thread;if(console.log(r),r.isMediaConnection){var a=o.getMediaSrc(),i=o.getMediaTagType(),u=document.querySelector(i+"[src='"+a+"']");if(console.log("clientToServer @@@@@@@@@ "+talknWindow.mediaCurrentTime),u&&0!==talknWindow.mediaCurrentTime)return t.app.inputCurrentTime=talknWindow.mediaCurrentTime,console.log(t.app.inputCurrentTime),{requestState:t,actionState:n}}return{requestState:t,actionState:n}}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(28),i=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){var t=""+i.default.SERVER_TO_CLIENT_BROADCAST+e.type;return o({},e,{type:t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=null,n=[i.default.updateAction];t=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:null;var u=(0,o.createLogger)({collapsed:!0,duration:!0});n.push(u),0;return(0,r.createStore)(a.default,e,t?t(r.applyMiddleware.apply(void 0,n)):r.applyMiddleware.apply(void 0,n))};var r=n(101),o=n(474),a=(u(n(8)),u(n(45)),u(n(475))),i=u(n(494));function u(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function a(e,t){a.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function l(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function s(e){var t=void 0===e?"undefined":T(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function c(e,t,n,r,f,d,p){p=p||[];var h=(f=f||[]).slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(h,d))return;if("object"===(void 0===r?"undefined":T(r))){if(r.prefilter&&r.prefilter(h,d))return;if(r.normalize){var g=r.normalize(h,d,e,t);g&&(e=g[0],t=g[1])}}}h.push(d)}"regexp"===s(e)&&"regexp"===s(t)&&(e=e.toString(),t=t.toString());var y=void 0===e?"undefined":T(e),m=void 0===t?"undefined":T(t),v="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),b="undefined"!==m||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!v&&b)n(new a(h,t));else if(!b&&v)n(new i(h,e));else if(s(e)!==s(t))n(new o(h,e,t));else if("date"===s(e)&&e-t!=0)n(new o(h,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&n(new o(h,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var x;for(e.length,x=0;x<e.length;x++)x>=t.length?n(new u(h,x,new i(void 0,e[x]))):c(e[x],t[x],n,r,h,x,p);for(;x<t.length;)n(new u(h,x,new a(void 0,t[x++])))}else{var k=Object.keys(e),w=Object.keys(t);k.forEach(function(o,a){var i=w.indexOf(o);i>=0?(c(e[o],t[o],n,r,h,o,p),w=l(w,i)):c(e[o],void 0,n,r,h,o,p)}),w.forEach(function(e){c(void 0,t[e],n,r,h,e,p)})}p.length=p.length-1}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],c(e,t,function(e){e&&r.push(e)},n),r.length?r:void 0}function d(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,a=n.path?n.path.length-1:0;++o<a;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,a=t[n],i=r.path.length-1;for(o=0;o<i;o++)a=a[r.path[o]];switch(r.kind){case"A":e(a[r.path[o]],r.index,r.item);break;case"D":delete a[r.path[o]];break;case"E":case"N":a[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=l(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function p(e){return"color: "+E[e].color+"; font-weight: bold"}function h(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach(function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,a=e.index,i=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+a+"]",i];default:return[]}}(e);n.log.apply(n,["%c "+E[t].text,p(t)].concat(S(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function g(e,t,n,r){switch(void 0===e?"undefined":T(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,S(n)):e[r];case"function":return e(t);default:return e}}function y(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,a=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var a=["action"];return a.push("%c"+String(e.type)),t&&a.push("%c@ "+r),n&&a.push("%c(in "+o.toFixed(2)+" ms)"),a.join(" ")}}(t):o,i=t.collapsed,u=t.colors,l=t.level,s=t.diff,c=void 0===t.titleFormatter;e.forEach(function(o,f){var d=o.started,p=o.startedTime,y=o.action,m=o.prevState,v=o.error,b=o.took,x=o.nextState,w=e[f+1];w&&(x=w.prevState,b=w.started-d);var T=r(y),S="function"==typeof i?i(function(){return x},y,o):i,C=k(p),E=u.title?"color: "+u.title(T)+";":"",_=["color: gray; font-weight: lighter;"];_.push(E),t.timestamp&&_.push("color: gray; font-weight: lighter;"),t.duration&&_.push("color: gray; font-weight: lighter;");var O=a(T,C,b);try{S?u.title&&c?n.groupCollapsed.apply(n,["%c "+O].concat(_)):n.groupCollapsed(O):u.title&&c?n.group.apply(n,["%c "+O].concat(_)):n.group(O)}catch(e){n.log(O)}var M=g(l,T,[m],"prevState"),P=g(l,T,[T],"action"),L=g(l,T,[v,m],"error"),B=g(l,T,[x],"nextState");if(M)if(u.prevState){var I="color: "+u.prevState(m)+"; font-weight: bold";n[M]("%c prev state",I,m)}else n[M]("prev state",m);if(P)if(u.action){var A="color: "+u.action(T)+"; font-weight: bold";n[P]("%c action    ",A,T)}else n[P]("action    ",T);if(v&&L)if(u.error){var R="color: "+u.error(v,m)+"; font-weight: bold;";n[L]("%c error     ",R,v)}else n[L]("error     ",v);if(B)if(u.nextState){var N="color: "+u.nextState(x)+"; font-weight: bold";n[B]("%c next state",N,x)}else n[B]("next state",x);s&&h(m,x,n,S);try{n.groupEnd()}catch(e){n.log("—— log end ——")}})}function m(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},_,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,a=t.predicate,i=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var l=[];return function(e){var n=e.getState;return function(e){return function(s){if("function"==typeof a&&!a(n,s))return e(s);var c={};l.push(c),c.started=w.now(),c.startedTime=new Date,c.prevState=r(n()),c.action=s;var f=void 0;if(i)try{f=e(s)}catch(e){c.error=o(e)}else f=e(s);c.took=w.now()-c.started,c.nextState=r(n());var d=t.diff&&"function"==typeof u?u(n,s):t.diff;if(y(l,Object.assign({},t,{diff:d})),l.length=0,c.error)throw c.error;return f}}}}var v,b,x=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},k=function(e){return x(e.getHours(),2)+":"+x(e.getMinutes(),2)+":"+x(e.getSeconds(),2)+"."+x(e.getMilliseconds(),3)},w="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},C=[];v="object"===(void 0===e?"undefined":T(e))&&e?e:"undefined"!=typeof window?window:{},(b=v.DeepDiff)&&C.push(function(){void 0!==b&&v.DeepDiff===f&&(v.DeepDiff=b,b=void 0)}),n(o,r),n(a,r),n(i,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:c,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&c(e,t,function(r){n&&!n(e,t,r)||d(e,t,r)})},enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,a=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===a[n.path[r]]&&(a[n.path[r]]={}),a=a[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,a=t[n],i=r.path.length-1;for(o=0;o<i;o++)a=a[r.path[o]];switch(r.kind){case"A":e(a[r.path[o]],r.index,r.item);break;case"D":case"E":a[r.path[o]]=r.lhs;break;case"N":delete a[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=l(t,n)}return t}(a[n.path[r]],n.index,n.item);break;case"D":case"E":a[n.path[r]]=n.lhs;break;case"N":delete a[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==b},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e()}),C=null),f},enumerable:!0}});var E={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},_={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},O=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?m()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=_,t.createLogger=m,t.logger=O,t.default=O,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(49))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(101),o=w(n(476)),a=w(n(477)),i=w(n(478)),u=w(n(479)),l=w(n(480)),s=w(n(481)),c=w(n(482)),f=w(n(483)),d=w(n(484)),p=w(n(485)),h=w(n(486)),g=w(n(487)),y=w(n(488)),m=w(n(489)),v=w(n(490)),b=w(n(491)),x=w(n(492)),k=w(n(493));function w(e){return e&&e.__esModule?e:{default:e}}var T=(0,r.combineReducers)({app:o.default,user:a.default,menuIndex:i.default,menuLogs:u.default,thread:l.default,threads:s.default,threadDetail:c.default,analyze:f.default,bootOption:d.default,setting:p.default,posts:h.default,postsTimeline:g.default,postsMulti:y.default,postsSingle:m.default,postsChild:v.default,style:b.default,componentDidMounts:x.default,actionLog:k.default});t.default=T},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.app?e.merge(t.app):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(131),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.user?e.merge(t.user):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(186)),a=i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new o.default,t=arguments[1];switch(t.type){case"ON_CLICK_MULTISTREAM":var n=t.app.dispThreadType===a.default.dispThreadTypeMulti?t.postsMulti:t.postsSingle,i=n&&n.length?n.length:0;return i>0?e.map(function(e){return t.app.rootConnection===e.connection?r({},e,{favicon:n[i-1].favicon,post:n[i-1].post}):e}):e;case"SERVER_TO_CLIENT[EMIT]:find":var u=t.posts&&t.posts.length?t.posts.length:0;return 0===u?e.map(function(e){return t.thread.connection===e.connection?r({},e,{title:t.thread.title,favicon:t.thread.favicon,watchCnt:t.thread.watchCnt}):e}):t.app.dispThreadType===a.default.dispThreadTypeMulti?e.map(function(e){return t.thread.connection===e.connection?r({},e,{title:t.posts[u-1].title,favicon:t.posts[u-1].favicon,watchCnt:t.thread.watchCnt,post:t.posts[u-1].post}):e}):e.map(function(e){return t.posts[0].connection===e.connection?r({},e,{favicon:t.posts[u-1].favicon,post:t.posts[u-1].post,watchCnt:t.thread.watchCnt}):e});case"SERVER_TO_CLIENT[BROADCAST]:find":case"SERVER_TO_CLIENT[BROADCAST]:changeThread":case"SERVER_TO_CLIENT[BROADCAST]:disconnect":return e.map(function(e){return t.thread.connection===e.connection?r({},e,{watchCnt:t.thread.watchCnt}):e}).sort(function(e,n){return e.connection===t.app.rootConnection||n.connection===t.app.rootConnection?0:e.watchCnt<n.watchCnt?1:e.watchCnt>n.watchCnt?-1:0});case"SERVER_TO_CLIENT[BROADCAST]:post":return e.map(function(e){return t.app.rootConnection===e.connection?t.app.multistream?r({},e,{title:t.posts[0].title,favicon:t.posts[0].favicon,post:t.posts[0].post}):e:t.posts[0].connection===e.connection?r({},e,{title:t.posts[0].title,favicon:t.posts[0].favicon,post:t.posts[0].post}):e});case"SERVER_TO_CLIENT[EMIT]:findMenuIndex":return e&&e.length>0&&t.menuIndex&&t.menuIndex.length>0?(t.menuIndex.shift(),[e[0]].concat(t.menuIndex)):t.menuIndex?t.menuIndex:e;default:return t.menuIndex?t.menuIndex:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(187),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];switch(t.type){case"SERVER_TO_CLIENT[EMIT]:find":return e.find(function(e){return e.connection===t.thread.lastPost.connection})?e:e.unshift(t.thread.lastPost);default:return t.menuLogs?e.merge(t.menuLogs):e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(65),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];switch(t.type){case"CLIENT_TO_SERVER[EMIT]:initClientState":return t.thread?e.merge(t.thread):e;case"SERVER_TO_CLIENT[BROADCAST]:find":case"SERVER_TO_CLIENT[BROADCAST]:changeThread":case"SERVER_TO_CLIENT[BROADCAST]:disconnect":case"SERVER_TO_CLIENT[BROADCAST]:post":if(e.connection===t.thread.connection)return t.thread?e.merge(t.thread):e;break;default:return t.thread?e.merge(t.thread):e}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(211),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.threads?e.merge(t.threads):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(65),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.threadDetail?e.merge(t.threadDetail):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(188),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.analyze?e.merge(t.analyze):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(132),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.bootOption?e.merge(t.bootOption):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(189),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];return t.setting?e.merge(t.setting):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(46),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default;arguments[1];return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(46),a=(r=o)&&r.__esModule?r:{default:r};function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];switch(t.type){case"CLIENT_TO_SERVER[EMIT]:changeThread":return new a.default;case"UNMOUNT_POSTS_TIMELINE":return e.map(function(e){return e.dispFlg=e.currentTime<=t.mediaCurrentTime,e});case"CLEAR_POSTS_TIMELINE":return e.filter(function(e){return e.currentTime<=t.mediaCurrentTime});case"SERVER_TO_CLIENT[EMIT]:find":case"NEXT_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[].concat(i(e),i(t.postsTimeline));break;case"PREV_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[].concat(i(t.postsTimeline));break;case"SERVER_TO_CLIENT[BROADCAST]:post":if(t.postsTimeline&&t.postsTimeline.length>0&&t.postsTimeline[0].uid===t.user.uid&&t.postsTimeline&&t.postsTimeline.length>0)return[].concat(i(e),i(t.postsTimeline));break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(t.postsTimeline&&t.postsTimeline.length>0)return[].concat(i(t.postsTimeline),i(e))}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(46),a=(r=o)&&r.__esModule?r:{default:r};function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new a.default;case"SERVER_TO_CLIENT[EMIT]:find":if(t.postsMulti&&t.postsMulti.length>0&&t.app.isRootConnection)return[].concat(i(e),i(t.postsMulti));break;case"SERVER_TO_CLIENT[BROADCAST]:post":if(t.postsMulti&&t.postsMulti.length>0&&t.app.rootConnection===t.thread.connection)return[].concat(i(e),i(t.postsMulti));break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(t.postsMulti&&t.postsMulti.length>0)return[].concat(i(t.postsMulti),i(e))}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(46));o(n(131));function o(e){return e&&e.__esModule?e:{default:e}}function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new r.default,t=arguments[1];switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsSingle;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new r.default;case"SERVER_TO_CLIENT[EMIT]:find":case"SERVER_TO_CLIENT[BROADCAST]:post":if(t.postsSingle&&t.postsSingle.length>0)return[].concat(a(e),a(t.postsSingle));break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(t.postsSingle&&t.postsSingle.length>0)return[].concat(a(t.postsSingle),a(e))}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(46),a=(r=o)&&r.__esModule?r:{default:r};function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new a.default,t=arguments[1];switch(t.type){case"CLIENT_TO_SERVER[EMIT]:changeThread":return new a.default;case"SERVER_TO_CLIENT[EMIT]:find":case"SERVER_TO_CLIENT[BROADCAST]:post":if(t.postsChild&&t.postsChild.length>0&&t.thread.connection===t.posts[0].connection)return[].concat(i(e),i(t.postsChild));break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(t.postsChild&&t.postsChild.length>0)return[].concat(i(t.postsChild),i(e))}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=(E(n(17)),E(n(1))),a=E(n(9)),i=E(n(22)),u=E(n(136)),l=E(n(5)),s=E(n(48)),c=E(n(21)),f=E(n(133)),d=E(n(190)),p=E(n(27)),h=E(n(77)),g=E(n(192)),y=E(n(47)),m=E(n(193)),v=E(n(137)),b=E(n(197)),x=E(n(191)),k=E(n(66)),w=E(n(194)),T=E(n(78)),S=E(n(93)),C=E(n(135));E(n(134));function E(e){return e&&e.__esModule?e:{default:e}}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.default=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];switch(n.type){case"RESIZE_START_WINDOW":case"RESIZE_END_WINDOW":case"ON_TRANSITION":case"OFF_TRANSITION":case"ON_TRANSITION_END":return new a.default(n);case"TOGGLE_DISP_MAIN":return r({},t);case"ON_CLICK_MULTISTREAM":return r({},t,{board:r({},t.board,{menuLiChild:r({},t.board.menuLiChild,{color:!n.app.isMediaConnection&&n.app.multistream?k.default.activeColor:k.default.unactiveColor})})});case"TOGGLE_LINKS":return r({},t,{board:r({},t.board,{self:r({},t.board.self,{width:k.default.getSelfWidth(n.app),boxShadow:k.default.getSelfBoxShadow(n.app)}),menuLiLinks:r({},t.board.menuLiLinks,{color:n.app.isOpenLinks?k.default.activeColor:k.default.unactiveColor})}),links:r({},t.links,{self:r({},t.links.self,{display:w.default.getSelfDisplay(n.app)})})});case"TOGGLE_BUBBLE_POST":return r({},t,{board:r({},t.board,{menuLiBubble:r({},t.board.menuLiBubble,{color:n.app.isBubblePost?k.default.activeColor:k.default.unactiveColor})}),posts:r({},t.posts,{self:s.default.getSelf({app:n.app}),more:s.default.getMore({app:n.app})}),post:r({},t.post,{self:T.default.getSelf({app:n.app}),upper:T.default.getUpper({app:n.app}),bottomPost:T.default.getBottomPost({app:n.app})})});case"TOGGLE_DISP_POSTS_SUPPORTER":case"CLOSE_DISP_POSTS_SUPPORTER":return r({},t,{postsSupporter:r({},t.postsSupporter,{self:r({},t.postsSupporter.self,{transform:x.default.getTransform(n.app)})})});case"ON_CLICK_TO_TIMELINE_THREAD":return r({},t,{board:r({},t.board,{menuLiChild:r({},t.menuLiChild,{color:o.default.isActiveMultistream(n.app,"reducer")?k.default.activeColor:k.default.unactiveColor})}),audio:r({},t.audio,{self:C.default.getSelf({app:n.app})})});case"ON_CLICK_TO_MULTI_THREAD":return r({},t,{board:r({},t.board,{menuLiChild:r({},t.board.menuLiChild,{color:k.default.activeColor})})});case"ON_CLICK_TO_CHILD_THREAD":return r({},t,{board:r({},t.board,{menuLiChild:r({},t.board.menuLiChild,{color:k.default.unactiveColor})}),icon:r({},t.icon,{thunder:S.default.getThunder({app:n.app})})});case"ON_CLICK_TOGGLE_DISP_MENU":case"ON_CLICK_TOGGLE_DISP_DETAIL":return r({},t,{menu:r({},t.menu,{self:r({},t.menu.self,{width:i.default.getWidth(n.app),transform:i.default.getTransform(n.app)})}),detail:r({},t.detail,(e={},_(e,"self"+c.default.detailRightSelfKey,r({},t.detail["self"+c.default.detailRightSelfKey],{transform:f.default.getTransform(n.app)})),_(e,"self"+c.default.detailModalSelfKey,r({},t.detail[["self"+c.default.detailModalSelfKey]],{transform:d.default.getTransform(n.app)})),e)),posts:r({},t.posts,{self:r({},t.posts.self,{width:s.default.getWidth(n.app)})}),footer:r({},t.footer,{self:r({},t.footer.self,{width:h.default.getWidth(n.app),transform:h.default.getTransform(n.app)})}),menuFooter:r({},t.menuFooter,{self:r({},t.menuFooter.self,{width:g.default.getWidth(n.app)})}),postsFooter:r({},t.postsFooter,{self:r({},t.postsFooter.self,{maxWidth:y.default.getWidth(n.app),width:y.default.getWidth(n.app)})})});case"ON_CLICK_OPEN_LOCK_MENU":return r({},t,{lockMenu:r({},t.lockMenu,{menuShare:r({},t.lockMenu.menuShare,{transform:u.default.getCommonTransform(n.app)})})});case"OPEN_NEW_POST":case"CLOSE_NEW_POST":return r({},t,{container:r({},t.container,{newPost:r({},t.container.newPost,{transform:l.default.getNotifTranslateY(n.app)})})});case"OPEN_NOTIF":case"CLOSE_NOTIF":var E=m.default.getNotifsDisplay(n.app);return r({},t,{header:r({},t.header,{self:r({},t.header.self,{transform:p.default.getNotifTranslateY(n.app)})}),container:r({},t.container,{newPost:r({},t.container.newPost,{display:l.default.getNewPostDisplay(n.app)})}),notif:r({},t.notif,{notifs:r({},t.notif.notifs,{height:m.default.getNotifsHeight(n.app)}),self:r({},t.notif.self,{display:E})})});case"TOGGLE_DISP_BOARD":return r({},t,{board:r({},t.board,{self:k.default.getSelf({app:n.app})})});case"OPEN_INNER_NOTIF":case"CLOSE_INNER_NOTIF":return r({},t,{innerNotif:r({},t.innerNotif,{self:r({},t.innerNotif.self,{height:""!==n.app.openInnerNotif?v.default.selfHeight+"px":"0px"})})});case"UPDATE_STYLE":var O=n.styleKey,M=n.eleType,P=n.tagName,L=n.style;if(O&&M&&P)return r({},t,_({},O,r({},t[O],_({},M,r({},t[O][M],_({},P,r({},t[O][M][P],L)))))));if(O&&M)return r({},t,_({},O,r({},t[O],_({},M,r({},t[O][M],L)))));break;case"START_DISP_POSTS":case"START_UNDISP_POSTS":return r({},t,{extScreen:r({},t.extScreen,{self:r({},t.extScreen.self,{transform:b.default.getSelfTransform(n.app),transition:b.default.getSelfTransition(n.app)})}),notif:r({},t.notif,{notifs:r({},t.notif.notifs,{display:m.default.getNotifsDisplay(n.app)})})});default:return n.style?n.style:t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Array,t=arguments[1];return t.componentDidMounts&&!e.includes(t.componentDidMounts)?[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e),[t.componentDidMounts]):e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return[arguments[1].type].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=p(n(5)),a=p(n(143)),i=p(n(17)),u=p(n(28)),l=p(n(16)),s=p(n(100)),c=p(n(1)),f=p(n(46)),d=p(n(211));function p(e){return e&&e.__esModule?e:{default:e}}t.default={updateAction:function(e){return function(t){return function(n){var r=e.getState();h[n.type]&&(n=h[n.type](r,n)),n&&(n.app||(n.app=r.app),n.app.actioned=n.type),n&&t(n)}}}};var h={"SERVER_TO_CLIENT[BROADCAST]:find":function(e,t){return t.app=e.app,t},"SERVER_TO_CLIENT[BROADCAST]:changeThread":function(e,t){return t.app=e.app,t},"SERVER_TO_CLIENT[BROADCAST]:disconnect":function(e,t){return t.app=e.app,t},"SERVER_TO_CLIENT[EMIT]:find":function(e,t){switch((t=g.caseNoExistResponsePost(e,t)).app=r({},e.app,t.app),t.app["offset"+t.app.dispThreadType+"FindId"]=t.app.offsetFindId,t.app.detailConnection=t.thread.connection,t.app.desc=t.thread.serverMetas.title,t.app.isRootConnection=t.app.rootConnection===t.thread.connection,t.app.isMediaConnection=c.default.getIsMediaConnection(t.thread.connection),(t=f.default.getAnyActionPosts(t)).thread.title=t.thread.serverMetas.title,t.thread.hasSlash=i.default.getBool(t.thread.hasSlash),t.threads=d.default.getMergedThreads(e.threads,t.thread),t.threadDetail=t.thread,t.app.extensionMode){case c.default.extensionModeExtBottomLabel:if(!t.app.isOpenPosts&&!t.app.isDispPosts){var n=4*o.default.transitionNotif+o.default.transitionNotifDisp;talknWindow.parentTo("openNotif",{transition:n})}break;case c.default.extensionModeExtModalLabel:if(t.posts.length>0){var p=t.posts[t.posts.length-1]._id,h=t.posts[t.posts.length-1].post,y=t.posts[t.posts.length-1].favicon;y=u.default.HTTPS_PROTOCOL+"//"+l.default.assetsIconPath+s.default.getSaveFaviconName(y),talknWindow.parentTo("openNotif",{id:p,post:h,favicon:y,addUnreadCnt:t.posts.length})}}if(t.app.isMediaConnection){var m=c.default.getMediaSrc(t.thread.protocol,t.thread.connection);t.app.connectionType=c.default.getMediaTypeFromSrc(m),t=f.default.getAnyActionPosts(t),t=a.default.setStoragePostsTimeline(t)}return t},"CLIENT_TO_SERVER[EMIT]:changeThread":function(e,t){return t.app=r({},e.app,t.app),t.app.offsetFindId=c.default.defaultOffsetFindId,t.app.offsetTimelineFindId=c.default.defaultOffsetFindId,t.app.offsetMultiFindId=c.default.defaultOffsetFindId,t.app.offsetSingleFindId=c.default.defaultOffsetFindId,t.app.offsetChildFindId=c.default.defaultOffsetFindId,t.app.offsetLogsFindId=c.default.defaultOffsetFindId,t},"SERVER_TO_CLIENT[BROADCAST]:post":function(e,t){var n=e.app,r=e.user;switch(t.app=n,t.user=r,t.app.extensionMode){case c.default.extensionModeExtBottomLabel:if(!t.app.isOpenPosts&&!t.app.isDispPosts){var a=4*o.default.transitionNotif+o.default.transitionNotifDisp;talknWindow.parentTo("openNotif",{transition:a})}break;case c.default.extensionModeExtModalLabel:if(t.posts.length>0){var i=t.posts[t.posts.length-1]._id,d=t.posts[t.posts.length-1].post,p=t.posts[t.posts.length-1].favicon;p=u.default.HTTPS_PROTOCOL+"//"+l.default.assetsIconPath+s.default.getSaveFaviconName(p),talknWindow.parentTo("openNotif",{id:i,post:d,favicon:p,addUnreadCnt:t.posts.length})}}return t=f.default.getAnyActionPosts(t)},"SERVER_TO_CLIENT[EMIT]:getMore":function(e,t){return t.app.offsetFindId=c.default.getOffsetFindId({posts:t.posts}),t.app["offset"+t.app.dispThreadType+"FindId"]=t.app.offsetFindId,t=f.default.getAnyActionPosts(t)},"SERVER_TO_CLIENT[EMIT]:changeThreadDetail":function(e,t){return t.app=e.app,t.app.detailConnection=t.thread.connection,t.threads=d.default.getMergedThreads(e.threads,t.thread),t.threadDetail=t.threads[t.thread.connection],delete t.thread,t},ON_CLICK_TO_MULTI_THREAD:function(e,t){return t},ON_CLICK_TO_TIMELINE_THREAD:function(e,t){return t.postsTimeline=[],t.app.isMediaConnection=!0,t.app.offsetFindId=c.default.defaultOffsetFindId,t.app.offsetChildFindId=c.default.defaultOffsetFindId,t},ON_CLICK_TO_SINGLE_THREAD:function(e,t){return t},ON_CLICK_TO_CHILD_THREAD:function(e,t){return t.postsChild=[],t.app.offsetFindId=c.default.defaultOffsetFindId,t.app.offsetChildFindId=c.default.defaultOffsetFindId,t},ON_CLICK_TO_LOGS_THREAD:function(e,t){return t.app=e.app,t.postsLogs=e.postsLogs,t},TOGGLE_DISP_POSTS_SUPPORTER:function(e,t){return e.app.isOpenPostsSupporter=!e.app.isOpenPostsSupporter,t},TOGGLE_LINKS:function(e,t){return e.app.isOpenLinks=!e.app.isOpenLinks,t},ON_CLICK_MENU:function(e,t){return t.app.desc=t.app.menuComponent,t},ON_CLICK_OPEN_LOCK_MENU:function(e,t){return t.app=r({},e.app,t.app),t},ON_CLICK_TOGGLE_MAIN:function(e,t){return t.app.isOpenPosts=t.app.isOpenPosts?t.app.isOpenPosts:c.default.getIsOpenPosts(t.app),t},OFF_TRANSITION:function(e,t){return t.app=r({},e.app,t.app),t.app.height=c.default.getHeight(),t.app.isOpenPosts=t.app.isOpenPosts?t.app.isOpenPosts:c.default.getIsOpenPosts(t.app),t},ON_TRANSITION:function(e,t){return t.app=r({},e.app,t.app),t},ON_TRANSITION_END:function(e,t){return t.app=r({},e.app,t.app),t.app.height=c.default.getHeight(),t.app.isOpenPosts=c.default.getIsOpenPosts(t.app),t},RESIZE_END_WINDOW:function(e,t){return t.app=r({},e.app,t.app),t.app.isOpenPosts=c.default.getIsOpenPosts(t.app),t},ON_CLICK_TOGGLE_DISP_MENU:function(e,t){return t.app=r({},t.app,e.app),t.app.isOpenMenu=!t.app.isOpenMenu,t},ON_CLICK_TOGGLE_DISP_DETAIL:function(e,t){return t.app=r({},t.app,e.app),t},TOGGLE_DISP_BOARD:function(e,t){return t.app=r({},t.app,e.app),t.app.isOpenBoard=!e.app.isOpenBoard,t},TOGGLE_BUBBLE_POST:function(e,t){return t.app=r({},t.app,e.app),t.app.isBubblePost=!e.app.isBubblePost,t},OPEN_NOTIF:function(e,t){return t.app=r({},e.app,t.app),t},CLOSE_NOTIF:function(e,t){return t.app=r({},e.app,t.app),t},START_DISP_POSTS:function(e,t){return t.app=r({},e.app,t.app),t},START_UNDISP_POSTS:function(e,t){return t.app=r({},e.app,t.app),t},GET_CLIENT_METAS:function(e,t){var n=!1,o=t.clientMetas,a=e.thread.serverMetas;if(t.thread={},Object.keys(o).forEach(function(e,r){o[e]&&""!==o[e]&&a[e]!==o[e]&&(t.thread.serverMetas||(t.thread.serverMetas={}),n=!0,t.thread.serverMetas[e]=o[e])}),n)return t.threadDetail=e.threadDetail,t.threadDetail.serverMetas=r({},t.threadDetail.serverMetas,t.thread.serverMetas),t}},g={caseNoExistResponsePost:function(e,t){return 0===t.posts.length?(t.posts=e.posts,t.existResponsePostFlg=!1):t.existResponsePostFlg=!0,t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=I(a),u=n(222),l=I(n(8)),s=I(n(1)),c=I(n(65)),f=I(n(95)),d=I(n(496)),p=I(n(497)),h=I(n(27)),g=I(n(47)),y=I(n(498)),m=I(n(210)),v=I(n(499)),b=I(n(214)),x=I(n(215)),k=I(n(500)),w=I(n(501)),T=I(n(502)),S=I(n(503)),C=I(n(504)),E=I(n(510)),_=I(n(219)),O=(I(n(38)),I(n(513))),M=I(n(516)),P=I(n(517)),L=I(n(519)),B=I(n(129));function I(e){return e&&e.__esModule?e:{default:e}}var A=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=e.state,o=e.talknAPI,a=r.app,i=r.thread;return n.state={notifs:[]},o.find(i.connection),a.extensionMode!==s.default.extensionModeExtIncludeLabel&&a.extensionMode!==s.default.extensionModeExtNoneLabel||o.findMenuIndex(i.connection),n.getProps=n.getProps.bind(n),n.getNotifs=n.getNotifs.bind(n),n.renderSmall=n.renderSmall.bind(n),n.renderMiddle=n.renderMiddle.bind(n),n.renderLarge=n.renderLarge.bind(n),n.renderExtension=n.renderExtension.bind(n),n.handleOnClickFooterIcon=n.handleOnClickFooterIcon.bind(n),n.handleOnClickToggleMain=n.handleOnClickToggleMain.bind(n),n.handleOnClickToggleDetail=n.handleOnClickToggleDetail.bind(n),n.handleOnClickMultistream=n.handleOnClickMultistream.bind(n),n.handleOnClickConnection=n.handleOnClickConnection.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){talknAPI.componentDidMounts("Container")}},{key:"componentDidUpdate",value:function(){(0,L.default)(this,"Container")}},{key:"getProps",value:function(){return r({},this.props,{componentDidUpdates:L.default,handleOnClickFooterIcon:this.handleOnClickFooterIcon,handleOnClickMultistream:this.handleOnClickMultistream,handleOnClickToggleMain:this.handleOnClickToggleMain,handleOnClickToggleDetail:this.handleOnClickToggleDetail,handleOnClickConnection:this.handleOnClickConnection})}},{key:"handleOnClickToggleDetail",value:function(e){var t=this.props,n=t.state,r=t.onClickOpenLockMenu,o=n.app,a=n.thread,i=n.threadDetail;o.openLockMenu!==s.default.openLockMenuLabelNo?r(s.default.openLockMenuLabelNo):(o=s.default.getAppUpdatedOpenFlgs(n,"headerDetailIcon"),talknAPI.onClickToggleDispDetail({threadDetail:i,thread:a,app:o}))}},{key:"handleOnClickToggleMain",value:function(e){var t=this.props,n=t.onClickToggleMain,r=t.onClickToggleDispDetail,o=t.onClickOpenLockMenu,a=(t.closeInnerNotif,t.state),i=a.app,u=a.thread,l=a.threadDetail;i.extensionMode!==s.default.extensionModeExtBottomLabel&&i.extensionMode!==s.default.extensionModeExtModalLabel||(n({app:i}),i.isOpenDetail&&(i.isOpenDetail=!1,r({threadDetail:l,thread:u,app:i})),i.openLockMenu!==s.default.openLockMenuLabelNo&&o(s.default.openLockMenuLabelNo),talknWindow.parentTo("toggleIframe"),talknWindow.parentTo("getClientMetas"))}},{key:"handleOnClickFooterIcon",value:function(e){(0,this.props.toggleDispPostsSupporter)()}},{key:"handleOnClickMultistream",value:function(){var e=this.props.state.app,t=this.props.state,n=t.postsMulti,r=t.postsSingle,o=!1,a=f.default.getStorage(e.rootConnection,l.default.storageKey.postsMulti),i=f.default.getStorage(e.rootConnection,l.default.storageKey.postsSingle);n=a&&a.length>0?a:n,r=i&&i.length>0?i:r,e.dispThreadType=e.dispThreadType===s.default.dispThreadTypeMulti?s.default.dispThreadTypeSingle:s.default.dispThreadTypeMulti,e.multistreamed=!(e.dispThreadType===s.default.dispThreadTypeMulti),e.multistream=e.dispThreadType===s.default.dispThreadTypeMulti,e.multistream?n[0]&&n[0]._id?(e.offsetFindId=n[0]._id,e.offsetMultiFindId=e.offsetFindId):(e.offsetFindId=s.default.defaultOffsetFindId,e.offsetMultiFindId=s.default.defaultOffsetFindId,o=!0):r[0]&&r[0]._id?(e.offsetFindId=r[0]._id,e.offsetSingleFindId=e.offsetFindId):(e.offsetFindId=s.default.defaultOffsetFindId,e.offsetSingleFindId=s.default.defaultOffsetFindId,o=!0),this.props.onClickMultistream({app:e,postsMulti:n,postsSingle:r}),o&&talknAPI.find(e.rootConnection)}},{key:"handleOnClickConnection",value:function(e){var t=this.props,n=t.state,r=t.onClickToTimelineThread,o=t.onClickToMultiThread,a=t.onClickToSingleThread,i=t.onClickToChildThread,u=(t.onClickToLogsThread,n.app),l=n.menuIndex,f=n.setting,d=n.thread;d.connection=e;var p=c.default.getStatus(d,u,f),h=s.default.getStepToDispThreadType({app:u},p,e).stepTo;switch(console.log(" ====== "+e),console.log(h),l.some(function(t){return t.connection===e||t.connection===e+"/"}),h){case s.default.dispThreadTypeTimeline+" to "+s.default.dispThreadTypeChild:case s.default.dispThreadTypeMulti+" to "+s.default.dispThreadTypeChild:case s.default.dispThreadTypeSingle+" to "+s.default.dispThreadTypeChild:case s.default.dispThreadTypeChild+" to "+s.default.dispThreadTypeChild:i(e,{app:u}),talknAPI.changeThread(e);break;case s.default.dispThreadTypeTimeline+" to "+s.default.dispThreadTypeMulti:case s.default.dispThreadTypeChild+" to "+s.default.dispThreadTypeMulti:o(e,{app:u}),talknAPI.changeThread(e);break;case s.default.dispThreadTypeTimeline+" to "+s.default.dispThreadTypeSingle:case s.default.dispThreadTypeChild+" to "+s.default.dispThreadTypeSingle:a(e,{app:u}),talknAPI.changeThread(e);break;case s.default.dispThreadTypeMulti+" to "+s.default.dispThreadTypeTimeline:case s.default.dispThreadTypeSingle+" to "+s.default.dispThreadTypeTimeline:case s.default.dispThreadTypeChild+" to "+s.default.dispThreadTypeTimeline:case s.default.dispThreadTypeTimeline+" to "+s.default.dispThreadTypeTimeline:r(e,{app:u}),talknAPI.changeThread(e)}}},{key:"getDebug",value:function(e){var t=e.state.app;return i.default.createElement("div",{style:{position:"fixed",top:"60vh",right:"3%",width:"90%",height:"100px",background:"rgba(255,255,255, 0.8)",border:"1px solid rgba(230, 230, 230, 0.8)",borderRadius:"3px",zIndex:1e7,padding:"2%"}},i.default.createElement("pre",null,"\n          @isOpenPosts: { "+t.isOpenPosts+" }\n          @height: { "+t.height+" } \n          @extensionOpenHeight: { "+t.extensionOpenHeight+" } \n        "))}},{key:"getNewPost",value:function(e){var t=e.state,n=t.style,r=t.app,o=h.default.headerHeight+g.default.selfHeight;return r.height-o<r.postsHeight+o-B.default.getLastPostHeight()?i.default.createElement("div",{"data-component-name":"newPost",style:n.container.newPost},"NEW POST"):null}},{key:"getHideScreenBottom",value:function(e){var t=e.state.style;return i.default.createElement("div",{"data-component-name":"hideScreenBottom",style:t.container.hideScreenBottom})}},{key:"getNotifs",value:function(e){var t=e.state,n=t.app,r=t.style;return n.extensionMode!==s.default.extensionModeExtBottomLabel&&n.extensionMode!==s.default.extensionModeExtModalLabel||n.isOpenPosts||n.isDispPosts||!n.isOpenNotif?i.default.createElement("ol",{"data-component-name":"Notifs",style:r.notif.notifs}):i.default.createElement("ol",{"data-component-name":"Notifs",style:r.notif.notifs},this.state.notifs)}},{key:"renderLarge",value:function(){var e=this.props.state.style,t=this.getProps(),n=this.getNewPost(t),r=this.getHideScreenBottom(t);return i.default.createElement("div",{"data-component-name":"Container",style:e.container.self},i.default.createElement(p.default,t),i.default.createElement(y.default,t),i.default.createElement("span",{"data-component-name":"fixedComponents"},i.default.createElement(O.default,t),i.default.createElement(E.default,t),n,i.default.createElement(b.default,t),i.default.createElement(k.default,t),i.default.createElement(T.default,t),i.default.createElement(_.default,t),i.default.createElement(x.default,t),i.default.createElement(C.default,t),i.default.createElement(M.default,this.props),";",r))}},{key:"renderMiddle",value:function(){var e=this.props.state.style,t=this.getProps(),n=this.getNewPost(t),r=this.getHideScreenBottom(t);return i.default.createElement("div",{"data-component-name":"Container",style:e.container.self},i.default.createElement(p.default,t),i.default.createElement(y.default,t),i.default.createElement("span",{"data-component-name":"fixedComponents"},i.default.createElement(O.default,t),i.default.createElement(E.default,t),n,i.default.createElement(b.default,t),i.default.createElement(k.default,t),i.default.createElement(S.default,t),i.default.createElement(x.default,t),i.default.createElement(C.default,t),i.default.createElement(M.default,this.props),r))}},{key:"renderSmall",value:function(){var e=this.props.state,t=e.style,n=(e.app,this.getProps()),o=this.getNewPost(n),a=this.getHideScreenBottom(n);this.getDebug(n);return i.default.createElement("span",{"data-component-name":"Container",style:t.container.self},i.default.createElement(p.default,n),i.default.createElement(y.default,n),i.default.createElement("span",{"data-component-name":"fixedComponents"},i.default.createElement(O.default,n),i.default.createElement(E.default,n),o,i.default.createElement(b.default,n),i.default.createElement(k.default,n),i.default.createElement(S.default,n),i.default.createElement(x.default,n),i.default.createElement(C.default,n),i.default.createElement(M.default,r({},this.props,{debug:""})),a))}},{key:"renderExtension",value:function(){var e=this.props.state.style,t=this.getProps(),n=this.getNewPost(t),r=t.state.style.extScreen.self;this.getDebug(t);return i.default.createElement("span",{"data-component-name":"Container",style:e.container.self},i.default.createElement(p.default,t),i.default.createElement("div",{style:r,"data-component-name":"extScreen"},i.default.createElement(y.default,t),i.default.createElement(b.default,t),i.default.createElement(O.default,t),i.default.createElement(E.default,t),n,i.default.createElement(k.default,t),i.default.createElement(S.default,t),i.default.createElement(M.default,this.props)),i.default.createElement("span",{"data-component-name":"fixedComponents"},i.default.createElement(x.default,t)))}},{key:"renderIos",value:function(){var e=this.props.state.style,t=this.getProps(),n=this.getNewPost(t);return i.default.createElement("div",{"data-component-name":"Container",style:e.container.self},n,i.default.createElement(p.default,t),i.default.createElement(w.default,t),HideScreenBottom)}},{key:"renderAndroid",value:function(){var e=this.props.state.style,t=this.getProps(),n=this.getNewPost(t);return i.default.createElement("div",{"data-component-name":"Container",style:e.container.self},n,i.default.createElement(p.default,t),i.default.createElement(w.default,t),HideScreenBottom)}},{key:"render",value:function(){var e=this.props.state,t=e.style,n=e.app;e.actionLog;if(!(t&&t.container&&t.container.self&&n.connectioned&&n.screenMode!==s.default.screenModeUndispLabel))return n.extensionMode===s.default.extensionModeExtBottomLabel||n.extensionMode===s.default.extensionModeExtModalLabel?null:i.default.createElement(d.default,null);if(n.extensionMode===s.default.extensionModeExtBottomLabel||n.extensionMode===s.default.extensionModeExtModalLabel)return this.renderExtension(this);switch(n.screenMode){case s.default.screenModeSmallLabel:return this.renderSmall(this);case s.default.screenModeMiddleLabel:return this.renderMiddle(this);case s.default.screenModeLargeLabel:return this.renderLarge(this)}}}]),t}();t.default=(0,u.connect)(P.default,r({},m.default,v.default))(A)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=l(o),i=l(n(16)),u=l(n(196));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("img",{"data-component-name":"Loading",style:u.default.getSelf(),src:"https://"+i.default.assetsURL+"/img/loading.svg"})}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=(r=a)&&r.__esModule?r:{default:r};var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){this.props.state.app;return i.default.createElement("style",{type:"text/css"},"\n          #talkn1 textarea::placeholder {\n            text-indent: 3%;\n            font-size: 12px;\n            letter-spacing: 2px;\n            line-height: 9px;\n            color: rgb(170, 170, 170);\n          }\n          #talkn1 input::placeholder {\n            text-indent: 3%;\n            font-size: 12px;\n            letter-spacing: 1px;\n            color: rgb(170, 170, 170);\n          }\n        ")}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=f(a),u=f(n(16)),l=f(n(1)),s=f(n(46)),c=f(n(212));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleOnMouseDown=n.handleOnMouseDown.bind(n),n.handleOnScroll=n.handleOnScroll.bind(n),n.handleOnClickGetMore=n.handleOnClickGetMore.bind(n),n.state={scrollHeight:0,isAnimateScrolling:!1,isScrollBottom:!0,posts:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){var e=this.props.state.app;e.extensionMode===l.default.extensionModeExtBottomLabel||e.extensionMode===l.default.extensionModeExtIncludeLabel||e.extensionMode===l.default.extensionModeExtModalLabel?(this.setState({scrollHeight:this.refs.thread.scrollHeight}),this.animateScrollTo(this.refs.thread,9999999,400)):talknWindow.animateScrollTo(99999999,0),talknAPI.componentDidMounts("Posts")}},{key:"componentWillReceiveProps",value:function(e){var t=e.state,n=t.app,o=t.postsTimeline,a=t.postsMulti,i=t.postsSingle,u=t.postsChild,s=[];switch(n.dispThreadType){case l.default.dispThreadTypeTimeline:s=o;break;case l.default.dispThreadTypeMulti:s=a;break;case l.default.dispThreadTypeSingle:s=i;break;case l.default.dispThreadTypeChild:case l.default.dispThreadTypeLogs:s=u}this.state.posts!==s&&this.setState(r({},this.state,{posts:s}))}},{key:"componentDidUpdate",value:function(){this.props.componentDidUpdates(this,"Posts")}},{key:"animateScrollTo",value:function(e,t,n){var r=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};if(!this.state.isAnimateScrolling){var a=e.scrollTop,i=t-a,u=0;!function t(){u+=20;var l=Math.easeInOutQuad(u,a,i,n);e.scrollTop=l,u<n?(r.setState({isAnimateScrolling:!0}),setTimeout(t,20)):(r.setState({isAnimateScrolling:!1}),o())}()}}},{key:"handleOnMouseDown",value:function(){var e=this.props.state.app;e.extensionMode===l.default.extensionModeExtBottomLabel||(e.extensionMode,l.default.extensionModeExtModalLabel)}},{key:"handleOnScroll",value:function(e){this.props.state.app.isOpenNewPost&&this.props.closeNewPost();var t=e.target,n=t.clientHeight,r=t.scrollTop,o=t.scrollHeight===r+n;this.setState({isScrollBottom:o}),this.props.scrollThread()}},{key:"handleOnClickGetMore",value:function(){this.setState(r({},this.state,{scrollHeight:this.refs.thread.scrollHeight})),talknAPI.getMore()}},{key:"renderGetMore",value:function(){var e=this.props.state,t=e.style,n=e.thread,r=e.app,o=s.default.getDispPosts(e).length,a=r.dispThreadType===l.default.dispThreadTypeMulti?"multiPostCnt":"postCnt",c=!1;return n[a]>u.default.findOnePostCnt&&o<n[a]&&(c=!0),c?i.default.createElement("li",{style:t.posts.more,onClick:this.handleOnClickGetMore},"GET MORE"):null}},{key:"renderPostList",value:function(){var e=this.props,t=e.state,n=e.talknAPI,o=e.timeago,a=t.app,u=t.style,l=t.thread,s=t.threads,f=t.actionLog;return t["posts"+a.dispThreadType].map(function(e){return i.default.createElement(c.default,r({key:e._id},e,{app:a,actionLog:f,thread:l,threads:s,childLayerCnt:e.layer-l.layer,style:u.post,talknAPI:n,timeago:o}))})}},{key:"render",value:function(){var e=this.props.state.style;return i.default.createElement("ol",{"data-component-name":"Posts",style:e.posts.self,ref:"thread",onMouseDown:this.handleOnMouseDown,onScroll:this.handleOnScroll},this.renderGetMore(),this.renderPostList())}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={scrollThread:function(){return{type:"SCROLL_THREAD"}},endAnimateScrollTo:function(){return{type:"END_ANIMATE_SCROLL_TO"}},createNotif:function(){return{type:"CREATE_NOTIF"}},updatePostsHeight:function(e){return{type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:e}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=s(a),u=s(n(38)),l=s(n(78));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o={Cover:[],Emojis:{}};return t.Cover.forEach(function(t){o.Cover[t.label]=r({},e.state.style.postsSupporter.emoji)}),Object.keys(t.Emojis).forEach(function(n){t.Emojis[n].forEach(function(t,a){o.Emojis[n]||(o.Emojis[n]=[]),o.Emojis[n][a]=r({},e.state.style.postsSupporter.emoji)})}),n.state={style:o,menu:"Cover",label:""},n.getDisplay=n.getDisplay.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,null,[{key:"Cover",get:function(){return[{menu:"Emojis",display:"😀",label:"Positive"},{menu:"Emojis",display:"🤔",label:"Neutral"},{menu:"Emojis",display:"🙁",label:"Negative"},{menu:"Emojis",display:"😷",label:"Sick"},{menu:"Emojis",display:"😇",label:"Role"},{menu:"Emojis",display:"😺",label:"Cat"},{menu:"Emojis",display:"🙈",label:"Monkey"},{menu:"Emojis",display:"😈",label:"Creature"}]}},{key:"Emojis",get:function(){return{Positive:["😀","😁","😂","🤣","😃","😄","😅","😆","😉","😊","😋","😎","😍","😘","🥰","😗","😙","😚","☺","🙂","🤗","🤩"],Neutral:["🤔","🤨","😐","😑","😶","🙄","😏","😣","😥","😮","🤐","😯","😪","😫","😴","😌","😛","😜","😝","🤤","😒","😓","😔","😕","🙃","🤑","😲"],Negative:["🙁","☹","😖","😞","😟","😤","😢","😭","😦","😧","😨","😩","🤯","😬","😰","😱","🥵","🥶","😳","🤪","😵","😡","😠","🤬"],Sick:["😷","🤒","🤕","🤢","🤮","🤧"],Cat:["😺","😸","😹","😻","😼","😽","🙀","😿","😾"],Role:["😇","🤠","🥳","🥴","🥺","🤥","🤫","🤭","🧐","🤓"],Monkey:["🙈","🙉","🙊"],Creature:["😈","👿","🤡","👹","👺","💀","☠","👻","👽","👾","🤖","💩"]}}}]),o(t,[{key:"getEvents",value:function(e,n,o,a){var i=this;switch(e){case"Cover":return{onMouseOver:function(t){i.setState({style:r({},i.state.style,c({},e,r({},i.state.style[e],c({},o,r({},i.state.style[e][o],{transform:"scale(1.1)"})))))})},onMouseOut:function(t){i.setState({style:r({},i.state.style,c({},e,r({},i.state.style[e],c({},o,r({},i.state.style[e][o],{transform:"scale(1.0)"})))))})},onClick:function(e){i.setState({menu:n,label:o})}};default:return{onMouseOver:function(t){i.setState({style:r({},i.state.style,c({},e,r({},i.state.style[e],c({},o,r({},i.state.style[e][o],c({},a,r({},i.state.style[e][o][a],{transform:"scale(1.1)"})))))))})},onMouseOut:function(t){i.setState({style:r({},i.state.style,c({},e,r({},i.state.style[e],c({},o,r({},i.state.style[e][o],c({},a,r({},i.state.style[e][o][a],{transform:"scale(1.0)"})))))))})},onClick:function(n){if(0!==a){var r=t[e][o][a-1];talknAPI.delegatePost({inputPost:'<div class="talknStamps" style="'+l.default.stampStyle+'">'+r+"</div>",inputCurrentTime:0})}i.setState({menu:"Cover",label:""})}}}}},{key:"getDisplay",value:function(e,n){var o=this,a=u.default.getOpenEmoji(),l=u.default.getCloseEmoji(),s=this.state.style,c=[];switch(e){case"Cover":c=t.Cover.map(function(t,n){return i.default.createElement("li",r({key:e+"_"+n,style:s[e][t.label]},o.getEvents(e,t.menu,t.label)),t.display,"Cover"===e&&a)});break;default:(c=t[e][n].map(function(t,a){var u=a+1;return i.default.createElement("li",r({key:e+n+"_"+u,style:s[e][n][u]},o.getEvents(e,e,n,u)),t)})).unshift(i.default.createElement("li",r({key:"backCover",style:s.Cover[n]},this.getEvents(e,e,n,0)),l))}return c}},{key:"render",value:function(){var e=this.props.state.style,t=this.state,n=t.menu,r=t.label,o=this.getDisplay(n,r);return i.default.createElement("ul",{"data-component-name":"PostsSupporter",style:e.postsSupporter.self},o)}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=c(a),u=c(n(215)),l=c(n(216)),s=c(n(217));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this.props,t=e.state,n=e.handleOnClickToggleMain,o=t.style;return i.default.createElement("footer",{"data-component-name":"Footer",style:o.footer.self},i.default.createElement(l.default,r({},this.props,{mode:"default"})),i.default.createElement(u.default,r({},this.props,{mode:"default",handleOnClickToggleMain:n})),i.default.createElement(s.default,r({},this.props,{mode:"default"})))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=l(o),i=l(n(218)),u=l(n(21));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return this.props.state.style.detail.self=this.props.state.style.detail["self"+u.default.detailRightSelfKey],a.default.createElement(i.default,this.props)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=l(o),i=l(n(218)),u=l(n(21));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return this.props.state.style.detail.self=this.props.state.style.detail["self"+u.default.detailModalSelfKey],a.default.createElement(i.default,this.props)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=p(o),i=(p(n(8)),p(n(1))),u=p(n(505)),l=p(n(507)),s=p(n(508)),c=p(n(509)),f=p(n(214)),d=p(n(216));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleOnClickMultistream=n.handleOnClickMultistream.bind(n),n.handleOnClickLoginTwitter=n.handleOnClickLoginTwitter.bind(n),n.handleOnClickLoginFacebook=n.handleOnClickLoginFacebook.bind(n),n.handleOnTransitionEnd=n.handleOnTransitionEnd.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){talknAPI.componentDidMounts("Menu")}},{key:"handleOnClickMultistream",value:function(){this.props.state.app.isOpenNotif&&this.props.closeNewPost()}},{key:"handleOnClickLoginFacebook",value:function(){this.props.state.thread;var e="https://talkn.io:8443/auth/facebook?url="+window.location.href;location.href=e}},{key:"handleOnClickLoginTwitter",value:function(){this.props.state.thread;var e="https://talkn.io:8443/auth/twitter?url="+window.location.href;location.href=e}},{key:"handleOnTransitionEnd",value:function(){var e=this.props,t=e.state,n=e.openMenuTransitionEnd,r=t.app;r.screenMode===i.default.screenModeSmallLabel&&r.isOpenMenu&&(n(window.scrollY),talknWindow.lockWindow())}},{key:"renderFriendLiLabel",value:function(e,t,n){var r=this.props.state.style,o="/"+n,i=n?a.default.createElement("span",{style:r.menu.namesAddConnection},e,a.default.createElement("br",null),n):a.default.createElement("span",{style:r.menu.names},a.default.createElement("br",null),e);return a.default.createElement("a",{style:r.menu.wrap,href:o},a.default.createElement("img",{style:r.menu.img,src:t}),i)}},{key:"renderMenuComponent",value:function(){var e=void 0;switch(this.props.state.app.menuComponent){case i.default.menuComponentUsersLabel:e=a.default.createElement(u.default,this.props);break;case i.default.menuComponentIndexLabel:e=a.default.createElement(l.default,this.props);break;case i.default.menuComponentLogsLabel:e=a.default.createElement(s.default,this.props);break;case i.default.menuComponentSettingLabel:e=a.default.createElement(c.default,this.props)}return e}},{key:"renderHeader",value:function(){var e=this.props.state.app;return e.extensionMode===i.default.extensionModeExtBottomLabel||e.extensionMode===i.default.extensionModeExtModalLabel?a.default.createElement(f.default,this.props):null}},{key:"renderFooter",value:function(){var e=this.props.state.app;if(e.extensionMode===i.default.extensionModeExtBottomLabel||e.extensionMode===i.default.extensionModeExtModalLabel)return null;switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:return a.default.createElement(d.default,this.props)}}},{key:"render",value:function(){var e=this.props.state.style;return a.default.createElement("div",{"data-component-name":"Menu",onTransitionEnd:this.handleOnTransitionEnd,style:e.menu.self},this.renderHeader(),a.default.createElement("div",{"data-component-name":"MenuBody",style:e.menu.wrapComponent},this.renderMenuComponent()),this.renderFooter())}}]),t}();t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=u(o),i=u(n(220));u(n(506));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"renderFriendLiLabel",value:function(e,t,n){var r=this.props.state.style,o="/"+n,u=n?a.default.createElement("div",{style:r.menuUsers.namesAddConnection},a.default.createElement(i.default,{text:e,loop:!0,hoverToStop:!1,trailing:0,leading:0}),a.default.createElement(i.default,{text:n,loop:!0,hoverToStop:!1,trailing:0,leading:0})):a.default.createElement("div",{style:r.menuUsers.names},a.default.createElement("br",null),e);return a.default.createElement("a",{style:r.menuUsers.wrap,href:o,"data-li-a":!0},a.default.createElement("div",{style:r.menuUsers.imgWrap},a.default.createElement("img",{style:r.menuUsers.img,src:t})),u)}},{key:"render",value:function(){var e=this.props.state.style;return a.default.createElement("div",{"data-component-name":"MenuUsers",style:e.menuUsers.self},a.default.createElement("ol",{style:e.menuUsers.columns}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=l(a),u=l(n(5));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=e.state,o=r.isLast,a=r.style,i=o?a.menu.columnLast:a.menu.column;return n.state={style:i},n.getDecolationProps=n.getDecolationProps.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"getDecolationProps",value:function(){var e=this,t=this.props,n=(t.isLast,t.app);return{onMouseOver:function(){e.setState({style:r({},e.state.style,{transition:u.default.getTransitionFirstOn(n),transform:"scale( 1.05 )",cursor:"pointer"})})},onMouseLeave:function(){e.setState({style:r({},e.state.style,{transition:u.default.getTransitionOn(n),transform:"scale( 1 )",cursor:"default"})})},onMouseDown:function(){e.setState({style:r({},e.state.style,{transform:"scale( 1 )",cursor:"pointer"})})},onMouseUp:function(){e.setState({style:r({},e.state.style,{transform:"scale( 1.05 )",cursor:"pointer"})})}}}},{key:"render",value:function(){var e=this.props,t=e.label,n=e.onClick,o=e.state.style;return n=n||function(){},i.default.createElement("li",r({"data-component-name":"TwitterLi",style:o.menuUsers.column,onClick:n},this.getDecolationProps()),t)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=f(a),u=f(n(1)),l=f(n(16)),s=f(n(38)),c=f(n(221));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=e.state,o=r.app,a=r.style,i=o.rootConnection;return n.state={rootConnection:i,style:a.menuIndex.headerUpdateIcon},n.handleOnClickUpdate=n.handleOnClickUpdate.bind(n),n.handleOnChange=n.handleOnChange.bind(n),n.handleOnKeyPress=n.handleOnKeyPress.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"getDecolationProps",value:function(){var e=this;return{onMouseOver:function(){e.setState({style:r({},e.state.style,{transition:"200ms",transform:"scale( 1.1 ) rotate( 0deg )"})})},onMouseLeave:function(){e.setState({style:r({},e.state.style,{transition:"600ms",transform:"scale( 1 ) rotate( 0deg )"})})},onMouseDown:function(){e.setState({style:r({},e.state.style,{transform:"scale( 0.9 ) rotate( 180deg)"})})},onMouseUp:function(){e.setState({style:r({},e.state.style,{transform:"scale( 1 ) rotate( 0deg )"})})}}}},{key:"handleOnClickUpdate",value:function(e){var t=this.props.state.app.rootConnection;talknAPI.findMenuIndex(t)}},{key:"handleOnChange",value:function(e){this.setState({rootConnection:e.target.value})}},{key:"handleOnKeyPress",value:function(e){if(13===e.nativeEvent.keyCode){var t=e.target.value,n="";n=0===t.indexOf("http://")?t.replace(/^http:\//,""):0===t.indexOf("https://")?t.replace(/^https:\//,""):0===t.indexOf("//")?t.replace(/^\/\//,"/"):0===t.indexOf("/")?t:"/"+t,location.href="https://"+l.default.domain+n}}},{key:"componentDidUpdate",value:function(){var e=this.props.state,t=e.app;switch(e.actionLog[0]){case"SERVER_TO_CLIENT[EMIT]:changeThread":switch(t.screenMode){case u.default.screenModeSmallLabel:talknAPI.onClickToggleDispMenu()}}}},{key:"renderLi",value:function(){var e=this,t=this.props,n=t.state,o=t.handleOnClickConnection,a=t.onClickToTimelineThread,u=t.onClickToMultiThread,l=t.onClickToSingleThread,s=t.onClickToChildThread,f=t.onClickToLogsThread;return n.menuIndex.map(function(t,n){return i.default.createElement(c.default,r({key:t.connection,menuIndexList:t,handleOnClickConnection:o,onClickToTimelineThread:a,onClickToMultiThread:u,onClickToSingleThread:l,onClickToChildThread:s,onClickToLogsThread:f,rank:n},e.props.state))})}},{key:"render",value:function(){var e=this.state.style,t=this.props.state.style,n=t.icon,o=s.default.getSearch(n.search),a=s.default.getUpdate(n.update);return i.default.createElement("nav",{"data-component-name":"MenuIndex",style:t.menuIndex.self},i.default.createElement("header",{style:t.menuIndex.header},i.default.createElement("div",{style:t.menuIndex.headerSearchIcon},o),i.default.createElement("input",{type:"text",style:t.menuIndex.headerInput,rows:1,onChange:this.handleOnChange,onKeyPress:this.handleOnKeyPress,placeholder:"Tune ch",value:this.state.rootConnection}),i.default.createElement("div",r({style:e,onClick:this.handleOnClickUpdate},this.getDecolationProps()),a)),i.default.createElement("ol",{style:t.menuIndex.ol},this.renderLi()))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=c(a),u=c(n(1)),l=c(n(38)),s=c(n(221));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidUpdate",value:function(){var e=this.props.state,t=e.app;switch(e.actionLog[0]){case"SERVER_TO_CLIENT[EMIT]:changeThread":switch(t.screenMode){case u.default.screenModeSmallLabel:t.isOpenMenu=!t.isOpenMenu,talknAPI.onClickToggleDispMenu(t)}}}},{key:"renderLi",value:function(){var e=this,t=this.props,n=t.state,o=t.onClickOtherThread;return n.menuLogs.map(function(t,n){return i.default.createElement(s.default,r({key:t.connection,menuIndexList:t,onClickOtherThread:o},e.props.state))})}},{key:"render",value:function(){var e=this.props.state,t=e.style,n=e.thread.connection,r=t.icon,o=l.default.getSearch(r.search);n.replace("/","");return i.default.createElement("nav",{"data-component-name":"MenuLogs",style:t.menuIndex.self},i.default.createElement("header",{style:t.menuIndex.header},i.default.createElement("span",{style:t.menuIndex.headerSearchIcon},o),i.default.createElement("span",{style:t.menuIndex.headerConnection},i.default.createElement("input",{type:"text",style:t.menuIndex.headerInput,rows:1,onChange:this.handleOnChange,onKeyPress:this.handleOnKeyPress,defaultValue:""}))),i.default.createElement("ol",{style:t.menuIndex.ol},this.renderLi()))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=(r=a)&&r.__esModule?r:{default:r};var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){return i.default.createElement("ol",{"data-component-name":"MenuSetting"},i.default.createElement("li",null,"menu SETTING"))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=f(a),u=(f(n(1)),f(n(28)),f(n(38))),l=f(n(511)),s=(f(n(67)),f(n(93))),c=f(n(66));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={displayLinks:!1},n.renderLiChild=n.renderLiChild.bind(n),n.handleOnTransitionEnd=n.handleOnTransitionEnd.bind(n),n.handleOnClickToggleBoard=n.handleOnClickToggleBoard.bind(n),n.handleOnClickToggleBubblePost=n.handleOnClickToggleBubblePost.bind(n),n.handleOnClickLinks=n.handleOnClickLinks.bind(n),n.handleOnClickLinkTabs=n.handleOnClickLinkTabs.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentDidMount",value:function(){var e=this.props.state.app,t=!("none"===c.default.getLinksDisplay(e));this.setState({displayLinks:t})}},{key:"handleOnClickToggleBoard",value:function(){this.props.state.app.isOpenLinks?(this.setState({exeTransitionEnd:!0}),talknAPI.toggleLinks()):talknAPI.toggleDispBoard()}},{key:"handleOnClickToggleBubblePost",value:function(){talknAPI.toggleBubblePost()}},{key:"handleOnClickLinks",value:function(){this.setState({exeTransitionEnd:!0}),talknAPI.toggleLinks()}},{key:"handleOnTransitionEnd",value:function(e){var t=this.state.exeTransitionEnd,n=this.props.state.app,o={};t&&(o=n.isOpenLinks?{displayLinks:!this.state.displayLinks}:{displayLinks:!1},this.setState(r({},o,{exeTransitionEnd:!1})))}},{key:"handleOnClickLinkTabs",value:function(e){this.setState({linkContentsKey:e.target.innerText})}},{key:"renderLiChild",value:function(){var e=this.props,t=e.state,n=e.handleOnClickMultistream,r=t.app,o=t.style,a=r.isRootConnection&&!r.isMediaConnection?n:function(){},l=u.default.getThunder(s.default.getThunder(t));return i.default.createElement("li",{onClick:a,style:o.board.menuLi},l,i.default.createElement("div",{style:o.board.menuLiChild},"CHILD"))}},{key:"render",value:function(){var e=this.props.state,t=e.style,n=e.app,o=u.default.getBubble(s.default.getBubble(e)),a=u.default.getPlay(s.default.getPlay(e));return i.default.createElement("div",{ref:"Board","data-componet-name":"Board",style:t.board.self,onTransitionEnd:this.handleOnTransitionEnd},i.default.createElement(l.default,r({},this.props,{displayLinks:this.state.displayLinks})),i.default.createElement("div",{"data-componet-name":"BoardMenu",style:t.board.menu},i.default.createElement("ul",{style:t.board.menuUl},i.default.createElement("li",{style:t.board.menuLi,onClick:this.handleOnClickToggleBubblePost},i.default.createElement("div",null,o),i.default.createElement("div",{style:t.board.menuLiBubble},"BUBBLE")),this.renderLiChild(),i.default.createElement("li",{onClick:this.handleOnClickLinks,style:t.board.menuLi},i.default.createElement("div",null,a),i.default.createElement("div",{style:t.board.menuLiLinks},"LINKS"))),i.default.createElement("div",{onClick:this.handleOnClickToggleBoard,style:t.board.menuToggle},n.isOpenBoard?"▲":"▼")))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=f(a),u=f(n(28)),l=f(n(67)),s=f(n(66)),c=f(n(512));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={linkContents:{html:[],music:[],movie:[]},linkContentsKey:"html"},n.renderLinkTabs=n.renderLinkTabs.bind(n),n.handleOnClickLinkTabs=n.handleOnClickLinkTabs.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,null,[{key:"getConnection",value:function(e,n){return t.isIncludeProtocol(e)?t.removeProtocol(e):0===e.indexOf("/")?"/"+n.host+e:"/"+n.host+"/"+e}},{key:"isIncludeProtocol",value:function(e){return e.indexOf(u.default.HTTP_PROTOCOL)>=0||e.indexOf(u.default.HTTPS_PROTOCOL)>=0}},{key:"removeProtocol",value:function(e){return e.replace(u.default.HTTP_PROTOCOL+"/","").replace(u.default.HTTPS_PROTOCOL+"/","")}}]),o(t,[{key:"componentDidMount",value:function(){var e=this,n=this.props,o=n.state,a=n.handleOnClickConnection,u=o.app,f=o.thread,d=o.style.menuIndexList,p=(d.upperRankWrap,d.upperRank,l.default.getDispRankBackground(0),s.default.tuneSize,!("none"===s.default.getLinksDisplay(u))),h=this.state.linkContents,g=i.default.createElement(c.default,r({key:"linkTune",active:!0,text:f.title,handleOnClick:function(){a(connection)}},this.props)),y=function(n,o){return function(u,l){var s=t.getConnection(u[n],f);return i.default.createElement(c.default,r({key:""+n+l,active:!1,text:u[o],handleOnClick:function(){a(s)}},e.props))}};h.html=f.links.map(y("href","text")),h.music=f.audios.map(y("src","src")),h.movie=f.videos.map(y("src","src")),h.html.unshift(g),h.music.unshift(g),h.movie.unshift(g),this.setState({linkContents:h,displayLinks:p})}},{key:"handleOnClickLinkTabs",value:function(e){this.setState({linkContentsKey:e.target.innerText})}},{key:"renderLinkTabs",value:function(){var e=this,t=this.props.state,n=t.style,o=t.app,a=this.state,u=a.linkContents,l=a.linkContentsKey,c=s.default.getLinksTabActive({app:o}),f=s.default.getLinksTabLast({app:o}),d=Object.keys(u),p=d.length-1;return d.map(function(t,o){var a=n.links.linksTabUnactive;return p===o&&(a=r({},a,f)),l===t&&(a=r({},a,c)),i.default.createElement("li",{key:t,style:a,onClick:e.handleOnClickLinkTabs},t)})}},{key:"render",value:function(){var e=this.props.displayLinks,t=this.props.state.style,n=this.state.linkContents[this.state.linkContentsKey];return e?i.default.createElement("div",{"data-componet-name":"Links",style:t.links.self},i.default.createElement("ul",{"data-componet-name":"LinksUl",style:t.links.linksUl},n),i.default.createElement("ul",{"data-componet-name":"LinkMenuUl",style:t.links.linkMenuUl},this.renderLinkTabs())):i.default.createElement("div",{"data-componet-name":"Links",style:t.links.links},i.default.createElement("ul",{"data-componet-name":"LinksUl",style:t.links.linksUl}))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=c(a),u=c(n(66)),l=c(n(195)),s=c(n(67));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));console.log("!");var r=e.active,o=e.state.style.link;return n.getEvents=n.getEvents.bind(n),n.state={active:r,style:o.unactiveLi},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"getEvents",value:function(e){var t=this,n=this.state.style;return e?{}:{onMouseOver:function(){t.setState({style:r({},n,{background:l.default.activeBgColor})})},onMouseLeave:function(){t.setState({style:r({},n,{background:l.default.unactiveBgColor})})}}}},{key:"render",value:function(){var e=this.state,t=e.active,n=e.style,o=this.props,a=o.text,l=o.handleOnClick,c=this.props.state.style.menuIndexList,f=c.upperRankWrap,d=c.upperRank,p=s.default.getDispRankBackground(0),h=u.default.tuneSize;return t?i.default.createElement("li",{key:"linkTune",style:this.props.state.style.link.tuneLi},i.default.createElement("span",{style:r({},f,{background:p,width:h})},i.default.createElement("span",{style:d},"TUNE")),i.default.createElement("span",null,a)):i.default.createElement("li",r({style:n,onClick:l},this.getEvents(t)),a)}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=f(a),u=f(n(28)),l=f(n(1)),s=f(n(514)),c=f(n(515));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=e.state.thread,o="",a="";return r.protocol!==u.default.HTTP_PROTOCOL&&r.protocol!==u.default.HTTPS_PROTOCOL||(o=r.protocol+"/"+r.connection.replace(/\/$/,""),a=l.default.getMediaTypeFromSrc(o)),n.state={src:o,mediaType:a},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){var t=e.state.thread;if(t.protocol===u.default.HTTP_PROTOCOL||t.protocol===u.default.HTTPS_PROTOCOL){var n=t.protocol+"/"+t.connection.replace(/\/$/,""),r=l.default.getMediaTypeFromSrc(n);this.state.src===n&&this.state.mediaType===r||this.setState({src:n,mediaType:r})}}},{key:"render",value:function(){var e=this.state,t=e.src;switch(e.mediaType){case l.default.mediaTagTypeAudio:return i.default.createElement(s.default,r({},this.props,{src:t}));case l.default.mediaTagTypeVideo:return i.default.createElement(c.default,r({},this.props,{src:t}));default:return null}}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),a=i(o);i(n(65));function i(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){var e=this.props,t=e.src,n=e.state.style;return a.default.createElement("audio",{src:t,style:n.audio.self,preload:"true",loop:!1,controls:!0,autoPlay:!1,"data-component-name":"Audio"})}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=(r=a)&&r.__esModule?r:{default:r};var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this.props,t=e.src,n=e.state.style;return i.default.createElement("video",{src:t,style:n.video.self,preload:"true",loop:!1,controls:!0,autoPlay:!1,controlsList:"nodownload","data-component-name":"Video"})}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=l(a),u=l(n(137));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.props.state.style.innerNotif,o=n.props.state.app.openInnerNotif;return n.state={style:r,notif:o},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){var t=this.state.style,n=(this.props.debug,e.state.style.innerNotif.self.height),o=e.state.app.openInnerNotif;t.self.height!==n&&(n===u.default.selfHeight+"px"&&setTimeout(e.closeInnerNotif,3e3),this.setState({notif:o,style:r({},t,{self:r({},t.self,{height:n})})}))}},{key:"render",value:function(){var e=this.state,t=e.style,n=e.notif;return e.isDebug?i.default.createElement("div",{"data-component-name":"InnerNotif",style:t.self,dangerouslySetInnerHTML:{__html:n}}):i.default.createElement("div",{"data-component-name":"InnerNotif",style:t.self},n)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(143)),o=a(n(518));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){var n=e,a=t,i={},u={};return o.default[e.actionLog[0]]&&(n=(i=o.default[e.actionLog[0]](e,t)).state,a=i.props),r.default[e.actionLog[0]]&&(n=(u=r.default[e.actionLog[0]](n,a)).state,a=u.props),{state:n,talknAPI:a.talknAPI}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});r(n(8)),r(n(1)),r(n(95));function r(e){return e&&e.__esModule?e:{default:e}}t.default={"SERVER_TO_CLIENT[EMIT]:getMore":function(e,t){return{state:e,props:t}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(2)),o=u(n(1)),a=u(n(520)),i=u(n(129));function u(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){var n=e.props.state.actionLog[0];l[t]&&l[t][n]&&l[t][n](e)};var l={Container:{"SERVER_TO_CLIENT[EMIT]:find":function(e){var t=e.props.state,n=t.app,r=t.thread;if(n.postsHeight+=i.default.getPostsHeight(),e.props.updatePostsHeight(n.postsHeight),n.dispThreadType===o.default.dispThreadTypeTimeline){var a=r.getMediaSrc(),u=r.getMediaTagType();talknWindow.setupPostsTimeline(n.rootConnection,a,u)}"NONE"===n.extensionMode&&window.scrollTo(0,9999999)},"SERVER_TO_CLIENT[EMIT]:changeThreadDetail":function(e){var t=e.props.state,n=t.app,r=t.threadDetail,o=t.thread;n.isOpenDetail||(n.isOpenDetail=!0,talknAPI.onClickToggleDispDetail({threadDetail:r,thread:o,app:n}))},ON_TRANSITION_END:function(e){var t=e.props.state.app;t.postsHeight+=i.default.getPostsHeight(),e.props.updatePostsHeight(t.postsHeight)},OPEN_NOTIF:function(e){var t=e.props.state.app;if(t.extensionMode===o.default.extensionModeExtBottomLabel||t.extensionMode===o.default.extensionModeExtIncludeLabel||t.extensionMode===o.default.extensionModeExtModalLabel){var n=e.handleOnClickToggleMain,i=e.props,u=i.state,l=u.style,s=u.thread,c=i.state["posts"+t.dispThreadType],f=c[c.length-1];f&&!t.isOpenPosts&&(e.props.createNotif(),e.setState({notifs:e.state.notifs.concat(r.default.createElement(a.default,{key:f._id,app:t,style:l,thread:s,post:f,handleOnClickToggleMain:n}))}))}},CLOSE_NOTIF:function(e){e.state.notifs.length>0&&e.setState({notifs:[]})},DELEGATE_POST:function(e){talknAPI.post(),talknAPI.onChangeInputPost(""),talknAPI.closeDispPostsSupporter()},GET_CLIENT_METAS:function(e){var t=e.props.state.thread.serverMetas;talknAPI.updateThreadServerMetas(t)},ON_CLICK_TOGGLE_DISP_DETAIL:function(e){var t=e.props.state.app;t.extensionMode!==o.default.extensionModeExtModalLabel&&t.extensionMode!==o.default.extensionModeExtIncludeLabel||talknWindow.parentTo("getClientMetas")}},Posts:{"SERVER_TO_CLIENT[EMIT]:find":function(e){e.props.state.app;var t=document.querySelector("[data-component-name=Posts]");talknWindow.threadHeight=t.clientHeight},NEXT_POSTS_TIMELINE:s,"SERVER_TO_CLIENT[BROADCAST]:post":s,"SERVER_TO_CLIENT[EMIT]:getMore":function(e){var t=e.props.state.app,n=document.querySelector("[data-component-name=Posts]");if(t.extensionMode===o.default.extensionModeExtBottomLabel||t.extensionMode===o.default.extensionModeExtIncludeLabel||t.extensionMode===o.default.extensionModeExtModalLabel)n.scrollTop=n.scrollHeight-e.state.scrollHeight;else{var r=n.clientHeight-talknWindow.threadHeight;window.scrollTo(0,r),talknWindow.threadHeight=n.clientHeight}}}};function s(e){var t=e.props.state.app,n=document.querySelector("[data-component-name=Posts]");if(t.postsHeight+=i.default.getLastPostHeight(),"NONE"===t.extensionMode)talknWindow.threadHeight=n.clientHeight,t.isOpenPosts&&talknWindow.isScrollBottom&&talknWindow.animateScrollTo(talknWindow.threadHeight,400,e.props.endAnimateScrollTo),t.isOpenPosts&&e.props.openNewPost();else{var r=e.state.isScrollBottom;t.isOpenPosts&&r&&e.animateScrollTo(n,n.scrollHeight,400,e.props.endAnimateScrollTo),t.isOpenPosts&&e.props.openNewPost()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=s(a),u=s(n(212)),l=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.log=n.log.bind(n),n.display=n.display.bind(n),n.startOpen=n.startOpen.bind(n),n.startNotif=n.startNotif.bind(n),n.startClose=n.startClose.bind(n),n.undisplay=n.undisplay.bind(n),n.onTransitionEnd=n.onTransitionEnd.bind(n);var o=n.props.style.post,a=n.props.style.notif,i={};return i.self=r({},o.self,a.self),i.bottom=r({},o.bottom,a.bottom),i.bottomIcon=r({},o.bottomIcon,a.bottomIcon),i.bottomPost=r({},o.bottomPost,a.bottomPost),n.state={style:i,status:t.STATUS_CONSTRUCT},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,null,[{key:"STATUS_CONSTRUCT",get:function(){return 1}},{key:"STATUS_DISPLAY",get:function(){return 2}},{key:"STATUS_START_OPEN",get:function(){return 3}},{key:"STATUS_START_NOTIF",get:function(){return 4}},{key:"STATUS_START_CLOSE",get:function(){return 5}},{key:"STATUS_UNDISPLAY",get:function(){return 6}}]),o(t,[{key:"componentWillUnmount",value:function(){return!0}},{key:"componentDidMount",value:function(){this.display()}},{key:"display",value:function(){var e=this.state.style;this.setState({status:t.STATUS_DISPLAY,style:r({},e,{self:r({},e.self,{transition:"300ms",transform:"translate3d(0px, 40px, 0px)"})})}),setTimeout(this.startOpen,0)}},{key:"startOpen",value:function(){var e=this.state.style,n=l.default.transitionNotif;this.setState({status:t.STATUS_START_OPEN,style:r({},e,{self:r({},e.self,{transition:"900ms",transform:"translate3d(0px, 0px, 0px)"})})}),setTimeout(this.startNotif,1*n)}},{key:"startNotif",value:function(){var e=this.state.style,n=l.default.transitionNotif;this.setState({status:t.STATUS_START_NOTIF,style:r({},e,{self:r({},e.self,{transition:1*n+"ms"})})}),setTimeout(this.startClose,1*l.default.transitionNotifDisp)}},{key:"startClose",value:function(){var e=this.state.style,n=l.default.transitionNotif;this.setState({status:t.STATUS_START_CLOSE,style:r({},e,{self:r({},e.self,{transition:900*n+"ms",transform:"translate3d(0px, 40px, 0px)"})})}),setTimeout(this.undisplay,n)}},{key:"undisplay",value:function(){this.setState({status:t.STATUS_UNDISPLAY})}},{key:"onTransitionEnd",value:function(){this.state===t.STATUS_START_CLOSE&&this.setState({status:t.STATUS_UNDISPLAY})}},{key:"log",value:function(e){var n=(new Date).getTime();switch(e){case t.STATUS_CONSTRUCT:console.log("@@@ 1 STATUS_CONSTRUCT "+this.state.style.self.transform+" "+this.state.style.self.transition+" "+n);break;case t.STATUS_DISPLAY:console.log("@@@ 2 STATUS_DISPLAY "+this.state.style.self.transform+" "+this.state.style.self.transition+" "+n);break;case t.STATUS_START_OPEN:console.log("@@@ 3 STATUS_START_OPEN "+this.state.style.self.transform+" "+this.state.style.self.transition+" "+n);break;case t.STATUS_START_NOTIF:console.log("@@@ 4 STATUS_START_NOTIF "+this.state.style.self.transform+" "+this.state.style.self.transition+" "+n);break;case t.STATUS_START_CLOSE:console.log("@@@ 5 STATUS_START_CLOSE "+this.state.style.self.transform+" "+this.state.style.self.transition+" "+n);break;case t.STATUS_UNDISPLAY:console.log("@@@ 6 STATUS_UNDISPLAY "+this.state.style.self.transform+" "+this.state.style.self.transition+" "+n)}}},{key:"render",value:function(){var e=this.props,n=e.post,o=e.app,a=e.thread,l=e.handleOnClickToggleMain,s=this.state,c=s.status,f=s.style,d=n.layer-a.layer;if(!o.isOpenNotif)return null;switch(c){case t.STATUS_CONSTRUCT:case t.STATUS_DISPLAY:case t.STATUS_START_OPEN:case t.STATUS_START_NOTIF:case t.STATUS_START_CLOSE:return i.default.createElement(u.default,r({key:n._id,mode:"notif"},n,{app:o,thread:a,onTransitionEnd:this.onTransitionEnd,childLayerCnt:d,style:f,handleOnClickToggleMain:l}));case t.STATUS_UNDISPLAY:default:return null}}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"setupMath",value:function(){Math.easeInOutQuad=function(e,t,n,r){return(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t}}}]),e}();t.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,