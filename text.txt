yarn run v1.10.1
$ nodebrew use v10.9.0;babel-node server/run.js --exec babel-node --presets env,react,stage-2
use v10.9.0
MONGO DB RUN : 27017
SOCKET IO RUN : 10443
@@@ LISTEN HTTPS 443
IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: true,
     emitClose: true,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   TLSSocket {
     _tlsOptions:
      { secureContext: [SecureContext],
        isServer: true,
        server: [Server],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function: SNICallback] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: 'localhost',
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      [Object: null prototype] {
        close: [Array],
        end: [Array],
        secure: [Function: onSocketSecure],
        _tlsError: [Function: onSocketTLSError],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        [Symbol(asyncId)]: 163,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0a 4d 49 49 45 70 41 49 42 41 41 4b 43 41 51 45 41 74 7a ... >,
        cert:
         <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a 4d 49 49 46 43 7a 43 43 41 2f 4f 67 41 77 49 42 41 67 49 4a 41 50 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '75f21edfa10f4a649a50462ff690d3bf',
        _sharedCreds: [SecureContext],
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::443',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 80 },
     _server: null,
     ssl:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        flush: [Function: flush],
        write: [Function: write],
        end: [Function: end],
        on: [Function: on],
        writeHead: [Function: writeHead],
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(res)]:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     [Symbol(asyncId)]: 164,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10931,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 171,
        [Symbol(triggerId)]: 164 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  connection:
   TLSSocket {
     _tlsOptions:
      { secureContext: [SecureContext],
        isServer: true,
        server: [Server],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function: SNICallback] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: 'localhost',
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      [Object: null prototype] {
        close: [Array],
        end: [Array],
        secure: [Function: onSocketSecure],
        _tlsError: [Function: onSocketTLSError],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        [Symbol(asyncId)]: 163,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0a 4d 49 49 45 70 41 49 42 41 41 4b 43 41 51 45 41 74 7a ... >,
        cert:
         <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a 4d 49 49 46 43 7a 43 43 41 2f 4f 67 41 77 49 42 41 67 49 4a 41 50 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '75f21edfa10f4a649a50462ff690d3bf',
        _sharedCreds: [SecureContext],
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::443',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 80 },
     _server: null,
     ssl:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        flush: [Function: flush],
        write: [Function: write],
        end: [Function: end],
        on: [Function: on],
        writeHead: [Function: writeHead],
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(res)]:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     [Symbol(asyncId)]: 164,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10931,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 171,
        [Symbol(triggerId)]: 164 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers:
   { host: 'localhost',
     connection: 'keep-alive',
     accept:
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
     'upgrade-insecure-requests': '1',
     'user-agent':
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36',
     referer: 'https://www.localhost/',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'ja,zh;q=0.9,en;q=0.8,en-US;q=0.7',
     cookie: 'io=DHwcBvRE2GpPo2TRAAAA' },
  rawHeaders:
   [ 'Host',
     'localhost',
     'Connection',
     'keep-alive',
     'Accept',
     'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
     'Upgrade-Insecure-Requests',
     '1',
     'User-Agent',
     'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36',
     'Referer',
     'https://www.localhost/',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'ja,zh;q=0.9,en;q=0.8,en-US;q=0.7',
     'Cookie',
     'io=DHwcBvRE2GpPo2TRAAAA' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/yahoo.co.jp',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client:
   TLSSocket {
     _tlsOptions:
      { secureContext: [SecureContext],
        isServer: true,
        server: [Server],
        requestCert: false,
        rejectUnauthorized: true,
        handshakeTimeout: 120000,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function: SNICallback] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: 'localhost',
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events:
      [Object: null prototype] {
        close: [Array],
        end: [Array],
        secure: [Function: onSocketSecure],
        _tlsError: [Function: onSocketTLSError],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        [Symbol(asyncId)]: 163,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: false,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: true,
        key:
         <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0a 4d 49 49 45 70 41 49 42 41 41 4b 43 41 51 45 41 74 7a ... >,
        cert:
         <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0a 4d 49 49 46 43 7a 43 43 41 2f 4f 67 41 77 49 42 41 67 49 4a 41 50 ... >,
        honorCipherOrder: true,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: '75f21edfa10f4a649a50462ff690d3bf',
        _sharedCreds: [SecureContext],
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 2,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::443',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(handshake-timeout)]: 120000,
        [Symbol(snicallback)]: undefined,
        [Symbol(asyncId)]: 80 },
     _server: null,
     ssl:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _requestCert: false,
     _rejectUnauthorized: true,
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 0,
        [Symbol(isReused)]: true },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        flush: [Function: flush],
        write: [Function: write],
        end: [Function: end],
        on: [Function: on],
        writeHead: [Function: writeHead],
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(res)]:
      TLSWrap {
        _parent: [TCP],
        _parentWrap: [Socket],
        _secureContext: [SecureContext],
        reading: true,
        onread: [Function: onStreamRead],
        onhandshakestart: [Function: onhandshakestart],
        onhandshakedone: [Function: onhandshakedone],
        onclienthello: [Function: loadSession],
        oncertcb: [Function: loadSNI],
        onnewsession: [Function: onnewsession],
        lastHandshakeTime: 10924,
        handshakes: 0,
        onerror: [Function: onerror],
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     [Symbol(asyncId)]: 164,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 10931,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 171,
        [Symbol(triggerId)]: 164 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0,
     [Symbol(error-emitted)]: false },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/yahoo.co.jp',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/yahoo.co.jp',
     path: '/yahoo.co.jp',
     href: '/yahoo.co.jp',
     _raw: '/yahoo.co.jp' },
  params: { '0': '/yahoo.co.jp' },
  query: {},
  res:
   ServerResponse {
     domain: null,
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'localhost',
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle: [TLSWrap],
        _parent: [Socket],
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: null,
        ssl: [TLSWrap],
        _requestCert: false,
        _rejectUnauthorized: true,
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 164,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [Timeout],
           _idleStart: 10931,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 171,
           [Symbol(triggerId)]: 164 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(error-emitted)]: false },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'localhost',
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle: [TLSWrap],
        _parent: [Socket],
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: null,
        ssl: [TLSWrap],
        _requestCert: false,
        _rejectUnauthorized: true,
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(res)]: [TLSWrap],
        [Symbol(asyncId)]: 164,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [Timeout],
           _idleStart: 10931,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 171,
           [Symbol(triggerId)]: 164 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(error-emitted)]: false },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     flush: [Function: flush],
     write: [Function: write],
     end: [Function: end],
     on: [Function: on],
     writeHead: [Function: writeHead],
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]: [Object: null prototype] { 'x-powered-by': [Array] } },
  body: {},
  _parsedOriginalUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/yahoo.co.jp',
     path: '/yahoo.co.jp',
     href: '/yahoo.co.jp',
     _raw: '/yahoo.co.jp' },
  sessionStore:
   MemoryStore {
     domain: null,
     _events:
      [Object: null prototype] {
        disconnect: [Function: ondisconnect],
        connect: [Function: onconnect] },
     _eventsCount: 2,
     _maxListeners: undefined,
     sessions: [Object: null prototype] {},
     generate: [Function] },
  sessionID: '-7jzl4oEPK34Tyo_4UGeCmdfG3f8x9Bz',
  session:
   Session {
     cookie:
      { path: '/',
        _expires: null,
        originalMaxAge: null,
        httpOnly: true } },
  _passport:
   { instance:
      Authenticator {
        _key: 'passport',
        _strategies: [Object],
        _serializers: [Array],
        _deserializers: [Array],
        _infoTransformers: [],
        _framework: [Object],
        _userProperty: 'user',
        _sm: [SessionManager],
        Authenticator: [Function: Authenticator],
        Passport: [Function: Authenticator],
        Strategy: [Function],
        strategies: [Object] } },
  route:
   Route {
     path: '*',
     stack:
      [ [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer],
        [Layer] ],
     methods:
      { acl: true,
        bind: true,
        checkout: true,
        connect: true,
        copy: true,
        delete: true,
        get: true,
        head: true,
        link: true,
        lock: true,
        'm-search': true,
        merge: true,
        mkactivity: true,
        mkcalendar: true,
        mkcol: true,
        move: true,
        notify: true,
        options: true,
        patch: true,
        post: true,
        propfind: true,
        proppatch: true,
        purge: true,
        put: true,
        rebind: true,
        report: true,
        search: true,
        source: true,
        subscribe: true,
        trace: true,
        unbind: true,
        unlink: true,
        unlock: true,
        unsubscribe: true } } }
ACCESS WWW /yahoo.co.jp includeIframeTag false
------------------------------- disconnect
------------------------------- initClientState
------------------------------- find
------------------------------- findMenuIndex
