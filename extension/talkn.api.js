(()=>{var I={5857:(I,F,g)=>{"use strict";function B(I,F,g){return F in I?Object.defineProperty(I,F,{value:g,enumerable:!0,configurable:!0,writable:!0}):I[F]=g,I}function c(I,F){var g=Object.keys(I);if(Object.getOwnPropertySymbols){var B=Object.getOwnPropertySymbols(I);F&&(B=B.filter((function(F){return Object.getOwnPropertyDescriptor(I,F).enumerable}))),g.push.apply(g,B)}return g}function U(I){for(var F=1;F<arguments.length;F++){var g=null!=arguments[F]?arguments[F]:{};F%2?c(Object(g),!0).forEach((function(F){B(I,F,g[F])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(g)):c(Object(g)).forEach((function(F){Object.defineProperty(I,F,Object.getOwnPropertyDescriptor(g,F))}))}return I}function t(I){return"Minified Redux error #"+I+"; visit https://redux.js.org/Errors?code="+I+" for the full message or use the non-minified dev environment for full errors. "}g.r(F),g.d(F,{__DO_NOT_USE__ActionTypes:()=>s,applyMiddleware:()=>G,bindActionCreators:()=>e,combineReducers:()=>V,compose:()=>b,createStore:()=>i});var Q="function"==typeof Symbol&&Symbol.observable||"@@observable",C=function(){return Math.random().toString(36).substring(7).split("").join(".")},s={INIT:"@@redux/INIT"+C(),REPLACE:"@@redux/REPLACE"+C(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+C()}};function l(I){if("object"!=typeof I||null===I)return!1;for(var F=I;null!==Object.getPrototypeOf(F);)F=Object.getPrototypeOf(F);return Object.getPrototypeOf(I)===F}function i(I,F,g){var B;if("function"==typeof F&&"function"==typeof g||"function"==typeof g&&"function"==typeof arguments[3])throw new Error(t(0));if("function"==typeof F&&void 0===g&&(g=F,F=void 0),void 0!==g){if("function"!=typeof g)throw new Error(t(1));return g(i)(I,F)}if("function"!=typeof I)throw new Error(t(2));var c=I,U=F,C=[],V=C,d=!1;function e(){V===C&&(V=C.slice())}function b(){if(d)throw new Error(t(3));return U}function G(I){if("function"!=typeof I)throw new Error(t(4));if(d)throw new Error(t(5));var F=!0;return e(),V.push(I),function(){if(F){if(d)throw new Error(t(6));F=!1,e();var g=V.indexOf(I);V.splice(g,1),C=null}}}function A(I){if(!l(I))throw new Error(t(7));if(void 0===I.type)throw new Error(t(8));if(d)throw new Error(t(9));try{d=!0,U=c(U,I)}finally{d=!1}for(var F=C=V,g=0;g<F.length;g++)(0,F[g])();return I}function R(I){if("function"!=typeof I)throw new Error(t(10));c=I,A({type:s.REPLACE})}function u(){var I,F=G;return(I={subscribe:function(I){if("object"!=typeof I||null===I)throw new Error(t(11));function g(){I.next&&I.next(b())}return g(),{unsubscribe:F(g)}}})[Q]=function(){return this},I}return A({type:s.INIT}),(B={dispatch:A,subscribe:G,getState:b,replaceReducer:R})[Q]=u,B}function V(I){for(var F=Object.keys(I),g={},B=0;B<F.length;B++){var c=F[B];"function"==typeof I[c]&&(g[c]=I[c])}var U,Q=Object.keys(g);try{!function(I){Object.keys(I).forEach((function(F){var g=I[F];if(void 0===g(void 0,{type:s.INIT}))throw new Error(t(12));if(void 0===g(void 0,{type:s.PROBE_UNKNOWN_ACTION()}))throw new Error(t(13))}))}(g)}catch(I){U=I}return function(I,F){if(void 0===I&&(I={}),U)throw U;for(var B=!1,c={},C=0;C<Q.length;C++){var s=Q[C],l=g[s],i=I[s],V=l(i,F);if(void 0===V)throw F&&F.type,new Error(t(14));c[s]=V,B=B||V!==i}return(B=B||Q.length!==Object.keys(I).length)?c:I}}function d(I,F){return function(){return F(I.apply(this,arguments))}}function e(I,F){if("function"==typeof I)return d(I,F);if("object"!=typeof I||null===I)throw new Error(t(16));var g={};for(var B in I){var c=I[B];"function"==typeof c&&(g[B]=d(c,F))}return g}function b(){for(var I=arguments.length,F=new Array(I),g=0;g<I;g++)F[g]=arguments[g];return 0===F.length?function(I){return I}:1===F.length?F[0]:F.reduce((function(I,F){return function(){return I(F.apply(void 0,arguments))}}))}function G(){for(var I=arguments.length,F=new Array(I),g=0;g<I;g++)F[g]=arguments[g];return function(I){return function(){var g=I.apply(void 0,arguments),B=function(){throw new Error(t(15))},c={getState:g.getState,dispatch:function(){return B.apply(void 0,arguments)}},Q=F.map((function(I){return I(c)}));return B=b.apply(void 0,Q)(g.dispatch),U(U({},g),{},{dispatch:B})}}}},8200:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(7771)),U=B(g(300)),t=B(g(1665)),Q="talkn_banner_live_cnt";F.default=I=>{document.querySelectorAll(`.${t.default.bannerClass}`).forEach((F=>{if(!F.querySelector("a img")){const B=F.getAttribute("data-href");if(B){(g=F).style.display="flex",g.style["justify-content"]="flex-start",g.style["align-items"]="flex-start",g.style.width="64px",g.style.height="64px",F=g;const C=(I=>{if(!I||""===I)return"/";const F=I.replace("https:/","").replace("http:/",""),g=F.endsWith("/")?F:F+"/";return g.startsWith("/")?g:"/"+g})(B),s=(I=>{let F=document.createElement("a");return F.href=`//${U.default.domain}${I}`,F.style.display="inline-block",F=(I=>(I.style.display="inline-flex",I.style.width="inherit",I.style.height="inherit",I.style["justify-content"]="center",I.style["align-items"]="center",I))(F),F})(C),l=(()=>{let I=document.createElement("span");return I.innerText="0",I.className=Q,I=(I=>{const F="28px";return I.style.display="flex",I.style["justify-content"]="center",I.style["align-items"]="center",I.style.position="relative",I.style.right="17px",I.style.border="1px solid rgba(255,255,255,1)",I.style["border-radius"]=F,I.style.background="rgba(79, 174, 159, 0.6)",I.style.margin="0",I.style.padding="0",I.style.width=F,I.style.height=F,I.style["min-width"]=F,I.style["min-height"]=F,I.style["max-width"]=F,I.style["max-height"]=F,I.style["text-align"]="center",I.style["font-size"]="13px",I.style["font-weight"]="300",I.style["line-height"]="10px",I.style["letter-spacing"]="0",I.style.color="rgb(255, 255, 255)",I})(I),I})(),i=(()=>{let I=document.createElement("img");return I.src=`//${U.default.assetsImgPath}logo128.png`,I=(I=>(I.style.display="inline-block",I.style.width="58px",I.style.height="58px",I))(I),I})();s.append(i),F.append(s),F.append(l),((I,F,g)=>{const B=`${t.default.bannerClass}: ${F}`;I.tune({ch:F,id:B},((I,F,B)=>{((I,F,g,B,U)=>{g===c.default.API_RESPONSE_TYPE_BROADCAST&&document.querySelectorAll(`.${t.default.bannerClass}[data-href="${F}"]`).forEach((I=>{I.querySelector(`.${Q}`).innerHTML=U.thread.liveCnt}))})(0,g,I,0,B)}))})(I,C,B)}}var g}))}},2874:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(7509)),U=B(g(6552)),t=B(g(1223)),Q=B(g(7771)),C=B(g(1665)),s=B(g(8527)),l=B(g(4009));class i{constructor(I){this.id=C.default.APP_TYPES.API,this.store=l.default(),this.parentHref=location.href,this.id=I,this.bootOption=new U.default(this.id);const F={...new s.default(this.bootOption)};this.store.dispatch({...F,type:"INIT_CLIENT"}),this.api=this.api.bind(this),this.injectStateToApp=this.injectStateToApp.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise((I=>{this.conned=I,this.wsApi=new c.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage}))}api(I,F={},g){I===i.SET_CALLBACK_METHOD&&g&&(this.callback=g),this.postMessage(I,F)}injectStateToApp(I){this.api("fetchPosts",I),this.api("rank",I)}postMessage(I,F={}){const g={id:F.id?F.id:this.id,type:t.default.CLIENT_TO_WSAPI_TYPE,ioType:Q.default.API_SETUP,method:I,params:F};this.wsApi.postMessage(g)}onMessage(I){const{currentTarget:F,data:g}=I,{type:B,method:c,ioType:U,params:Q,methodBack:s}=g;if(F instanceof Worker&&B===t.default.WSAPI_TO_CLIENT_TYPE){const I=t.default.convertApiToClientActionType(c),{ioType:F,exeMethod:g}=t.default.getMessageTypes(I),B={...Q,type:I};if(this.exePublicCallback(F,g,B),"WS_CONSTRUCTED"===c&&(this.conned(this),this.id===C.default.APP_TYPES.PORTAL)){const I=Q.ch?{...this.bootOption,ch:Q.ch}:this.bootOption;this.api("tune",I)}this.id,C.default.APP_TYPES.EXTENSION,this.id!==C.default.APP_TYPES.PORTAL&&this.id!==C.default.APP_TYPES.EXTENSION||"SERVER_TO_API[EMIT]:tune"===c&&this.injectStateToApp(Q)}}onError(I){console.warn(I)}exePublicCallback(I,F,g){this.callback&&(I!==Q.default.API_RESPONSE_TYPE_EMIT&&I!==Q.default.API_RESPONSE_TYPE_BROADCAST||this.callback(I,F,g))}}F.default=i},4009:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=g(5857),U=B(g(843)),t=B(g(8262));F.default=function(I={}){let F=[U.default.updateAction];return c.createStore(t.default,I,c.applyMiddleware(...F))}},7536:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1665)),U=B(g(6926));function t(I,F){const{app:g}=I,{storageKey:B}=c.default;if(g.isRootCh){const{postsMulti:F,postsSingle:g}=I}return{state:I,props:F}}function Q(I){const{app:F,thread:g,postsTimeline:B}=I,{storageKey:U}=c.default;if(F.isMediaCh){const F=B&&B.length?B.length:0;let g=[],c=[];for(let I=0;I<F;I++)0===B[I].currentTime?g.push(B[I]):c.push(B[I]);I.postsTimeline=g}return I}F.default={"SERVER_TO_API[BROADCAST]:post":t,"SERVER_TO_API[EMIT]:getMore":t,"SERVER_TO_API[EMIT]:fetchPosts":(I,F)=>({state:I,props:F}),"SERVER_TO_API[EMIT]:changeThread":(I,F)=>{const{app:g}=I,{rootCh:B}=g,{storageKey:t}=c.default;return g.dispThreadType===U.default.dispThreadTypeMulti?t.postSingle:t.postMulti,{state:I,props:F}},ON_CLICK_MENU:(I,F)=>{const{rootCh:g}=I.app;return{state:I,props:F}},RESIZE_END_WINDOW:(I,F)=>({state:I,props:F}),setStoragePosts:function(I,F){const{app:g}=I;return g.isMediaCh?{state:I=Q(I),props:F}:t(I,F)},setStorageHtmlPosts:t,setStoragePostsTimeline:Q}},843:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216)),U=B(g(7536)),t=B(g(6926)),Q=B(g(9478)),C=B(g(8091)),s=B(g(978));F.default={updateAction:I=>F=>g=>{const B=I.getState();g&&(g.app=g.app?{...B.app,...g.app}:B.app,g.app.actioned=g.type),l[g.type]&&(g=l[g.type](B,g)),g&&F(g)}};const l={"SERVER_TO_API[EMIT]:tune":(I,F)=>{if(F.app[`offset${F.app.dispThreadType}FindId`]=F.app.offsetFindId,F.app.tuned=F.thread.ch,F.app.detailCh=F.thread.ch,F.app.isRootCh=F.app.rootCh===F.thread.ch,F.app.isMediaCh=t.default.getIsMediaCh(F.thread.ch),F.app.isToggleMultistream=!1,F.thread.title=F.thread.serverMetas.title,F.thread.hasSlash=c.default.getBool(F.thread.hasSlash),F.threads=s.default.getMergedThreads(I.threads,F.thread),F.threadDetail={...F.thread},F.app.isRootCh&&(F.app.rootTitle=F.thread.title),F.app.isMediaCh){const I=t.default.getMediaSrc(F.thread.protocol,F.thread.ch);F.app.chType=t.default.getMediaTypeFromSrc(I)}else F.app.chType=t.default.mediaTagTypeNo;return F},"SERVER_TO_API[EMIT]:fetchPosts":(I,F)=>((F={...Q.default.getAnyActionPosts(F,I)}).app.offsetFindId=t.default.getOffsetFindId({posts:F.posts}),F.app[`offset${F.app.dispThreadType}FindId`]=F.app.offsetFindId,F.app.isMediaCh&&(F=U.default.setStoragePostsTimeline(F)),F),"API_TO_SERVER[REQUEST]:changeThread":(I,F)=>(F.app=F.app?{...I.app,...F.app}:I.app,F.app.offsetFindId=t.default.defaultOffsetFindId,F.app.offsetTimelineFindId=t.default.defaultOffsetFindId,F.app.offsetMultiFindId=t.default.defaultOffsetFindId,F.app.offsetSingleFindId=t.default.defaultOffsetFindId,F.app.offsetChildFindId=t.default.defaultOffsetFindId,F.app.offsetLogsFindId=t.default.defaultOffsetFindId,F.thread=F.thread?{...I.thread,...F.thread}:I.thread,F.posts=new Q.default,F.postsMulti=new Q.default,F.postsChild=new Q.default,F.postsTimeline=new Q.default,F.postsSingle=new Q.default,F),"SERVER_TO_API[EMIT]:changeThread":(I,F)=>(F.app.tuned=F.thread.ch,F.thread.title=F.thread.serverMetas.title,F.threads=s.default.getMergedThreads(I.threads,F.thread),F.threadDetail={...F.thread},F),"SERVER_TO_API[EMIT]:updateThread":(I,F)=>(F.threads=s.default.getMergedThreads(I.threads,F.thread),F.threadDetail={...F.thread},F),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(I,F)=>(F.threads=s.default.getMergedThreads(I.threads,F.thread),F.threadDetail={...F.thread},F),"SERVER_TO_API[REQUEST]:post":(I,F)=>(F.app.inputStampId=0,F),"SERVER_TO_API[BROADCAST]:post":(I,F)=>{if(I.thread.ch===F.thread.ch&&F.thread.emotions&&Object.keys(F.thread.emotions).length>0){const g={...F.thread.emotions};F.thread.emotions={...I.thread.emotions},Object.keys(g).forEach((I=>{Object.keys(g[I]).forEach((B=>{F.thread.emotions[I][B]=F.thread.emotions[I][B]+g[I][B]}))})),F.threadDetail={...F.thread}}return F.thread.ch=I.thread.ch,F=Q.default.getAnyActionPosts(F,I)},"SERVER_TO_API[EMIT]:getMore":(I,F)=>(F.app.offsetFindId=t.default.getOffsetFindId({posts:F.posts}),F.app[`offset${F.app.dispThreadType}FindId`]=F.app.offsetFindId,Q.default.getAnyActionPosts(F,I)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(I,F)=>(delete F.thread,F),"SERVER_TO_API[EMIT]:changeThreadDetail":(I,F)=>(F.app.detailCh=F.thread.ch,F.threads=s.default.getMergedThreads(I.threads,F.thread),F.threadDetail={...F.thread},F.threadDetail.title=F.thread.serverMetas.title,F.threadDetail.emotions={...I.threads[F.app.detailCh].emotions},F.threadDetail.hasSlash=null===F.threadDetail.hasSlash||c.default.getBool(F.threadDetail.hasSlash),delete F.thread,F.thread=F,F),CLOSE_LINKS:(I,F)=>(F.app=F.app?{...I.app,...F.app}:I.app,F.thread=F.thread?{...I.thread,...F.thread}:I.thread,F),ON_CLICK_TO_MULTI_THREAD:(I,F)=>(F.app.isLinkCh=!1,F.app.isRootCh=F.thread.ch===I.app.rootCh,I.threads[F.thread.ch]?F.thread=I.threads[F.thread.ch]:F.thread={...I.thread,...F.thread},F),ON_CLICK_TO_TIMELINE_THREAD:(I,F)=>{const g=F.thread.ch;F.thread={...I.thread,...F.thread},F.thread.ch=g;const B=t.default.getMediaSrc(F.thread.protocol,F.thread.ch);return F.thread.findType=C.default.getFindTypeFromSrc(B),F.postsTimeline=[],F.app.isMediaCh=!0,F.app.offsetFindId=t.default.defaultOffsetFindId,F.app.offsetChildFindId=t.default.defaultOffsetFindId,F},ON_CLICK_TO_SINGLE_THREAD:(I,F)=>(F.thread={...I.thread,...F.thread},F.app=I.app,F.app.isLinkCh=!1,F),ON_CLICK_TO_CHILD_THREAD:(I,F)=>(F.thread={...I.thread,...F.thread},F.postsChild=[],F.app.offsetFindId=t.default.defaultOffsetFindId,F.app.offsetChildFindId=t.default.defaultOffsetFindId,F),ON_CLICK_MENU:(I,F)=>(F.app.desc=F.ui.menuComponent,F),RESIZE_END_WINDOW:(I,F)=>(F.thread=I.thread,F),ON_CLICK_TOGGLE_DISP_DETAIL:(I,F)=>(F.threadDetail.hasSlash=null===F.threadDetail.hasSlash||c.default.getBool(F.threadDetail.hasSlash),F),TOGGLE_BUBBLE_POST:(I,F)=>(F.thread=I.thread,F),START_LINK_MEDIA:(I,F)=>(F.app.isLinkCh=!0,F),GET_CLIENT_METAS:(I,F)=>{let g=!1,{clientMetas:B}=F,{serverMetas:c}=I.thread;if(F.thread={},Object.keys(B).forEach(((I,U)=>{B[I]&&""!==B[I]&&c[I]!==B[I]&&(F.thread.serverMetas||(F.thread.serverMetas={}),g=!0,F.thread.serverMetas[I]=B[I])})),g)return F.threadDetail={...I.threadDetail},F.threadDetail.serverMetas={...F.threadDetail.serverMetas,...F.thread.serverMetas},F}}},1006:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.PublicApi=void 0,F.PublicApi=class{constructor(I){const{api:F,store:g}=I;return{ver:"2021/02/01",on:I=>F("onResponseChAPI",I),useIo:I=>F("use",I),tune:(I,g)=>F("tune",I,g),untune:I=>F("untune",{id:I}),rank:I=>F("rank",{thread:{ch:I}}),fetchPosts:I=>F("fetchPosts",{thread:{ch:I}}),post:(I={})=>F("post",{app:{...I}}),getState:()=>g.getState()}}}},9580:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=(I=[],F)=>[F.type,...I]},9300:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1534));F.default=(I=new c.default,F)=>F.analyze?I.merge(F.analyze):I},3966:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(6926));F.default=(I=new c.default,F)=>F.app?new c.default(F.app):I},7157:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(2169));F.default=(I=new c.default,F)=>F.bootOption?I.merge(F.bootOption):I},8262:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0}),F.reducerFiles=void 0;const c=g(5857),U=B(g(9580)),t=B(g(9300)),Q=B(g(3966)),C=B(g(7157)),s=B(g(4326)),l=B(g(1169)),i=B(g(8870)),V=B(g(1731)),d=B(g(7849)),e=B(g(6739)),b=B(g(784)),G=B(g(219)),A=B(g(155)),R=B(g(1895)),u=B(g(8372)),x=B(g(1422)),Z=B(g(7474)),a=B(g(3695)),L=B(g(44));F.reducerFiles={app:Q.default,user:L.default,tuneCh:a.default,ranks:A.default,thread:u.default,threads:Z.default,threadDetail:x.default,analyze:t.default,bootOption:C.default,setting:R.default,posts:s.default,postsTimeline:d.default,postsTimelineStock:e.default,postsTimelineZero:b.default,postsTimelineZeroAfter:G.default,postsMulti:i.default,postsSingle:V.default,postsChild:l.default,actioned:U.default},F.default=c.combineReducers(F.reducerFiles)},4326:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(9478));F.default=(I=[],F)=>F.posts?new c.default(F.posts):I},1169:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(9478));F.default=(I=[],F)=>{switch(F.type){case"API_TO_SERVER[REQUEST]:changeThread":return new c.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(F.postsChild&&F.postsChild.length>0&&F.thread.ch===F.postsChild[0].ch)return[...I,...F.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(F.postsChild&&F.postsChild.length>0)return[...F.postsChild,...I]}return I}},8870:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(300)),U=B(g(9478));F.default=(I=[],F)=>{switch(F.type){case"ON_CLICK_MULTISTREAM":return F.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new U.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(F.postsMulti&&F.postsMulti.length>0&&F.app.isRootCh)return[...F.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(F.postsMulti&&F.postsMulti.length>0&&F.app.rootCh===F.postsMulti[0].ch)return[...I,...F.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(F.postsMulti&&F.postsMulti.length>0){let g=[];return I.length+F.postsMulti.length>c.default.findOneLimitCnt?(g=[...F.postsMulti,...I],g.slice(0,c.default.findOneLimitCnt)):[...F.postsMulti,...I]}}return I}},1731:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(386));F.default=(I=[],F)=>{switch(F.type){case"ON_CLICK_MULTISTREAM":return F.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new c.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(F.postsSingle&&F.postsSingle.length>0)return[...I,...F.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(F.postsSingle&&F.postsSingle.length>0)return[...F.postsSingle,...I]}return I}},7849:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(5390));F.default=(I=[],F)=>{switch(F.type){case"API_TO_SERVER[REQUEST]:changeThread":return new c.default;case"UNMOUNT_POSTS_TIMELINE":return I.map((I=>(I.dispFlg=I.currentTime<=F.mediaCurrentTime,I)));case"CLEAR_POSTS_TIMELINE":return[...F.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(F.postsTimeline&&F.postsTimeline.length>0)return[...I,...F.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(F.postsTimeline&&F.postsTimeline.length>0)return[...F.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(F.postsTimeline&&F.postsTimeline.length>0&&F.postsTimeline[0].uid===F.user.uid&&F.postsTimeline[0].ch===F.thread.ch)return[...I,...F.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(F.postsTimeline&&F.postsTimeline.length>0)return[...F.postsTimeline,...I]}return I}},6739:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1083));F.default=(I=[],F)=>{switch(F.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return F.postsTimelineStock?[...I,F.postsTimelineStock]:I;default:return F.postsTimelineStock?new c.default(F.postsTimelineStock):I}}},784:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(2342));F.default=(I=[],F)=>{switch(F.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return F.postsTimelineZero?[...I,F.postsTimelineZero]:I;default:return F.postsTimelineZero?new c.default(F.postsTimelineZero):I}}},219:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(3189));F.default=(I=[],F)=>{switch(F.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return F.postsTimelineZeroAfter?[...I,F.postsTimelineZeroAfter]:I;default:return F.postsTimelineZeroAfter?new c.default(F.postsTimelineZeroAfter):I}}},155:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(9478));F.default=(I=[],F)=>{let g=[],B=0;const U=(I,g)=>I.ch===F.app.rootCh||g.ch===F.app.rootCh?0:I.liveCnt<g.liveCnt?1:I.liveCnt>g.liveCnt?-1:0;switch(F.type){case"SERVER_TO_API[EMIT]:fetchPosts":return F.app.isLinkCh?I:(g=c.default.getDispPosts(F),B=g&&g.length?g.length:0,0===B?I:I.map((I=>F.thread.ch===I.ch?{...I,favicon:g[B-1].favicon,stampId:g[B-1].stampId,post:g[B-1].post}:I)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return I.map((I=>F.thread.ch===I.ch?{...I,liveCnt:F.thread.liveCnt}:I)).sort(U);case"SERVER_TO_API[BROADCAST]:post":return I.map((I=>F.posts[0].ch===I.ch?{...I,title:F.posts[0].title,stampId:F.posts[0].stampId,favicon:F.posts[0].favicon,post:F.posts[0].post}:I));case"SERVER_TO_API[EMIT]:rank":if(I&&I.length>0&&F.rank&&F.rank.length>0){const g=[],B=F.rank.length;let c=F.rank[0];for(let U=0;U<B;U++){let B=F.rank[U];c=B.updateTime>c.updateTime?B:c,B.ch===I[0].ch&&(B={...B,liveCnt:I[0].liveCnt}),g.push(B)}return g.sort(U),g[0].faicon=c.favicon,g[0].post=c.post,g[0].stampId=c.stampId,g}return F.rank?F.rank:I;default:return F.rank?F.rank:I}}},1895:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(4919));F.default=(I=new c.default,F)=>F.setting?I.merge(F.setting):I},8372:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(8091));F.default=(I=new c.default({},{}),F)=>{switch(F.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new c.default(F.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(I.ch===F.thread.ch)return F.thread?I.merge(F.thread):I;case"SERVER_TO_API[BROADCAST]:post":if(I.ch===F.thread.ch)return F.thread?I.merge(F.thread):I}return I}},1422:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(8091));F.default=(I=new c.default({},{}),F)=>F.threadDetail?I.merge(F.threadDetail):I},7474:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(978));F.default=(I=new c.default,F)=>F.threads?I.merge(F.threads):I},3695:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(2749));F.default=(I=new c.default,F)=>{switch(F.type){case"SERVER_TO_API[EMIT]:tune":return new c.default(F.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:g}=F;if(g.ch===I.ch)return{...I,liveCnt:g.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const B=F.posts[0];if(B.ch===I.ch)return{...I,title:B.title,stampId:B.stampId,favicon:B.favicon,post:B.post}}return I}},44:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(7444));F.default=(I=new c.default,F)=>F.user?I.merge(F.user):I},8188:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(){return[]}}},1534:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216));class U extends c.default{constructor(I={}){return super(),this.create({liveCnt:0})}}F.default=U},6926:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216)),U=B(g(2749)),t=B(g(8091));class Q extends c.default{constructor(I={},F=""){super(),this.offsetTimelineFindId=U.default.defaultFindId,this.offsetSingleFindId=U.default.defaultFindId,this.offsetMultiFindId=U.default.defaultFindId,this.offsetChildFindId=U.default.defaultFindId,this.offsetLogsFindId=U.default.defaultFindId;const g=I.ch?I.ch:"/",B=I.id?I.id:"",C=c.default.isSet(I.isMediaCh)?I.isMediaCh:Q.getIsMediaCh(g),s=!!c.default.isSet(I.isLinkCh)&&I.isLinkCh,l=I.rootCh?I.rootCh:g,i=c.default.isSet(I.isRootCh)?I.isRootCh:l===g,V=I.rootTitle?I.rootTitle:"talkn",d=Q.getMediaSrc(I.protocol,g),e=Q.getMediaType(d,I),b=I&&I.tuned?I.tuned:"",G=Q.getDispThreadType(I,C),A=!c.default.isSet(I.multistream)||I.multistream,R=I&&I.findType?I.findType:t.default.findTypeAll,u=I&&I.offsetFindId?I.offsetFindId:Q.defaultOffsetFindId,x=I&&I.offsetTimelineFindId?I.offsetTimelineFindId:Q.defaultOffsetFindId,Z=I&&I.offsetSingleFindId?I.offsetSingleFindId:Q.defaultOffsetFindId,a=I&&I.offsetMultiFindId?I.offsetMultiFindId:Q.defaultOffsetFindId,L=I&&I.offsetChildFindId?I.offsetChildFindId:Q.defaultOffsetFindId,X=I&&I.offsetLogsFindId?I.offsetLogsFindId:Q.defaultOffsetFindId,n=I.inputPost?I.inputPost:"",S=!!I.inputStampId&&I.inputStampId,W=I.inputCurrentTime?I.inputCurrentTime:0,N=I.inputSearch?I.inputSearch:"",E=!!c.default.isSet(I.isToggleMultistream)&&I.isToggleMultistream,y=I&&I.actioned?I.actioned:"",o=c.default.isSet(I.debug)?I.debug:"";return this.create({id:B,isRootCh:i,isLinkCh:s,isMediaCh:C,rootCh:l,rootTitle:V,chType:e,dispThreadType:G,tuned:b,multistream:A,findType:R,offsetFindId:u,offsetTimelineFindId:x,offsetSingleFindId:Z,offsetMultiFindId:a,offsetChildFindId:L,offsetLogsFindId:X,inputPost:n,inputStampId:S,inputCurrentTime:W,inputSearch:N,isToggleMultistream:E,actioned:y,debug:o})}static get defaultOffsetFindId(){return U.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[Q.mediaTypeMp3,Q.mediaTypeMp4,Q.mediaTypeM4a]}static get mediaChTagTypes(){return{[Q.mediaTypeMp3]:Q.mediaTagTypeAudio,[Q.mediaTypeMp4]:Q.mediaTagTypeVideo,[Q.mediaTypeM4a]:Q.mediaTagTypeAudio}}static getMediaType(I,F){return F&&F.chType?F.chType:Q.getMediaTypeFromSrc(I)}static getMediaTypeFromSrc(I){const F=Object.keys(Q.mediaChTagTypes),g=F.length;let B="html";for(let c=0;c<g;c++){const g=new RegExp(`.${F[c]}$`);if(I.match(g)){B=Q.mediaChTagTypes[F[c]];break}}return B}static validInputPost(I){return!!/\r\n$|\n$|\r$/gim.test(I)&&"LAST TYPE BREAK LINE."}static validPost(I){return""===I?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(I)?"ONLY NEW LINE":/^\s+$/g.test(I)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(I)&&"EMPTY POST"}static getWidth(I){return"object"==typeof window&&window.innerWidth?window.innerWidth:I.width?"string"==typeof I.width&&I.width.indexOf("px")>=0?Number(I.width.replace("px","")):I.width:0}static getHeight(I={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(I){return Q.isAudioContentType(I)||Q.isVideoContentType(I)}static isAudioContentType(I){return I.indexOf(Q.mediaTagTypeAudio)>=0}static isVideoContentType(I){return I.indexOf(Q.mediaTagTypeVideo)>=0}static getMediaSrc(I,F){return I+"/"+F.replace(/\/$/,"")}static getIsMediaCh(I){return Q.mediaChs.some((F=>{const g=new RegExp(`.${F}/$|.${F}$`);return I.match(g)}))}static getDispThreadType(I,F){return I&&I.dispThreadType?I.dispThreadType:F?Q.dispThreadTypeTimeline:Q.dispThreadTypeMulti}static getOffsetFindId({posts:I}){return I&&I[0]&&I[0]._id?I[0]._id:U.default.defaultFindId}static getStepToDispThreadType({app:I,ranks:F},g,B,c=""){let U="";const t=I&&I.dispThreadType?I.dispThreadType:Q.dispThreadTypeMulti;return U=(I=Q.getStepDispThreadType({app:I,ranks:F},g,B,c)).dispThreadType,{app:I,stepTo:`${t} to ${U}`}}static getStepDispThreadType({app:I,ranks:F},g={},B,c){const U=I||{};if(U.offsetFindId=Q.defaultOffsetFindId,g.isMediaCh)return U.dispThreadType=Q.dispThreadTypeTimeline,U.offsetFindId=U.offsetTimelineFindId?U.offsetTimelineFindId:Q.defaultOffsetFindId,U.isLinkCh="Links"===c||"findMediaCh"===c||"ToMedia"===c,U.isMediaCh=!0,U;if("BackToRootCh"===c&&(U.isLinkCh=!1),"Links"===c&&F.length>0){if(!F.some((I=>I.ch===B||I.ch===B+"/")))return U.offsetFindId=Q.defaultOffsetFindId,U.dispThreadType=Q.dispThreadTypeChild,U.isLinkCh=!0,U}return U.rootCh===B?U.multistream?U.dispThreadType=Q.dispThreadTypeMulti:U.dispThreadType=Q.dispThreadTypeSingle:U.dispThreadType=Q.dispThreadTypeChild,U}}F.default=Q},2169:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216));class U extends c.default{constructor(I={}){return super(),this.create({...I})}static rebuildAttributes(I){let F={};return Object.keys(I).forEach((g=>{F[I[g].name]=I[g].value})),F}}F.default=U},8455:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216));class U extends c.default{constructor(I=[]){return super(),I=I||[],this.create(I)}}F.default=U},2749:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216)),U=B(g(300));class t extends c.default{constructor(I){super(),this.ch=t.defaultValues.ch,this.chs=t.defaultValues.chs,this.favicon=t.defaultValues.favicon,this.findType=t.defaultValues.findType,this.layer=t.defaultValues.layer,this.post=t.defaultValues.post,this.protocol=t.defaultValues.protocol,this.stampId=t.defaultValues.stampId,this.title=t.defaultValues.title,this.liveCnt=t.defaultValues.liveCnt,this.uid=t.defaultValues.uid,this.utype=t.defaultValues.utype,this.dispFlg=t.defaultValues.dispFlg,this.data=t.defaultValues.data,this.createTime=t.defaultValues.createTime,this.currentTime=t.defaultValues.currentTime,this.updateTime=t.defaultValues.updateTime;const F=I?{...t.defaultValues,...I}:t.defaultValues;return this.create(F)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:U.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}F.default=t},5154:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},9478:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(6926)),U=B(g(5154)),t=B(g(386)),Q=B(g(5390)),C=B(g(1083));class s{constructor(I=[]){return I}static getDispPosts(I){const{app:F,postsTimeline:g,postsMulti:B,postsSingle:U,postsChild:t,postsLogs:Q}=I;switch(F.dispThreadType){case c.default.dispThreadTypeTimeline:return g;case c.default.dispThreadTypeMulti:return B;case c.default.dispThreadTypeSingle:return U;case c.default.dispThreadTypeChild:return t;case c.default.dispThreadTypeLogs:return Q}}static getAnyActionPosts(I,F){const{app:g,posts:B}=I,Q=B&&B.length>0;switch(I.postsMulti=new U.default,I.postsSingle=new t.default,I.postsChild=[],I.postsLogs=[],g.dispThreadType){case c.default.dispThreadTypeTimeline:I=s.getAnyActionPostsTimeline(I,B,F,Q);break;case c.default.dispThreadTypeMulti:I.postsMulti=Q?B:[];break;case c.default.dispThreadTypeSingle:I.postsSingle=Q?B:[];break;case c.default.dispThreadTypeChild:I.postsChild=Q?B:[];break;case c.default.dispThreadTypeLogs:I.postsLogs=Q?B:[]}return I}static getAnyActionPostsTimeline(I,F,g,B){if("SERVER_TO_API[BROADCAST]:post"===I.type)I.postsTimeline=new Q.default,I.postsTimeline.push(I.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===I.type&&(I.postsTimeline=new Q.default,I.postsTimelineStock=new C.default,B)){const g=F.length;for(let B=0;B<g;B++)0===F[B].currentTime?I.postsTimeline.push(F[B]):I.postsTimelineStock.push(F[B])}return I}}F.default=s},386:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},5390:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},1083:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},2342:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},3189:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},8207:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0}),F.default=class{constructor(I=[]){return I}}},4919:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216));class U extends c.default{constructor(I={}){super();const F=I&&I.client?I.client:{},g=I&&I.common?I.common:{},B=I&&I.server?I.server:{};return this.create({client:F,common:g,server:B})}}F.default=U},8091:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216)),U=B(g(7771)),t=B(g(300)),Q=B(g(6926));class C extends c.default{constructor(I={},F){super(),this.chs=["/"],this.protocol=U.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=C.getDefaultFavicon(),this.findType=C.findTypeAll,this.title=C.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=C.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const g=C.isWindowObj(I)?C.constructorFromWindow(I,F):I;return this.create(g)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[C.findTypeHtml]:["text/html"],[C.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[C.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(I){return!!I.alert}static constructorFromWindow(I,F){const g=!!F.ch&&F.ch,B=C.getCh(F,g);let U={};return U.ch=B,U.chs=["/"],U.hasSlash=!!F.hasslash&&c.default.getBool(F.hasslash),U.protocol="talkn:",U.contentType="",U.charset="UTF-8",U.host="",U.favicon=C.getDefaultFavicon(),U.findType=C.findTypeAll,g?(U.protocol=C.getProtocol(g),U.host=C.getHost(g),U.chs=g.chs&&g.chs.length>0?g.chs:C.getChs(B)):(U.protocol=location.protocol?location.protocol:"????:",U.chs=I.chs&&I.chs.length>0?I.chs:C.getChs(B),U.contentType=document.contentType?document.contentType:"",U.charset=document.charset?document.charset:"",U.host=location.host?location.host:"",U.favicon=C.getFaviconFromWindow(window)),U.title=C.getDefaultTitle(),U.metas=[],U.serverMetas={},U.clientMetas={},U.emotions={},U.links=[],U.h1s=[],U.audios=[],U.videos=[],U.layer=C.getLayer(U.ch),U.mediaIndex=[],U.postCnt=0,U.multiPostCnt=0,U.isSelfCh=C.getIsSelfCh("",U.ch),U.createTime="",U.updateTime="",U}static getCh(I,F){return I&&I.ch&&""!==I.ch?I.ch:"/"}static getChTop(I){return""!==I?"/"+I.split("/")[1]:""}static getChs(I){let F=["/"];if(""!==I){const B="/"===I.slice(-1)?I:I+"/";if("/"!==B){const I=B.split("/"),c=I.length;let U="";for(var g=1;g<c;g++)""!==I[g]&&(U+=I[g],U="/"===U.slice(-1)?U:U+"/",U="/"===U.slice(0,1)?U:"/"+U,F.push(U))}}return F}static getHost(I){return I.indexOf(".")>=0?(I=I.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):t.default.domain}static getProtocol(I){return I.indexOf("http:")>=0?"http:":I.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(I,F){return I.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===F}static getLayer(I="/"){return I.split("/").length-1}static getMediaSrc(I){return Q.default.getMediaSrc(I.protocol,I.ch)}static getMediaTagType(I){const F=C.getMediaSrc(I);return Q.default.getMediaType(F,null)}static getFaviconFromWindow(I){if(I&&I.document){const F=I.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",I.document,null,2,null).stringValue,g="http://",B="https://",c=location.host;if(F.indexOf(g)||F.indexOf(B)){const I=g+c+(F||"/favicon.ico");return 1==I.split("//").length-1?I:F}return F}return""}static getStatus(I,F,g,B={}){let c={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return c.isCreate=C.getStatusCreate(g),c.isRequireUpsert=C.getStatusIsRequireUpsert(I,B,c.isCreate),c.isMultistream=C.getStatusIsMultistream(F),c.isToggleMultistream=C.getStatusIsToggleMultistream(F),c.isMediaCh=C.getStatusIsMediaCh(I.ch),c}static getStatusCreate(I){return!I}static getStatusIsRequireUpsert(I,F,g=!1){if(!g)return!0;if(I.updateTime){const F=I.updateTime.getTime?I.updateTime.getTime():I.updateTime,g=new Date,B=g.getFullYear(),c=g.getMonth(),U=g.getDate(),Q=g.getHours();return g.getMinutes(),F<new Date(B,c,U,Q-t.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(I){return void 0===I||void 0===I.dispThreadType||I.dispThreadType===Q.default.dispThreadTypeMulti&&I.multistream}static getStatusIsMediaCh(I){return Q.default.getIsMediaCh(I)}static getStatusIsToggleMultistream(I){return void 0!==I&&void 0!==I.actioned&&I.isToggleMultistream}static getContentTypeFromFindType(I){const F=C.findTypes[C.findTypeHtml],g=C.findTypes[C.findTypeMusic],B=C.findTypes[C.findTypeVideo];let c;if(I&&""!==I){let U="";I.indexOf(";")>0&&(U=I.split(";")[0]),(F.includes(I)||F.includes(U))&&(c=C.findTypeHtml),(g.includes(I)||g.includes(U))&&(c=C.findTypeMusic),(B.includes(I)||B.includes(U))&&(c=C.findTypeVideo)}return c}static getFindTypeFromSrc(I){const F=Q.default.getMediaTypeFromSrc(I);return F.charAt(0).toUpperCase()+F.slice(1)}}F.default=C},978:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216));class U extends c.default{constructor(I={}){return super(),this.create(I)}static getMergedThreads(I,F){return I[F.ch]={...F},I}}F.default=U},7444:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216)),U=B(g(2749));class t extends c.default{static get defaultOffsetFindId(){return U.default.defaultFindId}constructor(I={}){super();const F=I&&I.uid?I.uid:"",g=I&&I.utype?I.utype:"",B=I&&I.tuned?I.tuned:"",c=!(!I||!I.multistreamed)&&I.multistreamed,U=I&&I.actioned?I.actioned:"",Q=I&&I.offsetFindId?I.offsetFindId:t.defaultOffsetFindId,C=I&&I.offsetSingleFindId?I.offsetSingleFindId:t.defaultOffsetFindId,s=I&&I.offsetMultiFindId?I.offsetMultiFindId:t.defaultOffsetFindId,l=I&&I.offsetChildFindId?I.offsetChildFindId:t.defaultOffsetFindId,i=I&&I.offsetLogsFindId?I.offsetLogsFindId:t.defaultOffsetFindId;return I.requestLoginType&&I.requestLoginType,this.create({uid:F,utype:g,tuned:B,multistreamed:c,actioned:U,offsetFindId:Q,offsetSingleFindId:C,offsetMultiFindId:s,offsetChildFindId:l,offsetLogsFindId:i,friends:[]})}static getOffsetFindId({posts:I}){return I&&I[0]&&I[0]._id?I[0]._id:U.default.defaultFindId}static getHref(I={}){return"undefined"!=typeof window&&window.location&&window.location.href,I&&I.href?I.href:"/"}}F.default=t},8527:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(8188)),U=B(g(1534)),t=B(g(6926)),Q=B(g(8455)),C=B(g(9478)),s=B(g(5390)),l=B(g(1083)),i=B(g(8207)),V=B(g(8091)),d=B(g(7444));class e{constructor(I,F={}){this.bootOption=I,this.ranks=new i.default,this.menuLogs=new Q.default(F.menuLogs),this.posts=new C.default,this.postsMulti=new C.default,this.postsSingle=new C.default,this.postsChild=new C.default,this.postsTimeline=new s.default,this.postsTimelineStock=new l.default,this.postsLogs=new C.default,this.analyze=new U.default,this.thread=new V.default(this.bootOption,F.thread),this.threadDetail=new V.default(this.bootOption,F.thread),this.app=new t.default(e.getAppParams(this.thread,this.bootOption,F)),this.user=new d.default(e.getUserParams(this,F)),this.actionLog=new c.default}static getAppParams(I,F,g){return{isTransition:!0,rootTitle:I.title,...F,...I}}static getUserParams(I,F){return F&&F.user&&F.user.uid?{...F.user}:{dispThreadType:I.thread.ch===I.app.rootCh?t.default.dispThreadTypeMulti:t.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}F.default=e},5719:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1665)),U=B(g(8200)),t=B(g(2874)),Q=g(1006),C=document.currentScript,s=Boolean(-1===C.getAttribute("src").indexOf(c.default.SUB_DOMAINS.BANNER)),l=new t.default(c.default.APP_TYPES.API);window.talknAPI=new Promise((I=>{l.boot().then((F=>{const g=new Q.PublicApi(F);s?window.talknAPI=g:U.default(g),I(g)}))}))},6552:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(7771)),U=B(g(300)),t=B(g(1665));class Q{constructor(I,F){this.env=t.default.PRODUCTION,this.type=t.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=c.default.HTTPS_PROTOCOL,this.host=location.host,this.extensionMode=Q.extensionModeNone,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:c.default.HTTPS_PROTOCOL,host:location.host,mode:Q.extensionModeNone}};const g=Q.getInitialRootCh(U.default.env),B=Q.getFirstHasSlach(g);this.env=U.default.env,this.id=I,this.hasSlash=F&&void 0!==F.hasSlash?F.hasSlash:Q.getLastHasSlach(g),this.ch=F&&F.ch?F.ch:Q.getCh(g,B,this.hasSlash),this.protocol=F&&F.protocol?F.protocol:Q.getProtocol(),this.host=F&&F.host?F.host:location.host,this.extensionMode=F&&F.mode?F.mode:Q.extensionModeNone}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static getInitialRootCh(I){let F=location.href;switch(F=F.replace(`${c.default.HTTPS_PROTOCOL}/`,"").replace(`${c.default.HTTP_PROTOCOL}/`,""),I){case t.default.PRODUCTION:F=F.replace(`/${t.default.PRODUCTION_DOMAIN}`,"/");break;case t.default.LOCALHOST:F=F.replace(`/${t.default.DEVELOPMENT_DOMAIN}`,"/");break;case t.default.DEVELOPMENT:F=F.replace(`:${t.default.PORTS.DEVELOPMENT}`,"").replace(`:${t.default.PORTS.DEVELOPMENT_API}`,""),0===F.indexOf(`/${t.default.DEVELOPMENT_DOMAIN}/`)&&(F=F.replace(`/${t.default.DEVELOPMENT_DOMAIN}`,""))}return F}static getType(I,F){let g=t.default.APP_TYPES.API;return I?t.default.APP_TYPES.EXTENSION:F?t.default.APP_TYPES.PORTAL:g}static getProtocol(){return location.protocol===c.default.HTTPS_PROTOCOL?c.default.HTTPS_PROTOCOL:location.protocol===c.default.HTTP_PROTOCOL?c.default.HTTP_PROTOCOL:c.default.TALKN_PROTOCOL}static getFirstHasSlach(I){return I.startsWith("/")}static getLastHasSlach(I){return I.endsWith("/")}static getCh(I,F,g){let B=I;return B=F?B:`/${B}`,B=g?B:`${B}/`,B=B.replace(/^\/\//,"/"),B}}F.default=Q},1223:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0}),F.HandleRequestMethod=F.HandleMessageMethod=void 0;const c=B(g(7771));F.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(I){return 0===I.indexOf(c.default.API_TO_SERVER_REQUEST)?I.replace(c.default.API_TO_SERVER_REQUEST,c.default.API_TO_CLIENT_REQUEST):0===I.indexOf(c.default.SERVER_TO_API_EMIT)?I.replace(c.default.SERVER_TO_API_EMIT,c.default.API_TO_CLIENT_EMIT):0===I.indexOf(c.default.SERVER_TO_API_BROADCAST)?I.replace(c.default.SERVER_TO_API_BROADCAST,c.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${I}`}static getMessageTypes(I){const F=I.split(":");return{ioType:F[0].split("[")[1].replace("]",""),exeMethod:F[1]}}static convertExtToClientActionType(I){return`EXT_TO_CLIENT[ACTION]:${I}`}},F.HandleMessageMethod="handle",F.HandleRequestMethod="handle"},1216:(I,F)=>{"use strict";Object.defineProperty(F,"__esModule",{value:!0});class g{constructor(I={}){}static getType(I){return null===I?"Null":void 0===I?"Undefined":I.constructor.name}static isSet(I){return"Undefined"!==g.getType(I)&&"Null"!==g.getType(I)}static getBool(I){return"boolean"==typeof I?I:"true"===I}static isAnonymousFunc(I){const F=I.toString();return"function(){}"===F||"function() {}"===F||"function (){}"===F||"function () {}"===F||"()=>{}"===F}create(I){const F=this.constructor.name;return g.getType(I),Object.keys(I).forEach((B=>{let c,U,t=null,Q=!1,C=!1,s=()=>{},l=null;if("Object"===g.getType(I[B])){c=I[B];let F=0===Object.keys(c).length;Q=c.isAcceptNull?c.isAcceptNull:Q,C=c.isAcceptBlank?c.isAcceptBlank:C,t=!F&&c.def?c.def:t,l=F||!c.value&&""!==c.value?c:c.value,l=F&&t?t:l,U=g.getType(l),s=c.valid?c.valid:s}else l=I[B],t=l,Q=Q,C=C,U=g.getType(l),s=s;const i=I=>{let c=null;const t=`${F}.${B}`,i=l,V=U,d=I,e=g.getType(I);return e!==U&&(c=`SCHEMA_TYPE : ${t} [validType: ${U}][paramsType: ${e}]`),Q&&null===I&&(c=`SCHEMA_IS_ACCEPT_NULL :  ${t}`),C&&""===I&&(c=`SCHEMA_IS_ACCEPT_BLANK :  ${t}`),"Function"===g.getType(s)&&s(I)&&(c=`SCHEMA_YOUR_VALID_METHOD :  ${t}`),{pointer:t,validValue:i,validType:V,paramsValue:d,paramsType:e,error:c}},{pointer:V,validValue:d,validType:e,paramsValue:b,paramsType:G,error:A}=i(l);if(null===A)Object.defineProperty(this,B,{get:()=>l,set:I=>{const F=i(l);if(null===A)return l=I,{...this,[B]:l};throw this.validWarn(F),A},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw A;console.warn(A)}})),this}canSet(I,F){try{const g=this[I];if(void 0===g)return!0;if(null===g)return!0;if(void 0===F)return!0;if(null===F)return!0;const{error:B}=this[I]=F;return!B&&(this[I]=g,!0)}catch(g){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+I),console.warn("BEFOER VALUE"),console.warn(typeof this[I]),console.warn(this[I]),console.warn("AFTER VALUE"),console.warn(typeof F),console.warn(F),`BAD CAN SET: ${g}`}}merge(I={},F=!0){try{const B=g.getType(I),c=Object.keys(I);if(c.length>0){let g={...this};return c.forEach((F=>{this[F]!==I[F]&&(this.canSet(F,I[F])?g[F]=I[F]:console.warn("BAD MERGE A : "+F+" "+I[F]+" "+typeof I[F]))})),"Array"===B?(g=Object.values(g),F?new this.constructor(g):g):F?new this.constructor(g):g}return new this.constructor}catch(F){if(this.errorThrow)throw console.warn(I),console.warn(F),`BAD MERGE B : ${g.getType(I)} ${F}`;return console.warn(I),console.warn(F),console.warn(`BAD MERGE C : ${g.getType(I)} ${F}`),I}}toJSON(I=this){let F={};return Object.keys(I).forEach((g=>{let B=I[g];"Object"===B.constructor.name&&(B.type||B.default||(B=this.toJSON(B))),B.default||""===B.default||0===B.default?F[g]=B.default:F[g]=B})),F}forEach(I){return Object.values(this).forEach(I)}concat(I){return this.returnImmutable(Object.values(this).concat(I),I)}map(I){return this.returnImmutable(Object.values(this).map(I),I)}filter(I){return this.returnImmutable(Object.values(this).filter(I),I)}reduce(I){return this.returnImmutable(Object.values(this).reduce(I),I)}find(I){return Object.values(this).find(I)}sort(I){return Object.values(this).sort(I)}push(I){const F=Object.values(this);return F.push(I),this.returnImmutable(F)}unshift(I){const F=Object.values(this);return F.unshift(I),this.returnImmutable(F)}getShift(){const I=Object.values(this).shift();return this.returnImmutable(I)}pop(I){const F=Object.values(this);return F.pop(I),this.returnImmutable(F)}returnImmutable(I,F=(()=>{})){return void 0===I?new this.constructor:0===I.length&&0===Object.keys(this).length?String(F).indexOf("createElement")>0?[]:new this.constructor(I):I[0]&&I[0].$$typeof&&"Symbol"===I[0].$$typeof.constructor.name?I:new this.constructor(I)}validWarn(I){console.warn("##########################"),console.warn("#"+I.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(I.validType),console.warn("### initializedValidValue"),console.warn(I.validValue),console.warn("### paramsType"),console.warn(I.paramsType),console.warn("### paramsValue"),console.warn(I.paramsValue),console.warn("##########################")}}F.default=g},7771:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(1216));class U{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${U.API_REQUEST_TYPE}]${U.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${U.API_RESPONSE_TYPE_EMIT}]${U.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${U.API_RESPONSE_TYPE_BROADCAST}]${U.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${U.API_REQUEST_TYPE}]${U.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${U.API_RESPONSE_TYPE_EMIT}]${U.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${U.API_RESPONSE_TYPE_BROADCAST}]${U.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(I){const F=I.split(U.METHOD_COLON),g=F[0].split("[")[0];let B;return B=F[0].indexOf(`[${U.API_REQUEST_TYPE}]`)>0?U.API_REQUEST_TYPE:F[0].indexOf(`[${U.API_RESPONSE_TYPE_EMIT}]`)>0?U.API_RESPONSE_TYPE_EMIT:U.API_RESPONSE_TYPE_BROADCAST,{sequence:g,actionType:B,actionName:F[1]}}static updateCallbackExeConditionMap(I){let F={emit:!0,broadcast:!0};return U.map[I]&&(F.emit=!(Object.keys(U.map[I].responseEmitState).length>0),F.broadcast=!(Object.keys(U.map[I].responseBroadcastState).length>0)),F}static convertServerToApiIoType(I,F){return F.indexOf(`${U.API_SEPARATE_IO_TYPE_START}${U.API_REQUEST_TYPE}${U.API_SEPARATE_IO_TYPE_END}`)>=0?U.API_REQUEST_TYPE:F.indexOf(`${U.API_SEPARATE_IO_TYPE_START}${U.API_RESPONSE_TYPE_BROADCAST}${U.API_SEPARATE_IO_TYPE_END}`)>=0?U.API_RESPONSE_TYPE_BROADCAST:F.indexOf(`${U.API_SEPARATE_IO_TYPE_START}${U.API_RESPONSE_TYPE_EMIT}${U.API_SEPARATE_IO_TYPE_END}`)>=0?U.API_RESPONSE_TYPE_EMIT:U.API_SETUP}static convertExtToClientActionType(I,F){return U.convertApiToClientActionType(F)}static convertApiToClientActionType(I){return 0===I.indexOf(U.API_TO_SERVER_REQUEST)?I.replace(U.API_TO_SERVER_REQUEST,U.API_TO_CLIENT_REQUEST):0===I.indexOf(U.SERVER_TO_API_EMIT)?I.replace(U.SERVER_TO_API_EMIT,U.API_TO_CLIENT_EMIT):0===I.indexOf(U.SERVER_TO_API_BROADCAST)?I.replace(U.SERVER_TO_API_BROADCAST,U.API_TO_CLIENT_BROADCAST):I}static getRequestState(I,F,g){const B=I.replace(U.API_TO_SERVER_REQUEST,""),{requestPublicState:t,requestPrivateState:Q}=U.map[B];let C={[U.REDUX_ACTION_KEY]:B};return Object.keys(Q).forEach((I=>{C[I]||(C[I]={}),Q[I].forEach((B=>{if(!C[I][B]){let U=F[I][B];g&&g[I]&&c.default.isSet(g[I][B])&&(U=g[I][B]),C[I][B]=U}}))})),Object.keys(t).forEach((I=>{C[I]||(C[I]={}),t[I].forEach((F=>{C[I][F]||(C[I][F]=g)}))})),C}static getResponseState(I,F,g){const B=F.type,c=U.map[B][`response${I}State`];let t={[U.REDUX_ACTION_KEY]:B};return Object.keys(c).forEach((I=>{if(!g[I])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${F.type}: ${I}`;{const B=c[I];let U=g[I];switch(U.constructor.name){case"model":U=U.toJSON(),delete U._id,delete U.__v}"*"===B?t={...t,[I]:U}:B.forEach((B=>{if(void 0===g[I][B])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${F.type}: ${I}.${B}`;t={...t,[I]:{...t[I],[B]:g[I][B]}}}))}})),t}static getRequestActionState(I,F=null,g=null){return"string"==typeof F&&null===g?{type:I}:"object"==typeof F&&"object"==typeof g?{...F,...g,type:I}:"string"==typeof F&&"object"==typeof g?{...g,type:I}:{...F,type:I}}}F.default=U},300:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(6894)),U=B(g(8399)),t=B(g(1665)),{PRODUCTION:Q,DEVELOPMENT:C,PRODUCTION_DOMAIN:s,DEVELOPMENT_DOMAIN:l,SUB_DOMAINS:i,PORTS:V}=t.default,d=c.default.hasOwnProperty("hostname")?c.default.hostname():"localhost",e=function(I){if("browser"===U.default.title){if(location.href.indexOf(t.default.DEVELOPMENT_DOMAIN)>=0){const I=Number(location.port);return I===t.default.PORTS.DEVELOPMENT||I===t.default.PORTS.DEVELOPMENT_API?t.default.DEVELOPMENT:t.default.LOCALHOST}return t.default.PRODUCTION}return I.indexOf(t.default.AWS_HOST_KEY)>=0?t.default.PRODUCTION:t.default.DEVELOPMENT}(d),b={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},G=e===C,A=e===Q?s:l,R=`${i.WWW}.${A}`,u=`${i.API}.${A}`,x=G?`${A}:${V.DEVELOPMENT_API}/${b.api}`:`${u}/v1`,Z=G?`${A}:${V.DEVELOPMENT}/${b.client}`:`${i.CLIENT}.${A}`,a=`${i.DESC}.${A}`,L=`${i.PORTAL}.${A}`,X=`${i.ASSETS}.${A}`,n=`${X}/img/`,S={domain:A,env:e,files:b,hostName:d,apiURL:u,apiAccessURL:x,wwwURL:R,descURL:a,portalURL:L,clientURL:Z,assetsURL:X,autoURL:`${i.AUTO}.${A}`,extURL:`${i.EXT}.${A}`,ownURL:`${i.OWN}.${A}`,newsURL:`${i.NEWS}.${A}`,bannerURL:`${i.BANNER}.${A}`,transactionURL:`${i.TRANSACTION}.${A}`,assetsImgPath:n,assetsIconPath:`${X}/icon/`,assetsJsPath:`${X}/js/`,sessionURL:`${i.SESSION}.${A}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${n}talkn_logo_html.png`,Music:`//${n}talkn_logo_music.png`,Video:`//${n}talkn_logo_video.png`},defaultFavicon:`//${i.ASSETS}.${A}/favicon.ico`};F.default={...S}},1665:function(I,F,g){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(F,"__esModule",{value:!0});const c=B(g(8399)),U={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:c.default.env.HOSTNAME?c.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};F.default=U},7509:(I,F,g)=>{"use strict";g.r(F),g.d(F,{default:()=>U});var B=g(477),c=g.n(B);function U(){return c()('(()=>{var t={3010:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},3704:(t,e)=>{!function(t){"use strict";e.encode=function(e){var s,r=new Uint8Array(e),i=r.length,n="";for(s=0;s<i;s+=3)n+=t[r[s]>>2],n+=t[(3&r[s])<<4|r[s+1]>>4],n+=t[(15&r[s+1])<<2|r[s+2]>>6],n+=t[63&r[s+2]];return i%3==2?n=n.substring(0,n.length-1)+"=":i%3==1&&(n=n.substring(0,n.length-2)+"=="),n},e.decode=function(e){var s,r,i,n,o,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var d=new ArrayBuffer(a),l=new Uint8Array(d);for(s=0;s<c;s+=4)r=t.indexOf(e[s]),i=t.indexOf(e[s+1]),n=t.indexOf(e[s+2]),o=t.indexOf(e[s+3]),l[u++]=r<<2|i>>4,l[u++]=(15&i)<<4|n>>2,l[u++]=(3&n)<<6|63&o;return d}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},8767:t=>{function e(t){if(t)return function(t){for(var s in e.prototype)t[s]=e.prototype[s];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((s=r[i])===e||s.fn===e){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(s){r=0;for(var i=(s=s.slice(0)).length;r<i;++r)s[r].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},9435:t=>{var e=1e3,s=60*e,r=60*s,i=24*r;function n(t,e,s,r){var i=e>=1.5*s;return Math.round(t/s)+" "+r+(i?"s":"")}t.exports=function(t,o){o=o||{};var a,c,u=typeof t;if("string"===u&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var n=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(n){var o=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(t);if("number"===u&&isFinite(t))return o.long?(a=t,(c=Math.abs(a))>=i?n(a,c,i,"day"):c>=r?n(a,c,r,"hour"):c>=s?n(a,c,s,"minute"):c>=e?n(a,c,e,"second"):a+" ms"):function(t){var n=Math.abs(t);return n>=i?Math.round(t/i)+"d":n>=r?Math.round(t/r)+"h":n>=s?Math.round(t/s)+"m":n>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},1227:(t,e,s)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;e.splice(1,0,s,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,s)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=s(2447)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},2447:(t,e,s)=>{t.exports=function(t){function e(t){let s,i,n,o=null;function a(...t){if(!a.enabled)return;const r=a,i=Number(new Date),n=i-(s||i);r.diff=n,r.prev=s,r.curr=i,s=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let o=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((s,i)=>{if("%%"===s)return"%";o++;const n=e.formatters[i];if("function"==typeof n){const e=t[o];s=n.call(r,e),t.splice(o,1),o--}return s})),e.formatArgs.call(r,t),(r.log||e.log).apply(r,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=r,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(i!==e.namespaces&&(i=e.namespaces,n=e.enabled(t)),n),set:t=>{o=t}}),"function"==typeof e.init&&e.init(a),a}function r(t,s){const r=e(this.namespace+(void 0===s?":":s)+t);return r.log=this.log,r}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let s;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(s=0;s<i;s++)r[s]&&("-"===(t=r[s].replace(/\\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let s,r;for(s=0,r=e.skips.length;s<r;s++)if(e.skips[s].test(t))return!1;for(s=0,r=e.names.length;s<r;s++)if(e.names[s].test(t))return!0;return!1},e.humanize=s(9435),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((s=>{e[s]=t[s]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let s=0;for(let e=0;e<t.length;e++)s=(s<<5)-s+t.charCodeAt(e),s|=0;return e.colors[Math.abs(s)%e.colors.length]},e.enable(e.load()),e}},3549:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},5983:(t,e,s)=>{const r=s(2192);t.exports=(t,e)=>new r(t,e),t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=s(6496),t.exports.transports=s(3352),t.exports.parser=s(9743)},2192:(t,e,s)=>{const r=s(3352),i=s(8767),n=s(1227)("engine.io-client:socket"),o=s(9743),a=s(4187),c=s(1830);class u extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=a(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=a(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=c.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){n(\'creating transport "%s"\',t);const e=function(t){const e={};for(let s in t)t.hasOwnProperty(s)&&(e[s]=t[s]);return e}(this.opts.query);e.EIO=o.protocol,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return n("options: %j",s),new r[t](s)}open(){let t;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return n("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){n("setting transport %s",t.name),this.transport&&(n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(t){n(\'probing transport "%s"\',t);let e=this.createTransport(t,{probe:1}),s=!1;u.priorWebsocketSuccess=!1;const r=()=>{s||(n(\'probe transport "%s" opened\',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(n(\'probe transport "%s" pong\',t),this.upgrading=!0,this.emit("upgrading",e),!e)return;u.priorWebsocketSuccess="websocket"===e.name,n(\'pausing current transport "%s"\',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(n("changing transport and sending upgrade packet"),l(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emit("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{n(\'probe transport "%s" failed\',t);const s=new Error("probe error");s.transport=e.name,this.emit("upgradeError",s)}})))};function i(){s||(s=!0,l(),e.close(),e=null)}const o=s=>{const r=new Error("probe error: "+s);r.transport=e.name,i(),n(\'probe transport "%s" failed because of error: %s\',t,s),this.emit("upgradeError",r)};function a(){o("transport closed")}function c(){o("socket closed")}function d(t){e&&t.name!==e.name&&(n(\'"%s" works - aborting "%s"\',t.name,e.name),i())}const l=()=>{e.removeListener("open",r),e.removeListener("error",o),e.removeListener("close",a),this.removeListener("close",c),this.removeListener("upgrading",d)};e.once("open",r),e.once("error",o),e.once("close",a),this.once("close",c),this.once("upgrading",d),e.open()}onOpen(){if(n("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){n("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(n(\'socket receive: type "%s", data "%s"\',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else n(\'packet received with socket readyState "%s"\',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const i={type:t,data:e,options:s};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const t=()=>{this.onClose("forced close"),n("socket closing - telling transport to close"),this.transport.close()},e=()=>{this.removeListener("upgrade",e),this.removeListener("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){n("socket error %j",t),u.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(n(\'socket close with reason: "%s"\',t),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const r=t.length;for(;s<r;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}u.priorWebsocketSuccess=!1,u.protocol=o.protocol,t.exports=u},6496:(t,e,s)=>{const r=s(9743),i=s(8767),n=s(1227)("engine.io-client:transport");t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const s=new Error(t);return s.type="TransportError",s.description=e,this.emit("error",s),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState?this.write(t):n("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},3352:(t,e,s)=>{const r=s(2777),i=s(3416),n=s(9785),o=s(4442);e.polling=function(t){let e,s=!1,o=!1;const a=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),s=t.hostname!==location.hostname||r!==t.port,o=t.secure!==e}if(t.xdomain=s,t.xscheme=o,e=new r(t),"open"in e&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new n(t)},e.websocket=o},9785:(t,e,s)=>{const r=s(9015),i=s(3549),n=/\\n/g,o=/\\\\n/g;let a;t.exports=class extends r{constructor(t){super(t),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length,a.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=t=>{this.onError("jsonp poll error",t)};const e=document.getElementsByTagName("script")[0];e?e.parentNode.insertBefore(t,e):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){let s;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=s,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function r(){i(),e()}this.form.action=this.uri();const i=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(t){this.onError("jsonp polling iframe removal error",t)}try{const t=\'<iframe src="javascript:0" name="\'+this.iframeId+\'">\';s=document.createElement(t)}catch(t){s=document.createElement("iframe"),s.name=this.iframeId,s.src="javascript:0"}s.id=this.iframeId,this.form.appendChild(s),this.iframe=s};i(),t=t.replace(o,"\\\\\\n"),this.area.value=t.replace(n,"\\\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},3416:(t,e,s)=>{const r=s(2777),i=s(9015),n=s(8767),{pick:o}=s(6839),a=s(3549),c=s(1227)("engine.io-client:polling-xhr");function u(){}const d=null!=new r({xdomain:!1}).responseType;class l extends n{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=o(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new r(t);try{c("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=()=>{this.onLoad()},e.onerror=()=>{this.onError(e.responseText)}):e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},c("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=l.requestsCount++,l.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete l.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function h(){for(let t in l.requests)l.requests.hasOwnProperty(t)&&l.requests[t].abort()}l.requestsCount=0,l.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",h):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",h,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=d&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new l(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",(t=>{this.onError("xhr post error",t)}))}doPoll(){c("xhr poll");const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t=>{this.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=l},9015:(t,e,s)=>{const r=s(6496),i=s(1830),n=s(9743),o=s(2281),a=s(1227)("engine.io-client:polling");t.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{a("paused"),this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(a("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--t||e()}))),this.writable||(a("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){a("pre-pause writing complete"),--t||e()})))}else e()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){a("polling got data %s",t),n.decodePayload(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose(),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a(\'ignoring poll - transport state "%s"\',this.readyState))}doClose(){const t=()=>{a("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(a("transport open - closing"),t()):(a("transport not open - deferring close"),this.once("open",t))}write(t){this.writable=!1,n.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}}},866:(t,e,s)=>{const r=s(3549),i="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):t=>setTimeout(t,0);t.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:i}},4442:(t,e,s)=>{const r=s(6496),i=s(9743),n=s(1830),o=s(2281),{pick:a}=s(6839),{WebSocket:c,usingBrowserWebSocket:u,defaultBinaryType:d,nextTick:l}=s(866),h=s(1227)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends r{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=p?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u&&!p?e?new c(t,e):new c(t):new c(t,e,s)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||d,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],r=e===t.length-1;i.encodePacket(s,this.supportsBinary,(t=>{const e={};!u&&(s.options&&(e.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof t?Buffer.byteLength(t):t.length)<this.opts.perMessageDeflate.threshold&&(e.compress=!1);try{u?this.ws.send(t):this.ws.send(t,e)}catch(t){h("websocket closed before onclose event")}r&&l((()=>{this.writable=!0,this.emit("drain")}))}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||(t.b64=1),t=n.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}check(){return!(!c||"__initialize"in c&&this.name===f.prototype.name)}}t.exports=f},6839:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})},2777:(t,e,s)=>{const r=s(8058),i=s(3549);t.exports=function(t){const e=t.xdomain,s=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!s&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},1712:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const s=Object.create(null);Object.keys(e).forEach((t=>{s[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:s,ERROR_PACKET:{type:"error",data:"parser error"}}},4965:(t,e,s)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:i}=s(1712);let n;"function"==typeof ArrayBuffer&&(n=s(3704));const o=(t,e)=>{if(n){const s=n.decode(t);return a(s,e)}return{base64:!0,data:t}},a=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:a(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:o(t.substring(1),e)}:r[s]?t.length>1?{type:r[s],data:t.substring(1)}:{type:r[s]}:i}},2929:(t,e,s)=>{const{PACKET_TYPES:r}=s(1712),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),n="function"==typeof ArrayBuffer,o=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+t)},s.readAsDataURL(t)};t.exports=({type:t,data:e},s,a)=>{return i&&e instanceof Blob?s?a(e):o(e,a):n&&(e instanceof ArrayBuffer||(c=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?s?a(e instanceof ArrayBuffer?e:e.buffer):o(new Blob([e]),a):a(r[t]+(e||""));var c}},9743:(t,e,s)=>{const r=s(2929),i=s(4965),n=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:(t,e)=>{const s=t.length,i=new Array(s);let o=0;t.forEach(((t,a)=>{r(t,!1,(t=>{i[a]=t,++o===s&&e(i.join(n))}))}))},decodePacket:i,decodePayload:(t,e)=>{const s=t.split(n),r=[];for(let t=0;t<s.length;t++){const n=i(s[t],e);if(r.push(n),"error"===n.type)break}return r}}},8058:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},1830:(t,e)=>{e.encode=function(t){var e="";for(var s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e},e.decode=function(t){for(var e={},s=t.split("&"),r=0,i=s.length;r<i;r++){var n=s[r].split("=");e[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return e}},4187:t=>{var e=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,s=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var r,i,n=t,o=t.indexOf("["),a=t.indexOf("]");-1!=o&&-1!=a&&(t=t.substring(0,o)+t.substring(o,a).replace(/:/g,";")+t.substring(a,t.length));for(var c,u,d=e.exec(t||""),l={},h=14;h--;)l[s[h]]=d[h]||"";return-1!=o&&-1!=a&&(l.source=n,l.host=l.host.substring(1,l.host.length-1).replace(/;/g,":"),l.authority=l.authority.replace("[","").replace("]","").replace(/;/g,":"),l.ipv6uri=!0),l.pathNames=(r=l.path,i=r.replace(/\\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||i.splice(0,1),"/"==r.substr(r.length-1,1)&&i.splice(i.length-1,1),i),l.queryKey=(c=l.query,u={},c.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,s){e&&(u[e]=s)})),u),l}},5857:(t,e,s)=>{"use strict";function r(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function i(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,r)}return s}function n(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?i(Object(s),!0).forEach((function(e){r(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function o(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}s.r(e),s.d(e,{__DO_NOT_USE__ActionTypes:()=>u,applyMiddleware:()=>E,bindActionCreators:()=>f,combineReducers:()=>h,compose:()=>T,createStore:()=>l});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",c=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+c(),REPLACE:"@@redux/REPLACE"+c(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+c()}};function d(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,s){var r;if("function"==typeof e&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof e&&void 0===s&&(s=e,e=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(t,e)}if("function"!=typeof t)throw new Error(o(2));var i=t,n=e,c=[],h=c,p=!1;function f(){h===c&&(h=c.slice())}function T(){if(p)throw new Error(o(3));return n}function E(t){if("function"!=typeof t)throw new Error(o(4));if(p)throw new Error(o(5));var e=!0;return f(),h.push(t),function(){if(e){if(p)throw new Error(o(6));e=!1,f();var s=h.indexOf(t);h.splice(s,1),c=null}}}function _(t){if(!d(t))throw new Error(o(7));if(void 0===t.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,n=i(n,t)}finally{p=!1}for(var e=c=h,s=0;s<e.length;s++)(0,e[s])();return t}function m(t){if("function"!=typeof t)throw new Error(o(10));i=t,_({type:u.REPLACE})}function S(){var t,e=E;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(o(11));function s(){t.next&&t.next(T())}return s(),{unsubscribe:e(s)}}})[a]=function(){return this},t}return _({type:u.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:m})[a]=S,r}function h(t){for(var e=Object.keys(t),s={},r=0;r<e.length;r++){var i=e[r];"function"==typeof t[i]&&(s[i]=t[i])}var n,a=Object.keys(s);try{!function(t){Object.keys(t).forEach((function(e){var s=t[e];if(void 0===s(void 0,{type:u.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(t){n=t}return function(t,e){if(void 0===t&&(t={}),n)throw n;for(var r=!1,i={},c=0;c<a.length;c++){var u=a[c],d=s[u],l=t[u],h=d(l,e);if(void 0===h)throw e&&e.type,new Error(o(14));i[u]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(t).length)?i:t}}function p(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return p(t,e);if("object"!=typeof t||null===t)throw new Error(o(16));var s={};for(var r in t){var i=t[r];"function"==typeof i&&(s[r]=p(i,e))}return s}function T(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function E(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return function(){var s=t.apply(void 0,arguments),r=function(){throw new Error(o(15))},i={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=e.map((function(t){return t(i)}));return r=T.apply(void 0,a)(s.dispatch),n(n({},s),{},{dispatch:r})}}}},7719:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const r=s(2986);function i(t,e){if(!t)return t;if(r.isBinary(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let r=0;r<t.length;r++)s[r]=i(t[r],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const r in t)t.hasOwnProperty(r)&&(s[r]=i(t[r],e));return s}return t}function n(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=n(t[s],e);else if("object"==typeof t)for(const s in t)t.hasOwnProperty(s)&&(t[s]=n(t[s],e));return t}e.deconstructPacket=function(t){const e=[],s=t.data,r=t;return r.data=i(s,e),r.attachments=e.length,{packet:r,buffers:e}},e.reconstructPacket=function(t,e){return t.data=n(t.data,e),t.attachments=void 0,t}},5485:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const r=s(8767),i=s(7719),n=s(2986),o=s(1227)("socket.io-parser");var a;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(a=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return o("encoding packet %j",t),t.type!==a.EVENT&&t.type!==a.ACK||!n.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==a.BINARY_EVENT&&t.type!==a.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),o("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),s=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(s),r}};class c extends r{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===a.BINARY_EVENT||e.type===a.BINARY_ACK?(this.reconstructor=new u(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!n.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(r,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){const r=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(r,e)}else s.nsp="/";const r=t.charAt(e+1);if(""!==r&&Number(r)==r){const r=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(r,e+1))}if(t.charAt(++e)){const r=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!c.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",t,s),s}static isPayloadValid(t,e){switch(t){case a.CONNECT:return"object"==typeof e;case a.DISCONNECT:return void 0===e;case a.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=c;class u{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),n="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(t){return s&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||n&&t instanceof File}e.isBinary=o,e.hasBinary=function t(e,s){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let s=0,r=e.length;s<r;s++)if(t(e[s]))return!0;return!1}if(o(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const s in e)if(Object.prototype.hasOwnProperty.call(e,s)&&t(e[s]))return!0;return!1}},198:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4428)),n=r(s(7771)),o=r(s(300)),a=r(s(1665)),c=r(s(1069)),u=r(s(5027)),d=r(s(9093)),l=r(s(8527)),h=r(s(4009));class p{constructor(t){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=t,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:n.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(t){return!(!this.stores[t]||!this.ios[this.id]||(this.id=t,0))}exe(t,e){return this[t]&&"function"==typeof this[t]?(this[t](e),!0):!(!this.methods[t]||"function"!=typeof this.methods[t]||(this.methods[t](e),0))}onResponseChAPI(t){const e=(t=>e=>{const s=t(e);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(u.default);this.on(t,e)}offResponseChAPI(t){this.off(t)}getIoParams(t){let e="";return Object.keys(t).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=t[s];e+=`${s}=${encodeURIComponent(r)}&`})),e.replace(/&$/,"")}tune(t){if(!this.use(t.id)){this.id=t.id,this.stores[this.id]=h.default(),this.stores[this.id].subscribe(this.subscribe);const e=new l.default(t);this.stores[this.id].dispatch({...e,type:"SETUPED_API_STORE"});const s=this.getIoParams(t),r=`${n.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=i.default(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(t.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(t){const e=t&&t.id?t.id:this.id;return!!this.ios[e]&&(this.ios[e].disconnect(),delete this.ios[e],delete this.stores[e],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:n.default.API_SETUP})}onRequestAPI(){const t=c.default,e=Object.keys(t),s=e.length,r=(t,e)=>(s,r=(()=>{}))=>{const i=this.stores[this.id].getState(),o=n.default.getRequestState(t,i,s),a=n.default.getRequestActionState(t,s),{requestState:c,actionState:u}=e(i,o,a);return this.publicCallbacks[c.type]=r,this.ios[this.id].emit(c.type,c),this.stores[this.id].dispatch(u)};for(let i=0;i<s;i++){const s=e[i],o=s.replace(n.default.API_TO_SERVER_REQUEST,""),a=t[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const t=(t=>e=>{const s=t(e);this.stores[this.id].dispatch(s)})(d.default);this.on(n.default.CATCH_ME_KEY,t)}on(t,e=(()=>{})){this.ios[this.id]._callbacks[`$${t}`]||this.ios[this.id].on(t,e)}off(t){this.ios[this.id]._callbacks[`$${t}`]&&this.ios[this.id].off(t)}subscribe(t){const e=this.stores[this.id].getState(),s=n.default.convertServerToApiIoType(this.id,e.app.actioned);this.exeCallback(e.app.actioned,e),this.webWorker.postMessage(e.app.actioned,{...e,ioType:s})}exeCallback(t,e){const{actionType:s,actionName:r}=n.default.getSequenceActionMap(t);if(r!==n.default.API_BROADCAST_CALLBACK&&s===n.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[r](e,{posts:t,thread:s,uid:i.uid})}if(s===n.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[n.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[n.default.API_BROADCAST_CALLBACK](r,{posts:t,thread:s,uid:i.uid})}}}e.default=p},1069:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771)),n=new(r(s(3365)).default);let o={};Object.keys(i.default.map).forEach((t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,s)=>a[e.type]?a[e.type](t,e,s):{requestState:e,actionState:s}}));const a={post:(t,e,s)=>{const{app:r}=e;return r.isMediaCh&&(r.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},r.inputStampId?Object.keys(n.balances).forEach((s=>{if(n.balances[s]&&t.thread.emotions[s]){const t=n.balances[s](r.inputStampId);t&&t.forEach((t=>{const r=Object.keys(t)[0],i=n.idKeyTypes[r];e.thread.emotions[s]||(e.thread.emotions[s]={}),e.thread.emotions[s][i]||(e.thread.emotions[s][i]=0),e.thread.emotions[s][i]=t[r]}))}})):(s.app={...r},s.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:s}}};e.default=o},5027:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return{...t,type:e}}},9093:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return{...t,type:e}}},4009:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(5857),n=r(s(843)),o=r(s(8262));e.default=function(t={}){let e=[n.default.updateAction];return i.createStore(o.default,t,i.applyMiddleware(...e))}},7536:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1665)),n=r(s(6926));function o(t,e){const{app:s}=t,{storageKey:r}=i.default;if(s.isRootCh){const{postsMulti:e,postsSingle:s}=t}return{state:t,props:e}}function a(t){const{app:e,thread:s,postsTimeline:r}=t,{storageKey:n}=i.default;if(e.isMediaCh){const e=r&&r.length?r.length:0;let s=[],i=[];for(let t=0;t<e;t++)0===r[t].currentTime?s.push(r[t]):i.push(r[t]);t.postsTimeline=s}return t}e.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:s}=t,{rootCh:r}=s,{storageKey:o}=i.default;return s.dispThreadType===n.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:s}=t.app;return{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:s}=t;return s.isMediaCh?{state:t=a(t),props:e}:o(t,e)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},843:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(7536)),o=r(s(6926)),a=r(s(9478)),c=r(s(8091)),u=r(s(978));e.default={updateAction:t=>e=>s=>{const r=t.getState();s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&e(s)}};const d={"SERVER_TO_API[EMIT]:tune":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.tuned=e.thread.ch,e.app.detailCh=e.thread.ch,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=o.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,e.thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=o.default.getMediaTypeFromSrc(t)}else e.app.chType=o.default.mediaTagTypeNo;return e},"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>((e={...a.default.getAnyActionPosts(e,t)}).app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.isMediaCh&&(e=n.default.setStoragePostsTimeline(e)),e),"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetTimelineFindId=o.default.defaultOffsetFindId,e.app.offsetMultiFindId=o.default.defaultOffsetFindId,e.app.offsetSingleFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e.app.offsetLogsFindId=o.default.defaultOffsetFindId,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e.posts=new a.default,e.postsMulti=new a.default,e.postsChild=new a.default,e.postsTimeline=new a.default,e.postsSingle=new a.default,e),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>(e.app.tuned=e.thread.ch,e.thread.title=e.thread.serverMetas.title,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[REQUEST]:post":(t,e)=>(e.app.inputStampId=0,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{if(t.thread.ch===e.thread.ch&&e.thread.emotions&&Object.keys(e.thread.emotions).length>0){const s={...e.thread.emotions};e.thread.emotions={...t.thread.emotions},Object.keys(s).forEach((t=>{Object.keys(s[t]).forEach((r=>{e.thread.emotions[t][r]=e.thread.emotions[t][r]+s[t][r]}))})),e.threadDetail={...e.thread}}return e.thread.ch=t.thread.ch,e=a.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,a.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions={...t.threads[e.app.detailCh].emotions},e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread={...t.thread,...e.thread},e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const s=e.thread.ch;e.thread={...t.thread,...e.thread},e.thread.ch=s;const r=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=c.default.getFindTypeFromSrc(r),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.postsChild=[],e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let s=!1,{clientMetas:r}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(r).forEach(((t,n)=>{r[t]&&""!==r[t]&&i[t]!==r[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),s=!0,e.thread.serverMetas[t]=r[t])})),s)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},9580:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},9300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1534));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},3966:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6926));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},7157:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2169));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},8262:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const i=s(5857),n=r(s(9580)),o=r(s(9300)),a=r(s(3966)),c=r(s(7157)),u=r(s(4326)),d=r(s(1169)),l=r(s(8870)),h=r(s(1731)),p=r(s(7849)),f=r(s(6739)),T=r(s(784)),E=r(s(219)),_=r(s(155)),m=r(s(1895)),S=r(s(8372)),y=r(s(1422)),g=r(s(7474)),I=r(s(3695)),P=r(s(44));e.reducerFiles={app:a.default,user:P.default,tuneCh:I.default,ranks:_.default,thread:S.default,threads:g.default,threadDetail:y.default,analyze:o.default,bootOption:c.default,setting:m.default,posts:u.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,actioned:n.default},e.default=i.combineReducers(e.reducerFiles)},4326:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(9478));e.default=(t=[],e)=>e.posts?new i.default(e.posts):t},1169:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(9478));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},8870:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(300)),n=r(s(9478));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let s=[];return t.length+e.postsMulti.length>i.default.findOneLimitCnt?(s=[...e.postsMulti,...t],s.slice(0,i.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},1731:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(386));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},7849:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5390));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},6739:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1083));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},784:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2342));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},219:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3189));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},155:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(9478));e.default=(t=[],e)=>{let s=[],r=0;const n=(t,s)=>t.ch===e.app.rootCh||s.ch===e.app.rootCh?0:t.liveCnt<s.liveCnt?1:t.liveCnt>s.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(s=i.default.getDispPosts(e),r=s&&s.length?s.length:0,0===r?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(n);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const s=[],r=e.rank.length;let i=e.rank[0];for(let n=0;n<r;n++){let r=e.rank[n];i=r.updateTime>i.updateTime?r:i,r.ch===t[0].ch&&(r={...r,liveCnt:t[0].liveCnt}),s.push(r)}return s.sort(n),s[0].faicon=i.favicon,s[0].post=i.post,s[0].stampId=i.stampId,s}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},1895:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4919));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},8372:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8091));e.default=(t=new i.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new i.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},1422:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8091));e.default=(t=new i.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},7474:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(978));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},3695:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2749));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new i.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=e;if(s.ch===t.ch)return{...t,liveCnt:s.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const r=e.posts[0];if(r.ch===t.ch)return{...t,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post}}return t}},44:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7444));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},8188:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},1534:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=n},6926:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(2749)),o=r(s(8091));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=n.default.defaultFindId,this.offsetSingleFindId=n.default.defaultFindId,this.offsetMultiFindId=n.default.defaultFindId,this.offsetChildFindId=n.default.defaultFindId,this.offsetLogsFindId=n.default.defaultFindId;const s=t.ch?t.ch:"/",r=t.id?t.id:"",c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(s),u=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,d=t.rootCh?t.rootCh:s,l=i.default.isSet(t.isRootCh)?t.isRootCh:d===s,h=t.rootTitle?t.rootTitle:"talkn",p=a.getMediaSrc(t.protocol,s),f=a.getMediaType(p,t),T=t&&t.tuned?t.tuned:"",E=a.getDispThreadType(t,c),_=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,y=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,P=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,A=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,O=t.inputPost?t.inputPost:"",C=!!t.inputStampId&&t.inputStampId,R=t.inputCurrentTime?t.inputCurrentTime:0,b=t.inputSearch?t.inputSearch:"",v=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=t&&t.actioned?t.actioned:"",M=i.default.isSet(t.debug)?t.debug:"";return this.create({id:r,isRootCh:l,isLinkCh:u,isMediaCh:c,rootCh:d,rootTitle:h,chType:f,dispThreadType:E,tuned:T,multistream:_,findType:m,offsetFindId:S,offsetTimelineFindId:y,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:P,offsetLogsFindId:A,inputPost:O,inputStampId:C,inputCurrentTime:R,inputSearch:b,isToggleMultistream:v,actioned:D,debug:M})}static get defaultOffsetFindId(){return n.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),s=e.length;let r="html";for(let i=0;i<s;i++){const s=new RegExp(`.${e[i]}$`);if(t.match(s)){r=a.mediaChTagTypes[e[i]];break}}return r}static validInputPost(t){return!!/\\r\\n$|\\n$|\\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(t)?"ONLY NEW LINE":/^\\s+$/g.test(t)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some((e=>{const s=new RegExp(`.${e}/$|.${e}$`);return t.match(s)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},s,r,i=""){let n="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return n=(t=a.getStepDispThreadType({app:t,ranks:e},s,r,i)).dispThreadType,{app:t,stepTo:`${o} to ${n}`}}static getStepDispThreadType({app:t,ranks:e},s={},r,i){const n=t||{};if(n.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return n.dispThreadType=a.dispThreadTypeTimeline,n.offsetFindId=n.offsetTimelineFindId?n.offsetTimelineFindId:a.defaultOffsetFindId,n.isLinkCh="Links"===i||"findMediaCh"===i||"ToMedia"===i,n.isMediaCh=!0,n;if("BackToRootCh"===i&&(n.isLinkCh=!1),"Links"===i&&e.length>0){if(!e.some((t=>t.ch===r||t.ch===r+"/")))return n.offsetFindId=a.defaultOffsetFindId,n.dispThreadType=a.dispThreadTypeChild,n.isLinkCh=!0,n}return n.rootCh===r?n.multistream?n.dispThreadType=a.dispThreadTypeMulti:n.dispThreadType=a.dispThreadTypeSingle:n.dispThreadType=a.dispThreadTypeChild,n}}e.default=a},2169:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((s=>{e[t[s].name]=t[s].value})),e}}e.default=n},8455:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=n},2749:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(300));class o extends i.default{constructor(t){super(),this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const e=t?{...o.defaultValues,...t}:o.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:n.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=o},5154:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},9478:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6926)),n=r(s(5154)),o=r(s(386)),a=r(s(5390)),c=r(s(1083));class u{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:s,postsMulti:r,postsSingle:n,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return s;case i.default.dispThreadTypeMulti:return r;case i.default.dispThreadTypeSingle:return n;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:s,posts:r}=t,a=r&&r.length>0;switch(t.postsMulti=new n.default,t.postsSingle=new o.default,t.postsChild=[],t.postsLogs=[],s.dispThreadType){case i.default.dispThreadTypeTimeline:t=u.getAnyActionPostsTimeline(t,r,e,a);break;case i.default.dispThreadTypeMulti:t.postsMulti=a?r:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=a?r:[];break;case i.default.dispThreadTypeChild:t.postsChild=a?r:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=a?r:[]}return t}static getAnyActionPostsTimeline(t,e,s,r){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new a.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new a.default,t.postsTimelineStock=new c.default,r)){const s=e.length;for(let r=0;r<s;r++)0===e[r].currentTime?t.postsTimeline.push(e[r]):t.postsTimelineStock.push(e[r])}return t}}e.default=u},386:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5390:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},1083:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},2342:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3189:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8207:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},4919:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},s=t&&t.common?t.common:{},r=t&&t.server?t.server:{};return this.create({client:e,common:s,server:r})}}e.default=n},8091:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(7771)),o=r(s(300)),a=r(s(6926));class c extends i.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=n.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=c.getDefaultFavicon(),this.findType=c.findTypeAll,this.title=c.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=c.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=c.isWindowObj(t)?c.constructorFromWindow(t,e):t;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[c.findTypeHtml]:["text/html"],[c.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[c.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const s=!!e.ch&&e.ch,r=c.getCh(e,s);let n={};return n.ch=r,n.chs=["/"],n.hasSlash=!!e.hasslash&&i.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=c.getDefaultFavicon(),n.findType=c.findTypeAll,s?(n.protocol=c.getProtocol(s),n.host=c.getHost(s),n.chs=s.chs&&s.chs.length>0?s.chs:c.getChs(r)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:c.getChs(r),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=c.getFaviconFromWindow(window)),n.title=c.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.emotions={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=c.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=c.getIsSelfCh("",n.ch),n.createTime="",n.updateTime="",n}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const r="/"===t.slice(-1)?t:t+"/";if("/"!==r){const t=r.split("/"),i=t.length;let n="";for(var s=1;s<i;s++)""!==t[s]&&(n+=t[s],n="/"===n.slice(-1)?n:n+"/",n="/"===n.slice(0,1)?n:"/"+n,e.push(n))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):o.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=c.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",t.document,null,2,null).stringValue,s="http://",r="https://",i=location.host;if(e.indexOf(s)||e.indexOf(r)){const t=s+i+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,s,r={}){let i={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return i.isCreate=c.getStatusCreate(s),i.isRequireUpsert=c.getStatusIsRequireUpsert(t,r,i.isCreate),i.isMultistream=c.getStatusIsMultistream(e),i.isToggleMultistream=c.getStatusIsToggleMultistream(e),i.isMediaCh=c.getStatusIsMediaCh(t.ch),i}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,s=!1){if(!s)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,s=new Date,r=s.getFullYear(),i=s.getMonth(),n=s.getDate(),a=s.getHours();return s.getMinutes(),e<new Date(r,i,n,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=c.findTypes[c.findTypeHtml],s=c.findTypes[c.findTypeMusic],r=c.findTypes[c.findTypeVideo];let i;if(t&&""!==t){let n="";t.indexOf(";")>0&&(n=t.split(";")[0]),(e.includes(t)||e.includes(n))&&(i=c.findTypeHtml),(s.includes(t)||s.includes(n))&&(i=c.findTypeMusic),(r.includes(t)||r.includes(n))&&(i=c.findTypeVideo)}return i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=c},978:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=n},7444:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(2749));class o extends i.default{static get defaultOffsetFindId(){return n.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",s=t&&t.utype?t.utype:"",r=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,n=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,c=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,u=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,d=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,l=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:s,tuned:r,multistreamed:i,actioned:n,offsetFindId:a,offsetSingleFindId:c,offsetMultiFindId:u,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=o},8527:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8188)),n=r(s(1534)),o=r(s(6926)),a=r(s(8455)),c=r(s(9478)),u=r(s(5390)),d=r(s(1083)),l=r(s(8207)),h=r(s(8091)),p=r(s(7444));class f{constructor(t,e={}){this.bootOption=t,this.ranks=new l.default,this.menuLogs=new a.default(e.menuLogs),this.posts=new c.default,this.postsMulti=new c.default,this.postsSingle=new c.default,this.postsChild=new c.default,this.postsTimeline=new u.default,this.postsTimelineStock=new d.default,this.postsLogs=new c.default,this.analyze=new n.default,this.thread=new h.default(this.bootOption,e.thread),this.threadDetail=new h.default(this.bootOption,e.thread),this.app=new o.default(f.getAppParams(this.thread,this.bootOption,e)),this.user=new p.default(f.getUserParams(this,e)),this.actionLog=new i.default}static getAppParams(t,e,s){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=f},8421:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1223)),n=r(s(7771)),o=r(s(198));class a{constructor(t){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=t,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(t,e={},s){const r={id:this.id,type:i.default.WSAPI_TO_CLIENT_TYPE,ioType:n.default.API_SETUP,method:t,params:e,methodBack:s};this.worker.postMessage(r)}onMessage(t){const{id:e,type:s,ioType:r,method:n,params:o}=t.data;s===i.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(n,o)}onMessageError(t){console.warn(t)}}e.default=a,new a(self)},1223:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const i=r(s(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(i.default.API_TO_SERVER_REQUEST)?t.replace(i.default.API_TO_SERVER_REQUEST,i.default.API_TO_CLIENT_REQUEST):0===t.indexOf(i.default.SERVER_TO_API_EMIT)?t.replace(i.default.SERVER_TO_API_EMIT,i.default.API_TO_CLIENT_EMIT):0===t.indexOf(i.default.SERVER_TO_API_BROADCAST)?t.replace(i.default.SERVER_TO_API_BROADCAST,i.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==s.getType(t)&&"Null"!==s.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return s.getType(t),Object.keys(t).forEach((r=>{let i,n,o=null,a=!1,c=!1,u=()=>{},d=null;if("Object"===s.getType(t[r])){i=t[r];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,c=i.isAcceptBlank?i.isAcceptBlank:c,o=!e&&i.def?i.def:o,d=e||!i.value&&""!==i.value?i:i.value,d=e&&o?o:d,n=s.getType(d),u=i.valid?i.valid:u}else d=t[r],o=d,a=a,c=c,n=s.getType(d),u=u;const l=t=>{let i=null;const o=`${e}.${r}`,l=d,h=n,p=t,f=s.getType(t);return f!==n&&(i=`SCHEMA_TYPE : ${o} [validType: ${n}][paramsType: ${f}]`),a&&null===t&&(i=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),c&&""===t&&(i=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(u)&&u(t)&&(i=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:i}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:t=>{const e=l(d);if(null===_)return d=t,{...this,[r]:d};throw this.validWarn(e),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(t,e){try{const s=this[t];if(void 0===s)return!0;if(null===s)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:r}=this[t]=e;return!r&&(this[t]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${s}`}}merge(t={},e=!0){try{const r=s.getType(t),i=Object.keys(t);if(i.length>0){let s={...this};return i.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?s[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===r?(s=Object.values(s),e?new this.constructor(s):s):e?new this.constructor(s):s}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${s.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${s.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((s=>{let r=t[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?e[s]=r.default:e[s]=r})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=s},7771:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(n.METHOD_COLON),s=e[0].split("[")[0];let r;return r=e[0].indexOf(`[${n.API_REQUEST_TYPE}]`)>0?n.API_REQUEST_TYPE:e[0].indexOf(`[${n.API_RESPONSE_TYPE_EMIT}]`)>0?n.API_RESPONSE_TYPE_EMIT:n.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return n.map[t]&&(e.emit=!(Object.keys(n.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(n.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_REQUEST_TYPE}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_REQUEST_TYPE:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_BROADCAST}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_EMIT}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_EMIT:n.API_SETUP}static convertExtToClientActionType(t,e){return n.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(n.API_TO_SERVER_REQUEST)?t.replace(n.API_TO_SERVER_REQUEST,n.API_TO_CLIENT_REQUEST):0===t.indexOf(n.SERVER_TO_API_EMIT)?t.replace(n.SERVER_TO_API_EMIT,n.API_TO_CLIENT_EMIT):0===t.indexOf(n.SERVER_TO_API_BROADCAST)?t.replace(n.SERVER_TO_API_BROADCAST,n.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,s){const r=t.replace(n.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=n.map[r];let c={[n.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((t=>{c[t]||(c[t]={}),a[t].forEach((r=>{if(!c[t][r]){let n=e[t][r];s&&s[t]&&i.default.isSet(s[t][r])&&(n=s[t][r]),c[t][r]=n}}))})),Object.keys(o).forEach((t=>{c[t]||(c[t]={}),o[t].forEach((e=>{c[t][e]||(c[t][e]=s)}))})),c}static getResponseState(t,e,s){const r=e.type,i=n.map[r][`response${t}State`];let o={[n.REDUX_ACTION_KEY]:r};return Object.keys(i).forEach((t=>{if(!s[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const r=i[t];let n=s[t];switch(n.constructor.name){case"model":n=n.toJSON(),delete n._id,delete n.__v}"*"===r?o={...o,[t]:n}:r.forEach((r=>{if(void 0===s[t][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${r}`;o={...o,[t]:{...o[t],[r]:s[t][r]}}}))}})),o}static getRequestActionState(t,e=null,s=null){return"string"==typeof e&&null===s?{type:t}:"object"==typeof e&&"object"==typeof s?{...e,...s,type:t}:"string"==typeof e&&"object"==typeof s?{...s,type:t}:{...e,type:t}}}e.default=n},300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6894)),n=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:c,PRODUCTION_DOMAIN:u,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=i.default.hasOwnProperty("hostname")?i.default.hostname():"localhost",f=function(t){if("browser"===n.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===o.default.PORTS.DEVELOPMENT||t===o.default.PORTS.DEVELOPMENT_API?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return t.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},E=f===c,_=f===a?u:d,m=`${l.WWW}.${_}`,S=`${l.API}.${_}`,y=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${S}/v1`,g=E?`${_}:${h.DEVELOPMENT}/${T.client}`:`${l.CLIENT}.${_}`,I=`${l.DESC}.${_}`,P=`${l.PORTAL}.${_}`,A=`${l.ASSETS}.${_}`,O=`${A}/img/`,C={domain:_,env:f,files:T,hostName:p,apiURL:S,apiAccessURL:y,wwwURL:m,descURL:I,portalURL:P,clientURL:g,assetsURL:A,autoURL:`${l.AUTO}.${_}`,extURL:`${l.EXT}.${_}`,ownURL:`${l.OWN}.${_}`,newsURL:`${l.NEWS}.${_}`,bannerURL:`${l.BANNER}.${_}`,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:O,assetsIconPath:`${A}/icon/`,assetsJsPath:`${A}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${O}talkn_logo_html.png`,Music:`//${O}talkn_logo_music.png`,Video:`//${O}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};e.default={...C}},1665:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8399)),n={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=n},3365:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1025));class n{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(n.inputs).forEach((t=>{n.inputs[t].forEach((e=>{this.belongCoverTypes[e]=t}))})),Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(t);const e=n.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL})),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=n.defaultModelKey,e=0,s=!0){let r=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const s=o[t],n=i[s];if(s>e)break;r=n}return s?r+1:r}static get inputs(){return{[n.TYPES.LIKE.LABEL]:[1,2,3,4,5],[n.TYPES.MONEY.LABEL]:[100],[n.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[n.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[n.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[n.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[n.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[n.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[n.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[n.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=n},2703:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},6663:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},3005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},1025:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2703)),n=r(s(6663)),o=r(s(3005));e.default={Plain:i.default,Russell:n.default,RussellSimple:o.default}},2281:t=>{"use strict";var e,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},i=0,n=0;function o(t){var e="";do{e=s[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=o(+new Date);return t!==e?(i=0,e=t):t+"."+o(i++)}for(;n<64;n++)r[s[n]]=n;a.encode=o,a.decode=function(t){var e=0;for(n=0;n<t.length;n++)e=64*e+r[t.charAt(n)];return e},t.exports=a},6894:(t,e,s)=>{t.exports=s(6894)},8399:t=>{var e,s,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(s){try{return e.call(null,t,0)}catch(s){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{s="function"==typeof clearTimeout?clearTimeout:n}catch(t){s=n}}();var a,c=[],u=!1,d=-1;function l(){u&&a&&(u=!1,a.length?c=a.concat(c):d=-1,c.length&&h())}function h(){if(!u){var t=o(l);u=!0;for(var e=c.length;e;){for(a=c,c=[];++d<e;)a&&a[d].run();d=-1,e=c.length}a=null,u=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===n||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function f(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)e[s-1]=arguments[s];c.push(new p(t,e)),1!==c.length||u||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},4428:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.io=e.Socket=e.Manager=e.protocol=void 0;const r=s(5253),i=s(6530),n=s(1227)("socket.io-client");t.exports=e=a;const o=e.managers={};function a(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const s=r.url(t,e.path||"/socket.io"),a=s.source,c=s.id,u=s.path,d=o[c]&&u in o[c].nsps;let l;return e.forceNew||e["force new connection"]||!1===e.multiplex||d?(n("ignoring socket cache for %s",a),l=new i.Manager(a,e)):(o[c]||(n("new io instance for %s",a),o[c]=new i.Manager(a,e)),l=o[c]),s.query&&!e.query&&(e.query=s.queryKey),l.socket(s.path,e)}e.io=a;var c=s(5485);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return c.protocol}}),e.connect=a;var u=s(6530);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return u.Manager}});var d=s(7055);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return d.Socket}}),e.default=a},6530:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const r=s(5983),i=s(7055),n=s(5485),o=s(3598),a=s(3010),c=s(7204),u=s(1227)("socket.io-client:manager");class d extends c.StrictEventEmitter{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new a({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const s=e.parser||n;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=o.on(e,"open",(function(){s.onopen(),t&&t()})),n=o.on(e,"error",(e=>{u("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;u("connect attempt will timeout after %d",t),0===t&&i();const s=setTimeout((()=>{u("connect attempt timed out after %d",t),i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(n),this}connect(t){return this.open(t)}onopen(){u("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(o.on(t,"ping",this.onping.bind(this)),o.on(t,"data",this.ondata.bind(this)),o.on(t,"error",this.onerror.bind(this)),o.on(t,"close",this.onclose.bind(this)),o.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){this.emitReserved("packet",t)}onerror(t){u("error",t),this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s||(s=new i.Socket(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void u("socket %s is still active, skipping close",t);this._close()}_packet(t){u("writing packet %j",t);const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){u("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const s=setTimeout((()=>{t.skipReconnect||(u("attempting reconnect"),this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(u("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):(u("reconnect success"),t.onreconnect())})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}e.Manager=d},3598:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,s){return t.on(e,s),function(){t.off(e,s)}}},7055:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const r=s(5485),i=s(3598),n=s(7204),o=s(1227)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends n.StrictEventEmitter{constructor(t,e,s){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[i.on(t,"open",this.onopen.bind(this)),i.on(t,"packet",this.onpacket.bind(this)),i.on(t,"error",this.onerror.bind(this)),i.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(a.hasOwnProperty(t))throw new Error(\'"\'+t+\'" is a reserved event name\');e.unshift(t);const s={type:r.PacketType.EVENT,data:e,options:{}};s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(o("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),s.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(s):this.sendBuffer.push(s):o("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){o("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:r.PacketType.CONNECT,data:t})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t){o("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case r.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(t);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(t);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];o("emitting event %j",e),null!=t.id&&(o("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,o("sending ack %j",i),e.packet({type:r.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(o("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):o("bad ack %s",t.id)}onconnect(t){o("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){o("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(o("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}e.Socket=c},7204:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StrictEventEmitter=void 0;const r=s(8767);e.StrictEventEmitter=class extends r{on(t,e){return super.on(t,e),this}once(t,e){return super.once(t,e),this}emit(t,...e){return super.emit(t,...e),this}emitReserved(t,...e){return super.emit(t,...e),this}listeners(t){return super.listeners(t)}}},5253:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const r=s(4187),i=s(1227)("socket.io-client:url");e.url=function(t,e="",s){let n=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\\/\\//.test(t)||(i("protocol-less url %s",t),t=void 0!==s?s.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port+e,n.href=n.protocol+"://"+o+(s&&s.port===n.port?"":":"+n.port),n}}},e={};function s(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r].call(n.exports,n,n.exports,s),n.exports}s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(8421)})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,',"Worker",void 0,g.p+"ws.api.worker.js")}},477:I=>{"use strict";I.exports=function(I,F,g,B){var c=self||window;try{try{var U;try{U=new c.Blob([I])}catch(F){(U=new(c.BlobBuilder||c.WebKitBlobBuilder||c.MozBlobBuilder||c.MSBlobBuilder)).append(I),U=U.getBlob()}var t=c.URL||c.webkitURL,Q=t.createObjectURL(U),C=new c[F](Q,g);return t.revokeObjectURL(Q),C}catch(B){return new c[F]("data:application/javascript,".concat(encodeURIComponent(I)),g)}}catch(I){if(!B)throw Error("Inline worker is not supported");return new c[F](B,g)}}},6894:(I,F,g)=>{I.exports=g(6894)},8399:I=>{var F,g,B=I.exports={};function c(){throw new Error("setTimeout has not been defined")}function U(){throw new Error("clearTimeout has not been defined")}function t(I){if(F===setTimeout)return setTimeout(I,0);if((F===c||!F)&&setTimeout)return F=setTimeout,setTimeout(I,0);try{return F(I,0)}catch(g){try{return F.call(null,I,0)}catch(g){return F.call(this,I,0)}}}!function(){try{F="function"==typeof setTimeout?setTimeout:c}catch(I){F=c}try{g="function"==typeof clearTimeout?clearTimeout:U}catch(I){g=U}}();var Q,C=[],s=!1,l=-1;function i(){s&&Q&&(s=!1,Q.length?C=Q.concat(C):l=-1,C.length&&V())}function V(){if(!s){var I=t(i);s=!0;for(var F=C.length;F;){for(Q=C,C=[];++l<F;)Q&&Q[l].run();l=-1,F=C.length}Q=null,s=!1,function(I){if(g===clearTimeout)return clearTimeout(I);if((g===U||!g)&&clearTimeout)return g=clearTimeout,clearTimeout(I);try{g(I)}catch(F){try{return g.call(null,I)}catch(F){return g.call(this,I)}}}(I)}}function d(I,F){this.fun=I,this.array=F}function e(){}B.nextTick=function(I){var F=new Array(arguments.length-1);if(arguments.length>1)for(var g=1;g<arguments.length;g++)F[g-1]=arguments[g];C.push(new d(I,F)),1!==C.length||s||t(V)},d.prototype.run=function(){this.fun.apply(null,this.array)},B.title="browser",B.browser=!0,B.env={},B.argv=[],B.version="",B.versions={},B.on=e,B.addListener=e,B.once=e,B.off=e,B.removeListener=e,B.removeAllListeners=e,B.emit=e,B.prependListener=e,B.prependOnceListener=e,B.listeners=function(I){return[]},B.binding=function(I){throw new Error("process.binding is not supported")},B.cwd=function(){return"/"},B.chdir=function(I){throw new Error("process.chdir is not supported")},B.umask=function(){return 0}}},F={};function g(B){var c=F[B];if(void 0!==c)return c.exports;var U=F[B]={exports:{}};return I[B].call(U.exports,U,U.exports,g),U.exports}g.n=I=>{var F=I&&I.__esModule?()=>I.default:()=>I;return g.d(F,{a:F}),F},g.d=(I,F)=>{for(var B in F)g.o(F,B)&&!g.o(I,B)&&Object.defineProperty(I,B,{enumerable:!0,get:F[B]})},g.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),g.o=(I,F)=>Object.prototype.hasOwnProperty.call(I,F),g.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},(()=>{var I;g.g.importScripts&&(I=g.g.location+"");var F=g.g.document;if(!I&&F&&(F.currentScript&&(I=F.currentScript.src),!I)){var B=F.getElementsByTagName("script");B.length&&(I=B[B.length-1].src)}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),g.p=I})(),g(5719)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,