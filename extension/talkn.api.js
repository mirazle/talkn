!function(t){var e={};function B(I){if(e[I])return e[I].exports;var i=e[I]={i:I,l:!1,exports:{}};return t[I].call(i.exports,i,i.exports,B),i.l=!0,i.exports}B.m=t,B.c=e,B.d=function(t,e,I){B.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:I})},B.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},B.t=function(t,e){if(1&e&&(t=B(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var I=Object.create(null);if(B.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)B.d(I,i,function(e){return t[e]}.bind(null,i));return I},B.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return B.d(e,"a",e),e},B.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},B.p="",B(B.s=44)}([function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(1)),F=I(B(5)),c=I(B(81)),l=I(B(82)),g=I(B(31)),Q=I(B(32)),U=I(B(33)),s=I(B(22)),d=I(B(34)),n=I(B(35)),a=I(B(3)),u=I(B(36)),C=I(B(83)),V=I(B(84)),b=I(B(37)),G=I(B(9)),x=I(B(38)),o=I(B(23)),Z=I(B(85)),R=I(B(39)),L=I(B(21)),X=I(B(40)),r=I(B(24)),m=I(B(41)),y=I(B(86)),A=I(B(87)),S=I(B(88)),W=I(B(42));class h{constructor(t){const e=new i.default(t),B=new g.default(t),I=new Q.default(t),h=new U.default(t),p=new s.default(t),E=new d.default(t),N=new a.default(t),J=new u.default(t),Y=new C.default(t),H=new V.default(t),T=new W.default(t),f=new b.default(t),k=new G.default(t),M=new x.default(t),D=new o.default(t),w=new X.default(t),v=new r.default(t),z=new m.default(t),P=new y.default(t),O=new R.default(t),j=new L.default(t),K=new Z.default(t),_=new F.default(t);return{container:e,header:B,footer:I,postsSupporter:h,postsFooter:p,menuFooter:E,detailFooter:new c.default(t),menu:N,ranks:J,ch:Y,menuUsers:H,extScreen:T,lockMenu:f,posts:k,post:M,timeMarker:D,notif:w,audio:O,video:j,board:v,links:z,link:P,innerNotif:K,detail:_,emotionGraph:new l.default(t),icon:new n.default(t),liveCnt:new S.default(t),loading:new A.default(t)}}static get fontBaseRGB(){return"rgb(130, 130, 130)"}static get darkLightRGB(){return"rgba(0, 0, 0, 0.2)"}static get darkLightRGBA(){return"rgba(0, 0, 0, 0.25)"}static get darkRGB(){return"rgb(0, 0, 0)"}static get darkRGBA(){return"rgba(0, 0, 0, 0.4)"}static get mono160RGB(){return"rgb(160, 160, 160)"}static get mono160RGBA(){return"rgb(160, 160, 160)"}static get mono180RGB(){return"rgb(180, 180, 180)"}static get mono192RGB(){return"rgb(192, 192, 192)"}static get mono200RGB(){return"rgb(200, 200, 200)"}static get mono205RGB(){return"rgb(205, 205, 205)"}static get mono210RGB(){return"rgb(210, 210, 210)"}static get mono211RGB(){return"rgb(211, 211, 211)"}static get mono215RGB(){return"rgb(215, 215, 215)"}static get mono220RGB(){return"rgb(220, 220, 220)"}static get mono225RGB(){return"rgb(225, 225, 225)"}static get mono230RGB(){return"rgb(230, 230, 230)"}static get mono235RGB(){return"rgb(235, 235, 235)"}static get mono240RGB(){return"rgb(240, 240, 240)"}static get mono245RGB(){return"rgb(245, 245, 245)"}static get mono250RGB(){return"rgb(250, 250, 250)"}static get mono251RGB(){return"rgb(251, 251, 251)"}static get mono252RGB(){return"rgb(252, 252, 252)"}static get mono253RGB(){return"rgb(253, 253, 253)"}static get mono254RGB(){return"rgb(254, 254, 254)"}static get mono255RGB(){return"rgb(255, 255, 255)"}static get mono180RGBA(){return"rgba(180, 180, 180, 0.96)"}static get mono192RGBA(){return"rgba(192, 192, 192, 0.96)"}static get mono200RGBA(){return"rgba(200, 200, 200, 0.96)"}static get mono205RGBA(){return"rgba(205, 205, 205, 0.96)"}static get mono210RGBA(){return"rgba(210, 210, 210, 0.96)"}static get mono211RGBA(){return"rgba(211, 211, 211, 0.96)"}static get mono215RGBA(){return"rgba(215, 215, 215, 0.96)"}static get mono220RGBA(){return"rgba(220, 220, 220, 0.96)"}static get mono225RGBA(){return"rgba(225, 225, 225, 0.96)"}static get mono230RGBA(){return"rgba(230, 230, 230, 0.96)"}static get mono235RGBA(){return"rgba(235, 235, 235, 0.96)"}static get mono240RGBA(){return"rgba(240, 240, 240, 0.96)"}static get mono245RGBA(){return"rgba(245, 245, 245, 0.96)"}static get mono250RGBA(){return"rgba(250, 250, 250, 0.96)"}static get mono252RGBA(){return"rgba(252, 252, 252, 0.96)"}static get mono255RGBA(){return"rgba(255, 255, 255, 0.96)"}static get twitterRGB(){return"rgba(76, 160, 235)"}static get twitterRGBA(){return"rgba(76, 160, 235, 0.96)"}static get facebookRGB(){return"rgba(73, 104, 173)"}static get facebookRGBA(){return"rgba(73, 104, 173, 0.96)"}static get emptyLabelStyle(){return{maxWidth:0,maxHeight:0}}static get(t={layout:{},content:{},animation:{}}){return{...t.layout,...t.content,...t.animation}}static getLayoutBase(t={}){return{display:"block",boxSizing:"border-box",overflow:"hidden",width:"inherit",height:"inherit",minWidth:"auto",minHeight:"auto",maxWidth:"inherit",maxHeight:"inherit",padding:0,margin:0,font:0,lineHeight:1,listStyle:"none",userSelect:"none",textDecoration:"none",verticalAlign:"baseline",borderCollapse:"collapse",borderSpacing:0,border:0,borderRadius:0,zIndex:1,align:"center",...t}}static getLayoutGrid(t={}){return{...h.getLayoutBase({display:"grid"}),...t}}static getLayoutFlex(t={}){return{...h.getLayoutBase({display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutInlineFlex(t={}){return{...h.getLayoutBase({display:"inline-flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutTable(t={}){return{...h.getLayoutBase({display:"table"}),...t}}static getLayoutTableRow(t={}){return{...h.getLayoutBase({display:"table-row"}),...t}}static getLayoutTableCol(t={}){return{...h.getLayoutBase({display:"table-cell"}),...t}}static getLayoutFlexChild(t={}){return{...h.getLayoutBase({width:"auto",height:"auto"}),...t}}static getLayoutBlock(t={}){return{...h.getLayoutBase({display:"block"}),...t}}static getLayoutInlineBlock(t={}){return{...h.getLayoutBase({display:"inline-block",align:"center",verticalAlign:"middle"}),...t}}static getLayoutInline(t={}){return{...h.getLayoutBase({display:"inline"}),...t}}static getContentBase(t={}){return{wordWrap:"breakWord",whiteSpace:"normal",quotes:"none",content:"none",cursor:"default",...h.getFontBase(),...t}}static getFontBase(t={}){return{...{letterSpacing:"inherit",lineHeight:"inherit",textAlign:"center",color:h.fontBaseRGB,fontWeight:300,fontSize:"inherit",fontFamily:'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Hiragino Sans", "Noto Sans CJK JP", "Original Yu Gothic", "Yu Gothic", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Sans Emoji"'},...t}}static getAnimationBase(t={}){return{...{transition:i.default.transitionOff,transform:"translate3d(0px, 0px, 0px)"},...t}}static trimUnit(t){return Number(t.toString().replace(/px|%|vw|vh|ms/,""))}}e.default=h},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(13)),l=I(B(3)),g=I(B(23));class Q{constructor(t){return{self:Q.getSelf(t),multistreamIconWrap:Q.getMultistreamIconWrap(t),newPost:Q.getNewPost(t),hideScreenBottom:Q.getHideScreenBottom(t),linkLabel:Q.getLinkLabel(t)}}static get width(){return"100%"}static get widthRatio(){return.94}static get radius(){return"10px"}static get radiuses(){return`${Q.radius} ${Q.radius} 0px 0px`}static get openHeight(){return 360}static get closeHeight(){return 360}static get threadHeight(){return 360}static get maxZIndex(){return 2147483647}static get closeBottom(){return 0}static get merginRatio(){return.034}static get borderRGB(){return F.default.mono240RGB}static get border(){return"0px solid "+Q.borderRGB}static get lineShadow(){return"0px 0px 1px "+Q.lineShadowColor}static get lineInsetShadow(){return`0px 0px 1px ${Q.lineShadowColor} inset`}static get lineShadowColor(){return Q.downreliefRGB}static get shadow(){return F.default.mono230RGB+" 0px 0px 5px 0px"}static get darkLightRGB(){return F.default.darkLightRGB}static get darkLightRGBA(){return F.default.darkLightRGBA}static get darkRGB(){return F.default.darkRGB}static get darkRGBA(){return F.default.darkRGBA}static get downreliefRGB(){return F.default.mono160RGB}static get reliefRGB(){return F.default.mono180RGB}static get reliefRGBA(){return F.default.mono180RGBA}static get silverRGB(){return F.default.mono192RGB}static get silverRGBA(){return F.default.mono192RGBA}static get lightGrayRGB(){return F.default.mono211RGB}static get lightGrayRGBA(){return F.default.mono211RGBA}static get chromeOffTabRGB(){return F.default.mono225RGB}static get chromeOffTabRGBA(){return F.default.mono225RGBA}static get softCalmRGB(){return F.default.mono230RGB}static get softCalmRGBA(){return F.default.mono230RGBA}static get middleCalmRGBA(){return F.default.mono235RGBA}static get calmRGB(){return F.default.mono240RGB}static get calmRGBA(){return F.default.mono240RGBA}static get lightRGB(){return F.default.mono245RGB}static get lightRGBA(){return F.default.mono245RGBA}static get offWhiteRGB(){return F.default.mono250RGB}static get offWhiteRGBA(){return F.default.mono250RGBA}static get offWhitePlusRGB(){return F.default.mono252RGB}static get offWhitePlusRGBA(){return F.default.mono252RGBA}static get whiteRGB(){return F.default.mono255RGB}static get whiteRGBA(){return F.default.mono255RGBA}static get fontBaseRGB(){return F.default.fontBaseRGB}static get themeRGBString(){return"79, 174, 159"}static get themeLightRGBString(){return"89, 184, 169"}static get themeSuperLightRGBString(){return"200, 255, 220"}static get themeRGB(){return`rgb(${Q.themeRGBString})`}static get themeRGBA(){return`rgba(${Q.themeRGBString}, 0.96)`}static get themeRGBAA(){return`rgba(${Q.themeRGBString}, 0.8)`}static getBlockSize({app:t,ui:e}){return e.screenMode===i.default.screenModeSmallLabel?45:54}static getFaviconSize({app:t,ui:e}){return e.screenMode===i.default.screenModeSmallLabel?24:30}static getLightThemeRGBA(t=.8){return`rgba(${Q.themeLightRGBString}, ${t})`}static getThemeRGBA(t=.8){return`rgba(${Q.themeRGBString}, ${t})`}static getTransitionOn({app:t,ui:e}={},B=!1){let I=String(Q.transitionOn);return I=t?e.isTransition?Q.transitionOn+"ms":Q.transitionOff+"ms":Q.transitionOn+"ms",B?F.default.trimUnit(I):I}static getTransition({app:t,ui:e}={},B=!1){const I=e.isTransition?Q.transitionOn+"ms":Q.transitionOff+"ms";return B?F.default.trimUnit(I):I}static getTransitionFirstOn({app:t,ui:e},B=!1){const I=e.isTransition?Q.transitionFirstOn+"ms":Q.transitionOff+"ms";return B?F.default.trimUnit(I):I}static get transitionOn(){return 600}static get transitionNotif(){return 300}static get transitionNotifDisp(){return 3e3}static get transitionFirstOn(){return 300}static get transitionOff(){return 0}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get notifOpenTranslateY(){return"translate3d( 0px, -80px, 0px )"}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNewPost?Q.notifOpenTranslateY:Q.notifCloseTranslateY}static getNewPostDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getWidthPx({bootOption:t,app:e,ui:B}){return t?t.width?t.width:Q.width:B.width}static getRightPx({app:t},e){return"0%"}static get multistreamWrapDefaultTop(){return 5}static getFontSize({app:t,ui:e}){return e.screenMode===i.default.screenModeSmallLabel?14:15}static getLetterSpacing({app:t,ui:e}){return e.screenMode===i.default.screenModeSmallLabel?1.5:2}static getSelf({app:t,ui:e,bootOption:B,type:I}){let c="0px";e.extensionMode===i.default.extensionModeExtModalLabel&&(c="3px");const l=F.default.getLayoutBlock({display:"initial",width:"100%",height:"100%",overflow:"hidden",borderRadius:c,opacity:1}),g=F.default.getContentBase({fontSize:Q.getFontSize({app:t,ui:e})+"px",lineHeight:Q.getFontSize({app:t,ui:e})+"px",letterSpacing:Q.getLetterSpacing({app:t,ui:e})+"px"}),U=F.default.getAnimationBase({transition:Q.transitionFirstOn+"ms"});return F.default.get({layout:l,content:g,animation:U})}static getMultistreamIconWrapTop({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel||(e.extensionMode,i.default.extensionModeExtModalLabel),Q.getBlockSize({app:t,ui:e})+Q.multistreamWrapDefaultTop+"px"}static getMultistreamIconWrapRight({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:return"5%";case i.default.screenModeMiddleLabel:return"20px";case i.default.screenModeLargeLabel:return`calc( ${c.default.getWidth({app:t,ui:e})} + 20px)`}}static getMultistreamIconWrap({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"30px",height:"30px",margin:"0 auto",background:"rgba(255, 255, 255, 0.8)"}),I=F.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),i=F.default.getAnimationBase({transition:Q.transitionOff});return F.default.get({layout:B,content:I,animation:i})}static getNewPost({app:t,ui:e}){let B=Q.getNewPostDisplay({app:t,ui:e});const I=g.default.getFixTimeMarker({app:t,ui:e});return delete I.top,{...I,display:B,zIndex:"1",margin:"0px auto",fontSize:"0.7em",bottom:`-${Q.notifHeight}px`,transition:Q.getTransition({app:t,ui:e})}}static getHideScreenBottom({app:t,ui:e}){const B=F.default.getLayoutFlex({position:"fixed",top:"100vh",width:"100vw",height:"100vh",background:Q.reliefRGB,zIndex:Q.maxZIndex}),I=F.default.getContentBase({}),i=F.default.getAnimationBase({});return F.default.get({layout:B,content:I,animation:i})}static getLinkLabel({app:t,ui:e}){const B=Q.getBlockSize({app:t,ui:e})+"px",I=e.screenMode===i.default.screenModeSmallLabel?"0px":""+l.default.getWidth({app:t,ui:e}),c=F.default.getLayoutFlex({maxWidth:"180px",position:"fixed",top:B,left:I,height:"20px",padding:"5px 10px",alignItems:"center",justifyContent:"flex-start",background:"rgba(0, 0, 0, 0.4)",zIndex:"1",borderRadius:"0px 0px 2px 0px"}),g=F.default.getContentBase({fontSize:"0.7em",lineHeight:2,whiteSpace:"nowrap",color:Q.whiteRGB}),U=F.default.getAnimationBase();return F.default.get({layout:c,content:g,animation:U})}}e.default=Q},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4)),F=I(B(10));class c extends i.default{constructor(t={}){super();const e=t.iFrameId?t.iFrameId:"",B=c.getWidth(t),I=c.getHeight(t),F=t.postsHeight?t.postsHeight:0,l=c.getScreenMode(B),g=t.extensionMode?t.extensionMode:c.extensionModeExtNoneLabel,Q=t.extensionWidth?t.extensionWidth:"0%",U=t.extensionHeight?t.extensionHeight:0,s=t&&t.threadScrollY?t.threadScrollY:0,d=c.getIsOpenPosts({height:I,extensionMode:g,extensionHeight:U}),n=!!t.isOpenSetting&&t.isOpenSetting,a=i.default.isSet(t.isOpenMenu)?t.isOpenMenu:c.getIsOpenMenu({screenMode:l}),u=l===c.screenModeDetailLabel||!!i.default.isSet(t.isOpenDetail)&&t.isOpenDetail,C=!!t.isOpenNewPost&&t.isOpenNewPost,V=!!t.isOpenNotif&&t.isOpenNotif,b=!!i.default.isSet(t.isOpenPostsSupporter)&&t.isOpenPostsSupporter,G=i.default.isSet(t.isOpenBoard)?t.isOpenBoard:c.getIsOpenBoard({screenMode:l}),x=!i.default.isSet(t.isBubblePost)||t.isBubblePost,o=!!i.default.isSet(t.isDispPosts)&&t.isDispPosts,Z=!!i.default.isSet(t.isOpenLinks)&&t.isOpenLinks,R=!i.default.isSet(t.isTransition)||t.isTransition,L=t.menuComponent?t.menuComponent:c.getDefaultMenuComponent(),X=t.openLockMenu?t.openLockMenu:c.openLockMenuLabelNo,r=t.openInnerNotif?t.openInnerNotif:"",m=t.clicked?t.clicked:"",y=t.detailCh?t.detailCh:"/",A=t.inputPost?t.inputPost:"",S=!!t.inputStampId&&t.inputStampId,W=t.inputCurrentTime?t.inputCurrentTime:0,h=t.inputSearch?t.inputSearch:"",p=!i.default.isSet(t.isLoading)||t.isLoading;return this.create({iFrameId:e,width:B,height:I,postsHeight:F,screenMode:l,extensionMode:g,extensionWidth:Q,extensionHeight:U,threadScrollY:s,isOpenPosts:d,isOpenSetting:n,isOpenMenu:a,isOpenDetail:u,isOpenNewPost:C,isOpenNotif:V,isOpenPostsSupporter:b,isOpenBoard:G,isBubblePost:x,isDispPosts:o,isOpenLinks:Z,isTransition:R,menuComponent:L,openLockMenu:X,openInnerNotif:r,clicked:m,detailCh:y,inputPost:A,inputStampId:S,inputCurrentTime:W,inputSearch:h,isLoading:p})}static get openLockMenuLabelNo(){return"No"}static get openLockMenuLabelLike(){return"Like"}static get openLockMenuLabelShare(){return"Share"}static get openLockMenuLabelAbout(){return"About"}static get screenModeSmallLabel(){return"SMALL"}static get screenModeMiddleLabel(){return"MIDDLE"}static get screenModeLargeLabel(){return"LARGE"}static get screenModeIndexLabel(){return"MENU"}static get screenModeThreadLabel(){return"THREAD"}static get screenModeDetailLabel(){return"DETAIL"}static get screenModeSmallWidthPx(){return F.default.screenMode.small}static get screenModeMiddleWidthPx(){return F.default.screenMode.middle}static get extensionModeExtModalLabel(){return"Modal"}static get extensionModeExtBottomLabel(){return"Bottom"}static get extensionModeExtEmbedLabel(){return"Embed"}static get extensionModeExtNoneLabel(){return"None"}static get menuComponentUsersLabel(){return"Users"}static get menuComponentRankLabel(){return"Rank"}static get menuComponentLogsLabel(){return"Logs"}static get menuComponentSettingLabel(){return"Setting"}static getDefaultMenuComponent(){return c.menuComponentRankLabel}static getWidth(t){return t&&t.extensionWidth>0?t.extensionWidth:t&&t.width>0?t.width:"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return t&&t.extensionHeigt>0?t.extensionHeigt:t&&t.height>0?t.height:"object"==typeof window&&window.innerHeight?window.innerHeight:0}static getScreenMode(t=0){if(!t){if(window&&0===window.innerWidth||0===window.innerHeight)return;window&&window.innerWidth>0&&(t=window.innerWidth)}return"string"==typeof t&&(t=t.replace("px","")),c.screenModeSmallWidthPx>=t?c.screenModeSmallLabel:c.screenModeSmallWidthPx<=t&&c.screenModeMiddleWidthPx>=t?c.screenModeMiddleLabel:c.screenModeLargeLabel}static getIsOpenMenu(t){switch(t.screenMode){case c.screenModeSmallLabel:return!1;case c.screenModeMiddleLabel:case c.screenModeLargeLabel:return!0}}static getIsOpenBoard(t){switch(t.screenMode){case c.screenModeSmallLabel:return!1;case c.screenModeMiddleLabel:case c.screenModeLargeLabel:return!0}}static getIsOpenPosts(t,e=""){let{extensionMode:B,height:I,extensionHeight:i,extensionCloseHeight:F}=t;return B!==c.extensionModeExtBottomLabel&&B!==c.extensionModeExtModalLabel||("number"!=typeof I&&(I=Number(I)),"number"!=typeof i&&(i=Number(i)),0!==I&&i<=I)}static getUiUpdatedOpenFlgs({app:t,ui:e},B=""){switch(B){case"toggleMain":case"headerDetailIcon":switch(e.screenMode){case c.screenModeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenModeMiddleLabel:e.isOpenDetail?t.detailCh===t.rootCh?(e.isOpenDetail=!1,e.isOpenMenu=!0):(e.isOpenMenu=!1,e.isOpenDetail=!1):(e.isOpenMenu=!1,e.isOpenDetail=!0)}break;case"headerMenuIcon":switch(e.screenMode){case c.screenModeMiddleLabel:e.isOpenDetail,e.isOpenMenu=!0,e.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(e.screenMode){case c.screenModeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenModeMiddleLabel:e.isOpenMenu=!1,e.isOpenDetail=!0;case c.screenModeLargeLabel:e.isOpenMenu=!0,e.isOpenDetail=!0}}return e}}e.default=c},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1)),c=I(B(2));class l{constructor(t){return{self:l.getSelf(t),body:l.getBody(t),footer:l.getFooter(t),footerChild:l.getFooterChild(t),footerChildMoney:l.getFooterChildMoney(t)}}static get baseWidth(){return"300px"}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case c.default.extensionModeExtNoneLabel:case c.default.extensionModeExtEmbedLabel:return 0;default:switch(e.screenMode){case c.default.screenModeSmallLabel:return`0 0 ${F.default.radius} ${F.default.radius}`;case c.default.screenModeMiddleLabel:case c.default.screenModeLargeLabel:return"0px 0px 0px "+F.default.radius}}}static getWidth({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case c.default.screenModeSmallLabel:I="100.0%";break;case c.default.screenModeMiddleLabel:case c.default.screenModeLargeLabel:I=l.baseWidth}return B?i.default.trimUnit(I):I}static getHeight({app:t,ui:e},B=!1){return`calc( 100% - ${F.default.getBlockSize({app:t,ui:e})}px )`}static getTransform({app:t,ui:e}){let B="translate3d( 0px, 0px, 0px )";switch(e.screenMode){case c.default.screenModeSmallLabel:B=e.isOpenMenu?"translate3d( 0%, 0%, 0px )":"translate3d( -100% , 0%, 0px )";break;case c.default.screenModeMiddleLabel:e.isOpenDetail,B="translate3d( 0px ,0px, 0px )";break;case c.default.screenModeLargeLabel:B="translate3d( 0px ,0px, 0px )"}return B}static getSelf({app:t,ui:e}){e.extensionMode===c.default.extensionModeExtBottomLabel||F.default.silverRGBA;const B=i.default.getLayoutBlock({display:"block",position:"fixed",top:F.default.getBlockSize({app:t,ui:e})+"px",left:"0px",borderRadius:l.getBorderRadius({app:t,ui:e}),width:l.getWidth({app:t,ui:e}),minWidth:l.getWidth({app:t,ui:e}),height:l.getHeight({app:t,ui:e}),minHeight:"auto",maxHeight:"auto",margin:"0",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:10}),I=i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e}),transform:l.getTransform({app:t,ui:e})});return i.default.get({layout:B,content:{},animation:I})}static getBody({app:t,ui:e}){const B=e.extensionMode===c.default.extensionModeExtBottomLabel?"90%":"100%",I=e.extensionMode===c.default.extensionModeExtModalLabel?F.default.border:0,l=i.default.getLayoutBlock({borderLeft:I,width:B,minWidth:"inherit",maxWidth:"inherit",height:`calc( 100% - ${2*F.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),g=i.default.getAnimationBase();return i.default.get({layout:l,content:{},animation:g})}static getWrap({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:F.default.border}),I=i.default.getContentBase({textAlign:"left"}),c=i.default.getAnimationBase({});return i.default.get({layout:B,content:I,animation:c})}static getFooter({app:t,ui:e}){const B=(e.screenMode,c.default.screenModeSmallLabel,{border:F.default.border}),I=i.default.getLayoutFlex({width:"100%",background:F.default.offWhiteRGB,height:F.default.getBlockSize({app:t,ui:e})+"px",...B}),l=i.default.getContentBase({}),g=i.default.getAnimationBase();return i.default.get({layout:I,content:l,animation:g})}static getFooterChild({app:t,ui:e}){const B=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=i.default.getContentBase({fontSize:"0.5em"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getFooterChildMoney({app:t,ui:e}){const B=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=i.default.getContentBase({fontSize:"0.5em"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}}e.default=l},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class I{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==I.getType(t)&&"Null"!==I.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||("function() {}"===e||("function (){}"===e||("function () {}"===e||"()=>{}"===e)))}create(t){const e=this.constructor.name;I.getType(t);return Object.keys(t).forEach(B=>{let i,F,c=null,l=!1,g=!1,Q=()=>{},U=null;if("Object"===I.getType(t[B])){i=t[B];let e=0===Object.keys(i).length;l=i.isAcceptNull?i.isAcceptNull:l,g=i.isAcceptBlank?i.isAcceptBlank:g,c=!e&&i.def?i.def:c,U=e||!i.value&&""!==i.value?i:i.value,U=e&&c?c:U,F=I.getType(U),Q=i.valid?i.valid:Q}else U=t[B],c=U,l=l,g=g,F=I.getType(U),Q=Q;const s=t=>{let i=null;const c=`${e}.${B}`,s=U,d=F,n=t,a=I.getType(t);return a!==F&&(i=`SCHEMA_TYPE : ${c} [validType: ${F}][paramsType: ${a}]`),l&&null===t&&(i="SCHEMA_IS_ACCEPT_NULL :  "+c),g&&""===t&&(i="SCHEMA_IS_ACCEPT_BLANK :  "+c),"Function"===I.getType(Q)&&Q(t)&&(i="SCHEMA_YOUR_VALID_METHOD :  "+c),{pointer:c,validValue:s,validType:d,paramsValue:n,paramsType:a,error:i}},{pointer:d,validValue:n,validType:a,paramsValue:u,paramsType:C,error:V}=s(U);if(null===V)Object.defineProperty(this,B,{get:()=>U,set:t=>{const e=s(U);if(null===V)return U=t,{...this,[B]:U};throw this.validWarn(e),V},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw V;console.warn(V)}}),this}canSet(t,e){try{const B=this[t];if(void 0===B)return!0;if(null===B)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:I}=this[t]=e;return!I&&(this[t]=B,!0)}catch(B){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),"BAD CAN SET: "+B}}merge(t={},e=!0){try{const B=I.getType(t),i=Object.keys(t);if(i.length>0){let I={...this};return i.forEach(e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?I[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))}),"Array"===B?(I=Object.values(I),e?new this.constructor(I):I):e?new this.constructor(I):I}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${I.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${I.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach(B=>{let I=t[B];"Object"===I.constructor.name&&(I.type||I.default||(I=this.toJSON(I))),I.default||""===I.default||0===I.default?e[B]=I.default:e[B]=I}),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=I},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(3)),g=I(B(13)),Q=I(B(20)),U=I(B(10));class s{constructor(t){const{app:e,ui:B}=t,I={},i=s.getDetailClass({app:e,ui:B});return I["self"+s.detailRightSelfKey]=s.getDetailRightSelf(t),I["self"+s.detailModalSelfKey]=s.getDetailModalSelf(t),I.header=i.getHeader(t),I.headerP=i.getHeaderP(t),I.body=i.getBody(t),I.meta=i.getMeta(t),I.img=i.getImg(t),I.description=i.getDescription(t),I.metaContentTypeWrap=i.getMetaContentTypeWrap(t),I.metaContentType=i.getMetaContentType(t),I.ch=i.getCh(t),I.analyze=i.getAnalyze(t),I.analyzeRow=i.getAnalyzeRow(t),I.analyzeCol=i.getAnalyzeCol(t),I.analyzeLabel=i.getAnalyzeLabel(t),I.analyzeValue=i.getAnalyzeValue(t),I.analyzeHr=i.getAnalyzeHr(t),I.h1s=i.getH1s(t),I.h1sLi=i.getH1sLi(t),I.footer=i.getFooter(t),I.footerChild=i.getFooterChild(t),I.footerChildLike=i.getFooterChildLike(t),I.footerChildMoney=i.getFooterChildMoney(t),I.footerChildShare=i.getFooterChildShare(t),I.metaItems=i.getMetaItems(t),I.updateWrap=i.getUpdateWrap(t),I.update=i.getUpdate(t),I.space=i.getSpace(t),I}static get detailRightSelfKey(){return"Right"}static get detailModalSelfKey(){return"Modal"}static get screenModeOfRightDetail(){return i.default.screenModeLargeLabel}static get padding(){return 20}static get margin(){return 5}static getDetailClass({app:t,ui:e}){return s.isRightDetail({app:t,ui:e})?g.default:Q.default}static isRightDetail({app:t,ui:e}){return e.screenMode===s.screenModeOfRightDetail}static getDetailModalSelf({app:t,ui:e}){const B=i.default.getScreenMode(e.width),I=B===i.default.screenModeLargeLabel?"none":"block",g=B===i.default.screenModeSmallLabel?"0px":l.default.baseWidth,U=Q.default.getHeight({app:t,ui:e}),s={borderTop:c.default.border,borderRight:c.default.border,borderLeft:c.default.border},d=F.default.getLayoutBlock({display:I,position:"fixed",top:"100%",left:g,width:Q.default.getWidth({app:t,ui:e},!1),height:U,margin:Q.default.getMargin({app:t,ui:e}),...s,borderRadius:c.default.radiuses,WebkitOverflowScrolling:"touch",zIndex:9,boxShadow:""+c.default.lineShadow}),n=F.default.getContentBase(),a=F.default.getAnimationBase({transform:Q.default.getTransform({app:t,ui:e}),transition:c.default.getTransition({app:t,ui:e})});return F.default.get({layout:d,content:n,animation:a})}static getDetailRightSelf({app:t,ui:e}){const B=F.default.getLayoutBlock({position:"fixed",top:"0px",right:"0px",width:g.default.getWidth({app:t,ui:e}),minWidth:g.default.getWidth({app:t,ui:e}),height:`calc( 100% - ${c.default.getBlockSize({app:t,ui:e})}px )`,WebkitOverflowScrolling:"touch",overflow:"hidden",margin:c.default.getBlockSize({app:t,ui:e})+"px 0px 0px 0px",zIndex:0}),I=F.default.getContentBase(),i=F.default.getAnimationBase({transition:"0ms"});return F.default.get({layout:B,content:I,animation:i})}static getFooterBorders({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:return{borderTop:c.default.border};case i.default.screenModeLargeLabel:return{border:c.default.border}}}static getFooterPositions({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:return{};case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:return{position:"absolute",right:"0px",bottom:"0px"}}}static getWidth({app:t,ui:e},B=!1){let I="100%";switch(e.screenMode){case i.default.screenModeLargeLabel:I="30%"}return B?I:F.default.trimUnit(I)}static getTransform({app:t,ui:e}){return s.getDetailClass({app:t,ui:e}).getTransform({app:t,ui:e})}static getHeader({app:t,ui:e}){const B=F.default.getLayoutFlex({width:"100%",height:c.default.getBlockSize({app:t,ui:e})+"px",maxHeight:c.default.getBlockSize({app:t,ui:e})+"px",borderBottom:"1px solid "+c.default.borderRGB,background:c.default.whiteRGBA,padding:"0px 20px"}),I=F.default.getContentBase({fontSize:"1.2em"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getHeaderP({app:t,ui:e}){const B=F.default.getLayoutFlex({width:"100%",height:"100%",maxHeight:c.default.getBlockSize({app:t,ui:e})}),I=F.default.getContentBase({textOverflow:"ellipsis"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getBody({app:t,ui:e}){const B=F.default.getLayoutGrid({overflowX:"hidden",overflowY:"scroll",width:"100%",height:`calc( 100% - ${2*c.default.getBlockSize({app:t,ui:e})}px )`,zIndex:0}),I=F.default.getContentBase(),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getMeta({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"100%",height:"max-content",background:c.default.lightRGBA,borderBottom:c.default.border}),I=F.default.getContentBase(),i=F.default.getAnimationBase({transition:c.default.getTransition({app:t,ui:e})});return F.default.get({layout:B,content:I,animation:i})}static getImg({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"100%",height:"30vh",maxHeight:"400px",backgroundImage:`url(//${U.default.assetsImgPath}talkn_logo1.png)`,backgroundPosition:"center center",backgroundSize:"cover",backgroundRepeat:"no-repeat"}),I=F.default.getContentBase(),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getDescription({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"90%",height:"initial",margin:"7%"}),I=F.default.getContentBase({lineHeight:"2em",fontSize:"1.1em",textAlign:"left"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getMetaContentTypeWrap({app:t,ui:e}){const B=F.default.getLayoutFlex({flexDirection:"column",alignItems:"flex-end",width:"initial",height:"initial",borderRadius:"10px",margin:`${2*s.margin}% ${s.margin}%`}),I=F.default.getContentBase({textAlign:"right"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getMetaContentType({app:t,ui:e}){const B=F.default.getLayoutBlock({background:c.default.reliefRGB,width:"initial",height:"initial",margin:"10px 0px",padding:"10px 20px 10px 20px",justifyContent:"flex-end",borderRadius:"30px"}),I=F.default.getContentBase({color:c.default.whiteRGB,textAlign:"right"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getCh({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"100%",height:"max-content",background:c.default.lightRGBA,borderTop:c.default.border,borderBottom:c.default.border,padding:"15px"}),I=F.default.getContentBase({textAlign:"left",lineHeight:"30px",wordBreak:"break-word"}),i=F.default.getAnimationBase({transition:c.default.getTransition({app:t,ui:e})});return F.default.get({layout:B,content:I,animation:i})}static getAnalyze({app:t,ui:e}){const B=F.default.getLayoutTable({width:"100%",height:"initial",background:c.default.whiteRGB,borderTop:c.default.border,borderBottom:c.default.border}),I=F.default.getContentBase({textAlign:"center"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getAnalyzeRow({app:t,ui:e}){const B=F.default.getLayoutTableRow({}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getAnalyzeCol({app:t,ui:e}){const B=F.default.getLayoutTableCol({width:"33.3%",height:"120px",verticalAlign:"middle",margin:"40px auto 40px auto"}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getAnalyzeLabel({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"initial",height:"initial",marginBottom:"20px"}),I=F.default.getContentBase({lineHeight:"14px",fontSize:"0.8em"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getAnalyzeValue({app:t,ui:e}){const B=F.default.getLayoutBlock({margin:"0 auto",width:"initial",height:"initial"}),I=F.default.getContentBase({fontSize:"1.8em",color:c.default.themeRGBA}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getAnalyzeHr({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"70%",height:"initial",margin:"10px auto 10px auto",borderTop:"1px solid "+c.default.borderRGB}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getH1s({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"100%",height:"initial",margin:s.margin+"px auto",background:c.default.whiteRGB,borderTop:c.default.border,borderBottom:c.default.border}),I=F.default.getContentBase({textAlign:"left"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getH1sLi({app:t,ui:e}){const B=F.default.getLayoutBlock({width:"90%",height:"initial",margin:`5px ${s.margin}% 5px ${s.margin}%`}),I=F.default.getContentBase({lineHeight:2,textAlign:"left"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getFooter({app:t,ui:e}){const B=s.getFooterPositions({app:t,ui:e}),I=s.getFooterBorders({app:t,ui:e}),i=F.default.getLayoutFlex({width:"100%",background:c.default.lightRGBA,height:c.default.getBlockSize({app:t,ui:e}),boxShadow:c.default.lineShadow,"zÎndex":"1px",...B,...I}),l=F.default.getContentBase({fontSize:"0.7em"}),g=F.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px)"});return F.default.get({layout:i,content:l,animation:g})}static getFooterChild({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=F.default.getContentBase({cursor:"pointer"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getFooterChildLike({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getFooterChildMoney({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getFooterChildShare({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getMetaItems({app:t,ui:e}){const B=F.default.getLayoutFlex({width:"90%",margin:s.margin+"%"}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getUpdateWrap({app:t,ui:e}){const B=F.default.getLayoutFlex({justifyContent:"flex-end",alignItems:"flex-end",margin:"0px 0px 30px 0px"}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getUpdate({app:t,ui:e}){const B=F.default.getLayoutFlex({width:"160px",borderRadius:"30px",background:c.default.themeRGBA}),I=F.default.getContentBase({textIndent:"15px",cursor:"pointer",color:c.default.whiteRGB}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getSpace({app:t,ui:e}){const B=F.default.getLayoutFlex({width:"100%",height:"100px",background:c.default.silverRGBA}),I=F.default.getContentBase({}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}}e.default=s},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4)),F=I(B(17)),c=I(B(14)),l=I(B(2));class g extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=F.default.defaultFindId,this.offsetSingleFindId=F.default.defaultFindId,this.offsetMultiFindId=F.default.defaultFindId,this.offsetChildFindId=F.default.defaultFindId,this.offsetLogsFindId=F.default.defaultFindId;const B=t.ch?t.ch:"/",I=t.id?t.id:"",l=i.default.isSet(t.isMediaCh)?t.isMediaCh:g.getIsMediaCh(B),Q=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,U=t.rootCh?t.rootCh:B,s=i.default.isSet(t.isRootCh)?t.isRootCh:U===B,d=t.rootTitle?t.rootTitle:"talkn",n=g.getMediaSrc(t.protocol,B),a=g.getMediaType(n,t),u=t&&t.tuned?t.tuned:"",C=g.getDispThreadType(t,l),V=!i.default.isSet(t.multistream)||t.multistream,b=t&&t.findType?t.findType:c.default.findTypeAll,G=t&&t.offsetFindId?t.offsetFindId:g.defaultOffsetFindId,x=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:g.defaultOffsetFindId,o=t&&t.offsetSingleFindId?t.offsetSingleFindId:g.defaultOffsetFindId,Z=t&&t.offsetMultiFindId?t.offsetMultiFindId:g.defaultOffsetFindId,R=t&&t.offsetChildFindId?t.offsetChildFindId:g.defaultOffsetFindId,L=t&&t.offsetLogsFindId?t.offsetLogsFindId:g.defaultOffsetFindId,X=t.inputPost?t.inputPost:"",r=!!t.inputStampId&&t.inputStampId,m=t.inputCurrentTime?t.inputCurrentTime:0,y=t.inputSearch?t.inputSearch:"",A=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,S=t&&t.actioned?t.actioned:"",W=i.default.isSet(t.debug)?t.debug:"";return this.create({id:I,isRootCh:s,isLinkCh:Q,isMediaCh:l,rootCh:U,rootTitle:d,chType:a,dispThreadType:C,tuned:u,multistream:V,findType:b,offsetFindId:G,offsetTimelineFindId:x,offsetSingleFindId:o,offsetMultiFindId:Z,offsetChildFindId:R,offsetLogsFindId:L,inputPost:X,inputStampId:r,inputCurrentTime:m,inputSearch:y,isToggleMultistream:A,actioned:S,debug:W})}static get defaultOffsetFindId(){return F.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[g.mediaTypeMp3,g.mediaTypeMp4,g.mediaTypeM4a]}static get mediaChTagTypes(){return{[g.mediaTypeMp3]:g.mediaTagTypeAudio,[g.mediaTypeMp4]:g.mediaTagTypeVideo,[g.mediaTypeM4a]:g.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:g.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(g.mediaChTagTypes),B=e.length;let I="html";for(let i=0;i<B;i++){const B=new RegExp(`.${e[i]}$`);if(t.match(B)){I=g.mediaChTagTypes[e[i]];break}}return I}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return g.isAudioContentType(t)||g.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(g.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(g.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return g.mediaChs.some(e=>{const B=new RegExp(`.${e}/$|.${e}$`);return t.match(B)})}static isActiveMultistream({app:t,ui:e},B=""){return e.menuComponent===l.default.menuComponentRankLabel&&t.dispThreadType===g.dispThreadTypeMulti}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?g.dispThreadTypeTimeline:g.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:F.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},B,I,i=""){let F="";const c=t&&t.dispThreadType?t.dispThreadType:g.dispThreadTypeMulti;return F=(t=g.getStepDispThreadType({app:t,ranks:e},B,I,i)).dispThreadType,{app:t,stepTo:`${c} to ${F}`}}static getStepDispThreadType({app:t,ranks:e},B={},I,i){const F=t||{};if(F.offsetFindId=g.defaultOffsetFindId,B.isMediaCh)return F.dispThreadType=g.dispThreadTypeTimeline,F.offsetFindId=F.offsetTimelineFindId?F.offsetTimelineFindId:g.defaultOffsetFindId,F.isLinkCh="Links"===i||"findMediaCh"===i||"ToMedia"===i,F.isMediaCh=!0,F;if("BackToRootCh"===i&&(F.isLinkCh=!1),"Links"===i&&e.length>0){const t=e.some(t=>t.ch===I||t.ch===I+"/");if(!t)return F.offsetFindId=g.defaultOffsetFindId,F.dispThreadType=g.dispThreadTypeChild,F.isLinkCh=!0,F}return F.rootCh===I?F.multistream?F.dispThreadType=g.dispThreadTypeMulti:F.dispThreadType=g.dispThreadTypeSingle:F.dispThreadType=g.dispThreadTypeChild,F}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(11)),F=I(B(52)),c=I(B(16)),{PRODUCTION:l,DEVELOPMENT:g,PRODUCTION_DOMAIN:Q,DEVELOPMENT_DOMAIN:U,SUB_DOMAINS:s,PORTS:d}=i.default,n=F.default.hostname(),a=function(t){if("browser"===c.default.title){if(t===i.default.DEVELOPMENT_DOMAIN){const t=Number(location.port);return t===i.default.PORTS.DEVELOPMENT||t===i.default.PORTS.DEVELOPMENT_API?i.default.DEVELOPMENT:i.default.LOCALHOST}return i.default.PRODUCTION}return t.indexOf(i.default.AWS_HOST_KEY)>=0?i.default.PRODUCTION:i.default.DEVELOPMENT}(n),u={client:"talkn.client.js",api:"talkn.api.js",ext:"talkn.ext.js"},C=a===g,V=a===l?Q:U,b=`${s.WWW}.${V}`,G=`${s.API}.${V}`,x=C?`${V}:${d.DEVELOPMENT_API}/${u.api}`:G+"/v1",o=C?`${V}:${d.DEVELOPMENT}/${u.client}`:`${s.CLIENT}.${V}`,Z=`${s.DESC}.${V}`,R=`${s.PORTAL}.${V}`,L=`${s.ASSETS}.${V}`,X=L+"/img/",r={domain:V,env:a,files:u,hostName:n,apiURL:G,apiAccessURL:x,wwwURL:b,descURL:Z,portalURL:R,clientURL:o,assetsURL:L,autoURL:`${s.AUTO}.${V}`,extURL:`${s.EXT}.${V}`,ownURL:`${s.OWN}.${V}`,transactionURL:`${s.TRANSACTION}.${V}`,assetsImgPath:X,assetsIconPath:L+"/icon/",assetsJsPath:L+"/js/",sessionURL:`${s.SESSION}.${V}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${X}talkn_logo_html.png`,Music:`//${X}talkn_logo_music.png`,Video:`//${X}talkn_logo_video.png`}};e.default={...r}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(6)),F=I(B(59)),c=I(B(18)),l=I(B(19)),g=I(B(28));class Q{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:B,postsMulti:I,postsSingle:F,postsChild:c,postsLogs:l}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return B;case i.default.dispThreadTypeMulti:return I;case i.default.dispThreadTypeSingle:return F;case i.default.dispThreadTypeChild:return c;case i.default.dispThreadTypeLogs:return l}}static getAnyActionPosts(t,e){const{app:B,posts:I}=t,c=I&&I.length>0;switch(t.postsMulti=new F.default,t.postsSingle=new g.default,t.postsChild=[],t.postsLogs=[],B.dispThreadType){case i.default.dispThreadTypeTimeline:t=Q.getAnyActionPostsTimeline(t,I,e,c);break;case i.default.dispThreadTypeMulti:t.postsMulti=c?I:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=c?I:[];break;case i.default.dispThreadTypeChild:t.postsChild=c?I:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=c?I:[]}return t}static getAnyActionPostsTimeline(t,e,B,I){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new c.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new c.default,t.postsTimelineStock=new l.default,I)){const B=e.length;for(let I=0;I<B;I++)0===e[I].currentTime?t.postsTimeline.push(e[I]):t.postsTimelineStock.push(e[I])}return t}}e.default=Q},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(6)),F=I(B(2)),c=I(B(0)),l=I(B(1)),g=I(B(3)),Q=I(B(5)),U=I(B(21));class s{constructor(t){return{self:s.getSelf(t),ol:s.getOl(t),more:s.getMore(t)}}static getSelfDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getMinWidth({app:t,ui:e},B=!1){return B?c.default.trimUnit("200px"):"200px"}static getOlWidth({app:t,ui:e},B=!1){const I=e.extensionMode===F.default.extensionModeExtBottomLabel?"90%":"100%";return B?c.default.trimUnit(I):I}static getWidth({app:t,ui:e},B=!1){let I="100%";if(e.extensionMode===F.default.extensionModeExtBottomLabel)I="90%";else switch(e.screenMode){case F.default.screenModeSmallLabel:return"100%";case F.default.screenModeMiddleLabel:return`calc(100% - ${g.default.getWidth({app:t,ui:e},!1)})`;case F.default.screenModeLargeLabel:I=`calc( ${100-Q.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!1)} )`}return B?c.default.trimUnit(I):I}static closeIndexTransform({app:t,ui:e}){switch(e.screenMode){case F.default.screenModeSmallLabel:return`translate3d( -${e.width}px, 0px, 0px)`;case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:return`translate3d( -${g.default.getWidth({app:t,ui:e})}px, 0px, 0px)`}}static openIndexTransform(t){return"translate3d( 0px, 0px, 0px)"}static get headerHeight(){return 35}static getBorders({app:t,ui:e}){let B={borderTop:"0",borderRight:"0",borderBottom:"0",borderLeft:"0"};switch(e.screenMode){case F.default.screenModeSmallLabel:B.borderRight=l.default.border,B.borderLeft=l.default.border;break;case F.default.screenModeMiddleLabel:B.borderRight=l.default.border;break;case F.default.screenModeLargeLabel:}return B}static getMargin({app:t,ui:e},B=!1){let I="0";if(e.extensionMode===F.default.extensionModeExtNoneLabel)switch(e.screenMode){case F.default.screenModeSmallLabel:I="0";break;case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:I="0 0 0 "+g.default.getWidth({app:t,ui:e})}else switch(e.screenMode){case F.default.screenModeSmallLabel:I="0";break;case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:I="0 0 0 "+g.default.getWidth({app:t,ui:e})}return I}static getPadding({app:t,ui:e}){const B=l.default.getBlockSize({app:t,ui:e});let I="0";if(t.isMediaCh)I=`${2.3*B}px 0 ${B}px 0`;else if(e.extensionMode===F.default.extensionModeExtNoneLabel)switch(e.screenMode){case F.default.screenModeSmallLabel:case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:I=`${B}px 0 ${B}px 0`}else switch(e.screenMode){case F.default.screenModeSmallLabel:I=`${B}px 0 ${B}px 0`;break;case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:I=`${B}px 0 ${B}px 0`}return I}static getSelfTransform({app:t,ui:e}){return e.extensionMode===F.default.extensionModeExtBottomLabel?e.isDispPosts?"translate3d(0px, 0px, 0px)":`translate3d(0px, calc( 100% + ${l.default.getBlockSize({app:t,ui:e})}px ), 0px)`:"translate3d(0px, 0px, 0px)"}static getSelfHeight({app:t,ui:e}){switch(e.screenMode){case F.default.screenModeLargeLabel:return t.chType===i.default.mediaTagTypeVideo?`calc( 100% - ${l.default.getBlockSize({app:t,ui:e})+l.default.getBlockSize({app:t,ui:e})+U.default.height}px )`:"100vh";case F.default.screenModeSmallLabel:return"100vh"}}static getSelfMinHeight({app:t,ui:e}){return e.extensionMode!==F.default.extensionModeExtNoneLabel?"430px":e.screenMode===F.default.screenModeLargeLabel?`calc( 100% - ${l.default.getBlockSize({app:t,ui:e})+l.default.getBlockSize({app:t,ui:e})}px )`:"auto"}static getSelfTop({app:t,ui:e}){return e.extensionMode===F.default.extensionModeExtNoneLabel&&t.chType===i.default.mediaTagTypeVideo?l.default.getBlockSize({app:t,ui:e})+U.default.height+"px":"0"}static getSelfLeft({app:t,ui:e}){return"0"}static getSelfBoxShadow({app:t,ui:e}){let B="0px 0px 0px rgba(255,255,255)";if(e.extensionMode===F.default.extensionModeExtNoneLabel)return B;switch(e.screenMode){case F.default.screenModeSmallLabel:return l.default.lineInsetShadow;case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:return B}return B}static getSelf({app:t,ui:e}){let B="absolute",I="hidden",i="hidden",g=s.getBorders({app:t,ui:e}),Q=l.default.whiteRGBA;const U=s.getSelfBoxShadow({app:t,ui:e});e.screenMode===F.default.screenModeLargeLabel?(B="fixed",I="hidden",i="scroll"):e.screenMode===F.default.screenModeSmallLabel&&(I="hidden",i="scroll");const d=c.default.getLayoutBlock({position:"absolute",top:s.getSelfTop({app:t,ui:e}),left:s.getSelfLeft({app:t,ui:e}),width:s.getWidth({app:t,ui:e}),minWidth:s.getMinWidth({app:t,ui:e}),height:s.getSelfHeight({app:t,ui:e}),minHeight:"100vh",maxHeight:"auto",margin:s.getMargin({app:t,ui:e}),padding:s.getPadding({app:t,ui:e}),background:Q,overflowScrolling:"touch",WebkitOverflowScrolling:"touch",boxShadow:U,overflowX:I,overflowY:i,...g}),n=c.default.getAnimationBase({});return c.default.get({layout:d,content:{},animation:n})}static getOl({app:t,ui:e}){let B="100%",I="0",i="0",g="0";e.extensionMode===F.default.extensionModeExtBottomLabel&&(B=s.getOlWidth({app:t,ui:e}),I="0px 0px 0px 5%",i=l.default.border,g=l.default.border);const Q=c.default.getLayoutBlock({width:B,margin:I,height:"100vh",borderRight:i,borderLeft:g}),U=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:Q,content:{},animation:U})}static getMore({app:t,ui:e}){const B=e.isBubblePost?l.default.themeRGBA:l.default.reliefRGBA,I=e.isBubblePost?"15px auto":"10px auto",i=c.default.getLayoutFlex({width:"50%",height:l.default.notifHeight,margin:I,alignItems:"center",justifyContent:"center",zIndex:"10",background:B,borderRadius:"20px"}),F=c.default.getContentBase({color:l.default.whiteRGB,cursor:"pointer"}),g=c.default.getAnimationBase();return c.default.get({layout:i,content:F,animation:g})}}e.default=s},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(16)),F=I(B(11)),c=I(B(7));if("browser"===i.default.title){const{SUB_DOMAINS:t,DEVELOPMENT:e}=F.default,{env:B,domain:I}=c.default;c.default.mediaSecondInterval=200,c.default.screenMode={small:600,middle:960},c.default.defaultFavicon=`//${t.ASSETS}.${I}/favicon.ico`,c.default.portalPath=`//${t.PORTAL}.${I}/`,c.default.clientPath=`//${t.CLIENT}.${I}/`,c.default.assetsPath=`//${t.ASSETS}.${I}/`,c.default.sessionPath=`//${t.SESSION}.${I}/`,c.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"}}e.default=c.default},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(16)),F={PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4));class F{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${F.API_REQUEST_TYPE}]${F.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${F.API_RESPONSE_TYPE_EMIT}]${F.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${F.API_RESPONSE_TYPE_BROADCAST}]${F.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${F.API_REQUEST_TYPE}]${F.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${F.API_RESPONSE_TYPE_EMIT}]${F.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${F.API_RESPONSE_TYPE_BROADCAST}]${F.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:["requestLoginType"]},requestPrivateState:{user:["uid","href"]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(F.METHOD_COLON),B=e[0].split("[")[0];let I;return I=e[0].indexOf(`[${F.API_REQUEST_TYPE}]`)>0?F.API_REQUEST_TYPE:e[0].indexOf(`[${F.API_RESPONSE_TYPE_EMIT}]`)>0?F.API_RESPONSE_TYPE_EMIT:F.API_RESPONSE_TYPE_BROADCAST,{sequence:B,actionType:I,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return F.map[t]&&(e.emit=!(Object.keys(F.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(F.map[t].responseBroadcastState).length>0)),e}static convertExtToClientActionType(t,e){return e=F.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(F.API_TO_SERVER_REQUEST)?t.replace(F.API_TO_SERVER_REQUEST,F.API_TO_CLIENT_REQUEST):0===t.indexOf(F.SERVER_TO_API_EMIT)?t.replace(F.SERVER_TO_API_EMIT,F.API_TO_CLIENT_EMIT):0===t.indexOf(F.SERVER_TO_API_BROADCAST)?t.replace(F.SERVER_TO_API_BROADCAST,F.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,B){const I=t.replace(F.API_TO_SERVER_REQUEST,""),{requestPublicState:c,requestPrivateState:l}=F.map[I];let g={[F.REDUX_ACTION_KEY]:I};return Object.keys(l).forEach(t=>{g[t]||(g[t]={}),l[t].forEach(I=>{if(!g[t][I]){let F=e[t][I];B&&B[t]&&i.default.isSet(B[t][I])&&(F=B[t][I]),g[t][I]=F}})}),Object.keys(c).forEach(t=>{g[t]||(g[t]={}),c[t].forEach(e=>{g[t][e]||(g[t][e]=B)})}),g}static getResponseState(t,e,B){const I=e.type,i=F.map[I][`response${t}State`];let c={[F.REDUX_ACTION_KEY]:I};return Object.keys(i).forEach(t=>{if(!B[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const I=i[t];let F=B[t];switch(F.constructor.name){case"model":F=F.toJSON(),delete F._id,delete F.__v}"*"===I?c={...c,[t]:F}:I.forEach(I=>{if(void 0===B[t][I])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${I}`;c={...c,[t]:{...c[t],[I]:B[t][I]}}})}}),c}static getRequestActionState(t,e=null,B=null){return"string"==typeof e&&null===B?{type:t}:"object"==typeof e&&"object"==typeof B?{...e,...B,type:t}:"string"==typeof e&&"object"==typeof B?{...B,type:t}:{...e,type:t}}}e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(5));class l{static get widthDecimalRate(){return.3}static get widthRate(){return 100*l.widthDecimalRate}static get otherWidthDecimalRate(){return 1-l.widthDecimalRate}static get otherWidthRate(){return 100*l.otherWidthDecimalRate}static getWidth({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:I="0%";break;case i.default.screenModeLargeLabel:I="30%"}return B?F.default.trimUnit(I):I}static getMinWidth({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case i.default.screenModeSmallLabel:I="0%";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:I="320px"}return B?F.default.trimUnit(I):I}static getTransform({app:t,ui:e}){let B=l.closeSelfTransform;switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:B=l.closeSelfTransform;break;case i.default.screenModeLargeLabel:B="translate3d(0px, 0px, 0px)"}return B}static get closeSelfTransform(){return`translate3d(0%, calc( 100% + ${2*c.default.padding}px ), 0px)`}static get openSelfTransform(){return"translate3d(0%, 0%, 0px)"}static getHeader(t){return c.default.getHeader(t)}static getHeaderP(t){return c.default.getHeaderP(t)}static getBody(t){return c.default.getBody(t)}static getMeta(t){return c.default.getMeta(t)}static getImg(t){return c.default.getImg(t)}static getDescription(t){return c.default.getDescription(t)}static getMetaContentTypeWrap(t){return c.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return c.default.getMetaContentType(t)}static getCh(t){return c.default.getCh(t)}static getAnalyze(t){return c.default.getAnalyze(t)}static getAnalyzeRow(t){return c.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return c.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return c.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return c.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return c.default.getAnalyzeHr(t)}static getH1s(t){return c.default.getH1s(t)}static getH1sLi(t){return c.default.getH1sLi(t)}static getFooter(t){return c.default.getFooter(t)}static getFooterChild(t){return c.default.getFooterChild(t)}static getFooterChildLike(t){return c.default.getFooterChildLike(t)}static getFooterChildMoney(t){return c.default.getFooterChildMoney(t)}static getFooterChildShare(t){return c.default.getFooterChildShare(t)}static getMetaItems(t){return c.default.getMetaItems(t)}static getUpdateWrap(t){return c.default.getUpdateWrap(t)}static getUpdate(t){return c.default.getUpdate(t)}static getSpace(t){return c.default.getSpace(t)}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(7)),F=I(B(12)),c=I(B(4)),l=I(B(6));class g extends c.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=F.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=g.getDefaultFavicon(),this.findType=g.findTypeAll,this.title=g.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=g.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const B=g.isWindowObj(t)?g.constructorFromWindow(t,e):t;return this.create(B)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[g.findTypeHtml]:["text/html"],[g.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[g.findTypeVideo]:["video","video/mpeg","video/mp4","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const B=!!e.ch&&e.ch,I=g.getCh(e,B);let i={};return i.ch=I,i.chs=["/"],i.hasSlash=!!e.hasslash&&c.default.getBool(e.hasslash),i.protocol="talkn:",i.contentType="",i.charset="UTF-8",i.host="",i.favicon=g.getDefaultFavicon(),i.findType=g.findTypeAll,B?(i.protocol=g.getProtocol(B),i.host=g.getHost(B),i.chs=B.chs&&B.chs.length>0?B.chs:g.getChs(I)):(i.protocol=location.protocol?location.protocol:"????:",i.chs=t.chs&&t.chs.length>0?t.chs:g.getChs(I),i.contentType=document.contentType?document.contentType:"",i.charset=document.charset?document.charset:"",i.host=location.host?location.host:"",i.favicon=g.getFaviconFromWindow(window)),i.title=g.getDefaultTitle(),i.metas=[],i.serverMetas={},i.clientMetas={},i.emotions={},i.links=[],i.h1s=[],i.audios=[],i.videos=[],i.layer=g.getLayer(i.ch),i.mediaIndex=[],i.postCnt=0,i.multiPostCnt=0,i.isSelfCh=g.getIsSelfCh("",i.ch),i.createTime="",i.updateTime="",i}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const I="/"===t.slice(-1)?t:t+"/";if("/"!==I){const t=I.split("/"),i=t.length;let F="";for(var B=1;B<i;B++)""!==t[B]&&(F+=t[B],F="/"===F.slice(-1)?F:F+"/",F="/"===F.slice(0,1)?F:"/"+F,e.push(F))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):i.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return l.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=g.getMediaSrc(t);return l.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,B="http://",I="https://",i=location.host;if(e.indexOf(B)||e.indexOf(I)){const t=B+i+(e||"/favicon.ico");return 1===t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,B,I={}){let i={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return i.isCreate=g.getStatusCreate(B),i.isRequireUpsert=g.getStatusIsRequireUpsert(t,I,i.isCreate),i.isMultistream=g.getStatusIsMultistream(e),i.isToggleMultistream=g.getStatusIsToggleMultistream(e),i.isMediaCh=g.getStatusIsMediaCh(t.ch),i}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,B=!1){if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,I=new Date,F=I.getFullYear(),c=I.getMonth(),l=I.getDate(),g=I.getHours(),Q=(I.getMinutes(),new Date(F,c,l,g-i.default.findOneThreadActiveHour).getTime());return!!B||e<Q}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===l.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return l.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=g.findTypes[g.findTypeHtml],B=g.findTypes[g.findTypeMusic],I=g.findTypes[g.findTypeVideo];let i;if(t&&""!==t){let F="";t.indexOf(";")>0&&(F=t.split(";")[0]),e.includes(F)&&(i=g.findTypeHtml),B.includes(F)&&(i=g.findTypeMusic),I.includes(F)&&(i=g.findTypeVideo)}return i}static getFindTypeFromSrc(t){const e=l.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=g},function(t,e,B){"use strict";B.r(e),B.d(e,"__DO_NOT_USE__ActionTypes",(function(){return F})),B.d(e,"applyMiddleware",(function(){return C})),B.d(e,"bindActionCreators",(function(){return s})),B.d(e,"combineReducers",(function(){return Q})),B.d(e,"compose",(function(){return u})),B.d(e,"createStore",(function(){return l}));var I=B(25),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},F={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function c(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,B){var i;if("function"==typeof e&&"function"==typeof B||"function"==typeof B&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===B&&(B=e,e=void 0),void 0!==B){if("function"!=typeof B)throw new Error("Expected the enhancer to be a function.");return B(l)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var g=t,Q=e,U=[],s=U,d=!1;function n(){s===U&&(s=U.slice())}function a(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return Q}function u(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return n(),s.push(t),function(){if(e){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,n();var B=s.indexOf(t);s.splice(B,1),U=null}}}function C(t){if(!c(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,Q=g(Q,t)}finally{d=!1}for(var e=U=s,B=0;B<e.length;B++){(0,e[B])()}return t}function V(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");g=t,C({type:F.REPLACE})}function b(){var t,e=u;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function B(){t.next&&t.next(a())}return B(),{unsubscribe:e(B)}}})[I.a]=function(){return this},t}return C({type:F.INIT}),(i={dispatch:C,subscribe:u,getState:a,replaceReducer:V})[I.a]=b,i}function g(t,e){var B=e&&e.type;return"Given "+(B&&'action "'+String(B)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function Q(t){for(var e=Object.keys(t),B={},I=0;I<e.length;I++){var i=e[I];0,"function"==typeof t[i]&&(B[i]=t[i])}var c,l=Object.keys(B);try{!function(t){Object.keys(t).forEach((function(e){var B=t[e];if(void 0===B(void 0,{type:F.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===B(void 0,{type:F.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+F.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(B)}catch(t){c=t}return function(t,e){if(void 0===t&&(t={}),c)throw c;for(var I=!1,i={},F=0;F<l.length;F++){var Q=l[F],U=B[Q],s=t[Q],d=U(s,e);if(void 0===d){var n=g(Q,e);throw new Error(n)}i[Q]=d,I=I||d!==s}return(I=I||l.length!==Object.keys(t).length)?i:t}}function U(t,e){return function(){return e(t.apply(this,arguments))}}function s(t,e){if("function"==typeof t)return U(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var B={};for(var I in t){var i=t[I];"function"==typeof i&&(B[I]=U(i,e))}return B}function d(t,e,B){return e in t?Object.defineProperty(t,e,{value:B,enumerable:!0,configurable:!0,writable:!0}):t[e]=B,t}function n(t,e){var B=Object.keys(t);return Object.getOwnPropertySymbols&&B.push.apply(B,Object.getOwnPropertySymbols(t)),e&&(B=B.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),B}function a(t){for(var e=1;e<arguments.length;e++){var B=null!=arguments[e]?arguments[e]:{};e%2?n(B,!0).forEach((function(e){d(t,e,B[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(B)):n(B).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(B,e))}))}return t}function u(){for(var t=arguments.length,e=new Array(t),B=0;B<t;B++)e[B]=arguments[B];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),B=0;B<t;B++)e[B]=arguments[B];return function(t){return function(){var B=t.apply(void 0,arguments),I=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:B.getState,dispatch:function(){return I.apply(void 0,arguments)}},F=e.map((function(t){return t(i)}));return a({},B,{dispatch:I=u.apply(void 0,F)(B.dispatch)})}}}},function(t,e){var B,I,i=t.exports={};function F(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function l(t){if(B===setTimeout)return setTimeout(t,0);if((B===F||!B)&&setTimeout)return B=setTimeout,setTimeout(t,0);try{return B(t,0)}catch(e){try{return B.call(null,t,0)}catch(e){return B.call(this,t,0)}}}!function(){try{B="function"==typeof setTimeout?setTimeout:F}catch(t){B=F}try{I="function"==typeof clearTimeout?clearTimeout:c}catch(t){I=c}}();var g,Q=[],U=!1,s=-1;function d(){U&&g&&(U=!1,g.length?Q=g.concat(Q):s=-1,Q.length&&n())}function n(){if(!U){var t=l(d);U=!0;for(var e=Q.length;e;){for(g=Q,Q=[];++s<e;)g&&g[s].run();s=-1,e=Q.length}g=null,U=!1,function(t){if(I===clearTimeout)return clearTimeout(t);if((I===c||!I)&&clearTimeout)return I=clearTimeout,clearTimeout(t);try{I(t)}catch(e){try{return I.call(null,t)}catch(e){return I.call(this,t)}}}(t)}}function a(t,e){this.fun=t,this.array=e}function u(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var B=1;B<arguments.length;B++)e[B-1]=arguments[B];Q.push(new a(t,e)),1!==Q.length||U||l(n)},a.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=u,i.addListener=u,i.once=u,i.off=u,i.removeListener=u,i.removeAllListeners=u,i.emit=u,i.prependListener=u,i.prependOnceListener=u,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(10)),F=I(B(4));class c extends F.default{constructor(t){super(),this.ch=c.defaultValues.ch,this.chs=c.defaultValues.chs,this.favicon=c.defaultValues.favicon,this.findType=c.defaultValues.findType,this.layer=c.defaultValues.layer,this.post=c.defaultValues.post,this.protocol=c.defaultValues.protocol,this.stampId=c.defaultValues.stampId,this.title=c.defaultValues.title,this.liveCnt=c.defaultValues.liveCnt,this.uid=c.defaultValues.uid,this.utype=c.defaultValues.utype,this.dispFlg=c.defaultValues.dispFlg,this.data=c.defaultValues.data,this.createTime=c.defaultValues.createTime,this.currentTime=c.defaultValues.currentTime,this.updateTime=c.defaultValues.updateTime;const e=t?{...c.defaultValues,...t}:c.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:i.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=c},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1)),c=I(B(2)),l=I(B(9)),g=I(B(5)),Q=I(B(3));class U{static getWidth({app:t,ui:e},B=!1){const I=e.screenMode===c.default.screenModeSmallLabel?String(Math.floor(e.width*F.default.widthRatio))+"px":`calc( ${100*F.default.widthRatio}% - ${Q.default.getWidth({app:t,ui:e})} )`;return B?i.default.trimUnit(I):I}static getBaseMarginRate({app:t,ui:e},B=!1){return Math.floor((1-F.default.widthRatio)/2*100)}static getBaseMargin({app:t,ui:e},B=!1){return l.default.getWidth({app:t,ui:e},!0)*(U.getBaseMarginRate({app:t,ui:e})/100)}static getMargin({app:t,ui:e},B=!1){if(e.extensionMode===c.default.extensionModeExtBottomLabel)return"0% 8%";switch(e.screenMode){case c.default.screenModeSmallLabel:case c.default.screenModeMiddleLabel:case c.default.screenModeLargeLabel:const B=U.getBaseMarginRate({app:t,ui:e});return`0% ${B}% 0% ${B}%`}}static getHeight({app:t,ui:e},B=!1){const I=U.getBaseMarginRate({app:t,ui:e}),i=F.default.getBlockSize({app:t,ui:e});switch(e.screenMode){case c.default.screenModeSmallLabel:case c.default.screenModeMiddleLabel:return`calc( ${100-I}% - ${2*i}px )`;case c.default.screenModeLargeLabel:return`calc( 100% - ${2*i+U.getBaseMargin({app:t,ui:e})}px )`}}static getTransform({app:t,ui:e}){return e.isOpenDetail?U.getOpenSelfTransform({app:t,ui:e}):U.getCloseSelfTransform({app:t,ui:e})}static getCloseSelfTransform({app:t,ui:e}){return"translate3d(0%, 0px, 0px)"}static getOpenSelfTransform({app:t,ui:e}){return`translate3d(0%, calc( -100% - ${F.default.getBlockSize({app:t,ui:e})}px ), 0px)`}static getHeader(t){return g.default.getHeader(t)}static getHeaderP(t){return g.default.getHeaderP(t)}static getBody(t){return g.default.getBody(t)}static getMeta(t){return g.default.getMeta(t)}static getImg(t){return g.default.getImg(t)}static getDescription(t){return g.default.getDescription(t)}static getMetaContentTypeWrap(t){return g.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return g.default.getMetaContentType(t)}static getCh(t){return g.default.getCh(t)}static getAnalyze(t){return g.default.getAnalyze(t)}static getAnalyzeRow(t){return g.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return g.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return g.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return g.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return g.default.getAnalyzeHr(t)}static getH1s(t){return g.default.getH1s(t)}static getH1sLi(t){return g.default.getH1sLi(t)}static getFooter(t){return g.default.getFooter(t)}static getFooterChild(t){return g.default.getFooterChild(t)}static getFooterChildLike(t){return g.default.getFooterChildLike(t)}static getFooterChildMoney(t){return g.default.getFooterChildMoney(t)}static getFooterChildShare(t){return g.default.getFooterChildShare(t)}static getMetaItems(t){return g.default.getMetaItems(t)}static getUpdateWrap(t){return g.default.getUpdateWrap(t)}static getUpdate(t){return g.default.getUpdate(t)}static getSpace(t){return g.default.getSpace(t)}}e.default=U},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(5)),l=I(B(3)),g=I(B(1));class Q{constructor(t){return{self:Q.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 0}static get marginRightMag(){return 0}static get marginLeft(){return Q.marginBase*Q.marginLeftMag}static get marginRight(){return Q.marginBase*Q.marginRightMag}static get height(){return 260}static getSelfWidth({app:t,ui:e}){let B="0";const I=Q.marginLeftMag+Q.marginRightMag;switch(e.screenMode){case i.default.screenModeSmallLabel:B=100-I+"%";break;case i.default.screenModeMiddleLabel:B=`calc( ${100-I}% - ${l.default.getWidth({app:t,ui:e},!0)}px )`;break;case i.default.screenModeLargeLabel:B=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)-I}% - ${l.default.getWidth({app:t,ui:e},!0)+I}px )`}return B}static getSelfLeft({app:t,ui:e}){let B="0px";switch(e.screenMode){case i.default.screenModeSmallLabel:B="0px";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:B=l.default.getWidth({app:t,ui:e},!0)}return B}static getSelf({app:t,ui:e}){const B=t.isMediaCh?"block":"none",I=Q.getSelfWidth({app:t,ui:e}),i=Q.getSelfLeft({app:t,ui:e}),c=F.default.getLayoutBlock({display:B,position:"fixed",background:"black",top:g.default.getBlockSize({app:t,ui:e})+"px",left:i,margin:`0px ${Q.marginRightMag}% 0px ${Q.marginLeftMag}%`,width:I,zIndex:1,height:Q.height+"px",outline:"none"});return F.default.get({layout:c,content:{},animation:{}})}}e.default=Q},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(10)),F=I(B(2)),c=I(B(0)),l=I(B(1)),g=I(B(9)),Q=I(B(3));class U{constructor(t){return{self:U.getSelf(t),icon:U.getIcon(t),textarea:U.getTextarea(t),modalTextarea:U.getModalTextarea(t),button:U.getButton(t),upper:U.getUpper(t),bottom:U.getBottom(t)}}static getWidth({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case F.default.screenModeSmallLabel:I="100%";break;case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:I=g.default.getWidth({app:t,ui:e})}return B?c.default.trimUnit(I):I}static getLeft({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case F.default.screenModeSmallLabel:I="0px";break;case F.default.screenModeMiddleLabel:I=""+Q.default.getWidth({app:t,ui:e});break;case F.default.screenModeLargeLabel:I=Q.default.getWidth({app:t,ui:e})}return B?c.default.trimUnit(I):I}static getBorder({app:t,ui:e},B=!1){switch(e.extensionMode){case F.default.extensionModeExtBottomLabel:return{borderTop:l.default.border,borderRight:l.default.border,borderLeft:l.default.border};case F.default.extensionModeExtModalLabel:switch(e.screenMode){case F.default.screenModeSmallLabel:return{border:l.default.border};case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:return{borderTop:l.default.border,borderBottom:l.default.border}}default:return{borderTop:l.default.border,borderBottom:l.default.border}}}static getBorderRadius({app:t,ui:e},B=!1){if(e.extensionMode===F.default.extensionModeExtBottomLabel)return"100%"===e.extensionWidth?"0px 0px 0px 0px":`${l.default.radius} ${l.default.radius} 0px 0px`;if(e.extensionMode===F.default.extensionModeExtModalLabel)switch(e.screenMode){case F.default.screenModeSmallLabel:return`0px 0px ${l.default.radius} ${l.default.radius}`;case F.default.screenModeMiddleLabel:return`0px 0px ${l.default.radius} 0px`;case F.default.screenModeLargeLabel:return 0}return 0}static getTransform({app:t,ui:e}){let B="translate3d( 0px, 0px, 0px )";switch(e.screenMode){case F.default.screenModeSmallLabel:B=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case F.default.screenModeMiddleLabel:e.isOpenDetail,B="translate3d( 0px ,0px, 0px )";break;case F.default.screenModeLargeLabel:B="translate3d( 0px ,0px, 0px )"}return B}static getSelf({app:t,ui:e}){const B=U.getBorder({app:t,ui:e}),I=U.getBorderRadius({app:t,ui:e}),i=c.default.getLayoutFlex({position:"fixed",bottom:0,left:U.getLeft({app:t,ui:e}),flexGrow:1,height:l.default.getBlockSize({app:t,ui:e}),width:U.getWidth({app:t,ui:e}),maxWidth:U.getWidth({app:t,ui:e}),background:l.default.lightRGBA,justifyContent:"flex-start",boxShadow:"-1px 0px 1px "+l.default.lineShadowColor,borderRadius:I,...B,zIndex:10}),F=c.default.getAnimationBase({transform:U.getTransform({app:t,ui:e})});return c.default.get({layout:i,content:{},animation:F})}static getIcon({app:t,ui:e}){const B=c.default.getLayoutInlineBlock({width:"20%",maxWidth:"20%",height:"70%",backgroundImage:"url()",backgroundPosition:"center center",backgroundSize:l.default.getFaviconSize({app:t,ui:e})+"px",backgroundRepeat:"no-repeat",zIndex:9999}),I=c.default.getContentBase({cursor:"pointer"});return c.default.get({layout:B,content:I,animation:{}})}static getTextarea({app:t,ui:e}){const B=e.extensionMode===F.default.extensionModeExtModalLabel?"60%":"54%",I=(e.screenMode,F.default.screenModeSmallLabel,"1em"),i=e.screenMode===F.default.screenModeSmallLabel?"0.8em":"1.1em",g=c.default.getLayoutInlineBlock({width:B,maxWidth:B,height:"55%",background:l.default.whiteRGB,padding:"6px",margin:"0 3% 0 0",outline:"none",resize:"none",border:l.default.border,borderRadius:"3px",WebkitAppearance:"none"}),Q=c.default.getContentBase({fontSize:I,lineHeight:i,textAlign:"left",textIndent:"3%"}),U=c.default.getAnimationBase();return c.default.get({layout:g,content:Q,animation:U})}static getModalTextarea({app:t,ui:e}){const B=c.default.getLayoutInlineBlock({width:"60%",maxWidth:"60%",height:"80%",background:l.default.whiteRGB,padding:"6px",margin:"0",outline:"none",resize:"none",border:l.default.border,borderRadius:"3px",WebkitAppearance:"none"}),I=c.default.getContentBase({textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:B,content:I,animation:i})}static getButton({app:t,ui:e}){const B=e.screenMode===F.default.screenModeSmallLabel?30:38,I=c.default.getLayoutInlineBlock({outline:"none",width:"20%",maxWidth:"20%",height:"56%",margin:"0px 3% 0px 0%",background:`url(https://${i.default.assetsPath}airplane.svg) 50% 35% / ${B}px no-repeat ${l.default.whiteRGBA}`,border:l.default.border,borderRadius:"3px"}),g=c.default.getContentBase({color:l.default.downreliefRGB,cursor:"pointer"}),Q=c.default.getAnimationBase();return c.default.get({layout:I,content:g,animation:Q})}static getUpper({app:t,ui:e}){const B=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start"}),I=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:B,content:I,animation:i})}static getBottom({app:t,ui:e}){const B=c.default.getLayoutFlex({alignItems:"center",justifyContent:"center"}),I=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:B,content:I,animation:i})}}e.default=U},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(3)),g=I(B(13));class Q{constructor(t){return{self:Q.getSelf(t),fixTimeMarker:Q.getFixTimeMarker(t)}}static getSelfWidthRate(){return 36}static getSelfHeightPx(){return 22}static getSelfMarginTop(){return 15}static getSelfLeftRate(){return 50-Q.getSelfWidthRate()/2}static getFixTimeMarkerStyles({app:t,ui:e}){let B=Q.getSelfWidthRate()/100,I=e.width*B,F=Q.getSelfHeightPx()+"px",c="25%",U=0,s=0,d=0;switch(e.screenMode){case i.default.screenModeSmallLabel:d=e.width,I=d*B,c=U+d*(Q.getSelfLeftRate()/100)+"px";break;case i.default.screenModeMiddleLabel:U=l.default.getWidth({app:t,ui:e},!0),d=e.width-U,I=d*B,c=U+d*(Q.getSelfLeftRate()/100)+"px";break;case i.default.screenModeLargeLabel:U=l.default.getWidth({app:t,ui:e},!0),s=e.width*Number(g.default.getWidth({app:t,ui:e},!0))/100,d=e.width-(U+s),I=d*B,c=U+d*(Q.getSelfLeftRate()/100)+"px"}return{width:I,height:F,left:c,fontSize:"0.8em"}}static getSelf({app:t,ui:e}){const B=t.isMediaCh?"none":"flex",I=F.default.getLayoutFlex({width:Q.getSelfWidthRate()+"%",height:Q.getSelfHeightPx()+"px",margin:Q.getSelfMarginTop()+"px auto 10px auto",padding:"5px 10px",background:c.default.darkLightRGBA,borderRadius:"20px",display:B}),i=F.default.getContentBase({color:c.default.whiteRGB,letterSpacing:"2px",fontSize:"0.8em"}),l=F.default.getAnimationBase();return F.default.get({layout:I,content:i,animation:l})}static getFixTimeMarker({app:t,ui:e}){const B=Q.getSelf({app:t,ui:e}),{left:I,width:i,height:F,fontSize:l}=Q.getFixTimeMarkerStyles({app:t,ui:e});return{...B,position:"fixed",width:i,height:F,top:c.default.getBlockSize({app:t,ui:e})+"px",left:I,fontSize:l,lineHeight:"0.9em"}}}e.default=Q},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(6)),F=I(B(2)),c=I(B(0)),l=I(B(1)),g=I(B(5)),Q=I(B(3));class U{constructor(t){return{self:U.getSelf(t),menu:U.getMenu(t),menuUl:U.getMenuUl(t),menuLi:U.getMenuLi(t),menuLiChild:U.getMenuLiChild(t),menuLiBubble:U.getMenuLiBubble(t),menuLiLinks:U.getMenuLiLinks(t),menuToggle:U.getMenuToggle(t),links:U.getLinks(t),linksUl:U.getLinksUl(t),linksLi:U.getLinksLi(t),linksLiActive:U.getLinksLiActive(t),linksLiUnactive:U.getLinksLiUnactive(t),linksTuneLi:U.getLinksTuneLi(t),linkMenuUl:U.getLinkMenuUl(t),linkMenuLi:U.getLinkMenuLi(t),linksTabActive:U.getLinksTabActive(t),linksTabUnactive:U.getLinksTabUnactive(t),linksTabLast:U.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return l.default.themeRGB}static get unactiveColor(){return l.default.fontBaseRGB}static get typesMain(){return"MAIN"}static get typesLink(){return"LINK"}static get typesSub(){return"SUB"}static getType({app:t,ui:e}){switch(t.dispThreadType){case i.default.dispThreadTypeMulti:case i.default.dispThreadTypeSingle:return U.typesMain;default:return t.isLinkCh?U.typesLink:U.typesSub}}static getTotalWidth({app:t,ui:e}){return U.size+2*U.padding+U.right}static getSelfTop({app:t,ui:e}){return"55px"}static getSelfWidth({app:t,ui:e},B=!1){let I="93%";if(e.isOpenLinks)if(e.extensionMode===F.default.extensionModeExtBottomLabel)I="93%";else switch(e.screenMode){case F.default.screenModeSmallLabel:return"93%";case F.default.screenModeMiddleLabel:return`calc(97% - ${Q.default.getWidth({app:t,ui:e},!1)})`;case F.default.screenModeLargeLabel:I=`calc( ${97-g.default.getWidth({app:t,ui:e},!1)}% - ${Q.default.getWidth({app:t,ui:e},!1)} )`}else I=U.getTotalWidth({app:t,ui:e})+"px";return B?c.default.trimUnit(I):I}static getSelfHeight({app:t,ui:e}){if(!e.isOpenBoard)return"60px";switch(U.getType({app:t,ui:e})){case U.typesMain:return"237px";case U.typesLink:return"178px";case U.typesSub:return"118px";default:return"0px"}}static getSelfBorderRadius({app:t,ui:e}){return"10px 0px 0px 10px"}static getSelfBackground({app:t,ui:e}){return e.isOpenBoard?l.default.lightRGBA:l.default.whiteRGBA}static getSelfRight({app:t,ui:e},B=!1){const I=e.screenMode===F.default.screenModeLargeLabel?`calc( ${g.default.getWidth({app:t,ui:e},!0)} + ${U.right}px )`:U.right+"px";return B?I:c.default.trimUnit(I)}static getSelfBoxShadow({app:t,ui:e},B=!1){return e.isOpenLinks,"rgb(220, 220, 220) 0px 0px 5px"}static getLinksDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getSelf({app:t,ui:e}){const B=U.getSelfWidth({app:t,ui:e}),I=U.getSelfHeight({app:t,ui:e}),i=U.getSelfBorderRadius({app:t,ui:e}),F=U.getSelfBackground({app:t,ui:e}),g=U.getSelfRight({app:t,ui:e},!0),Q=U.getSelfBoxShadow({app:t,ui:e}),s=c.default.getLayoutFlex({position:"fixed",top:U.getSelfTop({app:t,ui:e}),overflow:"hide",right:g,height:I,width:B,padding:"5px",background:F,flexDirection:"row",alignItems:"flex-start",justifyContent:"flex-end",boxShadow:Q,borderRadius:i,zIndex:3}),d=c.default.getAnimationBase({transition:l.default.getTransitionFirstOn({app:t,ui:e})});return c.default.get({layout:s,content:{},animation:d})}static getMenu({app:t,ui:e}){const B=c.default.getLayoutFlex({width:U.getTotalWidth({app:t,ui:e})+"px",height:"100%",flexDirection:"column",alignItems:"flex-end"});return c.default.get({layout:B,content:{},animation:{}})}static getMenuUl({app:t,ui:e}){const B=c.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column"}),I=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:B,content:{},animation:I})}static getMenuLi({app:t,ui:e}){const B=U.size+"px",I=c.default.getLayoutFlex({flexDirection:"column",width:B,height:B,minWidth:B,minHeight:B,maxWidth:B,maxHeight:B,background:l.default.whiteRGBA,borderRadius:"5px",marginBottom:"5px"}),i=c.default.getContentBase({fontSize:"0.7em",letterSpacing:"1px",lineHeight:"17px"}),F=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:I,content:i,animation:F})}static getMenuLiChild({app:t,ui:e}){const B=i.default.isActiveMultistream({app:t,ui:e},"getLiChild")?U.activeColor:U.unactiveColor,I=c.default.getContentBase({color:B}),F=c.default.getAnimationBase();return c.default.get({layout:{},content:I,animation:F})}static getMenuLiBubble({app:t,ui:e}){const B=e.isBubblePost?U.activeColor:U.unactiveColor,I=c.default.getContentBase({color:B}),i=c.default.getAnimationBase();return c.default.get({layout:{},content:I,animation:i})}static getMenuLiLinks({app:t,ui:e}){const B=l.default.themeRGB,I=c.default.getContentBase({color:B}),i=c.default.getAnimationBase();return c.default.get({layout:{},content:I,animation:i})}static getMenuToggle({app:t,ui:e}){const B=U.size-4+"px",I=c.default.getLayoutFlex({width:B,height:B,minHeight:B,maxHeight:B}),i=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:I,content:{},animation:i})}static getLinks({app:t,ui:e}){const B=U.getLinksDisplay({app:t,ui:e}),I=c.default.getLayoutFlex({display:B,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),i=c.default.getContentBase({});return c.default.get({layout:I,content:i,animation:{}})}static getLinksUl({app:t,ui:e}){const B=c.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),I=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:B,content:{},animation:I})}static getLinksLi({app:t,ui:e}){const B=U.size+"px",I=c.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:B,minHeight:B,maxHeight:B,background:l.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),i=c.default.getContentBase({cursor:"pointer",lineHeight:"17px"}),F=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:I,content:i,animation:F})}static getLinksLiActive({app:t,ui:e}){const B=U.getLinksLi({app:t,ui:e});return B.background=l.default.whiteRGB,B.color=l.default.fontBaseRGB,B}static getLinksLiUnactive({app:t,ui:e}){const B=U.getLinksLi({app:t,ui:e});return B.background=l.default.calmRGB,B.color=l.default.fontBaseRGB,B}static getLinksTuneLi({app:t,ui:e}){const B=U.getLinksLi({app:t,ui:e});return B.alignItems="center",B}static getLinkMenuUl({app:t,ui:e}){const B=U.size+"px",I=c.default.getLayoutFlex({minHeight:B,height:B,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),i=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:I,content:{},animation:i})}static getLinkMenuLi({app:t,ui:e}){const B=U.size-4+"px",I=c.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:B,minHeight:B,maxHeight:B,background:l.default.reliefRGB,borderRadius:"5px"}),i=c.default.getContentBase({cursor:"pointer",color:l.default.whiteRGB}),F=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:I,content:i,animation:F})}static getLinksTabActive({app:t,ui:e}){const B={};return B.background=l.default.whiteRGBA,B.color=l.default.fontBaseRGB,B}static getLinksTabUnactive({app:t,ui:e}){return U.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){const B={margin:"5px 0px 0px 0px"};return B}}e.default=U},function(t,e,B){"use strict";(function(t,I){var i,F=B(43);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:I;var c=Object(F.a)(i);e.a=c}).call(this,B(26),B(48)(t))},function(t,e){var B;B=function(){return this}();try{B=B||new Function("return this")()}catch(t){"object"==typeof window&&(B=window)}t.exports=B},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4)),F=I(B(17));class c extends i.default{static get defaultOffsetFindId(){return F.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",B=t&&t.utype?t.utype:"",I=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,F=t&&t.actioned?t.actioned:"",l=t&&t.offsetFindId?t.offsetFindId:c.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:c.defaultOffsetFindId,Q=t&&t.offsetMultiFindId?t.offsetMultiFindId:c.defaultOffsetFindId,U=t&&t.offsetChildFindId?t.offsetChildFindId:c.defaultOffsetFindId,s=t&&t.offsetLogsFindId?t.offsetLogsFindId:c.defaultOffsetFindId;t.requestLoginType&&t.requestLoginType;return this.create({uid:e,utype:B,tuned:I,multistreamed:i,actioned:F,offsetFindId:l,offsetSingleFindId:g,offsetMultiFindId:Q,offsetChildFindId:U,offsetLogsFindId:s,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:F.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:t&&t.href?t.href:"/"}}e.default=c},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4));class F extends i.default{constructor(t={}){super();return this.create({liveCnt:0})}}e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4)),F=I(B(1)),c=I(B(23)),l={index:0,offsetTop:0,label:""};class g extends i.default{constructor(t={}){super(),this.list=[],this.now={...l},this.before={...l},this.after={...l};const e=t&&t.list?t.list:[],B=t&&t.now?t.now:{...l},I=t&&t.before?t.before:{...l},i=t&&t.after?t.after:{...l};return this.create({list:e,now:B,before:I,after:i})}static generate(t=0,e,{app:B,ui:I}){const i=e.length;let g=[],Q={...l},U={...l},s={...l};if(i>0){const l=c.default.getSelfMarginTop()+t+F.default.getBlockSize({app:B,ui:I});e.forEach((t,B)=>{""===Q.label&&l<=t.offsetTop&&(Q.index=B,Q.label=t.innerText,Q.offsetTop=t.offsetTop,e[B-1]?(U.index=Q.index-1,U.label=e[B-1].innerText,U.offsetTop=e[B-1].offsetTop):U={...Q},e[B+1]?(s.index=Q.index+1,s.label=e[B+1].innerText,s.offsetTop=e[B+1].offsetTop):s={...Q});const I={index:B,offsetTop:t.offsetTop,label:t.innerText};g.push(I)}),""===Q.label&&(Q.index=i-1,Q.label=e[Q.index].innerText,Q.offsetTop=e[Q.index].offsetTop,U={...Q},s={...Q},e[Q.index-1]&&(U.index=e[Q.index-1]?Q.index-1:Q.index,U.label=e[Q.index-1]?e[Q.index-1].innerText:Q.label,U.offsetTop=e[Q.index-1]?e[Q.index-1].offsetTop:Q.offsetTop),e[Q.index+1]&&(s.index=e[Q.index+1]?Q.index+1:Q.index,s.label=e[Q.index+1]?e[Q.index+1].innerText:Q.label,s.offsetTop=e[Q.index+1]?e[Q.index+1].offsetTop:Q.offsetTop))}return{list:g,now:Q,before:U,after:s}}static update(t=0,e){let B=e.list,I=e.now,i=e.before,F=e.after;const l=B.length;if(l>0){const e=c.default.getSelfMarginTop()+t+54;I.index===l-1?e<I.offsetTop&&(F=I,I=i,i=B[i.index-1]?B[i.index-1]:i):0===I.index?F.offsetTop<=e&&(i=B[I.index],I=B[I.index+1],F=B[F.index+1]?B[F.index+1]:F):I.offsetTop<=e&&e<F.offsetTop||(e<I.offsetTop&&(i=B[i.index-1]?B[i.index-1]:i,I=B[I.index-1]?B[I.index-1]:I,F=B[F.index-1]),F.offsetTop<=e&&(i=B[i.index+1],I=B[I.index+1]?B[I.index+1]:I,F=B[F.index+1]?B[F.index+1]:F))}return{list:B,now:I,before:i,after:F}}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1));class l{constructor(t){return{self:l.getSelf(t),headTab:l.getHeadTab(t),rightIcon:l.getRightIcon(t),leftIcon:l.getLeftIcon(t),userIcon:l.getUserIcon(t),userIconImg:l.getUserIconImg(t),liveCntWrap:l.getLiveCntWrap(t),childAnalyzeWrap:l.getChildAnalyzeWrap(t),childAnalyzeType:l.getChildAnalyzeType(t),childAnalyzeCnt:l.getChildAnalyzeCnt(t),childTalknLogo:l.getChildTalknLogo(t)}}static get selfHeight(){return"100%"}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get widthRatio(){return.94}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, ${c.default.getBlockSize({app:t,ui:e})}px, 0px )`}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNotif?l.getNotifOpenTranslateY({app:t,ui:e}):l.notifCloseTranslateY}static getMargin({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?"0px 5% 0px 5%":"0 auto"}static getChildAnalyzeRight({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:return"5%";case i.default.screenModeMiddleLabel:return"10%";case i.default.screenModeLargeLabel:return"15%"}}static getChildAnalyzePositions({app:t,ui:e}){const B=e.screenMode===i.default.screenModeSmallLabel?"8px 0px 0px 0px":"7px auto";return e.extensionMode===i.default.extensionModeExtBottomLabel||(e.extensionMode,i.default.extensionModeExtModalLabel),{position:"absolute",top:"0px",right:l.getChildAnalyzeRight({app:t,ui:e}),margin:B}}static getBorderRadius({app:t,ui:e},B=!1){return e.extensionMode===i.default.extensionModeExtBottomLabel?"100%"===e.extensionWidth?"0px":`${c.default.radius} ${c.default.radius} 0px 0px`:e.extensionMode===i.default.extensionModeExtModalLabel?`${c.default.radius} ${c.default.radius} 0px 0px`:0}static getSelf({app:t,ui:e}){const B=e.extensionMode===i.default.extensionModeExtBottomLabel?"90%":"100%",I=e.extensionMode===i.default.extensionModeExtNoneLabel?0:c.default.border,g=l.getBorderRadius({app:t,ui:e}),Q=e.extensionMode===i.default.extensionModeExtNoneLabel?c.default.lineShadow:c.default.lineInsetShadow,U=F.default.getLayoutFlex({position:"fixed",top:0,left:0,width:B,height:c.default.getBlockSize({app:t,ui:e})+"px",borderTop:I,borderRight:c.default.border,borderBottom:c.default.border,borderLeft:c.default.border,borderRadius:g,background:c.default.whiteRGB,margin:l.getMargin({app:t,ui:e}),zIndex:1e3,boxShadow:Q}),s=F.default.getContentBase({textAlign:"center"}),d=F.default.getAnimationBase({transform:l.getNotifTranslateY({app:t,ui:e})});return F.default.get({layout:U,content:s,animation:d})}static getUserIcon(t){const e=F.default.getLayoutBlock({flexGrow:2,height:"auto"}),B=F.default.getAnimationBase();return F.default.get({layout:e,content:{},animation:B})}static getUserIconImg(t){const e=F.default.getLayoutInlineBlock({width:"30px",margin:"0px 10px 0px 0px"}),B=F.default.getAnimationBase();return F.default.get({layout:e,content:{},animation:B})}static getLiveCntWrap(t){const e=F.default.getLayoutInlineBlock({position:"absolute",width:"100%",height:"100%",top:"3px",left:"20%"}),B=F.default.getAnimationBase();return F.default.get({layout:e,content:{},animation:B})}static getHeadTab({app:t,ui:e}){const B=e.screenMode===i.default.screenModeSmallLabel?"60%":"40%",I=F.default.getLayoutFlex({justifyContent:"center",width:B,height:"100%"}),c=F.default.getContentBase({fontSize:"1.2em"}),l=F.default.getAnimationBase();return F.default.get({layout:I,content:c,animation:l})}static getRightIcon({app:t,ui:e}){const B=e.screenMode===i.default.screenModeSmallLabel?"20%":"30%",I=F.default.getLayoutBlock({flexFlow:"column",alignItems:"center",justifyContent:"center",width:B,height:"100%"}),c=F.default.getAnimationBase();return F.default.get({layout:I,content:{},animation:c})}static getLeftIcon({app:t,ui:e}){const B=e.screenMode===i.default.screenModeSmallLabel?"20%":"30%",I=F.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:B,height:"100%"}),c=F.default.getContentBase({}),l=F.default.getAnimationBase();return F.default.get({layout:I,content:c,animation:l})}static getChildAnalyzeWrap({app:t,ui:e}){const B=l.getChildAnalyzePositions({app:t,ui:e}),I=F.default.getLayoutFlex({...B,flexDirection:"column",width:"40px",height:"28px"}),i=F.default.getContentBase({}),c=F.default.getAnimationBase();return F.default.get({layout:I,content:i,animation:c})}static getChildAnalyzeType({app:t,ui:e}){const B=F.default.getLayoutBlock({height:"14px",marginBottom:"4px"}),I=F.default.getContentBase({color:c.default.themeRGBA,fontWeight:"bold"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getChildAnalyzeCnt({app:t,ui:e}){const B=F.default.getLayoutBlock({height:"14px"}),I=F.default.getContentBase({color:c.default.themeRGBA,fontWeight:"bold"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getChildTalknLogo({app:t,ui:e}){const B=F.default.getLayoutInlineBlock({position:"absolute",width:c.default.getBlockSize({app:t,ui:e})+"px",height:c.default.getBlockSize({app:t,ui:e})+"px"}),I=F.default.getContentBase({color:c.default.themeRGBA,fontWeight:"bold"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getNotif({app:t,ui:e}){const B=F.default.getLayoutBlock({position:"relative",top:c.default.getBlockSize({app:t,ui:e})+"px",width:"50%",height:c.default.notifHeight,margin:"0 auto",zIndex:"10",background:"rgba(0, 0, 0, 0.4)",borderRadius:"20px"}),I=F.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),i=F.default.getAnimationBase({transition:c.default.getTransition({app:t,ui:e})});return F.default.get({layout:B,content:I,animation:i})}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(5)),g=I(B(3));class Q{constructor(t){return{self:Q.getSelf(t)}}static getWidth({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case i.default.screenModeSmallLabel:I="200%";break;case i.default.screenModeMiddleLabel:I=t.isOpenDetail?`calc( 100% + ${g.default.getWidth({app:t,ui:e})} )`:`calc( 100% + ${l.default.getWidth({app:t,ui:e})} )`;break;case i.default.screenModeLargeLabel:I="100%"}return B?F.default.trimUnit(I):I}static getLeft({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:I="0px"}return B?F.default.trimUnit(I):I}static getTransform({app:t,ui:e}){let B="translate3d( 0px, 0px, 0px )";if(e.extensionMode===i.default.extensionModeExtBottomLabel)B=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( -50%, 0px, 0px )";else switch(e.screenMode){case i.default.screenModeSmallLabel:B=e.isOpenMenu?"translate3d( 100%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case i.default.screenModeMiddleLabel:B=e.isOpenDetail?`translate3d( -${g.default.baseWidth}, 0px, 0px )`:"translate3d( 0px ,0px, 0px )";break;case i.default.screenModeLargeLabel:B="translate3d( 0px ,0px, 0px )"}return B}static getBorders({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?{border:0}:e.screenMode===i.default.screenModeSmallLabel?{border:c.default.border}:{borderTop:c.default.border,borderBottom:c.default.border}}static getSelf({app:t,ui:e}){const B=Q.getBorders({app:t,ui:e}),I=e.extensionMode===i.default.extensionModeExtBottomLabel?c.default.radiuses:"0px",l=F.default.getLayoutFlex({position:"fixed",bottom:"0px",left:Q.getLeft({app:t,ui:e}),height:c.default.getBlockSize({app:t,ui:e}),width:Q.getWidth({app:t,ui:e}),zIndex:c.default.maxZIndex,borderRadius:I,justifyContent:"flex-start",...B}),g=F.default.getAnimationBase({transform:Q.getTransform({app:t,ui:e}),transition:c.default.getTransition({app:t,ui:e})});return F.default.get({layout:l,content:{},animation:g})}}e.default=Q},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(22));class g{constructor(t){return{self:g.getSelf(t),emoji:g.getEmoji(t),emojiLabel:g.getEmojiLabel(t)}}static get selfHeight(){return 172}static getTransform({app:t,ui:e}){return e.isOpenPostsSupporter?`translate3d( 0px, -${g.selfHeight+c.default.getBlockSize({app:t,ui:e})}px, 0px )`:"translate3d( 0px, 0px, 0px )"}static getSelf({app:t,ui:e}){const B=F.default.getLayoutFlex({display:"flex",position:"fixed",bottom:`-${g.selfHeight}px`,left:l.default.getLeft({app:t,ui:e}),height:g.selfHeight,width:l.default.getWidth({app:t,ui:e}),maxWidth:l.default.getWidth({app:t,ui:e}),color:c.default.whiteRGB,flexFlow:"column wrap",alignItems:"center",justifyContent:"flex-start",background:c.default.darkRGBA,whiteSpace:"nowrap",overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:2}),I=F.default.getAnimationBase({transition:c.default.getTransitionFirstOn({app:t,ui:e}),transform:g.getTransform({app:t,ui:e})});return F.default.get({layout:B,content:{},animation:I})}static getEmoji({app:t,ui:e}){const B=i.default.screenModeSmallLabel===e.screenMode?"35px":"40px",I=F.default.getLayoutFlex({minWidth:"20%",maxWidth:"20%",height:"86px",flexFlow:"row wrap",alignItems:"center",justifyContent:"center",padding:"5px"}),l=F.default.getContentBase({fontSize:B,cursor:"pointer"}),g=F.default.getAnimationBase({transition:c.default.getTransition({app:t,ui:e}),transform:"scale(1.0)"});return F.default.get({layout:I,content:l,animation:g})}static getEmojiLabel({app:t,ui:e}){const B=(i.default.screenModeSmallLabel,e.screenMode,"0px"),I=i.default.screenModeSmallLabel===e.screenMode?"8px":"10px",l=F.default.getLayoutFlex({width:"100%",minWidth:"100%",height:"30px",margin:B}),g=F.default.getContentBase({wordBreak:"break-word",fontSize:I,color:c.default.whiteRGB}),Q=F.default.getAnimationBase({});return F.default.get({layout:l,content:g,animation:Q})}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(3));class g{constructor(t){return{self:g.getSelf(t),child:g.getChild(t),childIndex:g.getChildIndex(t)}}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case i.default.extensionModeExtBottomLabel:return c.default.radiuses;case i.default.extensionModeExtModalLabel:switch(e.screenMode){case i.default.screenModeSmallLabel:return"0 0 0 "+c.default.radius;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:return"0px 0px 0px "+c.default.radius}default:return"0"}}static getWidth({app:t,ui:e},B=!1){let I="0";if(e.extensionMode===i.default.extensionModeExtBottomLabel)I="50%";else switch(e.screenMode){case i.default.screenModeSmallLabel:I="100%";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:I=l.default.baseWidth}return B?F.default.trimUnit(I):I}static getSelf({app:t,ui:e}){const B=(e.screenMode,i.default.screenModeSmallLabel,{border:c.default.border}),I=g.getBorderRadius({app:t,ui:e}),l=F.default.getLayoutFlex({width:g.getWidth({app:t,ui:e}),minWidth:g.getWidth({app:t,ui:e}),height:c.default.getBlockSize({app:t,ui:e})+"px",background:c.default.lightRGBA,boxShadow:c.default.lineShadow,borderRadius:I,...B}),Q=F.default.getContentBase({}),U=F.default.getAnimationBase();return F.default.get({layout:l,content:Q,animation:U})}static getChild({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=F.default.getContentBase({fontSize:"0.7em",lineHeight:"1.5em"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getChildIndex({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:1,height:"100%"}),I=F.default.getContentBase({fontSize:"0.7em",fontWeight:"bold",lineHeight:"1.5em"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1)),c=I(B(10)),l=I(B(6)),g=I(B(2));class Q{constructor(t){t.bootOption,t.app;const e=Q.getHeadTab(t),B=Q.getMenu(t),I=Q.getTalknLogo(t),i=Q.getUser(t),F=Q.getHeaderUser(t),c=Q.getTag(t),l=Q.getHome(t),g=Q.getGraph(t);return{headTab:e,menu:B,talknLogo:I,user:i,headerUser:F,search:Q.getSearch(t),tag:c,home:l,graph:g,index:Q.getIndex(t),logs:Q.getLogs(t),setting:Q.getSetting(t),thunder:Q.getThunder(t),bubble:Q.getBubble(t),detail:Q.getDetail(t),heart:Q.getHeart(t),share:Q.getShare(t),money:Q.getMoney(t),openEmoji:Q.getOpenEmoji(t),close:Q.getClose(t),ch:Q.getCh(t),update:Q.getUpdate(t),loading:Q.getLoading(t),tune:Q.getTune(t),liveCnt:Q.getLiveCnt(t),stampStr:Q.getStampStr(t),stampLabel:Q.getStampLabel(t)}}static get defaultOption(){return{sizePx:Q.largeSize,active:!0}}static get smallSize(){return"24px"}static get middleSize(){return"36px"}static get largeSize(){return"48px"}static get bigSize(){return"64px"}static get smallMargin(){return 2}static get largeMargin(){return 4}static getMargin({app:t,ui:e}){return e.screenMode===g.default.screenModeSmallLabel?Q.smallMargin:Q.largeMargin}static getEmpty({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:F}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTwitter({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"twitter.png":"twitter_gray.png",l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getFacebook({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"facebook.png":"facebook_gray.png",l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAppstore({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"appstore.png":"appstore_gray.png",l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAndroid({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"android.png":"android_gray.png",l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getHome({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"home.png":"home_gray.png",l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getGraph({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=B.active?"graph.png":"graph_gray.png",l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalkn({app:t,ui:e},B={}){const I=(B={...Q.defaultOption,...B}).sizePx?B.sizePx:Q.middleSize,F=(B.active,"talkn.png"),l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:I,height:I,minWidth:I,minHeight:I,backgroundSize:I,backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${F})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalknLogo({app:t,ui:e}){return{img:i.default.get({layout:i.default.getLayoutBlock({backgroundImage:`url(${c.default.assetsImgPath}talkn_logo2.png)`,backgroundPosition:"center center",backgroundSize:"90%",backgroundRepeat:"no-repeat"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getChromeExtension({app:t,ui:e},B={}){const I=((B={...Q.defaultOption,...B}).active,"chrome_extension.png"),l=B.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:"100%",minWidth:"100%",height:"180px",minHeight:"60px",backgroundSize:"75%",backgroundPosition:"center",backgroundImage:`url(https://${c.default.assetsImgPath}${I})`,backgroundRepeat:"no-repeat",backgroundColor:F.default.silverRGBA}),content:i.default.getContentBase({cursor:l}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTag({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),left:i.default.get({layout:i.default.getLayoutInlineBlock({borderBottom:"2px solid "+F.default.reliefRGB,borderLeft:"2px solid "+F.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(45deg) translate3d(5px, 5px, 0px)"})}),right:i.default.get({layout:i.default.getLayoutInlineBlock({borderBottom:"2px solid "+F.default.reliefRGB,borderLeft:"2px solid "+F.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(-135deg) translate3d(-6px, -4px, 0px)"})}),bar:i.default.get({layout:i.default.getLayoutInlineBlock({background:F.default.reliefRGB,width:"2px",height:"13px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(40deg) translate3d(-5px, 13px, 0px)"})})}}static getHomeCss({app:t,ui:e}){const B=i.default.get({layout:i.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),I=i.default.get({layout:i.default.getLayoutInlineBlock({borderBottom:"2px solid "+F.default.reliefRGB,borderLeft:"2px solid "+F.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"19px",height:"18px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(135deg) translate3d(5px, -3px, 0px)"})}),c=i.default.get({layout:i.default.getLayoutInlineBlock({borderRight:"2px solid "+F.default.reliefRGB,borderBottom:"2px solid "+F.default.reliefRGB,borderLeft:"2px solid "+F.default.reliefRGB,borderRadius:"0px",margin:"0 auto",width:"20px",height:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(2px, -6px, 0px)"})});return{div:B,leaf:I,door:i.default.get({layout:i.default.getLayoutInlineBlock({background:""+F.default.reliefRGB,width:"6px",height:"8px",margin:"0 auto",borderRadius:"5px 5px 0px 0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(-11px, -5px, 0px)"})}),base:c}}static getSearch({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:F.default.getBlockSize({app:t,ui:e})+"px",height:F.default.getBlockSize({app:t,ui:e})+"px",borderRadius:"100px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),circle:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",top:"4px",left:"16px",margin:"7px auto",width:"18px",height:"18px",borderRadius:"100px",border:"3px solid "+F.default.chromeOffTabRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bar:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"23px",left:"13px",margin:"0 auto",background:F.default.chromeOffTabRGB,width:"4px",height:"12px",borderRadius:"10px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e}),transform:"scale(1) translate3d(0px, 0px, 0px) rotate(45deg)"})})}}static getUser({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"24px",height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),top:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:F.default.reliefRGB,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-17px",border:"3px solid rgb(250, 250, 250)"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:F.default.reliefRGB,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"7px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getHeaderUser({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"5px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),top:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:""+F.default.chromeOffTabRGB,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:""+F.default.chromeOffTabRGB,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getIndex({app:t,ui:e}){const B=i.default.get({layout:i.default.getLayoutInlineBlock({width:"24px",height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),I=i.default.get({layout:i.default.getLayoutBlock({width:"24px",height:"24px",margin:"0 auto",borderRadius:"4px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),c=i.default.get({layout:i.default.getLayoutBlock({width:"24px",height:"2px",margin:"5px auto",borderRadius:"6px",background:F.default.reliefRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()});return{div:B,wrap:I,top:i.default.get({layout:c,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),middle:i.default.get({layout:c,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bottom:i.default.get({layout:c,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})})}}static getLogs({app:t,ui:e}){const B=i.default.get({layout:i.default.getLayoutInlineBlock({width:"24px",height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),I=i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"3px",left:"-6px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) rotate(-15deg)"})}),c=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:F.default.reliefRGB,width:"9px",height:"13px",borderRadius:"45px 30px 45px 45px",position:"relative",left:"2px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),l=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:F.default.reliefRGB,width:"6px",height:"8px",borderRadius:"10px",position:"relative",top:"-2px",left:"2px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),g=i.default.get({layout:i.default.getLayoutBlock({width:"7px",height:"2px",background:F.default.offWhiteRGB,margin:"0 auto",zIndex:"1000",position:"relative",left:"1px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 1px, -9px, 1000px )"})}),U=i.default.get({layout:i.default.getLayoutInlineBlock({width:"36px",height:"36px",position:"absolute",top:"-4px",left:"0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 0.5 ) rotate(30deg)"})}),s=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:F.default.reliefRGB,width:"11px",height:"21px",borderRadius:"30px 50px 40px 40px",position:"relative",left:"-1px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),d=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:F.default.reliefRGB,width:"8px",height:"8px",borderRadius:"2px 2px 3px 3px",position:"relative",left:"-1px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:B,foot1:I,foot1Top:c,foot1Space:g,foot1Bottom:l,foot2:U,foot2Top:s,foot2Space:i.default.get({layout:i.default.getLayoutBlock({width:"19px",height:"3px",background:F.default.offWhiteRGB,margin:"0 auto",zIndex:"1000"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, -10px, 1000px )"})}),foot2Bottom:d}}static getSetting({app:t,ui:e}){const B=i.default.get({layout:i.default.getLayoutInlineBlock({width:"24px",height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),I=i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",background:F.default.reliefRGB,width:"4px",height:"4px",borderRadius:"1px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:B,wing1:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(9.5px, 1px, 0px) rotate(0deg)"})}),wing2:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 15px, 4px, 0px ) rotate( 45deg )"})}),wing3:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 17px, 9px, 0px ) rotate( 90deg )"})}),wing4:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 15.5px, 14px, 0px ) rotate( 125deg )"})}),wing5:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 9.5px, 17px, 0px ) rotate( 180deg )"})}),wing6:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 3px, 14px, 0px ) rotate( 225deg )"})}),wing7:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 1px, 9px, 0px ) rotate( 270deg )"})}),wing8:i.default.get({layout:I,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 2.5px, 4px, 0px ) rotate( 315deg )"})}),circle:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",top:"2px",left:"3px",width:"16px",height:"16px",border:"3px solid "+F.default.reliefRGB,borderRadius:"50px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 1px, 0px )"})})}}static getThunder({app:t,ui:e}){let B=F.default.reliefRGBA;return l.default.isActiveMultistream({app:t,ui:e})&&(B=F.default.themeRGBA),{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"rotate(0deg) translate(0px, 0px)"})}),wrap:i.default.get({layout:i.default.getLayoutInlineBlock({borderRadius:"50px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"rotate(90deg) translate3d(0px,0px,0px)"})}),top:i.default.get({layout:i.default.getLayoutBlock({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:"transparent",borderRightColor:"transparent",borderBottomColor:""+B,borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(-3px, -3px)"})}),bottom:i.default.get({layout:i.default.getLayoutFlex({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:""+B,borderRightColor:"transparent",borderBottomColor:"transparent",borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(15px, -3px)"})})}}static getPlay({app:t,ui:e}){const B=e.isOpenLinks?F.default.themeRGB:F.default.reliefRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate(0px, 0px)"})}),playCircle:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"5px",width:"24px",height:"24px",minWidth:"24px",minHeight:"24px",border:"2px solid "+B,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),playTriangle:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",width:"6px",height:"6px",borderTop:"6px solid transparent",borderRight:"6px solid transparent",borderBottom:"6px solid transparent",borderLeft:"6px solid "+B}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate3d(4px, 1.5px, 0px)"})})}}static getLinks({app:t,ui:e}){const B=F.default.themeRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate(0px, 0px)"})}),linksA1:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"6px",width:"24px",height:"14px",border:"2px solid "+B,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksA2:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"5px",left:"5px",width:"4px",height:"4px",borderRadius:"10px",background:F.default.whiteRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({})}),linksB1:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"0px",width:"24px",height:"14px",border:"2px solid "+B,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksB2:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"-5px",left:"-5px",width:"4px",height:"4px",borderRadius:"10px",background:F.default.whiteRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({})})}}static getBubble({app:t,ui:e}){const B=e.isBubblePost?F.default.themeRGB:F.default.reliefRGBA;return{div:i.default.get({layout:i.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate(0px, 0px)"})}),bubble:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"18px",height:"14px",background:B,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),bubbleBar:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"5px",height:"10px",background:B,border:"3px solid "+B}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.transitionOff,transform:"skew(30deg, 28deg) rotate(30deg) translate3d(-2px, -7px, 0px)"})})}}static getDetail({app:t,ui:e}){const B=e.screenMode===g.default.screenModeSmallLabel?"0":"1px auto",I=i.default.get({layout:i.default.getLayoutInlineFlex({width:"54px",height:"100%",borderRadius:"100px",margin:B,cursor:"pointer"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),c=i.default.get({layout:i.default.getLayoutBlock({width:"26px",height:"28px",margin:"7px auto",borderRadius:"2px",background:""+F.default.calmRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),l=i.default.get({layout:i.default.getLayoutBlock({width:"14px",height:"2px",margin:"3px auto",borderRadius:"6px",background:F.default.whiteRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()});return{div:I,wrap:c,bar1:i.default.get({layout:{...l,width:"7px",margin:"5px 0px 0px 6px"},content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar2:i.default.get({layout:l,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar3:i.default.get({layout:l,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),bar4:i.default.get({layout:l,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),mekuri:i.default.get({layout:{...l,position:"absolute",top:0,rightt:0,width:0,height:0,borderRadius:0,borderTop:"4px solid "+F.default.whiteRGB,borderLeft:"4px solid "+F.default.whiteRGB,borderRight:"4px solid "+F.default.reliefRGB,borderBottom:"4px solid "+F.default.reliefRGB},content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(18px, -3px, 0px) rotate( 90deg )"})})}}static getMenu({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e})})}),dot:i.default.get({layout:i.default.getLayoutBlock({position:"relative",top:"2px",width:"6px",height:"6px",margin:"4px auto",borderRadius:"6px",background:F.default.calmRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()})}}static getHeadTabLeftTransform(){return Q.getHeadTabLeftOpenTransform}static getHeadTabRightTransform(){return Q.getHeadTabRightOpenTransform}static get getHeadTabLeftOpenTransform(){return"rotate( 120deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightOpenTransform(){return"rotate( -120deg ) translate3d(-3px, 5px, 0px)"}static get getHeadTabLeftCloseTransform(){return"rotate( 90deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightCloseTransform(){return"rotate( -90deg ) translate3d(-3px, 5px, 0px)"}static getHeadTab({app:t,ui:e}){const B=i.default.getLayoutInlineBlock({width:"4px",borderRadius:"10px",background:F.default.calmRGB});return{div:i.default.get({layout:i.default.getLayoutBlock({width:"40px",height:"20px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),left:i.default.get({layout:B,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e}),transform:Q.getHeadTabLeftTransform()})}),right:i.default.get({layout:B,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e}),transform:Q.getHeadTabRightTransform()})})}}static getHeart({app:t,ui:e}){e.openLockMenu===g.default.openLockMenuLabelShare?F.default.themeRGBA:F.default.reliefRGB;return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:Q.smallSize,height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),before:i.default.get({layout:i.default.getLayoutBase({width:"10px",height:"17px",borderRadius:"10px 10px 0 0",background:F.default.reliefRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(-45deg) translate3d(0px, 6px, 0px)"})}),after:i.default.get({layout:i.default.getLayoutBase({width:"17px",height:"10px",borderRadius:"0 10px 10px 0",background:F.default.reliefRGB}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"rotate(-45deg) translate3d(11px, -2px, 0px)"})})}}static getShare({app:t,ui:e}){const B=e.openLockMenu===g.default.openLockMenuLabelShare?F.default.themeRGBA:F.default.reliefRGB,I=i.default.get({layout:i.default.getLayoutInlineBlock({width:Q.smallSize,height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),c=i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"9px",width:"16px",height:"14px",margin:"0 auto",border:"2px solid "+B,borderRadius:"3px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px)"})}),l=i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"6px",left:"16px",width:"2px",height:"11px",margin:"0 auto",background:B}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px)"})});return{div:I,base:c,whiteBar1:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"11px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, 0px, 0px)"})}),whiteBar2:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"18px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, 0px, 0px)"})}),bar:l,arrow:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"13px",width:"8px",height:"8px",borderTop:"2px solid "+B,borderRight:"2px solid "+B}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px) rotate( -45deg)"})})}}static getMoney({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:Q.smallSize,height:Q.smallSize,margin:Q.getMargin({app:t,ui:e})+"px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),outer:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",width:"20px",height:"20px",borderRadius:"24px",border:"2px solid "+F.default.reliefRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(0px, 3px, 0px)"})}),inner:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",width:"8px",height:"8px",borderRadius:"8px",border:"2px solid "+F.default.reliefRGB}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(0px, 4px, 0px)"})})}}static getOpenEmoji(t){const{app:e,ui:B}=t,I=g.default.screenModeSmallLabel===B.screenMode?"none":"inline-block";return{div:i.default.get({layout:i.default.getLayoutInlineBlock({display:I,width:"5px",height:"5px",minWidth:"5px",minHeight:"5px",margin:"0px 5px 0px 0px",borderRight:"5px solid transparent",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid rgba(200,200,200,0.8)"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:F.default.getTransition({app:e,ui:B})})})}}static getCloseEmoji({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"8px",height:"8px",minWidth:"8px",minHeight:"8px",margin:"0px 0px 0px -20px",borderRight:"8px solid rgba(200,200,200,0.8)",borderTop:"8px solid transparent",borderBottom:"8px solid transparent",borderLeft:"8px solid transparent"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:F.default.getTransition({app:t,ui:e})})})}}static getClose({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"26px",height:"26px",margin:"1px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),circle:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"26px",height:"26px",border:"2px solid "+F.default.calmRGB,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(0deg)"})}),bar1:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"18px",background:F.default.calmRGBA,borderRadius:"2px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(10px, 2px, 0px) rotate(45deg)"})}),bar2:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"18px",background:F.default.calmRGBA,borderRadius:"2px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(10px, 2px, 0px) rotate(-45deg)"})})}}static getCh({app:t,ui:e}){const B=F.default.lightGrayRGB,I=i.default.get({layout:i.default.getLayoutFlex({width:"44px",height:"44px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({})}),c=i.default.get({layout:i.default.getLayoutFlex({position:"absolute",top:"0px",width:"inherit",height:"inherit",border:"2px solid "+B,borderRadius:"30px"}),content:{},animation:{}}),l=i.default.get({layout:i.default.getLayoutFlex({width:"75%",height:"75%",border:"2px solid "+B,borderRadius:"30px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({})}),g=i.default.get({layout:i.default.getLayoutFlex({width:"inherit",height:"inherit",justifyContent:"center",alignItems:"center",borderRadius:"30px"}),content:i.default.getContentBase({lineHeight:2,color:B}),animation:i.default.getAnimationBase({})}),Q={width:"24px",height:"24px",background:F.default.lightRGB,position:"absolute",zIndex:10};return{div:I,circle1:c,circle2:l,str:g,shadow1:i.default.get({layout:{...Q,top:"-4px"},content:{},animation:{transform:"rotate(45deg) scale3d(1, 1, 1) skew(-57deg, -57deg)"}}),shadow2:i.default.get({layout:{...Q,top:"24px"},content:{},animation:{transform:"rotate(45deg) scale3d(1, 1, 1) skew(-57deg, -57deg)"}})}}static getUpdate({app:t,ui:e}){const B=F.default.whiteRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({width:Q.middleSize,height:Q.middleSize}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"scale( 0.75)"})}),circle:i.default.get({layout:i.default.getLayoutBase({width:"55%",height:"55%",borderRadius:"30px",border:"2px solid "+B,overflow:"visible"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({})}),bar:i.default.get({layout:i.default.getLayoutBase({position:"relative",top:"1px",left:"12px",width:"8px",height:"8px",background:"none",borderTop:"0px solid "+F.default.themeRGB,borderRight:"2px solid "+B,borderBottom:"2px solid "+B,borderLeft:"0px solid "+F.default.themeRGB}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"rotate(25deg)"})}),white:i.default.get({layout:i.default.getLayoutBase({position:"relative",top:"2px",left:"12px",width:"10px",height:"4px",background:"rgba(100, 192, 170, 1)"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"rotate(25deg)"})})}}static getLoading({app:t,ui:e}){F.default.whiteRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),circle:i.default.get({layout:i.default.getLayoutBase({margin:"0 auto",width:"2em",height:"2em",borderRadius:"50%",borderTop:"0.3em solid rgba(255, 255, 255, 0.2)",borderRight:"0.3em solid rgba(255, 255, 255, 0.2)",borderBottom:"0.3em solid rgba(255, 255, 255, 0.2)",borderLeft:"0.3em solid #ffffff"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translateZ(0)",animation:"Rotation 1.1s infinite linear"})}),after:i.default.get({layout:i.default.getLayoutBase({display:"none",borderRadius:"50%",width:"2em",height:"2em"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({})})}}static getTune({app:t,ui:e}){const B="30px",I=F.default.chromeOffTabRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({position:"absolute",width:"500px",height:"500px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"scale(0.1)"})}),side1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"135px",left:"135px",border:"30px solid "+I,borderRadius:"300px",width:"230px",height:"230px",zIndex:0}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),side2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"50px",left:"50px",border:"30px solid "+I,borderRadius:"300px",width:"400px",height:"400px",zIndex:0}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),cut:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"50px",left:"-150px",background:"none",width:"0px",height:"0px",borderTop:"200px solid "+F.default.lightRGB,borderRight:"400px solid rgba(255,255,255,0)",borderBottom:"200px solid "+F.default.lightRGB,borderLeft:"400px solid rgba(255,255,255,0)",zIndex:1}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),center:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"220px",left:"220px",width:"60px",height:"60px",borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftTop1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"153px",left:"69px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftTop2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"190px",left:"146px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftBottom1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"317px",left:"69px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftBottom2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"280px",left:"146px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightTop1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"153px",left:"401px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightTop2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"190px",left:"324px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightBottom1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"317px",left:"401px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightBottom2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"280px",left:"324px",width:B,height:B,borderRadius:"100px",background:I,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})})}}static getLiveCnt({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"26px",height:"26px",background:`rgba(${F.default.themeRGBString}, 0.85)`,borderRadius:"26px",boxShadow:"0px 0px 0px rgba(255,255,255,1)"}),content:i.default.getContentBase({fontSize:"0.7em",textAlign:"center"}),animation:i.default.getAnimationBase({})}),circle:i.default.get({layout:i.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:i.default.getContentBase({textAlign:"center",color:F.default.whiteRGB}),animation:i.default.getAnimationBase()})}}static getStampStr(t=!0){let e="1",B="40px",I="2em",i="flex-start";return t&&(e="2",B="100%",I="3.2em",i="center"),`display: flex;justify-content: ${i};align-items: center;width: 100%;height: ${B};transform: scale(${e});line-height: 2em;font-size: ${I};`}static getStampLabelAtMenuStr(t=!0){return"text-indent: 0.5em; font-size: 0.5em; letter-spacing: 0.1em;"}static getStampLabel({app:t,ui:e}){let B={height:"20px",justifyContent:"flex-end"},I={left:g.default.screenModeSmallLabel===e.screenMode?"-12%":"-9%",color:F.default.whiteRGB,background:"rgba(80, 80 ,80, 0.3)",borderRadius:"5px 5px 0px 0px",justifyContent:"center"},c={color:F.default.whiteRGB,fontSize:"0.7em"};return e.isBubblePost||(B.height="40px",B.justifyContent="flex-start",I.left=g.default.screenModeSmallLabel===e.screenMode?"30%":"27%",I.background="none",I.borderRadius=F.default.radius,I.justifyContent="flex-start",c.color=F.default.fontBaseRGB,c.fontSize="0.9em"),{div:i.default.get({layout:i.default.getLayoutFlex({position:"absolute",bottom:"0px",width:"100%",zIndex:10,...B}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),label:i.default.get({layout:i.default.getLayoutFlex({position:"relative",width:"120px",height:"inherit",padding:"5px",justifyContent:"center",alignItems:"center",...I}),content:i.default.getContentBase({...c}),animation:i.default.getAnimationBase({})})}}}e.default=Q},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(7)),F=I(B(2)),c=I(B(0)),l=I(B(1));class g{constructor(t){return{header:g.getHeader(t),headerSearchIcon:g.getHeaderSearchIcon(t),headerInput:g.getHeaderInput(t),headerFindSelect:g.getHeaderFindSelect(t),headerUpdateIcon:g.getHeaderUpdateIcon(t),ol:g.getOl(t),headerCh:{}}}static get iconSize(){return"25px"}static get liHeight(){return 90}static getSelf({app:t,ui:e}){const B=c.default.getLayoutBlock({width:"100%",height:`calc( 100% - ${2*l.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),I=c.default.getContentBase({}),i=c.default.getAnimationBase({});return c.default.get({layout:B,content:I,animation:i})}static getHeader({app:t,ui:e}){const B=e.screenMode===F.default.screenModeSmallLabel?{borderBottom:l.default.border,borderLeft:0}:{borderBottom:l.default.border,borderLeft:0,borderRight:l.default.border},I=c.default.getLayoutFlex({width:"100%",height:l.default.getBlockSize({app:t,ui:e})+"px",...B,background:l.default.lightRGB}),i=c.default.getContentBase({textAlign:"left"}),g=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:I,content:i,animation:g})}static getHeaderSearchIcon({app:t,ui:e}){const B=c.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"72px",height:l.default.getBlockSize({app:t,ui:e})+"px"}),I=c.default.getContentBase({color:l.default.reliefRGBA,fontWeight:"bold"}),i=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:B,content:I,animation:i})}static getHeaderInput({app:t,ui:e}){const B=e.screenMode===F.default.screenModeSmallLabel?"0.9em":"1em",I=e.screenMode===F.default.screenModeSmallLabel?"0.8em":"0.9em",i=c.default.getLayoutInlineBlock({width:"calc( 100% - 120px )",height:"55%",padding:"6px",background:l.default.whiteRGB,outline:"none",resize:"none",border:l.default.border,borderRadius:"3px",WebkitAppearance:"none"}),g=c.default.getContentBase({whiteSpace:"nowrap",fontSize:B,lineHeight:I,textAlign:"left",textIndent:"3%"}),Q=c.default.getAnimationBase();return c.default.get({layout:i,content:g,animation:Q})}static getHeaderUpdateIcon({app:t,ui:e}){const B=c.default.getLayoutFlex({width:"70px",height:"50px",alignItems:"center",justifyContent:"flex-start"}),I=c.default.getContentBase({cursor:"pointer"}),i=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:B,content:I,animation:i})}static getHeaderFindSelect({app:t,ui:e}){const B=c.default.getLayoutFlex({width:"100%",height:"50px",alignItems:"center",justifyContent:"center",background:"transparent",WebkitAppearance:"none",padding:"10px"}),I=c.default.getContentBase({outline:0,cursor:"pointer"}),i=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:B,content:I,animation:i})}static getOl({app:t,ui:e,ranks:B}){const I=l.default.getBlockSize({app:t,ui:e});let i="1fr";const F=(B&&B.length?B.length:0)+(""===t.tuned?0:1);for(let t=0;t<F;t++)i=2*I+"px "+i;const g=c.default.getLayoutGrid({gridTemplateRows:i,gridTemplateColumns:"1fr",height:`calc( 100% - ${2*I}px )`,overflowX:"hidden",overflowY:"scroll"}),Q=c.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return c.default.get({layout:g,content:{},animation:Q})}static getLiActive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:g.liHeight+"px",padding:"10px",borderBottom:l.default.border,zIndex:3,borderRight:"1px solid "+l.default.whiteRGB,background:l.default.whiteRGB}),e=c.default.getContentBase(),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getLiUnactive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:g.liHeight+"px",padding:"10px",borderBottom:l.default.border,background:l.default.offWhiteRGB,borderRight:l.default.border}),e=c.default.getContentBase(),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"20%"}),e=c.default.getContentBase(),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({textAlign:"left"}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getBottom(){const t=c.default.getLayoutBlock({width:"100%",height:"50px"}),e=c.default.getContentBase(),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getBottomIcon(){const t=c.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:`url(${i.default.protcol}:${i.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 15%",backgroundSize:"20px 20px",backgroundRepeat:"no-repeat"}),e=c.default.getContentBase(),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getBottomPost(){const t=c.default.getLayoutInlineBlock({width:"80%",flexGrow:2}),e=c.default.getContentBase({lineHeight:2,textAlign:"left"}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(2)),c=I(B(1));class l{constructor(t){return{menuShare:l.getMenuShare(t),header:l.getHeader(t),ul:l.getUl(t),liGoWeb:l.getLiGoWeb(t),liTwitter:l.getLiTwitter(t),liFacebook:l.getLiFacebook(t),liEmbed:l.getLiEmbed(t),liEmbedInput:l.getLiEmbedInput(t),shareLabel:l.getShareLabel(t)}}static get headTabUpdate(){return{div:{position:"absolute",top:"13px",right:"10px",transform:"scale(0.5)"}}}static getCommonLayout({app:t,ui:e}){const B={position:"fixed",width:"90%",height:"fit-content",minHeight:"fit-content",maxHeight:"fit-content",top:`calc( 100% + ${c.default.getBlockSize({app:t,ui:e})}px)`,left:"5%",flexFlow:"column",border:c.default.border,borderRadius:"5px",boxShadow:""+c.default.lineShadow};switch(e.screenMode){case F.default.screenModeSmallLabel:case F.default.screenModeMiddleLabel:B.width=""+100*c.default.widthRatio,B.left=(100-B.width)/2,B.width=B.width+"%",B.left=B.left+"%",B.zIndex=0;break;case F.default.screenModeLargeLabel:B.width="33.3%",B.left="33.3%",B.zIndex=3}return B}static getCommonTransform({app:t,ui:e}){return e.openLockMenu===F.default.openLockMenuLabelNo?"translate3d(0px, 0px, 0px)":"translate3d(0px, -75vh, 0px)"}static getPaddingLi({app:t,ui:e}){switch(e.screenMode){case F.default.screenModeSmallLabel:return"15px";case F.default.screenModeMiddleLabel:case F.default.screenModeLargeLabel:return"15px 15px 15px 20px"}}static getMenuShare({app:t,ui:e}){const B=l.getCommonLayout({app:t,ui:e}),I=i.default.getLayoutFlex(B),F=i.default.getContentBase(),g=i.default.getAnimationBase({transition:c.default.getTransition({app:t,ui:e}),transform:l.getCommonTransform({app:t,ui:e})});return i.default.get({layout:I,content:F,animation:g})}static getHeader({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"100%",height:c.default.getBlockSize({app:t,ui:e}),maxHeight:c.default.getBlockSize({app:t,ui:e}),background:c.default.whiteRGBA,boxShadow:c.default.lineShadow,padding:"0px 20px",zIndex:2}),I=i.default.getContentBase(),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getUl({app:t,ui:e}){const B=i.default.getLayoutBlock({width:"100%"}),I=i.default.getContentBase({}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getLiGoWeb({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"100%",height:c.default.getBlockSize({app:t,ui:e})+"px",padding:l.getPaddingLi({app:t,ui:e})}),I=i.default.getContentBase({cursor:"pointer"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getLiTwitter({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"100%",height:c.default.getBlockSize({app:t,ui:e})+"px",padding:l.getPaddingLi({app:t,ui:e}),background:c.default.whiteRGBA,boxShadow:c.default.lineShadow}),I=i.default.getContentBase({cursor:"pointer"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getLiFacebook({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"100%",height:c.default.getBlockSize({app:t,ui:e})+"px",padding:l.getPaddingLi({app:t,ui:e}),background:c.default.whiteRGBA,boxShadow:c.default.lineShadow}),I=i.default.getContentBase({cursor:"pointer"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getLiEmbed({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"100%",height:c.default.getBlockSize({app:t,ui:e})+"px",padding:l.getPaddingLi({app:t,ui:e}),background:c.default.whiteRGBA,boxShadow:c.default.lineShadow}),I=i.default.getContentBase({cursor:"pointer"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getLiEmbedInput({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"98%",height:"25px",margin:"0px 0px 0px 20px",border:c.default.border,borderRadius:"5px",padding:"5px"}),I=i.default.getContentBase({outline:0,cursor:"pointer"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getShareLabel({app:t,ui:e}){const B=i.default.getLayoutFlex({flexGrow:"1"}),I=i.default.getContentBase({color:"inherit",justifyContent:"flex-start",textIndent:"20px",textAlign:"left"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(7)),F=I(B(0)),c=I(B(1));class l{constructor(t){return{self:l.getSelf(t),upper:l.getUpper(t),upperChild:l.getUpperChild(t),upperTitle:l.getUpperTitle(t),upperTimeago:l.getUpperTimeago(t),bottom:l.getBottom(t),bottomIcon:l.getBottomIcon(t),bottomPost:l.getBottomPost(t)}}static get bubblestampScale(){return 2}static get stampScale(){return 1}static getSelf({app:t,ui:e}){const B=e.isBubblePost?"5px 0":"0",I=e.isBubblePost?"5px 0":"0",i=(e.isBubblePost,"40px"),c="calc( 100% - 0px )",l=F.default.getLayoutBlock({width:c,minWidth:"calc( 100% - 20px )",maxWidth:c,height:"auto",minHeight:i,margin:I,padding:B}),g=F.default.getContentBase(),Q=F.default.getAnimationBase();return F.default.get({layout:l,content:g,animation:Q})}static getFixTimeMarker({app:t,ui:e}){return{...l.getTimeMarker({app:t,ui:e}),position:"fixed"}}static getTimeMarker({app:t,ui:e}){const B=F.default.getLayoutFlex({width:"18%",height:"auto",margin:"15px auto 10px auto",padding:"5px 10px",background:c.default.darkLightRGBA,borderRadius:"20px"}),I=F.default.getContentBase({color:c.default.whiteRGB,letterSpacing:"2px"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getUpper({app:t,ui:e}){const B=e.isBubblePost?"flex":"none",I=F.default.getLayoutFlex({display:B,justifyContent:"space-between",height:"22px"}),i=F.default.getContentBase({fontSize:"0.9em"}),c=F.default.getAnimationBase();return F.default.get({layout:I,content:i,animation:c})}static getUpperChild({app:t,ui:e}){const B=F.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"center",flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%"}),I=F.default.getContentBase({textAlign:"left",textIndent:"10px"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getUpperTitle({app:t,ui:e}){const B=F.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:6,width:"60%",minWidth:"60%",maxWidth:"60%",margin:"0px 15px 0px 5px"}),I=F.default.getContentBase({textAlign:"left",whiteSpace:"nowrap",wordBreak:"break-all"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getUpperTimeago({app:t,ui:e}){const B=F.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:2,padding:"0px 20px 0px 0px",width:"20%",minWidth:"20%",maxWidth:"20%"}),I=F.default.getContentBase({textAlign:"right",fontSize:"0.75em",letterSpacing:"0.5px"}),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getBottom({app:t,ui:e}){const B=F.default.getLayoutFlex({padding:"0px 10px 0px 0px"}),I=F.default.getContentBase(),i=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:i})}static getBottomIcon({app:t,ui:e}){const B=F.default.getLayoutBlock({flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%",height:c.default.getFaviconSize({app:t,ui:e})+"px",minHeight:"40px",backgroundImage:`url(${i.default.protcol}:${i.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 50%",backgroundSize:c.default.getFaviconSize({app:t,ui:e})+"px",backgroundRepeat:"no-repeat"}),I=F.default.getContentBase(),l=F.default.getAnimationBase();return F.default.get({layout:B,content:I,animation:l})}static getBottomPost({app:t,ui:e}){const B=e.isBubblePost?c.default.themeRGBA:"none",I=e.isBubblePost?c.default.whiteRGBA:"rgba(160, 160, 160)",i=e.isBubblePost?"20px 20px 20px 30px":"0px",l=F.default.getLayoutFlex({justifyContent:"flex-start",flexGrow:8,width:"75%",minWidth:"75%",maxWidth:"75%",minHeight:"40px",background:B,padding:i,margin:"0px 5% 0px 0px",borderRadius:"10px"}),g=F.default.getContentBase({color:I,textAlign:"left",cursor:"pointer",wordWrap:"break-word",overflowWrap:"break-word"}),Q=F.default.getAnimationBase();return F.default.get({layout:l,content:g,animation:Q})}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(5)),g=I(B(3)),Q=I(B(24));class U{constructor(t){return{self:U.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 5}static get marginRightMag(){return 1}static get marginLeft(){return Math.floor(.05*window.innerWidth)}static get marginRight(){return U.marginBase*U.marginRightMag}static get height(){return 50}static getSelfWidth({app:t,ui:e}){let B="0";const I=U.marginLeft+U.marginRight+Q.default.getTotalWidth({app:t,ui:e});switch(e.screenMode){case i.default.screenModeSmallLabel:B=`calc( 100% - ${I}px )`;break;case i.default.screenModeMiddleLabel:B=`calc( 100% - ${g.default.getWidth({app:t,ui:e},!0)+I}px )`;break;case i.default.screenModeLargeLabel:B=`calc( ${100-l.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!0)+I}px )`}return B}static getSelfLeft({app:t,ui:e}){let B="0px";switch(e.screenMode){case i.default.screenModeSmallLabel:B="0px";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:B=g.default.getWidth({app:t,ui:e},!0)}return B}static getSelf({app:t,ui:e}){const B=t.isMediaCh?"block":"none",I=U.getSelfWidth({app:t,ui:e}),i=U.getSelfLeft({app:t,ui:e}),l=F.default.getLayoutBlock({display:B,position:"fixed",top:c.default.getBlockSize({app:t,ui:e})+15+"px",left:i,margin:`0px ${U.marginRight}px 0px ${U.marginLeft}px`,width:I,height:U.height+"px"});return F.default.get({layout:l,content:{},animation:{}})}}e.default=U},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1)),l=I(B(9));class g{constructor(t){return{notifs:g.getNotifs(t),self:g.getSelf(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get selfHeight(){return 40}static getNotifsDisplay({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?"block":"none"}static getNotifsHeight({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?e.isOpenPosts?"0px":e.isOpenNotif?c.default.getBlockSize({app:t,ui:e})+g.selfHeight+"px":g.selfHeight+"px":"0px"}static getNotifs({app:t,ui:e}){const B=g.getNotifsDisplay({app:t,ui:e}),I=g.getNotifsHeight({app:t,ui:e}),i=F.default.getLayoutBlock({display:B,position:"absolute",top:"0px",width:"100%",height:I,overflow:"visible"}),c=F.default.getContentBase(),l=F.default.getAnimationBase();return F.default.get({layout:i,content:c,animation:l})}static getSelf({app:t,ui:e}){const B=g.getNotifsDisplay({app:t,ui:e}),I=l.default.getOlWidth({app:t,ui:e},!0),i=(100-I)/2,Q=F.default.getLayoutBlock({display:B,position:"absolute",top:0,width:I+"%",height:g.selfHeight+"px",background:c.default.whiteRGBA,marginLeft:i+"%",borderTop:c.default.border,borderLeft:c.default.border,borderRight:c.default.border,borderRadius:"3px 3px 0px 0px"}),U=F.default.getContentBase({textAlign:"left"}),s=F.default.getAnimationBase({transform:"translate3d(0px, 40px, 0px)",transition:c.default.transitionNotif+"ms"});return F.default.get({layout:Q,content:U,animation:s})}static getBottom({app:t,ui:e}){return F.default.get({layout:{width:"100%"},content:{},animation:{}})}static getBottomIcon({app:t,ui:e}){return F.default.get({layout:{},content:{},animation:{}})}static getBottomPost({app:t,ui:e}){const B={lineHeight:"0.8",whiteSpace:"nowrap",color:F.default.fontBaseRGB};return F.default.get({layout:{overflow:"hidden",padding:"15px 15px 15px 0px",background:"none"},content:B,animation:{}})}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1));class c{constructor(t){return{self:c.getSelf(t),linksUl:c.getLinksUl(t),linksLi:c.getLinksLi(t),linksLiActive:c.getLinksLiActive(t),linksLiUnactive:c.getLinksLiUnactive(t),linkMenuUl:c.getLinkMenuUl(t),linkMenuLi:c.getLinkMenuLi(t),linksTabActive:c.getLinksTabActive(t),linksTabUnactive:c.getLinksTabUnactive(t),linksTabLast:c.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return F.default.themeRGB}static get unactiveColor(){return F.default.fontBaseRGB}static getSelfDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getLinksUlOevrflowY({app:t,ui:e}){return e.isOpenLinks?"scroll":"hidden"}static getSelf({app:t,ui:e}){const B=c.getSelfDisplay({app:t,ui:e}),I=i.default.getLayoutFlex({display:B,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),F=i.default.getContentBase({});return i.default.get({layout:I,content:F,animation:{}})}static getLinksUl({app:t,ui:e}){const B=c.getLinksUlOevrflowY({app:t,ui:e}),I=i.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflowX:"hidden",overflowY:B,overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),l=i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e})});return i.default.get({layout:I,content:{},animation:l})}static getLinksLi({app:t,ui:e}){const B=c.size+"px",I=i.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:B,minHeight:B,maxHeight:B,background:F.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),l=i.default.getContentBase({cursor:"pointer"}),g=i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e})});return i.default.get({layout:I,content:l,animation:g})}static getLinksLiActive({app:t,ui:e}){const B=c.getLinksLi({app:t,ui:e});return B.background=F.default.whiteRGB,B.color=F.default.fontBaseRGB,B}static getLinksLiUnactive({app:t,ui:e}){const B=c.getLinksLi({app:t,ui:e});return B.background=F.default.calmRGB,B.color=F.default.fontBaseRGB,B}static getLinkMenuUl({app:t,ui:e}){const B=c.size+"px",I=i.default.getLayoutFlex({minHeight:B,height:B,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),l=i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e})});return i.default.get({layout:I,content:{},animation:l})}static getLinkMenuLi({app:t,ui:e}){const B=c.size-4+"px",I=i.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:B,minHeight:B,maxHeight:B,background:F.default.reliefRGB,borderRadius:"5px"}),l=i.default.getContentBase({cursor:"pointer",color:F.default.whiteRGB}),g=i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e})});return i.default.get({layout:I,content:l,animation:g})}static getLinksTabActive({app:t,ui:e}){const B={};return B.background=F.default.whiteRGBA,B.color=F.default.fontBaseRGB,B}static getLinksTabUnactive({app:t,ui:e}){return c.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){const B={margin:"5px 0px 0px 0px"};return B}}e.default=c},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(0)),c=I(B(1));class l{constructor(t){return{self:l.getSelf(t)}}static getTop({app:t,ui:e}){return 0}static getSelfTransform({app:t,ui:e},B=""){return e.extensionMode===i.default.extensionModeExtBottomLabel?e.isDispPosts?"translate3d(0px, -100%, 0px)":"translate3d(0px, 0%, 0px)":"translate3d(0px, 0px, 0px)"}static getSelfTransition({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?(e.isDispPosts,c.default.transitionOn+"ms"):"0ms"}static getSelf({app:t,ui:e}){const B=F.default.getLayoutFlex({position:"fixed",top:l.getTop({app:t,ui:e}),justifyContent:"flex-start",alignItems:"flex-start",height:"100%"}),I=F.default.getContentBase(),i=F.default.getAnimationBase({transform:l.getSelfTransform({app:t,ui:e}),transition:l.getSelfTransition({app:t,ui:e})});return F.default.get({layout:B,content:I,animation:i})}}e.default=l},function(t,e,B){"use strict";function I(t){var e,B=t.Symbol;return"function"==typeof B?B.observable?e=B.observable:(e=B("observable"),B.observable=e):e="@@observable",e}B.d(e,"a",(function(){return I}))},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(45)),F=I(B(47)),c=I(B(94)),l=I(B(11)),g=I(B(98)),Q=I(B(99)),U=I(B(100)),s=I(B(12)),d=I(B(104));class n{constructor(){this.id=l.default.APP_TYPES.PORTAL,this.store=F.default(),this.parentHref=location.href,this.bootOption=new g.default(this.id);const t=new U.default(this.bootOption),e=new c.default(t),B={...t,...e};this.store.dispatch({...B,type:"INIT_API"}),this.api=this.api.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise(t=>{this.conned=t,this.wsApi=new i.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage})}api(t,e={},B){t===n.SET_CALLBACK_METHOD&&B&&(this.callback=B),this.postMessage(t,e)}postMessage(t,e={}){const B={id:e.id?e.id:this.id,type:Q.default.CLIENT_TO_WSAPI_TYPE,method:t,params:e};this.wsApi.postMessage(B)}onMessage(t){const{currentTarget:e,data:B}=t,{type:I,method:i,params:F}=B;if(e instanceof Worker&&I===Q.default.WSAPI_TO_CLIENT_TYPE){const t=Q.default.convertApiToClientActionType(i),{ioType:e,exeMethod:B}=Q.default.getMessageTypes(t),I={...F,type:t};this.store.dispatch(I),this.exePublicCallback(e,B,I),"WS_CONSTRUCTED"===i&&this.conned(this)}}onError(t){console.warn(t)}exePublicCallback(t,e,B){this.callback&&(t!==s.default.API_RESPONSE_TYPE_EMIT&&t!==s.default.API_RESPONSE_TYPE_BROADCAST||this.callback(t,e,B))}}const a=()=>{(new n).boot().then(t=>{window.talknAPI=new d.default(t)})};"complete"===window.top.document.readyState?a():window.onload=()=>a()},function(t,e,B){t.exports=function(){return B(46)('!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=45)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==n.getType(t)&&"Null"!==n.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||("function() {}"===e||("function (){}"===e||("function () {}"===e||"()=>{}"===e)))}create(t){const e=this.constructor.name;n.getType(t);return Object.keys(t).forEach(r=>{let i,s,o=null,a=!1,u=!1,c=()=>{},l=null;if("Object"===n.getType(t[r])){i=t[r];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,u=i.isAcceptBlank?i.isAcceptBlank:u,o=!e&&i.def?i.def:o,l=e||!i.value&&""!==i.value?i:i.value,l=e&&o?o:l,s=n.getType(l),c=i.valid?i.valid:c}else l=t[r],o=l,a=a,u=u,s=n.getType(l),c=c;const f=t=>{let i=null;const o=`${e}.${r}`,f=l,d=s,h=t,p=n.getType(t);return p!==s&&(i=`SCHEMA_TYPE : ${o} [validType: ${s}][paramsType: ${p}]`),a&&null===t&&(i="SCHEMA_IS_ACCEPT_NULL :  "+o),u&&""===t&&(i="SCHEMA_IS_ACCEPT_BLANK :  "+o),"Function"===n.getType(c)&&c(t)&&(i="SCHEMA_YOUR_VALID_METHOD :  "+o),{pointer:o,validValue:f,validType:d,paramsValue:h,paramsType:p,error:i}},{pointer:d,validValue:h,validType:p,paramsValue:g,paramsType:y,error:T}=f(l);if(null===T)Object.defineProperty(this,r,{get:()=>l,set:t=>{const e=f(l);if(null===T)return l=t,{...this,[r]:l};throw this.validWarn(e),T},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw T;console.warn(T)}}),this}canSet(t,e){try{const r=this[t];if(void 0===r)return!0;if(null===r)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:n}=this[t]=e;return!n&&(this[t]=r,!0)}catch(r){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),"BAD CAN SET: "+r}}merge(t={},e=!0){try{const r=n.getType(t),i=Object.keys(t);if(i.length>0){let n={...this};return i.forEach(e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?n[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))}),"Array"===r?(n=Object.values(n),e?new this.constructor(n):n):e?new this.constructor(n):n}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${n.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${n.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach(r=>{let n=t[r];"Object"===n.constructor.name&&(n.type||n.default||(n=this.toJSON(n))),n.default||""===n.default||0===n.default?e[r]=n.default:e[r]=n}),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=n},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:["requestLoginType"]},requestPrivateState:{user:["uid","href"]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),r=e[0].split("[")[0];let n;return n=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:r,actionType:n,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertExtToClientActionType(t,e){return e=s.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,r){const n=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=s.map[n];let u={[s.REDUX_ACTION_KEY]:n};return Object.keys(a).forEach(t=>{u[t]||(u[t]={}),a[t].forEach(n=>{if(!u[t][n]){let s=e[t][n];r&&r[t]&&i.default.isSet(r[t][n])&&(s=r[t][n]),u[t][n]=s}})}),Object.keys(o).forEach(t=>{u[t]||(u[t]={}),o[t].forEach(e=>{u[t][e]||(u[t][e]=r)})}),u}static getResponseState(t,e,r){const n=e.type,i=s.map[n][`response${t}State`];let o={[s.REDUX_ACTION_KEY]:n};return Object.keys(i).forEach(t=>{if(!r[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const n=i[t];let s=r[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===n?o={...o,[t]:s}:n.forEach(n=>{if(void 0===r[t][n])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${n}`;o={...o,[t]:{...o[t],[n]:r[t][n]}}})}}),o}static getRequestActionState(t,e=null,r=null){return"string"==typeof e&&null===r?{type:t}:"object"==typeof e&&"object"==typeof r?{...e,...r,type:t}:"string"==typeof e&&"object"==typeof r?{...r,type:t}:{...e,type:t}}}e.default=s},function(t,e){var r,n,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(t){r=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=a(d);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new p(t,e)),1!==c.length||l||a(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){function n(t){if(t)return function(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}(t)}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},n.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<n.length;i++)if((r=n[i])===e||r.fn===e){n.splice(i,1);break}return this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var n=0,i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,e);return this},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,r){var n,i=r(62),s=r(32),o=r(64),a=r(65),u=r(66);"undefined"!=typeof ArrayBuffer&&(n=r(67));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;e.protocol=3;var d=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},h=i(d),p={type:"error",data:"parser error"},g=r(68);function y(t,e,r){for(var n=new Array(t.length),i=a(t.length,r),s=function(t,r,i){e(r,(function(e,r){n[t]=r,i(e,n)}))},o=0;o<t.length;o++)s(o,t[o],i)}e.encodePacket=function(t,r,n,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof n&&(i=n,n=null);var s=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&s instanceof ArrayBuffer)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var i=t.data,s=new Uint8Array(i),o=new Uint8Array(1+i.byteLength);o[0]=d[t.type];for(var a=0;a<s.length;a++)o[a+1]=s[a];return n(o.buffer)}(t,r,i);if(void 0!==g&&s instanceof g)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(f)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},r,!0,n)},i.readAsArrayBuffer(t.data)}(t,r,n);var i=new Uint8Array(1);i[0]=d[t.type];var s=new g([i.buffer,t.data]);return n(s)}(t,r,i);if(s&&s.base64)return function(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n)}(t,i);var o=d[t.type];return void 0!==t.data&&(o+=n?u.encode(String(t.data),{strict:!1}):String(t.data)),i(""+o)},e.encodeBase64Packet=function(t,r){var n,i="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var s=new FileReader;return s.onload=function(){var t=s.result.split(",")[1];r(i+t)},s.readAsDataURL(t.data)}try{n=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var o=new Uint8Array(t.data),a=new Array(o.length),u=0;u<o.length;u++)a[u]=o[u];n=String.fromCharCode.apply(null,a)}return i+=btoa(n),r(i)},e.decodePacket=function(t,r,n){if(void 0===t)return p;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return p;var i=t.charAt(0);return Number(i)==i&&h[i]?t.length>1?{type:h[i],data:t.substring(1)}:{type:h[i]}:p}i=new Uint8Array(t)[0];var s=o(t,1);return g&&"blob"===r&&(s=new g([s])),{type:h[i],data:s}},e.decodeBase64Packet=function(t,e){var r=h[t.charAt(0)];if(!n)return{type:r,data:{base64:!0,data:t.substr(1)}};var i=n.decode(t.substr(1));return"blob"===e&&g&&(i=new g([i])),{type:r,data:i}},e.encodePayload=function(t,r,n){"function"==typeof r&&(n=r,r=null);var i=s(t);if(r&&i)return g&&!f?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n);if(!t.length)return n("0:");y(t,(function(t,n){e.encodePacket(t,!!i&&r,!1,(function(t){n(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return n(e.join(""))}))},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);var i;if("function"==typeof r&&(n=r,r=null),""===t)return n(p,0,1);for(var s,o,a="",u=0,c=t.length;u<c;u++){var l=t.charAt(u);if(":"===l){if(""===a||a!=(s=Number(a)))return n(p,0,1);if(a!=(o=t.substr(u+1,s)).length)return n(p,0,1);if(o.length){if(i=e.decodePacket(o,r,!1),p.type===i.type&&p.data===i.data)return n(p,0,1);if(!1===n(i,u+s,c))return}u+=s,a=""}else a+=l}return""!==a?n(p,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){if(!t.length)return r(new ArrayBuffer(0));y(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){return r(null,t)}))}),(function(t,e){var n=e.reduce((function(t,e){var r;return t+(r="string"==typeof e?e.length:e.byteLength).toString().length+r+2}),0),i=new Uint8Array(n),s=0;return e.forEach((function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++)n[o]=t.charCodeAt(o);r=n.buffer}i[s++]=e?0:1;var a=r.byteLength.toString();for(o=0;o<a.length;o++)i[s++]=parseInt(a[o]);i[s++]=255;for(n=new Uint8Array(r),o=0;o<n.length;o++)i[s++]=n[o]})),r(i.buffer)}))},e.encodePayloadAsBlob=function(t,r){y(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),i=0;i<t.length;i++)n[i]=t.charCodeAt(i);t=n.buffer,e[0]=0}var s=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),o=new Uint8Array(s.length+1);for(i=0;i<s.length;i++)o[i]=parseInt(s[i]);if(o[s.length]=255,g){var a=new g([e.buffer,o.buffer,t]);r(null,a)}}))}),(function(t,e){return r(new g(e))}))},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var i=t,s=[];i.byteLength>0;){for(var a=new Uint8Array(i),u=0===a[0],c="",l=1;255!==a[l];l++){if(c.length>310)return n(p,0,1);c+=a[l]}i=o(i,2+c.length),c=parseInt(c);var f=o(i,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var d=new Uint8Array(f);f="";for(l=0;l<d.length;l++)f+=String.fromCharCode(d[l])}s.push(f),i=o(i,c)}var h=s.length;s.forEach((function(t,i){n(e.decodePacket(t,r,!0),i,h)}))}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(20)),o=n(r(8)),a=n(r(77));class u extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const r=t.ch?t.ch:"/",n=t.id?t.id:"",a=i.default.isSet(t.isMediaCh)?t.isMediaCh:u.getIsMediaCh(r),c=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,l=t.rootCh?t.rootCh:r,f=i.default.isSet(t.isRootCh)?t.isRootCh:l===r,d=t.rootTitle?t.rootTitle:"talkn",h=u.getMediaSrc(t.protocol,r),p=u.getMediaType(h,t),g=t&&t.tuned?t.tuned:"",y=u.getDispThreadType(t,a),T=!i.default.isSet(t.multistream)||t.multistream,E=t&&t.findType?t.findType:o.default.findTypeAll,m=t&&t.offsetFindId?t.offsetFindId:u.defaultOffsetFindId,S=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:u.defaultOffsetFindId,_=t&&t.offsetSingleFindId?t.offsetSingleFindId:u.defaultOffsetFindId,C=t&&t.offsetMultiFindId?t.offsetMultiFindId:u.defaultOffsetFindId,A=t&&t.offsetChildFindId?t.offsetChildFindId:u.defaultOffsetFindId,v=t&&t.offsetLogsFindId?t.offsetLogsFindId:u.defaultOffsetFindId,I=t.inputPost?t.inputPost:"",b=!!t.inputStampId&&t.inputStampId,P=t.inputCurrentTime?t.inputCurrentTime:0,O=t.inputSearch?t.inputSearch:"",w=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,R=t&&t.actioned?t.actioned:"",M=i.default.isSet(t.debug)?t.debug:"";return this.create({id:n,isRootCh:f,isLinkCh:c,isMediaCh:a,rootCh:l,rootTitle:d,chType:p,dispThreadType:y,tuned:g,multistream:T,findType:E,offsetFindId:m,offsetTimelineFindId:S,offsetSingleFindId:_,offsetMultiFindId:C,offsetChildFindId:A,offsetLogsFindId:v,inputPost:I,inputStampId:b,inputCurrentTime:P,inputSearch:O,isToggleMultistream:w,actioned:R,debug:M})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[u.mediaTypeMp3,u.mediaTypeMp4,u.mediaTypeM4a]}static get mediaChTagTypes(){return{[u.mediaTypeMp3]:u.mediaTagTypeAudio,[u.mediaTypeMp4]:u.mediaTagTypeVideo,[u.mediaTypeM4a]:u.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:u.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(u.mediaChTagTypes),r=e.length;let n="html";for(let i=0;i<r;i++){const r=new RegExp(`.${e[i]}$`);if(t.match(r)){n=u.mediaChTagTypes[e[i]];break}}return n}static validInputPost(t){return!!/\\r\\n$|\\n$|\\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(t)?"ONLY NEW LINE":/^\\s+$/g.test(t)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return u.isAudioContentType(t)||u.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(u.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(u.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\\/$/,"")}static getIsMediaCh(t){return u.mediaChs.some(e=>{const r=new RegExp(`.${e}/$|.${e}$`);return t.match(r)})}static isActiveMultistream({app:t,ui:e},r=""){return e.menuComponent===a.default.menuComponentRankLabel&&t.dispThreadType===u.dispThreadTypeMulti}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?u.dispThreadTypeTimeline:u.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},r,n,i=""){let s="";const o=t&&t.dispThreadType?t.dispThreadType:u.dispThreadTypeMulti;return s=(t=u.getStepDispThreadType({app:t,ranks:e},r,n,i)).dispThreadType,{app:t,stepTo:`${o} to ${s}`}}static getStepDispThreadType({app:t,ranks:e},r={},n,i){const s=t||{};if(s.offsetFindId=u.defaultOffsetFindId,r.isMediaCh)return s.dispThreadType=u.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:u.defaultOffsetFindId,s.isLinkCh="Links"===i||"findMediaCh"===i||"ToMedia"===i,s.isMediaCh=!0,s;if("BackToRootCh"===i&&(s.isLinkCh=!1),"Links"===i&&e.length>0){const t=e.some(t=>t.ch===n||t.ch===n+"/");if(!t)return s.offsetFindId=u.defaultOffsetFindId,s.dispThreadType=u.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===n?s.multistream?s.dispThreadType=u.dispThreadTypeMulti:s.dispThreadType=u.dispThreadTypeSingle:s.dispThreadType=u.dispThreadTypeChild,s}}e.default=u},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5)),s=n(r(80)),o=n(r(21)),a=n(r(22)),u=n(r(40));class c{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:r,postsMulti:n,postsSingle:s,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return r;case i.default.dispThreadTypeMulti:return n;case i.default.dispThreadTypeSingle:return s;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:r,posts:n}=t,o=n&&n.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new u.default,t.postsChild=[],t.postsLogs=[],r.dispThreadType){case i.default.dispThreadTypeTimeline:t=c.getAnyActionPostsTimeline(t,n,e,o);break;case i.default.dispThreadTypeMulti:t.postsMulti=o?n:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=o?n:[];break;case i.default.dispThreadTypeChild:t.postsChild=o?n:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=o?n:[]}return t}static getAnyActionPostsTimeline(t,e,r,n){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new o.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new o.default,t.postsTimelineStock=new a.default,n)){const r=e.length;for(let n=0;n<r;n++)0===e[n].currentTime?t.postsTimeline.push(e[n]):t.postsTimelineStock.push(e[n])}return t}}e.default=c},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(2)),s={PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(13)),s=n(r(1)),o=n(r(0)),a=n(r(5));class u extends o.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const r=u.isWindowObj(t)?u.constructorFromWindow(t,e):t;return this.create(r)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const r=!!e.ch&&e.ch,n=u.getCh(e,r);let i={};return i.ch=n,i.chs=["/"],i.hasSlash=!!e.hasslash&&o.default.getBool(e.hasslash),i.protocol="talkn:",i.contentType="",i.charset="UTF-8",i.host="",i.favicon=u.getDefaultFavicon(),i.findType=u.findTypeAll,r?(i.protocol=u.getProtocol(r),i.host=u.getHost(r),i.chs=r.chs&&r.chs.length>0?r.chs:u.getChs(n)):(i.protocol=location.protocol?location.protocol:"????:",i.chs=t.chs&&t.chs.length>0?t.chs:u.getChs(n),i.contentType=document.contentType?document.contentType:"",i.charset=document.charset?document.charset:"",i.host=location.host?location.host:"",i.favicon=u.getFaviconFromWindow(window)),i.title=u.getDefaultTitle(),i.metas=[],i.serverMetas={},i.clientMetas={},i.emotions={},i.links=[],i.h1s=[],i.audios=[],i.videos=[],i.layer=u.getLayer(i.ch),i.mediaIndex=[],i.postCnt=0,i.multiPostCnt=0,i.isSelfCh=u.getIsSelfCh("",i.ch),i.createTime="",i.updateTime="",i}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const n="/"===t.slice(-1)?t:t+"/";if("/"!==n){const t=n.split("/"),i=t.length;let s="";for(var r=1;r<i;r++)""!==t[r]&&(s+=t[r],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):i.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=u.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",t.document,null,2,null).stringValue,r="http://",n="https://",i=location.host;if(e.indexOf(r)||e.indexOf(n)){const t=r+i+(e||"/favicon.ico");return 1===t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,r,n={}){let i={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return i.isCreate=u.getStatusCreate(r),i.isRequireUpsert=u.getStatusIsRequireUpsert(t,n,i.isCreate),i.isMultistream=u.getStatusIsMultistream(e),i.isToggleMultistream=u.getStatusIsToggleMultistream(e),i.isMediaCh=u.getStatusIsMediaCh(t.ch),i}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,r=!1){if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,n=new Date,s=n.getFullYear(),o=n.getMonth(),a=n.getDate(),u=n.getHours(),c=(n.getMinutes(),new Date(s,o,a,u-i.default.findOneThreadActiveHour).getTime());return!!r||e<c}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=u.findTypes[u.findTypeHtml],r=u.findTypes[u.findTypeMusic],n=u.findTypes[u.findTypeVideo];let i;if(t&&""!==t){let s="";t.indexOf(";")>0&&(s=t.split(";")[0]),e.includes(s)&&(i=u.findTypeHtml),r.includes(s)&&(i=u.findTypeMusic),n.includes(s)&&(i=u.findTypeVideo)}return i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=u},function(t,e,r){(function(n){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))}),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=r(50)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,r(2))},function(t,e){e.encode=function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},e.decode=function(t){for(var e={},r=t.split("&"),n=0,i=r.length;n<i;n++){var s=r[n].split("=");e[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return e}},function(t,e){t.exports=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){(function(n){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))}),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=r(69)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,r(2))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(7)),s=n(r(75)),o=n(r(2)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_DOMAIN:c,DEVELOPMENT_DOMAIN:l,SUB_DOMAINS:f,PORTS:d}=i.default,h=s.default.hostname(),p=function(t){if("browser"===o.default.title){if(t===i.default.DEVELOPMENT_DOMAIN){const t=Number(location.port);return t===i.default.PORTS.DEVELOPMENT||t===i.default.PORTS.DEVELOPMENT_API?i.default.DEVELOPMENT:i.default.LOCALHOST}return i.default.PRODUCTION}return t.indexOf(i.default.AWS_HOST_KEY)>=0?i.default.PRODUCTION:i.default.DEVELOPMENT}(h),g={client:"talkn.client.js",api:"talkn.api.js",ext:"talkn.ext.js"},y=p===u,T=p===a?c:l,E=`${f.WWW}.${T}`,m=`${f.API}.${T}`,S=y?`${T}:${d.DEVELOPMENT_API}/${g.api}`:m+"/v1",_=y?`${T}:${d.DEVELOPMENT}/${g.client}`:`${f.CLIENT}.${T}`,C=`${f.DESC}.${T}`,A=`${f.PORTAL}.${T}`,v=`${f.ASSETS}.${T}`,I=v+"/img/",b={domain:T,env:p,files:g,hostName:h,apiURL:m,apiAccessURL:S,wwwURL:E,descURL:C,portalURL:A,clientURL:_,assetsURL:v,autoURL:`${f.AUTO}.${T}`,extURL:`${f.EXT}.${T}`,ownURL:`${f.OWN}.${T}`,transactionURL:`${f.TRANSACTION}.${T}`,assetsImgPath:I,assetsIconPath:v+"/icon/",assetsJsPath:v+"/js/",sessionURL:`${f.SESSION}.${T}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${I}talkn_logo_html.png`,Music:`//${I}talkn_logo_music.png`,Video:`//${I}talkn_logo_video.png`}};e.default={...b}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(113));class s{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(s.inputs).forEach(t=>{s.inputs[t].forEach(e=>{this.belongCoverTypes[e]=t})}),Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(t);const e=s.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL}),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=s.defaultModelKey,e=0,r=!0){let n=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const r=o[t],s=i[r];if(r>e)break;n=s}return r?n+1:n}static get inputs(){return{[s.TYPES.LIKE.LABEL]:[1,2,3,4,5],[s.TYPES.MONEY.LABEL]:[100],[s.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[s.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[s.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[s.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[s.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[s.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[s.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[s.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=s},function(t,e,r){var n=r(51)("socket.io-parser"),i=r(3),s=r(54),o=r(26),a=r(27);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=f;var c=e.ERROR+\'"encode error"\';function l(t){var r=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(r+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(r+=t.nsp+","),null!=t.id&&(r+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return c;r+=i}return n("encoded %j as %s",t,r),r}function f(){this.reconstructor=null}function d(t){this.reconPack=t,this.buffers=[]}function h(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,r){(n("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){s.removeBlobs(t,(function(t){var r=s.deconstructPacket(t),n=l(r.packet),i=r.buffers;i.unshift(n),e(i)}))}(t,r):r([l(t)])},i(f.prototype),f.prototype.add=function(t){var r;if("string"==typeof t)r=function(t){var r=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return h("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var s="";"-"!==t.charAt(++r)&&(s+=t.charAt(r),r!=t.length););if(s!=Number(s)||"-"!==t.charAt(r))throw new Error("Illegal attachments");i.attachments=Number(s)}if("/"===t.charAt(r+1))for(i.nsp="";++r;){if(","===(u=t.charAt(r)))break;if(i.nsp+=u,r===t.length)break}else i.nsp="/";var a=t.charAt(r+1);if(""!==a&&Number(a)==a){for(i.id="";++r;){var u;if(null==(u=t.charAt(r))||Number(u)!=u){--r;break}if(i.id+=t.charAt(r),r===t.length)break}i.id=Number(i.id)}if(t.charAt(++r)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(r));if(!(!1!==c&&(i.type===e.ERROR||o(c))))return h("invalid payload");i.data=c}return n("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type?(this.reconstructor=new d(r),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",r)):this.emit("decoded",r);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(r=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",r))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},d.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=s.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},d.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,r){"use strict";(function(t){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\nvar n=r(55),i=r(56),s=r(57);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError(\'"value" argument must not be a number\');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("\'offset\' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("\'length\' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=d(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError(\'"encoding" must be a valid string encoding\');var n=0|p(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|h(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):d(t,e);if("Buffer"===e.type&&s(e.data))return d(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError(\'"size" argument must be a number\');if(t<0)throw new RangeError(\'"size" argument must not be negative\')}function f(t,e){if(l(e),t=a(t,e<0?0:0|h(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function d(t,e){var r=e.length<0?0:0|h(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function h(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(t).length;default:if(n)return j(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return w(this,e,r);case"utf8":case"utf-8":return b(this,e,r);case"ascii":return P(this,e,r);case"latin1":case"binary":return O(this,e,r);case"base64":return I(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function T(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:E(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):E(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function E(t,e,r,n,i){var s,o=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,r/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var l=-1;for(s=r;s<a;s++)if(c(t,s)===c(e,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*o}else-1!==l&&(s-=s-l),l=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var f=!0,d=0;d<u;d++)if(c(t,s+d)!==c(e,d)){f=!1;break}if(f)return s}return-1}function m(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[r+o]=a}return o}function S(t,e,r,n){return V(j(e,t.length-r),t,r,n)}function _(t,e,r,n){return V(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function C(t,e,r,n){return _(t,e,r,n)}function A(t,e,r,n){return V(U(e),t,r,n)}function v(t,e,r,n){return V(function(t,e){for(var r,n,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function I(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function b(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,o,a,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=r)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&c)<<6|63&s)>127&&(l=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&c)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return l(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!s(t))throw new TypeError(\'"list" argument must be an Array of Buffers\');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(!u.isBuffer(o))throw new TypeError(\'"list" argument must be an Array of Buffers\');o.copy(n,i),i+=o.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?b(this,0,t):g.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),c=this.slice(n,i),l=t.slice(e,r),f=0;f<a;++f)if(c[f]!==l[f]){s=c[f],o=l[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return T(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return T(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return S(this,t,e,r);case"ascii":return _(this,t,e,r);case"latin1":case"binary":return C(this,t,e,r);case"base64":return A(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function P(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function O(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function w(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=x(t[s]);return i}function R(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function M(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function D(t,e,r,n,i,s){if(!u.isBuffer(t))throw new TypeError(\'"buffer" argument must be a Buffer instance\');if(e>i||e<s)throw new RangeError(\'"value" argument is out of bounds\');if(r+n>t.length)throw new RangeError("Index out of range")}function L(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,s=Math.min(t.length-r,2);i<s;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function N(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,s=Math.min(t.length-r,4);i<s;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function k(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function F(t,e,r,n,s){return s||k(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function Y(t,e,r,n,s){return s||k(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;r=new u(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUInt8=function(t,e){return e||M(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||M(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||M(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||M(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||M(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return e||M(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||M(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||M(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||M(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||M(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||M(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||M(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||M(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||M(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||D(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||D(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):L(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):L(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):N(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);D(this,t,e,r,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);D(this,t,e,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):L(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):L(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):N(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return F(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return F(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return Y(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return Y(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,s=n-r;if(this===t&&r<e&&e<n)for(i=s-1;i>=0;--i)t[i+e]=this[i+r];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+s),e);return s},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=u.isBuffer(t)?t:j(new u(t,n).toString()),a=o.length;for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var B=/[^+\\/0-9A-Za-z-_]/g;function x(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function U(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\\s+|\\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(28))},function(t,e,r){var n=r(60),i=r(18);t.exports=function(t){var e=t.xdomain,r=t.xscheme,s=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||n))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&s)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e){t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(t,e,r){var n=r(4),i=r(3);function s(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=s,i(s.prototype),s.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},s.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},s.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},s.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},s.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},s.prototype.onData=function(t){var e=n.decodePacket(t,this.socket.binaryType);this.onPacket(e)},s.prototype.onPacket=function(t){this.emit("packet",t)},s.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(38)),s=n(r(0));class o extends s.default{constructor(t){super(),this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const e=t?{...o.defaultValues,...t}:o.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:i.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";(function(t,n){var i,s=r(44);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:n;var o=Object(s.a)(i);e.a=o}).call(this,r(28),r(83)(t))},function(t,e){var r=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,i=t.indexOf("["),s=t.indexOf("]");-1!=i&&-1!=s&&(t=t.substring(0,i)+t.substring(i,s).replace(/:/g,";")+t.substring(s,t.length));for(var o=r.exec(t||""),a={},u=14;u--;)a[n[u]]=o[u]||"";return-1!=i&&-1!=s&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var r=1e3,n=6e4,i=60*n,s=24*i;function o(t,e,r,n){var i=e>=1.5*r;return Math.round(t/r)+" "+n+(i?"s":"")}t.exports=function(t,e){e=e||{};var a=typeof t;if("string"===a&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===a&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=s)return o(t,e,s,"day");if(e>=i)return o(t,e,i,"hour");if(e>=n)return o(t,e,n,"minute");if(e>=r)return o(t,e,r,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=s)return Math.round(t/s)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=n)return Math.round(t/n)+"m";if(e>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){(function(e){t.exports=function(t){return r&&e.isBuffer(t)||n&&(t instanceof ArrayBuffer||function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}(t))};var r="function"==typeof e&&"function"==typeof e.isBuffer,n="function"==typeof ArrayBuffer}).call(this,r(16).Buffer)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(58),i=r(35),s=r(3),o=r(15),a=r(36),u=r(37),c=r(9)("socket.io-client:manager"),l=r(34),f=r(74),d=Object.prototype.hasOwnProperty;function h(t,e){if(!(this instanceof h))return new h(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=e.parser||o;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=h,h.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)d.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},h.prototype.updateSocketIds=function(){for(var t in this.nsps)d.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},h.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},s(h.prototype),h.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},h.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},h.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},h.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},h.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},h.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},h.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},h.prototype.open=h.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=n(this.uri,this.opts);var r=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var s=a(r,"open",(function(){i.onopen(),t&&t()})),o=a(r,"error",(function(e){if(c("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout((function(){c("connect attempt timed out after %d",u),s.destroy(),r.close(),r.emit("error","timeout"),i.emitAll("connect_timeout",u)}),u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(s),this.subs.push(o),this},h.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},h.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},h.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},h.prototype.ondata=function(t){this.decoder.add(t)},h.prototype.ondecoded=function(t){this.emit("packet",t)},h.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},h.prototype.socket=function(t,e){var r=this.nsps[t];if(!r){r=new i(this,t,e),this.nsps[t]=r;var n=this;r.on("connecting",s),r.on("connect",(function(){r.id=n.generateId(t)})),this.autoConnect&&s()}function s(){~l(n.connecting,r)||n.connecting.push(r)}return r},h.prototype.destroy=function(t){var e=l(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},h.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(r){for(var n=0;n<r.length;n++)e.engine.write(r[n],t.options);e.encoding=!1,e.processPacketQueue()})))},h.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},h.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},h.prototype.close=h.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},h.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},h.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout((function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(r)}})}},h.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,r){var n=r(17),i=r(61),s=r(70),o=r(71);e.polling=function(t){var e=!1,r=!1,o=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,r=t.secure!==a}if(t.xdomain=e,t.xscheme=r,"open"in new n(t)&&!t.forceJSONP)return new i(t);if(!o)throw new Error("JSONP disabled");return new s(t)},e.websocket=o},function(t,e,r){var n=r(19),i=r(10),s=r(4),o=r(11),a=r(33),u=r(12)("engine.io-client:polling");t.exports=l;var c=null!=new(r(17))({xdomain:!1}).responseType;function l(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),n.call(this,t)}o(l,n),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(t){var e=this;function r(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(u("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){u("pre-pause polling complete"),--n||r()}))),this.writable||(u("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){u("pre-pause writing complete"),--n||r()})))}else r()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(t){var e=this;u("polling got data %s",t);s.decodePayload(t,this.socket.binaryType,(function(t,r,n){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u(\'ignoring poll - transport state "%s"\',this.readyState))},l.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},l.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,r)}))},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t}},function(t,e,r){(function(e){var n=r(63),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.exports=function t(r){if(!r||"object"!=typeof r)return!1;if(n(r)){for(var i=0,a=r.length;i<a;i++)if(t(r[i]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(r)||"function"==typeof ArrayBuffer&&r instanceof ArrayBuffer||s&&r instanceof Blob||o&&r instanceof File)return!0;if(r.toJSON&&"function"==typeof r.toJSON&&1===arguments.length)return t(r.toJSON(),!0);for(var u in r)if(Object.prototype.hasOwnProperty.call(r,u)&&t(r[u]))return!0;return!1}}).call(this,r(16).Buffer)},function(t,e,r){"use strict";var n,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),s={},o=0,a=0;function u(t){var e="";do{e=i[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function c(){var t=u(+new Date);return t!==n?(o=0,n=t):t+"."+u(o++)}for(;a<64;a++)s[i[a]]=a;c.encode=u,c.decode=function(t){var e=0;for(a=0;a<t.length;a++)e=64*e+s[t.charAt(a)];return e},t.exports=c},function(t,e){var r=[].indexOf;t.exports=function(t,e){if(r)return t.indexOf(e);for(var n=0;n<t.length;++n)if(t[n]===e)return n;return-1}},function(t,e,r){var n=r(15),i=r(3),s=r(73),o=r(36),a=r(37),u=r(9)("socket.io-client:socket"),c=r(10),l=r(32);t.exports=h;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=i.prototype.emit;function h(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}i(h.prototype),h.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[o(t,"open",a(this,"onopen")),o(t,"packet",a(this,"onpacket")),o(t,"close",a(this,"onclose"))]}},h.prototype.open=h.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},h.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},h.prototype.emit=function(t){if(f.hasOwnProperty(t))return d.apply(this,arguments),this;var e=s(arguments),r={type:(void 0!==this.flags.binary?this.flags.binary:l(e))?n.BINARY_EVENT:n.EVENT,data:e,options:{}};return r.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++),this.connected?this.packet(r):this.sendBuffer.push(r),this.flags={},this},h.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},h.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:n.CONNECT,query:t})}else this.packet({type:n.CONNECT})},h.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},h.prototype.onpacket=function(t){var e=t.nsp===this.nsp,r=t.type===n.ERROR&&"/"===t.nsp;if(e||r)switch(t.type){case n.CONNECT:this.onconnect();break;case n.EVENT:case n.BINARY_EVENT:this.onevent(t);break;case n.ACK:case n.BINARY_ACK:this.onack(t);break;case n.DISCONNECT:this.ondisconnect();break;case n.ERROR:this.emit("error",t.data)}},h.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?d.apply(this,e):this.receiveBuffer.push(e)},h.prototype.ack=function(t){var e=this,r=!1;return function(){if(!r){r=!0;var i=s(arguments);u("sending ack %j",i),e.packet({type:l(i)?n.BINARY_ACK:n.ACK,id:t,data:i})}}},h.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},h.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},h.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)d.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},h.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},h.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},h.prototype.close=h.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:n.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},h.prototype.compress=function(t){return this.flags.compress=t,this},h.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}}},function(t,e){var r=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return e.apply(t,n.concat(r.call(arguments)))}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(2)),s=n(r(7)),o=n(r(13));if("browser"===i.default.title){const{SUB_DOMAINS:t,DEVELOPMENT:e}=s.default,{env:r,domain:n}=o.default;o.default.mediaSecondInterval=200,o.default.screenMode={small:600,middle:960},o.default.defaultFavicon=`//${t.ASSETS}.${n}/favicon.ico`,o.default.portalPath=`//${t.PORTAL}.${n}/`,o.default.clientPath=`//${t.CLIENT}.${n}/`,o.default.assetsPath=`//${t.ASSETS}.${n}/`,o.default.sessionPath=`//${t.SESSION}.${n}/`,o.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"}}e.default=o.default},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(20));class o extends i.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",r=t&&t.utype?t.utype:"",n=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,u=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,c=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,l=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,f=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;t.requestLoginType&&t.requestLoginType;return this.create({uid:e,utype:r,tuned:n,multistreamed:i,actioned:s,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:l,offsetLogsFindId:f,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:t&&t.href?t.href:"/"}}e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){super();return this.create({liveCnt:0})}}e.default=s},function(t,e,r){"use strict";r.r(e),r.d(e,"__DO_NOT_USE__ActionTypes",(function(){return s})),r.d(e,"applyMiddleware",(function(){return y})),r.d(e,"bindActionCreators",(function(){return f})),r.d(e,"combineReducers",(function(){return c})),r.d(e,"compose",(function(){return g})),r.d(e,"createStore",(function(){return a}));var n=r(23),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},s={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function o(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function a(t,e,r){var i;if("function"==typeof e&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===r&&(r=e,e=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(a)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var u=t,c=e,l=[],f=l,d=!1;function h(){f===l&&(f=l.slice())}function p(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function g(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return h(),f.push(t),function(){if(e){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,h();var r=f.indexOf(t);f.splice(r,1),l=null}}}function y(t){if(!o(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error(\'Actions may not have an undefined "type" property. Have you misspelled a constant?\');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=u(c,t)}finally{d=!1}for(var e=l=f,r=0;r<e.length;r++){(0,e[r])()}return t}function T(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");u=t,y({type:s.REPLACE})}function E(){var t,e=g;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function r(){t.next&&t.next(p())}return r(),{unsubscribe:e(r)}}})[n.a]=function(){return this},t}return y({type:s.INIT}),(i={dispatch:y,subscribe:g,getState:p,replaceReducer:T})[n.a]=E,i}function u(t,e){var r=e&&e.type;return"Given "+(r&&\'action "\'+String(r)+\'"\'||"an action")+\', reducer "\'+t+\'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.\'}function c(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++){var i=e[n];0,"function"==typeof t[i]&&(r[i]=t[i])}var o,a=Object.keys(r);try{!function(t){Object.keys(t).forEach((function(e){var r=t[e];if(void 0===r(void 0,{type:s.INIT}))throw new Error(\'Reducer "\'+e+"\\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don\'t want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:s.PROBE_UNKNOWN_ACTION()}))throw new Error(\'Reducer "\'+e+"\\" returned undefined when probed with a random type. Don\'t try to handle "+s.INIT+\' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.\')}))}(r)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var n=!1,i={},s=0;s<a.length;s++){var c=a[s],l=r[c],f=t[c],d=l(f,e);if(void 0===d){var h=u(c,e);throw new Error(h)}i[c]=d,n=n||d!==f}return(n=n||a.length!==Object.keys(t).length)?i:t}}function l(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return l(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+\'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?\');var r={};for(var n in t){var i=t[n];"function"==typeof i&&(r[n]=l(i,e))}return r}function d(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function h(t,e){var r=Object.keys(t);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(t)),e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r}function p(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?h(r,!0).forEach((function(e){d(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):h(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function g(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function y(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return function(){var r=t.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},s=e.map((function(t){return t(i)}));return p({},r,{dispatch:n=g.apply(void 0,s)(r.dispatch)})}}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=s},function(t,e,r){"use strict";function n(t){var e,r=t.Symbol;return"function"==typeof r?r.observable?e=r.observable:(e=r("observable"),r.observable=e):e="@@observable",e}r.d(e,"a",(function(){return n}))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(46)),s=n(r(47));class o{constructor(t){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=t,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new s.default(this)}postMessage(t,e={},r){const n={id:this.id,type:i.default.WSAPI_TO_CLIENT_TYPE,method:t,params:e,methodBack:r};this.worker.postMessage(n)}onMessage(t){const{id:e,type:r,method:n,params:s}=t.data;r===i.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(n,s)}onMessageError(t){console.warn(t)}}e.default=o,new o(self)},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(1));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(i.default.API_TO_SERVER_REQUEST)?t.replace(i.default.API_TO_SERVER_REQUEST,i.default.API_TO_CLIENT_REQUEST):0===t.indexOf(i.default.SERVER_TO_API_EMIT)?t.replace(i.default.SERVER_TO_API_EMIT,i.default.API_TO_CLIENT_EMIT):0===t.indexOf(i.default.SERVER_TO_API_BROADCAST)?t.replace(i.default.SERVER_TO_API_BROADCAST,i.default.API_TO_CLIENT_BROADCAST):"API_TO_CLIENT[ACTION]:"+t}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return"EXT_TO_CLIENT[ACTION]:"+t}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(48)),s=n(r(13)),o=n(r(7)),a=n(r(1)),u=n(r(76)),c=n(r(82)),l=n(r(111)),f=n(r(112)),d=n(r(117));class h{constructor(t){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=t,this.webWorker.postMessage("WS_CONSTRUCTED")}static get server(){return s.default.env===o.default.DEVELOPMENT||s.default.env===o.default.LOCALHOST?o.default.DEVELOPMENT_DOMAIN:o.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(t){return!(!this.stores[t]||!this.ios[this.id])&&(this.id=t,!0)}exe(t,e){return this[t]&&"function"==typeof this[t]?(this[t](e),!0):!(!this.methods[t]||"function"!=typeof this.methods[t])&&(this.methods[t](e),!0)}onResponseChAPI(t){const e=(t=>e=>{const r=t(e);this.stores[this.id]&&this.stores[this.id].dispatch(r)})(d.default);this.on(t,e)}offResponseChAPI(t){this.off(t)}getIoParams(t){let e="";return Object.keys(t).forEach(r=>{if("id"===r)return;if("defaultProps"===r)return;const n=t[r];e+=`${r}=${encodeURIComponent(n)}&`}),e.replace(/&$/,"")}tune(t){if(!this.use(t.id)){this.id=t.id,this.stores[this.id]=c.default(),this.stores[this.id].subscribe(this.subscribe);const e=new u.default(t);this.stores[this.id].dispatch({...e,type:"SETUPED_API_STOREE"});const r=this.getIoParams(t),n=`${a.default.HTTPS_PROTOCOL}//${h.server}:${o.default.PORTS.SOCKET_IO}?${r}`;this.ios[this.id]=i.default(n,h.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(t.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(t){const e=t&&t.id?t.id:this.id;return!!this.ios[e]&&(this.ios[e].disconnect(),delete this.ios[e],delete this.stores[e],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id})}onRequestAPI(){const t=f.default,e=Object.keys(t),r=e.length,n=(t,e)=>(r,n=(()=>{}))=>{const i=this.stores[this.id].getState(),s=a.default.getRequestState(t,i,r),o=a.default.getRequestActionState(t,r),{requestState:u,actionState:c}=e(i,s,o);return this.publicCallbacks[u.type]=n,this.ios[this.id].emit(u.type,u),this.stores[this.id].dispatch(c)};for(let i=0;i<r;i++){const r=e[i],s=r.replace(a.default.API_TO_SERVER_REQUEST,""),o=t[r];this.methods[s]=n(r,o)}}onResponseMeAPI(){const t=(t=>e=>{const r=t(e);this.stores[this.id].dispatch(r)})(l.default);this.on(a.default.CATCH_ME_KEY,t)}on(t,e=(()=>{})){this.ios[this.id]._callbacks["$"+t]||this.ios[this.id].on(t,e)}off(t){this.ios[this.id]._callbacks["$"+t]&&this.ios[this.id].off(t)}subscribe(){const t=this.stores[this.id].getState();this.exeCallback(t.app.actioned,t),this.webWorker.postMessage(t.app.actioned,t)}exeCallback(t,e){const{actionType:r,actionName:n}=a.default.getSequenceActionMap(t);if(n!==a.default.API_BROADCAST_CALLBACK&&r===a.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[n]){const{posts:t,thread:r,user:i}=e;this.publicCallbacks[n](e,{posts:t,thread:r,uid:i.uid})}if(r===a.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[a.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:r,user:i}=e;this.publicCallbacks[a.default.API_BROADCAST_CALLBACK](n,{posts:t,thread:r,uid:i.uid})}}}e.default=h},function(t,e,r){var n=r(49),i=r(15),s=r(29),o=r(9)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i=n(t),u=i.source,c=i.id,l=i.path,f=a[c]&&l in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||f?(o("ignoring socket cache for %s",u),r=s(u,e)):(a[c]||(o("new io instance for %s",u),a[c]=s(u,e)),r=a[c]),i.query&&!e.query&&(e.query=i.query),r.socket(i.path,e)}e.protocol=i.protocol,e.connect=u,e.Manager=r(29),e.Socket=r(35)},function(t,e,r){var n=r(24),i=r(9)("socket.io-client:url");t.exports=function(t,e){var r=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\\/\\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),r=n(t));r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443"));r.path=r.path||"/";var s=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+s+":"+r.port,r.href=r.protocol+"://"+s+(e&&e.port===r.port?"":":"+r.port),r}},function(t,e,r){t.exports=function(t){function e(t){let e=0;for(let r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return n.colors[Math.abs(e)%n.colors.length]}function n(t){let r;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(r||i);e.diff=s,e.prev=r,e.curr=i,r=i,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return r;a++;const s=n.formatters[i];if("function"==typeof s){const n=t[a];r=s.call(e,n),t.splice(a,1),a--}return r}),n.formatArgs.call(e,t),(e.log||n.log).apply(e,t)}return o.namespace=t,o.enabled=n.enabled(t),o.useColors=n.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof n.init&&n.init(o),n.instances.push(o),o}function i(){const t=n.instances.indexOf(this);return-1!==t&&(n.instances.splice(t,1),!0)}function s(t,e){const r=n(this.namespace+(void 0===e?":":e)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},n.disable=function(){const t=[...n.names.map(o),...n.skips.map(o).map(t=>"-"+t)].join(",");return n.enable(""),t},n.enable=function(t){let e;n.save(t),n.names=[],n.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(e=0;e<i;e++)r[e]&&("-"===(t=r[e].replace(/\\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")));for(e=0;e<n.instances.length;e++){const t=n.instances[e];t.enabled=n.enabled(t.namespace)}},n.enabled=function(t){if("*"===t[t.length-1])return!0;let e,r;for(e=0,r=n.skips.length;e<r;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;e<r;e++)if(n.names[e].test(t))return!0;return!1},n.humanize=r(25),Object.keys(t).forEach(e=>{n[e]=t[e]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=e,n.enable(n.load()),n}},function(t,e,r){(function(n){function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG),t}(e=t.exports=r(52)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(s=i))})),t.splice(s,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,r(2))},function(t,e,r){function n(t){var r;function n(){if(n.enabled){var t=n,i=+new Date,s=i-(r||i);t.diff=s,t.prev=r,t.curr=i,r=i;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var u=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var i=e.formatters[n];if("function"==typeof i){var s=o[u];r=i.call(t,s),o.splice(u,1),u--}return r})),e.formatArgs.call(t,o);var c=n.log||e.log||console.log.bind(console);c.apply(t,o)}}return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),n.destroy=i,"function"==typeof e.init&&e.init(n),e.instances.push(n),n}function i(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=n.debug=n.default=n).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(t=n[r].replace(/\\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var s=e.instances[r];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(53),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var r=1e3,n=6e4,i=60*n,s=24*i;function o(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}t.exports=function(t,e){e=e||{};var a,u=typeof t;if("string"===u&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===u&&!1===isNaN(t))return e.long?o(a=t,s,"day")||o(a,i,"hour")||o(a,n,"minute")||o(a,r,"second")||a+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=n)return Math.round(t/n)+"m";if(t>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){var n=r(26),i=r(27),s=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);e.deconstructPacket=function(t){var e=[],r=t.data,s=t;return s.data=function t(e,r){if(!e)return e;if(i(e)){var s={_placeholder:!0,num:r.length};return r.push(e),s}if(n(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=t(e[a],r);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var u in e)o[u]=t(e[u],r);return o}return e}(r,e),s.attachments=e.length,{packet:s,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,r){if(!e)return e;if(e&&e._placeholder)return r[e.num];if(n(e))for(var i=0;i<e.length;i++)e[i]=t(e[i],r);else if("object"==typeof e)for(var s in e)e[s]=t(e[s],r);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var r=0,s=t;!function t(u,c,l){if(!u)return u;if(o&&u instanceof Blob||a&&u instanceof File){r++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:s=this.result,--r||e(s)},f.readAsArrayBuffer(u)}else if(n(u))for(var d=0;d<u.length;d++)t(u[d],d,u);else if("object"==typeof u&&!i(u))for(var h in u)t(u[h],h,u)}(s),r||e(s)}},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),o=n[0],a=n[1],u=new s(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),l=0,f=a>0?o-4:o;for(r=0;r<f;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[l++]=255&e);1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,s=[],o=0,a=r-i;o<a;o+=16383)s.push(l(t,o,o+16383>a?a:o+16383));1===i?(e=t[r-1],s.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],s.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return s.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=o.length;a<u;++a)n[a]=o[a],i[o.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,r){for(var i,s,o=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(n[(s=i)>>18&63]+n[s>>12&63]+n[s>>6&63]+n[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var s,o,a=8*i-n-1,u=(1<<a)-1,c=u>>1,l=-7,f=r?i-1:0,d=r?-1:1,h=t[e+f];for(f+=d,s=h&(1<<-l)-1,h>>=-l,l+=a;l>0;s=256*s+t[e+f],f+=d,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=n;l>0;o=256*o+t[e+f],f+=d,l-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(h?-1:1);o+=Math.pow(2,n),s-=c}return(h?-1:1)*o*Math.pow(2,s-n)},e.write=function(t,e,r,n,i,s){var o,a,u,c=8*s-i-1,l=(1<<c)-1,f=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:s-1,p=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+f>=1?d/u:d*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=l?(a=0,o=l):o+f>=1?(a=(e*u-1)*Math.pow(2,i),o+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),o=0));i>=8;t[r+h]=255&a,h+=p,a/=256,i-=8);for(o=o<<i|a,c+=i;c>0;t[r+h]=255&o,h+=p,o/=256,c-=8);t[r+h-p]|=128*g}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){t.exports=r(59),t.exports.parser=r(4)},function(t,e,r){var n=r(30),i=r(3),s=r(12)("engine.io-client:socket"),o=r(34),a=r(4),u=r(24),c=r(10);function l(t,e){if(!(this instanceof l))return new l(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=l,l.priorWebsocketSuccess=!1,i(l.prototype),l.protocol=a.protocol,l.Socket=l,l.Transport=r(19),l.transports=r(30),l.parser=r(4),l.prototype.createTransport=function(t){s(\'creating transport "%s"\',t);var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var r=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new n[t]({query:e,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,withCredentials:r.withCredentials||this.withCredentials,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},l.prototype.open=function(){var t;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},l.prototype.setTransport=function(t){s("setting transport %s",t.name);var e=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},l.prototype.probe=function(t){s(\'probing transport "%s"\',t);var e=this.createTransport(t,{probe:1}),r=!1,n=this;function i(){if(n.onlyBinaryUpgrades){var i=!this.supportsBinary&&n.transport.supportsBinary;r=r||i}r||(s(\'probe transport "%s" opened\',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!r)if("pong"===i.type&&"probe"===i.data){if(s(\'probe transport "%s" pong\',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,s(\'pausing current transport "%s"\',n.transport.name),n.transport.pause((function(){r||"closed"!==n.readyState&&(s("changing transport and sending upgrade packet"),d(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())}))}else{s(\'probe transport "%s" failed\',t);var o=new Error("probe error");o.transport=e.name,n.emit("upgradeError",o)}})))}function o(){r||(r=!0,d(),e.close(),e=null)}function a(r){var i=new Error("probe error: "+r);i.transport=e.name,o(),s(\'probe transport "%s" failed because of error: %s\',t,r),n.emit("upgradeError",i)}function u(){a("transport closed")}function c(){a("socket closed")}function f(t){e&&t.name!==e.name&&(s(\'"%s" works - aborting "%s"\',t.name,e.name),o())}function d(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",u),n.removeListener("close",c),n.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",f),e.open()},l.prototype.onOpen=function(){if(s("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){s("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},l.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s(\'socket receive: type "%s", data "%s"\',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else s(\'packet received with socket readyState "%s"\',this.readyState)},l.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},l.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){s("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},l.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},l.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var i={type:t,data:e,options:r};this.emit("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():e()})):this.upgrading?n():e()}function e(){t.onClose("forced close"),s("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return this},l.prototype.onError=function(t){s("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},l.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s(\'socket close with reason: "%s"\',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++)~o(this.transports,t[r])&&e.push(t[r]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,r){var n=r(17),i=r(31),s=r(3),o=r(11),a=r(12)("engine.io-client:polling-xhr"),u=r(18);function c(){}function l(t){if(i.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}}function f(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=l,t.exports.Request=f,o(l,i),l.prototype.supportsBinary=!0,l.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new f(t)},l.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),i=this;n.on("success",e),n.on("error",(function(t){i.onError("xhr post error",t)})),this.sendXhr=n},l.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},s(f.prototype),f.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new n(t),r=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&e.setRequestHeader(i,this.extraHeaders[i])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(r.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=f.requestsCount++,f.requests[this.index]=this)},f.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},f.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},f.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},f.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete f.requests[this.index],this.xhr=null}},f.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},f.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},f.prototype.abort=function(){this.cleanup()},f.requestsCount=0,f.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",d);else if("function"==typeof addEventListener){addEventListener("onpagehide"in u?"pagehide":"unload",d,!1)}function d(){for(var t in f.requests)f.requests.hasOwnProperty(t)&&f.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&e.push(n);return e}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e){t.exports=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var i=new Uint8Array(t),s=new Uint8Array(r-e),o=e,a=0;o<r;o++,a++)s[a]=i[o];return s.buffer}},function(t,e){function r(){}t.exports=function(t,e,n){var i=!1;return n=n||r,s.count=t,0===t?e():s;function s(t,r){if(s.count<=0)throw new Error("after called too many times");--s.count,t?(i=!0,e(t),e=n):0!==s.count||i||e(null,r)}}},function(t,e){\n/*! https://mths.be/utf8js v2.1.2 by @mathias */\nvar r,n,i,s=String.fromCharCode;function o(t){for(var e,r,n=[],i=0,s=t.length;i<s;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<s?56320==(64512&(r=t.charCodeAt(i++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),i--):n.push(e);return n}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return s(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return s(t);var r="";return 0==(4294965248&t)?r=s(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),r=s(t>>12&15|224),r+=u(t,6)):0==(4292870144&t)&&(r=s(t>>18&7|240),r+=u(t,12),r+=u(t,6)),r+=s(63&t|128)}function l(){if(i>=n)throw Error("Invalid byte index");var t=255&r[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(t){var e,s;if(i>n)throw Error("Invalid byte index");if(i==n)return!1;if(e=255&r[i],i++,0==(128&e))return e;if(192==(224&e)){if((s=(31&e)<<6|l())>=128)return s;throw Error("Invalid continuation byte")}if(224==(240&e)){if((s=(15&e)<<12|l()<<6|l())>=2048)return a(s,t)?s:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(s=(7&e)<<18|l()<<12|l()<<6|l())>=65536&&s<=1114111)return s;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var r=!1!==(e=e||{}).strict,n=o(t),i=n.length,s=-1,a="";++s<i;)a+=c(n[s],r);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;r=o(t),n=r.length,i=0;for(var u,c=[];!1!==(u=f(a));)c.push(u);return function(t){for(var e,r=t.length,n=-1,i="";++n<r;)(e=t[n])>65535&&(i+=s((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=s(e);return i}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++)r[t.charCodeAt(n)]=n;e.encode=function(e){var r,n=new Uint8Array(e),i=n.length,s="";for(r=0;r<i;r+=3)s+=t[n[r]>>2],s+=t[(3&n[r])<<4|n[r+1]>>4],s+=t[(15&n[r+1])<<2|n[r+2]>>6],s+=t[63&n[r+2]];return i%3==2?s=s.substring(0,s.length-1)+"=":i%3==1&&(s=s.substring(0,s.length-2)+"=="),s},e.decode=function(t){var e,n,i,s,o,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),f=new Uint8Array(l);for(e=0;e<u;e+=4)n=r[t.charCodeAt(e)],i=r[t.charCodeAt(e+1)],s=r[t.charCodeAt(e+2)],o=r[t.charCodeAt(e+3)],f[c++]=n<<2|i>>4,f[c++]=(15&i)<<4|s>>2,f[c++]=(3&s)<<6|63&o;return l}}()},function(t,e){var r=void 0!==r?r:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,n=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),i=n&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),s=r&&r.prototype.append&&r.prototype.getBlob;function o(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var r=new Uint8Array(t.byteLength);r.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=r.buffer}return e}return t}))}function a(t,e){e=e||{};var n=new r;return o(t).forEach((function(t){n.append(t)})),e.type?n.getBlob(e.type):n.getBlob()}function u(t,e){return new Blob(o(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=n?i?Blob:u:s?a:void 0},function(t,e,r){t.exports=function(t){function e(t){let e=0;for(let r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return n.colors[Math.abs(e)%n.colors.length]}function n(t){let r;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(r||i);e.diff=s,e.prev=r,e.curr=i,r=i,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return r;a++;const s=n.formatters[i];if("function"==typeof s){const n=t[a];r=s.call(e,n),t.splice(a,1),a--}return r}),n.formatArgs.call(e,t),(e.log||n.log).apply(e,t)}return o.namespace=t,o.enabled=n.enabled(t),o.useColors=n.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof n.init&&n.init(o),n.instances.push(o),o}function i(){const t=n.instances.indexOf(this);return-1!==t&&(n.instances.splice(t,1),!0)}function s(t,e){const r=n(this.namespace+(void 0===e?":":e)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},n.disable=function(){const t=[...n.names.map(o),...n.skips.map(o).map(t=>"-"+t)].join(",");return n.enable(""),t},n.enable=function(t){let e;n.save(t),n.names=[],n.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(e=0;e<i;e++)r[e]&&("-"===(t=r[e].replace(/\\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")));for(e=0;e<n.instances.length;e++){const t=n.instances[e];t.enabled=n.enabled(t.namespace)}},n.enabled=function(t){if("*"===t[t.length-1])return!0;let e,r;for(e=0,r=n.skips.length;e<r;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;e<r;e++)if(n.names[e].test(t))return!0;return!1},n.humanize=r(25),Object.keys(t).forEach(e=>{n[e]=t[e]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=e,n.enable(n.load()),n}},function(t,e,r){var n=r(31),i=r(11),s=r(18);t.exports=l;var o,a=/\\n/g,u=/\\\\n/g;function c(){}function l(t){n.call(this,t),this.query=this.query||{},o||(o=s.___eio=s.___eio||[]),this.index=o.length;var e=this;o.push((function(t){e.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.script&&(e.script.onerror=c)}),!1)}i(l,n),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),n.prototype.doClose.call(this)},l.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},l.prototype.doWrite=function(t,e){var r=this;if(!this.form){var n,i=document.createElement("form"),s=document.createElement("textarea"),o=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=o,i.method="POST",i.setAttribute("accept-charset","utf-8"),s.name="d",i.appendChild(s),document.body.appendChild(i),this.form=i,this.area=s}function c(){l(),e()}function l(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t=\'<iframe src="javascript:0" name="\'+r.iframeId+\'">\';n=document.createElement(t)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),l(),t=t.replace(u,"\\\\\\n"),this.area.value=t.replace(a,"\\\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&c()}:this.iframe.onload=c}},function(t,e,r){(function(e){var n,i,s=r(19),o=r(4),a=r(10),u=r(11),c=r(33),l=r(12)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{i=r(72)}catch(t){}var f=n||i;function d(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=n&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(f=i),s.call(this,t)}t.exports=d,u(d,s),d.prototype.name="websocket",d.prototype.supportsBinary=!0,d.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new f(t,e):new f(t):new f(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},d.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},d.prototype.write=function(t){var r=this;this.writable=!1;for(var n=t.length,i=0,s=n;i<s;i++)!function(t){o.encodePacket(t,r.supportsBinary,(function(i){if(!r.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate)("string"==typeof i?e.byteLength(i):i.length)<r.perMessageDeflate.threshold&&(s.compress=!1)}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(t){l("websocket closed before onclose event")}--n||a()}))}(t[i]);function a(){r.emit("flush"),setTimeout((function(){r.writable=!0,r.emit("drain")}),0)}},d.prototype.onClose=function(){s.prototype.onClose.call(this)},d.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},d.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t},d.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===d.prototype.name)}}).call(this,r(16).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var r=[],n=(e=e||0)||0;n<t.length;n++)r[n-e]=t[n];return r}},function(t,e){function r(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=r,r.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(t){this.ms=t},r.prototype.setMax=function(t){this.max=t},r.prototype.setJitter=function(t){this.jitter=t}},function(t,e){e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\\n",e.homedir=function(){return"/"}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5)),s=n(r(39)),o=n(r(78)),a=n(r(79)),u=n(r(6)),c=n(r(21)),l=n(r(22)),f=n(r(41)),d=n(r(8)),h=n(r(81));class p{constructor(t,e={}){this.bootOption=t,this.ranks=new o.default,this.menuLogs=new a.default(e.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new l.default,this.postsLogs=new u.default,this.analyze=new f.default,this.thread=new d.default(this.bootOption,e.thread),this.threadDetail=new d.default(this.bootOption,e.thread),this.app=new i.default(p.getAppParams(this.thread,this.bootOption,e)),this.user=new s.default(p.getUserParams(this,e)),this.actionLog=new h.default}static getAppParams(t,e,r){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){if(e&&e.user&&e.user.uid)return{...e.user};return{dispThreadType:t.thread.ch===t.app.rootCh?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=p},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(38));class o extends i.default{constructor(t={}){super();const e=t.iFrameId?t.iFrameId:"",r=o.getWidth(t),n=o.getHeight(t),s=t.postsHeight?t.postsHeight:0,a=o.getScreenMode(r),u=t.extensionMode?t.extensionMode:o.extensionModeExtNoneLabel,c=t.extensionWidth?t.extensionWidth:"0%",l=t.extensionHeight?t.extensionHeight:0,f=t&&t.threadScrollY?t.threadScrollY:0,d=o.getIsOpenPosts({height:n,extensionMode:u,extensionHeight:l}),h=!!t.isOpenSetting&&t.isOpenSetting,p=i.default.isSet(t.isOpenMenu)?t.isOpenMenu:o.getIsOpenMenu({screenMode:a}),g=a===o.screenModeDetailLabel||!!i.default.isSet(t.isOpenDetail)&&t.isOpenDetail,y=!!t.isOpenNewPost&&t.isOpenNewPost,T=!!t.isOpenNotif&&t.isOpenNotif,E=!!i.default.isSet(t.isOpenPostsSupporter)&&t.isOpenPostsSupporter,m=i.default.isSet(t.isOpenBoard)?t.isOpenBoard:o.getIsOpenBoard({screenMode:a}),S=!i.default.isSet(t.isBubblePost)||t.isBubblePost,_=!!i.default.isSet(t.isDispPosts)&&t.isDispPosts,C=!!i.default.isSet(t.isOpenLinks)&&t.isOpenLinks,A=!i.default.isSet(t.isTransition)||t.isTransition,v=t.menuComponent?t.menuComponent:o.getDefaultMenuComponent(),I=t.openLockMenu?t.openLockMenu:o.openLockMenuLabelNo,b=t.openInnerNotif?t.openInnerNotif:"",P=t.clicked?t.clicked:"",O=t.detailCh?t.detailCh:"/",w=t.inputPost?t.inputPost:"",R=!!t.inputStampId&&t.inputStampId,M=t.inputCurrentTime?t.inputCurrentTime:0,D=t.inputSearch?t.inputSearch:"",L=!i.default.isSet(t.isLoading)||t.isLoading;return this.create({iFrameId:e,width:r,height:n,postsHeight:s,screenMode:a,extensionMode:u,extensionWidth:c,extensionHeight:l,threadScrollY:f,isOpenPosts:d,isOpenSetting:h,isOpenMenu:p,isOpenDetail:g,isOpenNewPost:y,isOpenNotif:T,isOpenPostsSupporter:E,isOpenBoard:m,isBubblePost:S,isDispPosts:_,isOpenLinks:C,isTransition:A,menuComponent:v,openLockMenu:I,openInnerNotif:b,clicked:P,detailCh:O,inputPost:w,inputStampId:R,inputCurrentTime:M,inputSearch:D,isLoading:L})}static get openLockMenuLabelNo(){return"No"}static get openLockMenuLabelLike(){return"Like"}static get openLockMenuLabelShare(){return"Share"}static get openLockMenuLabelAbout(){return"About"}static get screenModeSmallLabel(){return"SMALL"}static get screenModeMiddleLabel(){return"MIDDLE"}static get screenModeLargeLabel(){return"LARGE"}static get screenModeIndexLabel(){return"MENU"}static get screenModeThreadLabel(){return"THREAD"}static get screenModeDetailLabel(){return"DETAIL"}static get screenModeSmallWidthPx(){return s.default.screenMode.small}static get screenModeMiddleWidthPx(){return s.default.screenMode.middle}static get extensionModeExtModalLabel(){return"Modal"}static get extensionModeExtBottomLabel(){return"Bottom"}static get extensionModeExtEmbedLabel(){return"Embed"}static get extensionModeExtNoneLabel(){return"None"}static get menuComponentUsersLabel(){return"Users"}static get menuComponentRankLabel(){return"Rank"}static get menuComponentLogsLabel(){return"Logs"}static get menuComponentSettingLabel(){return"Setting"}static getDefaultMenuComponent(){return o.menuComponentRankLabel}static getWidth(t){return t&&t.extensionWidth>0?t.extensionWidth:t&&t.width>0?t.width:"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return t&&t.extensionHeigt>0?t.extensionHeigt:t&&t.height>0?t.height:"object"==typeof window&&window.innerHeight?window.innerHeight:0}static getScreenMode(t=0){if(!t){if(window&&0===window.innerWidth||0===window.innerHeight)return;window&&window.innerWidth>0&&(t=window.innerWidth)}return"string"==typeof t&&(t=t.replace("px","")),o.screenModeSmallWidthPx>=t?o.screenModeSmallLabel:o.screenModeSmallWidthPx<=t&&o.screenModeMiddleWidthPx>=t?o.screenModeMiddleLabel:o.screenModeLargeLabel}static getIsOpenMenu(t){switch(t.screenMode){case o.screenModeSmallLabel:return!1;case o.screenModeMiddleLabel:case o.screenModeLargeLabel:return!0}}static getIsOpenBoard(t){switch(t.screenMode){case o.screenModeSmallLabel:return!1;case o.screenModeMiddleLabel:case o.screenModeLargeLabel:return!0}}static getIsOpenPosts(t,e=""){let{extensionMode:r,height:n,extensionHeight:i,extensionCloseHeight:s}=t;return r!==o.extensionModeExtBottomLabel&&r!==o.extensionModeExtModalLabel||("number"!=typeof n&&(n=Number(n)),"number"!=typeof i&&(i=Number(i)),0!==n&&i<=n)}static getUiUpdatedOpenFlgs({app:t,ui:e},r=""){switch(r){case"toggleMain":case"headerDetailIcon":switch(e.screenMode){case o.screenModeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case o.screenModeMiddleLabel:e.isOpenDetail?t.detailCh===t.rootCh?(e.isOpenDetail=!1,e.isOpenMenu=!0):(e.isOpenMenu=!1,e.isOpenDetail=!1):(e.isOpenMenu=!1,e.isOpenDetail=!0)}break;case"headerMenuIcon":switch(e.screenMode){case o.screenModeMiddleLabel:e.isOpenDetail,e.isOpenMenu=!0,e.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(e.screenMode){case o.screenModeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case o.screenModeMiddleLabel:e.isOpenMenu=!1,e.isOpenDetail=!0;case o.screenModeLargeLabel:e.isOpenMenu=!0,e.isOpenDetail=!0}}return e}}e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(42),s=n(r(84)),o=n(r(108));e.default=function(t={}){let e=[o.default.updateAction];return i.createStore(s.default,t,i.applyMiddleware(...e))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(42),s=n(r(85)),o=n(r(86)),a=n(r(87)),u=n(r(88)),c=n(r(89)),l=n(r(90)),f=n(r(91)),d=n(r(92)),h=n(r(93)),p=n(r(95)),g=n(r(97)),y=n(r(98)),T=n(r(99)),E=n(r(100)),m=n(r(102)),S=n(r(104)),_=n(r(105)),C=n(r(106)),A=n(r(107));e.reducerFiles={app:s.default,user:o.default,tuneCh:a.default,ranks:u.default,thread:c.default,threads:l.default,threadDetail:f.default,analyze:d.default,bootOption:h.default,setting:p.default,posts:g.default,postsTimeline:y.default,postsTimelineStock:T.default,postsTimelineZero:E.default,postsTimelineZeroAfter:m.default,postsMulti:S.default,postsSingle:_.default,postsChild:C.default,actioned:A.default},e.default=i.combineReducers(e.reducerFiles)},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(39));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(20));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new i.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:r}=e;if(r.ch===t.ch)return{...t,liveCnt:r.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const n=e.posts[0];if(n.ch===t.ch)return{...t,title:n.title,stampId:n.stampId,favicon:n.favicon,post:n.post}}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(6));e.default=(t=[],e)=>{let r=[],n=0;const s=(t,r)=>t.ch===e.app.rootCh||r.ch===e.app.rootCh?0:t.liveCnt<r.liveCnt?1:t.liveCnt>r.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(r=i.default.getDispPosts(e),n=r&&r.length?r.length:0,0===n?t:t.map(t=>e.thread.ch===t.ch?{...t,favicon:r[n-1].favicon,stampId:r[n-1].stampId,post:r[n-1].post}:t));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map(t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t).sort(s);case"SERVER_TO_API[BROADCAST]:post":return t.map(t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t);case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const r=[],n=e.rank.length;let i=e.rank[0];for(let s=0;s<n;s++){let n=e.rank[s];i=n.updateTime>i.updateTime?n:i,n.ch===t[0].ch&&(n={...n,liveCnt:t[0].liveCnt}),r.push(n)}return r.sort(s),r[0].faicon=i.favicon,r[0].post=i.post,r[0].stampId=i.stampId,r}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(8));e.default=(t=new i.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":return new i.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(43));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(8));e.default=(t=new i.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(41));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(94));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(r=>{e[t[r].name]=t[r].value}),e}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(96));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},r=t&&t.common?t.common:{},n=t&&t.server?t.server:{};return this.create({client:e,common:r,server:n})}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(6));e.default=(t=[],e)=>e.posts?new i.default(e.posts):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(21));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map(t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(22));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(101));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(103));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(6)),s=n(r(13));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let r=[];return t.length+e.postsMulti.length>s.default.findOneLimitCnt?(r=[...e.postsMulti,...t],r.slice(0,s.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(40));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(6));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(5)),o=n(r(6)),a=n(r(8)),u=n(r(43)),c=n(r(109));e.default={updateAction:t=>e=>r=>{const n=t.getState();r&&(r.app=r.app?{...n.app,...r.app}:n.app,r.app.actioned=r.type),l[r.type]&&(r=l[r.type](n,r)),r&&e(r)}};const l={"SERVER_TO_API[EMIT]:tune":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.tuned=e.thread.ch,e.app.detailCh=e.thread.ch,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=s.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=s.default.getMediaTypeFromSrc(t)}else e.app.chType=s.default.mediaTagTypeNo;return e},"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>((e={...o.default.getAnyActionPosts(e,t)}).thread=t.thread,e.app.offsetFindId=s.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.isMediaCh&&(e=c.default.setStoragePostsTimeline(e)),e.thread=t.thread,e),"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetTimelineFindId=s.default.defaultOffsetFindId,e.app.offsetMultiFindId=s.default.defaultOffsetFindId,e.app.offsetSingleFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e.app.offsetLogsFindId=s.default.defaultOffsetFindId,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e.posts=new o.default,e.postsMulti=new o.default,e.postsChild=new o.default,e.postsTimeline=new o.default,e.postsSingle=new o.default,e),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>(e.app.tuned=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[REQUEST]:post":(t,e)=>(e.app.inputStampId=0,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{if(t.thread.ch===e.thread.ch&&e.thread.emotions){if(Object.keys(e.thread.emotions).length>0){const r={...e.thread.emotions};e.thread.emotions={...t.thread.emotions},Object.keys(r).forEach(t=>{Object.keys(r[t]).forEach(n=>{e.thread.emotions[t][n]=e.thread.emotions[t][n]+r[t][n]})}),e.threadDetail={...e.thread}}}return console.log("MIDDLE WARE "+e.thread.ch),e.thread.ch=t.thread.ch,e=o.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=s.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e=o.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions={...t.threads[e.app.detailCh].emotions},e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread={...t.thread,...e.thread},e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const r=e.thread.ch;e.thread={...t.thread,...e.thread},e.thread.ch=r;const n=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=a.default.getFindTypeFromSrc(n),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.postsChild=[],e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let r=!1,{clientMetas:n}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(n).forEach((t,s)=>{n[t]&&""!==n[t]&&i[t]!==n[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),r=!0,e.thread.serverMetas[t]=n[t])}),r)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(7)),s=n(r(5)),o=n(r(110));function a(t,e){const{app:r}=t,{storageKey:n}=i.default;if(r.isRootCh){const{postsMulti:e,postsSingle:i}=t;o.default.setStorage(r.rootCh,n.postsMulti,e),o.default.setStorage(r.rootCh,n.postsSingle,i)}return{state:t,props:e}}function u(t){const{app:e,thread:r,postsTimeline:n}=t,{storageKey:s}=i.default;if(e.isMediaCh){const e=n&&n.length?n.length:0;let i=[],a=[];for(let t=0;t<e;t++)0===n[t].currentTime?i.push(n[t]):a.push(n[t]);t.postsTimeline=i,o.default.setStorage(r.ch,s.postsTimelineZero,i),o.default.setStorage(r.ch,s.postsTimeline,a)}return t}e.default={"SERVER_TO_API[BROADCAST]:post":a,"SERVER_TO_API[EMIT]:getMore":a,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:r}=t,{rootCh:n}=r,{storageKey:a}=i.default,u=r.dispThreadType===s.default.dispThreadTypeMulti?a.postSingle:a.postMulti;return o.default.setStorage(n,i.default.storageKey[u],[]),{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:r}=t.app;return o.default.setStorage(r,i.default.storageKey.app,t.app),{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:r}=t;return r.isMediaCh?{state:t=u(t),props:e}:a(t,e)},setStorageHtmlPosts:a,setStoragePostsTimeline:u,getStoragePostsTimeline:function(t){const{storageKey:e}=i.default,r=o.default.getStorage(t,e.postsTimeline);return"Array"===r.constructor.name?r:[]},getStoragePostsTimelineZero:function(t){const{storageKey:e}=i.default,r=o.default.getStorage(t,e.postsTimelineZero);return"Array"===r.constructor.name?r:[]}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(7));let s={};class o{static getBaseKey(t){return`${i.default.storageKey.baseKey}${t}`}static setStorage(t,e,r){if(e){const n=o.getBaseKey(t);if("undefined"!=typeof localStorage){let t=JSON.parse(localStorage.getItem(n));t=JSON.stringify({...t,[e]:r}),localStorage.setItem(n,t)}else{let t=s[n]?s[n]:{};t={...t,[e]:r},s[n]=t}return!0}return!1}static getStorage(t,e){const r=o.getBaseKey(t);if("undefined"!=typeof localStorage){const t=JSON.parse(localStorage.getItem(r));return t&&t[e]?t[e]:{}}{let t=s[r]?s[r]:{};return t[e]?t[e]:{}}}static getCaches(t){return{menuLogs:o.getStorage(t,i.default.storageKey.menuLogs),app:o.getStorage(t,i.default.storageKey.app),thread:o.getStorage(t,i.default.storageKey.thread),setting:o.getStorage(t,i.default.storageKey.setting)}}}e.default=o},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(1));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return{...t,type:e}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(1)),s=new(n(r(14)).default);let o={};Object.keys(i.default.map).forEach(t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,r)=>a[e.type]?a[e.type](t,e,r):{requestState:e,actionState:r}});const a={post:(t,e,r)=>{const{app:n}=e;return n.isMediaCh&&(n.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},n.inputStampId?Object.keys(s.balances).forEach(r=>{if(s.balances[r]&&t.thread.emotions[r]){const t=s.balances[r](n.inputStampId);t&&t.forEach(t=>{const n=Object.keys(t)[0],i=s.idKeyTypes[n];e.thread.emotions[r]||(e.thread.emotions[r]={}),e.thread.emotions[r][i]||(e.thread.emotions[r][i]=0),e.thread.emotions[r][i]=t[n]})}}):(r.app={...n},r.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:r}}};e.default=o},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(114)),s=n(r(115)),o=n(r(116));e.default={Plain:i.default,Russell:s.default,RussellSimple:o.default}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(14));class s{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,r)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(14));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,r)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(14));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,r)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(1));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return{...t,type:e}}}]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1NjaGVtYS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvU2VxdWVuY2UudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL0FwcC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdHMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2RlZmluZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvVGhyZWFkLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL2NvbW1vbi9jb25mLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9lbW90aW9ucy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvZ2xvYmFsVGhpcy5icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3QudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9jay50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvbWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NsaWVudC9jb25mL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Vc2VyLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1NpbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvQW5hbHl6ZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1RocmVhZHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL2FwaS93cy5hcGkud29ya2VyLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9Qb3N0TWVzc2FnZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvV3MudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLXhoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5YnVmZmVyLnNsaWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29zLWJyb3dzZXJpZnkvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3N0b3JlL1VpLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9SYW5rcy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvTWVudUxvZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3RNdWx0aS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvQWN0aW9uTG9ncy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvYXBpU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvYXBwLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy91c2VyLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy90dW5lQ2gudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3JhbmtzLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy90aHJlYWQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3RocmVhZHMudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3RocmVhZERldGFpbC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvYW5hbHl6ZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvYm9vdE9wdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvQm9vdE9wdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvc2V0dGluZy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvU2V0dGluZy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHMudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzVGltZWxpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzVGltZWxpbmVTdG9jay50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNUaW1lbGluZVplcm8udHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVaZXJvLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lWmVyb0FmdGVyLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyb0FmdGVyLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c011bHRpLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c1NpbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNDaGlsZC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvYWN0aW9uZWQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL21pZGRsZXdhcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL21hcFRvU3RhdGVUb1Byb3BzL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L29wZXJhdGlvbnMvVGFsa25TZXNzaW9uLnRzIiwid2VicGFjazovLy8uL2FwaS9hY3Rpb25zL3dzL3NlcnZlclRvQXBpRW1pdC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvYWN0aW9ucy93cy9hcGlUb1NlcnZlclJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2Vtb3Rpb25zL21vZGVsL2luZGV4LnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9lbW90aW9ucy9tb2RlbC9QbGFpbi50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vZW1vdGlvbnMvbW9kZWwvUnVzc2VsbC50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vZW1vdGlvbnMvbW9kZWwvUnVzc2VsbFNpbXBsZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvYWN0aW9ucy93cy9zZXJ2ZXJUb0FwaUJyYWRjYXN0LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU2NoZW1hIiwib3B0aW9uIiwidW5kZWZpbmVkIiwiY29uc3RydWN0b3IiLCJ2YWwiLCJnZXRUeXBlIiwiZm4iLCJmblN0cmluZyIsInRvU3RyaW5nIiwic3RhdGUiLCJjbGFzc05hbWUiLCJ0aGlzIiwia2V5cyIsImZvckVhY2giLCJ2YWx1ZXMiLCJ0eXBlIiwiZGVmIiwiaXNBY2NlcHROdWxsIiwiaXNBY2NlcHRCbGFuayIsInZhbGlkIiwiaXNFbXB0eU9iamVjdCIsImxlbmd0aCIsInZhbGlkRnVuYyIsIl92YWx1ZSIsImVycm9yIiwicG9pbnRlciIsInZhbGlkVmFsdWUiLCJ2YWxpZFR5cGUiLCJwYXJhbXNWYWx1ZSIsInBhcmFtc1R5cGUiLCJzZXQiLCJ2YWxpZFJlc3VsdCIsInZhbGlkV2FybiIsImNvbmZpZ3VyYWJsZSIsImVycm9yVGhyb3ciLCJjb25zb2xlIiwid2FybiIsImN1cnJlbnRWYWx1ZSIsImUiLCJwYXJhbXMiLCJpbW11dGFibGUiLCJvYmpLZXlzIiwibWVyZ2VkT2JqIiwiY2FuU2V0Iiwib2JqIiwianNvbk9iaiIsImRlZmF1bHQiLCJ0b0pTT04iLCJmdW5jIiwicmV0dXJuSW1tdXRhYmxlIiwiY29uY2F0IiwibWFwIiwiZmlsdGVyIiwicmVkdWNlIiwiZmluZCIsInNvcnQiLCJwdXNoIiwidW5zaGlmdCIsInJlc3VsdHMiLCJzaGlmdCIsInBvcCIsIlN0cmluZyIsImluZGV4T2YiLCJTZXF1ZW5jZSIsIkFQSV9SRVFVRVNUX1RZUEUiLCJNRVRIT0RfQ09MT04iLCJBUElfUkVTUE9OU0VfVFlQRV9FTUlUIiwiQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUIiwidHVuZSIsInJlcXVlc3RQdWJsaWNTdGF0ZSIsInJlcXVlc3RQcml2YXRlU3RhdGUiLCJ0aHJlYWQiLCJhcHAiLCJyZXNwb25zZUVtaXRTdGF0ZSIsInVzZXIiLCJzZXR0aW5nIiwicmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSIsImZldGNoUG9zdHMiLCJwb3N0cyIsImdldE1vcmUiLCJ1cGRhdGVUaHJlYWQiLCJjaGFuZ2VUaHJlYWQiLCJjaGFuZ2VUaHJlYWREZXRhaWwiLCJhZGRGaW5kQ2hpbGQiLCJyYW5rIiwicG9zdCIsInVwZGF0ZVRocmVhZFNlcnZlck1ldGFzIiwibG9naW4iLCJkaXNjb25uZWN0IiwibWV0aG9kIiwic3BsaXRlZCIsInNwbGl0Iiwic2VxdWVuY2UiLCJhY3Rpb25UeXBlIiwiYWN0aW9uTmFtZSIsImFjdGl2ZVJlc3BvbnNlTWFwIiwiZW1pdCIsImJyb2FkY2FzdCIsImlGcmFtZUlkIiwiY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZSIsIkFQSV9UT19TRVJWRVJfUkVRVUVTVCIsInJlcGxhY2UiLCJBUElfVE9fQ0xJRU5UX1JFUVVFU1QiLCJTRVJWRVJfVE9fQVBJX0VNSVQiLCJBUElfVE9fQ0xJRU5UX0VNSVQiLCJTRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCIsIkFQSV9UT19DTElFTlRfQlJPQURDQVNUIiwicmVkdXhTdGF0ZSIsInJlcXVlc3RQYXJhbXMiLCJlbmRwb2ludEtleSIsInJlcXVlc3RTdGF0ZSIsIlJFRFVYX0FDVElPTl9LRVkiLCJzdGF0ZUtleSIsImNvbHVtbk5hbWUiLCJpc1NldCIsInJlc3BvbnNlVHlwZSIsInVwZGF0ZVN0YXRlIiwicmVzcG9uc2VTY2hlbWEiLCJyZXNwb25zZVN0YXRlIiwidXBkYXRlU3RhdGVLZXkiLCJjb2x1bW5OYW1lcyIsInVwZGF0ZVN0YXRlVmFsdWUiLCJfaWQiLCJfX3YiLCJyZXF1ZXN0UGFyYW1zMSIsInJlcXVlc3RQYXJhbXMyIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIkVtaXR0ZXIiLCJtaXhpbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIl9jYWxsYmFja3MiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2IiLCJjYWxsYmFja3MiLCJzcGxpY2UiLCJzbGljZSIsImhhc0xpc3RlbmVycyIsImJhc2U2NGVuY29kZXIiLCJoYXNCaW5hcnkiLCJzbGljZUJ1ZmZlciIsImFmdGVyIiwidXRmOCIsIkFycmF5QnVmZmVyIiwiaXNBbmRyb2lkIiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInByb3RvY29sIiwicGFja2V0cyIsIm9wZW4iLCJjbG9zZSIsInBpbmciLCJwb25nIiwibWVzc2FnZSIsInVwZ3JhZGUiLCJwYWNrZXRzbGlzdCIsImVyciIsImRhdGEiLCJCbG9iIiwiYXJ5IiwiZWFjaCIsImRvbmUiLCJyZXN1bHQiLCJuZXh0IiwiZWFjaFdpdGhJbmRleCIsImVsIiwibXNnIiwiZW5jb2RlUGFja2V0IiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiY2FsbGJhY2siLCJidWZmZXIiLCJlbmNvZGVCYXNlNjRQYWNrZXQiLCJjb250ZW50QXJyYXkiLCJVaW50OEFycmF5IiwicmVzdWx0QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVuY29kZUFycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsInN0cmljdCIsImI2NGRhdGEiLCJiNjQiLCJyZWFkQXNEYXRhVVJMIiwiZnJvbUNoYXJDb2RlIiwidHlwZWQiLCJiYXNpYyIsImJ0b2EiLCJkZWNvZGVQYWNrZXQiLCJiaW5hcnlUeXBlIiwidXRmOGRlY29kZSIsImNoYXJBdCIsImRlY29kZUJhc2U2NFBhY2tldCIsInN1YnN0ciIsImRlY29kZSIsInRyeURlY29kZSIsIk51bWJlciIsInN1YnN0cmluZyIsInJlc3QiLCJlbmNvZGVQYXlsb2FkIiwiaXNCaW5hcnkiLCJlbmNvZGVQYXlsb2FkQXNCbG9iIiwiZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIiLCJkb25lQ2FsbGJhY2siLCJzZXRMZW5ndGhIZWFkZXIiLCJqb2luIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJhY2MiLCJyZXN1bHRBcnJheSIsImJ1ZmZlckluZGV4IiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwicGFyc2VJbnQiLCJiaW5hcnlJZGVudGlmaWVyIiwic2l6ZSIsImxlbmd0aEFyeSIsImJ1ZmZlclRhaWwiLCJidWZmZXJzIiwidGFpbEFycmF5IiwibXNnTGVuZ3RoIiwidG90YWwiLCJBcHAiLCJzdXBlciIsIm9mZnNldFRpbWVsaW5lRmluZElkIiwiZGVmYXVsdEZpbmRJZCIsIm9mZnNldFNpbmdsZUZpbmRJZCIsIm9mZnNldE11bHRpRmluZElkIiwib2Zmc2V0Q2hpbGRGaW5kSWQiLCJvZmZzZXRMb2dzRmluZElkIiwiY2giLCJpZCIsImlzTWVkaWFDaCIsImdldElzTWVkaWFDaCIsImlzTGlua0NoIiwicm9vdENoIiwiaXNSb290Q2giLCJyb290VGl0bGUiLCJzcmMiLCJnZXRNZWRpYVNyYyIsImNoVHlwZSIsImdldE1lZGlhVHlwZSIsInR1bmVkIiwiZGlzcFRocmVhZFR5cGUiLCJnZXREaXNwVGhyZWFkVHlwZSIsIm11bHRpc3RyZWFtIiwiZmluZFR5cGUiLCJmaW5kVHlwZUFsbCIsIm9mZnNldEZpbmRJZCIsImRlZmF1bHRPZmZzZXRGaW5kSWQiLCJpbnB1dFBvc3QiLCJpbnB1dFN0YW1wSWQiLCJpbnB1dEN1cnJlbnRUaW1lIiwiaW5wdXRTZWFyY2giLCJpc1RvZ2dsZU11bHRpc3RyZWFtIiwiYWN0aW9uZWQiLCJkZWJ1ZyIsIm1lZGlhVHlwZU1wMyIsIm1lZGlhVHlwZU1wNCIsIm1lZGlhVHlwZU00YSIsIm1lZGlhVGFnVHlwZUF1ZGlvIiwibWVkaWFUYWdUeXBlVmlkZW8iLCJnZXRNZWRpYVR5cGVGcm9tU3JjIiwibWVkaWFDaFRhZ1R5cGVLZXlzIiwibWVkaWFDaFRhZ1R5cGVzIiwibWVkaWFDaFRhZ1R5cGVMZW5ndGgiLCJtZWRpYVR5cGUiLCJyZWdFeHAiLCJSZWdFeHAiLCJtYXRjaCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJ3aWR0aCIsImlubmVySGVpZ2h0IiwiY29udGVudFR5cGUiLCJpc0F1ZGlvQ29udGVudFR5cGUiLCJpc1ZpZGVvQ29udGVudFR5cGUiLCJtZWRpYUNocyIsInNvbWUiLCJleHQiLCJyZWdleHAiLCJ1aSIsImNhbGxlZCIsIm1lbnVDb21wb25lbnQiLCJtZW51Q29tcG9uZW50UmFua0xhYmVsIiwiZGlzcFRocmVhZFR5cGVNdWx0aSIsImRpc3BUaHJlYWRUeXBlVGltZWxpbmUiLCJyYW5rcyIsInRocmVhZFN0YXR1cyIsInRvQ2giLCJjbGlja2VkIiwiYWZ0ZXJEaXNwVGhyZWFkVHlwZSIsImJlZm9yZURpc3BUaHJlYWRUeXBlIiwiZ2V0U3RlcERpc3BUaHJlYWRUeXBlIiwic3RlcFRvIiwidXBkYXRlZEFwcCIsImhhdmVNZW51SW5kZXgiLCJtaSIsImRpc3BUaHJlYWRUeXBlQ2hpbGQiLCJkaXNwVGhyZWFkVHlwZVNpbmdsZSIsIlBvc3RzIiwicG9zdHNUaW1lbGluZSIsInBvc3RzTXVsdGkiLCJwb3N0c1NpbmdsZSIsInBvc3RzQ2hpbGQiLCJwb3N0c0xvZ3MiLCJkaXNwVGhyZWFkVHlwZUxvZ3MiLCJhY3Rpb24iLCJleGlzdFBvc3RzIiwiZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZSIsInBvc3RzVGltZWxpbmVTdG9jayIsInBvc3RzTGVuZ3RoIiwiY3VycmVudFRpbWUiLCJkZWZpbmUiLCJQUk9EVUNUSU9OIiwiTE9DQUxIT1NUIiwiREVWRUxPUE1FTlQiLCJQUk9EVUNUSU9OX0lQIiwiSE9TVE5BTUUiLCJQUk9EVUNUSU9OX0RPTUFJTiIsIkRFVkVMT1BNRU5UX0RPTUFJTiIsIkFXU19IT1NUX0tFWSIsIlBPUlRTIiwiSFRUUCIsIkhUVFBTIiwiREVWRUxPUE1FTlRfQVBJIiwiUkVESVMiLCJNT05HTyIsIlNPQ0tFVF9JTyIsIlNVQl9ET01BSU5TIiwiV1dXIiwiQVBJIiwiREVTQyIsIlBPUlRBTCIsIkNMSUVOVCIsIkFTU0VUUyIsIlNFU1NJT04iLCJBVVRPIiwiT1dOIiwiRVhUIiwiVFJBTlNBQ1RJT04iLCJBUFBfVFlQRVMiLCJFWFRFTlNJT04iLCJVUkwiLCJ0d2l0dGVyIiwiZmFjZWJvb2siLCJhcHBzdG9yZSIsInBsYXlzdG9yZSIsInRhbGtuQ2xpZW50SnMiLCJ0YWxrbkFwaUpzIiwibm9Jbm5lck5vdGlmIiwic3RvcmFnZUtleSIsImJhc2VLZXkiLCJwb3N0c1RpbWVsaW5lWmVybyIsInRocmVhZHMiLCJUaHJlYWQiLCJib290T3B0aW9uIiwiY2hzIiwiVEFMS05fUFJPVE9DT0wiLCJjaGFyc2V0IiwiaG9zdCIsImZhdmljb24iLCJnZXREZWZhdWx0RmF2aWNvbiIsImdldERlZmF1bHRUaXRsZSIsIm1ldGFzIiwiZW1vdGlvbnMiLCJzZXJ2ZXJNZXRhcyIsImNsaWVudE1ldGFzIiwibGlua3MiLCJoMXMiLCJhdWRpb3MiLCJ2aWRlb3MiLCJsYXllciIsImdldExheWVyIiwibWVkaWFJbmRleCIsInBvc3RDbnQiLCJtdWx0aVBvc3RDbnQiLCJpc1NlbGZDaCIsImNyZWF0ZVRpbWUiLCJ1cGRhdGVUaW1lIiwiaXNXaW5kb3dPYmoiLCJjb25zdHJ1Y3RvckZyb21XaW5kb3ciLCJmaW5kVHlwZUh0bWwiLCJmaW5kVHlwZU11c2ljIiwiZmluZFR5cGVWaWRlbyIsImFsZXJ0IiwiYm9vdENoIiwiZ2V0Q2giLCJoYXNTbGFzaCIsImhhc3NsYXNoIiwiZ2V0Qm9vbCIsImdldFByb3RvY29sIiwiZ2V0SG9zdCIsImdldENocyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJnZXRGYXZpY29uRnJvbVdpbmRvdyIsImdldElzU2VsZkNoIiwiX2NoIiwiY2hBcnIiLCJjaExlbmd0aCIsIm5ld0NoIiwiZG9tYWluIiwiaHJlZiIsInUiLCJldmFsdWF0ZSIsInN0cmluZ1ZhbHVlIiwiaCIsImhzIiwidXJsIiwiaXNFeGlzdCIsInN0YXR1cyIsImRpc3BUeXBlIiwiaXNDcmVhdGUiLCJpc1JlcXVpcmVVcHNlcnQiLCJpc011bHRpc3RyZWFtIiwiZ2V0U3RhdHVzQ3JlYXRlIiwiZ2V0U3RhdHVzSXNSZXF1aXJlVXBzZXJ0IiwiZ2V0U3RhdHVzSXNNdWx0aXN0cmVhbSIsImdldFN0YXR1c0lzVG9nZ2xlTXVsdGlzdHJlYW0iLCJnZXRTdGF0dXNJc01lZGlhQ2giLCJ0aHJlYWRVcGRhdGVUaW1lIiwiZ2V0VGltZSIsIm5vdyIsIkRhdGUiLCJub3dZZWFyIiwiZ2V0RnVsbFllYXIiLCJub3dNb250aCIsImdldE1vbnRoIiwibm93RGF5IiwiZ2V0RGF0ZSIsIm5vd0hvdXIiLCJnZXRIb3VycyIsImFjdGl2ZVRpbWUiLCJnZXRNaW51dGVzIiwiZmluZE9uZVRocmVhZEFjdGl2ZUhvdXIiLCJmaW5kVHlwZXMiLCJzcGxpdGVkQ29udGVudFR5cGUiLCJpbmNsdWRlcyIsInN0ciIsInRvVXBwZXJDYXNlIiwibG9nIiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImNvbG9yIiwiaW5kZXgiLCJsYXN0QyIsInNhdmUiLCJuYW1lc3BhY2VzIiwic3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwibG9hZCIsImdldEl0ZW0iLCJERUJVRyIsIl9fbndqcyIsInRvTG93ZXJDYXNlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwiJDEiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJmb3JtYXR0ZXJzIiwiaiIsInYiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXMiLCJxcnkiLCJwYWlycyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhIiwiYiIsImhvc3ROYW1lIiwiaG9zdG5hbWUiLCJwb3J0IiwiZ2V0RW52IiwiZmlsZXMiLCJjbGllbnQiLCJhcGkiLCJpc0RldiIsInd3d1VSTCIsImFwaVVSTCIsImFwaUFjY2Vzc1VSTCIsImNsaWVudFVSTCIsImRlc2NVUkwiLCJwb3J0YWxVUkwiLCJhc3NldHNVUkwiLCJhc3NldHNJbWdQYXRoIiwiY29uZiIsImF1dG9VUkwiLCJleHRVUkwiLCJvd25VUkwiLCJ0cmFuc2FjdGlvblVSTCIsImFzc2V0c0ljb25QYXRoIiwiYXNzZXRzSnNQYXRoIiwic2Vzc2lvblVSTCIsImRlc2NyaXB0aW9uIiwiYXBpVmVyIiwiZmluZE9uZVBvc3RDbnQiLCJmaW5kT25lTGltaXRDbnQiLCJvZ3BJbWFnZXMiLCJIdG1sIiwiTXVzaWMiLCJWaWRlbyIsIkVtb3Rpb25zIiwiYmVsb25nQ292ZXJUeXBlcyIsImlkS2V5VHlwZXMiLCJ0eXBlc0FycmF5IiwiaW5wdXRzIiwibGFiZWwiLCJzdGFtcElkIiwiVFlQRVMiLCJJRCIsIkxBQkVMIiwibW9kZWwiLCJiYWxhbmNlcyIsInBsYWluIiwiUGxhaW4iLCJnZXRTYXZlQmFsYW5jZSIsInJ1c3NlbGwiLCJSdXNzZWxsIiwicnVzc2VsbFNpbXBsZSIsIlJ1c3NlbGxTaW1wbGUiLCJMSUtFIiwiSU5URVJFU1QiLCJESVNDT1ZFUlkiLCJTVU5OWSIsIlBFQUNFIiwiQ0hFRVIiLCJNT05FWSIsIlVOTElLRSIsIkxPVkUiLCJTVVBSSVNFIiwiRVhDSVRFIiwiSEFQUFkiLCJKT1kiLCJHTEFEIiwiU0FUSVNGQUNUSU9OIiwiQ09NRk9SVCIsIlJFTEFYIiwiVElSRUQiLCJTTEVFUFkiLCJTTEFDSyIsIkJPUklORyIsIk1FTEFOQ0hPTFkiLCJTQUQiLCJVTlBMRUFTQU5UIiwiRlJVU1RSQVRFRCIsIkRJU1NBVElTRklFRCIsIkFOR0VSIiwiV09SUlkiLCJGRUFSIiwiV09SUllfRkVBUiIsIm1vZGVsS2V5IiwiZGVmYXVsdE1vZGVsS2V5IiwidG90YWxOdW0iLCJhZGRaZXJvIiwiZ3JhcGhNYXhOdW0iLCJsaW1pdHMiLCIxIiwiNSIsIjEwIiwiMzAiLCI3MCIsIjEwMCIsIjI1MCIsIjUwMCIsIjc1MCIsIjEwMDAiLCI2IiwiMjAiLCI1MCIsImxpbWl0S2V5cyIsImxpbWl0TGVuZ3RoIiwia2V5TnVtIiwiZW1vdGlvbkxpbWl0TnVtIiwiMiIsIjMiLCI0IiwiMTAwMSIsIjEwMDIiLCIxMTAxIiwiMTEwMiIsIjExMDMiLCIxMjAxIiwiMTIwMiIsIjEyMDMiLCIxMjA0IiwiMTMwMSIsIjEzMDIiLCIxMzAzIiwiMTMwNCIsIjEzMDUiLCIxMzA2IiwiMTMwNyIsIjE0MDEiLCIxNDAyIiwiMTUwMSIsIjE1MDIiLCIxNTAzIiwiMTUwNCIsIjE2MDEiLCIxNjAyIiwiMTYwMyIsIjE3MDEiLCIxNzAyIiwiMTcwMyIsIjE4MDEiLCIxODAyIiwiMTgwMyIsIjIwMDEiLCIyMDAyIiwiMjAwMyIsIjIwMDQiLCIyMDA1IiwiMjEwMSIsIjIxMDIiLCIyMTAzIiwiMjIwMSIsIjIyMDIiLCIyMjAzIiwiMjIwNCIsIjIyMDUiLCIyMzAxIiwiMjMwMiIsIjIzMDMiLCIyNDAxIiwiMjQwMiIsIjI0MDMiLCIyNDA0IiwiMjUwMSIsIjI1MDIiLCIyNTAzIiwiMjYwMSIsIjI2MDIiLCIyNzAxIiwiMjcwMiIsIjI3MDMiLCIyNzA0IiwiMjcwNSIsIjI3MDYiLCIyODAxIiwiMjgwMiIsIjI4MDMiLCIyODA0IiwiMjgwNSIsIjI4MDYiLCIyOTAxIiwiMjkwMiIsIjI5MDMiLCIyOTA0IiwiMjkwNSIsIjI5MDYiLCJiaW5hcnkiLCJpc0FycmF5IiwiaXNCdWYiLCJFbmNvZGVyIiwidHlwZXMiLCJDT05ORUNUIiwiRElTQ09OTkVDVCIsIkVWRU5UIiwiQUNLIiwiRVJST1IiLCJCSU5BUllfRVZFTlQiLCJCSU5BUllfQUNLIiwiRGVjb2RlciIsIkVSUk9SX1BBQ0tFVCIsImVuY29kZUFzU3RyaW5nIiwiYXR0YWNobWVudHMiLCJuc3AiLCJwYXlsb2FkIiwidHJ5U3RyaW5naWZ5IiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJyZWNvblBhY2siLCJyZW1vdmVCbG9icyIsImJsb2JsZXNzRGF0YSIsImRlY29uc3RydWN0aW9uIiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrIiwiZW5jb2RlQXNCaW5hcnkiLCJhZGQiLCJidWYiLCJwYXJzZSIsInRyeVBhcnNlIiwiZGVjb2RlU3RyaW5nIiwidGFrZUJpbmFyeURhdGEiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiX19wcm90b19fIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsIlR5cGVFcnJvciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJzdGFydCIsImVuZCIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIngiLCJ5IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaXNGaW5pdGUiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJ0cmltIiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwiZHN0IiwiaGFzQ09SUyIsImdsb2JhbFRoaXMiLCJvcHRzIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbmFibGVzWERSIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsInNlbGYiLCJGdW5jdGlvbiIsInBhcnNlciIsIlRyYW5zcG9ydCIsInBhdGgiLCJzZWN1cmUiLCJxdWVyeSIsInRpbWVzdGFtcFBhcmFtIiwidGltZXN0YW1wUmVxdWVzdHMiLCJyZWFkeVN0YXRlIiwiYWdlbnQiLCJzb2NrZXQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImlzUmVhY3ROYXRpdmUiLCJleHRyYUhlYWRlcnMiLCJsb2NhbEFkZHJlc3MiLCJvbkVycm9yIiwiZGVzYyIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwic2VuZCIsIm9uT3BlbiIsIndyaXRhYmxlIiwib25EYXRhIiwib25QYWNrZXQiLCJQb3N0IiwiZGVmYXVsdFZhbHVlcyIsImxpdmVDbnQiLCJ1aWQiLCJ1dHlwZSIsImRpc3BGbGciLCJkZWZhdWx0RmF2aWNvbiIsInJvb3QiLCJyZSIsInBhcnRzIiwiZXhlYyIsInVyaSIsInNvdXJjZSIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJwbHVyYWwiLCJtcyIsIm1zQWJzIiwiaXNQbHVyYWwiLCJyb3VuZCIsIm9wdGlvbnMiLCJwYXJzZUZsb2F0IiwibG9uZyIsImFicyIsImZtdExvbmciLCJmbXRTaG9ydCIsIndpdGhOYXRpdmVCdWZmZXIiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJnIiwiZWlvIiwiU29ja2V0IiwiQmFja29mZiIsImhhcyIsIk1hbmFnZXIiLCJuc3BzIiwic3VicyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiaml0dGVyIiwiY29ubmVjdGluZyIsImxhc3RQaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJlbWl0QWxsIiwidXBkYXRlU29ja2V0SWRzIiwiZ2VuZXJhdGVJZCIsImVuZ2luZSIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJzZXRNaW4iLCJfcmFuZG9taXphdGlvbkZhY3RvciIsInNldEppdHRlciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsInNldE1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJyZWNvbm5lY3RpbmciLCJhdHRlbXB0cyIsInJlY29ubmVjdCIsImNvbm5lY3QiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsIm9ub3BlbiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwib25waW5nIiwib25wb25nIiwib25kYXRhIiwib25kZWNvZGVkIiwib25lcnJvciIsIm9uQ29ubmVjdGluZyIsInByb2Nlc3NQYWNrZXRRdWV1ZSIsInN1YnNMZW5ndGgiLCJyZXNldCIsIm9uY2xvc2UiLCJyZWFzb24iLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGQiLCJ4cyIsImpzb25wIiwiaXNTU0wiLCJmb3JjZUpTT05QIiwicGFyc2VxcyIsImluaGVyaXQiLCJ5ZWFzdCIsIlBvbGxpbmciLCJoYXNYSFIyIiwiZm9yY2VCYXNlNjQiLCJwb2xsIiwicGF1c2UiLCJvblBhdXNlIiwiZG9Qb2xsIiwiY2FsbGJhY2tmbiIsImRvV3JpdGUiLCJzY2hlbWEiLCJzaWQiLCJ3aXRoTmF0aXZlQmxvYiIsIndpdGhOYXRpdmVGaWxlIiwiRmlsZSIsInByZXYiLCJhbHBoYWJldCIsInNlZWQiLCJudW0iLCJkZWNvZGVkIiwidG9BcnJheSIsImhhc0JpbiIsImV2ZW50cyIsImNvbm5lY3RfZXJyb3IiLCJjb25uZWN0X3RpbWVvdXQiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJpbyIsImpzb24iLCJpZHMiLCJhY2tzIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJmbGFncyIsInN1YkV2ZW50cyIsImV2IiwiY29tcHJlc3MiLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwibWVkaWFTZWNvbmRJbnRlcnZhbCIsInNjcmVlbk1vZGUiLCJzbWFsbCIsIm1pZGRsZSIsInBvcnRhbFBhdGgiLCJjbGllbnRQYXRoIiwiYXNzZXRzUGF0aCIsInNlc3Npb25QYXRoIiwiY2FjaGVLZXkiLCJVc2VyIiwibXVsdGlzdHJlYW1lZCIsInJlcXVlc3RMb2dpblR5cGUiLCJmcmllbmRzIiwiQW5hbHl6ZSIsInJhbmRvbVN0cmluZyIsInJhbmRvbSIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImRpc3BhdGNoIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiVGhyZWFkcyIsImJhc2VUaHJlYWRzIiwibWVyZ2VUaHJlYWQiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJXc0FwaVdvcmtlciIsIndvcmtlciIsIm9uTWVzc2FnZSIsIm9uTWVzc2FnZUVycm9yIiwicG9zdE1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJ3cyIsIm1ldGhvZEJhY2siLCJXU0FQSV9UT19DTElFTlRfVFlQRSIsIkNMSUVOVF9UT19XU0FQSV9UWVBFIiwiZXhlIiwic3BsaXRlZDEiLCJpb1R5cGUiLCJleGVNZXRob2QiLCJIYW5kbGVNZXNzYWdlTWV0aG9kIiwiSGFuZGxlUmVxdWVzdE1ldGhvZCIsIldzIiwid2ViV29ya2VyIiwic3RvcmVzIiwiaW9zIiwibWV0aG9kcyIsInB1YmxpY0NhbGxiYWNrcyIsInVzZSIsInVudHVuZSIsIm9uUmVzcG9uc2VNZUFQSSIsIm9mZlJlc3BvbnNlQ2hBUEkiLCJleGVDYWxsYmFjayIsImZvcmNlTmV3IiwiYWN0aW9uTWV0aG9kIiwicmVzcG9uc2UiLCJhY3Rpb25TdGF0ZSIsImdldFJlc3BvbnNlQ2hBUEkiLCJhcGlTdGF0ZSIsImlvUGFyYW1zIiwiZ2V0SW9QYXJhbXMiLCJlbmRwb2ludCIsIkhUVFBTX1BST1RPQ09MIiwic2VydmVyIiwib25SZXNwb25zZUNoQVBJIiwib25SZXF1ZXN0QVBJIiwiYWN0aW9ucyIsImFjdGlvbktleXMiLCJhY3Rpb25MZW5ndGgiLCJnZXRDb3JlQVBJIiwiYmVmb3JlRnVuY3Rpb24iLCJfcmVxdWVzdFN0YXRlIiwiZ2V0UmVxdWVzdFN0YXRlIiwiX2FjdGlvblN0YXRlIiwiZ2V0UmVxdWVzdEFjdGlvblN0YXRlIiwiYWN0aW9uTm9kZUNudCIsImFjdGlvblBsYWluTmFtZSIsImdldFRvTWVBUEkiLCJDQVRDSF9NRV9LRVkiLCJvbktleSIsIm9mZktleSIsImdldFNlcXVlbmNlQWN0aW9uTWFwIiwiQVBJX0JST0FEQ0FTVF9DQUxMQkFDSyIsImxvb2t1cCIsImNhY2hlIiwibWFuYWdlcnMiLCJtdWx0aXBsZXgiLCJwYXJzZXVyaSIsImxvYyIsInNlbGVjdENvbG9yIiwiaGFzaCIsImNyZWF0ZURlYnVnIiwicHJldlRpbWUiLCJlbmFibGVkIiwiY3VyciIsImNvZXJjZSIsImZvcm1hdCIsImZvcm1hdHRlciIsImV4dGVuZCIsImluaXQiLCJpbnN0YW5jZXMiLCJkZWxpbWl0ZXIiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJza2lwcyIsImVuYWJsZSIsImluc3RhbmNlIiwiY2hyb21lIiwibG9jYWwiLCJsb2dGbiIsImNlaWwiLCJwYWNrZXREYXRhIiwiX2RlY29uc3RydWN0UGFja2V0IiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwiX3JlY29uc3RydWN0UGFja2V0IiwicGVuZGluZ0Jsb2JzIiwiX3JlbW92ZUJsb2JzIiwiY3VyS2V5IiwiY29udGFpbmluZ09iamVjdCIsImZpbGVSZWFkZXIiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwib3V0cHV0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsIkxOMiIsInRyYW5zcG9ydHMiLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInBlck1lc3NhZ2VEZWZsYXRlIiwidGhyZXNob2xkIiwicHJvZHVjdCIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJjcmVhdGVUcmFuc3BvcnQiLCJjbG9uZSIsIkVJTyIsInRyYW5zcG9ydCIsInJlcXVlc3RUaW1lb3V0IiwicHJvdG9jb2xzIiwic2V0VHJhbnNwb3J0Iiwib25EcmFpbiIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5IiwidXBncmFkaW5nIiwiZmx1c2giLCJmcmVlemVUcmFuc3BvcnQiLCJvblRyYW5zcG9ydENsb3NlIiwib251cGdyYWRlIiwidG8iLCJvbkhhbmRzaGFrZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0Iiwic2VuZFBhY2tldCIsIndhaXRGb3JVcGdyYWRlIiwiY2xlYW51cEFuZENsb3NlIiwiZmlsdGVyZWRVcGdyYWRlcyIsImVtcHR5IiwiUmVxdWVzdCIsImFzeW5jIiwicmVxdWVzdCIsInJlcSIsInNlbmRYaHIiLCJwb2xsWGhyIiwieGhyIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImdldFJlc3BvbnNlSGVhZGVyIiwicmVxdWVzdHNDb3VudCIsInJlcXVlc3RzIiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwiYWJvcnQiLCJhdHRhY2hFdmVudCIsInVubG9hZEhhbmRsZXIiLCJhcnJheWJ1ZmZlciIsImFidiIsImlpIiwiY291bnQiLCJlcnJfY2IiLCJiYWlsIiwicHJveHkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNyZWF0ZUJ5dGUiLCJlbmNvZGVDb2RlUG9pbnQiLCJzeW1ib2wiLCJyZWFkQ29udGludWF0aW9uQnl0ZSIsImNvbnRpbnVhdGlvbkJ5dGUiLCJkZWNvZGVTeW1ib2wiLCJieXRlMSIsImJ5dGVTdHJpbmciLCJ1Y3MyZW5jb2RlIiwiY2hhcnMiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJibG9iU3VwcG9ydGVkIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYmxvYkJ1aWxkZXJTdXBwb3J0ZWQiLCJhcHBlbmQiLCJnZXRCbG9iIiwibWFwQXJyYXlCdWZmZXJWaWV3cyIsImNodW5rIiwiQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvciIsImJiIiwicGFydCIsIkJsb2JDb25zdHJ1Y3RvciIsIkpTT05QUG9sbGluZyIsInJOZXdsaW5lIiwickVzY2FwZWROZXdsaW5lIiwiX19fZWlvIiwic2NyaXB0IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZm9ybSIsImlmcmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJpbnNlcnRBdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIiwiaGVhZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImFyZWEiLCJpZnJhbWVJZCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInNldEF0dHJpYnV0ZSIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImh0bWwiLCJzdWJtaXQiLCJCcm93c2VyV2ViU29ja2V0IiwiTm9kZVdlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIldlYlNvY2tldEltcGwiLCJXUyIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsImNoZWNrIiwiaGVhZGVycyIsInN1cHBvcnRzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJmYWN0b3IiLCJyYW5kIiwiZGV2aWF0aW9uIiwiZW5kaWFubmVzcyIsImxvYWRhdmciLCJ1cHRpbWUiLCJmcmVlbWVtIiwiTUFYX1ZBTFVFIiwidG90YWxtZW0iLCJjcHVzIiwicmVsZWFzZSIsImFwcFZlcnNpb24iLCJuZXR3b3JrSW50ZXJmYWNlcyIsImdldE5ldHdvcmtJbnRlcmZhY2VzIiwiYXJjaCIsInBsYXRmb3JtIiwidG1wZGlyIiwidG1wRGlyIiwiRU9MIiwiaG9tZWRpciIsIkFwaVN0YXRlIiwiY2FjaGVzIiwibWVudUxvZ3MiLCJhbmFseXplIiwidGhyZWFkRGV0YWlsIiwiZ2V0QXBwUGFyYW1zIiwiZ2V0VXNlclBhcmFtcyIsImFjdGlvbkxvZyIsImlzVHJhbnNpdGlvbiIsIlVpIiwiZ2V0V2lkdGgiLCJoZWlnaHQiLCJnZXRIZWlnaHQiLCJwb3N0c0hlaWdodCIsImdldFNjcmVlbk1vZGUiLCJleHRlbnNpb25Nb2RlIiwiZXh0ZW5zaW9uTW9kZUV4dE5vbmVMYWJlbCIsImV4dGVuc2lvbldpZHRoIiwiZXh0ZW5zaW9uSGVpZ2h0IiwidGhyZWFkU2Nyb2xsWSIsImlzT3BlblBvc3RzIiwiZ2V0SXNPcGVuUG9zdHMiLCJpc09wZW5TZXR0aW5nIiwiaXNPcGVuTWVudSIsImdldElzT3Blbk1lbnUiLCJpc09wZW5EZXRhaWwiLCJzY3JlZW5Nb2RlRGV0YWlsTGFiZWwiLCJpc09wZW5OZXdQb3N0IiwiaXNPcGVuTm90aWYiLCJpc09wZW5Qb3N0c1N1cHBvcnRlciIsImlzT3BlbkJvYXJkIiwiZ2V0SXNPcGVuQm9hcmQiLCJpc0J1YmJsZVBvc3QiLCJpc0Rpc3BQb3N0cyIsImlzT3BlbkxpbmtzIiwiZ2V0RGVmYXVsdE1lbnVDb21wb25lbnQiLCJvcGVuTG9ja01lbnUiLCJvcGVuTG9ja01lbnVMYWJlbE5vIiwib3BlbklubmVyTm90aWYiLCJkZXRhaWxDaCIsImlzTG9hZGluZyIsImV4dGVuc2lvbkhlaWd0Iiwid2lkdGhQeCIsInNjcmVlbk1vZGVTbWFsbFdpZHRoUHgiLCJzY3JlZW5Nb2RlU21hbGxMYWJlbCIsInNjcmVlbk1vZGVNaWRkbGVXaWR0aFB4Iiwic2NyZWVuTW9kZU1pZGRsZUxhYmVsIiwic2NyZWVuTW9kZUxhcmdlTGFiZWwiLCJleHRlbnNpb25DbG9zZUhlaWdodCIsImV4dGVuc2lvbk1vZGVFeHRCb3R0b21MYWJlbCIsImV4dGVuc2lvbk1vZGVFeHRNb2RhbExhYmVsIiwiTWVudUxvZ3MiLCJpbml0aWFsU3RhdGUiLCJ1cGRhdGVBY3Rpb24iLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImNoaWxkcmVuIiwicmVkdWNlckZpbGVzIiwidHVuZUNoIiwicG9zdHNUaW1lbGluZVplcm9BZnRlciIsIm1lcmdlIiwibGFzdFBvc3QiLCJwb3N0TGVuZ3RoIiwic29ydFdhdGNoQ250IiwiZ2V0RGlzcFBvc3RzIiwibmV3UmFua3MiLCJyYW5rQ250IiwibmV3UmFuayIsImZhaWNvbiIsIkJvb3RPcHRpb24iLCJhdHRyaWJ1dGVzIiwicmVidWlsZEF0dHJpYnV0ZXNPYmoiLCJTZXR0aW5nIiwiY29tbW9uIiwicHQiLCJtZWRpYUN1cnJlbnRUaW1lIiwibW9yZVBvc3RNdWxpdCIsImZ1bmN0aW9ucyIsImdldE1lcmdlZFRocmVhZHMiLCJtZWRpYVRhZ1R5cGVObyIsImdldEFueUFjdGlvblBvc3RzIiwiZ2V0T2Zmc2V0RmluZElkIiwic2V0U3RvcmFnZVBvc3RzVGltZWxpbmUiLCJhY3Rpb25FbW90aW9ucyIsImVtb3Rpb25Nb2RlbEtleSIsImVtb3Rpb25LZXkiLCJDTE9TRV9MSU5LUyIsIk9OX0NMSUNLX1RPX01VTFRJX1RIUkVBRCIsIk9OX0NMSUNLX1RPX1RJTUVMSU5FX1RIUkVBRCIsImdldEZpbmRUeXBlRnJvbVNyYyIsIk9OX0NMSUNLX1RPX1NJTkdMRV9USFJFQUQiLCJPTl9DTElDS19UT19DSElMRF9USFJFQUQiLCJPTl9DTElDS19NRU5VIiwiUkVTSVpFX0VORF9XSU5ET1ciLCJPTl9DTElDS19UT0dHTEVfRElTUF9ERVRBSUwiLCJUT0dHTEVfQlVCQkxFX1BPU1QiLCJTVEFSVF9MSU5LX01FRElBIiwiR0VUX0NMSUVOVF9NRVRBUyIsInVwZGF0ZUZsZyIsInNldFN0b3JhZ2VIdG1sUG9zdHMiLCJwcm9wcyIsInNldFN0b3JhZ2UiLCJwb3N0c1RpbWVsaW5lQWxsIiwicG9zdHNUaW1lbGluZUFsbExlbmd0aCIsInBvc3RzVGltZWxpbmVaZXJvU2Vjb25kIiwicG9zdEtleSIsInBvc3RTaW5nbGUiLCJwb3N0TXVsdGkiLCJzZXRTdG9yYWdlUG9zdHMiLCJnZXRTdG9yYWdlUG9zdHNUaW1lbGluZSIsImdldFN0b3JhZ2UiLCJnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8iLCJUYWxrblNlc3Npb24iLCJnZXRCYXNlS2V5IiwiaXRlbXMiLCJpdGVtIiwiYmVmb3JlRnVuY3Rpb25zIiwidGFsa25NZWRpYSIsImJhbGFuY2VLZXkiLCJiYWxhbmNlIiwidHlwZUlkIiwidHlwZUxhYmVsIiwic2NoZW1h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Q0FBQytCLEVBQUs1RSxLQUNoQ3VvRCxFQUFRM2pELEVBQUltaUIsT0FBUyxDQUFFaGtCLEtBQU1rUCxPQUFRbk4sUUFBUyxFQUFHMnhCLElBQUssS0FFakQ4eEIsR0EvSVgsYSxrS0NGQSxnQkFFQSxVQUFlN1gsSUFDYixNQUFNM3RDLEVBQU8sR0FBRyxVQUFTMEYsMEJBQTBCaW9DLEVBQVMzdEMsT0FDNUQsTUFBTyxJQUFLMnRDLEVBQVUzdEMiLCJmaWxlIjoid3MuYXBpLndvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0NSk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTY2hlbWEge1xuICBlcnJvclRocm93OiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uOiBhbnkgPSB7fSkge1xuICAgIC8qXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgdGhpcyxcbiAgICAgICdfU0VUX0NPTFVNTlMnLFxuICAgICAge1xuICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgICAgfVxuICAgICk7XG4qL1xuICB9XG5cbiAgc3RhdGljIGdldFR5cGUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiTnVsbFwiO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiVW5kZWZpbmVkXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgc3RhdGljIGlzU2V0KHZhbDogYW55KSB7XG4gICAgcmV0dXJuIFNjaGVtYS5nZXRUeXBlKHZhbCkgPT09IFwiVW5kZWZpbmVkXCIgfHwgU2NoZW1hLmdldFR5cGUodmFsKSA9PT0gXCJOdWxsXCIgPyBmYWxzZSA6IHRydWU7XG4gIH1cblxuICBzdGF0aWMgZ2V0Qm9vbCh2YWw6IGFueSkge1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcImJvb2xlYW5cIikgcmV0dXJuIHZhbDtcbiAgICByZXR1cm4gdmFsID09PSBcInRydWVcIiA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBpc0Fub255bW91c0Z1bmMoZm4pIHtcbiAgICBjb25zdCBmblN0cmluZyA9IGZuLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24oKXt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbigpIHt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbiAoKXt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbiAoKSB7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiKCk9Pnt9XCIpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNyZWF0ZShzdGF0ZTogYW55KSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGNvbnN0IHN0YXRlVHlwZSA9IFNjaGVtYS5nZXRUeXBlKHN0YXRlKTtcbiAgICBsZXQgdmFsaWRNZXRob2RzID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhzdGF0ZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAvLyBQcm9wZXJ0aWVzIC5cbiAgICAgIGxldCB2YWx1ZXM7XG4gICAgICBsZXQgZGVmID0gbnVsbDtcbiAgICAgIGxldCB0eXBlOiBhbnk7XG4gICAgICBsZXQgaXNBY2NlcHROdWxsID0gZmFsc2U7XG4gICAgICBsZXQgaXNBY2NlcHRCbGFuayA9IGZhbHNlO1xuICAgICAgbGV0IHZhbGlkOiBhbnkgPSAoKSA9PiB7fTtcbiAgICAgIGxldCB2YWx1ZTogYW55ID0gbnVsbDtcblxuICAgICAgLy8gQXNzaWduIFByb3BlcnRpZXMgLlxuICAgICAgaWYgKFNjaGVtYS5nZXRUeXBlKHN0YXRlW2tleV0pID09PSBcIk9iamVjdFwiKSB7XG4gICAgICAgIHZhbHVlcyA9IHN0YXRlW2tleV07XG4gICAgICAgIGxldCBpc0VtcHR5T2JqZWN0ID0gT2JqZWN0LmtleXModmFsdWVzKS5sZW5ndGggPT09IDA7XG4gICAgICAgIGlzQWNjZXB0TnVsbCA9IHZhbHVlcy5pc0FjY2VwdE51bGwgPyB2YWx1ZXMuaXNBY2NlcHROdWxsIDogaXNBY2NlcHROdWxsO1xuICAgICAgICBpc0FjY2VwdEJsYW5rID0gdmFsdWVzLmlzQWNjZXB0QmxhbmsgPyB2YWx1ZXMuaXNBY2NlcHRCbGFuayA6IGlzQWNjZXB0Qmxhbms7XG4gICAgICAgIGRlZiA9ICFpc0VtcHR5T2JqZWN0ICYmIHZhbHVlcy5kZWYgPyB2YWx1ZXMuZGVmIDogZGVmO1xuICAgICAgICB2YWx1ZSA9ICFpc0VtcHR5T2JqZWN0ICYmICh2YWx1ZXMudmFsdWUgfHwgdmFsdWVzLnZhbHVlID09PSBcIlwiKSA/IHZhbHVlcy52YWx1ZSA6IHZhbHVlcztcbiAgICAgICAgdmFsdWUgPSBpc0VtcHR5T2JqZWN0ICYmIGRlZiA/IGRlZiA6IHZhbHVlO1xuICAgICAgICB0eXBlID0gU2NoZW1hLmdldFR5cGUodmFsdWUpO1xuICAgICAgICB2YWxpZCA9IHZhbHVlcy52YWxpZCA/IHZhbHVlcy52YWxpZCA6IHZhbGlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBzdGF0ZVtrZXldO1xuICAgICAgICBkZWYgPSB2YWx1ZTtcbiAgICAgICAgaXNBY2NlcHROdWxsID0gaXNBY2NlcHROdWxsO1xuICAgICAgICBpc0FjY2VwdEJsYW5rID0gaXNBY2NlcHRCbGFuaztcbiAgICAgICAgdHlwZSA9IFNjaGVtYS5nZXRUeXBlKHZhbHVlKTtcbiAgICAgICAgdmFsaWQgPSB2YWxpZDtcbiAgICAgIH1cblxuICAgICAgLy8gVmFsaWRhdGUgRnVuY3Rpb25zIC5cbiAgICAgIGNvbnN0IHZhbGlkRnVuYyA9IChfdmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBsZXQgZXJyb3IgPSBudWxsO1xuICAgICAgICBjb25zdCBwb2ludGVyID0gYCR7Y2xhc3NOYW1lfS4ke2tleX1gO1xuICAgICAgICBjb25zdCB2YWxpZFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHZhbGlkVHlwZSA9IHR5cGU7XG4gICAgICAgIGNvbnN0IHBhcmFtc1ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICBjb25zdCBwYXJhbXNUeXBlID0gU2NoZW1hLmdldFR5cGUoX3ZhbHVlKTtcblxuICAgICAgICBpZiAocGFyYW1zVHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgIGVycm9yID0gYFNDSEVNQV9UWVBFIDogJHtwb2ludGVyfSBbdmFsaWRUeXBlOiAke3R5cGV9XVtwYXJhbXNUeXBlOiAke3BhcmFtc1R5cGV9XWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWNjZXB0TnVsbCAmJiBfdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfSVNfQUNDRVBUX05VTEwgOiAgJHtwb2ludGVyfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWNjZXB0QmxhbmsgJiYgX3ZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgZXJyb3IgPSBgU0NIRU1BX0lTX0FDQ0VQVF9CTEFOSyA6ICAke3BvaW50ZXJ9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoU2NoZW1hLmdldFR5cGUodmFsaWQpID09PSBcIkZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBpZiAodmFsaWQoX3ZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3IgPSBgU0NIRU1BX1lPVVJfVkFMSURfTUVUSE9EIDogICR7cG9pbnRlcn1gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvaW50ZXIsXG4gICAgICAgICAgdmFsaWRWYWx1ZSxcbiAgICAgICAgICB2YWxpZFR5cGUsXG4gICAgICAgICAgcGFyYW1zVmFsdWUsXG4gICAgICAgICAgcGFyYW1zVHlwZSxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgcG9pbnRlciwgdmFsaWRWYWx1ZSwgdmFsaWRUeXBlLCBwYXJhbXNWYWx1ZSwgcGFyYW1zVHlwZSwgZXJyb3IgfSA9IHZhbGlkRnVuYyh2YWx1ZSk7XG5cbiAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IChfdmFsdWUpID0+IHtcbiAgICAgICAgICAgIC8vIHBvaW50ZXIsIHZhbGlkVmFsdWUsIHZhbGlkVHlwZSwgcGFyYW1zVmFsdWUsIHBhcmFtc1R5cGUsIGVycm9yXG4gICAgICAgICAgICBjb25zdCB2YWxpZFJlc3VsdCA9IHZhbGlkRnVuYyh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLnRoaXMsIFtrZXldOiB2YWx1ZSB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy52YWxpZFdhcm4odmFsaWRSZXN1bHQpO1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9yVGhyb3cpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjYW5TZXQoa2V5OiBhbnksIHZhbGlkVmFsdWU6IGFueSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzW2tleV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWxpZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWxpZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGVycm9yIH0gPSAodGhpc1trZXldID0gdmFsaWRWYWx1ZSk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1trZXldID0gY3VycmVudFZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJCQUQgQ0FOIFNFVCBLRVk6IFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgXCIgXCIgKyBrZXkpO1xuICAgICAgY29uc29sZS53YXJuKFwiQkVGT0VSIFZBTFVFXCIpO1xuICAgICAgY29uc29sZS53YXJuKHR5cGVvZiB0aGlzW2tleV0pO1xuICAgICAgY29uc29sZS53YXJuKHRoaXNba2V5XSk7XG4gICAgICBjb25zb2xlLndhcm4oXCJBRlRFUiBWQUxVRVwiKTtcbiAgICAgIGNvbnNvbGUud2Fybih0eXBlb2YgdmFsaWRWYWx1ZSk7XG4gICAgICBjb25zb2xlLndhcm4odmFsaWRWYWx1ZSk7XG4gICAgICB0aHJvdyBgQkFEIENBTiBTRVQ6ICR7ZX1gO1xuICAgIH1cbiAgfVxuXG4gIG1lcmdlKHBhcmFtcyA9IHt9LCBpbW11dGFibGUgPSB0cnVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcmFtc1R5cGUgPSBTY2hlbWEuZ2V0VHlwZShwYXJhbXMpO1xuICAgICAgY29uc3Qgb2JqS2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtcyk7XG5cbiAgICAgIGlmIChvYmpLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1lcmdlZE9iajogYW55ID0geyAuLi50aGlzIH07XG4gICAgICAgIG9iaktleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXNba2V5XSAhPT0gcGFyYW1zW2tleV0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhblNldChrZXksIHBhcmFtc1trZXldKSkge1xuICAgICAgICAgICAgICBtZXJnZWRPYmpba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQkFEIE1FUkdFIEEgOiBcIiArIGtleSArIFwiIFwiICsgcGFyYW1zW2tleV0gKyBcIiBcIiArIHR5cGVvZiBwYXJhbXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocGFyYW1zVHlwZSA9PT0gXCJBcnJheVwiKSB7XG4gICAgICAgICAgbWVyZ2VkT2JqID0gT2JqZWN0LnZhbHVlcyhtZXJnZWRPYmopO1xuXG4gICAgICAgICAgLypcbiAgICAgICAgICAgIGNsYXNzIEEge1xuICAgICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHsgIH1cbiAgICAgICAgICAgICAgcmVmcmVzaCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIEE+dGhpcy5jb25zdHJ1Y3Rvcik7IFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKi9cbiAgICAgICAgICByZXR1cm4gaW1tdXRhYmxlID8gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKShtZXJnZWRPYmopIDogbWVyZ2VkT2JqO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpbW11dGFibGUpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coIG1lcmdlZE9iaiApO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikobWVyZ2VkT2JqKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZE9iajtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHRoaXMuZXJyb3JUaHJvdykge1xuICAgICAgICBjb25zb2xlLndhcm4ocGFyYW1zKTtcbiAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgICAgICB0aHJvdyBgQkFEIE1FUkdFIEIgOiAke1NjaGVtYS5nZXRUeXBlKHBhcmFtcyl9ICR7ZX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKHBhcmFtcyk7XG4gICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgY29uc29sZS53YXJuKGBCQUQgTUVSR0UgQyA6ICR7U2NoZW1hLmdldFR5cGUocGFyYW1zKX0gJHtlfWApO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRvSlNPTihvYmo6IGFueSA9IHRoaXMpIHtcbiAgICBsZXQganNvbk9iajogYW55ID0ge307XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGxldCB2YWx1ZXM6IGFueSA9IG9ialtrZXldO1xuICAgICAgaWYgKHZhbHVlcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk9iamVjdFwiKSB7XG4gICAgICAgIGlmICghdmFsdWVzLnR5cGUgJiYgIXZhbHVlcy5kZWZhdWx0KSB7XG4gICAgICAgICAgdmFsdWVzID0gdGhpcy50b0pTT04odmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWVzLmRlZmF1bHQgfHwgdmFsdWVzLmRlZmF1bHQgPT09IFwiXCIgfHwgdmFsdWVzLmRlZmF1bHQgPT09IDApIHtcbiAgICAgICAganNvbk9ialtrZXldID0gdmFsdWVzLmRlZmF1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqc29uT2JqW2tleV0gPSB2YWx1ZXM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25PYmo7XG4gIH1cblxuICBmb3JFYWNoKGZ1bmMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzKS5mb3JFYWNoKGZ1bmMpO1xuICB9XG5cbiAgY29uY2F0KGZ1bmMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUoT2JqZWN0LnZhbHVlcyh0aGlzKS5jb25jYXQoZnVuYyksIGZ1bmMpO1xuICB9XG5cbiAgbWFwKGZ1bmMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUoT2JqZWN0LnZhbHVlcyh0aGlzKS5tYXAoZnVuYyksIGZ1bmMpO1xuICB9XG5cbiAgZmlsdGVyKGZ1bmMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUoT2JqZWN0LnZhbHVlcyh0aGlzKS5maWx0ZXIoZnVuYyksIGZ1bmMpO1xuICB9XG5cbiAgcmVkdWNlKGZ1bmMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUoT2JqZWN0LnZhbHVlcyh0aGlzKS5yZWR1Y2UoZnVuYyksIGZ1bmMpO1xuICB9XG5cbiAgZmluZChmdW5jKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuZmluZChmdW5jKTtcbiAgfVxuXG4gIHNvcnQoZnVuYykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMpLnNvcnQoZnVuYyk7XG4gIH1cblxuICBwdXNoKHZhbHVlKSB7XG4gICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0aGlzKTtcbiAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKHZhbHVlcyk7XG4gIH1cblxuICB1bnNoaWZ0KHZhbHVlKSB7XG4gICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0aGlzKTtcbiAgICB2YWx1ZXMudW5zaGlmdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKHZhbHVlcyk7XG4gIH1cblxuICBnZXRTaGlmdCgpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSB2YWx1ZXMuc2hpZnQoKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUocmVzdWx0cyk7XG4gIH1cblxuICBwb3AodmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXM6IGFueSA9IE9iamVjdC52YWx1ZXModGhpcyk7XG4gICAgdmFsdWVzLnBvcCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKHZhbHVlcyk7XG4gIH1cblxuICByZXR1cm5JbW11dGFibGUodmFsdWVzLCBmdW5jID0gKCkgPT4ge30pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikoKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPT09IDAgJiYgT2JqZWN0LmtleXModGhpcykubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoU3RyaW5nKGZ1bmMpLmluZGV4T2YoXCJjcmVhdGVFbGVtZW50XCIpID4gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSh2YWx1ZXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWVzWzBdICYmIHZhbHVlc1swXVtcIiQkdHlwZW9mXCJdICYmIHZhbHVlc1swXVtcIiQkdHlwZW9mXCJdLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiU3ltYm9sXCIpIHtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRXYXJuKHZhbGlkUmVzdWx0KSB7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcIik7XG4gICAgY29uc29sZS53YXJuKFwiI1wiICsgdmFsaWRSZXN1bHQucG9pbnRlcik7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcIik7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIGluaXRpYWxpemVkVmFsaWRUeXBlXCIpO1xuICAgIGNvbnNvbGUud2Fybih2YWxpZFJlc3VsdC52YWxpZFR5cGUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyBpbml0aWFsaXplZFZhbGlkVmFsdWVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnZhbGlkVmFsdWUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyBwYXJhbXNUeXBlXCIpO1xuICAgIGNvbnNvbGUud2Fybih2YWxpZFJlc3VsdC5wYXJhbXNUeXBlKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMgcGFyYW1zVmFsdWVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnBhcmFtc1ZhbHVlKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXF1ZW5jZSB7XG4gIHN0YXRpYyBnZXQgVEFMS05fUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuIFwidGFsa246XCI7XG4gIH1cbiAgc3RhdGljIGdldCBIVFRQX1BST1RPQ09MKCkge1xuICAgIHJldHVybiBcImh0dHA6XCI7XG4gIH1cbiAgc3RhdGljIGdldCBIVFRQU19QUk9UT0NPTCgpIHtcbiAgICByZXR1cm4gXCJodHRwczpcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IFVOS05PV05fUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuIFwiPz8/PzpcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENBVENIX01FX0tFWSgpIHtcbiAgICByZXR1cm4gXCJAQ0FUQ0hfTUVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9SRVFVRVNUX1RZUEUoKSB7XG4gICAgcmV0dXJuIFwiUkVRVUVTVFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCgpIHtcbiAgICByZXR1cm4gXCJFTUlUXCI7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuIFwiQlJPQURDQVNUXCI7XG4gIH1cbiAgc3RhdGljIGdldCBDT05ORUNUSU9OX1NFUlZFUl9LRVkoKSB7XG4gICAgcmV0dXJuIFwiQ09OTkVDVElPTl9TRVJWRVJcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19TRVJWRVJfUkVRVUVTVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19TRVJWRVJbJHtTZXF1ZW5jZS5BUElfUkVRVUVTVF9UWVBFfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgU0VSVkVSX1RPX0FQSV9FTUlUKCkge1xuICAgIHJldHVybiBgU0VSVkVSX1RPX0FQSVske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBTRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCgpIHtcbiAgICByZXR1cm4gYFNFUlZFUl9UT19BUElbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1R9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX1JFUVVFU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfRU1JVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX0JST0FEQ0FTVF9DQUxMQkFDSygpIHtcbiAgICByZXR1cm4gXCJ0dW5lXCI7XG4gIH1cbiAgc3RhdGljIGdldCBSRURVWF9BQ1RJT05fS0VZKCkge1xuICAgIHJldHVybiBcInR5cGVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IE1FVEhPRF9DT0xPTigpIHtcbiAgICByZXR1cm4gXCI6XCI7XG4gIH1cbiAgc3RhdGljIGdldCBBRERfQ0xJRU5UX0FDVElPTl9QUkVGSVgoKSB7XG4gICAgcmV0dXJuIFwiQVBJX1RPX0NMSUVOVFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWFwKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0dW5lOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFtcImNoXCIsIFwiaGFzU2xhc2hcIiwgXCJwcm90b2NvbFwiXSxcbiAgICAgICAgICBhcHA6IFtcIm11bHRpc3RyZWFtXCIsIFwicm9vdENoXCIsIFwiZGlzcFRocmVhZFR5cGVcIiwgXCJhY3Rpb25lZFwiLCBcIm9mZnNldEZpbmRJZFwiLCBcImlzVG9nZ2xlTXVsdGlzdHJlYW1cIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHVzZXI6IFtcInVpZFwiXSwgc2V0dGluZzogXCIqXCIsIHRocmVhZDogXCIqXCIgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTogeyB0aHJlYWQ6IFtcImxpdmVDbnRcIiwgXCJjaFwiXSB9LFxuICAgICAgfSxcbiAgICAgIGZldGNoUG9zdHM6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiY2hcIiwgXCJwcm90b2NvbFwiLCBcImhvc3RcIiwgXCJoYXNTbGFzaFwiXSxcbiAgICAgICAgICBhcHA6IFtcIm11bHRpc3RyZWFtXCIsIFwicm9vdENoXCIsIFwiZGlzcFRocmVhZFR5cGVcIiwgXCJhY3Rpb25lZFwiLCBcIm9mZnNldEZpbmRJZFwiLCBcImlzVG9nZ2xlTXVsdGlzdHJlYW1cIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHBvc3RzOiBcIipcIiB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBnZXRNb3JlOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFtcImNoXCJdLFxuICAgICAgICAgIGFwcDogW1wibXVsdGlzdHJlYW1cIiwgXCJkaXNwVGhyZWFkVHlwZVwiLCBcIm9mZnNldEZpbmRJZFwiXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHtcbiAgICAgICAgICAvLyAgICAgICAgICB0aHJlYWQ6IFwiKlwiLFxuICAgICAgICAgIGFwcDogW1wiZGlzcFRocmVhZFR5cGVcIiwgXCJvZmZzZXRGaW5kSWRcIl0sXG4gICAgICAgICAgcG9zdHM6IFwiKlwiLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICB1cGRhdGVUaHJlYWQ6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiY2hcIiwgXCJwcm90b2NvbFwiLCBcImhvc3RcIiwgXCJoYXNTbGFzaFwiXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFwiKlwiLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBjaGFuZ2VUaHJlYWQ6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiY2hcIiwgXCJoYXNTbGFzaFwiLCBcInByb3RvY29sXCJdLFxuICAgICAgICAgIGFwcDogW1widHVuZWRcIiwgXCJtdWx0aXN0cmVhbVwiLCBcInJvb3RDaFwiLCBcImRpc3BUaHJlYWRUeXBlXCIsIFwiYWN0aW9uZWRcIiwgXCJvZmZzZXRGaW5kSWRcIiwgXCJpc1RvZ2dsZU11bHRpc3RyZWFtXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbXCJsaXZlQ250XCIsIFwiY2hcIl0gfSxcbiAgICAgIH0sXG4gICAgICBjaGFuZ2VUaHJlYWREZXRhaWw6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZTogeyB0aHJlYWQ6IFtcImNoXCJdIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogXCIqXCIgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgYWRkRmluZENoaWxkOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHsgdGhyZWFkOiBbXCJjaFwiXSB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHJhbms6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIGFwcDogW1wiZmluZFR5cGVcIiwgXCJyb290Q2hcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHJhbms6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHBvc3Q6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHVzZXI6IFtcInVpZFwiLCBcInV0eXBlXCJdLFxuICAgICAgICAgIGFwcDogW1wiaW5wdXRQb3N0XCIsIFwiaW5wdXRTdGFtcElkXCIsIFwiaW5wdXRDdXJyZW50VGltZVwiLCBcImRpc3BUaHJlYWRUeXBlXCJdLFxuICAgICAgICAgIHRocmVhZDogW1wiZmluZFR5cGVcIiwgXCJ0aXRsZVwiLCBcInByb3RvY29sXCIsIFwiY2hcIiwgXCJjaHNcIiwgXCJlbW90aW9uc1wiLCBcImZhdmljb25cIiwgXCJjb250ZW50VHlwZVwiXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHt9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7IHBvc3RzOiBcIipcIiwgdGhyZWFkOiBbXCJjaFwiLCBcImVtb3Rpb25zXCIsIFwicG9zdENudFwiXSwgdXNlcjogW1widWlkXCJdIH0sXG4gICAgICB9LFxuICAgICAgdXBkYXRlVGhyZWFkU2VydmVyTWV0YXM6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7IHRocmVhZDogW1wic2VydmVyTWV0YXNcIl0gfSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiaG9zdFwiLCBcInByb3RvY29sXCIsIFwiY2hcIl0sXG4gICAgICAgICAgdXNlcjogXCIqXCIsIC8vIOaHuOW/tVxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGxvZ2luOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZTogeyB1c2VyOiBbXCJyZXF1ZXN0TG9naW5UeXBlXCJdIH0sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB1c2VyOiBbXCJ1aWRcIiwgXCJocmVmXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB1c2VyOiBcIipcIiB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBkaXNjb25uZWN0OiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHt9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge30sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbXCJsaXZlQ250XCIsIFwiY2hcIl0gfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTZXF1ZW5jZUFjdGlvbk1hcChtZXRob2QpOiB7IHNlcXVlbmNlOiBzdHJpbmc7IGFjdGlvblR5cGU6IHN0cmluZzsgYWN0aW9uTmFtZTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IHNwbGl0ZWQgPSBtZXRob2Quc3BsaXQoU2VxdWVuY2UuTUVUSE9EX0NPTE9OKTtcbiAgICBjb25zdCBzZXF1ZW5jZSA9IHNwbGl0ZWRbMF0uc3BsaXQoXCJbXCIpWzBdO1xuICAgIGxldCBhY3Rpb25UeXBlO1xuXG4gICAgaWYgKHNwbGl0ZWRbMF0uaW5kZXhPZihgWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dYCkgPiAwKSB7XG4gICAgICBhY3Rpb25UeXBlID0gU2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uVHlwZSA9XG4gICAgICAgIHNwbGl0ZWRbMF0uaW5kZXhPZihgWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH1dYCkgPiAwXG4gICAgICAgICAgPyBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUXG4gICAgICAgICAgOiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1Q7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IHNwbGl0ZWRbMV07XG4gICAgcmV0dXJuIHsgc2VxdWVuY2UsIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUgfTtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVDYWxsYmFja0V4ZUNvbmRpdGlvbk1hcChhY3Rpb25OYW1lKTogeyBlbWl0OiBib29sZWFuOyBicm9hZGNhc3Q6IGJvb2xlYW4gfSB7XG4gICAgbGV0IGFjdGl2ZVJlc3BvbnNlTWFwID0geyBlbWl0OiB0cnVlLCBicm9hZGNhc3Q6IHRydWUgfTtcbiAgICBpZiAoU2VxdWVuY2UubWFwW2FjdGlvbk5hbWVdKSB7XG4gICAgICBhY3RpdmVSZXNwb25zZU1hcC5lbWl0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VFbWl0U3RhdGUpLmxlbmd0aCA+IDApO1xuICAgICAgYWN0aXZlUmVzcG9uc2VNYXAuYnJvYWRjYXN0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSkubGVuZ3RoID4gMCk7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVSZXNwb25zZU1hcDtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0RXh0VG9DbGllbnRBY3Rpb25UeXBlKGlGcmFtZUlkLCBhY3Rpb25UeXBlKSB7XG4gICAgYWN0aW9uVHlwZSA9IFNlcXVlbmNlLmNvbnZlcnRBcGlUb0NsaWVudEFjdGlvblR5cGUoYWN0aW9uVHlwZSk7XG5cbiAgICByZXR1cm4gYWN0aW9uVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0QXBpVG9DbGllbnRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX1JFUVVFU1QpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX0VNSVQpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QpO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZXF1ZXN0U3RhdGUoYWN0aW9uTmFtZSwgcmVkdXhTdGF0ZSwgcmVxdWVzdFBhcmFtcykge1xuICAgIGNvbnN0IGVuZHBvaW50S2V5ID0gYWN0aW9uTmFtZS5yZXBsYWNlKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCwgXCJcIik7XG4gICAgY29uc3QgeyByZXF1ZXN0UHVibGljU3RhdGUsIHJlcXVlc3RQcml2YXRlU3RhdGUgfSA9IFNlcXVlbmNlLm1hcFtlbmRwb2ludEtleV07XG4gICAgbGV0IHJlcXVlc3RTdGF0ZSA9IHsgW1NlcXVlbmNlLlJFRFVYX0FDVElPTl9LRVldOiBlbmRwb2ludEtleSB9O1xuXG4gICAgT2JqZWN0LmtleXMocmVxdWVzdFByaXZhdGVTdGF0ZSkuZm9yRWFjaCgoc3RhdGVLZXkpID0+IHtcbiAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XSkgcmVxdWVzdFN0YXRlW3N0YXRlS2V5XSA9IHt9O1xuXG4gICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlW3N0YXRlS2V5XS5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHJlZHV4U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdO1xuICAgICAgICAgIGlmIChyZXF1ZXN0UGFyYW1zICYmIHJlcXVlc3RQYXJhbXNbc3RhdGVLZXldICYmIFNjaGVtYS5pc1NldChyZXF1ZXN0UGFyYW1zW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVxdWVzdFBhcmFtc1tzdGF0ZUtleV1bY29sdW1uTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhyZXF1ZXN0UHVibGljU3RhdGUpLmZvckVhY2goKHN0YXRlS2V5KSA9PiB7XG4gICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0pIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0gPSB7fTtcblxuICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlW3N0YXRlS2V5XS5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkge1xuICAgICAgICAgIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0gPSByZXF1ZXN0UGFyYW1zO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVxdWVzdFN0YXRlO1xuICB9XG5cbiAgc3RhdGljIGdldFJlc3BvbnNlU3RhdGUocmVzcG9uc2VUeXBlLCByZXF1ZXN0U3RhdGUsIHVwZGF0ZVN0YXRlKSB7XG4gICAgY29uc3QgZW5kcG9pbnRLZXkgPSByZXF1ZXN0U3RhdGUudHlwZTtcbiAgICBjb25zdCByZXNwb25zZVNjaGVtYSA9IFNlcXVlbmNlLm1hcFtlbmRwb2ludEtleV1bYHJlc3BvbnNlJHtyZXNwb25zZVR5cGV9U3RhdGVgXTtcbiAgICBsZXQgcmVzcG9uc2VTdGF0ZSA9IHsgW1NlcXVlbmNlLlJFRFVYX0FDVElPTl9LRVldOiBlbmRwb2ludEtleSB9O1xuICAgIE9iamVjdC5rZXlzKHJlc3BvbnNlU2NoZW1hKS5mb3JFYWNoKCh1cGRhdGVTdGF0ZUtleSkgPT4ge1xuICAgICAgaWYgKHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XSkge1xuICAgICAgICBjb25zdCBjb2x1bW5OYW1lcyA9IHJlc3BvbnNlU2NoZW1hW3VwZGF0ZVN0YXRlS2V5XTtcbiAgICAgICAgbGV0IHVwZGF0ZVN0YXRlVmFsdWUgPSB1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV07XG5cbiAgICAgICAgc3dpdGNoICh1cGRhdGVTdGF0ZVZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwibW9kZWxcIjpcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlVmFsdWUgPSB1cGRhdGVTdGF0ZVZhbHVlLnRvSlNPTigpO1xuICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZVN0YXRlVmFsdWUuX2lkO1xuICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZVN0YXRlVmFsdWUuX192O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sdW1uTmFtZXMgPT09IFwiKlwiKSB7XG4gICAgICAgICAgcmVzcG9uc2VTdGF0ZSA9IHtcbiAgICAgICAgICAgIC4uLnJlc3BvbnNlU3RhdGUsXG4gICAgICAgICAgICBbdXBkYXRlU3RhdGVLZXldOiB1cGRhdGVTdGF0ZVZhbHVlLFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sdW1uTmFtZXMuZm9yRWFjaCgoY29sdW1uTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XVtjb2x1bW5OYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4ucmVzcG9uc2VTdGF0ZSxcbiAgICAgICAgICAgICAgICBbdXBkYXRlU3RhdGVLZXldOiB7XG4gICAgICAgICAgICAgICAgICAuLi5yZXNwb25zZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XSxcbiAgICAgICAgICAgICAgICAgIFtjb2x1bW5OYW1lXTogdXBkYXRlU3RhdGVbdXBkYXRlU3RhdGVLZXldW2NvbHVtbk5hbWVdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBgU0VRVUVOQ0UgRVJST1I6IE5PX1VQREFURV9TVEFURV9DT0xVTU5fTkFNRTogJHtyZXF1ZXN0U3RhdGUudHlwZX06ICR7dXBkYXRlU3RhdGVLZXl9LiR7Y29sdW1uTmFtZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBgU0VRVUVOQ0UgRVJST1I6IE5PX1VQREFURV9TVEFURV9LRVk6ICR7cmVxdWVzdFN0YXRlLnR5cGV9OiAke3VwZGF0ZVN0YXRlS2V5fWA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlU3RhdGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0UmVxdWVzdEFjdGlvblN0YXRlKGFjdGlvbk5hbWUsIHJlcXVlc3RQYXJhbXMxID0gbnVsbCwgcmVxdWVzdFBhcmFtczIgPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0UGFyYW1zMSA9PT0gXCJzdHJpbmdcIiAmJiByZXF1ZXN0UGFyYW1zMiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVlc3RQYXJhbXMxID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZXF1ZXN0UGFyYW1zMiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIHsgLi4ucmVxdWVzdFBhcmFtczEsIC4uLnJlcXVlc3RQYXJhbXMyLCB0eXBlOiBhY3Rpb25OYW1lIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWVzdFBhcmFtczEgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHJlcXVlc3RQYXJhbXMyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMiwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMSwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHJldHVybiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIG1pZ2h0IGJlIGFuIG9iamVjdCB3aXRoIHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICBpZiAoZGF0YSAmJiBkYXRhLmJhc2U2NCkge1xuICAgIHJldHVybiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBTZW5kaW5nIGRhdGEgYXMgYSB1dGYtOCBzdHJpbmdcbiAgdmFyIGVuY29kZWQgPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcblxuICAvLyBkYXRhIGZyYWdtZW50IGlzIG9wdGlvbmFsXG4gIGlmICh1bmRlZmluZWQgIT09IHBhY2tldC5kYXRhKSB7XG4gICAgZW5jb2RlZCArPSB1dGY4ZW5jb2RlID8gdXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSwgeyBzdHJpY3Q6IGZhbHNlIH0pIDogU3RyaW5nKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjaygnJyArIGVuY29kZWQpO1xuXG59O1xuXG5mdW5jdGlvbiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjaykge1xuICAvLyBwYWNrZXQgZGF0YSBpcyBhbiBvYmplY3QgeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXSArIHBhY2tldC5kYXRhLmRhdGE7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGhlbHBlcnMgZm9yIGJpbmFyeSB0eXBlc1xuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciByZXN1bHRCdWZmZXIgPSBuZXcgVWludDhBcnJheSgxICsgZGF0YS5ieXRlTGVuZ3RoKTtcblxuICByZXN1bHRCdWZmZXJbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRCdWZmZXJbaSsxXSA9IGNvbnRlbnRBcnJheVtpXTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHsgdHlwZTogcGFja2V0LnR5cGUsIGRhdGE6IGZyLnJlc3VsdCB9LCBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9O1xuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoZG9udFNlbmRCbG9icykge1xuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gIGxlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtsZW5ndGguYnVmZmVyLCBwYWNrZXQuZGF0YV0pO1xuXG4gIHJldHVybiBjYWxsYmFjayhibG9iKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0IHdpdGggYmluYXJ5IGRhdGEgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCwgaGFzIGB0eXBlYCBhbmQgYGRhdGFgXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqL1xuXG5leHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgY2FsbGJhY2spIHtcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYjY0ID0gZnIucmVzdWx0LnNwbGl0KCcsJylbMV07XG4gICAgICBjYWxsYmFjayhtZXNzYWdlICsgYjY0KTtcbiAgICB9O1xuICAgIHJldHVybiBmci5yZWFkQXNEYXRhVVJMKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHZhciBiNjRkYXRhO1xuICB0cnkge1xuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB3aXRoIHR5cGVkIGFycmF5c1xuICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTtcbiAgICB2YXIgYmFzaWMgPSBuZXcgQXJyYXkodHlwZWQubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldO1xuICAgIH1cbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBiYXNpYyk7XG4gIH1cbiAgbWVzc2FnZSArPSBidG9hKGI2NGRhdGEpO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICAvLyBTdHJpbmcgZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7XG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtcblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xuICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpO1xuICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHtcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcbiAgfVxuICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xufTtcblxuZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgaWYgKCFiYXNlNjRlbmNvZGVyKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcblxuICBpZiAoYmluYXJ5VHlwZSA9PT0gJ2Jsb2InICYmIEJsb2IpIHtcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXG4gKlxuICogICAgIDxsZW5ndGg+OmRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAxMTpoZWxsbyB3b3JsZDI6aGlcbiAqXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxuICogZW5jb2RlZCBzdHJpbmdzIGFyZSBtYXJrZWQgd2l0aCBhIGIgYmVmb3JlIHRoZSBsZW5ndGggc3BlY2lmaWVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKHBhY2tldHMsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICB2YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgaWYgKEJsb2IgJiYgIWRvbnRTZW5kQmxvYnMpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IocGFja2V0cywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsICFpc0JpbmFyeSA/IGZhbHNlIDogc3VwcG9ydHNCaW5hcnksIGZhbHNlLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlclxuICovXG5cbmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTtcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcblxuICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikge1xuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIGNiKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpO1xuICB9XG59XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcbiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWNrZXQ7XG4gIGlmIChkYXRhID09PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSAnJywgbiwgbXNnO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hyID0gZGF0YS5jaGFyQXQoaSk7XG5cbiAgICBpZiAoY2hyICE9PSAnOicpIHtcbiAgICAgIGxlbmd0aCArPSBjaHI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pO1xuXG4gICAgaWYgKGxlbmd0aCAhPSBtc2cubGVuZ3RoKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBpZiAobXNnLmxlbmd0aCkge1xuICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XG4gICAgICAgIC8vIHBhcnNlciBlcnJvciBpbiBpbmRpdmlkdWFsIHBhY2tldCAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBjYWxsYmFjayhwYWNrZXQsIGkgKyBuLCBsKTtcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpIGFzIGJpbmFyeS5cbiAqXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXG4gKiAyNTU+PGRhdGE+XG4gKlxuICogRXhhbXBsZTpcbiAqIDEgMyAyNTUgMSAyIDMsIGlmIHRoZSBiaW5hcnkgY29udGVudHMgYXJlIGludGVycHJldGVkIGFzIDggYml0IGludGVnZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGVuY29kZWQgcGF5bG9hZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgZW5jb2RlZFBhY2tldHMpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBwKSB7XG4gICAgICB2YXIgbGVuO1xuICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gcC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcbiAgICB9LCAwKTtcblxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICAgIHZhciBidWZmZXJJbmRleCA9IDA7XG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gJ3N0cmluZyc7XG4gICAgICB2YXIgYWIgPSBwO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGFiID0gdmlldy5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZykgeyAvLyBub3QgdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xuICAgICAgfSBlbHNlIHsgLy8gdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XG5cbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gdmlld1tpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRW5jb2RlIGFzIEJsb2JcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHZhciBiaW5hcnlJZGVudGlmaWVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RlZCA9IHZpZXcuYnVmZmVyO1xuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgID8gZW5jb2RlZC5ieXRlTGVuZ3RoXG4gICAgICAgIDogZW5jb2RlZC5zaXplO1xuXG4gICAgICB2YXIgbGVuU3RyID0gbGVuLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgbGVuZ3RoQXJ5ID0gbmV3IFVpbnQ4QXJyYXkobGVuU3RyLmxlbmd0aCArIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVuZ3RoQXJ5W2ldID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcblxuICAgICAgaWYgKEJsb2IpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcbiAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIGJsb2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCbG9iKHJlc3VsdHMpKTtcbiAgfSk7XG59O1xuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XG4gKiBpbnRlcnByZXRpbmcgZWFjaCBieXRlIGFzIGEga2V5IGNvZGUgZm9yIGVudHJpZXMgbWFya2VkIHRvIHN0YXJ0IHdpdGggMC4gU2VlXG4gKiBkZXNjcmlwdGlvbiBvZiBlbmNvZGVQYXlsb2FkQXNCaW5hcnlcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXJUYWlsLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xuICAgIHZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDtcbiAgICB2YXIgbXNnTGVuZ3RoID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmICh0YWlsQXJyYXlbaV0gPT09IDI1NSkgYnJlYWs7XG5cbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChtc2dMZW5ndGgubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xuICAgIH1cblxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XG4gICAgbXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTtcblxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgdG8gdHlwZWQgYXJyYXlzXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XG4gICAgICAgIG1zZyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVmZmVycy5wdXNoKG1zZyk7XG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XG4gIH1cblxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmZlciwgaSkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgfSk7XG59O1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5pbXBvcnQgVGhyZWFkIGZyb20gXCJhcGkvc3RvcmUvL1RocmVhZFwiO1xuaW1wb3J0IFVpLCB7IENsaWNrZWRUeXBlIH0gZnJvbSBcImNsaWVudC9zdG9yZS9VaVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPZmZzZXRGaW5kSWQoKSB7XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlVGltZWxpbmUoKTogXCJUaW1lbGluZVwiIHtcbiAgICByZXR1cm4gXCJUaW1lbGluZVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVTaW5nbGUoKTogXCJTaW5nbGVcIiB7XG4gICAgcmV0dXJuIFwiU2luZ2xlXCI7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZU11bHRpKCk6IFwiTXVsdGlcIiB7XG4gICAgcmV0dXJuIFwiTXVsdGlcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlQ2hpbGQoKTogXCJDaGlsZFwiIHtcbiAgICByZXR1cm4gXCJDaGlsZFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVMb2dzKCk6IFwiTG9nc1wiIHtcbiAgICByZXR1cm4gXCJMb2dzXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVRhZ1R5cGVObygpIHtcbiAgICByZXR1cm4gXCJodG1sXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVRhZ1R5cGVBdWRpbygpIHtcbiAgICByZXR1cm4gXCJhdWRpb1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlVmlkZW8oKSB7XG4gICAgcmV0dXJuIFwidmlkZW9cIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVHlwZU1wMygpIHtcbiAgICByZXR1cm4gXCJtcDNcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVHlwZU1wNCgpIHtcbiAgICByZXR1cm4gXCJtcDRcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVHlwZU00YSgpIHtcbiAgICByZXR1cm4gXCJtNGFcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhQ2hzKCkge1xuICAgIHJldHVybiBbQXBwLm1lZGlhVHlwZU1wMywgQXBwLm1lZGlhVHlwZU1wNCwgQXBwLm1lZGlhVHlwZU00YV07XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYUNoVGFnVHlwZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtBcHAubWVkaWFUeXBlTXAzXTogQXBwLm1lZGlhVGFnVHlwZUF1ZGlvLFxuICAgICAgW0FwcC5tZWRpYVR5cGVNcDRdOiBBcHAubWVkaWFUYWdUeXBlVmlkZW8sXG4gICAgICBbQXBwLm1lZGlhVHlwZU00YV06IEFwcC5tZWRpYVRhZ1R5cGVBdWRpbyxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXRNZWRpYVR5cGUoc3JjLCBwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5jaFR5cGUpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuY2hUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gQXBwLmdldE1lZGlhVHlwZUZyb21TcmMoc3JjKTtcbiAgfVxuICBzdGF0aWMgZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpIHtcbiAgICBjb25zdCBtZWRpYUNoVGFnVHlwZUtleXMgPSBPYmplY3Qua2V5cyhBcHAubWVkaWFDaFRhZ1R5cGVzKTtcbiAgICBjb25zdCBtZWRpYUNoVGFnVHlwZUxlbmd0aCA9IG1lZGlhQ2hUYWdUeXBlS2V5cy5sZW5ndGg7XG4gICAgbGV0IG1lZGlhVHlwZSA9IFwiaHRtbFwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVkaWFDaFRhZ1R5cGVMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVnRXhwID0gbmV3IFJlZ0V4cChgLiR7bWVkaWFDaFRhZ1R5cGVLZXlzW2ldfSRgKTtcbiAgICAgIGlmIChzcmMubWF0Y2gocmVnRXhwKSkge1xuICAgICAgICBtZWRpYVR5cGUgPSBBcHAubWVkaWFDaFRhZ1R5cGVzW21lZGlhQ2hUYWdUeXBlS2V5c1tpXV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVkaWFUeXBlO1xuICB9XG4gIHN0YXRpYyB2YWxpZElucHV0UG9zdCh2YWx1ZSkge1xuICAgIGlmICgvXFxyXFxuJHxcXG4kfFxcciQvZ2ltLnRlc3QodmFsdWUpKSByZXR1cm4gXCJMQVNUIFRZUEUgQlJFQUsgTElORS5cIjtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgdmFsaWRQb3N0KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBcIlwiKSByZXR1cm4gXCJOTyBJTlBVVCBQT1NUXCI7XG4gICAgaWYgKC9eXFxyXFxuKyR8XFxuKyR8XFxyKyQvZy50ZXN0KHZhbHVlKSkgcmV0dXJuIFwiT05MWSBORVcgTElORVwiO1xuICAgIGlmICgvXlxccyskL2cudGVzdCh2YWx1ZSkpIHJldHVybiBcIm9ubHkgc3BhY2VcIjtcbiAgICBpZiAoL15cXHJcXG4rKFxcc3xcXFMpKyR8XlxcbisoXFxzfFxcUykrJHxeXFxyKyhcXHN8XFxTKSskLy50ZXN0KHZhbHVlKSkgcmV0dXJuIFwiRU1QVFkgUE9TVFwiO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRXaWR0aChwYXJhbXMpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cuaW5uZXJXaWR0aCkgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGlmIChwYXJhbXMud2lkdGgpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLndpZHRoID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChwYXJhbXMud2lkdGguaW5kZXhPZihcInB4XCIpID49IDApIHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHBhcmFtcy53aWR0aC5yZXBsYWNlKFwicHhcIiwgXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zLndpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRIZWlnaHQocGFyYW1zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cuaW5uZXJIZWlnaHQpIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZDogc3RyaW5nO1xuXG4gIC8vIOOCueODrOODg+ODieWfuuacrOmWoumAo1xuICBpc1Jvb3RDaDogYm9vbGVhbjtcbiAgaXNMaW5rQ2g6IGJvb2xlYW47XG4gIGlzTWVkaWFDaDogYm9vbGVhbjtcbiAgcm9vdENoOiBzdHJpbmc7XG4gIHJvb3RUaXRsZTogc3RyaW5nO1xuICBjaFR5cGU6IFwidmlkZW9cIiB8IFwiYXVkaW9cIiB8IFwiaHRtbFwiO1xuICBkaXNwVGhyZWFkVHlwZTogXCJNdWx0aVwiIHwgXCJTaW5nbGVcIiB8IFwiQ2hpbGRcIiB8IFwiVGltZWxpbmVcIiB8IFwiTG9nc1wiO1xuICB0dW5lZDogc3RyaW5nO1xuICBtdWx0aXN0cmVhbTogYm9vbGVhbjtcblxuICAvLyDmipXnqL/mg4XloLFcbiAgZmluZFR5cGU6IFwiaHRtbFwiIHwgXCJtcDNcIiB8IFwibXA0XCIgfCBcIm00YVwiIHwgXCJhdWRpb1wiIHwgXCJ2aWRlb1wiO1xuICBvZmZzZXRGaW5kSWQ6IHN0cmluZztcbiAgb2Zmc2V0VGltZWxpbmVGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgb2Zmc2V0U2luZ2xlRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldE11bHRpRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldENoaWxkRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldExvZ3NGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcblxuICAvLyDlhaXlipvnirbmhYtcbiAgaW5wdXRQb3N0OiBzdHJpbmc7XG4gIGlucHV0U3RhbXBJZDogc3RyaW5nIHwgbnVtYmVyO1xuICBpbnB1dEN1cnJlbnRUaW1lOiBudW1iZXI7XG4gIGlucHV0U2VhcmNoOiBzdHJpbmc7XG5cbiAgLy8g44Gd44Gu5LuWXG4gIGlzVG9nZ2xlTXVsdGlzdHJlYW06IGJvb2xlYW47XG4gIGFjdGlvbmVkOiBzdHJpbmc7XG4gIGRlYnVnOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSwgY2FsbCA9IFwiXCIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8g5rqW5YKZXG4gICAgY29uc3QgY2ggPSBwYXJhbXMuY2ggPyBwYXJhbXMuY2ggOiBcIi9cIjtcblxuICAgIC8vIElEXG4gICAgY29uc3QgaWQgPSBwYXJhbXMuaWQgPyBwYXJhbXMuaWQgOiBcIlwiO1xuXG4gICAgLy8g44K544Os44OD44OJ5Z+65pys6Zai6YCjXG4gICAgY29uc3QgaXNNZWRpYUNoID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc01lZGlhQ2gpID8gcGFyYW1zLmlzTWVkaWFDaCA6IEFwcC5nZXRJc01lZGlhQ2goY2gpO1xuICAgIGNvbnN0IGlzTGlua0NoID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc0xpbmtDaCkgPyBwYXJhbXMuaXNMaW5rQ2ggOiBmYWxzZTtcbiAgICBjb25zdCByb290Q2ggPSBwYXJhbXMucm9vdENoID8gcGFyYW1zLnJvb3RDaCA6IGNoO1xuICAgIGNvbnN0IGlzUm9vdENoID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc1Jvb3RDaCkgPyBwYXJhbXMuaXNSb290Q2ggOiByb290Q2ggPT09IGNoO1xuICAgIGNvbnN0IHJvb3RUaXRsZSA9IHBhcmFtcy5yb290VGl0bGUgPyBwYXJhbXMucm9vdFRpdGxlIDogXCJ0YWxrblwiO1xuICAgIGNvbnN0IHNyYyA9IEFwcC5nZXRNZWRpYVNyYyhwYXJhbXMucHJvdG9jb2wsIGNoKTtcbiAgICBjb25zdCBjaFR5cGUgPSBBcHAuZ2V0TWVkaWFUeXBlKHNyYywgcGFyYW1zKTtcbiAgICBjb25zdCB0dW5lZCA9IHBhcmFtcyAmJiBwYXJhbXMudHVuZWQgPyBwYXJhbXMudHVuZWQgOiBcIlwiO1xuICAgIGNvbnN0IGRpc3BUaHJlYWRUeXBlID0gQXBwLmdldERpc3BUaHJlYWRUeXBlKHBhcmFtcywgaXNNZWRpYUNoKTtcbiAgICBjb25zdCBtdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMubXVsdGlzdHJlYW0pID8gcGFyYW1zLm11bHRpc3RyZWFtIDogdHJ1ZTtcblxuICAgIC8vIOaKleeov+aDheWgsVxuICAgIGNvbnN0IGZpbmRUeXBlID0gcGFyYW1zICYmIHBhcmFtcy5maW5kVHlwZSA/IHBhcmFtcy5maW5kVHlwZSA6IFRocmVhZC5maW5kVHlwZUFsbDtcbiAgICBjb25zdCBvZmZzZXRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRUaW1lbGluZUZpbmRJZCA9XG4gICAgICBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldFRpbWVsaW5lRmluZElkID8gcGFyYW1zLm9mZnNldFRpbWVsaW5lRmluZElkIDogQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0U2luZ2xlRmluZElkID1cbiAgICAgIHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0U2luZ2xlRmluZElkID8gcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldE11bHRpRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldENoaWxkRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRDaGlsZEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRDaGlsZEZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldExvZ3NGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TG9nc0ZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuXG4gICAgLy8g5YWl5Yqb54q25oWLXG4gICAgY29uc3QgaW5wdXRQb3N0ID0gcGFyYW1zLmlucHV0UG9zdCA/IHBhcmFtcy5pbnB1dFBvc3QgOiBcIlwiO1xuICAgIGNvbnN0IGlucHV0U3RhbXBJZCA9IHBhcmFtcy5pbnB1dFN0YW1wSWQgPyBwYXJhbXMuaW5wdXRTdGFtcElkIDogZmFsc2U7XG4gICAgY29uc3QgaW5wdXRDdXJyZW50VGltZSA9IHBhcmFtcy5pbnB1dEN1cnJlbnRUaW1lID8gcGFyYW1zLmlucHV0Q3VycmVudFRpbWUgOiAwLjA7XG4gICAgY29uc3QgaW5wdXRTZWFyY2ggPSBwYXJhbXMuaW5wdXRTZWFyY2ggPyBwYXJhbXMuaW5wdXRTZWFyY2ggOiBcIlwiO1xuXG4gICAgLy8g44Gd44Gu5LuWXG4gICAgY29uc3QgaXNUb2dnbGVNdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSkgPyBwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSA6IGZhbHNlO1xuICAgIGNvbnN0IGFjdGlvbmVkID0gcGFyYW1zICYmIHBhcmFtcy5hY3Rpb25lZCA/IHBhcmFtcy5hY3Rpb25lZCA6IFwiXCI7XG4gICAgY29uc3QgZGVidWcgPSBTY2hlbWEuaXNTZXQocGFyYW1zLmRlYnVnKSA/IHBhcmFtcy5kZWJ1ZyA6IFwiXCI7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHtcbiAgICAgIC8vIElEXG4gICAgICBpZCxcblxuICAgICAgLy8g44K544Os44OD44OJ5Z+65pys6Zai6YCjXG4gICAgICBpc1Jvb3RDaCxcbiAgICAgIGlzTGlua0NoLFxuICAgICAgaXNNZWRpYUNoLFxuICAgICAgcm9vdENoLFxuICAgICAgcm9vdFRpdGxlLFxuICAgICAgY2hUeXBlLFxuICAgICAgZGlzcFRocmVhZFR5cGUsXG4gICAgICB0dW5lZCxcbiAgICAgIG11bHRpc3RyZWFtLCAvLyBkaXNwVGhyZWFkVHlwZeOBjENoaWxkLCBUaW1lbGluZeOBq+OBquOBo+OBpuOCgm11bHRpc3RyZWFt54q25oWL44KS57at5oyB44GZ44KLXG5cbiAgICAgIC8vICAgICAgdGhyZWFkU2Nyb2xsWSxcblxuICAgICAgLy8g5oqV56i/5oOF5aCxXG4gICAgICBmaW5kVHlwZSxcbiAgICAgIG9mZnNldEZpbmRJZCxcbiAgICAgIG9mZnNldFRpbWVsaW5lRmluZElkLFxuICAgICAgb2Zmc2V0U2luZ2xlRmluZElkLFxuICAgICAgb2Zmc2V0TXVsdGlGaW5kSWQsXG4gICAgICBvZmZzZXRDaGlsZEZpbmRJZCxcbiAgICAgIG9mZnNldExvZ3NGaW5kSWQsXG5cbiAgICAgIC8vIGRldGFpbOaDheWgsVxuXG4gICAgICAvLyDlhaXlipvnirbmhYtcbiAgICAgIGlucHV0UG9zdCxcbiAgICAgIGlucHV0U3RhbXBJZCxcbiAgICAgIGlucHV0Q3VycmVudFRpbWUsXG4gICAgICBpbnB1dFNlYXJjaCxcblxuICAgICAgLy8g44Gd44Gu5LuWXG4gICAgICBpc1RvZ2dsZU11bHRpc3RyZWFtLFxuICAgICAgYWN0aW9uZWQsXG4gICAgICBkZWJ1ZyxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBpc01lZGlhQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICByZXR1cm4gQXBwLmlzQXVkaW9Db250ZW50VHlwZShjb250ZW50VHlwZSkgfHwgQXBwLmlzVmlkZW9Db250ZW50VHlwZShjb250ZW50VHlwZSk7XG4gIH1cblxuICBzdGF0aWMgaXNBdWRpb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlLmluZGV4T2YoQXBwLm1lZGlhVGFnVHlwZUF1ZGlvKSA+PSAwO1xuICB9XG5cbiAgc3RhdGljIGlzVmlkZW9Db250ZW50VHlwZShjb250ZW50VHlwZSkge1xuICAgIHJldHVybiBjb250ZW50VHlwZS5pbmRleE9mKEFwcC5tZWRpYVRhZ1R5cGVWaWRlbykgPj0gMDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZWRpYVNyYyhwcm90b2NvbCwgY2gpIHtcbiAgICByZXR1cm4gcHJvdG9jb2wgKyBcIi9cIiArIGNoLnJlcGxhY2UoL1xcLyQvLCBcIlwiKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJc01lZGlhQ2goY2gpIHtcbiAgICByZXR1cm4gQXBwLm1lZGlhQ2hzLnNvbWUoKGV4dCkgPT4ge1xuICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChgLiR7ZXh0fVxcLyR8LiR7ZXh0fSRgKTtcbiAgICAgIHJldHVybiBjaC5tYXRjaChyZWdleHApO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGlzQWN0aXZlTXVsdGlzdHJlYW0oeyBhcHAsIHVpIH0sIGNhbGxlZCA9IFwiXCIpIHtcbiAgICByZXR1cm4gdWkubWVudUNvbXBvbmVudCA9PT0gVWkubWVudUNvbXBvbmVudFJhbmtMYWJlbCAmJiBhcHAuZGlzcFRocmVhZFR5cGUgPT09IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICB9XG5cbiAgc3RhdGljIGdldERpc3BUaHJlYWRUeXBlKHBhcmFtcywgaXNNZWRpYUNoKSB7XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuZGlzcFRocmVhZFR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc01lZGlhQ2gpIHtcbiAgICAgICAgcmV0dXJuIEFwcC5kaXNwVGhyZWFkVHlwZVRpbWVsaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRPZmZzZXRGaW5kSWQoeyBwb3N0cyB9KSB7XG4gICAgaWYgKHBvc3RzICYmIHBvc3RzWzBdICYmIHBvc3RzWzBdLl9pZCkge1xuICAgICAgcmV0dXJuIHBvc3RzWzBdLl9pZDtcbiAgICB9XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGVwVG9EaXNwVGhyZWFkVHlwZSh7IGFwcCwgcmFua3MgfTogYW55LCB0aHJlYWRTdGF0dXM6IGFueSwgdG9DaDogc3RyaW5nLCBjbGlja2VkOiBDbGlja2VkVHlwZSA9IFwiXCIpIHtcbiAgICBsZXQgYWZ0ZXJEaXNwVGhyZWFkVHlwZSA9IFwiXCI7XG4gICAgY29uc3QgYmVmb3JlRGlzcFRocmVhZFR5cGUgPSBhcHAgJiYgYXBwLmRpc3BUaHJlYWRUeXBlID8gYXBwLmRpc3BUaHJlYWRUeXBlIDogQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGk7XG4gICAgYXBwID0gQXBwLmdldFN0ZXBEaXNwVGhyZWFkVHlwZSh7IGFwcCwgcmFua3MgfSwgdGhyZWFkU3RhdHVzLCB0b0NoLCBjbGlja2VkKTtcbiAgICBhZnRlckRpc3BUaHJlYWRUeXBlID0gYXBwLmRpc3BUaHJlYWRUeXBlO1xuICAgIHJldHVybiB7IGFwcCwgc3RlcFRvOiBgJHtiZWZvcmVEaXNwVGhyZWFkVHlwZX0gdG8gJHthZnRlckRpc3BUaHJlYWRUeXBlfWAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGVwRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmtzIH0sIHRocmVhZFN0YXR1czogYW55ID0ge30sIHRvQ2gsIGNsaWNrZWQpIHtcbiAgICBjb25zdCBsb2cgPSBmYWxzZTtcbiAgICBjb25zdCB1cGRhdGVkQXBwID0gYXBwID8gYXBwIDoge307XG4gICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKHJhbmtzKTtcbiAgICBpZiAobG9nKSBjb25zb2xlLmxvZyh0aHJlYWRTdGF0dXMpO1xuXG4gICAgaWYgKHRocmVhZFN0YXR1cy5pc01lZGlhQ2gpIHtcbiAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKFwiQlwiKTtcbiAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTtcbiAgICAgIHVwZGF0ZWRBcHAub2Zmc2V0RmluZElkID0gdXBkYXRlZEFwcC5vZmZzZXRUaW1lbGluZUZpbmRJZFxuICAgICAgICA/IHVwZGF0ZWRBcHAub2Zmc2V0VGltZWxpbmVGaW5kSWRcbiAgICAgICAgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICAgIHVwZGF0ZWRBcHAuaXNMaW5rQ2ggPSBjbGlja2VkID09PSBcIkxpbmtzXCIgfHwgY2xpY2tlZCA9PT0gXCJmaW5kTWVkaWFDaFwiIHx8IGNsaWNrZWQgPT09IFwiVG9NZWRpYVwiID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgdXBkYXRlZEFwcC5pc01lZGlhQ2ggPSB0cnVlO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRBcHA7XG4gICAgfVxuXG4gICAgaWYgKGNsaWNrZWQgPT09IFwiQmFja1RvUm9vdENoXCIpIHtcbiAgICAgIHVwZGF0ZWRBcHAuaXNMaW5rQ2ggPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoY2xpY2tlZCA9PT0gXCJMaW5rc1wiICYmIHJhbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGhhdmVNZW51SW5kZXggPSByYW5rcy5zb21lKChtaSkgPT4ge1xuICAgICAgICByZXR1cm4gbWkuY2ggPT09IHRvQ2ggfHwgbWkuY2ggPT09IHRvQ2ggKyBcIi9cIjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkMgXCIgKyBoYXZlTWVudUluZGV4ICsgXCJcIik7XG5cbiAgICAgIGlmICghaGF2ZU1lbnVJbmRleCkge1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkRcIik7XG5cbiAgICAgICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZUNoaWxkO1xuICAgICAgICB1cGRhdGVkQXBwLmlzTGlua0NoID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZWRBcHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVwZGF0ZWRBcHAucm9vdENoID09PSB0b0NoKSB7XG4gICAgICBpZiAodXBkYXRlZEFwcC5tdWx0aXN0cmVhbSkge1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkVcIik7XG4gICAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKFwiRlwiKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coXCJHXCIpO1xuICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZUNoaWxkO1xuICAgIH1cbiAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhhcHApO1xuICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICB9XG59XG4iLCJpbXBvcnQgQXBwIGZyb20gXCJhcGkvc3RvcmUvQXBwXCI7XG5pbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcbmltcG9ydCBQb3N0TXVsdGkgZnJvbSBcImFwaS9zdG9yZS9Qb3N0TXVsdGlcIjtcbmltcG9ydCBQb3N0c1RpbWVsaW5lIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVwiO1xuaW1wb3J0IFBvc3RzVGltZWxpbmVTdG9jayBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9ja1wiO1xuaW1wb3J0IFBvc3RzU2luZ2xlIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNTaW5nbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdHMge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwUG9zdHMoc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSwgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUsIHBvc3RzQ2hpbGQsIHBvc3RzTG9ncyB9ID0gc3RhdGU7XG4gICAgc3dpdGNoIChhcHAuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6XG4gICAgICAgIHJldHVybiBwb3N0c1RpbWVsaW5lO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgcmV0dXJuIHBvc3RzTXVsdGk7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgcmV0dXJuIHBvc3RzU2luZ2xlO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgcmV0dXJuIHBvc3RzQ2hpbGQ7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIHJldHVybiBwb3N0c0xvZ3M7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHMgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBleGlzdFBvc3RzID0gcG9zdHMgJiYgcG9zdHMubGVuZ3RoID4gMDtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0TXVsdGkoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IFtdO1xuICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBbXTtcbiAgICBzd2l0Y2ggKGFwcC5kaXNwVGhyZWFkVHlwZSkge1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTpcbiAgICAgICAgYWN0aW9uID0gUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZShhY3Rpb24sIHBvc3RzLCBzdGF0ZSwgZXhpc3RQb3N0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgYWN0aW9uLnBvc3RzTXVsdGkgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgYWN0aW9uLnBvc3RzU2luZ2xlID0gZXhpc3RQb3N0cyA/IHBvc3RzIDogW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzVGltZWxpbmUoYWN0aW9uLCBwb3N0cywgc3RhdGUsIGV4aXN0UG9zdHMpIHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIikge1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUucHVzaChhY3Rpb24ucG9zdHNbMF0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCIpIHtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG5cbiAgICAgIGlmIChleGlzdFBvc3RzKSB7XG4gICAgICAgIGNvbnN0IHBvc3RzTGVuZ3RoID0gcG9zdHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocG9zdHNbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQgcHJvY2VzcyBmcm9tIFwicHJvY2Vzc1wiO1xuY29uc3QgaG9zdE5hbWUgPSBwcm9jZXNzLmVudi5IT1NUTkFNRSA/IHByb2Nlc3MuZW52LkhPU1ROQU1FIDogXCJsb2NhbGhvc3RcIjtcbmNvbnN0IGRlZmluZTogYW55ID0ge1xuICBQUk9EVUNUSU9OOiBcIlBST0RVQ1RJT05cIixcbiAgTE9DQUxIT1NUOiBcIkxPQ0FMSE9TVFwiLFxuICBERVZFTE9QTUVOVDogXCJERVZFTE9QTUVOVFwiLFxuICBQUk9EVUNUSU9OX0lQOiBob3N0TmFtZSxcbiAgUFJPRFVDVElPTl9ET01BSU46IFwidGFsa24uaW9cIixcbiAgREVWRUxPUE1FTlRfRE9NQUlOOiBcImxvY2FsaG9zdFwiLFxuICBBV1NfSE9TVF9LRVk6IFwiZWMyLmludGVybmFsXCIsXG4gIFBPUlRTOiB7XG4gICAgSFRUUDogODAsXG4gICAgSFRUUFM6IDQ0MyxcbiAgICBERVZFTE9QTUVOVDogODA4MCxcbiAgICBERVZFTE9QTUVOVF9BUEk6IDgwODEsXG4gICAgUkVESVM6IDYzNzksXG4gICAgTU9OR086IDI3MDE3LFxuICAgIFNPQ0tFVF9JTzogMTA0NDMsXG4gIH0sXG4gIFNVQl9ET01BSU5TOiB7XG4gICAgV1dXOiBcInd3d1wiLFxuICAgIEFQSTogXCJhcGlcIixcbiAgICBERVNDOiBcImRlc2NcIixcbiAgICBQT1JUQUw6IFwicG9ydGFsXCIsXG4gICAgQ0xJRU5UOiBcImNsaWVudFwiLFxuICAgIEFTU0VUUzogXCJhc3NldHNcIixcbiAgICBTRVNTSU9OOiBcInNlc3Npb25cIixcbiAgICBBVVRPOiBcImF1dG9cIixcbiAgICBPV046IFwib3duXCIsXG4gICAgRVhUOiBcImV4dFwiLFxuICAgIFRSQU5TQUNUSU9OOiBcInRyYW5zYWN0aW9uXCIsXG4gIH0sXG4gIEFQUF9UWVBFUzoge1xuICAgIFBPUlRBTDogXCJQT1JUQUxcIixcbiAgICBFWFRFTlNJT046IFwiRVhURU5TSU9OXCIsXG4gICAgQVBJOiBcIkFQSVwiLFxuICB9LFxuICBVUkw6IHtcbiAgICB0d2l0dGVyOiBcImh0dHBzOi8vdHdpdHRlci5jb20vXCIsXG4gICAgZmFjZWJvb2s6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1wiLFxuICAgIGFwcHN0b3JlOiBcImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9hcHAvaWRcIixcbiAgICBwbGF5c3RvcmU6IFwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPVwiLFxuICB9LFxuICB0YWxrbkNsaWVudEpzOiBcInRhbGtuLmNsaWVudC5qc1wiLFxuICB0YWxrbkFwaUpzOiBcInRhbGtuLmFwaS5qc1wiLFxuICBub0lubmVyTm90aWY6IFwiU29ycnksIE5vIEZ1bmN0aW9uLlwiLFxuICBzdG9yYWdlS2V5OiB7XG4gICAgYmFzZUtleTogXCJAdGFsa25AXCIsXG4gICAgcG9zdHNUaW1lbGluZVplcm86IFwicG9zdHNUaW1lbGluZVplcm9cIixcbiAgICBwb3N0c1RpbWVsaW5lOiBcInBvc3RzVGltZWxpbmVcIixcbiAgICBwb3N0c1NpbmdsZTogXCJwb3N0c1NpbmdsZVwiLFxuICAgIHBvc3RzTXVsdGk6IFwicG9zdHNNdWx0aVwiLFxuICAgIHBvc3RzQ2hpbGQ6IFwicG9zdHNDaGlsZFwiLFxuICAgIHBvc3RzTG9nczogXCJwb3N0c0xvZ3NcIixcbiAgICB0aHJlYWRzOiBcInRocmVhZHNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZTtcbiIsImltcG9ydCBjb25mIGZyb20gXCJjb21tb24vY29uZlwiO1xuaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcbmltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcbmltcG9ydCBCb290T3B0aW9uIGZyb20gXCJhcGkvc3RvcmUvQm9vdE9wdGlvblwiO1xuXG5leHBvcnQgdHlwZSBUaHJlYWRTdGF0dXNUeXBlID0ge1xuICBkaXNwVHlwZTogc3RyaW5nO1xuICBpc0NyZWF0ZTogYm9vbGVhbjtcbiAgaXNSZXF1aXJlVXBzZXJ0OiBib29sZWFuO1xuICBpc011bHRpc3RyZWFtOiBib29sZWFuO1xuICBpc01lZGlhQ2g6IGJvb2xlYW47XG4gIGlzVG9nZ2xlTXVsdGlzdHJlYW06IGJvb2xlYW47XG4gIGdldE1vcmU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlYWQgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGZpbmRUeXBlQWxsKCk6IFwiQWxsXCIge1xuICAgIHJldHVybiBcIkFsbFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVIdG1sKCk6IFwiSHRtbFwiIHtcbiAgICByZXR1cm4gXCJIdG1sXCI7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZU11c2ljKCk6IFwiTXVzaWNcIiB7XG4gICAgcmV0dXJuIFwiTXVzaWNcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlVmlkZW8oKTogXCJWaWRlb1wiIHtcbiAgICByZXR1cm4gXCJWaWRlb1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVPdGhlcigpOiBcIk90aGVyXCIge1xuICAgIHJldHVybiBcIk90aGVyXCI7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtUaHJlYWQuZmluZFR5cGVIdG1sXTogW1widGV4dC9odG1sXCJdLFxuICAgICAgW1RocmVhZC5maW5kVHlwZU11c2ljXTogW1wiYXVkaW9cIiwgXCJhdWRpby9tcGVnXCIsIFwiYXVkaW8vbXA0XCIsIFwiYXVkaW8veC13YXZcIiwgXCJhdWRpby9taWRpXCIsIFwiYXBwbGljYXRpb24veC1zbWFmXCJdLFxuICAgICAgW1RocmVhZC5maW5kVHlwZVZpZGVvXTogW1xuICAgICAgICBcInZpZGVvXCIsXG4gICAgICAgIFwidmlkZW8vbXBlZ1wiLFxuICAgICAgICBcInZpZGVvL21wNFwiLFxuICAgICAgICBcInZpZGVvL3gtbXMtd212XCIsXG4gICAgICAgIFwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIixcbiAgICAgICAgXCJ2aWRlby8zZ3BwMlwiLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZWZhdWx0VGl0bGUoKSB7XG4gICAgcmV0dXJuIFwidGFsa25cIjtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0RmF2aWNvbigpIHtcbiAgICByZXR1cm4gXCJ1c2VyLnBuZ1wiO1xuICB9XG5cbiAgc3RhdGljIGlzV2luZG93T2JqKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXMuYWxlcnQgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBocmVmOiBzdHJpbmc7XG4gIGNoOiBzdHJpbmc7XG4gIGNoczogW3N0cmluZ10gPSBbXCIvXCJdO1xuICBoYXNTbGFzaDogYm9vbGVhbjtcbiAgcHJvdG9jb2w6IHN0cmluZyA9IFNlcXVlbmNlLlRBTEtOX1BST1RPQ09MO1xuICBjb250ZW50VHlwZTogc3RyaW5nO1xuICBjaGFyc2V0OiBzdHJpbmcgPSBcIlVURi04XCI7XG4gIGhvc3Q6IHN0cmluZyA9IFwiXCI7XG4gIGZhdmljb246IHN0cmluZyA9IFRocmVhZC5nZXREZWZhdWx0RmF2aWNvbigpO1xuICBmaW5kVHlwZTogXCJBbGxcIiB8IFwiSHRtbFwiIHwgXCJNdXNpY1wiIHwgXCJWaWRlb1wiID0gVGhyZWFkLmZpbmRUeXBlQWxsO1xuICB0aXRsZTogc3RyaW5nID0gVGhyZWFkLmdldERlZmF1bHRUaXRsZSgpO1xuICBtZXRhczogYW55ID0gW107XG4gIGVtb3Rpb25zOiBhbnkgPSB7fTtcbiAgc2VydmVyTWV0YXM6IGFueSA9IHt9O1xuICBjbGllbnRNZXRhczogYW55ID0ge307XG4gIGxpbmtzOiBhbnkgPSBbXTtcbiAgaDFzOiBhbnkgPSBbXTtcbiAgYXVkaW9zOiBhbnkgPSBbXTtcbiAgdmlkZW9zOiBhbnkgPSBbXTtcbiAgbGF5ZXI6IG51bWJlciA9IFRocmVhZC5nZXRMYXllcigpO1xuICBtZWRpYUluZGV4OiBhbnkgPSBbXTtcbiAgcG9zdENudDogbnVtYmVyID0gMDtcbiAgbXVsdGlQb3N0Q250OiBudW1iZXIgPSAwO1xuICBpc1NlbGZDaDogYm9vbGVhbiA9IGZhbHNlO1xuICBjcmVhdGVUaW1lOiBzdHJpbmcgPSBcIlwiO1xuICB1cGRhdGVUaW1lOiBzdHJpbmcgPSBcIlwiO1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9LCBib290T3B0aW9uPzogQm9vdE9wdGlvbiB8IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCB0aHJlYWQgPSBUaHJlYWQuaXNXaW5kb3dPYmoocGFyYW1zKSA/IFRocmVhZC5jb25zdHJ1Y3RvckZyb21XaW5kb3cocGFyYW1zLCBib290T3B0aW9uKSA6IHBhcmFtcztcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhyZWFkKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25zdHJ1Y3RvckZyb21XaW5kb3cocGFyYW1zLCBib290T3B0aW9uKSB7XG4gICAgY29uc3QgYm9vdENoID0gYm9vdE9wdGlvbi5jaCA/IGJvb3RPcHRpb24uY2ggOiBmYWxzZTtcbiAgICBjb25zdCBjaCA9IFRocmVhZC5nZXRDaChib290T3B0aW9uLCBib290Q2gpO1xuXG4gICAgbGV0IHRocmVhZDogYW55ID0ge307XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgIHRocmVhZC5jaCA9IGNoO1xuICAgIHRocmVhZC5jaHMgPSBbXCIvXCJdO1xuICAgIHRocmVhZC5oYXNTbGFzaCA9IGJvb3RPcHRpb24uaGFzc2xhc2ggPyBTY2hlbWEuZ2V0Qm9vbChib290T3B0aW9uLmhhc3NsYXNoKSA6IGZhbHNlO1xuICAgIHRocmVhZC5wcm90b2NvbCA9IFwidGFsa246XCI7XG4gICAgdGhyZWFkLmNvbnRlbnRUeXBlID0gXCJcIjtcbiAgICB0aHJlYWQuY2hhcnNldCA9IFwiVVRGLThcIjtcbiAgICB0aHJlYWQuaG9zdCA9IFwiXCI7XG4gICAgdGhyZWFkLmZhdmljb24gPSBUaHJlYWQuZ2V0RGVmYXVsdEZhdmljb24oKTtcbiAgICB0aHJlYWQuZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVBbGw7XG5cbiAgICBpZiAoYm9vdENoKSB7XG4gICAgICAvLyBVUkzjga7jgrPjg43jgq/jgrfjg6fjg7PmloflrZfliJfjgYvjgonjgafjga9QUk9UT0NPTOOBr+WIpOWIpeOBp+OBjeOBquOBhOOAglxuICAgICAgdGhyZWFkLnByb3RvY29sID0gVGhyZWFkLmdldFByb3RvY29sKGJvb3RDaCk7XG4gICAgICB0aHJlYWQuaG9zdCA9IFRocmVhZC5nZXRIb3N0KGJvb3RDaCk7XG4gICAgICB0aHJlYWQuY2hzID0gYm9vdENoLmNocyAmJiBib290Q2guY2hzLmxlbmd0aCA+IDAgPyBib290Q2guY2hzIDogVGhyZWFkLmdldENocyhjaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocmVhZC5wcm90b2NvbCA9IGxvY2F0aW9uLnByb3RvY29sID8gbG9jYXRpb24ucHJvdG9jb2wgOiBcIj8/Pz86XCI7XG4gICAgICB0aHJlYWQuY2hzID0gcGFyYW1zLmNocyAmJiBwYXJhbXMuY2hzLmxlbmd0aCA+IDAgPyBwYXJhbXMuY2hzIDogVGhyZWFkLmdldENocyhjaCk7XG4gICAgICB0aHJlYWQuY29udGVudFR5cGUgPSBkb2N1bWVudC5jb250ZW50VHlwZSA/IGRvY3VtZW50LmNvbnRlbnRUeXBlIDogXCJcIjtcbiAgICAgIHRocmVhZC5jaGFyc2V0ID0gZG9jdW1lbnQuY2hhcnNldCA/IGRvY3VtZW50LmNoYXJzZXQgOiBcIlwiO1xuXG4gICAgICB0aHJlYWQuaG9zdCA9IGxvY2F0aW9uLmhvc3QgPyBsb2NhdGlvbi5ob3N0IDogXCJcIjtcbiAgICAgIHRocmVhZC5mYXZpY29uID0gVGhyZWFkLmdldEZhdmljb25Gcm9tV2luZG93KHdpbmRvdyk7XG4gICAgfVxuXG4gICAgdGhyZWFkLnRpdGxlID0gVGhyZWFkLmdldERlZmF1bHRUaXRsZSgpO1xuICAgIHRocmVhZC5tZXRhcyA9IFtdO1xuICAgIHRocmVhZC5zZXJ2ZXJNZXRhcyA9IHt9O1xuICAgIHRocmVhZC5jbGllbnRNZXRhcyA9IHt9O1xuICAgIHRocmVhZC5lbW90aW9ucyA9IHt9O1xuICAgIHRocmVhZC5saW5rcyA9IFtdO1xuICAgIHRocmVhZC5oMXMgPSBbXTtcbiAgICB0aHJlYWQuYXVkaW9zID0gW107XG4gICAgdGhyZWFkLnZpZGVvcyA9IFtdO1xuICAgIHRocmVhZC5sYXllciA9IFRocmVhZC5nZXRMYXllcih0aHJlYWQuY2gpO1xuICAgIHRocmVhZC5tZWRpYUluZGV4ID0gW107XG4gICAgdGhyZWFkLnBvc3RDbnQgPSAwO1xuICAgIHRocmVhZC5tdWx0aVBvc3RDbnQgPSAwO1xuICAgIHRocmVhZC5pc1NlbGZDaCA9IFRocmVhZC5nZXRJc1NlbGZDaChocmVmLCB0aHJlYWQuY2gpO1xuICAgIHRocmVhZC5jcmVhdGVUaW1lID0gXCJcIjtcbiAgICB0aHJlYWQudXBkYXRlVGltZSA9IFwiXCI7XG4gICAgcmV0dXJuIHRocmVhZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaChib290T3B0aW9uOiBhbnksIGJvb3RDaDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGJvb3RPcHRpb24gJiYgYm9vdE9wdGlvbi5jaCAmJiBib290T3B0aW9uLmNoICE9PSBcIlwiID8gYm9vdE9wdGlvbi5jaCA6IFwiL1wiO1xuICB9XG5cbiAgc3RhdGljIGdldENoVG9wKGNoKSB7XG4gICAgaWYgKGNoICE9PSBcIlwiKSB7XG4gICAgICByZXR1cm4gXCIvXCIgKyBjaC5zcGxpdChcIi9cIilbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRDaHMoX2NoKSB7XG4gICAgbGV0IGNocyA9IFtcIi9cIl07XG5cbiAgICBpZiAoX2NoICE9PSBcIlwiKSB7XG4gICAgICAvL2NoID0gY2gucmVwbGFjZSgvXFx1MDAyZiQvZywgJycpO1xuICAgICAgY29uc3QgY2ggPSBfY2guc2xpY2UoLTEpID09PSBcIi9cIiA/IF9jaCA6IF9jaCArIFwiL1wiO1xuXG4gICAgICBpZiAoY2ggIT09IFwiL1wiKSB7XG4gICAgICAgIGNvbnN0IGNoQXJyID0gY2guc3BsaXQoXCIvXCIpO1xuICAgICAgICBjb25zdCBjaExlbmd0aCA9IGNoQXJyLmxlbmd0aDtcbiAgICAgICAgbGV0IG5ld0NoID0gXCJcIjtcbiAgICAgICAgbGV0IG5vU2xhc2hDaCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2hMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChjaEFycltpXSAhPT0gXCJcIikge1xuICAgICAgICAgICAgbmV3Q2ggKz0gY2hBcnJbaV07XG5cbiAgICAgICAgICAgIC8vIOS4gOeVquacgOW+jOOBjC/jga7loLTlkIhcbiAgICAgICAgICAgIG5ld0NoID0gbmV3Q2guc2xpY2UoLTEpID09PSBcIi9cIiA/IG5ld0NoIDogbmV3Q2ggKyBcIi9cIjtcblxuICAgICAgICAgICAgLy8g5LiA55Wq5pyA5Yid44GML+OBruWgtOWQiFxuICAgICAgICAgICAgbmV3Q2ggPSBuZXdDaC5zbGljZSgwLCAxKSA9PT0gXCIvXCIgPyBuZXdDaCA6IFwiL1wiICsgbmV3Q2g7XG5cbiAgICAgICAgICAgIC8vIOacgOW+jOOBjC/nhKHjgZfjga7jgrPjg43jgq/jgrfjg6fjg7PjgpLnlJ/miJBcbiAgICAgICAgICAgIC8vbm9TbGFzaENoID0gbmV3Q2guc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgICAgICAvL2Nocy5wdXNoKCBub1NsYXNoQ2ggKTtcbiAgICAgICAgICAgIGNocy5wdXNoKG5ld0NoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNocztcbiAgfVxuXG4gIHN0YXRpYyBnZXRIb3N0KGNoKSB7XG4gICAgaWYgKGNoLmluZGV4T2YoXCIuXCIpID49IDApIHtcbiAgICAgIGNoID0gY2gucmVwbGFjZShcImh0dHBzOi8vXCIsIFwiXCIpLnJlcGxhY2UoXCJodHRwOi8vXCIsIFwiXCIpO1xuICAgICAgcmV0dXJuIGNoLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5yZXBsYWNlKC9cXC8uKiQvLCBcIlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbmYuZG9tYWluO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRQcm90b2NvbChocmVmKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihcImh0dHA6XCIpID49IDApIHJldHVybiBcImh0dHA6XCI7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihcImh0dHBzOlwiKSA+PSAwKSByZXR1cm4gXCJodHRwczpcIjtcbiAgICBpZiAobG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wpIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICByZXR1cm4gXCI/Pz8/OlwiO1xuICB9XG5cbiAgc3RhdGljIGdldElzU2VsZkNoKGhyZWYsIGNoKSB7XG4gICAgY29uc3QgcmVwbGFjZWRIcmVmID0gaHJlZlxuICAgICAgLnJlcGxhY2UoXCJodHRwOi9cIiwgXCJcIilcbiAgICAgIC5yZXBsYWNlKFwiaHR0cHM6L1wiLCBcIlwiKVxuICAgICAgLnJlcGxhY2UoL1xcdTAwMmYkLywgXCJcIik7XG4gICAgcmV0dXJuIHJlcGxhY2VkSHJlZiA9PT0gY2g7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGF5ZXIoY2ggPSBcIi9cIikge1xuICAgIHJldHVybiBjaC5zcGxpdChcIi9cIikubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZWRpYVNyYyh0aHJlYWQpIHtcbiAgICByZXR1cm4gQXBwLmdldE1lZGlhU3JjKHRocmVhZC5wcm90b2NvbCwgdGhyZWFkLmNoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZWRpYVRhZ1R5cGUodGhyZWFkKSB7XG4gICAgY29uc3Qgc3JjID0gVGhyZWFkLmdldE1lZGlhU3JjKHRocmVhZCk7XG4gICAgcmV0dXJuIEFwcC5nZXRNZWRpYVR5cGUoc3JjLCBudWxsKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGYXZpY29uRnJvbVdpbmRvdyh3aW5kb3cpIHtcbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgY29uc3QgdSA9IHdpbmRvdy5kb2N1bWVudC5ldmFsdWF0ZShcbiAgICAgICAgXCIvL2xpbmtbY29udGFpbnMoQHJlbCwnaWNvbicpb3IoY29udGFpbnMoQHJlbCwnSUNPTicpKV1bMV0vQGhyZWZcIixcbiAgICAgICAgd2luZG93LmRvY3VtZW50LFxuICAgICAgICBudWxsLFxuICAgICAgICAyLFxuICAgICAgICBudWxsXG4gICAgICApLnN0cmluZ1ZhbHVlO1xuICAgICAgY29uc3QgaCA9IFwiaHR0cDovL1wiO1xuICAgICAgY29uc3QgaHMgPSBcImh0dHBzOi8vXCI7XG4gICAgICBjb25zdCBsID0gbG9jYXRpb24uaG9zdDtcbiAgICAgIGlmICh1LmluZGV4T2YoaCkgfHwgdS5pbmRleE9mKGhzKSkge1xuICAgICAgICBjb25zdCB1cmwgPSBoICsgbCArICh1IHx8IFwiL2Zhdmljb24uaWNvXCIpO1xuICAgICAgICBjb25zdCBzdHJDbnQgPSB1cmwuc3BsaXQoXCIvL1wiKS5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoc3RyQ250ID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXModGhyZWFkLCBhcHAsIGlzRXhpc3QsIHNldHRpbmcgPSB7fSk6IFRocmVhZFN0YXR1c1R5cGUge1xuICAgIGxldCBzdGF0dXMgPSB7XG4gICAgICBkaXNwVHlwZTogXCJcIiwgLy8gVElNRUxJTkUsIE1VTFRJLCBTSU5HTEUsIENISUxELCBMT0dTXG4gICAgICBpc0NyZWF0ZTogZmFsc2UsXG4gICAgICBpc1JlcXVpcmVVcHNlcnQ6IGZhbHNlLFxuICAgICAgaXNNdWx0aXN0cmVhbTogZmFsc2UsXG4gICAgICBpc01lZGlhQ2g6IGZhbHNlLFxuICAgICAgaXNUb2dnbGVNdWx0aXN0cmVhbTogZmFsc2UsXG4gICAgICBnZXRNb3JlOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogdGhyZWFk44GM56m644GuU2NoZW1h44GL44Gp44GG44GLKERC44Gr44OH44O844K/44GM5a2Y5Zyo44GX44Gq44GEKSAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc0NyZWF0ZSA9IFRocmVhZC5nZXRTdGF0dXNDcmVhdGUoaXNFeGlzdCk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiDmm7TmlrDjgYzlv4XopoHjgap0aHJlYWTjgYvjganjgYbjgYsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNSZXF1aXJlVXBzZXJ0ID0gVGhyZWFkLmdldFN0YXR1c0lzUmVxdWlyZVVwc2VydCh0aHJlYWQsIHNldHRpbmcsIHN0YXR1cy5pc0NyZWF0ZSk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiBNdWx0aXN0cmVhbeW9ouW8j+OBi+OBqeOBhuOBiyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzTXVsdGlzdHJlYW0gPSBUaHJlYWQuZ2V0U3RhdHVzSXNNdWx0aXN0cmVhbShhcHApO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogTXVsdGlzdHJlYW3jga7jg5zjgr/jg7PjgpLmirzjgZfjgZ/jgYsgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNUb2dnbGVNdWx0aXN0cmVhbSA9IFRocmVhZC5nZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtKGFwcCk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiB0aHJlYWTjgYznqbrjga5TY2hlbWHjgYvjganjgYbjgYsoRELjgavjg4fjg7zjgr/jgYzlrZjlnKjjgZfjgarjgYQpICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzTWVkaWFDaCA9IFRocmVhZC5nZXRTdGF0dXNJc01lZGlhQ2godGhyZWFkLmNoKTtcbiAgICByZXR1cm4gc3RhdHVzO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0NyZWF0ZShpc0V4aXN0KSB7XG4gICAgcmV0dXJuICFpc0V4aXN0O1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzUmVxdWlyZVVwc2VydCh0aHJlYWQsIHNldHRpbmcsIGlzQ3JlYXRlID0gZmFsc2UpIHtcbiAgICBpZiAodGhyZWFkLnVwZGF0ZVRpbWUpIHtcbiAgICAgIGNvbnN0IHRocmVhZFVwZGF0ZVRpbWUgPSB0aHJlYWQudXBkYXRlVGltZS5nZXRUaW1lID8gdGhyZWFkLnVwZGF0ZVRpbWUuZ2V0VGltZSgpIDogdGhyZWFkLnVwZGF0ZVRpbWU7XG5cbiAgICAgIC8vIOePvuWcqOaZguWIu+OCkuWPluW+l1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IG5vd1llYXIgPSBub3cuZ2V0RnVsbFllYXIoKTtcbiAgICAgIGNvbnN0IG5vd01vbnRoID0gbm93LmdldE1vbnRoKCk7XG4gICAgICBjb25zdCBub3dEYXkgPSBub3cuZ2V0RGF0ZSgpO1xuICAgICAgY29uc3Qgbm93SG91ciA9IG5vdy5nZXRIb3VycygpO1xuICAgICAgY29uc3Qgbm93TWludXRlcyA9IG5vdy5nZXRNaW51dGVzKCk7XG4gICAgICBjb25zdCBhY3RpdmVEYXRlID0gbmV3IERhdGUobm93WWVhciwgbm93TW9udGgsIG5vd0RheSwgbm93SG91ciAtIGNvbmYuZmluZE9uZVRocmVhZEFjdGl2ZUhvdXIpO1xuICAgICAgY29uc3QgYWN0aXZlVGltZSA9IGFjdGl2ZURhdGUuZ2V0VGltZSgpO1xuXG4gICAgICAvLyDjgrnjg6zjg4Pjg4njga7mm7TmlrDmmYLplpPjgajjgIHnj77lnKjmmYLplpMgLSBuIOOCkuavlOi8g+OBl+OBpuOAgeOCueODrOODg+ODieOBruabtOaWsOaZgumWk+OBjOWPpOOBi+OBo+OBn+OCiXRydWXjgpLov5TjgZlcbiAgICAgIHJldHVybiBpc0NyZWF0ZSA/IHRydWUgOiB0aHJlYWRVcGRhdGVUaW1lIDwgYWN0aXZlVGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc011bHRpc3RyZWFtKGFwcCk6IGJvb2xlYW4ge1xuICAgIGlmIChhcHAgPT09IHVuZGVmaW5lZCB8fCBhcHAuZGlzcFRocmVhZFR5cGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgJiYgYXBwLm11bHRpc3RyZWFtO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzTWVkaWFDaChjaCkge1xuICAgIHJldHVybiBBcHAuZ2V0SXNNZWRpYUNoKGNoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtKGFwcCk6IGJvb2xlYW4ge1xuICAgIC8vIFRPRE86IEp1ZGdlIGZpeCBhY3Rpb25lZC5cbiAgICBpZiAoYXBwID09PSB1bmRlZmluZWQgfHwgYXBwLmFjdGlvbmVkID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gYXBwLmlzVG9nZ2xlTXVsdGlzdHJlYW07XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29udGVudFR5cGVGcm9tRmluZFR5cGUoY29udGVudFR5cGUpIHtcbiAgICBjb25zdCBmaW5kVHlwZUh0bWwgPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZUh0bWxdO1xuICAgIGNvbnN0IGZpbmRUeXBlTXVzaWMgPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZU11c2ljXTtcbiAgICBjb25zdCBmaW5kVHlwZVZpZGVvID0gVGhyZWFkLmZpbmRUeXBlc1tUaHJlYWQuZmluZFR5cGVWaWRlb107XG5cbiAgICBsZXQgZmluZFR5cGU6XG4gICAgICB8IHR5cGVvZiBUaHJlYWQuZmluZFR5cGVIdG1sXG4gICAgICB8IHR5cGVvZiBUaHJlYWQuZmluZFR5cGVNdXNpY1xuICAgICAgfCB0eXBlb2YgVGhyZWFkLmZpbmRUeXBlVmlkZW9cbiAgICAgIHwgdHlwZW9mIFRocmVhZC5maW5kVHlwZU90aGVyO1xuICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZSAhPT0gXCJcIikge1xuICAgICAgbGV0IHNwbGl0ZWRDb250ZW50VHlwZSA9IFwiXCI7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcIjtcIikgPiAwKSB7XG4gICAgICAgIHNwbGl0ZWRDb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnNwbGl0KFwiO1wiKVswXTtcbiAgICAgIH1cbiAgICAgIGlmIChmaW5kVHlwZUh0bWwuaW5jbHVkZXMoc3BsaXRlZENvbnRlbnRUeXBlKSkge1xuICAgICAgICBmaW5kVHlwZSA9IFRocmVhZC5maW5kVHlwZUh0bWw7XG4gICAgICB9XG4gICAgICBpZiAoZmluZFR5cGVNdXNpYy5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlTXVzaWM7XG4gICAgICB9XG4gICAgICBpZiAoZmluZFR5cGVWaWRlby5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlVmlkZW87XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaW5kVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGaW5kVHlwZUZyb21TcmMoc3JjKSB7XG4gICAgY29uc3Qgc3RyID0gQXBwLmdldE1lZGlhVHlwZUZyb21TcmMoc3JjKTtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICB9XG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCIvKipcclxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xyXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICB2YXIgc3RyID0gJyc7XHJcblxyXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xyXG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XHJcbiAgdmFyIHFyeSA9IHt9O1xyXG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcclxuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xyXG4gIH1cclxuICByZXR1cm4gcXJ5O1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsImltcG9ydCBkZWZpbmUgZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQgb3MgZnJvbSBcIm9zXCI7XG5pbXBvcnQgcHJvY2VzcyBmcm9tIFwicHJvY2Vzc1wiO1xuXG5jb25zdCB7IFBST0RVQ1RJT04sIERFVkVMT1BNRU5ULCBQUk9EVUNUSU9OX0RPTUFJTiwgREVWRUxPUE1FTlRfRE9NQUlOLCBTVUJfRE9NQUlOUywgUE9SVFMgfSA9IGRlZmluZTtcbmNvbnN0IGFwaVZlciA9IDE7XG5jb25zdCBob3N0TmFtZSA9IG9zLmhvc3RuYW1lKCk7XG5jb25zdCBlbnYgPSBnZXRFbnYoaG9zdE5hbWUpO1xuY29uc3QgZmlsZXMgPSB7XG4gIGNsaWVudDogXCJ0YWxrbi5jbGllbnQuanNcIixcbiAgYXBpOiBcInRhbGtuLmFwaS5qc1wiLFxuICBleHQ6IFwidGFsa24uZXh0LmpzXCIsXG59O1xuY29uc3QgaXNEZXYgPSBlbnYgPT09IERFVkVMT1BNRU5UO1xuY29uc3QgZG9tYWluID0gZW52ID09PSBQUk9EVUNUSU9OID8gUFJPRFVDVElPTl9ET01BSU4gOiBERVZFTE9QTUVOVF9ET01BSU47XG5jb25zdCB3d3dVUkwgPSBgJHtTVUJfRE9NQUlOUy5XV1d9LiR7ZG9tYWlufWA7XG5jb25zdCBhcGlVUkwgPSBgJHtTVUJfRE9NQUlOUy5BUEl9LiR7ZG9tYWlufWA7XG5jb25zdCBhcGlBY2Nlc3NVUkwgPSBpc0RldiA/IGAke2RvbWFpbn06JHtQT1JUUy5ERVZFTE9QTUVOVF9BUEl9LyR7ZmlsZXMuYXBpfWAgOiBgJHthcGlVUkx9L3Yke2FwaVZlcn1gO1xuY29uc3QgY2xpZW50VVJMID0gaXNEZXYgPyBgJHtkb21haW59OiR7UE9SVFMuREVWRUxPUE1FTlR9LyR7ZmlsZXMuY2xpZW50fWAgOiBgJHtTVUJfRE9NQUlOUy5DTElFTlR9LiR7ZG9tYWlufWA7XG5jb25zdCBkZXNjVVJMID0gYCR7U1VCX0RPTUFJTlMuREVTQ30uJHtkb21haW59YDtcbmNvbnN0IHBvcnRhbFVSTCA9IGAke1NVQl9ET01BSU5TLlBPUlRBTH0uJHtkb21haW59YDtcbmNvbnN0IGFzc2V0c1VSTCA9IGAke1NVQl9ET01BSU5TLkFTU0VUU30uJHtkb21haW59YDtcbmNvbnN0IGF1dG9VUkwgPSBgJHtTVUJfRE9NQUlOUy5BVVRPfS4ke2RvbWFpbn1gO1xuY29uc3QgZXh0VVJMID0gYCR7U1VCX0RPTUFJTlMuRVhUfS4ke2RvbWFpbn1gO1xuY29uc3Qgb3duVVJMID0gYCR7U1VCX0RPTUFJTlMuT1dOfS4ke2RvbWFpbn1gO1xuY29uc3QgdHJhbnNhY3Rpb25VUkwgPSBgJHtTVUJfRE9NQUlOUy5UUkFOU0FDVElPTn0uJHtkb21haW59YDtcbmNvbnN0IGFzc2V0c0ltZ1BhdGggPSBgJHthc3NldHNVUkx9L2ltZy9gO1xuY29uc3QgYXNzZXRzSWNvblBhdGggPSBgJHthc3NldHNVUkx9L2ljb24vYDtcbmNvbnN0IGFzc2V0c0pzUGF0aCA9IGAke2Fzc2V0c1VSTH0vanMvYDtcbmNvbnN0IHNlc3Npb25VUkwgPSBgJHtTVUJfRE9NQUlOUy5TRVNTSU9OfS4ke2RvbWFpbn1gO1xuY29uc3QgZGVzY3JpcHRpb24gPSBcInRhbGtuIGNhbiBzaGFyZSBjb21tZW50cyB3aXRoIHVzZXJzIHdhdGNoaW5nIHRoZSBzYW1lIFdFQiBwYWdlLiBQbGVhc2UgZW5qb3kgdGhlIHdvcmxkIG9mIHRhbGtuLlwiO1xuXG5jb25zdCBmaW5kT25lVGhyZWFkQWN0aXZlSG91ciA9IDE7XG5jb25zdCBmaW5kT25lUG9zdENudCA9IDMwO1xuY29uc3QgZmluZE9uZUxpbWl0Q250ID0gMzAwO1xuY29uc3Qgb2dwSW1hZ2VzID0ge1xuICBIdG1sOiBgLy8ke2Fzc2V0c0ltZ1BhdGh9dGFsa25fbG9nb19odG1sLnBuZ2AsXG4gIE11c2ljOiBgLy8ke2Fzc2V0c0ltZ1BhdGh9dGFsa25fbG9nb19tdXNpYy5wbmdgLFxuICBWaWRlbzogYC8vJHthc3NldHNJbWdQYXRofXRhbGtuX2xvZ29fdmlkZW8ucG5nYCxcbn07XG5cbmNvbnN0IGNvbmY6IGFueSA9IHtcbiAgZG9tYWluLFxuICBlbnYsXG4gIGZpbGVzLFxuICBob3N0TmFtZSxcbiAgYXBpVVJMLFxuICBhcGlBY2Nlc3NVUkwsXG4gIHd3d1VSTCxcbiAgZGVzY1VSTCxcbiAgcG9ydGFsVVJMLFxuICBjbGllbnRVUkwsXG4gIGFzc2V0c1VSTCxcbiAgYXV0b1VSTCxcbiAgZXh0VVJMLFxuICBvd25VUkwsXG4gIHRyYW5zYWN0aW9uVVJMLFxuICBhc3NldHNJbWdQYXRoLFxuICBhc3NldHNJY29uUGF0aCxcbiAgYXNzZXRzSnNQYXRoLFxuICBzZXNzaW9uVVJMLFxuICBkZXNjcmlwdGlvbixcbiAgYXBpVmVyLFxuICBmaW5kT25lVGhyZWFkQWN0aXZlSG91cixcbiAgZmluZE9uZVBvc3RDbnQsXG4gIGZpbmRPbmVMaW1pdENudCxcbiAgb2dwSW1hZ2VzLFxufTtcbmV4cG9ydCBkZWZhdWx0IHsgLi4uY29uZiB9O1xuXG4vLyBUT0RPOiBNb3ZlIHRvIHNlcnZlciBjb25mKCBub3QgdXNlIGZyb20gY2xpZW50ICkuXG5mdW5jdGlvbiBnZXRFbnYoaG9zdE5hbWUpIHtcbiAgLy8gZnJvbSBjbGllbnQuXG4gIGlmIChwcm9jZXNzLnRpdGxlID09PSBcImJyb3dzZXJcIikge1xuICAgIGlmIChob3N0TmFtZSA9PT0gZGVmaW5lLkRFVkVMT1BNRU5UX0RPTUFJTikge1xuICAgICAgY29uc3QgcG9ydCA9IE51bWJlcihsb2NhdGlvbi5wb3J0KTtcbiAgICAgIHJldHVybiBwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlQgfHwgcG9ydCA9PT0gZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0FQSVxuICAgICAgICA/IGRlZmluZS5ERVZFTE9QTUVOVFxuICAgICAgICA6IGRlZmluZS5MT0NBTEhPU1Q7XG4gICAgfVxuICAgIHJldHVybiBkZWZpbmUuUFJPRFVDVElPTjtcbiAgICAvLyBmcm9tIHNlcnZlci5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaG9zdE5hbWUuaW5kZXhPZihkZWZpbmUuQVdTX0hPU1RfS0VZKSA+PSAwID8gZGVmaW5lLlBST0RVQ1RJT04gOiBkZWZpbmUuREVWRUxPUE1FTlQ7XG4gIH1cbn1cbiIsImltcG9ydCBFbW90aW9uTW9kZWwgZnJvbSBcImNvbW1vbi9lbW90aW9ucy9tb2RlbC9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbW90aW9ucyB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE1vZGVsS2V5KCkge1xuICAgIHJldHVybiBcInJ1c3NlbGxTaW1wbGVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IFRZUEVTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBMSUtFOiB7IElEOiAxLCBMQUJFTDogXCJMaWtlXCIgfSxcbiAgICAgIElOVEVSRVNUOiB7IElEOiAxMDAyLCBMQUJFTDogXCJJbnRlcmVzdFwiIH0sXG4gICAgICBESVNDT1ZFUlk6IHsgSUQ6IDEwMDMsIExBQkVMOiBcIkRpc2NvdmVyeVwiIH0sXG4gICAgICBTVU5OWTogeyBJRDogMTAwNCwgTEFCRUw6IFwiU3VubnlcIiB9LFxuICAgICAgUEVBQ0U6IHsgSUQ6IDEwMDUsIExBQkVMOiBcIlBlYWNlXCIgfSxcbiAgICAgIENIRUVSOiB7IElEOiAxMDA2LCBMQUJFTDogXCJDaGVlclwiIH0sXG4gICAgICBNT05FWTogeyBJRDogMTAwNywgTEFCRUw6IFwiTW9uZXlcIiB9LFxuICAgICAgVU5MSUtFOiB7IElEOiAyMDAxLCBMQUJFTDogXCJVbmxpa2VcIiB9LFxuICAgICAgTE9WRTogeyBJRDogMzAwMCwgTEFCRUw6IFwiTG92ZVwiIH0sXG4gICAgICBTVVBSSVNFOiB7IElEOiAxMDAwMSwgTEFCRUw6IFwiU3VycHJpc2VcIiB9LFxuICAgICAgRVhDSVRFOiB7IElEOiAxMDAwMiwgTEFCRUw6IFwiRXhjaXRlXCIgfSxcbiAgICAgIEhBUFBZOiB7IElEOiAxMDAwMywgTEFCRUw6IFwiSGFwcHlcIiB9LFxuICAgICAgSk9ZOiB7IElEOiAxMDAwNCwgTEFCRUw6IFwiSm95XCIgfSxcbiAgICAgIEdMQUQ6IHsgSUQ6IDIwMDAxLCBMQUJFTDogXCJHbGFkXCIgfSxcbiAgICAgIFNBVElTRkFDVElPTjogeyBJRDogMjAwMDIsIExBQkVMOiBcIlNhdGlzZmFjdGlvblwiIH0sXG4gICAgICBDT01GT1JUOiB7IElEOiAzMDAwMSwgTEFCRUw6IFwiQ29tZm9ydFwiIH0sXG4gICAgICBSRUxBWDogeyBJRDogMzAwMDIsIExBQkVMOiBcIlJlbGF4XCIgfSxcbiAgICAgIFRJUkVEOiB7IElEOiAzMDAwMywgTEFCRUw6IFwiVGlyZWRcIiB9LFxuICAgICAgU0xFRVBZOiB7IElEOiA1MDAwMSwgTEFCRUw6IFwiU2xlZXB5XCIgfSxcbiAgICAgIFNMQUNLOiB7IElEOiA2MDAwMSwgTEFCRUw6IFwiU2xhY2tcIiB9LFxuICAgICAgQk9SSU5HOiB7IElEOiA2MDAwMiwgTEFCRUw6IFwiQm9yaW5nXCIgfSxcbiAgICAgIE1FTEFOQ0hPTFk6IHsgSUQ6IDcwMDAxLCBMQUJFTDogXCJNZWxhbmNob2x5XCIgfSxcbiAgICAgIFNBRDogeyBJRDogNzAwMDIsIExBQkVMOiBcIlNhZFwiIH0sXG4gICAgICBVTlBMRUFTQU5UOiB7IElEOiA3MDAwMywgTEFCRUw6IFwiVW5wbGVhc2FudFwiIH0sXG4gICAgICBGUlVTVFJBVEVEOiB7IElEOiA3MDAwNCwgTEFCRUw6IFwiRnJ1c3RyYXRlZFwiIH0sXG4gICAgICBESVNTQVRJU0ZJRUQ6IHsgSUQ6IDgwMDAxLCBMQUJFTDogXCJEaXNzYXRpc2ZpZWRcIiB9LFxuICAgICAgQU5HRVI6IHsgSUQ6IDgwMDAyLCBMQUJFTDogXCJBbmdlclwiIH0sXG4gICAgICBXT1JSWTogeyBJRDogODAwMDMsIExBQkVMOiBcIldvcnJ5XCIgfSxcbiAgICAgIEZFQVI6IHsgSUQ6IDgwMDA0LCBMQUJFTDogXCJGZWFyXCIgfSxcbiAgICAgIFdPUlJZX0ZFQVI6IHsgSUQ6IDgwMDA1LCBMQUJFTDogXCJXb3JyeSZGZWFyXCIgfVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0R3JhcGhNYXhOdW0oXG4gICAgbW9kZWxLZXkgPSBFbW90aW9ucy5kZWZhdWx0TW9kZWxLZXksXG4gICAgdG90YWxOdW0gPSAwLFxuICAgIGFkZFplcm8gPSB0cnVlXG4gICkge1xuICAgIGxldCBncmFwaE1heE51bSA9IDA7XG4gICAgbGV0IGxpbWl0cyA9IHt9O1xuICAgIHN3aXRjaCAobW9kZWxLZXkpIHtcbiAgICAgIGNhc2UgXCJwbGFpblwiOlxuICAgICAgICBsaW1pdHMgPSB7XG4gICAgICAgICAgMTogMSxcbiAgICAgICAgICA1OiAyLFxuICAgICAgICAgIDEwOiAzLFxuICAgICAgICAgIDMwOiA0LFxuICAgICAgICAgIDcwOiA1LFxuICAgICAgICAgIDEwMDogNixcbiAgICAgICAgICAyNTA6IDcsXG4gICAgICAgICAgNTAwOiA4LFxuICAgICAgICAgIDc1MDogOSxcbiAgICAgICAgICAxMDAwOiAxMFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJydXNzZWxsU2ltcGxlXCI6XG4gICAgICAgIGxpbWl0cyA9IHtcbiAgICAgICAgICA2OiA1LFxuICAgICAgICAgIDEwOiA1LFxuICAgICAgICAgIDIwOiA1LFxuICAgICAgICAgIDMwOiA1LFxuICAgICAgICAgIDUwOiA1XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJ1c3NlbGxcIjpcbiAgICAgICAgbGltaXRzID0ge1xuICAgICAgICAgIDE6IDEsXG4gICAgICAgICAgNTogMixcbiAgICAgICAgICAxMDogMyxcbiAgICAgICAgICAzMDogNCxcbiAgICAgICAgICA3MDogNSxcbiAgICAgICAgICAxMDA6IDYsXG4gICAgICAgICAgMjUwOiA3LFxuICAgICAgICAgIDUwMDogOCxcbiAgICAgICAgICA3NTA6IDksXG4gICAgICAgICAgMTAwMDogMTBcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgbGltaXRLZXlzID0gT2JqZWN0LmtleXMobGltaXRzKTtcbiAgICBjb25zdCBsaW1pdExlbmd0aCA9IGxpbWl0S2V5cy5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGltaXRMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5TnVtOiBhbnkgPSBsaW1pdEtleXNbaV07XG4gICAgICBjb25zdCBlbW90aW9uTGltaXROdW0gPSBsaW1pdHNba2V5TnVtXTtcbiAgICAgIGlmIChrZXlOdW0gPiB0b3RhbE51bSkgYnJlYWs7XG4gICAgICBncmFwaE1heE51bSA9IGVtb3Rpb25MaW1pdE51bTtcbiAgICB9XG5cbiAgICAvLyBhZGQgemVybyBncmFwaCBzcGFjZVxuICAgIHJldHVybiBhZGRaZXJvID8gZ3JhcGhNYXhOdW0gKyAxIDogZ3JhcGhNYXhOdW07XG4gIH1cblxuICBiZWxvbmdDb3ZlclR5cGVzOiBhbnk7XG4gIGlkS2V5VHlwZXM6IGFueTtcbiAgdHlwZXNBcnJheTogYW55O1xuICBtb2RlbDogYW55O1xuICBiYWxhbmNlczogYW55O1xuICBjb25zdHJ1Y3Rvcih0eXBlID0gXCJcIikge1xuICAgIHRoaXMuYmVsb25nQ292ZXJUeXBlcyA9IHt9O1xuICAgIHRoaXMuaWRLZXlUeXBlcyA9IHt9O1xuICAgIHRoaXMudHlwZXNBcnJheSA9IFtdO1xuXG4gICAgT2JqZWN0LmtleXMoRW1vdGlvbnMuaW5wdXRzKS5mb3JFYWNoKGxhYmVsID0+IHtcbiAgICAgIEVtb3Rpb25zLmlucHV0c1tsYWJlbF0uZm9yRWFjaChzdGFtcElkID0+IHtcbiAgICAgICAgdGhpcy5iZWxvbmdDb3ZlclR5cGVzW3N0YW1wSWRdID0gbGFiZWw7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKEVtb3Rpb25zLlRZUEVTKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB0aGlzLnR5cGVzQXJyYXkucHVzaChrZXkpO1xuICAgICAgY29uc3Qgb2JqID0gRW1vdGlvbnMuVFlQRVNba2V5XTtcbiAgICAgIHRoaXMuaWRLZXlUeXBlc1tvYmouSURdID0gb2JqLkxBQkVMO1xuICAgIH0pO1xuXG4gICAgdGhpcy5tb2RlbCA9IEVtb3Rpb25Nb2RlbDtcblxuICAgIHRoaXMuYmFsYW5jZXMgPSB7XG4gICAgICBwbGFpbjogRW1vdGlvbk1vZGVsLlBsYWluLmdldFNhdmVCYWxhbmNlLFxuICAgICAgcnVzc2VsbDogRW1vdGlvbk1vZGVsLlJ1c3NlbGwuZ2V0U2F2ZUJhbGFuY2UsXG4gICAgICBydXNzZWxsU2ltcGxlOiBFbW90aW9uTW9kZWwuUnVzc2VsbFNpbXBsZS5nZXRTYXZlQmFsYW5jZVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IGlucHV0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW0Vtb3Rpb25zLlRZUEVTLkxJS0UuTEFCRUxdOiBbMSwgMiwgMywgNCwgNV0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuTU9ORVkuTEFCRUxdOiBbMTAwXSxcblxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5MQUJFTF06IFsxMTAxLCAxMTAyLCAxMTAzLCAxMDAxLCAxMDAyXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5IQVBQWS5MQUJFTF06IFtcbiAgICAgICAgMTIwMSxcbiAgICAgICAgMTIwMixcbiAgICAgICAgMTIwMyxcbiAgICAgICAgMTIwNCxcbiAgICAgICAgMTMwMSxcbiAgICAgICAgMTMwMixcbiAgICAgICAgMTMwMyxcbiAgICAgICAgMTMwNCxcbiAgICAgICAgMTMwNSxcbiAgICAgICAgMTMwNixcbiAgICAgICAgMTMwN1xuICAgICAgXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5KT1kuTEFCRUxdOiBbMTQwMSwgMTQwMiwgMTUwMSwgMTUwMiwgMTUwMywgMTUwNF0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuUkVMQVguTEFCRUxdOiBbXG4gICAgICAgIDE2MDEsXG4gICAgICAgIDE2MDIsXG4gICAgICAgIDE2MDMsXG4gICAgICAgIDE3MDEsXG4gICAgICAgIDE3MDIsXG4gICAgICAgIDE3MDMsXG4gICAgICAgIDE4MDEsXG4gICAgICAgIDE4MDIsXG4gICAgICAgIDE4MDNcbiAgICAgIF0sXG5cbiAgICAgIFtFbW90aW9ucy5UWVBFUy5TTEFDSy5MQUJFTF06IFtcbiAgICAgICAgMjAwMSxcbiAgICAgICAgMjAwMixcbiAgICAgICAgMjAwMyxcbiAgICAgICAgMjAwNCxcbiAgICAgICAgMjAwNSxcbiAgICAgICAgMjEwMSxcbiAgICAgICAgMjEwMixcbiAgICAgICAgMjEwM1xuICAgICAgXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLkxBQkVMXTogW1xuICAgICAgICAyMzAxLFxuICAgICAgICAyMzAyLFxuICAgICAgICAyMzAzLFxuICAgICAgICAyMjAxLFxuICAgICAgICAyMjAyLFxuICAgICAgICAyMjAzLFxuICAgICAgICAyMjA0LFxuICAgICAgICAyMjA1LFxuICAgICAgICAyNDAxLFxuICAgICAgICAyNDAyLFxuICAgICAgICAyNDAzLFxuICAgICAgICAyNDA0LFxuICAgICAgICAyNTAxLFxuICAgICAgICAyNTAyLFxuICAgICAgICAyNTAzXG4gICAgICBdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLkxBQkVMXTogW1xuICAgICAgICAyNzAxLFxuICAgICAgICAyNzAyLFxuICAgICAgICAyNzAzLFxuICAgICAgICAyNzA0LFxuICAgICAgICAyNzA1LFxuICAgICAgICAyNzA2LFxuICAgICAgICAyNjAxLFxuICAgICAgICAyNjAyXG4gICAgICBdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuTEFCRUxdOiBbXG4gICAgICAgIDI5MDQsXG4gICAgICAgIDI5MDUsXG4gICAgICAgIDI5MDYsXG4gICAgICAgIDI4MDEsXG4gICAgICAgIDI4MDIsXG4gICAgICAgIDI4MDMsXG4gICAgICAgIDI4MDQsXG4gICAgICAgIDI4MDUsXG4gICAgICAgIDI4MDYsXG4gICAgICAgIDI5MDEsXG4gICAgICAgIDI5MDNcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBtYXAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEZsYXQgbGlrZVxuICAgICAgMTogXCLwn5GNXCIsXG4gICAgICAyOiBcIuKcjO+4j1wiLFxuICAgICAgMzogXCLwn5GAXCIsXG4gICAgICA0OiBcIvCfkqFcIixcbiAgICAgIDU6IFwi8J+SqlwiLFxuICAgICAgMTA6IFwiXCIsXG4gICAgICAxMDA6IFwi8J+StVwiLFxuXG4gICAgICAvLyBTdXByaXNlKFBvc2kxKVxuICAgICAgMTAwMTogXCLwn5izXCIsXG4gICAgICAxMDAyOiBcIvCfmLVcIixcblxuICAgICAgLy8gRXhjaXRlKFBvc2kxKVxuICAgICAgMTEwMTogXCLwn6SjXCIsXG4gICAgICAxMTAyOiBcIvCfmIZcIixcbiAgICAgIDExMDM6IFwi8J+kqVwiLFxuXG4gICAgICAvLyBIYXBweShQb3NpMilcbiAgICAgIDEyMDE6IFwi8J+Sk1wiLFxuICAgICAgMTIwMjogXCLwn6WwXCIsXG4gICAgICAxMjAzOiBcIvCfmI1cIixcbiAgICAgIDEyMDQ6IFwi8J+Yu1wiLFxuXG4gICAgICAvLyBKb3koUG9zaTIpXG4gICAgICAxMzAxOiBcIvCfmIRcIixcbiAgICAgIDEzMDI6IFwi4pyoXCIsXG4gICAgICAxMzAzOiBcIvCfmIFcIixcbiAgICAgIDEzMDQ6IFwi8J+NulwiLFxuICAgICAgMTMwNTogXCLwn5iKXCIsXG4gICAgICAxMzA2OiBcIvCfmJhcIixcbiAgICAgIDEzMDc6IFwi8J+Mn1wiLFxuXG4gICAgICAvLyBHbGFkKFBvc2kzKVxuICAgICAgMTQwMTogXCLwn6WzXCIsXG4gICAgICAxNDAyOiBcIvCfmINcIixcblxuICAgICAgLy8gU2F0aXNmYWN0aW9uKFBvc2kzKVxuICAgICAgMTUwMTogXCLwn5iLXCIsXG4gICAgICAxNTAyOiBcIvCfjoJcIixcbiAgICAgIDE1MDM6IFwi8J+NsFwiLFxuICAgICAgMTUwNDogXCLwn6eBXCIsXG5cbiAgICAgIC8vIENvbWZvcnQoUG9zaTQpXG4gICAgICAxNjAxOiBcIvCfmIxcIixcbiAgICAgIDE2MDI6IFwi8J+kpFwiLFxuICAgICAgMTYwMzogXCLwn5iJXCIsXG5cbiAgICAgIC8vIFJlbGF4KFBvc2k0KVxuICAgICAgMTcwMTogXCLwn5mCXCIsXG4gICAgICAxNzAyOiBcIuKYle+4j1wiLFxuICAgICAgMTcwMzogXCLwn421XCIsXG5cbiAgICAgIC8vIFRpcmVkKFBvc2k0KVxuICAgICAgMTgwMTogXCLwn5iQXCIsXG4gICAgICAxODAyOiBcIvCfmK5cIixcbiAgICAgIDE4MDM6IFwi8J+Yr1wiLFxuXG4gICAgICAvLyBTbGFjayhOZWdhNClcbiAgICAgIDIwMDE6IFwi8J+YhVwiLFxuICAgICAgMjAwMjogXCLwn5KmXCIsXG4gICAgICAyMDAzOiBcIvCfpbpcIixcbiAgICAgIDIwMDQ6IFwi8J+YslwiLFxuICAgICAgMjAwNTogXCLwn5mEXCIsXG5cbiAgICAgIC8vIEJvcmluZyhOZWdhNClcbiAgICAgIDIxMDE6IFwi8J+YklwiLFxuICAgICAgMjEwMjogXCLwn5iRXCIsXG4gICAgICAyMTAzOiBcIvCfmJVcIixcblxuICAgICAgLy8gTWVsYW5jaG9seShOZWdhNClcbiAgICAgIDIyMDE6IFwi8J+YqVwiLFxuICAgICAgMjIwMjogXCLwn5ieXCIsXG4gICAgICAyMjAzOiBcIvCfmJRcIixcbiAgICAgIDIyMDQ6IFwi8J+Yn1wiLFxuICAgICAgMjIwNTogXCLwn6SiXCIsXG5cbiAgICAgIC8vIFNhZChOZWdhMylcbiAgICAgIDIzMDE6IFwi8J+YrVwiLFxuICAgICAgMjMwMjogXCLwn5ilXCIsXG4gICAgICAyMzAzOiBcIvCfmL9cIixcblxuICAgICAgLy8gVW5wbGVhc2FudChOZWdhMylcbiAgICAgIDI0MDE6IFwi8J+klVwiLFxuICAgICAgMjQwMjogXCLwn6SSXCIsXG4gICAgICAyNDAzOiBcIvCfmLdcIixcbiAgICAgIDI0MDQ6IFwi8J+kp1wiLFxuXG4gICAgICAvLyBmcnVzdHJhdGVkKE5lZ2EzKVxuICAgICAgMjUwMTogXCLwn6eQXCIsXG4gICAgICAyNTAyOiBcIvCfpJRcIixcbiAgICAgIDI1MDM6IFwi8J+kqFwiLFxuXG4gICAgICAvLyBkaXNzYXRpc2ZpZWQoTmVnYTIpXG4gICAgICAyNjAxOiBcIvCfmKBcIixcbiAgICAgIDI2MDI6IFwi8J+YvlwiLFxuXG4gICAgICAvLyBBbmdlcihOZWdhMilcbiAgICAgIDI3MDE6IFwi8J+YoVwiLFxuICAgICAgMjcwMjogXCLwn6SsXCIsXG4gICAgICAyNzAzOiBcIvCfkpRcIixcbiAgICAgIDI3MDQ6IFwi8J+SolwiLFxuICAgICAgMjcwNTogXCLwn5ikXCIsXG4gICAgICAyNzA2OiBcIvCfkb9cIixcblxuICAgICAgLy8gV29ycnkoTmVnYTEpXG4gICAgICAyODAxOiBcIvCfmKNcIixcbiAgICAgIDI4MDI6IFwi8J+Yq1wiLFxuICAgICAgMjgwMzogXCLwn5iTXCIsXG4gICAgICAyODA0OiBcIvCfmJZcIixcbiAgICAgIDI4MDU6IFwi8J+YqFwiLFxuICAgICAgMjgwNjogXCLwn5iwXCIsXG5cbiAgICAgIC8vIEZlYXIoTmVnYTEpXG4gICAgICAyOTAxOiBcIvCfpbZcIixcbiAgICAgIDI5MDI6IFwi8J+krlwiLFxuICAgICAgMjkwMzogXCLwn6W1XCIsXG4gICAgICAyOTA0OiBcIvCfmLFcIixcbiAgICAgIDI5MDU6IFwi8J+ZgFwiLFxuICAgICAgMjkwNjogXCLwn5KAXCJcbiAgICB9O1xuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVuY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwYWNrZXQ7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopO1xuICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcGFja2V0LnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwYWNrZXQudHlwZSkgeyAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcblxuICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IucmVjb25QYWNrLmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7IC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgIGlmIChwYWNrZXQpIHsgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgb2JqKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgdmFyIGkgPSAwO1xuICAvLyBsb29rIHVwIHR5cGVcbiAgdmFyIHAgPSB7XG4gICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpXG4gIH07XG5cbiAgaWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSB7XG4gICAgcmV0dXJuIGVycm9yKCd1bmtub3duIHBhY2tldCB0eXBlICcgKyBwLnR5cGUpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHAudHlwZSkge1xuICAgIHZhciBidWYgPSAnJztcbiAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSAnLScpIHtcbiAgICAgIGJ1ZiArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gJy0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTtcbiAgICB9XG4gICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgaWYgKCcvJyA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICBwLm5zcCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmICgnLCcgPT09IGMpIGJyZWFrO1xuICAgICAgcC5uc3AgKz0gYztcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcC5uc3AgPSAnLyc7XG4gIH1cblxuICAvLyBsb29rIHVwIGlkXG4gIHZhciBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gIGlmICgnJyAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgIHAuaWQgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwLmlkICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIHAuaWQgPSBOdW1iZXIocC5pZCk7XG4gIH1cblxuICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICB2YXIgaXNQYXlsb2FkVmFsaWQgPSBwYXlsb2FkICE9PSBmYWxzZSAmJiAocC50eXBlID09PSBleHBvcnRzLkVSUk9SIHx8IGlzQXJyYXkocGF5bG9hZCkpO1xuICAgIGlmIChpc1BheWxvYWRWYWxpZCkge1xuICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yKCdpbnZhbGlkIHBheWxvYWQnKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZGVjb2RlZCAlcyBhcyAlaicsIHN0ciwgcCk7XG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiB0cnlQYXJzZShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KSB7XG4gIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLnRha2VCaW5hcnlEYXRhID0gZnVuY3Rpb24oYmluRGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn07XG5cbmZ1bmN0aW9uIGVycm9yKG1zZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsXG4gICAgZGF0YTogJ3BhcnNlciBlcnJvcjogJyArIG1zZ1xuICB9O1xufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbnZhciBoYXNDT1JTID0gcmVxdWlyZSgnaGFzLWNvcnMnKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi9nbG9iYWxUaGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgdmFyIHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7XG5cbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3XG4gIHZhciBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcbiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFRoaXNbWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKV0oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LWZ1bmNcbiAgfVxufSkoKTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdHMud2l0aENyZWRlbnRpYWxzO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyByZXN1bHRzIG9mIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGRldGVjdGlvblxuICB0aGlzLmlzUmVhY3ROYXRpdmUgPSBvcHRzLmlzUmVhY3ROYXRpdmU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcbiIsImltcG9ydCBjb25mIGZyb20gXCJjbGllbnQvY29uZi9cIjtcbmltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3QgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRGaW5kSWQoKSB7XG4gICAgcmV0dXJuIFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0VmFsdWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaDogXCIvXCIsXG4gICAgICBjaHM6IFtcIi9cIl0sXG4gICAgICBmYXZpY29uOiBjb25mLmRlZmF1bHRGYXZpY29uLFxuICAgICAgZmluZFR5cGU6IFwiSHRtbFwiLFxuICAgICAgbGF5ZXI6IDEsXG4gICAgICBwb3N0OiBcIlwiLFxuICAgICAgcHJvdG9jb2w6IFwiaHR0cHM6XCIsXG4gICAgICBzdGFtcElkOiAwLFxuICAgICAgdGl0bGU6IFwidGFsa25cIixcbiAgICAgIGxpdmVDbnQ6IDAsXG4gICAgICB1aWQ6IFwiXCIsXG4gICAgICB1dHlwZTogXCJcIixcbiAgICAgIGRpc3BGbGc6IHRydWUsXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgY3JlYXRlVGltZTogbmV3IERhdGUoKSxcbiAgICAgIGN1cnJlbnRUaW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlVGltZTogbmV3IERhdGUoKSxcbiAgICB9O1xuICB9XG4gIGNoOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMuY2g7XG4gIGNoczogc3RyaW5nW10gPSBQb3N0LmRlZmF1bHRWYWx1ZXMuY2hzO1xuICBmYXZpY29uOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMuZmF2aWNvbjtcbiAgZmluZFR5cGU6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5maW5kVHlwZTtcbiAgbGF5ZXI6IG51bWJlciA9IFBvc3QuZGVmYXVsdFZhbHVlcy5sYXllcjtcbiAgcG9zdDogc3RyaW5nID0gUG9zdC5kZWZhdWx0VmFsdWVzLnBvc3Q7XG4gIHByb3RvY29sOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMucHJvdG9jb2w7XG4gIHN0YW1wSWQ6IG51bWJlciA9IFBvc3QuZGVmYXVsdFZhbHVlcy5zdGFtcElkO1xuICB0aXRsZTogc3RyaW5nID0gUG9zdC5kZWZhdWx0VmFsdWVzLnRpdGxlO1xuICBsaXZlQ250OiBudW1iZXIgPSBQb3N0LmRlZmF1bHRWYWx1ZXMubGl2ZUNudDtcbiAgdWlkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudWlkO1xuICB1dHlwZTogc3RyaW5nID0gUG9zdC5kZWZhdWx0VmFsdWVzLnV0eXBlO1xuICBkaXNwRmxnOiBib29sZWFuID0gUG9zdC5kZWZhdWx0VmFsdWVzLmRpc3BGbGc7XG4gIGRhdGE6IGFueSA9IFBvc3QuZGVmYXVsdFZhbHVlcy5kYXRhO1xuICBjcmVhdGVUaW1lOiBEYXRlID0gUG9zdC5kZWZhdWx0VmFsdWVzLmNyZWF0ZVRpbWU7XG4gIGN1cnJlbnRUaW1lOiBEYXRlID0gUG9zdC5kZWZhdWx0VmFsdWVzLmN1cnJlbnRUaW1lO1xuICB1cGRhdGVUaW1lOiBEYXRlID0gUG9zdC5kZWZhdWx0VmFsdWVzLnVwZGF0ZVRpbWU7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcz86IFBvc3QpIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHZhbHVlcyA9IHBhcmFtcyA/IHsgLi4uUG9zdC5kZWZhdWx0VmFsdWVzLCAuLi5wYXJhbXMgfSA6IFBvc3QuZGVmYXVsdFZhbHVlcztcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUodmFsdWVzKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0c1RpbWVsaW5lIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBQb3N0W10gPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFRpbWVsaW5lU3RvY2sge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKipcclxuICogUGFyc2VzIGFuIFVSSVxyXG4gKlxyXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xyXG5cclxudmFyIHBhcnRzID0gW1xyXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXHJcbl07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xyXG4gICAgdmFyIHNyYyA9IHN0cixcclxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcclxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcclxuICAgICAgICB1cmkgPSB7fSxcclxuICAgICAgICBpID0gMTQ7XHJcblxyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xyXG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJpO1xyXG59O1xyXG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbnZhciB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikgOiAob2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhvYmopKSk7XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgWEhSID0gcmVxdWlyZSgnLi9wb2xsaW5nLXhocicpO1xudmFyIEpTT05QID0gcmVxdWlyZSgnLi9wb2xsaW5nLWpzb25wJyk7XG52YXIgd2Vic29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnQgdHJhbnNwb3J0cy5cbiAqL1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nIChvcHRzKSB7XG4gIHZhciB4aHI7XG4gIHZhciB4ZCA9IGZhbHNlO1xuICB2YXIgeHMgPSBmYWxzZTtcbiAgdmFyIGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaGFzQmluID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZXZlbnRzID0ge1xuICBjb25uZWN0OiAxLFxuICBjb25uZWN0X2Vycm9yOiAxLFxuICBjb25uZWN0X3RpbWVvdXQ6IDEsXG4gIGNvbm5lY3Rpbmc6IDEsXG4gIGRpc2Nvbm5lY3Q6IDEsXG4gIGVycm9yOiAxLFxuICByZWNvbm5lY3Q6IDEsXG4gIHJlY29ubmVjdF9hdHRlbXB0OiAxLFxuICByZWNvbm5lY3RfZmFpbGVkOiAxLFxuICByZWNvbm5lY3RfZXJyb3I6IDEsXG4gIHJlY29ubmVjdGluZzogMSxcbiAgcGluZzogMSxcbiAgcG9uZzogMVxufTtcblxuLyoqXG4gKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHtcbiAgdGhpcy5pbyA9IGlvO1xuICB0aGlzLm5zcCA9IG5zcDtcbiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0XG4gIHRoaXMuaWRzID0gMDtcbiAgdGhpcy5hY2tzID0ge307XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmZsYWdzID0ge307XG4gIGlmIChvcHRzICYmIG9wdHMucXVlcnkpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgfVxuICBpZiAodGhpcy5pby5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc3ViRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSByZXR1cm47XG5cbiAgdmFyIGlvID0gdGhpcy5pbztcbiAgdGhpcy5zdWJzID0gW1xuICAgIG9uKGlvLCAnb3BlbicsIGJpbmQodGhpcywgJ29ub3BlbicpKSxcbiAgICBvbihpbywgJ3BhY2tldCcsIGJpbmQodGhpcywgJ29ucGFja2V0JykpLFxuICAgIG9uKGlvLCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpXG4gIF07XG59O1xuXG4vKipcbiAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vcGVuID1cblNvY2tldC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSByZXR1cm4gdGhpcztcblxuICB0aGlzLnN1YkV2ZW50cygpO1xuICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5pby5yZWFkeVN0YXRlKSB0aGlzLm9ub3BlbigpO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3RpbmcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICBhcmdzLnVuc2hpZnQoJ21lc3NhZ2UnKTtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgYGVtaXRgLlxuICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldikpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiAodGhpcy5mbGFncy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IHRoaXMuZmxhZ3MuYmluYXJ5IDogaGFzQmluKGFyZ3MpKSA/IHBhcnNlci5CSU5BUllfRVZFTlQgOiBwYXJzZXIuRVZFTlQsXG4gICAgZGF0YTogYXJnc1xuICB9O1xuXG4gIHBhY2tldC5vcHRpb25zID0ge307XG4gIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7XG5cbiAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgZGVidWcoJ2VtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCcsIHRoaXMuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG5cbiAgdGhpcy5mbGFncyA9IHt9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgdmFyIHJvb3ROYW1lc3BhY2VFcnJvciA9IHBhY2tldC50eXBlID09PSBwYXJzZXIuRVJST1IgJiYgcGFja2V0Lm5zcCA9PT0gJy8nO1xuXG4gIGlmICghc2FtZU5hbWVzcGFjZSAmJiAhcm9vdE5hbWVzcGFjZUVycm9yKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IGhhc0JpbihhcmdzKSA/IHBhcnNlci5CSU5BUllfQUNLIDogcGFyc2VyLkFDSyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykge1xuICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xufTtcblxuLyoqXG4gKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZS5cbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHtcbiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuaW8uZGVzdHJveSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9XG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgdGhpcy5kZXN0cm95KCk7XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgLy8gZmlyZSBldmVudHNcbiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHtcbiAgdGhpcy5mbGFncy5jb21wcmVzcyA9IGNvbXByZXNzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgYmluYXJ5IGZsYWdcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGVtaXR0ZWQgZGF0YSBjb250YWlucyBiaW5hcnlcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnkpIHtcbiAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsImltcG9ydCBwcm9jZXNzIGZyb20gXCJwcm9jZXNzXCI7XG5pbXBvcnQgZGVmaW5lIGZyb20gXCJjb21tb24vZGVmaW5lXCI7XG5pbXBvcnQgY29uZiBmcm9tIFwiY29tbW9uL2NvbmZcIjtcblxuaWYgKHByb2Nlc3MudGl0bGUgPT09IFwiYnJvd3NlclwiKSB7XG4gIGNvbnN0IHsgU1VCX0RPTUFJTlMsIERFVkVMT1BNRU5UIH0gPSBkZWZpbmU7XG4gIGNvbnN0IHsgZW52LCBkb21haW4gfSA9IGNvbmY7XG4gIGNvbmYubWVkaWFTZWNvbmRJbnRlcnZhbCA9IDIwMDtcbiAgY29uZi5zY3JlZW5Nb2RlID0ge1xuICAgIHNtYWxsOiA2MDAsXG4gICAgbWlkZGxlOiA5NjAsXG4gIH07XG4gIGNvbmYuZGVmYXVsdEZhdmljb24gPSBgLy8ke1NVQl9ET01BSU5TLkFTU0VUU30uJHtkb21haW59L2Zhdmljb24uaWNvYDtcbiAgY29uZi5wb3J0YWxQYXRoID0gZW52ID09PSBERVZFTE9QTUVOVCA/IGAvLyR7U1VCX0RPTUFJTlMuUE9SVEFMfS4ke2RvbWFpbn0vYCA6IGAvLyR7U1VCX0RPTUFJTlMuUE9SVEFMfS4ke2RvbWFpbn0vYDtcbiAgY29uZi5jbGllbnRQYXRoID0gYC8vJHtTVUJfRE9NQUlOUy5DTElFTlR9LiR7ZG9tYWlufS9gO1xuICBjb25mLmFzc2V0c1BhdGggPSBgLy8ke1NVQl9ET01BSU5TLkFTU0VUU30uJHtkb21haW59L2A7XG4gIGNvbmYuc2Vzc2lvblBhdGggPSBgLy8ke1NVQl9ET01BSU5TLlNFU1NJT059LiR7ZG9tYWlufS9gO1xuICBjb25mLmNhY2hlS2V5ID0geyBpbmRleDogXCJ0YWxrbkluZGV4TGlzdFwiLCBzZXR0aW5nOiBcInRhbGtuU2V0dGluZ1BhcmFtc1wiIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmY7XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5pbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlciBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9mZnNldEZpbmRJZCgpIHtcbiAgICByZXR1cm4gUG9zdC5kZWZhdWx0RmluZElkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdWlkID0gcGFyYW1zICYmIHBhcmFtcy51aWQgPyBwYXJhbXMudWlkIDogXCJcIjtcbiAgICBjb25zdCB1dHlwZSA9IHBhcmFtcyAmJiBwYXJhbXMudXR5cGUgPyBwYXJhbXMudXR5cGUgOiBcIlwiO1xuXG4gICAgLy8g5YmK6Zmk5LqI5a6aXG4gICAgY29uc3QgdHVuZWQgPSBwYXJhbXMgJiYgcGFyYW1zLnR1bmVkID8gcGFyYW1zLnR1bmVkIDogXCJcIjtcbiAgICBjb25zdCBtdWx0aXN0cmVhbWVkID0gcGFyYW1zICYmIHBhcmFtcy5tdWx0aXN0cmVhbWVkID8gcGFyYW1zLm11bHRpc3RyZWFtZWQgOiBmYWxzZTtcbiAgICBjb25zdCBhY3Rpb25lZCA9IHBhcmFtcyAmJiBwYXJhbXMuYWN0aW9uZWQgPyBwYXJhbXMuYWN0aW9uZWQgOiBcIlwiO1xuICAgIGNvbnN0IG9mZnNldEZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0RmluZElkID8gcGFyYW1zLm9mZnNldEZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRTaW5nbGVGaW5kSWQgPVxuICAgICAgcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRTaW5nbGVGaW5kSWQgPyBwYXJhbXMub2Zmc2V0U2luZ2xlRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldE11bHRpRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRDaGlsZEZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0TG9nc0ZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TG9nc0ZpbmRJZCA/IHBhcmFtcy5vZmZzZXRMb2dzRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuXG4gICAgY29uc3QgcmVxdWVzdExvZ2luVHlwZSA9IHBhcmFtcy5yZXF1ZXN0TG9naW5UeXBlID8gcGFyYW1zLnJlcXVlc3RMb2dpblR5cGUgOiBcIlwiO1xuICAgIGNvbnN0IGZyaWVuZHMgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xuICAgICAgdWlkLFxuICAgICAgdXR5cGUsXG4gICAgICB0dW5lZCxcbiAgICAgIG11bHRpc3RyZWFtZWQsXG4gICAgICBhY3Rpb25lZCxcbiAgICAgIG9mZnNldEZpbmRJZCxcbiAgICAgIG9mZnNldFNpbmdsZUZpbmRJZCxcbiAgICAgIG9mZnNldE11bHRpRmluZElkLFxuICAgICAgb2Zmc2V0Q2hpbGRGaW5kSWQsXG4gICAgICBvZmZzZXRMb2dzRmluZElkLFxuICAgICAgZnJpZW5kc1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldE9mZnNldEZpbmRJZCh7IHBvc3RzIH0pIHtcbiAgICBpZiAocG9zdHMgJiYgcG9zdHNbMF0gJiYgcG9zdHNbMF0uX2lkKSB7XG4gICAgICByZXR1cm4gcG9zdHNbMF0uX2lkO1xuICAgIH1cbiAgICByZXR1cm4gUG9zdC5kZWZhdWx0RmluZElkO1xuICB9XG5cbiAgc3RhdGljIGdldEhyZWYocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmhyZWYpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIFwiL1wiO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RTaW5nbGUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmFseXplIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgbGl2ZUNudCA9IDA7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHsgbGl2ZUNudCB9KTtcbiAgfVxufVxuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWFkcyBleHRlbmRzIFNjaGVtYSB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHBhcmFtcyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVyZ2VkVGhyZWFkcyhiYXNlVGhyZWFkcywgbWVyZ2VUaHJlYWQpIHtcbiAgICBiYXNlVGhyZWFkc1ttZXJnZVRocmVhZC5jaF0gPSB7IC4uLm1lcmdlVGhyZWFkIH07XG4gICAgcmV0dXJuIGJhc2VUaHJlYWRzO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IFBvc3RNZXNzYWdlLCB7IE1lc3NhZ2VDbGllbnRBbmRXc0FwaVR5cGUsIE1lc3NhZ2VQYXJhbXMgfSBmcm9tIFwiY29tbW9uL1Bvc3RNZXNzYWdlXCI7XG5pbXBvcnQgQm9vdE9wdGlvbiBmcm9tIFwiY29tbW9uL0Jvb3RPcHRpb25cIjtcbmltcG9ydCBXcyBmcm9tIFwiYXBpL1dzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdzQXBpV29ya2VyIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIGJvb3RPcHRpb246IEJvb3RPcHRpb247XG4gIHdzOiBXcztcbiAgd29ya2VyOiBXb3JrZXI7XG4gIGNvbnN0cnVjdG9yKHdvcmtlcjogV29ya2VyKSB7XG4gICAgLy8gd2ViIHNvY2tldCBzZXJ2ZXIuXG4gICAgdGhpcy5vbk1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25NZXNzYWdlRXJyb3IgPSB0aGlzLm9uTWVzc2FnZUVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wb3N0TWVzc2FnZSA9IHRoaXMucG9zdE1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLndvcmtlciA9IHdvcmtlcjtcbiAgICB0aGlzLndvcmtlci5vbmVycm9yID0gdGhpcy5vbk1lc3NhZ2VFcnJvcjtcbiAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZTtcbiAgICB0aGlzLndzID0gbmV3IFdzKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHBvc3RNZXNzYWdlKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IE1lc3NhZ2VQYXJhbXMgPSB7fSwgbWV0aG9kQmFjaz8pOiB2b2lkIHtcbiAgICBjb25zdCBtZXNzYWdlOiBNZXNzYWdlQ2xpZW50QW5kV3NBcGlUeXBlID0ge1xuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICB0eXBlOiBQb3N0TWVzc2FnZS5XU0FQSV9UT19DTElFTlRfVFlQRSxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgcGFyYW1zLFxuICAgICAgbWV0aG9kQmFjayxcbiAgICB9O1xuICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG4gIHByaXZhdGUgb25NZXNzYWdlKGU6IE1lc3NhZ2VFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHsgaWQsIHR5cGUsIG1ldGhvZCwgcGFyYW1zIH06IE1lc3NhZ2VDbGllbnRBbmRXc0FwaVR5cGUgPSBlLmRhdGE7XG4gICAgaWYgKHR5cGUgPT09IFBvc3RNZXNzYWdlLkNMSUVOVF9UT19XU0FQSV9UWVBFKSB7XG4gICAgICB0aGlzLndzLmV4ZShtZXRob2QsIHBhcmFtcyk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgb25NZXNzYWdlRXJyb3IoZTogRXJyb3JFdmVudCk6IHZvaWQge1xuICAgIGNvbnNvbGUud2FybihlKTtcbiAgfVxufVxuXG5uZXcgV3NBcGlXb3JrZXIoc2VsZiBhcyBhbnkpO1xuIiwiaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdE1lc3NhZ2Uge1xuICAvLyBIQU5ETEUgQ0xJRU5UIEFORCBXU0FQSVxuICBzdGF0aWMgZ2V0IEhBTkRMRV9DTElFTlRfQU5EX1dTQVBJKCkge1xuICAgIHJldHVybiBcIkhBTkRMRV9DTElFTlRfQU5EX1dTQVBJXCI7XG4gIH1cbiAgc3RhdGljIGdldCBXU0FQSV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJXU0FQSV9UT19DTElFTlRfVFlQRVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgQ0xJRU5UX1RPX1dTQVBJX1RZUEUoKSB7XG4gICAgcmV0dXJuIFwiQ0xJRU5UX1RPX1dTQVBJX1RZUEVcIjtcbiAgfVxuXG4gIC8vIEhBTkRMRV9BUElfQU5EX0NMSUVOVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9BUElfQU5EX0NMSUVOVCgpIHtcbiAgICByZXR1cm4gXCJIQU5ETEVfQVBJX0FORF9DTElFTlRcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJBUElfVE9fQ0xJRU5UX1RZUEVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENMSUVOVF9UT19BUElfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJDTElFTlRfVE9fQVBJX1RZUEVcIjtcbiAgfVxuXG4gIC8vIEhBTkRMRV9BUElfQU5EX0VYVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9FWFRfQU5EX0FQSSgpIHtcbiAgICByZXR1cm4gXCJIQU5ETEVfRVhUX0FORF9BUElcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IE1FRElBX1RPX0NMSUVOVF9UWVBFKCkge1xuICAgIHJldHVybiBcIk1FRElBX1RPX0NMSUVOVF9UWVBFXCI7XG4gIH1cbiAgc3RhdGljIGdldCBFWFRfVE9fQVBJX1RZUEUoKSB7XG4gICAgcmV0dXJuIFwiRVhUX1RPX0FQSV9UWVBFXCI7XG4gIH1cblxuICAvLyBIQU5ETEVfQ0xJRU5UX0FORF9FWFRcbiAgc3RhdGljIGdldCBIQU5ETEVfRVhUX0FORF9DTElFTlQoKSB7XG4gICAgcmV0dXJuIFwiaGFuZGxlRXh0QW5kQ2xpZW50XCI7XG4gIH1cbiAgc3RhdGljIGdldCBDTElFTlRfVE9fRVhUX1RZUEUoKSB7XG4gICAgcmV0dXJuIFwiQ0xJRU5UX1RPX0VYVF9UWVBFXCI7XG4gIH1cbiAgc3RhdGljIGdldCBFWFRfVE9fQ0xJRU5UX1RZUEUoKSB7XG4gICAgcmV0dXJuIFwiRVhUX1RPX0NMSUVOVF9UWVBFXCI7XG4gIH1cbiAgc3RhdGljIGdldCBIQU5ETEVfTUVESUFfU0VSVkVSX0FORF9NRURJQV9DTElFTlQoKSB7XG4gICAgcmV0dXJuIFwiaGFuZGxlTWVkaWFTZXJ2ZXJBbmRNZWRpYUNsaWVudFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgTUVESUFfU0VSVkVSX1RPX01FRElBX0NMSUVOVF9UWVBFKCkge1xuICAgIHJldHVybiBcIk1FRElBX1NFUlZFUl9UT19NRURJQV9DTElFTlRfVFlQRVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgTUVESUFfQ0xJRU5UX1RPX01FRElBX1NFUlZFUl9UWVBFKCkge1xuICAgIHJldHVybiBcIk1FRElBX0NMSUVOVF9UT19NRURJQV9TRVJWRVJfVFlQRVwiO1xuICB9XG4gIHN0YXRpYyBjb252ZXJ0QXBpVG9DbGllbnRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX1JFUVVFU1QpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX0VNSVQpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QpO1xuICAgIH1cbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbQUNUSU9OXToke2FjdGlvblR5cGV9YDtcbiAgfVxuICBzdGF0aWMgZ2V0TWVzc2FnZVR5cGVzKGFjdGlvblR5cGUpIHtcbiAgICBjb25zdCBzcGxpdGVkMSA9IGFjdGlvblR5cGUuc3BsaXQoXCI6XCIpO1xuICAgIGNvbnN0IHNwbGl0ZWQyID0gc3BsaXRlZDFbMF0uc3BsaXQoXCJbXCIpO1xuICAgIGNvbnN0IGlvVHlwZSA9IHNwbGl0ZWQyWzFdLnJlcGxhY2UoXCJdXCIsIFwiXCIpO1xuICAgIGNvbnN0IGV4ZU1ldGhvZCA9IHNwbGl0ZWQxWzFdO1xuICAgIHJldHVybiB7IGlvVHlwZSwgZXhlTWV0aG9kIH07XG4gIH1cbiAgc3RhdGljIGNvbnZlcnRFeHRUb0NsaWVudEFjdGlvblR5cGUoYWN0aW9uVHlwZSkge1xuICAgIHJldHVybiBgRVhUX1RPX0NMSUVOVFtBQ1RJT05dOiR7YWN0aW9uVHlwZX1gO1xuICB9XG59XG5cbi8vIGNvbW1vbi5cbmV4cG9ydCBjb25zdCBIYW5kbGVNZXNzYWdlTWV0aG9kID0gXCJoYW5kbGVcIjtcbmV4cG9ydCBjb25zdCBIYW5kbGVSZXF1ZXN0TWV0aG9kID0gXCJoYW5kbGVcIjtcbmV4cG9ydCB0eXBlIE1lc3NhZ2VQYXJhbXMgPSB7IGtleTogc3RyaW5nOyB2YWx1ZTogYW55IH0gfCB7fTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZUNsaWVudEFuZFdzQXBpVHlwZSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogdHlwZW9mIFBvc3RNZXNzYWdlLldTQVBJX1RPX0NMSUVOVF9UWVBFIHwgdHlwZW9mIFBvc3RNZXNzYWdlLkNMSUVOVF9UT19XU0FQSV9UWVBFO1xuICBtZXRob2Q6IHN0cmluZztcbiAgcGFyYW1zPzogTWVzc2FnZVBhcmFtcztcbiAgbWV0aG9kQmFjaz86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDbGllbnRBbmRFeHRUeXBlID0ge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiB0eXBlb2YgUG9zdE1lc3NhZ2UuRVhUX1RPX0NMSUVOVF9UWVBFIHwgdHlwZW9mIFBvc3RNZXNzYWdlLkNMSUVOVF9UT19FWFRfVFlQRTtcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIGhyZWY6IHN0cmluZztcbiAgcGFyYW1zPzogTWVzc2FnZVBhcmFtcztcbiAgbWV0aG9kQmFjaz86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VNZWRpYUNsaWVudEFuZE1lZGlhU2VydmVyVHlwZSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogdHlwZW9mIFBvc3RNZXNzYWdlLk1FRElBX0NMSUVOVF9UT19NRURJQV9TRVJWRVJfVFlQRSB8IHR5cGVvZiBQb3N0TWVzc2FnZS5NRURJQV9TRVJWRVJfVE9fTUVESUFfQ0xJRU5UX1RZUEU7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBwYXJhbXM/OiBNZXNzYWdlUGFyYW1zO1xuICBtZXRob2RCYWNrPzogc3RyaW5nO1xufTtcbiIsImltcG9ydCBpbyBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xuaW1wb3J0IGNvbmYgZnJvbSBcImNvbW1vbi9jb25mXCI7XG5pbXBvcnQgZGVmaW5lIGZyb20gXCJjb21tb24vZGVmaW5lXCI7XG5pbXBvcnQgQm9vdE9wdGlvbiBmcm9tIFwiY29tbW9uL0Jvb3RPcHRpb25cIjtcbmltcG9ydCBTZXF1ZW5jZSBmcm9tIFwiYXBpL1NlcXVlbmNlXCI7XG5pbXBvcnQgQXBpU3RhdGUgZnJvbSBcImFwaS9zdG9yZS9cIjtcbmltcG9ydCBhcGlTdG9yZSBmcm9tIFwiYXBpL3N0b3JlL2FwaVN0b3JlXCI7XG5pbXBvcnQgV3NTZXJ2ZXJUb0FwaUVtaXRBY3Rpb24gZnJvbSBcImFwaS9hY3Rpb25zL3dzL3NlcnZlclRvQXBpRW1pdFwiO1xuaW1wb3J0IFdzQ2xpZW50VG9BcGlSZXF1ZXN0QWN0aW9ucyBmcm9tIFwiYXBpL2FjdGlvbnMvd3MvYXBpVG9TZXJ2ZXJSZXF1ZXN0XCI7XG5pbXBvcnQgV3NTZXJ2ZXJUb0FwaUJyb2FkY2FzdEFjdGlvbiBmcm9tIFwiYXBpL2FjdGlvbnMvd3Mvc2VydmVyVG9BcGlCcmFkY2FzdFwiO1xuaW1wb3J0IFdzQXBpV29ya2VyIGZyb20gXCJhcGkvd3MuYXBpLndvcmtlclwiO1xuXG50eXBlIFN0b3JlID0gYW55O1xuXG4vLyBUT0RPOiDjg6/jg7zjgqvjg7zjga/lrZDjg6/jg7zjgqvjg7zjgpLnlJ/miJDjgafjgY3jgoso44OR44OV44Kp44O844Oe44Oz44K55ZCR5LiKKVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV3Mge1xuICBpZDogc3RyaW5nO1xuICB3ZWJXb3JrZXI6IFdzQXBpV29ya2VyO1xuICBzdG9yZXM6IHsgW3M6IHN0cmluZ106IFN0b3JlIH0gfCB7fSA9IHt9O1xuICBpb3M6IHsgW3M6IHN0cmluZ106IFNvY2tldElPQ2xpZW50LlNvY2tldCB9IHwge30gPSB7fTtcbiAgbWV0aG9kczogeyBbczogc3RyaW5nXTogRnVuY3Rpb24gfSB8IHt9ID0ge307XG4gIHB1YmxpY0NhbGxiYWNrczogeyBbczogc3RyaW5nXTogRnVuY3Rpb24gfSB8IHt9ID0ge307XG4gIHN0YXRpYyBnZXQgc2VydmVyKCkge1xuICAgIHJldHVybiBjb25mLmVudiA9PT0gZGVmaW5lLkRFVkVMT1BNRU5UIHx8IGNvbmYuZW52ID09PSBkZWZpbmUuTE9DQUxIT1NUXG4gICAgICA/IGRlZmluZS5ERVZFTE9QTUVOVF9ET01BSU5cbiAgICAgIDogZGVmaW5lLlBST0RVQ1RJT05fRE9NQUlOO1xuICB9XG4gIHN0YXRpYyBnZXQgb3B0aW9uKCkge1xuICAgIHJldHVybiB7IGZvcmNlTmV3OiB0cnVlIH07XG4gIH1cbiAgY29uc3RydWN0b3Iod2ViV29ya2VyOiBXc0FwaVdvcmtlcikge1xuICAgIHRoaXMudXNlID0gdGhpcy51c2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnR1bmUgPSB0aGlzLnR1bmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnR1bmVkID0gdGhpcy50dW5lZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudW50dW5lID0gdGhpcy51bnR1bmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmV4ZSA9IHRoaXMuZXhlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblJlc3BvbnNlTWVBUEkgPSB0aGlzLm9uUmVzcG9uc2VNZUFQSS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub2ZmUmVzcG9uc2VDaEFQSSA9IHRoaXMub2ZmUmVzcG9uc2VDaEFQSS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3Vic2NyaWJlID0gdGhpcy5zdWJzY3JpYmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmV4ZUNhbGxiYWNrID0gdGhpcy5leGVDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub24gPSB0aGlzLm9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vZmYgPSB0aGlzLm9mZi5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy53ZWJXb3JrZXIgPSB3ZWJXb3JrZXI7XG4gICAgdGhpcy53ZWJXb3JrZXIucG9zdE1lc3NhZ2UoXCJXU19DT05TVFJVQ1RFRFwiKTtcbiAgfVxuXG4gIC8vIGNoYW5nZSBpbyBjb25uZWN0aW9uLlxuICBwdWJsaWMgdXNlKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5zdG9yZXNbaWRdICYmIHRoaXMuaW9zW3RoaXMuaWRdKSB7XG4gICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGV4ZShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBTdG9yZSk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzW21ldGhvZF0gJiYgdHlwZW9mIHRoaXNbbWV0aG9kXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzW21ldGhvZF0ocGFyYW1zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5tZXRob2RzW21ldGhvZF0gJiYgdHlwZW9mIHRoaXMubWV0aG9kc1ttZXRob2RdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMubWV0aG9kc1ttZXRob2RdKHBhcmFtcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgb25SZXNwb25zZUNoQVBJKGNoKSB7XG4gICAgY29uc3QgZ2V0UmVzcG9uc2VDaEFQSSA9IChhY3Rpb25NZXRob2QpID0+IHtcbiAgICAgIHJldHVybiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uU3RhdGUgPSBhY3Rpb25NZXRob2QocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnN0b3Jlc1t0aGlzLmlkXSAmJiB0aGlzLnN0b3Jlc1t0aGlzLmlkXS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBjb25zdCBjYWxsYmFjazogYW55ID0gZ2V0UmVzcG9uc2VDaEFQSShXc1NlcnZlclRvQXBpQnJvYWRjYXN0QWN0aW9uKTtcbiAgICB0aGlzLm9uKGNoLCBjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgb2ZmUmVzcG9uc2VDaEFQSShjaCkge1xuICAgIHRoaXMub2ZmKGNoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SW9QYXJhbXMoYm9vdE9wdGlvbjogQm9vdE9wdGlvbik6IHN0cmluZyB7XG4gICAgbGV0IHBhcmFtcyA9IFwiXCI7XG4gICAgT2JqZWN0LmtleXMoYm9vdE9wdGlvbikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5ID09PSBcImlkXCIpIHJldHVybjtcbiAgICAgIGlmIChrZXkgPT09IFwiZGVmYXVsdFByb3BzXCIpIHJldHVybjtcbiAgICAgIGNvbnN0IHZhbHVlID0gYm9vdE9wdGlvbltrZXldO1xuICAgICAgcGFyYW1zICs9IGAke2tleX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfSZgO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJhbXMucmVwbGFjZSgvJiQvLCBcIlwiKTtcbiAgfVxuXG4gIHByaXZhdGUgdHVuZShib290T3B0aW9uOiBCb290T3B0aW9uKSB7XG4gICAgaWYgKCF0aGlzLnVzZShib290T3B0aW9uLmlkKSkge1xuICAgICAgLy8gaWRcbiAgICAgIHRoaXMuaWQgPSBib290T3B0aW9uLmlkO1xuXG4gICAgICAvLyBzdG9yZS5cbiAgICAgIHRoaXMuc3RvcmVzW3RoaXMuaWRdID0gYXBpU3RvcmUoKTtcbiAgICAgIHRoaXMuc3RvcmVzW3RoaXMuaWRdLnN1YnNjcmliZSh0aGlzLnN1YnNjcmliZSk7XG4gICAgICBjb25zdCBhcGlTdGF0ZSA9IG5ldyBBcGlTdGF0ZShib290T3B0aW9uKTtcbiAgICAgIHRoaXMuc3RvcmVzW3RoaXMuaWRdLmRpc3BhdGNoKHsgLi4uYXBpU3RhdGUsIHR5cGU6IFwiU0VUVVBFRF9BUElfU1RPUkVFXCIgfSk7XG5cbiAgICAgIC8vIHdzIHNlcnZlci5cbiAgICAgIGNvbnN0IGlvUGFyYW1zID0gdGhpcy5nZXRJb1BhcmFtcyhib290T3B0aW9uKTtcbiAgICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke1dzLnNlcnZlcn06JHtkZWZpbmUuUE9SVFMuU09DS0VUX0lPfT8ke2lvUGFyYW1zfWA7XG4gICAgICB0aGlzLmlvc1t0aGlzLmlkXSA9IGlvKGVuZHBvaW50LCBXcy5vcHRpb24pO1xuICAgICAgdGhpcy5pb3NbdGhpcy5pZF0ub24oXCJjb25uZWN0XCIsIHRoaXMudHVuZWQpO1xuXG4gICAgICB0aGlzLm9uUmVzcG9uc2VDaEFQSShib290T3B0aW9uLmNoKTtcbiAgICAgIHRoaXMub25SZXF1ZXN0QVBJKCk7XG4gICAgICB0aGlzLm9uUmVzcG9uc2VNZUFQSSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdW50dW5lKGJvb3RPcHRpb246IEJvb3RPcHRpb24pIHtcbiAgICBjb25zdCBpZCA9IGJvb3RPcHRpb24gJiYgYm9vdE9wdGlvbi5pZCA/IGJvb3RPcHRpb24uaWQgOiB0aGlzLmlkO1xuXG4gICAgaWYgKHRoaXMuaW9zW2lkXSkge1xuICAgICAgdGhpcy5pb3NbaWRdW1wiZGlzY29ubmVjdFwiXSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaW9zW2lkXTtcbiAgICAgIGRlbGV0ZSB0aGlzLnN0b3Jlc1tpZF07XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5pb3MpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5pZCA9IE9iamVjdC5rZXlzKHRoaXMuaW9zKVswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHR1bmVkKCkge1xuICAgIHRoaXMud2ViV29ya2VyLnBvc3RNZXNzYWdlKFwiVFVORURcIiwgeyBpZDogdGhpcy5pZCB9KTtcbiAgfVxuXG4gIHByaXZhdGUgb25SZXF1ZXN0QVBJKCkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBXc0NsaWVudFRvQXBpUmVxdWVzdEFjdGlvbnM7XG4gICAgY29uc3QgYWN0aW9uS2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbnMpO1xuICAgIGNvbnN0IGFjdGlvbkxlbmd0aCA9IGFjdGlvbktleXMubGVuZ3RoO1xuICAgIGNvbnN0IGdldENvcmVBUEkgPSAoYWN0aW9uTmFtZSwgYmVmb3JlRnVuY3Rpb24pID0+IHtcbiAgICAgIHJldHVybiAocmVxdWVzdFBhcmFtcywgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgICAgICBjb25zdCByZWR1eFN0YXRlID0gdGhpcy5zdG9yZXNbdGhpcy5pZF0uZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgX3JlcXVlc3RTdGF0ZSA9IFNlcXVlbmNlLmdldFJlcXVlc3RTdGF0ZShhY3Rpb25OYW1lLCByZWR1eFN0YXRlLCByZXF1ZXN0UGFyYW1zKTtcbiAgICAgICAgY29uc3QgX2FjdGlvblN0YXRlID0gU2VxdWVuY2UuZ2V0UmVxdWVzdEFjdGlvblN0YXRlKGFjdGlvbk5hbWUsIHJlcXVlc3RQYXJhbXMpO1xuICAgICAgICBjb25zdCB7IHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUgfSA9IGJlZm9yZUZ1bmN0aW9uKHJlZHV4U3RhdGUsIF9yZXF1ZXN0U3RhdGUsIF9hY3Rpb25TdGF0ZSk7XG4gICAgICAgIHRoaXMucHVibGljQ2FsbGJhY2tzW3JlcXVlc3RTdGF0ZS50eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLmlvc1t0aGlzLmlkXS5lbWl0KHJlcXVlc3RTdGF0ZS50eXBlLCByZXF1ZXN0U3RhdGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZXNbdGhpcy5pZF0uZGlzcGF0Y2goYWN0aW9uU3RhdGUpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgZm9yIChsZXQgYWN0aW9uTm9kZUNudCA9IDA7IGFjdGlvbk5vZGVDbnQgPCBhY3Rpb25MZW5ndGg7IGFjdGlvbk5vZGVDbnQrKykge1xuICAgICAgY29uc3QgYWN0aW9uTmFtZSA9IGFjdGlvbktleXNbYWN0aW9uTm9kZUNudF07XG4gICAgICBjb25zdCBhY3Rpb25QbGFpbk5hbWUgPSBhY3Rpb25OYW1lLnJlcGxhY2UoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNULCBcIlwiKTtcbiAgICAgIGNvbnN0IGJlZm9yZUZ1bmN0aW9uID0gYWN0aW9uc1thY3Rpb25OYW1lXTtcbiAgICAgIHRoaXMubWV0aG9kc1thY3Rpb25QbGFpbk5hbWVdID0gZ2V0Q29yZUFQSShhY3Rpb25OYW1lLCBiZWZvcmVGdW5jdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblJlc3BvbnNlTWVBUEkoKSB7XG4gICAgY29uc3QgZ2V0VG9NZUFQSSA9IChhY3Rpb24pID0+IHtcbiAgICAgIHJldHVybiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uU3RhdGUgPSBhY3Rpb24ocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnN0b3Jlc1t0aGlzLmlkXS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2FsbGJhY2s6IGFueSA9IGdldFRvTWVBUEkoV3NTZXJ2ZXJUb0FwaUVtaXRBY3Rpb24pO1xuICAgIHRoaXMub24oU2VxdWVuY2UuQ0FUQ0hfTUVfS0VZLCBjYWxsYmFjayk7XG4gIH1cblxuICBwcml2YXRlIG9uKG9uS2V5LCBjYWxsYmFjayA9ICgpID0+IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlvc1t0aGlzLmlkXS5fY2FsbGJhY2tzW2AkJHtvbktleX1gXSkge1xuICAgICAgdGhpcy5pb3NbdGhpcy5pZF0ub24ob25LZXksIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9mZihvZmZLZXkpIHtcbiAgICBpZiAodGhpcy5pb3NbdGhpcy5pZF0uX2NhbGxiYWNrc1tgJCR7b2ZmS2V5fWBdKSB7XG4gICAgICB0aGlzLmlvc1t0aGlzLmlkXS5vZmYob2ZmS2V5KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZSgpIHtcbiAgICBjb25zdCBhcGlTdGF0ZSA9IHRoaXMuc3RvcmVzW3RoaXMuaWRdLmdldFN0YXRlKCk7XG4gICAgdGhpcy5leGVDYWxsYmFjayhhcGlTdGF0ZS5hcHAuYWN0aW9uZWQsIGFwaVN0YXRlKTtcbiAgICB0aGlzLndlYldvcmtlci5wb3N0TWVzc2FnZShhcGlTdGF0ZS5hcHAuYWN0aW9uZWQsIGFwaVN0YXRlKTtcbiAgfVxuXG4gIHByaXZhdGUgZXhlQ2FsbGJhY2sobWV0aG9kLCBhcGlTdGF0ZSkge1xuICAgIGNvbnN0IHsgYWN0aW9uVHlwZSwgYWN0aW9uTmFtZSB9ID0gU2VxdWVuY2UuZ2V0U2VxdWVuY2VBY3Rpb25NYXAobWV0aG9kKTtcbiAgICBpZiAoYWN0aW9uTmFtZSAhPT0gU2VxdWVuY2UuQVBJX0JST0FEQ0FTVF9DQUxMQkFDSykge1xuICAgICAgaWYgKGFjdGlvblR5cGUgPT09IFNlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVQpIHtcbiAgICAgICAgaWYgKHRoaXMucHVibGljQ2FsbGJhY2tzW2FjdGlvbk5hbWVdKSB7XG4gICAgICAgICAgY29uc3QgeyBwb3N0cywgdGhyZWFkLCB1c2VyIH0gPSBhcGlTdGF0ZTtcbiAgICAgICAgICB0aGlzLnB1YmxpY0NhbGxiYWNrc1thY3Rpb25OYW1lXShhcGlTdGF0ZSwgeyBwb3N0cywgdGhyZWFkLCB1aWQ6IHVzZXIudWlkIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvblR5cGUgPT09IFNlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVCkge1xuICAgICAgaWYgKHRoaXMucHVibGljQ2FsbGJhY2tzW1NlcXVlbmNlLkFQSV9CUk9BRENBU1RfQ0FMTEJBQ0tdKSB7XG4gICAgICAgIGNvbnN0IHsgcG9zdHMsIHRocmVhZCwgdXNlciB9ID0gYXBpU3RhdGU7XG4gICAgICAgIHRoaXMucHVibGljQ2FsbGJhY2tzW1NlcXVlbmNlLkFQSV9CUk9BRENBU1RfQ0FMTEJBQ0tdKGFjdGlvbk5hbWUsIHsgcG9zdHMsIHRocmVhZCwgdWlkOiB1c2VyLnVpZCB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDp1cmwnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybDtcblxuLyoqXG4gKiBVUkwgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7T2JqZWN0fSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdXJsICh1cmksIGxvYykge1xuICB2YXIgb2JqID0gdXJpO1xuXG4gIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbik7XG4gIGlmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIGxvYy5ob3N0O1xuXG4gIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmkpIHtcbiAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICBkZWJ1ZygncHJvdG9jb2wtbGVzcyB1cmwgJXMnLCB1cmkpO1xuICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSAnaHR0cHM6Ly8nICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcnNlXG4gICAgZGVidWcoJ3BhcnNlICVzJywgdXJpKTtcbiAgICBvYmogPSBwYXJzZXVyaSh1cmkpO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gIGlmICghb2JqLnBvcnQpIHtcbiAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzgwJztcbiAgICB9IGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnNDQzJztcbiAgICB9XG4gIH1cblxuICBvYmoucGF0aCA9IG9iai5wYXRoIHx8ICcvJztcblxuICB2YXIgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHZhciBob3N0ID0gaXB2NiA/ICdbJyArIG9iai5ob3N0ICsgJ10nIDogb2JqLmhvc3Q7XG5cbiAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAnOicgKyBvYmoucG9ydDtcbiAgLy8gZGVmaW5lIGhyZWZcbiAgb2JqLmhyZWYgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/ICcnIDogKCc6JyArIG9iai5wb3J0KSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cblx0Ki9cblx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuXHRcdC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcblxuXHRcdC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnN0IGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG5cdFx0XHRpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIi8qZ2xvYmFsIEJsb2IsRmlsZSovXG5cbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50c1xuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nKTtcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXScpO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHVyaSkge1xuICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7XG4gICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICB9XG5cbiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmVcbiAgICA6ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaG9zdG5hbWUgOiAnbG9jYWxob3N0Jyk7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydCB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTtcbiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTtcbiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLyc7XG4gIHRoaXMuZm9yY2VKU09OUCA9ICEhb3B0cy5mb3JjZUpTT05QO1xuICB0aGlzLmpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG4gIHRoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9ICEhb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlICE9PSBvcHRzLndpdGhDcmVkZW50aWFscztcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBkZXRlY3QgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnRcbiAgdGhpcy5pc1JlYWN0TmF0aXZlID0gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ3N0cmluZycgJiYgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gJ3JlYWN0bmF0aXZlJyk7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBvciBSZWFjdE5hdGl2ZSBjbGllbnRcbiAgaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmlzUmVhY3ROYXRpdmUpIHtcbiAgICBpZiAob3B0cy5leHRyYUhlYWRlcnMgJiYgT2JqZWN0LmtleXMob3B0cy5leHRyYUhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubG9jYWxBZGRyZXNzKSB7XG4gICAgICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgdGhpcy5pZCA9IG51bGw7XG4gIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5waW5nSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgdGhpcy5vcGVuKCk7XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cblNvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblNvY2tldC50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG5Tb2NrZXQucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQHJldHVybiB7VHJhbnNwb3J0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgcXVlcnkgPSBjbG9uZSh0aGlzLnF1ZXJ5KTtcblxuICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgcXVlcnkuRUlPID0gcGFyc2VyLnByb3RvY29sO1xuXG4gIC8vIHRyYW5zcG9ydCBuYW1lXG4gIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgLy8gcGVyLXRyYW5zcG9ydCBvcHRpb25zXG4gIHZhciBvcHRpb25zID0gdGhpcy50cmFuc3BvcnRPcHRpb25zW25hbWVdIHx8IHt9O1xuXG4gIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICB2YXIgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNbbmFtZV0oe1xuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBzb2NrZXQ6IHRoaXMsXG4gICAgYWdlbnQ6IG9wdGlvbnMuYWdlbnQgfHwgdGhpcy5hZ2VudCxcbiAgICBob3N0bmFtZTogb3B0aW9ucy5ob3N0bmFtZSB8fCB0aGlzLmhvc3RuYW1lLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCB8fCB0aGlzLnBvcnQsXG4gICAgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCB0aGlzLnNlY3VyZSxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGggfHwgdGhpcy5wYXRoLFxuICAgIGZvcmNlSlNPTlA6IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB0aGlzLmZvcmNlSlNPTlAsXG4gICAganNvbnA6IG9wdGlvbnMuanNvbnAgfHwgdGhpcy5qc29ucCxcbiAgICBmb3JjZUJhc2U2NDogb3B0aW9ucy5mb3JjZUJhc2U2NCB8fCB0aGlzLmZvcmNlQmFzZTY0LFxuICAgIGVuYWJsZXNYRFI6IG9wdGlvbnMuZW5hYmxlc1hEUiB8fCB0aGlzLmVuYWJsZXNYRFIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBvcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCB0aGlzLndpdGhDcmVkZW50aWFscyxcbiAgICB0aW1lc3RhbXBSZXF1ZXN0czogb3B0aW9ucy50aW1lc3RhbXBSZXF1ZXN0cyB8fCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLFxuICAgIHRpbWVzdGFtcFBhcmFtOiBvcHRpb25zLnRpbWVzdGFtcFBhcmFtIHx8IHRoaXMudGltZXN0YW1wUGFyYW0sXG4gICAgcG9saWN5UG9ydDogb3B0aW9ucy5wb2xpY3lQb3J0IHx8IHRoaXMucG9saWN5UG9ydCxcbiAgICBwZng6IG9wdGlvbnMucGZ4IHx8IHRoaXMucGZ4LFxuICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy5rZXksXG4gICAgcGFzc3BocmFzZTogb3B0aW9ucy5wYXNzcGhyYXNlIHx8IHRoaXMucGFzc3BocmFzZSxcbiAgICBjZXJ0OiBvcHRpb25zLmNlcnQgfHwgdGhpcy5jZXJ0LFxuICAgIGNhOiBvcHRpb25zLmNhIHx8IHRoaXMuY2EsXG4gICAgY2lwaGVyczogb3B0aW9ucy5jaXBoZXJzIHx8IHRoaXMuY2lwaGVycyxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkIHx8IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgZXh0cmFIZWFkZXJzOiBvcHRpb25zLmV4dHJhSGVhZGVycyB8fCB0aGlzLmV4dHJhSGVhZGVycyxcbiAgICBmb3JjZU5vZGU6IG9wdGlvbnMuZm9yY2VOb2RlIHx8IHRoaXMuZm9yY2VOb2RlLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfHwgdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMucmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5yZXF1ZXN0VGltZW91dCxcbiAgICBwcm90b2NvbHM6IG9wdGlvbnMucHJvdG9jb2xzIHx8IHZvaWQgKDApLFxuICAgIGlzUmVhY3ROYXRpdmU6IHRoaXMuaXNSZWFjdE5hdGl2ZVxuICB9KTtcblxuICByZXR1cm4gdHJhbnNwb3J0O1xufTtcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICB2YXIgbyA9IHt9O1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU29ja2V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdHJhbnNwb3J0O1xuICBpZiAodGhpcy5yZW1lbWJlclVwZ3JhZGUgJiYgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJiB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykgIT09IC0xKSB7XG4gICAgdHJhbnNwb3J0ID0gJ3dlYnNvY2tldCc7XG4gIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCAnTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICB9XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcblxuICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gIHRyeSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG4gIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1Zygnc2V0dGluZyB0cmFuc3BvcnQgJXMnLCB0cmFuc3BvcnQubmFtZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZygnY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gIHRyYW5zcG9ydFxuICAub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25EcmFpbigpO1xuICB9KVxuICAub24oJ3BhY2tldCcsIGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH0pXG4gIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcihlKTtcbiAgfSlcbiAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ3RyYW5zcG9ydCBjbG9zZScpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wcm9iZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gIHZhciBmYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkge1xuICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTtcbiAgICB9XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3BpbmcnLCBkYXRhOiAncHJvYmUnIH1dKTtcbiAgICB0cmFuc3BvcnQub25jZSgncGFja2V0JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCdwb25nJyA9PT0gbXNnLnR5cGUgJiYgJ3Byb2JlJyA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkaW5nJywgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTtcblxuICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yJyk7XG4gICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0ICgpIHtcbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgY2xlYW51cCgpO1xuXG4gICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcjogJyArIGVycik7XG4gICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3RyYW5zcG9ydCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmNsb3NlICgpIHtcbiAgICBvbmVycm9yKCdzb2NrZXQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbnVwZ3JhZGUgKHRvKSB7XG4gICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkaW5nJywgb251cGdyYWRlKTtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vbmNlKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25lcnJvcik7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gIHRoaXMub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgdGhpcy5vbmNlKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NvY2tldCBvcGVuJyk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgZGVidWcoJ3N0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgIHRoaXMuZW1pdCgnaGVhcnRiZWF0Jyk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9nbG9iYWxUaGlzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBYSFI7XG5tb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcblxuLyoqXG4gKiBFbXB0eSBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHt9XG5cbi8qKlxuICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gWEhSIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgdGhpcy54ZCA9ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmIG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lKSB8fFxuICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChYSFIsIFBvbGxpbmcpO1xuXG4vKipcbiAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAqL1xuXG5YSFIucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy51cmkgPSB0aGlzLnVyaSgpO1xuICBvcHRzLnhkID0gdGhpcy54ZDtcbiAgb3B0cy54cyA9IHRoaXMueHM7XG4gIG9wdHMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IGZhbHNlO1xuICBvcHRzLnN1cHBvcnRzQmluYXJ5ID0gdGhpcy5zdXBwb3J0c0JpbmFyeTtcbiAgb3B0cy5lbmFibGVzWERSID0gdGhpcy5lbmFibGVzWERSO1xuICBvcHRzLndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgb3B0cy5yZXF1ZXN0VGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5leHRyYUhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcblxuICByZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBpc0JpbmFyeSA9IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyAmJiBkYXRhICE9PSB1bmRlZmluZWQ7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgZGF0YTogZGF0YSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignc3VjY2VzcycsIGZuKTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb3N0IGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMuc2VuZFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3hociBwb2xsJyk7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYub25EYXRhKGRhdGEpO1xuICB9KTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb2xsIGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMucG9sbFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogUmVxdWVzdCBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QgKG9wdHMpIHtcbiAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCAnR0VUJztcbiAgdGhpcy51cmkgPSBvcHRzLnVyaTtcbiAgdGhpcy54ZCA9ICEhb3B0cy54ZDtcbiAgdGhpcy54cyA9ICEhb3B0cy54cztcbiAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50O1xuICB0aGlzLmlzQmluYXJ5ID0gb3B0cy5pc0JpbmFyeTtcbiAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBvcHRzLndpdGhDcmVkZW50aWFscztcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgdGhpcy5jcmVhdGUoKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdHMgPSB7IGFnZW50OiB0aGlzLmFnZW50LCB4ZG9tYWluOiB0aGlzLnhkLCB4c2NoZW1lOiB0aGlzLnhzLCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgdmFyIHhociA9IHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBkZWJ1ZygneGhyIG9wZW4gJXM6ICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICgnUE9TVCcgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5pc0JpbmFyeSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICcqLyonKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gaWU2IGNoZWNrXG4gICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3VwcG9ydHNCaW5hcnkgJiYgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIHx8IGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtOyBjaGFyc2V0PVVURi04Jykge1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcih0eXBlb2YgeGhyLnN0YXR1cyA9PT0gJ251bWJlcicgPyB4aHIuc3RhdHVzIDogMCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZGVidWcoJ3hociBkYXRhICVzJywgdGhpcy5kYXRhKTtcbiAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZocm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgIC8vIGFuZCB0aHVzIHRoZSAnZXJyb3InIGV2ZW50IGNhbiBvbmx5IGJlIG9ubHkgYm91bmQgKmFmdGVyKiB0aGlzIGV4Y2VwdGlvblxuICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5vbkVycm9yKGUpO1xuICAgIH0sIDApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ3N1Y2Nlc3MnKTtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gIHRoaXMub25TdWNjZXNzKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLmNsZWFudXAodHJ1ZSk7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBob3VzZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKGZyb21FcnJvcikge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB4bWxodHRwcmVxdWVzdFxuICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgfVxuXG4gIGlmIChmcm9tRXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgfVxuXG4gIHRoaXMueGhyID0gbnVsbDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gbG9hZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhO1xuICB0cnkge1xuICAgIHZhciBjb250ZW50VHlwZTtcbiAgICB0cnkge1xuICAgICAgY29udGVudFR5cGUgPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIHx8IGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtOyBjaGFyc2V0PVVURi04Jykge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlIHx8IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLm9uRXJyb3IoZSk7XG4gIH1cbiAgaWYgKG51bGwgIT0gZGF0YSkge1xuICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGl0IGhhcyBYRG9tYWluUmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5oYXNYRFIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciB0ZXJtaW5hdGlvbkV2ZW50ID0gJ29ucGFnZWhpZGUnIGluIGdsb2JhbFRoaXMgPyAncGFnZWhpZGUnIDogJ3VubG9hZCc7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0ZXJtaW5hdGlvbkV2ZW50LCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBzbGljaW5nIGFuIGFycmF5YnVmZmVyIGV2ZW4gd2hlblxuICogQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlIGlzIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYXJyYXlidWZmZXIuYnl0ZUxlbmd0aDtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgfHwgYnl0ZXM7XG5cbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxuXG4gIGlmIChzdGFydCA8IDApIHsgc3RhcnQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPiBieXRlcykgeyBlbmQgPSBieXRlczsgfVxuXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhZnRlclxuXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgIHZhciBiYWlsID0gZmFsc2VcbiAgICBlcnJfY2IgPSBlcnJfY2IgfHwgbm9vcFxuICAgIHByb3h5LmNvdW50ID0gY291bnRcblxuICAgIHJldHVybiAoY291bnQgPT09IDApID8gY2FsbGJhY2soKSA6IHByb3h5XG5cbiAgICBmdW5jdGlvbiBwcm94eShlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocHJveHkuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxuICAgICAgICB9XG4gICAgICAgIC0tcHJveHkuY291bnRcblxuICAgICAgICAvLyBhZnRlciBmaXJzdCBlcnJvciwgcmVzdCBhcmUgcGFzc2VkIHRvIGVycl9jYlxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICAgICAgLy8gZnV0dXJlIGVycm9yIGNhbGxiYWNrcyB3aWxsIGdvIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXG4gICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3V0ZjhqcyB2Mi4xLjIgYnkgQG1hdGhpYXMgKi9cblxudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHR2YXIgb3V0cHV0ID0gW107XG5cdHZhciBjb3VudGVyID0gMDtcblx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdHZhciB2YWx1ZTtcblx0dmFyIGV4dHJhO1xuXHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuLy8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcbmZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0dmFyIGluZGV4ID0gLTE7XG5cdHZhciB2YWx1ZTtcblx0dmFyIG91dHB1dCA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdH1cblx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdGlmIChjb2RlUG9pbnQgPj0gMHhEODAwICYmIGNvZGVQb2ludCA8PSAweERGRkYpIHtcblx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0J0xvbmUgc3Vycm9nYXRlIFUrJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ5dGUoY29kZVBvaW50LCBzaGlmdCkge1xuXHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHR9XG5cdHZhciBzeW1ib2wgPSAnJztcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGODAwKSA9PSAwKSB7IC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiA2KSAmIDB4MUYpIHwgMHhDMCk7XG5cdH1cblx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZGRjAwMDApID09IDApIHsgLy8gMy1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKCFjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSkge1xuXHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdH1cblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTIpICYgMHgwRikgfCAweEUwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRTAwMDAwKSA9PSAwKSB7IC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdH1cblx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0cmV0dXJuIHN5bWJvbDtcbn1cblxuZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0dmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7XG5cdHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcblx0dmFyIGluZGV4ID0gLTE7XG5cdHZhciBjb2RlUG9pbnQ7XG5cdHZhciBieXRlU3RyaW5nID0gJyc7XG5cdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0Y29kZVBvaW50ID0gY29kZVBvaW50c1tpbmRleF07XG5cdFx0Ynl0ZVN0cmluZyArPSBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpO1xuXHR9XG5cdHJldHVybiBieXRlU3RyaW5nO1xufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdGlmIChieXRlSW5kZXggPj0gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0dmFyIGNvbnRpbnVhdGlvbkJ5dGUgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRyZXR1cm4gY29udGludWF0aW9uQnl0ZSAmIDB4M0Y7XG5cdH1cblxuXHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZVN5bWJvbChzdHJpY3QpIHtcblx0dmFyIGJ5dGUxO1xuXHR2YXIgYnl0ZTI7XG5cdHZhciBieXRlMztcblx0dmFyIGJ5dGU0O1xuXHR2YXIgY29kZVBvaW50O1xuXG5cdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdH1cblxuXHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRieXRlMSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0Ynl0ZUluZGV4Kys7XG5cblx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdGlmICgoYnl0ZTEgJiAweDgwKSA9PSAwKSB7XG5cdFx0cmV0dXJuIGJ5dGUxO1xuXHR9XG5cblx0Ly8gMi1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDFGKSA8PCA2KSB8IGJ5dGUyO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHR9XG5cdH1cblxuXHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDA4MDApIHtcblx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHR9XG5cdH1cblxuXHQvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0KGJ5dGUzIDw8IDB4MDYpIHwgYnl0ZTQ7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcbn1cblxudmFyIGJ5dGVBcnJheTtcbnZhciBieXRlQ291bnQ7XG52YXIgYnl0ZUluZGV4O1xuZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdGJ5dGVDb3VudCA9IGJ5dGVBcnJheS5sZW5ndGg7XG5cdGJ5dGVJbmRleCA9IDA7XG5cdHZhciBjb2RlUG9pbnRzID0gW107XG5cdHZhciB0bXA7XG5cdHdoaWxlICgodG1wID0gZGVjb2RlU3ltYm9sKHN0cmljdCkpICE9PSBmYWxzZSkge1xuXHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHR9XG5cdHJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0dmVyc2lvbjogJzIuMS4yJyxcblx0ZW5jb2RlOiB1dGY4ZW5jb2RlLFxuXHRkZWNvZGU6IHV0ZjhkZWNvZGVcbn07XG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGNoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxuICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsxKV07XG4gICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzIpXTtcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKCk7XG4iLCIvKipcclxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcclxuICovXHJcblxyXG52YXIgQmxvYkJ1aWxkZXIgPSB0eXBlb2YgQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBXZWJLaXRCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBXZWJLaXRCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIE1TQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTVNCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIE1vekJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1vekJsb2JCdWlsZGVyIDogXHJcbiAgZmFsc2U7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGEgPSBuZXcgQmxvYihbJ2hpJ10pO1xyXG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXHJcbiAqIEZhaWxzIGluIFNhZmFyaSA2LCBzbyB3ZSBuZWVkIHRvIG1hcCB0byBBcnJheUJ1ZmZlcnMgdGhlcmUuXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA9IGJsb2JTdXBwb3J0ZWQgJiYgKGZ1bmN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcclxuICAgIHJldHVybiBiLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxyXG4gKi9cclxuXHJcbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXHJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5nZXRCbG9iO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IG1hcHMgQXJyYXlCdWZmZXJWaWV3cyB0byBBcnJheUJ1ZmZlcnNcclxuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XHJcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcclxuICByZXR1cm4gYXJ5Lm1hcChmdW5jdGlvbihjaHVuaykge1xyXG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgIHZhciBidWYgPSBjaHVuay5idWZmZXI7XHJcblxyXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcclxuICAgICAgLy8gaW5jbHVkZSB0aGUgc3ViYXJyYXkgcmVnaW9uIGZyb20gdGhlIHVuZGVybHlpbmcgYnVmZmVyXHJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgY29weS5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmLCBjaHVuay5ieXRlT2Zmc2V0LCBjaHVuay5ieXRlTGVuZ3RoKSk7XHJcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBidWY7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNodW5rO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcclxuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkuZm9yRWFjaChmdW5jdGlvbihwYXJ0KSB7XHJcbiAgICBiYi5hcHBlbmQocGFydCk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAob3B0aW9ucy50eXBlKSA/IGJiLmdldEJsb2Iob3B0aW9ucy50eXBlKSA6IGJiLmdldEJsb2IoKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEJsb2JDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICByZXR1cm4gbmV3IEJsb2IobWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLCBvcHRpb25zIHx8IHt9KTtcclxufTtcclxuXHJcbmlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBCbG9iQnVpbGRlckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEJsb2IucHJvdG90eXBlO1xyXG4gIEJsb2JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XHJcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcclxuICAgIHJldHVybiBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPyBCbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xyXG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcclxuICAgIHJldHVybiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufSkoKTtcclxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcblx0XHRcdGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCIvKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vZ2xvYmFsVGhpcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuXG4vKipcbiAqIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zLlxuICovXG5cbnZhciByTmV3bGluZSA9IC9cXG4vZztcbnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbnZhciBjYWxsYmFja3M7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7IH1cblxuLyoqXG4gKiBKU09OUCBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBKU09OUFBvbGxpbmcgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gIHRoaXMucXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuXG4gIC8vIGRlZmluZSBnbG9iYWwgY2FsbGJhY2tzIGFycmF5IGlmIG5vdCBwcmVzZW50XG4gIC8vIHdlIGRvIHRoaXMgaGVyZSAobGF6aWx5KSB0byBhdm9pZCB1bm5lZWRlZCBnbG9iYWwgcG9sbHV0aW9uXG4gIGlmICghY2FsbGJhY2tzKSB7XG4gICAgLy8gd2UgbmVlZCB0byBjb25zaWRlciBtdWx0aXBsZSBlbmdpbmVzIGluIHRoZSBzYW1lIHBhZ2VcbiAgICBjYWxsYmFja3MgPSBnbG9iYWxUaGlzLl9fX2VpbyA9IChnbG9iYWxUaGlzLl9fX2VpbyB8fCBbXSk7XG4gIH1cblxuICAvLyBjYWxsYmFjayBpZGVudGlmaWVyXG4gIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAobXNnKSB7XG4gICAgc2VsZi5vbkRhdGEobXNnKTtcbiAgfSk7XG5cbiAgLy8gYXBwZW5kIHRvIHF1ZXJ5IHN0cmluZ1xuICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuXG4gIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuc2NyaXB0KSBzZWxmLnNjcmlwdC5vbmVycm9yID0gZW1wdHk7XG4gICAgfSwgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoSlNPTlBQb2xsaW5nLCBQb2xsaW5nKTtcblxuLypcbiAqIEpTT05QIG9ubHkgc3VwcG9ydHMgYmluYXJ5IGFzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG5cbi8qKlxuICogQ2xvc2VzIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5mb3JtKSB7XG4gICAgdGhpcy5mb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb3JtKTtcbiAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgIHRoaXMuaWZyYW1lID0gbnVsbDtcbiAgfVxuXG4gIFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgc2NyaXB0LnNyYyA9IHRoaXMudXJpKCk7XG4gIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ2pzb25wIHBvbGwgZXJyb3InLCBlKTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gIGlmIChpbnNlcnRBdCkge1xuICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xuICB9IGVsc2Uge1xuICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIH1cbiAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG5cbiAgdmFyIGlzVUFnZWNrbyA9ICd1bmRlZmluZWQnICE9PSB0eXBlb2YgbmF2aWdhdG9yICYmIC9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgaWYgKGlzVUFnZWNrbykge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIH0sIDEwMCk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIHdpdGggYSBoaWRkZW4gaWZyYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIXRoaXMuZm9ybSkge1xuICAgIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIHZhciBhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICB2YXIgaWQgPSB0aGlzLmlmcmFtZUlkID0gJ2Vpb19pZnJhbWVfJyArIHRoaXMuaW5kZXg7XG4gICAgdmFyIGlmcmFtZTtcblxuICAgIGZvcm0uY2xhc3NOYW1lID0gJ3NvY2tldGlvJztcbiAgICBmb3JtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBmb3JtLnN0eWxlLnRvcCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnN0eWxlLmxlZnQgPSAnLTEwMDBweCc7XG4gICAgZm9ybS50YXJnZXQgPSBpZDtcbiAgICBmb3JtLm1ldGhvZCA9ICdQT1NUJztcbiAgICBmb3JtLnNldEF0dHJpYnV0ZSgnYWNjZXB0LWNoYXJzZXQnLCAndXRmLTgnKTtcbiAgICBhcmVhLm5hbWUgPSAnZCc7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLmFyZWEgPSBhcmVhO1xuICB9XG5cbiAgdGhpcy5mb3JtLmFjdGlvbiA9IHRoaXMudXJpKCk7XG5cbiAgZnVuY3Rpb24gY29tcGxldGUgKCkge1xuICAgIGluaXRJZnJhbWUoKTtcbiAgICBmbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdElmcmFtZSAoKSB7XG4gICAgaWYgKHNlbGYuaWZyYW1lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZWxmLmZvcm0ucmVtb3ZlQ2hpbGQoc2VsZi5pZnJhbWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoJ2pzb25wIHBvbGxpbmcgaWZyYW1lIHJlbW92YWwgZXJyb3InLCBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXG4gICAgICB2YXIgaHRtbCA9ICc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIG5hbWU9XCInICsgc2VsZi5pZnJhbWVJZCArICdcIj4nO1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChodG1sKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGlmcmFtZS5uYW1lID0gc2VsZi5pZnJhbWVJZDtcbiAgICAgIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDowJztcbiAgICB9XG5cbiAgICBpZnJhbWUuaWQgPSBzZWxmLmlmcmFtZUlkO1xuXG4gICAgc2VsZi5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgc2VsZi5pZnJhbWUgPSBpZnJhbWU7XG4gIH1cblxuICBpbml0SWZyYW1lKCk7XG5cbiAgLy8gZXNjYXBlIFxcbiB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY29udmVydGVkIGludG8gXFxyXFxuIGJ5IHNvbWUgVUFzXG4gIC8vIGRvdWJsZSBlc2NhcGluZyBpcyByZXF1aXJlZCBmb3IgZXNjYXBlZCBuZXcgbGluZXMgYmVjYXVzZSB1bmVzY2FwaW5nIG9mIG5ldyBsaW5lcyBjYW4gYmUgZG9uZSBzYWZlbHkgb24gc2VydmVyLXNpZGVcbiAgZGF0YSA9IGRhdGEucmVwbGFjZShyRXNjYXBlZE5ld2xpbmUsICdcXFxcXFxuJyk7XG4gIHRoaXMuYXJlYS52YWx1ZSA9IGRhdGEucmVwbGFjZShyTmV3bGluZSwgJ1xcXFxuJyk7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLmZvcm0uc3VibWl0KCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgaWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XG4gICAgdGhpcy5pZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaWZyYW1lLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9IGNvbXBsZXRlO1xuICB9XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCcpO1xuXG52YXIgQnJvd3NlcldlYlNvY2tldCwgTm9kZVdlYlNvY2tldDtcblxuaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gIEJyb3dzZXJXZWJTb2NrZXQgPSBXZWJTb2NrZXQ7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICBCcm93c2VyV2ViU29ja2V0ID0gc2VsZi5XZWJTb2NrZXQgfHwgc2VsZi5Nb3pXZWJTb2NrZXQ7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICB0cnkge1xuICAgIE5vZGVXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuICB9IGNhdGNoIChlKSB7IH1cbn1cblxuLyoqXG4gKiBHZXQgZWl0aGVyIHRoZSBgV2ViU29ja2V0YCBvciBgTW96V2ViU29ja2V0YCBnbG9iYWxzXG4gKiBpbiB0aGUgYnJvd3NlciBvciB0cnkgdG8gcmVzb2x2ZSBXZWJTb2NrZXQtY29tcGF0aWJsZVxuICogaW50ZXJmYWNlIGV4cG9zZWQgYnkgYHdzYCBmb3IgTm9kZS1saWtlIGVudmlyb25tZW50LlxuICovXG5cbnZhciBXZWJTb2NrZXRJbXBsID0gQnJvd3NlcldlYlNvY2tldCB8fCBOb2RlV2ViU29ja2V0O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0SW1wbCA9IE5vZGVXZWJTb2NrZXQ7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChXUywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5uYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8qXG4gKiBXZWJTb2NrZXRzIHN1cHBvcnQgYmluYXJ5XG4gKi9cblxuV1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBPcGVucyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB1cmkgPSB0aGlzLnVyaSgpO1xuICB2YXIgcHJvdG9jb2xzID0gdGhpcy5wcm90b2NvbHM7XG4gIHZhciBvcHRzID0ge1xuICAgIGFnZW50OiB0aGlzLmFnZW50LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlXG4gIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcbiAgfVxuICBpZiAodGhpcy5sb2NhbEFkZHJlc3MpIHtcbiAgICBvcHRzLmxvY2FsQWRkcmVzcyA9IHRoaXMubG9jYWxBZGRyZXNzO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0aGlzLndzID1cbiAgICAgIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ICYmICF0aGlzLmlzUmVhY3ROYXRpdmVcbiAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICA/IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSwgcHJvdG9jb2xzKVxuICAgICAgICAgIDogbmV3IFdlYlNvY2tldEltcGwodXJpKVxuICAgICAgICA6IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCd3ZWJzb2NrZXQgY2xvc2VkIGJlZm9yZSBvbmNsb3NlIGV2ZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAtLXRvdGFsIHx8IGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pKHBhY2tldHNbaV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoKSB7XG4gICAgc2VsZi5lbWl0KCdmbHVzaCcpO1xuXG4gICAgLy8gZmFrZSBkcmFpblxuICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHRoaXMud3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy53cy5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ3dzcycgOiAnd3MnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnd3NzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgKCd3cycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICBpZiAodGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcblxuLyoqXG4gKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIVdlYlNvY2tldEltcGwgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXRJbXBsICYmIHRoaXMubmFtZSA9PT0gV1MucHJvdG90eXBlLm5hbWUpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdG9BcnJheVxuXG5mdW5jdGlvbiB0b0FycmF5KGxpc3QsIGluZGV4KSB7XG4gICAgdmFyIGFycmF5ID0gW11cblxuICAgIGluZGV4ID0gaW5kZXggfHwgMFxuXG4gICAgZm9yICh2YXIgaSA9IGluZGV4IHx8IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2kgLSBpbmRleF0gPSBsaXN0W2ldXG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5XG59XG4iLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsImV4cG9ydHMuZW5kaWFubmVzcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdMRScgfTtcblxuZXhwb3J0cy5ob3N0bmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbG9jYXRpb24uaG9zdG5hbWVcbiAgICB9XG4gICAgZWxzZSByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLmxvYWRhdmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXSB9O1xuXG5leHBvcnRzLnVwdGltZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDAgfTtcblxuZXhwb3J0cy5mcmVlbWVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xufTtcblxuZXhwb3J0cy50b3RhbG1lbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG5cbmV4cG9ydHMuY3B1cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH07XG5cbmV4cG9ydHMudHlwZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdCcm93c2VyJyB9O1xuXG5leHBvcnRzLnJlbGVhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0cy5uZXR3b3JrSW50ZXJmYWNlc1xuPSBleHBvcnRzLmdldE5ldHdvcmtJbnRlcmZhY2VzXG49IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHt9IH07XG5cbmV4cG9ydHMuYXJjaCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdqYXZhc2NyaXB0JyB9O1xuXG5leHBvcnRzLnBsYXRmb3JtID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2Jyb3dzZXInIH07XG5cbmV4cG9ydHMudG1wZGlyID0gZXhwb3J0cy50bXBEaXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcvdG1wJztcbn07XG5cbmV4cG9ydHMuRU9MID0gJ1xcbic7XG5cbmV4cG9ydHMuaG9tZWRpciA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuICcvJ1xufTtcbiIsImltcG9ydCBCb290T3B0aW9uIGZyb20gXCJjb21tb24vQm9vdE9wdGlvblwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFVzZXIgZnJvbSBcImFwaS9zdG9yZS9Vc2VyXCI7XG5pbXBvcnQgUmFua3MgZnJvbSBcImFwaS9zdG9yZS9SYW5rc1wiO1xuaW1wb3J0IE1lbnVMb2dzIGZyb20gXCJhcGkvc3RvcmUvTWVudUxvZ3NcIjtcbmltcG9ydCBQb3N0cyBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZSBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVcIjtcbmltcG9ydCBQb3N0c1RpbWVsaW5lU3RvY2sgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2tcIjtcbmltcG9ydCBBbmFseXplIGZyb20gXCJhcGkvc3RvcmUvQW5hbHl6ZVwiO1xuaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuaW1wb3J0IEFjdGlvbkxvZyBmcm9tIFwiYXBpL3N0b3JlL0FjdGlvbkxvZ3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpU3RhdGUge1xuICByYW5rczogUmFua3M7XG4gIG1lbnVMb2dzOiBNZW51TG9ncztcbiAgcG9zdHM6IFBvc3RzO1xuICBwb3N0c011bHRpOiBQb3N0cztcbiAgcG9zdHNTaW5nbGU6IFBvc3RzO1xuICBwb3N0c0NoaWxkOiBQb3N0cztcbiAgcG9zdHNUaW1lbGluZTogUG9zdHNUaW1lbGluZTtcbiAgcG9zdHNUaW1lbGluZVN0b2NrOiBQb3N0c1RpbWVsaW5lU3RvY2s7XG4gIHBvc3RzTG9nczogUG9zdHM7XG4gIGFuYWx5emU6IEFuYWx5emU7XG4gIGJvb3RPcHRpb246IEJvb3RPcHRpb247XG4gIHRocmVhZHM6IFtUaHJlYWRdO1xuICB0aHJlYWQ6IFRocmVhZDtcbiAgdGhyZWFkRGV0YWlsOiBUaHJlYWQ7XG4gIGFwcDogQXBwO1xuICB1c2VyOiBVc2VyO1xuICBhY3Rpb25Mb2c6IEFjdGlvbkxvZztcbiAgY29uc3RydWN0b3IoYm9vdE9wdGlvbjogQm9vdE9wdGlvbiwgY2FjaGVzOiBhbnkgPSB7fSkge1xuICAgIHRoaXMuYm9vdE9wdGlvbiA9IGJvb3RPcHRpb247XG4gICAgdGhpcy5yYW5rcyA9IG5ldyBSYW5rcygpO1xuICAgIHRoaXMubWVudUxvZ3MgPSBuZXcgTWVudUxvZ3MoY2FjaGVzLm1lbnVMb2dzKTtcbiAgICB0aGlzLnBvc3RzID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c011bHRpID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c1NpbmdsZSA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMucG9zdHNDaGlsZCA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMucG9zdHNUaW1lbGluZSA9IG5ldyBQb3N0c1RpbWVsaW5lKCk7XG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG4gICAgdGhpcy5wb3N0c0xvZ3MgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLmFuYWx5emUgPSBuZXcgQW5hbHl6ZSgpO1xuICAgIHRoaXMudGhyZWFkID0gbmV3IFRocmVhZCh0aGlzLmJvb3RPcHRpb24sIGNhY2hlcy50aHJlYWQpO1xuICAgIHRoaXMudGhyZWFkRGV0YWlsID0gbmV3IFRocmVhZCh0aGlzLmJvb3RPcHRpb24sIGNhY2hlcy50aHJlYWQpO1xuICAgIHRoaXMuYXBwID0gbmV3IEFwcChBcGlTdGF0ZS5nZXRBcHBQYXJhbXModGhpcy50aHJlYWQsIHRoaXMuYm9vdE9wdGlvbiwgY2FjaGVzKSk7XG4gICAgdGhpcy51c2VyID0gbmV3IFVzZXIoQXBpU3RhdGUuZ2V0VXNlclBhcmFtcyh0aGlzLCBjYWNoZXMpKTtcbiAgICB0aGlzLmFjdGlvbkxvZyA9IG5ldyBBY3Rpb25Mb2coKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBcHBQYXJhbXModGhyZWFkLCBib290T3B0aW9uLCBjYWNoZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgcm9vdFRpdGxlOiB0aHJlYWQudGl0bGUsXG4gICAgICAuLi5ib290T3B0aW9uLFxuICAgICAgLi4udGhyZWFkLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0VXNlclBhcmFtcyhzZWxmLCBjYWNoZXMpIHtcbiAgICBpZiAoY2FjaGVzICYmIGNhY2hlcy51c2VyICYmIGNhY2hlcy51c2VyLnVpZCkge1xuICAgICAgcmV0dXJuIHsgLi4uY2FjaGVzLnVzZXIgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlzcFRocmVhZFR5cGUgPSBzZWxmLnRocmVhZC5jaCA9PT0gc2VsZi5hcHAucm9vdENoID8gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgOiBBcHAuZGlzcFRocmVhZFR5cGVTaW5nbGU7XG4gICAgICByZXR1cm4geyBkaXNwVGhyZWFkVHlwZSB9O1xuICAgIH1cbiAgfVxuXG4gIGdldCBjaCgpIHtcbiAgICByZXR1cm4gdGhpcy50aHJlYWQuY2g7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmltcG9ydCBjb25mIGZyb20gXCJjbGllbnQvY29uZlwiO1xuXG5leHBvcnQgdHlwZSBDbGlja2VkVHlwZSA9IFwiQ2hcIiB8IFwiQmFja1RvUm9vdENoXCIgfCBcIlRvTWVkaWFcIiB8IFwiTGlua3NcIiB8IFwiZmluZE1lZGlhQ2hcIiB8IFwiXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVpIGV4dGVuZHMgU2NoZW1hIHtcbiAgc3RhdGljIGdldCBvcGVuTG9ja01lbnVMYWJlbE5vKCkge1xuICAgIHJldHVybiBcIk5vXCI7XG4gIH1cbiAgc3RhdGljIGdldCBvcGVuTG9ja01lbnVMYWJlbExpa2UoKSB7XG4gICAgcmV0dXJuIFwiTGlrZVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgb3BlbkxvY2tNZW51TGFiZWxTaGFyZSgpIHtcbiAgICByZXR1cm4gXCJTaGFyZVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgb3BlbkxvY2tNZW51TGFiZWxBYm91dCgpIHtcbiAgICByZXR1cm4gXCJBYm91dFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgc2NyZWVuTW9kZVNtYWxsTGFiZWwoKSB7XG4gICAgcmV0dXJuIFwiU01BTExcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IHNjcmVlbk1vZGVNaWRkbGVMYWJlbCgpIHtcbiAgICByZXR1cm4gXCJNSURETEVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IHNjcmVlbk1vZGVMYXJnZUxhYmVsKCkge1xuICAgIHJldHVybiBcIkxBUkdFXCI7XG4gIH1cbiAgc3RhdGljIGdldCBzY3JlZW5Nb2RlSW5kZXhMYWJlbCgpIHtcbiAgICByZXR1cm4gXCJNRU5VXCI7XG4gIH1cbiAgc3RhdGljIGdldCBzY3JlZW5Nb2RlVGhyZWFkTGFiZWwoKSB7XG4gICAgcmV0dXJuIFwiVEhSRUFEXCI7XG4gIH1cbiAgc3RhdGljIGdldCBzY3JlZW5Nb2RlRGV0YWlsTGFiZWwoKSB7XG4gICAgcmV0dXJuIFwiREVUQUlMXCI7XG4gIH1cbiAgc3RhdGljIGdldCBzY3JlZW5Nb2RlU21hbGxXaWR0aFB4KCkge1xuICAgIHJldHVybiBjb25mLnNjcmVlbk1vZGUuc21hbGw7XG4gIH1cbiAgc3RhdGljIGdldCBzY3JlZW5Nb2RlTWlkZGxlV2lkdGhQeCgpIHtcbiAgICByZXR1cm4gY29uZi5zY3JlZW5Nb2RlLm1pZGRsZTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuc2lvbk1vZGVFeHRNb2RhbExhYmVsKCkge1xuICAgIHJldHVybiBcIk1vZGFsXCI7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbnNpb25Nb2RlRXh0Qm90dG9tTGFiZWwoKSB7XG4gICAgcmV0dXJuIFwiQm90dG9tXCI7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbnNpb25Nb2RlRXh0RW1iZWRMYWJlbCgpIHtcbiAgICByZXR1cm4gXCJFbWJlZFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5zaW9uTW9kZUV4dE5vbmVMYWJlbCgpIHtcbiAgICByZXR1cm4gXCJOb25lXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZW51Q29tcG9uZW50VXNlcnNMYWJlbCgpIHtcbiAgICByZXR1cm4gXCJVc2Vyc1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVudUNvbXBvbmVudFJhbmtMYWJlbCgpIHtcbiAgICByZXR1cm4gXCJSYW5rXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZW51Q29tcG9uZW50TG9nc0xhYmVsKCkge1xuICAgIHJldHVybiBcIkxvZ3NcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lbnVDb21wb25lbnRTZXR0aW5nTGFiZWwoKSB7XG4gICAgcmV0dXJuIFwiU2V0dGluZ1wiO1xuICB9XG4gIHN0YXRpYyBnZXREZWZhdWx0TWVudUNvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gVWkubWVudUNvbXBvbmVudFJhbmtMYWJlbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRXaWR0aChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5leHRlbnNpb25XaWR0aCA+IDApIHtcbiAgICAgIHJldHVybiBwYXJhbXMuZXh0ZW5zaW9uV2lkdGg7XG4gICAgfVxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLndpZHRoID4gMCkge1xuICAgICAgcmV0dXJuIHBhcmFtcy53aWR0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy53aWR0aCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMud2lkdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKHBhcmFtcy53aWR0aC5pbmRleE9mKFwicHhcIikgPj0gMCkge1xuICAgICAgICAgIHJldHVybiBOdW1iZXIocGFyYW1zLndpZHRoLnJlcGxhY2UoXCJweFwiLCBcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJhbXMud2lkdGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgc3RhdGljIGdldEhlaWdodChwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuZXh0ZW5zaW9uSGVpZ3QgPiAwKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmV4dGVuc2lvbkhlaWd0O1xuICAgIH1cbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5oZWlnaHQgPiAwKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmhlaWdodDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTY3JlZW5Nb2RlKHdpZHRoUHg6IGFueSA9IDApIHtcbiAgICBpZiAoIXdpZHRoUHgpIHtcbiAgICAgIGlmICgod2luZG93ICYmIHdpbmRvdy5pbm5lcldpZHRoID09PSAwKSB8fCB3aW5kb3cuaW5uZXJIZWlnaHQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cuaW5uZXJXaWR0aCA+IDApIHtcbiAgICAgICAgd2lkdGhQeCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2lkdGhQeCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgd2lkdGhQeCA9IHdpZHRoUHgucmVwbGFjZShcInB4XCIsIFwiXCIpO1xuICAgIH1cblxuICAgIGlmIChVaS5zY3JlZW5Nb2RlU21hbGxXaWR0aFB4ID49IHdpZHRoUHgpIHtcbiAgICAgIHJldHVybiBVaS5zY3JlZW5Nb2RlU21hbGxMYWJlbDtcbiAgICB9XG5cbiAgICBpZiAoVWkuc2NyZWVuTW9kZVNtYWxsV2lkdGhQeCA8PSB3aWR0aFB4ICYmIFVpLnNjcmVlbk1vZGVNaWRkbGVXaWR0aFB4ID49IHdpZHRoUHgpIHtcbiAgICAgIHJldHVybiBVaS5zY3JlZW5Nb2RlTWlkZGxlTGFiZWw7XG4gICAgfVxuICAgIHJldHVybiBVaS5zY3JlZW5Nb2RlTGFyZ2VMYWJlbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJc09wZW5NZW51KHVpKSB7XG4gICAgc3dpdGNoICh1aS5zY3JlZW5Nb2RlKSB7XG4gICAgICBjYXNlIFVpLnNjcmVlbk1vZGVTbWFsbExhYmVsOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjYXNlIFVpLnNjcmVlbk1vZGVNaWRkbGVMYWJlbDpcbiAgICAgIGNhc2UgVWkuc2NyZWVuTW9kZUxhcmdlTGFiZWw6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRJc09wZW5Cb2FyZCh1aSkge1xuICAgIHN3aXRjaCAodWkuc2NyZWVuTW9kZSkge1xuICAgICAgY2FzZSBVaS5zY3JlZW5Nb2RlU21hbGxMYWJlbDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgY2FzZSBVaS5zY3JlZW5Nb2RlTWlkZGxlTGFiZWw6XG4gICAgICBjYXNlIFVpLnNjcmVlbk1vZGVMYXJnZUxhYmVsOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0SXNPcGVuUG9zdHModWk6IGFueSwgY2FsbGVkOiBzdHJpbmcgPSBcIlwiKSB7XG4gICAgbGV0IHsgZXh0ZW5zaW9uTW9kZSwgaGVpZ2h0LCBleHRlbnNpb25IZWlnaHQsIGV4dGVuc2lvbkNsb3NlSGVpZ2h0IH0gPSB1aTtcbiAgICBjb25zdCBsb2cgPSBmYWxzZTtcbiAgICBjb25zdCBhbCA9IGZhbHNlO1xuICAgIGlmIChleHRlbnNpb25Nb2RlID09PSBVaS5leHRlbnNpb25Nb2RlRXh0Qm90dG9tTGFiZWwgfHwgZXh0ZW5zaW9uTW9kZSA9PT0gVWkuZXh0ZW5zaW9uTW9kZUV4dE1vZGFsTGFiZWwpIHtcbiAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSBcIm51bWJlclwiKSBoZWlnaHQgPSBOdW1iZXIoaGVpZ2h0KTtcbiAgICAgIGlmICh0eXBlb2YgZXh0ZW5zaW9uSGVpZ2h0ICE9PSBcIm51bWJlclwiKSBleHRlbnNpb25IZWlnaHQgPSBOdW1iZXIoZXh0ZW5zaW9uSGVpZ2h0KTtcblxuICAgICAgaWYgKGhlaWdodCA9PT0gMCkge1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkBnZXRJc09wZW5Qb3N0cyBBIFwiICsgXCIgXCIgKyBleHRlbnNpb25IZWlnaHQgKyBcIiBcIiArIGhlaWdodCk7XG4gICAgICAgIGlmIChhbCkgYWxlcnQoXCJAZ2V0SXNPcGVuUG9zdHMgQSBcIiArIFwiIFwiICsgZXh0ZW5zaW9uSGVpZ2h0ICsgXCIgXCIgKyBoZWlnaHQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIE1FTU86IOOCueODnuODm+OBp+WFpeWKm+ODouODvOODieOBq+OBquOBo+OBn+aZguOBq2hlaWdodOOBjGV4dGVuc2lvbkhlaWdodOOCkuS4iuWbnuOCi+aZguOBjOOBguOCi+OBn+OCgVxuICAgICAgaWYgKGV4dGVuc2lvbkhlaWdodCA8PSBoZWlnaHQpIHtcbiAgICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coXCJAZ2V0SXNPcGVuUG9zdHMgQyBcIiArIFwiIFwiICsgZXh0ZW5zaW9uSGVpZ2h0ICsgXCIgXCIgKyBoZWlnaHQpO1xuICAgICAgICBpZiAoYWwpIGFsZXJ0KFwiQGdldElzT3BlblBvc3RzIEMgXCIgKyBcIiBcIiArIGV4dGVuc2lvbkhlaWdodCArIFwiIFwiICsgaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKFwiQGdldElzT3BlblBvc3RzIEQgXCIgKyBcIiBcIiArIGV4dGVuc2lvbkhlaWdodCArIFwiIFwiICsgaGVpZ2h0KTtcbiAgICAgIGlmIChhbCkgYWxlcnQoXCJAZ2V0SXNPcGVuUG9zdHMgRCBcIiArIFwiIFwiICsgZXh0ZW5zaW9uSGVpZ2h0ICsgXCIgXCIgKyBoZWlnaHQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkBnZXRJc09wZW5Qb3N0cyBFIFwiICsgXCIgXCIgKyBleHRlbnNpb25IZWlnaHQgKyBcIiBcIiArIGhlaWdodCk7XG4gICAgICBpZiAoYWwpIGFsZXJ0KFwiQGdldElzT3BlblBvc3RzIEUgXCIgKyBcIiBcIiArIGV4dGVuc2lvbkhlaWdodCArIFwiIFwiICsgaGVpZ2h0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRVaVVwZGF0ZWRPcGVuRmxncyh7IGFwcCwgdWkgfSwgY2FsbCA9IFwiXCIpIHtcbiAgICBzd2l0Y2ggKGNhbGwpIHtcbiAgICAgIGNhc2UgXCJ0b2dnbGVNYWluXCI6XG4gICAgICBjYXNlIFwiaGVhZGVyRGV0YWlsSWNvblwiOlxuICAgICAgICBzd2l0Y2ggKHVpLnNjcmVlbk1vZGUpIHtcbiAgICAgICAgICBjYXNlIFVpLnNjcmVlbk1vZGVTbWFsbExhYmVsOlxuICAgICAgICAgICAgdWkuaXNPcGVuRGV0YWlsID0gIXVpLmlzT3BlbkRldGFpbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVWkuc2NyZWVuTW9kZU1pZGRsZUxhYmVsOlxuICAgICAgICAgICAgaWYgKHVpLmlzT3BlbkRldGFpbCkge1xuICAgICAgICAgICAgICBpZiAoYXBwLmRldGFpbENoID09PSBhcHAucm9vdENoKSB7XG4gICAgICAgICAgICAgICAgdWkuaXNPcGVuRGV0YWlsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdWkuaXNPcGVuTWVudSA9IHRydWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkuaXNPcGVuTWVudSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHVpLmlzT3BlbkRldGFpbCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1aS5pc09wZW5NZW51ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHVpLmlzT3BlbkRldGFpbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJoZWFkZXJNZW51SWNvblwiOlxuICAgICAgICBzd2l0Y2ggKHVpLnNjcmVlbk1vZGUpIHtcbiAgICAgICAgICBjYXNlIFVpLnNjcmVlbk1vZGVNaWRkbGVMYWJlbDpcbiAgICAgICAgICAgIGlmICh1aS5pc09wZW5EZXRhaWwpIHtcbiAgICAgICAgICAgICAgdWkuaXNPcGVuTWVudSA9IHRydWU7XG4gICAgICAgICAgICAgIHVpLmlzT3BlbkRldGFpbCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdWkuaXNPcGVuTWVudSA9IHRydWU7XG4gICAgICAgICAgICAgIHVpLmlzT3BlbkRldGFpbCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY2hhbmdlVGhyZWFkRGV0YWlsXCI6XG4gICAgICBjYXNlIFwicG9zdFwiOlxuICAgICAgICBzd2l0Y2ggKHVpLnNjcmVlbk1vZGUpIHtcbiAgICAgICAgICBjYXNlIFVpLnNjcmVlbk1vZGVTbWFsbExhYmVsOlxuICAgICAgICAgICAgdWkuaXNPcGVuRGV0YWlsID0gIXVpLmlzT3BlbkRldGFpbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVWkuc2NyZWVuTW9kZU1pZGRsZUxhYmVsOlxuICAgICAgICAgICAgdWkuaXNPcGVuTWVudSA9IGZhbHNlO1xuICAgICAgICAgICAgdWkuaXNPcGVuRGV0YWlsID0gdHJ1ZTtcbiAgICAgICAgICBjYXNlIFVpLnNjcmVlbk1vZGVMYXJnZUxhYmVsOlxuICAgICAgICAgICAgdWkuaXNPcGVuTWVudSA9IHRydWU7XG4gICAgICAgICAgICB1aS5pc09wZW5EZXRhaWwgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB1aTtcbiAgfVxuXG4gIC8vIOWfuuacrOihqOekuumWoumAo1xuICBpRnJhbWVJZDogc3RyaW5nO1xuICB3aWR0aDogc3RyaW5nIHwgbnVtYmVyO1xuICBoZWlnaHQ6IHN0cmluZyB8IG51bWJlcjtcbiAgcG9zdHNIZWlnaHQ6IHN0cmluZyB8IG51bWJlcjtcbiAgc2NyZWVuTW9kZTogXCJMQVJHRVwiIHwgXCJNSURETEVcIiB8IFwiU01BTExcIiB8IHVuZGVmaW5lZDtcblxuICAvLyBpZnJhbWXjga7mi6HlvLXmqZ/og73ooajnpLrjga7loLTlkIhcbiAgZXh0ZW5zaW9uTW9kZTogXCJNb2RhbFwiIHwgXCJCb3R0b21cIiB8IFwiRW1iZWRcIiB8IFwiTm9uZVwiO1xuICBleHRlbnNpb25XaWR0aDogc3RyaW5nIHwgbnVtYmVyO1xuICBleHRlbnNpb25IZWlnaHQ6IHN0cmluZyB8IG51bWJlcjtcblxuICBpc09wZW5Qb3N0czogYm9vbGVhbjtcbiAgaXNPcGVuU2V0dGluZzogYm9vbGVhbjtcbiAgaXNPcGVuTWVudTogYm9vbGVhbjtcbiAgaXNPcGVuRGV0YWlsOiBib29sZWFuO1xuICBpc09wZW5OZXdQb3N0OiBib29sZWFuO1xuICBpc09wZW5Ob3RpZjogYm9vbGVhbjtcbiAgaXNPcGVuUG9zdHNTdXBwb3J0ZXI6IGJvb2xlYW47XG4gIGlzT3BlbkJvYXJkOiBib29sZWFuO1xuICBpc0J1YmJsZVBvc3Q6IGJvb2xlYW47XG4gIGlzRGlzcFBvc3RzOiBib29sZWFuO1xuICBpc09wZW5MaW5rczogYm9vbGVhbjtcbiAgaXNUcmFuc2l0aW9uOiBib29sZWFuO1xuXG4gIC8vIOOCr+ODquODg+OCr+aDheWgsVxuICBjbGlja2VkOiBDbGlja2VkVHlwZTtcblxuICAvLyBkZXRhaWzmg4XloLFcbiAgZGV0YWlsQ2g6IHN0cmluZztcblxuICAvLyBJbmRleOaDheWgsVxuICBtZW51Q29tcG9uZW50OiBcIlVzZXJzXCIgfCBcIkluZGV4XCIgfCBcIkxvZ3NcIiB8IFwiU2V0dGluZ1wiO1xuXG4gIC8vIOWQhOODkeODvOODhOOBrueKtuaFiyjmloflrZfliJfliLblvqEpXG4gIHRocmVhZFNjcm9sbFk6IHN0cmluZyB8IG51bWJlcjtcbiAgb3BlbklubmVyTm90aWY6IGJvb2xlYW47XG4gIG9wZW5Mb2NrTWVudTogXCJBYm91bnRcIiB8IFwiTGlrZVwiIHwgXCJTaGFyZVwiIHwgXCJOb1wiO1xuICBpbnB1dFBvc3Q6IHN0cmluZztcbiAgaW5wdXRTdGFtcElkOiBzdHJpbmcgfCBudW1iZXI7XG4gIGlucHV0Q3VycmVudFRpbWU6IG51bWJlcjtcbiAgaW5wdXRTZWFyY2g6IHN0cmluZztcblxuICBpc0xvYWRpbmc6IGJvb2xlYW47XG5cbiAgLy8gaWZyYW1l55u05o6l5Z+L44KB6L6844G/XG4gIGluY2x1ZGVJZnJhbWVUYWc6IGJvb2xlYW47XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGlGcmFtZUlkID0gcGFyYW1zLmlGcmFtZUlkID8gcGFyYW1zLmlGcmFtZUlkIDogXCJcIjtcbiAgICBjb25zdCB3aWR0aCA9IFVpLmdldFdpZHRoKHBhcmFtcyk7XG4gICAgY29uc3QgaGVpZ2h0ID0gVWkuZ2V0SGVpZ2h0KHBhcmFtcyk7XG4gICAgY29uc3QgcG9zdHNIZWlnaHQgPSBwYXJhbXMucG9zdHNIZWlnaHQgPyBwYXJhbXMucG9zdHNIZWlnaHQgOiAwO1xuICAgIGNvbnN0IHNjcmVlbk1vZGUgPSBVaS5nZXRTY3JlZW5Nb2RlKHdpZHRoKTtcbiAgICBjb25zdCBleHRlbnNpb25Nb2RlID0gcGFyYW1zLmV4dGVuc2lvbk1vZGUgPyBwYXJhbXMuZXh0ZW5zaW9uTW9kZSA6IFVpLmV4dGVuc2lvbk1vZGVFeHROb25lTGFiZWw7XG4gICAgY29uc3QgZXh0ZW5zaW9uV2lkdGggPSBwYXJhbXMuZXh0ZW5zaW9uV2lkdGggPyBwYXJhbXMuZXh0ZW5zaW9uV2lkdGggOiBcIjAlXCI7XG4gICAgY29uc3QgZXh0ZW5zaW9uSGVpZ2h0ID0gcGFyYW1zLmV4dGVuc2lvbkhlaWdodCA/IHBhcmFtcy5leHRlbnNpb25IZWlnaHQgOiAwO1xuXG4gICAgLy8g5ZCE44OR44O844OE44Gu54q25oWLKOODleODqeOCsOWItuW+oSlcbiAgICBjb25zdCB0aHJlYWRTY3JvbGxZID0gcGFyYW1zICYmIHBhcmFtcy50aHJlYWRTY3JvbGxZID8gcGFyYW1zLnRocmVhZFNjcm9sbFkgOiAwO1xuICAgIGNvbnN0IGlzT3BlblBvc3RzID0gVWkuZ2V0SXNPcGVuUG9zdHMoe1xuICAgICAgaGVpZ2h0LFxuICAgICAgZXh0ZW5zaW9uTW9kZSxcbiAgICAgIGV4dGVuc2lvbkhlaWdodCxcbiAgICB9KTtcbiAgICBjb25zdCBpc09wZW5TZXR0aW5nID0gcGFyYW1zLmlzT3BlblNldHRpbmcgPyBwYXJhbXMuaXNPcGVuU2V0dGluZyA6IGZhbHNlO1xuICAgIGNvbnN0IGlzT3Blbk1lbnUgPSBTY2hlbWEuaXNTZXQocGFyYW1zLmlzT3Blbk1lbnUpID8gcGFyYW1zLmlzT3Blbk1lbnUgOiBVaS5nZXRJc09wZW5NZW51KHsgc2NyZWVuTW9kZSB9KTtcbiAgICBjb25zdCBpc09wZW5EZXRhaWwgPVxuICAgICAgc2NyZWVuTW9kZSA9PT0gVWkuc2NyZWVuTW9kZURldGFpbExhYmVsID8gdHJ1ZSA6IFNjaGVtYS5pc1NldChwYXJhbXMuaXNPcGVuRGV0YWlsKSA/IHBhcmFtcy5pc09wZW5EZXRhaWwgOiBmYWxzZTtcbiAgICBjb25zdCBpc09wZW5OZXdQb3N0ID0gcGFyYW1zLmlzT3Blbk5ld1Bvc3QgPyBwYXJhbXMuaXNPcGVuTmV3UG9zdCA6IGZhbHNlO1xuICAgIGNvbnN0IGlzT3Blbk5vdGlmID0gcGFyYW1zLmlzT3Blbk5vdGlmID8gcGFyYW1zLmlzT3Blbk5vdGlmIDogZmFsc2U7XG4gICAgY29uc3QgaXNPcGVuUG9zdHNTdXBwb3J0ZXIgPSBTY2hlbWEuaXNTZXQocGFyYW1zLmlzT3BlblBvc3RzU3VwcG9ydGVyKSA/IHBhcmFtcy5pc09wZW5Qb3N0c1N1cHBvcnRlciA6IGZhbHNlO1xuICAgIGNvbnN0IGlzT3BlbkJvYXJkID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc09wZW5Cb2FyZCkgPyBwYXJhbXMuaXNPcGVuQm9hcmQgOiBVaS5nZXRJc09wZW5Cb2FyZCh7IHNjcmVlbk1vZGUgfSk7XG4gICAgY29uc3QgaXNCdWJibGVQb3N0ID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc0J1YmJsZVBvc3QpID8gcGFyYW1zLmlzQnViYmxlUG9zdCA6IHRydWU7XG4gICAgY29uc3QgaXNEaXNwUG9zdHMgPSBTY2hlbWEuaXNTZXQocGFyYW1zLmlzRGlzcFBvc3RzKSA/IHBhcmFtcy5pc0Rpc3BQb3N0cyA6IGZhbHNlO1xuICAgIGNvbnN0IGlzT3BlbkxpbmtzID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc09wZW5MaW5rcykgPyBwYXJhbXMuaXNPcGVuTGlua3MgOiBmYWxzZTtcbiAgICBjb25zdCBpc1RyYW5zaXRpb24gPSBTY2hlbWEuaXNTZXQocGFyYW1zLmlzVHJhbnNpdGlvbikgPyBwYXJhbXMuaXNUcmFuc2l0aW9uIDogdHJ1ZTtcbiAgICBjb25zdCBtZW51Q29tcG9uZW50ID0gcGFyYW1zLm1lbnVDb21wb25lbnQgPyBwYXJhbXMubWVudUNvbXBvbmVudCA6IFVpLmdldERlZmF1bHRNZW51Q29tcG9uZW50KCk7XG4gICAgY29uc3Qgb3BlbkxvY2tNZW51ID0gcGFyYW1zLm9wZW5Mb2NrTWVudSA/IHBhcmFtcy5vcGVuTG9ja01lbnUgOiBVaS5vcGVuTG9ja01lbnVMYWJlbE5vO1xuICAgIGNvbnN0IG9wZW5Jbm5lck5vdGlmID0gcGFyYW1zLm9wZW5Jbm5lck5vdGlmID8gcGFyYW1zLm9wZW5Jbm5lck5vdGlmIDogXCJcIjtcblxuICAgIC8vIOOCr+ODquODg+OCr+aDheWgsVxuICAgIGNvbnN0IGNsaWNrZWQgPSBwYXJhbXMuY2xpY2tlZCA/IHBhcmFtcy5jbGlja2VkIDogXCJcIjtcblxuICAgIC8vIGRldGFpbOaDheWgsVxuICAgIGNvbnN0IGRldGFpbENoID0gcGFyYW1zLmRldGFpbENoID8gcGFyYW1zLmRldGFpbENoIDogXCIvXCI7XG5cbiAgICAvLyDlhaXlipvnirbmhYtcbiAgICBjb25zdCBpbnB1dFBvc3QgPSBwYXJhbXMuaW5wdXRQb3N0ID8gcGFyYW1zLmlucHV0UG9zdCA6IFwiXCI7XG4gICAgY29uc3QgaW5wdXRTdGFtcElkID0gcGFyYW1zLmlucHV0U3RhbXBJZCA/IHBhcmFtcy5pbnB1dFN0YW1wSWQgOiBmYWxzZTtcbiAgICBjb25zdCBpbnB1dEN1cnJlbnRUaW1lID0gcGFyYW1zLmlucHV0Q3VycmVudFRpbWUgPyBwYXJhbXMuaW5wdXRDdXJyZW50VGltZSA6IDAuMDtcbiAgICBjb25zdCBpbnB1dFNlYXJjaCA9IHBhcmFtcy5pbnB1dFNlYXJjaCA/IHBhcmFtcy5pbnB1dFNlYXJjaCA6IFwiXCI7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc0xvYWRpbmcpID8gcGFyYW1zLmlzTG9hZGluZyA6IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHtcbiAgICAgIGlGcmFtZUlkLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBwb3N0c0hlaWdodCxcbiAgICAgIHNjcmVlbk1vZGUsXG4gICAgICBleHRlbnNpb25Nb2RlLFxuICAgICAgZXh0ZW5zaW9uV2lkdGgsXG4gICAgICBleHRlbnNpb25IZWlnaHQsXG4gICAgICB0aHJlYWRTY3JvbGxZLFxuICAgICAgaXNPcGVuUG9zdHMsXG4gICAgICBpc09wZW5TZXR0aW5nLFxuICAgICAgaXNPcGVuTWVudSxcbiAgICAgIGlzT3BlbkRldGFpbCxcbiAgICAgIGlzT3Blbk5ld1Bvc3QsXG4gICAgICBpc09wZW5Ob3RpZixcbiAgICAgIGlzT3BlblBvc3RzU3VwcG9ydGVyLFxuICAgICAgaXNPcGVuQm9hcmQsXG4gICAgICBpc0J1YmJsZVBvc3QsXG4gICAgICBpc0Rpc3BQb3N0cyxcbiAgICAgIGlzT3BlbkxpbmtzLFxuICAgICAgaXNUcmFuc2l0aW9uLFxuICAgICAgbWVudUNvbXBvbmVudCxcbiAgICAgIG9wZW5Mb2NrTWVudSxcbiAgICAgIG9wZW5Jbm5lck5vdGlmLFxuICAgICAgY2xpY2tlZCxcbiAgICAgIGRldGFpbENoLFxuICAgICAgaW5wdXRQb3N0LFxuICAgICAgaW5wdXRTdGFtcElkLFxuICAgICAgaW5wdXRDdXJyZW50VGltZSxcbiAgICAgIGlucHV0U2VhcmNoLFxuICAgICAgaXNMb2FkaW5nLFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFua3Mge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51TG9ncyBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0gW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHBhcmFtcyA9IHBhcmFtcyA/IHBhcmFtcyA6IFtdO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZShwYXJhbXMpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RNdWx0aSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Mb2dzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4iLCJpbXBvcnQgeyBhcHBseU1pZGRsZXdhcmUsIGNyZWF0ZVN0b3JlIH0gZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgYXBpUmVkdWNlcnMgZnJvbSBcImFwaS9yZWR1Y2Vyc1wiO1xuaW1wb3J0IG1pZGRsZXdhcmUgZnJvbSBcImFwaS9taWRkbGV3YXJlL1wiO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBNb2R1bGUge1xuICAgIGhvdDogYW55O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwaVN0b3JlKGluaXRpYWxTdGF0ZSA9IHt9KSB7XG4gIGxldCBjb21wb3NlRW5oYW5jZXJzID0gbnVsbDtcbiAgbGV0IG1pZGRsZXdhcmVzID0gW21pZGRsZXdhcmUudXBkYXRlQWN0aW9uXTtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgICBhcGlSZWR1Y2VycyxcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgY29tcG9zZUVuaGFuY2VycyA/IGNvbXBvc2VFbmhhbmNlcnMoYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKSkgOiBhcHBseU1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpXG4gICk7XG5cbiAgaWYgKG1vZHVsZS5ob3QpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4uL3JlZHVjZXJzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRSZWR1Y2VyID0gcmVxdWlyZShcIi4uL3JlZHVjZXJzXCIpO1xuICAgICAgc3RvcmUucmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdG9yZTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCBhcHAgZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgdXNlciBmcm9tIFwiLi91c2VyXCI7XG5pbXBvcnQgdHVuZUNoIGZyb20gXCIuL3R1bmVDaFwiO1xuaW1wb3J0IHJhbmtzIGZyb20gXCIuL3JhbmtzXCI7XG5pbXBvcnQgdGhyZWFkIGZyb20gXCIuL3RocmVhZFwiO1xuaW1wb3J0IHRocmVhZHMgZnJvbSBcIi4vdGhyZWFkc1wiO1xuaW1wb3J0IHRocmVhZERldGFpbCBmcm9tIFwiLi90aHJlYWREZXRhaWxcIjtcbmltcG9ydCBhbmFseXplIGZyb20gXCIuL2FuYWx5emVcIjtcbmltcG9ydCBib290T3B0aW9uIGZyb20gXCIuL2Jvb3RPcHRpb25cIjtcbmltcG9ydCBzZXR0aW5nIGZyb20gXCIuL3NldHRpbmdcIjtcbmltcG9ydCBwb3N0cyBmcm9tIFwiLi9wb3N0c1wiO1xuaW1wb3J0IHBvc3RzVGltZWxpbmUgZnJvbSBcIi4vcG9zdHNUaW1lbGluZVwiO1xuaW1wb3J0IHBvc3RzVGltZWxpbmVTdG9jayBmcm9tIFwiLi9wb3N0c1RpbWVsaW5lU3RvY2tcIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVybyBmcm9tIFwiLi9wb3N0c1RpbWVsaW5lWmVyb1wiO1xuaW1wb3J0IHBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIgZnJvbSBcIi4vcG9zdHNUaW1lbGluZVplcm9BZnRlclwiO1xuaW1wb3J0IHBvc3RzTXVsdGkgZnJvbSBcIi4vcG9zdHNNdWx0aVwiO1xuaW1wb3J0IHBvc3RzU2luZ2xlIGZyb20gXCIuL3Bvc3RzU2luZ2xlXCI7XG5pbXBvcnQgcG9zdHNDaGlsZCBmcm9tIFwiLi9wb3N0c0NoaWxkXCI7XG5pbXBvcnQgYWN0aW9uZWQgZnJvbSBcIi4vYWN0aW9uZWRcIjtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJGaWxlcyA9IHtcbiAgYXBwLFxuICB1c2VyLFxuICB0dW5lQ2gsXG4gIHJhbmtzLFxuICB0aHJlYWQsXG4gIHRocmVhZHMsXG4gIHRocmVhZERldGFpbCxcbiAgYW5hbHl6ZSxcbiAgYm9vdE9wdGlvbixcbiAgc2V0dGluZyxcbiAgcG9zdHMsXG4gIHBvc3RzVGltZWxpbmUsXG4gIHBvc3RzVGltZWxpbmVTdG9jayxcbiAgcG9zdHNUaW1lbGluZVplcm8sXG4gIHBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIsXG4gIHBvc3RzTXVsdGksXG4gIHBvc3RzU2luZ2xlLFxuICBwb3N0c0NoaWxkLFxuICBhY3Rpb25lZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2VyRmlsZXMpO1xuIiwiaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgQXBwKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmFwcCA/IG5ldyBBcHAoYWN0aW9uLmFwcCkgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgVXNlciBmcm9tIFwiYXBpL3N0b3JlL1VzZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFVzZXIoKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24udXNlciA/IHN0YXRlLm1lcmdlKGFjdGlvbi51c2VyKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3QgPSBuZXcgUG9zdCgpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnR1bmVcIjpcbiAgICAgIHJldHVybiBuZXcgUG9zdChhY3Rpb24udGhyZWFkLmxhc3RQb3N0KTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnR1bmVcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmNoYW5nZVRocmVhZFwiOlxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06ZGlzY29ubmVjdFwiOlxuICAgICAgY29uc3QgeyB0aHJlYWQgfSA9IGFjdGlvbjtcbiAgICAgIGlmICh0aHJlYWQuY2ggPT09IHN0YXRlLmNoKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsaXZlQ250OiB0aHJlYWQubGl2ZUNudCB9O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICBjb25zdCBwb3N0ID0gYWN0aW9uLnBvc3RzWzBdO1xuICAgICAgaWYgKHBvc3QuY2ggPT09IHN0YXRlLmNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgdGl0bGU6IHBvc3QudGl0bGUsXG4gICAgICAgICAgc3RhbXBJZDogcG9zdC5zdGFtcElkLFxuICAgICAgICAgIGZhdmljb246IHBvc3QuZmF2aWNvbixcbiAgICAgICAgICBwb3N0OiBwb3N0LnBvc3QsXG4gICAgICAgIH07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0cyBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgbGV0IHBvc3RzID0gW107XG4gIGxldCBwb3N0TGVuZ3RoID0gMDtcbiAgY29uc3Qgc29ydFdhdGNoQ250ID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5jaCA9PT0gYWN0aW9uLmFwcC5yb290Q2ggfHwgYi5jaCA9PT0gYWN0aW9uLmFwcC5yb290Q2gpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoYS5saXZlQ250IDwgYi5saXZlQ250KSByZXR1cm4gMTtcbiAgICBpZiAoYS5saXZlQ250ID4gYi5saXZlQ250KSByZXR1cm4gLTE7XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICAgIGlmIChhY3Rpb24uYXBwLmlzTGlua0NoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgcG9zdHMgPSBQb3N0cy5nZXREaXNwUG9zdHMoYWN0aW9uKTtcbiAgICAgIHBvc3RMZW5ndGggPSBwb3N0cyAmJiBwb3N0cy5sZW5ndGggPyBwb3N0cy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAocG9zdExlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZS5tYXAoKHJhbmspID0+IHtcbiAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IHJhbmsuY2gpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmFuayxcbiAgICAgICAgICAgIGZhdmljb246IHBvc3RzW3Bvc3RMZW5ndGggLSAxXS5mYXZpY29uLFxuICAgICAgICAgICAgc3RhbXBJZDogcG9zdHNbcG9zdExlbmd0aCAtIDFdLnN0YW1wSWQsXG4gICAgICAgICAgICBwb3N0OiBwb3N0c1twb3N0TGVuZ3RoIC0gMV0ucG9zdCxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByYW5rO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnR1bmVcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmNoYW5nZVRocmVhZFwiOlxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06ZGlzY29ubmVjdFwiOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5tYXAoKHJhbmspID0+IHtcbiAgICAgICAgICBpZiAoYWN0aW9uLnRocmVhZC5jaCA9PT0gcmFuay5jaCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4ucmFuaywgbGl2ZUNudDogYWN0aW9uLnRocmVhZC5saXZlQ250IH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByYW5rO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnNvcnQoc29ydFdhdGNoQ250KTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIHJldHVybiBzdGF0ZS5tYXAoKHJhbmspID0+IHtcbiAgICAgICAgaWYgKGFjdGlvbi5wb3N0c1swXS5jaCA9PT0gcmFuay5jaCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5yYW5rLFxuICAgICAgICAgICAgdGl0bGU6IGFjdGlvbi5wb3N0c1swXS50aXRsZSxcbiAgICAgICAgICAgIHN0YW1wSWQ6IGFjdGlvbi5wb3N0c1swXS5zdGFtcElkLFxuICAgICAgICAgICAgZmF2aWNvbjogYWN0aW9uLnBvc3RzWzBdLmZhdmljb24sXG4gICAgICAgICAgICBwb3N0OiBhY3Rpb24ucG9zdHNbMF0ucG9zdCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYW5rO1xuICAgICAgfSk7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06cmFua1wiOlxuICAgICAgLy8gc3RhdGXjgahhY3Rpb24ucmFua+OBruS4oeaWueWtmOWcqOOBmeOCi+WgtOWQiFxuICAgICAgaWYgKHN0YXRlICYmIHN0YXRlLmxlbmd0aCA+IDAgJiYgYWN0aW9uLnJhbmsgJiYgYWN0aW9uLnJhbmsubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXdSYW5rcyA9IFtdO1xuICAgICAgICBjb25zdCByYW5rQ250ID0gYWN0aW9uLnJhbmsubGVuZ3RoO1xuICAgICAgICBsZXQgbGFzdFBvc3QgPSBhY3Rpb24ucmFua1swXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5rQ250OyBpKyspIHtcbiAgICAgICAgICBsZXQgbmV3UmFuayA9IGFjdGlvbi5yYW5rW2ldO1xuICAgICAgICAgIGxhc3RQb3N0ID0gbmV3UmFuay51cGRhdGVUaW1lID4gbGFzdFBvc3QudXBkYXRlVGltZSA/IG5ld1JhbmsgOiBsYXN0UG9zdDtcblxuICAgICAgICAgIGlmIChuZXdSYW5rLmNoID09PSBzdGF0ZVswXS5jaCkge1xuICAgICAgICAgICAgbmV3UmFuayA9IHtcbiAgICAgICAgICAgICAgLi4ubmV3UmFuayxcbiAgICAgICAgICAgICAgbGl2ZUNudDogc3RhdGVbMF0ubGl2ZUNudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1JhbmtzLnB1c2gobmV3UmFuayk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdSYW5rcy5zb3J0KHNvcnRXYXRjaENudCk7XG4gICAgICAgIG5ld1JhbmtzWzBdLmZhaWNvbiA9IGxhc3RQb3N0LmZhdmljb247XG4gICAgICAgIG5ld1JhbmtzWzBdLnBvc3QgPSBsYXN0UG9zdC5wb3N0O1xuICAgICAgICBuZXdSYW5rc1swXS5zdGFtcElkID0gbGFzdFBvc3Quc3RhbXBJZDtcbiAgICAgICAgcmV0dXJuIG5ld1JhbmtzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5yYW5rID8gYWN0aW9uLnJhbmsgOiBzdGF0ZTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFjdGlvbi5yYW5rID8gYWN0aW9uLnJhbmsgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBUaHJlYWQgZnJvbSBcImFwaS9zdG9yZS9UaHJlYWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFRocmVhZCh7fSwge30pLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVRVUEVEX0FQSV9TVE9SRVwiOlxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnR1bmVcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICAgIHJldHVybiBuZXcgVGhyZWFkKGFjdGlvbi50aHJlYWQpO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06dHVuZVwiOlxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06Y2hhbmdlVGhyZWFkXCI6XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpkaXNjb25uZWN0XCI6XG4gICAgICAvLyDjg6bjg7zjgrbjg7zjgYzku4rnj77lnKjjgIHplrLopqfjgZfjgabjgYTjgot0aHJlYWTjga7loLTlkIhcbiAgICAgIGlmIChzdGF0ZS5jaCA9PT0gYWN0aW9uLnRocmVhZC5jaCkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLnRocmVhZCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWQpIDogc3RhdGU7XG4gICAgICB9XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICAvLyDjg6bjg7zjgrbjg7zjgYzku4rnj77lnKjjgIHplrLopqfjgZfjgabjgYTjgot0aHJlYWTjga7loLTlkIhcbiAgICAgIGlmIChzdGF0ZS5jaCA9PT0gYWN0aW9uLnRocmVhZC5jaCkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLnRocmVhZCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWQpIDogc3RhdGU7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBUaHJlYWRzIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkcygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi50aHJlYWRzID8gc3RhdGUubWVyZ2UoYWN0aW9uLnRocmVhZHMpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkKHt9LCB7fSksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnRocmVhZERldGFpbCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWREZXRhaWwpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IEFuYWx5emUgZnJvbSBcImFwaS9zdG9yZS9BbmFseXplXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBBbmFseXplKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmFuYWx5emUgPyBzdGF0ZS5tZXJnZShhY3Rpb24uYW5hbHl6ZSkgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgQm9vdE9wdGlvbiBmcm9tIFwiYXBpL3N0b3JlL0Jvb3RPcHRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IEJvb3RPcHRpb24oKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24uYm9vdE9wdGlvbiA/IHN0YXRlLm1lcmdlKGFjdGlvbi5ib290T3B0aW9uKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vdE9wdGlvbiBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKGJvb3RPcHRpb246IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoeyAuLi5ib290T3B0aW9uIH0pO1xuICB9XG5cbiAgc3RhdGljIHJlYnVpbGRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICBsZXQgcmVidWlsZEF0dHJpYnV0ZXNPYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goaSA9PiB7XG4gICAgICByZWJ1aWxkQXR0cmlidXRlc09ialthdHRyaWJ1dGVzW2ldLm5hbWVdID0gYXR0cmlidXRlc1tpXS52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVidWlsZEF0dHJpYnV0ZXNPYmo7XG4gIH1cbn1cbiIsImltcG9ydCBTZXR0aW5nIGZyb20gXCJhcGkvc3RvcmUvU2V0dGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgU2V0dGluZygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5zZXR0aW5nID8gc3RhdGUubWVyZ2UoYWN0aW9uLnNldHRpbmcpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dGluZyBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGNsaWVudCA9IHBhcmFtcyAmJiBwYXJhbXMuY2xpZW50ID8gcGFyYW1zLmNsaWVudCA6IHt9O1xuICAgIGNvbnN0IGNvbW1vbiA9IHBhcmFtcyAmJiBwYXJhbXMuY29tbW9uID8gcGFyYW1zLmNvbW1vbiA6IHt9O1xuICAgIGNvbnN0IHNlcnZlciA9IHBhcmFtcyAmJiBwYXJhbXMuc2VydmVyID8gcGFyYW1zLnNlcnZlciA6IHt9O1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICBjbGllbnQsXG4gICAgICBjb21tb24sXG4gICAgICBzZXJ2ZXJcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5pbXBvcnQgUG9zdHMgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5wb3N0cyA/IG5ldyBQb3N0cyhhY3Rpb24ucG9zdHMpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZSBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBQb3N0W10gPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICAgIHJldHVybiBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgIGNhc2UgXCJVTk1PVU5UX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICByZXR1cm4gc3RhdGUubWFwKChwdCkgPT4ge1xuICAgICAgICBwdC5kaXNwRmxnID0gcHQuY3VycmVudFRpbWUgPD0gYWN0aW9uLm1lZGlhQ3VycmVudFRpbWU7XG4gICAgICAgIHJldHVybiBwdDtcbiAgICAgIH0pO1xuICAgIGNhc2UgXCJDTEVBUl9QT1NUU19USU1FTElORVwiOlxuICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1wiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIk5FWFRfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNUaW1lbGluZSAmJiBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUkVWX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzVGltZWxpbmUgJiYgYWN0aW9uLnBvc3RzVGltZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgaWYgKFxuICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSAmJlxuICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lWzBdLnVpZCA9PT0gYWN0aW9uLnVzZXIudWlkICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lWzBdLmNoID09PSBhY3Rpb24udGhyZWFkLmNoXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNUaW1lbGluZSwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuaW1wb3J0IFBvc3RzVGltZWxpbmVTdG9jayBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9ja1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2tdIDogc3RhdGU7XG4gICAgY2FzZSBcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jayA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9ja10gOiBzdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPyBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2spIDogc3RhdGU7XG4gIH1cbn07XG4iLCJpbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcbmltcG9ydCBQb3N0VGltZWxpbmVaZXJvIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVplcm9cIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBQb3N0W10gPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm8gPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb10gOiBzdGF0ZTtcbiAgICBjYXNlIFwiQ0xFQVJfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm8gPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb10gOiBzdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybyA/IG5ldyBQb3N0VGltZWxpbmVaZXJvKGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybykgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFRpbWVsaW5lWmVybyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcbmltcG9ydCBQb3N0c1RpbWVsaW5lWmVyb0FmdGVyIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVplcm9BZnRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlcl0gOiBzdGF0ZTtcbiAgICBjYXNlIFwiQ0xFQVJfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXJdIDogc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IG5ldyBQb3N0c1RpbWVsaW5lWmVyb0FmdGVyKGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0VGltZWxpbmVPdGhlclRoYW5aZXJvIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBQb3N0W10gPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuaW1wb3J0IFBvc3RzIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNcIjtcbmltcG9ydCBjb25mIGZyb20gXCJjb21tb24vY29uZlwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJPTl9DTElDS19NVUxUSVNUUkVBTVwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c011bHRpO1xuICAgIGNhc2UgXCJDTElFTlRfVE9fU0VSVkVSW0VNSVRdOmNoYW5nZVRocmVhZFwiOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0cygpO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNNdWx0aSAmJiBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24uYXBwLmlzUm9vdENoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNNdWx0aV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgLy8gcG9zdE11bHRp44Gv5a2Q5L6b44Gu5oqV56i/44KS5YWo44Gm6KGo56S644GZ44KL5LuV5qeYXG4gICAgICBpZiAoYWN0aW9uLnBvc3RzTXVsdGkgJiYgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoYWN0aW9uLmFwcC5yb290Q2ggPT09IGFjdGlvbi5wb3N0c011bHRpWzBdLmNoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzTXVsdGldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzTXVsdGkgJiYgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbW9yZVBvc3RNdWxpdCA9IFtdO1xuXG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggKyBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiBjb25mLmZpbmRPbmVMaW1pdENudCkge1xuICAgICAgICAgIG1vcmVQb3N0TXVsaXQgPSBbLi4uYWN0aW9uLnBvc3RzTXVsdGksIC4uLnN0YXRlXTtcbiAgICAgICAgICByZXR1cm4gbW9yZVBvc3RNdWxpdC5zbGljZSgwLCBjb25mLmZpbmRPbmVMaW1pdENudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNNdWx0aSwgLi4uc3RhdGVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5pbXBvcnQgUG9zdHNTaW5nbGUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1NpbmdsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJPTl9DTElDS19NVUxUSVNUUkVBTVwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1NpbmdsZTtcbiAgICBjYXNlIFwiQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICAgIHJldHVybiBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCI6XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzU2luZ2xlICYmIGFjdGlvbi5wb3N0c1NpbmdsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c1NpbmdsZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzU2luZ2xlICYmIGFjdGlvbi5wb3N0c1NpbmdsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzU2luZ2xlLCAuLi5zdGF0ZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5pbXBvcnQgUG9zdHMgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZFwiOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0cygpO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNDaGlsZCAmJiBhY3Rpb24ucG9zdHNDaGlsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24udGhyZWFkLmNoID09PSBhY3Rpb24ucG9zdHNDaGlsZFswXS5jaCkge1xuICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c0NoaWxkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c0NoaWxkICYmIGFjdGlvbi5wb3N0c0NoaWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNDaGlsZCwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IFthY3Rpb24udHlwZSwgLi4uc3RhdGVdO1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFBvc3RzIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNcIjtcbmltcG9ydCBUaHJlYWQgZnJvbSBcImFwaS9zdG9yZS9UaHJlYWRcIjtcbmltcG9ydCBUaHJlYWRzIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkc1wiO1xuaW1wb3J0IHN0b3JhZ2UgZnJvbSBcImFwaS9tYXBUb1N0YXRlVG9Qcm9wcy9zdG9yYWdlXCI7XG5pbXBvcnQgYWN0aW9uTG9nIGZyb20gXCJjbGllbnQvcmVkdWNlcnMvYWN0aW9uTG9nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlQWN0aW9uOiAoc3RvcmUpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIGFjdGlvbi5hcHAgPSBhY3Rpb24uYXBwID8geyAuLi5zdGF0ZS5hcHAsIC4uLmFjdGlvbi5hcHAgfSA6IHN0YXRlLmFwcDtcbiAgICAgIGFjdGlvbi5hcHAuYWN0aW9uZWQgPSBhY3Rpb24udHlwZTtcbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9uc1thY3Rpb24udHlwZV0pIHtcbiAgICAgIGFjdGlvbiA9IGZ1bmN0aW9uc1thY3Rpb24udHlwZV0oc3RhdGUsIGFjdGlvbik7XG4gICAgfVxuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIG5leHQoYWN0aW9uKTtcbiAgICB9XG4gIH0sXG59O1xuXG5jb25zdCBmdW5jdGlvbnMgPSB7XG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTp0dW5lXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcFtgb2Zmc2V0JHthY3Rpb24uYXBwLmRpc3BUaHJlYWRUeXBlfUZpbmRJZGBdID0gYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC50dW5lZCA9IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC5kZXRhaWxDaCA9IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC5pc1Jvb3RDaCA9IGFjdGlvbi5hcHAucm9vdENoID09PSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi5hcHAuaXNNZWRpYUNoID0gQXBwLmdldElzTWVkaWFDaChhY3Rpb24udGhyZWFkLmNoKTtcbiAgICBhY3Rpb24uYXBwLmlzVG9nZ2xlTXVsdGlzdHJlYW0gPSBmYWxzZTtcbiAgICBhY3Rpb24udGhyZWFkLmhhc1NsYXNoID0gU2NoZW1hLmdldEJvb2woYWN0aW9uLnRocmVhZC5oYXNTbGFzaCk7XG4gICAgYWN0aW9uLnRocmVhZHMgPSBUaHJlYWRzLmdldE1lcmdlZFRocmVhZHMoc3RhdGUudGhyZWFkcywgYWN0aW9uLnRocmVhZCk7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGlmIChhY3Rpb24uYXBwLmlzUm9vdENoKSB7XG4gICAgICBhY3Rpb24uYXBwLnJvb3RUaXRsZSA9IGFjdGlvbi50aHJlYWQudGl0bGU7XG4gICAgfVxuICAgIGlmIChhY3Rpb24uYXBwLmlzTWVkaWFDaCkge1xuICAgICAgY29uc3Qgc3JjID0gQXBwLmdldE1lZGlhU3JjKGFjdGlvbi50aHJlYWQucHJvdG9jb2wsIGFjdGlvbi50aHJlYWQuY2gpO1xuICAgICAgYWN0aW9uLmFwcC5jaFR5cGUgPSBBcHAuZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb24uYXBwLmNoVHlwZSA9IEFwcC5tZWRpYVRhZ1R5cGVObztcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24gPSB7IC4uLlBvc3RzLmdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIH07XG4gICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5nZXRPZmZzZXRGaW5kSWQoeyBwb3N0czogYWN0aW9uLnBvc3RzIH0pO1xuICAgIGFjdGlvbi5hcHBbYG9mZnNldCR7YWN0aW9uLmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXSA9IGFjdGlvbi5hcHAub2Zmc2V0RmluZElkO1xuICAgIGlmIChhY3Rpb24uYXBwLmlzTWVkaWFDaCkge1xuICAgICAgYWN0aW9uID0gc3RvcmFnZS5zZXRTdG9yYWdlUG9zdHNUaW1lbGluZShhY3Rpb24pO1xuICAgIH1cbiAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWRcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldFRpbWVsaW5lRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRNdWx0aUZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0U2luZ2xlRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRDaGlsZEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0TG9nc0ZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb24udGhyZWFkID8geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfSA6IHN0YXRlLnRocmVhZDtcbiAgICBhY3Rpb24ucG9zdHMgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0cygpO1xuICAgIGFjdGlvbi5wb3N0c0NoaWxkID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHMoKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIlNFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC50dW5lZCA9IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLnRocmVhZHMgPSBUaHJlYWRzLmdldE1lcmdlZFRocmVhZHMoc3RhdGUudGhyZWFkcywgYWN0aW9uLnRocmVhZCk7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTp1cGRhdGVUaHJlYWRcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW1JFUVVFU1RdOnBvc3RcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlucHV0U3RhbXBJZCA9IDA7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIC8vIOODpuODvOOCtuODvOOBjOS7iuePvuWcqOOAgemWsuimp+OBl+OBpuOBhOOCi3RocmVhZOOBruWgtOWQiFxuICAgIGlmIChzdGF0ZS50aHJlYWQuY2ggPT09IGFjdGlvbi50aHJlYWQuY2gpIHtcbiAgICAgIGlmIChhY3Rpb24udGhyZWFkLmVtb3Rpb25zKSB7XG4gICAgICAgIGNvbnN0IGVtb3Rpb25LZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uLnRocmVhZC5lbW90aW9ucyk7XG4gICAgICAgIGlmIChlbW90aW9uS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgYWN0aW9uRW1vdGlvbnMgPSB7IC4uLmFjdGlvbi50aHJlYWQuZW1vdGlvbnMgfTtcbiAgICAgICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zID0geyAuLi5zdGF0ZS50aHJlYWQuZW1vdGlvbnMgfTtcblxuICAgICAgICAgIE9iamVjdC5rZXlzKGFjdGlvbkVtb3Rpb25zKS5mb3JFYWNoKChlbW90aW9uTW9kZWxLZXkpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGFjdGlvbkVtb3Rpb25zW2Vtb3Rpb25Nb2RlbEtleV0pLmZvckVhY2goKGVtb3Rpb25LZXkpID0+IHtcbiAgICAgICAgICAgICAgYWN0aW9uLnRocmVhZC5lbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldID1cbiAgICAgICAgICAgICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zW2Vtb3Rpb25Nb2RlbEtleV1bZW1vdGlvbktleV0gKyBhY3Rpb25FbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiTUlERExFIFdBUkUgXCIgKyBhY3Rpb24udGhyZWFkLmNoKTtcbiAgICBhY3Rpb24udGhyZWFkLmNoID0gc3RhdGUudGhyZWFkLmNoO1xuICAgIGFjdGlvbiA9IFBvc3RzLmdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHM6IGFjdGlvbi5wb3N0cyB9KTtcbiAgICBhY3Rpb24uYXBwW2BvZmZzZXQke2FjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGV9RmluZElkYF0gPSBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24gPSBQb3N0cy5nZXRBbnlBY3Rpb25Qb3N0cyhhY3Rpb24sIHN0YXRlKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIkFQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkRGV0YWlsXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgZGVsZXRlIGFjdGlvbi50aHJlYWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmNoYW5nZVRocmVhZERldGFpbFwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuZGV0YWlsQ2ggPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi50aHJlYWRzID0gVGhyZWFkcy5nZXRNZXJnZWRUaHJlYWRzKHN0YXRlLnRocmVhZHMsIGFjdGlvbi50aHJlYWQpO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLnRpdGxlID0gYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcy50aXRsZTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmVtb3Rpb25zID0geyAuLi5zdGF0ZS50aHJlYWRzW2FjdGlvbi5hcHAuZGV0YWlsQ2hdLmVtb3Rpb25zIH07XG5cbiAgICAvLyBUT0RPIOWPpOOBhOS7leanmOOBoOOBqGhhc1NsYXNo44GM5qC857SN44GV44KM44Gm44GE44Gq44GEY29sbGVjdGlvbuOBjOWtmOWcqOOBmeOCi1xuICAgIC8vIGhhc1NsYXNo44GvbG9jYXRpb27jgYzlj4LnhafjgafjgY3jgarjgYRQT1JUQUzjgaDjgajmraPjgZfjgYTlgKTjgpLlj5blvpflh7rmnaXjgarjgYTjgZ/jgoHjgIFcbiAgICAvLyDmi6HlvLXmqZ/og73jgafjga9HRVRfQ0xJRU5UX01FVEFT44KS5a6f6KGM44GX44Gm5q2j44GX44GE5YCk44KS44K144O844OQ44O844Gr5rih44GX44Gm5pu05paw44GX44Gm44KE44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID09PSBudWxsID8gdHJ1ZSA6IFNjaGVtYS5nZXRCb29sKGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2gpO1xuICAgIGRlbGV0ZSBhY3Rpb24udGhyZWFkO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb247XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgQ0xPU0VfTElOS1M6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcCA9IGFjdGlvbi5hcHAgPyB7IC4uLnN0YXRlLmFwcCwgLi4uYWN0aW9uLmFwcCB9IDogc3RhdGUuYXBwO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb24udGhyZWFkID8geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfSA6IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBPTl9DTElDS19UT19NVUxUSV9USFJFQUQ6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5pc0xpbmtDaCA9IGZhbHNlO1xuICAgIGFjdGlvbi5hcHAuaXNSb290Q2ggPSBhY3Rpb24udGhyZWFkLmNoID09PSBzdGF0ZS5hcHAucm9vdENoO1xuXG4gICAgaWYgKHN0YXRlLnRocmVhZHNbYWN0aW9uLnRocmVhZC5jaF0pIHtcbiAgICAgIGFjdGlvbi50aHJlYWQgPSBzdGF0ZS50aHJlYWRzW2FjdGlvbi50aHJlYWQuY2hdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb24udGhyZWFkID0geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBPTl9DTElDS19UT19USU1FTElORV9USFJFQUQ6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgY2ggPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi50aHJlYWQuY2ggPSBjaDtcbiAgICBjb25zdCBzcmMgPSBBcHAuZ2V0TWVkaWFTcmMoYWN0aW9uLnRocmVhZC5wcm90b2NvbCwgYWN0aW9uLnRocmVhZC5jaCk7XG4gICAgYWN0aW9uLnRocmVhZC5maW5kVHlwZSA9IFRocmVhZC5nZXRGaW5kVHlwZUZyb21TcmMoc3JjKTtcbiAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IFtdO1xuICAgIGFjdGlvbi5hcHAuaXNNZWRpYUNoID0gdHJ1ZTtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBPTl9DTElDS19UT19TSU5HTEVfVEhSRUFEOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi5hcHAgPSBzdGF0ZS5hcHA7XG4gICAgYWN0aW9uLmFwcC5pc0xpbmtDaCA9IGZhbHNlO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIE9OX0NMSUNLX1RPX0NISUxEX1RIUkVBRDogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkID0geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IFtdO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0RmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRDaGlsZEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIE9OX0NMSUNLX01FTlU6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5kZXNjID0gYWN0aW9uLnVpLm1lbnVDb21wb25lbnQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgUkVTSVpFX0VORF9XSU5ET1c6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBPTl9DTElDS19UT0dHTEVfRElTUF9ERVRBSUw6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgLy8gVE9ETyDlj6TjgYTku5Xmp5jjgaDjgahoYXNTbGFzaOOBjOagvOe0jeOBleOCjOOBpuOBhOOBquOBhGNvbGxlY3Rpb27jgYzlrZjlnKjjgZnjgotcbiAgICAvLyBoYXNTbGFzaOOBr2xvY2F0aW9u44GM5Y+C54Wn44Gn44GN44Gq44GEUE9SVEFM44Gg44Go5q2j44GX44GE5YCk44KS5Y+W5b6X5Ye65p2l44Gq44GE44Gf44KB44CBXG4gICAgLy8g5ouh5by15qmf6IO944Gn44GvR0VUX0NMSUVOVF9NRVRBU+OCkuWun+ihjOOBl+OBpuato+OBl+OBhOWApOOCkuOCteODvOODkOODvOOBq+a4oeOBl+OBpuabtOaWsOOBl+OBpuOChOOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2ggPVxuICAgICAgYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9PT0gbnVsbCA/IHRydWUgOiBTY2hlbWEuZ2V0Qm9vbChhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBUT0dHTEVfQlVCQkxFX1BPU1Q6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBTVEFSVF9MSU5LX01FRElBOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuaXNMaW5rQ2ggPSB0cnVlO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIEdFVF9DTElFTlRfTUVUQVM6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgbGV0IHVwZGF0ZUZsZyA9IGZhbHNlO1xuICAgIGxldCB7IGNsaWVudE1ldGFzIH0gPSBhY3Rpb247XG4gICAgbGV0IHsgc2VydmVyTWV0YXMgfSA9IHN0YXRlLnRocmVhZDtcbiAgICBhY3Rpb24udGhyZWFkID0ge307XG5cbiAgICAvLyBNZXRhc1xuICAgIE9iamVjdC5rZXlzKGNsaWVudE1ldGFzKS5mb3JFYWNoKChrZXksIGkpID0+IHtcbiAgICAgIGlmIChjbGllbnRNZXRhc1trZXldICYmIGNsaWVudE1ldGFzW2tleV0gIT09IFwiXCIgJiYgc2VydmVyTWV0YXNba2V5XSAhPT0gY2xpZW50TWV0YXNba2V5XSkge1xuICAgICAgICBpZiAoIWFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMpIHtcbiAgICAgICAgICBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRmxnID0gdHJ1ZTtcbiAgICAgICAgYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhc1trZXldID0gY2xpZW50TWV0YXNba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh1cGRhdGVGbGcpIHtcbiAgICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLnN0YXRlLnRocmVhZERldGFpbCB9O1xuICAgICAgYWN0aW9uLnRocmVhZERldGFpbC5zZXJ2ZXJNZXRhcyA9IHtcbiAgICAgICAgLi4uYWN0aW9uLnRocmVhZERldGFpbC5zZXJ2ZXJNZXRhcyxcbiAgICAgICAgLi4uYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcyxcbiAgICAgIH07XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbiAgfSxcbn07XG4iLCJpbXBvcnQgZGVmaW5lIGZyb20gXCJjb21tb24vZGVmaW5lXCI7XG5pbXBvcnQgQXBwIGZyb20gXCJhcGkvc3RvcmUvQXBwXCI7XG5pbXBvcnQgVWkgZnJvbSBcImNsaWVudC9zdG9yZS9VaVwiO1xuaW1wb3J0IFRhbGtuU2Vzc2lvbiBmcm9tIFwiY2xpZW50L29wZXJhdGlvbnMvVGFsa25TZXNzaW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOiBzZXRTdG9yYWdlSHRtbFBvc3RzLFxuICBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOiBzZXRTdG9yYWdlSHRtbFBvc3RzLFxuICBcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1wiOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgLy9zZXRTdG9yYWdlUG9zdHMoIHN0YXRlLCBwcm9wcyApO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICBcIlNFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkXCI6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGFwcCB9ID0gc3RhdGU7XG4gICAgY29uc3QgeyByb290Q2ggfSA9IGFwcDtcbiAgICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgICBjb25zdCBwb3N0S2V5ID0gYXBwLmRpc3BUaHJlYWRUeXBlID09PSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aSA/IHN0b3JhZ2VLZXkucG9zdFNpbmdsZSA6IHN0b3JhZ2VLZXkucG9zdE11bHRpO1xuICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHJvb3RDaCwgZGVmaW5lLnN0b3JhZ2VLZXlbcG9zdEtleV0sIFtdKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSxcbiAgLy8gIFwiT05fX0NMSUNLX01VTFRJU1RSRUFNXCI6IHNldFN0b3JhZ2VQb3N0cyxcbiAgT05fQ0xJQ0tfTUVOVTogKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgcm9vdENoIH0gPSBzdGF0ZS5hcHA7XG4gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleS5hcHAsIHN0YXRlLmFwcCk7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0sXG4gIFJFU0laRV9FTkRfV0lORE9XOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0sXG4gIHNldFN0b3JhZ2VQb3N0cyxcbiAgc2V0U3RvcmFnZUh0bWxQb3N0cyxcbiAgc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUsXG4gIGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lLFxuICBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8sXG59O1xuXG5mdW5jdGlvbiBzZXRTdG9yYWdlUG9zdHMoc3RhdGUsIHByb3BzKSB7XG4gIGNvbnN0IHsgYXBwIH0gPSBzdGF0ZTtcbiAgaWYgKGFwcC5pc01lZGlhQ2gpIHtcbiAgICBzdGF0ZSA9IHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKHN0YXRlKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2V0U3RvcmFnZUh0bWxQb3N0cyhzdGF0ZSwgcHJvcHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VIdG1sUG9zdHMoc3RhdGUsIHByb3BzKSB7XG4gIGNvbnN0IHsgYXBwIH0gPSBzdGF0ZTtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGlmIChhcHAuaXNSb290Q2gpIHtcbiAgICBjb25zdCB7IHBvc3RzTXVsdGksIHBvc3RzU2luZ2xlIH0gPSBzdGF0ZTtcbiAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZShhcHAucm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzTXVsdGksIHBvc3RzTXVsdGkpO1xuICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKGFwcC5yb290Q2gsIHN0b3JhZ2VLZXkucG9zdHNTaW5nbGUsIHBvc3RzU2luZ2xlKTtcbiAgfVxuXG4gIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xufVxuXG5mdW5jdGlvbiBzZXRTdG9yYWdlUG9zdHNUaW1lbGluZShhY3Rpb24pIHtcbiAgY29uc3QgeyBhcHAsIHRocmVhZCwgcG9zdHNUaW1lbGluZTogcG9zdHNUaW1lbGluZUFsbCB9ID0gYWN0aW9uO1xuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgaWYgKGFwcC5pc01lZGlhQ2gpIHtcbiAgICBjb25zdCBwb3N0c1RpbWVsaW5lQWxsTGVuZ3RoID0gcG9zdHNUaW1lbGluZUFsbCAmJiBwb3N0c1RpbWVsaW5lQWxsLmxlbmd0aCA/IHBvc3RzVGltZWxpbmVBbGwubGVuZ3RoIDogMDtcbiAgICBsZXQgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQgPSBbXTtcbiAgICBsZXQgcG9zdHNUaW1lbGluZSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3N0c1RpbWVsaW5lQWxsTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwb3N0c1RpbWVsaW5lQWxsW2ldLmN1cnJlbnRUaW1lID09PSAwKSB7XG4gICAgICAgIHBvc3RzVGltZWxpbmVaZXJvU2Vjb25kLnB1c2gocG9zdHNUaW1lbGluZUFsbFtpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3N0c1RpbWVsaW5lLnB1c2gocG9zdHNUaW1lbGluZUFsbFtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBwb3N0c1RpbWVsaW5lWmVyb1NlY29uZDtcbiAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZSh0aHJlYWQuY2gsIHN0b3JhZ2VLZXkucG9zdHNUaW1lbGluZVplcm8sIHBvc3RzVGltZWxpbmVaZXJvU2Vjb25kKTtcbiAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZSh0aHJlYWQuY2gsIHN0b3JhZ2VLZXkucG9zdHNUaW1lbGluZSwgcG9zdHNUaW1lbGluZSk7XG4gIH1cbiAgcmV0dXJuIGFjdGlvbjtcbn1cbi8qXG5mdW5jdGlvbiBhZGRTdG9yYWdlUG9zdHNUaW1lbGluZShhY3Rpb24pIHtcbiAgY29uc3QgeyBhcHAsIHBvc3RzVGltZWxpbmUgfSA9IGFjdGlvbjtcblxuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgaWYgKGFwcC5pc01lZGlhQ2gpIHtcbiAgICBjb25zdCBhZGRQb3N0c1RpbWVsaW5lID0gcG9zdHNUaW1lbGluZVswXTtcbiAgICBsZXQgcG9zdHNUaW1lbGluZVplcm8gPSBbXTtcbiAgICBsZXQgcG9zdHNUaW1lbGluZSA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVyb0xlbmd0aCA9IDA7XG4gICAgbGV0IHBvc3RzVGltZWxpbmVMZW5ndGggPSAwO1xuXG4gICAgaWYgKGFkZFBvc3RzVGltZWxpbmUuY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgIHBvc3RzVGltZWxpbmVaZXJvID0gZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmVaZXJvKGFwcC5yb290Q2gpO1xuICAgICAgcG9zdHNUaW1lbGluZVplcm9MZW5ndGggPSBwb3N0c1RpbWVsaW5lWmVyby5sZW5ndGg7XG5cbiAgICAgIC8vICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBvc3RzVGltZWxpbmVaZXJvTGVuZ3RoOyBpKyspe1xuICAgICAgLy8gICAgICB9XG4gICAgICAvLyAgICAgIHAuc3BsaWNlKDQsMCxwMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc3RzVGltZWxpbmUgPSBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZShhcHAucm9vdENoKTtcbiAgICAgIHBvc3RzVGltZWxpbmVMZW5ndGggPSBwb3N0c1RpbWVsaW5lLmxlbmd0aDtcbiAgICAgIGlmIChwb3N0c1RpbWVsaW5lTGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzVGltZWxpbmVMZW5ndGg7IGkrKykge31cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiovXG5mdW5jdGlvbiBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8ocm9vdENoKSB7XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBjb25zdCByZXNwb25zZSA9IFRhbGtuU2Vzc2lvbi5nZXRTdG9yYWdlKHJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lWmVybyk7XG4gIHJldHVybiByZXNwb25zZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFycmF5XCIgPyByZXNwb25zZSA6IFtdO1xufVxuXG5mdW5jdGlvbiBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZShyb290Q2gpIHtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGNvbnN0IHJlc3BvbnNlID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzVGltZWxpbmUpO1xuICByZXR1cm4gcmVzcG9uc2UuY29uc3RydWN0b3IubmFtZSA9PT0gXCJBcnJheVwiID8gcmVzcG9uc2UgOiBbXTtcbn1cbiIsImltcG9ydCBkZWZpbmUgZnJvbSBcImNvbW1vbi9kZWZpbmVcIjtcblxubGV0IHN0b3JhZ2UgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFsa25TZXNzaW9uIHtcbiAgc3RhdGljIGdldEJhc2VLZXkoY2gpIHtcbiAgICByZXR1cm4gYCR7ZGVmaW5lLnN0b3JhZ2VLZXkuYmFzZUtleX0ke2NofWA7XG4gIH1cblxuICBzdGF0aWMgc2V0U3RvcmFnZShyb290Q2gsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBjb25zdCBiYXNlS2V5ID0gVGFsa25TZXNzaW9uLmdldEJhc2VLZXkocm9vdENoKTtcbiAgICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGxldCBpdGVtcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oYmFzZUtleSkpO1xuICAgICAgICBpdGVtcyA9IEpTT04uc3RyaW5naWZ5KHsgLi4uaXRlbXMsIFtrZXldOiB2YWx1ZSB9KTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYmFzZUtleSwgaXRlbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGl0ZW1zID0gc3RvcmFnZVtiYXNlS2V5XSA/IHN0b3JhZ2VbYmFzZUtleV0gOiB7fTtcbiAgICAgICAgaXRlbXMgPSB7IC4uLml0ZW1zLCBba2V5XTogdmFsdWUgfTtcbiAgICAgICAgc3RvcmFnZVtiYXNlS2V5XSA9IGl0ZW1zO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RvcmFnZShyb290Q2gsIGtleSkge1xuICAgIGNvbnN0IGJhc2VLZXkgPSBUYWxrblNlc3Npb24uZ2V0QmFzZUtleShyb290Q2gpO1xuICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb25zdCBpdGVtID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShiYXNlS2V5KSk7XG4gICAgICByZXR1cm4gaXRlbSAmJiBpdGVtW2tleV0gPyBpdGVtW2tleV0gOiB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGl0ZW1zID0gc3RvcmFnZVtiYXNlS2V5XSA/IHN0b3JhZ2VbYmFzZUtleV0gOiB7fTtcbiAgICAgIHJldHVybiBpdGVtc1trZXldID8gaXRlbXNba2V5XSA6IHt9O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRDYWNoZXMocm9vdENoKSB7XG4gICAgY29uc3QgbWVudUxvZ3MgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5Lm1lbnVMb2dzKTtcbiAgICBjb25zdCBhcHAgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5LmFwcCk7XG4gICAgY29uc3QgdGhyZWFkID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleS50aHJlYWQpO1xuICAgIGNvbnN0IHNldHRpbmcgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5LnNldHRpbmcpO1xuICAgIHJldHVybiB7IG1lbnVMb2dzLCBhcHAsIHRocmVhZCwgc2V0dGluZyB9O1xuICB9XG59XG4iLCJpbXBvcnQgU2VxdWVuY2UgZnJvbSBcImFwaS9TZXF1ZW5jZVwiO1xuXG5leHBvcnQgZGVmYXVsdCByZXNwb25zZSA9PiB7XG4gIGNvbnN0IHR5cGUgPSBgJHtTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0VNSVR9JHtyZXNwb25zZS50eXBlfWA7XG4gIHJldHVybiB7IC4uLnJlc3BvbnNlLCB0eXBlIH07XG59O1xuIiwiaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcbmltcG9ydCBFbW90aW9ucyBmcm9tIFwiY29tbW9uL2Vtb3Rpb25zL2luZGV4XCI7XG5cbmNvbnN0IGVtb3Rpb25zID0gbmV3IEVtb3Rpb25zKCk7XG5sZXQgYWN0aW9ucyA9IHt9O1xuXG5PYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXApLmZvckVhY2goZW5kcG9pbnQgPT4ge1xuICBjb25zdCB0eXBlID0gYCR7U2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNUfSR7ZW5kcG9pbnR9YDtcbiAgYWN0aW9uc1t0eXBlXSA9IChyZWR1eFN0YXRlLCByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlKSA9PiB7XG4gICAgaWYgKGJlZm9yZUZ1bmN0aW9uc1tyZXF1ZXN0U3RhdGUudHlwZV0pIHtcbiAgICAgIHJldHVybiBiZWZvcmVGdW5jdGlvbnNbcmVxdWVzdFN0YXRlLnR5cGVdKHJlZHV4U3RhdGUsIHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4geyByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlIH07XG4gIH07XG59KTtcblxuY29uc3QgYmVmb3JlRnVuY3Rpb25zID0ge1xuICBwb3N0OiAocmVkdXhTdGF0ZSwgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSkgPT4ge1xuICAgIGNvbnN0IHsgYXBwIH0gPSByZXF1ZXN0U3RhdGU7XG5cbiAgICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgICAgLy8gICAgICBpZiAod2luZG93LnRhbGtuTWVkaWEgJiYgd2luZG93LnRhbGtuTWVkaWEuY3VycmVudFRpbWUpIHtcbiAgICAgIGlmIChhcHAuY3VycmVudFRpbWUpIHtcbiAgICAgICAgcmVxdWVzdFN0YXRlLmFwcC5pbnB1dEN1cnJlbnRUaW1lID0gd2luZG93LnRhbGtuTWVkaWEuY3VycmVudFRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0U3RhdGUuYXBwLmlucHV0Q3VycmVudFRpbWUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnMgPSB7fTtcblxuICAgIGlmIChhcHAuaW5wdXRTdGFtcElkKSB7XG4gICAgICBPYmplY3Qua2V5cyhlbW90aW9ucy5iYWxhbmNlcykuZm9yRWFjaChiYWxhbmNlS2V5ID0+IHtcbiAgICAgICAgaWYgKGVtb3Rpb25zLmJhbGFuY2VzW2JhbGFuY2VLZXldICYmIHJlZHV4U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldKSB7XG4gICAgICAgICAgY29uc3QgYmFsYW5jZSA9IGVtb3Rpb25zLmJhbGFuY2VzW2JhbGFuY2VLZXldKGFwcC5pbnB1dFN0YW1wSWQpO1xuXG4gICAgICAgICAgaWYgKGJhbGFuY2UpIHtcbiAgICAgICAgICAgIGJhbGFuY2UuZm9yRWFjaChiID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgdHlwZUlkID0gT2JqZWN0LmtleXMoYilbMF07XG4gICAgICAgICAgICAgIGNvbnN0IHR5cGVMYWJlbCA9IGVtb3Rpb25zLmlkS2V5VHlwZXNbdHlwZUlkXTtcblxuICAgICAgICAgICAgICBpZiAoIXJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV0pIHJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV0gPSB7fTtcbiAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldW3R5cGVMYWJlbF0pXG4gICAgICAgICAgICAgICAgcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XVt0eXBlTGFiZWxdID0gMDtcblxuICAgICAgICAgICAgICByZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldW3R5cGVMYWJlbF0gPSBiW3R5cGVJZF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb25TdGF0ZS5hcHAgPSB7IC4uLmFwcCB9O1xuICAgICAgYWN0aW9uU3RhdGUuYXBwLmlucHV0U3RhbXBJZCA9IDA7XG4gICAgICByZXF1ZXN0U3RhdGUuYXBwLmlucHV0U3RhbXBJZCA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSB9O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhY3Rpb25zO1xuIiwiaW1wb3J0IFBsYWluIGZyb20gJy4vUGxhaW4nO1xuaW1wb3J0IFJ1c3NlbGwgZnJvbSAnLi9SdXNzZWxsJztcbmltcG9ydCBSdXNzZWxsU2ltcGxlIGZyb20gJy4vUnVzc2VsbFNpbXBsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBQbGFpbixcbiAgICBSdXNzZWxsLFxuXHRSdXNzZWxsU2ltcGxlXG59XG4iLCJpbXBvcnQgRW1vdGlvbnMgZnJvbSBcImNvbW1vbi9lbW90aW9ucy9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGFpbiB7XG4gIHN0YXRpYyBnZXQgVFlQRVMoKSB7XG4gICAgcmV0dXJuIFtFbW90aW9ucy5UWVBFUy5MSUtFXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTYXZlQmFsYW5jZShzdGFtcElkKSB7XG4gICAgY29uc3QgYmFsYW5jZSA9IHtcbiAgICAgIDE6IFt7IFtFbW90aW9ucy5UWVBFUy5MSUtFLklEXTogMSB9XVxuICAgIH07XG4gICAgcmV0dXJuIGJhbGFuY2Vbc3RhbXBJZF0gPyBiYWxhbmNlW3N0YW1wSWRdIDogbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTY2hlbWFzKCkge1xuICAgIGxldCBzY2hlbWFzID0ge307XG4gICAgUGxhaW4uVFlQRVMuZm9yRWFjaCgob2JqLCBpKSA9PiB7XG4gICAgICBzY2hlbWFzW29iai5MQUJFTF0gPSB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCwgbWluOiAwIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYXM7XG4gIH1cbn1cbiIsImltcG9ydCBFbW90aW9ucyBmcm9tIFwiY29tbW9uL2Vtb3Rpb25zL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1c3NlbGwge1xuICBzdGF0aWMgZ2V0IFRZUEVTKCkge1xuICAgIHJldHVybiBbXG4gICAgICBFbW90aW9ucy5UWVBFUy5TVVBSSVNFLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuRVhDSVRFLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuSEFQUFksXG4gICAgICBFbW90aW9ucy5UWVBFUy5KT1ksXG4gICAgICBFbW90aW9ucy5UWVBFUy5HTEFELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0FUSVNGQUNUSU9OLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuQ09NRk9SVCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlJFTEFYLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuVElSRUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5TTEVFUFksXG4gICAgICBFbW90aW9ucy5UWVBFUy5TTEFDSyxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkJPUklORyxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFksXG4gICAgICBFbW90aW9ucy5UWVBFUy5TQUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULFxuICAgICAgRW1vdGlvbnMuVFlQRVMuRlJVU1RSQVRFRCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkRJU1NBVElTRklFRCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkFOR0VSLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuV09SUlksXG4gICAgICBFbW90aW9ucy5UWVBFUy5GRUFSXG4gICAgXTtcbiAgfVxuXG4gIHR5cGVzQXJyYXk6IGFueTtcbiAgY29uc3RydWN0b3IodHlwZSkge1xuICAgIHRoaXMudHlwZXNBcnJheSA9IFtdO1xuICAgIE9iamVjdC5rZXlzKFJ1c3NlbGwuVFlQRVMpLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgdGhpcy50eXBlc0FycmF5LnB1c2goUnVzc2VsbC5UWVBFU1tpbmRleF0uTEFCRUwpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldFNhdmVCYWxhbmNlKHN0YW1wSWQpIHtcbiAgICBjb25zdCBiYWxhbmNlID0ge1xuICAgICAgLy8gU3VwcmlzZShQb3NpMSlcbiAgICAgIDEwMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TVVBSSVNFLklEXTogMSB9XSxcbiAgICAgIDEwMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5TVVBSSVNFLklEXTogMSB9XSxcblxuICAgICAgLy8gRXhjaXRlKFBvc2kxKVxuICAgICAgMTEwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcbiAgICAgIDExMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuXG4gICAgICAvLyBIYXBweShQb3NpMilcbiAgICAgIDEyMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEpveShQb3NpMilcbiAgICAgIDEzMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDc6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuXG4gICAgICAvLyBHbGFkKFBvc2kzKVxuICAgICAgMTQwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkdMQUQuSURdOiAxIH1dLFxuICAgICAgMTQwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkdMQUQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBTYXRpc2ZhY3Rpb24oUG9zaTMpXG4gICAgICAxNTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FUSVNGQUNUSU9OLklEXTogMSB9XSxcbiAgICAgIDE1MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5TQVRJU0ZBQ1RJT04uSURdOiAxIH1dLFxuICAgICAgMTUwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTi5JRF06IDEgfV0sXG4gICAgICAxNTA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FUSVNGQUNUSU9OLklEXTogMSB9XSxcblxuICAgICAgLy8gQ29tZm9ydChQb3NpNClcbiAgICAgIDE2MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5DT01GT1JULklEXTogMSB9XSxcbiAgICAgIDE2MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5DT01GT1JULklEXTogMSB9XSxcblxuICAgICAgLy8gUmVsYXgoUG9zaTQpXG4gICAgICAxNzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuICAgICAgMTcwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE3MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFRpcmVkKFBvc2k0KVxuICAgICAgMTgwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcbiAgICAgIDE4MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG4gICAgICAxODAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBTbGFjayhOZWdhNClcbiAgICAgIDIwMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEJvcmluZyhOZWdhNClcbiAgICAgIDIxMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5CT1JJTkcuSURdOiAxIH1dLFxuICAgICAgMjEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkJPUklORy5JRF06IDEgfV0sXG4gICAgICAyMTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuQk9SSU5HLklEXTogMSB9XSxcblxuICAgICAgLy8gTWVsYW5jaG9seShOZWdhNClcbiAgICAgIDIyMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDU6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gU2FkKE5lZ2EzKVxuICAgICAgMjMwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBRC5JRF06IDEgfV0sXG4gICAgICAyMzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FELklEXTogMSB9XSxcbiAgICAgIDIzMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TQUQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBVbnBsZWFzYW50KE5lZ2EzKVxuICAgICAgMjQwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlVOUExFQVNBTlQuSURdOiAxIH1dLFxuICAgICAgMjQwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlVOUExFQVNBTlQuSURdOiAxIH1dLFxuICAgICAgMjQwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlVOUExFQVNBTlQuSURdOiAxIH1dLFxuICAgICAgMjQwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLlVOUExFQVNBTlQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBmcnVzdHJhdGVkKE5lZ2EzKVxuICAgICAgMjUwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkZSVVNUUkFURUQuSURdOiAxIH1dLFxuICAgICAgMjUwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkZSVVNUUkFURUQuSURdOiAxIH1dLFxuICAgICAgMjUwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkZSVVNUUkFURUQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBkaXNzYXRpc2ZpZWQoTmVnYTIpXG4gICAgICAyNjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuRElTU0FUSVNGSUVELklEXTogMSB9XSxcbiAgICAgIDI2MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5ESVNTQVRJU0ZJRUQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBBbmdlcihOZWdhMilcbiAgICAgIDI3MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcblxuICAgICAgLy8gV29ycnkoTmVnYTEpXG4gICAgICAyODAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODA3OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBGZWFyKE5lZ2ExKVxuICAgICAgMjkwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLkZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkZFQVIuSURdOiAxIH1dXG4gICAgfTtcblxuICAgIHJldHVybiBiYWxhbmNlW3N0YW1wSWRdID8gYmFsYW5jZVtzdGFtcElkXSA6IG51bGw7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2NoZW1hcygpIHtcbiAgICBsZXQgc2NoZW1hcyA9IHt9O1xuICAgIFJ1c3NlbGwuVFlQRVMuZm9yRWFjaCgob2JqLCBpKSA9PiB7XG4gICAgICBzY2hlbWFzW29iai5MQUJFTF0gPSB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCwgbWluOiAwIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYXM7XG4gIH1cbn1cbiIsImltcG9ydCBFbW90aW9ucyBmcm9tIFwiY29tbW9uL2Vtb3Rpb25zL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1c3NlbGxTaW1wbGUge1xuICBzdGF0aWMgZ2V0IFRZUEVTKCkge1xuICAgIHJldHVybiBbXG4gICAgICBFbW90aW9ucy5UWVBFUy5FWENJVEUsXG4gICAgICBFbW90aW9ucy5UWVBFUy5IQVBQWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkpPWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlJFTEFYLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0xBQ0ssXG4gICAgICBFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuQU5HRVIsXG4gICAgICBFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSXG4gICAgXTtcbiAgfVxuXG4gIHR5cGVzQXJyYXk6IGFueTtcbiAgY29uc3RydWN0b3IodHlwZSkge1xuICAgIHRoaXMudHlwZXNBcnJheSA9IFtdO1xuICAgIE9iamVjdC5rZXlzKFJ1c3NlbGxTaW1wbGUuVFlQRVMpLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgdGhpcy50eXBlc0FycmF5LnB1c2goUnVzc2VsbFNpbXBsZS5UWVBFU1tpbmRleF0uTEFCRUwpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldFNhdmVCYWxhbmNlKHN0YW1wSWQpIHtcbiAgICBjb25zdCBiYWxhbmNlID0ge1xuICAgICAgLy8gU3VwcmlzZShQb3NpMSlcbiAgICAgIDEwMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEV4Y2l0ZShQb3NpMSlcbiAgICAgIDExMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcblxuICAgICAgLy8gSGFwcHkoUG9zaTIpXG4gICAgICAxMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBKb3koUG9zaTIpXG4gICAgICAxMzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDU6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA3OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcblxuICAgICAgLy8gR2xhZChQb3NpMylcbiAgICAgIDE0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTQwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhdGlzZmFjdGlvbihQb3NpMylcbiAgICAgIDE1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTUwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxNTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDE1MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuXG4gICAgICAvLyBDb21mb3J0KFBvc2k0KVxuICAgICAgMTYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE2MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFJlbGF4KFBvc2k0KVxuICAgICAgMTcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuXG4gICAgICAvLyBUaXJlZChQb3NpNClcbiAgICAgIDE4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG4gICAgICAxODAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuICAgICAgMTgwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcblxuICAgICAgLy8gU2xhY2soTmVnYTQpXG4gICAgICAyMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIxMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhZChOZWdhMylcbiAgICAgIDIzMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIzMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gVW5wbGVhc2FudChOZWdhMylcbiAgICAgIDI0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI0MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI0MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI1MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI2MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEFuZ2VyKE5lZ2EyKVxuICAgICAgMjcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuXG4gICAgICAvLyBXb3JyeShOZWdhMSlcbiAgICAgIDI4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDc6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcblxuICAgICAgLy8gRmVhcihOZWdhMSlcbiAgICAgIDI5MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XVxuICAgIH07XG4gICAgcmV0dXJuIGJhbGFuY2Vbc3RhbXBJZF0gPyBiYWxhbmNlW3N0YW1wSWRdIDogbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTY2hlbWFzKCkge1xuICAgIGxldCBzY2hlbWFzID0ge307XG4gICAgUnVzc2VsbFNpbXBsZS5UWVBFUy5mb3JFYWNoKChvYmosIGkpID0+IHtcbiAgICAgIHNjaGVtYXNbb2JqLkxBQkVMXSA9IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiAwLCBtaW46IDAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NoZW1hcztcbiAgfVxufVxuIiwiaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgcmVzcG9uc2UgPT4ge1xuICBjb25zdCB0eXBlID0gYCR7U2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9CUk9BRENBU1R9JHtyZXNwb25zZS50eXBlfWA7XG4gIHJldHVybiB7IC4uLnJlc3BvbnNlLCB0eXBlIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==',"/ws.api.worker.js")}},function(t,e,B){"use strict";var I=window.URL||window.webkitURL;t.exports=function(t,e){try{try{var B;try{(B=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(t),B=B.getBlob()}catch(e){B=new Blob([t])}return new Worker(I.createObjectURL(B))}catch(e){return new Worker("data:application/javascript,"+encodeURIComponent(t))}}catch(t){if(!e)throw Error("Inline worker is not supported");return new Worker(e)}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=B(15),F=B(49),c=I(B(50)),l=I(B(92));e.default=function(t={}){let e=null,B=[l.default.updateAction];return e=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:null,B.push(F.createLogger({collapsed:!0,duration:!0})),i.createStore(c.default,t,e?e(i.applyMiddleware(...B)):i.applyMiddleware(...B))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,B){(function(t){!function(e){"use strict";function B(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function I(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function i(t,e,B){i.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:B,enumerable:!0})}function F(t,e){F.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function c(t,e){c.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function l(t,e,B){l.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:B,enumerable:!0})}function g(t,e,B){var I=t.slice((B||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,I),t}function Q(t){var e=void 0===t?"undefined":R(t);return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"function"==typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function U(t,e,B,I,s,d,n){n=n||[];var a=(s=s||[]).slice(0);if(void 0!==d){if(I){if("function"==typeof I&&I(a,d))return;if("object"===(void 0===I?"undefined":R(I))){if(I.prefilter&&I.prefilter(a,d))return;if(I.normalize){var u=I.normalize(a,d,t,e);u&&(t=u[0],e=u[1])}}}a.push(d)}"regexp"===Q(t)&&"regexp"===Q(e)&&(t=t.toString(),e=e.toString());var C=void 0===t?"undefined":R(t),V=void 0===e?"undefined":R(e),b="undefined"!==C||n&&n[n.length-1].lhs&&n[n.length-1].lhs.hasOwnProperty(d),G="undefined"!==V||n&&n[n.length-1].rhs&&n[n.length-1].rhs.hasOwnProperty(d);if(!b&&G)B(new F(a,e));else if(!G&&b)B(new c(a,t));else if(Q(t)!==Q(e))B(new i(a,t,e));else if("date"===Q(t)&&t-e!=0)B(new i(a,t,e));else if("object"===C&&null!==t&&null!==e)if(n.filter((function(e){return e.lhs===t})).length)t!==e&&B(new i(a,t,e));else{if(n.push({lhs:t,rhs:e}),Array.isArray(t)){var x;for(t.length,x=0;x<t.length;x++)x>=e.length?B(new l(a,x,new c(void 0,t[x]))):U(t[x],e[x],B,I,a,x,n);for(;x<e.length;)B(new l(a,x,new F(void 0,e[x++])))}else{var o=Object.keys(t),Z=Object.keys(e);o.forEach((function(i,F){var c=Z.indexOf(i);c>=0?(U(t[i],e[i],B,I,a,i,n),Z=g(Z,c)):U(t[i],void 0,B,I,a,i,n)})),Z.forEach((function(t){U(void 0,e[t],B,I,a,t,n)}))}n.length=n.length-1}else t!==e&&("number"===C&&isNaN(t)&&isNaN(e)||B(new i(a,t,e)))}function s(t,e,B,I){return I=I||[],U(t,e,(function(t){t&&I.push(t)}),B),I.length?I:void 0}function d(t,e,B){if(t&&e&&B&&B.kind){for(var I=t,i=-1,F=B.path?B.path.length-1:0;++i<F;)void 0===I[B.path[i]]&&(I[B.path[i]]="number"==typeof B.path[i]?[]:{}),I=I[B.path[i]];switch(B.kind){case"A":!function t(e,B,I){if(I.path&&I.path.length){var i,F=e[B],c=I.path.length-1;for(i=0;i<c;i++)F=F[I.path[i]];switch(I.kind){case"A":t(F[I.path[i]],I.index,I.item);break;case"D":delete F[I.path[i]];break;case"E":case"N":F[I.path[i]]=I.rhs}}else switch(I.kind){case"A":t(e[B],I.index,I.item);break;case"D":e=g(e,B);break;case"E":case"N":e[B]=I.rhs}return e}(B.path?I[B.path[i]]:I,B.index,B.item);break;case"D":delete I[B.path[i]];break;case"E":case"N":I[B.path[i]]=B.rhs}}}function n(t){return"color: "+r[t].color+"; font-weight: bold"}function a(t,e,B,I){var i=s(t,e);try{I?B.groupCollapsed("diff"):B.group("diff")}catch(t){B.log("diff")}i?i.forEach((function(t){var e=t.kind,I=function(t){var e=t.kind,B=t.path,I=t.lhs,i=t.rhs,F=t.index,c=t.item;switch(e){case"E":return[B.join("."),I,"→",i];case"N":return[B.join("."),i];case"D":return[B.join(".")];case"A":return[B.join(".")+"["+F+"]",c];default:return[]}}(t);B.log.apply(B,["%c "+r[e].text,n(e)].concat(L(I)))})):B.log("—— no diff ——");try{B.groupEnd()}catch(t){B.log("—— diff end —— ")}}function u(t,e,B,I){switch(void 0===t?"undefined":R(t)){case"object":return"function"==typeof t[I]?t[I].apply(t,L(B)):t[I];case"function":return t(e);default:return t}}function C(t,e){var B=e.logger,I=e.actionTransformer,i=e.titleFormatter,F=void 0===i?function(t){var e=t.timestamp,B=t.duration;return function(t,I,i){var F=["action"];return F.push("%c"+String(t.type)),e&&F.push("%c@ "+I),B&&F.push("%c(in "+i.toFixed(2)+" ms)"),F.join(" ")}}(e):i,c=e.collapsed,l=e.colors,g=e.level,Q=e.diff,U=void 0===e.titleFormatter;t.forEach((function(i,s){var d=i.started,n=i.startedTime,C=i.action,V=i.prevState,b=i.error,G=i.took,x=i.nextState,Z=t[s+1];Z&&(x=Z.prevState,G=Z.started-d);var R=I(C),L="function"==typeof c?c((function(){return x}),C,i):c,X=o(n),r=l.title?"color: "+l.title(R)+";":"",m=["color: gray; font-weight: lighter;"];m.push(r),e.timestamp&&m.push("color: gray; font-weight: lighter;"),e.duration&&m.push("color: gray; font-weight: lighter;");var y=F(R,X,G);try{L?l.title&&U?B.groupCollapsed.apply(B,["%c "+y].concat(m)):B.groupCollapsed(y):l.title&&U?B.group.apply(B,["%c "+y].concat(m)):B.group(y)}catch(t){B.log(y)}var A=u(g,R,[V],"prevState"),S=u(g,R,[R],"action"),W=u(g,R,[b,V],"error"),h=u(g,R,[x],"nextState");if(A)if(l.prevState){var p="color: "+l.prevState(V)+"; font-weight: bold";B[A]("%c prev state",p,V)}else B[A]("prev state",V);if(S)if(l.action){var E="color: "+l.action(R)+"; font-weight: bold";B[S]("%c action    ",E,R)}else B[S]("action    ",R);if(b&&W)if(l.error){var N="color: "+l.error(b,V)+"; font-weight: bold;";B[W]("%c error     ",N,b)}else B[W]("error     ",b);if(h)if(l.nextState){var J="color: "+l.nextState(x)+"; font-weight: bold";B[h]("%c next state",J,x)}else B[h]("next state",x);Q&&a(V,x,B,L);try{B.groupEnd()}catch(t){B.log("—— log end ——")}}))}function V(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},m,t),B=e.logger,I=e.stateTransformer,i=e.errorTransformer,F=e.predicate,c=e.logErrors,l=e.diffPredicate;if(void 0===B)return function(){return function(t){return function(e){return t(e)}}};if(t.getState&&t.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(t){return function(e){return t(e)}}};var g=[];return function(t){var B=t.getState;return function(t){return function(Q){if("function"==typeof F&&!F(B,Q))return t(Q);var U={};g.push(U),U.started=Z.now(),U.startedTime=new Date,U.prevState=I(B()),U.action=Q;var s=void 0;if(c)try{s=t(Q)}catch(t){U.error=i(t)}else s=t(Q);U.took=Z.now()-U.started,U.nextState=I(B());var d=e.diff&&"function"==typeof l?l(B,Q):e.diff;if(C(g,Object.assign({},e,{diff:d})),g.length=0,U.error)throw U.error;return s}}}}var b,G,x=function(t,e){return function(t,e){return new Array(e+1).join(t)}("0",e-t.toString().length)+t},o=function(t){return x(t.getHours(),2)+":"+x(t.getMinutes(),2)+":"+x(t.getSeconds(),2)+"."+x(t.getMilliseconds(),3)},Z="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L=function(t){if(Array.isArray(t)){for(var e=0,B=Array(t.length);e<t.length;e++)B[e]=t[e];return B}return Array.from(t)},X=[];b="object"===(void 0===t?"undefined":R(t))&&t?t:"undefined"!=typeof window?window:{},(G=b.DeepDiff)&&X.push((function(){void 0!==G&&b.DeepDiff===s&&(b.DeepDiff=G,G=void 0)})),B(i,I),B(F,I),B(c,I),B(l,I),Object.defineProperties(s,{diff:{value:s,enumerable:!0},observableDiff:{value:U,enumerable:!0},applyDiff:{value:function(t,e,B){t&&e&&U(t,e,(function(I){B&&!B(t,e,I)||d(t,e,I)}))},enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:function(t,e,B){if(t&&e&&B&&B.kind){var I,i,F=t;for(i=B.path.length-1,I=0;I<i;I++)void 0===F[B.path[I]]&&(F[B.path[I]]={}),F=F[B.path[I]];switch(B.kind){case"A":!function t(e,B,I){if(I.path&&I.path.length){var i,F=e[B],c=I.path.length-1;for(i=0;i<c;i++)F=F[I.path[i]];switch(I.kind){case"A":t(F[I.path[i]],I.index,I.item);break;case"D":case"E":F[I.path[i]]=I.lhs;break;case"N":delete F[I.path[i]]}}else switch(I.kind){case"A":t(e[B],I.index,I.item);break;case"D":case"E":e[B]=I.lhs;break;case"N":e=g(e,B)}return e}(F[B.path[I]],B.index,B.item);break;case"D":case"E":F[B.path[I]]=B.lhs;break;case"N":delete F[B.path[I]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==G},enumerable:!0},noConflict:{value:function(){return X&&(X.forEach((function(t){t()})),X=null),s},enumerable:!0}});var r={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},m={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},y=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.dispatch,B=t.getState;return"function"==typeof e||"function"==typeof B?V()({dispatch:e,getState:B}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=m,e.createLogger=V,e.logger=y,e.default=y,Object.defineProperty(e,"__esModule",{value:!0})}(e)}).call(this,B(26))},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=B(15),F=I(B(51)),c=I(B(53)),l=B(54),g=I(B(80)),Q=I(B(89)),U=I(B(90)),s=I(B(91)),d={};Object.keys(l.reducerFiles).forEach(t=>{d[t]=(t=>(e={},B)=>B[t]?"Array"===B[t].constructor.name?[...B[t]]:{...B[t]}:e)(t)});const n=i.combineReducers({ui:F.default,uiTimeMarker:g.default,style:Q.default,componentDidMounts:U.default,actionLog:s.default,setting:c.default,...d});e.default=n},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2));e.default=(t=new i.default,e)=>e.ui?t.merge(e.ui):t},function(t,e){e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\n",e.homedir=function(){return"/"}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t={},e)=>e.setting?{...e.setting}:t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=B(15),F=I(B(55)),c=I(B(56)),l=I(B(57)),g=I(B(58)),Q=I(B(60)),U=I(B(61)),s=I(B(63)),d=I(B(64)),n=I(B(65)),a=I(B(67)),u=I(B(69)),C=I(B(70)),V=I(B(71)),b=I(B(72)),G=I(B(74)),x=I(B(76)),o=I(B(77)),Z=I(B(78)),R=I(B(79));e.reducerFiles={app:F.default,user:c.default,tuneCh:l.default,ranks:g.default,thread:Q.default,threads:U.default,threadDetail:s.default,analyze:d.default,bootOption:n.default,setting:a.default,posts:u.default,postsTimeline:C.default,postsTimelineStock:V.default,postsTimelineZero:b.default,postsTimelineZeroAfter:G.default,postsMulti:x.default,postsSingle:o.default,postsChild:Z.default,actioned:R.default},e.default=i.combineReducers(e.reducerFiles)},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(6));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(27));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(17));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new i.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:B}=e;if(B.ch===t.ch)return{...t,liveCnt:B.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const I=e.posts[0];if(I.ch===t.ch)return{...t,title:I.title,stampId:I.stampId,favicon:I.favicon,post:I.post}}return t}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(8));e.default=(t=[],e)=>{let B=[],I=0;const F=(t,B)=>t.ch===e.app.rootCh||B.ch===e.app.rootCh?0:t.liveCnt<B.liveCnt?1:t.liveCnt>B.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(B=i.default.getDispPosts(e),I=B&&B.length?B.length:0,0===I?t:t.map(t=>e.thread.ch===t.ch?{...t,favicon:B[I-1].favicon,stampId:B[I-1].stampId,post:B[I-1].post}:t));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map(t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t).sort(F);case"SERVER_TO_API[BROADCAST]:post":return t.map(t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t);case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const B=[],I=e.rank.length;let i=e.rank[0];for(let F=0;F<I;F++){let I=e.rank[F];i=I.updateTime>i.updateTime?I:i,I.ch===t[0].ch&&(I={...I,liveCnt:t[0].liveCnt}),B.push(I)}return B.sort(F),B[0].faicon=i.favicon,B[0].post=i.post,B[0].stampId=i.stampId,B}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(14));e.default=(t=new i.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":return new i.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(62));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4));class F extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(14));e.default=(t=new i.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(29));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(66));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4));class F extends i.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(B=>{e[t[B].name]=t[B].value}),e}}e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(68));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4));class F extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},B=t&&t.common?t.common:{},I=t&&t.server?t.server:{};return this.create({client:e,common:B,server:I})}}e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(8));e.default=(t=[],e)=>e.posts?new i.default(e.posts):t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(18));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map(t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(19));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(73));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(75));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(8)),F=I(B(7));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let B=[];return t.length+e.postsMulti.length>F.default.findOneLimitCnt?(B=[...e.postsMulti,...t],B.slice(0,F.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(28));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(8));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(30));e.default=(t=new i.default,e)=>e.uiTimeMarker?{...e.uiTimeMarker}:t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(5)),c=I(B(13)),l=I(B(20));e.default=class{constructor(t){const{app:e,ui:B}=t,I=F.default.getDetailClass({app:e,ui:B});return{self:I.getFooter(t),child:I.getFooterChild(t),childLike:I.getFooterChildLike(t),childMoney:I.getFooterChildMoney(t),childShare:I.getFooterChildShare(t)}}static getDetailClass({app:t,ui:e}){return e.screenMode===i.default.screenModeSmallLabel?l.default:c.default}static get padding(){return 20}static get margin(){return 5}static getWidth({app:t,ui:e},B=!1){switch(e.screenMode){case i.default.screenModeSmallLabel:return"100%";case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:return F.default.getDetailClass({app:t,ui:e}).getWidth({app:t,ui:e},B)}}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1));class c{constructor(t){return{self:c.getSelf(t)}}static get datasetsBase(){return{backgroundColor:"rgba(240, 100, 195, 0.2 )",borderCapStyle:"square",borderColor:"rgba(240, 100, 195, 0.8 )",borderWidth:"4",pointBackgroundColor:"rgba(240, 100, 195, 0.8 )",pointBorderColor:"rgba(240, 100, 195, 0 )",pointHoverBackgroundColor:"rgba(255, 255, 255, 0.8 )",pointHoverBorderColor:"rgba(240, 100, 195, 0.8 )",pointHoverBorderWidth:"4",data:[]}}static get optionsBase(){return{responsive:!0,responsiveAnimationDuration:0,elements:{point:{backgroundColor:"rgba(79, 174, 159, 0.6)",borderAlign:"left",borderColor:"rgba(79, 174, 159, 0.6)",borderWidth:100},line:{tension:.1,backgroundColor:"rgba(79, 174, 159, 0.6)",borderWidth:"10",borderColor:"rgba(79, 174, 159, 0.6)",borderCapStyle:"square",borderDash:[]}},legend:{display:!1},tooltips:{enabled:!0,intersect:!0,backgroundColor:"rgba(240, 100, 195, 0.7 )",callbacks:{label:(t,e)=>{let B=e.datasets[t.datasetIndex].label||"";return B&&(B+=": "),B+=Math.round(100*t.yLabel)/100,"0"!==B?B:null},title:(t,e)=>t.map(t=>e.labels[t.index])}},scale:{ticks:{fontSize:16,fontColor:F.default.fontBaseRGB,backdropColor:"rgba(255,255,255,0)",beginAtZero:!0,max:5,min:0,stepSize:1},pointLabels:{fontSize:14,fontColor:F.default.fontBaseRGB}}}}static getSelf(t){const e=i.default.getLayoutFlex({height:"auto",marginBottom:"40px",flexDirection:"column"}),B=i.default.getContentBase({}),I=i.default.getAnimationBase({});return i.default.get({layout:e,content:B,animation:I})}}e.default=c},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(7)),c=I(B(0)),l=I(B(1));class g{constructor(t){return{activeLiSelf:g.getActiveLiSelf(t),unactiveLiSelf:g.getUnactiveLiSelf(t),space:g.getSpace(t),upper:g.getUpper(),upperSpace:g.getUpperSpace(),upperRankWrap:g.getUpperRankWrap(),upperRank:g.getUpperRank(),upperRight:g.getUpperRight(),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(),ext:g.getExt(),extMusic:g.getExtMusic(),extVideo:g.getExtVideo()}}static get tuneRGB(){return l.default.themeRGB}static get rank1RGB(){return"rgb(255, 10, 78)"}static get rank2RGB(){return"rgb(255, 127, 0)"}static get rank3RGB(){return"rgb(0, 142, 255)"}static get rankOtherRGB(){return l.default.downreliefRGB}static get oneDigitWidth(){return"17%"}static get twoDigitWidth(){return"18%"}static get thirdDigitWidth(){return"19%"}static get iconSize(){return 24}static get activeLiSelfLabel(){return"activeLiSelf"}static get unactiveLiSelfLabel(){return"unactiveLiSelf"}static get activeLiSelfBackground(){return l.default.whiteRGBA}static get activeLiSelfMouseOverBackground(){return l.default.whiteRGBA}static get activeLiSelfMouseDownBackground(){return l.default.whiteRGBA}static get unactiveLiSelfBackground(){return l.default.calmRGBA}static get unactiveLiSelfMouseOverBackground(){return l.default.whiteRGBA}static get unactiveLiSelfMouseDownBackground(){return l.default.whiteRGBA}static get activeLiSelfBorderRightColor(){return"1px solid "+l.default.whiteRGB}static get unactiveLiSelfBorderRightColor(){return l.default.border}static getUnactiveLiBorder({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel||e.screenMode===i.default.screenModeSmallLabel?{borderTop:0,borderRight:0,borderBottom:l.default.border,borderLeft:0}:{borderTop:0,borderRight:l.default.border,borderBottom:l.default.border,borderLeft:0}}static getDispRankBackground(t=0){switch(t){case 0:return g.tuneRGB;case 1:return g.rank1RGB;case 2:return g.rank2RGB;case 3:return g.rank3RGB;default:return g.rankOtherRGB}}static getDispRankWidth(t=0){switch(String(t).length){case 0:case 1:return g.oneDigitWidth;case 2:return g.twoDigitWidth;case 3:default:return g.thirdDigitWidth}}static getActiveLiSelf({app:t,ui:e}){const B=2*l.default.getBlockSize({app:t,ui:e}),I=c.default.getLayoutBlock({width:"initial",height:B+"px",minHeight:B+"px",padding:"5px",borderTop:0,borderRight:"1px solid "+l.default.whiteRGB,borderBottom:l.default.border,borderLeft:0,background:g.activeLiSelfBackground,boxShadow:"0px 0px 0px rgba(255,255,255,1), 0px 0px 0px rgba(${Container.themeRGBString}, 0.2) inset ",cursor:"pointer"}),i=c.default.getContentBase(),F=c.default.getAnimationBase({transition:l.default.transitionOn+"ms"});return c.default.get({layout:I,content:i,animation:F})}static getUnactiveLiSelf({app:t,ui:e}){const B=g.getUnactiveLiBorder({app:t,ui:e}),I=2*l.default.getBlockSize({app:t,ui:e}),i=c.default.getLayoutBlock({boxShadow:`${l.default.lineShadow}, 0px 0px 0px rgba(${l.default.themeSuperLightRGBString}, 1) inset`,width:"initial",height:I+"px",minHeight:I+"px",padding:"5px",...B,background:g.unactiveLiSelfBackground,cursor:"pointer"}),F=c.default.getContentBase(),Q=c.default.getAnimationBase({transition:l.default.transitionOn+"ms"});return c.default.get({layout:i,content:F,animation:Q})}static getSpace({app:t,ui:e}){const B=c.default.getLayoutBlock({height:"100%",background:l.default.silverRGBA}),I=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:B,content:I,animation:i})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"18%",margin:"0px 2% 0px 0px"}),e=c.default.getContentBase({}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getUpperRankWrap(){const t=c.default.getLayoutInlineFlex({position:"absolute",left:"5px",top:"7px",width:g.thirdDigitWidth,height:"20px",background:g.rankOtherRGB,borderRadius:"10px",margin:"0"}),e=c.default.getContentBase({}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getUpperRank(){const t=c.default.getLayoutFlex({width:"100%"}),e=c.default.getContentBase({fontSize:"0.7em",fontWeight:"bold",color:l.default.whiteRGB,lineHeight:"1.5"}),B=c.default.getAnimationBase({transform:"scale(0.8)"});return c.default.get({layout:t,content:e,animation:B})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({lineHeight:"1.5",textIndent:"4px",textAlign:"left"}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getBottom({app:t,ui:e}){const B=c.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"100%",height:"60%"}),I=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:B,content:I,animation:i})}static getBottomIcon({app:t,ui:e}){const B=c.default.getLayoutInlineBlock({width:"20%",height:"100%",backgroundImage:`url("${F.default.assetsURL}/favicon.ico")`,backgroundPosition:"30% 50%",backgroundSize:l.default.getFaviconSize({app:t,ui:e})+"px",backgroundRepeat:"no-repeat"}),I=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:B,content:I,animation:i})}static getBottomPost(){const t=c.default.getLayoutInlineFlex({width:"60%",height:"100%",justifyContent:"flex-start"}),e=c.default.getContentBase({textIndent:"3%",textAlign:"left",whiteSpace:"nowrap"}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getExt(){const t=c.default.getLayoutFlex({position:"absolute",alignItems:"center",justifyContent:"center",bottom:"0px",right:"10px",width:"70px",height:"20px",background:l.default.lightGrayRGBA,borderRadius:"3px 3px 0px 0px"}),e=c.default.getContentBase({textIndent:"3px",textAlign:"center",fontSize:"0.6em",color:l.default.whiteRGB}),B=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:B})}static getExtMusic(){let t=g.getExt();return t.background="rgba(143,198,143, 1)",t}static getExtVideo(){let t=g.getExt();return t.background="rgba(105, 70, 255, 1)",t}}e.default=g},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1)),c=I(B(2));class l{constructor(t){const e=l.getSelf(t),B=l.getColumns(t),I=l.getColumn(t),i=l.getColumnLast(t),F=l.getImg(t),c=l.getWrap(t);return{self:e,columns:B,column:I,columnLast:i,img:F,imgWrap:l.getImgWrap(t),wrap:c,names:l.getNames(t),namesAddCh:l.getNamesAddCh(t)}}static getWidth({app:t,ui:e},B=!1){let I="0";switch(e.screenMode){case c.default.screenModeSmallLabel:I="100.0%";break;case c.default.screenModeMiddleLabel:case c.default.screenModeLargeLabel:I="300px"}return B?i.default.trimUnit(I):I}static getTransform({app:t,ui:e}){let B="translate3d( 0px ,0px, 0px )";switch(e.screenMode){case c.default.screenModeSmallLabel:B="translate3d( 0px ,0px, 0px )";break;case c.default.screenModeMiddleLabel:t.isOpenDetail,B="translate3d( 0px ,0px, 0px )";break;case c.default.screenModeLargeLabel:B="translate3d( 0px ,0px, 0px )"}return B}static getSelf({app:t,ui:e}){const B=i.default.getLayoutInlineBlock({position:"relative",width:l.getWidth({app:t,ui:e}),minWidth:l.getWidth({app:t,ui:e}),maxWidth:"inherit",height:"100%",WebkitOverflowScrolling:"touch",overflow:"scroll",borderTop:0,borderRight:F.default.border,borderBottom:0,borderLeft:0}),I=i.default.getAnimationBase();return i.default.get({layout:B,content:{},animation:I})}static getColumns({app:t,ui:e}){const B=i.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",height:"auto",borderBottom:F.default.border,borderRight:F.default.border,background:F.default.whiteRGB,overflow:"scroll"}),I=i.default.getContentBase({whiteSpace:"nowrap"}),c=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:c})}static getColumn({app:t,ui:e}){const B=i.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",borderBottom:F.default.border,borderRight:F.default.border}),I=i.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),c=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:c})}static getColumnLast({app:t,ui:e}){const B=i.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",marginLeft:"20px"}),I=i.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getWrap({app:t,ui:e}){const B=i.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:F.default.border}),I=i.default.getContentBase({textAlign:"left",content:"getWrap"}),c=i.default.getAnimationBase({});return i.default.get({layout:B,content:I,animation:c})}static getImgWrap({app:t,ui:e}){const B=i.default.getLayoutBlock({flexGrow:1,margin:"22px 0px 0px 0px",width:"60px",maxWidth:"60px",minWidth:"60px",height:"60px"}),I=i.default.getContentBase({}),F=i.default.getAnimationBase({});return i.default.get({layout:B,content:I,animation:F})}static getImg({app:t,ui:e}){const B=i.default.getLayoutInlineBlock({borderRadius:"50%",width:"34px",height:"34px"}),I=i.default.getContentBase({}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getNamesAddCh({app:t,ui:e}){const B=i.default.getLayoutBlock({padding:"5px 10px 5px 5px",flexGrow:4}),I=i.default.getContentBase({textAlign:"left",lineHeight:"2"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}static getNames({app:t,ui:e}){const B=i.default.getLayoutBlock({flexGrow:4}),I=i.default.getContentBase({textAlign:"left",lineHeight:"1.7"}),F=i.default.getAnimationBase();return i.default.get({layout:B,content:I,animation:F})}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1)),c=I(B(9));class l{constructor(t){return{self:l.getSelf(t)}}static getSelf({app:t,ui:e}){const B=c.default.getOlWidth({app:t,ui:e},!0),I=(100-B)/2,l=t.isOpenInnerNotif?F.default.getBlockSize({app:t,ui:e}):0,g=i.default.getLayoutFlex({position:"fixed",top:F.default.getBlockSize({app:t,ui:e})+"px",alignItems:"center",justifyContent:"center",width:`calc( ${B}% - 2px )`,margin:`0px calc( ${I}% + 1px ) 0px calc( ${I}% + 1px )`,height:l,background:F.default.themeRGBA,zIndex:20}),Q=i.default.getContentBase({color:F.default.whiteRGB}),U=i.default.getAnimationBase({transition:F.default.transitionNotif+"ms"});return i.default.get({layout:g,content:Q,animation:U})}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1));class c{constructor(t){return{self:c.getSelf(t),tuneLi:c.getTuneLi(t),activeLi:c.getActiveLi(t),unactiveLi:c.getUnactiveLi(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return F.default.themeRGB}static get unactiveColor(){return F.default.fontBaseRGB}static get activeBgColor(){return F.default.whiteRGBA}static get unactiveBgColor(){return"rgba( 235, 235, 235, 0.96 )"}static getSelf({app:t,ui:e}){const B=c.size+"px",I=i.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:B,minHeight:B,maxHeight:B,background:c.activeBgColor,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),l=i.default.getContentBase({cursor:"pointer"}),g=i.default.getAnimationBase({transition:F.default.getTransition({app:t,ui:e})});return i.default.get({layout:I,content:l,animation:g})}static getTuneLi({app:t,ui:e}){const B=c.getActiveLi({app:t,ui:e});return B.alignItems="center",B}static getActiveLi({app:t,ui:e}){const B=c.getSelf({app:t,ui:e});return B.background=c.activeBgColor,B.color=F.default.fontBaseRGB,B}static getUnactiveLi({app:t,ui:e}){const B=c.getSelf({app:t,ui:e});return B.background=c.unactiveBgColor,B.color=F.default.fontBaseRGB,B}}e.default=c},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0));class F{constructor(t){return{self:F.getSelf()}}static getSelf(){const t=i.default.getLayoutFlex({margin:"0 auto",height:"100vh",width:"10%"}),e=i.default.getAnimationBase();return i.default.get({layout:t,content:{},animation:e})}}e.default=F},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0)),F=I(B(1));class c{constructor(t){return{self:c.getSelf(t)}}static get selfBoxShadowOnHighlight(){return`0px 0px 10px rgba(${F.default.themeRGBString},1)`}static get selfBoxShadowOffHighlight(){return`0px 0px 0px rgba(${F.default.themeRGBString},1)`}static getSelf({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"26px",height:"26px",background:`rgba(${F.default.themeRGBString}, 0.85)`,borderRadius:"26px",boxShadow:c.selfBoxShadowOffHighlight}),content:i.default.getContentBase({fontSize:"0.7em",textAlign:"center"}),animation:i.default.getAnimationBase({transition:F.default.transitionOn+"ms"})}),circle:i.default.get({layout:i.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:i.default.getContentBase({textAlign:"center",color:F.default.whiteRGB}),animation:i.default.getAnimationBase()})}}}e.default=c},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(6)),F=I(B(0)),c=I(B(3)),l=I(B(37)),g=I(B(1)),Q=I(B(9)),U=I(B(5)),s=I(B(13)),d=I(B(20)),n=I(B(31)),a=I(B(32)),u=I(B(34)),C=I(B(22)),V=I(B(40)),b=I(B(42)),G=I(B(33)),x=I(B(24)),o=I(B(41)),Z=I(B(38)),R=I(B(35)),L=I(B(39)),X=I(B(21)),r=I(B(36));e.default=(t={},e)=>{switch(e.type){case"ON_RESIZE_START_WINDOW":case"ON_RESIZE_END_WINDOW":case"ON_TRANSITION":case"ON_TRANSITION_END":case"OFF_TRANSITION":case"EXT_TO_CLIENT[ACTION]:ON_TRANSITION":case"bootExtension":return new F.default(e);case"TOGGLE_DISP_MAIN":return{...t};case"API_TO_CLIENT[EMIT]:rank":case"API_TO_CLIENT[EMIT]:tune":case"API_TO_CLIENT[BROADCAST]:tune":return{...t,ranks:{...t.ranks,ol:r.default.getOl(e)}};case"ON_CLICK_MULTISTREAM":return{...t,board:{...t.board,menuLiChild:{...t.board.menuLiChild,color:e.app.multistream?x.default.activeColor:x.default.unactiveColor}},icon:{...t.icon,thunder:{}}};case"COMPONENT_DID_MOUNTS":case"API_TO_CLIENT[BROADCAST]:fetchPosts":return{...t,menus:{...t.menus,self:{...t.menus,transform:c.default.getTransform(e)}}};case"API_TO_CLIENT[REQUEST]:fetchPosts":case"API_TO_CLIENT[REQUEST]:changeThread":return{...t,posts:{...t.posts,self:Q.default.getSelf(e)}};case"API_TO_CLIENT[EMIT]:fetchPosts":case"OPEN_LINKS":case"CLOSE_LINKS":case"TOGGLE_LINKS":return{...t,menus:{...t.menus,self:{...t.menus,transform:c.default.getTransform(e)}},posts:{...t.posts,self:Q.default.getSelf(e)},board:{...t.board,self:{...t.board.self,width:x.default.getSelfWidth(e),height:x.default.getSelfHeight(e),boxShadow:x.default.getSelfBoxShadow(e)},menuLiChild:x.default.getMenuLiChild(e),menuLiLinks:x.default.getMenuLiLinks(e)},links:{...t.links,self:{...t.links.self,display:o.default.getSelfDisplay(e)},linksUl:{...t.links.linksUl,overflowY:o.default.getLinksUlOevrflowY(e)}},icon:{...t.icon,thunder:R.default.getThunder(e),bubble:R.default.getBubble(e),links:R.default.getLinks(e)}};case"TOGGLE_BUBBLE_POST":return{...t,board:{...t.board,menuLiBubble:{...t.board.menuLiBubble,color:e.ui.isBubblePost?x.default.activeColor:x.default.unactiveColor}},posts:{...t.posts,self:Q.default.getSelf(e),more:Q.default.getMore(e)},post:{...t.post,self:Z.default.getSelf(e),upper:Z.default.getUpper(e),bottomPost:Z.default.getBottomPost(e)}};case"TOGGLE_DISP_POSTS_SUPPORTER":case"CLOSE_DISP_POSTS_SUPPORTER":return{...t,postsSupporter:{...t.postsSupporter,self:{...t.postsSupporter.self,transform:G.default.getTransform(e)}}};case"ON_CLICK_TO_TIMELINE_THREAD":return{...t,posts:{...t.posts,self:Q.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:x.default.getSelfHeight(e)},menuLiChild:{...t.menuLiChild,color:i.default.isActiveMultistream(e,"reducer")?x.default.activeColor:x.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:x.default.unactiveColor}},video:{...t.video,self:X.default.getSelf(e)},audio:{...t.audio,self:L.default.getSelf(e)}};case"ON_CLICK_TO_MULTI_THREAD":return{...t,posts:{...t.posts,self:Q.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:x.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:x.default.activeColor},menuLiLinks:{...t.menuLiLinks,color:x.default.activeColor}}};case"ON_CLICK_TO_SINGLE_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:x.default.getSelfHeight(e)},menuLiLinks:{...t.menuLiLinks,color:x.default.activeColor}}};case"ON_CLICK_TO_CHILD_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:x.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:x.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:x.default.unactiveColor}},icon:{...t.icon,thunder:R.default.getThunder(e)}};case"ON_CLICK_TOGGLE_DISP_MENU_END":return{...t,posts:{...t.posts,self:Q.default.getSelf(e)}};case"ON_CLICK_TOGGLE_DISP_DETAIL":case"ON_CLICK_TOGGLE_DISP_MENU":return{...t,menu:{...t.menu,self:{...t.menu.self,width:c.default.getWidth(e),transform:c.default.getTransform(e)}},detail:{...t.detail,["self"+U.default.detailRightSelfKey]:{...t.detail["self"+U.default.detailRightSelfKey],transform:s.default.getTransform(e)},["self"+U.default.detailModalSelfKey]:{...t.detail["self"+U.default.detailModalSelfKey],transform:d.default.getTransform(e)}},posts:{...t.posts,self:{...t.posts.self,width:Q.default.getWidth(e)}},footer:{...t.footer,self:{...t.footer.self,width:a.default.getWidth(e),transform:a.default.getTransform(e)}},menuFooter:{...t.menuFooter,self:{...t.menuFooter.self,width:u.default.getWidth(e)}},postsFooter:{...t.postsFooter,self:{...t.postsFooter.self,maxWidth:C.default.getWidth(e),width:C.default.getWidth(e)}}};case"ON_CLICK_OPEN_LOCK_MENU":return{...t,lockMenu:{...t.lockMenu,menuShare:{...t.lockMenu.menuShare,transform:l.default.getCommonTransform(e)}}};case"OPEN_NEW_POST":case"CLOSE_NEW_POST":return{...t,container:{...t.container,newPost:{...t.container.newPost,transform:g.default.getNotifTranslateY(e)}}};case"OPEN_NOTIF":case"CLOSE_NOTIF":const B=V.default.getNotifsDisplay(e);return{...t,header:{...t.header,self:{...t.header.self,transform:n.default.getNotifTranslateY(e)}},container:{...t.container,newPost:{...t.container.newPost,display:g.default.getNewPostDisplay(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,height:V.default.getNotifsHeight(e)},self:{...t.notif.self,display:B}}};case"TOGGLE_DISP_BOARD":return{...t,board:{...t.board,self:x.default.getSelf(e)}};case"OPEN_INNER_NOTIF":case"CLOSE_INNER_NOTIF":return{...t,innerNotif:{...t.innerNotif,self:{...t.innerNotif.self,height:""!==e.ui.openInnerNotif?g.default.getBlockSize(e)+"px":"0px"}}};case"UPDATE_STYLE":const{styleKey:I,eleType:m,tagName:y,style:A}=e;if(I&&m&&y)return{...t,[I]:{...t[I],[m]:{...t[I][m],[y]:{...t[I][m][y],...A}}}};if(I&&m)return{...t,[I]:{...t[I],[m]:{...t[I][m],...A}}};break;case"START_DISP_POSTS":case"START_UNDISP_POSTS":return{...t,extScreen:{...t.extScreen,self:{...t.extScreen.self,transform:b.default.getSelfTransform(e),transition:b.default.getSelfTransition(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,display:V.default.getNotifsDisplay(e)}}};default:return e.style?e.style:t}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>(e.componentDidMounts&&"string"==typeof e.componentDidMounts&&t.push(e.componentDidMounts),t)},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>"COMPONENT_DID_MOUNTS"!==e.type?[e.type,...t]:t},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(7)),F=I(B(93)),c=I(B(11)),l=I(B(12)),g=I(B(6)),Q=I(B(8)),U=I(B(2)),s=I(B(1));e.default={updateAction:t=>e=>B=>{const I=t.getState();B.ui=B.ui?{...I.ui,...B.ui}:I.ui,B.app=B.app?{...I.app,...B.app}:I.app,d[B.type]&&(B=d[B.type](I,B)),B&&e(B)}};const d={"API_TO_CLIENT[REQUEST]:getMore":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!1,e),"API_TO_CLIENT[REQUEST]:fetchPosts":(t,e)=>e,"API_TO_CLIENT[REQUEST]:changeThread":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:fetchPosts":(t,e)=>{if(e.ui.isLoading=!1,e.ui.detailCh=e.thread.ch,!e.app.isLinkCh)switch(e.ui.extensionMode){case U.default.extensionModeExtBottomLabel:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*s.default.transitionNotif+s.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",{transition:t})}break;case U.default.extensionModeExtModalLabel:if(!e.app.isMediaCh&&e.posts.length>0){const t=e.posts[e.posts.length-1]._id,B=e.posts[e.posts.length-1].post,I=e.posts[e.posts.length-1].stampId;let c=e.posts[e.posts.length-1].favicon;c=l.default.HTTPS_PROTOCOL+"//"+i.default.assetsIconPath+F.default.getSaveFaviconName(c),window.talknWindow.ext.to("openNotif",{id:t,post:B,stampId:I,favicon:c,addUnreadCnt:e.posts.length})}}return e},"API_TO_CLIENT[BROADCAST]:post":(t,e)=>{const B=e.posts.length-1;switch(e.ui.extensionMode){case U.default.extensionModeExtBottomLabel:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*s.default.transitionNotif+s.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",{transition:t})}break;case U.default.extensionModeExtModalLabel:if(e.posts.length>0){const t=e.posts[B]._id,I=e.posts[B].post,c=e.posts[B].stampId;let g=e.posts[B].favicon;g=l.default.HTTPS_PROTOCOL+"//"+i.default.assetsIconPath+F.default.getSaveFaviconName(g),window.talknWindow.ext.to("openNotif",{id:t,post:I,stampId:c,favicon:g,addUnreadCnt:e.posts.length})}}return e},"CLIENT_TO_API[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!0,e),ON_CLICK_MULTISTREAM:(t,e)=>{const B=Q.default.getDispPosts(e),I=B&&B.length?B.length:0;return I>0&&t.ranks.length>0&&(e.ranks=t.ranks.map(e=>t.app.rootCh===e.ch?{...e,favicon:B[I-1].favicon,post:B[I-1].post,stampId:B[I-1].stampId}:e)),e},NEXT_POSTS_TIMELINE:(t,e)=>{const B=e.postsTimeline.length-1,I=e.postsTimeline[B]._id,c=e.postsTimeline[B].post,g=e.postsTimeline[B].stampId;let Q=e.postsTimeline[B].favicon;return Q=l.default.HTTPS_PROTOCOL+"//"+i.default.assetsIconPath+F.default.getSaveFaviconName(Q),window.talknWindow.ext.to("openNotif",{id:I,post:c,stampId:g,favicon:Q}),e.postsTimeline=[...t.postsTimeline,...e.postsTimeline],e},TOGGLE_DISP_POSTS_SUPPORTER:(t,e)=>(t.ui.isOpenPostsSupporter=!t.ui.isOpenPostsSupporter,e),TOGGLE_LINKS:(t,e)=>(e.ui.isOpenLinks=!t.ui.isOpenLinks,e),ON_CLICK_TOGGLE_POSTS:(t,e)=>(e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:U.default.getIsOpenPosts(e.ui),e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>{const B=t.threads[e.app.detailCh];return e.threadDetail={...B},e},OFF_TRANSITION:(t,e)=>(e.ui.height=g.default.getHeight(),e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:U.default.getIsOpenPosts(e.ui),e),ON_TRANSITION_END:(t,e)=>(e.ui.height=U.default.getHeight(),e.ui.isOpenPosts=U.default.getIsOpenPosts(e.ui),e),ON_RESIZE_START_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_RESIZE_END_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.ui.isLoading=!e.ui.isLoading,e),ON_CLICK_TOGGLE_DISP_MENU:(t,e)=>(e.ui.isOpenMenu=!e.ui.isOpenMenu,e),TOGGLE_DISP_BOARD:(t,e)=>(e.ui.isOpenBoard=!t.ui.isOpenBoard,e),OPEN_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!0,e),TOGGLE_BUBBLE_POST:(t,e)=>(e.ui.isBubblePost=!t.ui.isBubblePost,e),CLOSE_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!1,e),OPEN_INNER_NOTIF:(t,e)=>(e.ui.openInnerNotif=""===e.ui.openInnerNotif?c.default.noInnerNotif:e.ui.openInnerNotif,e),ON_CHANGE_INPUT_POST:(t,e)=>{const B=e.ui.inputPost;return window.talknWindow.ext.to("setInputPost",{inputPost:B}),e},GET_CLIENT_METAS:(t,e)=>{let B=!1,{clientMetas:I}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(I).forEach((t,F)=>{I[t]&&""!==I[t]&&i[t]!==I[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),B=!0,e.thread.serverMetas[t]=I[t])}),B)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={isUrl:t=>!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*|\\/)?$","i").test(t),getSaveFaviconName:t=>{if(t){const e=t.replace(/\u002f/g,"_");return e.indexOf(".png")>0?e:e+".png"}},trimPx:t=>t.toString().replace("px","")}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(2)),F=I(B(95)),c=I(B(30)),l=I(B(96)),g=I(B(97));e.default=class{constructor(t){this.ui=new i.default(t.ui),this.componentDidMounts=new F.default(t.componentDidMounts),this.uiTimeMarker=new c.default(t.uiTimeMarker),this.style=new l.default({...t,ui:this.ui}),this.actionLog=new g.default}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){return[]}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(0));e.default=i.default},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(7)),F=I(B(11)),c=I(B(12));class l{constructor(t,e){this.env=F.default.PRODUCTION,this.type=F.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=c.default.HTTPS_PROTOCOL,this.host=location.host,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:c.default.HTTPS_PROTOCOL,host:location.host}};const B=l.getInitialRootCh(i.default.env),I=l.getFirstHasSlach(B);this.env=i.default.env,this.id=t,this.hasSlash=e?e.hasSlash:l.getLastHasSlach(B),this.ch=e?e.ch:l.getCh(B,I,this.hasSlash),this.protocol=e?e.protocol:l.getProtocol(),this.host=e?e.host:location.host}static getInitialRootCh(t){let e=location.href;switch(e=e.replace(c.default.HTTPS_PROTOCOL+"/","").replace(c.default.HTTP_PROTOCOL+"/",""),t){case F.default.PRODUCTION:e=e.replace("/"+F.default.PRODUCTION_DOMAIN,"/");break;case F.default.LOCALHOST:e=e.replace("/"+F.default.DEVELOPMENT_DOMAIN,"/");break;case F.default.DEVELOPMENT:e=e.replace(":"+F.default.PORTS.DEVELOPMENT,"").replace(":"+F.default.PORTS.DEVELOPMENT_API,""),0===e.indexOf(`/${F.default.DEVELOPMENT_DOMAIN}/`)&&(e=e.replace("/"+F.default.DEVELOPMENT_DOMAIN,""))}return e}static getType(t,e){let B=F.default.APP_TYPES.API;return t?F.default.APP_TYPES.EXTENSION:e?F.default.APP_TYPES.PORTAL:B}static getProtocol(){return location.protocol===c.default.HTTPS_PROTOCOL?c.default.HTTPS_PROTOCOL:location.protocol===c.default.HTTP_PROTOCOL?c.default.HTTP_PROTOCOL:c.default.TALKN_PROTOCOL}static getFirstHasSlach(t){return t.startsWith("/")}static getLastHasSlach(t){return t.endsWith("/")}static getCh(t,e,B){let I=t;return I=e?I:"/"+I,I=B?I:I+"/",I=I.replace(/^\/\//,"/"),I}}e.default=l},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(12));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(i.default.API_TO_SERVER_REQUEST)?t.replace(i.default.API_TO_SERVER_REQUEST,i.default.API_TO_CLIENT_REQUEST):0===t.indexOf(i.default.SERVER_TO_API_EMIT)?t.replace(i.default.SERVER_TO_API_EMIT,i.default.API_TO_CLIENT_EMIT):0===t.indexOf(i.default.SERVER_TO_API_BROADCAST)?t.replace(i.default.SERVER_TO_API_BROADCAST,i.default.API_TO_CLIENT_BROADCAST):"API_TO_CLIENT[ACTION]:"+t}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return"EXT_TO_CLIENT[ACTION]:"+t}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(6)),F=I(B(27)),c=I(B(101)),l=I(B(102)),g=I(B(8)),Q=I(B(18)),U=I(B(19)),s=I(B(29)),d=I(B(14)),n=I(B(103));class a{constructor(t,e={}){this.bootOption=t,this.ranks=new c.default,this.menuLogs=new l.default(e.menuLogs),this.posts=new g.default,this.postsMulti=new g.default,this.postsSingle=new g.default,this.postsChild=new g.default,this.postsTimeline=new Q.default,this.postsTimelineStock=new U.default,this.postsLogs=new g.default,this.analyze=new s.default,this.thread=new d.default(this.bootOption,e.thread),this.threadDetail=new d.default(this.bootOption,e.thread),this.app=new i.default(a.getAppParams(this.thread,this.bootOption,e)),this.user=new F.default(a.getUserParams(this,e)),this.actionLog=new n.default}static getAppParams(t,e,B){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){if(e&&e.user&&e.user.uid)return{...e.user};return{dispThreadType:t.thread.ch===t.app.rootCh?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=a},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,B){"use strict";var I=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=I(B(4));class F extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=F},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,B){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){const{api:e,store:B}=t;return{ver:"2020/09/07",useIo:t=>e("use",t),tune:(t,B)=>e("tune",t,B),untune:t=>e("untune",{id:t}),rank:t=>e("rank",{thread:{ch:t}}),fetchPosts:t=>e("fetchPosts",{thread:{ch:t}}),post:(t={})=>e("post",{app:{...t}}),getState:()=>B.getState()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,