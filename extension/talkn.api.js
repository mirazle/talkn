!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=46)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==r.getType(t)&&"Null"!==r.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||("function() {}"===e||("function (){}"===e||("function () {}"===e||"()=>{}"===e)))}create(t){const e=this.constructor.name;r.getType(t);return Object.keys(t).forEach(n=>{let i,s,o=null,a=!1,u=!1,c=()=>{},l=null;if("Object"===r.getType(t[n])){i=t[n];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,u=i.isAcceptBlank?i.isAcceptBlank:u,o=!e&&i.def?i.def:o,l=e||!i.value&&""!==i.value?i:i.value,l=e&&o?o:l,s=r.getType(l),c=i.valid?i.valid:c}else l=t[n],o=l,a=a,u=u,s=r.getType(l),c=c;const f=t=>{let i=null;const o=`${e}.${n}`,f=l,p=s,d=t,h=r.getType(t);return h!==s&&(i=`SCHEMA_TYPE : ${o} [validType: ${s}][paramsType: ${h}]`),a&&null===t&&(i="SCHEMA_IS_ACCEPT_NULL :  "+o),u&&""===t&&(i="SCHEMA_IS_ACCEPT_BLANK :  "+o),"Function"===r.getType(c)&&c(t)&&(i="SCHEMA_YOUR_VALID_METHOD :  "+o),{pointer:o,validValue:f,validType:p,paramsValue:d,paramsType:h,error:i}},{pointer:p,validValue:d,validType:h,paramsValue:g,paramsType:T,error:y}=f(l);if(null===y)Object.defineProperty(this,n,{get:()=>l,set:t=>{const e=f(l);if(null===y)return l=t,Object.assign(Object.assign({},this),{[n]:l});throw this.validWarn(e),y},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw y;console.warn(y)}}),this}canSet(t,e){try{const n=this[t];if(void 0===n)return!0;if(null===n)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:r}=this[t]=e;return!r&&(this[t]=n,!0)}catch(n){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),"BAD CAN SET: "+n}}merge(t={},e=!0){try{const n=r.getType(t),i=Object.keys(t);if(i.length>0){let r=Object.assign({},this);return i.forEach(e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?r[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))}),"Array"===n?(r=Object.values(r),e?new this.constructor(r):r):e?new this.constructor(r):r}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${r.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${r.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach(n=>{let r=t[n];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?e[n]=r.default:e[n]=r}),e}forEach(t){return Object.values(this).forEach(t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=r},function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((n=r[i])===e||n.fn===e){r.splice(i,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r,i=n(61),s=n(30),o=n(63),a=n(64),u=n(65);"undefined"!=typeof ArrayBuffer&&(r=n(66));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;e.protocol=3;var p=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=i(p),h={type:"error",data:"parser error"},g=n(67);function T(t,e,n){for(var r=new Array(t.length),i=a(t.length,n),s=function(t,n,i){e(n,(function(e,n){r[t]=n,i(e,r)}))},o=0;o<t.length;o++)s(o,t[o],i)}e.encodePacket=function(t,n,r,i){"function"==typeof n&&(i=n,n=!1),"function"==typeof r&&(i=r,r=null);var s=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&s instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=t.data,s=new Uint8Array(i),o=new Uint8Array(1+i.byteLength);o[0]=p[t.type];for(var a=0;a<s.length;a++)o[a+1]=s[a];return r(o.buffer)}(t,n,i);if(void 0!==g&&s instanceof g)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(f)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},n,!0,r)},i.readAsArrayBuffer(t.data)}(t,n,r);var i=new Uint8Array(1);i[0]=p[t.type];var s=new g([i.buffer,t.data]);return r(s)}(t,n,i);if(s&&s.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,i);var o=p[t.type];return void 0!==t.data&&(o+=r?u.encode(String(t.data),{strict:!1}):String(t.data)),i(""+o)},e.encodeBase64Packet=function(t,n){var r,i="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var s=new FileReader;return s.onload=function(){var t=s.result.split(",")[1];n(i+t)},s.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var o=new Uint8Array(t.data),a=new Array(o.length),u=0;u<o.length;u++)a[u]=o[u];r=String.fromCharCode.apply(null,a)}return i+=btoa(r),n(i)},e.decodePacket=function(t,n,r){if(void 0===t)return h;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return h;var i=t.charAt(0);return Number(i)==i&&d[i]?t.length>1?{type:d[i],data:t.substring(1)}:{type:d[i]}:h}i=new Uint8Array(t)[0];var s=o(t,1);return g&&"blob"===n&&(s=new g([s])),{type:d[i],data:s}},e.decodeBase64Packet=function(t,e){var n=d[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var i=r.decode(t.substr(1));return"blob"===e&&g&&(i=new g([i])),{type:n,data:i}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var i=s(t);if(n&&i)return g&&!f?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");T(t,(function(t,r){e.encodePacket(t,!!i&&n,!1,(function(t){r(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return r(e.join(""))}))},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var i;if("function"==typeof n&&(r=n,n=null),""===t)return r(h,0,1);for(var s,o,a="",u=0,c=t.length;u<c;u++){var l=t.charAt(u);if(":"===l){if(""===a||a!=(s=Number(a)))return r(h,0,1);if(a!=(o=t.substr(u+1,s)).length)return r(h,0,1);if(o.length){if(i=e.decodePacket(o,n,!1),h.type===i.type&&h.data===i.data)return r(h,0,1);if(!1===r(i,u+s,c))return}u+=s,a=""}else a+=l}return""!==a?r(h,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));T(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){return n(null,t)}))}),(function(t,e){var r=e.reduce((function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2}),0),i=new Uint8Array(r),s=0;return e.forEach((function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);n=r.buffer}i[s++]=e?0:1;var a=n.byteLength.toString();for(o=0;o<a.length;o++)i[s++]=parseInt(a[o]);i[s++]=255;for(r=new Uint8Array(n),o=0;o<r.length;o++)i[s++]=r[o]})),n(i.buffer)}))},e.encodePayloadAsBlob=function(t,n){T(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),i=0;i<t.length;i++)r[i]=t.charCodeAt(i);t=r.buffer,e[0]=0}var s=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),o=new Uint8Array(s.length+1);for(i=0;i<s.length;i++)o[i]=parseInt(s[i]);if(o[s.length]=255,g){var a=new g([e.buffer,o.buffer,t]);n(null,a)}}))}),(function(t,e){return n(new g(e))}))},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var i=t,s=[];i.byteLength>0;){for(var a=new Uint8Array(i),u=0===a[0],c="",l=1;255!==a[l];l++){if(c.length>310)return r(h,0,1);c+=a[l]}i=o(i,2+c.length),c=parseInt(c);var f=o(i,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var p=new Uint8Array(f);f="";for(l=0;l<p.length;l++)f+=String.fromCharCode(p[l])}s.push(f),i=o(i,c)}var d=s.length;s.forEach((function(t,i){r(e.decodePacket(t,n,!0),i,d)}))}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(7)),s={PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0)),s=r(n(38)),o=r(n(5));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const n=t.ch?t.ch:"/",r=t.name?t.name:"talkn",u=t.talknIndex?t.talknIndex:0,c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(n),l=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,f=t.rootCh?t.rootCh:n,p=i.default.isSet(t.isRootCh)?t.isRootCh:f===n,d=t.rootTitle?t.rootTitle:"talkn",h=a.getMediaSrc(t.protocol,n),g=a.getMediaType(h,t),T=t&&t.tuned?t.tuned:"",y=a.getDispThreadType(t,c),E=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,_=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,O=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,C=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,P=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,I=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,A=t.inputPost?t.inputPost:"",b=!!t.inputStampId&&t.inputStampId,v=t.inputCurrentTime?t.inputCurrentTime:0,w=t.inputSearch?t.inputSearch:"",R=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=t&&t.actioned?t.actioned:"",L=i.default.isSet(t.debug)?t.debug:"";return this.create({name:r,talknIndex:u,isRootCh:p,isLinkCh:l,isMediaCh:c,rootCh:f,rootTitle:d,chType:g,dispThreadType:y,tuned:T,multistream:E,findType:m,offsetFindId:S,offsetTimelineFindId:_,offsetSingleFindId:O,offsetMultiFindId:C,offsetChildFindId:P,offsetLogsFindId:I,inputPost:A,inputStampId:b,inputCurrentTime:v,inputSearch:w,isToggleMultistream:R,actioned:D,debug:L})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),n=e.length;let r="html";for(let i=0;i<n;i++){const n=new RegExp(`.${e[i]}$`);if(t.match(n)){r=a.mediaChTagTypes[e[i]];break}}return r}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some(e=>{const n=new RegExp(`.${e}/$|.${e}$`);return t.match(n)})}static isActiveMultistream({app:t,ui:e},n=""){return"Index"===e.menuComponent&&t.dispThreadType===a.dispThreadTypeMulti}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,rank:e},n,r,i=""){let s="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return s=(t=a.getStepDispThreadType({app:t,rank:e},n,r,i)).dispThreadType,{app:t,stepTo:`${o} to ${s}`}}static getStepDispThreadType({app:t,rank:e},n={},r,i){const s=t||{};if(s.isLinkCh=!1,s.offsetFindId=a.defaultOffsetFindId,n.isMediaCh)return s.dispThreadType=a.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:a.defaultOffsetFindId,s.isLinkCh="toLinks"===i||"findMediaCh"===i,s.isMediaCh=!0,s;if("toLinks"===i){const t=e.some(t=>t.ch===r||t.ch===r+"/");if(!t)return s.offsetFindId=a.defaultOffsetFindId,s.dispThreadType=a.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===r?s.multistream?s.dispThreadType=a.dispThreadTypeMulti:s.dispThreadType=a.dispThreadTypeSingle:s.dispThreadType=a.dispThreadTypeChild,s}}e.default=a},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(36)),s=r(n(8)),o=r(n(0)),a=r(n(4));class u extends o.default{constructor(t={},e,n={}){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const r=u.isWindowObj(t)?u.constructorFromWindow(t,e,n):t;return this.create(r)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e,n){const r=!!e.ch&&e.ch,i=u.getCh(e,r);if(n.ch&&n.ch===i)return n;{let n={},s="";return n.ch=i,n.chs=["/"],n.hasSlash=!!e.hasslash&&o.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=u.getDefaultFavicon(),n.findType=u.findTypeAll,r?(n.protocol=u.getProtocol(r),n.host=u.getHost(r),n.chs=r.chs&&r.chs.length>0?r.chs:u.getChs(i)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:u.getChs(i),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=u.getFaviconFromWindow(window)),n.title=u.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=u.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=u.getIsSelfCh(s,n.ch),n.createTime="",n.updateTime="",n}}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const r="/"===t.slice(-1)?t:t+"/";if("/"!==r){const t=r.split("/"),i=t.length;let s="";for(var n=1;n<i;n++)""!==t[n]&&(s+=t[n],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):i.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=u.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,n="http://",r="https://",i=location.host;if(e.indexOf(n)||e.indexOf(r)){const t=n+i+(e||"/favicon.ico");return 1===t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,n={}){let r={dispType:"",isSchema:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return r.isSchema=u.getStatusIsSchema(t),r.isRequireUpsert=u.getStatusIsRequireUpsert(t,n,r.isSchema),r.isMultistream=u.getStatusIsMultistream(e),r.isToggleMultistream=u.getStatusIsToggleMultistream(e),r.isMediaCh=u.getStatusIsMediaCh(t.ch),r}static getStatusIsSchema(t){if(t.createTime&&t.updateTime){if((t.createTime.getTime?t.createTime.getTime():t.createTime)===(t.updateTime.getTime?t.updateTime.getTime():t.updateTime)){if(t.lastPost.createTime.getTime()===t.lastPost.updateTime.getTime())return!0}}return!1}static getStatusIsRequireUpsert(t,e,n=!1){if(t.updateTime){const r=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,s=i.getFullYear(),o=i.getMonth(),a=i.getDate(),u=i.getHours(),c=(i.getMinutes(),new Date(s,o,a,u-e.server.findOneThreadActiveHour).getTime());return!!n||r<c}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=u.findTypes[u.findTypeHtml],n=u.findTypes[u.findTypeMusic],r=u.findTypes[u.findTypeVideo];let i="",s="";return t.indexOf(";")>0&&(s=t.split(";")[0]),t.indexOf("/")>0&&(s=t.split("/")[0]),i=u.findTypeHtml,e.includes(s)&&(i=u.findTypeHtml),n.includes(s)&&(i=u.findTypeMusic),r.includes(s)&&(i=u.findTypeVideo),i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=u},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(4)),s=r(n(79)),o=r(n(13)),a=r(n(14)),u=r(n(40));class c{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:n,postsMulti:r,postsSingle:s,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return n;case i.default.dispThreadTypeMulti:return r;case i.default.dispThreadTypeSingle:return s;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:n,posts:r}=t,o=r&&r.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new u.default,t.postsChild=[],t.postsLogs=[],n.dispThreadType){case i.default.dispThreadTypeTimeline:t=c.getAnyActionPostsTimeline(t,r,e,o);break;case i.default.dispThreadTypeMulti:t.postsMulti=o?r:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=o?r:[];break;case i.default.dispThreadTypeChild:t.postsChild=o?r:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=o?r:[]}return t}static getAnyActionPostsTimeline(t,e,n,r){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new o.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new o.default,t.postsTimelineStock=new a.default,r)){const n=e.length;for(let r=0;r<n;r++)0===e[r].currentTime?t.postsTimeline.push(e[r]):t.postsTimelineStock.push(e[r])}return t}}e.default=c},function(t,e){var n,r,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(t){n=s}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var t=a(p);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new h(t,e)),1!==c.length||l||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get CONNECTION_SERVER_KEY(){return"connectionServer"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{user:["uid"],setting:"*",thread:["watchCnt"]},responseBroadcastState:{}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*",app:["dispThreadType","offsetFindId","tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{thread:"*",app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["tuned","rootCh","multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:"*",rank:"*"}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:["requestLoginType"]},requestPrivateState:{user:["uid","href"]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["watchCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),n=e[0].split("[")[0];let r;return r=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:n,actionType:r,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,n){const r=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=s.map[r];let u={[s.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach(t=>{u[t]||(u[t]={}),a[t].forEach(r=>{if(!u[t][r]){let s=e[t][r];n&&n[t]&&i.default.isSet(n[t][r])&&(s=n[t][r]),u[t][r]=s}})}),Object.keys(o).forEach(t=>{u[t]||(u[t]={}),o[t].forEach(e=>{u[t][e]||(u[t][e]=n)})}),u}static getResponseState(t,e,n){const r=e.type,i=s.map[r][`response${t}State`];let o={[s.REDUX_ACTION_KEY]:r};return Object.keys(i).forEach(t=>{if(!n[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const r=i[t];let s=n[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===r?o=Object.assign(Object.assign({},o),{[t]:s}):r.forEach(r=>{if(void 0===n[t][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${r}`;o=Object.assign(Object.assign({},o),{[t]:Object.assign(Object.assign({},o[t]),{[r]:n[t][r]})})})}}),o}static getRequestActionState(t,e=null,n=null){return"string"==typeof e&&null===n?{type:t}:"object"==typeof e&&"object"==typeof n?Object.assign(Object.assign(Object.assign({},e),n),{type:t}):"string"==typeof e&&"object"==typeof n?Object.assign(Object.assign({},n),{type:t}):Object.assign(Object.assign({},e),{type:t})}}e.default=s},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(49)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(7))},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,i=n.length;r<i;r++){var s=n[r].split("=");e[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(68)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(7))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(112));class s{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(s.inputs).forEach(t=>{s.inputs[t].forEach(e=>{this.belongCoverTypes[e]=t})}),Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(t);const e=s.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL}),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=s.defaultModelKey,e=0,n=!0){let r=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const n=o[t],s=i[n];if(n>e)break;r=s}return n?r+1:r}static get inputs(){return{[s.TYPES.LIKE.LABEL]:[1,2,3,4,5],[s.TYPES.MONEY.LABEL]:[100],[s.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[s.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[s.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[s.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[s.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[s.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[s.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[s.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=s},function(t,e,n){var r=n(50)("socket.io-parser"),i=n(1),s=n(53),o=n(24),a=n(25);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=f;var c=e.ERROR+'"encode error"';function l(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return c;n+=i}return r("encoded %j as %s",t,n),n}function f(){this.reconstructor=null}function p(t){this.reconPack=t,this.buffers=[]}function d(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){s.removeBlobs(t,(function(t){var n=s.deconstructPacket(t),r=l(n.packet),i=n.buffers;i.unshift(r),e(i)}))}(t,n):n([l(t)])},i(f.prototype),f.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return d("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var s="";"-"!==t.charAt(++n)&&(s+=t.charAt(n),n!=t.length););if(s!=Number(s)||"-"!==t.charAt(n))throw new Error("Illegal attachments");i.attachments=Number(s)}if("/"===t.charAt(n+1))for(i.nsp="";++n;){if(","===(u=t.charAt(n)))break;if(i.nsp+=u,n===t.length)break}else i.nsp="/";var a=t.charAt(n+1);if(""!==a&&Number(a)==a){for(i.id="";++n;){var u;if(null==(u=t.charAt(n))||Number(u)!=u){--n;break}if(i.id+=t.charAt(n),n===t.length)break}i.id=Number(i.id)}if(t.charAt(++n)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==c&&(i.type===e.ERROR||o(c))))return d("invalid payload");i.data=c}return r("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=s.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(54),i=n(55),s=n(56);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=p(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):p(t,e);if("Buffer"===e.type&&s(e.data))return p(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function p(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function h(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return x(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(t).length;default:if(r)return x(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return w(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return b(this,e,n);case"latin1":case"binary":return v(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function T(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:E(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):E(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function E(t,e,n,r,i){var s,o=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,n/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var l=-1;for(s=n;s<a;s++)if(c(t,s)===c(e,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*o}else-1!==l&&(s-=s-l),l=-1}else for(n+u>a&&(n=a-u),s=n;s>=0;s--){for(var f=!0,p=0;p<u;p++)if(c(t,s+p)!==c(e,p)){f=!1;break}if(f)return s}return-1}function m(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");r>s/2&&(r=s/2);for(var o=0;o<r;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[n+o]=a}return o}function S(t,e,n,r){return $(x(e,t.length-n),t,n,r)}function _(t,e,n,r){return $(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function O(t,e,n,r){return _(t,e,n,r)}function C(t,e,n,r){return $(U(e),t,n,r)}function P(t,e,n,r){return $(function(t,e){for(var n,r,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)n=t.charCodeAt(o),r=n>>8,i=n%256,s.push(i),s.push(r);return s}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var s,o,a,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&c)<<6|63&s)>127&&(l=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&c)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,s=Math.min(n,r);i<s;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!s(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)T(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)T(this,e,e+3),T(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)T(this,e,e+7),T(this,e+1,e+6),T(this,e+2,e+5),T(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):g.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(r>>>=0),o=(n>>>=0)-(e>>>=0),a=Math.min(s,o),c=this.slice(r,i),l=t.slice(e,n),f=0;f<a;++f)if(c[f]!==l[f]){s=c[f],o=l[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return S(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return O(this,t,e,n);case"base64":return C(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,e,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function b(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function v(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function w(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",s=e;s<n;++s)i+=j(t[s]);return i}function R(t,e,n){for(var r=t.slice(e,n),i="",s=0;s<r.length;s+=2)i+=String.fromCharCode(r[s]+256*r[s+1]);return i}function D(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,n,r,i,s){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,s=Math.min(t.length-n,2);i<s;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function N(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,s=Math.min(t.length-n,4);i<s;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function k(t,e,n,r,i,s){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function F(t,e,n,r,s){return s||k(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function Y(t,e,n,r,s){return s||k(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var s=0;s<i;++s)n[s]=this[s+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,s=0;++s<e&&(i*=256);)r+=this[t+s]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||D(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||D(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||D(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||D(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||D(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,s=0;++s<e&&(i*=256);)r+=this[t+s]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=e,i=1,s=this[t+--r];r>0&&(i*=256);)s+=this[t+--r]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return e||D(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||D(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||D(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||D(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||D(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,s=0;for(this[e]=255&t;++s<n&&(i*=256);)this[e+s]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):N(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<n&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var s=n-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):N(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return Y(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return Y(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,s=r-n;if(this===t&&n<e&&e<r)for(i=s-1;i>=0;--i)t[i+e]=this[i+n];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+s),e);return s},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var s;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(s=e;s<n;++s)this[s]=t;else{var o=u.isBuffer(t)?t:x(new u(t,r).toString()),a=o.length;for(s=0;s<n-e;++s)this[s+e]=o[s%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function x(t,e){var n;e=e||1/0;for(var r=t.length,i=null,s=[],o=0;o<r;++o){if((n=t.charCodeAt(o))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===r){(e-=3)>-1&&s.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&s.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;s.push(n)}else if(n<2048){if((e-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function U(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function $(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(26))},function(t,e,n){var r=n(59),i=n(19);t.exports=function(t){var e=t.xdomain,n=t.xscheme,s=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&s)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e){t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(t,e,n){var r=n(2),i=n(1);function s(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=s,i(s.prototype),s.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},s.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},s.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},s.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},s.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},s.prototype.onData=function(t){var e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)},s.prototype.onPacket=function(t){this.emit("packet",t)},s.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){"use strict";(function(t,r){var i,s=n(45);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var o=Object(s.a)(i);e.a=o}).call(this,n(26),n(83)(t))},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,i=t.indexOf("["),s=t.indexOf("]");-1!=i&&-1!=s&&(t=t.substring(0,i)+t.substring(i,s).replace(/:/g,";")+t.substring(s,t.length));for(var o=n.exec(t||""),a={},u=14;u--;)a[r[u]]=o[u]||"";return-1!=i&&-1!=s&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var n=1e3,r=6e4,i=60*r,s=24*i;function o(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var a=typeof t;if("string"===a&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*r;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===a&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=s)return o(t,e,s,"day");if(e>=i)return o(t,e,i,"hour");if(e>=r)return o(t,e,r,"minute");if(e>=n)return o(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=s)return Math.round(t/s)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||r&&(t instanceof ArrayBuffer||function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,r="function"==typeof ArrayBuffer}).call(this,n(17).Buffer)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(57),i=n(33),s=n(1),o=n(16),a=n(34),u=n(35),c=n(9)("socket.io-client:manager"),l=n(32),f=n(73),p=Object.prototype.hasOwnProperty;function d(t,e){if(!(this instanceof d))return new d(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||o;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=d,d.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},d.prototype.updateSocketIds=function(){for(var t in this.nsps)p.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},d.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},s(d.prototype),d.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},d.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},d.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var s=a(n,"open",(function(){i.onopen(),t&&t()})),o=a(n,"error",(function(e){if(c("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout((function(){c("connect attempt timed out after %d",u),s.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",u)}),u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(s),this.subs.push(o),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(t){this.decoder.add(t)},d.prototype.ondecoded=function(t){this.emit("packet",t)},d.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},d.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new i(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",s),n.on("connect",(function(){n.id=r.generateId(t)})),this.autoConnect&&s()}function s(){~l(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(t){var e=l(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},d.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()})))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},d.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout((function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var r=n(18),i=n(60),s=n(69),o=n(70);e.polling=function(t){var e=!1,n=!1,o=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new i(t);if(!o)throw new Error("JSONP disabled");return new s(t)},e.websocket=o},function(t,e,n){var r=n(20),i=n(10),s=n(2),o=n(11),a=n(31),u=n(12)("engine.io-client:polling");t.exports=l;var c=null!=new(n(18))({xdomain:!1}).responseType;function l(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),r.call(this,t)}o(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(t){var e=this;function n(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",(function(){u("pre-pause polling complete"),--r||n()}))),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",(function(){u("pre-pause writing complete"),--r||n()})))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(t){var e=this;u("polling got data %s",t);s.decodePayload(t,this.socket.binaryType,(function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},l.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,n)}))},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var r=n(62),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var i=0,a=n.length;i<a;i++)if(t(n[i]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||s&&n instanceof Blob||o&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&t(n[u]))return!0;return!1}}).call(this,n(17).Buffer)},function(t,e,n){"use strict";var r,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),s={},o=0,a=0;function u(t){var e="";do{e=i[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function c(){var t=u(+new Date);return t!==r?(o=0,r=t):t+"."+u(o++)}for(;a<64;a++)s[i[a]]=a;c.encode=u,c.decode=function(t){var e=0;for(a=0;a<t.length;a++)e=64*e+s[t.charAt(a)];return e},t.exports=c},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(16),i=n(1),s=n(72),o=n(34),a=n(35),u=n(9)("socket.io-client:socket"),c=n(10),l=n(30);t.exports=d;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=i.prototype.emit;function d(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}i(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[o(t,"open",a(this,"onopen")),o(t,"packet",a(this,"onpacket")),o(t,"close",a(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},d.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},d.prototype.emit=function(t){if(f.hasOwnProperty(t))return p.apply(this,arguments),this;var e=s(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(e))?r.BINARY_EVENT:r.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},d.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:r.CONNECT,query:t})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},d.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===r.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(t);break;case r.ACK:case r.BINARY_ACK:this.onack(t);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",t.data)}},d.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?p.apply(this,e):this.receiveBuffer.push(e)},d.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var i=s(arguments);u("sending ack %j",i),e.packet({type:l(i)?r.BINARY_ACK:r.ACK,id:t,data:i})}}},d.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)p.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(t){return this.flags.compress=t,this},d.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3)),s=r(n(37)),{SUB_DOMAINS:o,DEVELOPMENT:a}=i.default,{domain:u}=s.default,c="object"==typeof location;s.default.mediaSecondInterval=200,s.default.screenMode={small:600,middle:960},console.log(s.default.env),s.default.protcol=c?0===location.href.indexOf("https")?"https":"http":"",s.default.server=u,s.default.portalPath=(s.default.env,`//${o.PORTAL}.${u}/`),s.default.clientPath=`//${o.CLIENT}.${u}/`,s.default.assetsPath=`//${o.ASSETS}.${u}/`,s.default.sessionPath=`//${o.SESSION}.${u}/`,s.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"},e.default=s.default},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3)),s=r(n(74)),o=r(n(7)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_IP:c,LOCALHOST:l,PRODUCTION_DOMAIN:f,DEVELOPMENT_DOMAIN:p,SUB_DOMAINS:d,PORTS:h}=i.default,g=s.default.hostname(),T=function(t,e){if(t.indexOf(e)>=0)return i.default.PRODUCTION;if(t===i.default.DEVELOPMENT_DOMAIN){if("browser"===o.default.title){const t=Number(location.port);if(t===i.default.PORTS.DEVELOPMENT||t===i.default.PORTS.DEVELOPMENT_API)return i.default.DEVELOPMENT}return i.default.LOCALHOST}}(g,"ec2.internal"),y=T===u,E=T===a?f:p,m=`${d.WWW}.${E}`,S=`${d.API}.${E}`,_=y?`${l}:${h.DEVELOPMENT_API}/talkn.api.js`:S+"/v1",O=y?`${l}:${h.DEVELOPMENT}/talkn.client.js`:`${d.CLIENT}.${E}`,C=`${d.DESC}.${E}`,P=`${d.PORTAL}.${E}`,I=`${d.ASSETS}.${E}`,A=I+"/img/",b={domain:E,env:T,hostName:g,apiURL:S,apiAccessURL:_,wwwURL:m,descURL:C,portalURL:P,clientURL:O,assetsURL:I,autoURL:`${d.AUTO}.${E}`,extURL:`${d.EXT}.${E}`,transactionURL:`${d.TRANSACTION}.${E}`,assetsImgPath:A,assetsIconPath:I+"/icon/",assetsJsPath:I+"/js/",sessionURL:`${d.SESSION}.${E}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${A}talkn_logo_html.png`,Music:`//${A}talkn_logo_music.png`,Video:`//${A}talkn_logo_video.png`}};e.default=Object.assign({},b)},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{static get defaultFindId(){return"000000000000000000000000"}constructor(t={}){return super(),this.create({})}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0)),s=r(n(38));class o extends i.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",n=t&&t.utype?t.utype:"",r=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,u=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,c=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,l=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,f=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;t.requestLoginType&&t.requestLoginType;return this.create({uid:e,utype:n,tuned:r,multistreamed:i,actioned:s,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:l,offsetLogsFindId:f,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:t&&t.href?t.href:"/"}}e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){super();return this.create({watchCnt:0})}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){return super(),this.create(Object.assign({},t))}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(n=>{e[t[n].name]=t[n].value}),e}}e.default=s},function(t,e,n){"use strict";n.r(e),n.d(e,"__DO_NOT_USE__ActionTypes",(function(){return s})),n.d(e,"applyMiddleware",(function(){return T})),n.d(e,"bindActionCreators",(function(){return f})),n.d(e,"combineReducers",(function(){return c})),n.d(e,"compose",(function(){return g})),n.d(e,"createStore",(function(){return a}));var r=n(21),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},s={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function o(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function a(t,e,n){var i;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(a)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var u=t,c=e,l=[],f=l,p=!1;function d(){f===l&&(f=l.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function g(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return d(),f.push(t),function(){if(e){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,d();var n=f.indexOf(t);f.splice(n,1),l=null}}}function T(t){if(!o(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=u(c,t)}finally{p=!1}for(var e=l=f,n=0;n<e.length;n++){(0,e[n])()}return t}function y(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");u=t,T({type:s.REPLACE})}function E(){var t,e=g;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(h())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t}return T({type:s.INIT}),(i={dispatch:T,subscribe:g,getState:h,replaceReducer:y})[r.a]=E,i}function u(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];0,"function"==typeof t[i]&&(n[i]=t[i])}var o,a=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:s.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:s.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+s.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var r=!1,i={},s=0;s<a.length;s++){var c=a[s],l=n[c],f=t[c],p=l(f,e);if(void 0===p){var d=u(c,e);throw new Error(d)}i[c]=p,r=r||p!==f}return(r=r||a.length!==Object.keys(t).length)?i:t}}function l(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return l(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in t){var i=t[r];"function"==typeof i&&(n[r]=l(i,e))}return n}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function d(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n}function h(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?d(n,!0).forEach((function(e){p(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):d(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function g(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function T(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},s=e.map((function(t){return t(i)}));return h({},n,{dispatch:r=g.apply(void 0,s)(n.dispatch)})}}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]=Object.assign({},e),t}}e.default=s},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(47)),s=r(n(36)),o=r(n(3)),a=r(n(75)),u=r(n(76)),c=r(n(8)),l=r(n(81)),f=r(n(82)),p=r(n(109)),d=r(n(110)),h=r(n(111)),g=r(n(116)),T=r(n(5)),y=r(n(117)),E=r(n(13)),m=r(n(14));class S{constructor(){const{env:t,apiScript:e}=S.getEnvAndApiScript(),n=S.getExtScript(t),r=S.getClientScript(t),i=e?S.rebuildAttributes(e.attributes):{},s=n?S.rebuildAttributes(n.attributes):{},o=(r&&S.rebuildAttributes(r.attributes),S.getBootAttributes(i,s));return S.initialBootOption(t,o,r,n)}static getEnvAndApiScript(){const{SUB_DOMAINS:t,PORTS:e,talknApiJs:n}=o.default,r=`${c.default.HTTPS_PROTOCOL}//${t.API}.${o.default.PRODUCTION_DOMAIN}/v${s.default.apiVer}`,i=document.querySelector(`script[src='${r}']`);if(i)return{env:o.default.PRODUCTION,apiScript:i};const a=`//${t.API}.${o.default.PRODUCTION_DOMAIN}/v${s.default.apiVer}`,u=document.querySelector(`script[src='${a}']`);if(u)return{env:o.default.PRODUCTION,apiScript:u};const l=`${c.default.HTTPS_PROTOCOL}//${t.API}.${o.default.DEVELOPMENT_DOMAIN}/v${s.default.apiVer}`,f=document.querySelector(`script[src='${l}']`);if(f)return{env:o.default.LOCALHOST,apiScript:f};const p=`//${t.API}.${o.default.DEVELOPMENT_DOMAIN}/v${s.default.apiVer}`,d=document.querySelector(`script[src='${p}']`);if(d)return{env:o.default.LOCALHOST,apiScript:d};const h=`${c.default.HTTPS_PROTOCOL}//${o.default.DEVELOPMENT_DOMAIN}:${e.DEVELOPMENT_API}/${n}`,g=document.querySelector(`script[src='${h}']`);if(g)return{env:o.default.DEVELOPMENT,apiScript:g};const T=`//${o.default.DEVELOPMENT_DOMAIN}:${e.DEVELOPMENT_API}/${n}`,y=document.querySelector(`script[src='${T}']`);if(y)return{env:o.default.DEVELOPMENT,apiScript:y};throw"NO EXIST API SCRIPT."}static getClientScript(t){const{SUB_DOMAINS:e,PORTS:n,talknClientJs:r}=o.default;let i;switch(t){case o.default.PRODUCTION:i=`${c.default.HTTPS_PROTOCOL}//${e.CLIENT}.${o.default.PRODUCTION_DOMAIN}`;break;case o.default.LOCALHOST:i=`${c.default.HTTPS_PROTOCOL}//${e.CLIENT}.${o.default.DEVELOPMENT_DOMAIN}`;break;case o.default.DEVELOPMENT:i=`${c.default.HTTPS_PROTOCOL}//${o.default.DEVELOPMENT_DOMAIN}:${n.DEVELOPMENT}/${r}`}const s=document.querySelector(`script[src='${i}']`);return s||void 0}static getExtScript(t){const{SUB_DOMAINS:e}=o.default;switch(t){case o.default.PRODUCTION:const t=`${c.default.HTTPS_PROTOCOL}//${e.EXT}.${o.default.PRODUCTION_DOMAIN}`,n=document.querySelector(`script[src='${t}']`);if(n)return n;const r=`//${e.EXT}.${o.default.PRODUCTION_DOMAIN}`,i=document.querySelector(`script[src='${r}']`);if(i)return i;break;case o.default.LOCALHOST:case o.default.DEVELOPMENT:const s=`${c.default.HTTPS_PROTOCOL}://${e.EXT}.${o.default.DEVELOPMENT_DOMAIN}`,a=document.querySelector(`script[src='${s}']`);if(a)return a;const u=`//${e.EXT}.${o.default.DEVELOPMENT_DOMAIN}`,l=document.querySelector(`script[src='${u}']`);if(l)return l}}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(n=>{e[t[n].name]=t[n].value}),e}static getBootAttributes(t,e){return e?Object.assign(Object.assign({},t),e):Object.assign({},t)}static getInitialRootCh(t,e){let n=e&&e.ch?e.ch:location.href;switch(n=n.replace(c.default.HTTPS_PROTOCOL+"/","").replace(c.default.HTTP_PROTOCOL+"/",""),t){case o.default.PRODUCTION:n=n===`/${o.default.PRODUCTION_DOMAIN}/`?"/":n;break;case o.default.LOCALHOST:n=n===`/${o.default.DEVELOPMENT_DOMAIN}/`?"/":n;break;case o.default.DEVELOPMENT:n=n.replace(""+o.default.DEVELOPMENT_DOMAIN,"").replace(":"+o.default.PORTS.DEVELOPMENT,"").replace(":"+o.default.PORTS.DEVELOPMENT_API,"")}return n}static getType(t,e){let n=o.default.APP_TYPES.API;return t?o.default.APP_TYPES.EXTENSION:e?o.default.APP_TYPES.PORTAL:n}static getProtocol(){return location.protocol===c.default.HTTPS_PROTOCOL?c.default.HTTPS_PROTOCOL:location.protocol===c.default.HTTP_PROTOCOL?c.default.HTTP_PROTOCOL:c.default.TALKN_PROTOCOL}static getFirstHasSlach(t){return 0===t.indexOf("/")}static getLastHasSlach(t){return t.lastIndexOf("/")===t.length-1}static getCh(t,e,n){let r=t;return r=e?r:"/"+r,r=n?r:r+"/",r="//"===r?"/":r,r}static initialBootOption(t,e,n,r){const i=S.getType(r,n),s=S.getInitialRootCh(t,e),o=S.getFirstHasSlach(s),a=S.getLastHasSlach(s);return{env:t,type:i,ch:S.getCh(s,o,a),hasSlash:a,protocol:S.getProtocol(),host:location.host}}}class _{constructor(t,e,n){this.callbacks={};const r=t===o.default.DEVELOPMENT||t===o.default.LOCALHOST?o.default.DEVELOPMENT_DOMAIN:o.default.PRODUCTION_DOMAIN;this.apiStore=e,this.ws=i.default(`${c.default.HTTPS_PROTOCOL}//${r}:${o.default.PORTS.SOCKET_IO}`,{forceNew:!0}),this.onResponseMeAPI(n),this.setUp=this.setUp.bind(this)}setUp(t,e){this.state=t,this.ch=e,this.onResponseChAPI(),this.onRequestAPI()}onRequestAPI(){const t=h.default,e=Object.keys(t),n=e.length,r=(t,e)=>(n,r=(()=>{}))=>{const i=this.apiStore.getState(),s=c.default.getRequestState(t,i,n),o=c.default.getRequestActionState(t,n),{requestState:a,actionState:u}=e(i,s,o);return this.callbacks[a.type]=r,this.ws.emit(a.type,a),this.apiStore.dispatch(u)};for(let i=0;i<n;i++){const n=e[i],s=n.replace(c.default.API_TO_SERVER_REQUEST,""),o=t[n];this[s]=r(n,o)}}onResponseMeAPI(t=null){const e=((t,e=null)=>{const n=this;return r=>{e&&r.type===c.default.CONNECTION_SERVER_KEY&&e(n);const i=t(r);return this.apiStore.dispatch(i)}})(d.default,t);this.on(c.default.CATCH_ME_KEY,e)}onResponseChAPI(t=this.ch){const e=(t=>e=>{const n=t(e);return this.apiStore.dispatch(n)})(g.default);this.on(t,e)}offResponseChAPI(t=this.ch){this.off(t)}on(t,e=(()=>{})){this.ws._callbacks["$"+t]||this.ws.on(t,e)}off(t){this.ws._callbacks["$"+t]&&this.ws.off(t)}}class O{constructor(){this.apiStore=f.default(),this.bootOption=new S,this.exeCoreApi=this.exeCoreApi.bind(this),this.clientTo=this.clientTo.bind(this),this.subscribe=this.subscribe.bind(this),this.onWsServer=this.onWsServer.bind(this),this.exeCallback=this.exeCallback.bind(this),this.afterMediaFilter=this.afterMediaFilter.bind(this),this.apiStore.subscribe(this.subscribe),this.onActions();const t=[],e=this;t.push(new Promise(t=>{window.onmessage=n=>{switch(t&&(e.origin=n.origin,t()),n.data.type){case a.default.CLIENT_TO_API_TYPE:n.data.method===a.default.HANDLE_API_AND_CLIENT?clearInterval(e.bootId):e.exeCoreApi(n);break;case a.default.HANDLE_EXT_AND_API:break;case a.default.EXT_TO_API_TYPE:e.exeCoreApi(n)}}})),t.push(new Promise(t=>{"complete"===document.readyState?new _(this.bootOption.env,e.apiStore,t):window.onload=n=>{new _(this.bootOption.env,e.apiStore,t)}}).then(this.onWsServer)),Promise.all(t).then(t=>{this.bootId=setInterval(()=>{this.clientTo(a.default.HANDLE_API_AND_CLIENT,this.bootOption)},200)})}static getRequestObj(t,e={}){const n=location.href;return{windowType:window.name,type:a.default.API_TO_CLIENT_TYPE,href:n,method:t,params:e}}exeCoreApi(t){if(this.coreApi&&this.coreApi[t.data.method]){const{method:e,params:n}=t.data,r=this.apiStore.getState();this.beforeMediaFilter({method:e,params:n,apiState:r}),this.coreApi[e](n)}}onWsServer(t){this.coreApi=t;const e=new u.default(window,this.bootOption);this.coreApi.setUp(e,this.bootOption.ch),this.bootOption.type!==o.default.APP_TYPES.API&&this.coreApi.tune(e),window.$t=new l.default(this.coreApi)}onActions(){const t=Object.keys(p.default),e=t.length,n=t=>(e,n)=>{const r=p.default[t](e);this.apiStore.getState();return this.apiStore.dispatch(r)};for(let r=0;r<e;r++){const e=t[r];this[e]=n(e)}}subscribe(){if(this.coreApi){const t=this.apiStore.getState();this.afterMediaFilter(t),this.exeCallback(t.app.actioned,t),this.clientTo(t.app.actioned,t)}}exeCallback(t,e){const{actionType:n,actionName:r}=c.default.getSequenceActionMap(t);if(r!==c.default.API_BROADCAST_CALLBACK&&n===c.default.API_RESPONSE_TYPE_EMIT&&this.coreApi.callbacks[r]){const{posts:t,thread:n,user:i}=e;this.coreApi.callbacks[r](e,{posts:t,thread:n,uid:i.uid})}if(n===c.default.API_RESPONSE_TYPE_BROADCAST&&this.coreApi.callbacks[c.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:n,user:i}=e;this.coreApi.callbacks[c.default.API_BROADCAST_CALLBACK](r,{posts:t,thread:n,uid:i.uid})}}beforeMediaFilter({method:t,params:e,apiState:n}){return n.app.isMediaCh&&"post"===t&&(e.app.inputCurrentTime=this.media.currentTime>0?this.media.currentTime:0),e}afterMediaFilter(t){switch(t.app.actioned){case"SERVER_TO_API[EMIT]:fetchPosts":t.app.isMediaCh&&this.media&&"finding"===this.media.status&&this.media.ch===t.thread.ch?(this.media.setPostsTimelines(t),this.media.playing()):(this.media=new C(this),this.media.searching());break;case"SERVER_TO_API[BROADCAST]:post":if(t.app.isMediaCh){const e=t.posts[0];e.ch===this.media.ch&&e.uid===t.user.uid&&this.media.refrectSelfPost(e)}}}clientTo(t,e={}){switch(this.bootOption.type){case o.default.APP_TYPES.PORTAL:const n=O.getRequestObj(t,e);window.postMessage(n,location.href);break;case o.default.APP_TYPES.EXTENSION:const r=document.querySelector("iframe#talknExtension");if(!r)throw"NO EXTENSION IFRAME";{const n=O.getRequestObj(t,e);r.contentWindow.postMessage(n,r.src)}break;case o.default.APP_TYPES.API:}}}class C{constructor(t){this.maxSearchingCnt=30,this.status="shutdown",this.isLog=!1,this.globalWindow=t,this.ch=t.apiStore.getState().thread.ch,this.searchingCnt=0,this.playingCnt=0,this.pointerTime=0,this.started=!1,this.isPosting=!1,clearInterval(this.searchingId),clearInterval(this.playIntervalId),this.postsTimeline=[],this.postsTimelineStock=[],this.setPostsTimelines=this.setPostsTimelines.bind(this),this.refrectSelfPost=this.refrectSelfPost.bind(this),this.searching=this.searching.bind(this),this.handleEvents=this.handleEvents.bind(this),this.posting=this.posting.bind(this),this.apiTo=this.apiTo.bind(this),this.log=this.log.bind(this)}static get mediaSecondInterval(){return 200}static getMedia(t){const e=T.default.getMediaSrc(t),n=T.default.getMediaTagType(t);return document.querySelector(`${n}[src='${e}']`)}static getRequestObj(t,e={}){return{windowType:window.name,type:a.default.MEDIA_TO_CLIENT_TYPE,method:t,params:e}}setStatus(t){this.status=t,this.log("SET STATUS")}setPostsTimelines({postsTimeline:t,postsTimelineStock:e}){this.postsTimeline=[...t],this.postsTimelineStock=[...e],this.log("INIT TIMELINES")}refrectSelfPost(t){const e=this.postsTimeline.length;let n=!1;for(let r=0;r<e;r++)t.currentTime<this.postsTimeline[r].currentTime&&(n=!0,this.postsTimeline.splice(r,0,t));n||this.postsTimeline.push(t)}get currentTime(){return this.file?Math.floor(10*this.file.currentTime)/10:0}searching(t=C.mediaSecondInterval){this.setStatus("searching"),this.searchingCnt=0,this.searchingId=null,this.waitingId=null,this.playIntervalId=null,this.searchingId=setInterval(()=>{if(this.searchingCnt<this.maxSearchingCnt){const t=document.querySelectorAll("video"),e=document.querySelectorAll("audio");t.forEach(this.handleEvents),e.forEach(this.handleEvents),t.length>0||e.length>0?(this.setStatus("waiting"),clearInterval(this.searchingId),clearInterval(this.playIntervalId)):this.searchingCnt++}else clearInterval(this.searchingId),clearInterval(this.playIntervalId),this.searching(10*C.mediaSecondInterval)},t)}handleEvents(t){t.addEventListener("play",t=>{this.file=t.srcElement;const e=y.default.deleteProtcol(this.file.currentSrc)+"/";this.ch===e?(0===this.playingCnt&&this.setPostsTimelines(this.globalWindow.apiStore.getState()),this.playing()):(this.setStatus("finding"),this.ch=e,this.globalWindow.coreApi.onResponseChAPI(this.ch),this.globalWindow.coreApi.changeThread({thread:{ch:this.ch}}))}),t.addEventListener("seeked",t=>{this.setStatus("seeking")}),t.addEventListener("pause",t=>{this.setStatus("waiting")}),t.addEventListener("ended",t=>{this.setStatus("waiting"),clearInterval(this.playIntervalId);const e=Number.MAX_SAFE_INTEGER,n=this.postsTimelineStock.length;for(let t=0;t<n&&(this.postsTimelineStock[t]&&this.postsTimelineStock[t].currentTime<=e);t++)this.apiTo("NEXT_POSTS_TIMELINE",{postsTimeline:[this.postsTimelineStock[t]]});this.setStatus("waiting")})}playing(){this.setStatus("playing"),clearInterval(this.playIntervalId),this.playIntervalId=setInterval(()=>{this.posting(this.currentTime)},s.default.mediaSecondInterval)}posting(t=0){if(this.isPosting)return;const e=this.postsTimelineStock.length;if(this.playingCnt++,this.isPosting=!0,this.pointerTime<=t)for(this.pointerTime=t;this.isPosting;)if(0===e)this.isPosting=!1;else{if(!(this.postsTimelineStock[0]&&this.postsTimelineStock[0].currentTime<=t)){this.isPosting=!1;break}{const t=this.postsTimelineStock.shift();this.apiTo("NEXT_POSTS_TIMELINE",{postsTimeline:[t]}),this.log("POSTING")}}else{this.file.pause();const t=this.globalWindow.apiStore.getState().postsTimeline.concat(this.postsTimelineStock),e=t.length;this.pointerTime=this.currentTime,this.postsTimeline=new E.default,this.postsTimelineStock=new m.default;for(let n=0;n<e;n++){const e=t[n];e.currentTime<=this.pointerTime?this.postsTimeline.push(e):this.postsTimelineStock.push(e)}this.apiTo("CLEAR_POSTS_TIMELINE",{postsTimeline:this.postsTimeline,postsTimelineStock:this.postsTimelineStock}),this.isPosting=!1,this.file.play()}}apiTo(t,e={}){this.globalWindow.apiStore.dispatch(Object.assign({type:t},e))}log(t,e=!1){(this.isLog||e)&&(console.log(`@@@@@@@@@@@ ${t} ${this.status} CH ${this.ch} ${this.pointerTime} @@@`),console.log(`postsTimeline: ${this.postsTimeline.length} postsTimelineStock: ${this.postsTimelineStock.length}`),console.log(this.postsTimeline),console.log(this.postsTimelineStock))}}e.Media=C;new O},function(t,e,n){var r=n(48),i=n(16),s=n(27),o=n(9)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,i=r(t),u=i.source,c=i.id,l=i.path,f=a[c]&&l in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||f?(o("ignoring socket cache for %s",u),n=s(u,e)):(a[c]||(o("new io instance for %s",u),a[c]=s(u,e)),n=a[c]),i.query&&!e.query&&(e.query=i.query),n.socket(i.path,e)}e.protocol=i.protocol,e.connect=u,e.Manager=n(27),e.Socket=n(33)},function(t,e,n){var r=n(22),i=n(9)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var s=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+s+":"+n.port,n.href=n.protocol+"://"+s+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(n||i);e.diff=s,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const s=r.formatters[i];if("function"==typeof s){const r=t[a];n=s.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return o.namespace=t,o.enabled=r.enabled(t),o.useColors=r.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function s(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(o),...r.skips.map(o).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(23),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){(function(r){function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(51)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(s=i))})),t.splice(s,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,n(7))},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,i=+new Date,s=i-(n||i);t.diff=s,t.prev=n,t.curr=i,n=i;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var u=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(n,r){if("%%"===n)return n;u++;var i=e.formatters[r];if("function"==typeof i){var s=o[u];n=i.call(t,s),o.splice(u,1),u--}return n})),e.formatArgs.call(t,o);var c=r.log||e.log||console.log.bind(console);c.apply(t,o)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=i,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function i(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var s=e.instances[n];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(52),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=6e4,i=60*r,s=24*i;function o(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var a,u=typeof t;if("string"===u&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*r;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===u&&!1===isNaN(t))return e.long?o(a=t,s,"day")||o(a,i,"hour")||o(a,r,"minute")||o(a,n,"second")||a+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(24),i=n(25),s=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,s=t;return s.data=function t(e,n){if(!e)return e;if(i(e)){var s={_placeholder:!0,num:n.length};return n.push(e),s}if(r(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=t(e[a],n);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var u in e)o[u]=t(e[u],n);return o}return e}(n,e),s.attachments=e.length,{packet:s,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(r(e))for(var i=0;i<e.length;i++)e[i]=t(e[i],n);else if("object"==typeof e)for(var s in e)e[s]=t(e[s],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,s=t;!function t(u,c,l){if(!u)return u;if(o&&u instanceof Blob||a&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:s=this.result,--n||e(s)},f.readAsArrayBuffer(u)}else if(r(u))for(var p=0;p<u.length;p++)t(u[p],p,u);else if("object"==typeof u&&!i(u))for(var d in u)t(u[d],d,u)}(s),n||e(s)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),o=r[0],a=r[1],u=new s(function(t,e,n){return 3*(e+n)/4-n}(0,o,a)),l=0,f=a>0?o-4:o;for(n=0;n<f;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===a&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,s=[],o=0,a=n-i;o<a;o+=16383)s.push(l(t,o,o+16383>a?a:o+16383));1===i?(e=t[n-1],s.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],s.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return s.join("")};for(var r=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=o.length;a<u;++a)r[a]=o[a],i[o.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var i,s,o=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var s,o,a=8*i-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?i-1:0,p=n?-1:1,d=t[e+f];for(f+=p,s=d&(1<<-l)-1,d>>=-l,l+=a;l>0;s=256*s+t[e+f],f+=p,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=r;l>0;o=256*o+t[e+f],f+=p,l-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,r),s-=c}return(d?-1:1)*o*Math.pow(2,s-r)},e.write=function(t,e,n,r,i,s){var o,a,u,c=8*s-i-1,l=(1<<c)-1,f=l>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:s-1,h=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=l?(a=0,o=l):o+f>=1?(a=(e*u-1)*Math.pow(2,i),o+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),o=0));i>=8;t[n+d]=255&a,d+=h,a/=256,i-=8);for(o=o<<i|a,c+=i;c>0;t[n+d]=255&o,d+=h,o/=256,c-=8);t[n+d-h]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(58),t.exports.parser=n(2)},function(t,e,n){var r=n(28),i=n(1),s=n(12)("engine.io-client:socket"),o=n(32),a=n(2),u=n(22),c=n(10);function l(t,e){if(!(this instanceof l))return new l(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=l,l.priorWebsocketSuccess=!1,i(l.prototype),l.protocol=a.protocol,l.Socket=l,l.Transport=n(20),l.transports=n(28),l.parser=n(2),l.prototype.createTransport=function(t){s('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new r[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},l.prototype.open=function(){var t;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},l.prototype.setTransport=function(t){s("setting transport %s",t.name);var e=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},l.prototype.probe=function(t){s('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function i(){if(r.onlyBinaryUpgrades){var i=!this.supportsBinary&&r.transport.supportsBinary;n=n||i}n||(s('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(s('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,s('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(s("changing transport and sending upgrade packet"),p(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{s('probe transport "%s" failed',t);var o=new Error("probe error");o.transport=e.name,r.emit("upgradeError",o)}})))}function o(){n||(n=!0,p(),e.close(),e=null)}function a(n){var i=new Error("probe error: "+n);i.transport=e.name,o(),s('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",i)}function u(){a("transport closed")}function c(){a("socket closed")}function f(t){e&&t.name!==e.name&&(s('"%s" works - aborting "%s"',t.name,e.name),o())}function p(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",f),e.open()},l.prototype.onOpen=function(){if(s("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){s("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},l.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else s('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},l.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){s("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},l.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},l.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var i={type:t,data:e,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()}function e(){t.onClose("forced close"),s("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},l.prototype.onError=function(t){s("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},l.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~o(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var r=n(18),i=n(29),s=n(1),o=n(11),a=n(12)("engine.io-client:polling-xhr"),u=n(19);function c(){}function l(t){if(i.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function f(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=l,t.exports.Request=f,o(l,i),l.prototype.supportsBinary=!0,l.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new f(t)},l.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),i=this;r.on("success",e),r.on("error",(function(t){i.onError("xhr post error",t)})),this.sendXhr=r},l.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},s(f.prototype),f.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new r(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&e.setRequestHeader(i,this.extraHeaders[i])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof e.status?e.status:0)}),0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){n.onError(t)}),0)}"undefined"!=typeof document&&(this.index=f.requestsCount++,f.requests[this.index]=this)},f.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},f.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},f.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},f.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete f.requests[this.index],this.xhr=null}},f.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},f.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},f.prototype.abort=function(){this.cleanup()},f.requestsCount=0,f.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",p);else if("function"==typeof addEventListener){addEventListener("onpagehide"in u?"pagehide":"unload",p,!1)}function p(){for(var t in f.requests)f.requests.hasOwnProperty(t)&&f.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var i=new Uint8Array(t),s=new Uint8Array(n-e),o=e,a=0;o<n;o++,a++)s[a]=i[o];return s.buffer}},function(t,e){function n(){}t.exports=function(t,e,r){var i=!1;return r=r||n,s.count=t,0===t?e():s;function s(t,n){if(s.count<=0)throw new Error("after called too many times");--s.count,t?(i=!0,e(t),e=r):0!==s.count||i||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,i,s=String.fromCharCode;function o(t){for(var e,n,r=[],i=0,s=t.length;i<s;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<s?56320==(64512&(n=t.charCodeAt(i++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),i--):r.push(e);return r}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return s(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return s(t);var n="";return 0==(4294965248&t)?n=s(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=s(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=s(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=s(63&t|128)}function l(){if(i>=r)throw Error("Invalid byte index");var t=255&n[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(t){var e,s;if(i>r)throw Error("Invalid byte index");if(i==r)return!1;if(e=255&n[i],i++,0==(128&e))return e;if(192==(224&e)){if((s=(31&e)<<6|l())>=128)return s;throw Error("Invalid continuation byte")}if(224==(240&e)){if((s=(15&e)<<12|l()<<6|l())>=2048)return a(s,t)?s:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(s=(7&e)<<18|l()<<12|l()<<6|l())>=65536&&s<=1114111)return s;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=o(t),i=r.length,s=-1,a="";++s<i;)a+=c(r[s],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=o(t),r=n.length,i=0;for(var u,c=[];!1!==(u=f(a));)c.push(u);return function(t){for(var e,n=t.length,r=-1,i="";++r<n;)(e=t[r])>65535&&(i+=s((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=s(e);return i}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),i=r.length,s="";for(n=0;n<i;n+=3)s+=t[r[n]>>2],s+=t[(3&r[n])<<4|r[n+1]>>4],s+=t[(15&r[n+1])<<2|r[n+2]>>6],s+=t[63&r[n+2]];return i%3==2?s=s.substring(0,s.length-1)+"=":i%3==1&&(s=s.substring(0,s.length-2)+"=="),s},e.decode=function(t){var e,r,i,s,o,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),f=new Uint8Array(l);for(e=0;e<u;e+=4)r=n[t.charCodeAt(e)],i=n[t.charCodeAt(e+1)],s=n[t.charCodeAt(e+2)],o=n[t.charCodeAt(e+3)],f[c++]=r<<2|i>>4,f[c++]=(15&i)<<4|s>>2,f[c++]=(3&s)<<6|63&o;return l}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),i=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),s=n&&n.prototype.append&&n.prototype.getBlob;function o(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t}))}function a(t,e){e=e||{};var r=new n;return o(t).forEach((function(t){r.append(t)})),e.type?r.getBlob(e.type):r.getBlob()}function u(t,e){return new Blob(o(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=r?i?Blob:u:s?a:void 0},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(n||i);e.diff=s,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const s=r.formatters[i];if("function"==typeof s){const r=t[a];n=s.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return o.namespace=t,o.enabled=r.enabled(t),o.useColors=r.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function s(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(o),...r.skips.map(o).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(23),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){var r=n(29),i=n(11),s=n(19);t.exports=l;var o,a=/\n/g,u=/\\n/g;function c(){}function l(t){r.call(this,t),this.query=this.query||{},o||(o=s.___eio=s.___eio||[]),this.index=o.length;var e=this;o.push((function(t){e.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.script&&(e.script.onerror=c)}),!1)}i(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},l.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,i=document.createElement("form"),s=document.createElement("textarea"),o=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=o,i.method="POST",i.setAttribute("accept-charset","utf-8"),s.name="d",i.appendChild(s),document.body.appendChild(i),this.form=i,this.area=s}function c(){l(),e()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),t=t.replace(u,"\\\n"),this.area.value=t.replace(a,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}},function(t,e,n){(function(e){var r,i,s=n(20),o=n(2),a=n(10),u=n(11),c=n(31),l=n(12)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{i=n(71)}catch(t){}var f=r||i;function p(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=r&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(f=i),s.call(this,t)}t.exports=p,u(p,s),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new f(t,e):new f(t):new f(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},p.prototype.write=function(t){var n=this;this.writable=!1;for(var r=t.length,i=0,s=r;i<s;i++)!function(t){o.encodePacket(t,n.supportsBinary,(function(i){if(!n.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),n.perMessageDeflate)("string"==typeof i?e.byteLength(i):i.length)<n.perMessageDeflate.threshold&&(s.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,s)}catch(t){l("websocket closed before onclose event")}--r||a()}))}(t[i]);function a(){n.emit("flush"),setTimeout((function(){n.writable=!0,n.emit("drain")}),0)}},p.prototype.onClose=function(){s.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(17).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e){e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\n",e.homedir=function(){return"/"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"bootApi"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"bootExtension"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(4)),s=r(n(39)),o=r(n(77)),a=r(n(78)),u=r(n(6)),c=r(n(13)),l=r(n(14)),f=r(n(41)),p=r(n(42)),d=r(n(5)),h=r(n(80));class g{constructor(t,e={},n={}){this.rank=new o.default,this.menuLogs=new a.default(n.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new l.default,this.postsLogs=new u.default,this.analyze=new f.default,this.bootOption=new p.default(e),this.thread=new d.default(t,this.bootOption,n.thread),this.threadDetail=new d.default(t,this.bootOption,n.thread),this.app=new i.default(g.getAppParams(this.thread,this.bootOption,n)),this.user=new s.default(g.getUserParams(this,n)),this.actionLog=new h.default}static getAppParams(t,e,n){return Object.assign(Object.assign({isTransition:!0,rootTitle:t.title},e),t)}static getUserParams(t,e){if(e&&e.user&&e.user.uid)return Object.assign({},e.user);return{dispThreadType:t.thread.ch===t.app.rootCh?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}get appName(){return this.app.name}get talknIndex(){return this.app.talknIndex}get ch(){return this.thread.ch}}e.default=g},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t=[]){return super(),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){return{ver:"2020/06/04",tune:(e,n)=>t.tune({thread:{ch:e}},n),rank:(e,n)=>t.rank({thread:{ch:e}},n),fetchPosts:(e,n)=>t.fetchPosts({thread:{ch:e}},n),post:(e={},n)=>t.post(e,n),getState:()=>t.apiStore.getState()}}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(43),s=r(n(84)),o=r(n(106));e.default=function(t={}){let e=[o.default.updateAction];return i.createStore(s.default,t,i.applyMiddleware(...e))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(43),s=r(n(85)),o=r(n(86)),a=r(n(87)),u=r(n(88)),c=r(n(89)),l=r(n(90)),f=r(n(91)),p=r(n(92)),d=r(n(93)),h=r(n(95)),g=r(n(96)),T=r(n(97)),y=r(n(98)),E=r(n(100)),m=r(n(102)),S=r(n(103)),_=r(n(104)),O=r(n(105));e.reducerFiles={app:s.default,user:o.default,rank:a.default,thread:u.default,threads:c.default,threadDetail:l.default,analyze:f.default,bootOption:p.default,setting:d.default,posts:h.default,postsTimeline:g.default,postsTimelineStock:T.default,postsTimelineZero:y.default,postsTimelineZeroAfter:E.default,postsMulti:m.default,postsSingle:S.default,postsChild:_.default,actioned:O.default},e.default=i.combineReducers(e.reducerFiles)},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(4));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(39));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6));e.default=(t=[],e)=>{let n=[],r=0;const s=(t,n)=>t.ch===e.app.rootCh||n.ch===e.app.rootCh?0:t.watchCnt<n.watchCnt?1:t.watchCnt>n.watchCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(n=i.default.getDispPosts(e),r=n&&n.length?e.posts.length:0,0===r?t:t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{favicon:n[r-1].favicon,stampId:n[r-1].stampId,post:n[r-1].post}):t));case"SERVER_TO_API[BROADCAST]:fetchPosts":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return 0===t.length?[e.thread]:t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{watchCnt:e.thread.watchCnt}):t).sort(s);case"SERVER_TO_API[BROADCAST]:post":return t.map(t=>e.app.rootCh===t.ch?e.app.multistream?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t:e.posts[0].ch===t.ch?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t);case"SERVER_TO_API[EMIT]:rank":if(t&&1===t.length&&e.rank&&e.rank.length>0){const n=[],r=e.rank.length;let i=e.rank[0];for(let s=0;s<r;s++){let r=e.rank[s];i=r.updateTime>i.updateTime?r:i,r.ch===t[0].ch&&(r=Object.assign(Object.assign({},r),{watchCnt:t[0].watchCnt})),n.push(r)}return n.sort(s),n[0].faicon=i.favicon,n[0].post=i.post,n[0].stampId=i.stampId,n}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(5));e.default=(t=new i.default({},{},{}),e)=>e.thread?t.merge(e.thread):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(44));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(5));e.default=(t=new i.default({},{},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(41));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(42));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(94));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},n=t&&t.common?t.common:{},r=t&&t.server?t.server:{};return this.create({client:e,common:n,server:r})}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6));e.default=(t=new i.default,e)=>e.posts?new i.default(e.posts):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(13));e.default=(t=new i.default,e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map(t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(14));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(99));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(101));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6)),s=r(n(37));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.thread.ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let n=[];return t.length+e.postsMulti.length>s.default.findOneLimitCnt?(n=[...e.postsMulti,...t],n.slice(0,s.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(40));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6));e.default=(t=new i.default,e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.posts[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0)),s=r(n(4)),o=r(n(6)),a=r(n(5)),u=r(n(44)),c=r(n(107));e.default={updateAction:t=>e=>n=>{const r=t.getState();n&&(n.app=n.app?Object.assign(Object.assign({},r.app),n.app):r.app,n.app.actioned=n.type),l[n.type]&&(n=l[n.type](r,n)),n&&e(n)}};const l={"SERVER_TO_API[BROADCAST]:fetchPosts":(t,e)=>(e.app.tuned=e.thread.ch,e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e),"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.detailCh=e.thread.ch,e.app.desc=e.thread.serverMetas.title,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=s.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,(e=Object.assign({},o.default.getAnyActionPosts(e,t))).thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=s.default.getMediaTypeFromSrc(t),e=c.default.setStoragePostsTimeline(e)}else e.app.chType=s.default.mediaTagTypeNo;return e},"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetTimelineFindId=s.default.defaultOffsetFindId,e.app.offsetMultiFindId=s.default.defaultOffsetFindId,e.app.offsetSingleFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e.app.offsetLogsFindId=s.default.defaultOffsetFindId,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e.posts=new o.default,e.postsMulti=new o.default,e.postsChild=new o.default,e.postsTimeline=new o.default,e.postsSingle=new o.default,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{const{user:n}=t,r=e.posts.length-1;e.app.inputStampId=0,e.user=n;const i=Object.keys(e.thread.emotions);if(e.thread.ch===e.posts[r].ch&&i.length>0){const n=Object.assign({},e.thread.emotions);e.thread.emotions=Object.assign({},t.thread.emotions),Object.keys(n).forEach(t=>{Object.keys(n[t]).forEach(r=>{e.thread.emotions[t][r]=e.thread.emotions[t][r]+n[t][r]})})}else e.thread.emotions=t.thread.emotions;return e=o.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=s.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e=o.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions=Object.assign({},t.threads[e.app.detailCh].emotions),console.log(e.threadDetail.emotions.russellSimple),e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread=Object.assign(Object.assign({},t.thread),e.thread),e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const n=e.thread.ch;e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.thread.ch=n;const r=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=a.default.getFindTypeFromSrc(r),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.postsChild=[],e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let n=!1,{clientMetas:r}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(r).forEach((t,s)=>{r[t]&&""!==r[t]&&i[t]!==r[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),n=!0,e.thread.serverMetas[t]=r[t])}),n)return e.threadDetail=Object.assign({},t.threadDetail),e.threadDetail.serverMetas=Object.assign(Object.assign({},e.threadDetail.serverMetas),e.thread.serverMetas),e}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3)),s=r(n(4)),o=r(n(108));function a(t,e){const{app:n}=t,{storageKey:r}=i.default;if(n.isRootCh){const{postsMulti:e,postsSingle:i}=t;o.default.setStorage(n.rootCh,r.postsMulti,e),o.default.setStorage(n.rootCh,r.postsSingle,i)}return{state:t,props:e}}function u(t){const{app:e,thread:n,postsTimeline:r}=t,{storageKey:s}=i.default;if(e.isMediaCh){const e=r&&r.length?r.length:0;let i=[],a=[];for(let t=0;t<e;t++)0===r[t].currentTime?i.push(r[t]):a.push(r[t]);t.postsTimeline=i,o.default.setStorage(n.ch,s.postsTimelineZero,i),o.default.setStorage(n.ch,s.postsTimeline,a)}return t}e.default={"SERVER_TO_API[BROADCAST]:post":a,"SERVER_TO_API[EMIT]:getMore":a,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:n}=t,{rootCh:r}=n,{storageKey:a}=i.default,u=n.dispThreadType===s.default.dispThreadTypeMulti?a.postSingle:a.postMulti;return o.default.setStorage(r,i.default.storageKey[u],[]),{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:n}=t.app;return o.default.setStorage(n,i.default.storageKey.app,t.app),{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:n}=t;return n.isMediaCh?{state:t=u(t),props:e}:a(t,e)},setStorageHtmlPosts:a,setStoragePostsTimeline:u,getStoragePostsTimeline:function(t){const{storageKey:e}=i.default,n=o.default.getStorage(t,e.postsTimeline);return"Array"===n.constructor.name?n:[]},getStoragePostsTimelineZero:function(t){const{storageKey:e}=i.default,n=o.default.getStorage(t,e.postsTimelineZero);return"Array"===n.constructor.name?n:[]}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3));class s{static getBaseKey(t){return`${i.default.storageKey.baseKey}${t}`}static setStorage(t,e,n){if(e){const r=s.getBaseKey(t);let i=JSON.parse(localStorage.getItem(r));return i=JSON.stringify(Object.assign(Object.assign({},i),{[e]:n})),localStorage.setItem(r,i),!0}return!1}static getStorage(t,e){const n=s.getBaseKey(t),r=JSON.parse(localStorage.getItem(n));return r&&r[e]?r[e]:{}}static getCaches(t){return{menuLogs:s.getStorage(t,i.default.storageKey.menuLogs),app:s.getStorage(t,i.default.storageKey.app),thread:s.getStorage(t,i.default.storageKey.thread),setting:s.getStorage(t,i.default.storageKey.setting)}}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3));e.default={updateStyle:({styleKey:t,eleType:e,tagName:n,style:r})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:n,style:r}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),onClickToggleMain:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_MAIN",app:t,ui:e}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:n})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:n}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",app:t,ui:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>Object.assign({type:"RESIZE_START_WINDOW"},t),onResizeEndWindow:({app:t,setting:e,bootOption:n})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:n}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=i.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>({type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:n})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:n}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(8));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(8)),s=new(r(n(15)).default);let o={};Object.keys(i.default.map).forEach(t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,n)=>a[e.type]?a[e.type](t,e,n):{requestState:e,actionState:n}});const a={post:(t,e,n)=>{const{app:r}=e;return r.isMediaCh&&(r.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},r.inputStampId?Object.keys(s.balances).forEach(n=>{if(s.balances[n]&&t.thread.emotions[n]){const t=s.balances[n](r.inputStampId);t&&t.forEach(t=>{const r=Object.keys(t)[0],i=s.idKeyTypes[r];e.thread.emotions[n]||(e.thread.emotions[n]={}),e.thread.emotions[n][i]||(e.thread.emotions[n][i]=0),e.thread.emotions[n][i]=t[r]})}}):(n.app=Object.assign({},r),n.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:n}}};e.default=o},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(113)),s=r(n(114)),o=r(n(115));e.default={Plain:i.default,Russell:s.default,RussellSimple:o.default}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(15));class s{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(15));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(15));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(8));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static deleteProtcol(t){return t.replace("https:/","").replace("http:/","")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1NjaGVtYS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2RlZmluZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvQXBwLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9UaHJlYWQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3RzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL1NlcXVlbmNlLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2Vtb3Rpb25zL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9nbG9iYWxUaGlzLmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvbWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NsaWVudC9jb25mL2luZGV4LnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9jb25mLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0LnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Vc2VyLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1NpbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvQW5hbHl6ZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvQm9vdE9wdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1RocmVhZHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL2FwaS90YWxrbi5hcGkudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLXhoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5YnVmZmVyLnNsaWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jsb2IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29zLWJyb3dzZXJpZnkvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9jb21tb24vUG9zdE1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9SYW5rLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9NZW51TG9ncy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdE11bHRpLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9BY3Rpb25Mb2dzLnRzIiwid2VicGFjazovLy8uL2FwaS9wdWJsaWMuYXBpLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9hcGlTdG9yZS50cyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3VzZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3JhbmsudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3RocmVhZC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvdGhyZWFkcy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvdGhyZWFkRGV0YWlsLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9hbmFseXplLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9ib290T3B0aW9uLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9zZXR0aW5nLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9TZXR0aW5nLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0cy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNUaW1lbGluZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNUaW1lbGluZVN0b2NrLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lWmVyby50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdHNUaW1lbGluZVplcm8udHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzVGltZWxpbmVaZXJvQWZ0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVaZXJvQWZ0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzTXVsdGkudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzU2luZ2xlLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c0NoaWxkLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9hY3Rpb25lZC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvbWlkZGxld2FyZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvbWFwVG9TdGF0ZVRvUHJvcHMvc3RvcmFnZS50cyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvb3BlcmF0aW9ucy9UYWxrblNlc3Npb24udHMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L2FjdGlvbnMvaGFuZGxlcy50cyIsIndlYnBhY2s6Ly8vLi9hcGkvYWN0aW9ucy93cy9zZXJ2ZXJUb0FwaUVtaXQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL2FjdGlvbnMvd3MvYXBpVG9TZXJ2ZXJSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9lbW90aW9ucy9tb2RlbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vZW1vdGlvbnMvbW9kZWwvUGxhaW4udHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2Vtb3Rpb25zL21vZGVsL1J1c3NlbGwudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2Vtb3Rpb25zL21vZGVsL1J1c3NlbGxTaW1wbGUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL2FjdGlvbnMvd3Mvc2VydmVyVG9BcGlCcmFkY2FzdC50cyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvY29udGFpbmVyL3V0aWwvY2xpZW50VXRpbC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlNjaGVtYSIsIm9wdGlvbiIsInVuZGVmaW5lZCIsImNvbnN0cnVjdG9yIiwidmFsIiwiZ2V0VHlwZSIsImZuIiwiZm5TdHJpbmciLCJ0b1N0cmluZyIsInN0YXRlIiwiY2xhc3NOYW1lIiwidGhpcyIsImtleXMiLCJmb3JFYWNoIiwidmFsdWVzIiwidHlwZSIsImRlZiIsImlzQWNjZXB0TnVsbCIsImlzQWNjZXB0QmxhbmsiLCJ2YWxpZCIsImlzRW1wdHlPYmplY3QiLCJsZW5ndGgiLCJ2YWxpZEZ1bmMiLCJfdmFsdWUiLCJlcnJvciIsInBvaW50ZXIiLCJ2YWxpZFZhbHVlIiwidmFsaWRUeXBlIiwicGFyYW1zVmFsdWUiLCJwYXJhbXNUeXBlIiwic2V0IiwidmFsaWRSZXN1bHQiLCJ2YWxpZFdhcm4iLCJjb25maWd1cmFibGUiLCJlcnJvclRocm93IiwiY29uc29sZSIsIndhcm4iLCJjdXJyZW50VmFsdWUiLCJlIiwicGFyYW1zIiwiaW1tdXRhYmxlIiwib2JqS2V5cyIsIm1lcmdlZE9iaiIsImNhblNldCIsIm9iaiIsImpzb25PYmoiLCJkZWZhdWx0IiwidG9KU09OIiwiZnVuYyIsInJldHVybkltbXV0YWJsZSIsIm1hcCIsImZpbHRlciIsInJlZHVjZSIsImZpbmQiLCJzb3J0IiwicHVzaCIsInVuc2hpZnQiLCJyZXN1bHRzIiwic2hpZnQiLCJwb3AiLCJTdHJpbmciLCJpbmRleE9mIiwiRW1pdHRlciIsIm1peGluIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJfY2FsbGJhY2tzIiwib25jZSIsIm9mZiIsImFwcGx5IiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2IiLCJjYWxsYmFja3MiLCJzcGxpY2UiLCJlbWl0IiwiYXJncyIsInNsaWNlIiwibGVuIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiYmFzZTY0ZW5jb2RlciIsImhhc0JpbmFyeSIsInNsaWNlQnVmZmVyIiwiYWZ0ZXIiLCJ1dGY4IiwiQXJyYXlCdWZmZXIiLCJpc0FuZHJvaWQiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwiaXNQaGFudG9tSlMiLCJkb250U2VuZEJsb2JzIiwicHJvdG9jb2wiLCJwYWNrZXRzIiwib3BlbiIsImNsb3NlIiwicGluZyIsInBvbmciLCJtZXNzYWdlIiwidXBncmFkZSIsIm5vb3AiLCJwYWNrZXRzbGlzdCIsImVyciIsImRhdGEiLCJCbG9iIiwiYXJ5IiwiZWFjaCIsImRvbmUiLCJyZXN1bHQiLCJBcnJheSIsIm5leHQiLCJlYWNoV2l0aEluZGV4IiwiZWwiLCJtc2ciLCJlbmNvZGVQYWNrZXQiLCJwYWNrZXQiLCJzdXBwb3J0c0JpbmFyeSIsInV0ZjhlbmNvZGUiLCJjYWxsYmFjayIsImJ1ZmZlciIsImVuY29kZUJhc2U2NFBhY2tldCIsImNvbnRlbnRBcnJheSIsIlVpbnQ4QXJyYXkiLCJyZXN1bHRCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImVuY29kZUJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsImVuY29kZUJsb2IiLCJiYXNlNjQiLCJlbmNvZGVCYXNlNjRPYmplY3QiLCJlbmNvZGVkIiwiZW5jb2RlIiwic3RyaWN0IiwiYjY0ZGF0YSIsImI2NCIsInNwbGl0IiwicmVhZEFzRGF0YVVSTCIsImZyb21DaGFyQ29kZSIsInR5cGVkIiwiYmFzaWMiLCJidG9hIiwiZGVjb2RlUGFja2V0IiwiYmluYXJ5VHlwZSIsInV0ZjhkZWNvZGUiLCJjaGFyQXQiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJzdWJzdHIiLCJkZWNvZGUiLCJ0cnlEZWNvZGUiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJyZXN0IiwiZW5jb2RlUGF5bG9hZCIsImlzQmluYXJ5IiwiZW5jb2RlUGF5bG9hZEFzQmxvYiIsImVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyIiwiZG9uZUNhbGxiYWNrIiwic2V0TGVuZ3RoSGVhZGVyIiwiam9pbiIsImRlY29kZVBheWxvYWQiLCJkZWNvZGVQYXlsb2FkQXNCaW5hcnkiLCJjaHIiLCJlbmNvZGVkUGFja2V0cyIsInRvdGFsTGVuZ3RoIiwiYWNjIiwicmVzdWx0QXJyYXkiLCJidWZmZXJJbmRleCIsImlzU3RyaW5nIiwiYWIiLCJ2aWV3IiwiY2hhckNvZGVBdCIsImxlblN0ciIsInBhcnNlSW50IiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInRvdGFsIiwiZGVmaW5lIiwiUFJPRFVDVElPTiIsIkxPQ0FMSE9TVCIsIkRFVkVMT1BNRU5UIiwiUFJPRFVDVElPTl9JUCIsImVudiIsIkhPU1ROQU1FIiwiUFJPRFVDVElPTl9ET01BSU4iLCJERVZFTE9QTUVOVF9ET01BSU4iLCJQT1JUUyIsIkhUVFAiLCJIVFRQUyIsIkRFVkVMT1BNRU5UX0FQSSIsIlJFRElTIiwiTU9OR08iLCJTT0NLRVRfSU8iLCJTVUJfRE9NQUlOUyIsIldXVyIsIkFQSSIsIkRFU0MiLCJQT1JUQUwiLCJDTElFTlQiLCJBU1NFVFMiLCJTRVNTSU9OIiwiQVVUTyIsIkVYVCIsIlRSQU5TQUNUSU9OIiwiQVBQX1RZUEVTIiwiRVhURU5TSU9OIiwiVVJMIiwidHdpdHRlciIsImZhY2Vib29rIiwiYXBwc3RvcmUiLCJwbGF5c3RvcmUiLCJ0YWxrbkNsaWVudEpzIiwidGFsa25BcGlKcyIsIm5vSW5uZXJOb3RpZiIsInN0b3JhZ2VLZXkiLCJiYXNlS2V5IiwicG9zdHNUaW1lbGluZVplcm8iLCJwb3N0c1RpbWVsaW5lIiwicG9zdHNTaW5nbGUiLCJwb3N0c011bHRpIiwicG9zdHNDaGlsZCIsInBvc3RzTG9ncyIsInRocmVhZHMiLCJBcHAiLCJzdXBlciIsIm9mZnNldFRpbWVsaW5lRmluZElkIiwiZGVmYXVsdEZpbmRJZCIsIm9mZnNldFNpbmdsZUZpbmRJZCIsIm9mZnNldE11bHRpRmluZElkIiwib2Zmc2V0Q2hpbGRGaW5kSWQiLCJvZmZzZXRMb2dzRmluZElkIiwiY2giLCJ0YWxrbkluZGV4IiwiaXNNZWRpYUNoIiwiaXNTZXQiLCJnZXRJc01lZGlhQ2giLCJpc0xpbmtDaCIsInJvb3RDaCIsImlzUm9vdENoIiwicm9vdFRpdGxlIiwic3JjIiwiZ2V0TWVkaWFTcmMiLCJjaFR5cGUiLCJnZXRNZWRpYVR5cGUiLCJ0dW5lZCIsImRpc3BUaHJlYWRUeXBlIiwiZ2V0RGlzcFRocmVhZFR5cGUiLCJtdWx0aXN0cmVhbSIsImZpbmRUeXBlIiwiZmluZFR5cGVBbGwiLCJvZmZzZXRGaW5kSWQiLCJkZWZhdWx0T2Zmc2V0RmluZElkIiwiaW5wdXRQb3N0IiwiaW5wdXRTdGFtcElkIiwiaW5wdXRDdXJyZW50VGltZSIsImlucHV0U2VhcmNoIiwiaXNUb2dnbGVNdWx0aXN0cmVhbSIsImFjdGlvbmVkIiwiZGVidWciLCJtZWRpYVR5cGVNcDMiLCJtZWRpYVR5cGVNcDQiLCJtZWRpYVR5cGVNNGEiLCJtZWRpYVRhZ1R5cGVBdWRpbyIsIm1lZGlhVGFnVHlwZVZpZGVvIiwiZ2V0TWVkaWFUeXBlRnJvbVNyYyIsIm1lZGlhQ2hUYWdUeXBlS2V5cyIsIm1lZGlhQ2hUYWdUeXBlcyIsIm1lZGlhQ2hUYWdUeXBlTGVuZ3RoIiwibWVkaWFUeXBlIiwicmVnRXhwIiwiUmVnRXhwIiwibWF0Y2giLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwid2lkdGgiLCJyZXBsYWNlIiwiaW5uZXJIZWlnaHQiLCJjb250ZW50VHlwZSIsImlzQXVkaW9Db250ZW50VHlwZSIsImlzVmlkZW9Db250ZW50VHlwZSIsIm1lZGlhQ2hzIiwic29tZSIsImV4dCIsInJlZ2V4cCIsImFwcCIsInVpIiwiY2FsbGVkIiwibWVudUNvbXBvbmVudCIsImRpc3BUaHJlYWRUeXBlTXVsdGkiLCJkaXNwVGhyZWFkVHlwZVRpbWVsaW5lIiwicG9zdHMiLCJfaWQiLCJyYW5rIiwidGhyZWFkU3RhdHVzIiwidG9DaCIsImFmdGVyRGlzcFRocmVhZFR5cGUiLCJiZWZvcmVEaXNwVGhyZWFkVHlwZSIsImdldFN0ZXBEaXNwVGhyZWFkVHlwZSIsInN0ZXBUbyIsInVwZGF0ZWRBcHAiLCJoYXZlTWVudUluZGV4IiwibWkiLCJkaXNwVGhyZWFkVHlwZUNoaWxkIiwiZGlzcFRocmVhZFR5cGVTaW5nbGUiLCJUaHJlYWQiLCJib290T3B0aW9uIiwiY2FjaGUiLCJjaHMiLCJUQUxLTl9QUk9UT0NPTCIsImNoYXJzZXQiLCJob3N0IiwiZmF2aWNvbiIsImdldERlZmF1bHRGYXZpY29uIiwidGl0bGUiLCJnZXREZWZhdWx0VGl0bGUiLCJtZXRhcyIsInNlcnZlck1ldGFzIiwiY2xpZW50TWV0YXMiLCJsaW5rcyIsImgxcyIsImF1ZGlvcyIsInZpZGVvcyIsImxheWVyIiwiZ2V0TGF5ZXIiLCJtZWRpYUluZGV4IiwicG9zdENudCIsIm11bHRpUG9zdENudCIsImlzU2VsZkNoIiwiY3JlYXRlVGltZSIsInVwZGF0ZVRpbWUiLCJ0aHJlYWQiLCJpc1dpbmRvd09iaiIsImNvbnN0cnVjdG9yRnJvbVdpbmRvdyIsImZpbmRUeXBlSHRtbCIsImZpbmRUeXBlTXVzaWMiLCJmaW5kVHlwZVZpZGVvIiwiYWxlcnQiLCJib290Q2giLCJnZXRDaCIsImhyZWYiLCJoYXNTbGFzaCIsImhhc3NsYXNoIiwiZ2V0Qm9vbCIsImdldFByb3RvY29sIiwiZ2V0SG9zdCIsImdldENocyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJnZXRGYXZpY29uRnJvbVdpbmRvdyIsImdldElzU2VsZkNoIiwiX2NoIiwiY2hBcnIiLCJjaExlbmd0aCIsIm5ld0NoIiwiZG9tYWluIiwidSIsImV2YWx1YXRlIiwic3RyaW5nVmFsdWUiLCJoIiwiaHMiLCJ1cmwiLCJzZXR0aW5nIiwic3RhdHVzIiwiZGlzcFR5cGUiLCJpc1NjaGVtYSIsImlzUmVxdWlyZVVwc2VydCIsImlzTXVsdGlzdHJlYW0iLCJnZXRNb3JlIiwiZ2V0U3RhdHVzSXNTY2hlbWEiLCJnZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQiLCJnZXRTdGF0dXNJc011bHRpc3RyZWFtIiwiZ2V0U3RhdHVzSXNUb2dnbGVNdWx0aXN0cmVhbSIsImdldFN0YXR1c0lzTWVkaWFDaCIsImdldFRpbWUiLCJsYXN0UG9zdCIsInRocmVhZFVwZGF0ZVRpbWUiLCJub3ciLCJEYXRlIiwibm93WWVhciIsImdldEZ1bGxZZWFyIiwibm93TW9udGgiLCJnZXRNb250aCIsIm5vd0RheSIsImdldERhdGUiLCJub3dIb3VyIiwiZ2V0SG91cnMiLCJhY3RpdmVUaW1lIiwiZ2V0TWludXRlcyIsInNlcnZlciIsImZpbmRPbmVUaHJlYWRBY3RpdmVIb3VyIiwiZmluZFR5cGVzIiwic3BsaXRlZENvbnRlbnRUeXBlIiwiaW5jbHVkZXMiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsIlBvc3RzIiwiZGlzcFRocmVhZFR5cGVMb2dzIiwiYWN0aW9uIiwiZXhpc3RQb3N0cyIsImdldEFueUFjdGlvblBvc3RzVGltZWxpbmUiLCJwb3N0c1RpbWVsaW5lU3RvY2siLCJwb3N0c0xlbmd0aCIsImN1cnJlbnRUaW1lIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiU2VxdWVuY2UiLCJBUElfUkVRVUVTVF9UWVBFIiwiTUVUSE9EX0NPTE9OIiwiQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCIsIkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVCIsInR1bmUiLCJyZXF1ZXN0UHVibGljU3RhdGUiLCJyZXF1ZXN0UHJpdmF0ZVN0YXRlIiwicmVzcG9uc2VFbWl0U3RhdGUiLCJ1c2VyIiwicmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSIsImZldGNoUG9zdHMiLCJ1cGRhdGVUaHJlYWQiLCJjaGFuZ2VUaHJlYWQiLCJjaGFuZ2VUaHJlYWREZXRhaWwiLCJhZGRGaW5kQ2hpbGQiLCJwb3N0IiwidXBkYXRlVGhyZWFkU2VydmVyTWV0YXMiLCJsb2dpbiIsImRpc2Nvbm5lY3QiLCJtZXRob2QiLCJzcGxpdGVkIiwic2VxdWVuY2UiLCJhY3Rpb25UeXBlIiwiYWN0aW9uTmFtZSIsImFjdGl2ZVJlc3BvbnNlTWFwIiwiYnJvYWRjYXN0IiwiQVBJX1RPX1NFUlZFUl9SRVFVRVNUIiwiQVBJX1RPX0NMSUVOVF9SRVFVRVNUIiwiU0VSVkVSX1RPX0FQSV9FTUlUIiwiQVBJX1RPX0NMSUVOVF9FTUlUIiwiU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QiLCJBUElfVE9fQ0xJRU5UX0JST0FEQ0FTVCIsInJlZHV4U3RhdGUiLCJyZXF1ZXN0UGFyYW1zIiwiZW5kcG9pbnRLZXkiLCJyZXF1ZXN0U3RhdGUiLCJSRURVWF9BQ1RJT05fS0VZIiwic3RhdGVLZXkiLCJjb2x1bW5OYW1lIiwicmVzcG9uc2VUeXBlIiwidXBkYXRlU3RhdGUiLCJyZXNwb25zZVNjaGVtYSIsInJlc3BvbnNlU3RhdGUiLCJ1cGRhdGVTdGF0ZUtleSIsImNvbHVtbk5hbWVzIiwidXBkYXRlU3RhdGVWYWx1ZSIsIl9fdiIsInJlcXVlc3RQYXJhbXMxIiwicmVxdWVzdFBhcmFtczIiLCJsb2ciLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJpbmRleCIsImxhc3RDIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJsb2FkIiwiZ2V0SXRlbSIsIkRFQlVHIiwiX19ud2pzIiwidG9Mb3dlckNhc2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCIkMSIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImNvbG9ycyIsImZvcm1hdHRlcnMiLCJqIiwidiIsIkpTT04iLCJzdHJpbmdpZnkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImEiLCJiIiwiRW1vdGlvbnMiLCJiZWxvbmdDb3ZlclR5cGVzIiwiaWRLZXlUeXBlcyIsInR5cGVzQXJyYXkiLCJpbnB1dHMiLCJsYWJlbCIsInN0YW1wSWQiLCJUWVBFUyIsIklEIiwiTEFCRUwiLCJtb2RlbCIsImJhbGFuY2VzIiwicGxhaW4iLCJQbGFpbiIsImdldFNhdmVCYWxhbmNlIiwicnVzc2VsbCIsIlJ1c3NlbGwiLCJydXNzZWxsU2ltcGxlIiwiUnVzc2VsbFNpbXBsZSIsIkxJS0UiLCJJTlRFUkVTVCIsIkRJU0NPVkVSWSIsIlNVTk5ZIiwiUEVBQ0UiLCJDSEVFUiIsIk1PTkVZIiwiVU5MSUtFIiwiTE9WRSIsIlNVUFJJU0UiLCJFWENJVEUiLCJIQVBQWSIsIkpPWSIsIkdMQUQiLCJTQVRJU0ZBQ1RJT04iLCJDT01GT1JUIiwiUkVMQVgiLCJUSVJFRCIsIlNMRUVQWSIsIlNMQUNLIiwiQk9SSU5HIiwiTUVMQU5DSE9MWSIsIlNBRCIsIlVOUExFQVNBTlQiLCJGUlVTVFJBVEVEIiwiRElTU0FUSVNGSUVEIiwiQU5HRVIiLCJXT1JSWSIsIkZFQVIiLCJXT1JSWV9GRUFSIiwibW9kZWxLZXkiLCJkZWZhdWx0TW9kZWxLZXkiLCJ0b3RhbE51bSIsImFkZFplcm8iLCJncmFwaE1heE51bSIsImxpbWl0cyIsIjEiLCI1IiwiMTAiLCIzMCIsIjcwIiwiMTAwIiwiMjUwIiwiNTAwIiwiNzUwIiwiMTAwMCIsIjYiLCIyMCIsIjUwIiwibGltaXRLZXlzIiwibGltaXRMZW5ndGgiLCJrZXlOdW0iLCJlbW90aW9uTGltaXROdW0iLCIyIiwiMyIsIjQiLCIxMDAxIiwiMTAwMiIsIjExMDEiLCIxMTAyIiwiMTEwMyIsIjEyMDEiLCIxMjAyIiwiMTIwMyIsIjEyMDQiLCIxMzAxIiwiMTMwMiIsIjEzMDMiLCIxMzA0IiwiMTMwNSIsIjEzMDYiLCIxMzA3IiwiMTQwMSIsIjE0MDIiLCIxNTAxIiwiMTUwMiIsIjE1MDMiLCIxNTA0IiwiMTYwMSIsIjE2MDIiLCIxNjAzIiwiMTcwMSIsIjE3MDIiLCIxNzAzIiwiMTgwMSIsIjE4MDIiLCIxODAzIiwiMjAwMSIsIjIwMDIiLCIyMDAzIiwiMjAwNCIsIjIwMDUiLCIyMTAxIiwiMjEwMiIsIjIxMDMiLCIyMjAxIiwiMjIwMiIsIjIyMDMiLCIyMjA0IiwiMjIwNSIsIjIzMDEiLCIyMzAyIiwiMjMwMyIsIjI0MDEiLCIyNDAyIiwiMjQwMyIsIjI0MDQiLCIyNTAxIiwiMjUwMiIsIjI1MDMiLCIyNjAxIiwiMjYwMiIsIjI3MDEiLCIyNzAyIiwiMjcwMyIsIjI3MDQiLCIyNzA1IiwiMjcwNiIsIjI4MDEiLCIyODAyIiwiMjgwMyIsIjI4MDQiLCIyODA1IiwiMjgwNiIsIjI5MDEiLCIyOTAyIiwiMjkwMyIsIjI5MDQiLCIyOTA1IiwiMjkwNiIsImJpbmFyeSIsImlzQXJyYXkiLCJpc0J1ZiIsIkVuY29kZXIiLCJ0eXBlcyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiRVZFTlQiLCJBQ0siLCJFUlJPUiIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJEZWNvZGVyIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsImlkIiwicGF5bG9hZCIsInRyeVN0cmluZ2lmeSIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwicmVtb3ZlQmxvYnMiLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsImVuY29kZUFzQmluYXJ5IiwiYWRkIiwiYnVmIiwicGFyc2UiLCJ0cnlQYXJzZSIsImRlY29kZVN0cmluZyIsInRha2VCaW5hcnlEYXRhIiwiZGVzdHJveSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJiaW5EYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIl9fcHJvdG9fXyIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJUeXBlRXJyb3IiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwic3RhcnQiLCJlbmQiLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsIm9mZnNldCIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsIk1hdGgiLCJtaW4iLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZ2xvYmFsIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJ4IiwieSIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImlzRmluaXRlIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImRzdCIsImhhc0NPUlMiLCJnbG9iYWxUaGlzIiwib3B0cyIsInhkb21haW4iLCJ4c2NoZW1lIiwiZW5hYmxlc1hEUiIsIlhNTEh0dHBSZXF1ZXN0IiwiWERvbWFpblJlcXVlc3QiLCJzZWxmIiwiRnVuY3Rpb24iLCJwYXJzZXIiLCJUcmFuc3BvcnQiLCJwYXRoIiwiaG9zdG5hbWUiLCJwb3J0Iiwic2VjdXJlIiwicXVlcnkiLCJ0aW1lc3RhbXBQYXJhbSIsInRpbWVzdGFtcFJlcXVlc3RzIiwicmVhZHlTdGF0ZSIsImFnZW50Iiwic29ja2V0Iiwid2l0aENyZWRlbnRpYWxzIiwicGZ4IiwicGFzc3BocmFzZSIsImNlcnQiLCJjYSIsImNpcGhlcnMiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJmb3JjZU5vZGUiLCJpc1JlYWN0TmF0aXZlIiwiZXh0cmFIZWFkZXJzIiwibG9jYWxBZGRyZXNzIiwib25FcnJvciIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwic2VuZCIsIm9uT3BlbiIsIndyaXRhYmxlIiwib25EYXRhIiwib25QYWNrZXQiLCJyb290IiwicmUiLCJwYXJ0cyIsImV4ZWMiLCJ1cmkiLCJzb3VyY2UiLCJhdXRob3JpdHkiLCJpcHY2dXJpIiwicGx1cmFsIiwibXMiLCJtc0FicyIsImlzUGx1cmFsIiwicm91bmQiLCJvcHRpb25zIiwicGFyc2VGbG9hdCIsImxvbmciLCJhYnMiLCJmbXRMb25nIiwiZm10U2hvcnQiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiZyIsImVpbyIsIlNvY2tldCIsIkJhY2tvZmYiLCJoYXMiLCJNYW5hZ2VyIiwibnNwcyIsInN1YnMiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsImppdHRlciIsImNvbm5lY3RpbmciLCJsYXN0UGluZyIsInBhY2tldEJ1ZmZlciIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiZGVjb2RlciIsImF1dG9Db25uZWN0IiwiZW1pdEFsbCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5Iiwic2V0TWluIiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJzZXRKaXR0ZXIiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJzZXRNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwicmVjb25uZWN0aW5nIiwiYXR0ZW1wdHMiLCJyZWNvbm5lY3QiLCJjb25uZWN0Iiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJvbm9wZW4iLCJlcnJvclN1YiIsImNsZWFudXAiLCJ0aW1lciIsIm9ucGluZyIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uZXJyb3IiLCJvbkNvbm5lY3RpbmciLCJwcm9jZXNzUGFja2V0UXVldWUiLCJzdWJzTGVuZ3RoIiwicmVzZXQiLCJvbmNsb3NlIiwicmVhc29uIiwiZGVsYXkiLCJkdXJhdGlvbiIsIm9ucmVjb25uZWN0IiwiYXR0ZW1wdCIsIlhIUiIsIkpTT05QIiwid2Vic29ja2V0IiwicG9sbGluZyIsInhkIiwieHMiLCJqc29ucCIsImlzU1NMIiwiZm9yY2VKU09OUCIsInBhcnNlcXMiLCJpbmhlcml0IiwieWVhc3QiLCJQb2xsaW5nIiwiaGFzWEhSMiIsImZvcmNlQmFzZTY0IiwicG9sbCIsInBhdXNlIiwib25QYXVzZSIsImRvUG9sbCIsImNhbGxiYWNrZm4iLCJkb1dyaXRlIiwic2NoZW1hIiwic2lkIiwid2l0aE5hdGl2ZUJsb2IiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJwcmV2IiwiYWxwaGFiZXQiLCJzZWVkIiwibnVtIiwiZGVjb2RlZCIsInRvQXJyYXkiLCJoYXNCaW4iLCJldmVudHMiLCJjb25uZWN0X2Vycm9yIiwiY29ubmVjdF90aW1lb3V0IiwicmVjb25uZWN0X2F0dGVtcHQiLCJyZWNvbm5lY3RfZmFpbGVkIiwicmVjb25uZWN0X2Vycm9yIiwiaW8iLCJqc29uIiwiaWRzIiwiYWNrcyIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZmxhZ3MiLCJzdWJFdmVudHMiLCJldiIsImNvbXByZXNzIiwib25wYWNrZXQiLCJzYW1lTmFtZXNwYWNlIiwicm9vdE5hbWVzcGFjZUVycm9yIiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwic2VudCIsImVtaXRCdWZmZXJlZCIsImV4aXN0TG9jYXRpb24iLCJtZWRpYVNlY29uZEludGVydmFsIiwic2NyZWVuTW9kZSIsInNtYWxsIiwibWlkZGxlIiwicHJvdGNvbCIsInBvcnRhbFBhdGgiLCJjbGllbnRQYXRoIiwiYXNzZXRzUGF0aCIsInNlc3Npb25QYXRoIiwiY2FjaGVLZXkiLCJob3N0TmFtZSIsImF3c0hvc3RLZXkiLCJnZXRFbnYiLCJpc0RldiIsInd3d1VSTCIsImFwaVVSTCIsImFwaUFjY2Vzc1VSTCIsImNsaWVudFVSTCIsImRlc2NVUkwiLCJwb3J0YWxVUkwiLCJhc3NldHNVUkwiLCJhc3NldHNJbWdQYXRoIiwiY29uZiIsImF1dG9VUkwiLCJleHRVUkwiLCJ0cmFuc2FjdGlvblVSTCIsImFzc2V0c0ljb25QYXRoIiwiYXNzZXRzSnNQYXRoIiwic2Vzc2lvblVSTCIsImFwaVZlciIsImZpbmRPbmVQb3N0Q250IiwiZmluZE9uZUxpbWl0Q250Iiwib2dwSW1hZ2VzIiwiSHRtbCIsIk11c2ljIiwiVmlkZW8iLCJQb3N0IiwiVXNlciIsInVpZCIsInV0eXBlIiwibXVsdGlzdHJlYW1lZCIsInJlcXVlc3RMb2dpblR5cGUiLCJmcmllbmRzIiwiQW5hbHl6ZSIsIndhdGNoQ250IiwiQm9vdE9wdGlvbiIsImF0dHJpYnV0ZXMiLCJyZWJ1aWxkQXR0cmlidXRlc09iaiIsInJhbmRvbVN0cmluZyIsInJhbmRvbSIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImRpc3BhdGNoIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiVGhyZWFkcyIsImJhc2VUaHJlYWRzIiwibWVyZ2VUaHJlYWQiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJhcGlTY3JpcHQiLCJnZXRFbnZBbmRBcGlTY3JpcHQiLCJleHRTY3JpcHQiLCJnZXRFeHRTY3JpcHQiLCJjbGllbnRTY3JpcHQiLCJnZXRDbGllbnRTY3JpcHQiLCJhcGlTY3JpcHRBdHQiLCJyZWJ1aWxkQXR0cmlidXRlcyIsImV4dFNjcmlwdEF0dCIsImJvb3RBdHRyaWJ1dGVzIiwiZ2V0Qm9vdEF0dHJpYnV0ZXMiLCJpbml0aWFsQm9vdE9wdGlvbiIsInByb2RBcGlTcmMxIiwiSFRUUFNfUFJPVE9DT0wiLCJwcm9kQXBpU2NyaXB0MSIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9kQXBpU3JjMiIsInByb2RBcGlTY3JpcHQyIiwibG9jYWxBcGlTcmMxIiwibG9jYWxBcGlTY3JpcHQxIiwibG9jYWxBcGlTcmMyIiwibG9jYWxBcGlTY3JpcHQyIiwiZGV2QXBpU3JjMSIsImRldkFwaVNjcmlwdDEiLCJkZXZBcGlTcmMyIiwiZGV2QXBpU2NyaXB0MiIsImNsaWVudFNyYyIsInByb2RFeHRTcmMxIiwicHJvZEV4dFNjcmlwdDEiLCJwcm9kRXh0U3JjMiIsInByb2RFeHRTY3JpcHQyIiwiZGV2RXh0U3JjMSIsImRldkV4dFNjcmlwdDEiLCJkZXZFeHRTcmMyIiwiZGV2RXh0U2NyaXB0MiIsImluaXRpYWxSb290Q2giLCJIVFRQX1BST1RPQ09MIiwiZmlyc3RIYXNTbGFzaCIsImxhc3RIYXNTbGFzaCIsImdldEluaXRpYWxSb290Q2giLCJnZXRGaXJzdEhhc1NsYWNoIiwiZ2V0TGFzdEhhc1NsYWNoIiwiQ29yZUFQSSIsImFwaVN0b3JlIiwicmVzb2x2ZSIsIndzU2VydmVyIiwid3MiLCJmb3JjZU5ldyIsIm9uUmVzcG9uc2VNZUFQSSIsInNldFVwIiwib25SZXNwb25zZUNoQVBJIiwib25SZXF1ZXN0QVBJIiwiYWN0aW9ucyIsImFjdGlvbktleXMiLCJhY3Rpb25MZW5ndGgiLCJnZXRDb3JlQVBJIiwiYmVmb3JlRnVuY3Rpb24iLCJfcmVxdWVzdFN0YXRlIiwiZ2V0UmVxdWVzdFN0YXRlIiwiX2FjdGlvblN0YXRlIiwiZ2V0UmVxdWVzdEFjdGlvblN0YXRlIiwiYWN0aW9uU3RhdGUiLCJhY3Rpb25Ob2RlQ250IiwiYWN0aW9uUGxhaW5OYW1lIiwicmVzcG9uc2UiLCJDT05ORUNUSU9OX1NFUlZFUl9LRVkiLCJnZXRUb01lQVBJIiwiQ0FUQ0hfTUVfS0VZIiwiYWN0aW9uTWV0aG9kIiwiZ2V0UmVzcG9uc2VDaEFQSSIsIm9uS2V5Iiwib2ZmS2V5IiwiR2xvYmFsV2luZG93IiwiZXhlQ29yZUFwaSIsImNsaWVudFRvIiwib25Xc1NlcnZlciIsImV4ZUNhbGxiYWNrIiwiYWZ0ZXJNZWRpYUZpbHRlciIsIm9uQWN0aW9ucyIsImJvb3RQcm9taXNlcyIsIlByb21pc2UiLCJvbk1lc3NhZ2VSZXNvbHZlIiwib25tZXNzYWdlIiwib3JpZ2luIiwiQ0xJRU5UX1RPX0FQSV9UWVBFIiwiSEFORExFX0FQSV9BTkRfQ0xJRU5UIiwiY2xlYXJJbnRlcnZhbCIsImJvb3RJZCIsIkhBTkRMRV9FWFRfQU5EX0FQSSIsIkVYVF9UT19BUElfVFlQRSIsInJlc292ZSIsInRoZW4iLCJhbGwiLCJib290UGFyYW1zIiwic2V0SW50ZXJ2YWwiLCJ3aW5kb3dUeXBlIiwiQVBJX1RPX0NMSUVOVF9UWVBFIiwiY29yZUFwaSIsImFwaVN0YXRlIiwiYmVmb3JlTWVkaWFGaWx0ZXIiLCIkdCIsImdldEFjdGlvbnMiLCJwYXJhbXMxIiwicGFyYW1zMiIsImdldFNlcXVlbmNlQWN0aW9uTWFwIiwiQVBJX0JST0FEQ0FTVF9DQUxMQkFDSyIsIm1lZGlhIiwic2V0UG9zdHNUaW1lbGluZXMiLCJwbGF5aW5nIiwiTWVkaWEiLCJzZWFyY2hpbmciLCJyZWZyZWN0U2VsZlBvc3QiLCJyZXF1ZXN0T2JqIiwiZ2V0UmVxdWVzdE9iaiIsInBvc3RNZXNzYWdlIiwiY2xpZW50SWZyYW1lIiwiY29udGVudFdpbmRvdyIsImdsb2JhbFdpbmRvdyIsIm1heFNlYXJjaGluZ0NudCIsImlzTG9nIiwic2VhcmNoaW5nQ250IiwicGxheWluZ0NudCIsInBvaW50ZXJUaW1lIiwic3RhcnRlZCIsImlzUG9zdGluZyIsInNlYXJjaGluZ0lkIiwicGxheUludGVydmFsSWQiLCJoYW5kbGVFdmVudHMiLCJwb3N0aW5nIiwiYXBpVG8iLCJ0YWdUeXBlIiwiZ2V0TWVkaWFUYWdUeXBlIiwiTUVESUFfVE9fQ0xJRU5UX1RZUEUiLCJwdXNoRmxnIiwiZmlsZSIsInNlY29uZCIsInNldFN0YXR1cyIsIndhaXRpbmdJZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzcmNFbGVtZW50IiwibWVkaWFDaCIsImRlbGV0ZVByb3Rjb2wiLCJjdXJyZW50U3JjIiwiTUFYX1NBRkVfSU5URUdFUiIsInRpbWVsaW5lTGVuZ3RoIiwiYWRkUG9zdCIsInBvc3RzVGltZWxpbmVBbGwiLCJwbGF5IiwiaXNGb3JjZSIsImxvb2t1cCIsIm1hbmFnZXJzIiwibXVsdGlwbGV4IiwicGFyc2V1cmkiLCJsb2MiLCJzZWxlY3RDb2xvciIsImhhc2giLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJjb2VyY2UiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJleHRlbmQiLCJpbml0IiwiaW5zdGFuY2VzIiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJ0b05hbWVzcGFjZSIsInN0YWNrIiwiZGlzYWJsZSIsIm5hbWVzIiwic2tpcHMiLCJlbmFibGUiLCJpbnN0YW5jZSIsImNocm9tZSIsImxvY2FsIiwibG9nRm4iLCJjZWlsIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsIm91dHB1dCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCJ0cmFuc3BvcnRzIiwidHJhbnNwb3J0T3B0aW9ucyIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsInBvbGljeVBvcnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJvbmx5QmluYXJ5VXBncmFkZXMiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInByb2R1Y3QiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0IiwiY2xvbmUiLCJFSU8iLCJ0cmFuc3BvcnQiLCJyZXF1ZXN0VGltZW91dCIsInByb3RvY29scyIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInVwZ3JhZGVMb3Nlc0JpbmFyeSIsInVwZ3JhZGluZyIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsInRvIiwib25IYW5kc2hha2UiLCJzZXRQaW5nIiwiZmlsdGVyVXBncmFkZXMiLCJvbkhlYXJ0YmVhdCIsInNlbmRQYWNrZXQiLCJ3YWl0Rm9yVXBncmFkZSIsImNsZWFudXBBbmRDbG9zZSIsImZpbHRlcmVkVXBncmFkZXMiLCJlbXB0eSIsIlJlcXVlc3QiLCJhc3luYyIsInJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsInhociIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsImFib3J0IiwiYXR0YWNoRXZlbnQiLCJ1bmxvYWRIYW5kbGVyIiwiYXJyYXlidWZmZXIiLCJhYnYiLCJpaSIsImNvdW50IiwiZXJyX2NiIiwiYmFpbCIsInByb3h5IiwiYnl0ZUNvdW50IiwiYnl0ZUluZGV4Iiwic3RyaW5nRnJvbUNoYXJDb2RlIiwidWNzMmRlY29kZSIsImV4dHJhIiwiY291bnRlciIsImNoZWNrU2NhbGFyVmFsdWUiLCJjcmVhdGVCeXRlIiwiZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJjb250aW51YXRpb25CeXRlIiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJieXRlU3RyaW5nIiwidWNzMmVuY29kZSIsImNoYXJzIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiYmxvYlN1cHBvcnRlZCIsImJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyIsImJsb2JCdWlsZGVyU3VwcG9ydGVkIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIm1hcEFycmF5QnVmZmVyVmlld3MiLCJjaHVuayIsIkJsb2JCdWlsZGVyQ29uc3RydWN0b3IiLCJiYiIsInBhcnQiLCJCbG9iQ29uc3RydWN0b3IiLCJKU09OUFBvbGxpbmciLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsIl9fX2VpbyIsInNjcmlwdCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImZvcm0iLCJpZnJhbWUiLCJjcmVhdGVFbGVtZW50IiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhcmVhIiwiaWZyYW1lSWQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJzZXRBdHRyaWJ1dGUiLCJjb21wbGV0ZSIsImluaXRJZnJhbWUiLCJodG1sIiwic3VibWl0IiwiQnJvd3NlcldlYlNvY2tldCIsIk5vZGVXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJXZWJTb2NrZXRJbXBsIiwiV1MiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJjaGVjayIsImhlYWRlcnMiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwiZmFjdG9yIiwicmFuZCIsImRldmlhdGlvbiIsImVuZGlhbm5lc3MiLCJsb2FkYXZnIiwidXB0aW1lIiwiZnJlZW1lbSIsIk1BWF9WQUxVRSIsInRvdGFsbWVtIiwiY3B1cyIsInJlbGVhc2UiLCJhcHBWZXJzaW9uIiwibmV0d29ya0ludGVyZmFjZXMiLCJnZXROZXR3b3JrSW50ZXJmYWNlcyIsImFyY2giLCJwbGF0Zm9ybSIsInRtcGRpciIsInRtcERpciIsIkVPTCIsImhvbWVkaXIiLCJBcGlTdGF0ZSIsImNhY2hlcyIsIm1lbnVMb2dzIiwiYW5hbHl6ZSIsInRocmVhZERldGFpbCIsImdldEFwcFBhcmFtcyIsImdldFVzZXJQYXJhbXMiLCJhY3Rpb25Mb2ciLCJpc1RyYW5zaXRpb24iLCJSYW5rIiwiTWVudUxvZ3MiLCJ2ZXIiLCJicm9hZGNhc3RDYWxsYmFjayIsImVtaXRDYWxsYmFjayIsImluaXRpYWxTdGF0ZSIsInVwZGF0ZUFjdGlvbiIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiY2hpbGRyZW4iLCJyZWR1Y2VyRmlsZXMiLCJwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIiwibWVyZ2UiLCJwb3N0TGVuZ3RoIiwic29ydFdhdGNoQ250IiwiZ2V0RGlzcFBvc3RzIiwibmV3UmFua3MiLCJyYW5rQ250IiwibmV3UmFuayIsImZhaWNvbiIsIlNldHRpbmciLCJjbGllbnQiLCJjb21tb24iLCJwdCIsImRpc3BGbGciLCJtZWRpYUN1cnJlbnRUaW1lIiwibW9yZVBvc3RNdWxpdCIsImZ1bmN0aW9ucyIsImdldE1lcmdlZFRocmVhZHMiLCJkZXRhaWxDaCIsImdldEFueUFjdGlvblBvc3RzIiwic2V0U3RvcmFnZVBvc3RzVGltZWxpbmUiLCJtZWRpYVRhZ1R5cGVObyIsIkNMT1NFX0xJTktTIiwiZW1vdGlvbktleXMiLCJlbW90aW9ucyIsImFjdGlvbkVtb3Rpb25zIiwiZW1vdGlvbk1vZGVsS2V5IiwiZW1vdGlvbktleSIsImdldE9mZnNldEZpbmRJZCIsIk9OX0NMSUNLX1RPX01VTFRJX1RIUkVBRCIsIk9OX0NMSUNLX1RPX1RJTUVMSU5FX1RIUkVBRCIsImdldEZpbmRUeXBlRnJvbVNyYyIsIk9OX0NMSUNLX1RPX1NJTkdMRV9USFJFQUQiLCJPTl9DTElDS19UT19DSElMRF9USFJFQUQiLCJPTl9DTElDS19NRU5VIiwiUkVTSVpFX0VORF9XSU5ET1ciLCJPTl9DTElDS19UT0dHTEVfRElTUF9ERVRBSUwiLCJUT0dHTEVfQlVCQkxFX1BPU1QiLCJTVEFSVF9MSU5LX01FRElBIiwiR0VUX0NMSUVOVF9NRVRBUyIsInVwZGF0ZUZsZyIsInNldFN0b3JhZ2VIdG1sUG9zdHMiLCJwcm9wcyIsInNldFN0b3JhZ2UiLCJwb3N0c1RpbWVsaW5lQWxsTGVuZ3RoIiwicG9zdHNUaW1lbGluZVplcm9TZWNvbmQiLCJwb3N0S2V5IiwicG9zdFNpbmdsZSIsInBvc3RNdWx0aSIsInNldFN0b3JhZ2VQb3N0cyIsImdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lIiwiZ2V0U3RvcmFnZSIsImdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lWmVybyIsIlRhbGtuU2Vzc2lvbiIsImdldEJhc2VLZXkiLCJpdGVtcyIsIml0ZW0iLCJ1cGRhdGVTdHlsZSIsInN0eWxlS2V5IiwiZWxlVHlwZSIsInRhZ05hbWUiLCJvbkNsaWNrVG9nZ2xlUG9zdHMiLCJvbkNsaWNrVG9UaW1lbGluZVRocmVhZCIsIm9uQ2xpY2tUb011bHRpVGhyZWFkIiwib25DbGlja1RvU2luZ2xlVGhyZWFkIiwib25DbGlja1RvQ2hpbGRUaHJlYWQiLCJvbkNsaWNrVG9Mb2dzVGhyZWFkIiwib25DaGFuZ2VJbnB1dFBvc3QiLCJ0b2dnbGVEaXNwTWFpbiIsInRvZ2dsZURpc3BCb2FyZCIsIm9uQ2xpY2tUb2dnbGVNYWluIiwidG9nZ2xlQnViYmxlUG9zdCIsIm9wZW5MaW5rcyIsImlzT3BlbkxpbmtzIiwiY2xvc2VMaW5rcyIsInRvZ2dsZUxpbmtzIiwib25DbGlja011bHRpc3RyZWFtIiwib25DbGlja1RvZ2dsZURpc3BNZW51Iiwib25DbGlja1RvZ2dsZURpc3BEZXRhaWwiLCJvbkNsaWNrTGlrZSIsIm9uQ2xpY2tNb25leSIsIm9uQ2xpY2tTaGFyZSIsIm9uUmVzaXplU3RhcnRXaW5kb3ciLCJvblJlc2l6ZUVuZFdpbmRvdyIsIm9uU2Nyb2xsVXBkYXRlVGltZU1hcmtlciIsInVpVGltZU1hcmtlciIsIm9uVHJhbnNpdGlvbiIsIm9mZlRyYW5zaXRpb24iLCJvblRyYW5zaXRpb25FbmQiLCJvbkNsaWNrTWVudSIsIm9uQ2xpY2tTZXR0aW5nIiwic2V0dGluZ1R5cGUiLCJvcGVuSW5uZXJOb3RpZiIsImNsb3NlSW5uZXJOb3RpZiIsIm9wZW5Ob3RpZiIsImlzT3Blbk5vdGlmIiwiY2xvc2VOb3RpZiIsIm9uQ2xpY2tPcGVuTG9ja01lbnUiLCJvcGVuTG9ja01lbnUiLCJvcGVuTmV3UG9zdCIsImlzT3Blbk5ld1Bvc3QiLCJjbG9zZU5ld1Bvc3QiLCJvcGVuTWVudVRyYW5zaXRpb25FbmQiLCJ0aHJlYWRTY3JvbGxZIiwic3RhcnREaXNwUG9zdHMiLCJpc0Rpc3BQb3N0cyIsInN0YXJ0VW5kaXNwUG9zdHMiLCJjb21wb25lbnREaWRNb3VudHMiLCJjb21wb25lbnROYW1lIiwiYm9vdEV4dGVuc2lvbiIsInVwZGF0ZUV4dGVuc2lvbiIsImdldENsaWVudE1ldGFzIiwidG9nZ2xlRGlzcFBvc3RzU3VwcG9ydGVyIiwiY2xvc2VEaXNwUG9zdHNTdXBwb3J0ZXIiLCJpc09wZW5Qb3N0c1N1cHBvcnRlciIsIm5leHRQb3N0c1RpbWVsaW5lIiwidW5tb3VudFBvc3RzVGltZWxpbmUiLCJjbGVhclBvc3RzVGltZWxpbmUiLCJwcmV2UG9zdHNUaW1lbGluZSIsImRlbGVnYXRlUG9zdCIsInBsYXlWaWRlbyIsInN0b3BWaWRlbyIsIm9uQ2hhbmdlRmluZFR5cGUiLCJzdGFydExpbmtNZWRpYSIsImxvYWRpbmdFbmQiLCJzY3JvbGxUaHJlYWQiLCJlbmRBbmltYXRlU2Nyb2xsVG8iLCJjcmVhdGVOb3RpZiIsInVwZGF0ZVBvc3RzSGVpZ2h0IiwicG9zdHNIZWlnaHQiLCJlbmRwb2ludCIsImJlZm9yZUZ1bmN0aW9ucyIsInRhbGtuTWVkaWEiLCJiYWxhbmNlS2V5IiwiYmFsYW5jZSIsInR5cGVJZCIsInR5cGVMYWJlbCIsInNjaGVtYXMiLCIyODA3Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBF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QixRQUFRcEIsSUFBSyxJQUd0Q3FFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3RFLE1BQU1zQixPQUFPckIsSUFBSyxJQUNyQ3NFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3ZFLE1BQU1zQixPQUFPckIsSUFBSyxJQUNyQ3VFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3hFLE1BQU1zQixPQUFPckIsSUFBSyxJQUdyQ3dFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3pFLE1BQU11QixNQUFNdEIsSUFBSyxJQUNwQ3lFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzFFLE1BQU11QixNQUFNdEIsSUFBSyxJQUNwQzBFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzNFLE1BQU11QixNQUFNdEIsSUFBSyxJQUNwQzJFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzVFLE1BQU11QixNQUFNdEIsSUFBSyxJQUdwQzRFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzdFLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQzZFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzlFLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQzhFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUy9FLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQytFLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2hGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ2dGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2pGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ2lGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2xGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ2tGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU25GLE1BQU13QixJQUFJdkIsSUFBSyxJQUdsQ21GLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3BGLE1BQU15QixLQUFLeEIsSUFBSyxJQUNuQ29GLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3JGLE1BQU15QixLQUFLeEIsSUFBSyxJQUduQ3FGLEtBQU0sQ0FBQyxDQUFF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QyxXQUFXbkMsSUFBSyxJQUd6Q3lILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzFILE1BQU1xQyxhQUFhcEMsSUFBSyxJQUMzQzBILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzNILE1BQU1xQyxhQUFhcEMsSUFBSyxJQUczQzJILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzVILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzRILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzdILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzZILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzlILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzhILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUy9ILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQytILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2hJLE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQ2dJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2pJLE1BQU1zQyxNQUFNckMsSUFBSyxJQUdwQ2lJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2xJLE1BQU11QyxNQUFNdEMsSUFBSyxJQUNwQ2tJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU25JLE1BQU11QyxNQUFNdEMsSUFBSyxJQUNwQ21JLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3BJLE1BQU11QyxNQUFNdEMsSUFBSyxJQUNwQ29JLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3JJLE1BQU11QyxNQUFNdEMsSUFBSyxJQUNwQ3FJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3RJLE1BQU11QyxNQUFNdEMsSUFBSyxJQUNwQ3NJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3ZJLE1BQU11QyxNQUFNdEMsSUFBSyxJQUNwQ3dyQyxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVN6ckMsTUFBTXVDLE1BQU10QyxJQUFLLElBR3BDdUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTeEksTUFBTXdDLEtBQUt2QyxJQUFLLElBQ25Dd0ksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTekksTUFBTXdDLEtBQUt2QyxJQUFLLElBQ25DeUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTMUksTUFBTXdDLEtBQUt2QyxJQUFLLElBQ25DMEksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTM0ksTUFBTXdDLEtBQUt2QyxJQUFLLElBQ25DMkksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTNUksTUFBTXdDLEtBQUt2QyxJQUFLLElBQ25DNEksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTN0ksTUFBTXdDLEtBQUt2QyxJQUFLLEtBR3JDLE9BQU9vckMsRUFBUXRyQyxHQUFXc3JDLEVBQVF0ckMsR0FBVyxLQUcvQyxvQkFDRSxJQUFJeXJDLEVBQVUsR0FJZCxPQUhBL3FDLEVBQVFULE1BQU0xaEIsUUFBUSxDQUFDK0IsRUFBSzVFLEtBQzFCK3ZELEVBQVFuckQsRUFBSTZmLE9BQVMsQ0FBRTFoQixLQUFNK0ksT0FBUWhILFFBQVMsRUFBR3N2QixJQUFLLEtBRWpEMjdCLEdBNUpYLGEsa0tDRkEsaUJBRUEsTUFBcUI3cUMsRUFlbkIsWUFBWW5pQixHQUNWSixLQUFLd2hCLFdBQWEsR0FDbEJ6akIsT0FBT2tDLEtBQUtzaUIsRUFBY1gsT0FBTzFoQixRQUFRZ2YsSUFDdkNsZixLQUFLd2hCLFdBQVc1ZSxLQUFLMmYsRUFBY1gsTUFBTTFDLEdBQU80QyxTQWpCcEQsbUJBQ0UsTUFBTyxDQUNMLFVBQVNGLE1BQU1zQixPQUNmLFVBQVN0QixNQUFNdUIsTUFDZixVQUFTdkIsTUFBTXdCLElBQ2YsVUFBU3hCLE1BQU00QixNQUNmLFVBQVM1QixNQUFNK0IsTUFDZixVQUFTL0IsTUFBTWlDLFdBQ2YsVUFBU2pDLE1BQU1zQyxNQUNmLFVBQVN0QyxNQUFNeUMsWUFZbkIsc0JBQXNCMUMsR0FDcEIsTUFBTXNyQyxFQUFVLENBRWRqbkMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTcEUsTUFBTXNCLE9BQU9yQixJQUFLLElBQ3JDb0UsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTckUsTUFBTXNCLE9BQU9yQixJQUFLLElBR3JDcUUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdEUsTUFBTXNCLE9BQU9yQixJQUFLLElBQ3JDc0UsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdkUsTUFBTXNCLE9BQU9yQixJQUFLLElBQ3JDdUUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTeEUsTUFBTXNCLE9BQU9yQixJQUFLLElBR3JDd0UsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTekUsTUFBTXVCLE1BQU10QixJQUFLLElBQ3BDeUUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTMUUsTUFBTXVCLE1BQU10QixJQUFLLElBQ3BDMEUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTM0UsTUFBTXVCLE1BQU10QixJQUFLLElBQ3BDMkUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTNUUsTUFBTXVCLE1BQU10QixJQUFLLElBR3BDNEUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTN0UsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDNkUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTOUUsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDOEUsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTL0UsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDK0UsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTaEYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDZ0YsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTakYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDaUYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbEYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDa0YsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbkYsTUFBTXdCLElBQUl2QixJQUFLLElBR2xDbUYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTcEYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDb0YsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTckYsTUFBTXdCLElBQUl2QixJQUFLLElBR2xDcUYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdEYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDc0YsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdkYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDdUYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTeEYsTUFBTXdCLElBQUl2QixJQUFLLElBQ2xDd0YsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTekYsTUFBTXdCLElBQUl2QixJQUFLLElBR2xDeUYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTMUYsTUFBTTRCLE1BQU0zQixJQUFLLElBQ3BDMEYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTM0YsTUFBTTRCLE1BQU0zQixJQUFLLElBR3BDNEYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTN0YsTUFBTTRCLE1BQU0zQixJQUFLLElBQ3BDNkYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTOUYsTUFBTTRCLE1BQU0zQixJQUFLLElBQ3BDOEYsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTL0YsTUFBTTRCLE1BQU0zQixJQUFLLElBR3BDK0YsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTaEcsTUFBTTZCLE1BQU01QixJQUFLLElBQ3BDZ0csS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTakcsTUFBTTZCLE1BQU01QixJQUFLLElBQ3BDaUcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbEcsTUFBTTZCLE1BQU01QixJQUFLLElBR3BDa0csS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbkcsTUFBTStCLE1BQU05QixJQUFLLElBQ3BDbUcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTcEcsTUFBTStCLE1BQU05QixJQUFLLElBQ3BDb0csS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTckcsTUFBTStCLE1BQU05QixJQUFLLElBQ3BDcUcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdEcsTUFBTStCLE1BQU05QixJQUFLLElBR3BDdUcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTeEcsTUFBTStCLE1BQU05QixJQUFLLElBQ3BDd0csS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTekcsTUFBTStCLE1BQU05QixJQUFLLElBQ3BDeUcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTMUcsTUFBTStCLE1BQU05QixJQUFLLElBR3BDMEcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTM0csTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDMkcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTNUcsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDNEcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTN0csTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDNkcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTOUcsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDOEcsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTL0csTUFBTWlDLFdBQVdoQyxJQUFLLElBR3pDK0csS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTaEgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDZ0gsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTakgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDaUgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbEgsTUFBTWlDLFdBQVdoQyxJQUFLLElBR3pDa0gsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbkgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDbUgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTcEgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDb0gsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTckgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDcUgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdEgsTUFBTWlDLFdBQVdoQyxJQUFLLElBR3pDc0gsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdkgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDdUgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTeEgsTUFBTWlDLFdBQVdoQyxJQUFLLElBQ3pDd0gsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTekgsTUFBTWlDLFdBQVdoQyxJQUFLLElBR3pDeUgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTMUgsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDMEgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTM0gsTUFBTXNDLE1BQU1yQyxJQUFLLElBR3BDMkgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTNUgsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDNEgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTN0gsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDNkgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTOUgsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDOEgsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTL0gsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDK0gsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTaEksTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDZ0ksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTakksTUFBTXNDLE1BQU1yQyxJQUFLLElBR3BDaUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbEksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDa0ksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTbkksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDbUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTcEksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDb0ksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTckksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDcUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdEksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDc0ksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTdkksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDd3JDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3pyQyxNQUFNeUMsV0FBV3hDLElBQUssSUFHekN1SSxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVN4SSxNQUFNeUMsV0FBV3hDLElBQUssSUFDekN3SSxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVN6SSxNQUFNeUMsV0FBV3hDLElBQUssSUFDekN5SSxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVMxSSxNQUFNeUMsV0FBV3hDLElBQUssSUFDekMwSSxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVMzSSxNQUFNeUMsV0FBV3hDLElBQUssSUFDekMySSxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVM1SSxNQUFNeUMsV0FBV3hDLElBQUssSUFDekM0SSxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVM3SSxNQUFNeUMsV0FBV3hDLElBQUssS0FFM0MsT0FBT29yQyxFQUFRdHJDLEdBQVdzckMsRUFBUXRyQyxHQUFXLEtBRy9DLG9CQUNFLElBQUl5ckMsRUFBVSxHQUlkLE9BSEE3cUMsRUFBY1gsTUFBTTFoQixRQUFRLENBQUMrQixFQUFLNUUsS0FDaEMrdkQsRUFBUW5yRCxFQUFJNmYsT0FBUyxDQUFFMWhCLEtBQU0rSSxPQUFRaEgsUUFBUyxFQUFHc3ZCLElBQUssS0FFakQyN0IsR0EvSVgsYSxrS0NGQSxnQkFFQSxVQUFleGQsSUFDYixNQUFNeHZDLEVBQU8sR0FBRyxVQUFTb2QsMEJBQTBCb3lCLEVBQVN4dkMsT0FDNUQsT0FBTyxPQUFQLHdCQUFZd3ZDLEdBQVEsQ0FBRXh2QyxXLDhFQ0p4QixnQkFDRSxxQkFBcUJ1WSxHQUNuQixPQUFPQSxFQUFJdEgsUUFBUSxVQUFXLElBQUlBLFFBQVEsU0FBVSIsImZpbGUiOiJ0YWxrbi5hcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDYpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZW1hIHtcbiAgZXJyb3JUaHJvdzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbjogYW55ID0ge30pIHtcbiAgICAvKlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHRoaXMsXG4gICAgICAnX1NFVF9DT0xVTU5TJyxcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH1cbiAgICApO1xuKi9cbiAgfVxuXG4gIHN0YXRpYyBnZXRUeXBlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIk51bGxcIjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBcIlVuZGVmaW5lZFwiO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIHN0YXRpYyBpc1NldCh2YWw6IGFueSkge1xuICAgIHJldHVybiBTY2hlbWEuZ2V0VHlwZSh2YWwpID09PSBcIlVuZGVmaW5lZFwiIHx8IFNjaGVtYS5nZXRUeXBlKHZhbCkgPT09IFwiTnVsbFwiID8gZmFsc2UgOiB0cnVlO1xuICB9XG5cbiAgc3RhdGljIGdldEJvb2wodmFsOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJib29sZWFuXCIpIHJldHVybiB2YWw7XG4gICAgcmV0dXJuIHZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgaXNBbm9ueW1vdXNGdW5jKGZuKSB7XG4gICAgY29uc3QgZm5TdHJpbmcgPSBmbi50b1N0cmluZygpO1xuXG4gICAgaWYgKGZuU3RyaW5nID09PSBcImZ1bmN0aW9uKCl7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24oKSB7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24gKCl7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24gKCkge31cIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGZuU3RyaW5nID09PSBcIigpPT57fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjcmVhdGUoc3RhdGU6IGFueSkge1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICBjb25zdCBzdGF0ZVR5cGUgPSBTY2hlbWEuZ2V0VHlwZShzdGF0ZSk7XG4gICAgbGV0IHZhbGlkTWV0aG9kcyA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc3RhdGUpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIFByb3BlcnRpZXMgLlxuICAgICAgbGV0IHZhbHVlcztcbiAgICAgIGxldCBkZWYgPSBudWxsO1xuICAgICAgbGV0IHR5cGU6IGFueTtcbiAgICAgIGxldCBpc0FjY2VwdE51bGwgPSBmYWxzZTtcbiAgICAgIGxldCBpc0FjY2VwdEJsYW5rID0gZmFsc2U7XG4gICAgICBsZXQgdmFsaWQ6IGFueSA9ICgpID0+IHt9O1xuICAgICAgbGV0IHZhbHVlOiBhbnkgPSBudWxsO1xuXG4gICAgICAvLyBBc3NpZ24gUHJvcGVydGllcyAuXG4gICAgICBpZiAoU2NoZW1hLmdldFR5cGUoc3RhdGVba2V5XSkgPT09IFwiT2JqZWN0XCIpIHtcbiAgICAgICAgdmFsdWVzID0gc3RhdGVba2V5XTtcbiAgICAgICAgbGV0IGlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaXNBY2NlcHROdWxsID0gdmFsdWVzLmlzQWNjZXB0TnVsbCA/IHZhbHVlcy5pc0FjY2VwdE51bGwgOiBpc0FjY2VwdE51bGw7XG4gICAgICAgIGlzQWNjZXB0QmxhbmsgPSB2YWx1ZXMuaXNBY2NlcHRCbGFuayA/IHZhbHVlcy5pc0FjY2VwdEJsYW5rIDogaXNBY2NlcHRCbGFuaztcbiAgICAgICAgZGVmID0gIWlzRW1wdHlPYmplY3QgJiYgdmFsdWVzLmRlZiA/IHZhbHVlcy5kZWYgOiBkZWY7XG4gICAgICAgIHZhbHVlID0gIWlzRW1wdHlPYmplY3QgJiYgKHZhbHVlcy52YWx1ZSB8fCB2YWx1ZXMudmFsdWUgPT09IFwiXCIpID8gdmFsdWVzLnZhbHVlIDogdmFsdWVzO1xuICAgICAgICB2YWx1ZSA9IGlzRW1wdHlPYmplY3QgJiYgZGVmID8gZGVmIDogdmFsdWU7XG4gICAgICAgIHR5cGUgPSBTY2hlbWEuZ2V0VHlwZSh2YWx1ZSk7XG4gICAgICAgIHZhbGlkID0gdmFsdWVzLnZhbGlkID8gdmFsdWVzLnZhbGlkIDogdmFsaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHN0YXRlW2tleV07XG4gICAgICAgIGRlZiA9IHZhbHVlO1xuICAgICAgICBpc0FjY2VwdE51bGwgPSBpc0FjY2VwdE51bGw7XG4gICAgICAgIGlzQWNjZXB0QmxhbmsgPSBpc0FjY2VwdEJsYW5rO1xuICAgICAgICB0eXBlID0gU2NoZW1hLmdldFR5cGUodmFsdWUpO1xuICAgICAgICB2YWxpZCA9IHZhbGlkO1xuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSBGdW5jdGlvbnMgLlxuICAgICAgY29uc3QgdmFsaWRGdW5jID0gKF92YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSBgJHtjbGFzc05hbWV9LiR7a2V5fWA7XG4gICAgICAgIGNvbnN0IHZhbGlkVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgdmFsaWRUeXBlID0gdHlwZTtcbiAgICAgICAgY29uc3QgcGFyYW1zVmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIGNvbnN0IHBhcmFtc1R5cGUgPSBTY2hlbWEuZ2V0VHlwZShfdmFsdWUpO1xuXG4gICAgICAgIGlmIChwYXJhbXNUeXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgZXJyb3IgPSBgU0NIRU1BX1RZUEUgOiAke3BvaW50ZXJ9IFt2YWxpZFR5cGU6ICR7dHlwZX1dW3BhcmFtc1R5cGU6ICR7cGFyYW1zVHlwZX1dYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY2NlcHROdWxsICYmIF92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGVycm9yID0gYFNDSEVNQV9JU19BQ0NFUFRfTlVMTCA6ICAke3BvaW50ZXJ9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY2NlcHRCbGFuayAmJiBfdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfSVNfQUNDRVBUX0JMQU5LIDogICR7cG9pbnRlcn1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTY2hlbWEuZ2V0VHlwZSh2YWxpZCkgPT09IFwiRnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmICh2YWxpZChfdmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfWU9VUl9WQUxJRF9NRVRIT0QgOiAgJHtwb2ludGVyfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9pbnRlcixcbiAgICAgICAgICB2YWxpZFZhbHVlLFxuICAgICAgICAgIHZhbGlkVHlwZSxcbiAgICAgICAgICBwYXJhbXNWYWx1ZSxcbiAgICAgICAgICBwYXJhbXNUeXBlLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IHBvaW50ZXIsIHZhbGlkVmFsdWUsIHZhbGlkVHlwZSwgcGFyYW1zVmFsdWUsIHBhcmFtc1R5cGUsIGVycm9yIH0gPSB2YWxpZEZ1bmModmFsdWUpO1xuXG4gICAgICBpZiAoZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBfdmFsdWUgPT4ge1xuICAgICAgICAgICAgLy8gcG9pbnRlciwgdmFsaWRWYWx1ZSwgdmFsaWRUeXBlLCBwYXJhbXNWYWx1ZSwgcGFyYW1zVHlwZSwgZXJyb3JcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkUmVzdWx0ID0gdmFsaWRGdW5jKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4udGhpcywgW2tleV06IHZhbHVlIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnZhbGlkV2Fybih2YWxpZFJlc3VsdCk7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5lcnJvclRocm93KSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2FuU2V0KGtleTogYW55LCB2YWxpZFZhbHVlOiBhbnkpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpc1trZXldO1xuICAgICAgaWYoY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmKGN1cnJlbnRWYWx1ZSA9PT0gbnVsbCApe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYodmFsaWRWYWx1ZSA9PT0gdW5kZWZpbmVkICl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZih2YWxpZFZhbHVlID09PSBudWxsICl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGVycm9yIH0gPSAodGhpc1trZXldID0gdmFsaWRWYWx1ZSk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1trZXldID0gY3VycmVudFZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJCQUQgQ0FOIFNFVCBLRVk6IFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgXCIgXCIgKyBrZXkpO1xuICAgICAgY29uc29sZS53YXJuKFwiQkVGT0VSIFZBTFVFXCIpO1xuICAgICAgY29uc29sZS53YXJuKHR5cGVvZiB0aGlzW2tleV0pO1xuICAgICAgY29uc29sZS53YXJuKHRoaXNba2V5XSk7XG4gICAgICBjb25zb2xlLndhcm4oXCJBRlRFUiBWQUxVRVwiKTtcbiAgICAgIGNvbnNvbGUud2Fybih0eXBlb2YgdmFsaWRWYWx1ZSk7XG4gICAgICBjb25zb2xlLndhcm4odmFsaWRWYWx1ZSk7XG4gICAgICB0aHJvdyBgQkFEIENBTiBTRVQ6ICR7ZX1gO1xuICAgIH1cbiAgfVxuXG4gIG1lcmdlKHBhcmFtcyA9IHt9LCBpbW11dGFibGUgPSB0cnVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcmFtc1R5cGUgPSBTY2hlbWEuZ2V0VHlwZShwYXJhbXMpO1xuICAgICAgY29uc3Qgb2JqS2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtcyk7XG5cbiAgICAgIGlmIChvYmpLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1lcmdlZE9iajogYW55ID0geyAuLi50aGlzIH07XG4gICAgICAgIG9iaktleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzW2tleV0gIT09IHBhcmFtc1trZXldKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYW5TZXQoa2V5LCBwYXJhbXNba2V5XSkpIHtcbiAgICAgICAgICAgICAgbWVyZ2VkT2JqW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkJBRCBNRVJHRSBBIDogXCIgKyBrZXkgKyBcIiBcIiArIHBhcmFtc1trZXldICsgXCIgXCIgKyB0eXBlb2YgcGFyYW1zW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHBhcmFtc1R5cGUgPT09IFwiQXJyYXlcIikge1xuICAgICAgICAgIG1lcmdlZE9iaiA9IE9iamVjdC52YWx1ZXMobWVyZ2VkT2JqKTtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgICBjbGFzcyBBIHtcbiAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7ICB9XG4gICAgICAgICAgICAgIHJlZnJlc2goKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBBPnRoaXMuY29uc3RydWN0b3IpOyBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICovXG4gICAgICAgICAgcmV0dXJuIGltbXV0YWJsZSA/IG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikobWVyZ2VkT2JqKSA6IG1lcmdlZE9iajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW1tdXRhYmxlKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBtZXJnZWRPYmogKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKG1lcmdlZE9iaik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZWRPYmo7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICh0aGlzLmVycm9yVGhyb3cpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHBhcmFtcyk7XG4gICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgdGhyb3cgYEJBRCBNRVJHRSBCIDogJHtTY2hlbWEuZ2V0VHlwZShwYXJhbXMpfSAke2V9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihwYXJhbXMpO1xuICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihgQkFEIE1FUkdFIEMgOiAke1NjaGVtYS5nZXRUeXBlKHBhcmFtcyl9ICR7ZX1gKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0b0pTT04ob2JqOiBhbnkgPSB0aGlzKSB7XG4gICAgbGV0IGpzb25PYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgbGV0IHZhbHVlczogYW55ID0gb2JqW2tleV07XG4gICAgICBpZiAodmFsdWVzLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKCF2YWx1ZXMudHlwZSAmJiAhdmFsdWVzLmRlZmF1bHQpIHtcbiAgICAgICAgICB2YWx1ZXMgPSB0aGlzLnRvSlNPTih2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZXMuZGVmYXVsdCB8fCB2YWx1ZXMuZGVmYXVsdCA9PT0gXCJcIiB8fCB2YWx1ZXMuZGVmYXVsdCA9PT0gMCkge1xuICAgICAgICBqc29uT2JqW2tleV0gPSB2YWx1ZXMuZGVmYXVsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpzb25PYmpba2V5XSA9IHZhbHVlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvbk9iajtcbiAgfVxuXG4gIGZvckVhY2goZnVuYykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMpLmZvckVhY2goZnVuYyk7XG4gIH1cblxuICBtYXAoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLm1hcChmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBmaWx0ZXIoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLmZpbHRlcihmdW5jKSwgZnVuYyk7XG4gIH1cblxuICByZWR1Y2UoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLnJlZHVjZShmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBmaW5kKGZ1bmMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzKS5maW5kKGZ1bmMpO1xuICB9XG5cbiAgc29ydChmdW5jKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuc29ydChmdW5jKTtcbiAgfVxuXG4gIHB1c2godmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIHVuc2hpZnQodmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy51bnNoaWZ0KHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIGdldFNoaWZ0KCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcyk7XG4gICAgY29uc3QgcmVzdWx0cyA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShyZXN1bHRzKTtcbiAgfVxuXG4gIHBvcCh2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlczogYW55ID0gT2JqZWN0LnZhbHVlcyh0aGlzKTtcbiAgICB2YWx1ZXMucG9wKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIHJldHVybkltbXV0YWJsZSh2YWx1ZXMsIGZ1bmMgPSAoKSA9PiB7fSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSgpO1xuICAgIH0gZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyh0aGlzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChTdHJpbmcoZnVuYykuaW5kZXhPZihcImNyZWF0ZUVsZW1lbnRcIikgPiAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKHZhbHVlcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZXNbMF0gJiYgdmFsdWVzWzBdW1wiJCR0eXBlb2ZcIl0gJiYgdmFsdWVzWzBdW1wiJCR0eXBlb2ZcIl0uY29uc3RydWN0b3IubmFtZSA9PT0gXCJTeW1ib2xcIikge1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikodmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZFdhcm4odmFsaWRSZXN1bHQpIHtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgICBjb25zb2xlLndhcm4oXCIjXCIgKyB2YWxpZFJlc3VsdC5wb2ludGVyKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMgaW5pdGlhbGl6ZWRWYWxpZFR5cGVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnZhbGlkVHlwZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIGluaXRpYWxpemVkVmFsaWRWYWx1ZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQudmFsaWRWYWx1ZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIHBhcmFtc1R5cGVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnBhcmFtc1R5cGUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyBwYXJhbXNWYWx1ZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQucGFyYW1zVmFsdWUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCIpO1xuICB9XG59XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcbnZhciBoYXNCaW5hcnkgPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIHNsaWNlQnVmZmVyID0gcmVxdWlyZSgnYXJyYXlidWZmZXIuc2xpY2UnKTtcbnZhciBhZnRlciA9IHJlcXVpcmUoJ2FmdGVyJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xuXG52YXIgYmFzZTY0ZW5jb2RlcjtcbmlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gIGJhc2U2NGVuY29kZXIgPSByZXF1aXJlKCdiYXNlNjQtYXJyYXlidWZmZXInKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBhbiBhbmRyb2lkIGJyb3dzZXIuIFRoYXQgcmVxdWlyZXMgdXMgdG8gdXNlXG4gKiBBcnJheUJ1ZmZlciB3aXRoIHBvbGxpbmcgdHJhbnNwb3J0cy4uLlxuICpcbiAqIGh0dHA6Ly9naGluZGEubmV0L2pwZWctYmxvYi1hamF4LWFuZHJvaWQvXG4gKi9cblxudmFyIGlzQW5kcm9pZCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBpbiBQaGFudG9tSlMuXG4gKiBVcGxvYWRpbmcgYSBCbG9iIHdpdGggUGhhbnRvbUpTIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5LCBhcyByZXBvcnRlZCBoZXJlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FyaXlhL3BoYW50b21qcy9pc3N1ZXMvMTEzOTVcbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGlzUGhhbnRvbUpTID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogV2hlbiB0cnVlLCBhdm9pZHMgdXNpbmcgQmxvYnMgdG8gZW5jb2RlIHBheWxvYWRzLlxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgZG9udFNlbmRCbG9icyA9IGlzQW5kcm9pZCB8fCBpc1BoYW50b21KUztcblxuLyoqXG4gKiBDdXJyZW50IHByb3RvY29sIHZlcnNpb24uXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICovXG5cbnZhciBwYWNrZXRzID0gZXhwb3J0cy5wYWNrZXRzID0ge1xuICAgIG9wZW46ICAgICAwICAgIC8vIG5vbi13c1xuICAsIGNsb3NlOiAgICAxICAgIC8vIG5vbi13c1xuICAsIHBpbmc6ICAgICAyXG4gICwgcG9uZzogICAgIDNcbiAgLCBtZXNzYWdlOiAgNFxuICAsIHVwZ3JhZGU6ICA1XG4gICwgbm9vcDogICAgIDZcbn07XG5cbnZhciBwYWNrZXRzbGlzdCA9IGtleXMocGFja2V0cyk7XG5cbi8qKlxuICogUHJlbWFkZSBlcnJvciBwYWNrZXQuXG4gKi9cblxudmFyIGVyciA9IHsgdHlwZTogJ2Vycm9yJywgZGF0YTogJ3BhcnNlciBlcnJvcicgfTtcblxuLyoqXG4gKiBDcmVhdGUgYSBibG9iIGFwaSBldmVuIGZvciBibG9iIGJ1aWxkZXIgd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYiA9IHJlcXVpcmUoJ2Jsb2InKTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0LlxuICpcbiAqICAgICA8cGFja2V0IHR5cGUgaWQ+IFsgPGRhdGE+IF1cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA1aGVsbG8gd29ybGRcbiAqICAgICAzXG4gKiAgICAgNFxuICpcbiAqIEJpbmFyeSBpcyBlbmNvZGVkIGluIGFuIGlkZW50aWNhbCBwcmluY2lwbGVcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1dGY4ZW5jb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSB1dGY4ZW5jb2RlO1xuICAgIHV0ZjhlbmNvZGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGRhdGEgPSAocGFja2V0LmRhdGEgPT09IHVuZGVmaW5lZClcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogcGFja2V0LmRhdGEuYnVmZmVyIHx8IHBhY2tldC5kYXRhO1xuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIGlmIChkYXRhICYmIGRhdGEuYmFzZTY0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFNlbmRpbmcgZGF0YSBhcyBhIHV0Zi04IHN0cmluZ1xuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuXG4gIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcbiAgICBlbmNvZGVkICs9IHV0ZjhlbmNvZGUgPyB1dGY4LmVuY29kZShTdHJpbmcocGFja2V0LmRhdGEpLCB7IHN0cmljdDogZmFsc2UgfSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKCcnICsgZW5jb2RlZCk7XG5cbn07XG5cbmZ1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdICsgcGFja2V0LmRhdGEuZGF0YTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHJlc3VsdEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEgKyBkYXRhLmJ5dGVMZW5ndGgpO1xuXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdEJ1ZmZlcltpKzFdID0gY29udGVudEFycmF5W2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEJ1ZmZlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQoeyB0eXBlOiBwYWNrZXQudHlwZSwgZGF0YTogZnIucmVzdWx0IH0sIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFja2V0LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcbiAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgKyBiNjQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgdmFyIGI2NGRhdGE7XG4gIHRyeSB7XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHdpdGggdHlwZWQgYXJyYXlzXG4gICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpO1xuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhc2ljW2ldID0gdHlwZWRbaV07XG4gICAgfVxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgfVxuICBtZXNzYWdlICs9IGJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG4iLCJpbXBvcnQgcHJvY2VzcyBmcm9tIFwicHJvY2Vzc1wiO1xuY29uc3QgaG9zdE5hbWUgPSBwcm9jZXNzLmVudi5IT1NUTkFNRSA/IHByb2Nlc3MuZW52LkhPU1ROQU1FIDogXCJsb2NhbGhvc3RcIjtcbmNvbnN0IGRlZmluZTogYW55ID0ge1xuICBQUk9EVUNUSU9OOiBcIlBST0RVQ1RJT05cIixcbiAgTE9DQUxIT1NUOiBcIkxPQ0FMSE9TVFwiLFxuICBERVZFTE9QTUVOVDogXCJERVZFTE9QTUVOVFwiLFxuICBQUk9EVUNUSU9OX0lQOiBob3N0TmFtZSxcbiAgUFJPRFVDVElPTl9ET01BSU46IFwidGFsa24uaW9cIixcbiAgREVWRUxPUE1FTlRfRE9NQUlOOiBcImxvY2FsaG9zdFwiLFxuICBQT1JUUzoge1xuICAgIEhUVFA6IDgwLFxuICAgIEhUVFBTOiA0NDMsXG4gICAgREVWRUxPUE1FTlQ6IDgwODAsXG4gICAgREVWRUxPUE1FTlRfQVBJOiA4MDgxLFxuICAgIFJFRElTOiA2Mzc5LFxuICAgIE1PTkdPOiAyNzAxNyxcbiAgICBTT0NLRVRfSU86IDEwNDQzLFxuICB9LFxuICBTVUJfRE9NQUlOUzoge1xuICAgIFdXVzogXCJ3d3dcIixcbiAgICBBUEk6IFwiYXBpXCIsXG4gICAgREVTQzogXCJkZXNjXCIsXG4gICAgUE9SVEFMOiBcInBvcnRhbFwiLFxuICAgIENMSUVOVDogXCJjbGllbnRcIixcbiAgICBBU1NFVFM6IFwiYXNzZXRzXCIsXG4gICAgU0VTU0lPTjogXCJzZXNzaW9uXCIsXG4gICAgQVVUTzogXCJhdXRvXCIsXG4gICAgRVhUOiBcImV4dFwiLFxuICAgIFRSQU5TQUNUSU9OOiBcInRyYW5zYWN0aW9uXCIsXG4gIH0sXG4gIEFQUF9UWVBFUzoge1xuICAgIFBPUlRBTDogXCJQT1JUQUxcIixcbiAgICBFWFRFTlNJT046IFwiRVhURU5TSU9OXCIsXG4gICAgQVBJOiBcIkFQSVwiLFxuICB9LFxuICBVUkw6IHtcbiAgICB0d2l0dGVyOiBcImh0dHBzOi8vdHdpdHRlci5jb20vXCIsXG4gICAgZmFjZWJvb2s6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1wiLFxuICAgIGFwcHN0b3JlOiBcImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9hcHAvaWRcIixcbiAgICBwbGF5c3RvcmU6IFwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPVwiLFxuICB9LFxuICB0YWxrbkNsaWVudEpzOiBcInRhbGtuLmNsaWVudC5qc1wiLFxuICB0YWxrbkFwaUpzOiBcInRhbGtuLmFwaS5qc1wiLFxuICBub0lubmVyTm90aWY6IFwiU29ycnksIE5vIEZ1bmN0aW9uLlwiLFxuICBzdG9yYWdlS2V5OiB7XG4gICAgYmFzZUtleTogXCJAdGFsa25AXCIsXG4gICAgcG9zdHNUaW1lbGluZVplcm86IFwicG9zdHNUaW1lbGluZVplcm9cIixcbiAgICBwb3N0c1RpbWVsaW5lOiBcInBvc3RzVGltZWxpbmVcIixcbiAgICBwb3N0c1NpbmdsZTogXCJwb3N0c1NpbmdsZVwiLFxuICAgIHBvc3RzTXVsdGk6IFwicG9zdHNNdWx0aVwiLFxuICAgIHBvc3RzQ2hpbGQ6IFwicG9zdHNDaGlsZFwiLFxuICAgIHBvc3RzTG9nczogXCJwb3N0c0xvZ3NcIixcbiAgICB0aHJlYWRzOiBcInRocmVhZHNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZTtcbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlLy9UaHJlYWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgU2NoZW1hIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T2Zmc2V0RmluZElkKCkge1xuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZVRpbWVsaW5lKCk6IFwiVGltZWxpbmVcIiB7XG4gICAgcmV0dXJuIFwiVGltZWxpbmVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlU2luZ2xlKCk6IFwiU2luZ2xlXCIge1xuICAgIHJldHVybiBcIlNpbmdsZVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVNdWx0aSgpOiBcIk11bHRpXCIge1xuICAgIHJldHVybiBcIk11bHRpXCI7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZUNoaWxkKCk6IFwiQ2hpbGRcIiB7XG4gICAgcmV0dXJuIFwiQ2hpbGRcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlTG9ncygpOiBcIkxvZ3NcIiB7XG4gICAgcmV0dXJuIFwiTG9nc1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlTm8oKSB7XG4gICAgcmV0dXJuIFwiaHRtbFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlQXVkaW8oKSB7XG4gICAgcmV0dXJuIFwiYXVkaW9cIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVGFnVHlwZVZpZGVvKCkge1xuICAgIHJldHVybiBcInZpZGVvXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVR5cGVNcDMoKSB7XG4gICAgcmV0dXJuIFwibXAzXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVR5cGVNcDQoKSB7XG4gICAgcmV0dXJuIFwibXA0XCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVR5cGVNNGEoKSB7XG4gICAgcmV0dXJuIFwibTRhXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYUNocygpIHtcbiAgICByZXR1cm4gW0FwcC5tZWRpYVR5cGVNcDMsIEFwcC5tZWRpYVR5cGVNcDQsIEFwcC5tZWRpYVR5cGVNNGFdO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFDaFRhZ1R5cGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbQXBwLm1lZGlhVHlwZU1wM106IEFwcC5tZWRpYVRhZ1R5cGVBdWRpbyxcbiAgICAgIFtBcHAubWVkaWFUeXBlTXA0XTogQXBwLm1lZGlhVGFnVHlwZVZpZGVvLFxuICAgICAgW0FwcC5tZWRpYVR5cGVNNGFdOiBBcHAubWVkaWFUYWdUeXBlQXVkaW8sXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0TWVkaWFUeXBlKHNyYywgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuY2hUeXBlKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmNoVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIEFwcC5nZXRNZWRpYVR5cGVGcm9tU3JjKHNyYyk7XG4gIH1cbiAgc3RhdGljIGdldE1lZGlhVHlwZUZyb21TcmMoc3JjKSB7XG4gICAgY29uc3QgbWVkaWFDaFRhZ1R5cGVLZXlzID0gT2JqZWN0LmtleXMoQXBwLm1lZGlhQ2hUYWdUeXBlcyk7XG4gICAgY29uc3QgbWVkaWFDaFRhZ1R5cGVMZW5ndGggPSBtZWRpYUNoVGFnVHlwZUtleXMubGVuZ3RoO1xuICAgIGxldCBtZWRpYVR5cGUgPSBcImh0bWxcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lZGlhQ2hUYWdUeXBlTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoYC4ke21lZGlhQ2hUYWdUeXBlS2V5c1tpXX0kYCk7XG4gICAgICBpZiAoc3JjLm1hdGNoKHJlZ0V4cCkpIHtcbiAgICAgICAgbWVkaWFUeXBlID0gQXBwLm1lZGlhQ2hUYWdUeXBlc1ttZWRpYUNoVGFnVHlwZUtleXNbaV1dO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lZGlhVHlwZTtcbiAgfVxuICBzdGF0aWMgdmFsaWRJbnB1dFBvc3QodmFsdWUpIHtcbiAgICBpZiAoL1xcclxcbiR8XFxuJHxcXHIkL2dpbS50ZXN0KHZhbHVlKSkgcmV0dXJuIFwiTEFTVCBUWVBFIEJSRUFLIExJTkUuXCI7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIHZhbGlkUG9zdCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gXCJcIikgcmV0dXJuIFwiTk8gSU5QVVQgUE9TVFwiO1xuICAgIGlmICgvXlxcclxcbiskfFxcbiskfFxcciskL2cudGVzdCh2YWx1ZSkpIHJldHVybiBcIk9OTFkgTkVXIExJTkVcIjtcbiAgICBpZiAoL15cXHMrJC9nLnRlc3QodmFsdWUpKSByZXR1cm4gXCJvbmx5IHNwYWNlXCI7XG4gICAgaWYgKC9eXFxyXFxuKyhcXHN8XFxTKSskfF5cXG4rKFxcc3xcXFMpKyR8XlxccisoXFxzfFxcUykrJC8udGVzdCh2YWx1ZSkpIHJldHVybiBcIkVNUFRZIFBPU1RcIjtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0V2lkdGgocGFyYW1zKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LmlubmVyV2lkdGgpIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBpZiAocGFyYW1zLndpZHRoKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcy53aWR0aCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAocGFyYW1zLndpZHRoLmluZGV4T2YoXCJweFwiKSA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIE51bWJlcihwYXJhbXMud2lkdGgucmVwbGFjZShcInB4XCIsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtcy53aWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBzdGF0aWMgZ2V0SGVpZ2h0KHBhcmFtcyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LmlubmVySGVpZ2h0KSByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgbmFtZTogc3RyaW5nO1xuICB0YWxrbkluZGV4OiBudW1iZXI7XG5cbiAgLy8g44K544Os44OD44OJ5Z+65pys6Zai6YCjXG4gIGlzUm9vdENoOiBib29sZWFuO1xuICBpc0xpbmtDaDogYm9vbGVhbjtcbiAgaXNNZWRpYUNoOiBib29sZWFuO1xuICByb290Q2g6IHN0cmluZztcbiAgcm9vdFRpdGxlOiBzdHJpbmc7XG4gIGNoVHlwZTogXCJ2aWRlb1wiIHwgXCJhdWRpb1wiIHwgXCJodG1sXCI7XG4gIGRpc3BUaHJlYWRUeXBlOiBcIk11bHRpXCIgfCBcIlNpbmdsZVwiIHwgXCJDaGlsZFwiIHwgXCJUaW1lbGluZVwiIHwgXCJMb2dzXCI7XG4gIHR1bmVkOiBzdHJpbmc7XG4gIG11bHRpc3RyZWFtOiBib29sZWFuO1xuXG4gIC8vIOaKleeov+aDheWgsVxuICBmaW5kVHlwZTogXCJodG1sXCIgfCBcIm1wM1wiIHwgXCJtcDRcIiB8IFwibTRhXCIgfCBcImF1ZGlvXCIgfCBcInZpZGVvXCI7XG4gIG9mZnNldEZpbmRJZDogc3RyaW5nO1xuICBvZmZzZXRUaW1lbGluZUZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRTaW5nbGVGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgb2Zmc2V0TXVsdGlGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgb2Zmc2V0Q2hpbGRGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgb2Zmc2V0TG9nc0ZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuXG4gIC8vIOWFpeWKm+eKtuaFi1xuICBpbnB1dFBvc3Q6IHN0cmluZztcbiAgaW5wdXRTdGFtcElkOiBzdHJpbmcgfCBudW1iZXI7XG4gIGlucHV0Q3VycmVudFRpbWU6IG51bWJlcjtcbiAgaW5wdXRTZWFyY2g6IHN0cmluZztcblxuICAvLyDjgZ3jga7ku5ZcbiAgaXNUb2dnbGVNdWx0aXN0cmVhbTogYm9vbGVhbjtcbiAgYWN0aW9uZWQ6IHN0cmluZztcbiAgZGVidWc6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9LCBjYWxsID0gXCJcIikge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyDmupblgplcbiAgICBjb25zdCBjaCA9IHBhcmFtcy5jaCA/IHBhcmFtcy5jaCA6IFwiL1wiO1xuXG4gICAgLy8g5YWo5L2TXG4gICAgY29uc3QgbmFtZSA9IHBhcmFtcy5uYW1lID8gcGFyYW1zLm5hbWUgOiBcInRhbGtuXCI7XG4gICAgY29uc3QgdGFsa25JbmRleCA9IHBhcmFtcy50YWxrbkluZGV4ID8gcGFyYW1zLnRhbGtuSW5kZXggOiAwO1xuXG4gICAgLy8g44K544Os44OD44OJ5Z+65pys6Zai6YCjXG4gICAgY29uc3QgaXNNZWRpYUNoID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc01lZGlhQ2gpID8gcGFyYW1zLmlzTWVkaWFDaCA6IEFwcC5nZXRJc01lZGlhQ2goY2gpO1xuICAgIGNvbnN0IGlzTGlua0NoID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc0xpbmtDaCkgPyBwYXJhbXMuaXNMaW5rQ2ggOiBmYWxzZTtcbiAgICBjb25zdCByb290Q2ggPSBwYXJhbXMucm9vdENoID8gcGFyYW1zLnJvb3RDaCA6IGNoO1xuICAgIGNvbnN0IGlzUm9vdENoID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc1Jvb3RDaCkgPyBwYXJhbXMuaXNSb290Q2ggOiByb290Q2ggPT09IGNoO1xuICAgIGNvbnN0IHJvb3RUaXRsZSA9IHBhcmFtcy5yb290VGl0bGUgPyBwYXJhbXMucm9vdFRpdGxlIDogXCJ0YWxrblwiO1xuICAgIGNvbnN0IHNyYyA9IEFwcC5nZXRNZWRpYVNyYyhwYXJhbXMucHJvdG9jb2wsIGNoKTtcbiAgICBjb25zdCBjaFR5cGUgPSBBcHAuZ2V0TWVkaWFUeXBlKHNyYywgcGFyYW1zKTtcbiAgICBjb25zdCB0dW5lZCA9IHBhcmFtcyAmJiBwYXJhbXMudHVuZWQgPyBwYXJhbXMudHVuZWQgOiBcIlwiO1xuICAgIGNvbnN0IGRpc3BUaHJlYWRUeXBlID0gQXBwLmdldERpc3BUaHJlYWRUeXBlKHBhcmFtcywgaXNNZWRpYUNoKTtcbiAgICBjb25zdCBtdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMubXVsdGlzdHJlYW0pID8gcGFyYW1zLm11bHRpc3RyZWFtIDogdHJ1ZTtcblxuICAgIC8vIOaKleeov+aDheWgsVxuICAgIGNvbnN0IGZpbmRUeXBlID0gcGFyYW1zICYmIHBhcmFtcy5maW5kVHlwZSA/IHBhcmFtcy5maW5kVHlwZSA6IFRocmVhZC5maW5kVHlwZUFsbDtcbiAgICBjb25zdCBvZmZzZXRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRUaW1lbGluZUZpbmRJZCA9XG4gICAgICBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldFRpbWVsaW5lRmluZElkID8gcGFyYW1zLm9mZnNldFRpbWVsaW5lRmluZElkIDogQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0U2luZ2xlRmluZElkID1cbiAgICAgIHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0U2luZ2xlRmluZElkID8gcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldE11bHRpRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldENoaWxkRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRDaGlsZEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRDaGlsZEZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldExvZ3NGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TG9nc0ZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuXG4gICAgLy8g5YWl5Yqb54q25oWLXG4gICAgY29uc3QgaW5wdXRQb3N0ID0gcGFyYW1zLmlucHV0UG9zdCA/IHBhcmFtcy5pbnB1dFBvc3QgOiBcIlwiO1xuICAgIGNvbnN0IGlucHV0U3RhbXBJZCA9IHBhcmFtcy5pbnB1dFN0YW1wSWQgPyBwYXJhbXMuaW5wdXRTdGFtcElkIDogZmFsc2U7XG4gICAgY29uc3QgaW5wdXRDdXJyZW50VGltZSA9IHBhcmFtcy5pbnB1dEN1cnJlbnRUaW1lID8gcGFyYW1zLmlucHV0Q3VycmVudFRpbWUgOiAwLjA7XG4gICAgY29uc3QgaW5wdXRTZWFyY2ggPSBwYXJhbXMuaW5wdXRTZWFyY2ggPyBwYXJhbXMuaW5wdXRTZWFyY2ggOiBcIlwiO1xuXG4gICAgLy8g44Gd44Gu5LuWXG4gICAgY29uc3QgaXNUb2dnbGVNdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSkgPyBwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSA6IGZhbHNlO1xuICAgIGNvbnN0IGFjdGlvbmVkID0gcGFyYW1zICYmIHBhcmFtcy5hY3Rpb25lZCA/IHBhcmFtcy5hY3Rpb25lZCA6IFwiXCI7XG4gICAgY29uc3QgZGVidWcgPSBTY2hlbWEuaXNTZXQocGFyYW1zLmRlYnVnKSA/IHBhcmFtcy5kZWJ1ZyA6IFwiXCI7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHtcbiAgICAgIC8vIOWFqOS9k1xuICAgICAgbmFtZSxcbiAgICAgIHRhbGtuSW5kZXgsXG5cbiAgICAgIC8vIOOCueODrOODg+ODieWfuuacrOmWoumAo1xuICAgICAgaXNSb290Q2gsXG4gICAgICBpc0xpbmtDaCxcbiAgICAgIGlzTWVkaWFDaCxcbiAgICAgIHJvb3RDaCxcbiAgICAgIHJvb3RUaXRsZSxcbiAgICAgIGNoVHlwZSxcbiAgICAgIGRpc3BUaHJlYWRUeXBlLFxuICAgICAgdHVuZWQsXG4gICAgICBtdWx0aXN0cmVhbSwgLy8gZGlzcFRocmVhZFR5cGXjgYxDaGlsZCwgVGltZWxpbmXjgavjgarjgaPjgabjgoJtdWx0aXN0cmVhbeeKtuaFi+OCkue2reaMgeOBmeOCi1xuXG4gICAgICAvLyAgICAgIHRocmVhZFNjcm9sbFksXG5cbiAgICAgIC8vIOaKleeov+aDheWgsVxuICAgICAgZmluZFR5cGUsXG4gICAgICBvZmZzZXRGaW5kSWQsXG4gICAgICBvZmZzZXRUaW1lbGluZUZpbmRJZCxcbiAgICAgIG9mZnNldFNpbmdsZUZpbmRJZCxcbiAgICAgIG9mZnNldE11bHRpRmluZElkLFxuICAgICAgb2Zmc2V0Q2hpbGRGaW5kSWQsXG4gICAgICBvZmZzZXRMb2dzRmluZElkLFxuXG4gICAgICAvLyBkZXRhaWzmg4XloLFcblxuICAgICAgLy8g5YWl5Yqb54q25oWLXG4gICAgICBpbnB1dFBvc3QsXG4gICAgICBpbnB1dFN0YW1wSWQsXG4gICAgICBpbnB1dEN1cnJlbnRUaW1lLFxuICAgICAgaW5wdXRTZWFyY2gsXG5cbiAgICAgIC8vIOOBneOBruS7llxuICAgICAgaXNUb2dnbGVNdWx0aXN0cmVhbSxcbiAgICAgIGFjdGlvbmVkLFxuICAgICAgZGVidWcsXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgaXNNZWRpYUNvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgcmV0dXJuIEFwcC5pc0F1ZGlvQ29udGVudFR5cGUoY29udGVudFR5cGUpIHx8IEFwcC5pc1ZpZGVvQ29udGVudFR5cGUoY29udGVudFR5cGUpO1xuICB9XG5cbiAgc3RhdGljIGlzQXVkaW9Db250ZW50VHlwZShjb250ZW50VHlwZSkge1xuICAgIHJldHVybiBjb250ZW50VHlwZS5pbmRleE9mKEFwcC5tZWRpYVRhZ1R5cGVBdWRpbykgPj0gMDtcbiAgfVxuXG4gIHN0YXRpYyBpc1ZpZGVvQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICByZXR1cm4gY29udGVudFR5cGUuaW5kZXhPZihBcHAubWVkaWFUYWdUeXBlVmlkZW8pID49IDA7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVkaWFTcmMocHJvdG9jb2wsIGNoKSB7XG4gICAgcmV0dXJuIHByb3RvY29sICsgXCIvXCIgKyBjaC5yZXBsYWNlKC9cXC8kLywgXCJcIik7XG4gIH1cblxuICBzdGF0aWMgZ2V0SXNNZWRpYUNoKGNoKSB7XG4gICAgcmV0dXJuIEFwcC5tZWRpYUNocy5zb21lKChleHQpID0+IHtcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoYC4ke2V4dH1cXC8kfC4ke2V4dH0kYCk7XG4gICAgICByZXR1cm4gY2gubWF0Y2gocmVnZXhwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBpc0FjdGl2ZU11bHRpc3RyZWFtKHsgYXBwLCB1aSB9LCBjYWxsZWQgPSBcIlwiKSB7XG4gICAgcmV0dXJuIHVpLm1lbnVDb21wb25lbnQgPT09IFwiSW5kZXhcIiAmJiBhcHAuZGlzcFRocmVhZFR5cGUgPT09IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICB9XG5cbiAgc3RhdGljIGdldERpc3BUaHJlYWRUeXBlKHBhcmFtcywgaXNNZWRpYUNoKSB7XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuZGlzcFRocmVhZFR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc01lZGlhQ2gpIHtcbiAgICAgICAgcmV0dXJuIEFwcC5kaXNwVGhyZWFkVHlwZVRpbWVsaW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRPZmZzZXRGaW5kSWQoeyBwb3N0cyB9KSB7XG4gICAgaWYgKHBvc3RzICYmIHBvc3RzWzBdICYmIHBvc3RzWzBdLl9pZCkge1xuICAgICAgcmV0dXJuIHBvc3RzWzBdLl9pZDtcbiAgICB9XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGVwVG9EaXNwVGhyZWFkVHlwZSh7IGFwcCwgcmFuayB9OiBhbnksIHRocmVhZFN0YXR1czogYW55LCB0b0NoOiBhbnksIGNhbGxlZDogYW55ID0gXCJcIikge1xuICAgIGxldCBhZnRlckRpc3BUaHJlYWRUeXBlID0gXCJcIjtcbiAgICBjb25zdCBiZWZvcmVEaXNwVGhyZWFkVHlwZSA9IGFwcCAmJiBhcHAuZGlzcFRocmVhZFR5cGUgPyBhcHAuZGlzcFRocmVhZFR5cGUgOiBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICBhcHAgPSBBcHAuZ2V0U3RlcERpc3BUaHJlYWRUeXBlKHsgYXBwLCByYW5rIH0sIHRocmVhZFN0YXR1cywgdG9DaCwgY2FsbGVkKTtcbiAgICBhZnRlckRpc3BUaHJlYWRUeXBlID0gYXBwLmRpc3BUaHJlYWRUeXBlO1xuICAgIHJldHVybiB7IGFwcCwgc3RlcFRvOiBgJHtiZWZvcmVEaXNwVGhyZWFkVHlwZX0gdG8gJHthZnRlckRpc3BUaHJlYWRUeXBlfWAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGVwRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmsgfSwgdGhyZWFkU3RhdHVzOiBhbnkgPSB7fSwgdG9DaCwgY2FsbGVkKSB7XG4gICAgY29uc3QgbG9nID0gZmFsc2U7XG4gICAgY29uc3QgdXBkYXRlZEFwcCA9IGFwcCA/IGFwcCA6IHt9O1xuICAgIHVwZGF0ZWRBcHAuaXNMaW5rQ2ggPSBmYWxzZTtcbiAgICB1cGRhdGVkQXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuXG4gICAgaWYgKGxvZykgY29uc29sZS5sb2coY2FsbGVkICsgXCIgcm9vdENoID0gXCIgKyBhcHAucm9vdENoICsgXCIgdG9DaCA9IFwiICsgdG9DaCk7XG4gICAgaWYgKGxvZykgY29uc29sZS5sb2cocmFuayk7XG4gICAgaWYgKGxvZykgY29uc29sZS5sb2codGhyZWFkU3RhdHVzKTtcblxuICAgIGlmICh0aHJlYWRTdGF0dXMuaXNNZWRpYUNoKSB7XG4gICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkJcIik7XG4gICAgICB1cGRhdGVkQXBwLmRpc3BUaHJlYWRUeXBlID0gQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU7XG4gICAgICB1cGRhdGVkQXBwLm9mZnNldEZpbmRJZCA9IHVwZGF0ZWRBcHAub2Zmc2V0VGltZWxpbmVGaW5kSWRcbiAgICAgICAgPyB1cGRhdGVkQXBwLm9mZnNldFRpbWVsaW5lRmluZElkXG4gICAgICAgIDogQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgICB1cGRhdGVkQXBwLmlzTGlua0NoID0gY2FsbGVkID09PSBcInRvTGlua3NcIiB8fCBjYWxsZWQgPT09IFwiZmluZE1lZGlhQ2hcIiA/IHRydWUgOiBmYWxzZTtcbiAgICAgIHVwZGF0ZWRBcHAuaXNNZWRpYUNoID0gdHJ1ZTtcbiAgICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICAgIH1cblxuICAgIGlmIChjYWxsZWQgPT09IFwidG9MaW5rc1wiKSB7XG4gICAgICBjb25zdCBoYXZlTWVudUluZGV4ID0gcmFuay5zb21lKChtaSkgPT4ge1xuICAgICAgICByZXR1cm4gbWkuY2ggPT09IHRvQ2ggfHwgbWkuY2ggPT09IHRvQ2ggKyBcIi9cIjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobG9nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQyBcIiArIGhhdmVNZW51SW5kZXggKyBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXZlTWVudUluZGV4KSB7XG4gICAgICAgIGlmIChsb2cpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkRcIik7XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVkQXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgICAgICB1cGRhdGVkQXBwLmRpc3BUaHJlYWRUeXBlID0gQXBwLmRpc3BUaHJlYWRUeXBlQ2hpbGQ7XG4gICAgICAgIC8vICAgICAgICB1aS5pc09wZW5MaW5rcyA9IGZhbHNlO1xuICAgICAgICB1cGRhdGVkQXBwLmlzTGlua0NoID0gdHJ1ZTtcbiAgICAgICAgLy8gYXBwLmlzT3Blbk1lbnUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdXBkYXRlZEFwcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXBkYXRlZEFwcC5yb290Q2ggPT09IHRvQ2gpIHtcbiAgICAgIGlmICh1cGRhdGVkQXBwLm11bHRpc3RyZWFtKSB7XG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKFwiRVwiKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coXCJGXCIpO1xuICAgICAgICB1cGRhdGVkQXBwLmRpc3BUaHJlYWRUeXBlID0gQXBwLmRpc3BUaHJlYWRUeXBlU2luZ2xlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkdcIik7XG4gICAgICB1cGRhdGVkQXBwLmRpc3BUaHJlYWRUeXBlID0gQXBwLmRpc3BUaHJlYWRUeXBlQ2hpbGQ7XG4gICAgfVxuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKGFwcCk7XG4gICAgcmV0dXJuIHVwZGF0ZWRBcHA7XG4gIH1cbn1cbiIsImltcG9ydCBjb25mIGZyb20gXCJjbGllbnQvY29uZlwiO1xuaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcbmltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcbmltcG9ydCBCb290T3B0aW9uIGZyb20gXCJhcGkvc3RvcmUvQm9vdE9wdGlvblwiO1xuXG5leHBvcnQgdHlwZSBUaHJlYWRTdGF0dXNUeXBlID0ge1xuICBkaXNwVHlwZTogc3RyaW5nO1xuICBpc1NjaGVtYTogYm9vbGVhbjtcbiAgaXNSZXF1aXJlVXBzZXJ0OiBib29sZWFuO1xuICBpc011bHRpc3RyZWFtOiBib29sZWFuO1xuICBpc01lZGlhQ2g6IGJvb2xlYW47XG4gIGlzVG9nZ2xlTXVsdGlzdHJlYW06IGJvb2xlYW47XG4gIGdldE1vcmU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlYWQgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGZpbmRUeXBlQWxsKCk6IFwiQWxsXCIge1xuICAgIHJldHVybiBcIkFsbFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVIdG1sKCk6IFwiSHRtbFwiIHtcbiAgICByZXR1cm4gXCJIdG1sXCI7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZU11c2ljKCk6IFwiTXVzaWNcIiB7XG4gICAgcmV0dXJuIFwiTXVzaWNcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlVmlkZW8oKTogXCJWaWRlb1wiIHtcbiAgICByZXR1cm4gXCJWaWRlb1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVPdGhlcigpOiBcIk90aGVyXCIge1xuICAgIHJldHVybiBcIk90aGVyXCI7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtUaHJlYWQuZmluZFR5cGVIdG1sXTogW1widGV4dC9odG1sXCJdLFxuICAgICAgW1RocmVhZC5maW5kVHlwZU11c2ljXTogW1wiYXVkaW9cIiwgXCJhdWRpby9tcGVnXCIsIFwiYXVkaW8vbXA0XCIsIFwiYXVkaW8veC13YXZcIiwgXCJhdWRpby9taWRpXCIsIFwiYXBwbGljYXRpb24veC1zbWFmXCJdLFxuICAgICAgW1RocmVhZC5maW5kVHlwZVZpZGVvXTogW1xuICAgICAgICBcInZpZGVvXCIsXG4gICAgICAgIFwidmlkZW8vbXBlZ1wiLFxuICAgICAgICBcInZpZGVvL21wNFwiLFxuICAgICAgICBcInZpZGVvL3gtbXMtd212XCIsXG4gICAgICAgIFwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIixcbiAgICAgICAgXCJ2aWRlby8zZ3BwMlwiLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZWZhdWx0VGl0bGUoKSB7XG4gICAgcmV0dXJuIFwidGFsa25cIjtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0RmF2aWNvbigpIHtcbiAgICByZXR1cm4gXCJ1c2VyLnBuZ1wiO1xuICB9XG5cbiAgc3RhdGljIGlzV2luZG93T2JqKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXMuYWxlcnQgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBocmVmOiBzdHJpbmc7XG4gIGNoOiBzdHJpbmc7XG4gIGNoczogW3N0cmluZ10gPSBbXCIvXCJdO1xuICBoYXNTbGFzaDogYm9vbGVhbjtcbiAgcHJvdG9jb2w6IHN0cmluZyA9IFNlcXVlbmNlLlRBTEtOX1BST1RPQ09MO1xuICBjb250ZW50VHlwZTogc3RyaW5nO1xuICBjaGFyc2V0OiBzdHJpbmcgPSBcIlVURi04XCI7XG4gIGhvc3Q6IHN0cmluZyA9IFwiXCI7XG4gIGZhdmljb246IHN0cmluZyA9IFRocmVhZC5nZXREZWZhdWx0RmF2aWNvbigpO1xuICBmaW5kVHlwZTogXCJBbGxcIiB8IFwiSHRtbFwiIHwgXCJNdXNpY1wiIHwgXCJWaWRlb1wiID0gVGhyZWFkLmZpbmRUeXBlQWxsO1xuICB0aXRsZTogc3RyaW5nID0gVGhyZWFkLmdldERlZmF1bHRUaXRsZSgpO1xuICBtZXRhczogYW55ID0gW107XG4gIHNlcnZlck1ldGFzOiBhbnkgPSB7fTtcbiAgY2xpZW50TWV0YXM6IGFueSA9IHt9O1xuICBsaW5rczogYW55ID0gW107XG4gIGgxczogYW55ID0gW107XG4gIGF1ZGlvczogYW55ID0gW107XG4gIHZpZGVvczogYW55ID0gW107XG4gIGxheWVyOiBudW1iZXIgPSBUaHJlYWQuZ2V0TGF5ZXIoKTtcbiAgbWVkaWFJbmRleDogYW55ID0gW107XG4gIHBvc3RDbnQ6IG51bWJlciA9IDA7XG4gIG11bHRpUG9zdENudDogbnVtYmVyID0gMDtcbiAgaXNTZWxmQ2g6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY3JlYXRlVGltZTogc3RyaW5nID0gXCJcIjtcbiAgdXBkYXRlVGltZTogc3RyaW5nID0gXCJcIjtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSwgYm9vdE9wdGlvbjogQm9vdE9wdGlvbiB8IHt9LCBjYWNoZTogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHRocmVhZCA9IFRocmVhZC5pc1dpbmRvd09iaihwYXJhbXMpID8gVGhyZWFkLmNvbnN0cnVjdG9yRnJvbVdpbmRvdyhwYXJhbXMsIGJvb3RPcHRpb24sIGNhY2hlKSA6IHBhcmFtcztcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhyZWFkKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25zdHJ1Y3RvckZyb21XaW5kb3cocGFyYW1zLCBib290T3B0aW9uLCBjYWNoZSkge1xuICAgIGNvbnN0IGJvb3RDaCA9IGJvb3RPcHRpb24uY2ggPyBib290T3B0aW9uLmNoIDogZmFsc2U7XG4gICAgY29uc3QgY2ggPSBUaHJlYWQuZ2V0Q2goYm9vdE9wdGlvbiwgYm9vdENoKTtcbiAgICBpZiAoY2FjaGUuY2ggJiYgY2FjaGUuY2ggPT09IGNoKSB7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0aHJlYWQ6IGFueSA9IHt9O1xuICAgICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgICAgdGhyZWFkLmNoID0gY2g7XG4gICAgICB0aHJlYWQuY2hzID0gW1wiL1wiXTtcbiAgICAgIHRocmVhZC5oYXNTbGFzaCA9IGJvb3RPcHRpb24uaGFzc2xhc2ggPyBTY2hlbWEuZ2V0Qm9vbChib290T3B0aW9uLmhhc3NsYXNoKSA6IGZhbHNlO1xuICAgICAgdGhyZWFkLnByb3RvY29sID0gXCJ0YWxrbjpcIjtcbiAgICAgIHRocmVhZC5jb250ZW50VHlwZSA9IFwiXCI7XG4gICAgICB0aHJlYWQuY2hhcnNldCA9IFwiVVRGLThcIjtcbiAgICAgIHRocmVhZC5ob3N0ID0gXCJcIjtcbiAgICAgIHRocmVhZC5mYXZpY29uID0gVGhyZWFkLmdldERlZmF1bHRGYXZpY29uKCk7XG4gICAgICB0aHJlYWQuZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVBbGw7XG5cbiAgICAgIGlmIChib290Q2gpIHtcbiAgICAgICAgLy8gVVJM44Gu44Kz44ON44Kv44K344On44Oz5paH5a2X5YiX44GL44KJ44Gn44GvUFJPVE9DT0zjga/liKTliKXjgafjgY3jgarjgYTjgIJcbiAgICAgICAgdGhyZWFkLnByb3RvY29sID0gVGhyZWFkLmdldFByb3RvY29sKGJvb3RDaCk7XG4gICAgICAgIHRocmVhZC5ob3N0ID0gVGhyZWFkLmdldEhvc3QoYm9vdENoKTtcbiAgICAgICAgdGhyZWFkLmNocyA9IGJvb3RDaC5jaHMgJiYgYm9vdENoLmNocy5sZW5ndGggPiAwID8gYm9vdENoLmNocyA6IFRocmVhZC5nZXRDaHMoY2gpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyZWFkLnByb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2wgPyBsb2NhdGlvbi5wcm90b2NvbCA6IFwiPz8/PzpcIjtcbiAgICAgICAgdGhyZWFkLmNocyA9IHBhcmFtcy5jaHMgJiYgcGFyYW1zLmNocy5sZW5ndGggPiAwID8gcGFyYW1zLmNocyA6IFRocmVhZC5nZXRDaHMoY2gpO1xuICAgICAgICB0aHJlYWQuY29udGVudFR5cGUgPSBkb2N1bWVudC5jb250ZW50VHlwZSA/IGRvY3VtZW50LmNvbnRlbnRUeXBlIDogXCJcIjtcbiAgICAgICAgdGhyZWFkLmNoYXJzZXQgPSBkb2N1bWVudC5jaGFyc2V0ID8gZG9jdW1lbnQuY2hhcnNldCA6IFwiXCI7XG5cbiAgICAgICAgdGhyZWFkLmhvc3QgPSBsb2NhdGlvbi5ob3N0ID8gbG9jYXRpb24uaG9zdCA6IFwiXCI7XG4gICAgICAgIHRocmVhZC5mYXZpY29uID0gVGhyZWFkLmdldEZhdmljb25Gcm9tV2luZG93KHdpbmRvdyk7XG4gICAgICB9XG5cbiAgICAgIHRocmVhZC50aXRsZSA9IFRocmVhZC5nZXREZWZhdWx0VGl0bGUoKTtcbiAgICAgIHRocmVhZC5tZXRhcyA9IFtdO1xuICAgICAgdGhyZWFkLnNlcnZlck1ldGFzID0ge307XG4gICAgICB0aHJlYWQuY2xpZW50TWV0YXMgPSB7fTtcbiAgICAgIHRocmVhZC5saW5rcyA9IFtdO1xuICAgICAgdGhyZWFkLmgxcyA9IFtdO1xuICAgICAgdGhyZWFkLmF1ZGlvcyA9IFtdO1xuICAgICAgdGhyZWFkLnZpZGVvcyA9IFtdO1xuICAgICAgdGhyZWFkLmxheWVyID0gVGhyZWFkLmdldExheWVyKHRocmVhZC5jaCk7XG4gICAgICB0aHJlYWQubWVkaWFJbmRleCA9IFtdO1xuICAgICAgdGhyZWFkLnBvc3RDbnQgPSAwO1xuICAgICAgdGhyZWFkLm11bHRpUG9zdENudCA9IDA7XG4gICAgICB0aHJlYWQuaXNTZWxmQ2ggPSBUaHJlYWQuZ2V0SXNTZWxmQ2goaHJlZiwgdGhyZWFkLmNoKTtcbiAgICAgIHRocmVhZC5jcmVhdGVUaW1lID0gXCJcIjtcbiAgICAgIHRocmVhZC51cGRhdGVUaW1lID0gXCJcIjtcbiAgICAgIHJldHVybiB0aHJlYWQ7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldENoKGJvb3RPcHRpb246IGFueSwgYm9vdENoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYm9vdE9wdGlvbiAmJiBib290T3B0aW9uLmNoICYmIGJvb3RPcHRpb24uY2ggIT09ICcnID8gYm9vdE9wdGlvbi5jaCA6ICcvJyAgXG4gIH1cblxuICBzdGF0aWMgZ2V0Q2hUb3AoY2gpIHtcbiAgICBpZiAoY2ggIT09IFwiXCIpIHtcbiAgICAgIHJldHVybiBcIi9cIiArIGNoLnNwbGl0KFwiL1wiKVsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldENocyhfY2gpIHtcbiAgICBsZXQgY2hzID0gW1wiL1wiXTtcblxuICAgIGlmIChfY2ggIT09IFwiXCIpIHtcbiAgICAgIC8vY2ggPSBjaC5yZXBsYWNlKC9cXHUwMDJmJC9nLCAnJyk7XG4gICAgICBjb25zdCBjaCA9IF9jaC5zbGljZSgtMSkgPT09IFwiL1wiID8gX2NoIDogX2NoICsgXCIvXCI7XG5cbiAgICAgIGlmIChjaCAhPT0gXCIvXCIpIHtcbiAgICAgICAgY29uc3QgY2hBcnIgPSBjaC5zcGxpdChcIi9cIik7XG4gICAgICAgIGNvbnN0IGNoTGVuZ3RoID0gY2hBcnIubGVuZ3RoO1xuICAgICAgICBsZXQgbmV3Q2ggPSBcIlwiO1xuICAgICAgICBsZXQgbm9TbGFzaENoID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBjaExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGNoQXJyW2ldICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBuZXdDaCArPSBjaEFycltpXTtcblxuICAgICAgICAgICAgLy8g5LiA55Wq5pyA5b6M44GML+OBruWgtOWQiFxuICAgICAgICAgICAgbmV3Q2ggPSBuZXdDaC5zbGljZSgtMSkgPT09IFwiL1wiID8gbmV3Q2ggOiBuZXdDaCArIFwiL1wiO1xuXG4gICAgICAgICAgICAvLyDkuIDnlarmnIDliJ3jgYwv44Gu5aC05ZCIXG4gICAgICAgICAgICBuZXdDaCA9IG5ld0NoLnNsaWNlKDAsIDEpID09PSBcIi9cIiA/IG5ld0NoIDogXCIvXCIgKyBuZXdDaDtcblxuICAgICAgICAgICAgLy8g5pyA5b6M44GML+eEoeOBl+OBruOCs+ODjeOCr+OCt+ODp+ODs+OCkueUn+aIkFxuICAgICAgICAgICAgLy9ub1NsYXNoQ2ggPSBuZXdDaC5zbGljZSgwLCAtMSk7XG5cbiAgICAgICAgICAgIC8vY2hzLnB1c2goIG5vU2xhc2hDaCApO1xuICAgICAgICAgICAgY2hzLnB1c2gobmV3Q2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hzO1xuICB9XG5cbiAgc3RhdGljIGdldEhvc3QoY2gpIHtcbiAgICBpZiAoY2guaW5kZXhPZihcIi5cIikgPj0gMCkge1xuICAgICAgY2ggPSBjaC5yZXBsYWNlKFwiaHR0cHM6Ly9cIiwgXCJcIikucmVwbGFjZShcImh0dHA6Ly9cIiwgXCJcIik7XG4gICAgICByZXR1cm4gY2gucmVwbGFjZSgvXlxcLy8sIFwiXCIpLnJlcGxhY2UoL1xcLy4qJC8sIFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29uZi5kb21haW47XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb3RvY29sKGhyZWYpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKFwiaHR0cDpcIikgPj0gMCkgcmV0dXJuIFwiaHR0cDpcIjtcbiAgICBpZiAoaHJlZi5pbmRleE9mKFwiaHR0cHM6XCIpID49IDApIHJldHVybiBcImh0dHBzOlwiO1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCkgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHJldHVybiBcIj8/Pz86XCI7XG4gIH1cblxuICBzdGF0aWMgZ2V0SXNTZWxmQ2goaHJlZiwgY2gpIHtcbiAgICBjb25zdCByZXBsYWNlZEhyZWYgPSBocmVmXG4gICAgICAucmVwbGFjZShcImh0dHA6L1wiLCBcIlwiKVxuICAgICAgLnJlcGxhY2UoXCJodHRwczovXCIsIFwiXCIpXG4gICAgICAucmVwbGFjZSgvXFx1MDAyZiQvLCBcIlwiKTtcbiAgICByZXR1cm4gcmVwbGFjZWRIcmVmID09PSBjaDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRMYXllcihjaCA9IFwiL1wiKSB7XG4gICAgcmV0dXJuIGNoLnNwbGl0KFwiL1wiKS5sZW5ndGggLSAxO1xuICB9XG5cbiAgc3RhdGljIGdldE1lZGlhU3JjKHRocmVhZCkge1xuICAgIHJldHVybiBBcHAuZ2V0TWVkaWFTcmModGhyZWFkLnByb3RvY29sLCB0aHJlYWQuY2gpO1xuICB9XG5cbiAgc3RhdGljIGdldE1lZGlhVGFnVHlwZSh0aHJlYWQpIHtcbiAgICBjb25zdCBzcmMgPSBUaHJlYWQuZ2V0TWVkaWFTcmModGhyZWFkKTtcbiAgICByZXR1cm4gQXBwLmdldE1lZGlhVHlwZShzcmMsIG51bGwpO1xuICB9XG5cbiAgc3RhdGljIGdldEZhdmljb25Gcm9tV2luZG93KHdpbmRvdykge1xuICAgIGlmICh3aW5kb3cgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgICBjb25zdCB1ID0gd2luZG93LmRvY3VtZW50LmV2YWx1YXRlKFxuICAgICAgICBcIi8vbGlua1tjb250YWlucyhAcmVsLCdpY29uJylvcihjb250YWlucyhAcmVsLCdJQ09OJykpXVsxXS9AaHJlZlwiLFxuICAgICAgICB3aW5kb3cuZG9jdW1lbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIDIsXG4gICAgICAgIG51bGxcbiAgICAgICkuc3RyaW5nVmFsdWU7XG4gICAgICBjb25zdCBoID0gXCJodHRwOi8vXCI7XG4gICAgICBjb25zdCBocyA9IFwiaHR0cHM6Ly9cIjtcbiAgICAgIGNvbnN0IGwgPSBsb2NhdGlvbi5ob3N0O1xuICAgICAgaWYgKHUuaW5kZXhPZihoKSB8fCB1LmluZGV4T2YoaHMpKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGggKyBsICsgKHUgfHwgXCIvZmF2aWNvbi5pY29cIik7XG4gICAgICAgIGNvbnN0IHN0ckNudCA9IHVybC5zcGxpdChcIi8vXCIpLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChzdHJDbnQgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1cyh0aHJlYWQsIGFwcCwgc2V0dGluZyA9IHt9KTogVGhyZWFkU3RhdHVzVHlwZSB7XG4gICAgbGV0IHN0YXR1cyA9IHtcbiAgICAgIGRpc3BUeXBlOiBcIlwiLCAvLyBUSU1FTElORSwgTVVMVEksIFNJTkdMRSwgQ0hJTEQsIExPR1NcbiAgICAgIGlzU2NoZW1hOiBmYWxzZSxcbiAgICAgIGlzUmVxdWlyZVVwc2VydDogZmFsc2UsXG4gICAgICBpc011bHRpc3RyZWFtOiBmYWxzZSxcbiAgICAgIGlzTWVkaWFDaDogZmFsc2UsXG4gICAgICBpc1RvZ2dsZU11bHRpc3RyZWFtOiBmYWxzZSxcbiAgICAgIGdldE1vcmU6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiB0aHJlYWTjgYznqbrjga5TY2hlbWHjgYvjganjgYbjgYsoRELjgavjg4fjg7zjgr/jgYzlrZjlnKjjgZfjgarjgYQpICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzU2NoZW1hID0gVGhyZWFkLmdldFN0YXR1c0lzU2NoZW1hKHRocmVhZCk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiDmm7TmlrDjgYzlv4XopoHjgap0aHJlYWTjgYvjganjgYbjgYsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNSZXF1aXJlVXBzZXJ0ID0gVGhyZWFkLmdldFN0YXR1c0lzUmVxdWlyZVVwc2VydCh0aHJlYWQsIHNldHRpbmcsIHN0YXR1cy5pc1NjaGVtYSk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiBNdWx0aXN0cmVhbeW9ouW8j+OBi+OBqeOBhuOBiyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzTXVsdGlzdHJlYW0gPSBUaHJlYWQuZ2V0U3RhdHVzSXNNdWx0aXN0cmVhbShhcHApO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogTXVsdGlzdHJlYW3jga7jg5zjgr/jg7PjgpLmirzjgZfjgZ/jgYsgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNUb2dnbGVNdWx0aXN0cmVhbSA9IFRocmVhZC5nZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtKGFwcCk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiB0aHJlYWTjgYznqbrjga5TY2hlbWHjgYvjganjgYbjgYsoRELjgavjg4fjg7zjgr/jgYzlrZjlnKjjgZfjgarjgYQpICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzTWVkaWFDaCA9IFRocmVhZC5nZXRTdGF0dXNJc01lZGlhQ2godGhyZWFkLmNoKTtcbiAgICByZXR1cm4gc3RhdHVzO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzU2NoZW1hKHRocmVhZCkge1xuICAgIGlmICh0aHJlYWQuY3JlYXRlVGltZSAmJiB0aHJlYWQudXBkYXRlVGltZSkge1xuICAgICAgY29uc3QgdGhyZWFkQ3JlYXRlVGltZSA9IHRocmVhZC5jcmVhdGVUaW1lLmdldFRpbWUgPyB0aHJlYWQuY3JlYXRlVGltZS5nZXRUaW1lKCkgOiB0aHJlYWQuY3JlYXRlVGltZTtcbiAgICAgIGNvbnN0IHRocmVhZFVwZGF0ZVRpbWUgPSB0aHJlYWQudXBkYXRlVGltZS5nZXRUaW1lID8gdGhyZWFkLnVwZGF0ZVRpbWUuZ2V0VGltZSgpIDogdGhyZWFkLnVwZGF0ZVRpbWU7XG5cbiAgICAgIGlmICh0aHJlYWRDcmVhdGVUaW1lID09PSB0aHJlYWRVcGRhdGVUaW1lKSB7XG4gICAgICAgIGNvbnN0IGxhc3RQb3N0Q3JlYXRlVGltZSA9IHRocmVhZC5sYXN0UG9zdC5jcmVhdGVUaW1lLmdldFRpbWUoKTtcbiAgICAgICAgY29uc3QgbGFzdFBvc3RVcGRhdGVUaW1lID0gdGhyZWFkLmxhc3RQb3N0LnVwZGF0ZVRpbWUuZ2V0VGltZSgpO1xuXG4gICAgICAgIGlmIChsYXN0UG9zdENyZWF0ZVRpbWUgPT09IGxhc3RQb3N0VXBkYXRlVGltZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQodGhyZWFkLCBzZXR0aW5nLCBpc1NjaGVtYSA9IGZhbHNlKSB7XG4gICAgaWYgKHRocmVhZC51cGRhdGVUaW1lKSB7XG4gICAgICBjb25zdCB0aHJlYWRVcGRhdGVUaW1lID0gdGhyZWFkLnVwZGF0ZVRpbWUuZ2V0VGltZSA/IHRocmVhZC51cGRhdGVUaW1lLmdldFRpbWUoKSA6IHRocmVhZC51cGRhdGVUaW1lO1xuXG4gICAgICAvLyDnj77lnKjmmYLliLvjgpLlj5blvpdcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBub3dZZWFyID0gbm93LmdldEZ1bGxZZWFyKCk7XG4gICAgICBjb25zdCBub3dNb250aCA9IG5vdy5nZXRNb250aCgpO1xuICAgICAgY29uc3Qgbm93RGF5ID0gbm93LmdldERhdGUoKTtcbiAgICAgIGNvbnN0IG5vd0hvdXIgPSBub3cuZ2V0SG91cnMoKTtcbiAgICAgIGNvbnN0IG5vd01pbnV0ZXMgPSBub3cuZ2V0TWludXRlcygpO1xuICAgICAgY29uc3QgYWN0aXZlRGF0ZSA9IG5ldyBEYXRlKG5vd1llYXIsIG5vd01vbnRoLCBub3dEYXksIG5vd0hvdXIgLSBzZXR0aW5nLnNlcnZlci5maW5kT25lVGhyZWFkQWN0aXZlSG91cik7XG4gICAgICBjb25zdCBhY3RpdmVUaW1lID0gYWN0aXZlRGF0ZS5nZXRUaW1lKCk7XG5cbiAgICAgIC8vIOOCueODrOODg+ODieOBruabtOaWsOaZgumWk+OBqOOAgeePvuWcqOaZgumWkyAtIG4g44KS5q+U6LyD44GX44Gm44CB44K544Os44OD44OJ44Gu5pu05paw5pmC6ZaT44GM5Y+k44GL44Gj44Gf44KJdHJ1ZeOCkui/lOOBmVxuICAgICAgcmV0dXJuIGlzU2NoZW1hID8gdHJ1ZSA6IHRocmVhZFVwZGF0ZVRpbWUgPCBhY3RpdmVUaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzTXVsdGlzdHJlYW0oYXBwKTogYm9vbGVhbiB7XG4gICAgaWYgKGFwcCA9PT0gdW5kZWZpbmVkIHx8IGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gYXBwLmRpc3BUaHJlYWRUeXBlID09PSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aSAmJiBhcHAubXVsdGlzdHJlYW07XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RhdHVzSXNNZWRpYUNoKGNoKSB7XG4gICAgcmV0dXJuIEFwcC5nZXRJc01lZGlhQ2goY2gpO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzVG9nZ2xlTXVsdGlzdHJlYW0oYXBwKTogYm9vbGVhbiB7XG4gICAgLy8gVE9ETzogSnVkZ2UgZml4IGFjdGlvbmVkLlxuICAgIGlmIChhcHAgPT09IHVuZGVmaW5lZCB8fCBhcHAuYWN0aW9uZWQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBhcHAuaXNUb2dnbGVNdWx0aXN0cmVhbTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDb250ZW50VHlwZUZyb21GaW5kVHlwZShjb250ZW50VHlwZSkge1xuICAgIGNvbnN0IGZpbmRUeXBlSHRtbCA9IFRocmVhZC5maW5kVHlwZXNbVGhyZWFkLmZpbmRUeXBlSHRtbF07XG4gICAgY29uc3QgZmluZFR5cGVNdXNpYyA9IFRocmVhZC5maW5kVHlwZXNbVGhyZWFkLmZpbmRUeXBlTXVzaWNdO1xuICAgIGNvbnN0IGZpbmRUeXBlVmlkZW8gPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZVZpZGVvXTtcblxuICAgIGxldCBmaW5kVHlwZSA9IFwiXCI7XG4gICAgbGV0IHNwbGl0ZWRDb250ZW50VHlwZSA9IFwiXCI7XG4gICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCI7XCIpID4gMCkge1xuICAgICAgc3BsaXRlZENvbnRlbnRUeXBlID0gY29udGVudFR5cGUuc3BsaXQoXCI7XCIpWzBdO1xuICAgIH1cbiAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcIi9cIikgPiAwKSB7XG4gICAgICBzcGxpdGVkQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5zcGxpdChcIi9cIilbMF07XG4gICAgfVxuXG4gICAgZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVIdG1sO1xuICAgIGlmIChmaW5kVHlwZUh0bWwuaW5jbHVkZXMoc3BsaXRlZENvbnRlbnRUeXBlKSkge1xuICAgICAgZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVIdG1sO1xuICAgIH1cbiAgICBpZiAoZmluZFR5cGVNdXNpYy5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICBmaW5kVHlwZSA9IFRocmVhZC5maW5kVHlwZU11c2ljO1xuICAgIH1cbiAgICBpZiAoZmluZFR5cGVWaWRlby5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICBmaW5kVHlwZSA9IFRocmVhZC5maW5kVHlwZVZpZGVvO1xuICAgIH1cbiAgICByZXR1cm4gZmluZFR5cGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0RmluZFR5cGVGcm9tU3JjKHNyYykge1xuICAgIGNvbnN0IHN0ciA9IEFwcC5nZXRNZWRpYVR5cGVGcm9tU3JjKHNyYyk7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgfVxufVxuIiwiaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFBvc3RNdWx0aSBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RNdWx0aVwiO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrXCI7XG5pbXBvcnQgUG9zdHNTaW5nbGUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1NpbmdsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0cyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwUG9zdHMoc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSwgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUsIHBvc3RzQ2hpbGQsIHBvc3RzTG9ncyB9ID0gc3RhdGU7XG4gICAgc3dpdGNoIChhcHAuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6XG4gICAgICAgIHJldHVybiBwb3N0c1RpbWVsaW5lO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgcmV0dXJuIHBvc3RzTXVsdGk7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgcmV0dXJuIHBvc3RzU2luZ2xlO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgcmV0dXJuIHBvc3RzQ2hpbGQ7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIHJldHVybiBwb3N0c0xvZ3M7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHMgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBleGlzdFBvc3RzID0gcG9zdHMgJiYgcG9zdHMubGVuZ3RoID4gMDtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0TXVsdGkoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IFtdO1xuICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBbXTtcbiAgICBzd2l0Y2ggKGFwcC5kaXNwVGhyZWFkVHlwZSkge1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTpcbiAgICAgICAgYWN0aW9uID0gUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZShhY3Rpb24sIHBvc3RzLCBzdGF0ZSwgZXhpc3RQb3N0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgYWN0aW9uLnBvc3RzTXVsdGkgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgYWN0aW9uLnBvc3RzU2luZ2xlID0gZXhpc3RQb3N0cyA/IHBvc3RzIDogW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzVGltZWxpbmUoYWN0aW9uLCBwb3N0cywgc3RhdGUsIGV4aXN0UG9zdHMpIHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIikge1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUucHVzaChhY3Rpb24ucG9zdHNbMF0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCIpIHtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG5cbiAgICAgIGlmIChleGlzdFBvc3RzKSB7XG4gICAgICAgIGNvbnN0IHBvc3RzTGVuZ3RoID0gcG9zdHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocG9zdHNbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXF1ZW5jZSB7XG4gIHN0YXRpYyBnZXQgVEFMS05fUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuIFwidGFsa246XCI7XG4gIH1cbiAgc3RhdGljIGdldCBIVFRQX1BST1RPQ09MKCkge1xuICAgIHJldHVybiBcImh0dHA6XCI7XG4gIH1cbiAgc3RhdGljIGdldCBIVFRQU19QUk9UT0NPTCgpIHtcbiAgICByZXR1cm4gXCJodHRwczpcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IFVOS05PV05fUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuIFwiPz8/PzpcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENBVENIX01FX0tFWSgpIHtcbiAgICByZXR1cm4gXCJAQ0FUQ0hfTUVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9SRVFVRVNUX1RZUEUoKSB7XG4gICAgcmV0dXJuIFwiUkVRVUVTVFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCgpIHtcbiAgICByZXR1cm4gXCJFTUlUXCI7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuIFwiQlJPQURDQVNUXCI7XG4gIH1cbiAgc3RhdGljIGdldCBDT05ORUNUSU9OX1NFUlZFUl9LRVkoKSB7XG4gICAgcmV0dXJuIFwiY29ubmVjdGlvblNlcnZlclwiO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1RPX1NFUlZFUl9SRVFVRVNUKCkge1xuICAgIHJldHVybiBgQVBJX1RPX1NFUlZFUlske1NlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEV9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBTRVJWRVJfVE9fQVBJX0VNSVQoKSB7XG4gICAgcmV0dXJuIGBTRVJWRVJfVE9fQVBJWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IFNFUlZFUl9UT19BUElfQlJPQURDQVNUKCkge1xuICAgIHJldHVybiBgU0VSVkVSX1RPX0FQSVske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVH1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfUkVRVUVTVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbJHtTZXF1ZW5jZS5BUElfUkVRVUVTVF9UWVBFfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1RPX0NMSUVOVF9FTUlUKCkge1xuICAgIHJldHVybiBgQVBJX1RPX0NMSUVOVFske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX0JST0FEQ0FTVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1R9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfQlJPQURDQVNUX0NBTExCQUNLKCkge1xuICAgIHJldHVybiBcInR1bmVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IFJFRFVYX0FDVElPTl9LRVkoKSB7XG4gICAgcmV0dXJuIFwidHlwZVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgTUVUSE9EX0NPTE9OKCkge1xuICAgIHJldHVybiBcIjpcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFERF9DTElFTlRfQUNUSU9OX1BSRUZJWCgpIHtcbiAgICByZXR1cm4gXCJBUElfVE9fQ0xJRU5UXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtYXAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR1bmU6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiY2hcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHVzZXI6IFtcInVpZFwiXSwgc2V0dGluZzogXCIqXCIsIHRocmVhZDogW1wid2F0Y2hDbnRcIl0gfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgZmV0Y2hQb3N0czoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbXCJjaFwiLCBcInByb3RvY29sXCIsIFwiaG9zdFwiLCBcImhhc1NsYXNoXCJdLFxuICAgICAgICAgIGFwcDogW1wibXVsdGlzdHJlYW1cIiwgXCJyb290Q2hcIiwgXCJkaXNwVGhyZWFkVHlwZVwiLCBcImFjdGlvbmVkXCIsIFwib2Zmc2V0RmluZElkXCIsIFwiaXNUb2dnbGVNdWx0aXN0cmVhbVwiXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHtcbiAgICAgICAgICBwb3N0czogXCIqXCIsXG4gICAgICAgICAgdGhyZWFkOiBcIipcIixcbiAgICAgICAgICBhcHA6IFtcImRpc3BUaHJlYWRUeXBlXCIsIFwib2Zmc2V0RmluZElkXCIsIFwidHVuZWRcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbXCJ3YXRjaENudFwiLCBcImNoXCJdIH0sXG4gICAgICB9LFxuICAgICAgZ2V0TW9yZToge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbXCJjaFwiXSxcbiAgICAgICAgICBhcHA6IFtcIm11bHRpc3RyZWFtXCIsIFwiZGlzcFRocmVhZFR5cGVcIiwgXCJvZmZzZXRGaW5kSWRcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBcIipcIixcbiAgICAgICAgICBhcHA6IFtcImRpc3BUaHJlYWRUeXBlXCIsIFwib2Zmc2V0RmluZElkXCJdLFxuICAgICAgICAgIHBvc3RzOiBcIipcIixcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgdXBkYXRlVGhyZWFkOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFtcImNoXCIsIFwicHJvdG9jb2xcIiwgXCJob3N0XCIsIFwiaGFzU2xhc2hcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBcIipcIixcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgY2hhbmdlVGhyZWFkOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFtcImNoXCIsIFwicHJvdG9jb2xcIiwgXCJob3N0XCIsIFwiaGFzU2xhc2hcIl0sXG4gICAgICAgICAgYXBwOiBbXCJ0dW5lZFwiLCBcInJvb3RDaFwiLCBcIm11bHRpc3RyZWFtXCIsIFwiZGlzcFRocmVhZFR5cGVcIiwgXCJvZmZzZXRGaW5kSWRcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IGFwcDogW1widHVuZWRcIl0gfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTogeyB0aHJlYWQ6IFtcIndhdGNoQ250XCIsIFwiY2hcIl0gfSxcbiAgICAgIH0sXG4gICAgICBjaGFuZ2VUaHJlYWREZXRhaWw6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZTogeyB0aHJlYWQ6IFtcImNoXCJdIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogXCIqXCIgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgYWRkRmluZENoaWxkOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHsgdGhyZWFkOiBbXCJjaFwiXSB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHJhbms6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIGFwcDogW1wiZmluZFR5cGVcIiwgXCJyb290Q2hcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHJhbms6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHBvc3Q6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHVzZXI6IFtcInVpZFwiLCBcInV0eXBlXCJdLFxuICAgICAgICAgIGFwcDogW1wiaW5wdXRQb3N0XCIsIFwiaW5wdXRTdGFtcElkXCIsIFwiaW5wdXRDdXJyZW50VGltZVwiLCBcImRpc3BUaHJlYWRUeXBlXCJdLFxuICAgICAgICAgIHRocmVhZDogW1wiZmluZFR5cGVcIiwgXCJ0aXRsZVwiLCBcInByb3RvY29sXCIsIFwiY2hcIiwgXCJjaHNcIiwgXCJlbW90aW9uc1wiLCBcImZhdmljb25cIiwgXCJjb250ZW50VHlwZVwiXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHt9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7IHBvc3RzOiBcIipcIiwgdGhyZWFkOiBcIipcIiwgcmFuazogXCIqXCIgfSxcbiAgICAgIH0sXG4gICAgICB1cGRhdGVUaHJlYWRTZXJ2ZXJNZXRhczoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHsgdGhyZWFkOiBbXCJzZXJ2ZXJNZXRhc1wiXSB9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbXCJob3N0XCIsIFwicHJvdG9jb2xcIiwgXCJjaFwiXSxcbiAgICAgICAgICB1c2VyOiBcIipcIiwgLy8g5oe45b+1XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogXCIqXCIgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgbG9naW46IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7IHVzZXI6IFtcInJlcXVlc3RMb2dpblR5cGVcIl0gfSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHVzZXI6IFtcInVpZFwiLCBcImhyZWZcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHVzZXI6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGRpc2Nvbm5lY3Q6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge30sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7fSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTogeyB0aHJlYWQ6IFtcIndhdGNoQ250XCIsIFwiY2hcIl0gfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTZXF1ZW5jZUFjdGlvbk1hcChtZXRob2QpOiB7IHNlcXVlbmNlOiBzdHJpbmc7IGFjdGlvblR5cGU6IHN0cmluZzsgYWN0aW9uTmFtZTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IHNwbGl0ZWQgPSBtZXRob2Quc3BsaXQoU2VxdWVuY2UuTUVUSE9EX0NPTE9OKTtcbiAgICBjb25zdCBzZXF1ZW5jZSA9IHNwbGl0ZWRbMF0uc3BsaXQoXCJbXCIpWzBdO1xuICAgIGxldCBhY3Rpb25UeXBlO1xuXG4gICAgaWYgKHNwbGl0ZWRbMF0uaW5kZXhPZihgWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dYCkgPiAwKSB7XG4gICAgICBhY3Rpb25UeXBlID0gU2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uVHlwZSA9XG4gICAgICAgIHNwbGl0ZWRbMF0uaW5kZXhPZihgWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH1dYCkgPiAwXG4gICAgICAgICAgPyBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUXG4gICAgICAgICAgOiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1Q7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IHNwbGl0ZWRbMV07XG4gICAgcmV0dXJuIHsgc2VxdWVuY2UsIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUgfTtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVDYWxsYmFja0V4ZUNvbmRpdGlvbk1hcChhY3Rpb25OYW1lKTogeyBlbWl0OiBib29sZWFuOyBicm9hZGNhc3Q6IGJvb2xlYW4gfSB7XG4gICAgbGV0IGFjdGl2ZVJlc3BvbnNlTWFwID0geyBlbWl0OiB0cnVlLCBicm9hZGNhc3Q6IHRydWUgfTtcbiAgICBpZiAoU2VxdWVuY2UubWFwW2FjdGlvbk5hbWVdKSB7XG4gICAgICBhY3RpdmVSZXNwb25zZU1hcC5lbWl0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VFbWl0U3RhdGUpLmxlbmd0aCA+IDApO1xuICAgICAgYWN0aXZlUmVzcG9uc2VNYXAuYnJvYWRjYXN0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSkubGVuZ3RoID4gMCk7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVSZXNwb25zZU1hcDtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0QXBpVG9DbGllbnRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX1JFUVVFU1QpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX0VNSVQpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QpO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZXF1ZXN0U3RhdGUoYWN0aW9uTmFtZSwgcmVkdXhTdGF0ZSwgcmVxdWVzdFBhcmFtcykge1xuICAgIGNvbnN0IGVuZHBvaW50S2V5ID0gYWN0aW9uTmFtZS5yZXBsYWNlKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCwgXCJcIik7XG4gICAgY29uc3QgeyByZXF1ZXN0UHVibGljU3RhdGUsIHJlcXVlc3RQcml2YXRlU3RhdGUgfSA9IFNlcXVlbmNlLm1hcFtlbmRwb2ludEtleV07XG4gICAgbGV0IHJlcXVlc3RTdGF0ZSA9IHsgW1NlcXVlbmNlLlJFRFVYX0FDVElPTl9LRVldOiBlbmRwb2ludEtleSB9O1xuXG4gICAgT2JqZWN0LmtleXMocmVxdWVzdFByaXZhdGVTdGF0ZSkuZm9yRWFjaCgoc3RhdGVLZXkpID0+IHtcbiAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XSkgcmVxdWVzdFN0YXRlW3N0YXRlS2V5XSA9IHt9O1xuXG4gICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlW3N0YXRlS2V5XS5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHJlZHV4U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdO1xuICAgICAgICAgIGlmIChyZXF1ZXN0UGFyYW1zICYmIHJlcXVlc3RQYXJhbXNbc3RhdGVLZXldICYmIFNjaGVtYS5pc1NldChyZXF1ZXN0UGFyYW1zW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVxdWVzdFBhcmFtc1tzdGF0ZUtleV1bY29sdW1uTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhyZXF1ZXN0UHVibGljU3RhdGUpLmZvckVhY2goKHN0YXRlS2V5KSA9PiB7XG4gICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0pIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0gPSB7fTtcblxuICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlW3N0YXRlS2V5XS5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkge1xuICAgICAgICAgIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0gPSByZXF1ZXN0UGFyYW1zO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVxdWVzdFN0YXRlO1xuICB9XG5cbiAgc3RhdGljIGdldFJlc3BvbnNlU3RhdGUocmVzcG9uc2VUeXBlLCByZXF1ZXN0U3RhdGUsIHVwZGF0ZVN0YXRlKSB7XG4gICAgY29uc3QgZW5kcG9pbnRLZXkgPSByZXF1ZXN0U3RhdGUudHlwZTtcbiAgICBjb25zdCByZXNwb25zZVNjaGVtYSA9IFNlcXVlbmNlLm1hcFtlbmRwb2ludEtleV1bYHJlc3BvbnNlJHtyZXNwb25zZVR5cGV9U3RhdGVgXTtcbiAgICBsZXQgcmVzcG9uc2VTdGF0ZSA9IHsgW1NlcXVlbmNlLlJFRFVYX0FDVElPTl9LRVldOiBlbmRwb2ludEtleSB9O1xuICAgIE9iamVjdC5rZXlzKHJlc3BvbnNlU2NoZW1hKS5mb3JFYWNoKCh1cGRhdGVTdGF0ZUtleSkgPT4ge1xuICAgICAgaWYgKHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XSkge1xuICAgICAgICBjb25zdCBjb2x1bW5OYW1lcyA9IHJlc3BvbnNlU2NoZW1hW3VwZGF0ZVN0YXRlS2V5XTtcbiAgICAgICAgbGV0IHVwZGF0ZVN0YXRlVmFsdWUgPSB1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV07XG5cbiAgICAgICAgc3dpdGNoICh1cGRhdGVTdGF0ZVZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwibW9kZWxcIjpcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlVmFsdWUgPSB1cGRhdGVTdGF0ZVZhbHVlLnRvSlNPTigpO1xuICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZVN0YXRlVmFsdWUuX2lkO1xuICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZVN0YXRlVmFsdWUuX192O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sdW1uTmFtZXMgPT09IFwiKlwiKSB7XG4gICAgICAgICAgcmVzcG9uc2VTdGF0ZSA9IHtcbiAgICAgICAgICAgIC4uLnJlc3BvbnNlU3RhdGUsXG4gICAgICAgICAgICBbdXBkYXRlU3RhdGVLZXldOiB1cGRhdGVTdGF0ZVZhbHVlLFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sdW1uTmFtZXMuZm9yRWFjaCgoY29sdW1uTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XVtjb2x1bW5OYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4ucmVzcG9uc2VTdGF0ZSxcbiAgICAgICAgICAgICAgICBbdXBkYXRlU3RhdGVLZXldOiB7XG4gICAgICAgICAgICAgICAgICAuLi5yZXNwb25zZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XSxcbiAgICAgICAgICAgICAgICAgIFtjb2x1bW5OYW1lXTogdXBkYXRlU3RhdGVbdXBkYXRlU3RhdGVLZXldW2NvbHVtbk5hbWVdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBgU0VRVUVOQ0UgRVJST1I6IE5PX1VQREFURV9TVEFURV9DT0xVTU5fTkFNRTogJHtyZXF1ZXN0U3RhdGUudHlwZX06ICR7dXBkYXRlU3RhdGVLZXl9LiR7Y29sdW1uTmFtZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBgU0VRVUVOQ0UgRVJST1I6IE5PX1VQREFURV9TVEFURV9LRVk6ICR7cmVxdWVzdFN0YXRlLnR5cGV9OiAke3VwZGF0ZVN0YXRlS2V5fWA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlU3RhdGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0UmVxdWVzdEFjdGlvblN0YXRlKGFjdGlvbk5hbWUsIHJlcXVlc3RQYXJhbXMxID0gbnVsbCwgcmVxdWVzdFBhcmFtczIgPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0UGFyYW1zMSA9PT0gXCJzdHJpbmdcIiAmJiByZXF1ZXN0UGFyYW1zMiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVlc3RQYXJhbXMxID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZXF1ZXN0UGFyYW1zMiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIHsgLi4ucmVxdWVzdFBhcmFtczEsIC4uLnJlcXVlc3RQYXJhbXMyLCB0eXBlOiBhY3Rpb25OYW1lIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWVzdFBhcmFtczEgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHJlcXVlc3RQYXJhbXMyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMiwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMSwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICB9XG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCIvKipcclxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xyXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICB2YXIgc3RyID0gJyc7XHJcblxyXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xyXG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XHJcbiAgdmFyIHFyeSA9IHt9O1xyXG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcclxuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xyXG4gIH1cclxuICByZXR1cm4gcXJ5O1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RzVGltZWxpbmUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RUaW1lbGluZVN0b2NrIHtcbiAgY29uc3RydWN0b3IocGFyYW1zID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgRW1vdGlvbk1vZGVsIGZyb20gXCJjb21tb24vZW1vdGlvbnMvbW9kZWwvaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1vdGlvbnMge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRNb2RlbEtleSgpIHtcbiAgICByZXR1cm4gXCJydXNzZWxsU2ltcGxlXCI7XG4gIH1cbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTElLRTogeyBJRDogMSwgTEFCRUw6IFwiTGlrZVwiIH0sXG4gICAgICBJTlRFUkVTVDogeyBJRDogMTAwMiwgTEFCRUw6IFwiSW50ZXJlc3RcIiB9LFxuICAgICAgRElTQ09WRVJZOiB7IElEOiAxMDAzLCBMQUJFTDogXCJEaXNjb3ZlcnlcIiB9LFxuICAgICAgU1VOTlk6IHsgSUQ6IDEwMDQsIExBQkVMOiBcIlN1bm55XCIgfSxcbiAgICAgIFBFQUNFOiB7IElEOiAxMDA1LCBMQUJFTDogXCJQZWFjZVwiIH0sXG4gICAgICBDSEVFUjogeyBJRDogMTAwNiwgTEFCRUw6IFwiQ2hlZXJcIiB9LFxuICAgICAgTU9ORVk6IHsgSUQ6IDEwMDcsIExBQkVMOiBcIk1vbmV5XCIgfSxcbiAgICAgIFVOTElLRTogeyBJRDogMjAwMSwgTEFCRUw6IFwiVW5saWtlXCIgfSxcbiAgICAgIExPVkU6IHsgSUQ6IDMwMDAsIExBQkVMOiBcIkxvdmVcIiB9LFxuICAgICAgU1VQUklTRTogeyBJRDogMTAwMDEsIExBQkVMOiBcIlN1cnByaXNlXCIgfSxcbiAgICAgIEVYQ0lURTogeyBJRDogMTAwMDIsIExBQkVMOiBcIkV4Y2l0ZVwiIH0sXG4gICAgICBIQVBQWTogeyBJRDogMTAwMDMsIExBQkVMOiBcIkhhcHB5XCIgfSxcbiAgICAgIEpPWTogeyBJRDogMTAwMDQsIExBQkVMOiBcIkpveVwiIH0sXG4gICAgICBHTEFEOiB7IElEOiAyMDAwMSwgTEFCRUw6IFwiR2xhZFwiIH0sXG4gICAgICBTQVRJU0ZBQ1RJT046IHsgSUQ6IDIwMDAyLCBMQUJFTDogXCJTYXRpc2ZhY3Rpb25cIiB9LFxuICAgICAgQ09NRk9SVDogeyBJRDogMzAwMDEsIExBQkVMOiBcIkNvbWZvcnRcIiB9LFxuICAgICAgUkVMQVg6IHsgSUQ6IDMwMDAyLCBMQUJFTDogXCJSZWxheFwiIH0sXG4gICAgICBUSVJFRDogeyBJRDogMzAwMDMsIExBQkVMOiBcIlRpcmVkXCIgfSxcbiAgICAgIFNMRUVQWTogeyBJRDogNTAwMDEsIExBQkVMOiBcIlNsZWVweVwiIH0sXG4gICAgICBTTEFDSzogeyBJRDogNjAwMDEsIExBQkVMOiBcIlNsYWNrXCIgfSxcbiAgICAgIEJPUklORzogeyBJRDogNjAwMDIsIExBQkVMOiBcIkJvcmluZ1wiIH0sXG4gICAgICBNRUxBTkNIT0xZOiB7IElEOiA3MDAwMSwgTEFCRUw6IFwiTWVsYW5jaG9seVwiIH0sXG4gICAgICBTQUQ6IHsgSUQ6IDcwMDAyLCBMQUJFTDogXCJTYWRcIiB9LFxuICAgICAgVU5QTEVBU0FOVDogeyBJRDogNzAwMDMsIExBQkVMOiBcIlVucGxlYXNhbnRcIiB9LFxuICAgICAgRlJVU1RSQVRFRDogeyBJRDogNzAwMDQsIExBQkVMOiBcIkZydXN0cmF0ZWRcIiB9LFxuICAgICAgRElTU0FUSVNGSUVEOiB7IElEOiA4MDAwMSwgTEFCRUw6IFwiRGlzc2F0aXNmaWVkXCIgfSxcbiAgICAgIEFOR0VSOiB7IElEOiA4MDAwMiwgTEFCRUw6IFwiQW5nZXJcIiB9LFxuICAgICAgV09SUlk6IHsgSUQ6IDgwMDAzLCBMQUJFTDogXCJXb3JyeVwiIH0sXG4gICAgICBGRUFSOiB7IElEOiA4MDAwNCwgTEFCRUw6IFwiRmVhclwiIH0sXG4gICAgICBXT1JSWV9GRUFSOiB7IElEOiA4MDAwNSwgTEFCRUw6IFwiV29ycnkmRmVhclwiIH1cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldEdyYXBoTWF4TnVtKFxuICAgIG1vZGVsS2V5ID0gRW1vdGlvbnMuZGVmYXVsdE1vZGVsS2V5LFxuICAgIHRvdGFsTnVtID0gMCxcbiAgICBhZGRaZXJvID0gdHJ1ZVxuICApIHtcbiAgICBsZXQgZ3JhcGhNYXhOdW0gPSAwO1xuICAgIGxldCBsaW1pdHMgPSB7fTtcbiAgICBzd2l0Y2ggKG1vZGVsS2V5KSB7XG4gICAgICBjYXNlIFwicGxhaW5cIjpcbiAgICAgICAgbGltaXRzID0ge1xuICAgICAgICAgIDE6IDEsXG4gICAgICAgICAgNTogMixcbiAgICAgICAgICAxMDogMyxcbiAgICAgICAgICAzMDogNCxcbiAgICAgICAgICA3MDogNSxcbiAgICAgICAgICAxMDA6IDYsXG4gICAgICAgICAgMjUwOiA3LFxuICAgICAgICAgIDUwMDogOCxcbiAgICAgICAgICA3NTA6IDksXG4gICAgICAgICAgMTAwMDogMTBcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicnVzc2VsbFNpbXBsZVwiOlxuICAgICAgICBsaW1pdHMgPSB7XG4gICAgICAgICAgNjogNSxcbiAgICAgICAgICAxMDogNSxcbiAgICAgICAgICAyMDogNSxcbiAgICAgICAgICAzMDogNSxcbiAgICAgICAgICA1MDogNVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJydXNzZWxsXCI6XG4gICAgICAgIGxpbWl0cyA9IHtcbiAgICAgICAgICAxOiAxLFxuICAgICAgICAgIDU6IDIsXG4gICAgICAgICAgMTA6IDMsXG4gICAgICAgICAgMzA6IDQsXG4gICAgICAgICAgNzA6IDUsXG4gICAgICAgICAgMTAwOiA2LFxuICAgICAgICAgIDI1MDogNyxcbiAgICAgICAgICA1MDA6IDgsXG4gICAgICAgICAgNzUwOiA5LFxuICAgICAgICAgIDEwMDA6IDEwXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbWl0S2V5cyA9IE9iamVjdC5rZXlzKGxpbWl0cyk7XG4gICAgY29uc3QgbGltaXRMZW5ndGggPSBsaW1pdEtleXMubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0TGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleU51bTogYW55ID0gbGltaXRLZXlzW2ldO1xuICAgICAgY29uc3QgZW1vdGlvbkxpbWl0TnVtID0gbGltaXRzW2tleU51bV07XG4gICAgICBpZiAoa2V5TnVtID4gdG90YWxOdW0pIGJyZWFrO1xuICAgICAgZ3JhcGhNYXhOdW0gPSBlbW90aW9uTGltaXROdW07XG4gICAgfVxuXG4gICAgLy8gYWRkIHplcm8gZ3JhcGggc3BhY2VcbiAgICByZXR1cm4gYWRkWmVybyA/IGdyYXBoTWF4TnVtICsgMSA6IGdyYXBoTWF4TnVtO1xuICB9XG5cbiAgYmVsb25nQ292ZXJUeXBlczogYW55O1xuICBpZEtleVR5cGVzOiBhbnk7XG4gIHR5cGVzQXJyYXk6IGFueTtcbiAgbW9kZWw6IGFueTtcbiAgYmFsYW5jZXM6IGFueTtcbiAgY29uc3RydWN0b3IodHlwZSA9IFwiXCIpIHtcbiAgICB0aGlzLmJlbG9uZ0NvdmVyVHlwZXMgPSB7fTtcbiAgICB0aGlzLmlkS2V5VHlwZXMgPSB7fTtcbiAgICB0aGlzLnR5cGVzQXJyYXkgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKEVtb3Rpb25zLmlucHV0cykuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgICBFbW90aW9ucy5pbnB1dHNbbGFiZWxdLmZvckVhY2goc3RhbXBJZCA9PiB7XG4gICAgICAgIHRoaXMuYmVsb25nQ292ZXJUeXBlc1tzdGFtcElkXSA9IGxhYmVsO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhFbW90aW9ucy5UWVBFUykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy50eXBlc0FycmF5LnB1c2goa2V5KTtcbiAgICAgIGNvbnN0IG9iaiA9IEVtb3Rpb25zLlRZUEVTW2tleV07XG4gICAgICB0aGlzLmlkS2V5VHlwZXNbb2JqLklEXSA9IG9iai5MQUJFTDtcbiAgICB9KTtcblxuICAgIHRoaXMubW9kZWwgPSBFbW90aW9uTW9kZWw7XG5cbiAgICB0aGlzLmJhbGFuY2VzID0ge1xuICAgICAgcGxhaW46IEVtb3Rpb25Nb2RlbC5QbGFpbi5nZXRTYXZlQmFsYW5jZSxcbiAgICAgIHJ1c3NlbGw6IEVtb3Rpb25Nb2RlbC5SdXNzZWxsLmdldFNhdmVCYWxhbmNlLFxuICAgICAgcnVzc2VsbFNpbXBsZTogRW1vdGlvbk1vZGVsLlJ1c3NlbGxTaW1wbGUuZ2V0U2F2ZUJhbGFuY2VcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBpbnB1dHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5MSUtFLkxBQkVMXTogWzEsIDIsIDMsIDQsIDVdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLk1PTkVZLkxBQkVMXTogWzEwMF0sXG5cbiAgICAgIFtFbW90aW9ucy5UWVBFUy5FWENJVEUuTEFCRUxdOiBbMTEwMSwgMTEwMiwgMTEwMywgMTAwMSwgMTAwMl0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuTEFCRUxdOiBbXG4gICAgICAgIDEyMDEsXG4gICAgICAgIDEyMDIsXG4gICAgICAgIDEyMDMsXG4gICAgICAgIDEyMDQsXG4gICAgICAgIDEzMDEsXG4gICAgICAgIDEzMDIsXG4gICAgICAgIDEzMDMsXG4gICAgICAgIDEzMDQsXG4gICAgICAgIDEzMDUsXG4gICAgICAgIDEzMDYsXG4gICAgICAgIDEzMDdcbiAgICAgIF0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuSk9ZLkxBQkVMXTogWzE0MDEsIDE0MDIsIDE1MDEsIDE1MDIsIDE1MDMsIDE1MDRdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLkxBQkVMXTogW1xuICAgICAgICAxNjAxLFxuICAgICAgICAxNjAyLFxuICAgICAgICAxNjAzLFxuICAgICAgICAxNzAxLFxuICAgICAgICAxNzAyLFxuICAgICAgICAxNzAzLFxuICAgICAgICAxODAxLFxuICAgICAgICAxODAyLFxuICAgICAgICAxODAzXG4gICAgICBdLFxuXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suTEFCRUxdOiBbXG4gICAgICAgIDIwMDEsXG4gICAgICAgIDIwMDIsXG4gICAgICAgIDIwMDMsXG4gICAgICAgIDIwMDQsXG4gICAgICAgIDIwMDUsXG4gICAgICAgIDIxMDEsXG4gICAgICAgIDIxMDIsXG4gICAgICAgIDIxMDNcbiAgICAgIF0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5MQUJFTF06IFtcbiAgICAgICAgMjMwMSxcbiAgICAgICAgMjMwMixcbiAgICAgICAgMjMwMyxcbiAgICAgICAgMjIwMSxcbiAgICAgICAgMjIwMixcbiAgICAgICAgMjIwMyxcbiAgICAgICAgMjIwNCxcbiAgICAgICAgMjIwNSxcbiAgICAgICAgMjQwMSxcbiAgICAgICAgMjQwMixcbiAgICAgICAgMjQwMyxcbiAgICAgICAgMjQwNCxcbiAgICAgICAgMjUwMSxcbiAgICAgICAgMjUwMixcbiAgICAgICAgMjUwM1xuICAgICAgXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5BTkdFUi5MQUJFTF06IFtcbiAgICAgICAgMjcwMSxcbiAgICAgICAgMjcwMixcbiAgICAgICAgMjcwMyxcbiAgICAgICAgMjcwNCxcbiAgICAgICAgMjcwNSxcbiAgICAgICAgMjcwNixcbiAgICAgICAgMjYwMSxcbiAgICAgICAgMjYwMlxuICAgICAgXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLkxBQkVMXTogW1xuICAgICAgICAyOTA0LFxuICAgICAgICAyOTA1LFxuICAgICAgICAyOTA2LFxuICAgICAgICAyODAxLFxuICAgICAgICAyODAyLFxuICAgICAgICAyODAzLFxuICAgICAgICAyODA0LFxuICAgICAgICAyODA1LFxuICAgICAgICAyODA2LFxuICAgICAgICAyOTAxLFxuICAgICAgICAyOTAzXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgbWFwKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBGbGF0IGxpa2VcbiAgICAgIDE6IFwi8J+RjVwiLFxuICAgICAgMjogXCLinIzvuI9cIixcbiAgICAgIDM6IFwi8J+RgFwiLFxuICAgICAgNDogXCLwn5KhXCIsXG4gICAgICA1OiBcIvCfkqpcIixcbiAgICAgIDEwOiBcIlwiLFxuICAgICAgMTAwOiBcIvCfkrVcIixcblxuICAgICAgLy8gU3VwcmlzZShQb3NpMSlcbiAgICAgIDEwMDE6IFwi8J+Ys1wiLFxuICAgICAgMTAwMjogXCLwn5i1XCIsXG5cbiAgICAgIC8vIEV4Y2l0ZShQb3NpMSlcbiAgICAgIDExMDE6IFwi8J+ko1wiLFxuICAgICAgMTEwMjogXCLwn5iGXCIsXG4gICAgICAxMTAzOiBcIvCfpKlcIixcblxuICAgICAgLy8gSGFwcHkoUG9zaTIpXG4gICAgICAxMjAxOiBcIvCfkpNcIixcbiAgICAgIDEyMDI6IFwi8J+lsFwiLFxuICAgICAgMTIwMzogXCLwn5iNXCIsXG4gICAgICAxMjA0OiBcIvCfmLtcIixcblxuICAgICAgLy8gSm95KFBvc2kyKVxuICAgICAgMTMwMTogXCLwn5iEXCIsXG4gICAgICAxMzAyOiBcIuKcqFwiLFxuICAgICAgMTMwMzogXCLwn5iBXCIsXG4gICAgICAxMzA0OiBcIvCfjbpcIixcbiAgICAgIDEzMDU6IFwi8J+YilwiLFxuICAgICAgMTMwNjogXCLwn5iYXCIsXG4gICAgICAxMzA3OiBcIvCfjJ9cIixcblxuICAgICAgLy8gR2xhZChQb3NpMylcbiAgICAgIDE0MDE6IFwi8J+ls1wiLFxuICAgICAgMTQwMjogXCLwn5iDXCIsXG5cbiAgICAgIC8vIFNhdGlzZmFjdGlvbihQb3NpMylcbiAgICAgIDE1MDE6IFwi8J+Yi1wiLFxuICAgICAgMTUwMjogXCLwn46CXCIsXG4gICAgICAxNTAzOiBcIvCfjbBcIixcbiAgICAgIDE1MDQ6IFwi8J+ngVwiLFxuXG4gICAgICAvLyBDb21mb3J0KFBvc2k0KVxuICAgICAgMTYwMTogXCLwn5iMXCIsXG4gICAgICAxNjAyOiBcIvCfpKRcIixcbiAgICAgIDE2MDM6IFwi8J+YiVwiLFxuXG4gICAgICAvLyBSZWxheChQb3NpNClcbiAgICAgIDE3MDE6IFwi8J+ZglwiLFxuICAgICAgMTcwMjogXCLimJXvuI9cIixcbiAgICAgIDE3MDM6IFwi8J+NtVwiLFxuXG4gICAgICAvLyBUaXJlZChQb3NpNClcbiAgICAgIDE4MDE6IFwi8J+YkFwiLFxuICAgICAgMTgwMjogXCLwn5iuXCIsXG4gICAgICAxODAzOiBcIvCfmK9cIixcblxuICAgICAgLy8gU2xhY2soTmVnYTQpXG4gICAgICAyMDAxOiBcIvCfmIVcIixcbiAgICAgIDIwMDI6IFwi8J+SplwiLFxuICAgICAgMjAwMzogXCLwn6W6XCIsXG4gICAgICAyMDA0OiBcIvCfmLJcIixcbiAgICAgIDIwMDU6IFwi8J+ZhFwiLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiBcIvCfmJJcIixcbiAgICAgIDIxMDI6IFwi8J+YkVwiLFxuICAgICAgMjEwMzogXCLwn5iVXCIsXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiBcIvCfmKlcIixcbiAgICAgIDIyMDI6IFwi8J+YnlwiLFxuICAgICAgMjIwMzogXCLwn5iUXCIsXG4gICAgICAyMjA0OiBcIvCfmJ9cIixcbiAgICAgIDIyMDU6IFwi8J+kolwiLFxuXG4gICAgICAvLyBTYWQoTmVnYTMpXG4gICAgICAyMzAxOiBcIvCfmK1cIixcbiAgICAgIDIzMDI6IFwi8J+YpVwiLFxuICAgICAgMjMwMzogXCLwn5i/XCIsXG5cbiAgICAgIC8vIFVucGxlYXNhbnQoTmVnYTMpXG4gICAgICAyNDAxOiBcIvCfpJVcIixcbiAgICAgIDI0MDI6IFwi8J+kklwiLFxuICAgICAgMjQwMzogXCLwn5i3XCIsXG4gICAgICAyNDA0OiBcIvCfpKdcIixcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6IFwi8J+nkFwiLFxuICAgICAgMjUwMjogXCLwn6SUXCIsXG4gICAgICAyNTAzOiBcIvCfpKhcIixcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogXCLwn5igXCIsXG4gICAgICAyNjAyOiBcIvCfmL5cIixcblxuICAgICAgLy8gQW5nZXIoTmVnYTIpXG4gICAgICAyNzAxOiBcIvCfmKFcIixcbiAgICAgIDI3MDI6IFwi8J+krFwiLFxuICAgICAgMjcwMzogXCLwn5KUXCIsXG4gICAgICAyNzA0OiBcIvCfkqJcIixcbiAgICAgIDI3MDU6IFwi8J+YpFwiLFxuICAgICAgMjcwNjogXCLwn5G/XCIsXG5cbiAgICAgIC8vIFdvcnJ5KE5lZ2ExKVxuICAgICAgMjgwMTogXCLwn5ijXCIsXG4gICAgICAyODAyOiBcIvCfmKtcIixcbiAgICAgIDI4MDM6IFwi8J+Yk1wiLFxuICAgICAgMjgwNDogXCLwn5iWXCIsXG4gICAgICAyODA1OiBcIvCfmKhcIixcbiAgICAgIDI4MDY6IFwi8J+YsFwiLFxuXG4gICAgICAvLyBGZWFyKE5lZ2ExKVxuICAgICAgMjkwMTogXCLwn6W2XCIsXG4gICAgICAyOTAyOiBcIvCfpK5cIixcbiAgICAgIDI5MDM6IFwi8J+ltVwiLFxuICAgICAgMjkwNDogXCLwn5ixXCIsXG4gICAgICAyOTA1OiBcIvCfmYBcIixcbiAgICAgIDI5MDY6IFwi8J+SgFwiXG4gICAgfTtcbiAgfVxufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudHlwZXMgPSBbXG4gICdDT05ORUNUJyxcbiAgJ0RJU0NPTk5FQ1QnLFxuICAnRVZFTlQnLFxuICAnQUNLJyxcbiAgJ0VSUk9SJyxcbiAgJ0JJTkFSWV9FVkVOVCcsXG4gICdCSU5BUllfQUNLJ1xuXTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkNPTk5FQ1QgPSAwO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBkaXNjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRElTQ09OTkVDVCA9IDE7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGV2ZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVZFTlQgPSAyO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBhY2tgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5BQ0sgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBlcnJvcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVSUk9SID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSAnYmluYXJ5IGV2ZW50J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfRVZFTlQgPSA1O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBiaW5hcnkgYWNrYC4gRm9yIGFja3Mgd2l0aCBiaW5hcnkgYXJndW1lbnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfQUNLID0gNjtcblxuLyoqXG4gKiBFbmNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2RlcjtcblxuLyoqXG4gKiBEZWNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcblxuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbmNvZGVyKCkge31cblxudmFyIEVSUk9SX1BBQ0tFVCA9IGV4cG9ydHMuRVJST1IgKyAnXCJlbmNvZGUgZXJyb3JcIic7XG5cbi8qKlxuICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKVxuICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXtcbiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7XG5cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVuY29kaW5nID0gZW5jb2RlQXNTdHJpbmcob2JqKTtcbiAgICBjYWxsYmFjayhbZW5jb2RpbmddKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuXG4gIC8vIGZpcnN0IGlzIHR5cGVcbiAgdmFyIHN0ciA9ICcnICsgb2JqLnR5cGU7XG5cbiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyAnLSc7XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICBpZiAob2JqLm5zcCAmJiAnLycgIT09IG9iai5uc3ApIHtcbiAgICBzdHIgKz0gb2JqLm5zcCArICcsJztcbiAgfVxuXG4gIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICBzdHIgKz0gb2JqLmlkO1xuICB9XG5cbiAgLy8ganNvbiBkYXRhXG4gIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlTdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgIGlmIChwYXlsb2FkICE9PSBmYWxzZSkge1xuICAgICAgc3RyICs9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIHRyeVN0cmluZ2lmeShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7XG4gICAgdmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgIHZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcblxuICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICBjYWxsYmFjayhidWZmZXJzKTsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gIH1cblxuICBiaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbn1cblxuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIERlY29kZXIoKSB7XG4gIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYCB3aXRoIERlY29kZXIuXG4gKi9cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcGFja2V0O1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICBwYWNrZXQgPSBkZWNvZGVTdHJpbmcob2JqKTtcbiAgICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG5cbiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gIHZhciBpID0gMDtcbiAgLy8gbG9vayB1cCB0eXBlXG4gIHZhciBwID0ge1xuICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKVxuICB9O1xuXG4gIGlmIChudWxsID09IGV4cG9ydHMudHlwZXNbcC50eXBlXSkge1xuICAgIHJldHVybiBlcnJvcigndW5rbm93biBwYWNrZXQgdHlwZSAnICsgcC50eXBlKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwLnR5cGUpIHtcbiAgICB2YXIgYnVmID0gJyc7XG4gICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gJy0nKSB7XG4gICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09ICctJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGF0dGFjaG1lbnRzJyk7XG4gICAgfVxuICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gIGlmICgnLycgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgcC5uc3AgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIHAubnNwICs9IGM7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHAubnNwID0gJy8nO1xuICB9XG5cbiAgLy8gbG9vayB1cCBpZFxuICB2YXIgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICBpZiAoJycgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICBwLmlkID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcC5pZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHAuaWQpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgdmFyIGlzUGF5bG9hZFZhbGlkID0gcGF5bG9hZCAhPT0gZmFsc2UgJiYgKHAudHlwZSA9PT0gZXhwb3J0cy5FUlJPUiB8fCBpc0FycmF5KHBheWxvYWQpKTtcbiAgICBpZiAoaXNQYXlsb2FkVmFsaWQpIHtcbiAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvcignaW52YWxpZCBwYXlsb2FkJyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApO1xuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkge1xuICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59XG5cbi8qKlxuICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHtcbiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykgeyAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICB2YXIgcGFja2V0ID0gYmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgIHJldHVybiBwYWNrZXQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59O1xuXG5mdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBleHBvcnRzLkVSUk9SLFxuICAgIGRhdGE6ICdwYXJzZXIgZXJyb3I6ICcgKyBtc2dcbiAgfTtcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxuXG52YXIgaGFzQ09SUyA9IHJlcXVpcmUoJ2hhcy1jb3JzJyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4vZ2xvYmFsVGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxUaGlzW1snQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXG4gIH1cbn0pKCk7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcblxuLyoqXG4gKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBUcmFuc3BvcnQgKG9wdHMpIHtcbiAgdGhpcy5wYXRoID0gb3B0cy5wYXRoO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTtcbiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0O1xuICB0aGlzLnNlY3VyZSA9IG9wdHMuc2VjdXJlO1xuICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW07XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBvcHRzLndpdGhDcmVkZW50aWFscztcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gcmVzdWx0cyBvZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBkZXRlY3Rpb25cbiAgdGhpcy5pc1JlYWN0TmF0aXZlID0gb3B0cy5pc1JlYWN0TmF0aXZlO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFRyYW5zcG9ydC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIEVtaXRzIGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChtc2csIGRlc2MpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIudHlwZSA9ICdUcmFuc3BvcnRFcnJvcic7XG4gIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcbiAgICB0aGlzLmRvT3BlbigpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgIHRoaXMub25DbG9zZSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy53cml0ZShwYWNrZXRzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBub3Qgb3BlbicpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIG9wZW5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHBhY2tldCA9IHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gIHRoaXMub25QYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIi8qKlxyXG4gKiBQYXJzZXMgYW4gVVJJXHJcbiAqXHJcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XHJcblxyXG52YXIgcGFydHMgPSBbXHJcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XHJcbiAgICB2YXIgc3JjID0gc3RyLFxyXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxyXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxyXG4gICAgICAgIHVyaSA9IHt9LFxyXG4gICAgICAgIGkgPSAxNDtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XHJcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmk7XHJcbn07XHJcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gaXNCdWY7XG5cbnZhciB3aXRoTmF0aXZlQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcblxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKSA6IChvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGEgYnVmZmVyIG9yIGFuIGFycmF5YnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzQnVmKG9iaikge1xuICByZXR1cm4gKHdpdGhOYXRpdmVCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgICAgICAgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBlaW8gPSByZXF1aXJlKCdlbmdpbmUuaW8tY2xpZW50Jyk7XG52YXIgU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXInKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIEJhY2tvZmYgPSByZXF1aXJlKCdiYWNrbzInKTtcblxuLyoqXG4gKiBJRTYrIGhhc093blByb3BlcnR5XG4gKi9cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hbmFnZXI7XG5cbi8qKlxuICogYE1hbmFnZXJgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmdpbmUgaW5zdGFuY2Ugb3IgZW5naW5lIHVyaS9vcHRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBNYW5hZ2VyICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hbmFnZXIpKSByZXR1cm4gbmV3IE1hbmFnZXIodXJpLCBvcHRzKTtcbiAgaWYgKHVyaSAmJiAoJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8ICcvc29ja2V0LmlvJztcbiAgdGhpcy5uc3BzID0ge307XG4gIHRoaXMuc3VicyA9IFtdO1xuICB0aGlzLm9wdHMgPSBvcHRzO1xuICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXG4gICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKVxuICB9KTtcbiAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHRoaXMuY29ubmVjdGluZyA9IFtdO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB2YXIgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gIHRoaXMuYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIFByb3BhZ2F0ZSBnaXZlbiBldmVudCB0byBzb2NrZXRzIGFuZCBlbWl0IG9uIGB0aGlzYFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uZW1pdC5hcHBseSh0aGlzLm5zcHNbbnNwXSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIGBzb2NrZXQuaWRgIG9mIGFsbCBzb2NrZXRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uaWQgPSB0aGlzLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2VuZXJhdGUgYHNvY2tldC5pZGAgZm9yIHRoZSBnaXZlbiBgbnNwYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuc3BcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiAobnNwKSB7XG4gIHJldHVybiAobnNwID09PSAnLycgPyAnJyA6IChuc3AgKyAnIycpKSArIHRoaXMuZW5naW5lLmlkO1xufTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoTWFuYWdlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFNldHMgdGhlIGByZWNvbm5lY3Rpb25gIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUvZmFsc2UgaWYgaXQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbiA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcbiAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyBiZWZvcmUgZ2l2aW5nIHVwXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yYW5kb21pemF0aW9uRmFjdG9yID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF4aW11bSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNYXgodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb25uZWN0aW9uIHRpbWVvdXQuIGBmYWxzZWAgdG8gZGlzYWJsZVxuICpcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XG4gIHRoaXMuX3RpbWVvdXQgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90XG4gKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCwgY2FsbGJhY2tcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub3BlbiA9XG5NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuLCBvcHRzKSB7XG4gIGRlYnVnKCdyZWFkeVN0YXRlICVzJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgaWYgKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZignb3BlbicpKSByZXR1cm4gdGhpcztcblxuICBkZWJ1Zygnb3BlbmluZyAlcycsIHRoaXMudXJpKTtcbiAgdGhpcy5lbmdpbmUgPSBlaW8odGhpcy51cmksIHRoaXMub3B0cyk7XG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuXG4gIC8vIGVtaXQgYG9wZW5gXG4gIHZhciBvcGVuU3ViID0gb24oc29ja2V0LCAnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9ub3BlbigpO1xuICAgIGZuICYmIGZuKCk7XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfZXJyb3JgXG4gIHZhciBlcnJvclN1YiA9IG9uKHNvY2tldCwgJ2Vycm9yJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkZWJ1ZygnY29ubmVjdF9lcnJvcicpO1xuICAgIHNlbGYuY2xlYW51cCgpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF9lcnJvcicsIGRhdGEpO1xuICAgIGlmIChmbikge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpO1xuICAgICAgZXJyLmRhdGEgPSBkYXRhO1xuICAgICAgZm4oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfdGltZW91dGBcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG5cbiAgICAvLyBzZXQgdGltZXJcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG4gICAgICBvcGVuU3ViLmRlc3Ryb3koKTtcbiAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgc29ja2V0LmVtaXQoJ2Vycm9yJywgJ3RpbWVvdXQnKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF90aW1lb3V0JywgdGltZW91dCk7XG4gICAgfSwgdGltZW91dCk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLnN1YnMucHVzaChvcGVuU3ViKTtcbiAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdvcGVuJyk7XG5cbiAgLy8gY2xlYXIgb2xkIHN1YnNcbiAgdGhpcy5jbGVhbnVwKCk7XG5cbiAgLy8gbWFyayBhcyBvcGVuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG5cbiAgLy8gYWRkIG5ldyBzdWJzXG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZGF0YScsIGJpbmQodGhpcywgJ29uZGF0YScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BpbmcnLCBiaW5kKHRoaXMsICdvbnBpbmcnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwb25nJywgYmluZCh0aGlzLCAnb25wb25nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZXJyb3InLCBiaW5kKHRoaXMsICdvbmVycm9yJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24odGhpcy5kZWNvZGVyLCAnZGVjb2RlZCcsIGJpbmQodGhpcywgJ29uZGVjb2RlZCcpKSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubGFzdFBpbmcgPSBuZXcgRGF0ZSgpO1xuICB0aGlzLmVtaXRBbGwoJ3BpbmcnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25wb25nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXRBbGwoJ3BvbmcnLCBuZXcgRGF0ZSgpIC0gdGhpcy5sYXN0UGluZyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kZWNvZGVkID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICBkZWJ1ZygnZXJyb3InLCBlcnIpO1xuICB0aGlzLmVtaXRBbGwoJ2Vycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnNvY2tldCA9IGZ1bmN0aW9uIChuc3AsIG9wdHMpIHtcbiAgdmFyIHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICBpZiAoIXNvY2tldCkge1xuICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0aW5nJywgb25Db25uZWN0aW5nKTtcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzb2NrZXQuaWQgPSBzZWxmLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmF1dG9Db25uZWN0KSB7XG4gICAgICAvLyBtYW51YWxseSBjYWxsIGhlcmUgc2luY2UgY29ubmVjdGluZyBldmVudCBpcyBmaXJlZCBiZWZvcmUgbGlzdGVuaW5nXG4gICAgICBvbkNvbm5lY3RpbmcoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNvbm5lY3RpbmcgKCkge1xuICAgIGlmICghfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLCBzb2NrZXQpKSB7XG4gICAgICBzZWxmLmNvbm5lY3RpbmcucHVzaChzb2NrZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzb2NrZXQ7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICpcbiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXRcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKHNvY2tldCkge1xuICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMuY29ubmVjdGluZywgc29ja2V0KTtcbiAgaWYgKH5pbmRleCkgdGhpcy5jb25uZWN0aW5nLnNwbGljZShpbmRleCwgMSk7XG4gIGlmICh0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKSByZXR1cm47XG5cbiAgdGhpcy5jbG9zZSgpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBkZWJ1Zygnd3JpdGluZyBwYWNrZXQgJWonLCBwYWNrZXQpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChwYWNrZXQucXVlcnkgJiYgcGFja2V0LnR5cGUgPT09IDApIHBhY2tldC5uc3AgKz0gJz8nICsgcGFja2V0LnF1ZXJ5O1xuXG4gIGlmICghc2VsZi5lbmNvZGluZykge1xuICAgIC8vIGVuY29kZSwgdGhlbiB3cml0ZSB0byBlbmdpbmUgd2l0aCByZXN1bHRcbiAgICBzZWxmLmVuY29kaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCwgZnVuY3Rpb24gKGVuY29kZWRQYWNrZXRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBzZWxmLmVuY29kaW5nID0gZmFsc2U7XG4gICAgICBzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpO1xuICAgIH0pO1xuICB9IGVsc2UgeyAvLyBhZGQgcGFja2V0IHRvIHRoZSBxdWV1ZVxuICAgIHNlbGYucGFja2V0QnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBJZiBwYWNrZXQgYnVmZmVyIGlzIG5vbi1lbXB0eSwgYmVnaW5zIGVuY29kaW5nIHRoZVxuICogbmV4dCBwYWNrZXQgaW4gbGluZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGggPiAwICYmICF0aGlzLmVuY29kaW5nKSB7XG4gICAgdmFyIHBhY2sgPSB0aGlzLnBhY2tldEJ1ZmZlci5zaGlmdCgpO1xuICAgIHRoaXMucGFja2V0KHBhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG5cbiAgdmFyIHN1YnNMZW5ndGggPSB0aGlzLnN1YnMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNMZW5ndGg7IGkrKykge1xuICAgIHZhciBzdWIgPSB0aGlzLnN1YnMuc2hpZnQoKTtcbiAgICBzdWIuZGVzdHJveSgpO1xuICB9XG5cbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcblxuICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xufTtcblxuLyoqXG4gKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuY2xvc2UgPVxuTWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2Rpc2Nvbm5lY3QnKTtcbiAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgIC8vIGFuIG9wZW4gZXZlbnQgbmV2ZXIgaGFwcGVuZWRcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIGlmICh0aGlzLmVuZ2luZSkgdGhpcy5lbmdpbmUuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdvbmNsb3NlJyk7XG5cbiAgdGhpcy5jbGVhbnVwKCk7XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbik7XG5cbiAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdCkgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICBkZWJ1ZygncmVjb25uZWN0IGZhaWxlZCcpO1xuICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0X2ZhaWxlZCcpO1xuICAgIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgZGVidWcoJ3dpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdCcsIGRlbGF5KTtcblxuICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjtcblxuICAgICAgZGVidWcoJ2F0dGVtcHRpbmcgcmVjb25uZWN0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9hdHRlbXB0Jywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0aW5nJywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcblxuICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIHNlbGYub3BlbihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IGF0dGVtcHQgZXJyb3InKTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfZXJyb3InLCBlcnIuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBzdWNjZXNzJyk7XG4gICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBkZWxheSk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xuICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy51cGRhdGVTb2NrZXRJZHMoKTtcbiAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3QnLCBhdHRlbXB0KTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB4ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lIHx8IHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB4cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxuXG4gIG9wdHMueGRvbWFpbiA9IHhkO1xuICBvcHRzLnhzY2hlbWUgPSB4cztcbiAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuXG4gIGlmICgnb3BlbicgaW4geGhyICYmICFvcHRzLmZvcmNlSlNPTlApIHtcbiAgICByZXR1cm4gbmV3IFhIUihvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWpzb25wKSB0aHJvdyBuZXcgRXJyb3IoJ0pTT05QIGRpc2FibGVkJyk7XG4gICAgcmV0dXJuIG5ldyBKU09OUChvcHRzKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG5cbi8qKlxuICogSXMgWEhSMiBzdXBwb3J0ZWQ/XG4gKi9cblxudmFyIGhhc1hIUjIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7IHhkb21haW46IGZhbHNlIH0pO1xuICByZXR1cm4gbnVsbCAhPSB4aHIucmVzcG9uc2VUeXBlO1xufSkoKTtcblxuLyoqXG4gKiBQb2xsaW5nIGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUG9sbGluZyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKCFoYXNYSFIyIHx8IGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoUG9sbGluZywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gJ3BvbGxpbmcnO1xuXG4vKipcbiAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wb2xsKCk7XG59O1xuXG4vKipcbiAqIFBhdXNlcyBwb2xsaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHVwb24gYnVmZmVycyBhcmUgZmx1c2hlZCBhbmQgdHJhbnNwb3J0IGlzIHBhdXNlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAob25QYXVzZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ3BhdXNpbmcnO1xuXG4gIGZ1bmN0aW9uIHBhdXNlICgpIHtcbiAgICBkZWJ1ZygncGF1c2VkJyk7XG4gICAgc2VsZi5yZWFkeVN0YXRlID0gJ3BhdXNlZCc7XG4gICAgb25QYXVzZSgpO1xuICB9XG5cbiAgaWYgKHRoaXMucG9sbGluZyB8fCAhdGhpcy53cml0YWJsZSkge1xuICAgIHZhciB0b3RhbCA9IDA7XG5cbiAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSBwb2xsaW5nIC0gd2FpdGluZyB0byBwYXVzZScpO1xuICAgICAgdG90YWwrKztcbiAgICAgIHRoaXMub25jZSgncG9sbENvbXBsZXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHBvbGxpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZScpO1xuICAgICAgdG90YWwrKztcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdwcmUtcGF1c2Ugd3JpdGluZyBjb21wbGV0ZScpO1xuICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGF1c2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGFydHMgcG9sbGluZyBjeWNsZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdwb2xsaW5nJyk7XG4gIHRoaXMucG9sbGluZyA9IHRydWU7XG4gIHRoaXMuZG9Qb2xsKCk7XG4gIHRoaXMuZW1pdCgncG9sbCcpO1xufTtcblxuLyoqXG4gKiBPdmVybG9hZHMgb25EYXRhIHRvIGRldGVjdCBwYXlsb2Fkcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGRlYnVnKCdwb2xsaW5nIGdvdCBkYXRhICVzJywgZGF0YSk7XG4gIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChwYWNrZXQsIGluZGV4LCB0b3RhbCkge1xuICAgIC8vIGlmIGl0cyB0aGUgZmlyc3QgbWVzc2FnZSB3ZSBjb25zaWRlciB0aGUgdHJhbnNwb3J0IG9wZW5cbiAgICBpZiAoJ29wZW5pbmcnID09PSBzZWxmLnJlYWR5U3RhdGUpIHtcbiAgICAgIHNlbGYub25PcGVuKCk7XG4gICAgfVxuXG4gICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgIGlmICgnY2xvc2UnID09PSBwYWNrZXQudHlwZSkge1xuICAgICAgc2VsZi5vbkNsb3NlKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfTtcblxuICAvLyBkZWNvZGUgcGF5bG9hZFxuICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBjYWxsYmFjayk7XG5cbiAgLy8gaWYgYW4gZXZlbnQgZGlkIG5vdCB0cmlnZ2VyIGNsb3NpbmdcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZ1xuICAgIHRoaXMucG9sbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncG9sbENvbXBsZXRlJyk7XG5cbiAgICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMucG9sbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgcG9sbGluZywgc2VuZCBhIGNsb3NlIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIGNsb3NlIHBhY2tldCcpO1xuICAgIHNlbGYud3JpdGUoW3sgdHlwZTogJ2Nsb3NlJyB9XSk7XG4gIH1cblxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nJyk7XG4gICAgY2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbiBjYXNlIHdlJ3JlIHRyeWluZyB0byBjbG9zZSB3aGlsZVxuICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgZGVidWcoJ3RyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZScpO1xuICAgIHRoaXMub25jZSgnb3BlbicsIGNsb3NlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXRzIHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGF0YSBwYWNrZXRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmFpbiBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdmFyIGNhbGxiYWNrZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICB9O1xuXG4gIHBhcnNlci5lbmNvZGVQYXlsb2FkKHBhY2tldHMsIHRoaXMuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5kb1dyaXRlKGRhdGEsIGNhbGxiYWNrZm4pO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICdodHRwcycgOiAnaHR0cCc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgaWYgKGZhbHNlICE9PSB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCdodHRwcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAoJ2h0dHAnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcbiIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciB0b0FycmF5ID0gcmVxdWlyZSgndG8tYXJyYXknKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBoYXNCaW4gPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMgKGJsYWNrbGlzdGVkKS5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBldmVudHMgPSB7XG4gIGNvbm5lY3Q6IDEsXG4gIGNvbm5lY3RfZXJyb3I6IDEsXG4gIGNvbm5lY3RfdGltZW91dDogMSxcbiAgY29ubmVjdGluZzogMSxcbiAgZGlzY29ubmVjdDogMSxcbiAgZXJyb3I6IDEsXG4gIHJlY29ubmVjdDogMSxcbiAgcmVjb25uZWN0X2F0dGVtcHQ6IDEsXG4gIHJlY29ubmVjdF9mYWlsZWQ6IDEsXG4gIHJlY29ubmVjdF9lcnJvcjogMSxcbiAgcmVjb25uZWN0aW5nOiAxLFxuICBwaW5nOiAxLFxuICBwb25nOiAxXG59O1xuXG4vKipcbiAqIFNob3J0Y3V0IHRvIGBFbWl0dGVyI2VtaXRgLlxuICovXG5cbnZhciBlbWl0ID0gRW1pdHRlci5wcm90b3R5cGUuZW1pdDtcblxuLyoqXG4gKiBgU29ja2V0YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAoaW8sIG5zcCwgb3B0cykge1xuICB0aGlzLmlvID0gaW87XG4gIHRoaXMubnNwID0gbnNwO1xuICB0aGlzLmpzb24gPSB0aGlzOyAvLyBjb21wYXRcbiAgdGhpcy5pZHMgPSAwO1xuICB0aGlzLmFja3MgPSB7fTtcbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZmxhZ3MgPSB7fTtcbiAgaWYgKG9wdHMgJiYgb3B0cy5xdWVyeSkge1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB9XG4gIGlmICh0aGlzLmlvLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHJldHVybjtcblxuICB2YXIgaW8gPSB0aGlzLmlvO1xuICB0aGlzLnN1YnMgPSBbXG4gICAgb24oaW8sICdvcGVuJywgYmluZCh0aGlzLCAnb25vcGVuJykpLFxuICAgIG9uKGlvLCAncGFja2V0JywgYmluZCh0aGlzLCAnb25wYWNrZXQnKSksXG4gICAgb24oaW8sICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSlcbiAgXTtcbn07XG5cbi8qKlxuICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPVxuU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuc3ViRXZlbnRzKCk7XG4gIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7XG4gIHRoaXMuZW1pdCgnY29ubmVjdGluZycpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBgZW1pdGAuXG4gKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6ICh0aGlzLmZsYWdzLmJpbmFyeSAhPT0gdW5kZWZpbmVkID8gdGhpcy5mbGFncy5iaW5hcnkgOiBoYXNCaW4oYXJncykpID8gcGFyc2VyLkJJTkFSWV9FVkVOVCA6IHBhcnNlci5FVkVOVCxcbiAgICBkYXRhOiBhcmdzXG4gIH07XG5cbiAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSAhdGhpcy5mbGFncyB8fCBmYWxzZSAhPT0gdGhpcy5mbGFncy5jb21wcmVzcztcblxuICAvLyBldmVudCBhY2sgY2FsbGJhY2tcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICBkZWJ1ZygnZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkJywgdGhpcy5pZHMpO1xuICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO1xuICAgIHBhY2tldC5pZCA9IHRoaXMuaWRzKys7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cblxuICB0aGlzLmZsYWdzID0ge307XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gIHRoaXMuaW8ucGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmcnKTtcblxuICAvLyB3cml0ZSBjb25uZWN0IHBhY2tldCBpZiBuZWNlc3NhcnlcbiAgaWYgKCcvJyAhPT0gdGhpcy5uc3ApIHtcbiAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHRoaXMucXVlcnkgPT09ICdvYmplY3QnID8gcGFyc2Vxcy5lbmNvZGUodGhpcy5xdWVyeSkgOiB0aGlzLnF1ZXJ5O1xuICAgICAgZGVidWcoJ3NlbmRpbmcgY29ubmVjdCBwYWNrZXQgd2l0aCBxdWVyeSAlcycsIHF1ZXJ5KTtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVCwgcXVlcnk6IHF1ZXJ5fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdjbG9zZSAoJXMpJywgcmVhc29uKTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICBkZWxldGUgdGhpcy5pZDtcbiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IHBhY2tldC5uc3AgPT09IHRoaXMubnNwO1xuICB2YXIgcm9vdE5hbWVzcGFjZUVycm9yID0gcGFja2V0LnR5cGUgPT09IHBhcnNlci5FUlJPUiAmJiBwYWNrZXQubnNwID09PSAnLyc7XG5cbiAgaWYgKCFzYW1lTmFtZXNwYWNlICYmICFyb290TmFtZXNwYWNlRXJyb3IpIHJldHVybjtcblxuICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgY2FzZSBwYXJzZXIuQ09OTkVDVDpcbiAgICAgIHRoaXMub25jb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6XG4gICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBwYWNrZXQuZGF0YSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBldmVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZXZlbnQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpO1xuXG4gIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7XG4gICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChhcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICBpZiAoc2VudCkgcmV0dXJuO1xuICAgIHNlbnQgPSB0cnVlO1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgIGRlYnVnKCdzZW5kaW5nIGFjayAlaicsIGFyZ3MpO1xuXG4gICAgc2VsZi5wYWNrZXQoe1xuICAgICAgdHlwZTogaGFzQmluKGFyZ3MpID8gcGFyc2VyLkJJTkFSWV9BQ0sgOiBwYXJzZXIuQUNLLFxuICAgICAgaWQ6IGlkLFxuICAgICAgZGF0YTogYXJnc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uYWNrID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYWNrKSB7XG4gICAgZGVidWcoJ2NhbGxpbmcgYWNrICVzIHdpdGggJWonLCBwYWNrZXQuaWQsIHBhY2tldC5kYXRhKTtcbiAgICBhY2suYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygnYmFkIGFjayAlcycsIHBhY2tldC5pZCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0Jyk7XG4gIHRoaXMuZW1pdEJ1ZmZlcmVkKCk7XG59O1xuXG4vKipcbiAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0QnVmZmVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWNlaXZlQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCB0aGlzLnJlY2VpdmVCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnBhY2tldCh0aGlzLnNlbmRCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgZGlzY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NlcnZlciBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gIHRoaXMuZGVzdHJveSgpO1xuICB0aGlzLm9uY2xvc2UoJ2lvIHNlcnZlciBkaXNjb25uZWN0Jyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGZvcmNlZCBjbGllbnQvc2VydmVyIHNpZGUgZGlzY29ubmVjdGlvbnMsXG4gKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gKlxuICogQGFwaSBwcml2YXRlLlxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3Vicykge1xuICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnN1YnNbaV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnN1YnMgPSBudWxsO1xuICB9XG5cbiAgdGhpcy5pby5kZXN0cm95KHRoaXMpO1xufTtcblxuLyoqXG4gKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID1cblNvY2tldC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZGVidWcoJ3BlcmZvcm1pbmcgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICAgIHRoaXMucGFja2V0KHsgdHlwZTogcGFyc2VyLkRJU0NPTk5FQ1QgfSk7XG4gIH1cblxuICAvLyByZW1vdmUgc29ja2V0IGZyb20gcG9vbFxuICB0aGlzLmRlc3Ryb3koKTtcblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAvLyBmaXJlIGV2ZW50c1xuICAgIHRoaXMub25jbG9zZSgnaW8gY2xpZW50IGRpc2Nvbm5lY3QnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jb21wcmVzcyA9IGZ1bmN0aW9uIChjb21wcmVzcykge1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBiaW5hcnkgZmxhZ1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0aGUgZW1pdHRlZCBkYXRhIGNvbnRhaW5zIGJpbmFyeVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuYmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICB0aGlzLmZsYWdzLmJpbmFyeSA9IGJpbmFyeTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8qKlxuICogU2xpY2UgcmVmZXJlbmNlLlxuICovXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xuXG4vKipcbiAqIEJpbmQgYG9iamAgdG8gYGZuYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZm4gb3Igc3RyaW5nXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIGZuKXtcbiAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBmbikgZm4gPSBvYmpbZm5dO1xuICBpZiAoJ2Z1bmN0aW9uJyAhPSB0eXBlb2YgZm4pIHRocm93IG5ldyBFcnJvcignYmluZCgpIHJlcXVpcmVzIGEgZnVuY3Rpb24nKTtcbiAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmbi5hcHBseShvYmosIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICB9XG59O1xuIiwiaW1wb3J0IGRlZmluZSBmcm9tIFwiY29tbW9uL2RlZmluZVwiO1xuaW1wb3J0IGNvbmYgZnJvbSBcImNvbW1vbi9jb25mXCI7XG5cbmNvbnN0IHsgU1VCX0RPTUFJTlMsIERFVkVMT1BNRU5UIH0gPSBkZWZpbmU7XG5jb25zdCB7IGRvbWFpbiB9ID0gY29uZjtcbmNvbnN0IGV4aXN0TG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb24gPT09IFwib2JqZWN0XCIgPyB0cnVlIDogZmFsc2U7XG5jb25mLm1lZGlhU2Vjb25kSW50ZXJ2YWwgPSAyMDA7XG5jb25mLnNjcmVlbk1vZGUgPSB7XG4gIHNtYWxsOiA2MDAsXG4gIG1pZGRsZTogOTYwLFxufTtcbmNvbnNvbGUubG9nKGNvbmYuZW52KTtcbmNvbmYucHJvdGNvbCA9IGV4aXN0TG9jYXRpb24gPyAobG9jYXRpb24uaHJlZi5pbmRleE9mKFwiaHR0cHNcIikgPT09IDAgPyBcImh0dHBzXCIgOiBcImh0dHBcIikgOiBcIlwiO1xuY29uZi5zZXJ2ZXIgPSBkb21haW47XG5jb25mLnBvcnRhbFBhdGggPVxuICBjb25mLmVudiA9PT0gREVWRUxPUE1FTlQgPyBgLy8ke1NVQl9ET01BSU5TLlBPUlRBTH0uJHtkb21haW59L2AgOiBgLy8ke1NVQl9ET01BSU5TLlBPUlRBTH0uJHtkb21haW59L2A7XG5jb25mLmNsaWVudFBhdGggPSBgLy8ke1NVQl9ET01BSU5TLkNMSUVOVH0uJHtkb21haW59L2A7XG5jb25mLmFzc2V0c1BhdGggPSBgLy8ke1NVQl9ET01BSU5TLkFTU0VUU30uJHtkb21haW59L2A7XG5jb25mLnNlc3Npb25QYXRoID0gYC8vJHtTVUJfRE9NQUlOUy5TRVNTSU9OfS4ke2RvbWFpbn0vYDtcbmNvbmYuY2FjaGVLZXkgPSB7IGluZGV4OiBcInRhbGtuSW5kZXhMaXN0XCIsIHNldHRpbmc6IFwidGFsa25TZXR0aW5nUGFyYW1zXCIgfTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZjtcbiIsImltcG9ydCBkZWZpbmUgZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQgb3MgZnJvbSBcIm9zXCI7XG5pbXBvcnQgcHJvY2VzcyBmcm9tIFwicHJvY2Vzc1wiO1xuXG5jb25zdCB7XG4gIFBST0RVQ1RJT04sXG4gIERFVkVMT1BNRU5ULFxuICBQUk9EVUNUSU9OX0lQLFxuICBMT0NBTEhPU1QsXG4gIFBST0RVQ1RJT05fRE9NQUlOLFxuICBERVZFTE9QTUVOVF9ET01BSU4sXG4gIFNVQl9ET01BSU5TLFxuICBQT1JUUyxcbn0gPSBkZWZpbmU7XG5jb25zdCBhd3NIb3N0S2V5ID0gXCJlYzIuaW50ZXJuYWxcIjtcbmNvbnN0IGFwaVZlciA9IDE7XG5jb25zdCBob3N0TmFtZSA9IG9zLmhvc3RuYW1lKCk7XG5jb25zdCBlbnYgPSBnZXRFbnYoaG9zdE5hbWUsIGF3c0hvc3RLZXkpO1xuY29uc3QgaXNEZXYgPSBlbnYgPT09IERFVkVMT1BNRU5UO1xuY29uc3QgZG9tYWluID0gZW52ID09PSBQUk9EVUNUSU9OID8gUFJPRFVDVElPTl9ET01BSU4gOiBERVZFTE9QTUVOVF9ET01BSU47XG5jb25zdCB3d3dVUkwgPSBgJHtTVUJfRE9NQUlOUy5XV1d9LiR7ZG9tYWlufWA7XG5jb25zdCBhcGlVUkwgPSBgJHtTVUJfRE9NQUlOUy5BUEl9LiR7ZG9tYWlufWA7XG5jb25zdCBhcGlBY2Nlc3NVUkwgPSBpc0RldiA/IGAke0xPQ0FMSE9TVH06JHtQT1JUUy5ERVZFTE9QTUVOVF9BUEl9L3RhbGtuLmFwaS5qc2AgOiBgJHthcGlVUkx9L3Yke2FwaVZlcn1gO1xuY29uc3QgY2xpZW50VVJMID0gaXNEZXYgPyBgJHtMT0NBTEhPU1R9OiR7UE9SVFMuREVWRUxPUE1FTlR9L3RhbGtuLmNsaWVudC5qc2AgOiBgJHtTVUJfRE9NQUlOUy5DTElFTlR9LiR7ZG9tYWlufWA7XG5jb25zdCBkZXNjVVJMID0gYCR7U1VCX0RPTUFJTlMuREVTQ30uJHtkb21haW59YDtcbmNvbnN0IHBvcnRhbFVSTCA9IGAke1NVQl9ET01BSU5TLlBPUlRBTH0uJHtkb21haW59YDtcbmNvbnN0IGFzc2V0c1VSTCA9IGAke1NVQl9ET01BSU5TLkFTU0VUU30uJHtkb21haW59YDtcbmNvbnN0IGF1dG9VUkwgPSBgJHtTVUJfRE9NQUlOUy5BVVRPfS4ke2RvbWFpbn1gO1xuY29uc3QgZXh0VVJMID0gYCR7U1VCX0RPTUFJTlMuRVhUfS4ke2RvbWFpbn1gO1xuY29uc3QgdHJhbnNhY3Rpb25VUkwgPSBgJHtTVUJfRE9NQUlOUy5UUkFOU0FDVElPTn0uJHtkb21haW59YDtcbmNvbnN0IGFzc2V0c0ltZ1BhdGggPSBgJHthc3NldHNVUkx9L2ltZy9gO1xuY29uc3QgYXNzZXRzSWNvblBhdGggPSBgJHthc3NldHNVUkx9L2ljb24vYDtcbmNvbnN0IGFzc2V0c0pzUGF0aCA9IGAke2Fzc2V0c1VSTH0vanMvYDtcbmNvbnN0IHNlc3Npb25VUkwgPSBgJHtTVUJfRE9NQUlOUy5TRVNTSU9OfS4ke2RvbWFpbn1gO1xuY29uc3QgZGVzY3JpcHRpb24gPSBcInRhbGtuIGNhbiBzaGFyZSBjb21tZW50cyB3aXRoIHVzZXJzIHdhdGNoaW5nIHRoZSBzYW1lIFdFQiBwYWdlLiBQbGVhc2UgZW5qb3kgdGhlIHdvcmxkIG9mIHRhbGtuLlwiO1xuXG5jb25zdCBmaW5kT25lUG9zdENudCA9IDMwO1xuY29uc3QgZmluZE9uZUxpbWl0Q250ID0gMzAwO1xuY29uc3Qgb2dwSW1hZ2VzID0ge1xuICBIdG1sOiBgLy8ke2Fzc2V0c0ltZ1BhdGh9dGFsa25fbG9nb19odG1sLnBuZ2AsXG4gIE11c2ljOiBgLy8ke2Fzc2V0c0ltZ1BhdGh9dGFsa25fbG9nb19tdXNpYy5wbmdgLFxuICBWaWRlbzogYC8vJHthc3NldHNJbWdQYXRofXRhbGtuX2xvZ29fdmlkZW8ucG5nYCxcbn07XG5cbmNvbnN0IGNvbmY6IGFueSA9IHtcbiAgZG9tYWluLFxuICBlbnYsXG4gIGhvc3ROYW1lLFxuICBhcGlVUkwsXG4gIGFwaUFjY2Vzc1VSTCxcbiAgd3d3VVJMLFxuICBkZXNjVVJMLFxuICBwb3J0YWxVUkwsXG4gIGNsaWVudFVSTCxcbiAgYXNzZXRzVVJMLFxuICBhdXRvVVJMLFxuICBleHRVUkwsXG4gIHRyYW5zYWN0aW9uVVJMLFxuICBhc3NldHNJbWdQYXRoLFxuICBhc3NldHNJY29uUGF0aCxcbiAgYXNzZXRzSnNQYXRoLFxuICBzZXNzaW9uVVJMLFxuICBkZXNjcmlwdGlvbixcbiAgYXBpVmVyLFxuICBmaW5kT25lUG9zdENudCxcbiAgZmluZE9uZUxpbWl0Q250LFxuICBvZ3BJbWFnZXMsXG59O1xuZXhwb3J0IGRlZmF1bHQgeyAuLi5jb25mIH07XG5cbmZ1bmN0aW9uIGdldEVudihob3N0TmFtZSwgYXdzSG9zdEtleSkge1xuICBpZiAoaG9zdE5hbWUuaW5kZXhPZihhd3NIb3N0S2V5KSA+PSAwKSB7XG4gICAgcmV0dXJuIGRlZmluZS5QUk9EVUNUSU9OO1xuICB9XG4gIGlmIChob3N0TmFtZSA9PT0gZGVmaW5lLkRFVkVMT1BNRU5UX0RPTUFJTikge1xuICAgIGlmIChwcm9jZXNzLnRpdGxlID09PSBcImJyb3dzZXJcIikge1xuICAgICAgY29uc3QgcG9ydCA9IE51bWJlcihsb2NhdGlvbi5wb3J0KTtcbiAgICAgIGlmIChwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlQgfHwgcG9ydCA9PT0gZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0FQSSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lLkRFVkVMT1BNRU5UO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmaW5lLkxPQ0FMSE9TVDtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdEZpbmRJZCgpIHtcbiAgICByZXR1cm4gXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7fSk7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmltcG9ydCBQb3N0IGZyb20gXCJhcGkvc3RvcmUvUG9zdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyIGV4dGVuZHMgU2NoZW1hIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T2Zmc2V0RmluZElkKCkge1xuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCB1aWQgPSBwYXJhbXMgJiYgcGFyYW1zLnVpZCA/IHBhcmFtcy51aWQgOiBcIlwiO1xuICAgIGNvbnN0IHV0eXBlID0gcGFyYW1zICYmIHBhcmFtcy51dHlwZSA/IHBhcmFtcy51dHlwZSA6IFwiXCI7XG5cbiAgICAvLyDliYrpmaTkuojlrppcbiAgICBjb25zdCB0dW5lZCA9IHBhcmFtcyAmJiBwYXJhbXMudHVuZWQgPyBwYXJhbXMudHVuZWQgOiBcIlwiO1xuICAgIGNvbnN0IG11bHRpc3RyZWFtZWQgPSBwYXJhbXMgJiYgcGFyYW1zLm11bHRpc3RyZWFtZWQgPyBwYXJhbXMubXVsdGlzdHJlYW1lZCA6IGZhbHNlO1xuICAgIGNvbnN0IGFjdGlvbmVkID0gcGFyYW1zICYmIHBhcmFtcy5hY3Rpb25lZCA/IHBhcmFtcy5hY3Rpb25lZCA6IFwiXCI7XG4gICAgY29uc3Qgb2Zmc2V0RmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0RmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldFNpbmdsZUZpbmRJZCA9XG4gICAgICBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRTaW5nbGVGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0TXVsdGlGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldE11bHRpRmluZElkID8gcGFyYW1zLm9mZnNldE11bHRpRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldENoaWxkRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRDaGlsZEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRDaGlsZEZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRMb2dzRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRMb2dzRmluZElkID8gcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG5cbiAgICBjb25zdCByZXF1ZXN0TG9naW5UeXBlID0gcGFyYW1zLnJlcXVlc3RMb2dpblR5cGUgPyBwYXJhbXMucmVxdWVzdExvZ2luVHlwZSA6IFwiXCI7XG4gICAgY29uc3QgZnJpZW5kcyA9IFtdO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICB1aWQsXG4gICAgICB1dHlwZSxcbiAgICAgIHR1bmVkLFxuICAgICAgbXVsdGlzdHJlYW1lZCxcbiAgICAgIGFjdGlvbmVkLFxuICAgICAgb2Zmc2V0RmluZElkLFxuICAgICAgb2Zmc2V0U2luZ2xlRmluZElkLFxuICAgICAgb2Zmc2V0TXVsdGlGaW5kSWQsXG4gICAgICBvZmZzZXRDaGlsZEZpbmRJZCxcbiAgICAgIG9mZnNldExvZ3NGaW5kSWQsXG4gICAgICBmcmllbmRzXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHMgfSkge1xuICAgIGlmIChwb3N0cyAmJiBwb3N0c1swXSAmJiBwb3N0c1swXS5faWQpIHtcbiAgICAgIHJldHVybiBwb3N0c1swXS5faWQ7XG4gICAgfVxuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0SHJlZihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuaHJlZikge1xuICAgICAgcmV0dXJuIHBhcmFtcy5ocmVmO1xuICAgIH1cbiAgICByZXR1cm4gXCIvXCI7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RTaW5nbGUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5hbHl6ZSBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHdhdGNoQ250ID0gMDtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoeyB3YXRjaENudCB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb290T3B0aW9uIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IoYm9vdE9wdGlvbjogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7IC4uLmJvb3RPcHRpb24gfSk7XG4gIH1cblxuICBzdGF0aWMgcmVidWlsZEF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIGxldCByZWJ1aWxkQXR0cmlidXRlc09iajogYW55ID0ge307XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChpID0+IHtcbiAgICAgIHJlYnVpbGRBdHRyaWJ1dGVzT2JqW2F0dHJpYnV0ZXNbaV0ubmFtZV0gPSBhdHRyaWJ1dGVzW2ldLnZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZWJ1aWxkQXR0cmlidXRlc09iajtcbiAgfVxufVxuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWFkcyBleHRlbmRzIFNjaGVtYSB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHBhcmFtcyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVyZ2VkVGhyZWFkcyhiYXNlVGhyZWFkcywgbWVyZ2VUaHJlYWQpIHtcbiAgICBiYXNlVGhyZWFkc1ttZXJnZVRocmVhZC5jaF0gPSB7IC4uLm1lcmdlVGhyZWFkIH07XG4gICAgcmV0dXJuIGJhc2VUaHJlYWRzO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IGlvIGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5pbXBvcnQgY29uZiBmcm9tIFwiY2xpZW50L2NvbmZcIjtcbmltcG9ydCBkZWZpbmUgZnJvbSBcImNvbW1vbi9kZWZpbmVcIjtcbmltcG9ydCBQb3N0TWVzc2FnZSBmcm9tIFwiY29tbW9uL1Bvc3RNZXNzYWdlXCI7XG5pbXBvcnQgQXBpU3RhdGUgZnJvbSBcImFwaS9zdG9yZS9cIjtcbmltcG9ydCBTZXF1ZW5jZSBmcm9tIFwiYXBpL1NlcXVlbmNlXCI7XG5pbXBvcnQgUHVibGljQXBpIGZyb20gXCJhcGkvcHVibGljLmFwaVwiO1xuaW1wb3J0IGFwaVN0b3JlIGZyb20gXCJhcGkvc3RvcmUvYXBpU3RvcmVcIjtcbmltcG9ydCBoYW5kbGVBY3Rpb25zIGZyb20gXCJjbGllbnQvYWN0aW9ucy9oYW5kbGVzXCI7XG5pbXBvcnQgV3NTZXJ2ZXJUb0FwaUVtaXRBY3Rpb24gZnJvbSBcImFwaS9hY3Rpb25zL3dzL3NlcnZlclRvQXBpRW1pdFwiO1xuaW1wb3J0IFdzQ2xpZW50VG9BcGlSZXF1ZXN0QWN0aW9ucyBmcm9tIFwiYXBpL2FjdGlvbnMvd3MvYXBpVG9TZXJ2ZXJSZXF1ZXN0XCI7XG5pbXBvcnQgV3NTZXJ2ZXJUb0FwaUJyb2FkY2FzdEFjdGlvbiBmcm9tIFwiYXBpL2FjdGlvbnMvd3Mvc2VydmVyVG9BcGlCcmFkY2FzdFwiO1xuaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuaW1wb3J0IENsaWVudFV0aWwgZnJvbSBcImNsaWVudC9jb250YWluZXIvdXRpbC9jbGllbnRVdGlsXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZSBmcm9tIFwiLi9zdG9yZS9Qb3N0c1RpbWVsaW5lXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gXCIuL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9ja1wiO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgICR0OiBhbnk7XG4gICAgdGFsa25BUEk6IGFueTtcbiAgICB0YWxrbldpbmRvdzogYW55O1xuICAgIHRhbGtuTWVkaWE6IGFueTtcbiAgICBZb3V0dWJlOiBhbnk7XG4gICAgX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fOiBhbnk7XG4gIH1cbn1cblxudHlwZSBFbnZUeXBlID0gdHlwZW9mIGRlZmluZS5ERVZFTE9QTUVOVCB8IHR5cGVvZiBkZWZpbmUuTE9DQUxIT1NUIHwgdHlwZW9mIGRlZmluZS5QUk9EVUNUSU9OO1xudHlwZSBCb290VHlwZSA9IHR5cGVvZiBkZWZpbmUuQVBQX1RZUEVTLkFQSSB8IHR5cGVvZiBkZWZpbmUuQVBQX1RZUEVTLlBPUlRBTCB8IHR5cGVvZiBkZWZpbmUuQVBQX1RZUEVTLkVYVEVOU0lPTjtcbnR5cGUgQm9vdFByb3RvY29sVHlwZSA9IHR5cGVvZiBTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTCB8IHR5cGVvZiBTZXF1ZW5jZS5IVFRQX1BST1RPQ09MIHwgdHlwZW9mIFNlcXVlbmNlLlRBTEtOX1BST1RPQ09MO1xudHlwZSBCb290T3B0aW9uVHlwZSA9IHtcbiAgZW52OiBFbnZUeXBlO1xuICB0eXBlOiBCb290VHlwZTtcbiAgY2g6IHN0cmluZztcbiAgaGFzU2xhc2g6IGJvb2xlYW47XG4gIHByb3RvY29sOiBCb290UHJvdG9jb2xUeXBlO1xuICBob3N0OiBzdHJpbmc7XG59O1xuXG5jbGFzcyBCb290T3B0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gUmVzb2x2ZWQgZGVmaW5lIHNjcmlwdHMuXG4gICAgY29uc3QgeyBlbnYsIGFwaVNjcmlwdCB9ID0gQm9vdE9wdGlvbi5nZXRFbnZBbmRBcGlTY3JpcHQoKTtcbiAgICBjb25zdCBleHRTY3JpcHQgPSBCb290T3B0aW9uLmdldEV4dFNjcmlwdChlbnYpO1xuICAgIGNvbnN0IGNsaWVudFNjcmlwdCA9IEJvb3RPcHRpb24uZ2V0Q2xpZW50U2NyaXB0KGVudik7XG5cbiAgICAvLyBSZXNvbHZlZCBkZWZpbmUgc2NyaXB0IGF0dHJpYnV0ZXMuXG4gICAgY29uc3QgYXBpU2NyaXB0QXR0ID0gYXBpU2NyaXB0ID8gQm9vdE9wdGlvbi5yZWJ1aWxkQXR0cmlidXRlcyhhcGlTY3JpcHQuYXR0cmlidXRlcykgOiB7fTtcbiAgICBjb25zdCBleHRTY3JpcHRBdHQgPSBleHRTY3JpcHQgPyBCb290T3B0aW9uLnJlYnVpbGRBdHRyaWJ1dGVzKGV4dFNjcmlwdC5hdHRyaWJ1dGVzKSA6IHt9O1xuICAgIGNvbnN0IGNsaWVudFNjcmlwdEF0dCA9IGNsaWVudFNjcmlwdCA/IEJvb3RPcHRpb24ucmVidWlsZEF0dHJpYnV0ZXMoY2xpZW50U2NyaXB0LmF0dHJpYnV0ZXMpIDoge307XG5cbiAgICAvLyBSZXNvbHZlZCBib290IG9wdGlvbi5cbiAgICBjb25zdCBib290QXR0cmlidXRlcyA9IEJvb3RPcHRpb24uZ2V0Qm9vdEF0dHJpYnV0ZXMoYXBpU2NyaXB0QXR0LCBleHRTY3JpcHRBdHQpO1xuICAgIGNvbnN0IGJvb3RPcHRpb246IEJvb3RPcHRpb25UeXBlID0gQm9vdE9wdGlvbi5pbml0aWFsQm9vdE9wdGlvbihlbnYsIGJvb3RBdHRyaWJ1dGVzLCBjbGllbnRTY3JpcHQsIGV4dFNjcmlwdCk7XG4gICAgcmV0dXJuIGJvb3RPcHRpb247XG4gIH1cblxuICBzdGF0aWMgZ2V0RW52QW5kQXBpU2NyaXB0KCkge1xuICAgIGNvbnN0IHsgU1VCX0RPTUFJTlMsIFBPUlRTLCB0YWxrbkFwaUpzIH0gPSBkZWZpbmU7XG5cbiAgICAvLyBQcm9kLlxuICAgIGNvbnN0IHByb2RBcGlTcmMxID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke1NVQl9ET01BSU5TLkFQSX0uJHtkZWZpbmUuUFJPRFVDVElPTl9ET01BSU59L3Yke2NvbmYuYXBpVmVyfWA7XG4gICAgY29uc3QgcHJvZEFwaVNjcmlwdDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjPScke3Byb2RBcGlTcmMxfSddYCk7XG4gICAgaWYgKHByb2RBcGlTY3JpcHQxKSByZXR1cm4geyBlbnY6IGRlZmluZS5QUk9EVUNUSU9OLCBhcGlTY3JpcHQ6IHByb2RBcGlTY3JpcHQxIH07XG5cbiAgICBjb25zdCBwcm9kQXBpU3JjMiA9IGAvLyR7U1VCX0RPTUFJTlMuQVBJfS4ke2RlZmluZS5QUk9EVUNUSU9OX0RPTUFJTn0vdiR7Y29uZi5hcGlWZXJ9YDtcbiAgICBjb25zdCBwcm9kQXBpU2NyaXB0MiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtzcmM9JyR7cHJvZEFwaVNyYzJ9J11gKTtcbiAgICBpZiAocHJvZEFwaVNjcmlwdDIpIHJldHVybiB7IGVudjogZGVmaW5lLlBST0RVQ1RJT04sIGFwaVNjcmlwdDogcHJvZEFwaVNjcmlwdDIgfTtcblxuICAgIC8vIExvY2FsaG9zdC5cbiAgICBjb25zdCBsb2NhbEFwaVNyYzEgPSBgJHtTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTH0vLyR7U1VCX0RPTUFJTlMuQVBJfS4ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59L3Yke2NvbmYuYXBpVmVyfWA7XG4gICAgY29uc3QgbG9jYWxBcGlTY3JpcHQxID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz0nJHtsb2NhbEFwaVNyYzF9J11gKTtcbiAgICBpZiAobG9jYWxBcGlTY3JpcHQxKSByZXR1cm4geyBlbnY6IGRlZmluZS5MT0NBTEhPU1QsIGFwaVNjcmlwdDogbG9jYWxBcGlTY3JpcHQxIH07XG5cbiAgICBjb25zdCBsb2NhbEFwaVNyYzIgPSBgLy8ke1NVQl9ET01BSU5TLkFQSX0uJHtkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOfS92JHtjb25mLmFwaVZlcn1gO1xuICAgIGNvbnN0IGxvY2FsQXBpU2NyaXB0MiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtzcmM9JyR7bG9jYWxBcGlTcmMyfSddYCk7XG4gICAgaWYgKGxvY2FsQXBpU2NyaXB0MikgcmV0dXJuIHsgZW52OiBkZWZpbmUuTE9DQUxIT1NULCBhcGlTY3JpcHQ6IGxvY2FsQXBpU2NyaXB0MiB9O1xuXG4gICAgLy8gRGV2ZWxvcG1lbnQod2VicGFjayBkZXYgc2VydmVyKSxcbiAgICBjb25zdCBkZXZBcGlTcmMxID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59OiR7UE9SVFMuREVWRUxPUE1FTlRfQVBJfS8ke3RhbGtuQXBpSnN9YDtcbiAgICBjb25zdCBkZXZBcGlTY3JpcHQxID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz0nJHtkZXZBcGlTcmMxfSddYCk7XG4gICAgaWYgKGRldkFwaVNjcmlwdDEpIHJldHVybiB7IGVudjogZGVmaW5lLkRFVkVMT1BNRU5ULCBhcGlTY3JpcHQ6IGRldkFwaVNjcmlwdDEgfTtcblxuICAgIGNvbnN0IGRldkFwaVNyYzIgPSBgLy8ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59OiR7UE9SVFMuREVWRUxPUE1FTlRfQVBJfS8ke3RhbGtuQXBpSnN9YDtcbiAgICBjb25zdCBkZXZBcGlTY3JpcHQyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz0nJHtkZXZBcGlTcmMyfSddYCk7XG4gICAgaWYgKGRldkFwaVNjcmlwdDIpIHJldHVybiB7IGVudjogZGVmaW5lLkRFVkVMT1BNRU5ULCBhcGlTY3JpcHQ6IGRldkFwaVNjcmlwdDIgfTtcbiAgICB0aHJvdyBcIk5PIEVYSVNUIEFQSSBTQ1JJUFQuXCI7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2xpZW50U2NyaXB0KGVudjogRW52VHlwZSk6IEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHsgU1VCX0RPTUFJTlMsIFBPUlRTLCB0YWxrbkNsaWVudEpzIH0gPSBkZWZpbmU7XG4gICAgbGV0IGNsaWVudFNyYzogc3RyaW5nO1xuICAgIHN3aXRjaCAoZW52KSB7XG4gICAgICBjYXNlIGRlZmluZS5QUk9EVUNUSU9OOlxuICAgICAgICBjbGllbnRTcmMgPSBgJHtTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTH0vLyR7U1VCX0RPTUFJTlMuQ0xJRU5UfS4ke2RlZmluZS5QUk9EVUNUSU9OX0RPTUFJTn1gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGVmaW5lLkxPQ0FMSE9TVDpcbiAgICAgICAgY2xpZW50U3JjID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke1NVQl9ET01BSU5TLkNMSUVOVH0uJHtkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOfWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkZWZpbmUuREVWRUxPUE1FTlQ6XG4gICAgICAgIGNsaWVudFNyYyA9IGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS8vJHtkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOfToke1BPUlRTLkRFVkVMT1BNRU5UfS8ke3RhbGtuQ2xpZW50SnN9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGNsaWVudFNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtzcmM9JyR7Y2xpZW50U3JjfSddYCk7XG4gICAgcmV0dXJuIGNsaWVudFNjcmlwdCA/IGNsaWVudFNjcmlwdCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRFeHRTY3JpcHQoZW52OiBFbnZUeXBlKTogRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgeyBTVUJfRE9NQUlOUyB9ID0gZGVmaW5lO1xuXG4gICAgc3dpdGNoIChlbnYpIHtcbiAgICAgIGNhc2UgZGVmaW5lLlBST0RVQ1RJT046XG4gICAgICAgIGNvbnN0IHByb2RFeHRTcmMxID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke1NVQl9ET01BSU5TLkVYVH0uJHtkZWZpbmUuUFJPRFVDVElPTl9ET01BSU59YDtcbiAgICAgICAgY29uc3QgcHJvZEV4dFNjcmlwdDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjPScke3Byb2RFeHRTcmMxfSddYCk7XG4gICAgICAgIGlmIChwcm9kRXh0U2NyaXB0MSkgcmV0dXJuIHByb2RFeHRTY3JpcHQxO1xuXG4gICAgICAgIGNvbnN0IHByb2RFeHRTcmMyID0gYC8vJHtTVUJfRE9NQUlOUy5FWFR9LiR7ZGVmaW5lLlBST0RVQ1RJT05fRE9NQUlOfWA7XG4gICAgICAgIGNvbnN0IHByb2RFeHRTY3JpcHQyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz0nJHtwcm9kRXh0U3JjMn0nXWApO1xuICAgICAgICBpZiAocHJvZEV4dFNjcmlwdDIpIHJldHVybiBwcm9kRXh0U2NyaXB0MjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRlZmluZS5MT0NBTEhPU1Q6XG4gICAgICBjYXNlIGRlZmluZS5ERVZFTE9QTUVOVDpcbiAgICAgICAgY29uc3QgZGV2RXh0U3JjMSA9IGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfTovLyR7U1VCX0RPTUFJTlMuRVhUfS4ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59YDtcbiAgICAgICAgY29uc3QgZGV2RXh0U2NyaXB0MSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtzcmM9JyR7ZGV2RXh0U3JjMX0nXWApO1xuICAgICAgICBpZiAoZGV2RXh0U2NyaXB0MSkgcmV0dXJuIGRldkV4dFNjcmlwdDE7XG5cbiAgICAgICAgY29uc3QgZGV2RXh0U3JjMiA9IGAvLyR7U1VCX0RPTUFJTlMuRVhUfS4ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59YDtcbiAgICAgICAgY29uc3QgZGV2RXh0U2NyaXB0MiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtzcmM9JyR7ZGV2RXh0U3JjMn0nXWApO1xuICAgICAgICBpZiAoZGV2RXh0U2NyaXB0MikgcmV0dXJuIGRldkV4dFNjcmlwdDI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBzdGF0aWMgcmVidWlsZEF0dHJpYnV0ZXMoYXR0cmlidXRlczogYW55KSB7XG4gICAgbGV0IHJlYnVpbGRBdHRyaWJ1dGVzT2JqOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICByZWJ1aWxkQXR0cmlidXRlc09ialthdHRyaWJ1dGVzW2ldLm5hbWVdID0gYXR0cmlidXRlc1tpXS52YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVidWlsZEF0dHJpYnV0ZXNPYmo7XG4gIH1cblxuICBzdGF0aWMgZ2V0Qm9vdEF0dHJpYnV0ZXMoYXBpU2NyaXB0QXR0OiBhbnksIGV4dFNjcmlwdEF0dDogYW55KSB7XG4gICAgcmV0dXJuIGV4dFNjcmlwdEF0dCA/IHsgLi4uYXBpU2NyaXB0QXR0LCAuLi5leHRTY3JpcHRBdHQgfSA6IHsgLi4uYXBpU2NyaXB0QXR0IH07XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5pdGlhbFJvb3RDaChlbnY6IEVudlR5cGUsIGJvb3RBdHRyaWJ1dGVzKTogc3RyaW5nIHtcbiAgICBsZXQgaW5pdGlhbFJvb3RDaDogc3RyaW5nID0gYm9vdEF0dHJpYnV0ZXMgJiYgYm9vdEF0dHJpYnV0ZXMuY2ggPyBib290QXR0cmlidXRlcy5jaCA6IGxvY2F0aW9uLmhyZWY7XG4gICAgaW5pdGlhbFJvb3RDaCA9IGluaXRpYWxSb290Q2gucmVwbGFjZShgJHtTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTH0vYCwgXCJcIikucmVwbGFjZShgJHtTZXF1ZW5jZS5IVFRQX1BST1RPQ09MfS9gLCBcIlwiKTtcbiAgICBzd2l0Y2ggKGVudikge1xuICAgICAgY2FzZSBkZWZpbmUuUFJPRFVDVElPTjpcbiAgICAgICAgaW5pdGlhbFJvb3RDaCA9IGluaXRpYWxSb290Q2ggPT09IGAvJHtkZWZpbmUuUFJPRFVDVElPTl9ET01BSU59L2AgPyBcIi9cIiA6IGluaXRpYWxSb290Q2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkZWZpbmUuTE9DQUxIT1NUOlxuICAgICAgICBpbml0aWFsUm9vdENoID0gaW5pdGlhbFJvb3RDaCA9PT0gYC8ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59L2AgPyBcIi9cIiA6IGluaXRpYWxSb290Q2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBkZWZpbmUuREVWRUxPUE1FTlQ6XG4gICAgICAgIGluaXRpYWxSb290Q2ggPSBpbml0aWFsUm9vdENoXG4gICAgICAgICAgLnJlcGxhY2UoYCR7ZGVmaW5lLkRFVkVMT1BNRU5UX0RPTUFJTn1gLCBcIlwiKVxuICAgICAgICAgIC5yZXBsYWNlKGA6JHtkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlR9YCwgXCJcIilcbiAgICAgICAgICAucmVwbGFjZShgOiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0FQSX1gLCBcIlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBpbml0aWFsUm9vdENoO1xuICB9XG5cbiAgc3RhdGljIGdldFR5cGUoZXh0U2NyaXB0LCBjbGllbnRTY3JpcHQpOiBCb290VHlwZSB7XG4gICAgbGV0IHR5cGUgPSBkZWZpbmUuQVBQX1RZUEVTLkFQSTtcbiAgICBpZiAoZXh0U2NyaXB0KSByZXR1cm4gZGVmaW5lLkFQUF9UWVBFUy5FWFRFTlNJT047XG4gICAgaWYgKGNsaWVudFNjcmlwdCkgcmV0dXJuIGRlZmluZS5BUFBfVFlQRVMuUE9SVEFMO1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3RhdGljIGdldFByb3RvY29sKCk6IEJvb3RQcm90b2NvbFR5cGUge1xuICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCA9PT0gU2VxdWVuY2UuSFRUUFNfUFJPVE9DT0wpIHJldHVybiBTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTDtcbiAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wgPT09IFNlcXVlbmNlLkhUVFBfUFJPVE9DT0wpIHJldHVybiBTZXF1ZW5jZS5IVFRQX1BST1RPQ09MO1xuICAgIHJldHVybiBTZXF1ZW5jZS5UQUxLTl9QUk9UT0NPTDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGaXJzdEhhc1NsYWNoKGNoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNoLmluZGV4T2YoXCIvXCIpID09PSAwO1xuICB9XG5cbiAgc3RhdGljIGdldExhc3RIYXNTbGFjaChjaCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjaC5sYXN0SW5kZXhPZihcIi9cIikgPT09IGNoLmxlbmd0aCAtIDE7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2goaW5pdGlhbFJvb3RDaCwgZmlyc3RIYXNTbGFzaCwgbGFzdEhhc1NsYXNoKTogc3RyaW5nIHtcbiAgICBsZXQgY2ggPSBpbml0aWFsUm9vdENoO1xuICAgIGNoID0gZmlyc3RIYXNTbGFzaCA/IGNoIDogYC8ke2NofWA7XG4gICAgY2ggPSBsYXN0SGFzU2xhc2ggPyBjaCA6IGAke2NofS9gO1xuICAgIGNoID0gY2ggPT09IFwiLy9cIiA/IFwiL1wiIDogY2g7XG4gICAgcmV0dXJuIGNoO1xuICB9XG5cbiAgc3RhdGljIGluaXRpYWxCb290T3B0aW9uKFxuICAgIGVudjogRW52VHlwZSxcbiAgICBib290QXR0cmlidXRlczogYW55LFxuICAgIGNsaWVudFNjcmlwdDogRWxlbWVudCxcbiAgICBleHRTY3JpcHQ6IEVsZW1lbnRcbiAgKTogQm9vdE9wdGlvblR5cGUge1xuICAgIGNvbnN0IHR5cGUgPSBCb290T3B0aW9uLmdldFR5cGUoZXh0U2NyaXB0LCBjbGllbnRTY3JpcHQpO1xuICAgIGNvbnN0IGluaXRpYWxSb290Q2ggPSBCb290T3B0aW9uLmdldEluaXRpYWxSb290Q2goZW52LCBib290QXR0cmlidXRlcyk7XG4gICAgY29uc3QgZmlyc3RIYXNTbGFzaCA9IEJvb3RPcHRpb24uZ2V0Rmlyc3RIYXNTbGFjaChpbml0aWFsUm9vdENoKTtcbiAgICBjb25zdCBsYXN0SGFzU2xhc2ggPSBCb290T3B0aW9uLmdldExhc3RIYXNTbGFjaChpbml0aWFsUm9vdENoKTtcbiAgICBjb25zdCBjaCA9IEJvb3RPcHRpb24uZ2V0Q2goaW5pdGlhbFJvb3RDaCwgZmlyc3RIYXNTbGFzaCwgbGFzdEhhc1NsYXNoKTtcbiAgICBjb25zdCBwcm90b2NvbCA9IEJvb3RPcHRpb24uZ2V0UHJvdG9jb2woKTtcbiAgICBjb25zdCBob3N0ID0gbG9jYXRpb24uaG9zdDtcbiAgICByZXR1cm4ge1xuICAgICAgZW52LFxuICAgICAgdHlwZSxcbiAgICAgIGNoLFxuICAgICAgaGFzU2xhc2g6IGxhc3RIYXNTbGFzaCxcbiAgICAgIHByb3RvY29sLFxuICAgICAgaG9zdCxcbiAgICB9O1xuICB9XG59XG5cbmNsYXNzIENvcmVBUEkge1xuICB3czogYW55O1xuICBhcGlTdG9yZTogYW55O1xuICBzdGF0ZTogYW55O1xuICBjaDogc3RyaW5nO1xuICBjYWxsYmFja3M6IHsga2V5OiBGdW5jdGlvbiB9IHwge30gPSB7fTtcbiAgY29uc3RydWN0b3IoZW52LCBhcGlTdG9yZSwgcmVzb2x2ZSkge1xuICAgIGNvbnN0IHdzU2VydmVyID1cbiAgICAgIGVudiA9PT0gZGVmaW5lLkRFVkVMT1BNRU5UIHx8IGVudiA9PT0gZGVmaW5lLkxPQ0FMSE9TVCA/IGRlZmluZS5ERVZFTE9QTUVOVF9ET01BSU4gOiBkZWZpbmUuUFJPRFVDVElPTl9ET01BSU47XG4gICAgdGhpcy5hcGlTdG9yZSA9IGFwaVN0b3JlO1xuICAgIHRoaXMud3MgPSBpbyhgJHtTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTH0vLyR7d3NTZXJ2ZXJ9OiR7ZGVmaW5lLlBPUlRTLlNPQ0tFVF9JT31gLCB7IGZvcmNlTmV3OiB0cnVlIH0pO1xuICAgIHRoaXMub25SZXNwb25zZU1lQVBJKHJlc29sdmUpO1xuICAgIHRoaXMuc2V0VXAgPSB0aGlzLnNldFVwLmJpbmQodGhpcyk7XG4gIH1cblxuICBzZXRVcChzdGF0ZSwgY2gpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy5jaCA9IGNoO1xuXG4gICAgLy8gQ09NTVVOVUNBVElPTiBBUEnigJlzXG4gICAgdGhpcy5vblJlc3BvbnNlQ2hBUEkoKTtcbiAgICB0aGlzLm9uUmVxdWVzdEFQSSgpO1xuICB9XG5cbiAgb25SZXF1ZXN0QVBJKCkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBXc0NsaWVudFRvQXBpUmVxdWVzdEFjdGlvbnM7XG4gICAgY29uc3QgYWN0aW9uS2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbnMpO1xuICAgIGNvbnN0IGFjdGlvbkxlbmd0aCA9IGFjdGlvbktleXMubGVuZ3RoO1xuICAgIGNvbnN0IGdldENvcmVBUEkgPSAoYWN0aW9uTmFtZSwgYmVmb3JlRnVuY3Rpb24pID0+IHtcbiAgICAgIHJldHVybiAocmVxdWVzdFBhcmFtcywgY2FsbGJhY2sgPSAoKSA9PiB7fSkgPT4ge1xuICAgICAgICBjb25zdCByZWR1eFN0YXRlID0gdGhpcy5hcGlTdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBfcmVxdWVzdFN0YXRlID0gU2VxdWVuY2UuZ2V0UmVxdWVzdFN0YXRlKGFjdGlvbk5hbWUsIHJlZHV4U3RhdGUsIHJlcXVlc3RQYXJhbXMpO1xuICAgICAgICBjb25zdCBfYWN0aW9uU3RhdGUgPSBTZXF1ZW5jZS5nZXRSZXF1ZXN0QWN0aW9uU3RhdGUoYWN0aW9uTmFtZSwgcmVxdWVzdFBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHsgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSB9ID0gYmVmb3JlRnVuY3Rpb24ocmVkdXhTdGF0ZSwgX3JlcXVlc3RTdGF0ZSwgX2FjdGlvblN0YXRlKTtcblxuICAgICAgICB0aGlzLmNhbGxiYWNrc1tyZXF1ZXN0U3RhdGUudHlwZV0gPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy53cy5lbWl0KHJlcXVlc3RTdGF0ZS50eXBlLCByZXF1ZXN0U3RhdGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTdG9yZS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBmb3IgKGxldCBhY3Rpb25Ob2RlQ250ID0gMDsgYWN0aW9uTm9kZUNudCA8IGFjdGlvbkxlbmd0aDsgYWN0aW9uTm9kZUNudCsrKSB7XG4gICAgICBjb25zdCBhY3Rpb25OYW1lID0gYWN0aW9uS2V5c1thY3Rpb25Ob2RlQ250XTtcbiAgICAgIGNvbnN0IGFjdGlvblBsYWluTmFtZSA9IGFjdGlvbk5hbWUucmVwbGFjZShTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QsIFwiXCIpO1xuICAgICAgY29uc3QgYmVmb3JlRnVuY3Rpb24gPSBhY3Rpb25zW2FjdGlvbk5hbWVdO1xuICAgICAgdGhpc1thY3Rpb25QbGFpbk5hbWVdID0gZ2V0Q29yZUFQSShhY3Rpb25OYW1lLCBiZWZvcmVGdW5jdGlvbik7XG4gICAgfVxuICB9XG5cbiAgb25SZXNwb25zZU1lQVBJKHJlc29sdmU6IFByb21pc2U8Ym9vbGVhbj4gfCBudWxsID0gbnVsbCkge1xuICAgIGNvbnN0IGdldFRvTWVBUEkgPSAoYWN0aW9uLCByZXNvbHZlID0gbnVsbCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICByZXR1cm4gKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNvbHZlICYmIHJlc3BvbnNlLnR5cGUgPT09IFNlcXVlbmNlLkNPTk5FQ1RJT05fU0VSVkVSX0tFWSkge1xuICAgICAgICAgIHJlc29sdmUoc2VsZik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aW9uU3RhdGUgPSBhY3Rpb24ocmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTdG9yZS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2FsbGJhY2s6IGFueSA9IGdldFRvTWVBUEkoV3NTZXJ2ZXJUb0FwaUVtaXRBY3Rpb24sIHJlc29sdmUpO1xuICAgIHRoaXMub24oU2VxdWVuY2UuQ0FUQ0hfTUVfS0VZLCBjYWxsYmFjayk7XG4gIH1cblxuICBvblJlc3BvbnNlQ2hBUEkoY2ggPSB0aGlzLmNoKSB7XG4gICAgY29uc3QgZ2V0UmVzcG9uc2VDaEFQSSA9IChhY3Rpb25NZXRob2QpID0+IHtcbiAgICAgIHJldHVybiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uU3RhdGUgPSBhY3Rpb25NZXRob2QocmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTdG9yZS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG4gICAgLy8gVG8gY29ubmVjdCByZWR1eCBmbG93LlxuICAgIGNvbnN0IGNhbGxiYWNrOiBhbnkgPSBnZXRSZXNwb25zZUNoQVBJKFdzU2VydmVyVG9BcGlCcm9hZGNhc3RBY3Rpb24pO1xuICAgIHRoaXMub24oY2gsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9mZlJlc3BvbnNlQ2hBUEkoY2ggPSB0aGlzLmNoKSB7XG4gICAgdGhpcy5vZmYoY2gpO1xuICB9XG5cbiAgb24ob25LZXksIGNhbGxiYWNrID0gKCkgPT4ge30pIHtcbiAgICBpZiAoIXRoaXMud3MuX2NhbGxiYWNrc1tgJCR7b25LZXl9YF0pIHtcbiAgICAgIHRoaXMud3Mub24ob25LZXksIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICBvZmYob2ZmS2V5KSB7XG4gICAgaWYgKHRoaXMud3MuX2NhbGxiYWNrc1tgJCR7b2ZmS2V5fWBdKSB7XG4gICAgICB0aGlzLndzLm9mZihvZmZLZXkpO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBHbG9iYWxXaW5kb3cge1xuICBib290SWQ6IGFueTtcbiAgYm9vdE9wdGlvbjogYW55O1xuICBnbG9iYWxBcGk6IGFueTtcbiAgY29yZUFwaTogYW55O1xuICBvcmlnaW46IHN0cmluZztcbiAgYXBpU3RvcmU6IGFueTtcbiAgbWVkaWE6IE1lZGlhO1xuICBzdGF0aWMgZ2V0UmVxdWVzdE9iaihtZXRob2QsIHBhcmFtczogYW55ID0ge30pIHtcbiAgICBjb25zdCBocmVmID0gbG9jYXRpb24uaHJlZjtcbiAgICByZXR1cm4ge1xuICAgICAgd2luZG93VHlwZTogd2luZG93Lm5hbWUsXG4gICAgICB0eXBlOiBQb3N0TWVzc2FnZS5BUElfVE9fQ0xJRU5UX1RZUEUsXG4gICAgICBocmVmLFxuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICB9O1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYXBpU3RvcmUgPSBhcGlTdG9yZSgpO1xuICAgIHRoaXMuYm9vdE9wdGlvbiA9IG5ldyBCb290T3B0aW9uKCk7XG4gICAgdGhpcy5leGVDb3JlQXBpID0gdGhpcy5leGVDb3JlQXBpLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbGllbnRUbyA9IHRoaXMuY2xpZW50VG8uYmluZCh0aGlzKTtcbiAgICB0aGlzLnN1YnNjcmliZSA9IHRoaXMuc3Vic2NyaWJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbldzU2VydmVyID0gdGhpcy5vbldzU2VydmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5leGVDYWxsYmFjayA9IHRoaXMuZXhlQ2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmFmdGVyTWVkaWFGaWx0ZXIgPSB0aGlzLmFmdGVyTWVkaWFGaWx0ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFwaVN0b3JlLnN1YnNjcmliZSh0aGlzLnN1YnNjcmliZSk7XG5cbiAgICB0aGlzLm9uQWN0aW9ucygpO1xuICAgIGNvbnN0IGJvb3RQcm9taXNlcyA9IFtdO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgYm9vdFByb21pc2VzLnB1c2goXG4gICAgICBuZXcgUHJvbWlzZSgob25NZXNzYWdlUmVzb2x2ZSkgPT4ge1xuICAgICAgICB3aW5kb3cub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAgICAgICBpZiAob25NZXNzYWdlUmVzb2x2ZSkge1xuICAgICAgICAgICAgc2VsZi5vcmlnaW4gPSBlLm9yaWdpbjtcbiAgICAgICAgICAgIG9uTWVzc2FnZVJlc29sdmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzd2l0Y2ggKGUuZGF0YS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFBvc3RNZXNzYWdlLkNMSUVOVF9UT19BUElfVFlQRTpcbiAgICAgICAgICAgICAgaWYgKGUuZGF0YS5tZXRob2QgPT09IFBvc3RNZXNzYWdlLkhBTkRMRV9BUElfQU5EX0NMSUVOVCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc2VsZi5ib290SWQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuZXhlQ29yZUFwaShlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUG9zdE1lc3NhZ2UuSEFORExFX0VYVF9BTkRfQVBJOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUG9zdE1lc3NhZ2UuRVhUX1RPX0FQSV9UWVBFOlxuICAgICAgICAgICAgICBzZWxmLmV4ZUNvcmVBcGkoZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGJvb3RQcm9taXNlcy5wdXNoKFxuICAgICAgbmV3IFByb21pc2UoKHJlc292ZSkgPT4ge1xuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgbmV3IENvcmVBUEkodGhpcy5ib290T3B0aW9uLmVudiwgc2VsZi5hcGlTdG9yZSwgcmVzb3ZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cub25sb2FkID0gKGUpID0+IHtcbiAgICAgICAgICAgIG5ldyBDb3JlQVBJKHRoaXMuYm9vdE9wdGlvbi5lbnYsIHNlbGYuYXBpU3RvcmUsIHJlc292ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSkudGhlbih0aGlzLm9uV3NTZXJ2ZXIpXG4gICAgKTtcblxuICAgIFByb21pc2UuYWxsKGJvb3RQcm9taXNlcykudGhlbigoYm9vdFBhcmFtczogYW55KSA9PiB7XG4gICAgICB0aGlzLmJvb3RJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgdGhpcy5jbGllbnRUbyhQb3N0TWVzc2FnZS5IQU5ETEVfQVBJX0FORF9DTElFTlQsIHRoaXMuYm9vdE9wdGlvbik7XG4gICAgICB9LCAyMDApO1xuICAgIH0pO1xuICB9XG5cbiAgZXhlQ29yZUFwaShlKSB7XG4gICAgaWYgKHRoaXMuY29yZUFwaSAmJiB0aGlzLmNvcmVBcGlbZS5kYXRhLm1ldGhvZF0pIHtcbiAgICAgIGNvbnN0IHsgbWV0aG9kLCBwYXJhbXMgfSA9IGUuZGF0YTtcbiAgICAgIGNvbnN0IGFwaVN0YXRlID0gdGhpcy5hcGlTdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgdGhpcy5iZWZvcmVNZWRpYUZpbHRlcih7IG1ldGhvZCwgcGFyYW1zLCBhcGlTdGF0ZSB9KTtcbiAgICAgIHRoaXMuY29yZUFwaVttZXRob2RdKHBhcmFtcyk7XG4gICAgfVxuICB9XG5cbiAgb25Xc1NlcnZlcihjb3JlQXBpOiBhbnkpIHtcbiAgICB0aGlzLmNvcmVBcGkgPSBjb3JlQXBpO1xuICAgIGNvbnN0IGFwaVN0YXRlID0gbmV3IEFwaVN0YXRlKHdpbmRvdywgdGhpcy5ib290T3B0aW9uKTtcbiAgICB0aGlzLmNvcmVBcGkuc2V0VXAoYXBpU3RhdGUsIHRoaXMuYm9vdE9wdGlvbi5jaCk7XG4gICAgaWYgKHRoaXMuYm9vdE9wdGlvbi50eXBlICE9PSBkZWZpbmUuQVBQX1RZUEVTLkFQSSkge1xuICAgICAgdGhpcy5jb3JlQXBpLnR1bmUoYXBpU3RhdGUpO1xuICAgIH1cblxuICAgIHdpbmRvdy4kdCA9IG5ldyBQdWJsaWNBcGkodGhpcy5jb3JlQXBpKTtcbiAgfVxuXG4gIG9uQWN0aW9ucygpIHtcbiAgICBjb25zdCBhY3Rpb25LZXlzID0gT2JqZWN0LmtleXMoaGFuZGxlQWN0aW9ucyk7XG4gICAgY29uc3QgYWN0aW9uTGVuZ3RoID0gYWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgY29uc3QgZ2V0QWN0aW9ucyA9IChhY3Rpb25OYW1lKSA9PiB7XG4gICAgICByZXR1cm4gKHBhcmFtczEsIHBhcmFtczIpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gaGFuZGxlQWN0aW9uc1thY3Rpb25OYW1lXShwYXJhbXMxKTtcbiAgICAgICAgY29uc3QgcmVkdXhTdGF0ZSA9IHRoaXMuYXBpU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBmb3IgKGxldCBhY3Rpb25Ob2RlQ250ID0gMDsgYWN0aW9uTm9kZUNudCA8IGFjdGlvbkxlbmd0aDsgYWN0aW9uTm9kZUNudCsrKSB7XG4gICAgICBjb25zdCBhY3Rpb25OYW1lID0gYWN0aW9uS2V5c1thY3Rpb25Ob2RlQ250XTtcbiAgICAgIHRoaXNbYWN0aW9uTmFtZV0gPSBnZXRBY3Rpb25zKGFjdGlvbk5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy5jb3JlQXBpKSB7XG4gICAgICBjb25zdCBhcGlTdGF0ZSA9IHRoaXMuYXBpU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIHRoaXMuYWZ0ZXJNZWRpYUZpbHRlcihhcGlTdGF0ZSk7XG4gICAgICB0aGlzLmV4ZUNhbGxiYWNrKGFwaVN0YXRlLmFwcC5hY3Rpb25lZCwgYXBpU3RhdGUpO1xuICAgICAgdGhpcy5jbGllbnRUbyhhcGlTdGF0ZS5hcHAuYWN0aW9uZWQsIGFwaVN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBleGVDYWxsYmFjayhtZXRob2QsIGFwaVN0YXRlKSB7XG4gICAgY29uc3QgeyBhY3Rpb25UeXBlLCBhY3Rpb25OYW1lIH0gPSBTZXF1ZW5jZS5nZXRTZXF1ZW5jZUFjdGlvbk1hcChtZXRob2QpO1xuICAgIGlmIChhY3Rpb25OYW1lICE9PSBTZXF1ZW5jZS5BUElfQlJPQURDQVNUX0NBTExCQUNLKSB7XG4gICAgICBpZiAoYWN0aW9uVHlwZSA9PT0gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCkge1xuICAgICAgICBpZiAodGhpcy5jb3JlQXBpLmNhbGxiYWNrc1thY3Rpb25OYW1lXSkge1xuICAgICAgICAgIGNvbnN0IHsgcG9zdHMsIHRocmVhZCwgdXNlciB9ID0gYXBpU3RhdGU7XG4gICAgICAgICAgdGhpcy5jb3JlQXBpLmNhbGxiYWNrc1thY3Rpb25OYW1lXShhcGlTdGF0ZSwgeyBwb3N0cywgdGhyZWFkLCB1aWQ6IHVzZXIudWlkIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvblR5cGUgPT09IFNlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVCkge1xuICAgICAgaWYgKHRoaXMuY29yZUFwaS5jYWxsYmFja3NbU2VxdWVuY2UuQVBJX0JST0FEQ0FTVF9DQUxMQkFDS10pIHtcbiAgICAgICAgY29uc3QgeyBwb3N0cywgdGhyZWFkLCB1c2VyIH0gPSBhcGlTdGF0ZTtcbiAgICAgICAgdGhpcy5jb3JlQXBpLmNhbGxiYWNrc1tTZXF1ZW5jZS5BUElfQlJPQURDQVNUX0NBTExCQUNLXShhY3Rpb25OYW1lLCB7IHBvc3RzLCB0aHJlYWQsIHVpZDogdXNlci51aWQgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYmVmb3JlTWVkaWFGaWx0ZXIoeyBtZXRob2QsIHBhcmFtcywgYXBpU3RhdGUgfSkge1xuICAgIGlmIChhcGlTdGF0ZS5hcHAuaXNNZWRpYUNoKSB7XG4gICAgICBpZiAobWV0aG9kID09PSBcInBvc3RcIikge1xuICAgICAgICAvLyDoh6rliIbjga5wb3N0c+OBruOBv01lZGlh44Gr5Y+N5pig44GZ44KLXG4gICAgICAgIHBhcmFtcy5hcHAuaW5wdXRDdXJyZW50VGltZSA9IHRoaXMubWVkaWEuY3VycmVudFRpbWUgPiAwID8gdGhpcy5tZWRpYS5jdXJyZW50VGltZSA6IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBhZnRlck1lZGlhRmlsdGVyKGFwaVN0YXRlKSB7XG4gICAgc3dpdGNoIChhcGlTdGF0ZS5hcHAuYWN0aW9uZWQpIHtcbiAgICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICAgICAgaWYgKGFwaVN0YXRlLmFwcC5pc01lZGlhQ2gpIHtcbiAgICAgICAgICAvLyDopovjgabjgYTjgotjaOOBjG1lZGlhQ2jjgafjgarjgY/jgIFtZWRpYeOBruWGjeeUn+OCkuWni+OCgeOBn+WgtOWQiFxuICAgICAgICAgIGlmICh0aGlzLm1lZGlhICYmIHRoaXMubWVkaWEuc3RhdHVzID09PSBcImZpbmRpbmdcIiAmJiB0aGlzLm1lZGlhLmNoID09PSBhcGlTdGF0ZS50aHJlYWQuY2gpIHtcbiAgICAgICAgICAgIHRoaXMubWVkaWEuc2V0UG9zdHNUaW1lbGluZXMoYXBpU3RhdGUpO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5wbGF5aW5nKCk7XG5cbiAgICAgICAgICAgIC8vIOimi+OBpuOBhOOCi2No44GMbWVkaWFDaOOBruWgtOWQiFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhID0gbmV3IE1lZGlhKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5zZWFyY2hpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tZWRpYSA9IG5ldyBNZWRpYSh0aGlzKTtcbiAgICAgICAgICB0aGlzLm1lZGlhLnNlYXJjaGluZygpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICAgIGlmIChhcGlTdGF0ZS5hcHAuaXNNZWRpYUNoKSB7XG4gICAgICAgICAgY29uc3QgcG9zdCA9IGFwaVN0YXRlLnBvc3RzWzBdO1xuICAgICAgICAgIGlmIChwb3N0LmNoID09PSB0aGlzLm1lZGlhLmNoKSB7XG4gICAgICAgICAgICAvLyDoh6rliIbjga7mipXnqL/jgZfjgZ9wb3N044Gu5aC05ZCIXG4gICAgICAgICAgICBpZiAocG9zdC51aWQgPT09IGFwaVN0YXRlLnVzZXIudWlkKSB7XG4gICAgICAgICAgICAgIHRoaXMubWVkaWEucmVmcmVjdFNlbGZQb3N0KHBvc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjbGllbnRUbyhtZXRob2QsIHBhcmFtcyA9IHt9KSB7XG4gICAgc3dpdGNoICh0aGlzLmJvb3RPcHRpb24udHlwZSkge1xuICAgICAgY2FzZSBkZWZpbmUuQVBQX1RZUEVTLlBPUlRBTDpcbiAgICAgICAgY29uc3QgcmVxdWVzdE9iaiA9IEdsb2JhbFdpbmRvdy5nZXRSZXF1ZXN0T2JqKG1ldGhvZCwgcGFyYW1zKTtcbiAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKHJlcXVlc3RPYmosIGxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGVmaW5lLkFQUF9UWVBFUy5FWFRFTlNJT046XG4gICAgICAgIGNvbnN0IGNsaWVudElmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpZnJhbWUjdGFsa25FeHRlbnNpb25gKTtcblxuICAgICAgICAvLyBib290IGJ5IGlmcmFtZS5cbiAgICAgICAgaWYgKGNsaWVudElmcmFtZSkge1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3RPYmogPSBHbG9iYWxXaW5kb3cuZ2V0UmVxdWVzdE9iaihtZXRob2QsIHBhcmFtcyk7XG4gICAgICAgICAgY2xpZW50SWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UocmVxdWVzdE9iaiwgY2xpZW50SWZyYW1lLnNyYyk7XG4gICAgICAgICAgLy8gYm9vdCBieSBhcGkgb25seS5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBcIk5PIEVYVEVOU0lPTiBJRlJBTUVcIjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZGVmaW5lLkFQUF9UWVBFUy5BUEk6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWVkaWEge1xuICBzdGF0aWMgZ2V0IG1lZGlhU2Vjb25kSW50ZXJ2YWwoKSB7XG4gICAgcmV0dXJuIDIwMDtcbiAgfVxuICBzdGF0aWMgZ2V0TWVkaWEodGhyZWFkKSB7XG4gICAgY29uc3Qgc3JjID0gVGhyZWFkLmdldE1lZGlhU3JjKHRocmVhZCk7XG4gICAgY29uc3QgdGFnVHlwZSA9IFRocmVhZC5nZXRNZWRpYVRhZ1R5cGUodGhyZWFkKTtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0YWdUeXBlfVtzcmM9JyR7c3JjfSddYCk7XG4gIH1cbiAgc3RhdGljIGdldFJlcXVlc3RPYmoobWV0aG9kLCBwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpbmRvd1R5cGU6IHdpbmRvdy5uYW1lLFxuICAgICAgdHlwZTogUG9zdE1lc3NhZ2UuTUVESUFfVE9fQ0xJRU5UX1RZUEUsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgIH07XG4gIH1cbiAgY2g6IHN0cmluZztcbiAgZ2xvYmFsV2luZG93OiBHbG9iYWxXaW5kb3c7XG4gIG1heFNlYXJjaGluZ0NudDogbnVtYmVyID0gMzA7XG4gIHNlYXJjaGluZ0NudDogbnVtYmVyO1xuICBwbGF5aW5nQ250OiBudW1iZXI7XG4gIHNlYXJjaGluZ0lkOiBhbnk7XG4gIHdhaXRpbmdJZDogYW55O1xuICBwbGF5SW50ZXJ2YWxJZDogYW55O1xuICBzdGFydGVkOiBib29sZWFuO1xuICBpc1Bvc3Rpbmc6IGJvb2xlYW47XG4gIGZpbGU6IGFueTtcbiAgcG9pbnRlclRpbWU6IGFueTtcbiAgcG9zdHNUaW1lbGluZTogYW55O1xuICBwb3N0c1RpbWVsaW5lU3RvY2s6IGFueTtcbiAgc3RhdHVzOiBcInNodXRkb3duXCIgfCBcInNlYXJjaGluZ1wiIHwgXCJ3YWl0aW5nXCIgfCBcImZpbmRpbmdcIiB8IFwicGxheWluZ1wiIHwgXCJzZWVraW5nXCIgPSBcInNodXRkb3duXCI7XG4gIGlzTG9nOiBib29sZWFuID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKGdsb2JhbFdpbmRvdykge1xuICAgIHRoaXMuZ2xvYmFsV2luZG93ID0gZ2xvYmFsV2luZG93O1xuICAgIHRoaXMuY2ggPSBnbG9iYWxXaW5kb3cuYXBpU3RvcmUuZ2V0U3RhdGUoKS50aHJlYWQuY2g7XG5cbiAgICAvLyBjb250cm9scy5cbiAgICB0aGlzLnNlYXJjaGluZ0NudCA9IDA7XG4gICAgdGhpcy5wbGF5aW5nQ250ID0gMDtcbiAgICB0aGlzLnBvaW50ZXJUaW1lID0gMDtcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzUG9zdGluZyA9IGZhbHNlO1xuXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNlYXJjaGluZ0lkKTtcbiAgICBjbGVhckludGVydmFsKHRoaXMucGxheUludGVydmFsSWQpO1xuXG4gICAgLy8gdGltZWxpbmUgZGF0YXMuXG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lID0gW107XG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2sgPSBbXTtcblxuICAgIC8vIG1ldGhvZHMuXG4gICAgdGhpcy5zZXRQb3N0c1RpbWVsaW5lcyA9IHRoaXMuc2V0UG9zdHNUaW1lbGluZXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZnJlY3RTZWxmUG9zdCA9IHRoaXMucmVmcmVjdFNlbGZQb3N0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZWFyY2hpbmcgPSB0aGlzLnNlYXJjaGluZy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlRXZlbnRzID0gdGhpcy5oYW5kbGVFdmVudHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnBvc3RpbmcgPSB0aGlzLnBvc3RpbmcuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFwaVRvID0gdGhpcy5hcGlUby5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9nID0gdGhpcy5sb2cuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHNldFN0YXR1cyhzdGF0dXMpIHtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmxvZyhcIlNFVCBTVEFUVVNcIik7XG4gIH1cblxuICBzZXRQb3N0c1RpbWVsaW5lcyh7IHBvc3RzVGltZWxpbmUsIHBvc3RzVGltZWxpbmVTdG9jayB9KSB7XG4gICAgLy8g54++5Zyo6KGo56S644GV44KM44Gm44GE44KL44K/44Kk44Og44Op44Kk44Oz54q25oWLXG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lID0gWy4uLnBvc3RzVGltZWxpbmVdO1xuXG4gICAgLy8gMOenkuaKleeov+OBruOCv+OCpOODoOODqeOCpOODs+eKtuaFi1xuICAgIHRoaXMucG9zdHNUaW1lbGluZVN0b2NrID0gWy4uLnBvc3RzVGltZWxpbmVTdG9ja107XG5cbiAgICB0aGlzLmxvZyhcIklOSVQgVElNRUxJTkVTXCIpO1xuICB9XG5cbiAgcmVmcmVjdFNlbGZQb3N0KHBvc3QpIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLnBvc3RzVGltZWxpbmUubGVuZ3RoO1xuICAgIGxldCBwdXNoRmxnID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvc3QuY3VycmVudFRpbWUgPCB0aGlzLnBvc3RzVGltZWxpbmVbaV0uY3VycmVudFRpbWUpIHtcbiAgICAgICAgcHVzaEZsZyA9IHRydWU7XG4gICAgICAgIHRoaXMucG9zdHNUaW1lbGluZS5zcGxpY2UoaSwgMCwgcG9zdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwdXNoRmxnKSB7XG4gICAgICB0aGlzLnBvc3RzVGltZWxpbmUucHVzaChwb3N0KTtcbiAgICB9XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZSA/IE1hdGguZmxvb3IodGhpcy5maWxlLmN1cnJlbnRUaW1lICogMTApIC8gMTAgOiAwO1xuICB9XG5cbiAgc2VhcmNoaW5nKHNlY29uZCA9IE1lZGlhLm1lZGlhU2Vjb25kSW50ZXJ2YWwpIHtcbiAgICB0aGlzLnNldFN0YXR1cyhcInNlYXJjaGluZ1wiKTtcbiAgICB0aGlzLnNlYXJjaGluZ0NudCA9IDA7XG4gICAgdGhpcy5zZWFyY2hpbmdJZCA9IG51bGw7XG4gICAgdGhpcy53YWl0aW5nSWQgPSBudWxsO1xuICAgIHRoaXMucGxheUludGVydmFsSWQgPSBudWxsO1xuICAgIHRoaXMuc2VhcmNoaW5nSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zZWFyY2hpbmdDbnQgPCB0aGlzLm1heFNlYXJjaGluZ0NudCkge1xuICAgICAgICBjb25zdCB2aWRlb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidmlkZW9cIik7XG4gICAgICAgIGNvbnN0IGF1ZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhdWRpb1wiKTtcbiAgICAgICAgdmlkZW9zLmZvckVhY2godGhpcy5oYW5kbGVFdmVudHMpO1xuICAgICAgICBhdWRpb3MuZm9yRWFjaCh0aGlzLmhhbmRsZUV2ZW50cyk7XG4gICAgICAgIGlmICh2aWRlb3MubGVuZ3RoID4gMCB8fCBhdWRpb3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKFwid2FpdGluZ1wiKTtcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuc2VhcmNoaW5nSWQpO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wbGF5SW50ZXJ2YWxJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWFyY2hpbmdDbnQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNlYXJjaGluZ0lkKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnBsYXlJbnRlcnZhbElkKTtcbiAgICAgICAgdGhpcy5zZWFyY2hpbmcoTWVkaWEubWVkaWFTZWNvbmRJbnRlcnZhbCAqIDEwKTtcbiAgICAgIH1cbiAgICB9LCBzZWNvbmQpO1xuICB9XG5cbiAgaGFuZGxlRXZlbnRzKG1lZGlhKSB7XG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuZmlsZSA9IGUuc3JjRWxlbWVudDtcbiAgICAgIGNvbnN0IG1lZGlhQ2ggPSBDbGllbnRVdGlsLmRlbGV0ZVByb3Rjb2wodGhpcy5maWxlLmN1cnJlbnRTcmMpICsgXCIvXCI7XG5cbiAgICAgIC8vIOimi+OBpuOBhOOCi2No44GMbWVkaWFDaOOBruWgtOWQiFxuICAgICAgaWYgKHRoaXMuY2ggPT09IG1lZGlhQ2gpIHtcbiAgICAgICAgaWYgKHRoaXMucGxheWluZ0NudCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuc2V0UG9zdHNUaW1lbGluZXModGhpcy5nbG9iYWxXaW5kb3cuYXBpU3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5aW5nKCk7XG5cbiAgICAgICAgLy8g6KaL44Gm44GE44KLY2jjgYxtZWRpYUNo44Gn44Gq44GP44CBbWVkaWHjga7lho3nlJ/jgpLlp4vjgoHjgZ/loLTlkIhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKFwiZmluZGluZ1wiKTtcbiAgICAgICAgdGhpcy5jaCA9IG1lZGlhQ2g7XG4gICAgICAgIHRoaXMuZ2xvYmFsV2luZG93LmNvcmVBcGkub25SZXNwb25zZUNoQVBJKHRoaXMuY2gpO1xuICAgICAgICB0aGlzLmdsb2JhbFdpbmRvdy5jb3JlQXBpLmNoYW5nZVRocmVhZCh7IHRocmVhZDogeyBjaDogdGhpcy5jaCB9IH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcInNlZWtlZFwiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzZWVraW5nXCIpO1xuICAgIH0pO1xuXG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXR1cyhcIndhaXRpbmdcIik7XG4gICAgfSk7XG5cbiAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdHVzKFwid2FpdGluZ1wiKTtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wbGF5SW50ZXJ2YWxJZCk7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2subGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5wb3N0c1RpbWVsaW5lU3RvY2tbaV0gJiYgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2tbaV0uY3VycmVudFRpbWUgPD0gY3VycmVudFRpbWUpIHtcbiAgICAgICAgICB0aGlzLmFwaVRvKFwiTkVYVF9QT1NUU19USU1FTElORVwiLCB7IHBvc3RzVGltZWxpbmU6IFt0aGlzLnBvc3RzVGltZWxpbmVTdG9ja1tpXV0gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdHVzKFwid2FpdGluZ1wiKTtcbiAgICB9KTtcbiAgfVxuXG4gIHBsYXlpbmcoKSB7XG4gICAgdGhpcy5zZXRTdGF0dXMoXCJwbGF5aW5nXCIpO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wbGF5SW50ZXJ2YWxJZCk7XG4gICAgdGhpcy5wbGF5SW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucG9zdGluZyh0aGlzLmN1cnJlbnRUaW1lKTtcbiAgICB9LCBjb25mLm1lZGlhU2Vjb25kSW50ZXJ2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODoeODh+OCo+OCouODleOCoeOCpOODq+OBruaKleeov+OCkueuoeeQhuOBmeOCi+ODoeOCveODg+ODiVxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgpLkuI7jgYjjgabnm7TmjqXlrp/ooYzjgoLlj6/og70o5ouh5by15qmf6IO944GL44KJ6ZaT5o6l55qE44Gr5a6f6KGM44GZ44KLKVxuICAgKi9cbiAgcG9zdGluZyhwb2ludGVyVGltZSA9IDApIHtcbiAgICBpZiAodGhpcy5pc1Bvc3RpbmcpIHJldHVybjtcbiAgICBjb25zdCB0aW1lbGluZUxlbmd0aCA9IHRoaXMucG9zdHNUaW1lbGluZVN0b2NrLmxlbmd0aDtcbiAgICB0aGlzLnBsYXlpbmdDbnQrKztcbiAgICB0aGlzLmlzUG9zdGluZyA9IHRydWU7XG5cbiAgICAvLyBUaW1lbGluZSBpcyBuZXh0LlxuICAgIGlmICh0aGlzLnBvaW50ZXJUaW1lIDw9IHBvaW50ZXJUaW1lKSB7XG4gICAgICB0aGlzLnBvaW50ZXJUaW1lID0gcG9pbnRlclRpbWU7XG4gICAgICB3aGlsZSAodGhpcy5pc1Bvc3RpbmcpIHtcbiAgICAgICAgaWYgKHRpbWVsaW5lTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5pc1Bvc3RpbmcgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBvc3RzVGltZWxpbmVTdG9ja1swXSAmJiB0aGlzLnBvc3RzVGltZWxpbmVTdG9ja1swXS5jdXJyZW50VGltZSA8PSBwb2ludGVyVGltZSkge1xuICAgICAgICAgIGNvbnN0IGFkZFBvc3QgPSB0aGlzLnBvc3RzVGltZWxpbmVTdG9jay5zaGlmdCgpO1xuICAgICAgICAgIHRoaXMuYXBpVG8oXCJORVhUX1BPU1RTX1RJTUVMSU5FXCIsIHsgcG9zdHNUaW1lbGluZTogW2FkZFBvc3RdIH0pO1xuICAgICAgICAgIHRoaXMubG9nKFwiUE9TVElOR1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlzUG9zdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBUaW1lbGluZSBpcyBwcmV2LlxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwcmV2LlxuICAgICAgdGhpcy5maWxlLnBhdXNlKCk7XG5cbiAgICAgIGNvbnN0IHBvc3RzVGltZWxpbmVBbGwgPSB0aGlzLmdsb2JhbFdpbmRvdy5hcGlTdG9yZS5nZXRTdGF0ZSgpLnBvc3RzVGltZWxpbmUuY29uY2F0KHRoaXMucG9zdHNUaW1lbGluZVN0b2NrKTtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc3RzVGltZWxpbmVBbGwubGVuZ3RoO1xuICAgICAgdGhpcy5wb2ludGVyVGltZSA9IHRoaXMuY3VycmVudFRpbWU7XG4gICAgICB0aGlzLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgICAgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcG9zdCA9IHBvc3RzVGltZWxpbmVBbGxbaV07XG4gICAgICAgIGlmIChwb3N0LmN1cnJlbnRUaW1lIDw9IHRoaXMucG9pbnRlclRpbWUpIHtcbiAgICAgICAgICB0aGlzLnBvc3RzVGltZWxpbmUucHVzaChwb3N0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBvc3RzVGltZWxpbmVTdG9jay5wdXNoKHBvc3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOaMh+WumuOBl+OBn+enkuaVsOOCkue1jOmBjuOBl+OBpuOBhOOCi1Bvc3TjgpJyZWR1Y2Vy44GnZGlzcEZsZ+OCkmZhbHNl44Gr44GX44GmUG9zdOOCklVubW91bnTjgZnjgotcbiAgICAgIHRoaXMuYXBpVG8oXCJDTEVBUl9QT1NUU19USU1FTElORVwiLCB7XG4gICAgICAgIHBvc3RzVGltZWxpbmU6IHRoaXMucG9zdHNUaW1lbGluZSxcbiAgICAgICAgcG9zdHNUaW1lbGluZVN0b2NrOiB0aGlzLnBvc3RzVGltZWxpbmVTdG9jayxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmlzUG9zdGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5maWxlLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBhcGlUbyhtZXRob2QsIHBhcmFtcyA9IHt9KSB7XG4gICAgdGhpcy5nbG9iYWxXaW5kb3cuYXBpU3RvcmUuZGlzcGF0Y2goeyB0eXBlOiBtZXRob2QsIC4uLnBhcmFtcyB9KTtcbiAgfVxuXG4gIGxvZyhsYWJlbCwgaXNGb3JjZSA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuaXNMb2cgfHwgaXNGb3JjZSkge1xuICAgICAgY29uc29sZS5sb2coYEBAQEBAQEBAQEBAICR7bGFiZWx9ICR7dGhpcy5zdGF0dXN9IENIICR7dGhpcy5jaH0gJHt0aGlzLnBvaW50ZXJUaW1lfSBAQEBgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBwb3N0c1RpbWVsaW5lOiAke3RoaXMucG9zdHNUaW1lbGluZS5sZW5ndGh9IHBvc3RzVGltZWxpbmVTdG9jazogJHt0aGlzLnBvc3RzVGltZWxpbmVTdG9jay5sZW5ndGh9YCk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnBvc3RzVGltZWxpbmUpO1xuICAgICAgY29uc29sZS5sb2codGhpcy5wb3N0c1RpbWVsaW5lU3RvY2spO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnbG9iYWxXaW5kb3cgPSBuZXcgR2xvYmFsV2luZG93KCk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHQvLyBEZWJ1Zy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcblx0XHQvLyBkZWJ1Zy5yYXdMb2cgPSByYXdMb2c7XG5cblx0XHQvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zdCBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuXHRcdFx0aW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJyMwMDAwQ0MnLCAnIzAwMDBGRicsICcjMDAzM0NDJywgJyMwMDMzRkYnLCAnIzAwNjZDQycsICcjMDA2NkZGJywgJyMwMDk5Q0MnLFxuICAnIzAwOTlGRicsICcjMDBDQzAwJywgJyMwMENDMzMnLCAnIzAwQ0M2NicsICcjMDBDQzk5JywgJyMwMENDQ0MnLCAnIzAwQ0NGRicsXG4gICcjMzMwMENDJywgJyMzMzAwRkYnLCAnIzMzMzNDQycsICcjMzMzM0ZGJywgJyMzMzY2Q0MnLCAnIzMzNjZGRicsICcjMzM5OUNDJyxcbiAgJyMzMzk5RkYnLCAnIzMzQ0MwMCcsICcjMzNDQzMzJywgJyMzM0NDNjYnLCAnIzMzQ0M5OScsICcjMzNDQ0NDJywgJyMzM0NDRkYnLFxuICAnIzY2MDBDQycsICcjNjYwMEZGJywgJyM2NjMzQ0MnLCAnIzY2MzNGRicsICcjNjZDQzAwJywgJyM2NkNDMzMnLCAnIzk5MDBDQycsXG4gICcjOTkwMEZGJywgJyM5OTMzQ0MnLCAnIzk5MzNGRicsICcjOTlDQzAwJywgJyM5OUNDMzMnLCAnI0NDMDAwMCcsICcjQ0MwMDMzJyxcbiAgJyNDQzAwNjYnLCAnI0NDMDA5OScsICcjQ0MwMENDJywgJyNDQzAwRkYnLCAnI0NDMzMwMCcsICcjQ0MzMzMzJywgJyNDQzMzNjYnLFxuICAnI0NDMzM5OScsICcjQ0MzM0NDJywgJyNDQzMzRkYnLCAnI0NDNjYwMCcsICcjQ0M2NjMzJywgJyNDQzk5MDAnLCAnI0NDOTkzMycsXG4gICcjQ0NDQzAwJywgJyNDQ0NDMzMnLCAnI0ZGMDAwMCcsICcjRkYwMDMzJywgJyNGRjAwNjYnLCAnI0ZGMDA5OScsICcjRkYwMENDJyxcbiAgJyNGRjAwRkYnLCAnI0ZGMzMwMCcsICcjRkYzMzMzJywgJyNGRjMzNjYnLCAnI0ZGMzM5OScsICcjRkYzM0NDJywgJyNGRjMzRkYnLFxuICAnI0ZGNjYwMCcsICcjRkY2NjMzJywgJyNGRjk5MDAnLCAnI0ZGOTkzMycsICcjRkZDQzAwJywgJyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJyk7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICogQW55dGhpbmcgd2l0aCBibG9icyBvciBmaWxlcyBzaG91bGQgYmUgZmVkIHRocm91Z2ggcmVtb3ZlQmxvYnMgYmVmb3JlIGNvbWluZ1xuICogaGVyZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgcGFjayA9IHBhY2tldDtcbiAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICByZXR1cm4ge3BhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVyc307XG59O1xuXG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChpc0J1ZihkYXRhKSkge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykge1xuICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gIHBhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICByZXR1cm4gcGFja2V0O1xufTtcblxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgQmxvYnMgb3IgRmlsZXMgZnJvbSBkYXRhIHZpYVxuICogRmlsZVJlYWRlcidzIHJlYWRBc0FycmF5QnVmZmVyIG1ldGhvZC4gVXNlZCBiZWZvcmUgZW5jb2RpbmdcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIGNvbnZlcnQgYW55IGJsb2JcbiAgICBpZiAoKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcGVuZGluZ0Jsb2JzKys7XG5cbiAgICAgIC8vIGFzeW5jIGZpbGVyZWFkZXJcbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXG4gICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgY29udGFpbmluZ09iamVjdFtjdXJLZXldID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3RoaW5nIHBlbmRpbmcgaXRzIGNhbGxiYWNrIHRpbWVcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xuICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKTsgLy8gYmxvYiAtPiBhcnJheWJ1ZmZlclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFpc0J1ZihvYmopKSB7IC8vIGFuZCBvYmplY3RcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBlbmRpbmdCbG9icyA9IDA7XG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xuICBfcmVtb3ZlQmxvYnMoYmxvYmxlc3NEYXRhKTtcbiAgaWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZSAhPT0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JztcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gIHRoaXMudHJhbnNwb3J0T3B0aW9ucyA9IG9wdHMudHJhbnNwb3J0T3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgdGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0MztcbiAgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBvcHRzLnJlbWVtYmVyVXBncmFkZSB8fCBmYWxzZTtcbiAgdGhpcy5iaW5hcnlUeXBlID0gbnVsbDtcbiAgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlcztcbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IGZhbHNlICE9PSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID8gKG9wdHMucGVyTWVzc2FnZURlZmxhdGUgfHwge30pIDogZmFsc2U7XG5cbiAgaWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgaWYgKHRoaXMucGVyTWVzc2FnZURlZmxhdGUgJiYgbnVsbCA9PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgIHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkID0gMTAyNDtcbiAgfVxuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4IHx8IG51bGw7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXkgfHwgbnVsbDtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlIHx8IG51bGw7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydCB8fCBudWxsO1xuICB0aGlzLmNhID0gb3B0cy5jYSB8fCBudWxsO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnMgfHwgbnVsbDtcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9ICEhb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9ICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09ICdyZWFjdG5hdGl2ZScpO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgb3IgUmVhY3ROYXRpdmUgY2xpZW50XG4gIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5pc1JlYWN0TmF0aXZlKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHdpdGhDcmVkZW50aWFsczogb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgfHwgdGhpcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKSxcbiAgICBpc1JlYWN0TmF0aXZlOiB0aGlzLmlzUmVhY3ROYXRpdmVcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iLCIvKiBnbG9iYWwgYXR0YWNoRXZlbnQgKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHInKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vZ2xvYmFsVGhpcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcbiAgb3B0cy53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnN1cHBvcnRzQmluYXJ5ICYmIGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTsgY2hhcnNldD1VVEYtOCcpIHtcbiAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9uRXJyb3IodHlwZW9mIHhoci5zdGF0dXMgPT09ICdudW1iZXInID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gIH1cblxuICB0aGlzLnhociA9IG51bGw7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGxvYWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YTtcbiAgdHJ5IHtcbiAgICB2YXIgY29udGVudFR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTsgY2hhcnNldD1VVEYtOCcpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJiAhdGhpcy54cyAmJiB0aGlzLmVuYWJsZXNYRFI7XG59O1xuXG4vKipcbiAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQWJvcnRzIHBlbmRpbmcgcmVxdWVzdHMgd2hlbiB1bmxvYWRpbmcgdGhlIHdpbmRvdy4gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudFxuICogbWVtb3J5IGxlYWtzIChlLmcuIHdoZW4gdXNpbmcgSUUpIGFuZCB0byBlbnN1cmUgdGhhdCBubyBzcHVyaW91cyBlcnJvciBpc1xuICogZW1pdHRlZC5cbiAqL1xuXG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICBpZiAodHlwZW9mIGF0dGFjaEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXR0YWNoRXZlbnQoJ29udW5sb2FkJywgdW5sb2FkSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgdGVybWluYXRpb25FdmVudCA9ICdvbnBhZ2VoaWRlJyBpbiBnbG9iYWxUaGlzID8gJ3BhZ2VoaWRlJyA6ICd1bmxvYWQnO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIodGVybWluYXRpb25FdmVudCwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIgKCkge1xuICBmb3IgKHZhciBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuIiwiXG4vKipcbiAqIEdldHMgdGhlIGtleXMgZm9yIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzIChvYmope1xuICB2YXIgYXJyID0gW107XG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIGFyci5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBleHRyYTtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0fVxuXHR2YXIgc3ltYm9sID0gJyc7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHR9XG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgY29kZVBvaW50O1xuXHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0fVxuXHRyZXR1cm4gYnl0ZVN0cmluZztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHR9XG5cblx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdHZhciBieXRlMTtcblx0dmFyIGJ5dGUyO1xuXHR2YXIgYnl0ZTM7XG5cdHZhciBieXRlNDtcblx0dmFyIGNvZGVQb2ludDtcblxuXHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdHJldHVybiBieXRlMTtcblx0fVxuXG5cdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG59XG5cbnZhciBieXRlQXJyYXk7XG52YXIgYnl0ZUNvdW50O1xudmFyIGJ5dGVJbmRleDtcbmZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRieXRlSW5kZXggPSAwO1xuXHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHR2YXIgdG1wO1xuXHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0fVxuXHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHZlcnNpb246ICcyLjEuMicsXG5cdGVuY29kZTogdXRmOGVuY29kZSxcblx0ZGVjb2RlOiB1dGY4ZGVjb2RlXG59O1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwiLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XHJcbiAqL1xyXG5cclxudmFyIEJsb2JCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgV2ViS2l0QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gV2ViS2l0QmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFxyXG4gIGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcclxuICAgIHJldHVybiBhLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xyXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XHJcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXHJcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxyXG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XHJcbiAgcmV0dXJuIGFyeS5tYXAoZnVuY3Rpb24oY2h1bmspIHtcclxuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xyXG5cclxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XHJcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYnVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaHVuaztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xyXG4gICAgYmIuYXBwZW5kKHBhcnQpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBCbG9iKG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSwgb3B0aW9ucyB8fCB7fSk7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgQmxvYkJ1aWxkZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxuICBCbG9iQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xyXG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn0pKCk7XHJcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cblx0Ki9cblx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuXHRcdC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcblxuXHRcdC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnN0IGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG5cdFx0XHRpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2dsb2JhbFRoaXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcblxuLyoqXG4gKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xuXG52YXIgck5ld2xpbmUgPSAvXFxuL2c7XG52YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG52YXIgY2FsbGJhY2tzO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkgeyB9XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgY2FsbGJhY2tzID0gZ2xvYmFsVGhpcy5fX19laW8gPSAoZ2xvYmFsVGhpcy5fX19laW8gfHwgW10pO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXQnKTtcblxudmFyIEJyb3dzZXJXZWJTb2NrZXQsIE5vZGVXZWJTb2NrZXQ7XG5cbmlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSAndW5kZWZpbmVkJykge1xuICBCcm93c2VyV2ViU29ja2V0ID0gV2ViU29ja2V0O1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQnJvd3NlcldlYlNvY2tldCA9IHNlbGYuV2ViU29ja2V0IHx8IHNlbGYuTW96V2ViU29ja2V0O1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdHJ5IHtcbiAgICBOb2RlV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTtcbiAgfSBjYXRjaCAoZSkgeyB9XG59XG5cbi8qKlxuICogR2V0IGVpdGhlciB0aGUgYFdlYlNvY2tldGAgb3IgYE1veldlYlNvY2tldGAgZ2xvYmFsc1xuICogaW4gdGhlIGJyb3dzZXIgb3IgdHJ5IHRvIHJlc29sdmUgV2ViU29ja2V0LWNvbXBhdGlibGVcbiAqIGludGVyZmFjZSBleHBvc2VkIGJ5IGB3c2AgZm9yIE5vZGUtbGlrZSBlbnZpcm9ubWVudC5cbiAqL1xuXG52YXIgV2ViU29ja2V0SW1wbCA9IEJyb3dzZXJXZWJTb2NrZXQgfHwgTm9kZVdlYlNvY2tldDtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdTO1xuXG4vKipcbiAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSB7T2JqZWN0fSBjb25uZWN0aW9uIG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gV1MgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmIChmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0ICYmICFvcHRzLmZvcmNlTm9kZTtcbiAgdGhpcy5wcm90b2NvbHMgPSBvcHRzLnByb3RvY29scztcbiAgaWYgKCF0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgIFdlYlNvY2tldEltcGwgPSBOb2RlV2ViU29ja2V0O1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKlxuICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeVxuICovXG5cbldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogT3BlbnMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdXJpID0gdGhpcy51cmkoKTtcbiAgdmFyIHByb3RvY29scyA9IHRoaXMucHJvdG9jb2xzO1xuICB2YXIgb3B0cyA9IHtcbiAgICBhZ2VudDogdGhpcy5hZ2VudCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZVxuICB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG4gIH1cbiAgaWYgKHRoaXMubG9jYWxBZGRyZXNzKSB7XG4gICAgb3B0cy5sb2NhbEFkZHJlc3MgPSB0aGlzLmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy53cyA9XG4gICAgICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCAmJiAhdGhpcy5pc1JlYWN0TmF0aXZlXG4gICAgICAgID8gcHJvdG9jb2xzXG4gICAgICAgICAgPyBuZXcgV2ViU29ja2V0SW1wbCh1cmksIHByb3RvY29scylcbiAgICAgICAgICA6IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSlcbiAgICAgICAgOiBuZXcgV2ViU29ja2V0SW1wbCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uT3BlbigpO1xuICB9O1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH07XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTtcbiAgfTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gIHZhciB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXRJbXBsICYmICEoJ19faW5pdGlhbGl6ZScgaW4gV2ViU29ja2V0SW1wbCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcblxuZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgIHZhciBhcnJheSA9IFtdXG5cbiAgICBpbmRleCA9IGluZGV4IHx8IDBcblxuICAgIGZvciAodmFyIGkgPSBpbmRleCB8fCAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpIC0gaW5kZXhdID0gbGlzdFtpXVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheVxufVxuIiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iLCJleHBvcnRzLmVuZGlhbm5lc3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnTEUnIH07XG5cbmV4cG9ydHMuaG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmhvc3RuYW1lXG4gICAgfVxuICAgIGVsc2UgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0cy5sb2FkYXZnID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfTtcblxuZXhwb3J0cy51cHRpbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAwIH07XG5cbmV4cG9ydHMuZnJlZW1lbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG5cbmV4cG9ydHMudG90YWxtZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG59O1xuXG5leHBvcnRzLmNwdXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXSB9O1xuXG5leHBvcnRzLnR5cGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnQnJvd3NlcicgfTtcblxuZXhwb3J0cy5yZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmFwcFZlcnNpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbn07XG5cbmV4cG9ydHMubmV0d29ya0ludGVyZmFjZXNcbj0gZXhwb3J0cy5nZXROZXR3b3JrSW50ZXJmYWNlc1xuPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7fSB9O1xuXG5leHBvcnRzLmFyY2ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnamF2YXNjcmlwdCcgfTtcblxuZXhwb3J0cy5wbGF0Zm9ybSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdicm93c2VyJyB9O1xuXG5leHBvcnRzLnRtcGRpciA9IGV4cG9ydHMudG1wRGlyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnL3RtcCc7XG59O1xuXG5leHBvcnRzLkVPTCA9ICdcXG4nO1xuXG5leHBvcnRzLmhvbWVkaXIgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAnLydcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0TWVzc2FnZSB7XG4gIC8vIEhBTkRMRV9BUElfQU5EX0NMSUVOVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9BUElfQU5EX0NMSUVOVCgpIHtcbiAgICByZXR1cm4gXCJIQU5ETEVfQVBJX0FORF9DTElFTlRcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJBUElfVE9fQ0xJRU5UX1RZUEVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENMSUVOVF9UT19BUElfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJDTElFTlRfVE9fQVBJX1RZUEVcIjtcbiAgfVxuXG4gIC8vIEhBTkRMRV9BUElfQU5EX0VYVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9FWFRfQU5EX0FQSSgpIHtcbiAgICByZXR1cm4gXCJib290QXBpXCI7XG4gIH1cbiAgc3RhdGljIGdldCBNRURJQV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJNRURJQV9UT19DTElFTlRfVFlQRVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgRVhUX1RPX0FQSV9UWVBFKCkge1xuICAgIHJldHVybiBcIkVYVF9UT19BUElfVFlQRVwiO1xuICB9XG5cbiAgLy8gSEFORExFX0NMSUVOVF9BTkRfRVhUXG4gIHN0YXRpYyBnZXQgSEFORExFX0VYVF9BTkRfQ0xJRU5UKCkge1xuICAgIHJldHVybiBcImJvb3RFeHRlbnNpb25cIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENMSUVOVF9UT19FWFRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJDTElFTlRfVE9fRVhUX1RZUEVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEVYVF9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJFWFRfVE9fQ0xJRU5UX1RZUEVcIjtcbiAgfVxufVxuIiwiaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFVzZXIgZnJvbSBcImFwaS9zdG9yZS9Vc2VyXCI7XG5pbXBvcnQgUmFuayBmcm9tIFwiYXBpL3N0b3JlL1JhbmtcIjtcbmltcG9ydCBNZW51TG9ncyBmcm9tIFwiYXBpL3N0b3JlL01lbnVMb2dzXCI7XG5pbXBvcnQgUG9zdHMgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1wiO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrXCI7XG5pbXBvcnQgQW5hbHl6ZSBmcm9tIFwiYXBpL3N0b3JlL0FuYWx5emVcIjtcbmltcG9ydCBCb290T3B0aW9uIGZyb20gXCJhcGkvc3RvcmUvQm9vdE9wdGlvblwiO1xuaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuaW1wb3J0IEFjdGlvbkxvZyBmcm9tIFwiYXBpL3N0b3JlL0FjdGlvbkxvZ3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpU3RhdGUge1xuICByYW5rOiBSYW5rO1xuICBtZW51TG9nczogTWVudUxvZ3M7XG4gIHBvc3RzOiBQb3N0cztcbiAgcG9zdHNNdWx0aTogUG9zdHM7XG4gIHBvc3RzU2luZ2xlOiBQb3N0cztcbiAgcG9zdHNDaGlsZDogUG9zdHM7XG4gIHBvc3RzVGltZWxpbmU6IFBvc3RzVGltZWxpbmU7XG4gIHBvc3RzVGltZWxpbmVTdG9jazogUG9zdHNUaW1lbGluZVN0b2NrO1xuICBwb3N0c0xvZ3M6IFBvc3RzO1xuICBhbmFseXplOiBBbmFseXplO1xuICBib290T3B0aW9uOiBCb290T3B0aW9uO1xuICB0aHJlYWRzOiBbVGhyZWFkXTtcbiAgdGhyZWFkOiBUaHJlYWQ7XG4gIHRocmVhZERldGFpbDogVGhyZWFkO1xuICBhcHA6IEFwcDtcbiAgdXNlcjogVXNlcjtcbiAgYWN0aW9uTG9nOiBBY3Rpb25Mb2c7XG4gIGNvbnN0cnVjdG9yKHdpbmRvdzogYW55LCBib290T3B0aW9uOiBhbnkgPSB7fSwgY2FjaGVzOiBhbnkgPSB7fSkge1xuICAgIHRoaXMucmFuayA9IG5ldyBSYW5rKCk7XG4gICAgdGhpcy5tZW51TG9ncyA9IG5ldyBNZW51TG9ncyhjYWNoZXMubWVudUxvZ3MpO1xuICAgIHRoaXMucG9zdHMgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLnBvc3RzTXVsdGkgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLnBvc3RzU2luZ2xlID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c0NoaWxkID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICB0aGlzLnBvc3RzVGltZWxpbmVTdG9jayA9IG5ldyBQb3N0c1RpbWVsaW5lU3RvY2soKTtcbiAgICB0aGlzLnBvc3RzTG9ncyA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMuYW5hbHl6ZSA9IG5ldyBBbmFseXplKCk7XG4gICAgdGhpcy5ib290T3B0aW9uID0gbmV3IEJvb3RPcHRpb24oYm9vdE9wdGlvbik7XG4gICAgdGhpcy50aHJlYWQgPSBuZXcgVGhyZWFkKHdpbmRvdywgdGhpcy5ib290T3B0aW9uLCBjYWNoZXMudGhyZWFkKTtcbiAgICB0aGlzLnRocmVhZERldGFpbCA9IG5ldyBUaHJlYWQod2luZG93LCB0aGlzLmJvb3RPcHRpb24sIGNhY2hlcy50aHJlYWQpO1xuICAgIHRoaXMuYXBwID0gbmV3IEFwcChBcGlTdGF0ZS5nZXRBcHBQYXJhbXModGhpcy50aHJlYWQsIHRoaXMuYm9vdE9wdGlvbiwgY2FjaGVzKSk7XG4gICAgdGhpcy51c2VyID0gbmV3IFVzZXIoQXBpU3RhdGUuZ2V0VXNlclBhcmFtcyh0aGlzLCBjYWNoZXMpKTtcbiAgICB0aGlzLmFjdGlvbkxvZyA9IG5ldyBBY3Rpb25Mb2coKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBcHBQYXJhbXModGhyZWFkLCBib290T3B0aW9uLCBjYWNoZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgcm9vdFRpdGxlOiB0aHJlYWQudGl0bGUsXG4gICAgICAuLi5ib290T3B0aW9uLFxuICAgICAgLi4udGhyZWFkLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0VXNlclBhcmFtcyhzZWxmLCBjYWNoZXMpIHtcbiAgICBpZiAoY2FjaGVzICYmIGNhY2hlcy51c2VyICYmIGNhY2hlcy51c2VyLnVpZCkge1xuICAgICAgcmV0dXJuIHsgLi4uY2FjaGVzLnVzZXIgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlzcFRocmVhZFR5cGUgPSBzZWxmLnRocmVhZC5jaCA9PT0gc2VsZi5hcHAucm9vdENoID8gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgOiBBcHAuZGlzcFRocmVhZFR5cGVTaW5nbGU7XG4gICAgICByZXR1cm4geyBkaXNwVGhyZWFkVHlwZSB9O1xuICAgIH1cbiAgfVxuXG4gIGdldCBhcHBOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmFwcC5uYW1lO1xuICB9XG5cbiAgZ2V0IHRhbGtuSW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwLnRhbGtuSW5kZXg7XG4gIH1cblxuICBnZXQgY2goKSB7XG4gICAgcmV0dXJuIHRoaXMudGhyZWFkLmNoO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmsgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICAgIC8vICAgIHJldHVybiB0aGlzLmNyZWF0ZShwYXJhbXMpO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVMb2dzIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSBbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDogW107XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHBhcmFtcyk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RNdWx0aSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uTG9ncyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVibGljQXBpIHtcbiAgY29uc3RydWN0b3IoY29yZUFwaSkge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXI6IFwiMjAyMC8wNi8wNFwiLFxuICAgICAgdHVuZTogKGNoOiBzdHJpbmcsIGJyb2FkY2FzdENhbGxiYWNrOiBGdW5jdGlvbikgPT4gY29yZUFwaS50dW5lKHsgdGhyZWFkOiB7IGNoIH0gfSwgYnJvYWRjYXN0Q2FsbGJhY2spLFxuICAgICAgcmFuazogKGNoOiBzdHJpbmcsIGVtaXRDYWxsYmFjazogRnVuY3Rpb24pID0+IGNvcmVBcGkucmFuayh7IHRocmVhZDogeyBjaCB9IH0sIGVtaXRDYWxsYmFjayksXG4gICAgICBmZXRjaFBvc3RzOiAoY2g6IHN0cmluZywgZW1pdENhbGxiYWNrOiBGdW5jdGlvbikgPT4gY29yZUFwaS5mZXRjaFBvc3RzKHsgdGhyZWFkOiB7IGNoIH0gfSwgZW1pdENhbGxiYWNrKSxcbiAgICAgIHBvc3Q6IChwYXJhbXMgPSB7fSwgZW1pdENhbGxiYWNrOiBGdW5jdGlvbikgPT4gY29yZUFwaS5wb3N0KHBhcmFtcywgZW1pdENhbGxiYWNrKSxcbiAgICAgIGdldFN0YXRlOiAoKSA9PiBjb3JlQXBpLmFwaVN0b3JlLmdldFN0YXRlKCksXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IGFwaVJlZHVjZXJzIGZyb20gXCJhcGkvcmVkdWNlcnNcIjtcbmltcG9ydCBtaWRkbGV3YXJlIGZyb20gXCJhcGkvbWlkZGxld2FyZS9cIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgTW9kdWxlIHtcbiAgICBob3Q6IGFueTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcGlTdG9yZShpbml0aWFsU3RhdGUgPSB7fSkge1xuICBsZXQgY29tcG9zZUVuaGFuY2VycyA9IG51bGw7XG4gIGxldCBtaWRkbGV3YXJlcyA9IFttaWRkbGV3YXJlLnVwZGF0ZUFjdGlvbl07XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgYXBpUmVkdWNlcnMsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGNvbXBvc2VFbmhhbmNlcnMgPyBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykpIDogYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKVxuICApO1xuXG4gIGlmIChtb2R1bGUuaG90KSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuLi9yZWR1Y2Vyc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0UmVkdWNlciA9IHJlcXVpcmUoXCIuLi9yZWR1Y2Vyc1wiKTtcbiAgICAgIHN0b3JlLnJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RvcmU7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgYXBwIGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHVzZXIgZnJvbSBcIi4vdXNlclwiO1xuaW1wb3J0IHJhbmsgZnJvbSBcIi4vcmFua1wiO1xuaW1wb3J0IHRocmVhZCBmcm9tIFwiLi90aHJlYWRcIjtcbmltcG9ydCB0aHJlYWRzIGZyb20gXCIuL3RocmVhZHNcIjtcbmltcG9ydCB0aHJlYWREZXRhaWwgZnJvbSBcIi4vdGhyZWFkRGV0YWlsXCI7XG5pbXBvcnQgYW5hbHl6ZSBmcm9tIFwiLi9hbmFseXplXCI7XG5pbXBvcnQgYm9vdE9wdGlvbiBmcm9tIFwiLi9ib290T3B0aW9uXCI7XG5pbXBvcnQgc2V0dGluZyBmcm9tIFwiLi9zZXR0aW5nXCI7XG5pbXBvcnQgcG9zdHMgZnJvbSBcIi4vcG9zdHNcIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lIGZyb20gXCIuL3Bvc3RzVGltZWxpbmVcIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lU3RvY2sgZnJvbSBcIi4vcG9zdHNUaW1lbGluZVN0b2NrXCI7XG5pbXBvcnQgcG9zdHNUaW1lbGluZVplcm8gZnJvbSBcIi4vcG9zdHNUaW1lbGluZVplcm9cIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIGZyb20gXCIuL3Bvc3RzVGltZWxpbmVaZXJvQWZ0ZXJcIjtcbmltcG9ydCBwb3N0c011bHRpIGZyb20gXCIuL3Bvc3RzTXVsdGlcIjtcbmltcG9ydCBwb3N0c1NpbmdsZSBmcm9tIFwiLi9wb3N0c1NpbmdsZVwiO1xuaW1wb3J0IHBvc3RzQ2hpbGQgZnJvbSBcIi4vcG9zdHNDaGlsZFwiO1xuaW1wb3J0IGFjdGlvbmVkIGZyb20gXCIuL2FjdGlvbmVkXCI7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyRmlsZXMgPSB7XG4gIGFwcCxcbiAgdXNlcixcbiAgcmFuayxcbiAgdGhyZWFkLFxuICB0aHJlYWRzLFxuICB0aHJlYWREZXRhaWwsXG4gIGFuYWx5emUsXG4gIGJvb3RPcHRpb24sXG4gIHNldHRpbmcsXG4gIHBvc3RzLFxuICBwb3N0c1RpbWVsaW5lLFxuICBwb3N0c1RpbWVsaW5lU3RvY2ssXG4gIHBvc3RzVGltZWxpbmVaZXJvLFxuICBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyLFxuICBwb3N0c011bHRpLFxuICBwb3N0c1NpbmdsZSxcbiAgcG9zdHNDaGlsZCxcbiAgYWN0aW9uZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMocmVkdWNlckZpbGVzKTtcbiIsImltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IEFwcCgpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5hcHAgPyBuZXcgQXBwKGFjdGlvbi5hcHApIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFVzZXIgZnJvbSBcImFwaS9zdG9yZS9Vc2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBVc2VyKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnVzZXIgPyBzdGF0ZS5tZXJnZShhY3Rpb24udXNlcikgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdHMgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1wiO1xuaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBbXSwgYWN0aW9uKSA9PiB7XG4gIGxldCBwb3N0cyA9IFtdO1xuICBsZXQgcG9zdExlbmd0aCA9IDA7XG4gIGNvbnN0IHNvcnRXYXRjaENudCA9IChhLCBiKSA9PiB7XG4gICAgaWYgKGEuY2ggPT09IGFjdGlvbi5hcHAucm9vdENoIHx8IGIuY2ggPT09IGFjdGlvbi5hcHAucm9vdENoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGEud2F0Y2hDbnQgPCBiLndhdGNoQ250KSByZXR1cm4gMTtcbiAgICBpZiAoYS53YXRjaENudCA+IGIud2F0Y2hDbnQpIHJldHVybiAtMTtcbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1wiOlxuICAgICAgaWYgKGFjdGlvbi5hcHAuaXNMaW5rQ2gpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICBwb3N0cyA9IFBvc3RzLmdldERpc3BQb3N0cyhhY3Rpb24pO1xuICAgICAgcG9zdExlbmd0aCA9IHBvc3RzICYmIHBvc3RzLmxlbmd0aCA/IGFjdGlvbi5wb3N0cy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAocG9zdExlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZS5tYXAoKG1pKSA9PiB7XG4gICAgICAgIGlmIChhY3Rpb24udGhyZWFkLmNoID09PSBtaS5jaCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5taSxcbiAgICAgICAgICAgIGZhdmljb246IHBvc3RzW3Bvc3RMZW5ndGggLSAxXS5mYXZpY29uLFxuICAgICAgICAgICAgc3RhbXBJZDogcG9zdHNbcG9zdExlbmd0aCAtIDFdLnN0YW1wSWQsXG4gICAgICAgICAgICBwb3N0OiBwb3N0c1twb3N0TGVuZ3RoIC0gMV0ucG9zdCxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtaTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpmZXRjaFBvc3RzXCI6XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmRpc2Nvbm5lY3RcIjpcbiAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFthY3Rpb24udGhyZWFkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAgIC5tYXAoKG1pKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnRocmVhZC5jaCA9PT0gbWkuY2gpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubWksIHdhdGNoQ250OiBhY3Rpb24udGhyZWFkLndhdGNoQ250IH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc29ydChzb3J0V2F0Y2hDbnQpO1xuICAgICAgfVxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgcmV0dXJuIHN0YXRlLm1hcCgobWkpID0+IHtcbiAgICAgICAgLy8gcm9vdENoXG4gICAgICAgIGlmIChhY3Rpb24uYXBwLnJvb3RDaCA9PT0gbWkuY2gpIHtcbiAgICAgICAgICBpZiAoYWN0aW9uLmFwcC5tdWx0aXN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4ubWksXG4gICAgICAgICAgICAgIHRpdGxlOiBhY3Rpb24ucG9zdHNbMF0udGl0bGUsXG4gICAgICAgICAgICAgIHN0YW1wSWQ6IGFjdGlvbi5wb3N0c1swXS5zdGFtcElkLFxuICAgICAgICAgICAgICBmYXZpY29uOiBhY3Rpb24ucG9zdHNbMF0uZmF2aWNvbixcbiAgICAgICAgICAgICAgcG9zdDogYWN0aW9uLnBvc3RzWzBdLnBvc3QsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hpbGRDaFxuICAgICAgICBpZiAoYWN0aW9uLnBvc3RzWzBdLmNoID09PSBtaS5jaCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5taSxcbiAgICAgICAgICAgIHRpdGxlOiBhY3Rpb24ucG9zdHNbMF0udGl0bGUsXG4gICAgICAgICAgICBzdGFtcElkOiBhY3Rpb24ucG9zdHNbMF0uc3RhbXBJZCxcbiAgICAgICAgICAgIGZhdmljb246IGFjdGlvbi5wb3N0c1swXS5mYXZpY29uLFxuICAgICAgICAgICAgcG9zdDogYWN0aW9uLnBvc3RzWzBdLnBvc3QsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWk7XG4gICAgICB9KTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpyYW5rXCI6XG4gICAgICBpZiAoc3RhdGUgJiYgc3RhdGUubGVuZ3RoID09PSAxICYmIGFjdGlvbi5yYW5rICYmIGFjdGlvbi5yYW5rLmxlbmd0aCA+IDApIHtcblxuICAgICAgICBjb25zdCBuZXdSYW5rcyA9IFtdO1xuICAgICAgICBjb25zdCByYW5rQ250ID0gYWN0aW9uLnJhbmsubGVuZ3RoO1xuICAgICAgICBsZXQgbGFzdFBvc3QgPSBhY3Rpb24ucmFua1swXTtcbiAgICAgICAgZm9yKCBsZXQgaSA9IDA7IGkgPCByYW5rQ250OyBpKysgKXtcbiAgICAgICAgICBsZXQgbmV3UmFuayA9IGFjdGlvbi5yYW5rW2ldO1xuICAgICAgICAgIGxhc3RQb3N0ID0gbmV3UmFuay51cGRhdGVUaW1lID4gbGFzdFBvc3QudXBkYXRlVGltZSA/IG5ld1JhbmsgOiBsYXN0UG9zdDtcblxuICAgICAgICAgIGlmIChuZXdSYW5rLmNoID09PSBzdGF0ZVswXS5jaCkge1xuICAgICAgICAgICAgbmV3UmFuayA9IHsgXG4gICAgICAgICAgICAgIC4uLm5ld1JhbmssXG4gICAgICAgICAgICAgIHdhdGNoQ250OiBzdGF0ZVswXS53YXRjaENudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1JhbmtzLnB1c2gobmV3UmFuayk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbmV3UmFua3Muc29ydChzb3J0V2F0Y2hDbnQpO1xuICAgICAgICBuZXdSYW5rc1swXS5mYWljb24gPSBsYXN0UG9zdC5mYXZpY29uO1xuICAgICAgICBuZXdSYW5rc1swXS5wb3N0ID0gbGFzdFBvc3QucG9zdDtcbiAgICAgICAgbmV3UmFua3NbMF0uc3RhbXBJZCA9IGxhc3RQb3N0LnN0YW1wSWQ7XG4gICAgICAgIHJldHVybiBuZXdSYW5rcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24ucmFuayA/IGFjdGlvbi5yYW5rIDogc3RhdGU7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucmFuayA/IGFjdGlvbi5yYW5rIDogc3RhdGU7XG4gIH1cbn07XG4iLCJpbXBvcnQgVGhyZWFkIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBUaHJlYWQoe30sIHt9LCB7fSksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnRocmVhZCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWQpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFRocmVhZHMgZnJvbSBcImFwaS9zdG9yZS9UaHJlYWRzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBUaHJlYWRzKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnRocmVhZHMgPyBzdGF0ZS5tZXJnZShhY3Rpb24udGhyZWFkcykgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgVGhyZWFkIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBUaHJlYWQoe30sIHt9LCB7fSksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnRocmVhZERldGFpbCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWREZXRhaWwpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IEFuYWx5emUgZnJvbSBcImFwaS9zdG9yZS9BbmFseXplXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBBbmFseXplKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmFuYWx5emUgPyBzdGF0ZS5tZXJnZShhY3Rpb24uYW5hbHl6ZSkgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgQm9vdE9wdGlvbiBmcm9tIFwiYXBpL3N0b3JlL0Jvb3RPcHRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IEJvb3RPcHRpb24oKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24uYm9vdE9wdGlvbiA/IHN0YXRlLm1lcmdlKGFjdGlvbi5ib290T3B0aW9uKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBTZXR0aW5nIGZyb20gXCJhcGkvc3RvcmUvU2V0dGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgU2V0dGluZygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5zZXR0aW5nID8gc3RhdGUubWVyZ2UoYWN0aW9uLnNldHRpbmcpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dGluZyBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGNsaWVudCA9IHBhcmFtcyAmJiBwYXJhbXMuY2xpZW50ID8gcGFyYW1zLmNsaWVudCA6IHt9O1xuICAgIGNvbnN0IGNvbW1vbiA9IHBhcmFtcyAmJiBwYXJhbXMuY29tbW9uID8gcGFyYW1zLmNvbW1vbiA6IHt9O1xuICAgIGNvbnN0IHNlcnZlciA9IHBhcmFtcyAmJiBwYXJhbXMuc2VydmVyID8gcGFyYW1zLnNlcnZlciA6IHt9O1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICBjbGllbnQsXG4gICAgICBjb21tb24sXG4gICAgICBzZXJ2ZXJcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3RzIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFBvc3RzKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnBvc3RzID8gbmV3IFBvc3RzKGFjdGlvbi5wb3N0cykgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdHNUaW1lbGluZSBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBhbnkgPSBuZXcgUG9zdHNUaW1lbGluZSgpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZFwiOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0c1RpbWVsaW5lKCk7XG4gICAgY2FzZSBcIlVOTU9VTlRfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIHJldHVybiBzdGF0ZS5tYXAoKHB0KSA9PiB7XG4gICAgICAgIHB0LmRpc3BGbGcgPSBwdC5jdXJyZW50VGltZSA8PSBhY3Rpb24ubWVkaWFDdXJyZW50VGltZTtcbiAgICAgICAgcmV0dXJuIHB0O1xuICAgICAgfSk7XG4gICAgY2FzZSBcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzVGltZWxpbmUgJiYgYWN0aW9uLnBvc3RzVGltZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiTkVYVF9QT1NUU19USU1FTElORVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBSRVZfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNUaW1lbGluZSAmJiBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICBpZiAoXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmVbMF0udWlkID09PSBhY3Rpb24udXNlci51aWQgJiZcbiAgICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmVbMF0uY2ggPT09IGFjdGlvbi50aHJlYWQuY2hcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzVGltZWxpbmUgJiYgYWN0aW9uLnBvc3RzVGltZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lLCAuLi5zdGF0ZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3RzVGltZWxpbmVTdG9jayBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9ja1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IGFueSA9IG5ldyBQb3N0c1RpbWVsaW5lU3RvY2soKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrXSA6IHN0YXRlO1xuICAgIGNhc2UgXCJDTEVBUl9QT1NUU19USU1FTElORVwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2tdIDogc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrID8gbmV3IFBvc3RzVGltZWxpbmVTdG9jayhhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFBvc3RUaW1lbGluZVplcm8gZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IGFueSA9IG5ldyBQb3N0VGltZWxpbmVaZXJvKCksIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9dIDogc3RhdGU7XG4gICAgY2FzZSBcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9dIDogc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm8gPyBuZXcgUG9zdFRpbWVsaW5lWmVybyhhY3Rpb24ucG9zdHNUaW1lbGluZVplcm8pIDogc3RhdGU7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0VGltZWxpbmVaZXJvIHtcbiAgY29uc3RydWN0b3IocGFyYW1zID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdHNUaW1lbGluZVplcm9BZnRlciBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVaZXJvQWZ0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBhbnkgPSBuZXcgUG9zdHNUaW1lbGluZVplcm9BZnRlcigpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlcl0gOiBzdGF0ZTtcbiAgICBjYXNlIFwiQ0xFQVJfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXJdIDogc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IG5ldyBQb3N0c1RpbWVsaW5lWmVyb0FmdGVyKGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFRpbWVsaW5lT3RoZXJUaGFuWmVybyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3RzIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNcIjtcbmltcG9ydCBjb25mIGZyb20gXCJjb21tb24vY29uZlwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IGFueSA9IG5ldyBQb3N0cygpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJPTl9DTElDS19NVUxUSVNUUkVBTVwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c011bHRpO1xuICAgIGNhc2UgXCJDTElFTlRfVE9fU0VSVkVSW0VNSVRdOmNoYW5nZVRocmVhZFwiOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0cygpO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNNdWx0aSAmJiBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24uYXBwLmlzUm9vdENoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNNdWx0aV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c011bHRpICYmIGFjdGlvbi5wb3N0c011bHRpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFjdGlvbi5hcHAucm9vdENoID09PSBhY3Rpb24udGhyZWFkLmNoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzTXVsdGldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzTXVsdGkgJiYgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbW9yZVBvc3RNdWxpdCA9IFtdO1xuXG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggKyBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiBjb25mLmZpbmRPbmVMaW1pdENudCkge1xuICAgICAgICAgIG1vcmVQb3N0TXVsaXQgPSBbLi4uYWN0aW9uLnBvc3RzTXVsdGksIC4uLnN0YXRlXTtcbiAgICAgICAgICByZXR1cm4gbW9yZVBvc3RNdWxpdC5zbGljZSgwLCBjb25mLmZpbmRPbmVMaW1pdENudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNNdWx0aSwgLi4uc3RhdGVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3RzU2luZ2xlIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNTaW5nbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBhbnkgPSBuZXcgUG9zdHNTaW5nbGUoKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiT05fQ0xJQ0tfTVVMVElTVFJFQU1cIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNTaW5nbGU7XG4gICAgY2FzZSBcIkFQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkXCI6XG4gICAgICByZXR1cm4gbmV3IFBvc3RzU2luZ2xlKCk7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1wiOlxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1NpbmdsZSAmJiBhY3Rpb24ucG9zdHNTaW5nbGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNTaW5nbGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1NpbmdsZSAmJiBhY3Rpb24ucG9zdHNTaW5nbGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c1NpbmdsZSwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0cyBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogYW55ID0gbmV3IFBvc3RzKCksIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIkFQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkXCI6XG4gICAgICByZXR1cm4gbmV3IFBvc3RzKCk7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1wiOlxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c0NoaWxkICYmIGFjdGlvbi5wb3N0c0NoaWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IGFjdGlvbi5wb3N0c1swXS5jaCkge1xuICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c0NoaWxkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c0NoaWxkICYmIGFjdGlvbi5wb3N0c0NoaWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNDaGlsZCwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IFthY3Rpb24udHlwZSwgLi4uc3RhdGVdO1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFBvc3RzIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNcIjtcbmltcG9ydCBUaHJlYWQgZnJvbSBcImFwaS9zdG9yZS9UaHJlYWRcIjtcbmltcG9ydCBUaHJlYWRzIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkc1wiO1xuaW1wb3J0IHN0b3JhZ2UgZnJvbSBcImFwaS9tYXBUb1N0YXRlVG9Qcm9wcy9zdG9yYWdlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlQWN0aW9uOiAoc3RvcmUpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIGFjdGlvbi5hcHAgPSBhY3Rpb24uYXBwID8geyAuLi5zdGF0ZS5hcHAsIC4uLmFjdGlvbi5hcHAgfSA6IHN0YXRlLmFwcDtcbiAgICAgIGFjdGlvbi5hcHAuYWN0aW9uZWQgPSBhY3Rpb24udHlwZTtcbiAgICB9XG5cbiAgICBpZiAoZnVuY3Rpb25zW2FjdGlvbi50eXBlXSkge1xuICAgICAgYWN0aW9uID0gZnVuY3Rpb25zW2FjdGlvbi50eXBlXShzdGF0ZSwgYWN0aW9uKTtcbiAgICB9XG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgbmV4dChhY3Rpb24pO1xuICAgIH1cbiAgfSxcbn07XG5cbmNvbnN0IGZ1bmN0aW9ucyA9IHtcbiAgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06ZmV0Y2hQb3N0c1wiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAudHVuZWQgPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTp1cGRhdGVUaHJlYWRcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwW2BvZmZzZXQke2FjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGV9RmluZElkYF0gPSBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLmRldGFpbENoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24uYXBwLmRlc2MgPSBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzLnRpdGxlO1xuICAgIGFjdGlvbi5hcHAuaXNSb290Q2ggPSBhY3Rpb24uYXBwLnJvb3RDaCA9PT0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24uYXBwLmlzTWVkaWFDaCA9IEFwcC5nZXRJc01lZGlhQ2goYWN0aW9uLnRocmVhZC5jaCk7XG4gICAgYWN0aW9uLmFwcC5pc1RvZ2dsZU11bHRpc3RyZWFtID0gZmFsc2U7XG4gICAgYWN0aW9uID0geyAuLi5Qb3N0cy5nZXRBbnlBY3Rpb25Qb3N0cyhhY3Rpb24sIHN0YXRlKSB9O1xuICAgIGFjdGlvbi50aHJlYWQudGl0bGUgPSBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzLnRpdGxlO1xuICAgIGFjdGlvbi50aHJlYWQuaGFzU2xhc2ggPSBTY2hlbWEuZ2V0Qm9vbChhY3Rpb24udGhyZWFkLmhhc1NsYXNoKTtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgaWYgKGFjdGlvbi5hcHAuaXNSb290Q2gpIHtcbiAgICAgIGFjdGlvbi5hcHAucm9vdFRpdGxlID0gYWN0aW9uLnRocmVhZC50aXRsZTtcbiAgICB9XG4gICAgaWYgKGFjdGlvbi5hcHAuaXNNZWRpYUNoKSB7XG4gICAgICBjb25zdCBzcmMgPSBBcHAuZ2V0TWVkaWFTcmMoYWN0aW9uLnRocmVhZC5wcm90b2NvbCwgYWN0aW9uLnRocmVhZC5jaCk7XG4gICAgICBhY3Rpb24uYXBwLmNoVHlwZSA9IEFwcC5nZXRNZWRpYVR5cGVGcm9tU3JjKHNyYyk7XG4gICAgICBhY3Rpb24gPSBzdG9yYWdlLnNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFjdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvbi5hcHAuY2hUeXBlID0gQXBwLm1lZGlhVGFnVHlwZU5vO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIkFQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcCA9IGFjdGlvbi5hcHAgPyB7IC4uLnN0YXRlLmFwcCwgLi4uYWN0aW9uLmFwcCB9IDogc3RhdGUuYXBwO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0RmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRUaW1lbGluZUZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0TXVsdGlGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldFNpbmdsZUZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldExvZ3NGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24udGhyZWFkID0gYWN0aW9uLnRocmVhZCA/IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH0gOiBzdGF0ZS50aHJlYWQ7XG4gICAgYWN0aW9uLnBvc3RzID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzTXVsdGkgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IG5ldyBQb3N0cygpO1xuICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzU2luZ2xlID0gbmV3IFBvc3RzKCk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgQ0xPU0VfTElOS1M6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcCA9IGFjdGlvbi5hcHAgPyB7IC4uLnN0YXRlLmFwcCwgLi4uYWN0aW9uLmFwcCB9IDogc3RhdGUuYXBwO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb24udGhyZWFkID8geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfSA6IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBzdGF0ZTtcbiAgICBjb25zdCBwb3N0TGVuZ3RoID0gYWN0aW9uLnBvc3RzLmxlbmd0aCAtIDE7XG4gICAgYWN0aW9uLmFwcC5pbnB1dFN0YW1wSWQgPSAwO1xuICAgIGFjdGlvbi51c2VyID0gdXNlcjtcblxuICAgIGNvbnN0IGVtb3Rpb25LZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uLnRocmVhZC5lbW90aW9ucyk7XG5cbiAgICBpZiAoYWN0aW9uLnRocmVhZC5jaCA9PT0gYWN0aW9uLnBvc3RzW3Bvc3RMZW5ndGhdLmNoICYmIGVtb3Rpb25LZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGFjdGlvbkVtb3Rpb25zID0geyAuLi5hY3Rpb24udGhyZWFkLmVtb3Rpb25zIH07XG4gICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zID0geyAuLi5zdGF0ZS50aHJlYWQuZW1vdGlvbnMgfTtcblxuICAgICAgT2JqZWN0LmtleXMoYWN0aW9uRW1vdGlvbnMpLmZvckVhY2goKGVtb3Rpb25Nb2RlbEtleSkgPT4ge1xuICAgICAgICBPYmplY3Qua2V5cyhhY3Rpb25FbW90aW9uc1tlbW90aW9uTW9kZWxLZXldKS5mb3JFYWNoKChlbW90aW9uS2V5KSA9PiB7XG4gICAgICAgICAgYWN0aW9uLnRocmVhZC5lbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldID1cbiAgICAgICAgICAgIGFjdGlvbi50aHJlYWQuZW1vdGlvbnNbZW1vdGlvbk1vZGVsS2V5XVtlbW90aW9uS2V5XSArIGFjdGlvbkVtb3Rpb25zW2Vtb3Rpb25Nb2RlbEtleV1bZW1vdGlvbktleV07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvbi50aHJlYWQuZW1vdGlvbnMgPSBzdGF0ZS50aHJlYWQuZW1vdGlvbnM7XG4gICAgfVxuICAgIGFjdGlvbiA9IFBvc3RzLmdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHM6IGFjdGlvbi5wb3N0cyB9KTtcbiAgICBhY3Rpb24uYXBwW2BvZmZzZXQke2FjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGV9RmluZElkYF0gPSBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24gPSBQb3N0cy5nZXRBbnlBY3Rpb25Qb3N0cyhhY3Rpb24sIHN0YXRlKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIkFQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkRGV0YWlsXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgZGVsZXRlIGFjdGlvbi50aHJlYWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmNoYW5nZVRocmVhZERldGFpbFwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuZGV0YWlsQ2ggPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi50aHJlYWRzID0gVGhyZWFkcy5nZXRNZXJnZWRUaHJlYWRzKHN0YXRlLnRocmVhZHMsIGFjdGlvbi50aHJlYWQpO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLnRpdGxlID0gYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcy50aXRsZTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmVtb3Rpb25zID0geyAuLi5zdGF0ZS50aHJlYWRzW2FjdGlvbi5hcHAuZGV0YWlsQ2hdLmVtb3Rpb25zIH07XG4gICAgY29uc29sZS5sb2coYWN0aW9uLnRocmVhZERldGFpbC5lbW90aW9ucy5ydXNzZWxsU2ltcGxlKTtcbiAgICAvLyBUT0RPIOWPpOOBhOS7leanmOOBoOOBqGhhc1NsYXNo44GM5qC857SN44GV44KM44Gm44GE44Gq44GEY29sbGVjdGlvbuOBjOWtmOWcqOOBmeOCi1xuICAgIC8vIGhhc1NsYXNo44GvbG9jYXRpb27jgYzlj4LnhafjgafjgY3jgarjgYRQT1JUQUzjgaDjgajmraPjgZfjgYTlgKTjgpLlj5blvpflh7rmnaXjgarjgYTjgZ/jgoHjgIFcbiAgICAvLyDmi6HlvLXmqZ/og73jgafjga9HRVRfQ0xJRU5UX01FVEFT44KS5a6f6KGM44GX44Gm5q2j44GX44GE5YCk44KS44K144O844OQ44O844Gr5rih44GX44Gm5pu05paw44GX44Gm44KE44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID09PSBudWxsID8gdHJ1ZSA6IFNjaGVtYS5nZXRCb29sKGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2gpO1xuICAgIGRlbGV0ZSBhY3Rpb24udGhyZWFkO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb247XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgT05fQ0xJQ0tfVE9fTVVMVElfVEhSRUFEOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuaXNMaW5rQ2ggPSBmYWxzZTtcbiAgICBhY3Rpb24uYXBwLmlzUm9vdENoID0gYWN0aW9uLnRocmVhZC5jaCA9PT0gc3RhdGUuYXBwLnJvb3RDaDtcblxuICAgIGlmIChzdGF0ZS50aHJlYWRzW2FjdGlvbi50aHJlYWQuY2hdKSB7XG4gICAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkc1thY3Rpb24udGhyZWFkLmNoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgT05fQ0xJQ0tfVE9fVElNRUxJTkVfVEhSRUFEOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IGNoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24udGhyZWFkID0geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBhY3Rpb24udGhyZWFkLmNoID0gY2g7XG4gICAgY29uc3Qgc3JjID0gQXBwLmdldE1lZGlhU3JjKGFjdGlvbi50aHJlYWQucHJvdG9jb2wsIGFjdGlvbi50aHJlYWQuY2gpO1xuICAgIGFjdGlvbi50aHJlYWQuZmluZFR5cGUgPSBUaHJlYWQuZ2V0RmluZFR5cGVGcm9tU3JjKHNyYyk7XG4gICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBbXTtcbiAgICBhY3Rpb24uYXBwLmlzTWVkaWFDaCA9IHRydWU7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldENoaWxkRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgT05fQ0xJQ0tfVE9fU0lOR0xFX1RIUkVBRDogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkID0geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBhY3Rpb24uYXBwID0gc3RhdGUuYXBwO1xuICAgIGFjdGlvbi5hcHAuaXNMaW5rQ2ggPSBmYWxzZTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBPTl9DTElDS19UT19DSElMRF9USFJFQUQ6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBbXTtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBPTl9DTElDS19NRU5VOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuZGVzYyA9IGFjdGlvbi51aS5tZW51Q29tcG9uZW50O1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFJFU0laRV9FTkRfV0lORE9XOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWQgPSBzdGF0ZS50aHJlYWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgT05fQ0xJQ0tfVE9HR0xFX0RJU1BfREVUQUlMOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIC8vIFRPRE8g5Y+k44GE5LuV5qeY44Gg44GoaGFzU2xhc2jjgYzmoLzntI3jgZXjgozjgabjgYTjgarjgYRjb2xsZWN0aW9u44GM5a2Y5Zyo44GZ44KLXG4gICAgLy8gaGFzU2xhc2jjga9sb2NhdGlvbuOBjOWPgueFp+OBp+OBjeOBquOBhFBPUlRBTOOBoOOBqOato+OBl+OBhOWApOOCkuWPluW+l+WHuuadpeOBquOBhOOBn+OCgeOAgVxuICAgIC8vIOaLoeW8teapn+iDveOBp+OBr0dFVF9DTElFTlRfTUVUQVPjgpLlrp/ooYzjgZfjgabmraPjgZfjgYTlgKTjgpLjgrXjg7zjg5Djg7zjgavmuKHjgZfjgabmm7TmlrDjgZfjgabjgoTjgovlv4XopoHjgYzjgYLjgovjgIJcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID1cbiAgICAgIGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2ggPT09IG51bGwgPyB0cnVlIDogU2NoZW1hLmdldEJvb2woYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgVE9HR0xFX0JVQkJMRV9QT1NUOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWQgPSBzdGF0ZS50aHJlYWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgU1RBUlRfTElOS19NRURJQTogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlzTGlua0NoID0gdHJ1ZTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBHRVRfQ0xJRU5UX01FVEFTOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGxldCB1cGRhdGVGbGcgPSBmYWxzZTtcbiAgICBsZXQgeyBjbGllbnRNZXRhcyB9ID0gYWN0aW9uO1xuICAgIGxldCB7IHNlcnZlck1ldGFzIH0gPSBzdGF0ZS50aHJlYWQ7XG4gICAgYWN0aW9uLnRocmVhZCA9IHt9O1xuXG4gICAgLy8gTWV0YXNcbiAgICBPYmplY3Qua2V5cyhjbGllbnRNZXRhcykuZm9yRWFjaCgoa2V5LCBpKSA9PiB7XG4gICAgICBpZiAoY2xpZW50TWV0YXNba2V5XSAmJiBjbGllbnRNZXRhc1trZXldICE9PSBcIlwiICYmIHNlcnZlck1ldGFzW2tleV0gIT09IGNsaWVudE1ldGFzW2tleV0pIHtcbiAgICAgICAgaWYgKCFhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzKSB7XG4gICAgICAgICAgYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUZsZyA9IHRydWU7XG4gICAgICAgIGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXNba2V5XSA9IGNsaWVudE1ldGFzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodXBkYXRlRmxnKSB7XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5zdGF0ZS50aHJlYWREZXRhaWwgfTtcbiAgICAgIGFjdGlvbi50aHJlYWREZXRhaWwuc2VydmVyTWV0YXMgPSB7XG4gICAgICAgIC4uLmFjdGlvbi50aHJlYWREZXRhaWwuc2VydmVyTWV0YXMsXG4gICAgICAgIC4uLmFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG4gIH0sXG59O1xuIiwiaW1wb3J0IGRlZmluZSBmcm9tIFwiY29tbW9uL2RlZmluZVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFVpIGZyb20gXCJjbGllbnQvc3RvcmUvVWlcIjtcbmltcG9ydCBUYWxrblNlc3Npb24gZnJvbSBcImNsaWVudC9vcGVyYXRpb25zL1RhbGtuU2Vzc2lvblwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjogc2V0U3RvcmFnZUh0bWxQb3N0cyxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmVcIjogc2V0U3RvcmFnZUh0bWxQb3N0cyxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjogKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgIC8vc2V0U3RvcmFnZVBvc3RzKCBzdGF0ZSwgcHJvcHMgKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmNoYW5nZVRocmVhZFwiOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHN0YXRlO1xuICAgIGNvbnN0IHsgcm9vdENoIH0gPSBhcHA7XG4gICAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gICAgY29uc3QgcG9zdEtleSA9IGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgPyBzdG9yYWdlS2V5LnBvc3RTaW5nbGUgOiBzdG9yYWdlS2V5LnBvc3RNdWx0aTtcbiAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5W3Bvc3RLZXldLCBbXSk7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0sXG4gIC8vICBcIk9OX19DTElDS19NVUxUSVNUUkVBTVwiOiBzZXRTdG9yYWdlUG9zdHMsXG4gIE9OX0NMSUNLX01FTlU6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHJvb3RDaCB9ID0gc3RhdGUuYXBwO1xuICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHJvb3RDaCwgZGVmaW5lLnN0b3JhZ2VLZXkuYXBwLCBzdGF0ZS5hcHApO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICBSRVNJWkVfRU5EX1dJTkRPVzogKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICBzZXRTdG9yYWdlUG9zdHMsXG4gIHNldFN0b3JhZ2VIdG1sUG9zdHMsXG4gIHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lLFxuICBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZSxcbiAgZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmVaZXJvLFxufTtcblxuZnVuY3Rpb24gc2V0U3RvcmFnZVBvc3RzKHN0YXRlLCBwcm9wcykge1xuICBjb25zdCB7IGFwcCB9ID0gc3RhdGU7XG4gIGlmIChhcHAuaXNNZWRpYUNoKSB7XG4gICAgc3RhdGUgPSBzZXRTdG9yYWdlUG9zdHNUaW1lbGluZShzdGF0ZSk7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNldFN0b3JhZ2VIdG1sUG9zdHMoc3RhdGUsIHByb3BzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRTdG9yYWdlSHRtbFBvc3RzKHN0YXRlLCBwcm9wcykge1xuICBjb25zdCB7IGFwcCB9ID0gc3RhdGU7XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBpZiAoYXBwLmlzUm9vdENoKSB7XG4gICAgY29uc3QgeyBwb3N0c011bHRpLCBwb3N0c1NpbmdsZSB9ID0gc3RhdGU7XG4gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2UoYXBwLnJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c011bHRpLCBwb3N0c011bHRpKTtcbiAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZShhcHAucm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzU2luZ2xlLCBwb3N0c1NpbmdsZSk7XG4gIH1cblxuICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbn1cblxuZnVuY3Rpb24gc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUoYWN0aW9uKSB7XG4gIGNvbnN0IHsgYXBwLCB0aHJlYWQsIHBvc3RzVGltZWxpbmU6IHBvc3RzVGltZWxpbmVBbGwgfSA9IGFjdGlvbjtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGlmIChhcHAuaXNNZWRpYUNoKSB7XG4gICAgY29uc3QgcG9zdHNUaW1lbGluZUFsbExlbmd0aCA9IHBvc3RzVGltZWxpbmVBbGwgJiYgcG9zdHNUaW1lbGluZUFsbC5sZW5ndGggPyBwb3N0c1RpbWVsaW5lQWxsLmxlbmd0aCA6IDA7XG4gICAgbGV0IHBvc3RzVGltZWxpbmVaZXJvU2Vjb25kID0gW107XG4gICAgbGV0IHBvc3RzVGltZWxpbmUgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZUFsbExlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocG9zdHNUaW1lbGluZUFsbFtpXS5jdXJyZW50VGltZSA9PT0gMCkge1xuICAgICAgICBwb3N0c1RpbWVsaW5lWmVyb1NlY29uZC5wdXNoKHBvc3RzVGltZWxpbmVBbGxbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zdHNUaW1lbGluZS5wdXNoKHBvc3RzVGltZWxpbmVBbGxbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gcG9zdHNUaW1lbGluZVplcm9TZWNvbmQ7XG4gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2UodGhyZWFkLmNoLCBzdG9yYWdlS2V5LnBvc3RzVGltZWxpbmVaZXJvLCBwb3N0c1RpbWVsaW5lWmVyb1NlY29uZCk7XG4gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2UodGhyZWFkLmNoLCBzdG9yYWdlS2V5LnBvc3RzVGltZWxpbmUsIHBvc3RzVGltZWxpbmUpO1xuICB9XG4gIHJldHVybiBhY3Rpb247XG59XG4vKlxuZnVuY3Rpb24gYWRkU3RvcmFnZVBvc3RzVGltZWxpbmUoYWN0aW9uKSB7XG4gIGNvbnN0IHsgYXBwLCBwb3N0c1RpbWVsaW5lIH0gPSBhY3Rpb247XG5cbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGlmIChhcHAuaXNNZWRpYUNoKSB7XG4gICAgY29uc3QgYWRkUG9zdHNUaW1lbGluZSA9IHBvc3RzVGltZWxpbmVbMF07XG4gICAgbGV0IHBvc3RzVGltZWxpbmVaZXJvID0gW107XG4gICAgbGV0IHBvc3RzVGltZWxpbmUgPSBbXTtcbiAgICBsZXQgcG9zdHNUaW1lbGluZVplcm9MZW5ndGggPSAwO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lTGVuZ3RoID0gMDtcblxuICAgIGlmIChhZGRQb3N0c1RpbWVsaW5lLmN1cnJlbnRUaW1lID09PSAwKSB7XG4gICAgICBwb3N0c1RpbWVsaW5lWmVybyA9IGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lWmVybyhhcHAucm9vdENoKTtcbiAgICAgIHBvc3RzVGltZWxpbmVaZXJvTGVuZ3RoID0gcG9zdHNUaW1lbGluZVplcm8ubGVuZ3RoO1xuXG4gICAgICAvLyAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb3N0c1RpbWVsaW5lWmVyb0xlbmd0aDsgaSsrKXtcbiAgICAgIC8vICAgICAgfVxuICAgICAgLy8gICAgICBwLnNwbGljZSg0LDAscDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3N0c1RpbWVsaW5lID0gZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmUoYXBwLnJvb3RDaCk7XG4gICAgICBwb3N0c1RpbWVsaW5lTGVuZ3RoID0gcG9zdHNUaW1lbGluZS5sZW5ndGg7XG4gICAgICBpZiAocG9zdHNUaW1lbGluZUxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3N0c1RpbWVsaW5lTGVuZ3RoOyBpKyspIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4qL1xuZnVuY3Rpb24gZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmVaZXJvKHJvb3RDaCkge1xuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgY29uc3QgcmVzcG9uc2UgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIHN0b3JhZ2VLZXkucG9zdHNUaW1lbGluZVplcm8pO1xuICByZXR1cm4gcmVzcG9uc2UuY29uc3RydWN0b3IubmFtZSA9PT0gXCJBcnJheVwiID8gcmVzcG9uc2UgOiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmUocm9vdENoKSB7XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBjb25zdCByZXNwb25zZSA9IFRhbGtuU2Vzc2lvbi5nZXRTdG9yYWdlKHJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lKTtcbiAgcmV0dXJuIHJlc3BvbnNlLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXJyYXlcIiA/IHJlc3BvbnNlIDogW107XG59XG4iLCJpbXBvcnQgZGVmaW5lIGZyb20gXCJjb21tb24vZGVmaW5lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhbGtuU2Vzc2lvbiB7XG4gIHN0YXRpYyBnZXRCYXNlS2V5KGNoKSB7XG4gICAgcmV0dXJuIGAke2RlZmluZS5zdG9yYWdlS2V5LmJhc2VLZXl9JHtjaH1gO1xuICB9XG5cbiAgc3RhdGljIHNldFN0b3JhZ2Uocm9vdENoLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgY29uc3QgYmFzZUtleSA9IFRhbGtuU2Vzc2lvbi5nZXRCYXNlS2V5KHJvb3RDaCk7XG4gICAgICBsZXQgaXRlbXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGJhc2VLZXkpKTtcbiAgICAgIGl0ZW1zID0gSlNPTi5zdHJpbmdpZnkoeyAuLi5pdGVtcywgW2tleV06IHZhbHVlIH0pO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYmFzZUtleSwgaXRlbXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RvcmFnZShyb290Q2gsIGtleSkge1xuICAgIGNvbnN0IGJhc2VLZXkgPSBUYWxrblNlc3Npb24uZ2V0QmFzZUtleShyb290Q2gpO1xuICAgIGNvbnN0IGl0ZW0gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGJhc2VLZXkpKTtcbiAgICByZXR1cm4gaXRlbSAmJiBpdGVtW2tleV0gPyBpdGVtW2tleV0gOiB7fTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDYWNoZXMocm9vdENoKSB7XG4gICAgY29uc3QgbWVudUxvZ3MgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5Lm1lbnVMb2dzKTtcbiAgICBjb25zdCBhcHAgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5LmFwcCk7XG4gICAgY29uc3QgdGhyZWFkID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleS50aHJlYWQpO1xuICAgIGNvbnN0IHNldHRpbmcgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5LnNldHRpbmcpO1xuICAgIHJldHVybiB7IG1lbnVMb2dzLCBhcHAsIHRocmVhZCwgc2V0dGluZyB9O1xuICB9XG59XG4iLCJpbXBvcnQgZGVmaW5lIGZyb20gXCJjb21tb24vZGVmaW5lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlU3R5bGU6ICh7IHN0eWxlS2V5LCBlbGVUeXBlLCB0YWdOYW1lLCBzdHlsZSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVVBEQVRFX1NUWUxFXCIsXG4gICAgICBzdHlsZUtleSxcbiAgICAgIGVsZVR5cGUsXG4gICAgICB0YWdOYW1lLFxuICAgICAgc3R5bGUsXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1RvZ2dsZVBvc3RzOiAoeyBhcHAgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPR0dMRV9QT1NUU1wiLFxuICAgICAgYXBwLFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb1RpbWVsaW5lVGhyZWFkOiAoeyBhcHAsIHRocmVhZCB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfVE9fVElNRUxJTkVfVEhSRUFEXCIsXG4gICAgICBhcHAsXG4gICAgICB0aHJlYWQ6IHsgY2g6IHRocmVhZC5jaCB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb011bHRpVGhyZWFkOiAoeyBhcHAsIHRocmVhZCB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfVE9fTVVMVElfVEhSRUFEXCIsXG4gICAgICBhcHAsXG4gICAgICB0aHJlYWQ6IHsgY2g6IHRocmVhZC5jaCB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb1NpbmdsZVRocmVhZDogKHsgYXBwLCB0aHJlYWQgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPX1NJTkdMRV9USFJFQURcIixcbiAgICAgIGFwcCxcbiAgICAgIHRocmVhZDogeyBjaDogdGhyZWFkLmNoIH0sXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1RvQ2hpbGRUaHJlYWQ6ICh7IGFwcCwgdGhyZWFkIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19UT19DSElMRF9USFJFQURcIixcbiAgICAgIGFwcCxcbiAgICAgIHRocmVhZDogeyBjaDogdGhyZWFkLmNoIH0sXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1RvTG9nc1RocmVhZDogKHsgYXBwLCB0aHJlYWQgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPX0xPR1NfVEhSRUFEXCIsXG4gICAgICBhcHAsXG4gICAgICB0aHJlYWQ6IHsgY2g6IHRocmVhZC5jaCB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2hhbmdlSW5wdXRQb3N0OiAoaW5wdXRQb3N0ID0gXCJcIikgPT4ge1xuICAgIGlucHV0UG9zdCA9IHR5cGVvZiBpbnB1dFBvc3QgPT09IFwic3RyaW5nXCIgPyBpbnB1dFBvc3QgOiBcIlwiO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NIQU5HRV9JTlBVVF9QT1NUXCIsXG4gICAgICBhcHA6IHsgaW5wdXRQb3N0IH0sXG4gICAgfTtcbiAgfSxcbiAgdG9nZ2xlRGlzcE1haW46IChhcHApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJUT0dHTEVfRElTUF9NQUlOXCIsXG4gICAgICBhcHAsXG4gICAgfTtcbiAgfSxcbiAgdG9nZ2xlRGlzcEJvYXJkOiAoYXBwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVE9HR0xFX0RJU1BfQk9BUkRcIixcbiAgICAgIGFwcCxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrVG9nZ2xlTWFpbjogKHsgYXBwLCB1aSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfVE9HR0xFX01BSU5cIixcbiAgICAgIGFwcCxcbiAgICAgIHVpLFxuICAgIH07XG4gIH0sXG4gIHRvZ2dsZUJ1YmJsZVBvc3Q6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJUT0dHTEVfQlVCQkxFX1BPU1RcIixcbiAgICAgIHVpOiB7IGlzVHJhbnNpdGlvbjogZmFsc2UgfSxcbiAgICB9O1xuICB9LFxuICBvcGVuTGlua3M6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPUEVOX0xJTktTXCIsXG4gICAgICB1aTogeyBpc09wZW5MaW5rczogdHJ1ZSB9LFxuICAgIH07XG4gIH0sXG4gIGNsb3NlTGlua3M6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJDTE9TRV9MSU5LU1wiLFxuICAgICAgdWk6IHsgaXNPcGVuTGlua3M6IGZhbHNlIH0sXG4gICAgfTtcbiAgfSxcbiAgdG9nZ2xlTGlua3M6IChpc09wZW5MaW5rcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlRPR0dMRV9MSU5LU1wiLFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tNdWx0aXN0cmVhbTogKHsgYXBwLCBwb3N0c011bHRpLCBwb3N0c1NpbmdsZSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfTVVMVElTVFJFQU1cIixcbiAgICAgIGFwcCxcbiAgICAgIHBvc3RzTXVsdGksXG4gICAgICBwb3N0c1NpbmdsZSxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrVG9nZ2xlRGlzcE1lbnU6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19UT0dHTEVfRElTUF9NRU5VXCIsXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1RvZ2dsZURpc3BEZXRhaWw6ICh7IGFwcCwgdWkgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPR0dMRV9ESVNQX0RFVEFJTFwiLFxuICAgICAgYXBwLFxuICAgICAgdWksXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja0xpa2U6IChpbnB1dFBvc3QpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19MSUtFXCIsXG4gICAgICBhcHA6IHsgaW5wdXRQb3N0IH0sXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja01vbmV5OiAoaW5wdXRQb3N0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfTU9ORVlcIixcbiAgICAgIGFwcDogeyBpbnB1dFBvc3QgfSxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrU2hhcmU6IChpbnB1dFBvc3QpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19TSEFSRVwiLFxuICAgICAgYXBwOiB7IGlucHV0UG9zdCB9LFxuICAgIH07XG4gIH0sXG4gIG9uUmVzaXplU3RhcnRXaW5kb3c6IChwYXJhbXMgPSB7IGFwcDoge30sIHNldHRpbmc6IHt9IH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJSRVNJWkVfU1RBUlRfV0lORE9XXCIsXG4gICAgICAuLi5wYXJhbXMsXG4gICAgfTtcbiAgfSxcbiAgb25SZXNpemVFbmRXaW5kb3c6ICh7IGFwcCwgc2V0dGluZywgYm9vdE9wdGlvbiB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUkVTSVpFX0VORF9XSU5ET1dcIixcbiAgICAgIGFwcCxcbiAgICAgIHNldHRpbmcsXG4gICAgICBib290T3B0aW9uLFxuICAgIH07XG4gIH0sXG4gIG9uU2Nyb2xsVXBkYXRlVGltZU1hcmtlcjogKHVpVGltZU1hcmtlcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX1NDUk9MTF9VUERBVEVfVElNRV9NQVJLRVJcIixcbiAgICAgIHVpVGltZU1hcmtlcixcbiAgICB9O1xuICB9LFxuICBvblRyYW5zaXRpb246ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9UUkFOU0lUSU9OXCIsXG4gICAgICB1aTogeyBpc1RyYW5zaXRpb246IHRydWUgfSxcbiAgICB9O1xuICB9LFxuICBvZmZUcmFuc2l0aW9uOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT0ZGX1RSQU5TSVRJT05cIixcbiAgICAgIHVpOiB7IGlzVHJhbnNpdGlvbjogZmFsc2UgfSxcbiAgICB9O1xuICB9LFxuICBvblRyYW5zaXRpb25FbmQ6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9UUkFOU0lUSU9OX0VORFwiLFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tNZW51OiAobWVudUNvbXBvbmVudCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX01FTlVcIixcbiAgICAgIHVpOiB7IG1lbnVDb21wb25lbnQgfSxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrU2V0dGluZzogKHNldHRpbmdUeXBlLCB7IHNldHRpbmcgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1NFVFRJTkdcIixcbiAgICAgIHNldHRpbmdUeXBlLFxuICAgICAgc2V0dGluZyxcbiAgICB9O1xuICB9LFxuICBvcGVuSW5uZXJOb3RpZjogKG9wZW5Jbm5lck5vdGlmID0gZGVmaW5lLm5vSW5uZXJOb3RpZikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9QRU5fSU5ORVJfTk9USUZcIixcbiAgICAgIHVpOiB7IG9wZW5Jbm5lck5vdGlmIH0sXG4gICAgfTtcbiAgfSxcbiAgY2xvc2VJbm5lck5vdGlmOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ0xPU0VfSU5ORVJfTk9USUZcIixcbiAgICAgIHVpOiB7IG9wZW5Jbm5lck5vdGlmOiBcIlwiIH0sXG4gICAgfTtcbiAgfSxcbiAgb3Blbk5vdGlmOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT1BFTl9OT1RJRlwiLFxuICAgICAgdWk6IHsgaXNPcGVuTm90aWY6IHRydWUgfSxcbiAgICB9O1xuICB9LFxuICBjbG9zZU5vdGlmOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ0xPU0VfTk9USUZcIixcbiAgICAgIHVpOiB7IGlzT3Blbk5vdGlmOiBmYWxzZSB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tPcGVuTG9ja01lbnU6IChvcGVuTG9ja01lbnUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19PUEVOX0xPQ0tfTUVOVVwiLFxuICAgICAgdWk6IHsgb3BlbkxvY2tNZW51IH0sXG4gICAgfTtcbiAgfSxcbiAgb3Blbk5ld1Bvc3Q6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPUEVOX05FV19QT1NUXCIsXG4gICAgICB1aTogeyBpc09wZW5OZXdQb3N0OiB0cnVlIH0sXG4gICAgfTtcbiAgfSxcbiAgY2xvc2VOZXdQb3N0OiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ0xPU0VfTkVXX1BPU1RcIixcbiAgICAgIHVpOiB7IGlzT3Blbk5ld1Bvc3Q6IGZhbHNlIH0sXG4gICAgfTtcbiAgfSxcbiAgb3Blbk1lbnVUcmFuc2l0aW9uRW5kOiAodGhyZWFkU2Nyb2xsWSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9QRU5fTUVOVV9UUkFOU0lUSU9OX0VORFwiLFxuICAgICAgdWk6IHsgdGhyZWFkU2Nyb2xsWSB9LFxuICAgIH07XG4gIH0sXG4gIHN0YXJ0RGlzcFBvc3RzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU1RBUlRfRElTUF9QT1NUU1wiLFxuICAgICAgdWk6IHsgaXNEaXNwUG9zdHM6IHRydWUgfSxcbiAgICB9O1xuICB9LFxuICBzdGFydFVuZGlzcFBvc3RzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU1RBUlRfVU5ESVNQX1BPU1RTXCIsXG4gICAgICB1aTogeyBpc0Rpc3BQb3N0czogZmFsc2UgfSxcbiAgICB9O1xuICB9LFxuICBjb21wb25lbnREaWRNb3VudHM6IChjb21wb25lbnROYW1lKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ09NUE9ORU5UX0RJRF9NT1VOVFNcIixcbiAgICAgIGNvbXBvbmVudERpZE1vdW50czogY29tcG9uZW50TmFtZSxcbiAgICB9O1xuICB9LFxuICBib290RXh0ZW5zaW9uOiAoYXBwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQk9PVF9FWFRFTlNJT05cIixcbiAgICAgIGFwcCxcbiAgICB9O1xuICB9LFxuICB1cGRhdGVFeHRlbnNpb246IChhcHApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJVUERBVEVfRVhURU5TSU9OXCIsXG4gICAgICBhcHAsXG4gICAgfTtcbiAgfSxcbiAgZ2V0Q2xpZW50TWV0YXM6IChjbGllbnRNZXRhcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkdFVF9DTElFTlRfTUVUQVNcIixcbiAgICAgIGNsaWVudE1ldGFzLFxuICAgIH07XG4gIH0sXG4gIHRvZ2dsZURpc3BQb3N0c1N1cHBvcnRlcjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlRPR0dMRV9ESVNQX1BPU1RTX1NVUFBPUlRFUlwiLFxuICAgIH07XG4gIH0sXG4gIGNsb3NlRGlzcFBvc3RzU3VwcG9ydGVyOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ0xPU0VfRElTUF9QT1NUU19TVVBQT1JURVJcIixcbiAgICAgIHVpOiB7IGlzT3BlblBvc3RzU3VwcG9ydGVyOiBmYWxzZSB9LFxuICAgIH07XG4gIH0sXG4gIG5leHRQb3N0c1RpbWVsaW5lOiAocG9zdHNUaW1lbGluZSA9IFtdKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiTkVYVF9QT1NUU19USU1FTElORVwiLFxuICAgICAgcG9zdHNUaW1lbGluZSxcbiAgICB9O1xuICB9LFxuICB1bm1vdW50UG9zdHNUaW1lbGluZTogKG1lZGlhQ3VycmVudFRpbWUgPSAwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVU5NT1VOVF9QT1NUU19USU1FTElORVwiLFxuICAgICAgbWVkaWFDdXJyZW50VGltZSxcbiAgICB9O1xuICB9LFxuICBjbGVhclBvc3RzVGltZWxpbmU6IChtZWRpYUN1cnJlbnRUaW1lID0gMCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXCIsXG4gICAgICBtZWRpYUN1cnJlbnRUaW1lLFxuICAgIH07XG4gIH0sXG4gIHByZXZQb3N0c1RpbWVsaW5lOiAocG9zdHNUaW1lbGluZSA9IFtdKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUFJFVl9QT1NUU19USU1FTElORVwiLFxuICAgICAgcG9zdHNUaW1lbGluZSxcbiAgICB9O1xuICB9LFxuICBkZWxlZ2F0ZVBvc3Q6ICh7IGlucHV0UG9zdCwgaW5wdXRDdXJyZW50VGltZSwgaW5wdXRTdGFtcElkIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJERUxFR0FURV9QT1NUXCIsXG4gICAgICBhcHA6IHsgaW5wdXRQb3N0LCBpbnB1dEN1cnJlbnRUaW1lLCBpbnB1dFN0YW1wSWQgfSxcbiAgICB9O1xuICB9LFxuICBwbGF5VmlkZW86ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJQTEFZX1ZJREVPXCIsXG4gICAgfTtcbiAgfSxcbiAgc3RvcFZpZGVvOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU1RPUF9WSURFT1wiLFxuICAgIH07XG4gIH0sXG4gIG9uQ2hhbmdlRmluZFR5cGU6IChlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0hBTkdFX0ZJTkRfVFlQRVwiLFxuICAgICAgYXBwOiB7IGZpbmRUeXBlOiBlLnRhcmdldC52YWx1ZSB9LFxuICAgIH07XG4gIH0sXG4gIHN0YXJ0TGlua01lZGlhOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU1RBUlRfTElOS19NRURJQVwiLFxuICAgIH07XG4gIH0sXG4gIGxvYWRpbmdFbmQ6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJMT0FESU5HX0VORFwiLFxuICAgIH07XG4gIH0sXG4gIHNjcm9sbFRocmVhZDogKCkgPT4ge1xuICAgIHJldHVybiB7IHR5cGU6IFwiU0NST0xMX1RIUkVBRFwiIH07XG4gIH0sXG4gIGVuZEFuaW1hdGVTY3JvbGxUbzogKCkgPT4ge1xuICAgIHJldHVybiB7IHR5cGU6IFwiRU5EX0FOSU1BVEVfU0NST0xMX1RPXCIgfTtcbiAgfSxcbiAgY3JlYXRlTm90aWY6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJDUkVBVEVfTk9USUZcIixcbiAgICB9O1xuICB9LFxuICB1cGRhdGVQb3N0c0hlaWdodDogKHBvc3RzSGVpZ2h0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVVBEQVRFX1BPU1RTX0hFSUdIVFwiLFxuICAgICAgYXBwOiB7IHBvc3RzSGVpZ2h0IH0sXG4gICAgfTtcbiAgfSxcbiAgZGVidWc6IChhcHApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJERUJVR1wiLFxuICAgICAgYXBwLFxuICAgIH07XG4gIH0sXG59O1xuIiwiaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgcmVzcG9uc2UgPT4ge1xuICBjb25zdCB0eXBlID0gYCR7U2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlUfSR7cmVzcG9uc2UudHlwZX1gO1xuICByZXR1cm4geyAuLi5yZXNwb25zZSwgdHlwZSB9O1xufTtcbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tIFwiYXBpL1NlcXVlbmNlXCI7XG5pbXBvcnQgRW1vdGlvbnMgZnJvbSBcImNvbW1vbi9lbW90aW9ucy9pbmRleFwiO1xuXG5jb25zdCBlbW90aW9ucyA9IG5ldyBFbW90aW9ucygpO1xubGV0IGFjdGlvbnMgPSB7fTtcblxuT2JqZWN0LmtleXMoU2VxdWVuY2UubWFwKS5mb3JFYWNoKGVuZHBvaW50ID0+IHtcbiAgY29uc3QgdHlwZSA9IGAke1NlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVH0ke2VuZHBvaW50fWA7XG4gIGFjdGlvbnNbdHlwZV0gPSAocmVkdXhTdGF0ZSwgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSkgPT4ge1xuICAgIGlmIChiZWZvcmVGdW5jdGlvbnNbcmVxdWVzdFN0YXRlLnR5cGVdKSB7XG4gICAgICByZXR1cm4gYmVmb3JlRnVuY3Rpb25zW3JlcXVlc3RTdGF0ZS50eXBlXShyZWR1eFN0YXRlLCByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSB9O1xuICB9O1xufSk7XG5cbmNvbnN0IGJlZm9yZUZ1bmN0aW9ucyA9IHtcbiAgcG9zdDogKHJlZHV4U3RhdGUsIHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUpID0+IHtcbiAgICBjb25zdCB7IGFwcCB9ID0gcmVxdWVzdFN0YXRlO1xuXG4gICAgaWYgKGFwcC5pc01lZGlhQ2gpIHtcbiAgICAgIC8vICAgICAgaWYgKHdpbmRvdy50YWxrbk1lZGlhICYmIHdpbmRvdy50YWxrbk1lZGlhLmN1cnJlbnRUaW1lKSB7XG4gICAgICBpZiAoYXBwLmN1cnJlbnRUaW1lKSB7XG4gICAgICAgIHJlcXVlc3RTdGF0ZS5hcHAuaW5wdXRDdXJyZW50VGltZSA9IHdpbmRvdy50YWxrbk1lZGlhLmN1cnJlbnRUaW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdFN0YXRlLmFwcC5pbnB1dEN1cnJlbnRUaW1lID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zID0ge307XG5cbiAgICBpZiAoYXBwLmlucHV0U3RhbXBJZCkge1xuICAgICAgT2JqZWN0LmtleXMoZW1vdGlvbnMuYmFsYW5jZXMpLmZvckVhY2goYmFsYW5jZUtleSA9PiB7XG4gICAgICAgIGlmIChlbW90aW9ucy5iYWxhbmNlc1tiYWxhbmNlS2V5XSAmJiByZWR1eFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XSkge1xuICAgICAgICAgIGNvbnN0IGJhbGFuY2UgPSBlbW90aW9ucy5iYWxhbmNlc1tiYWxhbmNlS2V5XShhcHAuaW5wdXRTdGFtcElkKTtcblxuICAgICAgICAgIGlmIChiYWxhbmNlKSB7XG4gICAgICAgICAgICBiYWxhbmNlLmZvckVhY2goYiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHR5cGVJZCA9IE9iamVjdC5rZXlzKGIpWzBdO1xuICAgICAgICAgICAgICBjb25zdCB0eXBlTGFiZWwgPSBlbW90aW9ucy5pZEtleVR5cGVzW3R5cGVJZF07XG5cbiAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldKSByZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldID0ge307XG4gICAgICAgICAgICAgIGlmICghcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XVt0eXBlTGFiZWxdKVxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV1bdHlwZUxhYmVsXSA9IDA7XG5cbiAgICAgICAgICAgICAgcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XVt0eXBlTGFiZWxdID0gYlt0eXBlSWRdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uU3RhdGUuYXBwID0geyAuLi5hcHAgfTtcbiAgICAgIGFjdGlvblN0YXRlLmFwcC5pbnB1dFN0YW1wSWQgPSAwO1xuICAgICAgcmVxdWVzdFN0YXRlLmFwcC5pbnB1dFN0YW1wSWQgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUgfTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWN0aW9ucztcbiIsImltcG9ydCBQbGFpbiBmcm9tICcuL1BsYWluJztcbmltcG9ydCBSdXNzZWxsIGZyb20gJy4vUnVzc2VsbCc7XG5pbXBvcnQgUnVzc2VsbFNpbXBsZSBmcm9tICcuL1J1c3NlbGxTaW1wbGUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgUGxhaW4sXG4gICAgUnVzc2VsbCxcblx0UnVzc2VsbFNpbXBsZVxufVxuIiwiaW1wb3J0IEVtb3Rpb25zIGZyb20gXCJjb21tb24vZW1vdGlvbnMvaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhaW4ge1xuICBzdGF0aWMgZ2V0IFRZUEVTKCkge1xuICAgIHJldHVybiBbRW1vdGlvbnMuVFlQRVMuTElLRV07XG4gIH1cblxuICBzdGF0aWMgZ2V0U2F2ZUJhbGFuY2Uoc3RhbXBJZCkge1xuICAgIGNvbnN0IGJhbGFuY2UgPSB7XG4gICAgICAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTElLRS5JRF06IDEgfV1cbiAgICB9O1xuICAgIHJldHVybiBiYWxhbmNlW3N0YW1wSWRdID8gYmFsYW5jZVtzdGFtcElkXSA6IG51bGw7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2NoZW1hcygpIHtcbiAgICBsZXQgc2NoZW1hcyA9IHt9O1xuICAgIFBsYWluLlRZUEVTLmZvckVhY2goKG9iaiwgaSkgPT4ge1xuICAgICAgc2NoZW1hc1tvYmouTEFCRUxdID0geyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAsIG1pbjogMCB9O1xuICAgIH0pO1xuICAgIHJldHVybiBzY2hlbWFzO1xuICB9XG59XG4iLCJpbXBvcnQgRW1vdGlvbnMgZnJvbSBcImNvbW1vbi9lbW90aW9ucy9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdXNzZWxsIHtcbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgRW1vdGlvbnMuVFlQRVMuU1VQUklTRSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkVYQ0lURSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkhBUFBZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuSk9ZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuR0xBRCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTixcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkNPTUZPUlQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5SRUxBWCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlRJUkVELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0xFRVBZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0xBQ0ssXG4gICAgICBFbW90aW9ucy5UWVBFUy5CT1JJTkcsXG4gICAgICBFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0FELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuVU5QTEVBU0FOVCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkZSVVNUUkFURUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5ESVNTQVRJU0ZJRUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5BTkdFUixcbiAgICAgIEVtb3Rpb25zLlRZUEVTLldPUlJZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuRkVBUlxuICAgIF07XG4gIH1cblxuICB0eXBlc0FycmF5OiBhbnk7XG4gIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICB0aGlzLnR5cGVzQXJyYXkgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhSdXNzZWxsLlRZUEVTKS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHRoaXMudHlwZXNBcnJheS5wdXNoKFJ1c3NlbGwuVFlQRVNbaW5kZXhdLkxBQkVMKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTYXZlQmFsYW5jZShzdGFtcElkKSB7XG4gICAgY29uc3QgYmFsYW5jZSA9IHtcbiAgICAgIC8vIFN1cHJpc2UoUG9zaTEpXG4gICAgICAxMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU1VQUklTRS5JRF06IDEgfV0sXG4gICAgICAxMDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU1VQUklTRS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEV4Y2l0ZShQb3NpMSlcbiAgICAgIDExMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcblxuICAgICAgLy8gSGFwcHkoUG9zaTIpXG4gICAgICAxMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBKb3koUG9zaTIpXG4gICAgICAxMzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDU6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA3OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcblxuICAgICAgLy8gR2xhZChQb3NpMylcbiAgICAgIDE0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5HTEFELklEXTogMSB9XSxcbiAgICAgIDE0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5HTEFELklEXTogMSB9XSxcblxuICAgICAgLy8gU2F0aXNmYWN0aW9uKFBvc2kzKVxuICAgICAgMTUwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTi5JRF06IDEgfV0sXG4gICAgICAxNTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FUSVNGQUNUSU9OLklEXTogMSB9XSxcbiAgICAgIDE1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TQVRJU0ZBQ1RJT04uSURdOiAxIH1dLFxuICAgICAgMTUwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIENvbWZvcnQoUG9zaTQpXG4gICAgICAxNjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQ09NRk9SVC5JRF06IDEgfV0sXG4gICAgICAxNjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuQ09NRk9SVC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFJlbGF4KFBvc2k0KVxuICAgICAgMTcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuXG4gICAgICAvLyBUaXJlZChQb3NpNClcbiAgICAgIDE4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG4gICAgICAxODAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuICAgICAgMTgwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcblxuICAgICAgLy8gU2xhY2soTmVnYTQpXG4gICAgICAyMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQk9SSU5HLklEXTogMSB9XSxcbiAgICAgIDIxMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5CT1JJTkcuSURdOiAxIH1dLFxuICAgICAgMjEwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkJPUklORy5JRF06IDEgfV0sXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhZChOZWdhMylcbiAgICAgIDIzMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TQUQuSURdOiAxIH1dLFxuICAgICAgMjMwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBRC5JRF06IDEgfV0sXG4gICAgICAyMzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FELklEXTogMSB9XSxcblxuICAgICAgLy8gVW5wbGVhc2FudChOZWdhMylcbiAgICAgIDI0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcbiAgICAgIDI0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcbiAgICAgIDI0MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcbiAgICAgIDI0MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELklEXTogMSB9XSxcbiAgICAgIDI1MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELklEXTogMSB9XSxcbiAgICAgIDI1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELklEXTogMSB9XSxcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkRJU1NBVElTRklFRC5JRF06IDEgfV0sXG4gICAgICAyNjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRElTU0FUSVNGSUVELklEXTogMSB9XSxcblxuICAgICAgLy8gQW5nZXIoTmVnYTIpXG4gICAgICAyNzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFdvcnJ5KE5lZ2ExKVxuICAgICAgMjgwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwNzogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcblxuICAgICAgLy8gRmVhcihOZWdhMSlcbiAgICAgIDI5MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XVxuICAgIH07XG5cbiAgICByZXR1cm4gYmFsYW5jZVtzdGFtcElkXSA/IGJhbGFuY2Vbc3RhbXBJZF0gOiBudWxsO1xuICB9XG5cbiAgc3RhdGljIGdldFNjaGVtYXMoKSB7XG4gICAgbGV0IHNjaGVtYXMgPSB7fTtcbiAgICBSdXNzZWxsLlRZUEVTLmZvckVhY2goKG9iaiwgaSkgPT4ge1xuICAgICAgc2NoZW1hc1tvYmouTEFCRUxdID0geyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAsIG1pbjogMCB9O1xuICAgIH0pO1xuICAgIHJldHVybiBzY2hlbWFzO1xuICB9XG59XG4iLCJpbXBvcnQgRW1vdGlvbnMgZnJvbSBcImNvbW1vbi9lbW90aW9ucy9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdXNzZWxsU2ltcGxlIHtcbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgRW1vdGlvbnMuVFlQRVMuRVhDSVRFLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuSEFQUFksXG4gICAgICBFbW90aW9ucy5UWVBFUy5KT1ksXG4gICAgICBFbW90aW9ucy5UWVBFUy5SRUxBWCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNMQUNLLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkFOR0VSLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUlxuICAgIF07XG4gIH1cblxuICB0eXBlc0FycmF5OiBhbnk7XG4gIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICB0aGlzLnR5cGVzQXJyYXkgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhSdXNzZWxsU2ltcGxlLlRZUEVTKS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHRoaXMudHlwZXNBcnJheS5wdXNoKFJ1c3NlbGxTaW1wbGUuVFlQRVNbaW5kZXhdLkxBQkVMKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTYXZlQmFsYW5jZShzdGFtcElkKSB7XG4gICAgY29uc3QgYmFsYW5jZSA9IHtcbiAgICAgIC8vIFN1cHJpc2UoUG9zaTEpXG4gICAgICAxMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcbiAgICAgIDEwMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuXG4gICAgICAvLyBFeGNpdGUoUG9zaTEpXG4gICAgICAxMTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcbiAgICAgIDExMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTEwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEhhcHB5KFBvc2kyKVxuICAgICAgMTIwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcblxuICAgICAgLy8gSm95KFBvc2kyKVxuICAgICAgMTMwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDY6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEdsYWQoUG9zaTMpXG4gICAgICAxNDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDE0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuXG4gICAgICAvLyBTYXRpc2ZhY3Rpb24oUG9zaTMpXG4gICAgICAxNTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDE1MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTUwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxNTA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcblxuICAgICAgLy8gQ29tZm9ydChQb3NpNClcbiAgICAgIDE2MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuXG4gICAgICAvLyBSZWxheChQb3NpNClcbiAgICAgIDE3MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuICAgICAgMTcwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcblxuICAgICAgLy8gVGlyZWQoUG9zaTQpXG4gICAgICAxODAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuICAgICAgMTgwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcbiAgICAgIDE4MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNsYWNrKE5lZ2E0KVxuICAgICAgMjAwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcblxuICAgICAgLy8gQm9yaW5nKE5lZ2E0KVxuICAgICAgMjEwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIxMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuXG4gICAgICAvLyBNZWxhbmNob2x5KE5lZ2E0KVxuICAgICAgMjIwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBTYWQoTmVnYTMpXG4gICAgICAyMzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFVucGxlYXNhbnQoTmVnYTMpXG4gICAgICAyNDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyNDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyNDAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyNDA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIGZydXN0cmF0ZWQoTmVnYTMpXG4gICAgICAyNTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyNTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyNTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIGRpc3NhdGlzZmllZChOZWdhMilcbiAgICAgIDI2MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuXG4gICAgICAvLyBBbmdlcihOZWdhMilcbiAgICAgIDI3MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcblxuICAgICAgLy8gV29ycnkoTmVnYTEpXG4gICAgICAyODAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyODAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyODAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyODA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyODA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyODA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyODA3OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEZlYXIoTmVnYTEpXG4gICAgICAyOTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5JRF06IDEgfV1cbiAgICB9O1xuICAgIHJldHVybiBiYWxhbmNlW3N0YW1wSWRdID8gYmFsYW5jZVtzdGFtcElkXSA6IG51bGw7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2NoZW1hcygpIHtcbiAgICBsZXQgc2NoZW1hcyA9IHt9O1xuICAgIFJ1c3NlbGxTaW1wbGUuVFlQRVMuZm9yRWFjaCgob2JqLCBpKSA9PiB7XG4gICAgICBzY2hlbWFzW29iai5MQUJFTF0gPSB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCwgbWluOiAwIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYXM7XG4gIH1cbn1cbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tIFwiYXBpL1NlcXVlbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHJlc3BvbnNlID0+IHtcbiAgY29uc3QgdHlwZSA9IGAke1NlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUfSR7cmVzcG9uc2UudHlwZX1gO1xuICByZXR1cm4geyAuLi5yZXNwb25zZSwgdHlwZSB9O1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaWVudFV0aWwge1xuICBzdGF0aWMgZGVsZXRlUHJvdGNvbChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoXCJodHRwczovXCIsIFwiXCIpLnJlcGxhY2UoXCJodHRwOi9cIiwgXCJcIik7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=