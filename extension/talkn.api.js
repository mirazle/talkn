!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=44)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==n.getType(t)&&"Null"!==n.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||("function() {}"===e||("function (){}"===e||("function () {}"===e||"()=>{}"===e)))}create(t){const e=this.constructor.name;n.getType(t);return Object.keys(t).forEach(r=>{let i,s,o=null,a=!1,u=!1,c=()=>{},l=null;if("Object"===n.getType(t[r])){i=t[r];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,u=i.isAcceptBlank?i.isAcceptBlank:u,o=!e&&i.def?i.def:o,l=e||!i.value&&""!==i.value?i:i.value,l=e&&o?o:l,s=n.getType(l),c=i.valid?i.valid:c}else l=t[r],o=l,a=a,u=u,s=n.getType(l),c=c;const p=t=>{let i=null;const o=`${e}.${r}`,p=l,f=s,h=t,d=n.getType(t);return d!==s&&(i=`SCHEMA_TYPE : ${o} [validType: ${s}][paramsType: ${d}]`),a&&null===t&&(i="SCHEMA_IS_ACCEPT_NULL :  "+o),u&&""===t&&(i="SCHEMA_IS_ACCEPT_BLANK :  "+o),"Function"===n.getType(c)&&c(t)&&(i="SCHEMA_YOUR_VALID_METHOD :  "+o),{pointer:o,validValue:p,validType:f,paramsValue:h,paramsType:d,error:i}},{pointer:f,validValue:h,validType:d,paramsValue:T,paramsType:y,error:g}=p(l);if(null===g)Object.defineProperty(this,r,{get:()=>l,set:t=>{const e=p(l);if(null===g)return l=t,Object.assign(Object.assign({},this),{[r]:l});throw this.validWarn(e),g},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw g;console.warn(g)}}),this}canSet(t,e){try{const r=this[t],{error:n}=this[t]=e;return!n&&(this[t]=r,!0)}catch(r){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),"BAD CAN SET: "+r}}merge(t={},e=!0){try{const r=n.getType(t),i=Object.keys(t);if(i.length>0){let n=Object.assign({},this);return i.forEach(e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?n[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))}),"Array"===r?(n=Object.values(n),e?new this.constructor(n):n):e?new this.constructor(n):n}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${n.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${n.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach(r=>{let n=t[r];"Object"===n.constructor.name&&(n.type||n.default||(n=this.toJSON(n))),n.default||""===n.default||0===n.default?e[r]=n.default:e[r]=n}),e}forEach(t){return Object.values(this).forEach(t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=n},function(t,e,r){(function(n){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))}),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=r(47)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,r(14))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(36)),o=n(r(6));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const r=t.ch?t.ch:"/",n=t.name?t.name:"talkn",u=t.talknIndex?t.talknIndex:0,c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(r),l=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,p=t.rootCh?t.rootCh:r,f=i.default.isSet(t.isRootCh)?t.isRootCh:p===r,h=t.rootTitle?t.rootTitle:"talkn",d=a.getMediaSrc(t.protocol,r),T=a.getMediaType(d,t),y=t&&t.tuned?t.tuned:"",g=a.getDispThreadType(t,c),E=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,_=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,O=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,P=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,A=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,C=t.inputPost?t.inputPost:"",v=!!t.inputStampId&&t.inputStampId,b=t.inputCurrentTime?t.inputCurrentTime:0,w=t.inputSearch?t.inputSearch:"",R=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=t&&t.actioned?t.actioned:"",L=i.default.isSet(t.debug)?t.debug:"";return this.create({name:n,talknIndex:u,isRootCh:f,isLinkCh:l,isMediaCh:c,rootCh:p,rootTitle:h,chType:T,dispThreadType:g,tuned:y,multistream:E,findType:m,offsetFindId:S,offsetTimelineFindId:_,offsetSingleFindId:O,offsetMultiFindId:I,offsetChildFindId:P,offsetLogsFindId:A,inputPost:C,inputStampId:v,inputCurrentTime:b,inputSearch:w,isToggleMultistream:R,actioned:D,debug:L})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),r=e.length;let n="html";for(let i=0;i<r;i++){const r=new RegExp(`.${e[i]}$`);if(t.match(r)){n=a.mediaChTagTypes[e[i]];break}}return n}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some(e=>{const r=new RegExp(`.${e}/$|.${e}$`);return t.match(r)})}static isActiveMultistream({app:t,ui:e},r=""){return"Index"===e.menuComponent&&t.dispThreadType===a.dispThreadTypeMulti}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,rank:e},r,n,i=""){let s="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return s=(t=a.getStepDispThreadType({app:t,rank:e},r,n,i)).dispThreadType,{app:t,stepTo:`${o} to ${s}`}}static getStepDispThreadType({app:t,rank:e},r={},n,i){const s=t||{};if(s.isLinkCh=!1,s.offsetFindId=a.defaultOffsetFindId,r.isMediaCh)return s.dispThreadType=a.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:a.defaultOffsetFindId,s.isLinkCh="toLinks"===i||"findMediaCh"===i,s.isMediaCh=!0,s;if("toLinks"===i){const t=e.some(t=>t.ch===n||t.ch===n+"/");if(!t)return s.offsetFindId=a.defaultOffsetFindId,s.dispThreadType=a.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===n?s.multistream?s.dispThreadType=a.dispThreadTypeMulti:s.dispThreadType=a.dispThreadTypeSingle:s.dispThreadType=a.dispThreadTypeChild,s}}e.default=a},function(t,e,r){function n(t){if(t)return function(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}(t)}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},n.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<n.length;i++)if((r=n[i])===e||r.fn===e){n.splice(i,1);break}return this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var n=0,i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,e);return this},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,r){var n,i=r(60),s=r(28),o=r(62),a=r(63),u=r(64);"undefined"!=typeof ArrayBuffer&&(n=r(65));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),p=c||l;e.protocol=3;var f=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},h=i(f),d={type:"error",data:"parser error"},T=r(66);function y(t,e,r){for(var n=new Array(t.length),i=a(t.length,r),s=function(t,r,i){e(r,(function(e,r){n[t]=r,i(e,n)}))},o=0;o<t.length;o++)s(o,t[o],i)}e.encodePacket=function(t,r,n,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof n&&(i=n,n=null);var s=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&s instanceof ArrayBuffer)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var i=t.data,s=new Uint8Array(i),o=new Uint8Array(1+i.byteLength);o[0]=f[t.type];for(var a=0;a<s.length;a++)o[a+1]=s[a];return n(o.buffer)}(t,r,i);if(void 0!==T&&s instanceof T)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(p)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},r,!0,n)},i.readAsArrayBuffer(t.data)}(t,r,n);var i=new Uint8Array(1);i[0]=f[t.type];var s=new T([i.buffer,t.data]);return n(s)}(t,r,i);if(s&&s.base64)return function(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n)}(t,i);var o=f[t.type];return void 0!==t.data&&(o+=n?u.encode(String(t.data),{strict:!1}):String(t.data)),i(""+o)},e.encodeBase64Packet=function(t,r){var n,i="b"+e.packets[t.type];if(void 0!==T&&t.data instanceof T){var s=new FileReader;return s.onload=function(){var t=s.result.split(",")[1];r(i+t)},s.readAsDataURL(t.data)}try{n=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var o=new Uint8Array(t.data),a=new Array(o.length),u=0;u<o.length;u++)a[u]=o[u];n=String.fromCharCode.apply(null,a)}return i+=btoa(n),r(i)},e.decodePacket=function(t,r,n){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var i=t.charAt(0);return Number(i)==i&&h[i]?t.length>1?{type:h[i],data:t.substring(1)}:{type:h[i]}:d}i=new Uint8Array(t)[0];var s=o(t,1);return T&&"blob"===r&&(s=new T([s])),{type:h[i],data:s}},e.decodeBase64Packet=function(t,e){var r=h[t.charAt(0)];if(!n)return{type:r,data:{base64:!0,data:t.substr(1)}};var i=n.decode(t.substr(1));return"blob"===e&&T&&(i=new T([i])),{type:r,data:i}},e.encodePayload=function(t,r,n){"function"==typeof r&&(n=r,r=null);var i=s(t);if(r&&i)return T&&!p?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n);if(!t.length)return n("0:");y(t,(function(t,n){e.encodePacket(t,!!i&&r,!1,(function(t){n(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return n(e.join(""))}))},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);var i;if("function"==typeof r&&(n=r,r=null),""===t)return n(d,0,1);for(var s,o,a="",u=0,c=t.length;u<c;u++){var l=t.charAt(u);if(":"===l){if(""===a||a!=(s=Number(a)))return n(d,0,1);if(a!=(o=t.substr(u+1,s)).length)return n(d,0,1);if(o.length){if(i=e.decodePacket(o,r,!1),d.type===i.type&&d.data===i.data)return n(d,0,1);if(!1===n(i,u+s,c))return}u+=s,a=""}else a+=l}return""!==a?n(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){if(!t.length)return r(new ArrayBuffer(0));y(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){return r(null,t)}))}),(function(t,e){var n=e.reduce((function(t,e){var r;return t+(r="string"==typeof e?e.length:e.byteLength).toString().length+r+2}),0),i=new Uint8Array(n),s=0;return e.forEach((function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++)n[o]=t.charCodeAt(o);r=n.buffer}i[s++]=e?0:1;var a=r.byteLength.toString();for(o=0;o<a.length;o++)i[s++]=parseInt(a[o]);i[s++]=255;for(n=new Uint8Array(r),o=0;o<n.length;o++)i[s++]=n[o]})),r(i.buffer)}))},e.encodePayloadAsBlob=function(t,r){y(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),i=0;i<t.length;i++)n[i]=t.charCodeAt(i);t=n.buffer,e[0]=0}var s=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),o=new Uint8Array(s.length+1);for(i=0;i<s.length;i++)o[i]=parseInt(s[i]);if(o[s.length]=255,T){var a=new T([e.buffer,o.buffer,t]);r(null,a)}}))}),(function(t,e){return r(new T(e))}))},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var i=t,s=[];i.byteLength>0;){for(var a=new Uint8Array(i),u=0===a[0],c="",l=1;255!==a[l];l++){if(c.length>310)return n(d,0,1);c+=a[l]}i=o(i,2+c.length),c=parseInt(c);var p=o(i,0,c);if(u)try{p=String.fromCharCode.apply(null,new Uint8Array(p))}catch(t){var f=new Uint8Array(p);p="";for(l=0;l<f.length;l++)p+=String.fromCharCode(f[l])}s.push(p),i=o(i,c)}var h=s.length;s.forEach((function(t,i){n(e.decodePacket(t,r,!0),i,h)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default={PRODUCTION:"production",LOCALHOST:"localhost",DEVELOPMENT:"development",PRODUCTION_IP:"ip-172-31-27-3",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"portal",EXTENSION:"extension",API:"api"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},talknClientJs:"talkn.client.js",noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(34)),s=n(r(7)),o=n(r(0)),a=n(r(2));class u extends o.default{constructor(t={},e,r={}){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const n=u.isWindowObj(t)?u.constructorFromWindow(t,e,r):t;return this.create(n)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e,r){const n=!!e.ch&&e.ch,i=u.getCh(e,n);if(r.ch&&r.ch===i)return r;{let r={},s="";return r.ch=i,r.chs=["/"],r.hasSlash=!!e.hasslash&&o.default.getBool(e.hasslash),r.protocol="talkn:",r.contentType="",r.charset="UTF-8",r.host="",r.favicon=u.getDefaultFavicon(),r.findType=u.findTypeAll,n?(r.protocol=u.getProtocol(n),r.host=u.getHost(n),r.chs=n.chs&&n.chs.length>0?n.chs:u.getChs(i)):(r.protocol=location.protocol?location.protocol:"????:",r.chs=t.chs&&t.chs.length>0?t.chs:u.getChs(i),r.contentType=document.contentType?document.contentType:"",r.charset=document.charset?document.charset:"",r.host=location.host?location.host:"",r.favicon=u.getFaviconFromWindow(window)),r.title=u.getDefaultTitle(),r.metas=[],r.serverMetas={},r.clientMetas={},r.links=[],r.h1s=[],r.audios=[],r.videos=[],r.layer=u.getLayer(r.ch),r.mediaIndex=[],r.postCnt=0,r.multiPostCnt=0,r.isSelfCh=u.getIsSelfCh(s,r.ch),r.createTime="",r.updateTime="",r}}static getCh(t,e){if(e)return e;{const t=window.location?window.location:{};let e=t.href?t.href:"";return""!==e?(e="/"===e.slice(-1)?e.slice(0,-1):e,e=e.replace("http:/",""),e=e.replace("https:/",""),e):"/"}}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const n="/"===t.slice(-1)?t:t+"/";if("/"!==n){const t=n.split("/"),i=t.length;let s="";for(var r=1;r<i;r++)""!==t[r]&&(s+=t[r],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):i.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=u.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,r="http://",n="https://",i=location.host;if(e.indexOf(r)||e.indexOf(n)){const t=r+i+(e||"/favicon.ico");return 1===t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,r={}){let n={dispType:"",isSchema:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return n.isSchema=u.getStatusIsSchema(t),n.isRequireUpsert=u.getStatusIsRequireUpsert(t,r,n.isSchema),n.isMultistream=u.getStatusIsMultistream(e),n.isToggleMultistream=u.getStatusIsToggleMultistream(e),n.isMediaCh=u.getStatusIsMediaCh(t.ch),n}static getStatusIsSchema(t){if(t.createTime&&t.updateTime){if((t.createTime.getTime?t.createTime.getTime():t.createTime)===(t.updateTime.getTime?t.updateTime.getTime():t.updateTime)){if(t.lastPost.createTime.getTime()===t.lastPost.updateTime.getTime())return!0}}return!1}static getStatusIsRequireUpsert(t,e,r=!1){if(t.updateTime){const n=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,s=i.getFullYear(),o=i.getMonth(),a=i.getDate(),u=i.getHours(),c=(i.getMinutes(),new Date(s,o,a,u-e.server.findOneThreadActiveHour).getTime());return!!r||n<c}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=u.findTypes[u.findTypeHtml],r=u.findTypes[u.findTypeMusic],n=u.findTypes[u.findTypeVideo];let i="",s="";return t.indexOf(";")>0&&(s=t.split(";")[0]),t.indexOf("/")>0&&(s=t.split("/")[0]),i=u.findTypeHtml,e.includes(s)&&(i=u.findTypeHtml),r.includes(s)&&(i=u.findTypeMusic),n.includes(s)&&(i=u.findTypeVideo),i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=u},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get CONNECTION_SERVER_KEY(){return"connectionServer"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{user:["uid"],setting:"*",thread:["watchCnt"]},responseBroadcastState:{}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*",app:["dispThreadType","offsetFindId","tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{thread:"*",app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["tuned","rootCh","multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:"*",rank:"*"}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:["requestLoginType"]},requestPrivateState:{user:["uid","href"]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["watchCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),r=e[0].split("[")[0];let n;return n=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:r,actionType:n,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,r){const n=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=s.map[n];let u={[s.REDUX_ACTION_KEY]:n};return Object.keys(a).forEach(t=>{u[t]||(u[t]={}),a[t].forEach(n=>{if(!u[t][n]){let s=e[t][n];r&&r[t]&&i.default.isSet(r[t][n])&&(s=r[t][n]),u[t][n]=s}})}),Object.keys(o).forEach(t=>{u[t]||(u[t]={}),o[t].forEach(e=>{u[t][e]||(u[t][e]=r)})}),u}static getResponseState(t,e,r){const n=e.type,i=s.map[n][`response${t}State`];let o={[s.REDUX_ACTION_KEY]:n};return Object.keys(i).forEach(t=>{if(!r[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const n=i[t];let s=r[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===n?o=Object.assign(Object.assign({},o),{[t]:s}):n.forEach(n=>{if(void 0===r[t][n])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${n}`;o=Object.assign(Object.assign({},o),{[t]:Object.assign(Object.assign({},o[t]),{[n]:r[t][n]})})})}}),o}static getRequestActionState(t,e=null,r=null){return"string"==typeof e&&null===r?{type:t}:"object"==typeof e&&"object"==typeof r?Object.assign(Object.assign(Object.assign({},e),r),{type:t}):"string"==typeof e&&"object"==typeof r?Object.assign(Object.assign({},r),{type:t}):Object.assign(Object.assign({},e),{type:t})}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(2)),s=n(r(77)),o=n(r(11)),a=n(r(12)),u=n(r(38));class c{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:r,postsMulti:n,postsSingle:s,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return r;case i.default.dispThreadTypeMulti:return n;case i.default.dispThreadTypeSingle:return s;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:r,posts:n}=t,o=n&&n.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new u.default,t.postsChild=[],t.postsLogs=[],r.dispThreadType){case i.default.dispThreadTypeTimeline:t=c.getAnyActionPostsTimeline(t,n,e,o);break;case i.default.dispThreadTypeMulti:t.postsMulti=o?n:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=o?n:[];break;case i.default.dispThreadTypeChild:t.postsChild=o?n:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=o?n:[]}return t}static getAnyActionPostsTimeline(t,e,r,n){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new o.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new o.default,t.postsTimelineStock=new a.default,n)){const r=e.length;for(let n=0;n<r;n++)0===e[n].currentTime?t.postsTimeline.push(e[n]):t.postsTimelineStock.push(e[n])}return t}}e.default=c},function(t,e){e.encode=function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},e.decode=function(t){for(var e={},r=t.split("&"),n=0,i=r.length;n<i;n++){var s=r[n].split("=");e[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return e}},function(t,e){t.exports=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(110));class s{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(s.inputs).forEach(t=>{s.inputs[t].forEach(e=>{this.belongCoverTypes[e]=t})}),Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(t);const e=s.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL}),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=s.defaultModelKey,e=0,r=!0){let n=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const r=o[t],s=i[r];if(r>e)break;n=s}return r?n+1:n}static get inputs(){return{[s.TYPES.LIKE.LABEL]:[1,2,3,4,5],[s.TYPES.MONEY.LABEL]:[100],[s.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[s.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[s.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[s.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[s.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[s.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[s.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[s.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=s},function(t,e){var r,n,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(t){r=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var u,c=[],l=!1,p=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):p=-1,c.length&&h())}function h(){if(!l){var t=a(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++p<e;)u&&u[p].run();p=-1,e=c.length}u=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function T(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||l||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=T,i.addListener=T,i.once=T,i.off=T,i.removeListener=T,i.removeAllListeners=T,i.emit=T,i.prependListener=T,i.prependOnceListener=T,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){var n=r(49)("socket.io-parser"),i=r(3),s=r(52),o=r(22),a=r(23);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=p;var c=e.ERROR+'"encode error"';function l(t){var r=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(r+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(r+=t.nsp+","),null!=t.id&&(r+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return c;r+=i}return n("encoded %j as %s",t,r),r}function p(){this.reconstructor=null}function f(t){this.reconPack=t,this.buffers=[]}function h(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,r){(n("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){s.removeBlobs(t,(function(t){var r=s.deconstructPacket(t),n=l(r.packet),i=r.buffers;i.unshift(n),e(i)}))}(t,r):r([l(t)])},i(p.prototype),p.prototype.add=function(t){var r;if("string"==typeof t)r=function(t){var r=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return h("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var s="";"-"!==t.charAt(++r)&&(s+=t.charAt(r),r!=t.length););if(s!=Number(s)||"-"!==t.charAt(r))throw new Error("Illegal attachments");i.attachments=Number(s)}if("/"===t.charAt(r+1))for(i.nsp="";++r;){if(","===(u=t.charAt(r)))break;if(i.nsp+=u,r===t.length)break}else i.nsp="/";var a=t.charAt(r+1);if(""!==a&&Number(a)==a){for(i.id="";++r;){var u;if(null==(u=t.charAt(r))||Number(u)!=u){--r;break}if(i.id+=t.charAt(r),r===t.length)break}i.id=Number(i.id)}if(t.charAt(++r)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(r));if(!(!1!==c&&(i.type===e.ERROR||o(c))))return h("invalid payload");i.data=c}return n("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type?(this.reconstructor=new f(r),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",r)):this.emit("decoded",r);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(r=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",r))}},p.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},f.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=s.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},f.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(53),i=r(54),s=r(55);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return p(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|h(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):f(t,e);if("Buffer"===e.type&&s(e.data))return f(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function p(t,e){if(l(e),t=a(t,e<0?0:0|h(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|h(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function h(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return x(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(t).length;default:if(n)return x(t).length;e=(""+e).toLowerCase(),n=!0}}function T(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return w(this,e,r);case"utf8":case"utf-8":return C(this,e,r);case"ascii":return v(this,e,r);case"latin1":case"binary":return b(this,e,r);case"base64":return A(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function g(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:E(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):E(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function E(t,e,r,n,i){var s,o=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,r/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var l=-1;for(s=r;s<a;s++)if(c(t,s)===c(e,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*o}else-1!==l&&(s-=s-l),l=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var p=!0,f=0;f<u;f++)if(c(t,s+f)!==c(e,f)){p=!1;break}if(p)return s}return-1}function m(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[r+o]=a}return o}function S(t,e,r,n){return H(x(e,t.length-r),t,r,n)}function _(t,e,r,n){return H(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function O(t,e,r,n){return _(t,e,r,n)}function I(t,e,r,n){return H(U(e),t,r,n)}function P(t,e,r,n){return H(function(t,e){for(var r,n,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(e,t.length-r),t,r,n)}function A(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function C(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var s,o,a,u,c=t[i],l=null,p=c>239?4:c>223?3:c>191?2:1;if(i+p<=r)switch(p){case 1:c<128&&(l=c);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&c)<<6|63&s)>127&&(l=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&c)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,p=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=p}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return l(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return p(null,t)},u.allocUnsafeSlow=function(t){return p(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!s(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var o=t[r];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?C(this,0,t):T.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),c=this.slice(n,i),l=t.slice(e,r),p=0;p<a;++p)if(c[p]!==l[p]){s=c[p],o=l[p];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return g(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return g(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return m(this,t,e,r);case"utf8":case"utf-8":return S(this,t,e,r);case"ascii":return _(this,t,e,r);case"latin1":case"binary":return O(this,t,e,r);case"base64":return I(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function v(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function b(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function w(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=e;s<r;++s)i+=j(t[s]);return i}function R(t,e,r){for(var n=t.slice(e,r),i="",s=0;s<n.length;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function D(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,s){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function M(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,s=Math.min(t.length-r,2);i<s;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function N(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,s=Math.min(t.length-r,4);i<s;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function k(t,e,r,n,i,s){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Y(t,e,r,n,s){return s||k(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function F(t,e,r,n,s){return s||k(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;r=new u(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||D(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||D(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUInt8=function(t,e){return e||D(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||D(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||D(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||D(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||D(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||D(t,e,this.length);for(var n=this[t],i=1,s=0;++s<e&&(i*=256);)n+=this[t+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||D(t,e,this.length);for(var n=e,i=1,s=this[t+--n];n>0&&(i*=256);)s+=this[t+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return e||D(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||D(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||D(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||D(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||D(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[e]=255&t;++s<r&&(i*=256);)this[e+s]=t/i&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):N(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):N(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return Y(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return Y(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return F(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return F(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,s=n-r;if(this===t&&r<e&&e<n)for(i=s-1;i>=0;--i)t[i+e]=this[i+r];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+s),e);return s},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=u.isBuffer(t)?t:x(new u(t,n).toString()),a=o.length;for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function x(t,e){var r;e=e||1/0;for(var n=t.length,i=null,s=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function U(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function H(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(24))},function(t,e,r){var n=r(58),i=r(18);t.exports=function(t){var e=t.xdomain,r=t.xscheme,s=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||n))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&s)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e){t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(t,e,r){var n=r(4),i=r(3);function s(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=s,i(s.prototype),s.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},s.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},s.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},s.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},s.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},s.prototype.onData=function(t){var e=n.decodePacket(t,this.socket.binaryType);this.onPacket(e)},s.prototype.onPacket=function(t){this.emit("packet",t)},s.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,r){"use strict";(function(t,n){var i,s=r(43);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:n;var o=Object(s.a)(i);e.a=o}).call(this,r(24),r(81)(t))},function(t,e){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,i=t.indexOf("["),s=t.indexOf("]");-1!=i&&-1!=s&&(t=t.substring(0,i)+t.substring(i,s).replace(/:/g,";")+t.substring(s,t.length));for(var o=r.exec(t||""),a={},u=14;u--;)a[n[u]]=o[u]||"";return-1!=i&&-1!=s&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){(function(e){t.exports=function(t){return r&&e.isBuffer(t)||n&&(t instanceof ArrayBuffer||function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}(t))};var r="function"==typeof e&&"function"==typeof e.isBuffer,n="function"==typeof ArrayBuffer}).call(this,r(16).Buffer)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(56),i=r(31),s=r(3),o=r(15),a=r(32),u=r(33),c=r(1)("socket.io-client:manager"),l=r(30),p=r(71),f=Object.prototype.hasOwnProperty;function h(t,e){if(!(this instanceof h))return new h(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new p({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=e.parser||o;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=h,h.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},h.prototype.updateSocketIds=function(){for(var t in this.nsps)f.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},h.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},s(h.prototype),h.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},h.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},h.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},h.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},h.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},h.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},h.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},h.prototype.open=h.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=n(this.uri,this.opts);var r=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var s=a(r,"open",(function(){i.onopen(),t&&t()})),o=a(r,"error",(function(e){if(c("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout((function(){c("connect attempt timed out after %d",u),s.destroy(),r.close(),r.emit("error","timeout"),i.emitAll("connect_timeout",u)}),u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(s),this.subs.push(o),this},h.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},h.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},h.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},h.prototype.ondata=function(t){this.decoder.add(t)},h.prototype.ondecoded=function(t){this.emit("packet",t)},h.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},h.prototype.socket=function(t,e){var r=this.nsps[t];if(!r){r=new i(this,t,e),this.nsps[t]=r;var n=this;r.on("connecting",s),r.on("connect",(function(){r.id=n.generateId(t)})),this.autoConnect&&s()}function s(){~l(n.connecting,r)||n.connecting.push(r)}return r},h.prototype.destroy=function(t){var e=l(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},h.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(r){for(var n=0;n<r.length;n++)e.engine.write(r[n],t.options);e.encoding=!1,e.processPacketQueue()})))},h.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},h.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},h.prototype.close=h.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},h.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},h.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout((function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(r)}})}},h.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,r){var n=r(17),i=r(59),s=r(67),o=r(68);e.polling=function(t){var e=!1,r=!1,o=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,r=t.secure!==a}if(t.xdomain=e,t.xscheme=r,"open"in new n(t)&&!t.forceJSONP)return new i(t);if(!o)throw new Error("JSONP disabled");return new s(t)},e.websocket=o},function(t,e,r){var n=r(19),i=r(9),s=r(4),o=r(10),a=r(29),u=r(1)("engine.io-client:polling");t.exports=l;var c=null!=new(r(17))({xdomain:!1}).responseType;function l(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),n.call(this,t)}o(l,n),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(t){var e=this;function r(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(u("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){u("pre-pause polling complete"),--n||r()}))),this.writable||(u("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){u("pre-pause writing complete"),--n||r()})))}else r()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(t){var e=this;u("polling got data %s",t);s.decodePayload(t,this.socket.binaryType,(function(t,r,n){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},l.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,r)}))},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t}},function(t,e,r){(function(e){var n=r(61),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.exports=function t(r){if(!r||"object"!=typeof r)return!1;if(n(r)){for(var i=0,a=r.length;i<a;i++)if(t(r[i]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(r)||"function"==typeof ArrayBuffer&&r instanceof ArrayBuffer||s&&r instanceof Blob||o&&r instanceof File)return!0;if(r.toJSON&&"function"==typeof r.toJSON&&1===arguments.length)return t(r.toJSON(),!0);for(var u in r)if(Object.prototype.hasOwnProperty.call(r,u)&&t(r[u]))return!0;return!1}}).call(this,r(16).Buffer)},function(t,e,r){"use strict";var n,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),s={},o=0,a=0;function u(t){var e="";do{e=i[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function c(){var t=u(+new Date);return t!==n?(o=0,n=t):t+"."+u(o++)}for(;a<64;a++)s[i[a]]=a;c.encode=u,c.decode=function(t){var e=0;for(a=0;a<t.length;a++)e=64*e+s[t.charAt(a)];return e},t.exports=c},function(t,e){var r=[].indexOf;t.exports=function(t,e){if(r)return t.indexOf(e);for(var n=0;n<t.length;++n)if(t[n]===e)return n;return-1}},function(t,e,r){var n=r(15),i=r(3),s=r(70),o=r(32),a=r(33),u=r(1)("socket.io-client:socket"),c=r(9),l=r(28);t.exports=h;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=i.prototype.emit;function h(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}i(h.prototype),h.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[o(t,"open",a(this,"onopen")),o(t,"packet",a(this,"onpacket")),o(t,"close",a(this,"onclose"))]}},h.prototype.open=h.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},h.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},h.prototype.emit=function(t){if(p.hasOwnProperty(t))return f.apply(this,arguments),this;var e=s(arguments),r={type:(void 0!==this.flags.binary?this.flags.binary:l(e))?n.BINARY_EVENT:n.EVENT,data:e,options:{}};return r.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++),this.connected?this.packet(r):this.sendBuffer.push(r),this.flags={},this},h.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},h.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:n.CONNECT,query:t})}else this.packet({type:n.CONNECT})},h.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},h.prototype.onpacket=function(t){var e=t.nsp===this.nsp,r=t.type===n.ERROR&&"/"===t.nsp;if(e||r)switch(t.type){case n.CONNECT:this.onconnect();break;case n.EVENT:case n.BINARY_EVENT:this.onevent(t);break;case n.ACK:case n.BINARY_ACK:this.onack(t);break;case n.DISCONNECT:this.ondisconnect();break;case n.ERROR:this.emit("error",t.data)}},h.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?f.apply(this,e):this.receiveBuffer.push(e)},h.prototype.ack=function(t){var e=this,r=!1;return function(){if(!r){r=!0;var i=s(arguments);u("sending ack %j",i),e.packet({type:l(i)?n.BINARY_ACK:n.ACK,id:t,data:i})}}},h.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},h.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},h.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)f.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},h.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},h.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},h.prototype.close=h.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:n.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},h.prototype.compress=function(t){return this.flags.compress=t,this},h.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}}},function(t,e){var r=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return e.apply(t,n.concat(r.call(arguments)))}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5)),s=n(r(35)),{SUB_DOMAINS:o,DEVELOPMENT:a}=i.default,{domain:u}=s.default,c="object"==typeof location;s.default.mediaSecondInterval=200,s.default.screenMode={small:600,middle:960},s.default.protcol=c?0===location.href.indexOf("https")?"https":"http":"",s.default.server=u,s.default.portalPath=(s.default.env,`//${o.PORTAL}.${u}/`),s.default.clientPath=`//${o.CLIENT}.${u}/`,s.default.assetsPath=`//${o.ASSETS}.${u}/`,s.default.sessionPath=`//${o.SESSION}.${u}/`,s.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"},e.default=s.default},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5)),s=n(r(72)),o=n(r(14)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_IP:c,LOCALHOST:l,PRODUCTION_DOMAIN:p,DEVELOPMENT_DOMAIN:f,SUB_DOMAINS:h,PORTS:d}=i.default,T=s.default.hostname(),y=function(t){if(t===i.default.PRODUCTION_IP||t.indexOf(i.default.PRODUCTION_DOMAIN)>=0)return i.default.PRODUCTION;if("browser"===o.default.title){const t=Number(location.port);if(t===i.default.PORTS.DEVELOPMENT||t===i.default.PORTS.DEVELOPMENT_API)return i.default.DEVELOPMENT}return i.default.LOCALHOST}(T),g=y===u,E=y===a?p:f,m=`${h.WWW}.${E}`,S=`${h.API}.${E}`,_=g?`${l}:${d.DEVELOPMENT_API}/talkn.api.js`:S+"/v1",O=g?`${l}:${d.DEVELOPMENT}/talkn.client.js`:`${h.CLIENT}.${E}`,I=`${h.DESC}.${E}`,P=`${h.PORTAL}.${E}`,A=`${h.ASSETS}.${E}`,C=A+"/img/",v={domain:E,env:y,hostName:T,apiURL:S,apiAccessURL:_,wwwURL:m,descURL:I,portalURL:P,clientURL:O,assetsURL:A,autoURL:`${h.AUTO}.${E}`,extURL:`${h.EXT}.${E}`,transactionURL:`${h.TRANSACTION}.${E}`,assetsImgPath:C,assetsIconPath:A+"/icon/",assetsJsPath:A+"/js/",sessionURL:`${h.SESSION}.${E}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${C}talkn_logo_html.png`,Music:`//${C}talkn_logo_music.png`,Video:`//${C}talkn_logo_video.png`}};e.default=Object.assign({},v)},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{static get defaultFindId(){return"000000000000000000000000"}constructor(t={}){return super(),this.create({})}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(36));class o extends i.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",r=t&&t.utype?t.utype:"",n=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,u=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,c=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,l=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,p=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;t.requestLoginType&&t.requestLoginType;return this.create({uid:e,utype:r,tuned:n,multistreamed:i,actioned:s,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:l,offsetLogsFindId:p,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:t&&t.href?t.href:"/"}}e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){super();return this.create({watchCnt:0})}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){return super(),this.create(Object.assign({},t))}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(r=>{e[t[r].name]=t[r].value}),e}}e.default=s},function(t,e,r){"use strict";r.r(e),r.d(e,"__DO_NOT_USE__ActionTypes",(function(){return s})),r.d(e,"applyMiddleware",(function(){return y})),r.d(e,"bindActionCreators",(function(){return p})),r.d(e,"combineReducers",(function(){return c})),r.d(e,"compose",(function(){return T})),r.d(e,"createStore",(function(){return a}));var n=r(20),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},s={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function o(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function a(t,e,r){var i;if("function"==typeof e&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===r&&(r=e,e=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(a)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var u=t,c=e,l=[],p=l,f=!1;function h(){p===l&&(p=l.slice())}function d(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function T(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return h(),p.push(t),function(){if(e){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,h();var r=p.indexOf(t);p.splice(r,1),l=null}}}function y(t){if(!o(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,c=u(c,t)}finally{f=!1}for(var e=l=p,r=0;r<e.length;r++){(0,e[r])()}return t}function g(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");u=t,y({type:s.REPLACE})}function E(){var t,e=T;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function r(){t.next&&t.next(d())}return r(),{unsubscribe:e(r)}}})[n.a]=function(){return this},t}return y({type:s.INIT}),(i={dispatch:y,subscribe:T,getState:d,replaceReducer:g})[n.a]=E,i}function u(t,e){var r=e&&e.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++){var i=e[n];0,"function"==typeof t[i]&&(r[i]=t[i])}var o,a=Object.keys(r);try{!function(t){Object.keys(t).forEach((function(e){var r=t[e];if(void 0===r(void 0,{type:s.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:s.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+s.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var n=!1,i={},s=0;s<a.length;s++){var c=a[s],l=r[c],p=t[c],f=l(p,e);if(void 0===f){var h=u(c,e);throw new Error(h)}i[c]=f,n=n||f!==p}return(n=n||a.length!==Object.keys(t).length)?i:t}}function l(t,e){return function(){return e(t.apply(this,arguments))}}function p(t,e){if("function"==typeof t)return l(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in t){var i=t[n];"function"==typeof i&&(r[n]=l(i,e))}return r}function f(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function h(t,e){var r=Object.keys(t);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(t)),e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r}function d(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?h(r,!0).forEach((function(e){f(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):h(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function T(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function y(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return function(){var r=t.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},s=e.map((function(t){return t(i)}));return d({},r,{dispatch:n=T.apply(void 0,s)(r.dispatch)})}}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]=Object.assign({},e),t}}e.default=s},function(t,e,r){"use strict";function n(t){var e,r=t.Symbol;return"function"==typeof r?r.observable?e=r.observable:(e=r("observable"),r.observable=e):e="@@observable",e}r.d(e,"a",(function(){return n}))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(45)),s=n(r(34)),o=n(r(5)),a=n(r(73)),u=n(r(74)),c=n(r(7)),l=n(r(79)),p=n(r(80)),f=n(r(107)),h=n(r(108)),d=n(r(109)),T=n(r(114)),y=n(r(6)),g=n(r(115)),E=n(r(11)),m=n(r(12));class S{constructor(){const{env:t,apiScript:e}=S.getEnvAndApiScript(),r=document.querySelector(`script[src='${c.default.HTTPS_PROTOCOL}//${s.default.clientURL}']`),n=document.querySelector(`script[src='${c.default.HTTPS_PROTOCOL}//${s.default.extURL}']`),i=e?S.rebuildAttributes(e.attributes):{},o=n?S.rebuildAttributes(n.attributes):{},a=Object.assign(Object.assign({},o),i),u=S.initialBootOption(a,r,n);return u.env=t,u}static getEnvAndApiScript(){const{SUB_DOMAINS:t,PORTS:e}=o.default,r=`${c.default.HTTPS_PROTOCOL}//${t.API}.${o.default.PRODUCTION_DOMAIN}/v${s.default.apiVer}`,n=document.querySelector(`script[src='${r}']`);if(n)return{env:o.default.PRODUCTION,apiScript:n};const i=`${c.default.HTTPS_PROTOCOL}//${t.API}.${o.default.DEVELOPMENT_DOMAIN}/v${s.default.apiVer}`,a=document.querySelector(`script[src='${i}']`);if(a)return{env:o.default.LOCALHOST,apiScript:a};const u=`${c.default.HTTPS_PROTOCOL}//${o.default.DEVELOPMENT_DOMAIN}:${e.DEVELOPMENT_API}/talkn.api.js`,l=document.querySelector(`script[src='${u}']`);return l?{env:o.default.DEVELOPMENT,apiScript:l}:void 0}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(r=>{e[t[r].name]=t[r].value}),e}static initialBootOption(t,e,r){return t.ch=t.ch?t.ch:location.href.replace(`${c.default.HTTPS_PROTOCOL}//${s.default.domain}`,"").replace(":"+o.default.PORTS.DEVELOPMENT,"").replace(":"+o.default.PORTS.DEVELOPMENT_API,"").replace(c.default.HTTPS_PROTOCOL+"/","").replace(c.default.HTTP_PROTOCOL+"/",""),s.default.env===o.default.DEVELOPMENT&&(t.ch=t.ch.replace(`/${o.default.LOCALHOST}:${o.default.PORTS.DEVELOPMENT}`,"")),t.hasSlash=S.getHasSlach(t),"/"!==t.ch&&(t.hasSlash?t.ch=t.ch:t.ch=t.ch+"/"),t.type=o.default.APP_TYPES.API,r&&(t.type=o.default.APP_TYPES.EXTENSION),e&&(t.type=o.default.APP_TYPES.PORTAL),delete t.src,delete t.async,t}static getHasSlach({ch:t}){return t.lastIndexOf("/")===t.length-1}}class _{constructor(t,e,r){this.callbacks={};const n=t===o.default.DEVELOPMENT?o.default.DEVELOPMENT_DOMAIN:o.default.PRODUCTION_DOMAIN;this.apiStore=e,this.ws=i.default(`${c.default.HTTPS_PROTOCOL}//${n}:${o.default.PORTS.SOCKET_IO}`,{forceNew:!0}),this.onResponseMeAPI(r),this.setUp=this.setUp.bind(this)}setUp(t,e){this.state=t,this.ch=e,this.onResponseChAPI(),this.onRequestAPI()}onRequestAPI(){const t=d.default,e=Object.keys(t),r=e.length,n=(t,e)=>(r,n=(()=>{}))=>{const i=this.apiStore.getState(),s=c.default.getRequestState(t,i,r),o=c.default.getRequestActionState(t,r),{requestState:a,actionState:u}=e(i,s,o);return this.callbacks[a.type]=n,this.ws.emit(a.type,a),this.apiStore.dispatch(u)};for(let i=0;i<r;i++){const r=e[i],s=r.replace(c.default.API_TO_SERVER_REQUEST,""),o=t[r];this[s]=n(r,o)}}onResponseMeAPI(t=null){const e=((t,e=null)=>{const r=this;return n=>{e&&n.type===c.default.CONNECTION_SERVER_KEY&&e(r);const i=t(n);return this.apiStore.dispatch(i)}})(h.default,t);this.on(c.default.CATCH_ME_KEY,e)}onResponseChAPI(t=this.ch){const e=(t=>e=>{const r=t(e);return this.apiStore.dispatch(r)})(T.default);this.on(t,e)}offResponseChAPI(t=this.ch){this.off(t)}on(t,e=(()=>{})){this.ws._callbacks["$"+t]||this.ws.on(t,e)}off(t){this.ws._callbacks["$"+t]&&this.ws.off(t)}}class O{constructor(){this.apiStore=p.default(),this.bootOption=new S,this.exeCoreApi=this.exeCoreApi.bind(this),this.clientTo=this.clientTo.bind(this),this.subscribe=this.subscribe.bind(this),this.onWsServer=this.onWsServer.bind(this),this.exeCallback=this.exeCallback.bind(this),this.afterMediaFilter=this.afterMediaFilter.bind(this),this.apiStore.subscribe(this.subscribe),this.onActions();const t=[],e=this;t.push(new Promise(t=>{window.onmessage=r=>{switch(t&&(e.origin=r.origin,t()),r.data.type){case a.default.CLIENT_TO_API_TYPE:r.data.method===a.default.HANDLE_API_AND_CLIENT?clearInterval(e.bootId):e.exeCoreApi(r);break;case a.default.HANDLE_EXT_AND_API:break;case a.default.EXT_TO_API_TYPE:e.exeCoreApi(r)}}})),t.push(new Promise(t=>{"complete"===document.readyState?new _(this.bootOption.env,e.apiStore,t):window.onload=r=>{new _(this.bootOption.env,e.apiStore,t)}}).then(this.onWsServer)),Promise.all(t).then(t=>{this.bootId=setInterval(()=>{this.clientTo(a.default.HANDLE_API_AND_CLIENT,this.bootOption)},200)})}static getRequestObj(t,e={}){const r=location.href;return{windowType:window.name,type:a.default.API_TO_CLIENT_TYPE,href:r,method:t,params:e}}exeCoreApi(t){if(this.coreApi&&this.coreApi[t.data.method]){const{method:e,params:r}=t.data,n=this.apiStore.getState();this.beforeMediaFilter({method:e,params:r,apiState:n}),this.coreApi[e](r)}}onWsServer(t){this.coreApi=t;const e=new u.default(window,this.bootOption);this.coreApi.setUp(e,this.bootOption.ch),this.bootOption.type!==o.default.APP_TYPES.API&&this.coreApi.tune(e),window.$t=new l.default(this.coreApi)}onActions(){const t=Object.keys(f.default),e=t.length,r=t=>(e,r)=>{const n=f.default[t](e);this.apiStore.getState();return this.apiStore.dispatch(n)};for(let n=0;n<e;n++){const e=t[n];this[e]=r(e)}}subscribe(){if(this.coreApi){const t=this.apiStore.getState();this.afterMediaFilter(t),this.exeCallback(t.app.actioned,t),this.clientTo(t.app.actioned,t)}}exeCallback(t,e){const{actionType:r,actionName:n}=c.default.getSequenceActionMap(t);if(n!==c.default.API_BROADCAST_CALLBACK&&r===c.default.API_RESPONSE_TYPE_EMIT&&this.coreApi.callbacks[n]){const{posts:t,thread:r,user:i}=e;this.coreApi.callbacks[n](e,{posts:t,thread:r,uid:i.uid})}if(r===c.default.API_RESPONSE_TYPE_BROADCAST&&this.coreApi.callbacks[c.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:r,user:i}=e;this.coreApi.callbacks[c.default.API_BROADCAST_CALLBACK](n,{posts:t,thread:r,uid:i.uid})}}beforeMediaFilter({method:t,params:e,apiState:r}){return r.app.isMediaCh&&"post"===t&&(e.app.inputCurrentTime=this.media.currentTime>0?this.media.currentTime:0),e}afterMediaFilter(t){switch(t.app.actioned){case"SERVER_TO_API[EMIT]:fetchPosts":t.app.isMediaCh&&this.media&&"finding"===this.media.status&&this.media.ch===t.thread.ch?(this.media.setPostsTimelines(t),this.media.playing()):(this.media=new I(this),this.media.searching());break;case"SERVER_TO_API[BROADCAST]:post":if(t.app.isMediaCh){const e=t.posts[0];e.ch===this.media.ch&&e.uid===t.user.uid&&this.media.refrectSelfPost(e)}}}clientTo(t,e={}){const r=O.getRequestObj(t,e);if(this.bootOption.type===o.default.APP_TYPES.PORTAL)window.postMessage(r,this.bootOption.clientHref);else{const t=document.querySelector("iframe#talknExtension");t&&t.contentWindow.postMessage(r,t.src)}}}class I{constructor(t){this.maxSearchingCnt=30,this.status="shutdown",this.isLog=!1,this.globalWindow=t,this.ch=t.apiStore.getState().thread.ch,this.searchingCnt=0,this.playingCnt=0,this.pointerTime=0,this.started=!1,this.isPosting=!1,clearInterval(this.searchingId),clearInterval(this.playIntervalId),this.postsTimeline=[],this.postsTimelineStock=[],this.setPostsTimelines=this.setPostsTimelines.bind(this),this.refrectSelfPost=this.refrectSelfPost.bind(this),this.searching=this.searching.bind(this),this.handleEvents=this.handleEvents.bind(this),this.posting=this.posting.bind(this),this.apiTo=this.apiTo.bind(this),this.log=this.log.bind(this)}static get mediaSecondInterval(){return 200}static getMedia(t){const e=y.default.getMediaSrc(t),r=y.default.getMediaTagType(t);return document.querySelector(`${r}[src='${e}']`)}static getRequestObj(t,e={}){return{windowType:window.name,type:a.default.MEDIA_TO_CLIENT_TYPE,method:t,params:e}}setStatus(t){this.status=t,this.log("SET STATUS")}setPostsTimelines({postsTimeline:t,postsTimelineStock:e}){this.postsTimeline=[...t],this.postsTimelineStock=[...e],this.log("INIT TIMELINES")}refrectSelfPost(t){const e=this.postsTimeline.length;let r=!1;for(let n=0;n<e;n++)t.currentTime<this.postsTimeline[n].currentTime&&(r=!0,this.postsTimeline.splice(n,0,t));r||this.postsTimeline.push(t)}get currentTime(){return this.file?Math.floor(10*this.file.currentTime)/10:0}searching(t=I.mediaSecondInterval){this.setStatus("searching"),this.searchingCnt=0,this.searchingId=null,this.waitingId=null,this.playIntervalId=null,this.searchingId=setInterval(()=>{if(this.searchingCnt<this.maxSearchingCnt){const t=document.querySelectorAll("video"),e=document.querySelectorAll("audio");t.forEach(this.handleEvents),e.forEach(this.handleEvents),t.length>0||e.length>0?(this.setStatus("waiting"),clearInterval(this.searchingId),clearInterval(this.playIntervalId)):this.searchingCnt++}else clearInterval(this.searchingId),clearInterval(this.playIntervalId),this.searching(10*I.mediaSecondInterval)},t)}handleEvents(t){t.addEventListener("play",t=>{this.file=t.srcElement;const e=g.default.deleteProtcol(this.file.currentSrc)+"/";this.ch===e?(0===this.playingCnt&&this.setPostsTimelines(this.globalWindow.apiStore.getState()),this.playing()):(this.setStatus("finding"),this.ch=e,this.globalWindow.coreApi.onResponseChAPI(this.ch),this.globalWindow.coreApi.changeThread({thread:{ch:this.ch}}))}),t.addEventListener("seeked",t=>{this.setStatus("seeking")}),t.addEventListener("pause",t=>{this.setStatus("waiting")}),t.addEventListener("ended",t=>{this.setStatus("waiting"),clearInterval(this.playIntervalId);const e=Number.MAX_SAFE_INTEGER,r=this.postsTimelineStock.length;for(let t=0;t<r&&(this.postsTimelineStock[t]&&this.postsTimelineStock[t].currentTime<=e);t++)this.apiTo("NEXT_POSTS_TIMELINE",{postsTimeline:[this.postsTimelineStock[t]]});this.setStatus("waiting")})}playing(){this.setStatus("playing"),clearInterval(this.playIntervalId),this.playIntervalId=setInterval(()=>{this.posting(this.currentTime)},s.default.mediaSecondInterval)}posting(t=0){if(this.isPosting)return;const e=this.postsTimelineStock.length;if(this.playingCnt++,this.isPosting=!0,this.pointerTime<=t)for(this.pointerTime=t;this.isPosting;)if(0===e)this.isPosting=!1;else{if(!(this.postsTimelineStock[0]&&this.postsTimelineStock[0].currentTime<=t)){this.isPosting=!1;break}{const t=this.postsTimelineStock.shift();this.apiTo("NEXT_POSTS_TIMELINE",{postsTimeline:[t]}),this.log("POSTING")}}else{this.file.pause();const t=this.globalWindow.apiStore.getState().postsTimeline.concat(this.postsTimelineStock),e=t.length;this.pointerTime=this.currentTime,this.postsTimeline=new E.default,this.postsTimelineStock=new m.default;for(let r=0;r<e;r++){const e=t[r];e.currentTime<=this.pointerTime?this.postsTimeline.push(e):this.postsTimelineStock.push(e)}this.apiTo("CLEAR_POSTS_TIMELINE",{postsTimeline:this.postsTimeline,postsTimelineStock:this.postsTimelineStock}),this.isPosting=!1,this.file.play()}}apiTo(t,e={}){this.globalWindow.apiStore.dispatch(Object.assign({type:t},e))}log(t,e=!1){(this.isLog||e)&&(console.log(`@@@@@@@@@@@ ${t} ${this.status} CH ${this.ch} ${this.pointerTime} @@@`),console.log(`postsTimeline: ${this.postsTimeline.length} postsTimelineStock: ${this.postsTimelineStock.length}`),console.log(this.postsTimeline),console.log(this.postsTimelineStock))}}e.Media=I;new O},function(t,e,r){var n=r(46),i=r(15),s=r(25),o=r(1)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i=n(t),u=i.source,c=i.id,l=i.path,p=a[c]&&l in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||p?(o("ignoring socket cache for %s",u),r=s(u,e)):(a[c]||(o("new io instance for %s",u),a[c]=s(u,e)),r=a[c]),i.query&&!e.query&&(e.query=i.query),r.socket(i.path,e)}e.protocol=i.protocol,e.connect=u,e.Manager=r(25),e.Socket=r(31)},function(t,e,r){var n=r(21),i=r(1)("socket.io-client:url");t.exports=function(t,e){var r=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),r=n(t));r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443"));r.path=r.path||"/";var s=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+s+":"+r.port,r.href=r.protocol+"://"+s+(e&&e.port===r.port?"":":"+r.port),r}},function(t,e,r){t.exports=function(t){function e(t){let e=0;for(let r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return n.colors[Math.abs(e)%n.colors.length]}function n(t){let r;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(r||i);e.diff=s,e.prev=r,e.curr=i,r=i,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return r;a++;const s=n.formatters[i];if("function"==typeof s){const n=t[a];r=s.call(e,n),t.splice(a,1),a--}return r}),n.formatArgs.call(e,t),(e.log||n.log).apply(e,t)}return o.namespace=t,o.enabled=n.enabled(t),o.useColors=n.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof n.init&&n.init(o),n.instances.push(o),o}function i(){const t=n.instances.indexOf(this);return-1!==t&&(n.instances.splice(t,1),!0)}function s(t,e){const r=n(this.namespace+(void 0===e?":":e)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},n.disable=function(){const t=[...n.names.map(o),...n.skips.map(o).map(t=>"-"+t)].join(",");return n.enable(""),t},n.enable=function(t){let e;n.save(t),n.names=[],n.skips=[];const r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(e=0;e<i;e++)r[e]&&("-"===(t=r[e].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")));for(e=0;e<n.instances.length;e++){const t=n.instances[e];t.enabled=n.enabled(t.namespace)}},n.enabled=function(t){if("*"===t[t.length-1])return!0;let e,r;for(e=0,r=n.skips.length;e<r;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;e<r;e++)if(n.names[e].test(t))return!0;return!1},n.humanize=r(48),Object.keys(t).forEach(e=>{n[e]=t[e]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=e,n.enable(n.load()),n}},function(t,e){var r=1e3,n=6e4,i=60*n,s=24*i;function o(t,e,r,n){var i=e>=1.5*r;return Math.round(t/r)+" "+n+(i?"s":"")}t.exports=function(t,e){e=e||{};var a=typeof t;if("string"===a&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===a&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=s)return o(t,e,s,"day");if(e>=i)return o(t,e,i,"hour");if(e>=n)return o(t,e,n,"minute");if(e>=r)return o(t,e,r,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=s)return Math.round(t/s)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=n)return Math.round(t/n)+"m";if(e>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){(function(n){function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG),t}(e=t.exports=r(50)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(s=i))})),t.splice(s,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,r(14))},function(t,e,r){function n(t){var r;function n(){if(n.enabled){var t=n,i=+new Date,s=i-(r||i);t.diff=s,t.prev=r,t.curr=i,r=i;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var u=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var i=e.formatters[n];if("function"==typeof i){var s=o[u];r=i.call(t,s),o.splice(u,1),u--}return r})),e.formatArgs.call(t,o);var c=n.log||e.log||console.log.bind(console);c.apply(t,o)}}return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),n.destroy=i,"function"==typeof e.init&&e.init(n),e.instances.push(n),n}function i(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=n.debug=n.default=n).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var s=e.instances[r];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(51),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var r=1e3,n=6e4,i=60*n,s=24*i;function o(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}t.exports=function(t,e){e=e||{};var a,u=typeof t;if("string"===u&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*n;case"seconds":case"second":case"secs":case"sec":case"s":return o*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===u&&!1===isNaN(t))return e.long?o(a=t,s,"day")||o(a,i,"hour")||o(a,n,"minute")||o(a,r,"second")||a+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=n)return Math.round(t/n)+"m";if(t>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){var n=r(22),i=r(23),s=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);e.deconstructPacket=function(t){var e=[],r=t.data,s=t;return s.data=function t(e,r){if(!e)return e;if(i(e)){var s={_placeholder:!0,num:r.length};return r.push(e),s}if(n(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=t(e[a],r);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var u in e)o[u]=t(e[u],r);return o}return e}(r,e),s.attachments=e.length,{packet:s,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,r){if(!e)return e;if(e&&e._placeholder)return r[e.num];if(n(e))for(var i=0;i<e.length;i++)e[i]=t(e[i],r);else if("object"==typeof e)for(var s in e)e[s]=t(e[s],r);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var r=0,s=t;!function t(u,c,l){if(!u)return u;if(o&&u instanceof Blob||a&&u instanceof File){r++;var p=new FileReader;p.onload=function(){l?l[c]=this.result:s=this.result,--r||e(s)},p.readAsArrayBuffer(u)}else if(n(u))for(var f=0;f<u.length;f++)t(u[f],f,u);else if("object"==typeof u&&!i(u))for(var h in u)t(u[h],h,u)}(s),r||e(s)}},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),o=n[0],a=n[1],u=new s(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),l=0,p=a>0?o-4:o;for(r=0;r<p;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[l++]=255&e);1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,s=[],o=0,a=r-i;o<a;o+=16383)s.push(l(t,o,o+16383>a?a:o+16383));1===i?(e=t[r-1],s.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],s.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return s.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=o.length;a<u;++a)n[a]=o[a],i[o.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,r){for(var i,s,o=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(n[(s=i)>>18&63]+n[s>>12&63]+n[s>>6&63]+n[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var s,o,a=8*i-n-1,u=(1<<a)-1,c=u>>1,l=-7,p=r?i-1:0,f=r?-1:1,h=t[e+p];for(p+=f,s=h&(1<<-l)-1,h>>=-l,l+=a;l>0;s=256*s+t[e+p],p+=f,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=n;l>0;o=256*o+t[e+p],p+=f,l-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(h?-1:1);o+=Math.pow(2,n),s-=c}return(h?-1:1)*o*Math.pow(2,s-n)},e.write=function(t,e,r,n,i,s){var o,a,u,c=8*s-i-1,l=(1<<c)-1,p=l>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:s-1,d=n?1:-1,T=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+p>=1?f/u:f*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=l?(a=0,o=l):o+p>=1?(a=(e*u-1)*Math.pow(2,i),o+=p):(a=e*Math.pow(2,p-1)*Math.pow(2,i),o=0));i>=8;t[r+h]=255&a,h+=d,a/=256,i-=8);for(o=o<<i|a,c+=i;c>0;t[r+h]=255&o,h+=d,o/=256,c-=8);t[r+h-d]|=128*T}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){t.exports=r(57),t.exports.parser=r(4)},function(t,e,r){var n=r(26),i=r(3),s=r(1)("engine.io-client:socket"),o=r(30),a=r(4),u=r(21),c=r(9);function l(t,e){if(!(this instanceof l))return new l(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=l,l.priorWebsocketSuccess=!1,i(l.prototype),l.protocol=a.protocol,l.Socket=l,l.Transport=r(19),l.transports=r(26),l.parser=r(4),l.prototype.createTransport=function(t){s('creating transport "%s"',t);var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var r=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new n[t]({query:e,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,withCredentials:r.withCredentials||this.withCredentials,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},l.prototype.open=function(){var t;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},l.prototype.setTransport=function(t){s("setting transport %s",t.name);var e=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},l.prototype.probe=function(t){s('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),r=!1,n=this;function i(){if(n.onlyBinaryUpgrades){var i=!this.supportsBinary&&n.transport.supportsBinary;r=r||i}r||(s('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!r)if("pong"===i.type&&"probe"===i.data){if(s('probe transport "%s" pong',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,s('pausing current transport "%s"',n.transport.name),n.transport.pause((function(){r||"closed"!==n.readyState&&(s("changing transport and sending upgrade packet"),f(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())}))}else{s('probe transport "%s" failed',t);var o=new Error("probe error");o.transport=e.name,n.emit("upgradeError",o)}})))}function o(){r||(r=!0,f(),e.close(),e=null)}function a(r){var i=new Error("probe error: "+r);i.transport=e.name,o(),s('probe transport "%s" failed because of error: %s',t,r),n.emit("upgradeError",i)}function u(){a("transport closed")}function c(){a("socket closed")}function p(t){e&&t.name!==e.name&&(s('"%s" works - aborting "%s"',t.name,e.name),o())}function f(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",u),n.removeListener("close",c),n.removeListener("upgrading",p)}l.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",p),e.open()},l.prototype.onOpen=function(){if(s("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){s("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},l.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else s('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},l.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){s("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},l.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},l.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var i={type:t,data:e,options:r};this.emit("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():e()})):this.upgrading?n():e()}function e(){t.onClose("forced close"),s("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return this},l.prototype.onError=function(t){s("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},l.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++)~o(this.transports,t[r])&&e.push(t[r]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,r){var n=r(17),i=r(27),s=r(3),o=r(10),a=r(1)("engine.io-client:polling-xhr"),u=r(18);function c(){}function l(t){if(i.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}}function p(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=l,t.exports.Request=p,o(l,i),l.prototype.supportsBinary=!0,l.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new p(t)},l.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),i=this;n.on("success",e),n.on("error",(function(t){i.onError("xhr post error",t)})),this.sendXhr=n},l.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},s(p.prototype),p.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new n(t),r=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&e.setRequestHeader(i,this.extraHeaders[i])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(r.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=p.requestsCount++,p.requests[this.index]=this)},p.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},p.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},p.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},p.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete p.requests[this.index],this.xhr=null}},p.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},p.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},p.prototype.abort=function(){this.cleanup()},p.requestsCount=0,p.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){addEventListener("onpagehide"in u?"pagehide":"unload",f,!1)}function f(){for(var t in p.requests)p.requests.hasOwnProperty(t)&&p.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&e.push(n);return e}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e){t.exports=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var i=new Uint8Array(t),s=new Uint8Array(r-e),o=e,a=0;o<r;o++,a++)s[a]=i[o];return s.buffer}},function(t,e){function r(){}t.exports=function(t,e,n){var i=!1;return n=n||r,s.count=t,0===t?e():s;function s(t,r){if(s.count<=0)throw new Error("after called too many times");--s.count,t?(i=!0,e(t),e=n):0!==s.count||i||e(null,r)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var r,n,i,s=String.fromCharCode;function o(t){for(var e,r,n=[],i=0,s=t.length;i<s;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<s?56320==(64512&(r=t.charCodeAt(i++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),i--):n.push(e);return n}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return s(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return s(t);var r="";return 0==(4294965248&t)?r=s(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),r=s(t>>12&15|224),r+=u(t,6)):0==(4292870144&t)&&(r=s(t>>18&7|240),r+=u(t,12),r+=u(t,6)),r+=s(63&t|128)}function l(){if(i>=n)throw Error("Invalid byte index");var t=255&r[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function p(t){var e,s;if(i>n)throw Error("Invalid byte index");if(i==n)return!1;if(e=255&r[i],i++,0==(128&e))return e;if(192==(224&e)){if((s=(31&e)<<6|l())>=128)return s;throw Error("Invalid continuation byte")}if(224==(240&e)){if((s=(15&e)<<12|l()<<6|l())>=2048)return a(s,t)?s:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(s=(7&e)<<18|l()<<12|l()<<6|l())>=65536&&s<=1114111)return s;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var r=!1!==(e=e||{}).strict,n=o(t),i=n.length,s=-1,a="";++s<i;)a+=c(n[s],r);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;r=o(t),n=r.length,i=0;for(var u,c=[];!1!==(u=p(a));)c.push(u);return function(t){for(var e,r=t.length,n=-1,i="";++n<r;)(e=t[n])>65535&&(i+=s((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=s(e);return i}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++)r[t.charCodeAt(n)]=n;e.encode=function(e){var r,n=new Uint8Array(e),i=n.length,s="";for(r=0;r<i;r+=3)s+=t[n[r]>>2],s+=t[(3&n[r])<<4|n[r+1]>>4],s+=t[(15&n[r+1])<<2|n[r+2]>>6],s+=t[63&n[r+2]];return i%3==2?s=s.substring(0,s.length-1)+"=":i%3==1&&(s=s.substring(0,s.length-2)+"=="),s},e.decode=function(t){var e,n,i,s,o,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),p=new Uint8Array(l);for(e=0;e<u;e+=4)n=r[t.charCodeAt(e)],i=r[t.charCodeAt(e+1)],s=r[t.charCodeAt(e+2)],o=r[t.charCodeAt(e+3)],p[c++]=n<<2|i>>4,p[c++]=(15&i)<<4|s>>2,p[c++]=(3&s)<<6|63&o;return l}}()},function(t,e){var r=void 0!==r?r:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,n=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),i=n&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),s=r&&r.prototype.append&&r.prototype.getBlob;function o(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var r=new Uint8Array(t.byteLength);r.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=r.buffer}return e}return t}))}function a(t,e){e=e||{};var n=new r;return o(t).forEach((function(t){n.append(t)})),e.type?n.getBlob(e.type):n.getBlob()}function u(t,e){return new Blob(o(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=n?i?Blob:u:s?a:void 0},function(t,e,r){var n=r(27),i=r(10),s=r(18);t.exports=l;var o,a=/\n/g,u=/\\n/g;function c(){}function l(t){n.call(this,t),this.query=this.query||{},o||(o=s.___eio=s.___eio||[]),this.index=o.length;var e=this;o.push((function(t){e.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.script&&(e.script.onerror=c)}),!1)}i(l,n),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),n.prototype.doClose.call(this)},l.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},l.prototype.doWrite=function(t,e){var r=this;if(!this.form){var n,i=document.createElement("form"),s=document.createElement("textarea"),o=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=o,i.method="POST",i.setAttribute("accept-charset","utf-8"),s.name="d",i.appendChild(s),document.body.appendChild(i),this.form=i,this.area=s}function c(){l(),e()}function l(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),l(),t=t.replace(u,"\\\n"),this.area.value=t.replace(a,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&c()}:this.iframe.onload=c}},function(t,e,r){(function(e){var n,i,s=r(19),o=r(4),a=r(9),u=r(10),c=r(29),l=r(1)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?n=WebSocket:"undefined"!=typeof self&&(n=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{i=r(69)}catch(t){}var p=n||i;function f(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=n&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(p=i),s.call(this,t)}t.exports=f,u(f,s),f.prototype.name="websocket",f.prototype.supportsBinary=!0,f.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new p(t,e):new p(t):new p(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},f.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},f.prototype.write=function(t){var r=this;this.writable=!1;for(var n=t.length,i=0,s=n;i<s;i++)!function(t){o.encodePacket(t,r.supportsBinary,(function(i){if(!r.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate)("string"==typeof i?e.byteLength(i):i.length)<r.perMessageDeflate.threshold&&(s.compress=!1)}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(t){l("websocket closed before onclose event")}--n||a()}))}(t[i]);function a(){r.emit("flush"),setTimeout((function(){r.writable=!0,r.emit("drain")}),0)}},f.prototype.onClose=function(){s.prototype.onClose.call(this)},f.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},f.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t},f.prototype.check=function(){return!(!p||"__initialize"in p&&this.name===f.prototype.name)}}).call(this,r(16).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var r=[],n=(e=e||0)||0;n<t.length;n++)r[n-e]=t[n];return r}},function(t,e){function r(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=r,r.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(t){this.ms=t},r.prototype.setMax=function(t){this.max=t},r.prototype.setJitter=function(t){this.jitter=t}},function(t,e){e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\n",e.homedir=function(){return"/"}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"bootApi"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"bootExtension"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(2)),s=n(r(37)),o=n(r(75)),a=n(r(76)),u=n(r(8)),c=n(r(11)),l=n(r(12)),p=n(r(39)),f=n(r(40)),h=n(r(6)),d=n(r(78));class T{constructor(t,e={},r={}){this.rank=new o.default,this.menuLogs=new a.default(r.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new l.default,this.postsLogs=new u.default,this.analyze=new p.default,this.bootOption=new f.default(e),this.thread=new h.default(t,this.bootOption,r.thread),this.threadDetail=new h.default(t,this.bootOption,r.thread),this.app=new i.default(T.getAppParams(this.thread,this.bootOption,r)),this.user=new s.default(T.getUserParams(this,r)),this.actionLog=new d.default}static getAppParams(t,e,r){return Object.assign(Object.assign({isTransition:!0,rootTitle:t.title},e),t)}static getUserParams(t,e){if(e&&e.user&&e.user.uid)return Object.assign({},e.user);return{dispThreadType:t.thread.ch===t.app.rootCh?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}get appName(){return this.app.name}get talknIndex(){return this.app.talknIndex}get ch(){return this.thread.ch}}e.default=T},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t=[]){return super(),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){return{ver:"2020/06/04",tune:(e,r)=>t.tune({thread:{ch:e}},r),rank:(e,r)=>t.rank({thread:{ch:e}},r),fetchPosts:(e,r)=>t.fetchPosts({thread:{ch:e}},r),post:(e={},r)=>t.post(e,r),getState:()=>t.apiStore.getState()}}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(41),s=n(r(82)),o=n(r(104));e.default=function(t={}){let e=[o.default.updateAction];return i.createStore(s.default,t,i.applyMiddleware(...e))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(41),s=n(r(83)),o=n(r(84)),a=n(r(85)),u=n(r(86)),c=n(r(87)),l=n(r(88)),p=n(r(89)),f=n(r(90)),h=n(r(91)),d=n(r(93)),T=n(r(94)),y=n(r(95)),g=n(r(96)),E=n(r(98)),m=n(r(100)),S=n(r(101)),_=n(r(102)),O=n(r(103));e.reducerFiles={app:s.default,user:o.default,rank:a.default,thread:u.default,threads:c.default,threadDetail:l.default,analyze:p.default,bootOption:f.default,setting:h.default,posts:d.default,postsTimeline:T.default,postsTimelineStock:y.default,postsTimelineZero:g.default,postsTimelineZeroAfter:E.default,postsMulti:m.default,postsSingle:S.default,postsChild:_.default,actioned:O.default},e.default=i.combineReducers(e.reducerFiles)},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(2));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(37));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(2));e.default=(t=[],e)=>{const r=(t,r)=>t.ch===e.app.rootCh||r.ch===e.app.rootCh?0:t.watchCnt<r.watchCnt?1:t.watchCnt>r.watchCnt?-1:0;switch(e.type){case"ON_CLICK_MULTISTREAM":const n=e.app.dispThreadType===i.default.dispThreadTypeMulti?e.postsMulti:e.postsSingle,s=n&&n.length?n.length:0;return s>0?t.map(t=>e.app.rootCh===t.ch?Object.assign(Object.assign({},t),{favicon:n[s-1].favicon,post:n[s-1].post}):t):t;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.app.isLinkCh)return t;const o=e.posts&&e.posts.length?e.posts.length:0;return 0===o?t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{title:e.thread.title,favicon:e.thread.favicon,watchCnt:e.thread.watchCnt}):t):e.app.dispThreadType===i.default.dispThreadTypeMulti?t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{favicon:e.thread.favicon,stampId:e.posts[o-1].stampId,post:e.posts[o-1].post}):t):t;case"SERVER_TO_API[BROADCAST]:fetchPosts":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return 0===t.length?[e.thread]:t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{watchCnt:e.thread.watchCnt}):t).sort(r);case"SERVER_TO_API[BROADCAST]:post":return t.map(t=>e.app.rootCh===t.ch?e.app.multistream?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t:e.posts[0].ch===t.ch?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t);case"SERVER_TO_API[EMIT]:rank":return console.log(e.rank),t&&t.length>0&&e.rank&&e.rank.length>0?(e.rank.shift(),[t[0]].concat(e.rank)):e.rank?e.rank:t;default:return e.rank?e.rank:t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(6));e.default=(t=new i.default({},{},{}),e)=>e.thread?t.merge(e.thread):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(42));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(6));e.default=(t=new i.default({},{},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(39));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(40));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(92));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0));class s extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},r=t&&t.common?t.common:{},n=t&&t.server?t.server:{};return this.create({client:e,common:r,server:n})}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(8));e.default=(t=new i.default,e)=>e.posts?new i.default(e.posts):t},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(11));e.default=(t=new i.default,e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map(t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(12));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(97));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(99));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(8)),s=n(r(35));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.thread.ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let r=[];return t.length+e.postsMulti.length>s.default.findOneLimitCnt?(r=[...e.postsMulti,...t],r.slice(0,s.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(38));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(8));e.default=(t=new i.default,e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.posts[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(0)),s=n(r(2)),o=n(r(8)),a=n(r(6)),u=n(r(42)),c=n(r(105));e.default={updateAction:t=>e=>r=>{const n=t.getState();r&&(r.app=r.app?Object.assign(Object.assign({},n.app),r.app):n.app,r.app.actioned=r.type),l[r.type]&&(r=l[r.type](n,r)),r&&e(r)}};const l={"SERVER_TO_API[BROADCAST]:fetchPosts":(t,e)=>(e.app.tuned=e.thread.ch,e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e),"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.detailCh=e.thread.ch,e.app.desc=e.thread.serverMetas.title,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=s.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,(e=Object.assign({},o.default.getAnyActionPosts(e,t))).thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=s.default.getMediaTypeFromSrc(t),e=c.default.setStoragePostsTimeline(e)}else e.app.chType=s.default.mediaTagTypeNo;return e},"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetTimelineFindId=s.default.defaultOffsetFindId,e.app.offsetMultiFindId=s.default.defaultOffsetFindId,e.app.offsetSingleFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e.app.offsetLogsFindId=s.default.defaultOffsetFindId,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e.posts=new o.default,e.postsMulti=new o.default,e.postsChild=new o.default,e.postsTimeline=new o.default,e.postsSingle=new o.default,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{const{user:r}=t,n=e.posts.length-1;e.app.inputStampId=0,e.user=r;const i=Object.keys(e.thread.emotions);if(e.thread.ch===e.posts[n].ch&&i.length>0){const r=Object.assign({},e.thread.emotions);e.thread.emotions=Object.assign({},t.thread.emotions),Object.keys(r).forEach(t=>{Object.keys(r[t]).forEach(n=>{e.thread.emotions[t][n]=e.thread.emotions[t][n]+r[t][n]})})}else e.thread.emotions=t.thread.emotions;return e=o.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=s.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e=o.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions=Object.assign({},t.threads[e.app.detailCh].emotions),console.log(e.threadDetail.emotions.russellSimple),e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread=Object.assign(Object.assign({},t.thread),e.thread),e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const r=e.thread.ch;e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.thread.ch=r;const n=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=a.default.getFindTypeFromSrc(n),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.postsChild=[],e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let r=!1,{clientMetas:n}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(n).forEach((t,s)=>{n[t]&&""!==n[t]&&i[t]!==n[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),r=!0,e.thread.serverMetas[t]=n[t])}),r)return e.threadDetail=Object.assign({},t.threadDetail),e.threadDetail.serverMetas=Object.assign(Object.assign({},e.threadDetail.serverMetas),e.thread.serverMetas),e}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5)),s=n(r(2)),o=n(r(106));function a(t,e){const{app:r}=t,{storageKey:n}=i.default;if(r.isRootCh){const{postsMulti:e,postsSingle:i}=t;o.default.setStorage(r.rootCh,n.postsMulti,e),o.default.setStorage(r.rootCh,n.postsSingle,i)}return{state:t,props:e}}function u(t){const{app:e,thread:r,postsTimeline:n}=t,{storageKey:s}=i.default;if(e.isMediaCh){const e=n&&n.length?n.length:0;let i=[],a=[];for(let t=0;t<e;t++)0===n[t].currentTime?i.push(n[t]):a.push(n[t]);t.postsTimeline=i,o.default.setStorage(r.ch,s.postsTimelineZero,i),o.default.setStorage(r.ch,s.postsTimeline,a)}return t}e.default={"SERVER_TO_API[BROADCAST]:post":a,"SERVER_TO_API[EMIT]:getMore":a,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:r}=t,{rootCh:n}=r,{storageKey:a}=i.default,u=r.dispThreadType===s.default.dispThreadTypeMulti?a.postSingle:a.postMulti;return o.default.setStorage(n,i.default.storageKey[u],[]),{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:r}=t.app;return o.default.setStorage(r,i.default.storageKey.app,t.app),{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:r}=t;return r.isMediaCh?{state:t=u(t),props:e}:a(t,e)},setStorageHtmlPosts:a,setStoragePostsTimeline:u,getStoragePostsTimeline:function(t){const{storageKey:e}=i.default,r=o.default.getStorage(t,e.postsTimeline);return"Array"===r.constructor.name?r:[]},getStoragePostsTimelineZero:function(t){const{storageKey:e}=i.default,r=o.default.getStorage(t,e.postsTimelineZero);return"Array"===r.constructor.name?r:[]}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5));class s{static getBaseKey(t){return`${i.default.storageKey.baseKey}${t}`}static setStorage(t,e,r){if(e){const n=s.getBaseKey(t);let i=JSON.parse(localStorage.getItem(n));return i=JSON.stringify(Object.assign(Object.assign({},i),{[e]:r})),localStorage.setItem(n,i),!0}return!1}static getStorage(t,e){const r=s.getBaseKey(t),n=JSON.parse(localStorage.getItem(r));return n&&n[e]?n[e]:{}}static getCaches(t){return{menuLogs:s.getStorage(t,i.default.storageKey.menuLogs),app:s.getStorage(t,i.default.storageKey.app),thread:s.getStorage(t,i.default.storageKey.thread),setting:s.getStorage(t,i.default.storageKey.setting)}}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(5));e.default={updateStyle:({styleKey:t,eleType:e,tagName:r,style:n})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:r,style:n}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),onClickToggleMain:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_MAIN",app:t,ui:e}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:r})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:r}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",app:t,ui:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>Object.assign({type:"RESIZE_START_WINDOW"},t),onResizeEndWindow:({app:t,setting:e,bootOption:r})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:r}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=i.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>({type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:r})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:r}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(7));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(7)),s=new(n(r(13)).default);let o={};Object.keys(i.default.map).forEach(t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,r)=>a[e.type]?a[e.type](t,e,r):{requestState:e,actionState:r}});const a={post:(t,e,r)=>{const{app:n}=e;return n.isMediaCh&&(n.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},n.inputStampId?Object.keys(s.balances).forEach(r=>{if(s.balances[r]&&t.thread.emotions[r]){const t=s.balances[r](n.inputStampId);t&&t.forEach(t=>{const n=Object.keys(t)[0],i=s.idKeyTypes[n];e.thread.emotions[r]||(e.thread.emotions[r]={}),e.thread.emotions[r][i]||(e.thread.emotions[r][i]=0),e.thread.emotions[r][i]=t[n]})}}):(r.app=Object.assign({},n),r.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:r}}};e.default=o},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(111)),s=n(r(112)),o=n(r(113));e.default={Plain:i.default,Russell:s.default,RussellSimple:o.default}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(13));class s{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,r)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(13));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,r)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(13));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,r)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(r(7));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static deleteProtcol(t){return t.replace("https:/","").replace("http:/","")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1NjaGVtYS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL0FwcC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2RlZmluZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvVGhyZWFkLnRzIiwid2VicGFjazovLy8uL2FwaS9TZXF1ZW5jZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2Vtb3Rpb25zL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2dsb2JhbFRoaXMuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvY29uZi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vY29uZi50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvVXNlci50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdHNTaW5nbGUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL0FuYWx5emUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL0Jvb3RPcHRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9UaHJlYWRzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9hcGkvdGFsa24uYXBpLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi91dGY4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLWpzb25wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL2NvbW1vbi9Qb3N0TWVzc2FnZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1JhbmsudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL01lbnVMb2dzLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0TXVsdGkudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL0FjdGlvbkxvZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3B1YmxpYy5hcGkudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL2FwaVN0b3JlLnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvdXNlci50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcmFuay50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvdGhyZWFkLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy90aHJlYWRzLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy90aHJlYWREZXRhaWwudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL2FuYWx5emUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL2Jvb3RPcHRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3NldHRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3N0b3JlL1NldHRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lLnRzIiwid2VicGFjazovLy8uL2FwaS9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lU3RvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzVGltZWxpbmVaZXJvLnRzIiwid2VicGFjazovLy8uL2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyby50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNUaW1lbGluZVplcm9BZnRlci50cyIsIndlYnBhY2s6Ly8vLi9hcGkvc3RvcmUvUG9zdHNUaW1lbGluZVplcm9BZnRlci50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNNdWx0aS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvcmVkdWNlcnMvcG9zdHNTaW5nbGUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL3Bvc3RzQ2hpbGQudHMiLCJ3ZWJwYWNrOi8vLy4vYXBpL3JlZHVjZXJzL2FjdGlvbmVkLnRzIiwid2VicGFjazovLy8uL2FwaS9taWRkbGV3YXJlL2luZGV4LnRzIiwid2VicGFjazovLy8uL2FwaS9tYXBUb1N0YXRlVG9Qcm9wcy9zdG9yYWdlLnRzIiwid2VicGFjazovLy8uL2NsaWVudC9vcGVyYXRpb25zL1RhbGtuU2Vzc2lvbi50cyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvYWN0aW9ucy9oYW5kbGVzLnRzIiwid2VicGFjazovLy8uL2FwaS9hY3Rpb25zL3dzL3NlcnZlclRvQXBpRW1pdC50cyIsIndlYnBhY2s6Ly8vLi9hcGkvYWN0aW9ucy93cy9hcGlUb1NlcnZlclJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2Vtb3Rpb25zL21vZGVsL2luZGV4LnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9lbW90aW9ucy9tb2RlbC9QbGFpbi50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vZW1vdGlvbnMvbW9kZWwvUnVzc2VsbC50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vZW1vdGlvbnMvbW9kZWwvUnVzc2VsbFNpbXBsZS50cyIsIndlYnBhY2s6Ly8vLi9hcGkvYWN0aW9ucy93cy9zZXJ2ZXJUb0FwaUJyYWRjYXN0LnRzIiwid2VicGFjazovLy8uL2NsaWVudC9jb250YWluZXIvdXRpbC9jbGllbnRVdGlsLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU2NoZW1hIiwib3B0aW9uIiwidW5kZWZpbmVkIiwiY29uc3RydWN0b3IiLCJ2YWwiLCJnZXRUeXBlIiwiZm4iLCJmblN0cmluZyIsInRvU3RyaW5nIiwic3RhdGUiLCJjbGFzc05hbWUiLCJ0aGlzIiwia2V5cyIsImZvckVhY2giLCJ2YWx1ZXMiLCJ0eXBlIiwiZGVmIiwiaXNBY2NlcHROdWxsIiwiaXNBY2NlcHRCbGFuayIsInZhbGlkIiwiaXNFbXB0eU9iamVjdCIsImxlbmd0aCIsInZhbGlkRnVuYyIsIl92YWx1ZSIsImVycm9yIiwicG9pbnRlciIsInZhbGlkVmFsdWUiLCJ2YWxpZFR5cGUiLCJwYXJhbXNWYWx1ZSIsInBhcmFtc1R5cGUiLCJzZXQiLCJ2YWxpZFJlc3VsdCIsInZhbGlkV2FybiIsImNvbmZpZ3VyYWJsZSIsImVycm9yVGhyb3ciLCJjb25zb2xlIiwid2FybiIsImN1cnJlbnRWYWx1ZSIsImUiLCJwYXJhbXMiLCJpbW11dGFibGUiLCJvYmpLZXlzIiwibWVyZ2VkT2JqIiwiY2FuU2V0Iiwib2JqIiwianNvbk9iaiIsImRlZmF1bHQiLCJ0b0pTT04iLCJmdW5jIiwicmV0dXJuSW1tdXRhYmxlIiwibWFwIiwiZmlsdGVyIiwicmVkdWNlIiwiZmluZCIsInNvcnQiLCJwdXNoIiwidW5zaGlmdCIsInJlc3VsdHMiLCJzaGlmdCIsInBvcCIsIlN0cmluZyIsImluZGV4T2YiLCJsb2ciLCJhcmdzIiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImNvbG9yIiwic3BsaWNlIiwiaW5kZXgiLCJsYXN0QyIsInJlcGxhY2UiLCJtYXRjaCIsInNhdmUiLCJuYW1lc3BhY2VzIiwic3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwibG9hZCIsImdldEl0ZW0iLCJwcm9jZXNzIiwiZW52IiwiREVCVUciLCJ3aW5kb3ciLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwicGFyc2VJbnQiLCJSZWdFeHAiLCIkMSIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImNvbG9ycyIsImZvcm1hdHRlcnMiLCJqIiwidiIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlIiwiQXBwIiwic3VwZXIiLCJvZmZzZXRUaW1lbGluZUZpbmRJZCIsImRlZmF1bHRGaW5kSWQiLCJvZmZzZXRTaW5nbGVGaW5kSWQiLCJvZmZzZXRNdWx0aUZpbmRJZCIsIm9mZnNldENoaWxkRmluZElkIiwib2Zmc2V0TG9nc0ZpbmRJZCIsImNoIiwidGFsa25JbmRleCIsImlzTWVkaWFDaCIsImlzU2V0IiwiZ2V0SXNNZWRpYUNoIiwiaXNMaW5rQ2giLCJyb290Q2giLCJpc1Jvb3RDaCIsInJvb3RUaXRsZSIsInNyYyIsImdldE1lZGlhU3JjIiwicHJvdG9jb2wiLCJjaFR5cGUiLCJnZXRNZWRpYVR5cGUiLCJ0dW5lZCIsImRpc3BUaHJlYWRUeXBlIiwiZ2V0RGlzcFRocmVhZFR5cGUiLCJtdWx0aXN0cmVhbSIsImZpbmRUeXBlIiwiZmluZFR5cGVBbGwiLCJvZmZzZXRGaW5kSWQiLCJkZWZhdWx0T2Zmc2V0RmluZElkIiwiaW5wdXRQb3N0IiwiaW5wdXRTdGFtcElkIiwiaW5wdXRDdXJyZW50VGltZSIsImlucHV0U2VhcmNoIiwiaXNUb2dnbGVNdWx0aXN0cmVhbSIsImFjdGlvbmVkIiwiZGVidWciLCJtZWRpYVR5cGVNcDMiLCJtZWRpYVR5cGVNcDQiLCJtZWRpYVR5cGVNNGEiLCJtZWRpYVRhZ1R5cGVBdWRpbyIsIm1lZGlhVGFnVHlwZVZpZGVvIiwiZ2V0TWVkaWFUeXBlRnJvbVNyYyIsIm1lZGlhQ2hUYWdUeXBlS2V5cyIsIm1lZGlhQ2hUYWdUeXBlcyIsIm1lZGlhQ2hUYWdUeXBlTGVuZ3RoIiwibWVkaWFUeXBlIiwicmVnRXhwIiwidGVzdCIsImlubmVyV2lkdGgiLCJ3aWR0aCIsIk51bWJlciIsImlubmVySGVpZ2h0IiwiY29udGVudFR5cGUiLCJpc0F1ZGlvQ29udGVudFR5cGUiLCJpc1ZpZGVvQ29udGVudFR5cGUiLCJtZWRpYUNocyIsInNvbWUiLCJleHQiLCJyZWdleHAiLCJhcHAiLCJ1aSIsImNhbGxlZCIsIm1lbnVDb21wb25lbnQiLCJkaXNwVGhyZWFkVHlwZU11bHRpIiwiZGlzcFRocmVhZFR5cGVUaW1lbGluZSIsInBvc3RzIiwiX2lkIiwicmFuayIsInRocmVhZFN0YXR1cyIsInRvQ2giLCJhZnRlckRpc3BUaHJlYWRUeXBlIiwiYmVmb3JlRGlzcFRocmVhZFR5cGUiLCJnZXRTdGVwRGlzcFRocmVhZFR5cGUiLCJzdGVwVG8iLCJ1cGRhdGVkQXBwIiwiaGF2ZU1lbnVJbmRleCIsIm1pIiwiZGlzcFRocmVhZFR5cGVDaGlsZCIsImRpc3BUaHJlYWRUeXBlU2luZ2xlIiwiRW1pdHRlciIsIm1peGluIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJfY2FsbGJhY2tzIiwib25jZSIsIm9mZiIsImFwcGx5IiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2IiLCJjYWxsYmFja3MiLCJlbWl0Iiwic2xpY2UiLCJsZW4iLCJsaXN0ZW5lcnMiLCJoYXNMaXN0ZW5lcnMiLCJiYXNlNjRlbmNvZGVyIiwiaGFzQmluYXJ5Iiwic2xpY2VCdWZmZXIiLCJhZnRlciIsInV0ZjgiLCJBcnJheUJ1ZmZlciIsImlzQW5kcm9pZCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInBhY2tldHMiLCJvcGVuIiwiY2xvc2UiLCJwaW5nIiwicG9uZyIsInVwZ3JhZGUiLCJub29wIiwicGFja2V0c2xpc3QiLCJlcnIiLCJkYXRhIiwiQmxvYiIsImFyeSIsImVhY2giLCJkb25lIiwicmVzdWx0IiwiQXJyYXkiLCJuZXh0IiwiZWFjaFdpdGhJbmRleCIsImVsIiwibXNnIiwiZW5jb2RlUGFja2V0IiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiY2FsbGJhY2siLCJidWZmZXIiLCJlbmNvZGVCYXNlNjRQYWNrZXQiLCJjb250ZW50QXJyYXkiLCJVaW50OEFycmF5IiwicmVzdWx0QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVuY29kZUFycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsInN0cmljdCIsImI2NGRhdGEiLCJiNjQiLCJzcGxpdCIsInJlYWRBc0RhdGFVUkwiLCJmcm9tQ2hhckNvZGUiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwiZGVjb2RlIiwidHJ5RGVjb2RlIiwic3Vic3RyaW5nIiwicmVzdCIsImVuY29kZVBheWxvYWQiLCJpc0JpbmFyeSIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsImRvbmVDYWxsYmFjayIsInNldExlbmd0aEhlYWRlciIsImpvaW4iLCJkZWNvZGVQYXlsb2FkIiwiZGVjb2RlUGF5bG9hZEFzQmluYXJ5IiwiY2hyIiwiZW5jb2RlZFBhY2tldHMiLCJ0b3RhbExlbmd0aCIsImFjYyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJpc1N0cmluZyIsImFiIiwidmlldyIsImNoYXJDb2RlQXQiLCJsZW5TdHIiLCJiaW5hcnlJZGVudGlmaWVyIiwic2l6ZSIsImxlbmd0aEFyeSIsImJ1ZmZlclRhaWwiLCJidWZmZXJzIiwidGFpbEFycmF5IiwibXNnTGVuZ3RoIiwidG90YWwiLCJQUk9EVUNUSU9OIiwiTE9DQUxIT1NUIiwiREVWRUxPUE1FTlQiLCJQUk9EVUNUSU9OX0lQIiwiUFJPRFVDVElPTl9ET01BSU4iLCJERVZFTE9QTUVOVF9ET01BSU4iLCJQT1JUUyIsIkhUVFAiLCJIVFRQUyIsIkRFVkVMT1BNRU5UX0FQSSIsIlJFRElTIiwiTU9OR08iLCJTT0NLRVRfSU8iLCJTVUJfRE9NQUlOUyIsIldXVyIsIkFQSSIsIkRFU0MiLCJQT1JUQUwiLCJDTElFTlQiLCJBU1NFVFMiLCJTRVNTSU9OIiwiQVVUTyIsIkVYVCIsIlRSQU5TQUNUSU9OIiwiQVBQX1RZUEVTIiwiRVhURU5TSU9OIiwiVVJMIiwidHdpdHRlciIsImZhY2Vib29rIiwiYXBwc3RvcmUiLCJwbGF5c3RvcmUiLCJ0YWxrbkNsaWVudEpzIiwibm9Jbm5lck5vdGlmIiwic3RvcmFnZUtleSIsImJhc2VLZXkiLCJwb3N0c1RpbWVsaW5lWmVybyIsInBvc3RzVGltZWxpbmUiLCJwb3N0c1NpbmdsZSIsInBvc3RzTXVsdGkiLCJwb3N0c0NoaWxkIiwicG9zdHNMb2dzIiwidGhyZWFkcyIsIlRocmVhZCIsImJvb3RPcHRpb24iLCJjYWNoZSIsImNocyIsIlRBTEtOX1BST1RPQ09MIiwiY2hhcnNldCIsImhvc3QiLCJmYXZpY29uIiwiZ2V0RGVmYXVsdEZhdmljb24iLCJ0aXRsZSIsImdldERlZmF1bHRUaXRsZSIsIm1ldGFzIiwic2VydmVyTWV0YXMiLCJjbGllbnRNZXRhcyIsImxpbmtzIiwiaDFzIiwiYXVkaW9zIiwidmlkZW9zIiwibGF5ZXIiLCJnZXRMYXllciIsIm1lZGlhSW5kZXgiLCJwb3N0Q250IiwibXVsdGlQb3N0Q250IiwiaXNTZWxmQ2giLCJjcmVhdGVUaW1lIiwidXBkYXRlVGltZSIsInRocmVhZCIsImlzV2luZG93T2JqIiwiY29uc3RydWN0b3JGcm9tV2luZG93IiwiZmluZFR5cGVIdG1sIiwiZmluZFR5cGVNdXNpYyIsImZpbmRUeXBlVmlkZW8iLCJhbGVydCIsImJvb3RDaCIsImdldENoIiwiaHJlZiIsImhhc1NsYXNoIiwiaGFzc2xhc2giLCJnZXRCb29sIiwiZ2V0UHJvdG9jb2wiLCJnZXRIb3N0IiwiZ2V0Q2hzIiwibG9jYXRpb24iLCJnZXRGYXZpY29uRnJvbVdpbmRvdyIsImdldElzU2VsZkNoIiwiX2NoIiwiY2hBcnIiLCJjaExlbmd0aCIsIm5ld0NoIiwiZG9tYWluIiwidSIsImV2YWx1YXRlIiwic3RyaW5nVmFsdWUiLCJoIiwiaHMiLCJ1cmwiLCJzZXR0aW5nIiwic3RhdHVzIiwiZGlzcFR5cGUiLCJpc1NjaGVtYSIsImlzUmVxdWlyZVVwc2VydCIsImlzTXVsdGlzdHJlYW0iLCJnZXRNb3JlIiwiZ2V0U3RhdHVzSXNTY2hlbWEiLCJnZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQiLCJnZXRTdGF0dXNJc011bHRpc3RyZWFtIiwiZ2V0U3RhdHVzSXNUb2dnbGVNdWx0aXN0cmVhbSIsImdldFN0YXR1c0lzTWVkaWFDaCIsImdldFRpbWUiLCJsYXN0UG9zdCIsInRocmVhZFVwZGF0ZVRpbWUiLCJub3ciLCJEYXRlIiwibm93WWVhciIsImdldEZ1bGxZZWFyIiwibm93TW9udGgiLCJnZXRNb250aCIsIm5vd0RheSIsImdldERhdGUiLCJub3dIb3VyIiwiZ2V0SG91cnMiLCJhY3RpdmVUaW1lIiwiZ2V0TWludXRlcyIsInNlcnZlciIsImZpbmRPbmVUaHJlYWRBY3RpdmVIb3VyIiwiZmluZFR5cGVzIiwic3BsaXRlZENvbnRlbnRUeXBlIiwiaW5jbHVkZXMiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsIlNlcXVlbmNlIiwiQVBJX1JFUVVFU1RfVFlQRSIsIk1FVEhPRF9DT0xPTiIsIkFQSV9SRVNQT05TRV9UWVBFX0VNSVQiLCJBUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1QiLCJ0dW5lIiwicmVxdWVzdFB1YmxpY1N0YXRlIiwicmVxdWVzdFByaXZhdGVTdGF0ZSIsInJlc3BvbnNlRW1pdFN0YXRlIiwidXNlciIsInJlc3BvbnNlQnJvYWRjYXN0U3RhdGUiLCJmZXRjaFBvc3RzIiwidXBkYXRlVGhyZWFkIiwiY2hhbmdlVGhyZWFkIiwiY2hhbmdlVGhyZWFkRGV0YWlsIiwiYWRkRmluZENoaWxkIiwicG9zdCIsInVwZGF0ZVRocmVhZFNlcnZlck1ldGFzIiwibG9naW4iLCJkaXNjb25uZWN0IiwibWV0aG9kIiwic3BsaXRlZCIsInNlcXVlbmNlIiwiYWN0aW9uVHlwZSIsImFjdGlvbk5hbWUiLCJhY3RpdmVSZXNwb25zZU1hcCIsImJyb2FkY2FzdCIsIkFQSV9UT19TRVJWRVJfUkVRVUVTVCIsIkFQSV9UT19DTElFTlRfUkVRVUVTVCIsIlNFUlZFUl9UT19BUElfRU1JVCIsIkFQSV9UT19DTElFTlRfRU1JVCIsIlNFUlZFUl9UT19BUElfQlJPQURDQVNUIiwiQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QiLCJyZWR1eFN0YXRlIiwicmVxdWVzdFBhcmFtcyIsImVuZHBvaW50S2V5IiwicmVxdWVzdFN0YXRlIiwiUkVEVVhfQUNUSU9OX0tFWSIsInN0YXRlS2V5IiwiY29sdW1uTmFtZSIsInJlc3BvbnNlVHlwZSIsInVwZGF0ZVN0YXRlIiwicmVzcG9uc2VTY2hlbWEiLCJyZXNwb25zZVN0YXRlIiwidXBkYXRlU3RhdGVLZXkiLCJjb2x1bW5OYW1lcyIsInVwZGF0ZVN0YXRlVmFsdWUiLCJfX3YiLCJyZXF1ZXN0UGFyYW1zMSIsInJlcXVlc3RQYXJhbXMyIiwiUG9zdHMiLCJkaXNwVGhyZWFkVHlwZUxvZ3MiLCJhY3Rpb24iLCJleGlzdFBvc3RzIiwiZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZSIsInBvc3RzVGltZWxpbmVTdG9jayIsInBvc3RzTGVuZ3RoIiwiY3VycmVudFRpbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImEiLCJiIiwiRW1vdGlvbnMiLCJiZWxvbmdDb3ZlclR5cGVzIiwiaWRLZXlUeXBlcyIsInR5cGVzQXJyYXkiLCJpbnB1dHMiLCJsYWJlbCIsInN0YW1wSWQiLCJUWVBFUyIsIklEIiwiTEFCRUwiLCJtb2RlbCIsImJhbGFuY2VzIiwicGxhaW4iLCJQbGFpbiIsImdldFNhdmVCYWxhbmNlIiwicnVzc2VsbCIsIlJ1c3NlbGwiLCJydXNzZWxsU2ltcGxlIiwiUnVzc2VsbFNpbXBsZSIsIkxJS0UiLCJJTlRFUkVTVCIsIkRJU0NPVkVSWSIsIlNVTk5ZIiwiUEVBQ0UiLCJDSEVFUiIsIk1PTkVZIiwiVU5MSUtFIiwiTE9WRSIsIlNVUFJJU0UiLCJFWENJVEUiLCJIQVBQWSIsIkpPWSIsIkdMQUQiLCJTQVRJU0ZBQ1RJT04iLCJDT01GT1JUIiwiUkVMQVgiLCJUSVJFRCIsIlNMRUVQWSIsIlNMQUNLIiwiQk9SSU5HIiwiTUVMQU5DSE9MWSIsIlNBRCIsIlVOUExFQVNBTlQiLCJGUlVTVFJBVEVEIiwiRElTU0FUSVNGSUVEIiwiQU5HRVIiLCJXT1JSWSIsIkZFQVIiLCJXT1JSWV9GRUFSIiwibW9kZWxLZXkiLCJkZWZhdWx0TW9kZWxLZXkiLCJ0b3RhbE51bSIsImFkZFplcm8iLCJncmFwaE1heE51bSIsImxpbWl0cyIsIjEiLCI1IiwiMTAiLCIzMCIsIjcwIiwiMTAwIiwiMjUwIiwiNTAwIiwiNzUwIiwiMTAwMCIsIjYiLCIyMCIsIjUwIiwibGltaXRLZXlzIiwibGltaXRMZW5ndGgiLCJrZXlOdW0iLCJlbW90aW9uTGltaXROdW0iLCIyIiwiMyIsIjQiLCIxMDAxIiwiMTAwMiIsIjExMDEiLCIxMTAyIiwiMTEwMyIsIjEyMDEiLCIxMjAyIiwiMTIwMyIsIjEyMDQiLCIxMzAxIiwiMTMwMiIsIjEzMDMiLCIxMzA0IiwiMTMwNSIsIjEzMDYiLCIxMzA3IiwiMTQwMSIsIjE0MDIiLCIxNTAxIiwiMTUwMiIsIjE1MDMiLCIxNTA0IiwiMTYwMSIsIjE2MDIiLCIxNjAzIiwiMTcwMSIsIjE3MDIiLCIxNzAzIiwiMTgwMSIsIjE4MDIiLCIxODAzIiwiMjAwMSIsIjIwMDIiLCIyMDAzIiwiMjAwNCIsIjIwMDUiLCIyMTAxIiwiMjEwMiIsIjIxMDMiLCIyMjAxIiwiMjIwMiIsIjIyMDMiLCIyMjA0IiwiMjIwNSIsIjIzMDEiLCIyMzAyIiwiMjMwMyIsIjI0MDEiLCIyNDAyIiwiMjQwMyIsIjI0MDQiLCIyNTAxIiwiMjUwMiIsIjI1MDMiLCIyNjAxIiwiMjYwMiIsIjI3MDEiLCIyNzAyIiwiMjcwMyIsIjI3MDQiLCIyNzA1IiwiMjcwNiIsIjI4MDEiLCIyODAyIiwiMjgwMyIsIjI4MDQiLCIyODA1IiwiMjgwNiIsIjI5MDEiLCIyOTAyIiwiMjkwMyIsIjI5MDQiLCIyOTA1IiwiMjkwNiIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiRXJyb3IiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiYmluYXJ5IiwiaXNBcnJheSIsImlzQnVmIiwiRW5jb2RlciIsInR5cGVzIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJFVkVOVCIsIkFDSyIsIkVSUk9SIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIkRlY29kZXIiLCJFUlJPUl9QQUNLRVQiLCJlbmNvZGVBc1N0cmluZyIsImF0dGFjaG1lbnRzIiwibnNwIiwiaWQiLCJwYXlsb2FkIiwidHJ5U3RyaW5naWZ5IiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJyZWNvblBhY2siLCJyZW1vdmVCbG9icyIsImJsb2JsZXNzRGF0YSIsImRlY29uc3RydWN0aW9uIiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrIiwiZW5jb2RlQXNCaW5hcnkiLCJhZGQiLCJidWYiLCJwYXJzZSIsInRyeVBhcnNlIiwiZGVjb2RlU3RyaW5nIiwidGFrZUJpbmFyeURhdGEiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiX19wcm90b19fIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsIlR5cGVFcnJvciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJzdGFydCIsImVuZCIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIngiLCJ5IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaXNGaW5pdGUiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJ0cmltIiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwiZHN0IiwiaGFzQ09SUyIsImdsb2JhbFRoaXMiLCJvcHRzIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbmFibGVzWERSIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsInNlbGYiLCJGdW5jdGlvbiIsInBhcnNlciIsIlRyYW5zcG9ydCIsInBhdGgiLCJob3N0bmFtZSIsInBvcnQiLCJzZWN1cmUiLCJxdWVyeSIsInRpbWVzdGFtcFBhcmFtIiwidGltZXN0YW1wUmVxdWVzdHMiLCJyZWFkeVN0YXRlIiwiYWdlbnQiLCJzb2NrZXQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImlzUmVhY3ROYXRpdmUiLCJleHRyYUhlYWRlcnMiLCJsb2NhbEFkZHJlc3MiLCJvbkVycm9yIiwiZGVzYyIsImRlc2NyaXB0aW9uIiwiZG9PcGVuIiwiZG9DbG9zZSIsIm9uQ2xvc2UiLCJzZW5kIiwib25PcGVuIiwid3JpdGFibGUiLCJvbkRhdGEiLCJvblBhY2tldCIsInJvb3QiLCJyZSIsInBhcnRzIiwiZXhlYyIsInVyaSIsInNvdXJjZSIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiZyIsImVpbyIsIlNvY2tldCIsIkJhY2tvZmYiLCJoYXMiLCJNYW5hZ2VyIiwibnNwcyIsInN1YnMiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsImppdHRlciIsImNvbm5lY3RpbmciLCJsYXN0UGluZyIsInBhY2tldEJ1ZmZlciIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiZGVjb2RlciIsImF1dG9Db25uZWN0IiwiZW1pdEFsbCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5Iiwic2V0TWluIiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJzZXRKaXR0ZXIiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJzZXRNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwicmVjb25uZWN0aW5nIiwiYXR0ZW1wdHMiLCJyZWNvbm5lY3QiLCJjb25uZWN0Iiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJvbm9wZW4iLCJlcnJvclN1YiIsImNsZWFudXAiLCJ0aW1lciIsIm9ucGluZyIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uZXJyb3IiLCJvbkNvbm5lY3RpbmciLCJvcHRpb25zIiwicHJvY2Vzc1BhY2tldFF1ZXVlIiwic3Vic0xlbmd0aCIsInJlc2V0Iiwib25jbG9zZSIsInJlYXNvbiIsImRlbGF5IiwiZHVyYXRpb24iLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInBvbGxpbmciLCJ4ZCIsInhzIiwianNvbnAiLCJpc1NTTCIsImZvcmNlSlNPTlAiLCJwYXJzZXFzIiwiaW5oZXJpdCIsInllYXN0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJmb3JjZUJhc2U2NCIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJkb1BvbGwiLCJjYWxsYmFja2ZuIiwiZG9Xcml0ZSIsInNjaGVtYSIsInNpZCIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwicHJldiIsImFscGhhYmV0Iiwic2VlZCIsIm51bSIsImRlY29kZWQiLCJ0b0FycmF5IiwiaGFzQmluIiwiZXZlbnRzIiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsInJlY29ubmVjdF9hdHRlbXB0IiwicmVjb25uZWN0X2ZhaWxlZCIsInJlY29ubmVjdF9lcnJvciIsImlvIiwianNvbiIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsImZsYWdzIiwic3ViRXZlbnRzIiwiZXYiLCJjb21wcmVzcyIsIm9ucGFja2V0Iiwic2FtZU5hbWVzcGFjZSIsInJvb3ROYW1lc3BhY2VFcnJvciIsIm9uY29ubmVjdCIsIm9uZXZlbnQiLCJvbmFjayIsIm9uZGlzY29ubmVjdCIsImFjayIsInNlbnQiLCJlbWl0QnVmZmVyZWQiLCJleGlzdExvY2F0aW9uIiwibWVkaWFTZWNvbmRJbnRlcnZhbCIsInNjcmVlbk1vZGUiLCJzbWFsbCIsIm1pZGRsZSIsInByb3Rjb2wiLCJwb3J0YWxQYXRoIiwiY2xpZW50UGF0aCIsImFzc2V0c1BhdGgiLCJzZXNzaW9uUGF0aCIsImNhY2hlS2V5IiwiaG9zdE5hbWUiLCJnZXRFbnYiLCJpc0RldiIsInd3d1VSTCIsImFwaVVSTCIsImFwaUFjY2Vzc1VSTCIsImNsaWVudFVSTCIsImRlc2NVUkwiLCJwb3J0YWxVUkwiLCJhc3NldHNVUkwiLCJhc3NldHNJbWdQYXRoIiwiY29uZiIsImF1dG9VUkwiLCJleHRVUkwiLCJ0cmFuc2FjdGlvblVSTCIsImFzc2V0c0ljb25QYXRoIiwiYXNzZXRzSnNQYXRoIiwic2Vzc2lvblVSTCIsImFwaVZlciIsImZpbmRPbmVQb3N0Q250IiwiZmluZE9uZUxpbWl0Q250Iiwib2dwSW1hZ2VzIiwiSHRtbCIsIk11c2ljIiwiVmlkZW8iLCJQb3N0IiwiVXNlciIsInVpZCIsInV0eXBlIiwibXVsdGlzdHJlYW1lZCIsInJlcXVlc3RMb2dpblR5cGUiLCJmcmllbmRzIiwiQW5hbHl6ZSIsIndhdGNoQ250IiwiQm9vdE9wdGlvbiIsImF0dHJpYnV0ZXMiLCJyZWJ1aWxkQXR0cmlidXRlc09iaiIsInJhbmRvbVN0cmluZyIsInJhbmRvbSIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImRpc3BhdGNoIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiVGhyZWFkcyIsImJhc2VUaHJlYWRzIiwibWVyZ2VUaHJlYWQiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJhcGlTY3JpcHQiLCJnZXRFbnZBbmRBcGlTY3JpcHQiLCJjbGllbnRTY3JpcHQiLCJxdWVyeVNlbGVjdG9yIiwiSFRUUFNfUFJPVE9DT0wiLCJleHRTY3JpcHQiLCJhcGlTY3JpcHRBdHQiLCJyZWJ1aWxkQXR0cmlidXRlcyIsImV4dFNjcmlwdEF0dCIsImJvb3RQYXJhbXMiLCJpbml0aWFsQm9vdE9wdGlvbiIsInByb2RBcGlTcmMiLCJwcm9kQXBpU2NyaXB0IiwibG9jYWxBcGlTcmMiLCJsb2NhbEFwaVNjcmlwdCIsImRldkFwaVNyYyIsImRldkFwaVNjcmlwdCIsIkhUVFBfUFJPVE9DT0wiLCJnZXRIYXNTbGFjaCIsImFzeW5jIiwiQ29yZUFQSSIsImFwaVN0b3JlIiwicmVzb2x2ZSIsIndzU2VydmVyIiwid3MiLCJmb3JjZU5ldyIsIm9uUmVzcG9uc2VNZUFQSSIsInNldFVwIiwib25SZXNwb25zZUNoQVBJIiwib25SZXF1ZXN0QVBJIiwiYWN0aW9ucyIsImFjdGlvbktleXMiLCJhY3Rpb25MZW5ndGgiLCJnZXRDb3JlQVBJIiwiYmVmb3JlRnVuY3Rpb24iLCJfcmVxdWVzdFN0YXRlIiwiZ2V0UmVxdWVzdFN0YXRlIiwiX2FjdGlvblN0YXRlIiwiZ2V0UmVxdWVzdEFjdGlvblN0YXRlIiwiYWN0aW9uU3RhdGUiLCJhY3Rpb25Ob2RlQ250IiwiYWN0aW9uUGxhaW5OYW1lIiwicmVzcG9uc2UiLCJDT05ORUNUSU9OX1NFUlZFUl9LRVkiLCJnZXRUb01lQVBJIiwiQ0FUQ0hfTUVfS0VZIiwiYWN0aW9uTWV0aG9kIiwiZ2V0UmVzcG9uc2VDaEFQSSIsIm9uS2V5Iiwib2ZmS2V5IiwiR2xvYmFsV2luZG93IiwiZXhlQ29yZUFwaSIsImNsaWVudFRvIiwib25Xc1NlcnZlciIsImV4ZUNhbGxiYWNrIiwiYWZ0ZXJNZWRpYUZpbHRlciIsIm9uQWN0aW9ucyIsImJvb3RQcm9taXNlcyIsIlByb21pc2UiLCJvbk1lc3NhZ2VSZXNvbHZlIiwib25tZXNzYWdlIiwib3JpZ2luIiwiQ0xJRU5UX1RPX0FQSV9UWVBFIiwiSEFORExFX0FQSV9BTkRfQ0xJRU5UIiwiY2xlYXJJbnRlcnZhbCIsImJvb3RJZCIsIkhBTkRMRV9FWFRfQU5EX0FQSSIsIkVYVF9UT19BUElfVFlQRSIsInJlc292ZSIsInRoZW4iLCJhbGwiLCJzZXRJbnRlcnZhbCIsIndpbmRvd1R5cGUiLCJBUElfVE9fQ0xJRU5UX1RZUEUiLCJjb3JlQXBpIiwiYXBpU3RhdGUiLCJiZWZvcmVNZWRpYUZpbHRlciIsIiR0IiwiZ2V0QWN0aW9ucyIsInBhcmFtczEiLCJwYXJhbXMyIiwiZ2V0U2VxdWVuY2VBY3Rpb25NYXAiLCJBUElfQlJPQURDQVNUX0NBTExCQUNLIiwibWVkaWEiLCJzZXRQb3N0c1RpbWVsaW5lcyIsInBsYXlpbmciLCJNZWRpYSIsInNlYXJjaGluZyIsInJlZnJlY3RTZWxmUG9zdCIsInJlcXVlc3RPYmoiLCJnZXRSZXF1ZXN0T2JqIiwicG9zdE1lc3NhZ2UiLCJjbGllbnRIcmVmIiwiY2xpZW50SWZyYW1lIiwiY29udGVudFdpbmRvdyIsImdsb2JhbFdpbmRvdyIsIm1heFNlYXJjaGluZ0NudCIsImlzTG9nIiwic2VhcmNoaW5nQ250IiwicGxheWluZ0NudCIsInBvaW50ZXJUaW1lIiwic3RhcnRlZCIsImlzUG9zdGluZyIsInNlYXJjaGluZ0lkIiwicGxheUludGVydmFsSWQiLCJoYW5kbGVFdmVudHMiLCJwb3N0aW5nIiwiYXBpVG8iLCJ0YWdUeXBlIiwiZ2V0TWVkaWFUYWdUeXBlIiwiTUVESUFfVE9fQ0xJRU5UX1RZUEUiLCJwdXNoRmxnIiwiZmlsZSIsInNlY29uZCIsInNldFN0YXR1cyIsIndhaXRpbmdJZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzcmNFbGVtZW50IiwibWVkaWFDaCIsImRlbGV0ZVByb3Rjb2wiLCJjdXJyZW50U3JjIiwiTUFYX1NBRkVfSU5URUdFUiIsInRpbWVsaW5lTGVuZ3RoIiwiYWRkUG9zdCIsInBvc3RzVGltZWxpbmVBbGwiLCJwbGF5IiwiaXNGb3JjZSIsImxvb2t1cCIsIm1hbmFnZXJzIiwibXVsdGlwbGV4IiwicGFyc2V1cmkiLCJsb2MiLCJzZWxlY3RDb2xvciIsImhhc2giLCJjcmVhdGVEZWJ1ZyIsImFicyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJtcyIsImNvZXJjZSIsImZvcm1hdCIsImZvcm1hdHRlciIsImV4dGVuZCIsImluaXQiLCJpbnN0YW5jZXMiLCJkZWxpbWl0ZXIiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJza2lwcyIsImVuYWJsZSIsImluc3RhbmNlIiwicGx1cmFsIiwibXNBYnMiLCJpc1BsdXJhbCIsInJvdW5kIiwicGFyc2VGbG9hdCIsImxvbmciLCJmbXRMb25nIiwiZm10U2hvcnQiLCJjaHJvbWUiLCJsb2NhbCIsImxvZ0ZuIiwiY2VpbCIsInBhY2tldERhdGEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJwbGFjZWhvbGRlciIsIl9wbGFjZWhvbGRlciIsIm5ld0RhdGEiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJwZW5kaW5nQmxvYnMiLCJfcmVtb3ZlQmxvYnMiLCJjdXJLZXkiLCJjb250YWluaW5nT2JqZWN0IiwiZmlsZVJlYWRlciIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJvdXRwdXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiTE4yIiwidHJhbnNwb3J0cyIsInRyYW5zcG9ydE9wdGlvbnMiLCJ3cml0ZUJ1ZmZlciIsInByZXZCdWZmZXJMZW4iLCJwb2xpY3lQb3J0IiwicmVtZW1iZXJVcGdyYWRlIiwib25seUJpbmFyeVVwZ3JhZGVzIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ0aHJlc2hvbGQiLCJwcm9kdWN0IiwidXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsInBpbmdJbnRlcnZhbFRpbWVyIiwicGluZ1RpbWVvdXRUaW1lciIsInByaW9yV2Vic29ja2V0U3VjY2VzcyIsImNyZWF0ZVRyYW5zcG9ydCIsImNsb25lIiwiRUlPIiwidHJhbnNwb3J0IiwicmVxdWVzdFRpbWVvdXQiLCJwcm90b2NvbHMiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJ1cGdyYWRlTG9zZXNCaW5hcnkiLCJ1cGdyYWRpbmciLCJmbHVzaCIsImZyZWV6ZVRyYW5zcG9ydCIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbnVwZ3JhZGUiLCJ0byIsIm9uSGFuZHNoYWtlIiwic2V0UGluZyIsImZpbHRlclVwZ3JhZGVzIiwib25IZWFydGJlYXQiLCJzZW5kUGFja2V0Iiwid2FpdEZvclVwZ3JhZGUiLCJjbGVhbnVwQW5kQ2xvc2UiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwiZW1wdHkiLCJSZXF1ZXN0IiwicmVxdWVzdCIsInJlcSIsInNlbmRYaHIiLCJwb2xsWGhyIiwieGhyIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImdldFJlc3BvbnNlSGVhZGVyIiwicmVxdWVzdHNDb3VudCIsInJlcXVlc3RzIiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwiYWJvcnQiLCJhdHRhY2hFdmVudCIsInVubG9hZEhhbmRsZXIiLCJhcnJheWJ1ZmZlciIsImFidiIsImlpIiwiY291bnQiLCJlcnJfY2IiLCJiYWlsIiwicHJveHkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNyZWF0ZUJ5dGUiLCJlbmNvZGVDb2RlUG9pbnQiLCJzeW1ib2wiLCJyZWFkQ29udGludWF0aW9uQnl0ZSIsImNvbnRpbnVhdGlvbkJ5dGUiLCJkZWNvZGVTeW1ib2wiLCJieXRlMSIsImJ5dGVTdHJpbmciLCJ1Y3MyZW5jb2RlIiwiY2hhcnMiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJibG9iU3VwcG9ydGVkIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYmxvYkJ1aWxkZXJTdXBwb3J0ZWQiLCJhcHBlbmQiLCJnZXRCbG9iIiwibWFwQXJyYXlCdWZmZXJWaWV3cyIsImNodW5rIiwiQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvciIsImJiIiwicGFydCIsIkJsb2JDb25zdHJ1Y3RvciIsIkpTT05QUG9sbGluZyIsInJOZXdsaW5lIiwickVzY2FwZWROZXdsaW5lIiwiX19fZWlvIiwic2NyaXB0IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZm9ybSIsImlmcmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJpbnNlcnRBdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIiwiaGVhZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImFyZWEiLCJpZnJhbWVJZCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInNldEF0dHJpYnV0ZSIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImh0bWwiLCJzdWJtaXQiLCJCcm93c2VyV2ViU29ja2V0IiwiTm9kZVdlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIldlYlNvY2tldEltcGwiLCJXUyIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsImNoZWNrIiwiaGVhZGVycyIsInN1cHBvcnRzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJmYWN0b3IiLCJyYW5kIiwiZGV2aWF0aW9uIiwiZW5kaWFubmVzcyIsImxvYWRhdmciLCJ1cHRpbWUiLCJmcmVlbWVtIiwiTUFYX1ZBTFVFIiwidG90YWxtZW0iLCJjcHVzIiwicmVsZWFzZSIsImFwcFZlcnNpb24iLCJuZXR3b3JrSW50ZXJmYWNlcyIsImdldE5ldHdvcmtJbnRlcmZhY2VzIiwiYXJjaCIsInBsYXRmb3JtIiwidG1wZGlyIiwidG1wRGlyIiwiRU9MIiwiaG9tZWRpciIsIkFwaVN0YXRlIiwiY2FjaGVzIiwibWVudUxvZ3MiLCJhbmFseXplIiwidGhyZWFkRGV0YWlsIiwiZ2V0QXBwUGFyYW1zIiwiZ2V0VXNlclBhcmFtcyIsImFjdGlvbkxvZyIsImlzVHJhbnNpdGlvbiIsIlJhbmsiLCJNZW51TG9ncyIsInZlciIsImJyb2FkY2FzdENhbGxiYWNrIiwiZW1pdENhbGxiYWNrIiwiaW5pdGlhbFN0YXRlIiwidXBkYXRlQWN0aW9uIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJjaGlsZHJlbiIsInJlZHVjZXJGaWxlcyIsInBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIiLCJtZXJnZSIsInNvcnRXYXRjaENudCIsIm11bHRpc3RyZWFtUG9zdHMiLCJtdWx0aXN0cmVhbVBvc3RMZW5ndGgiLCJwb3N0TGVuZ3RoIiwiU2V0dGluZyIsImNsaWVudCIsImNvbW1vbiIsInB0IiwiZGlzcEZsZyIsIm1lZGlhQ3VycmVudFRpbWUiLCJtb3JlUG9zdE11bGl0IiwiZnVuY3Rpb25zIiwiZ2V0TWVyZ2VkVGhyZWFkcyIsImRldGFpbENoIiwiZ2V0QW55QWN0aW9uUG9zdHMiLCJzZXRTdG9yYWdlUG9zdHNUaW1lbGluZSIsIm1lZGlhVGFnVHlwZU5vIiwiQ0xPU0VfTElOS1MiLCJlbW90aW9uS2V5cyIsImVtb3Rpb25zIiwiYWN0aW9uRW1vdGlvbnMiLCJlbW90aW9uTW9kZWxLZXkiLCJlbW90aW9uS2V5IiwiZ2V0T2Zmc2V0RmluZElkIiwiT05fQ0xJQ0tfVE9fTVVMVElfVEhSRUFEIiwiT05fQ0xJQ0tfVE9fVElNRUxJTkVfVEhSRUFEIiwiZ2V0RmluZFR5cGVGcm9tU3JjIiwiT05fQ0xJQ0tfVE9fU0lOR0xFX1RIUkVBRCIsIk9OX0NMSUNLX1RPX0NISUxEX1RIUkVBRCIsIk9OX0NMSUNLX01FTlUiLCJSRVNJWkVfRU5EX1dJTkRPVyIsIk9OX0NMSUNLX1RPR0dMRV9ESVNQX0RFVEFJTCIsIlRPR0dMRV9CVUJCTEVfUE9TVCIsIlNUQVJUX0xJTktfTUVESUEiLCJHRVRfQ0xJRU5UX01FVEFTIiwidXBkYXRlRmxnIiwic2V0U3RvcmFnZUh0bWxQb3N0cyIsInByb3BzIiwic2V0U3RvcmFnZSIsInBvc3RzVGltZWxpbmVBbGxMZW5ndGgiLCJwb3N0c1RpbWVsaW5lWmVyb1NlY29uZCIsInBvc3RLZXkiLCJwb3N0U2luZ2xlIiwicG9zdE11bHRpIiwic2V0U3RvcmFnZVBvc3RzIiwiZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmUiLCJnZXRTdG9yYWdlIiwiZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmVaZXJvIiwiVGFsa25TZXNzaW9uIiwiZ2V0QmFzZUtleSIsIml0ZW1zIiwiaXRlbSIsInVwZGF0ZVN0eWxlIiwic3R5bGVLZXkiLCJlbGVUeXBlIiwidGFnTmFtZSIsIm9uQ2xpY2tUb2dnbGVQb3N0cyIsIm9uQ2xpY2tUb1RpbWVsaW5lVGhyZWFkIiwib25DbGlja1RvTXVsdGlUaHJlYWQiLCJvbkNsaWNrVG9TaW5nbGVUaHJlYWQiLCJvbkNsaWNrVG9DaGlsZFRocmVhZCIsIm9uQ2xpY2tUb0xvZ3NUaHJlYWQiLCJvbkNoYW5nZUlucHV0UG9zdCIsInRvZ2dsZURpc3BNYWluIiwidG9nZ2xlRGlzcEJvYXJkIiwib25DbGlja1RvZ2dsZU1haW4iLCJ0b2dnbGVCdWJibGVQb3N0Iiwib3BlbkxpbmtzIiwiaXNPcGVuTGlua3MiLCJjbG9zZUxpbmtzIiwidG9nZ2xlTGlua3MiLCJvbkNsaWNrTXVsdGlzdHJlYW0iLCJvbkNsaWNrVG9nZ2xlRGlzcE1lbnUiLCJvbkNsaWNrVG9nZ2xlRGlzcERldGFpbCIsIm9uQ2xpY2tMaWtlIiwib25DbGlja01vbmV5Iiwib25DbGlja1NoYXJlIiwib25SZXNpemVTdGFydFdpbmRvdyIsIm9uUmVzaXplRW5kV2luZG93Iiwib25TY3JvbGxVcGRhdGVUaW1lTWFya2VyIiwidWlUaW1lTWFya2VyIiwib25UcmFuc2l0aW9uIiwib2ZmVHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uQ2xpY2tNZW51Iiwib25DbGlja1NldHRpbmciLCJzZXR0aW5nVHlwZSIsIm9wZW5Jbm5lck5vdGlmIiwiY2xvc2VJbm5lck5vdGlmIiwib3Blbk5vdGlmIiwiaXNPcGVuTm90aWYiLCJjbG9zZU5vdGlmIiwib25DbGlja09wZW5Mb2NrTWVudSIsIm9wZW5Mb2NrTWVudSIsIm9wZW5OZXdQb3N0IiwiaXNPcGVuTmV3UG9zdCIsImNsb3NlTmV3UG9zdCIsIm9wZW5NZW51VHJhbnNpdGlvbkVuZCIsInRocmVhZFNjcm9sbFkiLCJzdGFydERpc3BQb3N0cyIsImlzRGlzcFBvc3RzIiwic3RhcnRVbmRpc3BQb3N0cyIsImNvbXBvbmVudERpZE1vdW50cyIsImNvbXBvbmVudE5hbWUiLCJib290RXh0ZW5zaW9uIiwidXBkYXRlRXh0ZW5zaW9uIiwiZ2V0Q2xpZW50TWV0YXMiLCJ0b2dnbGVEaXNwUG9zdHNTdXBwb3J0ZXIiLCJjbG9zZURpc3BQb3N0c1N1cHBvcnRlciIsImlzT3BlblBvc3RzU3VwcG9ydGVyIiwibmV4dFBvc3RzVGltZWxpbmUiLCJ1bm1vdW50UG9zdHNUaW1lbGluZSIsImNsZWFyUG9zdHNUaW1lbGluZSIsInByZXZQb3N0c1RpbWVsaW5lIiwiZGVsZWdhdGVQb3N0IiwicGxheVZpZGVvIiwic3RvcFZpZGVvIiwib25DaGFuZ2VGaW5kVHlwZSIsInN0YXJ0TGlua01lZGlhIiwibG9hZGluZ0VuZCIsInNjcm9sbFRocmVhZCIsImVuZEFuaW1hdGVTY3JvbGxUbyIsImNyZWF0ZU5vdGlmIiwidXBkYXRlUG9zdHNIZWlnaHQiLCJwb3N0c0hlaWdodCIsImVuZHBvaW50IiwiYmVmb3JlRnVuY3Rpb25zIiwidGFsa25NZWRpYSIsImJhbGFuY2VLZXkiLCJiYWxhbmNlIiwidHlwZUlkIiwidHlwZUxhYmVsIiwic2NoZW1hcyIsIjI4MDciXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFT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QU0sQ0FBQyxDQUFFLENBQUMsVUFBU2hGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ2dGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2pGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ2lGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2xGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ2tGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU25GLE1BQU13QixJQUFJdkIsSUFBSyxJQUdsQ21GLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3BGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ29GLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3JGLE1BQU13QixJQUFJdkIsSUFBSyxJQUdsQ3FGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3RGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ3NGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3ZGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ3VGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3hGLE1BQU13QixJQUFJdkIsSUFBSyxJQUNsQ3dGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3pGLE1BQU13QixJQUFJdkIsSUFBSyxJQUdsQ3lGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzFGLE1BQU00QixNQUFNM0IsSUFBSyxJQUNwQzBGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzNGLE1BQU00QixNQUFNM0IsSUFBSyxJQUdwQzRGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzdGLE1BQU00QixNQUFNM0IsSUFBSyxJQUNwQzZGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzlGLE1BQU00QixNQUFNM0IsSUFBSyxJQUNwQzhGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUy9GLE1BQU00QixNQUFNM0IsSUFBSyxJQUdwQytGLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2hHLE1BQU02QixNQUFNNUIsSUFBSyxJQUNwQ2dHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2pHLE1BQU02QixNQUFNNUIsSUFBSyxJQUNwQ2lHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2xHLE1BQU02QixNQUFNNUIsSUFBSyxJQUdwQ2tHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU25HLE1BQU0rQixNQUFNOUIsSUFBSyxJQUNwQ21HLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3BHLE1BQU0rQixNQUFNOUIsSUFBSyxJQUNwQ29HLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3JHLE1BQU0rQixNQUFNOUIsSUFBSyxJQUNwQ3FHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3RHLE1BQU0rQixNQUFNOUIsSUFBSyxJQUdwQ3VHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3hHLE1BQU0rQixNQUFNOUIsSUFBSyxJQUNwQ3dHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3pHLE1BQU0rQixNQUFNOUIsSUFBSyxJQUNwQ3lHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzFHLE1BQU0rQixNQUFNOUIsSUFBSyxJQUdwQzBHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzNHLE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6QzJHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzVHLE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6QzRHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzdHLE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6QzZHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzlHLE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6QzhHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUy9HLE1BQU1pQyxXQUFXaEMsSUFBSyxJQUd6QytHLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2hILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q2dILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2pILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q2lILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2xILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUd6Q2tILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU25ILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q21ILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3BILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q29ILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3JILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q3FILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3RILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUd6Q3NILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3ZILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q3VILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3hILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUN6Q3dILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3pILE1BQU1pQyxXQUFXaEMsSUFBSyxJQUd6Q3lILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzFILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzBILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzNILE1BQU1zQyxNQUFNckMsSUFBSyxJQUdwQzJILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzVILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzRILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzdILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzZILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUzlILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQzhILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBUy9ILE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQytILEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2hJLE1BQU1zQyxNQUFNckMsSUFBSyxJQUNwQ2dJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2pJLE1BQU1zQyxNQUFNckMsSUFBSyxJQUdwQ2lJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU2xJLE1BQU15QyxXQUFXeEMsSUFBSyxJQUN6Q2tJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU25JLE1BQU15QyxXQUFXeEMsSUFBSyxJQUN6Q21JLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3BJLE1BQU15QyxXQUFXeEMsSUFBSyxJQUN6Q29JLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3JJLE1BQU15QyxXQUFXeEMsSUFBSyxJQUN6Q3FJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3RJLE1BQU15QyxXQUFXeEMsSUFBSyxJQUN6Q3NJLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU3ZJLE1BQU15QyxXQUFXeEMsSUFBSyxJQUN6Q2dzQyxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVNqc0MsTUFBTXlDLFdBQVd4QyxJQUFLLElBR3pDdUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTeEksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDd0ksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTekksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDeUksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTMUksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDMEksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTM0ksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDMkksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTNUksTUFBTXlDLFdBQVd4QyxJQUFLLElBQ3pDNEksS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTN0ksTUFBTXlDLFdBQVd4QyxJQUFLLEtBRTNDLE9BQU80ckMsRUFBUTlyQyxHQUFXOHJDLEVBQVE5ckMsR0FBVyxLQUcvQyxvQkFDRSxJQUFJaXNDLEVBQVUsR0FJZCxPQUhBcnJDLEVBQWNYLE1BQU1wZixRQUFRLENBQUMrQixFQUFLNUUsS0FDaENpdUQsRUFBUXJwRCxFQUFJdWQsT0FBUyxDQUFFcGYsS0FBTWlKLE9BQVFsSCxRQUFTLEVBQUdtdkIsSUFBSyxLQUVqRGc2QixHQS9JWCxhLGtLQ0ZBLGdCQUVBLFVBQWU5ZCxJQUNiLE1BQU1wdEMsRUFBTyxHQUFHLFVBQVN3YywwQkFBMEI0d0IsRUFBU3B0QyxPQUM1RCxPQUFPLE9BQVAsd0JBQVlvdEMsR0FBUSxDQUFFcHRDLFcsOEVDSnhCLGdCQUNFLHFCQUFxQnVhLEdBQ25CLE9BQU9BLEVBQUk3VyxRQUFRLFVBQVcsSUFBSUEsUUFBUSxTQUFVIiwiZmlsZSI6InRhbGtuLmFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0NCk7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTY2hlbWEge1xuICBlcnJvclRocm93OiBhbnk7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uOiBhbnkgPSB7fSkge1xuICAgIC8qXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgdGhpcyxcbiAgICAgICdfU0VUX0NPTFVNTlMnLFxuICAgICAge1xuICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgICAgfVxuICAgICk7XG4qL1xuICB9XG5cbiAgc3RhdGljIGdldFR5cGUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiTnVsbFwiO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiVW5kZWZpbmVkXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgc3RhdGljIGlzU2V0KHZhbDogYW55KSB7XG4gICAgcmV0dXJuIFNjaGVtYS5nZXRUeXBlKHZhbCkgPT09IFwiVW5kZWZpbmVkXCIgfHwgU2NoZW1hLmdldFR5cGUodmFsKSA9PT0gXCJOdWxsXCIgPyBmYWxzZSA6IHRydWU7XG4gIH1cblxuICBzdGF0aWMgZ2V0Qm9vbCh2YWw6IGFueSkge1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcImJvb2xlYW5cIikgcmV0dXJuIHZhbDtcbiAgICByZXR1cm4gdmFsID09PSBcInRydWVcIiA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBpc0Fub255bW91c0Z1bmMoZm4pIHtcbiAgICBjb25zdCBmblN0cmluZyA9IGZuLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24oKXt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbigpIHt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbiAoKXt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbiAoKSB7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiKCk9Pnt9XCIpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNyZWF0ZShzdGF0ZTogYW55KSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGNvbnN0IHN0YXRlVHlwZSA9IFNjaGVtYS5nZXRUeXBlKHN0YXRlKTtcbiAgICBsZXQgdmFsaWRNZXRob2RzID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhzdGF0ZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgLy8gUHJvcGVydGllcyAuXG4gICAgICBsZXQgdmFsdWVzO1xuICAgICAgbGV0IGRlZiA9IG51bGw7XG4gICAgICBsZXQgdHlwZTogYW55O1xuICAgICAgbGV0IGlzQWNjZXB0TnVsbCA9IGZhbHNlO1xuICAgICAgbGV0IGlzQWNjZXB0QmxhbmsgPSBmYWxzZTtcbiAgICAgIGxldCB2YWxpZDogYW55ID0gKCkgPT4ge307XG4gICAgICBsZXQgdmFsdWU6IGFueSA9IG51bGw7XG5cbiAgICAgIC8vIEFzc2lnbiBQcm9wZXJ0aWVzIC5cbiAgICAgIGlmIChTY2hlbWEuZ2V0VHlwZShzdGF0ZVtrZXldKSA9PT0gXCJPYmplY3RcIikge1xuICAgICAgICB2YWx1ZXMgPSBzdGF0ZVtrZXldO1xuICAgICAgICBsZXQgaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlcykubGVuZ3RoID09PSAwO1xuICAgICAgICBpc0FjY2VwdE51bGwgPSB2YWx1ZXMuaXNBY2NlcHROdWxsID8gdmFsdWVzLmlzQWNjZXB0TnVsbCA6IGlzQWNjZXB0TnVsbDtcbiAgICAgICAgaXNBY2NlcHRCbGFuayA9IHZhbHVlcy5pc0FjY2VwdEJsYW5rID8gdmFsdWVzLmlzQWNjZXB0QmxhbmsgOiBpc0FjY2VwdEJsYW5rO1xuICAgICAgICBkZWYgPSAhaXNFbXB0eU9iamVjdCAmJiB2YWx1ZXMuZGVmID8gdmFsdWVzLmRlZiA6IGRlZjtcbiAgICAgICAgdmFsdWUgPSAhaXNFbXB0eU9iamVjdCAmJiAodmFsdWVzLnZhbHVlIHx8IHZhbHVlcy52YWx1ZSA9PT0gXCJcIikgPyB2YWx1ZXMudmFsdWUgOiB2YWx1ZXM7XG4gICAgICAgIHZhbHVlID0gaXNFbXB0eU9iamVjdCAmJiBkZWYgPyBkZWYgOiB2YWx1ZTtcbiAgICAgICAgdHlwZSA9IFNjaGVtYS5nZXRUeXBlKHZhbHVlKTtcbiAgICAgICAgdmFsaWQgPSB2YWx1ZXMudmFsaWQgPyB2YWx1ZXMudmFsaWQgOiB2YWxpZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gc3RhdGVba2V5XTtcbiAgICAgICAgZGVmID0gdmFsdWU7XG4gICAgICAgIGlzQWNjZXB0TnVsbCA9IGlzQWNjZXB0TnVsbDtcbiAgICAgICAgaXNBY2NlcHRCbGFuayA9IGlzQWNjZXB0Qmxhbms7XG4gICAgICAgIHR5cGUgPSBTY2hlbWEuZ2V0VHlwZSh2YWx1ZSk7XG4gICAgICAgIHZhbGlkID0gdmFsaWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIEZ1bmN0aW9ucyAuXG4gICAgICBjb25zdCB2YWxpZEZ1bmMgPSAoX3ZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAgICAgY29uc3QgcG9pbnRlciA9IGAke2NsYXNzTmFtZX0uJHtrZXl9YDtcbiAgICAgICAgY29uc3QgdmFsaWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBjb25zdCB2YWxpZFR5cGUgPSB0eXBlO1xuICAgICAgICBjb25zdCBwYXJhbXNWYWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgY29uc3QgcGFyYW1zVHlwZSA9IFNjaGVtYS5nZXRUeXBlKF92YWx1ZSk7XG4gICAgICAgIGlmIChwYXJhbXNUeXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgZXJyb3IgPSBgU0NIRU1BX1RZUEUgOiAke3BvaW50ZXJ9IFt2YWxpZFR5cGU6ICR7dHlwZX1dW3BhcmFtc1R5cGU6ICR7cGFyYW1zVHlwZX1dYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY2NlcHROdWxsICYmIF92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGVycm9yID0gYFNDSEVNQV9JU19BQ0NFUFRfTlVMTCA6ICAke3BvaW50ZXJ9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY2NlcHRCbGFuayAmJiBfdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfSVNfQUNDRVBUX0JMQU5LIDogICR7cG9pbnRlcn1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTY2hlbWEuZ2V0VHlwZSh2YWxpZCkgPT09IFwiRnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmICh2YWxpZChfdmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfWU9VUl9WQUxJRF9NRVRIT0QgOiAgJHtwb2ludGVyfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9pbnRlcixcbiAgICAgICAgICB2YWxpZFZhbHVlLFxuICAgICAgICAgIHZhbGlkVHlwZSxcbiAgICAgICAgICBwYXJhbXNWYWx1ZSxcbiAgICAgICAgICBwYXJhbXNUeXBlLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IHBvaW50ZXIsIHZhbGlkVmFsdWUsIHZhbGlkVHlwZSwgcGFyYW1zVmFsdWUsIHBhcmFtc1R5cGUsIGVycm9yIH0gPSB2YWxpZEZ1bmModmFsdWUpO1xuXG4gICAgICBpZiAoZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBfdmFsdWUgPT4ge1xuICAgICAgICAgICAgLy8gcG9pbnRlciwgdmFsaWRWYWx1ZSwgdmFsaWRUeXBlLCBwYXJhbXNWYWx1ZSwgcGFyYW1zVHlwZSwgZXJyb3JcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkUmVzdWx0ID0gdmFsaWRGdW5jKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4udGhpcywgW2tleV06IHZhbHVlIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnZhbGlkV2Fybih2YWxpZFJlc3VsdCk7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5lcnJvclRocm93KSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2FuU2V0KGtleTogYW55LCB2YWxpZFZhbHVlOiBhbnkpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpc1trZXldO1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gKHRoaXNba2V5XSA9IHZhbGlkVmFsdWUpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1trZXldID0gY3VycmVudFZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJCQUQgQ0FOIFNFVCBLRVk6IFwiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgXCIgXCIgKyBrZXkpO1xuICAgICAgY29uc29sZS53YXJuKFwiQkVGT0VSIFZBTFVFXCIpO1xuICAgICAgY29uc29sZS53YXJuKHR5cGVvZiB0aGlzW2tleV0pO1xuICAgICAgY29uc29sZS53YXJuKHRoaXNba2V5XSk7XG4gICAgICBjb25zb2xlLndhcm4oXCJBRlRFUiBWQUxVRVwiKTtcbiAgICAgIGNvbnNvbGUud2Fybih0eXBlb2YgdmFsaWRWYWx1ZSk7XG4gICAgICBjb25zb2xlLndhcm4odmFsaWRWYWx1ZSk7XG4gICAgICB0aHJvdyBgQkFEIENBTiBTRVQ6ICR7ZX1gO1xuICAgIH1cbiAgfVxuXG4gIG1lcmdlKHBhcmFtcyA9IHt9LCBpbW11dGFibGUgPSB0cnVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcmFtc1R5cGUgPSBTY2hlbWEuZ2V0VHlwZShwYXJhbXMpO1xuICAgICAgY29uc3Qgb2JqS2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtcyk7XG5cbiAgICAgIGlmIChvYmpLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1lcmdlZE9iajogYW55ID0geyAuLi50aGlzIH07XG4gICAgICAgIG9iaktleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzW2tleV0gIT09IHBhcmFtc1trZXldKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYW5TZXQoa2V5LCBwYXJhbXNba2V5XSkpIHtcbiAgICAgICAgICAgICAgbWVyZ2VkT2JqW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkJBRCBNRVJHRSBBIDogXCIgKyBrZXkgKyBcIiBcIiArIHBhcmFtc1trZXldICsgXCIgXCIgKyB0eXBlb2YgcGFyYW1zW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHBhcmFtc1R5cGUgPT09IFwiQXJyYXlcIikge1xuICAgICAgICAgIG1lcmdlZE9iaiA9IE9iamVjdC52YWx1ZXMobWVyZ2VkT2JqKTtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgICBjbGFzcyBBIHtcbiAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7ICB9XG4gICAgICAgICAgICAgIHJlZnJlc2goKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBBPnRoaXMuY29uc3RydWN0b3IpOyBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICovXG4gICAgICAgICAgcmV0dXJuIGltbXV0YWJsZSA/IG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikobWVyZ2VkT2JqKSA6IG1lcmdlZE9iajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW1tdXRhYmxlKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBtZXJnZWRPYmogKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKG1lcmdlZE9iaik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZWRPYmo7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICh0aGlzLmVycm9yVGhyb3cpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHBhcmFtcyk7XG4gICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgdGhyb3cgYEJBRCBNRVJHRSBCIDogJHtTY2hlbWEuZ2V0VHlwZShwYXJhbXMpfSAke2V9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihwYXJhbXMpO1xuICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihgQkFEIE1FUkdFIEMgOiAke1NjaGVtYS5nZXRUeXBlKHBhcmFtcyl9ICR7ZX1gKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0b0pTT04ob2JqOiBhbnkgPSB0aGlzKSB7XG4gICAgbGV0IGpzb25PYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgbGV0IHZhbHVlczogYW55ID0gb2JqW2tleV07XG4gICAgICBpZiAodmFsdWVzLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKCF2YWx1ZXMudHlwZSAmJiAhdmFsdWVzLmRlZmF1bHQpIHtcbiAgICAgICAgICB2YWx1ZXMgPSB0aGlzLnRvSlNPTih2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZXMuZGVmYXVsdCB8fCB2YWx1ZXMuZGVmYXVsdCA9PT0gXCJcIiB8fCB2YWx1ZXMuZGVmYXVsdCA9PT0gMCkge1xuICAgICAgICBqc29uT2JqW2tleV0gPSB2YWx1ZXMuZGVmYXVsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpzb25PYmpba2V5XSA9IHZhbHVlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvbk9iajtcbiAgfVxuXG4gIGZvckVhY2goZnVuYykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMpLmZvckVhY2goZnVuYyk7XG4gIH1cblxuICBtYXAoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLm1hcChmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBmaWx0ZXIoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLmZpbHRlcihmdW5jKSwgZnVuYyk7XG4gIH1cblxuICByZWR1Y2UoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLnJlZHVjZShmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBmaW5kKGZ1bmMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzKS5maW5kKGZ1bmMpO1xuICB9XG5cbiAgc29ydChmdW5jKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuc29ydChmdW5jKTtcbiAgfVxuXG4gIHB1c2godmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIHVuc2hpZnQodmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy51bnNoaWZ0KHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIGdldFNoaWZ0KCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcyk7XG4gICAgY29uc3QgcmVzdWx0cyA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShyZXN1bHRzKTtcbiAgfVxuXG4gIHBvcCh2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlczogYW55ID0gT2JqZWN0LnZhbHVlcyh0aGlzKTtcbiAgICB2YWx1ZXMucG9wKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIHJldHVybkltbXV0YWJsZSh2YWx1ZXMsIGZ1bmMgPSAoKSA9PiB7fSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSgpO1xuICAgIH0gZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyh0aGlzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChTdHJpbmcoZnVuYykuaW5kZXhPZihcImNyZWF0ZUVsZW1lbnRcIikgPiAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKHZhbHVlcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZXNbMF0gJiYgdmFsdWVzWzBdW1wiJCR0eXBlb2ZcIl0gJiYgdmFsdWVzWzBdW1wiJCR0eXBlb2ZcIl0uY29uc3RydWN0b3IubmFtZSA9PT0gXCJTeW1ib2xcIikge1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikodmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZFdhcm4odmFsaWRSZXN1bHQpIHtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgICBjb25zb2xlLndhcm4oXCIjXCIgKyB2YWxpZFJlc3VsdC5wb2ludGVyKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMgaW5pdGlhbGl6ZWRWYWxpZFR5cGVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnZhbGlkVHlwZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIGluaXRpYWxpemVkVmFsaWRWYWx1ZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQudmFsaWRWYWx1ZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIHBhcmFtc1R5cGVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnBhcmFtc1R5cGUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyBwYXJhbXNWYWx1ZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQucGFyYW1zVmFsdWUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCIpO1xuICB9XG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5pbXBvcnQgUG9zdCBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RcIjtcbmltcG9ydCBUaHJlYWQgZnJvbSBcImFwaS9zdG9yZS8vVGhyZWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9mZnNldEZpbmRJZCgpIHtcbiAgICByZXR1cm4gUG9zdC5kZWZhdWx0RmluZElkO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVUaW1lbGluZSgpOiBcIlRpbWVsaW5lXCIge1xuICAgIHJldHVybiBcIlRpbWVsaW5lXCI7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZVNpbmdsZSgpOiBcIlNpbmdsZVwiIHtcbiAgICByZXR1cm4gXCJTaW5nbGVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlTXVsdGkoKTogXCJNdWx0aVwiIHtcbiAgICByZXR1cm4gXCJNdWx0aVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVDaGlsZCgpOiBcIkNoaWxkXCIge1xuICAgIHJldHVybiBcIkNoaWxkXCI7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZUxvZ3MoKTogXCJMb2dzXCIge1xuICAgIHJldHVybiBcIkxvZ3NcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVGFnVHlwZU5vKCkge1xuICAgIHJldHVybiBcImh0bWxcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVGFnVHlwZUF1ZGlvKCkge1xuICAgIHJldHVybiBcImF1ZGlvXCI7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVRhZ1R5cGVWaWRlbygpIHtcbiAgICByZXR1cm4gXCJ2aWRlb1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUeXBlTXAzKCkge1xuICAgIHJldHVybiBcIm1wM1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUeXBlTXA0KCkge1xuICAgIHJldHVybiBcIm1wNFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUeXBlTTRhKCkge1xuICAgIHJldHVybiBcIm00YVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFDaHMoKSB7XG4gICAgcmV0dXJuIFtBcHAubWVkaWFUeXBlTXAzLCBBcHAubWVkaWFUeXBlTXA0LCBBcHAubWVkaWFUeXBlTTRhXTtcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhQ2hUYWdUeXBlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW0FwcC5tZWRpYVR5cGVNcDNdOiBBcHAubWVkaWFUYWdUeXBlQXVkaW8sXG4gICAgICBbQXBwLm1lZGlhVHlwZU1wNF06IEFwcC5tZWRpYVRhZ1R5cGVWaWRlbyxcbiAgICAgIFtBcHAubWVkaWFUeXBlTTRhXTogQXBwLm1lZGlhVGFnVHlwZUF1ZGlvLFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldE1lZGlhVHlwZShzcmMsIHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmNoVHlwZSkge1xuICAgICAgcmV0dXJuIHBhcmFtcy5jaFR5cGU7XG4gICAgfVxuICAgIHJldHVybiBBcHAuZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpO1xuICB9XG4gIHN0YXRpYyBnZXRNZWRpYVR5cGVGcm9tU3JjKHNyYykge1xuICAgIGNvbnN0IG1lZGlhQ2hUYWdUeXBlS2V5cyA9IE9iamVjdC5rZXlzKEFwcC5tZWRpYUNoVGFnVHlwZXMpO1xuICAgIGNvbnN0IG1lZGlhQ2hUYWdUeXBlTGVuZ3RoID0gbWVkaWFDaFRhZ1R5cGVLZXlzLmxlbmd0aDtcbiAgICBsZXQgbWVkaWFUeXBlID0gXCJodG1sXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWRpYUNoVGFnVHlwZUxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZWdFeHAgPSBuZXcgUmVnRXhwKGAuJHttZWRpYUNoVGFnVHlwZUtleXNbaV19JGApO1xuICAgICAgaWYgKHNyYy5tYXRjaChyZWdFeHApKSB7XG4gICAgICAgIG1lZGlhVHlwZSA9IEFwcC5tZWRpYUNoVGFnVHlwZXNbbWVkaWFDaFRhZ1R5cGVLZXlzW2ldXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZWRpYVR5cGU7XG4gIH1cbiAgc3RhdGljIHZhbGlkSW5wdXRQb3N0KHZhbHVlKSB7XG4gICAgaWYgKC9cXHJcXG4kfFxcbiR8XFxyJC9naW0udGVzdCh2YWx1ZSkpIHJldHVybiBcIkxBU1QgVFlQRSBCUkVBSyBMSU5FLlwiO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZFBvc3QodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IFwiXCIpIHJldHVybiBcIk5PIElOUFVUIFBPU1RcIjtcbiAgICBpZiAoL15cXHJcXG4rJHxcXG4rJHxcXHIrJC9nLnRlc3QodmFsdWUpKSByZXR1cm4gXCJPTkxZIE5FVyBMSU5FXCI7XG4gICAgaWYgKC9eXFxzKyQvZy50ZXN0KHZhbHVlKSkgcmV0dXJuIFwib25seSBzcGFjZVwiO1xuICAgIGlmICgvXlxcclxcbisoXFxzfFxcUykrJHxeXFxuKyhcXHN8XFxTKSskfF5cXHIrKFxcc3xcXFMpKyQvLnRlc3QodmFsdWUpKSByZXR1cm4gXCJFTVBUWSBQT1NUXCI7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGdldFdpZHRoKHBhcmFtcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5pbm5lcldpZHRoKSByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gICAgaWYgKHBhcmFtcy53aWR0aCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMud2lkdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKHBhcmFtcy53aWR0aC5pbmRleE9mKFwicHhcIikgPj0gMCkge1xuICAgICAgICAgIHJldHVybiBOdW1iZXIocGFyYW1zLndpZHRoLnJlcGxhY2UoXCJweFwiLCBcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJhbXMud2lkdGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgc3RhdGljIGdldEhlaWdodChwYXJhbXMgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5pbm5lckhlaWdodCkgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIG5hbWU6IHN0cmluZztcbiAgdGFsa25JbmRleDogbnVtYmVyO1xuXG4gIC8vIOOCueODrOODg+ODieWfuuacrOmWoumAo1xuICBpc1Jvb3RDaDogYm9vbGVhbjtcbiAgaXNMaW5rQ2g6IGJvb2xlYW47XG4gIGlzTWVkaWFDaDogYm9vbGVhbjtcbiAgcm9vdENoOiBzdHJpbmc7XG4gIHJvb3RUaXRsZTogc3RyaW5nO1xuICBjaFR5cGU6IFwidmlkZW9cIiB8IFwiYXVkaW9cIiB8IFwiaHRtbFwiO1xuICBkaXNwVGhyZWFkVHlwZTogXCJNdWx0aVwiIHwgXCJTaW5nbGVcIiB8IFwiQ2hpbGRcIiB8IFwiVGltZWxpbmVcIiB8IFwiTG9nc1wiO1xuICB0dW5lZDogc3RyaW5nO1xuICBtdWx0aXN0cmVhbTogYm9vbGVhbjtcblxuICAvLyDmipXnqL/mg4XloLFcbiAgZmluZFR5cGU6IFwiaHRtbFwiIHwgXCJtcDNcIiB8IFwibXA0XCIgfCBcIm00YVwiIHwgXCJhdWRpb1wiIHwgXCJ2aWRlb1wiO1xuICBvZmZzZXRGaW5kSWQ6IHN0cmluZztcbiAgb2Zmc2V0VGltZWxpbmVGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgb2Zmc2V0U2luZ2xlRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldE11bHRpRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldENoaWxkRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldExvZ3NGaW5kSWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdEZpbmRJZDtcblxuICAvLyDlhaXlipvnirbmhYtcbiAgaW5wdXRQb3N0OiBzdHJpbmc7XG4gIGlucHV0U3RhbXBJZDogc3RyaW5nIHwgbnVtYmVyO1xuICBpbnB1dEN1cnJlbnRUaW1lOiBudW1iZXI7XG4gIGlucHV0U2VhcmNoOiBzdHJpbmc7XG5cbiAgLy8g44Gd44Gu5LuWXG4gIGlzVG9nZ2xlTXVsdGlzdHJlYW06IGJvb2xlYW47XG4gIGFjdGlvbmVkOiBzdHJpbmc7XG4gIGRlYnVnOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSwgY2FsbCA9IFwiXCIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8g5rqW5YKZXG4gICAgY29uc3QgY2ggPSBwYXJhbXMuY2ggPyBwYXJhbXMuY2ggOiBcIi9cIjtcblxuICAgIC8vIOWFqOS9k1xuICAgIGNvbnN0IG5hbWUgPSBwYXJhbXMubmFtZSA/IHBhcmFtcy5uYW1lIDogXCJ0YWxrblwiO1xuICAgIGNvbnN0IHRhbGtuSW5kZXggPSBwYXJhbXMudGFsa25JbmRleCA/IHBhcmFtcy50YWxrbkluZGV4IDogMDtcblxuICAgIC8vIOOCueODrOODg+ODieWfuuacrOmWoumAo1xuICAgIGNvbnN0IGlzTWVkaWFDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNNZWRpYUNoKSA/IHBhcmFtcy5pc01lZGlhQ2ggOiBBcHAuZ2V0SXNNZWRpYUNoKGNoKTtcbiAgICBjb25zdCBpc0xpbmtDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNMaW5rQ2gpID8gcGFyYW1zLmlzTGlua0NoIDogZmFsc2U7XG4gICAgY29uc3Qgcm9vdENoID0gcGFyYW1zLnJvb3RDaCA/IHBhcmFtcy5yb290Q2ggOiBjaDtcbiAgICBjb25zdCBpc1Jvb3RDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNSb290Q2gpID8gcGFyYW1zLmlzUm9vdENoIDogcm9vdENoID09PSBjaDtcbiAgICBjb25zdCByb290VGl0bGUgPSBwYXJhbXMucm9vdFRpdGxlID8gcGFyYW1zLnJvb3RUaXRsZSA6IFwidGFsa25cIjtcbiAgICBjb25zdCBzcmMgPSBBcHAuZ2V0TWVkaWFTcmMocGFyYW1zLnByb3RvY29sLCBjaCk7XG4gICAgY29uc3QgY2hUeXBlID0gQXBwLmdldE1lZGlhVHlwZShzcmMsIHBhcmFtcyk7XG4gICAgY29uc3QgdHVuZWQgPSBwYXJhbXMgJiYgcGFyYW1zLnR1bmVkID8gcGFyYW1zLnR1bmVkIDogXCJcIjtcbiAgICBjb25zdCBkaXNwVGhyZWFkVHlwZSA9IEFwcC5nZXREaXNwVGhyZWFkVHlwZShwYXJhbXMsIGlzTWVkaWFDaCk7XG4gICAgY29uc3QgbXVsdGlzdHJlYW0gPSBTY2hlbWEuaXNTZXQocGFyYW1zLm11bHRpc3RyZWFtKSA/IHBhcmFtcy5tdWx0aXN0cmVhbSA6IHRydWU7XG5cbiAgICAvLyDmipXnqL/mg4XloLFcbiAgICBjb25zdCBmaW5kVHlwZSA9IHBhcmFtcyAmJiBwYXJhbXMuZmluZFR5cGUgPyBwYXJhbXMuZmluZFR5cGUgOiBUaHJlYWQuZmluZFR5cGVBbGw7XG4gICAgY29uc3Qgb2Zmc2V0RmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0RmluZElkIDogQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0VGltZWxpbmVGaW5kSWQgPVxuICAgICAgcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRUaW1lbGluZUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRUaW1lbGluZUZpbmRJZCA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldFNpbmdsZUZpbmRJZCA9XG4gICAgICBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRTaW5nbGVGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRNdWx0aUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRDaGlsZEZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRMb2dzRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRMb2dzRmluZElkID8gcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIC8vIOWFpeWKm+eKtuaFi1xuICAgIGNvbnN0IGlucHV0UG9zdCA9IHBhcmFtcy5pbnB1dFBvc3QgPyBwYXJhbXMuaW5wdXRQb3N0IDogXCJcIjtcbiAgICBjb25zdCBpbnB1dFN0YW1wSWQgPSBwYXJhbXMuaW5wdXRTdGFtcElkID8gcGFyYW1zLmlucHV0U3RhbXBJZCA6IGZhbHNlO1xuICAgIGNvbnN0IGlucHV0Q3VycmVudFRpbWUgPSBwYXJhbXMuaW5wdXRDdXJyZW50VGltZSA/IHBhcmFtcy5pbnB1dEN1cnJlbnRUaW1lIDogMC4wO1xuICAgIGNvbnN0IGlucHV0U2VhcmNoID0gcGFyYW1zLmlucHV0U2VhcmNoID8gcGFyYW1zLmlucHV0U2VhcmNoIDogXCJcIjtcblxuICAgIC8vIOOBneOBruS7llxuICAgIGNvbnN0IGlzVG9nZ2xlTXVsdGlzdHJlYW0gPSBTY2hlbWEuaXNTZXQocGFyYW1zLmlzVG9nZ2xlTXVsdGlzdHJlYW0pID8gcGFyYW1zLmlzVG9nZ2xlTXVsdGlzdHJlYW0gOiBmYWxzZTtcbiAgICBjb25zdCBhY3Rpb25lZCA9IHBhcmFtcyAmJiBwYXJhbXMuYWN0aW9uZWQgPyBwYXJhbXMuYWN0aW9uZWQgOiBcIlwiO1xuICAgIGNvbnN0IGRlYnVnID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5kZWJ1ZykgPyBwYXJhbXMuZGVidWcgOiBcIlwiO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICAvLyDlhajkvZNcbiAgICAgIG5hbWUsXG4gICAgICB0YWxrbkluZGV4LFxuXG4gICAgICAvLyDjgrnjg6zjg4Pjg4nln7rmnKzplqLpgKNcbiAgICAgIGlzUm9vdENoLFxuICAgICAgaXNMaW5rQ2gsXG4gICAgICBpc01lZGlhQ2gsXG4gICAgICByb290Q2gsXG4gICAgICByb290VGl0bGUsXG4gICAgICBjaFR5cGUsXG4gICAgICBkaXNwVGhyZWFkVHlwZSxcbiAgICAgIHR1bmVkLFxuICAgICAgbXVsdGlzdHJlYW0sIC8vIGRpc3BUaHJlYWRUeXBl44GMQ2hpbGQsIFRpbWVsaW5l44Gr44Gq44Gj44Gm44KCbXVsdGlzdHJlYW3nirbmhYvjgpLntq3mjIHjgZnjgotcblxuICAgICAgLy8gICAgICB0aHJlYWRTY3JvbGxZLFxuXG4gICAgICAvLyDmipXnqL/mg4XloLFcbiAgICAgIGZpbmRUeXBlLFxuICAgICAgb2Zmc2V0RmluZElkLFxuICAgICAgb2Zmc2V0VGltZWxpbmVGaW5kSWQsXG4gICAgICBvZmZzZXRTaW5nbGVGaW5kSWQsXG4gICAgICBvZmZzZXRNdWx0aUZpbmRJZCxcbiAgICAgIG9mZnNldENoaWxkRmluZElkLFxuICAgICAgb2Zmc2V0TG9nc0ZpbmRJZCxcblxuICAgICAgLy8gZGV0YWls5oOF5aCxXG5cbiAgICAgIC8vIOWFpeWKm+eKtuaFi1xuICAgICAgaW5wdXRQb3N0LFxuICAgICAgaW5wdXRTdGFtcElkLFxuICAgICAgaW5wdXRDdXJyZW50VGltZSxcbiAgICAgIGlucHV0U2VhcmNoLFxuXG4gICAgICAvLyDjgZ3jga7ku5ZcbiAgICAgIGlzVG9nZ2xlTXVsdGlzdHJlYW0sXG4gICAgICBhY3Rpb25lZCxcbiAgICAgIGRlYnVnLFxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGlzTWVkaWFDb250ZW50VHlwZShjb250ZW50VHlwZSkge1xuICAgIHJldHVybiBBcHAuaXNBdWRpb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB8fCBBcHAuaXNWaWRlb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICByZXR1cm4gY29udGVudFR5cGUuaW5kZXhPZihBcHAubWVkaWFUYWdUeXBlQXVkaW8pID49IDA7XG4gIH1cblxuICBzdGF0aWMgaXNWaWRlb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlLmluZGV4T2YoQXBwLm1lZGlhVGFnVHlwZVZpZGVvKSA+PSAwO1xuICB9XG5cbiAgc3RhdGljIGdldE1lZGlhU3JjKHByb3RvY29sLCBjaCkge1xuICAgIHJldHVybiBwcm90b2NvbCArIFwiL1wiICsgY2gucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xuICB9XG5cbiAgc3RhdGljIGdldElzTWVkaWFDaChjaCkge1xuICAgIHJldHVybiBBcHAubWVkaWFDaHMuc29tZSgoZXh0KSA9PiB7XG4gICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGAuJHtleHR9XFwvJHwuJHtleHR9JGApO1xuICAgICAgcmV0dXJuIGNoLm1hdGNoKHJlZ2V4cCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgaXNBY3RpdmVNdWx0aXN0cmVhbSh7IGFwcCwgdWkgfSwgY2FsbGVkID0gXCJcIikge1xuICAgIHJldHVybiB1aS5tZW51Q29tcG9uZW50ID09PSBcIkluZGV4XCIgJiYgYXBwLmRpc3BUaHJlYWRUeXBlID09PSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwVGhyZWFkVHlwZShwYXJhbXMsIGlzTWVkaWFDaCkge1xuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmRpc3BUaHJlYWRUeXBlKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmRpc3BUaHJlYWRUeXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNNZWRpYUNoKSB7XG4gICAgICAgIHJldHVybiBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHMgfSkge1xuICAgIGlmIChwb3N0cyAmJiBwb3N0c1swXSAmJiBwb3N0c1swXS5faWQpIHtcbiAgICAgIHJldHVybiBwb3N0c1swXS5faWQ7XG4gICAgfVxuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RlcFRvRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmsgfTogYW55LCB0aHJlYWRTdGF0dXM6IGFueSwgdG9DaDogYW55LCBjYWxsZWQ6IGFueSA9IFwiXCIpIHtcbiAgICBsZXQgYWZ0ZXJEaXNwVGhyZWFkVHlwZSA9IFwiXCI7XG4gICAgY29uc3QgYmVmb3JlRGlzcFRocmVhZFR5cGUgPSBhcHAgJiYgYXBwLmRpc3BUaHJlYWRUeXBlID8gYXBwLmRpc3BUaHJlYWRUeXBlIDogQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGk7XG4gICAgYXBwID0gQXBwLmdldFN0ZXBEaXNwVGhyZWFkVHlwZSh7IGFwcCwgcmFuayB9LCB0aHJlYWRTdGF0dXMsIHRvQ2gsIGNhbGxlZCk7XG4gICAgYWZ0ZXJEaXNwVGhyZWFkVHlwZSA9IGFwcC5kaXNwVGhyZWFkVHlwZTtcbiAgICByZXR1cm4geyBhcHAsIHN0ZXBUbzogYCR7YmVmb3JlRGlzcFRocmVhZFR5cGV9IHRvICR7YWZ0ZXJEaXNwVGhyZWFkVHlwZX1gIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RlcERpc3BUaHJlYWRUeXBlKHsgYXBwLCByYW5rIH0sIHRocmVhZFN0YXR1czogYW55ID0ge30sIHRvQ2gsIGNhbGxlZCkge1xuICAgIGNvbnN0IGxvZyA9IGZhbHNlO1xuICAgIGNvbnN0IHVwZGF0ZWRBcHAgPSBhcHAgPyBhcHAgOiB7fTtcbiAgICB1cGRhdGVkQXBwLmlzTGlua0NoID0gZmFsc2U7XG4gICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKGNhbGxlZCArIFwiIHJvb3RDaCA9IFwiICsgYXBwLnJvb3RDaCArIFwiIHRvQ2ggPSBcIiArIHRvQ2gpO1xuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKHJhbmspO1xuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKHRocmVhZFN0YXR1cyk7XG5cbiAgICBpZiAodGhyZWFkU3RhdHVzLmlzTWVkaWFDaCkge1xuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coXCJCXCIpO1xuICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZVRpbWVsaW5lO1xuICAgICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSB1cGRhdGVkQXBwLm9mZnNldFRpbWVsaW5lRmluZElkXG4gICAgICAgID8gdXBkYXRlZEFwcC5vZmZzZXRUaW1lbGluZUZpbmRJZFxuICAgICAgICA6IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgICAgdXBkYXRlZEFwcC5pc0xpbmtDaCA9IGNhbGxlZCA9PT0gXCJ0b0xpbmtzXCIgfHwgY2FsbGVkID09PSBcImZpbmRNZWRpYUNoXCIgPyB0cnVlIDogZmFsc2U7XG4gICAgICB1cGRhdGVkQXBwLmlzTWVkaWFDaCA9IHRydWU7XG4gICAgICByZXR1cm4gdXBkYXRlZEFwcDtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGVkID09PSBcInRvTGlua3NcIikge1xuICAgICAgY29uc3QgaGF2ZU1lbnVJbmRleCA9IHJhbmsuc29tZSgobWkpID0+IHtcbiAgICAgICAgcmV0dXJuIG1pLmNoID09PSB0b0NoIHx8IG1pLmNoID09PSB0b0NoICsgXCIvXCI7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGxvZykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkMgXCIgKyBoYXZlTWVudUluZGV4ICsgXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGF2ZU1lbnVJbmRleCkge1xuICAgICAgICBpZiAobG9nKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJEXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZUNoaWxkO1xuICAgICAgICAvLyAgICAgICAgdWkuaXNPcGVuTGlua3MgPSBmYWxzZTtcbiAgICAgICAgdXBkYXRlZEFwcC5pc0xpbmtDaCA9IHRydWU7XG4gICAgICAgIC8vIGFwcC5pc09wZW5NZW51ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZWRBcHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVwZGF0ZWRBcHAucm9vdENoID09PSB0b0NoKSB7XG4gICAgICBpZiAodXBkYXRlZEFwcC5tdWx0aXN0cmVhbSkge1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhcIkVcIik7XG4gICAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKFwiRlwiKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coXCJHXCIpO1xuICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZUNoaWxkO1xuICAgIH1cbiAgICBpZiAobG9nKSBjb25zb2xlLmxvZyhhcHApO1xuICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICB9XG59XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcbnZhciBoYXNCaW5hcnkgPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xudmFyIHNsaWNlQnVmZmVyID0gcmVxdWlyZSgnYXJyYXlidWZmZXIuc2xpY2UnKTtcbnZhciBhZnRlciA9IHJlcXVpcmUoJ2FmdGVyJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJy4vdXRmOCcpO1xuXG52YXIgYmFzZTY0ZW5jb2RlcjtcbmlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gIGJhc2U2NGVuY29kZXIgPSByZXF1aXJlKCdiYXNlNjQtYXJyYXlidWZmZXInKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBhbiBhbmRyb2lkIGJyb3dzZXIuIFRoYXQgcmVxdWlyZXMgdXMgdG8gdXNlXG4gKiBBcnJheUJ1ZmZlciB3aXRoIHBvbGxpbmcgdHJhbnNwb3J0cy4uLlxuICpcbiAqIGh0dHA6Ly9naGluZGEubmV0L2pwZWctYmxvYi1hamF4LWFuZHJvaWQvXG4gKi9cblxudmFyIGlzQW5kcm9pZCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBpbiBQaGFudG9tSlMuXG4gKiBVcGxvYWRpbmcgYSBCbG9iIHdpdGggUGhhbnRvbUpTIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5LCBhcyByZXBvcnRlZCBoZXJlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2FyaXlhL3BoYW50b21qcy9pc3N1ZXMvMTEzOTVcbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGlzUGhhbnRvbUpTID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogV2hlbiB0cnVlLCBhdm9pZHMgdXNpbmcgQmxvYnMgdG8gZW5jb2RlIHBheWxvYWRzLlxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgZG9udFNlbmRCbG9icyA9IGlzQW5kcm9pZCB8fCBpc1BoYW50b21KUztcblxuLyoqXG4gKiBDdXJyZW50IHByb3RvY29sIHZlcnNpb24uXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICovXG5cbnZhciBwYWNrZXRzID0gZXhwb3J0cy5wYWNrZXRzID0ge1xuICAgIG9wZW46ICAgICAwICAgIC8vIG5vbi13c1xuICAsIGNsb3NlOiAgICAxICAgIC8vIG5vbi13c1xuICAsIHBpbmc6ICAgICAyXG4gICwgcG9uZzogICAgIDNcbiAgLCBtZXNzYWdlOiAgNFxuICAsIHVwZ3JhZGU6ICA1XG4gICwgbm9vcDogICAgIDZcbn07XG5cbnZhciBwYWNrZXRzbGlzdCA9IGtleXMocGFja2V0cyk7XG5cbi8qKlxuICogUHJlbWFkZSBlcnJvciBwYWNrZXQuXG4gKi9cblxudmFyIGVyciA9IHsgdHlwZTogJ2Vycm9yJywgZGF0YTogJ3BhcnNlciBlcnJvcicgfTtcblxuLyoqXG4gKiBDcmVhdGUgYSBibG9iIGFwaSBldmVuIGZvciBibG9iIGJ1aWxkZXIgd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcbiAqL1xuXG52YXIgQmxvYiA9IHJlcXVpcmUoJ2Jsb2InKTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0LlxuICpcbiAqICAgICA8cGFja2V0IHR5cGUgaWQ+IFsgPGRhdGE+IF1cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICA1aGVsbG8gd29ybGRcbiAqICAgICAzXG4gKiAgICAgNFxuICpcbiAqIEJpbmFyeSBpcyBlbmNvZGVkIGluIGFuIGlkZW50aWNhbCBwcmluY2lwbGVcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1dGY4ZW5jb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSB1dGY4ZW5jb2RlO1xuICAgIHV0ZjhlbmNvZGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGRhdGEgPSAocGFja2V0LmRhdGEgPT09IHVuZGVmaW5lZClcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogcGFja2V0LmRhdGEuYnVmZmVyIHx8IHBhY2tldC5kYXRhO1xuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIGlmIChkYXRhICYmIGRhdGEuYmFzZTY0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFNlbmRpbmcgZGF0YSBhcyBhIHV0Zi04IHN0cmluZ1xuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuXG4gIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcbiAgICBlbmNvZGVkICs9IHV0ZjhlbmNvZGUgPyB1dGY4LmVuY29kZShTdHJpbmcocGFja2V0LmRhdGEpLCB7IHN0cmljdDogZmFsc2UgfSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKCcnICsgZW5jb2RlZCk7XG5cbn07XG5cbmZ1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdICsgcGFja2V0LmRhdGEuZGF0YTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHJlc3VsdEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEgKyBkYXRhLmJ5dGVMZW5ndGgpO1xuXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdEJ1ZmZlcltpKzFdID0gY29udGVudEFycmF5W2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEJ1ZmZlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQoeyB0eXBlOiBwYWNrZXQudHlwZSwgZGF0YTogZnIucmVzdWx0IH0sIHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBjYWxsYmFjayk7XG4gIH07XG4gIHJldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmIChkb250U2VuZEJsb2JzKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgbGVuZ3RoWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIHZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xufVxuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQgd2l0aCBiaW5hcnkgZGF0YSBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0LCBoYXMgYHR5cGVgIGFuZCBgZGF0YWBcbiAqIEByZXR1cm4ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBjYWxsYmFjaykge1xuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV07XG4gIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFja2V0LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcbiAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgKyBiNjQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgdmFyIGI2NGRhdGE7XG4gIHRyeSB7XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHdpdGggdHlwZWQgYXJyYXlzXG4gICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpO1xuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhc2ljW2ldID0gdHlwZWRbaV07XG4gICAgfVxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgfVxuICBtZXNzYWdlICs9IGJ0b2EoYjY0ZGF0YSk7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldC4gQ2hhbmdlcyBmb3JtYXQgdG8gQmxvYiBpZiByZXF1ZXN0ZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCB1dGY4ZGVjb2RlKSB7XG4gIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIC8vIFN0cmluZyBkYXRhXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZGF0YS5jaGFyQXQoMCkgPT09ICdiJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0KGRhdGEuc3Vic3RyKDEpLCBiaW5hcnlUeXBlKTtcbiAgICB9XG5cbiAgICBpZiAodXRmOGRlY29kZSkge1xuICAgICAgZGF0YSA9IHRyeURlY29kZShkYXRhKTtcbiAgICAgIGlmIChkYXRhID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdHlwZSA9IGRhdGEuY2hhckF0KDApO1xuXG4gICAgaWYgKE51bWJlcih0eXBlKSAhPSB0eXBlIHx8ICFwYWNrZXRzbGlzdFt0eXBlXSkge1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0gfTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXNBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgdHlwZSA9IGFzQXJyYXlbMF07XG4gIHZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7XG4gIGlmIChCbG9iICYmIGJpbmFyeVR5cGUgPT09ICdibG9iJykge1xuICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICB9XG4gIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiByZXN0IH07XG59O1xuXG5mdW5jdGlvbiB0cnlEZWNvZGUoZGF0YSkge1xuICB0cnkge1xuICAgIGRhdGEgPSB1dGY4LmRlY29kZShkYXRhLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqL1xuXG5leHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkge1xuICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldO1xuICBpZiAoIWJhc2U2NGVuY29kZXIpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07XG4gIH1cblxuICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpO1xuXG4gIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikge1xuICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pO1xuICB9XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9O1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS5cbiAqXG4gKiAgICAgPGxlbmd0aD46ZGF0YVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDExOmhlbGxvIHdvcmxkMjpoaVxuICpcbiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0XG4gKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpc0JpbmFyeSA9IGhhc0JpbmFyeShwYWNrZXRzKTtcblxuICBpZiAoc3VwcG9ydHNCaW5hcnkgJiYgaXNCaW5hcnkpIHtcbiAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIocGFja2V0cywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjaygnMDonKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgJzonICsgbWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgZmFsc2UsIGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbignJykpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQXN5bmMgYXJyYXkgbWFwIHVzaW5nIGFmdGVyXG4gKi9cblxuZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGFyeS5sZW5ndGgpO1xuICB2YXIgbmV4dCA9IGFmdGVyKGFyeS5sZW5ndGgsIGRvbmUpO1xuXG4gIHZhciBlYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24oaSwgZWwsIGNiKSB7XG4gICAgZWFjaChlbCwgZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgcmVzdWx0W2ldID0gbXNnO1xuICAgICAgY2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gIH1cbn1cblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gUG9zc2libGUgYmluYXJ5IGNvbnRlbnRzIGFyZVxuICogZGVjb2RlZCBmcm9tIHRoZWlyIGJhc2U2NCByZXByZXNlbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIHBhY2tldDtcbiAgaWYgKGRhdGEgPT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9ICcnLCBuLCBtc2c7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaHIgPSBkYXRhLmNoYXJBdChpKTtcblxuICAgIGlmIChjaHIgIT09ICc6Jykge1xuICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPT09ICcnIHx8IChsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBtc2cgPSBkYXRhLnN1YnN0cihpICsgMSwgbik7XG5cbiAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIGlmIChtc2cubGVuZ3RoKSB7XG4gICAgICBwYWNrZXQgPSBleHBvcnRzLmRlY29kZVBhY2tldChtc2csIGJpbmFyeVR5cGUsIGZhbHNlKTtcblxuICAgICAgaWYgKGVyci50eXBlID09PSBwYWNrZXQudHlwZSAmJiBlcnIuZGF0YSA9PT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgLy8gcGFyc2VyIGVycm9yIGluIGluZGl2aWR1YWwgcGFja2V0IC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldCA9IGNhbGxiYWNrKHBhY2tldCwgaSArIG4sIGwpO1xuICAgICAgaWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhZHZhbmNlIGN1cnNvclxuICAgIGkgKz0gbjtcbiAgICBsZW5ndGggPSAnJztcbiAgfVxuXG4gIGlmIChsZW5ndGggIT09ICcnKSB7XG4gICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICB9XG5cbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5LlxuICpcbiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXJcbiAqIDI1NT48ZGF0YT5cbiAqXG4gKiBFeGFtcGxlOlxuICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykge1xuICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHtcbiAgICAgIHZhciBsZW47XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXtcbiAgICAgICAgbGVuID0gcC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMlxuICAgIH0sIDApO1xuXG4gICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuXG4gICAgdmFyIGJ1ZmZlckluZGV4ID0gMDtcbiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBhYiA9IHA7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7XG4gICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeVxuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTtcblxuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBFbmNvZGUgYXMgQmxvYlxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxO1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7XG4gICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGhcbiAgICAgICAgOiBlbmNvZGVkLnNpemU7XG5cbiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTtcbiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O1xuXG4gICAgICBpZiAoQmxvYikge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pO1xuICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICB9KTtcbn07XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnlcbiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWVcbiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeVxuICpcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7XG4gIHZhciBidWZmZXJzID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7XG4gICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwO1xuICAgIHZhciBtc2dMZW5ndGggPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykge1xuICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PT0gMjU1KSBicmVhaztcblxuICAgICAgLy8gMzEwID0gY2hhciBsZW5ndGggb2YgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgaWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgfVxuXG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDIgKyBtc2dMZW5ndGgubGVuZ3RoKTtcbiAgICBtc2dMZW5ndGggPSBwYXJzZUludChtc2dMZW5ndGgpO1xuXG4gICAgdmFyIG1zZyA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIDAsIG1zZ0xlbmd0aCk7XG4gICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB0byB0eXBlZCBhcnJheXNcbiAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTtcbiAgICAgICAgbXNnID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtc2cgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh0eXBlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWZmZXJzLnB1c2gobXNnKTtcbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0b3RhbCA9IGJ1ZmZlcnMubGVuZ3RoO1xuICBidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYnVmZmVyLCBpKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy5kZWNvZGVQYWNrZXQoYnVmZmVyLCBiaW5hcnlUeXBlLCB0cnVlKSwgaSwgdG90YWwpO1xuICB9KTtcbn07XG4iLCJjb25zdCBkZWZpbmU6IGFueSA9IHtcbiAgUFJPRFVDVElPTjogXCJwcm9kdWN0aW9uXCIsXG4gIExPQ0FMSE9TVDogXCJsb2NhbGhvc3RcIixcbiAgREVWRUxPUE1FTlQ6IFwiZGV2ZWxvcG1lbnRcIixcbiAgUFJPRFVDVElPTl9JUDogXCJpcC0xNzItMzEtMjctM1wiLFxuICBQUk9EVUNUSU9OX0RPTUFJTjogXCJ0YWxrbi5pb1wiLFxuICBERVZFTE9QTUVOVF9ET01BSU46IFwibG9jYWxob3N0XCIsXG4gIFBPUlRTOiB7XG4gICAgSFRUUDogODAsXG4gICAgSFRUUFM6IDQ0MyxcbiAgICBERVZFTE9QTUVOVDogODA4MCxcbiAgICBERVZFTE9QTUVOVF9BUEk6IDgwODEsXG4gICAgUkVESVM6IDYzNzksXG4gICAgTU9OR086IDI3MDE3LFxuICAgIFNPQ0tFVF9JTzogMTA0NDMsXG4gIH0sXG4gIFNVQl9ET01BSU5TOiB7XG4gICAgV1dXOiBcInd3d1wiLFxuICAgIEFQSTogXCJhcGlcIixcbiAgICBERVNDOiBcImRlc2NcIixcbiAgICBQT1JUQUw6IFwicG9ydGFsXCIsXG4gICAgQ0xJRU5UOiBcImNsaWVudFwiLFxuICAgIEFTU0VUUzogXCJhc3NldHNcIixcbiAgICBTRVNTSU9OOiBcInNlc3Npb25cIixcbiAgICBBVVRPOiBcImF1dG9cIixcbiAgICBFWFQ6IFwiZXh0XCIsXG4gICAgVFJBTlNBQ1RJT046IFwidHJhbnNhY3Rpb25cIixcbiAgfSxcbiAgQVBQX1RZUEVTOiB7XG4gICAgUE9SVEFMOiBcInBvcnRhbFwiLFxuICAgIEVYVEVOU0lPTjogXCJleHRlbnNpb25cIixcbiAgICBBUEk6IFwiYXBpXCIsXG4gIH0sXG4gIFVSTDoge1xuICAgIHR3aXR0ZXI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9cIixcbiAgICBmYWNlYm9vazogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vXCIsXG4gICAgYXBwc3RvcmU6IFwiaHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL2FwcC9pZFwiLFxuICAgIHBsYXlzdG9yZTogXCJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9XCIsXG4gIH0sXG4gIHRhbGtuQ2xpZW50SnM6IFwidGFsa24uY2xpZW50LmpzXCIsXG4gIG5vSW5uZXJOb3RpZjogXCJTb3JyeSwgTm8gRnVuY3Rpb24uXCIsXG4gIHN0b3JhZ2VLZXk6IHtcbiAgICBiYXNlS2V5OiBcIkB0YWxrbkBcIixcbiAgICBwb3N0c1RpbWVsaW5lWmVybzogXCJwb3N0c1RpbWVsaW5lWmVyb1wiLFxuICAgIHBvc3RzVGltZWxpbmU6IFwicG9zdHNUaW1lbGluZVwiLFxuICAgIHBvc3RzU2luZ2xlOiBcInBvc3RzU2luZ2xlXCIsXG4gICAgcG9zdHNNdWx0aTogXCJwb3N0c011bHRpXCIsXG4gICAgcG9zdHNDaGlsZDogXCJwb3N0c0NoaWxkXCIsXG4gICAgcG9zdHNMb2dzOiBcInBvc3RzTG9nc1wiLFxuICAgIHRocmVhZHM6IFwidGhyZWFkc1wiLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lO1xuIiwiaW1wb3J0IGNvbmYgZnJvbSBcImNsaWVudC9jb25mXCI7XG5pbXBvcnQgU2VxdWVuY2UgZnJvbSBcImFwaS9TZXF1ZW5jZVwiO1xuaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IEJvb3RPcHRpb24gZnJvbSBcImFwaS9zdG9yZS9Cb290T3B0aW9uXCI7XG5cbmV4cG9ydCB0eXBlIFRocmVhZFN0YXR1c1R5cGUgPSB7XG4gIGRpc3BUeXBlOiBzdHJpbmc7XG4gIGlzU2NoZW1hOiBib29sZWFuO1xuICBpc1JlcXVpcmVVcHNlcnQ6IGJvb2xlYW47XG4gIGlzTXVsdGlzdHJlYW06IGJvb2xlYW47XG4gIGlzTWVkaWFDaDogYm9vbGVhbjtcbiAgaXNUb2dnbGVNdWx0aXN0cmVhbTogYm9vbGVhbjtcbiAgZ2V0TW9yZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVhZCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVBbGwoKTogXCJBbGxcIiB7XG4gICAgcmV0dXJuIFwiQWxsXCI7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZUh0bWwoKTogXCJIdG1sXCIge1xuICAgIHJldHVybiBcIkh0bWxcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlTXVzaWMoKTogXCJNdXNpY1wiIHtcbiAgICByZXR1cm4gXCJNdXNpY1wiO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVWaWRlbygpOiBcIlZpZGVvXCIge1xuICAgIHJldHVybiBcIlZpZGVvXCI7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZU90aGVyKCk6IFwiT3RoZXJcIiB7XG4gICAgcmV0dXJuIFwiT3RoZXJcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW1RocmVhZC5maW5kVHlwZUh0bWxdOiBbXCJ0ZXh0L2h0bWxcIl0sXG4gICAgICBbVGhyZWFkLmZpbmRUeXBlTXVzaWNdOiBbXCJhdWRpb1wiLCBcImF1ZGlvL21wZWdcIiwgXCJhdWRpby9tcDRcIiwgXCJhdWRpby94LXdhdlwiLCBcImF1ZGlvL21pZGlcIiwgXCJhcHBsaWNhdGlvbi94LXNtYWZcIl0sXG4gICAgICBbVGhyZWFkLmZpbmRUeXBlVmlkZW9dOiBbXG4gICAgICAgIFwidmlkZW9cIixcbiAgICAgICAgXCJ2aWRlby9tcGVnXCIsXG4gICAgICAgIFwidmlkZW8vbXA0XCIsXG4gICAgICAgIFwidmlkZW8veC1tcy13bXZcIixcbiAgICAgICAgXCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiLFxuICAgICAgICBcInZpZGVvLzNncHAyXCIsXG4gICAgICBdLFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlZmF1bHRUaXRsZSgpIHtcbiAgICByZXR1cm4gXCJ0YWxrblwiO1xuICB9XG5cbiAgc3RhdGljIGdldERlZmF1bHRGYXZpY29uKCkge1xuICAgIHJldHVybiBcInVzZXIucG5nXCI7XG4gIH1cblxuICBzdGF0aWMgaXNXaW5kb3dPYmoocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtcy5hbGVydCA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIGhyZWY6IHN0cmluZztcbiAgY2g6IHN0cmluZztcbiAgY2hzOiBbc3RyaW5nXSA9IFtcIi9cIl07XG4gIGhhc1NsYXNoOiBib29sZWFuO1xuICBwcm90b2NvbDogc3RyaW5nID0gU2VxdWVuY2UuVEFMS05fUFJPVE9DT0w7XG4gIGNvbnRlbnRUeXBlOiBzdHJpbmc7XG4gIGNoYXJzZXQ6IHN0cmluZyA9IFwiVVRGLThcIjtcbiAgaG9zdDogc3RyaW5nID0gXCJcIjtcbiAgZmF2aWNvbjogc3RyaW5nID0gVGhyZWFkLmdldERlZmF1bHRGYXZpY29uKCk7XG4gIGZpbmRUeXBlOiBcIkFsbFwiIHwgXCJIdG1sXCIgfCBcIk11c2ljXCIgfCBcIlZpZGVvXCIgPSBUaHJlYWQuZmluZFR5cGVBbGw7XG4gIHRpdGxlOiBzdHJpbmcgPSBUaHJlYWQuZ2V0RGVmYXVsdFRpdGxlKCk7XG4gIG1ldGFzOiBhbnkgPSBbXTtcbiAgc2VydmVyTWV0YXM6IGFueSA9IHt9O1xuICBjbGllbnRNZXRhczogYW55ID0ge307XG4gIGxpbmtzOiBhbnkgPSBbXTtcbiAgaDFzOiBhbnkgPSBbXTtcbiAgYXVkaW9zOiBhbnkgPSBbXTtcbiAgdmlkZW9zOiBhbnkgPSBbXTtcbiAgbGF5ZXI6IG51bWJlciA9IFRocmVhZC5nZXRMYXllcigpO1xuICBtZWRpYUluZGV4OiBhbnkgPSBbXTtcbiAgcG9zdENudDogbnVtYmVyID0gMDtcbiAgbXVsdGlQb3N0Q250OiBudW1iZXIgPSAwO1xuICBpc1NlbGZDaDogYm9vbGVhbiA9IGZhbHNlO1xuICBjcmVhdGVUaW1lOiBzdHJpbmcgPSBcIlwiO1xuICB1cGRhdGVUaW1lOiBzdHJpbmcgPSBcIlwiO1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9LCBib290T3B0aW9uOiBCb290T3B0aW9uIHwge30sIGNhY2hlOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdGhyZWFkID0gVGhyZWFkLmlzV2luZG93T2JqKHBhcmFtcykgPyBUaHJlYWQuY29uc3RydWN0b3JGcm9tV2luZG93KHBhcmFtcywgYm9vdE9wdGlvbiwgY2FjaGUpIDogcGFyYW1zO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh0aHJlYWQpO1xuICB9XG5cbiAgc3RhdGljIGNvbnN0cnVjdG9yRnJvbVdpbmRvdyhwYXJhbXMsIGJvb3RPcHRpb24sIGNhY2hlKSB7XG4gICAgY29uc3QgYm9vdENoID0gYm9vdE9wdGlvbi5jaCA/IGJvb3RPcHRpb24uY2ggOiBmYWxzZTtcbiAgICBjb25zdCBjaCA9IFRocmVhZC5nZXRDaChib290T3B0aW9uLCBib290Q2gpO1xuXG4gICAgaWYgKGNhY2hlLmNoICYmIGNhY2hlLmNoID09PSBjaCkge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGhyZWFkOiBhbnkgPSB7fTtcbiAgICAgIGxldCBocmVmID0gXCJcIjtcbiAgICAgIHRocmVhZC5jaCA9IGNoO1xuICAgICAgdGhyZWFkLmNocyA9IFtcIi9cIl07XG4gICAgICB0aHJlYWQuaGFzU2xhc2ggPSBib290T3B0aW9uLmhhc3NsYXNoID8gU2NoZW1hLmdldEJvb2woYm9vdE9wdGlvbi5oYXNzbGFzaCkgOiBmYWxzZTtcbiAgICAgIHRocmVhZC5wcm90b2NvbCA9IFwidGFsa246XCI7XG4gICAgICB0aHJlYWQuY29udGVudFR5cGUgPSBcIlwiO1xuICAgICAgdGhyZWFkLmNoYXJzZXQgPSBcIlVURi04XCI7XG4gICAgICB0aHJlYWQuaG9zdCA9IFwiXCI7XG4gICAgICB0aHJlYWQuZmF2aWNvbiA9IFRocmVhZC5nZXREZWZhdWx0RmF2aWNvbigpO1xuICAgICAgdGhyZWFkLmZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlQWxsO1xuXG4gICAgICBpZiAoYm9vdENoKSB7XG4gICAgICAgIC8vIFVSTOOBruOCs+ODjeOCr+OCt+ODp+ODs+aWh+Wtl+WIl+OBi+OCieOBp+OBr1BST1RPQ09M44Gv5Yik5Yil44Gn44GN44Gq44GE44CCXG4gICAgICAgIHRocmVhZC5wcm90b2NvbCA9IFRocmVhZC5nZXRQcm90b2NvbChib290Q2gpO1xuICAgICAgICB0aHJlYWQuaG9zdCA9IFRocmVhZC5nZXRIb3N0KGJvb3RDaCk7XG4gICAgICAgIHRocmVhZC5jaHMgPSBib290Q2guY2hzICYmIGJvb3RDaC5jaHMubGVuZ3RoID4gMCA/IGJvb3RDaC5jaHMgOiBUaHJlYWQuZ2V0Q2hzKGNoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocmVhZC5wcm90b2NvbCA9IGxvY2F0aW9uLnByb3RvY29sID8gbG9jYXRpb24ucHJvdG9jb2wgOiBcIj8/Pz86XCI7XG4gICAgICAgIHRocmVhZC5jaHMgPSBwYXJhbXMuY2hzICYmIHBhcmFtcy5jaHMubGVuZ3RoID4gMCA/IHBhcmFtcy5jaHMgOiBUaHJlYWQuZ2V0Q2hzKGNoKTtcbiAgICAgICAgdGhyZWFkLmNvbnRlbnRUeXBlID0gZG9jdW1lbnQuY29udGVudFR5cGUgPyBkb2N1bWVudC5jb250ZW50VHlwZSA6IFwiXCI7XG4gICAgICAgIHRocmVhZC5jaGFyc2V0ID0gZG9jdW1lbnQuY2hhcnNldCA/IGRvY3VtZW50LmNoYXJzZXQgOiBcIlwiO1xuXG4gICAgICAgIHRocmVhZC5ob3N0ID0gbG9jYXRpb24uaG9zdCA/IGxvY2F0aW9uLmhvc3QgOiBcIlwiO1xuICAgICAgICB0aHJlYWQuZmF2aWNvbiA9IFRocmVhZC5nZXRGYXZpY29uRnJvbVdpbmRvdyh3aW5kb3cpO1xuICAgICAgfVxuXG4gICAgICB0aHJlYWQudGl0bGUgPSBUaHJlYWQuZ2V0RGVmYXVsdFRpdGxlKCk7XG4gICAgICB0aHJlYWQubWV0YXMgPSBbXTtcbiAgICAgIHRocmVhZC5zZXJ2ZXJNZXRhcyA9IHt9O1xuICAgICAgdGhyZWFkLmNsaWVudE1ldGFzID0ge307XG4gICAgICB0aHJlYWQubGlua3MgPSBbXTtcbiAgICAgIHRocmVhZC5oMXMgPSBbXTtcbiAgICAgIHRocmVhZC5hdWRpb3MgPSBbXTtcbiAgICAgIHRocmVhZC52aWRlb3MgPSBbXTtcbiAgICAgIHRocmVhZC5sYXllciA9IFRocmVhZC5nZXRMYXllcih0aHJlYWQuY2gpO1xuICAgICAgdGhyZWFkLm1lZGlhSW5kZXggPSBbXTtcbiAgICAgIHRocmVhZC5wb3N0Q250ID0gMDtcbiAgICAgIHRocmVhZC5tdWx0aVBvc3RDbnQgPSAwO1xuICAgICAgdGhyZWFkLmlzU2VsZkNoID0gVGhyZWFkLmdldElzU2VsZkNoKGhyZWYsIHRocmVhZC5jaCk7XG4gICAgICB0aHJlYWQuY3JlYXRlVGltZSA9IFwiXCI7XG4gICAgICB0aHJlYWQudXBkYXRlVGltZSA9IFwiXCI7XG4gICAgICByZXR1cm4gdGhyZWFkO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRDaChib290T3B0aW9uOiBhbnksIGJvb3RDaDogc3RyaW5nKSB7XG4gICAgaWYgKGJvb3RDaCkge1xuICAgICAgcmV0dXJuIGJvb3RDaDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbG9jYXRpb246IGFueSA9IHdpbmRvdy5sb2NhdGlvbiA/IHdpbmRvdy5sb2NhdGlvbiA6IHt9O1xuICAgICAgbGV0IGhyZWYgPSBsb2NhdGlvbi5ocmVmID8gbG9jYXRpb24uaHJlZiA6IFwiXCI7XG4gICAgICBpZiAoaHJlZiAhPT0gXCJcIikge1xuICAgICAgICBocmVmID0gaHJlZi5zbGljZSgtMSkgPT09IFwiL1wiID8gaHJlZi5zbGljZSgwLCAtMSkgOiBocmVmO1xuICAgICAgICBocmVmID0gaHJlZi5yZXBsYWNlKFwiaHR0cDovXCIsIFwiXCIpO1xuICAgICAgICBocmVmID0gaHJlZi5yZXBsYWNlKFwiaHR0cHM6L1wiLCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIGhyZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCIvXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldENoVG9wKGNoKSB7XG4gICAgaWYgKGNoICE9PSBcIlwiKSB7XG4gICAgICByZXR1cm4gXCIvXCIgKyBjaC5zcGxpdChcIi9cIilbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRDaHMoX2NoKSB7XG4gICAgbGV0IGNocyA9IFtcIi9cIl07XG5cbiAgICBpZiAoX2NoICE9PSBcIlwiKSB7XG4gICAgICAvL2NoID0gY2gucmVwbGFjZSgvXFx1MDAyZiQvZywgJycpO1xuICAgICAgY29uc3QgY2ggPSBfY2guc2xpY2UoLTEpID09PSBcIi9cIiA/IF9jaCA6IF9jaCArIFwiL1wiO1xuXG4gICAgICBpZiAoY2ggIT09IFwiL1wiKSB7XG4gICAgICAgIGNvbnN0IGNoQXJyID0gY2guc3BsaXQoXCIvXCIpO1xuICAgICAgICBjb25zdCBjaExlbmd0aCA9IGNoQXJyLmxlbmd0aDtcbiAgICAgICAgbGV0IG5ld0NoID0gXCJcIjtcbiAgICAgICAgbGV0IG5vU2xhc2hDaCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2hMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChjaEFycltpXSAhPT0gXCJcIikge1xuICAgICAgICAgICAgbmV3Q2ggKz0gY2hBcnJbaV07XG5cbiAgICAgICAgICAgIC8vIOS4gOeVquacgOW+jOOBjC/jga7loLTlkIhcbiAgICAgICAgICAgIG5ld0NoID0gbmV3Q2guc2xpY2UoLTEpID09PSBcIi9cIiA/IG5ld0NoIDogbmV3Q2ggKyBcIi9cIjtcblxuICAgICAgICAgICAgLy8g5LiA55Wq5pyA5Yid44GML+OBruWgtOWQiFxuICAgICAgICAgICAgbmV3Q2ggPSBuZXdDaC5zbGljZSgwLCAxKSA9PT0gXCIvXCIgPyBuZXdDaCA6IFwiL1wiICsgbmV3Q2g7XG5cbiAgICAgICAgICAgIC8vIOacgOW+jOOBjC/nhKHjgZfjga7jgrPjg43jgq/jgrfjg6fjg7PjgpLnlJ/miJBcbiAgICAgICAgICAgIC8vbm9TbGFzaENoID0gbmV3Q2guc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgICAgICAvL2Nocy5wdXNoKCBub1NsYXNoQ2ggKTtcbiAgICAgICAgICAgIGNocy5wdXNoKG5ld0NoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNocztcbiAgfVxuXG4gIHN0YXRpYyBnZXRIb3N0KGNoKSB7XG4gICAgaWYgKGNoLmluZGV4T2YoXCIuXCIpID49IDApIHtcbiAgICAgIGNoID0gY2gucmVwbGFjZShcImh0dHBzOi8vXCIsIFwiXCIpLnJlcGxhY2UoXCJodHRwOi8vXCIsIFwiXCIpO1xuICAgICAgcmV0dXJuIGNoLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5yZXBsYWNlKC9cXC8uKiQvLCBcIlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbmYuZG9tYWluO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRQcm90b2NvbChocmVmKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihcImh0dHA6XCIpID49IDApIHJldHVybiBcImh0dHA6XCI7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihcImh0dHBzOlwiKSA+PSAwKSByZXR1cm4gXCJodHRwczpcIjtcbiAgICBpZiAobG9jYXRpb24gJiYgbG9jYXRpb24ucHJvdG9jb2wpIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICByZXR1cm4gXCI/Pz8/OlwiO1xuICB9XG5cbiAgc3RhdGljIGdldElzU2VsZkNoKGhyZWYsIGNoKSB7XG4gICAgY29uc3QgcmVwbGFjZWRIcmVmID0gaHJlZlxuICAgICAgLnJlcGxhY2UoXCJodHRwOi9cIiwgXCJcIilcbiAgICAgIC5yZXBsYWNlKFwiaHR0cHM6L1wiLCBcIlwiKVxuICAgICAgLnJlcGxhY2UoL1xcdTAwMmYkLywgXCJcIik7XG4gICAgcmV0dXJuIHJlcGxhY2VkSHJlZiA9PT0gY2g7XG4gIH1cblxuICBzdGF0aWMgZ2V0TGF5ZXIoY2ggPSBcIi9cIikge1xuICAgIHJldHVybiBjaC5zcGxpdChcIi9cIikubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZWRpYVNyYyh0aHJlYWQpIHtcbiAgICByZXR1cm4gQXBwLmdldE1lZGlhU3JjKHRocmVhZC5wcm90b2NvbCwgdGhyZWFkLmNoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZWRpYVRhZ1R5cGUodGhyZWFkKSB7XG4gICAgY29uc3Qgc3JjID0gVGhyZWFkLmdldE1lZGlhU3JjKHRocmVhZCk7XG4gICAgcmV0dXJuIEFwcC5nZXRNZWRpYVR5cGUoc3JjLCBudWxsKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGYXZpY29uRnJvbVdpbmRvdyh3aW5kb3cpIHtcbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgY29uc3QgdSA9IHdpbmRvdy5kb2N1bWVudC5ldmFsdWF0ZShcbiAgICAgICAgXCIvL2xpbmtbY29udGFpbnMoQHJlbCwnaWNvbicpb3IoY29udGFpbnMoQHJlbCwnSUNPTicpKV1bMV0vQGhyZWZcIixcbiAgICAgICAgd2luZG93LmRvY3VtZW50LFxuICAgICAgICBudWxsLFxuICAgICAgICAyLFxuICAgICAgICBudWxsXG4gICAgICApLnN0cmluZ1ZhbHVlO1xuICAgICAgY29uc3QgaCA9IFwiaHR0cDovL1wiO1xuICAgICAgY29uc3QgaHMgPSBcImh0dHBzOi8vXCI7XG4gICAgICBjb25zdCBsID0gbG9jYXRpb24uaG9zdDtcbiAgICAgIGlmICh1LmluZGV4T2YoaCkgfHwgdS5pbmRleE9mKGhzKSkge1xuICAgICAgICBjb25zdCB1cmwgPSBoICsgbCArICh1IHx8IFwiL2Zhdmljb24uaWNvXCIpO1xuICAgICAgICBjb25zdCBzdHJDbnQgPSB1cmwuc3BsaXQoXCIvL1wiKS5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoc3RyQ250ID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXModGhyZWFkLCBhcHAsIHNldHRpbmcgPSB7fSk6IFRocmVhZFN0YXR1c1R5cGUge1xuICAgIGxldCBzdGF0dXMgPSB7XG4gICAgICBkaXNwVHlwZTogXCJcIiwgLy8gVElNRUxJTkUsIE1VTFRJLCBTSU5HTEUsIENISUxELCBMT0dTXG4gICAgICBpc1NjaGVtYTogZmFsc2UsXG4gICAgICBpc1JlcXVpcmVVcHNlcnQ6IGZhbHNlLFxuICAgICAgaXNNdWx0aXN0cmVhbTogZmFsc2UsXG4gICAgICBpc01lZGlhQ2g6IGZhbHNlLFxuICAgICAgaXNUb2dnbGVNdWx0aXN0cmVhbTogZmFsc2UsXG4gICAgICBnZXRNb3JlOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogdGhyZWFk44GM56m644GuU2NoZW1h44GL44Gp44GG44GLKERC44Gr44OH44O844K/44GM5a2Y5Zyo44GX44Gq44GEKSAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc1NjaGVtYSA9IFRocmVhZC5nZXRTdGF0dXNJc1NjaGVtYSh0aHJlYWQpO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyog5pu05paw44GM5b+F6KaB44GqdGhyZWFk44GL44Gp44GG44GLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzUmVxdWlyZVVwc2VydCA9IFRocmVhZC5nZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQodGhyZWFkLCBzZXR0aW5nLCBzdGF0dXMuaXNTY2hlbWEpO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogTXVsdGlzdHJlYW3lvaLlvI/jgYvjganjgYbjgYsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc011bHRpc3RyZWFtID0gVGhyZWFkLmdldFN0YXR1c0lzTXVsdGlzdHJlYW0oYXBwKTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIE11bHRpc3RyZWFt44Gu44Oc44K/44Oz44KS5oq844GX44Gf44GLICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzVG9nZ2xlTXVsdGlzdHJlYW0gPSBUaHJlYWQuZ2V0U3RhdHVzSXNUb2dnbGVNdWx0aXN0cmVhbShhcHApO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogdGhyZWFk44GM56m644GuU2NoZW1h44GL44Gp44GG44GLKERC44Gr44OH44O844K/44GM5a2Y5Zyo44GX44Gq44GEKSAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc01lZGlhQ2ggPSBUaHJlYWQuZ2V0U3RhdHVzSXNNZWRpYUNoKHRocmVhZC5jaCk7XG4gICAgcmV0dXJuIHN0YXR1cztcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc1NjaGVtYSh0aHJlYWQpIHtcbiAgICBpZiAodGhyZWFkLmNyZWF0ZVRpbWUgJiYgdGhyZWFkLnVwZGF0ZVRpbWUpIHtcbiAgICAgIGNvbnN0IHRocmVhZENyZWF0ZVRpbWUgPSB0aHJlYWQuY3JlYXRlVGltZS5nZXRUaW1lID8gdGhyZWFkLmNyZWF0ZVRpbWUuZ2V0VGltZSgpIDogdGhyZWFkLmNyZWF0ZVRpbWU7XG4gICAgICBjb25zdCB0aHJlYWRVcGRhdGVUaW1lID0gdGhyZWFkLnVwZGF0ZVRpbWUuZ2V0VGltZSA/IHRocmVhZC51cGRhdGVUaW1lLmdldFRpbWUoKSA6IHRocmVhZC51cGRhdGVUaW1lO1xuXG4gICAgICBpZiAodGhyZWFkQ3JlYXRlVGltZSA9PT0gdGhyZWFkVXBkYXRlVGltZSkge1xuICAgICAgICBjb25zdCBsYXN0UG9zdENyZWF0ZVRpbWUgPSB0aHJlYWQubGFzdFBvc3QuY3JlYXRlVGltZS5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnN0IGxhc3RQb3N0VXBkYXRlVGltZSA9IHRocmVhZC5sYXN0UG9zdC51cGRhdGVUaW1lLmdldFRpbWUoKTtcblxuICAgICAgICBpZiAobGFzdFBvc3RDcmVhdGVUaW1lID09PSBsYXN0UG9zdFVwZGF0ZVRpbWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RhdHVzSXNSZXF1aXJlVXBzZXJ0KHRocmVhZCwgc2V0dGluZywgaXNTY2hlbWEgPSBmYWxzZSkge1xuICAgIGlmICh0aHJlYWQudXBkYXRlVGltZSkge1xuICAgICAgY29uc3QgdGhyZWFkVXBkYXRlVGltZSA9IHRocmVhZC51cGRhdGVUaW1lLmdldFRpbWUgPyB0aHJlYWQudXBkYXRlVGltZS5nZXRUaW1lKCkgOiB0aHJlYWQudXBkYXRlVGltZTtcblxuICAgICAgLy8g54++5Zyo5pmC5Yi744KS5Y+W5b6XXG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgY29uc3Qgbm93WWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xuICAgICAgY29uc3Qgbm93TW9udGggPSBub3cuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IG5vd0RheSA9IG5vdy5nZXREYXRlKCk7XG4gICAgICBjb25zdCBub3dIb3VyID0gbm93LmdldEhvdXJzKCk7XG4gICAgICBjb25zdCBub3dNaW51dGVzID0gbm93LmdldE1pbnV0ZXMoKTtcbiAgICAgIGNvbnN0IGFjdGl2ZURhdGUgPSBuZXcgRGF0ZShub3dZZWFyLCBub3dNb250aCwgbm93RGF5LCBub3dIb3VyIC0gc2V0dGluZy5zZXJ2ZXIuZmluZE9uZVRocmVhZEFjdGl2ZUhvdXIpO1xuICAgICAgY29uc3QgYWN0aXZlVGltZSA9IGFjdGl2ZURhdGUuZ2V0VGltZSgpO1xuXG4gICAgICAvLyDjgrnjg6zjg4Pjg4njga7mm7TmlrDmmYLplpPjgajjgIHnj77lnKjmmYLplpMgLSBuIOOCkuavlOi8g+OBl+OBpuOAgeOCueODrOODg+ODieOBruabtOaWsOaZgumWk+OBjOWPpOOBi+OBo+OBn+OCiXRydWXjgpLov5TjgZlcbiAgICAgIHJldHVybiBpc1NjaGVtYSA/IHRydWUgOiB0aHJlYWRVcGRhdGVUaW1lIDwgYWN0aXZlVGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc011bHRpc3RyZWFtKGFwcCk6IGJvb2xlYW4ge1xuICAgIGlmIChhcHAgPT09IHVuZGVmaW5lZCB8fCBhcHAuZGlzcFRocmVhZFR5cGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgJiYgYXBwLm11bHRpc3RyZWFtO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzTWVkaWFDaChjaCkge1xuICAgIHJldHVybiBBcHAuZ2V0SXNNZWRpYUNoKGNoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtKGFwcCk6IGJvb2xlYW4ge1xuICAgIC8vIFRPRE86IEp1ZGdlIGZpeCBhY3Rpb25lZC5cbiAgICBpZiAoYXBwID09PSB1bmRlZmluZWQgfHwgYXBwLmFjdGlvbmVkID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gYXBwLmlzVG9nZ2xlTXVsdGlzdHJlYW07XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29udGVudFR5cGVGcm9tRmluZFR5cGUoY29udGVudFR5cGUpIHtcbiAgICBjb25zdCBmaW5kVHlwZUh0bWwgPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZUh0bWxdO1xuICAgIGNvbnN0IGZpbmRUeXBlTXVzaWMgPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZU11c2ljXTtcbiAgICBjb25zdCBmaW5kVHlwZVZpZGVvID0gVGhyZWFkLmZpbmRUeXBlc1tUaHJlYWQuZmluZFR5cGVWaWRlb107XG5cbiAgICBsZXQgZmluZFR5cGUgPSBcIlwiO1xuICAgIGxldCBzcGxpdGVkQ29udGVudFR5cGUgPSBcIlwiO1xuICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKFwiO1wiKSA+IDApIHtcbiAgICAgIHNwbGl0ZWRDb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnNwbGl0KFwiO1wiKVswXTtcbiAgICB9XG4gICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoXCIvXCIpID4gMCkge1xuICAgICAgc3BsaXRlZENvbnRlbnRUeXBlID0gY29udGVudFR5cGUuc3BsaXQoXCIvXCIpWzBdO1xuICAgIH1cblxuICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlSHRtbDtcbiAgICBpZiAoZmluZFR5cGVIdG1sLmluY2x1ZGVzKHNwbGl0ZWRDb250ZW50VHlwZSkpIHtcbiAgICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlSHRtbDtcbiAgICB9XG4gICAgaWYgKGZpbmRUeXBlTXVzaWMuaW5jbHVkZXMoc3BsaXRlZENvbnRlbnRUeXBlKSkge1xuICAgICAgZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVNdXNpYztcbiAgICB9XG4gICAgaWYgKGZpbmRUeXBlVmlkZW8uaW5jbHVkZXMoc3BsaXRlZENvbnRlbnRUeXBlKSkge1xuICAgICAgZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVWaWRlbztcbiAgICB9XG4gICAgcmV0dXJuIGZpbmRUeXBlO1xuICB9XG5cbiAgc3RhdGljIGdldEZpbmRUeXBlRnJvbVNyYyhzcmMpIHtcbiAgICBjb25zdCBzdHIgPSBBcHAuZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpO1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VxdWVuY2Uge1xuICBzdGF0aWMgZ2V0IFRBTEtOX1BST1RPQ09MKCkge1xuICAgIHJldHVybiBcInRhbGtuOlwiO1xuICB9XG4gIHN0YXRpYyBnZXQgSFRUUF9QUk9UT0NPTCgpIHtcbiAgICByZXR1cm4gXCJodHRwOlwiO1xuICB9XG4gIHN0YXRpYyBnZXQgSFRUUFNfUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuIFwiaHR0cHM6XCI7XG4gIH1cbiAgc3RhdGljIGdldCBVTktOT1dOX1BST1RPQ09MKCkge1xuICAgIHJldHVybiBcIj8/Pz86XCI7XG4gIH1cbiAgc3RhdGljIGdldCBDQVRDSF9NRV9LRVkoKSB7XG4gICAgcmV0dXJuIFwiQENBVENIX01FXCI7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfUkVRVUVTVF9UWVBFKCkge1xuICAgIHJldHVybiBcIlJFUVVFU1RcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9SRVNQT05TRV9UWVBFX0VNSVQoKSB7XG4gICAgcmV0dXJuIFwiRU1JVFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUKCkge1xuICAgIHJldHVybiBcIkJST0FEQ0FTVFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgQ09OTkVDVElPTl9TRVJWRVJfS0VZKCkge1xuICAgIHJldHVybiBcImNvbm5lY3Rpb25TZXJ2ZXJcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19TRVJWRVJfUkVRVUVTVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19TRVJWRVJbJHtTZXF1ZW5jZS5BUElfUkVRVUVTVF9UWVBFfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgU0VSVkVSX1RPX0FQSV9FTUlUKCkge1xuICAgIHJldHVybiBgU0VSVkVSX1RPX0FQSVske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBTRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCgpIHtcbiAgICByZXR1cm4gYFNFUlZFUl9UT19BUElbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1R9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX1JFUVVFU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfRU1JVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX0JST0FEQ0FTVF9DQUxMQkFDSygpIHtcbiAgICByZXR1cm4gXCJ0dW5lXCI7XG4gIH1cbiAgc3RhdGljIGdldCBSRURVWF9BQ1RJT05fS0VZKCkge1xuICAgIHJldHVybiBcInR5cGVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IE1FVEhPRF9DT0xPTigpIHtcbiAgICByZXR1cm4gXCI6XCI7XG4gIH1cbiAgc3RhdGljIGdldCBBRERfQ0xJRU5UX0FDVElPTl9QUkVGSVgoKSB7XG4gICAgcmV0dXJuIFwiQVBJX1RPX0NMSUVOVFwiO1xuICB9XG4gIHN0YXRpYyBnZXQgbWFwKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0dW5lOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFtcImNoXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB1c2VyOiBbXCJ1aWRcIl0sIHNldHRpbmc6IFwiKlwiLCB0aHJlYWQ6IFtcIndhdGNoQ250XCJdIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGZldGNoUG9zdHM6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiY2hcIiwgXCJwcm90b2NvbFwiLCBcImhvc3RcIiwgXCJoYXNTbGFzaFwiXSxcbiAgICAgICAgICBhcHA6IFtcIm11bHRpc3RyZWFtXCIsIFwicm9vdENoXCIsIFwiZGlzcFRocmVhZFR5cGVcIiwgXCJhY3Rpb25lZFwiLCBcIm9mZnNldEZpbmRJZFwiLCBcImlzVG9nZ2xlTXVsdGlzdHJlYW1cIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7XG4gICAgICAgICAgcG9zdHM6IFwiKlwiLFxuICAgICAgICAgIHRocmVhZDogXCIqXCIsXG4gICAgICAgICAgYXBwOiBbXCJkaXNwVGhyZWFkVHlwZVwiLCBcIm9mZnNldEZpbmRJZFwiLCBcInR1bmVkXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7IHRocmVhZDogW1wid2F0Y2hDbnRcIiwgXCJjaFwiXSB9LFxuICAgICAgfSxcbiAgICAgIGdldE1vcmU6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiY2hcIl0sXG4gICAgICAgICAgYXBwOiBbXCJtdWx0aXN0cmVhbVwiLCBcImRpc3BUaHJlYWRUeXBlXCIsIFwib2Zmc2V0RmluZElkXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogXCIqXCIsXG4gICAgICAgICAgYXBwOiBbXCJkaXNwVGhyZWFkVHlwZVwiLCBcIm9mZnNldEZpbmRJZFwiXSxcbiAgICAgICAgICBwb3N0czogXCIqXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHVwZGF0ZVRocmVhZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbXCJjaFwiLCBcInByb3RvY29sXCIsIFwiaG9zdFwiLCBcImhhc1NsYXNoXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogXCIqXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGNoYW5nZVRocmVhZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbXCJjaFwiLCBcInByb3RvY29sXCIsIFwiaG9zdFwiLCBcImhhc1NsYXNoXCJdLFxuICAgICAgICAgIGFwcDogW1widHVuZWRcIiwgXCJyb290Q2hcIiwgXCJtdWx0aXN0cmVhbVwiLCBcImRpc3BUaHJlYWRUeXBlXCIsIFwib2Zmc2V0RmluZElkXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyBhcHA6IFtcInR1bmVkXCJdIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbXCJ3YXRjaENudFwiLCBcImNoXCJdIH0sXG4gICAgICB9LFxuICAgICAgY2hhbmdlVGhyZWFkRGV0YWlsOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHsgdGhyZWFkOiBbXCJjaFwiXSB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGFkZEZpbmRDaGlsZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7IHRocmVhZDogW1wiY2hcIl0gfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHsgdGhyZWFkOiBcIipcIiB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICByYW5rOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICBhcHA6IFtcImZpbmRUeXBlXCIsIFwicm9vdENoXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyByYW5rOiBcIipcIiB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBwb3N0OiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB1c2VyOiBbXCJ1aWRcIiwgXCJ1dHlwZVwiXSxcbiAgICAgICAgICBhcHA6IFtcImlucHV0UG9zdFwiLCBcImlucHV0U3RhbXBJZFwiLCBcImlucHV0Q3VycmVudFRpbWVcIiwgXCJkaXNwVGhyZWFkVHlwZVwiXSxcbiAgICAgICAgICB0aHJlYWQ6IFtcImZpbmRUeXBlXCIsIFwidGl0bGVcIiwgXCJwcm90b2NvbFwiLCBcImNoXCIsIFwiY2hzXCIsIFwiZW1vdGlvbnNcIiwgXCJmYXZpY29uXCIsIFwiY29udGVudFR5cGVcIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7fSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTogeyBwb3N0czogXCIqXCIsIHRocmVhZDogXCIqXCIsIHJhbms6IFwiKlwiIH0sXG4gICAgICB9LFxuICAgICAgdXBkYXRlVGhyZWFkU2VydmVyTWV0YXM6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7IHRocmVhZDogW1wic2VydmVyTWV0YXNcIl0gfSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogW1wiaG9zdFwiLCBcInByb3RvY29sXCIsIFwiY2hcIl0sXG4gICAgICAgICAgdXNlcjogXCIqXCIsIC8vIOaHuOW/tVxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6IFwiKlwiIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGxvZ2luOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZTogeyB1c2VyOiBbXCJyZXF1ZXN0TG9naW5UeXBlXCJdIH0sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB1c2VyOiBbXCJ1aWRcIiwgXCJocmVmXCJdLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB1c2VyOiBcIipcIiB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBkaXNjb25uZWN0OiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHt9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge30sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbXCJ3YXRjaENudFwiLCBcImNoXCJdIH0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0U2VxdWVuY2VBY3Rpb25NYXAobWV0aG9kKTogeyBzZXF1ZW5jZTogc3RyaW5nOyBhY3Rpb25UeXBlOiBzdHJpbmc7IGFjdGlvbk5hbWU6IHN0cmluZyB9IHtcbiAgICBjb25zdCBzcGxpdGVkID0gbWV0aG9kLnNwbGl0KFNlcXVlbmNlLk1FVEhPRF9DT0xPTik7XG4gICAgY29uc3Qgc2VxdWVuY2UgPSBzcGxpdGVkWzBdLnNwbGl0KFwiW1wiKVswXTtcbiAgICBsZXQgYWN0aW9uVHlwZTtcblxuICAgIGlmIChzcGxpdGVkWzBdLmluZGV4T2YoYFske1NlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEV9XWApID4gMCkge1xuICAgICAgYWN0aW9uVHlwZSA9IFNlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvblR5cGUgPVxuICAgICAgICBzcGxpdGVkWzBdLmluZGV4T2YoYFske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9XWApID4gMFxuICAgICAgICAgID8gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVFxuICAgICAgICAgIDogU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBzcGxpdGVkWzFdO1xuICAgIHJldHVybiB7IHNlcXVlbmNlLCBhY3Rpb25UeXBlLCBhY3Rpb25OYW1lIH07XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlQ2FsbGJhY2tFeGVDb25kaXRpb25NYXAoYWN0aW9uTmFtZSk6IHsgZW1pdDogYm9vbGVhbjsgYnJvYWRjYXN0OiBib29sZWFuIH0ge1xuICAgIGxldCBhY3RpdmVSZXNwb25zZU1hcCA9IHsgZW1pdDogdHJ1ZSwgYnJvYWRjYXN0OiB0cnVlIH07XG4gICAgaWYgKFNlcXVlbmNlLm1hcFthY3Rpb25OYW1lXSkge1xuICAgICAgYWN0aXZlUmVzcG9uc2VNYXAuZW1pdCA9ICEoT2JqZWN0LmtleXMoU2VxdWVuY2UubWFwW2FjdGlvbk5hbWVdLnJlc3BvbnNlRW1pdFN0YXRlKS5sZW5ndGggPiAwKTtcbiAgICAgIGFjdGl2ZVJlc3BvbnNlTWFwLmJyb2FkY2FzdCA9ICEoT2JqZWN0LmtleXMoU2VxdWVuY2UubWFwW2FjdGlvbk5hbWVdLnJlc3BvbnNlQnJvYWRjYXN0U3RhdGUpLmxlbmd0aCA+IDApO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZlUmVzcG9uc2VNYXA7XG4gIH1cblxuICBzdGF0aWMgY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZShhY3Rpb25UeXBlKSB7XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QpID09PSAwKSB7XG4gICAgICByZXR1cm4gYWN0aW9uVHlwZS5yZXBsYWNlKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9SRVFVRVNUKTtcbiAgICB9XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0VNSVQpID09PSAwKSB7XG4gICAgICByZXR1cm4gYWN0aW9uVHlwZS5yZXBsYWNlKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9FTUlUKTtcbiAgICB9XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QsIFNlcXVlbmNlLkFQSV9UT19DTElFTlRfQlJPQURDQVNUKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvblR5cGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0UmVxdWVzdFN0YXRlKGFjdGlvbk5hbWUsIHJlZHV4U3RhdGUsIHJlcXVlc3RQYXJhbXMpIHtcbiAgICBjb25zdCBlbmRwb2ludEtleSA9IGFjdGlvbk5hbWUucmVwbGFjZShTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QsIFwiXCIpO1xuICAgIGNvbnN0IHsgcmVxdWVzdFB1YmxpY1N0YXRlLCByZXF1ZXN0UHJpdmF0ZVN0YXRlIH0gPSBTZXF1ZW5jZS5tYXBbZW5kcG9pbnRLZXldO1xuICAgIGxldCByZXF1ZXN0U3RhdGUgPSB7IFtTZXF1ZW5jZS5SRURVWF9BQ1RJT05fS0VZXTogZW5kcG9pbnRLZXkgfTtcblxuICAgIE9iamVjdC5rZXlzKHJlcXVlc3RQcml2YXRlU3RhdGUpLmZvckVhY2goKHN0YXRlS2V5KSA9PiB7XG4gICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0pIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0gPSB7fTtcblxuICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZVtzdGF0ZUtleV0uZm9yRWFjaCgoY29sdW1uTmFtZSkgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0pIHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSByZWR1eFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXTtcbiAgICAgICAgICBpZiAocmVxdWVzdFBhcmFtcyAmJiByZXF1ZXN0UGFyYW1zW3N0YXRlS2V5XSAmJiBTY2hlbWEuaXNTZXQocmVxdWVzdFBhcmFtc1tzdGF0ZUtleV1bY29sdW1uTmFtZV0pKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlcXVlc3RQYXJhbXNbc3RhdGVLZXldW2NvbHVtbk5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXF1ZXN0U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMocmVxdWVzdFB1YmxpY1N0YXRlKS5mb3JFYWNoKChzdGF0ZUtleSkgPT4ge1xuICAgICAgaWYgKCFyZXF1ZXN0U3RhdGVbc3RhdGVLZXldKSByZXF1ZXN0U3RhdGVbc3RhdGVLZXldID0ge307XG5cbiAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZVtzdGF0ZUtleV0uZm9yRWFjaCgoY29sdW1uTmFtZSkgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0pIHtcbiAgICAgICAgICByZXF1ZXN0U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdID0gcmVxdWVzdFBhcmFtcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcXVlc3RTdGF0ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZXNwb25zZVN0YXRlKHJlc3BvbnNlVHlwZSwgcmVxdWVzdFN0YXRlLCB1cGRhdGVTdGF0ZSkge1xuICAgIGNvbnN0IGVuZHBvaW50S2V5ID0gcmVxdWVzdFN0YXRlLnR5cGU7XG4gICAgY29uc3QgcmVzcG9uc2VTY2hlbWEgPSBTZXF1ZW5jZS5tYXBbZW5kcG9pbnRLZXldW2ByZXNwb25zZSR7cmVzcG9uc2VUeXBlfVN0YXRlYF07XG4gICAgbGV0IHJlc3BvbnNlU3RhdGUgPSB7IFtTZXF1ZW5jZS5SRURVWF9BQ1RJT05fS0VZXTogZW5kcG9pbnRLZXkgfTtcbiAgICBPYmplY3Qua2V5cyhyZXNwb25zZVNjaGVtYSkuZm9yRWFjaCgodXBkYXRlU3RhdGVLZXkpID0+IHtcbiAgICAgIGlmICh1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV0pIHtcbiAgICAgICAgY29uc3QgY29sdW1uTmFtZXMgPSByZXNwb25zZVNjaGVtYVt1cGRhdGVTdGF0ZUtleV07XG4gICAgICAgIGxldCB1cGRhdGVTdGF0ZVZhbHVlID0gdXBkYXRlU3RhdGVbdXBkYXRlU3RhdGVLZXldO1xuXG4gICAgICAgIHN3aXRjaCAodXBkYXRlU3RhdGVWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICAgICAgY2FzZSBcIm1vZGVsXCI6XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZVZhbHVlID0gdXBkYXRlU3RhdGVWYWx1ZS50b0pTT04oKTtcbiAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVTdGF0ZVZhbHVlLl9pZDtcbiAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVTdGF0ZVZhbHVlLl9fdjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbk5hbWVzID09PSBcIipcIikge1xuICAgICAgICAgIHJlc3BvbnNlU3RhdGUgPSB7XG4gICAgICAgICAgICAuLi5yZXNwb25zZVN0YXRlLFxuICAgICAgICAgICAgW3VwZGF0ZVN0YXRlS2V5XTogdXBkYXRlU3RhdGVWYWx1ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbHVtbk5hbWVzLmZvckVhY2goKGNvbHVtbk5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV1bY29sdW1uTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXNwb25zZVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3BvbnNlU3RhdGUsXG4gICAgICAgICAgICAgICAgW3VwZGF0ZVN0YXRlS2V5XToge1xuICAgICAgICAgICAgICAgICAgLi4ucmVzcG9uc2VTdGF0ZVt1cGRhdGVTdGF0ZUtleV0sXG4gICAgICAgICAgICAgICAgICBbY29sdW1uTmFtZV06IHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XVtjb2x1bW5OYW1lXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgYFNFUVVFTkNFIEVSUk9SOiBOT19VUERBVEVfU1RBVEVfQ09MVU1OX05BTUU6ICR7cmVxdWVzdFN0YXRlLnR5cGV9OiAke3VwZGF0ZVN0YXRlS2V5fS4ke2NvbHVtbk5hbWV9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgYFNFUVVFTkNFIEVSUk9SOiBOT19VUERBVEVfU1RBVEVfS0VZOiAke3JlcXVlc3RTdGF0ZS50eXBlfTogJHt1cGRhdGVTdGF0ZUtleX1gO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZVN0YXRlO1xuICB9XG5cbiAgc3RhdGljIGdldFJlcXVlc3RBY3Rpb25TdGF0ZShhY3Rpb25OYW1lLCByZXF1ZXN0UGFyYW1zMSA9IG51bGwsIHJlcXVlc3RQYXJhbXMyID0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdFBhcmFtczEgPT09IFwic3RyaW5nXCIgJiYgcmVxdWVzdFBhcmFtczIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IGFjdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0UGFyYW1zMSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVxdWVzdFBhcmFtczIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiB7IC4uLnJlcXVlc3RQYXJhbXMxLCAuLi5yZXF1ZXN0UGFyYW1zMiwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVlc3RQYXJhbXMxID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiByZXF1ZXN0UGFyYW1zMiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIHsgLi4ucmVxdWVzdFBhcmFtczIsIHR5cGU6IGFjdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgLi4ucmVxdWVzdFBhcmFtczEsIHR5cGU6IGFjdGlvbk5hbWUgfTtcbiAgfVxufVxuIiwiaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFBvc3RNdWx0aSBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RNdWx0aVwiO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrXCI7XG5pbXBvcnQgUG9zdHNTaW5nbGUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1NpbmdsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0cyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwUG9zdHMoc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSwgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUsIHBvc3RzQ2hpbGQsIHBvc3RzTG9ncyB9ID0gc3RhdGU7XG4gICAgc3dpdGNoIChhcHAuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6XG4gICAgICAgIHJldHVybiBwb3N0c1RpbWVsaW5lO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgcmV0dXJuIHBvc3RzTXVsdGk7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgcmV0dXJuIHBvc3RzU2luZ2xlO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgcmV0dXJuIHBvc3RzQ2hpbGQ7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIHJldHVybiBwb3N0c0xvZ3M7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHMgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBleGlzdFBvc3RzID0gcG9zdHMgJiYgcG9zdHMubGVuZ3RoID4gMDtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0TXVsdGkoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IFtdO1xuICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBbXTtcbiAgICBzd2l0Y2ggKGFwcC5kaXNwVGhyZWFkVHlwZSkge1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTpcbiAgICAgICAgYWN0aW9uID0gUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZShhY3Rpb24sIHBvc3RzLCBzdGF0ZSwgZXhpc3RQb3N0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgYWN0aW9uLnBvc3RzTXVsdGkgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgYWN0aW9uLnBvc3RzU2luZ2xlID0gZXhpc3RQb3N0cyA/IHBvc3RzIDogW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzVGltZWxpbmUoYWN0aW9uLCBwb3N0cywgc3RhdGUsIGV4aXN0UG9zdHMpIHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIikge1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUucHVzaChhY3Rpb24ucG9zdHNbMF0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09IFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCIpIHtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG5cbiAgICAgIGlmIChleGlzdFBvc3RzKSB7XG4gICAgICAgIGNvbnN0IHBvc3RzTGVuZ3RoID0gcG9zdHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocG9zdHNbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG59XG4iLCIvKipcclxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xyXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICB2YXIgc3RyID0gJyc7XHJcblxyXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xyXG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XHJcbiAgdmFyIHFyeSA9IHt9O1xyXG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcclxuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xyXG4gIH1cclxuICByZXR1cm4gcXJ5O1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RzVGltZWxpbmUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RUaW1lbGluZVN0b2NrIHtcbiAgY29uc3RydWN0b3IocGFyYW1zID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgRW1vdGlvbk1vZGVsIGZyb20gXCJjb21tb24vZW1vdGlvbnMvbW9kZWwvaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1vdGlvbnMge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRNb2RlbEtleSgpIHtcbiAgICByZXR1cm4gXCJydXNzZWxsU2ltcGxlXCI7XG4gIH1cbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTElLRTogeyBJRDogMSwgTEFCRUw6IFwiTGlrZVwiIH0sXG4gICAgICBJTlRFUkVTVDogeyBJRDogMTAwMiwgTEFCRUw6IFwiSW50ZXJlc3RcIiB9LFxuICAgICAgRElTQ09WRVJZOiB7IElEOiAxMDAzLCBMQUJFTDogXCJEaXNjb3ZlcnlcIiB9LFxuICAgICAgU1VOTlk6IHsgSUQ6IDEwMDQsIExBQkVMOiBcIlN1bm55XCIgfSxcbiAgICAgIFBFQUNFOiB7IElEOiAxMDA1LCBMQUJFTDogXCJQZWFjZVwiIH0sXG4gICAgICBDSEVFUjogeyBJRDogMTAwNiwgTEFCRUw6IFwiQ2hlZXJcIiB9LFxuICAgICAgTU9ORVk6IHsgSUQ6IDEwMDcsIExBQkVMOiBcIk1vbmV5XCIgfSxcbiAgICAgIFVOTElLRTogeyBJRDogMjAwMSwgTEFCRUw6IFwiVW5saWtlXCIgfSxcbiAgICAgIExPVkU6IHsgSUQ6IDMwMDAsIExBQkVMOiBcIkxvdmVcIiB9LFxuICAgICAgU1VQUklTRTogeyBJRDogMTAwMDEsIExBQkVMOiBcIlN1cnByaXNlXCIgfSxcbiAgICAgIEVYQ0lURTogeyBJRDogMTAwMDIsIExBQkVMOiBcIkV4Y2l0ZVwiIH0sXG4gICAgICBIQVBQWTogeyBJRDogMTAwMDMsIExBQkVMOiBcIkhhcHB5XCIgfSxcbiAgICAgIEpPWTogeyBJRDogMTAwMDQsIExBQkVMOiBcIkpveVwiIH0sXG4gICAgICBHTEFEOiB7IElEOiAyMDAwMSwgTEFCRUw6IFwiR2xhZFwiIH0sXG4gICAgICBTQVRJU0ZBQ1RJT046IHsgSUQ6IDIwMDAyLCBMQUJFTDogXCJTYXRpc2ZhY3Rpb25cIiB9LFxuICAgICAgQ09NRk9SVDogeyBJRDogMzAwMDEsIExBQkVMOiBcIkNvbWZvcnRcIiB9LFxuICAgICAgUkVMQVg6IHsgSUQ6IDMwMDAyLCBMQUJFTDogXCJSZWxheFwiIH0sXG4gICAgICBUSVJFRDogeyBJRDogMzAwMDMsIExBQkVMOiBcIlRpcmVkXCIgfSxcbiAgICAgIFNMRUVQWTogeyBJRDogNTAwMDEsIExBQkVMOiBcIlNsZWVweVwiIH0sXG4gICAgICBTTEFDSzogeyBJRDogNjAwMDEsIExBQkVMOiBcIlNsYWNrXCIgfSxcbiAgICAgIEJPUklORzogeyBJRDogNjAwMDIsIExBQkVMOiBcIkJvcmluZ1wiIH0sXG4gICAgICBNRUxBTkNIT0xZOiB7IElEOiA3MDAwMSwgTEFCRUw6IFwiTWVsYW5jaG9seVwiIH0sXG4gICAgICBTQUQ6IHsgSUQ6IDcwMDAyLCBMQUJFTDogXCJTYWRcIiB9LFxuICAgICAgVU5QTEVBU0FOVDogeyBJRDogNzAwMDMsIExBQkVMOiBcIlVucGxlYXNhbnRcIiB9LFxuICAgICAgRlJVU1RSQVRFRDogeyBJRDogNzAwMDQsIExBQkVMOiBcIkZydXN0cmF0ZWRcIiB9LFxuICAgICAgRElTU0FUSVNGSUVEOiB7IElEOiA4MDAwMSwgTEFCRUw6IFwiRGlzc2F0aXNmaWVkXCIgfSxcbiAgICAgIEFOR0VSOiB7IElEOiA4MDAwMiwgTEFCRUw6IFwiQW5nZXJcIiB9LFxuICAgICAgV09SUlk6IHsgSUQ6IDgwMDAzLCBMQUJFTDogXCJXb3JyeVwiIH0sXG4gICAgICBGRUFSOiB7IElEOiA4MDAwNCwgTEFCRUw6IFwiRmVhclwiIH0sXG4gICAgICBXT1JSWV9GRUFSOiB7IElEOiA4MDAwNSwgTEFCRUw6IFwiV29ycnkmRmVhclwiIH1cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldEdyYXBoTWF4TnVtKFxuICAgIG1vZGVsS2V5ID0gRW1vdGlvbnMuZGVmYXVsdE1vZGVsS2V5LFxuICAgIHRvdGFsTnVtID0gMCxcbiAgICBhZGRaZXJvID0gdHJ1ZVxuICApIHtcbiAgICBsZXQgZ3JhcGhNYXhOdW0gPSAwO1xuICAgIGxldCBsaW1pdHMgPSB7fTtcbiAgICBzd2l0Y2ggKG1vZGVsS2V5KSB7XG4gICAgICBjYXNlIFwicGxhaW5cIjpcbiAgICAgICAgbGltaXRzID0ge1xuICAgICAgICAgIDE6IDEsXG4gICAgICAgICAgNTogMixcbiAgICAgICAgICAxMDogMyxcbiAgICAgICAgICAzMDogNCxcbiAgICAgICAgICA3MDogNSxcbiAgICAgICAgICAxMDA6IDYsXG4gICAgICAgICAgMjUwOiA3LFxuICAgICAgICAgIDUwMDogOCxcbiAgICAgICAgICA3NTA6IDksXG4gICAgICAgICAgMTAwMDogMTBcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicnVzc2VsbFNpbXBsZVwiOlxuICAgICAgICBsaW1pdHMgPSB7XG4gICAgICAgICAgNjogNSxcbiAgICAgICAgICAxMDogNSxcbiAgICAgICAgICAyMDogNSxcbiAgICAgICAgICAzMDogNSxcbiAgICAgICAgICA1MDogNVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJydXNzZWxsXCI6XG4gICAgICAgIGxpbWl0cyA9IHtcbiAgICAgICAgICAxOiAxLFxuICAgICAgICAgIDU6IDIsXG4gICAgICAgICAgMTA6IDMsXG4gICAgICAgICAgMzA6IDQsXG4gICAgICAgICAgNzA6IDUsXG4gICAgICAgICAgMTAwOiA2LFxuICAgICAgICAgIDI1MDogNyxcbiAgICAgICAgICA1MDA6IDgsXG4gICAgICAgICAgNzUwOiA5LFxuICAgICAgICAgIDEwMDA6IDEwXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbWl0S2V5cyA9IE9iamVjdC5rZXlzKGxpbWl0cyk7XG4gICAgY29uc3QgbGltaXRMZW5ndGggPSBsaW1pdEtleXMubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbWl0TGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleU51bTogYW55ID0gbGltaXRLZXlzW2ldO1xuICAgICAgY29uc3QgZW1vdGlvbkxpbWl0TnVtID0gbGltaXRzW2tleU51bV07XG4gICAgICBpZiAoa2V5TnVtID4gdG90YWxOdW0pIGJyZWFrO1xuICAgICAgZ3JhcGhNYXhOdW0gPSBlbW90aW9uTGltaXROdW07XG4gICAgfVxuXG4gICAgLy8gYWRkIHplcm8gZ3JhcGggc3BhY2VcbiAgICByZXR1cm4gYWRkWmVybyA/IGdyYXBoTWF4TnVtICsgMSA6IGdyYXBoTWF4TnVtO1xuICB9XG5cbiAgYmVsb25nQ292ZXJUeXBlczogYW55O1xuICBpZEtleVR5cGVzOiBhbnk7XG4gIHR5cGVzQXJyYXk6IGFueTtcbiAgbW9kZWw6IGFueTtcbiAgYmFsYW5jZXM6IGFueTtcbiAgY29uc3RydWN0b3IodHlwZSA9IFwiXCIpIHtcbiAgICB0aGlzLmJlbG9uZ0NvdmVyVHlwZXMgPSB7fTtcbiAgICB0aGlzLmlkS2V5VHlwZXMgPSB7fTtcbiAgICB0aGlzLnR5cGVzQXJyYXkgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKEVtb3Rpb25zLmlucHV0cykuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgICBFbW90aW9ucy5pbnB1dHNbbGFiZWxdLmZvckVhY2goc3RhbXBJZCA9PiB7XG4gICAgICAgIHRoaXMuYmVsb25nQ292ZXJUeXBlc1tzdGFtcElkXSA9IGxhYmVsO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhFbW90aW9ucy5UWVBFUykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy50eXBlc0FycmF5LnB1c2goa2V5KTtcbiAgICAgIGNvbnN0IG9iaiA9IEVtb3Rpb25zLlRZUEVTW2tleV07XG4gICAgICB0aGlzLmlkS2V5VHlwZXNbb2JqLklEXSA9IG9iai5MQUJFTDtcbiAgICB9KTtcblxuICAgIHRoaXMubW9kZWwgPSBFbW90aW9uTW9kZWw7XG5cbiAgICB0aGlzLmJhbGFuY2VzID0ge1xuICAgICAgcGxhaW46IEVtb3Rpb25Nb2RlbC5QbGFpbi5nZXRTYXZlQmFsYW5jZSxcbiAgICAgIHJ1c3NlbGw6IEVtb3Rpb25Nb2RlbC5SdXNzZWxsLmdldFNhdmVCYWxhbmNlLFxuICAgICAgcnVzc2VsbFNpbXBsZTogRW1vdGlvbk1vZGVsLlJ1c3NlbGxTaW1wbGUuZ2V0U2F2ZUJhbGFuY2VcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBpbnB1dHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5MSUtFLkxBQkVMXTogWzEsIDIsIDMsIDQsIDVdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLk1PTkVZLkxBQkVMXTogWzEwMF0sXG5cbiAgICAgIFtFbW90aW9ucy5UWVBFUy5FWENJVEUuTEFCRUxdOiBbMTEwMSwgMTEwMiwgMTEwMywgMTAwMSwgMTAwMl0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuTEFCRUxdOiBbXG4gICAgICAgIDEyMDEsXG4gICAgICAgIDEyMDIsXG4gICAgICAgIDEyMDMsXG4gICAgICAgIDEyMDQsXG4gICAgICAgIDEzMDEsXG4gICAgICAgIDEzMDIsXG4gICAgICAgIDEzMDMsXG4gICAgICAgIDEzMDQsXG4gICAgICAgIDEzMDUsXG4gICAgICAgIDEzMDYsXG4gICAgICAgIDEzMDdcbiAgICAgIF0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuSk9ZLkxBQkVMXTogWzE0MDEsIDE0MDIsIDE1MDEsIDE1MDIsIDE1MDMsIDE1MDRdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLkxBQkVMXTogW1xuICAgICAgICAxNjAxLFxuICAgICAgICAxNjAyLFxuICAgICAgICAxNjAzLFxuICAgICAgICAxNzAxLFxuICAgICAgICAxNzAyLFxuICAgICAgICAxNzAzLFxuICAgICAgICAxODAxLFxuICAgICAgICAxODAyLFxuICAgICAgICAxODAzXG4gICAgICBdLFxuXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suTEFCRUxdOiBbXG4gICAgICAgIDIwMDEsXG4gICAgICAgIDIwMDIsXG4gICAgICAgIDIwMDMsXG4gICAgICAgIDIwMDQsXG4gICAgICAgIDIwMDUsXG4gICAgICAgIDIxMDEsXG4gICAgICAgIDIxMDIsXG4gICAgICAgIDIxMDNcbiAgICAgIF0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5MQUJFTF06IFtcbiAgICAgICAgMjMwMSxcbiAgICAgICAgMjMwMixcbiAgICAgICAgMjMwMyxcbiAgICAgICAgMjIwMSxcbiAgICAgICAgMjIwMixcbiAgICAgICAgMjIwMyxcbiAgICAgICAgMjIwNCxcbiAgICAgICAgMjIwNSxcbiAgICAgICAgMjQwMSxcbiAgICAgICAgMjQwMixcbiAgICAgICAgMjQwMyxcbiAgICAgICAgMjQwNCxcbiAgICAgICAgMjUwMSxcbiAgICAgICAgMjUwMixcbiAgICAgICAgMjUwM1xuICAgICAgXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5BTkdFUi5MQUJFTF06IFtcbiAgICAgICAgMjcwMSxcbiAgICAgICAgMjcwMixcbiAgICAgICAgMjcwMyxcbiAgICAgICAgMjcwNCxcbiAgICAgICAgMjcwNSxcbiAgICAgICAgMjcwNixcbiAgICAgICAgMjYwMSxcbiAgICAgICAgMjYwMlxuICAgICAgXSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLkxBQkVMXTogW1xuICAgICAgICAyOTA0LFxuICAgICAgICAyOTA1LFxuICAgICAgICAyOTA2LFxuICAgICAgICAyODAxLFxuICAgICAgICAyODAyLFxuICAgICAgICAyODAzLFxuICAgICAgICAyODA0LFxuICAgICAgICAyODA1LFxuICAgICAgICAyODA2LFxuICAgICAgICAyOTAxLFxuICAgICAgICAyOTAzXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgbWFwKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBGbGF0IGxpa2VcbiAgICAgIDE6IFwi8J+RjVwiLFxuICAgICAgMjogXCLinIzvuI9cIixcbiAgICAgIDM6IFwi8J+RgFwiLFxuICAgICAgNDogXCLwn5KhXCIsXG4gICAgICA1OiBcIvCfkqpcIixcbiAgICAgIDEwOiBcIlwiLFxuICAgICAgMTAwOiBcIvCfkrVcIixcblxuICAgICAgLy8gU3VwcmlzZShQb3NpMSlcbiAgICAgIDEwMDE6IFwi8J+Ys1wiLFxuICAgICAgMTAwMjogXCLwn5i1XCIsXG5cbiAgICAgIC8vIEV4Y2l0ZShQb3NpMSlcbiAgICAgIDExMDE6IFwi8J+ko1wiLFxuICAgICAgMTEwMjogXCLwn5iGXCIsXG4gICAgICAxMTAzOiBcIvCfpKlcIixcblxuICAgICAgLy8gSGFwcHkoUG9zaTIpXG4gICAgICAxMjAxOiBcIvCfkpNcIixcbiAgICAgIDEyMDI6IFwi8J+lsFwiLFxuICAgICAgMTIwMzogXCLwn5iNXCIsXG4gICAgICAxMjA0OiBcIvCfmLtcIixcblxuICAgICAgLy8gSm95KFBvc2kyKVxuICAgICAgMTMwMTogXCLwn5iEXCIsXG4gICAgICAxMzAyOiBcIuKcqFwiLFxuICAgICAgMTMwMzogXCLwn5iBXCIsXG4gICAgICAxMzA0OiBcIvCfjbpcIixcbiAgICAgIDEzMDU6IFwi8J+YilwiLFxuICAgICAgMTMwNjogXCLwn5iYXCIsXG4gICAgICAxMzA3OiBcIvCfjJ9cIixcblxuICAgICAgLy8gR2xhZChQb3NpMylcbiAgICAgIDE0MDE6IFwi8J+ls1wiLFxuICAgICAgMTQwMjogXCLwn5iDXCIsXG5cbiAgICAgIC8vIFNhdGlzZmFjdGlvbihQb3NpMylcbiAgICAgIDE1MDE6IFwi8J+Yi1wiLFxuICAgICAgMTUwMjogXCLwn46CXCIsXG4gICAgICAxNTAzOiBcIvCfjbBcIixcbiAgICAgIDE1MDQ6IFwi8J+ngVwiLFxuXG4gICAgICAvLyBDb21mb3J0KFBvc2k0KVxuICAgICAgMTYwMTogXCLwn5iMXCIsXG4gICAgICAxNjAyOiBcIvCfpKRcIixcbiAgICAgIDE2MDM6IFwi8J+YiVwiLFxuXG4gICAgICAvLyBSZWxheChQb3NpNClcbiAgICAgIDE3MDE6IFwi8J+ZglwiLFxuICAgICAgMTcwMjogXCLimJXvuI9cIixcbiAgICAgIDE3MDM6IFwi8J+NtVwiLFxuXG4gICAgICAvLyBUaXJlZChQb3NpNClcbiAgICAgIDE4MDE6IFwi8J+YkFwiLFxuICAgICAgMTgwMjogXCLwn5iuXCIsXG4gICAgICAxODAzOiBcIvCfmK9cIixcblxuICAgICAgLy8gU2xhY2soTmVnYTQpXG4gICAgICAyMDAxOiBcIvCfmIVcIixcbiAgICAgIDIwMDI6IFwi8J+SplwiLFxuICAgICAgMjAwMzogXCLwn6W6XCIsXG4gICAgICAyMDA0OiBcIvCfmLJcIixcbiAgICAgIDIwMDU6IFwi8J+ZhFwiLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiBcIvCfmJJcIixcbiAgICAgIDIxMDI6IFwi8J+YkVwiLFxuICAgICAgMjEwMzogXCLwn5iVXCIsXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiBcIvCfmKlcIixcbiAgICAgIDIyMDI6IFwi8J+YnlwiLFxuICAgICAgMjIwMzogXCLwn5iUXCIsXG4gICAgICAyMjA0OiBcIvCfmJ9cIixcbiAgICAgIDIyMDU6IFwi8J+kolwiLFxuXG4gICAgICAvLyBTYWQoTmVnYTMpXG4gICAgICAyMzAxOiBcIvCfmK1cIixcbiAgICAgIDIzMDI6IFwi8J+YpVwiLFxuICAgICAgMjMwMzogXCLwn5i/XCIsXG5cbiAgICAgIC8vIFVucGxlYXNhbnQoTmVnYTMpXG4gICAgICAyNDAxOiBcIvCfpJVcIixcbiAgICAgIDI0MDI6IFwi8J+kklwiLFxuICAgICAgMjQwMzogXCLwn5i3XCIsXG4gICAgICAyNDA0OiBcIvCfpKdcIixcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6IFwi8J+nkFwiLFxuICAgICAgMjUwMjogXCLwn6SUXCIsXG4gICAgICAyNTAzOiBcIvCfpKhcIixcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogXCLwn5igXCIsXG4gICAgICAyNjAyOiBcIvCfmL5cIixcblxuICAgICAgLy8gQW5nZXIoTmVnYTIpXG4gICAgICAyNzAxOiBcIvCfmKFcIixcbiAgICAgIDI3MDI6IFwi8J+krFwiLFxuICAgICAgMjcwMzogXCLwn5KUXCIsXG4gICAgICAyNzA0OiBcIvCfkqJcIixcbiAgICAgIDI3MDU6IFwi8J+YpFwiLFxuICAgICAgMjcwNjogXCLwn5G/XCIsXG5cbiAgICAgIC8vIFdvcnJ5KE5lZ2ExKVxuICAgICAgMjgwMTogXCLwn5ijXCIsXG4gICAgICAyODAyOiBcIvCfmKtcIixcbiAgICAgIDI4MDM6IFwi8J+Yk1wiLFxuICAgICAgMjgwNDogXCLwn5iWXCIsXG4gICAgICAyODA1OiBcIvCfmKhcIixcbiAgICAgIDI4MDY6IFwi8J+YsFwiLFxuXG4gICAgICAvLyBGZWFyKE5lZ2ExKVxuICAgICAgMjkwMTogXCLwn6W2XCIsXG4gICAgICAyOTAyOiBcIvCfpK5cIixcbiAgICAgIDI5MDM6IFwi8J+ltVwiLFxuICAgICAgMjkwNDogXCLwn5ixXCIsXG4gICAgICAyOTA1OiBcIvCfmYBcIixcbiAgICAgIDI5MDY6IFwi8J+SgFwiXG4gICAgfTtcbiAgfVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBiaW5hcnkgPSByZXF1aXJlKCcuL2JpbmFyeScpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnR5cGVzID0gW1xuICAnQ09OTkVDVCcsXG4gICdESVNDT05ORUNUJyxcbiAgJ0VWRU5UJyxcbiAgJ0FDSycsXG4gICdFUlJPUicsXG4gICdCSU5BUllfRVZFTlQnLFxuICAnQklOQVJZX0FDSydcbl07XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGNvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5DT05ORUNUID0gMDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZGlzY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRJU0NPTk5FQ1QgPSAxO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBldmVudGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVWRU5UID0gMjtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYWNrYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQUNLID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXJyb3JgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FUlJPUiA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgJ2JpbmFyeSBldmVudCdcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0VWRU5UID0gNTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYmluYXJ5IGFja2AuIEZvciBhY2tzIHdpdGggYmluYXJ5IGFyZ3VtZW50cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0FDSyA9IDY7XG5cbi8qKlxuICogRW5jb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7XG5cbi8qKlxuICogRGVjb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRGVjb2RlciA9IERlY29kZXI7XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRW5jb2RlcigpIHt9XG5cbnZhciBFUlJPUl9QQUNLRVQgPSBleHBvcnRzLkVSUk9SICsgJ1wiZW5jb2RlIGVycm9yXCInO1xuXG4vKipcbiAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gaGFuZGxlIGVuY29kaW5ncyAobGlrZWx5IGVuZ2luZS53cml0ZSlcbiAqIEByZXR1cm4gQ2FsbHMgY2FsbGJhY2sgd2l0aCBBcnJheSBvZiBlbmNvZGluZ3NcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24ob2JqLCBjYWxsYmFjayl7XG4gIGRlYnVnKCdlbmNvZGluZyBwYWNrZXQgJWonLCBvYmopO1xuXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHZhciBlbmNvZGluZyA9IGVuY29kZUFzU3RyaW5nKG9iaik7XG4gICAgY2FsbGJhY2soW2VuY29kaW5nXSk7XG4gIH1cbn07XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc1N0cmluZyhvYmopIHtcblxuICAvLyBmaXJzdCBpcyB0eXBlXG4gIHZhciBzdHIgPSAnJyArIG9iai50eXBlO1xuXG4gIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgJy0nO1xuICB9XG5cbiAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgaWYgKG9iai5uc3AgJiYgJy8nICE9PSBvYmoubnNwKSB7XG4gICAgc3RyICs9IG9iai5uc3AgKyAnLCc7XG4gIH1cblxuICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgc3RyICs9IG9iai5pZDtcbiAgfVxuXG4gIC8vIGpzb24gZGF0YVxuICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5U3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgICBpZiAocGF5bG9hZCAhPT0gZmFsc2UpIHtcbiAgICAgIHN0ciArPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRVJST1JfUEFDS0VUO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdlbmNvZGVkICVqIGFzICVzJywgb2JqLCBzdHIpO1xuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiB0cnlTdHJpbmdpZnkoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gKiBhIGxpc3Qgb2YgYnVmZmVycy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spIHtcblxuICBmdW5jdGlvbiB3cml0ZUVuY29kaW5nKGJsb2JsZXNzRGF0YSkge1xuICAgIHZhciBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeS5kZWNvbnN0cnVjdFBhY2tldChibG9ibGVzc0RhdGEpO1xuICAgIHZhciBwYWNrID0gZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICB2YXIgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG5cbiAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgY2FsbGJhY2soYnVmZmVycyk7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICB9XG5cbiAgYmluYXJ5LnJlbW92ZUJsb2JzKG9iaiwgd3JpdGVFbmNvZGluZyk7XG59XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBEZWNvZGVyKCkge1xuICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAgd2l0aCBEZWNvZGVyLlxuICovXG5cbkVtaXR0ZXIoRGVjb2Rlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERlY29kZXMgYW4gZW5jb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHBhY2tldDtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHBhY2tldC50eXBlKSB7IC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuXG4gICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0J1ZihvYmopIHx8IG9iai5iYXNlNjQpIHsgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgaWYgKHBhY2tldCkgeyAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGU6ICcgKyBvYmopO1xuICB9XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICB2YXIgaSA9IDA7XG4gIC8vIGxvb2sgdXAgdHlwZVxuICB2YXIgcCA9IHtcbiAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSlcbiAgfTtcblxuICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHtcbiAgICByZXR1cm4gZXJyb3IoJ3Vua25vd24gcGFja2V0IHR5cGUgJyArIHAudHlwZSk7XG4gIH1cblxuICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcC50eXBlKSB7XG4gICAgdmFyIGJ1ZiA9ICcnO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJykge1xuICAgICAgYnVmICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSAnLScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhdHRhY2htZW50cycpO1xuICAgIH1cbiAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gIH1cblxuICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICBpZiAoJy8nID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgIHAubnNwID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKCcsJyA9PT0gYykgYnJlYWs7XG4gICAgICBwLm5zcCArPSBjO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgcC5pZCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgLS1pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHAuaWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5pZCA9IE51bWJlcihwLmlkKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgIHZhciBpc1BheWxvYWRWYWxpZCA9IHBheWxvYWQgIT09IGZhbHNlICYmIChwLnR5cGUgPT09IGV4cG9ydHMuRVJST1IgfHwgaXNBcnJheShwYXlsb2FkKSk7XG4gICAgaWYgKGlzUGF5bG9hZFZhbGlkKSB7XG4gICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3IoJ2ludmFsaWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdkZWNvZGVkICVzIGFzICVqJywgc3RyLCBwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbihiaW5EYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHsgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgdmFyIHBhY2tldCA9IGJpbmFyeS5yZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICByZXR1cm4gcGFja2V0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufTtcblxuZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXhwb3J0cy5FUlJPUixcbiAgICBkYXRhOiAncGFyc2VyIGVycm9yOiAnICsgbXNnXG4gIH07XG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuL2dsb2JhbFRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xuICB9XG59KSgpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIHJlc3VsdHMgb2YgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9IG9wdHMuaXNSZWFjdE5hdGl2ZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKipcclxuICogUGFyc2VzIGFuIFVSSVxyXG4gKlxyXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xyXG5cclxudmFyIHBhcnRzID0gW1xyXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXHJcbl07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xyXG4gICAgdmFyIHNyYyA9IHN0cixcclxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcclxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcclxuICAgICAgICB1cmkgPSB7fSxcclxuICAgICAgICBpID0gMTQ7XHJcblxyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xyXG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJpO1xyXG59O1xyXG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZjtcblxudmFyIHdpdGhOYXRpdmVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBCdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbic7XG52YXIgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nO1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopIDogKG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gIHJldHVybiAod2l0aE5hdGl2ZUJ1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGVpbyA9IHJlcXVpcmUoJ2VuZ2luZS5pby1jbGllbnQnKTtcbnZhciBTb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6bWFuYWdlcicpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgQmFja29mZiA9IHJlcXVpcmUoJ2JhY2tvMicpO1xuXG4vKipcbiAqIElFNisgaGFzT3duUHJvcGVydHlcbiAqL1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTWFuYWdlcjtcblxuLyoqXG4gKiBgTWFuYWdlcmAgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGVuZ2luZSBpbnN0YW5jZSBvciBlbmdpbmUgdXJpL29wdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIE1hbmFnZXIgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFuYWdlcikpIHJldHVybiBuZXcgTWFuYWdlcih1cmksIG9wdHMpO1xuICBpZiAodXJpICYmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgfVxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBvcHRzLnBhdGggPSBvcHRzLnBhdGggfHwgJy9zb2NrZXQuaW8nO1xuICB0aGlzLm5zcHMgPSB7fTtcbiAgdGhpcy5zdWJzID0gW107XG4gIHRoaXMub3B0cyA9IG9wdHM7XG4gIHRoaXMucmVjb25uZWN0aW9uKG9wdHMucmVjb25uZWN0aW9uICE9PSBmYWxzZSk7XG4gIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMob3B0cy5yZWNvbm5lY3Rpb25BdHRlbXB0cyB8fCBJbmZpbml0eSk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXkob3B0cy5yZWNvbm5lY3Rpb25EZWxheSB8fCAxMDAwKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heChvcHRzLnJlY29ubmVjdGlvbkRlbGF5TWF4IHx8IDUwMDApO1xuICB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3Iob3B0cy5yYW5kb21pemF0aW9uRmFjdG9yIHx8IDAuNSk7XG4gIHRoaXMuYmFja29mZiA9IG5ldyBCYWNrb2ZmKHtcbiAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxcbiAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICBqaXR0ZXI6IHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigpXG4gIH0pO1xuICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLnVyaSA9IHVyaTtcbiAgdGhpcy5jb25uZWN0aW5nID0gW107XG4gIHRoaXMubGFzdFBpbmcgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gZmFsc2U7XG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHZhciBfcGFyc2VyID0gb3B0cy5wYXJzZXIgfHwgcGFyc2VyO1xuICB0aGlzLmVuY29kZXIgPSBuZXcgX3BhcnNlci5FbmNvZGVyKCk7XG4gIHRoaXMuZGVjb2RlciA9IG5ldyBfcGFyc2VyLkRlY29kZXIoKTtcbiAgdGhpcy5hdXRvQ29ubmVjdCA9IG9wdHMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlO1xuICBpZiAodGhpcy5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogUHJvcGFnYXRlIGdpdmVuIGV2ZW50IHRvIHNvY2tldHMgYW5kIGVtaXQgb24gYHRoaXNgXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZW1pdEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7XG4gICAgICB0aGlzLm5zcHNbbnNwXS5lbWl0LmFwcGx5KHRoaXMubnNwc1tuc3BdLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgYHNvY2tldC5pZGAgb2YgYWxsIHNvY2tldHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVTb2NrZXRJZHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7XG4gICAgICB0aGlzLm5zcHNbbnNwXS5pZCA9IHRoaXMuZ2VuZXJhdGVJZChuc3ApO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZW5lcmF0ZSBgc29ja2V0LmlkYCBmb3IgdGhlIGdpdmVuIGBuc3BgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5zcFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIChuc3ApIHtcbiAgcmV0dXJuIChuc3AgPT09ICcvJyA/ICcnIDogKG5zcCArICcjJykpICsgdGhpcy5lbmdpbmUuaWQ7XG59O1xuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihNYW5hZ2VyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHJlY29ubmVjdGlvbmAgY29uZmlnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdHJ1ZS9mYWxzZSBpZiBpdCBzaG91bGQgYXV0b21hdGljYWxseSByZWNvbm5lY3RcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgY29uZmlnLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXggcmVjb25uZWN0aW9uIGF0dGVtcHRzIGJlZm9yZSBnaXZpbmcgdXBcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uQXR0ZW1wdHMgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cztcbiAgdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheSA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWluKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk1hbmFnZXIucHJvdG90eXBlLnJhbmRvbWl6YXRpb25GYWN0b3IgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yO1xuICB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRKaXR0ZXIodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXhpbXVtIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXlNYXggPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heDtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXggPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1heCh2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbm5lY3Rpb24gdGltZW91dC4gYGZhbHNlYCB0byBkaXNhYmxlXG4gKlxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgdGhpcy5fdGltZW91dCA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAqIHN0YXJ0ZWQgcmVjb25uZWN0aW5nIHlldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm1heWJlUmVjb25uZWN0T25PcGVuID0gZnVuY3Rpb24gKCkge1xuICAvLyBPbmx5IHRyeSB0byByZWNvbm5lY3QgaWYgaXQncyB0aGUgZmlyc3QgdGltZSB3ZSdyZSBjb25uZWN0aW5nXG4gIGlmICghdGhpcy5yZWNvbm5lY3RpbmcgJiYgdGhpcy5fcmVjb25uZWN0aW9uICYmIHRoaXMuYmFja29mZi5hdHRlbXB0cyA9PT0gMCkge1xuICAgIC8vIGtlZXBzIHJlY29ubmVjdGlvbiBmcm9tIGZpcmluZyB0d2ljZSBmb3IgdGhlIHNhbWUgcmVjb25uZWN0aW9uIGxvb3BcbiAgICB0aGlzLnJlY29ubmVjdCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbmFsLCBjYWxsYmFja1xuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vcGVuID1cbk1hbmFnZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoZm4sIG9wdHMpIHtcbiAgZGVidWcoJ3JlYWR5U3RhdGUgJXMnLCB0aGlzLnJlYWR5U3RhdGUpO1xuICBpZiAofnRoaXMucmVhZHlTdGF0ZS5pbmRleE9mKCdvcGVuJykpIHJldHVybiB0aGlzO1xuXG4gIGRlYnVnKCdvcGVuaW5nICVzJywgdGhpcy51cmkpO1xuICB0aGlzLmVuZ2luZSA9IGVpbyh0aGlzLnVyaSwgdGhpcy5vcHRzKTtcbiAgdmFyIHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcbiAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG5cbiAgLy8gZW1pdCBgb3BlbmBcbiAgdmFyIG9wZW5TdWIgPSBvbihzb2NrZXQsICdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25vcGVuKCk7XG4gICAgZm4gJiYgZm4oKTtcbiAgfSk7XG5cbiAgLy8gZW1pdCBgY29ubmVjdF9lcnJvcmBcbiAgdmFyIGVycm9yU3ViID0gb24oc29ja2V0LCAnZXJyb3InLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRlYnVnKCdjb25uZWN0X2Vycm9yJyk7XG4gICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgc2VsZi5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gICAgc2VsZi5lbWl0QWxsKCdjb25uZWN0X2Vycm9yJywgZGF0YSk7XG4gICAgaWYgKGZuKSB7XG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdDb25uZWN0aW9uIGVycm9yJyk7XG4gICAgICBlcnIuZGF0YSA9IGRhdGE7XG4gICAgICBmbihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPbmx5IGRvIHRoaXMgaWYgdGhlcmUgaXMgbm8gZm4gdG8gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gZW1pdCBgY29ubmVjdF90aW1lb3V0YFxuICBpZiAoZmFsc2UgIT09IHRoaXMuX3RpbWVvdXQpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgZGVidWcoJ2Nvbm5lY3QgYXR0ZW1wdCB3aWxsIHRpbWVvdXQgYWZ0ZXIgJWQnLCB0aW1lb3V0KTtcblxuICAgIC8vIHNldCB0aW1lclxuICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZGVidWcoJ2Nvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWQnLCB0aW1lb3V0KTtcbiAgICAgIG9wZW5TdWIuZGVzdHJveSgpO1xuICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICBzb2NrZXQuZW1pdCgnZXJyb3InLCAndGltZW91dCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdjb25uZWN0X3RpbWVvdXQnLCB0aW1lb3V0KTtcbiAgICB9LCB0aW1lb3V0KTtcblxuICAgIHRoaXMuc3Vicy5wdXNoKHtcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuc3Vicy5wdXNoKG9wZW5TdWIpO1xuICB0aGlzLnN1YnMucHVzaChlcnJvclN1Yik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBvcGVuLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ29wZW4nKTtcblxuICAvLyBjbGVhciBvbGQgc3Vic1xuICB0aGlzLmNsZWFudXAoKTtcblxuICAvLyBtYXJrIGFzIG9wZW5cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcblxuICAvLyBhZGQgbmV3IHN1YnNcbiAgdmFyIHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdkYXRhJywgYmluZCh0aGlzLCAnb25kYXRhJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncGluZycsIGJpbmQodGhpcywgJ29ucGluZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BvbmcnLCBiaW5kKHRoaXMsICdvbnBvbmcnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdlcnJvcicsIGJpbmQodGhpcywgJ29uZXJyb3InKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbih0aGlzLmRlY29kZXIsICdkZWNvZGVkJywgYmluZCh0aGlzLCAnb25kZWNvZGVkJykpKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBwaW5nLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5sYXN0UGluZyA9IG5ldyBEYXRlKCk7XG4gIHRoaXMuZW1pdEFsbCgncGluZycpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnBvbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdEFsbCgncG9uZycsIG5ldyBEYXRlKCkgLSB0aGlzLmxhc3RQaW5nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmRlY29kZWQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc29ja2V0IGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdlcnJvcicsIGVycik7XG4gIHRoaXMuZW1pdEFsbCgnZXJyb3InLCBlcnIpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNvY2tldCBmb3IgdGhlIGdpdmVuIGBuc3BgLlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuc29ja2V0ID0gZnVuY3Rpb24gKG5zcCwgb3B0cykge1xuICB2YXIgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XG4gIGlmICghc29ja2V0KSB7XG4gICAgc29ja2V0ID0gbmV3IFNvY2tldCh0aGlzLCBuc3AsIG9wdHMpO1xuICAgIHRoaXMubnNwc1tuc3BdID0gc29ja2V0O1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3RpbmcnLCBvbkNvbm5lY3RpbmcpO1xuICAgIHNvY2tldC5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNvY2tldC5pZCA9IHNlbGYuZ2VuZXJhdGVJZChuc3ApO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHtcbiAgICAgIC8vIG1hbnVhbGx5IGNhbGwgaGVyZSBzaW5jZSBjb25uZWN0aW5nIGV2ZW50IGlzIGZpcmVkIGJlZm9yZSBsaXN0ZW5pbmdcbiAgICAgIG9uQ29ubmVjdGluZygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29ubmVjdGluZyAoKSB7XG4gICAgaWYgKCF+aW5kZXhPZihzZWxmLmNvbm5lY3RpbmcsIHNvY2tldCkpIHtcbiAgICAgIHNlbGYuY29ubmVjdGluZy5wdXNoKHNvY2tldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNvY2tldDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzb2NrZXQgY2xvc2UuXG4gKlxuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldFxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoc29ja2V0KSB7XG4gIHZhciBpbmRleCA9IGluZGV4T2YodGhpcy5jb25uZWN0aW5nLCBzb2NrZXQpO1xuICBpZiAofmluZGV4KSB0aGlzLmNvbm5lY3Rpbmcuc3BsaWNlKGluZGV4LCAxKTtcbiAgaWYgKHRoaXMuY29ubmVjdGluZy5sZW5ndGgpIHJldHVybjtcblxuICB0aGlzLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIGRlYnVnKCd3cml0aW5nIHBhY2tldCAlaicsIHBhY2tldCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHBhY2tldC5xdWVyeSAmJiBwYWNrZXQudHlwZSA9PT0gMCkgcGFja2V0Lm5zcCArPSAnPycgKyBwYWNrZXQucXVlcnk7XG5cbiAgaWYgKCFzZWxmLmVuY29kaW5nKSB7XG4gICAgLy8gZW5jb2RlLCB0aGVuIHdyaXRlIHRvIGVuZ2luZSB3aXRoIHJlc3VsdFxuICAgIHNlbGYuZW5jb2RpbmcgPSB0cnVlO1xuICAgIHRoaXMuZW5jb2Rlci5lbmNvZGUocGFja2V0LCBmdW5jdGlvbiAoZW5jb2RlZFBhY2tldHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VsZi5lbmdpbmUud3JpdGUoZW5jb2RlZFBhY2tldHNbaV0sIHBhY2tldC5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHNlbGYuZW5jb2RpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYucHJvY2Vzc1BhY2tldFF1ZXVlKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7IC8vIGFkZCBwYWNrZXQgdG8gdGhlIHF1ZXVlXG4gICAgc2VsZi5wYWNrZXRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG59O1xuXG4vKipcbiAqIElmIHBhY2tldCBidWZmZXIgaXMgbm9uLWVtcHR5LCBiZWdpbnMgZW5jb2RpbmcgdGhlXG4gKiBuZXh0IHBhY2tldCBpbiBsaW5lLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnByb2Nlc3NQYWNrZXRRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucGFja2V0QnVmZmVyLmxlbmd0aCA+IDAgJiYgIXRoaXMuZW5jb2RpbmcpIHtcbiAgICB2YXIgcGFjayA9IHRoaXMucGFja2V0QnVmZmVyLnNoaWZ0KCk7XG4gICAgdGhpcy5wYWNrZXQocGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgdHJhbnNwb3J0IHN1YnNjcmlwdGlvbnMgYW5kIHBhY2tldCBidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NsZWFudXAnKTtcblxuICB2YXIgc3Vic0xlbmd0aCA9IHRoaXMuc3Vicy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic0xlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN1YiA9IHRoaXMuc3Vicy5zaGlmdCgpO1xuICAgIHN1Yi5kZXN0cm95KCk7XG4gIH1cblxuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB0aGlzLmVuY29kaW5nID0gZmFsc2U7XG4gIHRoaXMubGFzdFBpbmcgPSBudWxsO1xuXG4gIHRoaXMuZGVjb2Rlci5kZXN0cm95KCk7XG59O1xuXG4vKipcbiAqIENsb3NlIHRoZSBjdXJyZW50IHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbG9zZSA9XG5NYW5hZ2VyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnZGlzY29ubmVjdCcpO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO1xuICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAvLyBgb25jbG9zZWAgd2lsbCBub3QgZmlyZSBiZWNhdXNlXG4gICAgLy8gYW4gb3BlbiBldmVudCBuZXZlciBoYXBwZW5lZFxuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgaWYgKHRoaXMuZW5naW5lKSB0aGlzLmVuZ2luZS5jbG9zZSgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ29uY2xvc2UnKTtcblxuICB0aGlzLmNsZWFudXAoKTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJywgcmVhc29uKTtcblxuICBpZiAodGhpcy5fcmVjb25uZWN0aW9uICYmICF0aGlzLnNraXBSZWNvbm5lY3QpIHtcbiAgICB0aGlzLnJlY29ubmVjdCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5yZWNvbm5lY3RpbmcgfHwgdGhpcy5za2lwUmVjb25uZWN0KSByZXR1cm4gdGhpcztcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYmFja29mZi5hdHRlbXB0cyA+PSB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cykge1xuICAgIGRlYnVnKCdyZWNvbm5lY3QgZmFpbGVkJyk7XG4gICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3RfZmFpbGVkJyk7XG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGVsYXkgPSB0aGlzLmJhY2tvZmYuZHVyYXRpb24oKTtcbiAgICBkZWJ1Zygnd2lsbCB3YWl0ICVkbXMgYmVmb3JlIHJlY29ubmVjdCBhdHRlbXB0JywgZGVsYXkpO1xuXG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBkZWJ1ZygnYXR0ZW1wdGluZyByZWNvbm5lY3QnKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2F0dGVtcHQnLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RpbmcnLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuXG4gICAgICAvLyBjaGVjayBhZ2FpbiBmb3IgdGhlIGNhc2Ugc29ja2V0IGNsb3NlZCBpbiBhYm92ZSBldmVudHNcbiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjtcblxuICAgICAgc2VsZi5vcGVuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3QgYXR0ZW1wdCBlcnJvcicpO1xuICAgICAgICAgIHNlbGYucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3QoKTtcbiAgICAgICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9lcnJvcicsIGVyci5kYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IHN1Y2Nlc3MnKTtcbiAgICAgICAgICBzZWxmLm9ucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGRlbGF5KTtcblxuICAgIHRoaXMuc3Vicy5wdXNoKHtcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGF0dGVtcHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnVwZGF0ZVNvY2tldElkcygpO1xuICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdCcsIGF0dGVtcHQpO1xufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTtcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xudmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZztcbmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuXG4vKipcbiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLlxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9sbGluZyAob3B0cykge1xuICB2YXIgeGhyO1xuICB2YXIgeGQgPSBmYWxzZTtcbiAgdmFyIHhzID0gZmFsc2U7XG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUG9sbGluZztcblxuLyoqXG4gKiBJcyBYSFIyIHN1cHBvcnRlZD9cbiAqL1xuXG52YXIgaGFzWEhSMiA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xuICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KHsgeGRvbWFpbjogZmFsc2UgfSk7XG4gIHJldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG59KSgpO1xuXG4vKipcbiAqIFBvbGxpbmcgaW50ZXJmYWNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBQb2xsaW5nIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoIWhhc1hIUjIgfHwgZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChQb2xsaW5nLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm5hbWUgPSAncG9sbGluZyc7XG5cbi8qKlxuICogT3BlbnMgdGhlIHNvY2tldCAodHJpZ2dlcnMgcG9sbGluZykuIFdlIHdyaXRlIGEgUElORyBtZXNzYWdlIHRvIGRldGVybWluZVxuICogd2hlbiB0aGUgdHJhbnNwb3J0IGlzIG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnBvbGwoKTtcbn07XG5cbi8qKlxuICogUGF1c2VzIHBvbGxpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdXBvbiBidWZmZXJzIGFyZSBmbHVzaGVkIGFuZCB0cmFuc3BvcnQgaXMgcGF1c2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChvblBhdXNlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnJlYWR5U3RhdGUgPSAncGF1c2luZyc7XG5cbiAgZnVuY3Rpb24gcGF1c2UgKCkge1xuICAgIGRlYnVnKCdwYXVzZWQnKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAncGF1c2VkJztcbiAgICBvblBhdXNlKCk7XG4gIH1cblxuICBpZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgdmFyIHRvdGFsID0gMDtcblxuICAgIGlmICh0aGlzLnBvbGxpbmcpIHtcbiAgICAgIGRlYnVnKCd3ZSBhcmUgY3VycmVudGx5IHBvbGxpbmcgLSB3YWl0aW5nIHRvIHBhdXNlJyk7XG4gICAgICB0b3RhbCsrO1xuICAgICAgdGhpcy5vbmNlKCdwb2xsQ29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZScpO1xuICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIGRlYnVnKCd3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlJyk7XG4gICAgICB0b3RhbCsrO1xuICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwYXVzZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBwb2xsaW5nIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3BvbGxpbmcnKTtcbiAgdGhpcy5wb2xsaW5nID0gdHJ1ZTtcbiAgdGhpcy5kb1BvbGwoKTtcbiAgdGhpcy5lbWl0KCdwb2xsJyk7XG59O1xuXG4vKipcbiAqIE92ZXJsb2FkcyBvbkRhdGEgdG8gZGV0ZWN0IHBheWxvYWRzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgZGVidWcoJ3BvbGxpbmcgZ290IGRhdGEgJXMnLCBkYXRhKTtcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKHBhY2tldCwgaW5kZXgsIHRvdGFsKSB7XG4gICAgLy8gaWYgaXRzIHRoZSBmaXJzdCBtZXNzYWdlIHdlIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgb3BlblxuICAgIGlmICgnb3BlbmluZycgPT09IHNlbGYucmVhZHlTdGF0ZSkge1xuICAgICAgc2VsZi5vbk9wZW4oKTtcbiAgICB9XG5cbiAgICAvLyBpZiBpdHMgYSBjbG9zZSBwYWNrZXQsIHdlIGNsb3NlIHRoZSBvbmdvaW5nIHJlcXVlc3RzXG4gICAgaWYgKCdjbG9zZScgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9O1xuXG4gIC8vIGRlY29kZSBwYXlsb2FkXG4gIHBhcnNlci5kZWNvZGVQYXlsb2FkKGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcblxuICAvLyBpZiBhbiBldmVudCBkaWQgbm90IHRyaWdnZXIgY2xvc2luZ1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwb2xsQ29tcGxldGUnKTtcblxuICAgIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5wb2xsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdpZ25vcmluZyBwb2xsIC0gdHJhbnNwb3J0IHN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgY2xvc2UgcGFja2V0Jyk7XG4gICAgc2VsZi53cml0ZShbeyB0eXBlOiAnY2xvc2UnIH1dKTtcbiAgfVxuXG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCd0cmFuc3BvcnQgb3BlbiAtIGNsb3NpbmcnKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGluIGNhc2Ugd2UncmUgdHJ5aW5nIHRvIGNsb3NlIHdoaWxlXG4gICAgLy8gaGFuZHNoYWtpbmcgaXMgaW4gcHJvZ3Jlc3MgKEdILTE2NClcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG5vdCBvcGVuIC0gZGVmZXJyaW5nIGNsb3NlJyk7XG4gICAgdGhpcy5vbmNlKCdvcGVuJywgY2xvc2UpO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHBhY2tldHMgcGF5bG9hZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIHBhY2tldHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWluIGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB2YXIgY2FsbGJhY2tmbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gIH07XG5cbiAgcGFyc2VyLmVuY29kZVBheWxvYWQocGFja2V0cywgdGhpcy5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLmRvV3JpdGUoZGF0YSwgY2FsbGJhY2tmbik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ2h0dHBzJyA6ICdodHRwJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBjYWNoZSBidXN0aW5nIGlzIGZvcmNlZFxuICBpZiAoZmFsc2UgIT09IHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgIXF1ZXJ5LnNpZCkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ2h0dHBzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICgnaHR0cCcgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuIiwiLyogZ2xvYmFsIEJsb2IgRmlsZSAqL1xuXG4vKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gaGFzQmluYXJ5O1xuXG4vKipcbiAqIENoZWNrcyBmb3IgYmluYXJ5IGRhdGEuXG4gKlxuICogU3VwcG9ydHMgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQmxvYiBhbmQgRmlsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW55dGhpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzQmluYXJ5IChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBCdWZmZXIuaXNCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHxcbiAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSlcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2hhcy1iaW5hcnkvcHVsbC80XG4gIGlmIChvYmoudG9KU09OICYmIHR5cGVvZiBvYmoudG9KU09OID09PSAnZnVuY3Rpb24nICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIlxudmFyIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXtcbiAgaWYgKGluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTsiLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHRvQXJyYXkgPSByZXF1aXJlKCd0by1hcnJheScpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDpzb2NrZXQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIEludGVybmFsIGV2ZW50cyAoYmxhY2tsaXN0ZWQpLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGV2ZW50cyA9IHtcbiAgY29ubmVjdDogMSxcbiAgY29ubmVjdF9lcnJvcjogMSxcbiAgY29ubmVjdF90aW1lb3V0OiAxLFxuICBjb25uZWN0aW5nOiAxLFxuICBkaXNjb25uZWN0OiAxLFxuICBlcnJvcjogMSxcbiAgcmVjb25uZWN0OiAxLFxuICByZWNvbm5lY3RfYXR0ZW1wdDogMSxcbiAgcmVjb25uZWN0X2ZhaWxlZDogMSxcbiAgcmVjb25uZWN0X2Vycm9yOiAxLFxuICByZWNvbm5lY3Rpbmc6IDEsXG4gIHBpbmc6IDEsXG4gIHBvbmc6IDFcbn07XG5cbi8qKlxuICogU2hvcnRjdXQgdG8gYEVtaXR0ZXIjZW1pdGAuXG4gKi9cblxudmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O1xuXG4vKipcbiAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0IChpbywgbnNwLCBvcHRzKSB7XG4gIHRoaXMuaW8gPSBpbztcbiAgdGhpcy5uc3AgPSBuc3A7XG4gIHRoaXMuanNvbiA9IHRoaXM7IC8vIGNvbXBhdFxuICB0aGlzLmlkcyA9IDA7XG4gIHRoaXMuYWNrcyA9IHt9O1xuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5mbGFncyA9IHt9O1xuICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIH1cbiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3VicykgcmV0dXJuO1xuXG4gIHZhciBpbyA9IHRoaXMuaW87XG4gIHRoaXMuc3VicyA9IFtcbiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksXG4gICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSxcbiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKVxuICBdO1xufTtcblxuLyoqXG4gKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUub3BlbiA9XG5Tb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy5zdWJFdmVudHMoKTtcbiAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gIGlmICgnb3BlbicgPT09IHRoaXMuaW8ucmVhZHlTdGF0ZSkgdGhpcy5vbm9wZW4oKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0aW5nJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgYXJncy51bnNoaWZ0KCdtZXNzYWdlJyk7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGBlbWl0YC5cbiAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2KSB7XG4gIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogKHRoaXMuZmxhZ3MuYmluYXJ5ICE9PSB1bmRlZmluZWQgPyB0aGlzLmZsYWdzLmJpbmFyeSA6IGhhc0JpbihhcmdzKSkgPyBwYXJzZXIuQklOQVJZX0VWRU5UIDogcGFyc2VyLkVWRU5ULFxuICAgIGRhdGE6IGFyZ3NcbiAgfTtcblxuICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8IGZhbHNlICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzO1xuXG4gIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgIGRlYnVnKCdlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQnLCB0aGlzLmlkcyk7XG4gICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxuXG4gIHRoaXMuZmxhZ3MgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgdGhpcy5pby5wYWNrZXQocGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3RyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZycpO1xuXG4gIC8vIHdyaXRlIGNvbm5lY3QgcGFja2V0IGlmIG5lY2Vzc2FyeVxuICBpZiAoJy8nICE9PSB0aGlzLm5zcCkge1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnkgPSB0eXBlb2YgdGhpcy5xdWVyeSA9PT0gJ29iamVjdCcgPyBwYXJzZXFzLmVuY29kZSh0aGlzLnF1ZXJ5KSA6IHRoaXMucXVlcnk7XG4gICAgICBkZWJ1Zygnc2VuZGluZyBjb25uZWN0IHBhY2tldCB3aXRoIHF1ZXJ5ICVzJywgcXVlcnkpO1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNULCBxdWVyeTogcXVlcnl9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWNrZXQoe3R5cGU6IHBhcnNlci5DT05ORUNUfSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlICglcyknLCByZWFzb24pO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIGRlbGV0ZSB0aGlzLmlkO1xuICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gIHZhciByb290TmFtZXNwYWNlRXJyb3IgPSBwYWNrZXQudHlwZSA9PT0gcGFyc2VyLkVSUk9SICYmIHBhY2tldC5uc3AgPT09ICcvJztcblxuICBpZiAoIXNhbWVOYW1lc3BhY2UgJiYgIXJvb3ROYW1lc3BhY2VFcnJvcikgcmV0dXJuO1xuXG4gIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICBjYXNlIHBhcnNlci5DT05ORUNUOlxuICAgICAgdGhpcy5vbmNvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0VWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkFDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQklOQVJZX0FDSzpcbiAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRElTQ09OTkVDVDpcbiAgICAgIHRoaXMub25kaXNjb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVSUk9SOlxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHBhY2tldC5kYXRhKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFyZ3MgPSBwYWNrZXQuZGF0YSB8fCBbXTtcbiAgZGVidWcoJ2VtaXR0aW5nIGV2ZW50ICVqJywgYXJncyk7XG5cbiAgaWYgKG51bGwgIT0gcGFja2V0LmlkKSB7XG4gICAgZGVidWcoJ2F0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnQnKTtcbiAgICBhcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSk7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb2R1Y2VzIGFuIGFjayBjYWxsYmFjayB0byBlbWl0IHdpdGggYW4gZXZlbnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5hY2sgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2VudCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgIGlmIChzZW50KSByZXR1cm47XG4gICAgc2VudCA9IHRydWU7XG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgZGVidWcoJ3NlbmRpbmcgYWNrICVqJywgYXJncyk7XG5cbiAgICBzZWxmLnBhY2tldCh7XG4gICAgICB0eXBlOiBoYXNCaW4oYXJncykgPyBwYXJzZXIuQklOQVJZX0FDSyA6IHBhcnNlci5BQ0ssXG4gICAgICBpZDogaWQsXG4gICAgICBkYXRhOiBhcmdzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25hY2sgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhY2spIHtcbiAgICBkZWJ1ZygnY2FsbGluZyBhY2sgJXMgd2l0aCAlaicsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICB9IGVsc2Uge1xuICAgIGRlYnVnKCdiYWQgYWNrICVzJywgcGFja2V0LmlkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbn07XG5cbi8qKlxuICogRW1pdCBidWZmZXJlZCBldmVudHMgKHJlY2VpdmVkIGFuZCBlbWl0dGVkKS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXRCdWZmZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnJlY2VpdmVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIHRoaXMucmVjZWl2ZUJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gIH1cbiAgdGhpcy5zZW5kQnVmZmVyID0gW107XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnc2VydmVyIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgdGhpcy5kZXN0cm95KCk7XG4gIHRoaXMub25jbG9zZSgnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gKiB0aGF0IHJlY29ubmVjdGlvbnMgZG9uJ3QgZ2V0IHRyaWdnZXJlZCBmb3IgdGhpcy5cbiAqXG4gKiBAYXBpIHByaXZhdGUuXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSB7XG4gICAgLy8gY2xlYW4gc3Vic2NyaXB0aW9ucyB0byBhdm9pZCByZWNvbm5lY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc3Vic1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuc3VicyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmlvLmRlc3Ryb3kodGhpcyk7XG59O1xuXG4vKipcbiAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgbWFudWFsbHkuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY2xvc2UgPVxuU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICBkZWJ1ZygncGVyZm9ybWluZyBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuRElTQ09OTkVDVCB9KTtcbiAgfVxuXG4gIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gIHRoaXMuZGVzdHJveSgpO1xuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgdGhpcy5vbmNsb3NlKCdpbyBjbGllbnQgZGlzY29ubmVjdCcpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb21wcmVzcyBmbGFnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaWYgYHRydWVgLCBjb21wcmVzc2VzIHRoZSBzZW5kaW5nIGRhdGFcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKGNvbXByZXNzKSB7XG4gIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGJpbmFyeSBmbGFnXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRoZSBlbWl0dGVkIGRhdGEgY29udGFpbnMgYmluYXJ5XG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5iaW5hcnkgPSBmdW5jdGlvbiAoYmluYXJ5KSB7XG4gIHRoaXMuZmxhZ3MuYmluYXJ5ID0gYmluYXJ5O1xuICByZXR1cm4gdGhpcztcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBvbjtcblxuLyoqXG4gKiBIZWxwZXIgZm9yIHN1YnNjcmlwdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8RXZlbnRFbWl0dGVyfSBvYmogd2l0aCBgRW1pdHRlcmAgbWl4aW4gb3IgYEV2ZW50RW1pdHRlcmBcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBvbiAob2JqLCBldiwgZm4pIHtcbiAgb2JqLm9uKGV2LCBmbik7XG4gIHJldHVybiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgb2JqLnJlbW92ZUxpc3RlbmVyKGV2LCBmbik7XG4gICAgfVxuICB9O1xufVxuIiwiLyoqXG4gKiBTbGljZSByZWZlcmVuY2UuXG4gKi9cblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG5cbi8qKlxuICogQmluZCBgb2JqYCB0byBgZm5gLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBmbiBvciBzdHJpbmdcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgZm4pe1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGZuKSBmbiA9IG9ialtmbl07XG4gIGlmICgnZnVuY3Rpb24nICE9IHR5cGVvZiBmbikgdGhyb3cgbmV3IEVycm9yKCdiaW5kKCkgcmVxdWlyZXMgYSBmdW5jdGlvbicpO1xuICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG9iaiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIH1cbn07XG4iLCJpbXBvcnQgZGVmaW5lIGZyb20gXCJjb21tb24vZGVmaW5lXCI7XG5pbXBvcnQgY29uZiBmcm9tIFwiY29tbW9uL2NvbmZcIjtcblxuY29uc3QgeyBTVUJfRE9NQUlOUywgREVWRUxPUE1FTlQgfSA9IGRlZmluZTtcbmNvbnN0IHsgZG9tYWluIH0gPSBjb25mO1xuY29uc3QgZXhpc3RMb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJvYmplY3RcIiA/IHRydWUgOiBmYWxzZTtcbmNvbmYubWVkaWFTZWNvbmRJbnRlcnZhbCA9IDIwMDtcbmNvbmYuc2NyZWVuTW9kZSA9IHtcbiAgc21hbGw6IDYwMCxcbiAgbWlkZGxlOiA5NjBcbn07XG5jb25mLnByb3Rjb2wgPSBleGlzdExvY2F0aW9uID8gKGxvY2F0aW9uLmhyZWYuaW5kZXhPZihcImh0dHBzXCIpID09PSAwID8gXCJodHRwc1wiIDogXCJodHRwXCIpIDogXCJcIjtcbmNvbmYuc2VydmVyID0gZG9tYWluO1xuY29uZi5wb3J0YWxQYXRoID1cbiAgY29uZi5lbnYgPT09IERFVkVMT1BNRU5UID8gYC8vJHtTVUJfRE9NQUlOUy5QT1JUQUx9LiR7ZG9tYWlufS9gIDogYC8vJHtTVUJfRE9NQUlOUy5QT1JUQUx9LiR7ZG9tYWlufS9gO1xuY29uZi5jbGllbnRQYXRoID0gYC8vJHtTVUJfRE9NQUlOUy5DTElFTlR9LiR7ZG9tYWlufS9gO1xuY29uZi5hc3NldHNQYXRoID0gYC8vJHtTVUJfRE9NQUlOUy5BU1NFVFN9LiR7ZG9tYWlufS9gO1xuY29uZi5zZXNzaW9uUGF0aCA9IGAvLyR7U1VCX0RPTUFJTlMuU0VTU0lPTn0uJHtkb21haW59L2A7XG5jb25mLmNhY2hlS2V5ID0geyBpbmRleDogXCJ0YWxrbkluZGV4TGlzdFwiLCBzZXR0aW5nOiBcInRhbGtuU2V0dGluZ1BhcmFtc1wiIH07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmY7XG4iLCJpbXBvcnQgZGVmaW5lIGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IG9zIGZyb20gXCJvc1wiO1xuaW1wb3J0IHByb2Nlc3MgZnJvbSBcInByb2Nlc3NcIjtcblxuY29uc3Qge1xuICBQUk9EVUNUSU9OLFxuICBERVZFTE9QTUVOVCxcbiAgUFJPRFVDVElPTl9JUCxcbiAgTE9DQUxIT1NULFxuICBQUk9EVUNUSU9OX0RPTUFJTixcbiAgREVWRUxPUE1FTlRfRE9NQUlOLFxuICBTVUJfRE9NQUlOUyxcbiAgUE9SVFNcbn0gPSBkZWZpbmU7XG5jb25zdCBhcGlWZXIgPSAxO1xuY29uc3QgaG9zdE5hbWUgPSBvcy5ob3N0bmFtZSgpO1xuY29uc3QgZW52ID0gZ2V0RW52KGhvc3ROYW1lKTtcbmNvbnN0IGlzRGV2ID0gZW52ID09PSBERVZFTE9QTUVOVDtcbmNvbnN0IGRvbWFpbiA9IGVudiA9PT0gUFJPRFVDVElPTiA/IFBST0RVQ1RJT05fRE9NQUlOIDogREVWRUxPUE1FTlRfRE9NQUlOO1xuY29uc3Qgd3d3VVJMID0gYCR7U1VCX0RPTUFJTlMuV1dXfS4ke2RvbWFpbn1gO1xuY29uc3QgYXBpVVJMID0gYCR7U1VCX0RPTUFJTlMuQVBJfS4ke2RvbWFpbn1gO1xuY29uc3QgYXBpQWNjZXNzVVJMID0gaXNEZXYgPyBgJHtMT0NBTEhPU1R9OiR7UE9SVFMuREVWRUxPUE1FTlRfQVBJfS90YWxrbi5hcGkuanNgIDogYCR7YXBpVVJMfS92JHthcGlWZXJ9YDtcbmNvbnN0IGNsaWVudFVSTCA9IGlzRGV2ID8gYCR7TE9DQUxIT1NUfToke1BPUlRTLkRFVkVMT1BNRU5UfS90YWxrbi5jbGllbnQuanNgIDogYCR7U1VCX0RPTUFJTlMuQ0xJRU5UfS4ke2RvbWFpbn1gO1xuY29uc3QgZGVzY1VSTCA9IGAke1NVQl9ET01BSU5TLkRFU0N9LiR7ZG9tYWlufWA7XG5jb25zdCBwb3J0YWxVUkwgPSBgJHtTVUJfRE9NQUlOUy5QT1JUQUx9LiR7ZG9tYWlufWA7XG5jb25zdCBhc3NldHNVUkwgPSBgJHtTVUJfRE9NQUlOUy5BU1NFVFN9LiR7ZG9tYWlufWA7XG5jb25zdCBhdXRvVVJMID0gYCR7U1VCX0RPTUFJTlMuQVVUT30uJHtkb21haW59YDtcbmNvbnN0IGV4dFVSTCA9IGAke1NVQl9ET01BSU5TLkVYVH0uJHtkb21haW59YDtcbmNvbnN0IHRyYW5zYWN0aW9uVVJMID0gYCR7U1VCX0RPTUFJTlMuVFJBTlNBQ1RJT059LiR7ZG9tYWlufWA7XG5jb25zdCBhc3NldHNJbWdQYXRoID0gYCR7YXNzZXRzVVJMfS9pbWcvYDtcbmNvbnN0IGFzc2V0c0ljb25QYXRoID0gYCR7YXNzZXRzVVJMfS9pY29uL2A7XG5jb25zdCBhc3NldHNKc1BhdGggPSBgJHthc3NldHNVUkx9L2pzL2A7XG5jb25zdCBzZXNzaW9uVVJMID0gYCR7U1VCX0RPTUFJTlMuU0VTU0lPTn0uJHtkb21haW59YDtcbmNvbnN0IGRlc2NyaXB0aW9uID0gXCJ0YWxrbiBjYW4gc2hhcmUgY29tbWVudHMgd2l0aCB1c2VycyB3YXRjaGluZyB0aGUgc2FtZSBXRUIgcGFnZS4gUGxlYXNlIGVuam95IHRoZSB3b3JsZCBvZiB0YWxrbi5cIjtcblxuY29uc3QgZmluZE9uZVBvc3RDbnQgPSAzMDtcbmNvbnN0IGZpbmRPbmVMaW1pdENudCA9IDMwMDtcbmNvbnN0IG9ncEltYWdlcyA9IHtcbiAgSHRtbDogYC8vJHthc3NldHNJbWdQYXRofXRhbGtuX2xvZ29faHRtbC5wbmdgLFxuICBNdXNpYzogYC8vJHthc3NldHNJbWdQYXRofXRhbGtuX2xvZ29fbXVzaWMucG5nYCxcbiAgVmlkZW86IGAvLyR7YXNzZXRzSW1nUGF0aH10YWxrbl9sb2dvX3ZpZGVvLnBuZ2Bcbn07XG5cbmNvbnN0IGNvbmY6IGFueSA9IHtcbiAgZG9tYWluLFxuICBlbnYsXG4gIGhvc3ROYW1lLFxuICBhcGlVUkwsXG4gIGFwaUFjY2Vzc1VSTCxcbiAgd3d3VVJMLFxuICBkZXNjVVJMLFxuICBwb3J0YWxVUkwsXG4gIGNsaWVudFVSTCxcbiAgYXNzZXRzVVJMLFxuICBhdXRvVVJMLFxuICBleHRVUkwsXG4gIHRyYW5zYWN0aW9uVVJMLFxuICBhc3NldHNJbWdQYXRoLFxuICBhc3NldHNJY29uUGF0aCxcbiAgYXNzZXRzSnNQYXRoLFxuICBzZXNzaW9uVVJMLFxuICBkZXNjcmlwdGlvbixcbiAgYXBpVmVyLFxuICBmaW5kT25lUG9zdENudCxcbiAgZmluZE9uZUxpbWl0Q250LFxuICBvZ3BJbWFnZXNcbn07XG5leHBvcnQgZGVmYXVsdCB7IC4uLmNvbmYgfTtcblxuZnVuY3Rpb24gZ2V0RW52KGhvc3ROYW1lKSB7XG4gIGlmIChob3N0TmFtZSA9PT0gZGVmaW5lLlBST0RVQ1RJT05fSVAgfHwgaG9zdE5hbWUuaW5kZXhPZihkZWZpbmUuUFJPRFVDVElPTl9ET01BSU4pID49IDApIHtcbiAgICByZXR1cm4gZGVmaW5lLlBST0RVQ1RJT047XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MudGl0bGUgPT09IFwiYnJvd3NlclwiKSB7XG4gICAgICBjb25zdCBwb3J0ID0gTnVtYmVyKGxvY2F0aW9uLnBvcnQpO1xuICAgICAgaWYgKHBvcnQgPT09IGRlZmluZS5QT1JUUy5ERVZFTE9QTUVOVCB8fCBwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlRfQVBJKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUuREVWRUxPUE1FTlQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWZpbmUuTE9DQUxIT1NUO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0IGV4dGVuZHMgU2NoZW1hIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0RmluZElkKCkge1xuICAgIHJldHVybiBcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHt9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuaW1wb3J0IFBvc3QgZnJvbSBcImFwaS9zdG9yZS9Qb3N0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXIgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPZmZzZXRGaW5kSWQoKSB7XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHVpZCA9IHBhcmFtcyAmJiBwYXJhbXMudWlkID8gcGFyYW1zLnVpZCA6IFwiXCI7XG4gICAgY29uc3QgdXR5cGUgPSBwYXJhbXMgJiYgcGFyYW1zLnV0eXBlID8gcGFyYW1zLnV0eXBlIDogXCJcIjtcblxuICAgIC8vIOWJiumZpOS6iOWumlxuICAgIGNvbnN0IHR1bmVkID0gcGFyYW1zICYmIHBhcmFtcy50dW5lZCA/IHBhcmFtcy50dW5lZCA6IFwiXCI7XG4gICAgY29uc3QgbXVsdGlzdHJlYW1lZCA9IHBhcmFtcyAmJiBwYXJhbXMubXVsdGlzdHJlYW1lZCA/IHBhcmFtcy5tdWx0aXN0cmVhbWVkIDogZmFsc2U7XG4gICAgY29uc3QgYWN0aW9uZWQgPSBwYXJhbXMgJiYgcGFyYW1zLmFjdGlvbmVkID8gcGFyYW1zLmFjdGlvbmVkIDogXCJcIjtcbiAgICBjb25zdCBvZmZzZXRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0U2luZ2xlRmluZElkID1cbiAgICAgIHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0U2luZ2xlRmluZElkID8gcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRNdWx0aUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0Q2hpbGRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldENoaWxkRmluZElkID8gcGFyYW1zLm9mZnNldENoaWxkRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldExvZ3NGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TG9nc0ZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIGNvbnN0IHJlcXVlc3RMb2dpblR5cGUgPSBwYXJhbXMucmVxdWVzdExvZ2luVHlwZSA/IHBhcmFtcy5yZXF1ZXN0TG9naW5UeXBlIDogXCJcIjtcbiAgICBjb25zdCBmcmllbmRzID0gW107XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHtcbiAgICAgIHVpZCxcbiAgICAgIHV0eXBlLFxuICAgICAgdHVuZWQsXG4gICAgICBtdWx0aXN0cmVhbWVkLFxuICAgICAgYWN0aW9uZWQsXG4gICAgICBvZmZzZXRGaW5kSWQsXG4gICAgICBvZmZzZXRTaW5nbGVGaW5kSWQsXG4gICAgICBvZmZzZXRNdWx0aUZpbmRJZCxcbiAgICAgIG9mZnNldENoaWxkRmluZElkLFxuICAgICAgb2Zmc2V0TG9nc0ZpbmRJZCxcbiAgICAgIGZyaWVuZHNcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRPZmZzZXRGaW5kSWQoeyBwb3N0cyB9KSB7XG4gICAgaWYgKHBvc3RzICYmIHBvc3RzWzBdICYmIHBvc3RzWzBdLl9pZCkge1xuICAgICAgcmV0dXJuIHBvc3RzWzBdLl9pZDtcbiAgICB9XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRIcmVmKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5ocmVmKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmhyZWY7XG4gICAgfVxuICAgIHJldHVybiBcIi9cIjtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFNpbmdsZSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmFseXplIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3Qgd2F0Y2hDbnQgPSAwO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7IHdhdGNoQ250IH0pO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3RPcHRpb24gZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3Rvcihib290T3B0aW9uOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHsgLi4uYm9vdE9wdGlvbiB9KTtcbiAgfVxuXG4gIHN0YXRpYyByZWJ1aWxkQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgbGV0IHJlYnVpbGRBdHRyaWJ1dGVzT2JqOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgcmVidWlsZEF0dHJpYnV0ZXNPYmpbYXR0cmlidXRlc1tpXS5uYW1lXSA9IGF0dHJpYnV0ZXNbaV0udmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlYnVpbGRBdHRyaWJ1dGVzT2JqO1xuICB9XG59XG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IFNjaGVtYSBmcm9tIFwiYXBpL3N0b3JlL1NjaGVtYVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlYWRzIGV4dGVuZHMgU2NoZW1hIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUocGFyYW1zKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZXJnZWRUaHJlYWRzKGJhc2VUaHJlYWRzLCBtZXJnZVRocmVhZCkge1xuICAgIGJhc2VUaHJlYWRzW21lcmdlVGhyZWFkLmNoXSA9IHsgLi4ubWVyZ2VUaHJlYWQgfTtcbiAgICByZXR1cm4gYmFzZVRocmVhZHM7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgaW8gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcbmltcG9ydCBjb25mIGZyb20gXCJjbGllbnQvY29uZlwiO1xuaW1wb3J0IGRlZmluZSBmcm9tIFwiY29tbW9uL2RlZmluZVwiO1xuaW1wb3J0IFBvc3RNZXNzYWdlIGZyb20gXCJjb21tb24vUG9zdE1lc3NhZ2VcIjtcbmltcG9ydCBBcGlTdGF0ZSBmcm9tIFwiYXBpL3N0b3JlL1wiO1xuaW1wb3J0IFNlcXVlbmNlIGZyb20gXCJhcGkvU2VxdWVuY2VcIjtcbmltcG9ydCBQdWJsaWNBcGkgZnJvbSBcImFwaS9wdWJsaWMuYXBpXCI7XG5pbXBvcnQgYXBpU3RvcmUgZnJvbSBcImFwaS9zdG9yZS9hcGlTdG9yZVwiO1xuaW1wb3J0IGhhbmRsZUFjdGlvbnMgZnJvbSBcImNsaWVudC9hY3Rpb25zL2hhbmRsZXNcIjtcbmltcG9ydCBXc1NlcnZlclRvQXBpRW1pdEFjdGlvbiBmcm9tIFwiYXBpL2FjdGlvbnMvd3Mvc2VydmVyVG9BcGlFbWl0XCI7XG5pbXBvcnQgV3NDbGllbnRUb0FwaVJlcXVlc3RBY3Rpb25zIGZyb20gXCJhcGkvYWN0aW9ucy93cy9hcGlUb1NlcnZlclJlcXVlc3RcIjtcbmltcG9ydCBXc1NlcnZlclRvQXBpQnJvYWRjYXN0QWN0aW9uIGZyb20gXCJhcGkvYWN0aW9ucy93cy9zZXJ2ZXJUb0FwaUJyYWRjYXN0XCI7XG5pbXBvcnQgVGhyZWFkIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkXCI7XG5pbXBvcnQgQ2xpZW50VXRpbCBmcm9tIFwiY2xpZW50L2NvbnRhaW5lci91dGlsL2NsaWVudFV0aWxcIjtcbmltcG9ydCBQb3N0c1RpbWVsaW5lIGZyb20gXCIuL3N0b3JlL1Bvc3RzVGltZWxpbmVcIjtcbmltcG9ydCBQb3N0c1RpbWVsaW5lU3RvY2sgZnJvbSBcIi4vc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrXCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgJHQ6IGFueTtcbiAgICB0YWxrbkFQSTogYW55O1xuICAgIHRhbGtuV2luZG93OiBhbnk7XG4gICAgdGFsa25NZWRpYTogYW55O1xuICAgIFlvdXR1YmU6IGFueTtcbiAgICBfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX186IGFueTtcbiAgfVxufVxuXG5jbGFzcyBCb290T3B0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgeyBlbnYsIGFwaVNjcmlwdCB9ID0gQm9vdE9wdGlvbi5nZXRFbnZBbmRBcGlTY3JpcHQoKTtcbiAgICBjb25zdCBjbGllbnRTY3JpcHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjPScke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS8vJHtjb25mLmNsaWVudFVSTH0nXWApO1xuICAgIGNvbnN0IGV4dFNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtzcmM9JyR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke2NvbmYuZXh0VVJMfSddYCk7XG4gICAgY29uc3QgYXBpU2NyaXB0QXR0ID0gYXBpU2NyaXB0ID8gQm9vdE9wdGlvbi5yZWJ1aWxkQXR0cmlidXRlcyhhcGlTY3JpcHQuYXR0cmlidXRlcykgOiB7fTtcbiAgICBjb25zdCBleHRTY3JpcHRBdHQgPSBleHRTY3JpcHQgPyBCb290T3B0aW9uLnJlYnVpbGRBdHRyaWJ1dGVzKGV4dFNjcmlwdC5hdHRyaWJ1dGVzKSA6IHt9O1xuICAgIGNvbnN0IGJvb3RQYXJhbXMgPSB7IC4uLmV4dFNjcmlwdEF0dCwgLi4uYXBpU2NyaXB0QXR0IH07XG4gICAgY29uc3QgYm9vdE9wdGlvbjogYW55ID0gQm9vdE9wdGlvbi5pbml0aWFsQm9vdE9wdGlvbihib290UGFyYW1zLCBjbGllbnRTY3JpcHQsIGV4dFNjcmlwdCk7XG4gICAgYm9vdE9wdGlvbi5lbnYgPSBlbnY7XG4gICAgcmV0dXJuIGJvb3RPcHRpb247XG4gIH1cblxuICBzdGF0aWMgZ2V0RW52QW5kQXBpU2NyaXB0KCkge1xuICAgIGNvbnN0IHsgU1VCX0RPTUFJTlMsIFBPUlRTIH0gPSBkZWZpbmU7XG5cbiAgICAvLyBQcm9kLlxuICAgIGNvbnN0IHByb2RBcGlTcmMgPSBgJHtTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTH0vLyR7U1VCX0RPTUFJTlMuQVBJfS4ke2RlZmluZS5QUk9EVUNUSU9OX0RPTUFJTn0vdiR7Y29uZi5hcGlWZXJ9YDtcbiAgICBjb25zdCBwcm9kQXBpU2NyaXB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz0nJHtwcm9kQXBpU3JjfSddYCk7XG4gICAgaWYgKHByb2RBcGlTY3JpcHQpIHJldHVybiB7IGVudjogZGVmaW5lLlBST0RVQ1RJT04sIGFwaVNjcmlwdDogcHJvZEFwaVNjcmlwdCB9O1xuXG4gICAgLy8gTG9jYWxob3N0LlxuICAgIGNvbnN0IGxvY2FsQXBpU3JjID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke1NVQl9ET01BSU5TLkFQSX0uJHtkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOfS92JHtjb25mLmFwaVZlcn1gO1xuICAgIGNvbnN0IGxvY2FsQXBpU2NyaXB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W3NyYz0nJHtsb2NhbEFwaVNyY30nXWApO1xuICAgIGlmIChsb2NhbEFwaVNjcmlwdCkgcmV0dXJuIHsgZW52OiBkZWZpbmUuTE9DQUxIT1NULCBhcGlTY3JpcHQ6IGxvY2FsQXBpU2NyaXB0IH07XG5cbiAgICAvLyBEZXZlbG9wbWVudCh3ZWJwYWNrIGRldiBzZXJ2ZXIpLFxuICAgIGNvbnN0IGRldkFwaVNyYyA9IGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS8vJHtkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOfToke1BPUlRTLkRFVkVMT1BNRU5UX0FQSX0vdGFsa24uYXBpLmpzYDtcbiAgICBjb25zdCBkZXZBcGlTY3JpcHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbc3JjPScke2RldkFwaVNyY30nXWApO1xuICAgIGlmIChkZXZBcGlTY3JpcHQpIHJldHVybiB7IGVudjogZGVmaW5lLkRFVkVMT1BNRU5ULCBhcGlTY3JpcHQ6IGRldkFwaVNjcmlwdCB9O1xuICB9XG5cbiAgc3RhdGljIHJlYnVpbGRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICBsZXQgcmVidWlsZEF0dHJpYnV0ZXNPYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKGkpID0+IHtcbiAgICAgIHJlYnVpbGRBdHRyaWJ1dGVzT2JqW2F0dHJpYnV0ZXNbaV0ubmFtZV0gPSBhdHRyaWJ1dGVzW2ldLnZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZWJ1aWxkQXR0cmlidXRlc09iajtcbiAgfVxuXG4gIHN0YXRpYyBpbml0aWFsQm9vdE9wdGlvbihib290T3B0aW9uLCBjbGllbnRTY3JpcHQsIGV4dFNjcmlwdCkge1xuICAgIGJvb3RPcHRpb24uY2ggPSBib290T3B0aW9uLmNoXG4gICAgICA/IGJvb3RPcHRpb24uY2hcbiAgICAgIDogbG9jYXRpb24uaHJlZlxuICAgICAgICAgIC5yZXBsYWNlKGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS8vJHtjb25mLmRvbWFpbn1gLCBcIlwiKVxuICAgICAgICAgIC5yZXBsYWNlKGA6JHtkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlR9YCwgXCJcIilcbiAgICAgICAgICAucmVwbGFjZShgOiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0FQSX1gLCBcIlwiKVxuICAgICAgICAgIC5yZXBsYWNlKGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS9gLCBcIlwiKVxuICAgICAgICAgIC5yZXBsYWNlKGAke1NlcXVlbmNlLkhUVFBfUFJPVE9DT0x9L2AsIFwiXCIpO1xuXG4gICAgaWYgKGNvbmYuZW52ID09PSBkZWZpbmUuREVWRUxPUE1FTlQpIHtcbiAgICAgIGJvb3RPcHRpb24uY2ggPSBib290T3B0aW9uLmNoLnJlcGxhY2UoYC8ke2RlZmluZS5MT0NBTEhPU1R9OiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UfWAsIFwiXCIpO1xuICAgIH1cbiAgICBib290T3B0aW9uLmhhc1NsYXNoID0gQm9vdE9wdGlvbi5nZXRIYXNTbGFjaChib290T3B0aW9uKTtcblxuICAgIGlmIChib290T3B0aW9uLmNoICE9PSBcIi9cIikge1xuICAgICAgaWYgKGJvb3RPcHRpb24uaGFzU2xhc2gpIHtcbiAgICAgICAgYm9vdE9wdGlvbi5jaCA9IGJvb3RPcHRpb24uY2g7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib290T3B0aW9uLmNoID0gYm9vdE9wdGlvbi5jaCArIFwiL1wiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGJvb3RPcHRpb24udHlwZSA9IGRlZmluZS5BUFBfVFlQRVMuQVBJO1xuICAgIGlmIChleHRTY3JpcHQpIHtcbiAgICAgIGJvb3RPcHRpb24udHlwZSA9IGRlZmluZS5BUFBfVFlQRVMuRVhURU5TSU9OO1xuICAgIH1cbiAgICBpZiAoY2xpZW50U2NyaXB0KSB7XG4gICAgICBib290T3B0aW9uLnR5cGUgPSBkZWZpbmUuQVBQX1RZUEVTLlBPUlRBTDtcbiAgICB9XG5cbiAgICBkZWxldGUgYm9vdE9wdGlvbi5zcmM7XG4gICAgZGVsZXRlIGJvb3RPcHRpb24uYXN5bmM7XG4gICAgcmV0dXJuIGJvb3RPcHRpb247XG4gIH1cblxuICBzdGF0aWMgZ2V0SGFzU2xhY2goeyBjaCB9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNoLmxhc3RJbmRleE9mKFwiL1wiKSA9PT0gY2gubGVuZ3RoIC0gMTtcbiAgfVxufVxuXG5jbGFzcyBDb3JlQVBJIHtcbiAgd3M6IGFueTtcbiAgYXBpU3RvcmU6IGFueTtcbiAgc3RhdGU6IGFueTtcbiAgY2g6IHN0cmluZztcbiAgY2FsbGJhY2tzOiB7IGtleTogRnVuY3Rpb24gfSB8IHt9ID0ge307XG4gIGNvbnN0cnVjdG9yKGVudiwgYXBpU3RvcmUsIHJlc29sdmUpIHtcbiAgICBjb25zdCB3c1NlcnZlciA9IGVudiA9PT0gZGVmaW5lLkRFVkVMT1BNRU5UID8gZGVmaW5lLkRFVkVMT1BNRU5UX0RPTUFJTiA6IGRlZmluZS5QUk9EVUNUSU9OX0RPTUFJTjtcbiAgICB0aGlzLmFwaVN0b3JlID0gYXBpU3RvcmU7XG4gICAgdGhpcy53cyA9IGlvKGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS8vJHt3c1NlcnZlcn06JHtkZWZpbmUuUE9SVFMuU09DS0VUX0lPfWAsIHsgZm9yY2VOZXc6IHRydWUgfSk7XG4gICAgdGhpcy5vblJlc3BvbnNlTWVBUEkocmVzb2x2ZSk7XG4gICAgdGhpcy5zZXRVcCA9IHRoaXMuc2V0VXAuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHNldFVwKHN0YXRlLCBjaCkge1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLmNoID0gY2g7XG5cbiAgICAvLyBDT01NVU5VQ0FUSU9OIEFQSeKAmXNcbiAgICB0aGlzLm9uUmVzcG9uc2VDaEFQSSgpO1xuICAgIHRoaXMub25SZXF1ZXN0QVBJKCk7XG4gIH1cblxuICBvblJlcXVlc3RBUEkoKSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IFdzQ2xpZW50VG9BcGlSZXF1ZXN0QWN0aW9ucztcbiAgICBjb25zdCBhY3Rpb25LZXlzID0gT2JqZWN0LmtleXMoYWN0aW9ucyk7XG4gICAgY29uc3QgYWN0aW9uTGVuZ3RoID0gYWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgY29uc3QgZ2V0Q29yZUFQSSA9IChhY3Rpb25OYW1lLCBiZWZvcmVGdW5jdGlvbikgPT4ge1xuICAgICAgcmV0dXJuIChyZXF1ZXN0UGFyYW1zLCBjYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZHV4U3RhdGUgPSB0aGlzLmFwaVN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IF9yZXF1ZXN0U3RhdGUgPSBTZXF1ZW5jZS5nZXRSZXF1ZXN0U3RhdGUoYWN0aW9uTmFtZSwgcmVkdXhTdGF0ZSwgcmVxdWVzdFBhcmFtcyk7XG4gICAgICAgIGNvbnN0IF9hY3Rpb25TdGF0ZSA9IFNlcXVlbmNlLmdldFJlcXVlc3RBY3Rpb25TdGF0ZShhY3Rpb25OYW1lLCByZXF1ZXN0UGFyYW1zKTtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlIH0gPSBiZWZvcmVGdW5jdGlvbihyZWR1eFN0YXRlLCBfcmVxdWVzdFN0YXRlLCBfYWN0aW9uU3RhdGUpO1xuXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzW3JlcXVlc3RTdGF0ZS50eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLndzLmVtaXQocmVxdWVzdFN0YXRlLnR5cGUsIHJlcXVlc3RTdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaVN0b3JlLmRpc3BhdGNoKGFjdGlvblN0YXRlKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIGZvciAobGV0IGFjdGlvbk5vZGVDbnQgPSAwOyBhY3Rpb25Ob2RlQ250IDwgYWN0aW9uTGVuZ3RoOyBhY3Rpb25Ob2RlQ250KyspIHtcbiAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBhY3Rpb25LZXlzW2FjdGlvbk5vZGVDbnRdO1xuICAgICAgY29uc3QgYWN0aW9uUGxhaW5OYW1lID0gYWN0aW9uTmFtZS5yZXBsYWNlKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCwgXCJcIik7XG4gICAgICBjb25zdCBiZWZvcmVGdW5jdGlvbiA9IGFjdGlvbnNbYWN0aW9uTmFtZV07XG4gICAgICB0aGlzW2FjdGlvblBsYWluTmFtZV0gPSBnZXRDb3JlQVBJKGFjdGlvbk5hbWUsIGJlZm9yZUZ1bmN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBvblJlc3BvbnNlTWVBUEkocmVzb2x2ZTogUHJvbWlzZTxib29sZWFuPiB8IG51bGwgPSBudWxsKSB7XG4gICAgY29uc3QgZ2V0VG9NZUFQSSA9IChhY3Rpb24sIHJlc29sdmUgPSBudWxsKSA9PiB7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIHJldHVybiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKHJlc29sdmUgJiYgcmVzcG9uc2UudHlwZSA9PT0gU2VxdWVuY2UuQ09OTkVDVElPTl9TRVJWRVJfS0VZKSB7XG4gICAgICAgICAgcmVzb2x2ZShzZWxmKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3Rpb25TdGF0ZSA9IGFjdGlvbihyZXNwb25zZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaVN0b3JlLmRpc3BhdGNoKGFjdGlvblN0YXRlKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjYWxsYmFjazogYW55ID0gZ2V0VG9NZUFQSShXc1NlcnZlclRvQXBpRW1pdEFjdGlvbiwgcmVzb2x2ZSk7XG4gICAgdGhpcy5vbihTZXF1ZW5jZS5DQVRDSF9NRV9LRVksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VDaEFQSShjaCA9IHRoaXMuY2gpIHtcbiAgICBjb25zdCBnZXRSZXNwb25zZUNoQVBJID0gKGFjdGlvbk1ldGhvZCkgPT4ge1xuICAgICAgcmV0dXJuIChyZXNwb25zZSkgPT4ge1xuICAgICAgICBjb25zdCBhY3Rpb25TdGF0ZSA9IGFjdGlvbk1ldGhvZChyZXNwb25zZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaVN0b3JlLmRpc3BhdGNoKGFjdGlvblN0YXRlKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICAvLyBUbyBjb25uZWN0IHJlZHV4IGZsb3cuXG4gICAgY29uc3QgY2FsbGJhY2s6IGFueSA9IGdldFJlc3BvbnNlQ2hBUEkoV3NTZXJ2ZXJUb0FwaUJyb2FkY2FzdEFjdGlvbik7XG4gICAgdGhpcy5vbihjaCwgY2FsbGJhY2spO1xuICB9XG5cbiAgb2ZmUmVzcG9uc2VDaEFQSShjaCA9IHRoaXMuY2gpIHtcbiAgICB0aGlzLm9mZihjaCk7XG4gIH1cblxuICBvbihvbktleSwgY2FsbGJhY2sgPSAoKSA9PiB7fSkge1xuICAgIGlmICghdGhpcy53cy5fY2FsbGJhY2tzW2AkJHtvbktleX1gXSkge1xuICAgICAgdGhpcy53cy5vbihvbktleSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIG9mZihvZmZLZXkpIHtcbiAgICBpZiAodGhpcy53cy5fY2FsbGJhY2tzW2AkJHtvZmZLZXl9YF0pIHtcbiAgICAgIHRoaXMud3Mub2ZmKG9mZktleSk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIEdsb2JhbFdpbmRvdyB7XG4gIGJvb3RJZDogYW55O1xuICBib290T3B0aW9uOiBhbnk7XG4gIGdsb2JhbEFwaTogYW55O1xuICBjb3JlQXBpOiBhbnk7XG4gIG9yaWdpbjogc3RyaW5nO1xuICBhcGlTdG9yZTogYW55O1xuICBtZWRpYTogTWVkaWE7XG4gIHN0YXRpYyBnZXRSZXF1ZXN0T2JqKG1ldGhvZCwgcGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IGhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuICAgIHJldHVybiB7XG4gICAgICB3aW5kb3dUeXBlOiB3aW5kb3cubmFtZSxcbiAgICAgIHR5cGU6IFBvc3RNZXNzYWdlLkFQSV9UT19DTElFTlRfVFlQRSxcbiAgICAgIGhyZWYsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgIH07XG4gIH1cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hcGlTdG9yZSA9IGFwaVN0b3JlKCk7XG4gICAgdGhpcy5ib290T3B0aW9uID0gbmV3IEJvb3RPcHRpb24oKTtcbiAgICB0aGlzLmV4ZUNvcmVBcGkgPSB0aGlzLmV4ZUNvcmVBcGkuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsaWVudFRvID0gdGhpcy5jbGllbnRUby5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3Vic2NyaWJlID0gdGhpcy5zdWJzY3JpYmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uV3NTZXJ2ZXIgPSB0aGlzLm9uV3NTZXJ2ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmV4ZUNhbGxiYWNrID0gdGhpcy5leGVDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWZ0ZXJNZWRpYUZpbHRlciA9IHRoaXMuYWZ0ZXJNZWRpYUZpbHRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYXBpU3RvcmUuc3Vic2NyaWJlKHRoaXMuc3Vic2NyaWJlKTtcblxuICAgIHRoaXMub25BY3Rpb25zKCk7XG5cbiAgICBjb25zdCBib290UHJvbWlzZXMgPSBbXTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGJvb3RQcm9taXNlcy5wdXNoKFxuICAgICAgbmV3IFByb21pc2UoKG9uTWVzc2FnZVJlc29sdmUpID0+IHtcbiAgICAgICAgd2luZG93Lm9ubWVzc2FnZSA9IChlKSA9PiB7XG4gICAgICAgICAgaWYgKG9uTWVzc2FnZVJlc29sdmUpIHtcbiAgICAgICAgICAgIHNlbGYub3JpZ2luID0gZS5vcmlnaW47XG4gICAgICAgICAgICBvbk1lc3NhZ2VSZXNvbHZlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoIChlLmRhdGEudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBQb3N0TWVzc2FnZS5DTElFTlRfVE9fQVBJX1RZUEU6XG4gICAgICAgICAgICAgIGlmIChlLmRhdGEubWV0aG9kID09PSBQb3N0TWVzc2FnZS5IQU5ETEVfQVBJX0FORF9DTElFTlQpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHNlbGYuYm9vdElkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmV4ZUNvcmVBcGkoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBvc3RNZXNzYWdlLkhBTkRMRV9FWFRfQU5EX0FQSTpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBvc3RNZXNzYWdlLkVYVF9UT19BUElfVFlQRTpcbiAgICAgICAgICAgICAgc2VsZi5leGVDb3JlQXBpKGUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBib290UHJvbWlzZXMucHVzaChcbiAgICAgIG5ldyBQcm9taXNlKChyZXNvdmUpID0+IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgIG5ldyBDb3JlQVBJKHRoaXMuYm9vdE9wdGlvbi5lbnYsIHNlbGYuYXBpU3RvcmUsIHJlc292ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93Lm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICAgICAgICBuZXcgQ29yZUFQSSh0aGlzLmJvb3RPcHRpb24uZW52LCBzZWxmLmFwaVN0b3JlLCByZXNvdmUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4odGhpcy5vbldzU2VydmVyKVxuICAgICk7XG5cbiAgICBQcm9taXNlLmFsbChib290UHJvbWlzZXMpLnRoZW4oKGJvb3RQYXJhbXM6IGFueSkgPT4ge1xuICAgICAgdGhpcy5ib290SWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50VG8oUG9zdE1lc3NhZ2UuSEFORExFX0FQSV9BTkRfQ0xJRU5ULCB0aGlzLmJvb3RPcHRpb24pO1xuICAgICAgfSwgMjAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4ZUNvcmVBcGkoZSkge1xuICAgIGlmICh0aGlzLmNvcmVBcGkgJiYgdGhpcy5jb3JlQXBpW2UuZGF0YS5tZXRob2RdKSB7XG4gICAgICBjb25zdCB7IG1ldGhvZCwgcGFyYW1zIH0gPSBlLmRhdGE7XG4gICAgICBjb25zdCBhcGlTdGF0ZSA9IHRoaXMuYXBpU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIHRoaXMuYmVmb3JlTWVkaWFGaWx0ZXIoeyBtZXRob2QsIHBhcmFtcywgYXBpU3RhdGUgfSk7XG4gICAgICB0aGlzLmNvcmVBcGlbbWV0aG9kXShwYXJhbXMpO1xuICAgIH1cbiAgfVxuXG4gIG9uV3NTZXJ2ZXIoY29yZUFwaTogYW55KSB7XG4gICAgdGhpcy5jb3JlQXBpID0gY29yZUFwaTtcbiAgICBjb25zdCBhcGlTdGF0ZSA9IG5ldyBBcGlTdGF0ZSh3aW5kb3csIHRoaXMuYm9vdE9wdGlvbik7XG4gICAgdGhpcy5jb3JlQXBpLnNldFVwKGFwaVN0YXRlLCB0aGlzLmJvb3RPcHRpb24uY2gpO1xuXG4gICAgaWYgKHRoaXMuYm9vdE9wdGlvbi50eXBlICE9PSBkZWZpbmUuQVBQX1RZUEVTLkFQSSkge1xuICAgICAgdGhpcy5jb3JlQXBpLnR1bmUoYXBpU3RhdGUpO1xuICAgIH1cblxuICAgIHdpbmRvdy4kdCA9IG5ldyBQdWJsaWNBcGkodGhpcy5jb3JlQXBpKTtcbiAgfVxuXG4gIG9uQWN0aW9ucygpIHtcbiAgICBjb25zdCBhY3Rpb25LZXlzID0gT2JqZWN0LmtleXMoaGFuZGxlQWN0aW9ucyk7XG4gICAgY29uc3QgYWN0aW9uTGVuZ3RoID0gYWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgY29uc3QgZ2V0QWN0aW9ucyA9IChhY3Rpb25OYW1lKSA9PiB7XG4gICAgICByZXR1cm4gKHBhcmFtczEsIHBhcmFtczIpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gaGFuZGxlQWN0aW9uc1thY3Rpb25OYW1lXShwYXJhbXMxKTtcbiAgICAgICAgY29uc3QgcmVkdXhTdGF0ZSA9IHRoaXMuYXBpU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBmb3IgKGxldCBhY3Rpb25Ob2RlQ250ID0gMDsgYWN0aW9uTm9kZUNudCA8IGFjdGlvbkxlbmd0aDsgYWN0aW9uTm9kZUNudCsrKSB7XG4gICAgICBjb25zdCBhY3Rpb25OYW1lID0gYWN0aW9uS2V5c1thY3Rpb25Ob2RlQ250XTtcbiAgICAgIHRoaXNbYWN0aW9uTmFtZV0gPSBnZXRBY3Rpb25zKGFjdGlvbk5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy5jb3JlQXBpKSB7XG4gICAgICBjb25zdCBhcGlTdGF0ZSA9IHRoaXMuYXBpU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIHRoaXMuYWZ0ZXJNZWRpYUZpbHRlcihhcGlTdGF0ZSk7XG4gICAgICB0aGlzLmV4ZUNhbGxiYWNrKGFwaVN0YXRlLmFwcC5hY3Rpb25lZCwgYXBpU3RhdGUpO1xuICAgICAgdGhpcy5jbGllbnRUbyhhcGlTdGF0ZS5hcHAuYWN0aW9uZWQsIGFwaVN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBleGVDYWxsYmFjayhtZXRob2QsIGFwaVN0YXRlKSB7XG4gICAgY29uc3QgeyBhY3Rpb25UeXBlLCBhY3Rpb25OYW1lIH0gPSBTZXF1ZW5jZS5nZXRTZXF1ZW5jZUFjdGlvbk1hcChtZXRob2QpO1xuICAgIGlmIChhY3Rpb25OYW1lICE9PSBTZXF1ZW5jZS5BUElfQlJPQURDQVNUX0NBTExCQUNLKSB7XG4gICAgICBpZiAoYWN0aW9uVHlwZSA9PT0gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCkge1xuICAgICAgICBpZiAodGhpcy5jb3JlQXBpLmNhbGxiYWNrc1thY3Rpb25OYW1lXSkge1xuICAgICAgICAgIGNvbnN0IHsgcG9zdHMsIHRocmVhZCwgdXNlciB9ID0gYXBpU3RhdGU7XG4gICAgICAgICAgdGhpcy5jb3JlQXBpLmNhbGxiYWNrc1thY3Rpb25OYW1lXShhcGlTdGF0ZSwgeyBwb3N0cywgdGhyZWFkLCB1aWQ6IHVzZXIudWlkIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvblR5cGUgPT09IFNlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVCkge1xuICAgICAgaWYgKHRoaXMuY29yZUFwaS5jYWxsYmFja3NbU2VxdWVuY2UuQVBJX0JST0FEQ0FTVF9DQUxMQkFDS10pIHtcbiAgICAgICAgY29uc3QgeyBwb3N0cywgdGhyZWFkLCB1c2VyIH0gPSBhcGlTdGF0ZTtcbiAgICAgICAgdGhpcy5jb3JlQXBpLmNhbGxiYWNrc1tTZXF1ZW5jZS5BUElfQlJPQURDQVNUX0NBTExCQUNLXShhY3Rpb25OYW1lLCB7IHBvc3RzLCB0aHJlYWQsIHVpZDogdXNlci51aWQgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYmVmb3JlTWVkaWFGaWx0ZXIoeyBtZXRob2QsIHBhcmFtcywgYXBpU3RhdGUgfSkge1xuICAgIGlmIChhcGlTdGF0ZS5hcHAuaXNNZWRpYUNoKSB7XG4gICAgICBpZiAobWV0aG9kID09PSBcInBvc3RcIikge1xuICAgICAgICAvLyDoh6rliIbjga5wb3N0c+OBruOBv01lZGlh44Gr5Y+N5pig44GZ44KLXG4gICAgICAgIHBhcmFtcy5hcHAuaW5wdXRDdXJyZW50VGltZSA9IHRoaXMubWVkaWEuY3VycmVudFRpbWUgPiAwID8gdGhpcy5tZWRpYS5jdXJyZW50VGltZSA6IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBhZnRlck1lZGlhRmlsdGVyKGFwaVN0YXRlKSB7XG4gICAgc3dpdGNoIChhcGlTdGF0ZS5hcHAuYWN0aW9uZWQpIHtcbiAgICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICAgICAgaWYgKGFwaVN0YXRlLmFwcC5pc01lZGlhQ2gpIHtcbiAgICAgICAgICAvLyDopovjgabjgYTjgotjaOOBjG1lZGlhQ2jjgafjgarjgY/jgIFtZWRpYeOBruWGjeeUn+OCkuWni+OCgeOBn+WgtOWQiFxuICAgICAgICAgIGlmICh0aGlzLm1lZGlhICYmIHRoaXMubWVkaWEuc3RhdHVzID09PSBcImZpbmRpbmdcIiAmJiB0aGlzLm1lZGlhLmNoID09PSBhcGlTdGF0ZS50aHJlYWQuY2gpIHtcbiAgICAgICAgICAgIHRoaXMubWVkaWEuc2V0UG9zdHNUaW1lbGluZXMoYXBpU3RhdGUpO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5wbGF5aW5nKCk7XG5cbiAgICAgICAgICAgIC8vIOimi+OBpuOBhOOCi2No44GMbWVkaWFDaOOBruWgtOWQiFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lZGlhID0gbmV3IE1lZGlhKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5tZWRpYS5zZWFyY2hpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tZWRpYSA9IG5ldyBNZWRpYSh0aGlzKTtcbiAgICAgICAgICB0aGlzLm1lZGlhLnNlYXJjaGluZygpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICAgIGlmIChhcGlTdGF0ZS5hcHAuaXNNZWRpYUNoKSB7XG4gICAgICAgICAgY29uc3QgcG9zdCA9IGFwaVN0YXRlLnBvc3RzWzBdO1xuICAgICAgICAgIGlmIChwb3N0LmNoID09PSB0aGlzLm1lZGlhLmNoKSB7XG4gICAgICAgICAgICAvLyDoh6rliIbjga7mipXnqL/jgZfjgZ9wb3N044Gu5aC05ZCIXG4gICAgICAgICAgICBpZiAocG9zdC51aWQgPT09IGFwaVN0YXRlLnVzZXIudWlkKSB7XG4gICAgICAgICAgICAgIHRoaXMubWVkaWEucmVmcmVjdFNlbGZQb3N0KHBvc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjbGllbnRUbyhtZXRob2QsIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdE9iaiA9IEdsb2JhbFdpbmRvdy5nZXRSZXF1ZXN0T2JqKG1ldGhvZCwgcGFyYW1zKTtcblxuICAgIC8vIGJvb3QgYnkgcG9ydGFsIHNpdGUuXG4gICAgaWYgKHRoaXMuYm9vdE9wdGlvbi50eXBlID09PSBkZWZpbmUuQVBQX1RZUEVTLlBPUlRBTCkge1xuICAgICAgd2luZG93LnBvc3RNZXNzYWdlKHJlcXVlc3RPYmosIHRoaXMuYm9vdE9wdGlvbi5jbGllbnRIcmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2xpZW50SWZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlmcmFtZSN0YWxrbkV4dGVuc2lvbmApO1xuXG4gICAgICAvLyBib290IGJ5IGlmcmFtZS5cbiAgICAgIGlmIChjbGllbnRJZnJhbWUpIHtcbiAgICAgICAgY2xpZW50SWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UocmVxdWVzdE9iaiwgY2xpZW50SWZyYW1lLnNyYyk7XG4gICAgICAgIC8vIGJvb3QgYnkgYXBpIG9ubHkuXG4gICAgICB9IGVsc2Uge1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWVkaWEge1xuICBzdGF0aWMgZ2V0IG1lZGlhU2Vjb25kSW50ZXJ2YWwoKSB7XG4gICAgcmV0dXJuIDIwMDtcbiAgfVxuICBzdGF0aWMgZ2V0TWVkaWEodGhyZWFkKSB7XG4gICAgY29uc3Qgc3JjID0gVGhyZWFkLmdldE1lZGlhU3JjKHRocmVhZCk7XG4gICAgY29uc3QgdGFnVHlwZSA9IFRocmVhZC5nZXRNZWRpYVRhZ1R5cGUodGhyZWFkKTtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0YWdUeXBlfVtzcmM9JyR7c3JjfSddYCk7XG4gIH1cbiAgc3RhdGljIGdldFJlcXVlc3RPYmoobWV0aG9kLCBwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpbmRvd1R5cGU6IHdpbmRvdy5uYW1lLFxuICAgICAgdHlwZTogUG9zdE1lc3NhZ2UuTUVESUFfVE9fQ0xJRU5UX1RZUEUsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgIH07XG4gIH1cbiAgY2g6IHN0cmluZztcbiAgZ2xvYmFsV2luZG93OiBHbG9iYWxXaW5kb3c7XG4gIG1heFNlYXJjaGluZ0NudDogbnVtYmVyID0gMzA7XG4gIHNlYXJjaGluZ0NudDogbnVtYmVyO1xuICBwbGF5aW5nQ250OiBudW1iZXI7XG4gIHNlYXJjaGluZ0lkOiBhbnk7XG4gIHdhaXRpbmdJZDogYW55O1xuICBwbGF5SW50ZXJ2YWxJZDogYW55O1xuICBzdGFydGVkOiBib29sZWFuO1xuICBpc1Bvc3Rpbmc6IGJvb2xlYW47XG4gIGZpbGU6IGFueTtcbiAgcG9pbnRlclRpbWU6IGFueTtcbiAgcG9zdHNUaW1lbGluZTogYW55O1xuICBwb3N0c1RpbWVsaW5lU3RvY2s6IGFueTtcbiAgc3RhdHVzOiBcInNodXRkb3duXCIgfCBcInNlYXJjaGluZ1wiIHwgXCJ3YWl0aW5nXCIgfCBcImZpbmRpbmdcIiB8IFwicGxheWluZ1wiIHwgXCJzZWVraW5nXCIgPSBcInNodXRkb3duXCI7XG4gIGlzTG9nOiBib29sZWFuID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKGdsb2JhbFdpbmRvdykge1xuICAgIHRoaXMuZ2xvYmFsV2luZG93ID0gZ2xvYmFsV2luZG93O1xuICAgIHRoaXMuY2ggPSBnbG9iYWxXaW5kb3cuYXBpU3RvcmUuZ2V0U3RhdGUoKS50aHJlYWQuY2g7XG5cbiAgICAvLyBjb250cm9scy5cbiAgICB0aGlzLnNlYXJjaGluZ0NudCA9IDA7XG4gICAgdGhpcy5wbGF5aW5nQ250ID0gMDtcbiAgICB0aGlzLnBvaW50ZXJUaW1lID0gMDtcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzUG9zdGluZyA9IGZhbHNlO1xuXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNlYXJjaGluZ0lkKTtcbiAgICBjbGVhckludGVydmFsKHRoaXMucGxheUludGVydmFsSWQpO1xuXG4gICAgLy8gdGltZWxpbmUgZGF0YXMuXG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lID0gW107XG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2sgPSBbXTtcblxuICAgIC8vIG1ldGhvZHMuXG4gICAgdGhpcy5zZXRQb3N0c1RpbWVsaW5lcyA9IHRoaXMuc2V0UG9zdHNUaW1lbGluZXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZnJlY3RTZWxmUG9zdCA9IHRoaXMucmVmcmVjdFNlbGZQb3N0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZWFyY2hpbmcgPSB0aGlzLnNlYXJjaGluZy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlRXZlbnRzID0gdGhpcy5oYW5kbGVFdmVudHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnBvc3RpbmcgPSB0aGlzLnBvc3RpbmcuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFwaVRvID0gdGhpcy5hcGlUby5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9nID0gdGhpcy5sb2cuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHNldFN0YXR1cyhzdGF0dXMpIHtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmxvZyhcIlNFVCBTVEFUVVNcIik7XG4gIH1cblxuICBzZXRQb3N0c1RpbWVsaW5lcyh7IHBvc3RzVGltZWxpbmUsIHBvc3RzVGltZWxpbmVTdG9jayB9KSB7XG4gICAgLy8g54++5Zyo6KGo56S644GV44KM44Gm44GE44KL44K/44Kk44Og44Op44Kk44Oz54q25oWLXG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lID0gWy4uLnBvc3RzVGltZWxpbmVdO1xuXG4gICAgLy8gMOenkuaKleeov+OBruOCv+OCpOODoOODqeOCpOODs+eKtuaFi1xuICAgIHRoaXMucG9zdHNUaW1lbGluZVN0b2NrID0gWy4uLnBvc3RzVGltZWxpbmVTdG9ja107XG5cbiAgICB0aGlzLmxvZyhcIklOSVQgVElNRUxJTkVTXCIpO1xuICB9XG5cbiAgcmVmcmVjdFNlbGZQb3N0KHBvc3QpIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLnBvc3RzVGltZWxpbmUubGVuZ3RoO1xuICAgIGxldCBwdXNoRmxnID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvc3QuY3VycmVudFRpbWUgPCB0aGlzLnBvc3RzVGltZWxpbmVbaV0uY3VycmVudFRpbWUpIHtcbiAgICAgICAgcHVzaEZsZyA9IHRydWU7XG4gICAgICAgIHRoaXMucG9zdHNUaW1lbGluZS5zcGxpY2UoaSwgMCwgcG9zdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwdXNoRmxnKSB7XG4gICAgICB0aGlzLnBvc3RzVGltZWxpbmUucHVzaChwb3N0KTtcbiAgICB9XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZSA/IE1hdGguZmxvb3IodGhpcy5maWxlLmN1cnJlbnRUaW1lICogMTApIC8gMTAgOiAwO1xuICB9XG5cbiAgc2VhcmNoaW5nKHNlY29uZCA9IE1lZGlhLm1lZGlhU2Vjb25kSW50ZXJ2YWwpIHtcbiAgICB0aGlzLnNldFN0YXR1cyhcInNlYXJjaGluZ1wiKTtcbiAgICB0aGlzLnNlYXJjaGluZ0NudCA9IDA7XG4gICAgdGhpcy5zZWFyY2hpbmdJZCA9IG51bGw7XG4gICAgdGhpcy53YWl0aW5nSWQgPSBudWxsO1xuICAgIHRoaXMucGxheUludGVydmFsSWQgPSBudWxsO1xuICAgIHRoaXMuc2VhcmNoaW5nSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zZWFyY2hpbmdDbnQgPCB0aGlzLm1heFNlYXJjaGluZ0NudCkge1xuICAgICAgICBjb25zdCB2aWRlb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidmlkZW9cIik7XG4gICAgICAgIGNvbnN0IGF1ZGlvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhdWRpb1wiKTtcbiAgICAgICAgdmlkZW9zLmZvckVhY2godGhpcy5oYW5kbGVFdmVudHMpO1xuICAgICAgICBhdWRpb3MuZm9yRWFjaCh0aGlzLmhhbmRsZUV2ZW50cyk7XG4gICAgICAgIGlmICh2aWRlb3MubGVuZ3RoID4gMCB8fCBhdWRpb3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdHVzKFwid2FpdGluZ1wiKTtcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuc2VhcmNoaW5nSWQpO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wbGF5SW50ZXJ2YWxJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWFyY2hpbmdDbnQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNlYXJjaGluZ0lkKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnBsYXlJbnRlcnZhbElkKTtcbiAgICAgICAgdGhpcy5zZWFyY2hpbmcoTWVkaWEubWVkaWFTZWNvbmRJbnRlcnZhbCAqIDEwKTtcbiAgICAgIH1cbiAgICB9LCBzZWNvbmQpO1xuICB9XG5cbiAgaGFuZGxlRXZlbnRzKG1lZGlhKSB7XG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuZmlsZSA9IGUuc3JjRWxlbWVudDtcbiAgICAgIGNvbnN0IG1lZGlhQ2ggPSBDbGllbnRVdGlsLmRlbGV0ZVByb3Rjb2wodGhpcy5maWxlLmN1cnJlbnRTcmMpICsgXCIvXCI7XG5cbiAgICAgIC8vIOimi+OBpuOBhOOCi2No44GMbWVkaWFDaOOBruWgtOWQiFxuICAgICAgaWYgKHRoaXMuY2ggPT09IG1lZGlhQ2gpIHtcbiAgICAgICAgaWYgKHRoaXMucGxheWluZ0NudCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuc2V0UG9zdHNUaW1lbGluZXModGhpcy5nbG9iYWxXaW5kb3cuYXBpU3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5aW5nKCk7XG5cbiAgICAgICAgLy8g6KaL44Gm44GE44KLY2jjgYxtZWRpYUNo44Gn44Gq44GP44CBbWVkaWHjga7lho3nlJ/jgpLlp4vjgoHjgZ/loLTlkIhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdHVzKFwiZmluZGluZ1wiKTtcbiAgICAgICAgdGhpcy5jaCA9IG1lZGlhQ2g7XG4gICAgICAgIHRoaXMuZ2xvYmFsV2luZG93LmNvcmVBcGkub25SZXNwb25zZUNoQVBJKHRoaXMuY2gpO1xuICAgICAgICB0aGlzLmdsb2JhbFdpbmRvdy5jb3JlQXBpLmNoYW5nZVRocmVhZCh7IHRocmVhZDogeyBjaDogdGhpcy5jaCB9IH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcInNlZWtlZFwiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0dXMoXCJzZWVraW5nXCIpO1xuICAgIH0pO1xuXG4gICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXR1cyhcIndhaXRpbmdcIik7XG4gICAgfSk7XG5cbiAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdHVzKFwid2FpdGluZ1wiKTtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wbGF5SW50ZXJ2YWxJZCk7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2subGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5wb3N0c1RpbWVsaW5lU3RvY2tbaV0gJiYgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2tbaV0uY3VycmVudFRpbWUgPD0gY3VycmVudFRpbWUpIHtcbiAgICAgICAgICB0aGlzLmFwaVRvKFwiTkVYVF9QT1NUU19USU1FTElORVwiLCB7IHBvc3RzVGltZWxpbmU6IFt0aGlzLnBvc3RzVGltZWxpbmVTdG9ja1tpXV0gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdHVzKFwid2FpdGluZ1wiKTtcbiAgICB9KTtcbiAgfVxuXG4gIHBsYXlpbmcoKSB7XG4gICAgdGhpcy5zZXRTdGF0dXMoXCJwbGF5aW5nXCIpO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wbGF5SW50ZXJ2YWxJZCk7XG4gICAgdGhpcy5wbGF5SW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucG9zdGluZyh0aGlzLmN1cnJlbnRUaW1lKTtcbiAgICB9LCBjb25mLm1lZGlhU2Vjb25kSW50ZXJ2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODoeODh+OCo+OCouODleOCoeOCpOODq+OBruaKleeov+OCkueuoeeQhuOBmeOCi+ODoeOCveODg+ODiVxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgpLkuI7jgYjjgabnm7TmjqXlrp/ooYzjgoLlj6/og70o5ouh5by15qmf6IO944GL44KJ6ZaT5o6l55qE44Gr5a6f6KGM44GZ44KLKVxuICAgKi9cbiAgcG9zdGluZyhwb2ludGVyVGltZSA9IDApIHtcbiAgICBpZiAodGhpcy5pc1Bvc3RpbmcpIHJldHVybjtcbiAgICBjb25zdCB0aW1lbGluZUxlbmd0aCA9IHRoaXMucG9zdHNUaW1lbGluZVN0b2NrLmxlbmd0aDtcbiAgICB0aGlzLnBsYXlpbmdDbnQrKztcbiAgICB0aGlzLmlzUG9zdGluZyA9IHRydWU7XG5cbiAgICAvLyBUaW1lbGluZSBpcyBuZXh0LlxuICAgIGlmICh0aGlzLnBvaW50ZXJUaW1lIDw9IHBvaW50ZXJUaW1lKSB7XG4gICAgICB0aGlzLnBvaW50ZXJUaW1lID0gcG9pbnRlclRpbWU7XG4gICAgICB3aGlsZSAodGhpcy5pc1Bvc3RpbmcpIHtcbiAgICAgICAgaWYgKHRpbWVsaW5lTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5pc1Bvc3RpbmcgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBvc3RzVGltZWxpbmVTdG9ja1swXSAmJiB0aGlzLnBvc3RzVGltZWxpbmVTdG9ja1swXS5jdXJyZW50VGltZSA8PSBwb2ludGVyVGltZSkge1xuICAgICAgICAgIGNvbnN0IGFkZFBvc3QgPSB0aGlzLnBvc3RzVGltZWxpbmVTdG9jay5zaGlmdCgpO1xuICAgICAgICAgIHRoaXMuYXBpVG8oXCJORVhUX1BPU1RTX1RJTUVMSU5FXCIsIHsgcG9zdHNUaW1lbGluZTogW2FkZFBvc3RdIH0pO1xuICAgICAgICAgIHRoaXMubG9nKFwiUE9TVElOR1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlzUG9zdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBUaW1lbGluZSBpcyBwcmV2LlxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwcmV2LlxuICAgICAgdGhpcy5maWxlLnBhdXNlKCk7XG5cbiAgICAgIGNvbnN0IHBvc3RzVGltZWxpbmVBbGwgPSB0aGlzLmdsb2JhbFdpbmRvdy5hcGlTdG9yZS5nZXRTdGF0ZSgpLnBvc3RzVGltZWxpbmUuY29uY2F0KHRoaXMucG9zdHNUaW1lbGluZVN0b2NrKTtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IHBvc3RzVGltZWxpbmVBbGwubGVuZ3RoO1xuICAgICAgdGhpcy5wb2ludGVyVGltZSA9IHRoaXMuY3VycmVudFRpbWU7XG4gICAgICB0aGlzLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgICAgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcG9zdCA9IHBvc3RzVGltZWxpbmVBbGxbaV07XG4gICAgICAgIGlmIChwb3N0LmN1cnJlbnRUaW1lIDw9IHRoaXMucG9pbnRlclRpbWUpIHtcbiAgICAgICAgICB0aGlzLnBvc3RzVGltZWxpbmUucHVzaChwb3N0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBvc3RzVGltZWxpbmVTdG9jay5wdXNoKHBvc3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOaMh+WumuOBl+OBn+enkuaVsOOCkue1jOmBjuOBl+OBpuOBhOOCi1Bvc3TjgpJyZWR1Y2Vy44GnZGlzcEZsZ+OCkmZhbHNl44Gr44GX44GmUG9zdOOCklVubW91bnTjgZnjgotcbiAgICAgIHRoaXMuYXBpVG8oXCJDTEVBUl9QT1NUU19USU1FTElORVwiLCB7XG4gICAgICAgIHBvc3RzVGltZWxpbmU6IHRoaXMucG9zdHNUaW1lbGluZSxcbiAgICAgICAgcG9zdHNUaW1lbGluZVN0b2NrOiB0aGlzLnBvc3RzVGltZWxpbmVTdG9jayxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmlzUG9zdGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5maWxlLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBhcGlUbyhtZXRob2QsIHBhcmFtcyA9IHt9KSB7XG4gICAgdGhpcy5nbG9iYWxXaW5kb3cuYXBpU3RvcmUuZGlzcGF0Y2goeyB0eXBlOiBtZXRob2QsIC4uLnBhcmFtcyB9KTtcbiAgfVxuXG4gIGxvZyhsYWJlbCwgaXNGb3JjZSA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuaXNMb2cgfHwgaXNGb3JjZSkge1xuICAgICAgY29uc29sZS5sb2coYEBAQEBAQEBAQEBAICR7bGFiZWx9ICR7dGhpcy5zdGF0dXN9IENIICR7dGhpcy5jaH0gJHt0aGlzLnBvaW50ZXJUaW1lfSBAQEBgKTtcbiAgICAgIGNvbnNvbGUubG9nKGBwb3N0c1RpbWVsaW5lOiAke3RoaXMucG9zdHNUaW1lbGluZS5sZW5ndGh9IHBvc3RzVGltZWxpbmVTdG9jazogJHt0aGlzLnBvc3RzVGltZWxpbmVTdG9jay5sZW5ndGh9YCk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnBvc3RzVGltZWxpbmUpO1xuICAgICAgY29uc29sZS5sb2codGhpcy5wb3N0c1RpbWVsaW5lU3RvY2spO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnbG9iYWxXaW5kb3cgPSBuZXcgR2xvYmFsV2luZG93KCk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHQvLyBEZWJ1Zy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcblx0XHQvLyBkZWJ1Zy5yYXdMb2cgPSByYXdMb2c7XG5cblx0XHQvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zdCBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuXHRcdFx0aW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIi8qZ2xvYmFsIEJsb2IsRmlsZSovXG5cbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50c1xuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nKTtcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXScpO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHVyaSkge1xuICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7XG4gICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICB9XG5cbiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmVcbiAgICA6ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaG9zdG5hbWUgOiAnbG9jYWxob3N0Jyk7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydCB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTtcbiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTtcbiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLyc7XG4gIHRoaXMuZm9yY2VKU09OUCA9ICEhb3B0cy5mb3JjZUpTT05QO1xuICB0aGlzLmpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG4gIHRoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9ICEhb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlICE9PSBvcHRzLndpdGhDcmVkZW50aWFscztcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBkZXRlY3QgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnRcbiAgdGhpcy5pc1JlYWN0TmF0aXZlID0gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ3N0cmluZycgJiYgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gJ3JlYWN0bmF0aXZlJyk7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBvciBSZWFjdE5hdGl2ZSBjbGllbnRcbiAgaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmlzUmVhY3ROYXRpdmUpIHtcbiAgICBpZiAob3B0cy5leHRyYUhlYWRlcnMgJiYgT2JqZWN0LmtleXMob3B0cy5leHRyYUhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubG9jYWxBZGRyZXNzKSB7XG4gICAgICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgdGhpcy5pZCA9IG51bGw7XG4gIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5waW5nSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgdGhpcy5vcGVuKCk7XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cblNvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblNvY2tldC50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG5Tb2NrZXQucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQHJldHVybiB7VHJhbnNwb3J0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgcXVlcnkgPSBjbG9uZSh0aGlzLnF1ZXJ5KTtcblxuICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgcXVlcnkuRUlPID0gcGFyc2VyLnByb3RvY29sO1xuXG4gIC8vIHRyYW5zcG9ydCBuYW1lXG4gIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgLy8gcGVyLXRyYW5zcG9ydCBvcHRpb25zXG4gIHZhciBvcHRpb25zID0gdGhpcy50cmFuc3BvcnRPcHRpb25zW25hbWVdIHx8IHt9O1xuXG4gIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICB2YXIgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNbbmFtZV0oe1xuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBzb2NrZXQ6IHRoaXMsXG4gICAgYWdlbnQ6IG9wdGlvbnMuYWdlbnQgfHwgdGhpcy5hZ2VudCxcbiAgICBob3N0bmFtZTogb3B0aW9ucy5ob3N0bmFtZSB8fCB0aGlzLmhvc3RuYW1lLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCB8fCB0aGlzLnBvcnQsXG4gICAgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCB0aGlzLnNlY3VyZSxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGggfHwgdGhpcy5wYXRoLFxuICAgIGZvcmNlSlNPTlA6IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB0aGlzLmZvcmNlSlNPTlAsXG4gICAganNvbnA6IG9wdGlvbnMuanNvbnAgfHwgdGhpcy5qc29ucCxcbiAgICBmb3JjZUJhc2U2NDogb3B0aW9ucy5mb3JjZUJhc2U2NCB8fCB0aGlzLmZvcmNlQmFzZTY0LFxuICAgIGVuYWJsZXNYRFI6IG9wdGlvbnMuZW5hYmxlc1hEUiB8fCB0aGlzLmVuYWJsZXNYRFIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBvcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCB0aGlzLndpdGhDcmVkZW50aWFscyxcbiAgICB0aW1lc3RhbXBSZXF1ZXN0czogb3B0aW9ucy50aW1lc3RhbXBSZXF1ZXN0cyB8fCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLFxuICAgIHRpbWVzdGFtcFBhcmFtOiBvcHRpb25zLnRpbWVzdGFtcFBhcmFtIHx8IHRoaXMudGltZXN0YW1wUGFyYW0sXG4gICAgcG9saWN5UG9ydDogb3B0aW9ucy5wb2xpY3lQb3J0IHx8IHRoaXMucG9saWN5UG9ydCxcbiAgICBwZng6IG9wdGlvbnMucGZ4IHx8IHRoaXMucGZ4LFxuICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy5rZXksXG4gICAgcGFzc3BocmFzZTogb3B0aW9ucy5wYXNzcGhyYXNlIHx8IHRoaXMucGFzc3BocmFzZSxcbiAgICBjZXJ0OiBvcHRpb25zLmNlcnQgfHwgdGhpcy5jZXJ0LFxuICAgIGNhOiBvcHRpb25zLmNhIHx8IHRoaXMuY2EsXG4gICAgY2lwaGVyczogb3B0aW9ucy5jaXBoZXJzIHx8IHRoaXMuY2lwaGVycyxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkIHx8IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgZXh0cmFIZWFkZXJzOiBvcHRpb25zLmV4dHJhSGVhZGVycyB8fCB0aGlzLmV4dHJhSGVhZGVycyxcbiAgICBmb3JjZU5vZGU6IG9wdGlvbnMuZm9yY2VOb2RlIHx8IHRoaXMuZm9yY2VOb2RlLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfHwgdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMucmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5yZXF1ZXN0VGltZW91dCxcbiAgICBwcm90b2NvbHM6IG9wdGlvbnMucHJvdG9jb2xzIHx8IHZvaWQgKDApLFxuICAgIGlzUmVhY3ROYXRpdmU6IHRoaXMuaXNSZWFjdE5hdGl2ZVxuICB9KTtcblxuICByZXR1cm4gdHJhbnNwb3J0O1xufTtcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICB2YXIgbyA9IHt9O1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU29ja2V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdHJhbnNwb3J0O1xuICBpZiAodGhpcy5yZW1lbWJlclVwZ3JhZGUgJiYgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJiB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykgIT09IC0xKSB7XG4gICAgdHJhbnNwb3J0ID0gJ3dlYnNvY2tldCc7XG4gIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCAnTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICB9XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcblxuICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gIHRyeSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG4gIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1Zygnc2V0dGluZyB0cmFuc3BvcnQgJXMnLCB0cmFuc3BvcnQubmFtZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZygnY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gIHRyYW5zcG9ydFxuICAub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25EcmFpbigpO1xuICB9KVxuICAub24oJ3BhY2tldCcsIGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH0pXG4gIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcihlKTtcbiAgfSlcbiAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ3RyYW5zcG9ydCBjbG9zZScpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wcm9iZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gIHZhciBmYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkge1xuICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTtcbiAgICB9XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3BpbmcnLCBkYXRhOiAncHJvYmUnIH1dKTtcbiAgICB0cmFuc3BvcnQub25jZSgncGFja2V0JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCdwb25nJyA9PT0gbXNnLnR5cGUgJiYgJ3Byb2JlJyA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkaW5nJywgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTtcblxuICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yJyk7XG4gICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0ICgpIHtcbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgY2xlYW51cCgpO1xuXG4gICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcjogJyArIGVycik7XG4gICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3RyYW5zcG9ydCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmNsb3NlICgpIHtcbiAgICBvbmVycm9yKCdzb2NrZXQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbnVwZ3JhZGUgKHRvKSB7XG4gICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkaW5nJywgb251cGdyYWRlKTtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vbmNlKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25lcnJvcik7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gIHRoaXMub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgdGhpcy5vbmNlKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NvY2tldCBvcGVuJyk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgZGVidWcoJ3N0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgIHRoaXMuZW1pdCgnaGVhcnRiZWF0Jyk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9nbG9iYWxUaGlzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBYSFI7XG5tb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcblxuLyoqXG4gKiBFbXB0eSBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHt9XG5cbi8qKlxuICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gWEhSIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgdGhpcy54ZCA9ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmIG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lKSB8fFxuICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChYSFIsIFBvbGxpbmcpO1xuXG4vKipcbiAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAqL1xuXG5YSFIucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy51cmkgPSB0aGlzLnVyaSgpO1xuICBvcHRzLnhkID0gdGhpcy54ZDtcbiAgb3B0cy54cyA9IHRoaXMueHM7XG4gIG9wdHMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IGZhbHNlO1xuICBvcHRzLnN1cHBvcnRzQmluYXJ5ID0gdGhpcy5zdXBwb3J0c0JpbmFyeTtcbiAgb3B0cy5lbmFibGVzWERSID0gdGhpcy5lbmFibGVzWERSO1xuICBvcHRzLndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgb3B0cy5yZXF1ZXN0VGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5leHRyYUhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcblxuICByZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7XG4gIHZhciBpc0JpbmFyeSA9IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyAmJiBkYXRhICE9PSB1bmRlZmluZWQ7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgZGF0YTogZGF0YSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignc3VjY2VzcycsIGZuKTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb3N0IGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMuc2VuZFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3hociBwb2xsJyk7XG4gIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYub25EYXRhKGRhdGEpO1xuICB9KTtcbiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb2xsIGVycm9yJywgZXJyKTtcbiAgfSk7XG4gIHRoaXMucG9sbFhociA9IHJlcTtcbn07XG5cbi8qKlxuICogUmVxdWVzdCBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QgKG9wdHMpIHtcbiAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCAnR0VUJztcbiAgdGhpcy51cmkgPSBvcHRzLnVyaTtcbiAgdGhpcy54ZCA9ICEhb3B0cy54ZDtcbiAgdGhpcy54cyA9ICEhb3B0cy54cztcbiAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50O1xuICB0aGlzLmlzQmluYXJ5ID0gb3B0cy5pc0JpbmFyeTtcbiAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7XG4gIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBvcHRzLndpdGhDcmVkZW50aWFscztcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgdGhpcy5jcmVhdGUoKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdHMgPSB7IGFnZW50OiB0aGlzLmFnZW50LCB4ZG9tYWluOiB0aGlzLnhkLCB4c2NoZW1lOiB0aGlzLnhzLCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgdmFyIHhociA9IHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICBkZWJ1ZygneGhyIG9wZW4gJXM6ICVzJywgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICgnUE9TVCcgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5pc0JpbmFyeSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICcqLyonKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gaWU2IGNoZWNrXG4gICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3VwcG9ydHNCaW5hcnkgJiYgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIHx8IGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtOyBjaGFyc2V0PVVURi04Jykge1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcih0eXBlb2YgeGhyLnN0YXR1cyA9PT0gJ251bWJlcicgPyB4aHIuc3RhdHVzIDogMCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZGVidWcoJ3hociBkYXRhICVzJywgdGhpcy5kYXRhKTtcbiAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZocm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgIC8vIGFuZCB0aHVzIHRoZSAnZXJyb3InIGV2ZW50IGNhbiBvbmx5IGJlIG9ubHkgYm91bmQgKmFmdGVyKiB0aGlzIGV4Y2VwdGlvblxuICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5vbkVycm9yKGUpO1xuICAgIH0sIDApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ3N1Y2Nlc3MnKTtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gIHRoaXMub25TdWNjZXNzKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLmNsZWFudXAodHJ1ZSk7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBob3VzZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKGZyb21FcnJvcikge1xuICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB4bWxodHRwcmVxdWVzdFxuICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgfVxuXG4gIGlmIChmcm9tRXJyb3IpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgfVxuXG4gIHRoaXMueGhyID0gbnVsbDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gbG9hZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhO1xuICB0cnkge1xuICAgIHZhciBjb250ZW50VHlwZTtcbiAgICB0cnkge1xuICAgICAgY29udGVudFR5cGUgPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIHx8IGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtOyBjaGFyc2V0PVVURi04Jykge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlIHx8IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLm9uRXJyb3IoZSk7XG4gIH1cbiAgaWYgKG51bGwgIT0gZGF0YSkge1xuICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGl0IGhhcyBYRG9tYWluUmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5oYXNYRFIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciB0ZXJtaW5hdGlvbkV2ZW50ID0gJ29ucGFnZWhpZGUnIGluIGdsb2JhbFRoaXMgPyAncGFnZWhpZGUnIDogJ3VubG9hZCc7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0ZXJtaW5hdGlvbkV2ZW50LCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBzbGljaW5nIGFuIGFycmF5YnVmZmVyIGV2ZW4gd2hlblxuICogQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlIGlzIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYXJyYXlidWZmZXIuYnl0ZUxlbmd0aDtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgfHwgYnl0ZXM7XG5cbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxuXG4gIGlmIChzdGFydCA8IDApIHsgc3RhcnQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPiBieXRlcykgeyBlbmQgPSBieXRlczsgfVxuXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhZnRlclxuXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgIHZhciBiYWlsID0gZmFsc2VcbiAgICBlcnJfY2IgPSBlcnJfY2IgfHwgbm9vcFxuICAgIHByb3h5LmNvdW50ID0gY291bnRcblxuICAgIHJldHVybiAoY291bnQgPT09IDApID8gY2FsbGJhY2soKSA6IHByb3h5XG5cbiAgICBmdW5jdGlvbiBwcm94eShlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocHJveHkuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxuICAgICAgICB9XG4gICAgICAgIC0tcHJveHkuY291bnRcblxuICAgICAgICAvLyBhZnRlciBmaXJzdCBlcnJvciwgcmVzdCBhcmUgcGFzc2VkIHRvIGVycl9jYlxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICAgICAgLy8gZnV0dXJlIGVycm9yIGNhbGxiYWNrcyB3aWxsIGdvIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXG4gICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3V0ZjhqcyB2Mi4xLjIgYnkgQG1hdGhpYXMgKi9cblxudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHR2YXIgb3V0cHV0ID0gW107XG5cdHZhciBjb3VudGVyID0gMDtcblx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdHZhciB2YWx1ZTtcblx0dmFyIGV4dHJhO1xuXHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuLy8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcbmZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0dmFyIGluZGV4ID0gLTE7XG5cdHZhciB2YWx1ZTtcblx0dmFyIG91dHB1dCA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdH1cblx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdGlmIChjb2RlUG9pbnQgPj0gMHhEODAwICYmIGNvZGVQb2ludCA8PSAweERGRkYpIHtcblx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0J0xvbmUgc3Vycm9nYXRlIFUrJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ5dGUoY29kZVBvaW50LCBzaGlmdCkge1xuXHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHR9XG5cdHZhciBzeW1ib2wgPSAnJztcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGODAwKSA9PSAwKSB7IC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiA2KSAmIDB4MUYpIHwgMHhDMCk7XG5cdH1cblx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZGRjAwMDApID09IDApIHsgLy8gMy1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKCFjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSkge1xuXHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdH1cblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTIpICYgMHgwRikgfCAweEUwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRTAwMDAwKSA9PSAwKSB7IC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdH1cblx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0cmV0dXJuIHN5bWJvbDtcbn1cblxuZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0dmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7XG5cdHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcblx0dmFyIGluZGV4ID0gLTE7XG5cdHZhciBjb2RlUG9pbnQ7XG5cdHZhciBieXRlU3RyaW5nID0gJyc7XG5cdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0Y29kZVBvaW50ID0gY29kZVBvaW50c1tpbmRleF07XG5cdFx0Ynl0ZVN0cmluZyArPSBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpO1xuXHR9XG5cdHJldHVybiBieXRlU3RyaW5nO1xufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdGlmIChieXRlSW5kZXggPj0gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0dmFyIGNvbnRpbnVhdGlvbkJ5dGUgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRyZXR1cm4gY29udGludWF0aW9uQnl0ZSAmIDB4M0Y7XG5cdH1cblxuXHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZVN5bWJvbChzdHJpY3QpIHtcblx0dmFyIGJ5dGUxO1xuXHR2YXIgYnl0ZTI7XG5cdHZhciBieXRlMztcblx0dmFyIGJ5dGU0O1xuXHR2YXIgY29kZVBvaW50O1xuXG5cdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdH1cblxuXHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRieXRlMSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0Ynl0ZUluZGV4Kys7XG5cblx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdGlmICgoYnl0ZTEgJiAweDgwKSA9PSAwKSB7XG5cdFx0cmV0dXJuIGJ5dGUxO1xuXHR9XG5cblx0Ly8gMi1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDFGKSA8PCA2KSB8IGJ5dGUyO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHR9XG5cdH1cblxuXHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDA4MDApIHtcblx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHR9XG5cdH1cblxuXHQvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0KGJ5dGUzIDw8IDB4MDYpIHwgYnl0ZTQ7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcbn1cblxudmFyIGJ5dGVBcnJheTtcbnZhciBieXRlQ291bnQ7XG52YXIgYnl0ZUluZGV4O1xuZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdGJ5dGVDb3VudCA9IGJ5dGVBcnJheS5sZW5ndGg7XG5cdGJ5dGVJbmRleCA9IDA7XG5cdHZhciBjb2RlUG9pbnRzID0gW107XG5cdHZhciB0bXA7XG5cdHdoaWxlICgodG1wID0gZGVjb2RlU3ltYm9sKHN0cmljdCkpICE9PSBmYWxzZSkge1xuXHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHR9XG5cdHJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0dmVyc2lvbjogJzIuMS4yJyxcblx0ZW5jb2RlOiB1dGY4ZW5jb2RlLFxuXHRkZWNvZGU6IHV0ZjhkZWNvZGVcbn07XG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGNoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxuICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsxKV07XG4gICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzIpXTtcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKCk7XG4iLCIvKipcclxuICogQ3JlYXRlIGEgYmxvYiBidWlsZGVyIGV2ZW4gd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3RcclxuICovXHJcblxyXG52YXIgQmxvYkJ1aWxkZXIgPSB0eXBlb2YgQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBXZWJLaXRCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBXZWJLaXRCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIE1TQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTVNCbG9iQnVpbGRlciA6XHJcbiAgdHlwZW9mIE1vekJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1vekJsb2JCdWlsZGVyIDogXHJcbiAgZmFsc2U7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGEgPSBuZXcgQmxvYihbJ2hpJ10pO1xyXG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBzdXBwb3J0cyBBcnJheUJ1ZmZlclZpZXdzXHJcbiAqIEZhaWxzIGluIFNhZmFyaSA2LCBzbyB3ZSBuZWVkIHRvIG1hcCB0byBBcnJheUJ1ZmZlcnMgdGhlcmUuXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA9IGJsb2JTdXBwb3J0ZWQgJiYgKGZ1bmN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICB2YXIgYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKTtcclxuICAgIHJldHVybiBiLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxyXG4gKi9cclxuXHJcbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXHJcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmFwcGVuZFxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5nZXRCbG9iO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IG1hcHMgQXJyYXlCdWZmZXJWaWV3cyB0byBBcnJheUJ1ZmZlcnNcclxuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XHJcbiAqIHN1cHBvcnQgaXQgaW4gdGhlIEJsb2IgY29uc3RydWN0b3IuXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpIHtcclxuICByZXR1cm4gYXJ5Lm1hcChmdW5jdGlvbihjaHVuaykge1xyXG4gICAgaWYgKGNodW5rLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgIHZhciBidWYgPSBjaHVuay5idWZmZXI7XHJcblxyXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgc3ViYXJyYXksIG1ha2UgYSBjb3B5IHNvIHdlIG9ubHlcclxuICAgICAgLy8gaW5jbHVkZSB0aGUgc3ViYXJyYXkgcmVnaW9uIGZyb20gdGhlIHVuZGVybHlpbmcgYnVmZmVyXHJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgY29weS5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmLCBjaHVuay5ieXRlT2Zmc2V0LCBjaHVuay5ieXRlTGVuZ3RoKSk7XHJcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBidWY7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNodW5rO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICB2YXIgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcclxuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSkuZm9yRWFjaChmdW5jdGlvbihwYXJ0KSB7XHJcbiAgICBiYi5hcHBlbmQocGFydCk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAob3B0aW9ucy50eXBlKSA/IGJiLmdldEJsb2Iob3B0aW9ucy50eXBlKSA6IGJiLmdldEJsb2IoKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEJsb2JDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICByZXR1cm4gbmV3IEJsb2IobWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLCBvcHRpb25zIHx8IHt9KTtcclxufTtcclxuXHJcbmlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBCbG9iQnVpbGRlckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IEJsb2IucHJvdG90eXBlO1xyXG4gIEJsb2JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XHJcbiAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcclxuICAgIHJldHVybiBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPyBCbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xyXG4gIH0gZWxzZSBpZiAoYmxvYkJ1aWxkZXJTdXBwb3J0ZWQpIHtcclxuICAgIHJldHVybiBCbG9iQnVpbGRlckNvbnN0cnVjdG9yO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxufSkoKTtcclxuIiwiLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2dsb2JhbFRoaXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcblxuLyoqXG4gKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xuXG52YXIgck5ld2xpbmUgPSAvXFxuL2c7XG52YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG52YXIgY2FsbGJhY2tzO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkgeyB9XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgY2FsbGJhY2tzID0gZ2xvYmFsVGhpcy5fX19laW8gPSAoZ2xvYmFsVGhpcy5fX19laW8gfHwgW10pO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXQnKTtcblxudmFyIEJyb3dzZXJXZWJTb2NrZXQsIE5vZGVXZWJTb2NrZXQ7XG5cbmlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSAndW5kZWZpbmVkJykge1xuICBCcm93c2VyV2ViU29ja2V0ID0gV2ViU29ja2V0O1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQnJvd3NlcldlYlNvY2tldCA9IHNlbGYuV2ViU29ja2V0IHx8IHNlbGYuTW96V2ViU29ja2V0O1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdHJ5IHtcbiAgICBOb2RlV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTtcbiAgfSBjYXRjaCAoZSkgeyB9XG59XG5cbi8qKlxuICogR2V0IGVpdGhlciB0aGUgYFdlYlNvY2tldGAgb3IgYE1veldlYlNvY2tldGAgZ2xvYmFsc1xuICogaW4gdGhlIGJyb3dzZXIgb3IgdHJ5IHRvIHJlc29sdmUgV2ViU29ja2V0LWNvbXBhdGlibGVcbiAqIGludGVyZmFjZSBleHBvc2VkIGJ5IGB3c2AgZm9yIE5vZGUtbGlrZSBlbnZpcm9ubWVudC5cbiAqL1xuXG52YXIgV2ViU29ja2V0SW1wbCA9IEJyb3dzZXJXZWJTb2NrZXQgfHwgTm9kZVdlYlNvY2tldDtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdTO1xuXG4vKipcbiAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSB7T2JqZWN0fSBjb25uZWN0aW9uIG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gV1MgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmIChmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0ICYmICFvcHRzLmZvcmNlTm9kZTtcbiAgdGhpcy5wcm90b2NvbHMgPSBvcHRzLnByb3RvY29scztcbiAgaWYgKCF0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgIFdlYlNvY2tldEltcGwgPSBOb2RlV2ViU29ja2V0O1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKlxuICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeVxuICovXG5cbldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogT3BlbnMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdXJpID0gdGhpcy51cmkoKTtcbiAgdmFyIHByb3RvY29scyA9IHRoaXMucHJvdG9jb2xzO1xuICB2YXIgb3B0cyA9IHtcbiAgICBhZ2VudDogdGhpcy5hZ2VudCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZVxuICB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG4gIH1cbiAgaWYgKHRoaXMubG9jYWxBZGRyZXNzKSB7XG4gICAgb3B0cy5sb2NhbEFkZHJlc3MgPSB0aGlzLmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy53cyA9XG4gICAgICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCAmJiAhdGhpcy5pc1JlYWN0TmF0aXZlXG4gICAgICAgID8gcHJvdG9jb2xzXG4gICAgICAgICAgPyBuZXcgV2ViU29ja2V0SW1wbCh1cmksIHByb3RvY29scylcbiAgICAgICAgICA6IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSlcbiAgICAgICAgOiBuZXcgV2ViU29ja2V0SW1wbCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uT3BlbigpO1xuICB9O1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH07XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTtcbiAgfTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gIHZhciB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXRJbXBsICYmICEoJ19faW5pdGlhbGl6ZScgaW4gV2ViU29ja2V0SW1wbCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXlcblxuZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgIHZhciBhcnJheSA9IFtdXG5cbiAgICBpbmRleCA9IGluZGV4IHx8IDBcblxuICAgIGZvciAodmFyIGkgPSBpbmRleCB8fCAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpIC0gaW5kZXhdID0gbGlzdFtpXVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheVxufVxuIiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iLCJleHBvcnRzLmVuZGlhbm5lc3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnTEUnIH07XG5cbmV4cG9ydHMuaG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmhvc3RuYW1lXG4gICAgfVxuICAgIGVsc2UgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0cy5sb2FkYXZnID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfTtcblxuZXhwb3J0cy51cHRpbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAwIH07XG5cbmV4cG9ydHMuZnJlZW1lbSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG5cbmV4cG9ydHMudG90YWxtZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG59O1xuXG5leHBvcnRzLmNwdXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXSB9O1xuXG5leHBvcnRzLnR5cGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnQnJvd3NlcicgfTtcblxuZXhwb3J0cy5yZWxlYXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmFwcFZlcnNpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbn07XG5cbmV4cG9ydHMubmV0d29ya0ludGVyZmFjZXNcbj0gZXhwb3J0cy5nZXROZXR3b3JrSW50ZXJmYWNlc1xuPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7fSB9O1xuXG5leHBvcnRzLmFyY2ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnamF2YXNjcmlwdCcgfTtcblxuZXhwb3J0cy5wbGF0Zm9ybSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdicm93c2VyJyB9O1xuXG5leHBvcnRzLnRtcGRpciA9IGV4cG9ydHMudG1wRGlyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnL3RtcCc7XG59O1xuXG5leHBvcnRzLkVPTCA9ICdcXG4nO1xuXG5leHBvcnRzLmhvbWVkaXIgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAnLydcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0TWVzc2FnZSB7XG4gIC8vIEhBTkRMRV9BUElfQU5EX0NMSUVOVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9BUElfQU5EX0NMSUVOVCgpIHtcbiAgICByZXR1cm4gXCJIQU5ETEVfQVBJX0FORF9DTElFTlRcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJBUElfVE9fQ0xJRU5UX1RZUEVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENMSUVOVF9UT19BUElfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJDTElFTlRfVE9fQVBJX1RZUEVcIjtcbiAgfVxuXG4gIC8vIEhBTkRMRV9BUElfQU5EX0VYVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9FWFRfQU5EX0FQSSgpIHtcbiAgICByZXR1cm4gXCJib290QXBpXCI7XG4gIH1cbiAgc3RhdGljIGdldCBNRURJQV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJNRURJQV9UT19DTElFTlRfVFlQRVwiO1xuICB9XG4gIHN0YXRpYyBnZXQgRVhUX1RPX0FQSV9UWVBFKCkge1xuICAgIHJldHVybiBcIkVYVF9UT19BUElfVFlQRVwiO1xuICB9XG5cbiAgLy8gSEFORExFX0NMSUVOVF9BTkRfRVhUXG4gIHN0YXRpYyBnZXQgSEFORExFX0VYVF9BTkRfQ0xJRU5UKCkge1xuICAgIHJldHVybiBcImJvb3RFeHRlbnNpb25cIjtcbiAgfVxuICBzdGF0aWMgZ2V0IENMSUVOVF9UT19FWFRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJDTElFTlRfVE9fRVhUX1RZUEVcIjtcbiAgfVxuICBzdGF0aWMgZ2V0IEVYVF9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gXCJFWFRfVE9fQ0xJRU5UX1RZUEVcIjtcbiAgfVxufVxuIiwiaW1wb3J0IEFwcCBmcm9tIFwiYXBpL3N0b3JlL0FwcFwiO1xuaW1wb3J0IFVzZXIgZnJvbSBcImFwaS9zdG9yZS9Vc2VyXCI7XG5pbXBvcnQgUmFuayBmcm9tIFwiYXBpL3N0b3JlL1JhbmtcIjtcbmltcG9ydCBNZW51TG9ncyBmcm9tIFwiYXBpL3N0b3JlL01lbnVMb2dzXCI7XG5pbXBvcnQgUG9zdHMgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1wiO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lXCI7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrXCI7XG5pbXBvcnQgQW5hbHl6ZSBmcm9tIFwiYXBpL3N0b3JlL0FuYWx5emVcIjtcbmltcG9ydCBCb290T3B0aW9uIGZyb20gXCJhcGkvc3RvcmUvQm9vdE9wdGlvblwiO1xuaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuaW1wb3J0IEFjdGlvbkxvZyBmcm9tIFwiYXBpL3N0b3JlL0FjdGlvbkxvZ3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpU3RhdGUge1xuICByYW5rOiBSYW5rO1xuICBtZW51TG9nczogTWVudUxvZ3M7XG4gIHBvc3RzOiBQb3N0cztcbiAgcG9zdHNNdWx0aTogUG9zdHM7XG4gIHBvc3RzU2luZ2xlOiBQb3N0cztcbiAgcG9zdHNDaGlsZDogUG9zdHM7XG4gIHBvc3RzVGltZWxpbmU6IFBvc3RzVGltZWxpbmU7XG4gIHBvc3RzVGltZWxpbmVTdG9jazogUG9zdHNUaW1lbGluZVN0b2NrO1xuICBwb3N0c0xvZ3M6IFBvc3RzO1xuICBhbmFseXplOiBBbmFseXplO1xuICBib290T3B0aW9uOiBCb290T3B0aW9uO1xuICB0aHJlYWRzOiBbVGhyZWFkXTtcbiAgdGhyZWFkOiBUaHJlYWQ7XG4gIHRocmVhZERldGFpbDogVGhyZWFkO1xuICBhcHA6IEFwcDtcbiAgdXNlcjogVXNlcjtcbiAgYWN0aW9uTG9nOiBBY3Rpb25Mb2c7XG4gIGNvbnN0cnVjdG9yKHdpbmRvdzogYW55LCBib290T3B0aW9uOiBhbnkgPSB7fSwgY2FjaGVzOiBhbnkgPSB7fSkge1xuICAgIHRoaXMucmFuayA9IG5ldyBSYW5rKCk7XG4gICAgdGhpcy5tZW51TG9ncyA9IG5ldyBNZW51TG9ncyhjYWNoZXMubWVudUxvZ3MpO1xuICAgIHRoaXMucG9zdHMgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLnBvc3RzTXVsdGkgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLnBvc3RzU2luZ2xlID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c0NoaWxkID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICB0aGlzLnBvc3RzVGltZWxpbmVTdG9jayA9IG5ldyBQb3N0c1RpbWVsaW5lU3RvY2soKTtcbiAgICB0aGlzLnBvc3RzTG9ncyA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMuYW5hbHl6ZSA9IG5ldyBBbmFseXplKCk7XG4gICAgdGhpcy5ib290T3B0aW9uID0gbmV3IEJvb3RPcHRpb24oYm9vdE9wdGlvbik7XG4gICAgdGhpcy50aHJlYWQgPSBuZXcgVGhyZWFkKHdpbmRvdywgdGhpcy5ib290T3B0aW9uLCBjYWNoZXMudGhyZWFkKTtcbiAgICB0aGlzLnRocmVhZERldGFpbCA9IG5ldyBUaHJlYWQod2luZG93LCB0aGlzLmJvb3RPcHRpb24sIGNhY2hlcy50aHJlYWQpO1xuICAgIHRoaXMuYXBwID0gbmV3IEFwcChBcGlTdGF0ZS5nZXRBcHBQYXJhbXModGhpcy50aHJlYWQsIHRoaXMuYm9vdE9wdGlvbiwgY2FjaGVzKSk7XG4gICAgdGhpcy51c2VyID0gbmV3IFVzZXIoQXBpU3RhdGUuZ2V0VXNlclBhcmFtcyh0aGlzLCBjYWNoZXMpKTtcbiAgICB0aGlzLmFjdGlvbkxvZyA9IG5ldyBBY3Rpb25Mb2coKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBcHBQYXJhbXModGhyZWFkLCBib290T3B0aW9uLCBjYWNoZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgcm9vdFRpdGxlOiB0aHJlYWQudGl0bGUsXG4gICAgICAuLi5ib290T3B0aW9uLFxuICAgICAgLi4udGhyZWFkLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0VXNlclBhcmFtcyhzZWxmLCBjYWNoZXMpIHtcbiAgICBpZiAoY2FjaGVzICYmIGNhY2hlcy51c2VyICYmIGNhY2hlcy51c2VyLnVpZCkge1xuICAgICAgcmV0dXJuIHsgLi4uY2FjaGVzLnVzZXIgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlzcFRocmVhZFR5cGUgPSBzZWxmLnRocmVhZC5jaCA9PT0gc2VsZi5hcHAucm9vdENoID8gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgOiBBcHAuZGlzcFRocmVhZFR5cGVTaW5nbGU7XG4gICAgICByZXR1cm4geyBkaXNwVGhyZWFkVHlwZSB9O1xuICAgIH1cbiAgfVxuXG4gIGdldCBhcHBOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmFwcC5uYW1lO1xuICB9XG5cbiAgZ2V0IHRhbGtuSW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwLnRhbGtuSW5kZXg7XG4gIH1cblxuICBnZXQgY2goKSB7XG4gICAgcmV0dXJuIHRoaXMudGhyZWFkLmNoO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmsgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICAgIC8vICAgIHJldHVybiB0aGlzLmNyZWF0ZShwYXJhbXMpO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gXCJhcGkvc3RvcmUvU2NoZW1hXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVMb2dzIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSBbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDogW107XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHBhcmFtcyk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RNdWx0aSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uTG9ncyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVibGljQXBpIHtcbiAgY29uc3RydWN0b3IoY29yZUFwaSkge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXI6IFwiMjAyMC8wNi8wNFwiLFxuICAgICAgdHVuZTogKGNoOiBzdHJpbmcsIGJyb2FkY2FzdENhbGxiYWNrOiBGdW5jdGlvbikgPT4gY29yZUFwaS50dW5lKHsgdGhyZWFkOiB7IGNoIH0gfSwgYnJvYWRjYXN0Q2FsbGJhY2spLFxuICAgICAgcmFuazogKGNoOiBzdHJpbmcsIGVtaXRDYWxsYmFjazogRnVuY3Rpb24pID0+IGNvcmVBcGkucmFuayh7IHRocmVhZDogeyBjaCB9IH0sIGVtaXRDYWxsYmFjayksXG4gICAgICBmZXRjaFBvc3RzOiAoY2g6IHN0cmluZywgZW1pdENhbGxiYWNrOiBGdW5jdGlvbikgPT4gY29yZUFwaS5mZXRjaFBvc3RzKHsgdGhyZWFkOiB7IGNoIH0gfSwgZW1pdENhbGxiYWNrKSxcbiAgICAgIHBvc3Q6IChwYXJhbXMgPSB7fSwgZW1pdENhbGxiYWNrOiBGdW5jdGlvbikgPT4gY29yZUFwaS5wb3N0KHBhcmFtcywgZW1pdENhbGxiYWNrKSxcbiAgICAgIGdldFN0YXRlOiAoKSA9PiBjb3JlQXBpLmFwaVN0b3JlLmdldFN0YXRlKCksXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IGFwaVJlZHVjZXJzIGZyb20gXCJhcGkvcmVkdWNlcnNcIjtcbmltcG9ydCBtaWRkbGV3YXJlIGZyb20gXCJhcGkvbWlkZGxld2FyZS9cIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgTW9kdWxlIHtcbiAgICBob3Q6IGFueTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcGlTdG9yZShpbml0aWFsU3RhdGUgPSB7fSkge1xuICBsZXQgY29tcG9zZUVuaGFuY2VycyA9IG51bGw7XG4gIGxldCBtaWRkbGV3YXJlcyA9IFttaWRkbGV3YXJlLnVwZGF0ZUFjdGlvbl07XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgYXBpUmVkdWNlcnMsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGNvbXBvc2VFbmhhbmNlcnMgPyBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykpIDogYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKVxuICApO1xuXG4gIGlmIChtb2R1bGUuaG90KSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuLi9yZWR1Y2Vyc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0UmVkdWNlciA9IHJlcXVpcmUoXCIuLi9yZWR1Y2Vyc1wiKTtcbiAgICAgIHN0b3JlLnJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RvcmU7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgYXBwIGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHVzZXIgZnJvbSBcIi4vdXNlclwiO1xuaW1wb3J0IHJhbmsgZnJvbSBcIi4vcmFua1wiO1xuaW1wb3J0IHRocmVhZCBmcm9tIFwiLi90aHJlYWRcIjtcbmltcG9ydCB0aHJlYWRzIGZyb20gXCIuL3RocmVhZHNcIjtcbmltcG9ydCB0aHJlYWREZXRhaWwgZnJvbSBcIi4vdGhyZWFkRGV0YWlsXCI7XG5pbXBvcnQgYW5hbHl6ZSBmcm9tIFwiLi9hbmFseXplXCI7XG5pbXBvcnQgYm9vdE9wdGlvbiBmcm9tIFwiLi9ib290T3B0aW9uXCI7XG5pbXBvcnQgc2V0dGluZyBmcm9tIFwiLi9zZXR0aW5nXCI7XG5pbXBvcnQgcG9zdHMgZnJvbSBcIi4vcG9zdHNcIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lIGZyb20gXCIuL3Bvc3RzVGltZWxpbmVcIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lU3RvY2sgZnJvbSBcIi4vcG9zdHNUaW1lbGluZVN0b2NrXCI7XG5pbXBvcnQgcG9zdHNUaW1lbGluZVplcm8gZnJvbSBcIi4vcG9zdHNUaW1lbGluZVplcm9cIjtcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIGZyb20gXCIuL3Bvc3RzVGltZWxpbmVaZXJvQWZ0ZXJcIjtcbmltcG9ydCBwb3N0c011bHRpIGZyb20gXCIuL3Bvc3RzTXVsdGlcIjtcbmltcG9ydCBwb3N0c1NpbmdsZSBmcm9tIFwiLi9wb3N0c1NpbmdsZVwiO1xuaW1wb3J0IHBvc3RzQ2hpbGQgZnJvbSBcIi4vcG9zdHNDaGlsZFwiO1xuaW1wb3J0IGFjdGlvbmVkIGZyb20gXCIuL2FjdGlvbmVkXCI7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyRmlsZXMgPSB7XG4gIGFwcCxcbiAgdXNlcixcbiAgcmFuayxcbiAgdGhyZWFkLFxuICB0aHJlYWRzLFxuICB0aHJlYWREZXRhaWwsXG4gIGFuYWx5emUsXG4gIGJvb3RPcHRpb24sXG4gIHNldHRpbmcsXG4gIHBvc3RzLFxuICBwb3N0c1RpbWVsaW5lLFxuICBwb3N0c1RpbWVsaW5lU3RvY2ssXG4gIHBvc3RzVGltZWxpbmVaZXJvLFxuICBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyLFxuICBwb3N0c011bHRpLFxuICBwb3N0c1NpbmdsZSxcbiAgcG9zdHNDaGlsZCxcbiAgYWN0aW9uZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMocmVkdWNlckZpbGVzKTtcbiIsImltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IEFwcCgpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5hcHAgPyBuZXcgQXBwKGFjdGlvbi5hcHApIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFVzZXIgZnJvbSBcImFwaS9zdG9yZS9Vc2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBVc2VyKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnVzZXIgPyBzdGF0ZS5tZXJnZShhY3Rpb24udXNlcikgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUmFuayBmcm9tIFwiYXBpL3N0b3JlL1JhbmtcIjtcbmltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xuICBjb25zdCBzb3J0V2F0Y2hDbnQgPSAoYSwgYikgPT4ge1xuICAgIGlmIChhLmNoID09PSBhY3Rpb24uYXBwLnJvb3RDaCB8fCBiLmNoID09PSBhY3Rpb24uYXBwLnJvb3RDaCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChhLndhdGNoQ250IDwgYi53YXRjaENudCkgcmV0dXJuIDE7XG4gICAgaWYgKGEud2F0Y2hDbnQgPiBiLndhdGNoQ250KSByZXR1cm4gLTE7XG4gICAgcmV0dXJuIDA7XG4gIH07XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiT05fQ0xJQ0tfTVVMVElTVFJFQU1cIjpcbiAgICAgIGNvbnN0IG11bHRpc3RyZWFtUG9zdHMgPVxuICAgICAgICBhY3Rpb24uYXBwLmRpc3BUaHJlYWRUeXBlID09PSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aSA/IGFjdGlvbi5wb3N0c011bHRpIDogYWN0aW9uLnBvc3RzU2luZ2xlO1xuICAgICAgY29uc3QgbXVsdGlzdHJlYW1Qb3N0TGVuZ3RoID0gbXVsdGlzdHJlYW1Qb3N0cyAmJiBtdWx0aXN0cmVhbVBvc3RzLmxlbmd0aCA/IG11bHRpc3RyZWFtUG9zdHMubGVuZ3RoIDogMDtcbiAgICAgIGlmIChtdWx0aXN0cmVhbVBvc3RMZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5tYXAoKG1pKSA9PiB7XG4gICAgICAgICAgaWYgKGFjdGlvbi5hcHAucm9vdENoID09PSBtaS5jaCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4ubWksXG4gICAgICAgICAgICAgIC8vXHRcdFx0XHRcdFx0dGl0bGU6IG11bHRpc3RyZWFtUG9zdHNbIG11bHRpc3RyZWFtUG9zdExlbmd0aCAtIDFdLnRpdGxlLFxuICAgICAgICAgICAgICBmYXZpY29uOiBtdWx0aXN0cmVhbVBvc3RzW211bHRpc3RyZWFtUG9zdExlbmd0aCAtIDFdLmZhdmljb24sXG4gICAgICAgICAgICAgIHBvc3Q6IG11bHRpc3RyZWFtUG9zdHNbbXVsdGlzdHJlYW1Qb3N0TGVuZ3RoIC0gMV0ucG9zdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtaTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICAgIGlmIChhY3Rpb24uYXBwLmlzTGlua0NoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcG9zdExlbmd0aCA9IGFjdGlvbi5wb3N0cyAmJiBhY3Rpb24ucG9zdHMubGVuZ3RoID8gYWN0aW9uLnBvc3RzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChwb3N0TGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5tYXAoKG1pKSA9PiB7XG4gICAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IG1pLmNoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5taSxcbiAgICAgICAgICAgICAgdGl0bGU6IGFjdGlvbi50aHJlYWQudGl0bGUsXG4gICAgICAgICAgICAgIGZhdmljb246IGFjdGlvbi50aHJlYWQuZmF2aWNvbixcbiAgICAgICAgICAgICAgd2F0Y2hDbnQ6IGFjdGlvbi50aHJlYWQud2F0Y2hDbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGUgPT09IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5tYXAoKG1pKSA9PiB7XG4gICAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IG1pLmNoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5taSxcbiAgICAgICAgICAgICAgLy9cdFx0XHRcdFx0XHR0aXRsZTogYWN0aW9uLnBvc3RzWyBwb3N0TGVuZ3RoIC0gMV0udGl0bGUsXG4gICAgICAgICAgICAgIGZhdmljb246IGFjdGlvbi50aHJlYWQuZmF2aWNvbixcbiAgICAgICAgICAgICAgc3RhbXBJZDogYWN0aW9uLnBvc3RzW3Bvc3RMZW5ndGggLSAxXS5zdGFtcElkLFxuICAgICAgICAgICAgICAvL1x0XHRcdFx0XHRcdHdhdGNoQ250OiBhY3Rpb24udGhyZWFkLndhdGNoQ250LFxuICAgICAgICAgICAgICBwb3N0OiBhY3Rpb24ucG9zdHNbcG9zdExlbmd0aCAtIDFdLnBvc3QsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8qXG5cdFx0Y29uc29sZS5sb2coXCJNRU5VIElOREVYIENcIik7XG5cblx0XHRyZXR1cm4gc3RhdGUubWFwKCAoIG1pICkgPT4ge1xuXHRcdFx0aWYoIGFjdGlvbi5wb3N0c1sgMCBdLmNoID09PSBtaS5jaCApe1xuXHRcdFx0XHRyZXR1cm4gey4uLm1pLFxuLy9cdFx0XHRcdFx0ZmF2aWNvbjogYWN0aW9uLnBvc3RzWyBwb3N0TGVuZ3RoIC0gMSBdLmZhdmljb24sXG4vL1x0XHRcdFx0XHRwb3N0OiBhY3Rpb24ucG9zdHNbIHBvc3RMZW5ndGggLSAxIF0ucG9zdCxcbi8vXHRcdFx0XHRcdHdhdGNoQ250OiBhY3Rpb24udGhyZWFkLndhdGNoQ250XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNle1xuXHRcdFx0XHRyZXR1cm4gbWk7XG5cdFx0XHR9XG5cdFx0fSk7XG4qL1xuICAgICAgcmV0dXJuIHN0YXRlO1xuXG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpmZXRjaFBvc3RzXCI6XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmRpc2Nvbm5lY3RcIjpcbiAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFthY3Rpb24udGhyZWFkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAgIC5tYXAoKG1pKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnRocmVhZC5jaCA9PT0gbWkuY2gpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubWksIHdhdGNoQ250OiBhY3Rpb24udGhyZWFkLndhdGNoQ250IH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc29ydChzb3J0V2F0Y2hDbnQpO1xuICAgICAgfVxuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgcmV0dXJuIHN0YXRlLm1hcCgobWkpID0+IHtcbiAgICAgICAgLy8gcm9vdENoXG4gICAgICAgIGlmIChhY3Rpb24uYXBwLnJvb3RDaCA9PT0gbWkuY2gpIHtcbiAgICAgICAgICBpZiAoYWN0aW9uLmFwcC5tdWx0aXN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4ubWksXG4gICAgICAgICAgICAgIHRpdGxlOiBhY3Rpb24ucG9zdHNbMF0udGl0bGUsXG4gICAgICAgICAgICAgIHN0YW1wSWQ6IGFjdGlvbi5wb3N0c1swXS5zdGFtcElkLFxuICAgICAgICAgICAgICBmYXZpY29uOiBhY3Rpb24ucG9zdHNbMF0uZmF2aWNvbixcbiAgICAgICAgICAgICAgcG9zdDogYWN0aW9uLnBvc3RzWzBdLnBvc3QsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hpbGRDaFxuICAgICAgICBpZiAoYWN0aW9uLnBvc3RzWzBdLmNoID09PSBtaS5jaCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5taSxcbiAgICAgICAgICAgIHRpdGxlOiBhY3Rpb24ucG9zdHNbMF0udGl0bGUsXG4gICAgICAgICAgICBzdGFtcElkOiBhY3Rpb24ucG9zdHNbMF0uc3RhbXBJZCxcbiAgICAgICAgICAgIGZhdmljb246IGFjdGlvbi5wb3N0c1swXS5mYXZpY29uLFxuICAgICAgICAgICAgcG9zdDogYWN0aW9uLnBvc3RzWzBdLnBvc3QsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWk7XG4gICAgICB9KTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpyYW5rXCI6XG4gICAgICBjb25zb2xlLmxvZyhhY3Rpb24ucmFuayk7XG4gICAgICBpZiAoc3RhdGUgJiYgc3RhdGUubGVuZ3RoID4gMCAmJiBhY3Rpb24ucmFuayAmJiBhY3Rpb24ucmFuay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjdGlvbi5yYW5rLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiBbc3RhdGVbMF1dLmNvbmNhdChhY3Rpb24ucmFuayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYWN0aW9uLnJhbmsgPyBhY3Rpb24ucmFuayA6IHN0YXRlO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnJhbmsgPyBhY3Rpb24ucmFuayA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkKHt9LCB7fSwge30pLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi50aHJlYWQgPyBzdGF0ZS5tZXJnZShhY3Rpb24udGhyZWFkKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBUaHJlYWRzIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkcygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi50aHJlYWRzID8gc3RhdGUubWVyZ2UoYWN0aW9uLnRocmVhZHMpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFRocmVhZCBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkKHt9LCB7fSwge30pLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi50aHJlYWREZXRhaWwgPyBzdGF0ZS5tZXJnZShhY3Rpb24udGhyZWFkRGV0YWlsKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBBbmFseXplIGZyb20gXCJhcGkvc3RvcmUvQW5hbHl6ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgQW5hbHl6ZSgpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5hbmFseXplID8gc3RhdGUubWVyZ2UoYWN0aW9uLmFuYWx5emUpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IEJvb3RPcHRpb24gZnJvbSBcImFwaS9zdG9yZS9Cb290T3B0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBCb290T3B0aW9uKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmJvb3RPcHRpb24gPyBzdGF0ZS5tZXJnZShhY3Rpb24uYm9vdE9wdGlvbikgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgU2V0dGluZyBmcm9tIFwiYXBpL3N0b3JlL1NldHRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFNldHRpbmcoKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24uc2V0dGluZyA/IHN0YXRlLm1lcmdlKGFjdGlvbi5zZXR0aW5nKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldHRpbmcgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCBjbGllbnQgPSBwYXJhbXMgJiYgcGFyYW1zLmNsaWVudCA/IHBhcmFtcy5jbGllbnQgOiB7fTtcbiAgICBjb25zdCBjb21tb24gPSBwYXJhbXMgJiYgcGFyYW1zLmNvbW1vbiA/IHBhcmFtcy5jb21tb24gOiB7fTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBwYXJhbXMgJiYgcGFyYW1zLnNlcnZlciA/IHBhcmFtcy5zZXJ2ZXIgOiB7fTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xuICAgICAgY2xpZW50LFxuICAgICAgY29tbW9uLFxuICAgICAgc2VydmVyXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0cyBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBQb3N0cygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5wb3N0cyA/IG5ldyBQb3N0cyhhY3Rpb24ucG9zdHMpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogYW55ID0gbmV3IFBvc3RzVGltZWxpbmUoKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICAgIHJldHVybiBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgIGNhc2UgXCJVTk1PVU5UX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICByZXR1cm4gc3RhdGUubWFwKChwdCkgPT4ge1xuICAgICAgICBwdC5kaXNwRmxnID0gcHQuY3VycmVudFRpbWUgPD0gYWN0aW9uLm1lZGlhQ3VycmVudFRpbWU7XG4gICAgICAgIHJldHVybiBwdDtcbiAgICAgIH0pO1xuICAgIGNhc2UgXCJDTEVBUl9QT1NUU19USU1FTElORVwiOlxuICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1wiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIk5FWFRfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNUaW1lbGluZSAmJiBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUkVWX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzVGltZWxpbmUgJiYgYWN0aW9uLnBvc3RzVGltZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgaWYgKFxuICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSAmJlxuICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lWzBdLnVpZCA9PT0gYWN0aW9uLnVzZXIudWlkICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lWzBdLmNoID09PSBhY3Rpb24udGhyZWFkLmNoXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNUaW1lbGluZSwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0c1RpbWVsaW5lU3RvY2sgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2tcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBhbnkgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCksIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jayA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9ja10gOiBzdGF0ZTtcbiAgICBjYXNlIFwiQ0xFQVJfUE9TVFNfVElNRUxJTkVcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrXSA6IHN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jayA/IG5ldyBQb3N0c1RpbWVsaW5lU3RvY2soYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jaykgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBQb3N0VGltZWxpbmVaZXJvIGZyb20gXCJhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVplcm9cIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBhbnkgPSBuZXcgUG9zdFRpbWVsaW5lWmVybygpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybyA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvXSA6IHN0YXRlO1xuICAgIGNhc2UgXCJDTEVBUl9QT1NUU19USU1FTElORVwiOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybyA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvXSA6IHN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvID8gbmV3IFBvc3RUaW1lbGluZVplcm8oYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFRpbWVsaW5lWmVybyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyb0FmdGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogYW55ID0gbmV3IFBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIoKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXJdIDogc3RhdGU7XG4gICAgY2FzZSBcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXCI6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIgPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyXSA6IHN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIgPyBuZXcgUG9zdHNUaW1lbGluZVplcm9BZnRlcihhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlcikgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RUaW1lbGluZU90aGVyVGhhblplcm8ge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0cyBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzXCI7XG5pbXBvcnQgY29uZiBmcm9tIFwiY29tbW9uL2NvbmZcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBhbnkgPSBuZXcgUG9zdHMoKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiT05fQ0xJQ0tfTVVMVElTVFJFQU1cIjpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNNdWx0aTtcbiAgICBjYXNlIFwiQ0xJRU5UX1RPX1NFUlZFUltFTUlUXTpjaGFuZ2VUaHJlYWRcIjpcbiAgICAgIHJldHVybiBuZXcgUG9zdHMoKTtcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCI6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzTXVsdGkgJiYgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoYWN0aW9uLmFwcC5pc1Jvb3RDaCkge1xuICAgICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzTXVsdGldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNNdWx0aSAmJiBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24uYXBwLnJvb3RDaCA9PT0gYWN0aW9uLnRocmVhZC5jaCkge1xuICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c011bHRpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c011bHRpICYmIGFjdGlvbi5wb3N0c011bHRpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1vcmVQb3N0TXVsaXQgPSBbXTtcblxuICAgICAgICBpZiAoc3RhdGUubGVuZ3RoICsgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gY29uZi5maW5kT25lTGltaXRDbnQpIHtcbiAgICAgICAgICBtb3JlUG9zdE11bGl0ID0gWy4uLmFjdGlvbi5wb3N0c011bHRpLCAuLi5zdGF0ZV07XG4gICAgICAgICAgcmV0dXJuIG1vcmVQb3N0TXVsaXQuc2xpY2UoMCwgY29uZi5maW5kT25lTGltaXRDbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzTXVsdGksIC4uLnN0YXRlXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0c1NpbmdsZSBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzU2luZ2xlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogYW55ID0gbmV3IFBvc3RzU2luZ2xlKCksIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIk9OX0NMSUNLX01VTFRJU1RSRUFNXCI6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzU2luZ2xlO1xuICAgIGNhc2UgXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZFwiOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0c1NpbmdsZSgpO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNTaW5nbGUgJiYgYWN0aW9uLnBvc3RzU2luZ2xlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzU2luZ2xlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmVcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNTaW5nbGUgJiYgYWN0aW9uLnBvc3RzU2luZ2xlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNTaW5nbGUsIC4uLnN0YXRlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdHMgZnJvbSBcImFwaS9zdG9yZS9Qb3N0c1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IGFueSA9IG5ldyBQb3N0cygpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZFwiOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0cygpO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcIjpcbiAgICBjYXNlIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNDaGlsZCAmJiBhY3Rpb24ucG9zdHNDaGlsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24udGhyZWFkLmNoID09PSBhY3Rpb24ucG9zdHNbMF0uY2gpIHtcbiAgICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNDaGlsZF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmVcIjpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNDaGlsZCAmJiBhY3Rpb24ucG9zdHNDaGlsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzQ2hpbGQsIC4uLnN0YXRlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBbXSwgYWN0aW9uKSA9PiBbYWN0aW9uLnR5cGUsIC4uLnN0YXRlXTtcbiIsImltcG9ydCBTY2hlbWEgZnJvbSBcImFwaS9zdG9yZS9TY2hlbWFcIjtcbmltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcbmltcG9ydCBQb3N0cyBmcm9tIFwiYXBpL3N0b3JlL1Bvc3RzXCI7XG5pbXBvcnQgVGhyZWFkIGZyb20gXCJhcGkvc3RvcmUvVGhyZWFkXCI7XG5pbXBvcnQgVGhyZWFkcyBmcm9tIFwiYXBpL3N0b3JlL1RocmVhZHNcIjtcbmltcG9ydCBzdG9yYWdlIGZyb20gXCJhcGkvbWFwVG9TdGF0ZVRvUHJvcHMvc3RvcmFnZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZUFjdGlvbjogKHN0b3JlKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBpZiAoYWN0aW9uKSB7XG4gICAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgICBhY3Rpb24uYXBwLmFjdGlvbmVkID0gYWN0aW9uLnR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGZ1bmN0aW9uc1thY3Rpb24udHlwZV0pIHtcbiAgICAgIGFjdGlvbiA9IGZ1bmN0aW9uc1thY3Rpb24udHlwZV0oc3RhdGUsIGFjdGlvbik7XG4gICAgfVxuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIG5leHQoYWN0aW9uKTtcbiAgICB9XG4gIH0sXG59O1xuXG5jb25zdCBmdW5jdGlvbnMgPSB7XG4gIFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmZldGNoUG9zdHNcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLnR1bmVkID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIlNFUlZFUl9UT19BUElbRU1JVF06dXBkYXRlVGhyZWFkXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZHMgPSBUaHJlYWRzLmdldE1lcmdlZFRocmVhZHMoc3RhdGUudGhyZWFkcywgYWN0aW9uLnRocmVhZCk7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCI6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcFtgb2Zmc2V0JHthY3Rpb24uYXBwLmRpc3BUaHJlYWRUeXBlfUZpbmRJZGBdID0gYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5kZXRhaWxDaCA9IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC5kZXNjID0gYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcy50aXRsZTtcbiAgICBhY3Rpb24uYXBwLmlzUm9vdENoID0gYWN0aW9uLmFwcC5yb290Q2ggPT09IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC5pc01lZGlhQ2ggPSBBcHAuZ2V0SXNNZWRpYUNoKGFjdGlvbi50aHJlYWQuY2gpO1xuICAgIGFjdGlvbi5hcHAuaXNUb2dnbGVNdWx0aXN0cmVhbSA9IGZhbHNlO1xuICAgIGFjdGlvbiA9IHsgLi4uUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHMoYWN0aW9uLCBzdGF0ZSkgfTtcbiAgICBhY3Rpb24udGhyZWFkLnRpdGxlID0gYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcy50aXRsZTtcbiAgICBhY3Rpb24udGhyZWFkLmhhc1NsYXNoID0gU2NoZW1hLmdldEJvb2woYWN0aW9uLnRocmVhZC5oYXNTbGFzaCk7XG4gICAgYWN0aW9uLnRocmVhZHMgPSBUaHJlYWRzLmdldE1lcmdlZFRocmVhZHMoc3RhdGUudGhyZWFkcywgYWN0aW9uLnRocmVhZCk7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGlmIChhY3Rpb24uYXBwLmlzUm9vdENoKSB7XG4gICAgICBhY3Rpb24uYXBwLnJvb3RUaXRsZSA9IGFjdGlvbi50aHJlYWQudGl0bGU7XG4gICAgfVxuICAgIGlmIChhY3Rpb24uYXBwLmlzTWVkaWFDaCkge1xuICAgICAgY29uc3Qgc3JjID0gQXBwLmdldE1lZGlhU3JjKGFjdGlvbi50aHJlYWQucHJvdG9jb2wsIGFjdGlvbi50aHJlYWQuY2gpO1xuICAgICAgYWN0aW9uLmFwcC5jaFR5cGUgPSBBcHAuZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpO1xuICAgICAgYWN0aW9uID0gc3RvcmFnZS5zZXRTdG9yYWdlUG9zdHNUaW1lbGluZShhY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb24uYXBwLmNoVHlwZSA9IEFwcC5tZWRpYVRhZ1R5cGVObztcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZFwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAgPSBhY3Rpb24uYXBwID8geyAuLi5zdGF0ZS5hcHAsIC4uLmFjdGlvbi5hcHAgfSA6IHN0YXRlLmFwcDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0VGltZWxpbmVGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldE11bHRpRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRTaW5nbGVGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldENoaWxkRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRMb2dzRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLnRocmVhZCA9IGFjdGlvbi50aHJlYWQgPyB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9IDogc3RhdGUudGhyZWFkO1xuICAgIGFjdGlvbi5wb3N0cyA9IG5ldyBQb3N0cygpO1xuICAgIGFjdGlvbi5wb3N0c011bHRpID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IG5ldyBQb3N0cygpO1xuICAgIGFjdGlvbi5wb3N0c1NpbmdsZSA9IG5ldyBQb3N0cygpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIENMT1NFX0xJTktTOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAgPSBhY3Rpb24uYXBwID8geyAuLi5zdGF0ZS5hcHAsIC4uLmFjdGlvbi5hcHAgfSA6IHN0YXRlLmFwcDtcbiAgICBhY3Rpb24udGhyZWFkID0gYWN0aW9uLnRocmVhZCA/IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH0gOiBzdGF0ZS50aHJlYWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gc3RhdGU7XG4gICAgY29uc3QgcG9zdExlbmd0aCA9IGFjdGlvbi5wb3N0cy5sZW5ndGggLSAxO1xuICAgIGFjdGlvbi5hcHAuaW5wdXRTdGFtcElkID0gMDtcbiAgICBhY3Rpb24udXNlciA9IHVzZXI7XG5cbiAgICBjb25zdCBlbW90aW9uS2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbi50aHJlYWQuZW1vdGlvbnMpO1xuXG4gICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IGFjdGlvbi5wb3N0c1twb3N0TGVuZ3RoXS5jaCAmJiBlbW90aW9uS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBhY3Rpb25FbW90aW9ucyA9IHsgLi4uYWN0aW9uLnRocmVhZC5lbW90aW9ucyB9O1xuICAgICAgYWN0aW9uLnRocmVhZC5lbW90aW9ucyA9IHsgLi4uc3RhdGUudGhyZWFkLmVtb3Rpb25zIH07XG5cbiAgICAgIE9iamVjdC5rZXlzKGFjdGlvbkVtb3Rpb25zKS5mb3JFYWNoKChlbW90aW9uTW9kZWxLZXkpID0+IHtcbiAgICAgICAgT2JqZWN0LmtleXMoYWN0aW9uRW1vdGlvbnNbZW1vdGlvbk1vZGVsS2V5XSkuZm9yRWFjaCgoZW1vdGlvbktleSkgPT4ge1xuICAgICAgICAgIGFjdGlvbi50aHJlYWQuZW1vdGlvbnNbZW1vdGlvbk1vZGVsS2V5XVtlbW90aW9uS2V5XSA9XG4gICAgICAgICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zW2Vtb3Rpb25Nb2RlbEtleV1bZW1vdGlvbktleV0gKyBhY3Rpb25FbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zID0gc3RhdGUudGhyZWFkLmVtb3Rpb25zO1xuICAgIH1cbiAgICBhY3Rpb24gPSBQb3N0cy5nZXRBbnlBY3Rpb25Qb3N0cyhhY3Rpb24sIHN0YXRlKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0RmluZElkID0gQXBwLmdldE9mZnNldEZpbmRJZCh7IHBvc3RzOiBhY3Rpb24ucG9zdHMgfSk7XG4gICAgYWN0aW9uLmFwcFtgb2Zmc2V0JHthY3Rpb24uYXBwLmRpc3BUaHJlYWRUeXBlfUZpbmRJZGBdID0gYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uID0gUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHMoYWN0aW9uLCBzdGF0ZSk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZERldGFpbFwiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGRlbGV0ZSBhY3Rpb24udGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpjaGFuZ2VUaHJlYWREZXRhaWxcIjogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmRldGFpbENoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLnRocmVhZERldGFpbC50aXRsZSA9IGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMudGl0bGU7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbC5lbW90aW9ucyA9IHsgLi4uc3RhdGUudGhyZWFkc1thY3Rpb24uYXBwLmRldGFpbENoXS5lbW90aW9ucyB9O1xuICAgIGNvbnNvbGUubG9nKGFjdGlvbi50aHJlYWREZXRhaWwuZW1vdGlvbnMucnVzc2VsbFNpbXBsZSk7XG4gICAgLy8gVE9ETyDlj6TjgYTku5Xmp5jjgaDjgahoYXNTbGFzaOOBjOagvOe0jeOBleOCjOOBpuOBhOOBquOBhGNvbGxlY3Rpb27jgYzlrZjlnKjjgZnjgotcbiAgICAvLyBoYXNTbGFzaOOBr2xvY2F0aW9u44GM5Y+C54Wn44Gn44GN44Gq44GEUE9SVEFM44Gg44Go5q2j44GX44GE5YCk44KS5Y+W5b6X5Ye65p2l44Gq44GE44Gf44KB44CBXG4gICAgLy8g5ouh5by15qmf6IO944Gn44GvR0VUX0NMSUVOVF9NRVRBU+OCkuWun+ihjOOBl+OBpuato+OBl+OBhOWApOOCkuOCteODvOODkOODvOOBq+a4oeOBl+OBpuabtOaWsOOBl+OBpuOChOOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2ggPVxuICAgICAgYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9PT0gbnVsbCA/IHRydWUgOiBTY2hlbWEuZ2V0Qm9vbChhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoKTtcbiAgICBkZWxldGUgYWN0aW9uLnRocmVhZDtcbiAgICBhY3Rpb24udGhyZWFkID0gYWN0aW9uO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIE9OX0NMSUNLX1RPX01VTFRJX1RIUkVBRDogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlzTGlua0NoID0gZmFsc2U7XG4gICAgYWN0aW9uLmFwcC5pc1Jvb3RDaCA9IGFjdGlvbi50aHJlYWQuY2ggPT09IHN0YXRlLmFwcC5yb290Q2g7XG5cbiAgICBpZiAoc3RhdGUudGhyZWFkc1thY3Rpb24udGhyZWFkLmNoXSkge1xuICAgICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZHNbYWN0aW9uLnRocmVhZC5jaF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIE9OX0NMSUNLX1RPX1RJTUVMSU5FX1RIUkVBRDogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBjb25zdCBjaCA9IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLnRocmVhZC5jaCA9IGNoO1xuICAgIGNvbnN0IHNyYyA9IEFwcC5nZXRNZWRpYVNyYyhhY3Rpb24udGhyZWFkLnByb3RvY29sLCBhY3Rpb24udGhyZWFkLmNoKTtcbiAgICBhY3Rpb24udGhyZWFkLmZpbmRUeXBlID0gVGhyZWFkLmdldEZpbmRUeXBlRnJvbVNyYyhzcmMpO1xuICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gW107XG4gICAgYWN0aW9uLmFwcC5pc01lZGlhQ2ggPSB0cnVlO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0RmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRDaGlsZEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIE9OX0NMSUNLX1RPX1NJTkdMRV9USFJFQUQ6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLmFwcCA9IHN0YXRlLmFwcDtcbiAgICBhY3Rpb24uYXBwLmlzTGlua0NoID0gZmFsc2U7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgT05fQ0xJQ0tfVE9fQ0hJTERfVEhSRUFEOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi5wb3N0c0NoaWxkID0gW107XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldENoaWxkRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgT05fQ0xJQ0tfTUVOVTogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmRlc2MgPSBhY3Rpb24udWkubWVudUNvbXBvbmVudDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICBSRVNJWkVfRU5EX1dJTkRPVzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIE9OX0NMSUNLX1RPR0dMRV9ESVNQX0RFVEFJTDogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAvLyBUT0RPIOWPpOOBhOS7leanmOOBoOOBqGhhc1NsYXNo44GM5qC857SN44GV44KM44Gm44GE44Gq44GEY29sbGVjdGlvbuOBjOWtmOWcqOOBmeOCi1xuICAgIC8vIGhhc1NsYXNo44GvbG9jYXRpb27jgYzlj4LnhafjgafjgY3jgarjgYRQT1JUQUzjgaDjgajmraPjgZfjgYTlgKTjgpLlj5blvpflh7rmnaXjgarjgYTjgZ/jgoHjgIFcbiAgICAvLyDmi6HlvLXmqZ/og73jgafjga9HRVRfQ0xJRU5UX01FVEFT44KS5a6f6KGM44GX44Gm5q2j44GX44GE5YCk44KS44K144O844OQ44O844Gr5rih44GX44Gm5pu05paw44GX44Gm44KE44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID09PSBudWxsID8gdHJ1ZSA6IFNjaGVtYS5nZXRCb29sKGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2gpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFRPR0dMRV9CVUJCTEVfUE9TVDogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gIFNUQVJUX0xJTktfTUVESUE6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5pc0xpbmtDaCA9IHRydWU7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgR0VUX0NMSUVOVF9NRVRBUzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBsZXQgdXBkYXRlRmxnID0gZmFsc2U7XG4gICAgbGV0IHsgY2xpZW50TWV0YXMgfSA9IGFjdGlvbjtcbiAgICBsZXQgeyBzZXJ2ZXJNZXRhcyB9ID0gc3RhdGUudGhyZWFkO1xuICAgIGFjdGlvbi50aHJlYWQgPSB7fTtcblxuICAgIC8vIE1ldGFzXG4gICAgT2JqZWN0LmtleXMoY2xpZW50TWV0YXMpLmZvckVhY2goKGtleSwgaSkgPT4ge1xuICAgICAgaWYgKGNsaWVudE1ldGFzW2tleV0gJiYgY2xpZW50TWV0YXNba2V5XSAhPT0gXCJcIiAmJiBzZXJ2ZXJNZXRhc1trZXldICE9PSBjbGllbnRNZXRhc1trZXldKSB7XG4gICAgICAgIGlmICghYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcykge1xuICAgICAgICAgIGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVGbGcgPSB0cnVlO1xuICAgICAgICBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzW2tleV0gPSBjbGllbnRNZXRhc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHVwZGF0ZUZsZykge1xuICAgICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uc3RhdGUudGhyZWFkRGV0YWlsIH07XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsLnNlcnZlck1ldGFzID0ge1xuICAgICAgICAuLi5hY3Rpb24udGhyZWFkRGV0YWlsLnNlcnZlck1ldGFzLFxuICAgICAgICAuLi5hY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCBkZWZpbmUgZnJvbSBcImNvbW1vbi9kZWZpbmVcIjtcbmltcG9ydCBBcHAgZnJvbSBcImFwaS9zdG9yZS9BcHBcIjtcbmltcG9ydCBVaSBmcm9tIFwiY2xpZW50L3N0b3JlL1VpXCI7XG5pbXBvcnQgVGFsa25TZXNzaW9uIGZyb20gXCJjbGllbnQvb3BlcmF0aW9ucy9UYWxrblNlc3Npb25cIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XCI6IHNldFN0b3JhZ2VIdG1sUG9zdHMsXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXCI6IHNldFN0b3JhZ2VIdG1sUG9zdHMsXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXCI6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICAvL3NldFN0b3JhZ2VQb3N0cyggc3RhdGUsIHByb3BzICk7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0sXG4gIFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpjaGFuZ2VUaHJlYWRcIjogKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgYXBwIH0gPSBzdGF0ZTtcbiAgICBjb25zdCB7IHJvb3RDaCB9ID0gYXBwO1xuICAgIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICAgIGNvbnN0IHBvc3RLZXkgPSBhcHAuZGlzcFRocmVhZFR5cGUgPT09IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpID8gc3RvcmFnZUtleS5wb3N0U2luZ2xlIDogc3RvcmFnZUtleS5wb3N0TXVsdGk7XG4gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleVtwb3N0S2V5XSwgW10pO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICAvLyAgXCJPTl9fQ0xJQ0tfTVVMVElTVFJFQU1cIjogc2V0U3RvcmFnZVBvc3RzLFxuICBPTl9DTElDS19NRU5VOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyByb290Q2ggfSA9IHN0YXRlLmFwcDtcbiAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5LmFwcCwgc3RhdGUuYXBwKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSxcbiAgUkVTSVpFX0VORF9XSU5ET1c6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSxcbiAgc2V0U3RvcmFnZVBvc3RzLFxuICBzZXRTdG9yYWdlSHRtbFBvc3RzLFxuICBzZXRTdG9yYWdlUG9zdHNUaW1lbGluZSxcbiAgZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmUsXG4gIGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lWmVybyxcbn07XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VQb3N0cyhzdGF0ZSwgcHJvcHMpIHtcbiAgY29uc3QgeyBhcHAgfSA9IHN0YXRlO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIHN0YXRlID0gc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUoc3RhdGUpO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzZXRTdG9yYWdlSHRtbFBvc3RzKHN0YXRlLCBwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0U3RvcmFnZUh0bWxQb3N0cyhzdGF0ZSwgcHJvcHMpIHtcbiAgY29uc3QgeyBhcHAgfSA9IHN0YXRlO1xuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgaWYgKGFwcC5pc1Jvb3RDaCkge1xuICAgIGNvbnN0IHsgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUgfSA9IHN0YXRlO1xuICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKGFwcC5yb290Q2gsIHN0b3JhZ2VLZXkucG9zdHNNdWx0aSwgcG9zdHNNdWx0aSk7XG4gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2UoYXBwLnJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c1NpbmdsZSwgcG9zdHNTaW5nbGUpO1xuICB9XG5cbiAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG59XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFjdGlvbikge1xuICBjb25zdCB7IGFwcCwgdGhyZWFkLCBwb3N0c1RpbWVsaW5lOiBwb3N0c1RpbWVsaW5lQWxsIH0gPSBhY3Rpb247XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIGNvbnN0IHBvc3RzVGltZWxpbmVBbGxMZW5ndGggPSBwb3N0c1RpbWVsaW5lQWxsICYmIHBvc3RzVGltZWxpbmVBbGwubGVuZ3RoID8gcG9zdHNUaW1lbGluZUFsbC5sZW5ndGggOiAwO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVyb1NlY29uZCA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzVGltZWxpbmVBbGxMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvc3RzVGltZWxpbmVBbGxbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQucHVzaChwb3N0c1RpbWVsaW5lQWxsW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc3RzVGltZWxpbmUucHVzaChwb3N0c1RpbWVsaW5lQWxsW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IHBvc3RzVGltZWxpbmVaZXJvU2Vjb25kO1xuICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHRocmVhZC5jaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lWmVybywgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQpO1xuICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHRocmVhZC5jaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lLCBwb3N0c1RpbWVsaW5lKTtcbiAgfVxuICByZXR1cm4gYWN0aW9uO1xufVxuLypcbmZ1bmN0aW9uIGFkZFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFjdGlvbikge1xuICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSB9ID0gYWN0aW9uO1xuXG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIGNvbnN0IGFkZFBvc3RzVGltZWxpbmUgPSBwb3N0c1RpbWVsaW5lWzBdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVybyA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lID0gW107XG4gICAgbGV0IHBvc3RzVGltZWxpbmVaZXJvTGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zdHNUaW1lbGluZUxlbmd0aCA9IDA7XG5cbiAgICBpZiAoYWRkUG9zdHNUaW1lbGluZS5jdXJyZW50VGltZSA9PT0gMCkge1xuICAgICAgcG9zdHNUaW1lbGluZVplcm8gPSBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8oYXBwLnJvb3RDaCk7XG4gICAgICBwb3N0c1RpbWVsaW5lWmVyb0xlbmd0aCA9IHBvc3RzVGltZWxpbmVaZXJvLmxlbmd0aDtcblxuICAgICAgLy8gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZVplcm9MZW5ndGg7IGkrKyl7XG4gICAgICAvLyAgICAgIH1cbiAgICAgIC8vICAgICAgcC5zcGxpY2UoNCwwLHAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdHNUaW1lbGluZSA9IGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFwcC5yb290Q2gpO1xuICAgICAgcG9zdHNUaW1lbGluZUxlbmd0aCA9IHBvc3RzVGltZWxpbmUubGVuZ3RoO1xuICAgICAgaWYgKHBvc3RzVGltZWxpbmVMZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZUxlbmd0aDsgaSsrKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuKi9cbmZ1bmN0aW9uIGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lWmVybyhyb290Q2gpIHtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGNvbnN0IHJlc3BvbnNlID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzVGltZWxpbmVaZXJvKTtcbiAgcmV0dXJuIHJlc3BvbnNlLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXJyYXlcIiA/IHJlc3BvbnNlIDogW107XG59XG5cbmZ1bmN0aW9uIGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKHJvb3RDaCkge1xuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgY29uc3QgcmVzcG9uc2UgPSBUYWxrblNlc3Npb24uZ2V0U3RvcmFnZShyb290Q2gsIHN0b3JhZ2VLZXkucG9zdHNUaW1lbGluZSk7XG4gIHJldHVybiByZXNwb25zZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFycmF5XCIgPyByZXNwb25zZSA6IFtdO1xufVxuIiwiaW1wb3J0IGRlZmluZSBmcm9tIFwiY29tbW9uL2RlZmluZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWxrblNlc3Npb24ge1xuICBzdGF0aWMgZ2V0QmFzZUtleShjaCkge1xuICAgIHJldHVybiBgJHtkZWZpbmUuc3RvcmFnZUtleS5iYXNlS2V5fSR7Y2h9YDtcbiAgfVxuXG4gIHN0YXRpYyBzZXRTdG9yYWdlKHJvb3RDaCwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIGNvbnN0IGJhc2VLZXkgPSBUYWxrblNlc3Npb24uZ2V0QmFzZUtleShyb290Q2gpO1xuICAgICAgbGV0IGl0ZW1zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShiYXNlS2V5KSk7XG4gICAgICBpdGVtcyA9IEpTT04uc3RyaW5naWZ5KHsgLi4uaXRlbXMsIFtrZXldOiB2YWx1ZSB9KTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGJhc2VLZXksIGl0ZW1zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFN0b3JhZ2Uocm9vdENoLCBrZXkpIHtcbiAgICBjb25zdCBiYXNlS2V5ID0gVGFsa25TZXNzaW9uLmdldEJhc2VLZXkocm9vdENoKTtcbiAgICBjb25zdCBpdGVtID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShiYXNlS2V5KSk7XG4gICAgcmV0dXJuIGl0ZW0gJiYgaXRlbVtrZXldID8gaXRlbVtrZXldIDoge307XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2FjaGVzKHJvb3RDaCkge1xuICAgIGNvbnN0IG1lbnVMb2dzID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleS5tZW51TG9ncyk7XG4gICAgY29uc3QgYXBwID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleS5hcHApO1xuICAgIGNvbnN0IHRocmVhZCA9IFRhbGtuU2Vzc2lvbi5nZXRTdG9yYWdlKHJvb3RDaCwgZGVmaW5lLnN0b3JhZ2VLZXkudGhyZWFkKTtcbiAgICBjb25zdCBzZXR0aW5nID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleS5zZXR0aW5nKTtcbiAgICByZXR1cm4geyBtZW51TG9ncywgYXBwLCB0aHJlYWQsIHNldHRpbmcgfTtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmluZSBmcm9tIFwiY29tbW9uL2RlZmluZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZVN0eWxlOiAoeyBzdHlsZUtleSwgZWxlVHlwZSwgdGFnTmFtZSwgc3R5bGUgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlVQREFURV9TVFlMRVwiLFxuICAgICAgc3R5bGVLZXksXG4gICAgICBlbGVUeXBlLFxuICAgICAgdGFnTmFtZSxcbiAgICAgIHN0eWxlLFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb2dnbGVQb3N0czogKHsgYXBwIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19UT0dHTEVfUE9TVFNcIixcbiAgICAgIGFwcCxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrVG9UaW1lbGluZVRocmVhZDogKHsgYXBwLCB0aHJlYWQgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPX1RJTUVMSU5FX1RIUkVBRFwiLFxuICAgICAgYXBwLFxuICAgICAgdGhyZWFkOiB7IGNoOiB0aHJlYWQuY2ggfSxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrVG9NdWx0aVRocmVhZDogKHsgYXBwLCB0aHJlYWQgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPX01VTFRJX1RIUkVBRFwiLFxuICAgICAgYXBwLFxuICAgICAgdGhyZWFkOiB7IGNoOiB0aHJlYWQuY2ggfSxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrVG9TaW5nbGVUaHJlYWQ6ICh7IGFwcCwgdGhyZWFkIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19UT19TSU5HTEVfVEhSRUFEXCIsXG4gICAgICBhcHAsXG4gICAgICB0aHJlYWQ6IHsgY2g6IHRocmVhZC5jaCB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb0NoaWxkVGhyZWFkOiAoeyBhcHAsIHRocmVhZCB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfVE9fQ0hJTERfVEhSRUFEXCIsXG4gICAgICBhcHAsXG4gICAgICB0aHJlYWQ6IHsgY2g6IHRocmVhZC5jaCB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb0xvZ3NUaHJlYWQ6ICh7IGFwcCwgdGhyZWFkIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19UT19MT0dTX1RIUkVBRFwiLFxuICAgICAgYXBwLFxuICAgICAgdGhyZWFkOiB7IGNoOiB0aHJlYWQuY2ggfSxcbiAgICB9O1xuICB9LFxuICBvbkNoYW5nZUlucHV0UG9zdDogKGlucHV0UG9zdCA9IFwiXCIpID0+IHtcbiAgICBpbnB1dFBvc3QgPSB0eXBlb2YgaW5wdXRQb3N0ID09PSBcInN0cmluZ1wiID8gaW5wdXRQb3N0IDogXCJcIjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DSEFOR0VfSU5QVVRfUE9TVFwiLFxuICAgICAgYXBwOiB7IGlucHV0UG9zdCB9LFxuICAgIH07XG4gIH0sXG4gIHRvZ2dsZURpc3BNYWluOiAoYXBwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVE9HR0xFX0RJU1BfTUFJTlwiLFxuICAgICAgYXBwLFxuICAgIH07XG4gIH0sXG4gIHRvZ2dsZURpc3BCb2FyZDogKGFwcCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlRPR0dMRV9ESVNQX0JPQVJEXCIsXG4gICAgICBhcHAsXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1RvZ2dsZU1haW46ICh7IGFwcCwgdWkgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX1RPR0dMRV9NQUlOXCIsXG4gICAgICBhcHAsXG4gICAgICB1aSxcbiAgICB9O1xuICB9LFxuICB0b2dnbGVCdWJibGVQb3N0OiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVE9HR0xFX0JVQkJMRV9QT1NUXCIsXG4gICAgICB1aTogeyBpc1RyYW5zaXRpb246IGZhbHNlIH0sXG4gICAgfTtcbiAgfSxcbiAgb3BlbkxpbmtzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT1BFTl9MSU5LU1wiLFxuICAgICAgdWk6IHsgaXNPcGVuTGlua3M6IHRydWUgfSxcbiAgICB9O1xuICB9LFxuICBjbG9zZUxpbmtzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ0xPU0VfTElOS1NcIixcbiAgICAgIHVpOiB7IGlzT3BlbkxpbmtzOiBmYWxzZSB9LFxuICAgIH07XG4gIH0sXG4gIHRvZ2dsZUxpbmtzOiAoaXNPcGVuTGlua3MpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJUT0dHTEVfTElOS1NcIixcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrTXVsdGlzdHJlYW06ICh7IGFwcCwgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX01VTFRJU1RSRUFNXCIsXG4gICAgICBhcHAsXG4gICAgICBwb3N0c011bHRpLFxuICAgICAgcG9zdHNTaW5nbGUsXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1RvZ2dsZURpc3BNZW51OiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfVE9HR0xFX0RJU1BfTUVOVVwiLFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tUb2dnbGVEaXNwRGV0YWlsOiAoeyBhcHAsIHVpIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19UT0dHTEVfRElTUF9ERVRBSUxcIixcbiAgICAgIGFwcCxcbiAgICAgIHVpLFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tMaWtlOiAoaW5wdXRQb3N0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfTElLRVwiLFxuICAgICAgYXBwOiB7IGlucHV0UG9zdCB9LFxuICAgIH07XG4gIH0sXG4gIG9uQ2xpY2tNb25leTogKGlucHV0UG9zdCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NMSUNLX01PTkVZXCIsXG4gICAgICBhcHA6IHsgaW5wdXRQb3N0IH0sXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1NoYXJlOiAoaW5wdXRQb3N0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfU0hBUkVcIixcbiAgICAgIGFwcDogeyBpbnB1dFBvc3QgfSxcbiAgICB9O1xuICB9LFxuICBvblJlc2l6ZVN0YXJ0V2luZG93OiAocGFyYW1zID0geyBhcHA6IHt9LCBzZXR0aW5nOiB7fSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUkVTSVpFX1NUQVJUX1dJTkRPV1wiLFxuICAgICAgLi4ucGFyYW1zLFxuICAgIH07XG4gIH0sXG4gIG9uUmVzaXplRW5kV2luZG93OiAoeyBhcHAsIHNldHRpbmcsIGJvb3RPcHRpb24gfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlJFU0laRV9FTkRfV0lORE9XXCIsXG4gICAgICBhcHAsXG4gICAgICBzZXR0aW5nLFxuICAgICAgYm9vdE9wdGlvbixcbiAgICB9O1xuICB9LFxuICBvblNjcm9sbFVwZGF0ZVRpbWVNYXJrZXI6ICh1aVRpbWVNYXJrZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9TQ1JPTExfVVBEQVRFX1RJTUVfTUFSS0VSXCIsXG4gICAgICB1aVRpbWVNYXJrZXIsXG4gICAgfTtcbiAgfSxcbiAgb25UcmFuc2l0aW9uOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fVFJBTlNJVElPTlwiLFxuICAgICAgdWk6IHsgaXNUcmFuc2l0aW9uOiB0cnVlIH0sXG4gICAgfTtcbiAgfSxcbiAgb2ZmVHJhbnNpdGlvbjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9GRl9UUkFOU0lUSU9OXCIsXG4gICAgICB1aTogeyBpc1RyYW5zaXRpb246IGZhbHNlIH0sXG4gICAgfTtcbiAgfSxcbiAgb25UcmFuc2l0aW9uRW5kOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fVFJBTlNJVElPTl9FTkRcIixcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrTWVudTogKG1lbnVDb21wb25lbnQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19NRU5VXCIsXG4gICAgICB1aTogeyBtZW51Q29tcG9uZW50IH0sXG4gICAgfTtcbiAgfSxcbiAgb25DbGlja1NldHRpbmc6IChzZXR0aW5nVHlwZSwgeyBzZXR0aW5nIH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPTl9DTElDS19TRVRUSU5HXCIsXG4gICAgICBzZXR0aW5nVHlwZSxcbiAgICAgIHNldHRpbmcsXG4gICAgfTtcbiAgfSxcbiAgb3BlbklubmVyTm90aWY6IChvcGVuSW5uZXJOb3RpZiA9IGRlZmluZS5ub0lubmVyTm90aWYpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPUEVOX0lOTkVSX05PVElGXCIsXG4gICAgICB1aTogeyBvcGVuSW5uZXJOb3RpZiB9LFxuICAgIH07XG4gIH0sXG4gIGNsb3NlSW5uZXJOb3RpZjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNMT1NFX0lOTkVSX05PVElGXCIsXG4gICAgICB1aTogeyBvcGVuSW5uZXJOb3RpZjogXCJcIiB9LFxuICAgIH07XG4gIH0sXG4gIG9wZW5Ob3RpZjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9QRU5fTk9USUZcIixcbiAgICAgIHVpOiB7IGlzT3Blbk5vdGlmOiB0cnVlIH0sXG4gICAgfTtcbiAgfSxcbiAgY2xvc2VOb3RpZjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNMT1NFX05PVElGXCIsXG4gICAgICB1aTogeyBpc09wZW5Ob3RpZjogZmFsc2UgfSxcbiAgICB9O1xuICB9LFxuICBvbkNsaWNrT3BlbkxvY2tNZW51OiAob3BlbkxvY2tNZW51KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT05fQ0xJQ0tfT1BFTl9MT0NLX01FTlVcIixcbiAgICAgIHVpOiB7IG9wZW5Mb2NrTWVudSB9LFxuICAgIH07XG4gIH0sXG4gIG9wZW5OZXdQb3N0OiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiT1BFTl9ORVdfUE9TVFwiLFxuICAgICAgdWk6IHsgaXNPcGVuTmV3UG9zdDogdHJ1ZSB9LFxuICAgIH07XG4gIH0sXG4gIGNsb3NlTmV3UG9zdDogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNMT1NFX05FV19QT1NUXCIsXG4gICAgICB1aTogeyBpc09wZW5OZXdQb3N0OiBmYWxzZSB9LFxuICAgIH07XG4gIH0sXG4gIG9wZW5NZW51VHJhbnNpdGlvbkVuZDogKHRocmVhZFNjcm9sbFkpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJPUEVOX01FTlVfVFJBTlNJVElPTl9FTkRcIixcbiAgICAgIHVpOiB7IHRocmVhZFNjcm9sbFkgfSxcbiAgICB9O1xuICB9LFxuICBzdGFydERpc3BQb3N0czogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNUQVJUX0RJU1BfUE9TVFNcIixcbiAgICAgIHVpOiB7IGlzRGlzcFBvc3RzOiB0cnVlIH0sXG4gICAgfTtcbiAgfSxcbiAgc3RhcnRVbmRpc3BQb3N0czogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNUQVJUX1VORElTUF9QT1NUU1wiLFxuICAgICAgdWk6IHsgaXNEaXNwUG9zdHM6IGZhbHNlIH0sXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnRzOiAoY29tcG9uZW50TmFtZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNPTVBPTkVOVF9ESURfTU9VTlRTXCIsXG4gICAgICBjb21wb25lbnREaWRNb3VudHM6IGNvbXBvbmVudE5hbWUsXG4gICAgfTtcbiAgfSxcbiAgYm9vdEV4dGVuc2lvbjogKGFwcCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkJPT1RfRVhURU5TSU9OXCIsXG4gICAgICBhcHAsXG4gICAgfTtcbiAgfSxcbiAgdXBkYXRlRXh0ZW5zaW9uOiAoYXBwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiVVBEQVRFX0VYVEVOU0lPTlwiLFxuICAgICAgYXBwLFxuICAgIH07XG4gIH0sXG4gIGdldENsaWVudE1ldGFzOiAoY2xpZW50TWV0YXMpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJHRVRfQ0xJRU5UX01FVEFTXCIsXG4gICAgICBjbGllbnRNZXRhcyxcbiAgICB9O1xuICB9LFxuICB0b2dnbGVEaXNwUG9zdHNTdXBwb3J0ZXI6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJUT0dHTEVfRElTUF9QT1NUU19TVVBQT1JURVJcIixcbiAgICB9O1xuICB9LFxuICBjbG9zZURpc3BQb3N0c1N1cHBvcnRlcjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIkNMT1NFX0RJU1BfUE9TVFNfU1VQUE9SVEVSXCIsXG4gICAgICB1aTogeyBpc09wZW5Qb3N0c1N1cHBvcnRlcjogZmFsc2UgfSxcbiAgICB9O1xuICB9LFxuICBuZXh0UG9zdHNUaW1lbGluZTogKHBvc3RzVGltZWxpbmUgPSBbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk5FWFRfUE9TVFNfVElNRUxJTkVcIixcbiAgICAgIHBvc3RzVGltZWxpbmUsXG4gICAgfTtcbiAgfSxcbiAgdW5tb3VudFBvc3RzVGltZWxpbmU6IChtZWRpYUN1cnJlbnRUaW1lID0gMCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlVOTU9VTlRfUE9TVFNfVElNRUxJTkVcIixcbiAgICAgIG1lZGlhQ3VycmVudFRpbWUsXG4gICAgfTtcbiAgfSxcbiAgY2xlYXJQb3N0c1RpbWVsaW5lOiAobWVkaWFDdXJyZW50VGltZSA9IDApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJDTEVBUl9QT1NUU19USU1FTElORVwiLFxuICAgICAgbWVkaWFDdXJyZW50VGltZSxcbiAgICB9O1xuICB9LFxuICBwcmV2UG9zdHNUaW1lbGluZTogKHBvc3RzVGltZWxpbmUgPSBbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlBSRVZfUE9TVFNfVElNRUxJTkVcIixcbiAgICAgIHBvc3RzVGltZWxpbmUsXG4gICAgfTtcbiAgfSxcbiAgZGVsZWdhdGVQb3N0OiAoeyBpbnB1dFBvc3QsIGlucHV0Q3VycmVudFRpbWUsIGlucHV0U3RhbXBJZCB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiREVMRUdBVEVfUE9TVFwiLFxuICAgICAgYXBwOiB7IGlucHV0UG9zdCwgaW5wdXRDdXJyZW50VGltZSwgaW5wdXRTdGFtcElkIH0sXG4gICAgfTtcbiAgfSxcbiAgcGxheVZpZGVvOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUExBWV9WSURFT1wiLFxuICAgIH07XG4gIH0sXG4gIHN0b3BWaWRlbzogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNUT1BfVklERU9cIixcbiAgICB9O1xuICB9LFxuICBvbkNoYW5nZUZpbmRUeXBlOiAoZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk9OX0NIQU5HRV9GSU5EX1RZUEVcIixcbiAgICAgIGFwcDogeyBmaW5kVHlwZTogZS50YXJnZXQudmFsdWUgfSxcbiAgICB9O1xuICB9LFxuICBzdGFydExpbmtNZWRpYTogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNUQVJUX0xJTktfTUVESUFcIixcbiAgICB9O1xuICB9LFxuICBsb2FkaW5nRW5kOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiTE9BRElOR19FTkRcIixcbiAgICB9O1xuICB9LFxuICBzY3JvbGxUaHJlYWQ6ICgpID0+IHtcbiAgICByZXR1cm4geyB0eXBlOiBcIlNDUk9MTF9USFJFQURcIiB9O1xuICB9LFxuICBlbmRBbmltYXRlU2Nyb2xsVG86ICgpID0+IHtcbiAgICByZXR1cm4geyB0eXBlOiBcIkVORF9BTklNQVRFX1NDUk9MTF9UT1wiIH07XG4gIH0sXG4gIGNyZWF0ZU5vdGlmOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQ1JFQVRFX05PVElGXCIsXG4gICAgfTtcbiAgfSxcbiAgdXBkYXRlUG9zdHNIZWlnaHQ6IChwb3N0c0hlaWdodCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlVQREFURV9QT1NUU19IRUlHSFRcIixcbiAgICAgIGFwcDogeyBwb3N0c0hlaWdodCB9LFxuICAgIH07XG4gIH0sXG4gIGRlYnVnOiAoYXBwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiREVCVUdcIixcbiAgICAgIGFwcCxcbiAgICB9O1xuICB9LFxufTtcbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tIFwiYXBpL1NlcXVlbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHJlc3BvbnNlID0+IHtcbiAgY29uc3QgdHlwZSA9IGAke1NlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVH0ke3Jlc3BvbnNlLnR5cGV9YDtcbiAgcmV0dXJuIHsgLi4ucmVzcG9uc2UsIHR5cGUgfTtcbn07XG4iLCJpbXBvcnQgU2VxdWVuY2UgZnJvbSBcImFwaS9TZXF1ZW5jZVwiO1xuaW1wb3J0IEVtb3Rpb25zIGZyb20gXCJjb21tb24vZW1vdGlvbnMvaW5kZXhcIjtcblxuY29uc3QgZW1vdGlvbnMgPSBuZXcgRW1vdGlvbnMoKTtcbmxldCBhY3Rpb25zID0ge307XG5cbk9iamVjdC5rZXlzKFNlcXVlbmNlLm1hcCkuZm9yRWFjaChlbmRwb2ludCA9PiB7XG4gIGNvbnN0IHR5cGUgPSBgJHtTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1R9JHtlbmRwb2ludH1gO1xuICBhY3Rpb25zW3R5cGVdID0gKHJlZHV4U3RhdGUsIHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUpID0+IHtcbiAgICBpZiAoYmVmb3JlRnVuY3Rpb25zW3JlcXVlc3RTdGF0ZS50eXBlXSkge1xuICAgICAgcmV0dXJuIGJlZm9yZUZ1bmN0aW9uc1tyZXF1ZXN0U3RhdGUudHlwZV0ocmVkdXhTdGF0ZSwgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiB7IHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUgfTtcbiAgfTtcbn0pO1xuXG5jb25zdCBiZWZvcmVGdW5jdGlvbnMgPSB7XG4gIHBvc3Q6IChyZWR1eFN0YXRlLCByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlKSA9PiB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHJlcXVlc3RTdGF0ZTtcblxuICAgIGlmIChhcHAuaXNNZWRpYUNoKSB7XG4gICAgICAvLyAgICAgIGlmICh3aW5kb3cudGFsa25NZWRpYSAmJiB3aW5kb3cudGFsa25NZWRpYS5jdXJyZW50VGltZSkge1xuICAgICAgaWYgKGFwcC5jdXJyZW50VGltZSkge1xuICAgICAgICByZXF1ZXN0U3RhdGUuYXBwLmlucHV0Q3VycmVudFRpbWUgPSB3aW5kb3cudGFsa25NZWRpYS5jdXJyZW50VGltZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3RTdGF0ZS5hcHAuaW5wdXRDdXJyZW50VGltZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9ucyA9IHt9O1xuXG4gICAgaWYgKGFwcC5pbnB1dFN0YW1wSWQpIHtcbiAgICAgIE9iamVjdC5rZXlzKGVtb3Rpb25zLmJhbGFuY2VzKS5mb3JFYWNoKGJhbGFuY2VLZXkgPT4ge1xuICAgICAgICBpZiAoZW1vdGlvbnMuYmFsYW5jZXNbYmFsYW5jZUtleV0gJiYgcmVkdXhTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV0pIHtcbiAgICAgICAgICBjb25zdCBiYWxhbmNlID0gZW1vdGlvbnMuYmFsYW5jZXNbYmFsYW5jZUtleV0oYXBwLmlucHV0U3RhbXBJZCk7XG5cbiAgICAgICAgICBpZiAoYmFsYW5jZSkge1xuICAgICAgICAgICAgYmFsYW5jZS5mb3JFYWNoKGIgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlSWQgPSBPYmplY3Qua2V5cyhiKVswXTtcbiAgICAgICAgICAgICAgY29uc3QgdHlwZUxhYmVsID0gZW1vdGlvbnMuaWRLZXlUeXBlc1t0eXBlSWRdO1xuXG4gICAgICAgICAgICAgIGlmICghcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XSkgcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XSA9IHt9O1xuICAgICAgICAgICAgICBpZiAoIXJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV1bdHlwZUxhYmVsXSlcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldW3R5cGVMYWJlbF0gPSAwO1xuXG4gICAgICAgICAgICAgIHJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV1bdHlwZUxhYmVsXSA9IGJbdHlwZUlkXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvblN0YXRlLmFwcCA9IHsgLi4uYXBwIH07XG4gICAgICBhY3Rpb25TdGF0ZS5hcHAuaW5wdXRTdGFtcElkID0gMDtcbiAgICAgIHJlcXVlc3RTdGF0ZS5hcHAuaW5wdXRTdGFtcElkID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4geyByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlIH07XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFjdGlvbnM7XG4iLCJpbXBvcnQgUGxhaW4gZnJvbSAnLi9QbGFpbic7XG5pbXBvcnQgUnVzc2VsbCBmcm9tICcuL1J1c3NlbGwnO1xuaW1wb3J0IFJ1c3NlbGxTaW1wbGUgZnJvbSAnLi9SdXNzZWxsU2ltcGxlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIFBsYWluLFxuICAgIFJ1c3NlbGwsXG5cdFJ1c3NlbGxTaW1wbGVcbn1cbiIsImltcG9ydCBFbW90aW9ucyBmcm9tIFwiY29tbW9uL2Vtb3Rpb25zL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYWluIHtcbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4gW0Vtb3Rpb25zLlRZUEVTLkxJS0VdO1xuICB9XG5cbiAgc3RhdGljIGdldFNhdmVCYWxhbmNlKHN0YW1wSWQpIHtcbiAgICBjb25zdCBiYWxhbmNlID0ge1xuICAgICAgMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkxJS0UuSURdOiAxIH1dXG4gICAgfTtcbiAgICByZXR1cm4gYmFsYW5jZVtzdGFtcElkXSA/IGJhbGFuY2Vbc3RhbXBJZF0gOiBudWxsO1xuICB9XG5cbiAgc3RhdGljIGdldFNjaGVtYXMoKSB7XG4gICAgbGV0IHNjaGVtYXMgPSB7fTtcbiAgICBQbGFpbi5UWVBFUy5mb3JFYWNoKChvYmosIGkpID0+IHtcbiAgICAgIHNjaGVtYXNbb2JqLkxBQkVMXSA9IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiAwLCBtaW46IDAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NoZW1hcztcbiAgfVxufVxuIiwiaW1wb3J0IEVtb3Rpb25zIGZyb20gXCJjb21tb24vZW1vdGlvbnMvaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVzc2VsbCB7XG4gIHN0YXRpYyBnZXQgVFlQRVMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNVUFJJU0UsXG4gICAgICBFbW90aW9ucy5UWVBFUy5FWENJVEUsXG4gICAgICBFbW90aW9ucy5UWVBFUy5IQVBQWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkpPWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkdMQUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5TQVRJU0ZBQ1RJT04sXG4gICAgICBFbW90aW9ucy5UWVBFUy5DT01GT1JULFxuICAgICAgRW1vdGlvbnMuVFlQRVMuUkVMQVgsXG4gICAgICBFbW90aW9ucy5UWVBFUy5USVJFRCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNMRUVQWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNMQUNLLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuQk9SSU5HLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNBRCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlVOUExFQVNBTlQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuRElTU0FUSVNGSUVELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuQU5HRVIsXG4gICAgICBFbW90aW9ucy5UWVBFUy5XT1JSWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkZFQVJcbiAgICBdO1xuICB9XG5cbiAgdHlwZXNBcnJheTogYW55O1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgdGhpcy50eXBlc0FycmF5ID0gW107XG4gICAgT2JqZWN0LmtleXMoUnVzc2VsbC5UWVBFUykuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICB0aGlzLnR5cGVzQXJyYXkucHVzaChSdXNzZWxsLlRZUEVTW2luZGV4XS5MQUJFTCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2F2ZUJhbGFuY2Uoc3RhbXBJZCkge1xuICAgIGNvbnN0IGJhbGFuY2UgPSB7XG4gICAgICAvLyBTdXByaXNlKFBvc2kxKVxuICAgICAgMTAwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNVUFJJU0UuSURdOiAxIH1dLFxuICAgICAgMTAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNVUFJJU0UuSURdOiAxIH1dLFxuXG4gICAgICAvLyBFeGNpdGUoUG9zaTEpXG4gICAgICAxMTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcbiAgICAgIDExMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTEwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEhhcHB5KFBvc2kyKVxuICAgICAgMTIwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcblxuICAgICAgLy8gSm95KFBvc2kyKVxuICAgICAgMTMwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDY6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEdsYWQoUG9zaTMpXG4gICAgICAxNDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuR0xBRC5JRF06IDEgfV0sXG4gICAgICAxNDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuR0xBRC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhdGlzZmFjdGlvbihQb3NpMylcbiAgICAgIDE1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TQVRJU0ZBQ1RJT04uSURdOiAxIH1dLFxuICAgICAgMTUwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTi5JRF06IDEgfV0sXG4gICAgICAxNTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FUSVNGQUNUSU9OLklEXTogMSB9XSxcbiAgICAgIDE1MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5TQVRJU0ZBQ1RJT04uSURdOiAxIH1dLFxuXG4gICAgICAvLyBDb21mb3J0KFBvc2k0KVxuICAgICAgMTYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkNPTUZPUlQuSURdOiAxIH1dLFxuICAgICAgMTYwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkNPTUZPUlQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBSZWxheChQb3NpNClcbiAgICAgIDE3MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNzAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuICAgICAgMTcwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcblxuICAgICAgLy8gVGlyZWQoUG9zaTQpXG4gICAgICAxODAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuICAgICAgMTgwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcbiAgICAgIDE4MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNsYWNrKE5lZ2E0KVxuICAgICAgMjAwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcblxuICAgICAgLy8gQm9yaW5nKE5lZ2E0KVxuICAgICAgMjEwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkJPUklORy5JRF06IDEgfV0sXG4gICAgICAyMTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuQk9SSU5HLklEXTogMSB9XSxcbiAgICAgIDIxMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5CT1JJTkcuSURdOiAxIH1dLFxuXG4gICAgICAvLyBNZWxhbmNob2x5KE5lZ2E0KVxuICAgICAgMjIwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjIwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBTYWQoTmVnYTMpXG4gICAgICAyMzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FELklEXTogMSB9XSxcbiAgICAgIDIzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5TQUQuSURdOiAxIH1dLFxuICAgICAgMjMwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBRC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFVucGxlYXNhbnQoTmVnYTMpXG4gICAgICAyNDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuVU5QTEVBU0FOVC5JRF06IDEgfV0sXG4gICAgICAyNDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuVU5QTEVBU0FOVC5JRF06IDEgfV0sXG4gICAgICAyNDAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuVU5QTEVBU0FOVC5JRF06IDEgfV0sXG4gICAgICAyNDA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuVU5QTEVBU0FOVC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIGZydXN0cmF0ZWQoTmVnYTMpXG4gICAgICAyNTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuRlJVU1RSQVRFRC5JRF06IDEgfV0sXG4gICAgICAyNTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRlJVU1RSQVRFRC5JRF06IDEgfV0sXG4gICAgICAyNTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuRlJVU1RSQVRFRC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIGRpc3NhdGlzZmllZChOZWdhMilcbiAgICAgIDI2MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5ESVNTQVRJU0ZJRUQuSURdOiAxIH1dLFxuICAgICAgMjYwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkRJU1NBVElTRklFRC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEFuZ2VyKE5lZ2EyKVxuICAgICAgMjcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuXG4gICAgICAvLyBXb3JyeShOZWdhMSlcbiAgICAgIDI4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDc6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEZlYXIoTmVnYTEpXG4gICAgICAyOTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuRkVBUi5JRF06IDEgfV0sXG4gICAgICAyOTA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuRkVBUi5JRF06IDEgfV1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGJhbGFuY2Vbc3RhbXBJZF0gPyBiYWxhbmNlW3N0YW1wSWRdIDogbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTY2hlbWFzKCkge1xuICAgIGxldCBzY2hlbWFzID0ge307XG4gICAgUnVzc2VsbC5UWVBFUy5mb3JFYWNoKChvYmosIGkpID0+IHtcbiAgICAgIHNjaGVtYXNbb2JqLkxBQkVMXSA9IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiAwLCBtaW46IDAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NoZW1hcztcbiAgfVxufVxuIiwiaW1wb3J0IEVtb3Rpb25zIGZyb20gXCJjb21tb24vZW1vdGlvbnMvaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVzc2VsbFNpbXBsZSB7XG4gIHN0YXRpYyBnZXQgVFlQRVMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkVYQ0lURSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkhBUFBZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuSk9ZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuUkVMQVgsXG4gICAgICBFbW90aW9ucy5UWVBFUy5TTEFDSyxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFksXG4gICAgICBFbW90aW9ucy5UWVBFUy5BTkdFUixcbiAgICAgIEVtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVJcbiAgICBdO1xuICB9XG5cbiAgdHlwZXNBcnJheTogYW55O1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgdGhpcy50eXBlc0FycmF5ID0gW107XG4gICAgT2JqZWN0LmtleXMoUnVzc2VsbFNpbXBsZS5UWVBFUykuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICB0aGlzLnR5cGVzQXJyYXkucHVzaChSdXNzZWxsU2ltcGxlLlRZUEVTW2luZGV4XS5MQUJFTCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2F2ZUJhbGFuY2Uoc3RhbXBJZCkge1xuICAgIGNvbnN0IGJhbGFuY2UgPSB7XG4gICAgICAvLyBTdXByaXNlKFBvc2kxKVxuICAgICAgMTAwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcblxuICAgICAgLy8gRXhjaXRlKFBvc2kxKVxuICAgICAgMTEwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcbiAgICAgIDExMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuXG4gICAgICAvLyBIYXBweShQb3NpMilcbiAgICAgIDEyMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEpveShQb3NpMilcbiAgICAgIDEzMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDc6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuXG4gICAgICAvLyBHbGFkKFBvc2kzKVxuICAgICAgMTQwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxNDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcblxuICAgICAgLy8gU2F0aXNmYWN0aW9uKFBvc2kzKVxuICAgICAgMTUwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxNTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDE1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTUwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIENvbWZvcnQoUG9zaTQpXG4gICAgICAxNjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuICAgICAgMTYwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcblxuICAgICAgLy8gUmVsYXgoUG9zaTQpXG4gICAgICAxNzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuICAgICAgMTcwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE3MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFRpcmVkKFBvc2k0KVxuICAgICAgMTgwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcbiAgICAgIDE4MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG4gICAgICAxODAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuXG4gICAgICAvLyBTbGFjayhOZWdhNClcbiAgICAgIDIwMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEJvcmluZyhOZWdhNClcbiAgICAgIDIxMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjEwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcblxuICAgICAgLy8gTWVsYW5jaG9seShOZWdhNClcbiAgICAgIDIyMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIyMDU6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gU2FkKE5lZ2EzKVxuICAgICAgMjMwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjMwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjMwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBVbnBsZWFzYW50KE5lZ2EzKVxuICAgICAgMjQwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjQwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjQwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjQwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBmcnVzdHJhdGVkKE5lZ2EzKVxuICAgICAgMjUwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjUwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuICAgICAgMjUwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBkaXNzYXRpc2ZpZWQoTmVnYTIpXG4gICAgICAyNjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjYwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcblxuICAgICAgLy8gQW5nZXIoTmVnYTIpXG4gICAgICAyNzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFdvcnJ5KE5lZ2ExKVxuICAgICAgMjgwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjgwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjgwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjgwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjgwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjgwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjgwNzogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuXG4gICAgICAvLyBGZWFyKE5lZ2ExKVxuICAgICAgMjkwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dLFxuICAgICAgMjkwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZX0ZFQVIuSURdOiAxIH1dXG4gICAgfTtcbiAgICByZXR1cm4gYmFsYW5jZVtzdGFtcElkXSA/IGJhbGFuY2Vbc3RhbXBJZF0gOiBudWxsO1xuICB9XG5cbiAgc3RhdGljIGdldFNjaGVtYXMoKSB7XG4gICAgbGV0IHNjaGVtYXMgPSB7fTtcbiAgICBSdXNzZWxsU2ltcGxlLlRZUEVTLmZvckVhY2goKG9iaiwgaSkgPT4ge1xuICAgICAgc2NoZW1hc1tvYmouTEFCRUxdID0geyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAsIG1pbjogMCB9O1xuICAgIH0pO1xuICAgIHJldHVybiBzY2hlbWFzO1xuICB9XG59XG4iLCJpbXBvcnQgU2VxdWVuY2UgZnJvbSBcImFwaS9TZXF1ZW5jZVwiO1xuXG5leHBvcnQgZGVmYXVsdCByZXNwb25zZSA9PiB7XG4gIGNvbnN0IHR5cGUgPSBgJHtTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVH0ke3Jlc3BvbnNlLnR5cGV9YDtcbiAgcmV0dXJuIHsgLi4ucmVzcG9uc2UsIHR5cGUgfTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDbGllbnRVdGlsIHtcbiAgc3RhdGljIGRlbGV0ZVByb3Rjb2woc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKFwiaHR0cHM6L1wiLCBcIlwiKS5yZXBsYWNlKFwiaHR0cDovXCIsIFwiXCIpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9