!function(t){var e={};function n(a){if(e[a])return e[a].exports;var i=e[a]={i:a,l:!1,exports:{}};return t[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(a,i,function(e){return t[e]}.bind(null,i));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=58)}([function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(2)),o=a(n(7)),r=a(n(119)),s=a(n(120)),u=a(n(6)),l=a(n(31)),d=a(n(121)),c=a(n(16)),f=a(n(122)),p=a(n(123)),g=a(n(4)),h=a(n(124)),m=a(n(125)),y=a(n(126)),x=a(n(127)),b=a(n(17)),T=a(n(128)),B=a(n(55)),C=a(n(129)),S=a(n(130)),L=a(n(53)),w=a(n(131)),E=a(n(56)),A=a(n(132)),v=a(n(133)),O=a(n(134)),M=a(n(135));class R{constructor(t){const e=new i.default(t),n=new u.default(t),a=new l.default(t),R=new d.default(t),I=new c.default(t),_=new f.default(t),k=new g.default(t),P=new h.default(t),D=new m.default(t),N=new y.default(t),F=new M.default(t),j=new x.default(t),G=new b.default(t),H=new T.default(t),Y=new B.default(t),U=new w.default(t),W=new E.default(t),$=new A.default(t),z=new v.default(t),V=new S.default(t),q=new L.default(t),K=new C.default(t),X=new o.default(t);return{container:e,header:n,footer:a,postsSupporter:R,postsFooter:I,menuFooter:_,detailFooter:new r.default(t),menu:k,menuIndex:P,menuIndexList:D,menuUsers:N,extScreen:F,lockMenu:j,posts:G,post:H,timeMarker:Y,notif:U,audio:V,video:q,board:W,links:$,link:z,innerNotif:K,detail:X,emotionGraph:new s.default(t),icon:new p.default(t),loading:new O.default(t)}}static get fontBaseRGB(){return"rgb(130, 130, 130)"}static get darkLightRGB(){return"rgba(0, 0, 0, 0.2)"}static get darkLightRGBA(){return"rgba(0, 0, 0, 0.2)"}static get darkRGB(){return"rgb(0, 0, 0)"}static get darkRGBA(){return"rgba(0, 0, 0, 0.4)"}static get mono160RGB(){return"rgb(160, 160, 160)"}static get mono160RGBA(){return"rgb(160, 160, 160)"}static get mono180RGB(){return"rgb(180, 180, 180)"}static get mono192RGB(){return"rgb(192, 192, 192)"}static get mono200RGB(){return"rgb(200, 200, 200)"}static get mono205RGB(){return"rgb(205, 205, 205)"}static get mono210RGB(){return"rgb(210, 210, 210)"}static get mono211RGB(){return"rgb(211, 211, 211)"}static get mono215RGB(){return"rgb(215, 215, 215)"}static get mono220RGB(){return"rgb(220, 220, 220)"}static get mono225RGB(){return"rgb(225, 225, 225)"}static get mono230RGB(){return"rgb(230, 230, 230)"}static get mono235RGB(){return"rgb(235, 235, 235)"}static get mono240RGB(){return"rgb(240, 240, 240)"}static get mono245RGB(){return"rgb(245, 245, 245)"}static get mono250RGB(){return"rgb(250, 250, 250)"}static get mono251RGB(){return"rgb(251, 251, 251)"}static get mono252RGB(){return"rgb(252, 252, 252)"}static get mono253RGB(){return"rgb(253, 253, 253)"}static get mono254RGB(){return"rgb(254, 254, 254)"}static get mono255RGB(){return"rgb(255, 255, 255)"}static get mono180RGBA(){return"rgba(180, 180, 180, 0.96)"}static get mono192RGBA(){return"rgba(192, 192, 192, 0.96)"}static get mono200RGBA(){return"rgba(200, 200, 200, 0.96)"}static get mono205RGBA(){return"rgba(205, 205, 205, 0.96)"}static get mono210RGBA(){return"rgba(210, 210, 210, 0.96)"}static get mono211RGBA(){return"rgba(211, 211, 211, 0.96)"}static get mono215RGBA(){return"rgba(215, 215, 215, 0.96)"}static get mono220RGBA(){return"rgba(220, 220, 220, 0.96)"}static get mono225RGBA(){return"rgba(225, 225, 225, 0.96)"}static get mono230RGBA(){return"rgba(230, 230, 230, 0.96)"}static get mono235RGBA(){return"rgba(235, 235, 235, 0.96)"}static get mono240RGBA(){return"rgba(240, 240, 240, 0.96)"}static get mono245RGBA(){return"rgba(245, 245, 245, 0.96)"}static get mono250RGBA(){return"rgba(250, 250, 250, 0.96)"}static get mono252RGBA(){return"rgba(252, 252, 252, 0.96)"}static get mono255RGBA(){return"rgba(255, 255, 255, 0.96)"}static get twitterRGB(){return"rgba(76, 160, 235)"}static get twitterRGBA(){return"rgba(76, 160, 235, 0.96)"}static get facebookRGB(){return"rgba(73, 104, 173)"}static get facebookRGBA(){return"rgba(73, 104, 173, 0.96)"}static get(t={layout:{},content:{},animation:{}}){return Object.assign(Object.assign(Object.assign({},t.layout),t.content),t.animation)}static getLayoutBase(t={}){return Object.assign(Object.assign({},{display:"block",boxSizing:"border-box",overflow:"hidden",width:"inherit",height:"inherit",minWidth:"auto",minHeight:"auto",maxWidth:"inherit",maxHeight:"inherit",padding:0,margin:0,font:0,lineHeight:1,listStyle:"none",userSelect:"none",textDecoration:"none",verticalAlign:"baseline",borderCollapse:"collapse",borderSpacing:0,border:0,borderRadius:0,zIndex:1,align:"center"}),t)}static getLayoutFlex(t={}){const e=R.getLayoutBase({display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"});return Object.assign(Object.assign({},e),t)}static getLayoutInlineFlex(t={}){const e=R.getLayoutBase({display:"inline-flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"});return Object.assign(Object.assign({},e),t)}static getLayoutTable(t={}){const e=R.getLayoutBase({display:"table"});return Object.assign(Object.assign({},e),t)}static getLayoutTableRow(t={}){const e=R.getLayoutBase({display:"table-row"});return Object.assign(Object.assign({},e),t)}static getLayoutTableCol(t={}){const e=R.getLayoutBase({display:"table-cell"});return Object.assign(Object.assign({},e),t)}static getLayoutFlexChild(t={}){const e=R.getLayoutBase({width:"auto",height:"auto"});return Object.assign(Object.assign({},e),t)}static getLayoutBlock(t={}){const e=R.getLayoutBase({display:"block"});return Object.assign(Object.assign({},e),t)}static getLayoutInlineBlock(t={}){const e=R.getLayoutBase({display:"inline-block",align:"center",verticalAlign:"middle"});return Object.assign(Object.assign({},e),t)}static getLayoutInline(t={}){const e=R.getLayoutBase({display:"inline"});return Object.assign(Object.assign({},e),t)}static getContentBase(t={}){const e=R.getFontBase();return Object.assign(Object.assign(Object.assign({},{letterSpacing:"1.5px",wordWrap:"breakWord",whiteSpace:"normal",quotes:"none",content:"none",cursor:"default"}),e),t)}static getFontBase(t={}){const e={textAlign:"center",color:R.fontBaseRGB,font:"inherit",fontFamily:'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Hiragino Sans", "Noto Sans CJK JP", "Original Yu Gothic", "Yu Gothic", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Sans Emoji"'};return Object.assign(Object.assign({},e),t)}static getAnimationBase(t={}){const e={transition:i.default.transitionOff,transform:"translate3d(0px, 0px, 0px)"};return Object.assign(Object.assign({},e),t)}static trimUnit(t){return Number(t.toString().replace(/px|%|vw|vh|ms/,""))}}e.default=R},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3)),o=a(n(14));class r extends i.default{constructor(t={}){super();const e=r.getWidth(t),n=r.getHeight(t),a=t.postsHeight?t.postsHeight:0,o=r.getScreenMode(e),s=t.extensionMode?t.extensionMode:"NONE",u=t.extensionWidth?t.extensionWidth:"0%",l=t.extensionOpenHeight?t.extensionOpenHeight:0,d=t.extensionCloseHeight?t.extensionCloseHeight:0,c=t&&t.threadScrollY?t.threadScrollY:0,f=r.getIsOpenPosts({height:n,extensionMode:s,extensionOpenHeight:l,extensionCloseHeight:d}),p=!!t.isOpenSetting&&t.isOpenSetting,g=!!t.isOpenMenu&&t.isOpenMenu,h=o===r.screenModeDetailLabel||!!i.default.isSet(t.isOpenDetail)&&t.isOpenDetail,m=!!t.isOpenNewPost&&t.isOpenNewPost,y=!!t.isOpenNotif&&t.isOpenNotif,x=!!i.default.isSet(t.isOpenPostsSupporter)&&t.isOpenPostsSupporter,b=i.default.isSet(t.isOpenBoard)?t.isOpenBoard:r.getIsOpenBoard({screenMode:o}),T=!i.default.isSet(t.isBubblePost)||t.isBubblePost,B=!!i.default.isSet(t.isDispPosts)&&t.isDispPosts,C=!!i.default.isSet(t.isOpenLinks)&&t.isOpenLinks,S=t.menuComponent?t.menuComponent:r.getDefaultMenuComponent(),L=t.openLockMenu?t.openLockMenu:r.openLockMenuLabelNo,w=t.openInnerNotif?t.openInnerNotif:"",E=!!i.default.isSet(t.isLoading)&&t.isLoading;return this.create({width:e,height:n,postsHeight:a,screenMode:o,extensionMode:s,extensionWidth:u,extensionOpenHeight:l,extensionCloseHeight:d,threadScrollY:c,isOpenPosts:f,isOpenSetting:p,isOpenMenu:g,isOpenDetail:h,isOpenNewPost:m,isOpenNotif:y,isOpenPostsSupporter:x,isOpenBoard:b,isBubblePost:T,isDispPosts:B,isOpenLinks:C,menuComponent:S,openLockMenu:L,openInnerNotif:w,isLoading:E})}static get openLockMenuLabelNo(){return"No"}static get openLockMenuLabelLike(){return"Like"}static get openLockMenuLabelShare(){return"Share"}static get openLockMenuLabelAbout(){return"About"}static get screenModeSmallLabel(){return"SMALL"}static get screenModeMiddleLabel(){return"MIDDLE"}static get screenModeLargeLabel(){return"LARGE"}static get extensionModeExtNoneLabel(){return"NONE"}static get screenModeIndexLabel(){return"MENU"}static get screenModeThreadLabel(){return"THREAD"}static get screenModeDetailLabel(){return"DETAIL"}static get screenModeSmallWidthPx(){return o.default.screenMode.small}static get screenModeMiddleWidthPx(){return o.default.screenMode.middle}static get extensionModeExtModalLabel(){return"EXT_MODAL"}static get extensionModeExtBottomLabel(){return"EXT_BOTTOM"}static get extensionModeExtIncludeLabel(){return"EXT_INCLUDE"}static get menuComponentUsersLabel(){return"Users"}static get menuComponentIndexLabel(){return"Index"}static get menuComponentLogsLabel(){return"Logs"}static get menuComponentSettingLabel(){return"Setting"}static getDefaultMenuComponent(){return r.menuComponentIndexLabel}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static getScreenMode(t=0){if(!t){if(window&&0===window.innerWidth||0===window.innerHeight)return"NONE";window&&window.innerWidth>0&&(t=window.innerWidth)}return"string"==typeof t&&(t=t.replace("px","")),r.screenModeSmallWidthPx>=t?r.screenModeSmallLabel:r.screenModeSmallWidthPx<t&&r.screenModeMiddleWidthPx>=t?r.screenModeMiddleLabel:r.screenModeLargeLabel}static getIsOpenBoard(t){switch(t.screenMode){case r.screenModeSmallLabel:return!1;case r.screenModeMiddleLabel:case r.screenModeLargeLabel:return!0}}static getIsOpenPosts(t,e=""){let{extensionMode:n,height:a,extensionOpenHeight:i,extensionCloseHeight:o}=t;return n!==r.extensionModeExtBottomLabel&&n!==r.extensionModeExtModalLabel||("number"!=typeof a&&(a=Number(a)),"number"!=typeof i&&(i=Number(i)),0!==a&&(o!==a&&i<=a))}static getUiUpdatedOpenFlgs({app:t,ui:e},n=""){switch(n){case"toggleMain":case"headerDetailIcon":switch(e.screenMode){case r.screenModeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case r.screenModeMiddleLabel:e.isOpenDetail?t.detailCh===t.rootCh?(e.isOpenDetail=!1,e.isOpenMenu=!0):(e.isOpenMenu=!1,e.isOpenDetail=!1):(e.isOpenMenu=!1,e.isOpenDetail=!0)}break;case"headerMenuIcon":switch(e.screenMode){case r.screenModeMiddleLabel:e.isOpenDetail,e.isOpenMenu=!0,e.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(e.screenMode){case r.screenModeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case r.screenModeMiddleLabel:e.isOpenMenu=!1,e.isOpenDetail=!0;case r.screenModeLargeLabel:e.isOpenMenu=!0,e.isOpenDetail=!0}}return e}}e.default=r},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(6)),s=a(n(25)),u=a(n(4)),l=a(n(55));class d{constructor(t){return{self:d.getSelf(t),multistreamIconWrap:d.getMultistreamIconWrap(t),newPost:d.getNewPost(t),hideScreenBottom:d.getHideScreenBottom(t),linkLabel:d.getLinkLabel(t)}}static get width(){return"100%"}static get widthRatio(){return.94}static get radius(){return"10px"}static get radiuses(){return`${d.radius} ${d.radius} 0px 0px`}static get openHeight(){return 360}static get closeHeight(){return 360}static get threadHeight(){return 360}static get footerHeight(){return 45}static get maxZIndex(){return 2147483647}static get openBottom(){return d.footerHeight}static get closeBottom(){return 0}static get merginRatio(){return.034}static get borderRGB(){return o.default.mono220RGB}static get border(){return`1px solid ${d.borderRGB}`}static get shadow(){return`${o.default.mono230RGB} 0px 0px 5px 0px`}static get darkLightRGB(){return o.default.darkLightRGB}static get darkLightRGBA(){return o.default.darkLightRGBA}static get darkRGB(){return o.default.darkRGB}static get darkRGBA(){return o.default.darkRGBA}static get downreliefRGB(){return o.default.mono160RGB}static get reliefRGB(){return o.default.mono180RGB}static get reliefRGBA(){return o.default.mono180RGBA}static get silverRGB(){return o.default.mono192RGB}static get silverRGBA(){return o.default.mono192RGBA}static get lightGrayRGB(){return o.default.mono211RGB}static get lightGrayRGBA(){return o.default.mono211RGBA}static get chromeOffTabRGB(){return o.default.mono225RGB}static get chromeOffTabRGBA(){return o.default.mono225RGBA}static get softCalmRGB(){return o.default.mono230RGB}static get softCalmRGBA(){return o.default.mono230RGBA}static get calmRGB(){return o.default.mono240RGB}static get calmRGBA(){return o.default.mono240RGBA}static get lightRGB(){return o.default.mono245RGB}static get lightRGBA(){return o.default.mono245RGBA}static get offWhiteRGB(){return o.default.mono250RGB}static get offWhiteRGBA(){return o.default.mono250RGBA}static get offWhitePlusRGB(){return o.default.mono252RGB}static get offWhitePlusRGBA(){return o.default.mono252RGBA}static get whiteRGB(){return o.default.mono255RGB}static get whiteRGBA(){return o.default.mono255RGBA}static get fontBaseRGB(){return o.default.fontBaseRGB}static get themeRGBString(){return"69, 164, 149"}static get themeRGB(){return`rgb(${d.themeRGBString})`}static get themeRGBA(){return`rgba(${d.themeRGBString}, 0.8)`}static getThemeRGBA(t=.8){return`rgba(${d.themeRGBString}, ${t})`}static getTransitionOn({app:t,ui:e}={},n=!1){let a=String(d.transitionOn);return a=t?e.isTransition?`${d.transitionOn}ms`:`${d.transitionOff}ms`:`${d.transitionOn}ms`,n?o.default.trimUnit(a):a}static getTransition({app:t,ui:e}={},n=!1){const a=e.isTransition?`${d.transitionOn}ms`:`${d.transitionOff}ms`;return n?o.default.trimUnit(a):a}static getTransitionFirstOn({app:t,ui:e},n=!1){const a=e.isTransition?`${d.transitionFirstOn}ms`:`${d.transitionOff}ms`;return n?o.default.trimUnit(a):a}static get transitionOn(){return 600}static get transitionNotif(){return 300}static get transitionNotifDisp(){return 3e3}static get transitionFirstOn(){return 300}static get transitionOff(){return 0}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get notifOpenTranslateY(){return"translate3d( 0px, -80px, 0px )"}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNewPost?d.notifOpenTranslateY:d.notifCloseTranslateY}static getNewPostDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getWidthPx({bootOption:t,app:e,ui:n}){return t?t.width?t.width:d.width:n.width}static getRightPx({app:t},e){return"0%"}static get multistreamWrapDefaultTop(){return 5}static getSelf({app:t,ui:e,bootOption:n,type:a}){const r=e.extensionMode===i.default.extensionModeExtBottomLabel?"hidden":"inherit";let s="0px";n&&n["border-radius"]?s=n["border-radius"]:"0px"===s&&e.extensionMode===i.default.extensionModeExtModalLabel&&(s="3px");const u=o.default.getLayoutBlock({display:"initial",width:"100%",height:"100%",overflow:r,borderRadius:s,opacity:1}),l=o.default.getContentBase({}),c=o.default.getAnimationBase({transition:`${d.transitionFirstOn}ms`});return o.default.get({layout:u,content:l,animation:c})}static getMultistreamIconWrapTop({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?r.default.headerHeight+d.multistreamWrapDefaultTop+"px":(e.extensionMode,i.default.extensionModeExtModalLabel,r.default.headerHeight+d.multistreamWrapDefaultTop+"px")}static getMultistreamIconWrapRight({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:return"5%";case i.default.screenModeMiddleLabel:return"20px";case i.default.screenModeLargeLabel:return`calc( ${s.default.getWidth({app:t,ui:e})} + 20px)`}}static getMultistreamIconWrap({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"30px",height:"30px",margin:"0 auto",background:"rgba(255, 255, 255, 0.8)"}),a=o.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",fontSize:"12px",lineHeight:2,cursor:"pointer"}),i=o.default.getAnimationBase({transition:d.transitionOff});return o.default.get({layout:n,content:a,animation:i})}static getNewPost({app:t,ui:e}){let n=d.getNewPostDisplay({app:t,ui:e});const a=l.default.getFixTimeMarker({app:t,ui:e});return delete a.top,Object.assign(Object.assign({},a),{display:n,zIndex:"1",margin:"0px auto",bottom:`-${d.notifHeight}px`,transition:d.getTransition({app:t,ui:e})})}static getHideScreenBottom({app:t,ui:e}){const n=o.default.getLayoutFlex({position:"fixed",top:"100vh",width:"100vw",height:"300px",background:d.reliefRGB}),a=o.default.getContentBase({}),i=o.default.getAnimationBase({});return o.default.get({layout:n,content:a,animation:i})}static getLinkLabel({app:t,ui:e}){const n=r.default.headerHeight+"px",a=e.screenMode===i.default.screenModeSmallLabel?"0px":`${u.default.getWidth({app:t,ui:e})}`,s=o.default.getLayoutFlex({maxWidth:"180px",position:"fixed",top:n,left:a,height:"20px",padding:"5px 10px",alignItems:"center",justifyContent:"flex-start",background:"rgba(0, 0, 0, 0.4)",zIndex:"1",borderRadius:"0px 0px 2px 0px"}),l=o.default.getContentBase({lineHeight:2,fontSize:"10px",whiteSpace:"nowrap",color:d.whiteRGB}),c=o.default.getAnimationBase();return o.default.get({layout:s,content:l,animation:c})}}e.default=d},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class a{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==a.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||("function() {}"===e||("function (){}"===e||("function () {}"===e||"()=>{}"===e)))}create(t){const e=this.constructor.name;a.getType(t);return Object.keys(t).forEach(n=>{let i,o,r=null,s=!1,u=!1,l=()=>{},d=null;if("Object"===a.getType(t[n])){i=t[n];let e=0===Object.keys(i).length;s=i.isAcceptNull?i.isAcceptNull:s,u=i.isAcceptBlank?i.isAcceptBlank:u,r=!e&&i.def?i.def:r,d=e||!i.value&&""!==i.value?i:i.value,d=e&&r?r:d,o=a.getType(d),l=i.valid?i.valid:l}else r=d=t[n],s=s,u=u,o=a.getType(d),l=l;const c=t=>{let i=null;const r=`${e}.${n}`,c=d,f=o,p=t,g=a.getType(t);return g!==o&&(i=`SCHEMA_TYPE : ${r} [validType: ${o}][paramsType: ${g}]`),s&&null===t&&(i=`SCHEMA_IS_ACCEPT_NULL :  ${r}`),u&&""===t&&(i=`SCHEMA_IS_ACCEPT_BLANK :  ${r}`),"Function"===a.getType(l)&&l(t)&&(i=`SCHEMA_YOUR_VALID_METHOD :  ${r}`),{pointer:r,validValue:c,validType:f,paramsValue:p,paramsType:g,error:i}},{pointer:f,validValue:p,validType:g,paramsValue:h,paramsType:m,error:y}=c(d);if(null===y)Object.defineProperty(this,n,{get:()=>d,set:t=>{const e=c(d);if(null===y)return d=t,Object.assign(Object.assign({},this),{[n]:d});throw this.validWarn(e),y},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw y;console.warn(y)}}),this}canSet(t,e){try{const n=this[t],{error:a}=this[t]=e;return!a&&(this[t]=n,!0)}catch(n){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${n}`}}merge(t={},e=!0){try{const n=a.getType(t),i=Object.keys(t);if(i.length>0){let a=Object.assign({},this);return i.forEach(e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?a[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))}),"Array"===n?(a=Object.values(a),e?new this.constructor(a):a):e?new this.constructor(a):a}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${a.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${a.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach(n=>{let a=t[n];"Object"===a.constructor.name&&(a.type||a.default||(a=this.toJSON(a))),a.default||""===a.default||0===a.default?e[n]=a.default:e[n]=a}),e}forEach(t){return Object.values(this).forEach(t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=a},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2)),r=a(n(6)),s=a(n(1)),u=a(n(18));class l{constructor(t){return{self:l.getSelf(t),wrapComponent:l.getWrapComponent(t),footer:l.getFooter(t),footerChild:l.getFooterChild(t),footerChildMoney:l.getFooterChildMoney(t)}}static get baseWidth(){return"300px"}static getWidth({app:t,ui:e},n=!1){let a="0";switch(e.screenMode){case s.default.screenModeSmallLabel:a="100.0%";break;case s.default.screenModeMiddleLabel:case s.default.screenModeLargeLabel:a=l.baseWidth}return n?i.default.trimUnit(a):a}static getTransform({app:t,ui:e}){let n="translate3d( 0px, 0px, 0px )";switch(e.screenMode){case s.default.screenModeSmallLabel:n=e.isOpenMenu?"translate3d( 0%, 0%, 0px )":"translate3d( -100% , 0%, 0px )";break;case s.default.screenModeMiddleLabel:e.isOpenDetail,n="translate3d( 0px ,0px, 0px )";break;case s.default.screenModeLargeLabel:n="translate3d( 0px ,0px, 0px )"}return n}static getSelf({app:t,ui:e}){const n=e.extensionMode===s.default.extensionModeExtBottomLabel?"none":o.default.reliefRGB,a=i.default.getLayoutBlock({display:"block",position:"fixed",top:"0px",left:"0px",width:l.getWidth({app:t,ui:e}),minWidth:l.getWidth({app:t,ui:e}),height:"100%",minHeight:"auto",maHeight:"auto",margin:`${r.default.headerHeight}px 0px 0px 0px`,background:n,WebkitOverflowScrolling:"touch",overflow:"hidden"}),u=i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e}),transform:l.getTransform({app:t,ui:e})});return i.default.get({layout:a,content:{},animation:u})}static getWrapComponent({app:t,ui:e}){const n=e.extensionMode===s.default.extensionModeExtBottomLabel?"90%":"100%",a=i.default.getLayoutBlock(Object.assign({width:n,minWidth:"inherit",maxWidth:"inherit",height:`calc( 100% - ${2*u.default.headerHeight}px )`,margin:"0 auto"},{})),o=i.default.getAnimationBase();return i.default.get({layout:a,content:{},animation:o})}static getWrap({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:o.default.border}),a=i.default.getContentBase({textAlign:"left"}),r=i.default.getAnimationBase({});return i.default.get({layout:n,content:a,animation:r})}static getFooter({app:t,ui:e}){const n=(e.screenMode,s.default.screenModeSmallLabel,{border:o.default.border}),a=i.default.getLayoutFlex(Object.assign({width:"100%",background:o.default.offWhiteRGB,height:`${u.default.headerHeight}px`},n)),r=i.default.getContentBase({}),l=i.default.getAnimationBase();return i.default.get({layout:a,content:r,animation:l})}static getFooterChild({app:t,ui:e}){const n=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=i.default.getContentBase({fontSize:"0.5em"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getFooterChildMoney({app:t,ui:e}){const n=i.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=i.default.getContentBase({fontSize:"0.5em"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3)),o=a(n(46)),r=a(n(15));class s extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=o.default.defaultFindId,this.offsetSingleFindId=o.default.defaultFindId,this.offsetMultiFindId=o.default.defaultFindId,this.offsetChildFindId=o.default.defaultFindId,this.offsetLogsFindId=o.default.defaultFindId;const n=t.ch?t.ch:"/",a=t.name?t.name:"talkn",u=t.talknIndex?t.talknIndex:0,l=i.default.isSet(t.isMediaCh)?t.isMediaCh:s.getIsMediaCh(n),d=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,c=t.rootCh?t.rootCh:n,f=i.default.isSet(t.isRootCh)?t.isRootCh:c===n,p=t.rootTitle?t.rootTitle:"talkn",g=s.getMediaSrc(t.protocol,n),h=s.getMediaType(g,t),m=t&&t.tuned?t.tuned:"",y=s.getDispThreadType(t,l),x=!i.default.isSet(t.multistream)||t.multistream,b=!(!t||!t.multistreamed)&&t.multistreamed,T=t&&t.findType?t.findType:r.default.findTypeAll,B=t&&t.offsetFindId?t.offsetFindId:s.defaultOffsetFindId,C=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:s.defaultOffsetFindId,S=t&&t.offsetSingleFindId?t.offsetSingleFindId:s.defaultOffsetFindId,L=t&&t.offsetMultiFindId?t.offsetMultiFindId:s.defaultOffsetFindId,w=t&&t.offsetChildFindId?t.offsetChildFindId:s.defaultOffsetFindId,E=t&&t.offsetLogsFindId?t.offsetLogsFindId:s.defaultOffsetFindId,A=t.detailCh?t.detailCh:n,v=t.inputPost?t.inputPost:"",O=!!t.inputStampId&&t.inputStampId,M=t.inputCurrentTime?t.inputCurrentTime:0,R=t.inputSearch?t.inputSearch:"",I=t&&t.actioned?t.actioned:"",_=!!i.default.isSet(t.isTransition)&&t.isTransition,k=!!i.default.isSet(t.isLoading)&&t.isLoading,P=!!i.default.isSet(t.isLoadingEnd)&&t.isLoadingEnd,D=i.default.isSet(t.debug)?t.debug:"";return this.create({name:a,talknIndex:u,isRootCh:f,isLinkCh:d,isMediaCh:l,rootCh:c,rootTitle:p,chType:h,dispThreadType:y,tuned:m,multistream:x,multistreamed:b,findType:T,offsetFindId:B,offsetTimelineFindId:C,offsetSingleFindId:S,offsetMultiFindId:L,offsetChildFindId:w,offsetLogsFindId:E,detailCh:A,inputPost:v,inputStampId:O,inputCurrentTime:M,inputSearch:R,actioned:I,isTransition:_,isLoading:k,isLoadingEnd:P,debug:D})}static get defaultOffsetFindId(){return o.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[s.mediaTypeMp3,s.mediaTypeMp4,s.mediaTypeM4a]}static get mediaChTagTypes(){return{[s.mediaTypeMp3]:s.mediaTagTypeAudio,[s.mediaTypeMp4]:s.mediaTagTypeVideo,[s.mediaTypeM4a]:s.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:s.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(s.mediaChTagTypes),n=e.length;let a="html";for(let i=0;i<n;i++){const n=new RegExp(`.${e[i]}$`);if(t.match(n)){a=s.mediaChTagTypes[e[i]];break}}return a}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return s.isAudioContentType(t)||s.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(s.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(s.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return s.mediaChs.some(e=>{const n=new RegExp(`.${e}/$|.${e}$`);return t.match(n)})}static isActiveMultistream({app:t,ui:e},n=""){return"Index"===e.menuComponent&&!t.isMediaCh&&t.dispThreadType===s.dispThreadTypeMulti}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?s.dispThreadTypeTimeline:s.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:o.default.defaultFindId}static getStepToDispThreadType({app:t,menuIndex:e},n,a,i=""){let o="";const r=t.dispThreadType;return{app:t=s.getStepDispThreadType({app:t,menuIndex:e},n,a,i),stepTo:`${r} to ${o=t.dispThreadType}`}}static getStepDispThreadType({app:t,menuIndex:e},n={},a,i){if(t.isLinkCh=!1,n.isMediaCh)return t.dispThreadType=s.dispThreadTypeTimeline,t.offsetFindId=t.offsetTimelineFindId?t.offsetTimelineFindId:s.defaultOffsetFindId,t.isLinkCh="toLinks"===i||"findMediaCh"===i,t.isMediaCh=!0,t;if("toLinks"===i){const n=e.some(t=>t.ch===a||t.ch===a+"/");if(!n)return t.offsetFindId=s.defaultOffsetFindId,t.dispThreadType=s.dispThreadTypeChild,t.isLinkCh=!0,t}return t.rootCh===a?t.multistream?(t.dispThreadType=s.dispThreadTypeMulti,t.offsetFindId=t.offsetMultiFindId?t.offsetMultiFindId:s.defaultOffsetFindId):(t.dispThreadType=s.dispThreadTypeSingle,t.offsetFindId=t.offsetSingleFindId?t.offsetSingleFindId:s.defaultOffsetFindId):(t.dispThreadType=s.dispThreadTypeChild,t.offsetFindId=t.offsetChildFindId?t.offsetChildFindId:s.defaultOffsetFindId),t}}e.default=s},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(16));class u{constructor(t){return{self:u.getSelf(t),headTab:u.getHeadTab(t),rightIcon:u.getRightIcon(t),leftIcon:u.getLeftIcon(t),userIcon:u.getUserIcon(t),userIconImg:u.getUserIconImg(t),childAnalyzeWrap:u.getChildAnalyzeWrap(t),childAnalyzeType:u.getChildAnalyzeType(t),childAnalyzeCnt:u.getChildAnalyzeCnt(t),childTalknLogo:u.getChildTalknLogo(t)}}static get selfHeight(){return"100%"}static get headerHeight(){return 45}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get widthRatio(){return.94}static get notifOpenTranslateY(){return`translate3d( 0px, ${u.headerHeight}px, 0px )`}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNotif?u.notifOpenTranslateY:u.notifCloseTranslateY}static getMargin({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?"0px 5% 0px 5%":"0 auto"}static getChildAnalyzeRight({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:return"5%";case i.default.screenModeMiddleLabel:return"10%";case i.default.screenModeLargeLabel:return"15%"}}static getChildAnalyzePositions({app:t,ui:e}){const n=e.screenMode===i.default.screenModeSmallLabel?"8px 0px 0px 0px":"7px auto";return e.extensionMode===i.default.extensionModeExtBottomLabel||(e.extensionMode,i.default.extensionModeExtModalLabel),{position:"absolute",top:"0px",right:u.getChildAnalyzeRight({app:t,ui:e}),margin:n}}static getBorderRadius({app:t,ui:e},n=!1){return e.extensionMode===i.default.extensionModeExtBottomLabel?"100%"===e.extensionWidth?"0px 0px 0px 0px":`${r.default.radius} ${r.default.radius} 0px 0px`:e.extensionMode===i.default.extensionModeExtModalLabel?`${r.default.radius} ${r.default.radius} 0px 0px`:0}static getSelf({app:t,ui:e}){const n=e.extensionMode===i.default.extensionModeExtBottomLabel?"90%":"100%",a="NONE"===e.extensionMode?0:r.default.border,s=u.getBorderRadius({app:t,ui:e}),l=o.default.getLayoutFlex({position:"fixed",top:"0px",width:n,height:`${u.headerHeight}px`,borderTop:a,borderRight:r.default.border,borderBottom:r.default.border,borderLeft:r.default.border,borderRadius:s,background:r.default.whiteRGB,margin:u.getMargin({app:t,ui:e}),zIndex:1e3}),d=o.default.getContentBase({textAlign:"center"}),c=o.default.getAnimationBase({transform:u.getNotifTranslateY({app:t,ui:e})});return o.default.get({layout:l,content:d,animation:c})}static getUserIcon(t){const e=o.default.getLayoutBlock({flexGrow:2,height:"auto"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:{},animation:n})}static getUserIconImg(t){const e=o.default.getLayoutInlineBlock({width:"30px",margin:"0px 10px 0px 0px"}),n=o.default.getAnimationBase();return o.default.get({layout:e,content:{},animation:n})}static getHeadTab({app:t,ui:e}){const n=e.screenMode===i.default.screenModeSmallLabel?"60%":"40%",a=o.default.getLayoutFlex({justifyContent:"center",width:n,height:"100%"}),r=o.default.getContentBase({fontSize:"17px"}),s=o.default.getAnimationBase();return o.default.get({layout:a,content:r,animation:s})}static getRightIcon({app:t,ui:e}){const n=e.screenMode===i.default.screenModeSmallLabel?"20%":"30%",a=o.default.getLayoutBlock({flexFlow:"column",alignItems:"center",justifyContent:"center",width:n,height:"100%"}),r=o.default.getAnimationBase();return o.default.get({layout:a,content:{},animation:r})}static getLeftIcon({app:t,ui:e}){const n=e.screenMode===i.default.screenModeSmallLabel?"20%":"30%",a=o.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:n,height:"100%"}),r=o.default.getContentBase({}),s=o.default.getAnimationBase();return o.default.get({layout:a,content:r,animation:s})}static getChildAnalyzeWrap({app:t,ui:e}){const n=u.getChildAnalyzePositions({app:t,ui:e}),a=o.default.getLayoutFlex(Object.assign(Object.assign({},n),{flexDirection:"column",width:"40px",height:"28px"})),i=o.default.getContentBase({}),r=o.default.getAnimationBase();return o.default.get({layout:a,content:i,animation:r})}static getChildAnalyzeType({app:t,ui:e}){const n=e.screenMode===i.default.screenModeSmallLabel?"9px":"14px",a=o.default.getLayoutBlock({height:"14px",marginBottom:"4px"}),s=o.default.getContentBase({fontSize:n,color:r.default.themeRGBA,fontWeight:"bold"}),u=o.default.getAnimationBase();return o.default.get({layout:a,content:s,animation:u})}static getChildAnalyzeCnt({app:t,ui:e}){const n=e.screenMode===i.default.screenModeSmallLabel?"9px":"14px",a=o.default.getLayoutBlock({height:"14px"}),s=o.default.getContentBase({fontSize:n,color:r.default.themeRGBA,fontWeight:"bold"}),u=o.default.getAnimationBase();return o.default.get({layout:a,content:s,animation:u})}static getChildTalknLogo(t){const e=o.default.getLayoutInlineBlock({position:"absolute",width:"45px",height:"45px"}),n=o.default.getContentBase({color:r.default.themeRGBA,fontWeight:"bold"}),a=o.default.getAnimationBase();return o.default.get({layout:e,content:n,animation:a})}static getNotif({app:t,ui:e}){const n=o.default.getLayoutBlock({position:"relative",top:`${s.default.selfHeight}px`,width:"50%",height:r.default.notifHeight,margin:"0 auto",zIndex:"10",background:"rgba(0, 0, 0, 0.4)",borderRadius:"20px"}),a=o.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",fontSize:"12px",lineHeight:2,cursor:"pointer"}),i=o.default.getAnimationBase({transition:r.default.getTransition({app:t,ui:e})});return o.default.get({layout:n,content:a,animation:i})}}e.default=u},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(4)),u=a(n(25)),l=a(n(54)),d=a(n(6)),c=a(n(14));class f{constructor(t){const{app:e,ui:n}=t,a={},i=f.getDetailClass({app:e,ui:n});return a[`self${f.detailRightSelfKey}`]=f.getDetailRightSelf(t),a[`self${f.detailModalSelfKey}`]=f.getDetailModalSelf(t),a.header=i.getHeader(t),a.headerP=i.getHeaderP(t),a.body=i.getBody(t),a.meta=i.getMeta(t),a.img=i.getImg(t),a.description=i.getDescription(t),a.metaContentTypeWrap=i.getMetaContentTypeWrap(t),a.metaContentType=i.getMetaContentType(t),a.ch=i.getCh(t),a.analyze=i.getAnalyze(t),a.analyzeRow=i.getAnalyzeRow(t),a.analyzeCol=i.getAnalyzeCol(t),a.analyzeLabel=i.getAnalyzeLabel(t),a.analyzeValue=i.getAnalyzeValue(t),a.analyzeHr=i.getAnalyzeHr(t),a.h1s=i.getH1s(t),a.h1sLi=i.getH1sLi(t),a.footer=i.getFooter(t),a.footerChild=i.getFooterChild(t),a.footerChildLike=i.getFooterChildLike(t),a.footerChildMoney=i.getFooterChildMoney(t),a.footerChildShare=i.getFooterChildShare(t),a.metaItems=i.getMetaItems(t),a.updateWrap=i.getUpdateWrap(t),a.update=i.getUpdate(t),a}static get detailRightSelfKey(){return"Right"}static get detailModalSelfKey(){return"Modal"}static get screenModeOfRightDetail(){return i.default.screenModeLargeLabel}static get padding(){return 20}static get margin(){return 5}static getDetailClass({app:t,ui:e}){return f.isRightDetail({app:t,ui:e})?u.default:l.default}static isRightDetail({app:t,ui:e}){return e.screenMode===f.screenModeOfRightDetail}static getDetailModalSelf({app:t,ui:e}){const n=i.default.getScreenMode(e.width),a=n===i.default.screenModeLargeLabel?"none":"block",u=n===i.default.screenModeSmallLabel?"0px":s.default.baseWidth,d=(e.extensionMode,i.default.extensionModeExtBottomLabel,r.default.reliefRGB),c=l.default.getHeight({app:t,ui:e}),f=o.default.getLayoutBlock({display:a,position:"fixed",top:"100%",left:u,width:l.default.getWidth({app:t,ui:e},!1),height:c,margin:l.default.getMargin({app:t,ui:e}),background:d,border:r.default.border,borderRadius:r.default.radiuses,WebkitOverflowScrolling:"touch",zIndex:1}),p=o.default.getContentBase(),g=o.default.getAnimationBase({transform:l.default.getTransform({app:t,ui:e}),transition:r.default.getTransition({app:t,ui:e})});return o.default.get({layout:f,content:p,animation:g})}static getDetailRightSelf({app:t,ui:e}){const n=o.default.getLayoutBlock({position:"fixed",top:"0px",right:"0px",width:u.default.getWidth({app:t,ui:e}),minWidth:u.default.getWidth({app:t,ui:e}),height:`calc( 100% - ${d.default.headerHeight}px )`,WebkitOverflowScrolling:"touch",background:r.default.calmRGB,overflow:"hidden",margin:`${d.default.headerHeight}px 0px 0px 0px`,zIndex:0}),a=o.default.getContentBase(),i=o.default.getAnimationBase({transition:"0ms"});return o.default.get({layout:n,content:a,animation:i})}static getFooterBorders({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:return{borderTop:r.default.border};case i.default.screenModeLargeLabel:return{borderTop:r.default.border,borderLeft:r.default.border}}}static getFooterPositions({app:t,ui:e}){switch(e.screenMode){case i.default.screenModeSmallLabel:return{};case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:return{position:"absolute",right:"0px",bottom:"0px"}}}static getWidth({app:t,ui:e},n=!1){let a="100%";switch(e.screenMode){case i.default.screenModeLargeLabel:a="30%"}return n?a:o.default.trimUnit(a)}static getTransform({app:t,ui:e}){return f.getDetailClass({app:t,ui:e}).getTransform({app:t,ui:e})}static getHeader({app:t,ui:e}){const n=o.default.getLayoutFlex({width:"100%",height:d.default.headerHeight,maxHeight:d.default.headerHeight,borderBottom:r.default.border,background:r.default.whiteRGB,padding:"0px 20px"}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getHeaderP({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"100%",height:"auto",maxHeight:d.default.headerHeight}),a=o.default.getContentBase({lineHeight:"1.8",fontSize:"16px",textOverflow:"ellipsis"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getBody({app:t,ui:e}){const n=o.default.getLayoutBlock({overflowX:"hidden",overflowY:"scroll",width:"100%",height:`calc( 100% - ${2*d.default.headerHeight}px )`,background:r.default.reliefRGBA,zIndex:0}),a=o.default.getContentBase(),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getMeta({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"100%",height:"initial",background:r.default.offWhiteRGBA,borderBottom:r.default.border}),a=o.default.getContentBase(),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getImg({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"100%",height:"30vh",maxHeight:"400px",backgroundColor:r.default.whiteRGB,backgroundImage:`url(//${c.default.assetsImgPath}talkn_logo1.png)`,backgroundPosition:"center center",backgroundSize:"60%",backgroundRepeat:"no-repeat"}),a=o.default.getContentBase(),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getDescription({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"90%",height:"initial",margin:"7%"}),a=o.default.getContentBase({lineHeight:2,fontSize:"16px",textAlign:"left"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getMetaContentTypeWrap({app:t,ui:e}){const n=o.default.getLayoutFlex({flexDirection:"column",alignItems:"flex-end",width:"initial",height:"initial",borderRadius:"10px",margin:`${2*f.margin}% ${f.margin}%`}),a=o.default.getContentBase({fontsize:"14px",textAlign:"right"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getMetaContentType({app:t,ui:e}){const n=o.default.getLayoutBlock({background:r.default.reliefRGB,width:"initial",height:"initial",margin:"10px 0px",padding:"10px 20px 10px 20px",justifyContent:"flex-end",borderRadius:"30px"}),a=o.default.getContentBase({fontSize:"12px",color:r.default.whiteRGB,textAlign:"right"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getCh({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"100%",height:"initial",background:r.default.offWhiteRGBA,borderTop:r.default.border,borderBottom:r.default.border,padding:"15px",margin:"0px 0px 45px 0px"}),a=o.default.getContentBase({fontSize:"14px",textAlign:"left",lineHeight:"30px",wordBreak:"break-word"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getAnalyze({app:t,ui:e}){const n=o.default.getLayoutTable({width:"100%",height:"initial",background:r.default.whiteRGB,borderTop:r.default.border,borderBottom:r.default.border}),a=o.default.getContentBase({textAlign:"center"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getAnalyzeRow({app:t,ui:e}){const n=o.default.getLayoutTableRow({}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getAnalyzeCol({app:t,ui:e}){const n=o.default.getLayoutTableCol({width:"33.3%",height:"120px",verticalAlign:"middle",margin:"40px auto 40px auto"}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getAnalyzeLabel({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"initial",height:"initial",marginBottom:"20px"}),a=o.default.getContentBase({lineHeight:"14px",fontSize:"12px"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getAnalyzeValue({app:t,ui:e}){const n=o.default.getLayoutBlock({margin:"0 auto",width:"initial",height:"initial"}),a=o.default.getContentBase({fontSize:"1.8em",color:r.default.themeRGBA}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getAnalyzeHr({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"70%",height:"initial",margin:"10px auto 10px auto",borderTop:`1px solid ${r.default.borderRGB}`}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getH1s({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"100%",height:"initial",margin:`${f.margin}px auto`,background:r.default.whiteRGB,borderTop:r.default.border,borderBottom:r.default.border}),a=o.default.getContentBase({textAlign:"left"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getH1sLi({app:t,ui:e}){const n=o.default.getLayoutBlock({width:"90%",height:"initial",margin:`5px ${f.margin}% 5px ${f.margin}%`}),a=o.default.getContentBase({fontSize:"14px",lineHeight:2,textAlign:"left"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getFooter({app:t,ui:e}){const n=f.getFooterPositions({app:t,ui:e}),a=f.getFooterBorders({app:t,ui:e}),i=o.default.getLayoutFlex(Object.assign(Object.assign({width:"100%",background:r.default.offWhiteRGB,height:d.default.headerHeight,"zÎndex":"1px"},n),a)),s=o.default.getContentBase(),u=o.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px)"});return o.default.get({layout:i,content:s,animation:u})}static getFooterChild({app:t,ui:e}){const n=o.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=o.default.getContentBase({fontSize:"0.5em",cursor:"pointer"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getFooterChildLike({app:t,ui:e}){const n=o.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=o.default.getContentBase({fontSize:"0.5em"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getFooterChildMoney({app:t,ui:e}){const n=o.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=o.default.getContentBase({fontSize:"0.5em"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getFooterChildShare({app:t,ui:e}){const n=o.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=o.default.getContentBase({fontSize:"0.5em"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getMetaItems({app:t,ui:e}){const n=o.default.getLayoutFlex({width:"90%",margin:`${f.margin}%`}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getUpdateWrap({app:t,ui:e}){const n=o.default.getLayoutFlex({justifyContent:"flex-end",alignItems:"flex-end",margin:"0px 0px 30px 0px"}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getUpdate({app:t,ui:e}){const n=o.default.getLayoutFlex({width:"160px",borderRadius:"30px",background:r.default.themeRGBA}),a=o.default.getContentBase({textIndent:"15px",cursor:"pointer",fontSize:"12px",color:r.default.whiteRGB}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}}e.default=f},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(5)),o=a(n(90)),r=a(n(91)),s=a(n(92));e.default=class{constructor(){return[]}static getDispPosts(t){const{app:e,postsTimeline:n,postsMulti:a,postsSingle:o,postsChild:r,postsLogs:s}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return n;case i.default.dispThreadTypeMulti:return a;case i.default.dispThreadTypeSingle:return o;case i.default.dispThreadTypeChild:return r;case i.default.dispThreadTypeLogs:return s}}static getAnyActionPosts(t){const{app:e,posts:n}=t,a=n&&n.length>0;switch(t.postsMulti=new o.default,t.postsTimeline=new r.default,t.postsSingle=new s.default,t.postsChild=[],t.postsLogs=[],e.dispThreadType){case i.default.dispThreadTypeTimeline:t.postsTimeline=a?n:[];break;case i.default.dispThreadTypeMulti:t.postsMulti=a?n:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=a?n:[];break;case i.default.dispThreadTypeChild:t.postsChild=a?n:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=a?n:[]}return t}}},function(t,e,n){function a(t){if(t)return function(t){for(var e in a.prototype)t[e]=a.prototype[e];return t}(t)}t.exports=a,a.prototype.on=a.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},a.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},a.prototype.off=a.prototype.removeListener=a.prototype.removeAllListeners=a.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,a=this._callbacks["$"+t];if(!a)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<a.length;i++)if((n=a[i])===e||n.fn===e){a.splice(i,1);break}return this},a.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var a=0,i=(n=n.slice(0)).length;a<i;++a)n[a].apply(this,e);return this},a.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},a.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var a,i=n(73),o=n(40),r=n(75),s=n(76),u=n(77);"undefined"!=typeof ArrayBuffer&&(a=n(78));var l="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),d="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),c=l||d;e.protocol=3;var f=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=i(f),g={type:"error",data:"parser error"},h=n(79);function m(t,e,n){for(var a=new Array(t.length),i=s(t.length,n),o=function(t,n,i){e(n,(function(e,n){a[t]=n,i(e,a)}))},r=0;r<t.length;r++)o(r,t[r],i)}e.encodePacket=function(t,n,a,i){"function"==typeof n&&(i=n,n=!1),"function"==typeof a&&(i=a,a=null);var o=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&o instanceof ArrayBuffer)return function(t,n,a){if(!n)return e.encodeBase64Packet(t,a);var i=t.data,o=new Uint8Array(i),r=new Uint8Array(1+i.byteLength);r[0]=f[t.type];for(var s=0;s<o.length;s++)r[s+1]=o[s];return a(r.buffer)}(t,n,i);if(void 0!==h&&o instanceof h)return function(t,n,a){if(!n)return e.encodeBase64Packet(t,a);if(c)return function(t,n,a){if(!n)return e.encodeBase64Packet(t,a);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},n,!0,a)},i.readAsArrayBuffer(t.data)}(t,n,a);var i=new Uint8Array(1);i[0]=f[t.type];var o=new h([i.buffer,t.data]);return a(o)}(t,n,i);if(o&&o.base64)return function(t,n){var a="b"+e.packets[t.type]+t.data.data;return n(a)}(t,i);var r=f[t.type];return void 0!==t.data&&(r+=a?u.encode(String(t.data),{strict:!1}):String(t.data)),i(""+r)},e.encodeBase64Packet=function(t,n){var a,i="b"+e.packets[t.type];if(void 0!==h&&t.data instanceof h){var o=new FileReader;return o.onload=function(){var t=o.result.split(",")[1];n(i+t)},o.readAsDataURL(t.data)}try{a=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var r=new Uint8Array(t.data),s=new Array(r.length),u=0;u<r.length;u++)s[u]=r[u];a=String.fromCharCode.apply(null,s)}return i+=btoa(a),n(i)},e.decodePacket=function(t,n,a){if(void 0===t)return g;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(a&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return g;var i=t.charAt(0);return Number(i)==i&&p[i]?t.length>1?{type:p[i],data:t.substring(1)}:{type:p[i]}:g}i=new Uint8Array(t)[0];var o=r(t,1);return h&&"blob"===n&&(o=new h([o])),{type:p[i],data:o}},e.decodeBase64Packet=function(t,e){var n=p[t.charAt(0)];if(!a)return{type:n,data:{base64:!0,data:t.substr(1)}};var i=a.decode(t.substr(1));return"blob"===e&&h&&(i=new h([i])),{type:n,data:i}},e.encodePayload=function(t,n,a){"function"==typeof n&&(a=n,n=null);var i=o(t);if(n&&i)return h&&!c?e.encodePayloadAsBlob(t,a):e.encodePayloadAsArrayBuffer(t,a);if(!t.length)return a("0:");m(t,(function(t,a){e.encodePacket(t,!!i&&n,!1,(function(t){a(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return a(e.join(""))}))},e.decodePayload=function(t,n,a){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,a);var i;if("function"==typeof n&&(a=n,n=null),""===t)return a(g,0,1);for(var o,r,s="",u=0,l=t.length;u<l;u++){var d=t.charAt(u);if(":"===d){if(""===s||s!=(o=Number(s)))return a(g,0,1);if(s!=(r=t.substr(u+1,o)).length)return a(g,0,1);if(r.length){if(i=e.decodePacket(r,n,!1),g.type===i.type&&g.data===i.data)return a(g,0,1);if(!1===a(i,u+o,l))return}u+=o,s=""}else s+=d}return""!==s?a(g,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));m(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){return n(null,t)}))}),(function(t,e){var a=e.reduce((function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2}),0),i=new Uint8Array(a),o=0;return e.forEach((function(t){var e="string"==typeof t,n=t;if(e){for(var a=new Uint8Array(t.length),r=0;r<t.length;r++)a[r]=t.charCodeAt(r);n=a.buffer}i[o++]=e?0:1;var s=n.byteLength.toString();for(r=0;r<s.length;r++)i[o++]=parseInt(s[r]);i[o++]=255;for(a=new Uint8Array(n),r=0;r<a.length;r++)i[o++]=a[r]})),n(i.buffer)}))},e.encodePayloadAsBlob=function(t,n){m(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var a=new Uint8Array(t.length),i=0;i<t.length;i++)a[i]=t.charCodeAt(i);t=a.buffer,e[0]=0}var o=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),r=new Uint8Array(o.length+1);for(i=0;i<o.length;i++)r[i]=parseInt(o[i]);if(r[o.length]=255,h){var s=new h([e.buffer,r.buffer,t]);n(null,s)}}))}),(function(t,e){return n(new h(e))}))},e.decodePayloadAsBinary=function(t,n,a){"function"==typeof n&&(a=n,n=null);for(var i=t,o=[];i.byteLength>0;){for(var s=new Uint8Array(i),u=0===s[0],l="",d=1;255!==s[d];d++){if(l.length>310)return a(g,0,1);l+=s[d]}i=r(i,2+l.length),l=parseInt(l);var c=r(i,0,l);if(u)try{c=String.fromCharCode.apply(null,new Uint8Array(c))}catch(t){var f=new Uint8Array(c);c="";for(d=0;d<f.length;d++)c+=String.fromCharCode(f[d])}o.push(c),i=r(i,l)}var p=o.length;o.forEach((function(t,i){a(e.decodePacket(t,n,!0),i,p)}))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default={PRODUCTION:"production",LOCALHOST:"localhost",DEVELOPMENT:"development",PRODUCTION_IP:"ip-172-31-27-3",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"portal",EXTENSION:"extension"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},talknClientJs:"talkn.client.js",noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(11)),o=a(n(86)),r=a(n(20)),{PRODUCTION:s,DEVELOPMENT:u,PRODUCTION_IP:l,LOCALHOST:d,PRODUCTION_DOMAIN:c,DEVELOPMENT_DOMAIN:f,SUB_DOMAINS:p,PORTS:g}=i.default,h=o.default.hostname(),m=function(t){if(t===i.default.PRODUCTION_IP||t.indexOf(i.default.PRODUCTION_DOMAIN)>=0)return i.default.PRODUCTION;if("browser"===r.default.title){const t=Number(location.port);if(t===i.default.PORTS.DEVELOPMENT||t===i.default.PORTS.DEVELOPMENT_API)return i.default.DEVELOPMENT}return i.default.LOCALHOST}(h),y=m===u,x=m===s?c:f,b=`${p.WWW}.${x}`,T=`${p.API}.${x}`,B=y?`${d}:${g.DEVELOPMENT_API}/talkn.api.js`:`${T}/v1`,C=y?`${d}:${g.DEVELOPMENT}/talkn.client.js`:`${p.CLIENT}.${x}`,S=`${p.DESC}.${x}`,L=`${p.PORTAL}.${x}`,w=`${p.ASSETS}.${x}`,E=`${w}/img/`,A={domain:x,env:m,hostName:h,apiURL:T,apiAccessURL:B,wwwURL:b,descURL:S,portalURL:L,clientURL:C,assetsURL:w,autoURL:`${p.AUTO}.${x}`,extURL:`${p.EXT}.${x}`,transactionURL:`${p.TRANSACTION}.${x}`,assetsImgPath:E,assetsIconPath:`${w}/icon/`,assetsJsPath:`${w}/js/`,sessionURL:`${p.SESSION}.${x}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${E}talkn_logo_html.png`,Music:`//${E}talkn_logo_music.png`,Video:`//${E}talkn_logo_video.png`}};e.default=Object.assign({},A)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class a{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get CONNECTION_SERVER_KEY(){return"connectionServer"}static get CLIENT_TO_SERVER_EMIT(){return"CLIENT_TO_SERVER[EMIT]:"}static get SERVER_TO_CLIENT_EMIT(){return"SERVER_TO_CLIENT[EMIT]:"}static get SERVER_TO_CLIENT_BROADCAST(){return"SERVER_TO_CLIENT[BROADCAST]:"}static get CLIENT_TO_CLIENT_EMIT(){return"CLIENT_TO_CLIENT[EMIT]:"}static get PREFIX_REQUEST(){return"REQUEST:"}static get PREFIX_RESPONSE(){return"RESPONSE:"}static get REDUX_ACTION_KEY(){return"type"}static get map(){return{tuned:{requestPublicState:{},requestPrivateState:{thread:[{columnName:"ch"}]},responseEmitState:{user:["uid"],setting:"*"},responseBroadcastState:{}},find:{requestPublicState:{thread:[{columnName:"ch"}]},requestPrivateState:{thread:[{columnName:"protocol"},{columnName:"host"},{columnName:"hasSlash"}],app:[{columnName:"multistream"},{columnName:"rootCh"},{columnName:"dispThreadType"},{columnName:"actioned"},{columnName:"offsetFindId"}]},responseEmitState:{posts:"*",thread:"*",app:["dispThreadType","offsetFindId","tuned","multistreamed"]},responseBroadcastState:{thread:["watchCnt","ch"]}},getMore:{requestPublicState:{},requestPrivateState:{thread:[{columnName:"ch"}],app:[{columnName:"multistream"},{columnName:"dispThreadType"},{columnName:"offsetFindId"},{columnName:"multistreamed"}]},responseEmitState:{thread:"*",app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{thread:[{columnName:"ch"}]},requestPrivateState:{thread:[{columnName:"protocol"},{columnName:"host"},{columnName:"hasSlash"}]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{thread:[{columnName:"ch"}]},requestPrivateState:{thread:[{columnName:"protocol"},{columnName:"host"},{columnName:"hasSlash"}],app:[{columnName:"tuned"},{columnName:"rootCh"},{columnName:"multistream"},{columnName:"dispThreadType"},{columnName:"offsetFindId"},{columnName:"multistreamed"}]},responseEmitState:{app:["tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},changeThreadDetail:{requestPublicState:{thread:[{columnName:"ch"}]},requestPrivateState:{},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{thread:[{columnName:"ch"}]},requestPrivateState:{},responseEmitState:{thread:"*"},responseBroadcastState:{}},findMenuIndex:{requestPublicState:{},requestPrivateState:{app:[{columnName:"findType"},{columnName:"rootCh"}]},responseEmitState:{menuIndex:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:[{columnName:"uid"},{columnName:"utype"}],app:[{columnName:"multistream"},{columnName:"inputPost"},{columnName:"inputStampId"},{columnName:"inputCurrentTime"},{columnName:"dispThreadType"},{columnName:"multistreamed"}],thread:[{columnName:"findType"},{columnName:"title"},{columnName:"protocol"},{columnName:"ch"},{columnName:"chs"},{columnName:"emotions"},{columnName:"favicon"},{columnName:"contentType"}]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:"*",menuIndex:"*"}},updateThreadServerMetas:{requestPublicState:{thread:[{columnName:"serverMetas"}]},requestPrivateState:{thread:[{columnName:"host"},{columnName:"protocol"},{columnName:"ch"}],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:[{columnName:"requestLoginType"}]},requestPrivateState:{user:[{columnName:"uid"},{columnName:"href"}]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["watchCnt","ch"]}}}}static getRequestState(t,e,n){const i=t.replace(a.CLIENT_TO_SERVER_EMIT,""),{requestPublicState:o,requestPrivateState:r}=a.map[i];let s={[a.REDUX_ACTION_KEY]:i};return Object.keys(r).length>0&&Object.keys(r).forEach(t=>{const a=r[t];s[t]||(s[t]={}),"*"===a?s=Object.assign(Object.assign({},s),{[t]:e[t].toJSON()}):a.forEach(a=>{const{columnName:i,valid:o}=a;let r=e[t][i];const u=!!o&&o(r);if(u)throw`VALID PRIVATE SEQUENCE: ${t}.${i}=${r} [${u}]`;if(!s[t][i]){let a=e[t][i];!e[t][i]&&n&&n[t]&&n[t][i]&&(a=n[t][i]),s[t][i]=a}})}),Object.keys(o).length>0&&Object.keys(o).forEach(t=>{const a=o[t];s[t]||(s[t]={}),a.forEach(a=>{const{columnName:i,valid:o}=a;if(!e[t].canSet(i,n))throw`VALID PUBLIC STATE: ${t}.${i}=${n}`;{const e=!!o&&o(n);if(e)throw`VALID PUBLIC SEQUENCE: ${t}.${i}=${n} [${e}]`;s[t][i]||(s[t][i]=n)}})}),s}static getResponseState(t,e,n){const i=e.type,o=a.map[i][`response${t}State`];let r={[a.REDUX_ACTION_KEY]:i};return Object.keys(o).forEach(t=>{if(!n[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const a=o[t];let i=n[t];switch(i.constructor.name){case"model":delete(i=i.toJSON())._id,delete i.__v}"*"===a?r=Object.assign(Object.assign({},r),{[t]:i}):a.forEach(a=>{if(void 0===n[t][a])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${a}`;r=Object.assign(Object.assign({},r),{[t]:Object.assign(Object.assign({},r[t]),{[a]:n[t][a]})})})}}),r}static getRequestActionState(t,e=null,n=null){return"string"==typeof e&&null===n?{type:t}:"object"==typeof e&&"object"==typeof n?Object.assign(Object.assign(Object.assign({},e),n),{type:t}):"string"==typeof e&&"object"==typeof n?Object.assign(Object.assign({},n),{type:t}):Object.assign(Object.assign({},e),{type:t})}}e.default=a},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(11)),o=a(n(12)),{SUB_DOMAINS:r,DEVELOPMENT:s}=i.default,{domain:u}=o.default,l="object"==typeof location;o.default.mediaSecondInterval=200,o.default.screenMode={small:600,middle:960},o.default.protcol=l?0===location.href.indexOf("https")?"https":"http":"",o.default.server=u,o.default.portalPath=(o.default.env,`//${r.PORTAL}.${u}/`),o.default.clientPath=`//${r.CLIENT}.${u}/`,o.default.assetsPath=`//${r.ASSETS}.${u}/`,o.default.sessionPath=`//${r.SESSION}.${u}/`,o.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"},e.default=o.default},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(14)),o=a(n(13)),r=a(n(3)),s=a(n(5));class u extends r.default{constructor(t={},e,n={}){super(),this.chs=["/"],this.protocol=o.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const a=u.isWindowObj(t)?u.constructorFromWindow(t,e,n):t;return this.create(a)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e,n){const a=!!e.ch&&e.ch,i=u.getCh(e,a);if(n.ch&&n.ch===i)return n;{let n={},o="";return n.ch=i,n.chs=["/"],n.hasSlash=!!e.hasslash&&r.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=u.getDefaultFavicon(),n.findType=u.findTypeAll,a?(n.protocol=u.getProtocol(a),n.host=u.getHost(a),n.chs=a.chs&&a.chs.length>0?a.chs:u.getChs(i)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:u.getChs(i),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=u.getFaviconFromWindow(window)),n.title=u.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=u.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=u.getIsSelfCh(o,n.ch),n.createTime="",n.updateTime="",n}}static getCh(t,e){if(e)return console.log("BOOT "+e),e;{const t=window.location?window.location:{};let e=t.href?t.href:"";return""!==e?(e=(e=(e="/"===e.slice(-1)?e.slice(0,-1):e).replace("http:/","")).replace("https:/",""),console.log("AA "+e),e):(console.log("BB /"),"/")}}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const a="/"===t.slice(-1)?t:t+"/";if("/"!==a){const t=a.split("/"),i=t.length;let o="";for(var n=1;n<i;n++)""!==t[n]&&(o="/"===(o="/"===(o+=t[n]).slice(-1)?o:o+"/").slice(0,1)?o:"/"+o,e.push(o))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):i.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return s.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=u.getMediaSrc(t);return s.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,n="http://",a="https://",i=location.host;if(e.indexOf(n)||e.indexOf(a)){const t=n+i+(e||"/favicon.ico");return 1===t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,n={}){let a={dispType:"",isSchema:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1};return a.isSchema=u.getStatusIsSchema(t),a.isRequireUpsert=u.getStatusIsRequireUpsert(t,n,a.isSchema),a.isMultistream=u.getStatusIsMultistream(e),a.isToggleMultistream=u.getStatusIsToggleMultistream(e),a.isMediaCh=u.getStatusIsMediaCh(t.ch),a}static getStatusIsSchema(t){if((t.createTime.getTime?t.createTime.getTime():t.createTime)===(t.updateTime.getTime?t.updateTime.getTime():t.updateTime)){if(t.lastPost.createTime.getTime()===t.lastPost.updateTime.getTime())return!0}return!1}static getStatusIsRequireUpsert(t,e,n=!1){const a=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,o=i.getFullYear(),r=i.getMonth(),s=i.getDate(),u=i.getHours(),l=(i.getMinutes(),new Date(o,r,s,u-e.server.findOneThreadActiveHour).getTime());return!!n||a<l}static getStatusIsMultistream(t){return t.dispThreadType===s.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return s.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return"ON_CLICK_MULTISTREAM"===t.actioned}static getContentTypeFromFindType(t){const e=u.findTypes[u.findTypeHtml],n=u.findTypes[u.findTypeMusic],a=u.findTypes[u.findTypeVideo];let i="",o="";return t.indexOf(";")>0&&(o=t.split(";")[0]),t.indexOf("/")>0&&(o=t.split("/")[0]),i=u.findTypeHtml,e.includes(o)&&(i=u.findTypeHtml),n.includes(o)&&(i=u.findTypeMusic),a.includes(o)&&(i=u.findTypeVideo),i}static getFindTypeFromSrc(t){const e=s.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=u},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(17)),u=a(n(4));class l{constructor(t){return{self:l.getSelf(t),icon:l.getIcon(t),textarea:l.getTextarea(t),modalTextarea:l.getModalTextarea(t),button:l.getButton(t),upper:l.getUpper(t),bottom:l.getBottom(t)}}static get selfHeight(){return 45}static getWidth({app:t,ui:e},n=!1){let a="0";if(e.extensionMode===i.default.extensionModeExtBottomLabel||e.extensionMode===i.default.extensionModeExtModalLabel)a="100%";else switch(e.screenMode){case i.default.screenModeSmallLabel:a="100%";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:a=s.default.getWidth({app:t,ui:e})}return n?o.default.trimUnit(a):a}static getLeft({app:t,ui:e},n=!1){let a="0";if(e.extensionMode===i.default.extensionModeExtBottomLabel)return 0;if(e.extensionMode===i.default.extensionModeExtModalLabel)return 0;switch(e.screenMode){case i.default.screenModeSmallLabel:a="0px";break;case i.default.screenModeMiddleLabel:a=`${u.default.getWidth({app:t,ui:e})}`;break;case i.default.screenModeLargeLabel:a=u.default.getWidth({app:t,ui:e})}return n?o.default.trimUnit(a):a}static getBorder({app:t,ui:e},n=!1){switch(e.extensionMode){case i.default.extensionModeExtBottomLabel:return{borderTop:r.default.border,borderRight:r.default.border,borderLeft:r.default.border};case i.default.extensionModeExtModalLabel:return{border:r.default.border};default:return e.includeIframeTag?{border:r.default.border}:(e.screenMode,i.default.screenModeSmallLabel,{borderTop:r.default.border,borderBottom:r.default.border})}}static getBorderRadius({app:t,ui:e},n=!1){return e.extensionMode===i.default.extensionModeExtBottomLabel?"100%"===e.extensionWidth?"0px 0px 0px 0px":`${r.default.radius} ${r.default.radius} 0px 0px`:e.extensionMode===i.default.extensionModeExtModalLabel?`0px 0px ${r.default.radius} ${r.default.radius}`:0}static getTransform({app:t,ui:e}){let n="translate3d( 0px, 0px, 0px )";switch(e.screenMode){case i.default.screenModeSmallLabel:n=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case i.default.screenModeMiddleLabel:e.isOpenDetail,n="translate3d( 0px ,0px, 0px )";break;case i.default.screenModeLargeLabel:n="translate3d( 0px ,0px, 0px )"}return n}static getSelf({app:t,ui:e}){const n=l.getBorder({app:t,ui:e}),a=l.getBorderRadius({app:t,ui:e}),i=o.default.getLayoutFlex(Object.assign({position:"fixed",bottom:0,left:l.getLeft({app:t,ui:e}),flexGrow:1,height:l.selfHeight,width:l.getWidth({app:t,ui:e}),maxWidth:l.getWidth({app:t,ui:e}),background:r.default.offWhiteRGBA,justifyContent:"flex-start",borderRadius:a},n)),s=o.default.getAnimationBase({transform:l.getTransform({app:t,ui:e})});return o.default.get({layout:i,content:{},animation:s})}static getIcon({thread:t}){const e=o.default.getLayoutInlineBlock({width:"20%",maxWidth:"20%",height:"55%",backgroundImage:"url()",backgroundPosition:"center center",backgroundSize:"24px 24px",backgroundRepeat:"no-repeat",zIndex:9999}),n=o.default.getContentBase({cursor:"pointer"});return o.default.get({layout:e,content:n,animation:{}})}static getTextarea({app:t,ui:e}){const n=e.extensionMode===i.default.extensionModeExtModalLabel?"60%":"54%",a=o.default.getLayoutInlineBlock({width:n,maxWidth:n,height:"25px",background:r.default.whiteRGB,padding:"6px",margin:"0 3% 0 0",outline:"none",resize:"none",lineHeight:"0.9",border:r.default.border,borderRadius:"3px",WebkitAppearance:"none"}),s=o.default.getContentBase({fontSize:"12px",textAlign:"left"}),u=o.default.getAnimationBase();return o.default.get({layout:a,content:s,animation:u})}static getModalTextarea({app:t,ui:e}){const n=o.default.getLayoutInlineBlock({width:"60%",maxWidth:"60%",height:"55%",background:r.default.whiteRGB,padding:"6px",margin:"0 0% 0 0",outline:"none",resize:"none",lineHeight:"0.9",border:r.default.border,borderRadius:"3px",WebkitAppearance:"none"}),a=o.default.getContentBase({fontSize:"12px",textAlign:"left"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getButton({app:t,ui:e}){const n=o.default.getLayoutInlineBlock({outline:"none",width:"20%",maxWidth:"20%",height:"56%",margin:"0px 3% 0px 0%",background:"rgb(245, 245, 245)",border:r.default.border,borderRadius:"3px"}),a=o.default.getContentBase({fontSize:"12px",cursor:"pointer"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getUpper({app:t,ui:e}){const n=o.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start"}),a=o.default.getContentBase({}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getBottom({app:t,ui:e}){const n=o.default.getLayoutFlex({alignItems:"center",justifyContent:"center"}),a=o.default.getContentBase({fontSize:"10px"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(5)),o=a(n(1)),r=a(n(0)),s=a(n(2)),u=a(n(6)),l=a(n(16)),d=a(n(18)),c=a(n(4)),f=a(n(7)),p=a(n(53));class g{constructor(t){return{self:g.getSelf(t),ol:g.getOl(t),more:g.getMore(t)}}static getSelfDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getMinWidth({app:t,ui:e},n=!1){return n?r.default.trimUnit("200px"):"200px"}static getOlWidth({app:t,ui:e},n=!1){const a=e.extensionMode===o.default.extensionModeExtBottomLabel?"90%":"100%";return n?r.default.trimUnit(a):a}static getWidth({app:t,ui:e},n=!1){let a="100%";if(e.extensionMode===o.default.extensionModeExtBottomLabel)a="90%";else switch(e.screenMode){case o.default.screenModeSmallLabel:return"100%";case o.default.screenModeMiddleLabel:return`calc(100% - ${c.default.getWidth({app:t,ui:e},!1)})`;case o.default.screenModeLargeLabel:a=`calc( ${100-f.default.getWidth({app:t,ui:e},!1)}% - ${c.default.getWidth({app:t,ui:e},!1)} )`}return n?r.default.trimUnit(a):a}static closeIndexTransform({app:t,ui:e}){switch(e.screenMode){case o.default.screenModeSmallLabel:return`translate3d( -${e.width}px, 0px, 0px)`;case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:return`translate3d( -${c.default.getWidth({app:t,ui:e})}px, 0px, 0px)`}}static openIndexTransform(t){return"translate3d( 0px, 0px, 0px)"}static get headerHeight(){return 35}static getBorders({app:t,ui:e}){return e.extensionMode===o.default.screenModeSmallLabel?{borderRight:s.default.border,borderLeft:s.default.border}:{}}static getMargin({app:t,ui:e},n=!1){let a="0",i="0",r="0";if(a=`${u.default.headerHeight}px 0px 0px 0px`,t.isMediaCh,i="0px",t.isMediaCh,r="0px",e.extensionMode===o.default.extensionModeExtBottomLabel)a=`${i} 5% ${u.default.headerHeight}px 5%`;else if(e.extensionMode===o.default.extensionModeExtModalLabel)a=`${i} 0px ${l.default.selfHeight}px 0px`;else switch(e.screenMode){case o.default.screenModeSmallLabel:a=`${i} 0px ${r} 0px`;break;case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:a=`${i} 0px ${r} ${c.default.getWidth({app:t,ui:e})}`}return a}static getPadding({app:t,ui:e},n=!1){let a="0",r="0";if(e.extensionMode===o.default.extensionModeExtBottomLabel)a="0px";else if(e.extensionMode===o.default.extensionModeExtModalLabel)a="0px";else{if(t.isMediaCh)switch(t.chType){case i.default.mediaTagTypeAudio:r=`${l.default.selfHeight}px`;case i.default.mediaTagTypeVideo:r=`${l.default.selfHeight}px`}switch(e.screenMode){case o.default.screenModeSmallLabel:case o.default.screenModeMiddleLabel:a=`0px 0px ${l.default.selfHeight}px 0px`;break;case o.default.screenModeLargeLabel:a="0px 0px 0px 0px"}}return a}static getSelfTransform({app:t,ui:e}){return e.extensionMode===o.default.extensionModeExtBottomLabel?e.isDispPosts?"translate3d(0px, 0px, 0px)":`translate3d(0px, calc( 100% + ${l.default.selfHeight}px ), 0px)`:"translate3d(0px, 0px, 0px)"}static getSelfHeight({app:t,ui:e}){switch(e.extensionMode){case o.default.extensionModeExtBottomLabel:case o.default.extensionModeExtModalLabel:return`calc( 100% - ${d.default.headerHeight+l.default.selfHeight}px )`;case o.default.extensionModeExtIncludeLabel:return"100%";default:return e.screenMode===o.default.screenModeLargeLabel?t.chType===i.default.mediaTagTypeVideo?`calc( 100% - ${d.default.headerHeight+l.default.selfHeight+p.default.height}px )`:`calc( 100% - ${d.default.headerHeight+l.default.selfHeight}px )`:"auto"}}static getSelfMinHeight({app:t,ui:e}){return t.chType===i.default.mediaTagTypeVideo?`calc( 100% - ${p.default.height+l.default.selfHeight+u.default.headerHeight}px)`:e.extensionMode===o.default.extensionModeExtBottomLabel||e.extensionMode===o.default.extensionModeExtModalLabel?`calc( 100% - ${d.default.headerHeight+l.default.selfHeight}px )`:e.screenMode===o.default.screenModeLargeLabel?`calc( 100% - ${d.default.headerHeight+l.default.selfHeight}px )`:"auto"}static getSelfTop({app:t,ui:e}){return e.extensionMode===o.default.extensionModeExtNoneLabel&&t.chType===i.default.mediaTagTypeVideo?`${u.default.headerHeight+p.default.height}px`:`${u.default.headerHeight}px`}static getSelf({app:t,ui:e}){let n="absolute",a="hidden",i="hidden",u={borderRight:0,borderLeft:0},l=s.default.whiteRGBA,d=1;e.extensionMode===o.default.extensionModeExtBottomLabel||e.extensionMode===o.default.extensionModeExtModalLabel?(n="fixed",a="hidden",i="scroll",u.borderRight=s.default.border,u.borderLeft=s.default.border,d=-2):(e.screenMode===o.default.screenModeLargeLabel&&(a="hidden",i="scroll"),u=g.getBorders({app:t,ui:e}));const c=r.default.getLayoutBlock(Object.assign(Object.assign({position:n,top:g.getSelfTop({app:t,ui:e}),width:g.getWidth({app:t,ui:e}),minWidth:g.getMinWidth({app:t,ui:e}),height:g.getSelfHeight({app:t,ui:e}),minHeight:g.getSelfMinHeight({app:t,ui:e}),maxHeight:"auto",margin:g.getMargin({app:t,ui:e}),padding:g.getPadding({app:t,ui:e}),background:l,overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflowX:a,overflowY:i},u),{zIndex:d})),f=r.default.getAnimationBase({});return r.default.get({layout:c,content:{},animation:f})}static getOl({app:t,ui:e}){let n="100%",a="0",i="0",u="0";e.extensionMode===o.default.extensionModeExtBottomLabel&&(n=g.getOlWidth({app:t,ui:e}),a="0px 0px 0px 5%",i=s.default.border,u=s.default.border);const l=r.default.getLayoutBlock({width:n,margin:a,height:`calc( 100% - ${d.default.headerHeight}px )`,minHeight:"inherit",borderRight:i,borderLeft:u}),c=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:l,content:{},animation:c})}static getMore({app:t,ui:e}){const n=e.isBubblePost?s.default.themeRGBA:s.default.reliefRGBA,a=e.isBubblePost?"15px auto":"10px auto",i=r.default.getLayoutFlex({width:"50%",height:s.default.notifHeight,margin:a,alignItems:"center",justifyContent:"center",zIndex:"10",background:n,borderRadius:"20px"}),o=r.default.getContentBase({lineHeight:2,fontSize:"12px",color:s.default.whiteRGB,cursor:"pointer"}),u=r.default.getAnimationBase();return r.default.get({layout:i,content:o,animation:u})}}e.default=g},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2)),r=a(n(31)),s=a(n(1));class u{constructor(t){return{self:u.getSelf(t),notif:{}}}static get selfHeight(){return"100%"}static get closeHeight(){return 45}static getOpenHeight({app:t,ui:e},n){switch(e.extensionMode){case s.default.extensionModeExtModalLabel:case s.default.extensionModeExtBottomLabel:return 450;default:return window.innerHeight}}static get headerHeight(){return 45}static get notifOpenTranslate(){return 20}static get notifHeight(){return 20}static get widthRatio(){return.94}static getWidth({app:t,ui:e},n=!1){return n?i.default.trimUnit("100%"):"100%"}static getSelfHeightPx({app:t,ui:e}){return`calc( 100vh - ${r.default.selfHeight}px )`}static getSelfRight({bootOption:t,app:e,ui:n},a,o=!1){return o?i.default.trimUnit("0px"):"0px"}static getSelfOpenTranslateY(){return-r.default.selfHeight+"px"}static getSelfCloseTranslateY(){return u.getSelfHeightPx({})}static getSelf(t){const{app:e,ui:n,bootOption:a}=t,r=u.getWidth(e),s=u.getSelfHeightPx(t),l=u.getSelfRight(t,r),d=u.getSelfOpenTranslateY(),c=i.default.getLayoutBlock({position:"absolute",width:r,height:s,right:l,bottom:0,overflow:"visible",borderBottom:"none",margin:"0 auto",zIndex:o.default.maxZIndex}),f=i.default.getContentBase({textAlign:"left"}),p=i.default.getAnimationBase({transform:`translate3d(0px, ${d}, 0px)`,transition:o.default.getTransition({app:e,ui:n})});return i.default.get({layout:c,content:f,animation:p})}}e.default=u},function(t,e,n){(function(a){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let a=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(a++,"%c"===t&&(i=a))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==a&&"env"in a&&(t=a.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(61)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(20))},function(t,e){var n,a,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{a="function"==typeof clearTimeout?clearTimeout:r}catch(t){a=r}}();var u,l=[],d=!1,c=-1;function f(){d&&u&&(d=!1,u.length?l=u.concat(l):c=-1,l.length&&p())}function p(){if(!d){var t=s(f);d=!0;for(var e=l.length;e;){for(u=l,l=[];++c<e;)u&&u[c].run();c=-1,e=l.length}u=null,d=!1,function(t){if(a===clearTimeout)return clearTimeout(t);if((a===r||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(t);try{a(t)}catch(e){try{return a.call(null,t)}catch(e){return a.call(this,t)}}}(t)}}function g(t,e){this.fun=t,this.array=e}function h(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new g(t,e)),1!==l.length||d||s(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),a=0,i=n.length;a<i;a++){var o=n[a].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(a){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let a=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(a++,"%c"===t&&(i=a))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==a&&"env"in a&&(t=a.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(80)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(20))},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(7));class s{static get widthRate(){return.3}static get otherWidthRate(){return 1-s.widthRate}static getWidth({app:t,ui:e},n=!1){let a="0";switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:a="0%";break;case i.default.screenModeLargeLabel:a="30%"}return n?o.default.trimUnit(a):a}static getMinWidth({app:t,ui:e},n=!1){let a="0";switch(e.screenMode){case i.default.screenModeSmallLabel:a="0%";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:a="320px"}return n?o.default.trimUnit(a):a}static getTransform({app:t,ui:e}){let n=s.closeSelfTransform;switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:n=s.closeSelfTransform;break;case i.default.screenModeLargeLabel:n="translate3d(0px, 0px, 0px)"}return n}static get closeSelfTransform(){return`translate3d(0%, calc( 100% + ${2*r.default.padding}px ), 0px)`}static get openSelfTransform(){return"translate3d(0%, 0%, 0px)"}static getHeader(t){return r.default.getHeader(t)}static getHeaderP(t){return r.default.getHeaderP(t)}static getBody(t){return r.default.getBody(t)}static getMeta(t){return r.default.getMeta(t)}static getImg(t){return r.default.getImg(t)}static getDescription(t){return r.default.getDescription(t)}static getMetaContentTypeWrap(t){return r.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return r.default.getMetaContentType(t)}static getCh(t){return r.default.getCh(t)}static getAnalyze(t){return r.default.getAnalyze(t)}static getAnalyzeRow(t){return r.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return r.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return r.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return r.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return r.default.getAnalyzeHr(t)}static getH1s(t){return r.default.getH1s(t)}static getH1sLi(t){return r.default.getH1sLi(t)}static getFooter(t){return r.default.getFooter(t)}static getFooterChild(t){return r.default.getFooterChild(t)}static getFooterChildLike(t){return r.default.getFooterChildLike(t)}static getFooterChildMoney(t){return r.default.getFooterChildMoney(t)}static getFooterChildShare(t){return r.default.getFooterChildShare(t)}static getMetaItems(t){return r.default.getMetaItems(t)}static getUpdateWrap(t){return r.default.getUpdateWrap(t)}static getUpdate(t){return r.default.getUpdate(t)}}e.default=s},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(139));class o{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(o.inputs).forEach(t=>{o.inputs[t].forEach(e=>{this.belongCoverTypes[e]=t})}),Object.keys(o.TYPES).forEach(t=>{this.typesArray.push(t);const e=o.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL}),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=o.defaultModelKey,e=0,n=!0){let a=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const r=Object.keys(i),s=r.length-1;for(let t=0;t<s;t++){const n=r[t],o=i[n];if(n>e)break;a=o}return n?a+1:a}static get inputs(){return{[o.TYPES.LIKE.LABEL]:[1,2,3,4,5],[o.TYPES.MONEY.LABEL]:[100],[o.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[o.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[o.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[o.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[o.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[o.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[o.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[o.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=o},function(t,e,n){var a=n(62)("socket.io-parser"),i=n(9),o=n(65),r=n(35),s=n(36);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=c;var l=e.ERROR+'"encode error"';function d(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return l;n+=i}return a("encoded %j as %s",t,n),n}function c(){this.reconstructor=null}function f(t){this.reconPack=t,this.buffers=[]}function p(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,n){(a("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){o.removeBlobs(t,(function(t){var n=o.deconstructPacket(t),a=d(n.packet),i=n.buffers;i.unshift(a),e(i)}))}(t,n):n([d(t)])},i(c.prototype),c.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return p("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var o="";"-"!==t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||"-"!==t.charAt(n))throw new Error("Illegal attachments");i.attachments=Number(o)}if("/"===t.charAt(n+1))for(i.nsp="";++n;){if(","===(u=t.charAt(n)))break;if(i.nsp+=u,n===t.length)break}else i.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(i.id="";++n;){var u;if(null==(u=t.charAt(n))||Number(u)!=u){--n;break}if(i.id+=t.charAt(n),n===t.length)break}i.id=Number(i.id)}if(t.charAt(++n)){var l=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==l&&(i.type===e.ERROR||r(l))))return p("invalid payload");i.data=l}return a("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new f(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},c.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},f.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},f.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var a=n(66),i=n(67),o=n(68);function r(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(r()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return c(this,t)}return l(this,t,e,n)}function l(t,e,n,a){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,a){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(a||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===a?new Uint8Array(e):void 0===a?new Uint8Array(e,n):new Uint8Array(e,n,a);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,n,a):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var a=0|g(e,n),i=(t=s(t,a)).write(e,n);i!==a&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(a=e.length)!=a?s(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}var a;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function d(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,e){if(d(e),t=s(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|p(e.length);t=s(t,n);for(var a=0;a<n;a+=1)t[a]=255&e[a];return t}function p(t){if(t>=r())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r().toString(16)+" bytes");return 0|t}function g(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var a=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return H(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Y(t).length;default:if(a)return H(t).length;e=(""+e).toLowerCase(),a=!0}}function h(t,e,n){var a=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return M(this,e,n);case"utf8":case"utf-8":return E(this,e,n);case"ascii":return v(this,e,n);case"latin1":case"binary":return O(this,e,n);case"base64":return w(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,n);default:if(a)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),a=!0}}function m(t,e,n){var a=t[e];t[e]=t[n],t[n]=a}function y(t,e,n,a,i){if(0===t.length)return-1;if("string"==typeof n?(a=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,a)),u.isBuffer(e))return 0===e.length?-1:x(t,e,n,a,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):x(t,[e],n,a,i);throw new TypeError("val must be string, number or Buffer")}function x(t,e,n,a,i){var o,r=1,s=t.length,u=e.length;if(void 0!==a&&("ucs2"===(a=String(a).toLowerCase())||"ucs-2"===a||"utf16le"===a||"utf-16le"===a)){if(t.length<2||e.length<2)return-1;r=2,s/=2,u/=2,n/=2}function l(t,e){return 1===r?t[e]:t.readUInt16BE(e*r)}if(i){var d=-1;for(o=n;o<s;o++)if(l(t,o)===l(e,-1===d?0:o-d)){if(-1===d&&(d=o),o-d+1===u)return d*r}else-1!==d&&(o-=o-d),d=-1}else for(n+u>s&&(n=s-u),o=n;o>=0;o--){for(var c=!0,f=0;f<u;f++)if(l(t,o+f)!==l(e,f)){c=!1;break}if(c)return o}return-1}function b(t,e,n,a){n=Number(n)||0;var i=t.length-n;a?(a=Number(a))>i&&(a=i):a=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");a>o/2&&(a=o/2);for(var r=0;r<a;++r){var s=parseInt(e.substr(2*r,2),16);if(isNaN(s))return r;t[n+r]=s}return r}function T(t,e,n,a){return U(H(e,t.length-n),t,n,a)}function B(t,e,n,a){return U(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,a)}function C(t,e,n,a){return B(t,e,n,a)}function S(t,e,n,a){return U(Y(e),t,n,a)}function L(t,e,n,a){return U(function(t,e){for(var n,a,i,o=[],r=0;r<t.length&&!((e-=2)<0);++r)n=t.charCodeAt(r),a=n>>8,i=n%256,o.push(i),o.push(a);return o}(e,t.length-n),t,n,a)}function w(t,e,n){return 0===e&&n===t.length?a.fromByteArray(t):a.fromByteArray(t.slice(e,n))}function E(t,e,n){n=Math.min(t.length,n);for(var a=[],i=e;i<n;){var o,r,s,u,l=t[i],d=null,c=l>239?4:l>223?3:l>191?2:1;if(i+c<=n)switch(c){case 1:l<128&&(d=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(d=u);break;case 3:o=t[i+1],r=t[i+2],128==(192&o)&&128==(192&r)&&(u=(15&l)<<12|(63&o)<<6|63&r)>2047&&(u<55296||u>57343)&&(d=u);break;case 4:o=t[i+1],r=t[i+2],s=t[i+3],128==(192&o)&&128==(192&r)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&r)<<6|63&s)>65535&&u<1114112&&(d=u)}null===d?(d=65533,c=1):d>65535&&(d-=65536,a.push(d>>>10&1023|55296),d=56320|1023&d),a.push(d),i+=c}return function(t){var e=t.length;if(e<=A)return String.fromCharCode.apply(String,t);var n="",a=0;for(;a<e;)n+=String.fromCharCode.apply(String,t.slice(a,a+=A));return n}(a)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=r(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,a){return d(e),e<=0?s(t,e):void 0!==n?"string"==typeof a?s(t,e).fill(n,a):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return c(null,t)},u.allocUnsafeSlow=function(t){return c(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,a=e.length,i=0,o=Math.min(n,a);i<o;++i)if(t[i]!==e[i]){n=t[i],a=e[i];break}return n<a?-1:a<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var a=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var r=t[n];if(!u.isBuffer(r))throw new TypeError('"list" argument must be an Array of Buffers');r.copy(a,i),i+=r.length}return a},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?E(this,0,t):h.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,a,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===a&&(a=0),void 0===i&&(i=this.length),e<0||n>t.length||a<0||i>this.length)throw new RangeError("out of range index");if(a>=i&&e>=n)return 0;if(a>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(a>>>=0),r=(n>>>=0)-(e>>>=0),s=Math.min(o,r),l=this.slice(a,i),d=t.slice(e,n),c=0;c<s;++c)if(l[c]!==d[c]){o=l[c],r=d[c];break}return o<r?-1:r<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,a){if(void 0===e)a="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)a=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===a&&(a="utf8")):(a=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");a||(a="utf8");for(var o=!1;;)switch(a){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return T(this,t,e,n);case"ascii":return B(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return S(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+a);a=(""+a).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var A=4096;function v(t,e,n){var a="";n=Math.min(t.length,n);for(var i=e;i<n;++i)a+=String.fromCharCode(127&t[i]);return a}function O(t,e,n){var a="";n=Math.min(t.length,n);for(var i=e;i<n;++i)a+=String.fromCharCode(t[i]);return a}function M(t,e,n){var a=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>a)&&(n=a);for(var i="",o=e;o<n;++o)i+=G(t[o]);return i}function R(t,e,n){for(var a=t.slice(e,n),i="",o=0;o<a.length;o+=2)i+=String.fromCharCode(a[o]+256*a[o+1]);return i}function I(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function _(t,e,n,a,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+a>t.length)throw new RangeError("Index out of range")}function k(t,e,n,a){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(a?i:1-i))>>>8*(a?i:1-i)}function P(t,e,n,a){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(a?i:3-i)&255}function D(t,e,n,a,i,o){if(n+a>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function N(t,e,n,a,o){return o||D(t,0,n,4),i.write(t,e,n,a,23,4),n+4}function F(t,e,n,a,o){return o||D(t,0,n,8),i.write(t,e,n,a,52,8),n+8}u.prototype.slice=function(t,e){var n,a=this.length;if((t=~~t)<0?(t+=a)<0&&(t=0):t>a&&(t=a),(e=void 0===e?a:~~e)<0?(e+=a)<0&&(e=0):e>a&&(e=a),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var a=this[t],i=1,o=0;++o<e&&(i*=256);)a+=this[t+o]*i;return a},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var a=this[t+--e],i=1;e>0&&(i*=256);)a+=this[t+--e]*i;return a},u.prototype.readUInt8=function(t,e){return e||I(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||I(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||I(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||I(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||I(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var a=this[t],i=1,o=0;++o<e&&(i*=256);)a+=this[t+o]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*e)),a},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||I(t,e,this.length);for(var a=e,i=1,o=this[t+--a];a>0&&(i*=256);)o+=this[t+--a]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||I(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||I(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||I(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||I(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||I(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||I(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||I(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||I(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||I(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,a){(t=+t,e|=0,n|=0,a)||_(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,a){(t=+t,e|=0,n|=0,a)||_(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):k(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):k(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):P(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):P(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,a){if(t=+t,e|=0,!a){var i=Math.pow(2,8*n-1);_(this,t,e,n,i-1,-i)}var o=0,r=1,s=0;for(this[e]=255&t;++o<n&&(r*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/r>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,a){if(t=+t,e|=0,!a){var i=Math.pow(2,8*n-1);_(this,t,e,n,i-1,-i)}var o=n-1,r=1,s=0;for(this[e+o]=255&t;--o>=0&&(r*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/r>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):k(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):k(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):P(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||_(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):P(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return N(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return N(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,a){if(n||(n=0),a||0===a||(a=this.length),e>=t.length&&(e=t.length),e||(e=0),a>0&&a<n&&(a=n),a===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(a<0)throw new RangeError("sourceEnd out of bounds");a>this.length&&(a=this.length),t.length-e<a-n&&(a=t.length-e+n);var i,o=a-n;if(this===t&&n<e&&e<a)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,a){if("string"==typeof t){if("string"==typeof e?(a=e,e=0,n=this.length):"string"==typeof n&&(a=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==a&&"string"!=typeof a)throw new TypeError("encoding must be a string");if("string"==typeof a&&!u.isEncoding(a))throw new TypeError("Unknown encoding: "+a)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var r=u.isBuffer(t)?t:H(new u(t,a).toString()),s=r.length;for(o=0;o<n-e;++o)this[o+e]=r[o%s]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function G(t){return t<16?"0"+t.toString(16):t.toString(16)}function H(t,e){var n;e=e||1/0;for(var a=t.length,i=null,o=[],r=0;r<a;++r){if((n=t.charCodeAt(r))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(r+1===a){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function Y(t){return a.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(j,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function U(t,e,n,a){for(var i=0;i<a&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(21))},function(t,e,n){var a=n(71);t.exports=function(t){var e=t.xdomain,n=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||a))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&i)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,n){var a=n(10),i=n(9);function o(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=o,i(o.prototype),o.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},o.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},o.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},o.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},o.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},o.prototype.onData=function(t){var e=a.decodePacket(t,this.socket.binaryType);this.onPacket(e)},o.prototype.onPacket=function(t){this.emit("packet",t)},o.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(7)),u=a(n(4));class l{constructor(t){return{self:l.getSelf(t)}}static get selfHeight(){return 45}static getWidth({app:t,ui:e},n=!1){let a="0";switch(e.screenMode){case i.default.screenModeSmallLabel:a="200%";break;case i.default.screenModeMiddleLabel:a=t.isOpenDetail?`calc( 100% + ${u.default.getWidth({app:t,ui:e})} )`:`calc( 100% + ${s.default.getWidth({app:t,ui:e})} )`;break;case i.default.screenModeLargeLabel:a="100%"}return n?o.default.trimUnit(a):a}static getLeft({app:t,ui:e},n=!1){let a="0";switch(e.screenMode){case i.default.screenModeSmallLabel:case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:a="0px"}return n?o.default.trimUnit(a):a}static getTransform({app:t,ui:e}){let n="translate3d( 0px, 0px, 0px )";if(e.extensionMode===i.default.extensionModeExtBottomLabel)n=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( -50%, 0px, 0px )";else switch(e.screenMode){case i.default.screenModeSmallLabel:n=e.isOpenMenu?"translate3d( 100%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case i.default.screenModeMiddleLabel:n=e.isOpenDetail?`translate3d( -${u.default.baseWidth}, 0px, 0px )`:"translate3d( 0px ,0px, 0px )";break;case i.default.screenModeLargeLabel:n="translate3d( 0px ,0px, 0px )"}return n}static getBorders({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?{border:0}:e.screenMode===i.default.screenModeSmallLabel?{border:r.default.border}:{borderTop:r.default.border,borderBottom:r.default.border}}static getSelf({app:t,ui:e}){const n=l.getBorders({app:t,ui:e}),a=e.extensionMode===i.default.extensionModeExtBottomLabel?r.default.radiuses:"0px",s=o.default.getLayoutFlex(Object.assign({position:"fixed",bottom:"0px",left:l.getLeft({app:t,ui:e}),height:l.selfHeight,width:l.getWidth({app:t,ui:e}),zIndex:r.default.maxZIndex,borderRadius:a,justifyContent:"flex-start"},n)),u=o.default.getAnimationBase({transform:l.getTransform({app:t,ui:e}),transition:r.default.getTransition({app:t,ui:e})});return o.default.get({layout:s,content:{},animation:u})}}e.default=l},function(t,e,n){"use strict";(function(t,a){var i,o=n(57);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:a;var r=Object(o.a)(i);e.a=r}).call(this,n(21),n(96)(t))},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,a=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,i=t.indexOf("["),o=t.indexOf("]");-1!=i&&-1!=o&&(t=t.substring(0,i)+t.substring(i,o).replace(/:/g,";")+t.substring(o,t.length));for(var r=n.exec(t||""),s={},u=14;u--;)s[a[u]]=r[u]||"";return-1!=i&&-1!=o&&(s.source=e,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(t,e){var n=1e3,a=60*n,i=60*a,o=24*i,r=7*o,s=365.25*o;function u(t,e,n,a){var i=e>=1.5*n;return Math.round(t/n)+" "+a+(i?"s":"")}t.exports=function(t,e){e=e||{};var l=typeof t;if("string"===l&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*s;case"weeks":case"week":case"w":return u*r;case"days":case"day":case"d":return u*o;case"hours":case"hour":case"hrs":case"hr":case"h":return u*i;case"minutes":case"minute":case"mins":case"min":case"m":return u*a;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===l&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return u(t,e,o,"day");if(e>=i)return u(t,e,i,"hour");if(e>=a)return u(t,e,a,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=a)return Math.round(t/a)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||a&&(t instanceof ArrayBuffer||i(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,a="function"==typeof ArrayBuffer,i=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}}).call(this,n(28).Buffer)},function(t,e,n){var a=n(69),i=n(43),o=n(9),r=n(27),s=n(44),u=n(45),l=n(19)("socket.io-client:manager"),d=n(42),c=n(85),f=Object.prototype.hasOwnProperty;function p(t,e){if(!(this instanceof p))return new p(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new c({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||r;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=p,p.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},p.prototype.updateSocketIds=function(){for(var t in this.nsps)f.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},p.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},o(p.prototype),p.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},p.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},p.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(t,e){if(l("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=a(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var o=s(n,"open",(function(){i.onopen(),t&&t()})),r=s(n,"error",(function(e){if(l("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var u=this._timeout;l("connect attempt will timeout after %d",u);var d=setTimeout((function(){l("connect attempt timed out after %d",u),o.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",u)}),u);this.subs.push({destroy:function(){clearTimeout(d)}})}return this.subs.push(o),this.subs.push(r),this},p.prototype.onopen=function(){l("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(s(t,"data",u(this,"ondata"))),this.subs.push(s(t,"ping",u(this,"onping"))),this.subs.push(s(t,"pong",u(this,"onpong"))),this.subs.push(s(t,"error",u(this,"onerror"))),this.subs.push(s(t,"close",u(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",u(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(t){this.decoder.add(t)},p.prototype.ondecoded=function(t){this.emit("packet",t)},p.prototype.onerror=function(t){l("error",t),this.emitAll("error",t)},p.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new i(this,t,e),this.nsps[t]=n;var a=this;n.on("connecting",o),n.on("connect",(function(){n.id=a.generateId(t)})),this.autoConnect&&o()}function o(){~d(a.connecting,n)||a.connecting.push(n)}return n},p.prototype.destroy=function(t){var e=d(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},p.prototype.packet=function(t){l("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(n){for(var a=0;a<n.length;a++)e.engine.write(n[a],t.options);e.encoding=!1,e.processPacketQueue()})))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},p.prototype.cleanup=function(){l("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){l("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(t){l("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();l("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout((function(){t.skipReconnect||(l("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(l("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(l("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}},p.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var a=n(29),i=n(72),o=n(81),r=n(82);e.polling=function(t){var e=!1,n=!1,r=!1!==t.jsonp;if("undefined"!=typeof location){var s="https:"===location.protocol,u=location.port;u||(u=s?443:80),e=t.hostname!==location.hostname||u!==t.port,n=t.secure!==s}if(t.xdomain=e,t.xscheme=n,"open"in new a(t)&&!t.forceJSONP)return new i(t);if(!r)throw new Error("JSONP disabled");return new o(t)},e.websocket=r},function(t,e,n){var a=n(30),i=n(22),o=n(10),r=n(23),s=n(41),u=n(24)("engine.io-client:polling");t.exports=d;var l=null!=new(n(29))({xdomain:!1}).responseType;function d(t){var e=t&&t.forceBase64;l&&!e||(this.supportsBinary=!1),a.call(this,t)}r(d,a),d.prototype.name="polling",d.prototype.doOpen=function(){this.poll()},d.prototype.pause=function(t){var e=this;function n(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var a=0;this.polling&&(u("we are currently polling - waiting to pause"),a++,this.once("pollComplete",(function(){u("pre-pause polling complete"),--a||n()}))),this.writable||(u("we are currently writing - waiting to pause"),a++,this.once("drain",(function(){u("pre-pause writing complete"),--a||n()})))}else n()},d.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},d.prototype.onData=function(t){var e=this;u("polling got data %s",t);o.decodePayload(t,this.socket.binaryType,(function(t,n,a){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},d.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},d.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};o.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,n)}))},d.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=s()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var a=n(74),i=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),r="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(a(n)){for(var i=0,s=n.length;i<s;i++)if(t(n[i]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||o&&n instanceof Blob||r&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&t(n[u]))return!0;return!1}}).call(this,n(28).Buffer)},function(t,e,n){"use strict";var a,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),o=64,r={},s=0,u=0;function l(t){var e="";do{e=i[t%o]+e,t=Math.floor(t/o)}while(t>0);return e}function d(){var t=l(+new Date);return t!==a?(s=0,a=t):t+"."+l(s++)}for(;u<o;u++)r[i[u]]=u;d.encode=l,d.decode=function(t){var e=0;for(u=0;u<t.length;u++)e=e*o+r[t.charAt(u)];return e},t.exports=d},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var a=0;a<t.length;++a)if(t[a]===e)return a;return-1}},function(t,e,n){var a=n(27),i=n(9),o=n(84),r=n(44),s=n(45),u=n(19)("socket.io-client:socket"),l=n(22),d=n(40);t.exports=p;var c={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=i.prototype.emit;function p(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}i(p.prototype),p.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[r(t,"open",s(this,"onopen")),r(t,"packet",s(this,"onpacket")),r(t,"close",s(this,"onclose"))]}},p.prototype.open=p.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},p.prototype.send=function(){var t=o(arguments);return t.unshift("message"),this.emit.apply(this,t),this},p.prototype.emit=function(t){if(c.hasOwnProperty(t))return f.apply(this,arguments),this;var e=o(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:d(e))?a.BINARY_EVENT:a.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},p.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},p.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?l.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:a.CONNECT,query:t})}else this.packet({type:a.CONNECT})},p.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},p.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===a.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case a.CONNECT:this.onconnect();break;case a.EVENT:case a.BINARY_EVENT:this.onevent(t);break;case a.ACK:case a.BINARY_ACK:this.onack(t);break;case a.DISCONNECT:this.ondisconnect();break;case a.ERROR:this.emit("error",t.data)}},p.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?f.apply(this,e):this.receiveBuffer.push(e)},p.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var i=o(arguments);u("sending ack %j",i),e.packet({type:d(i)?a.BINARY_ACK:a.ACK,id:t,data:i})}}},p.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},p.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},p.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)f.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},p.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},p.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},p.prototype.close=p.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:a.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},p.prototype.compress=function(t){return this.flags.compress=t,this},p.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var a=n.call(arguments,2);return function(){return e.apply(t,a.concat(n.call(arguments)))}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{static get defaultFindId(){return"000000000000000000000000"}constructor(t={}){return super(),this.create({})}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3)),o=a(n(46));class r extends i.default{static get defaultOffsetFindId(){return o.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",n=t&&t.utype?t.utype:"",a=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,o=t&&t.actioned?t.actioned:"",s=t&&t.offsetFindId?t.offsetFindId:r.defaultOffsetFindId,u=t&&t.offsetSingleFindId?t.offsetSingleFindId:r.defaultOffsetFindId,l=t&&t.offsetMultiFindId?t.offsetMultiFindId:r.defaultOffsetFindId,d=t&&t.offsetChildFindId?t.offsetChildFindId:r.defaultOffsetFindId,c=t&&t.offsetLogsFindId?t.offsetLogsFindId:r.defaultOffsetFindId;t.requestLoginType&&t.requestLoginType;return this.create({uid:e,utype:n,tuned:a,multistreamed:i,actioned:o,offsetFindId:s,offsetSingleFindId:u,offsetMultiFindId:l,offsetChildFindId:d,offsetLogsFindId:c,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:o.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:t&&t.href?t.href:"/"}}e.default=r},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{constructor(t=[]){return super(),t}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{constructor(t={}){super();return this.create({watchCnt:0})}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{constructor(t={}){return super(),this.create(Object.assign({},t))}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(n=>{e[t[n].name]=t[n].value}),e}}e.default=o},function(t,e,n){"use strict";n.r(e),n.d(e,"__DO_NOT_USE__ActionTypes",(function(){return o})),n.d(e,"applyMiddleware",(function(){return m})),n.d(e,"bindActionCreators",(function(){return c})),n.d(e,"combineReducers",(function(){return l})),n.d(e,"compose",(function(){return h})),n.d(e,"createStore",(function(){return s}));var a=n(32),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},o={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function r(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function s(t,e,n){var i;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var u=t,l=e,d=[],c=d,f=!1;function p(){c===d&&(c=d.slice())}function g(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function h(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return p(),c.push(t),function(){if(e){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,p();var n=c.indexOf(t);c.splice(n,1)}}}function m(t){if(!r(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,l=u(l,t)}finally{f=!1}for(var e=d=c,n=0;n<e.length;n++){(0,e[n])()}return t}return m({type:o.INIT}),(i={dispatch:m,subscribe:h,getState:g,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");u=t,m({type:o.REPLACE})}})[a.a]=function(){var t,e=h;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(g())}return n(),{unsubscribe:e(n)}}})[a.a]=function(){return this},t},i}function u(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(t){for(var e=Object.keys(t),n={},a=0;a<e.length;a++){var i=e[a];0,"function"==typeof t[i]&&(n[i]=t[i])}var r,s=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:o.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(t){r=t}return function(t,e){if(void 0===t&&(t={}),r)throw r;for(var a=!1,i={},o=0;o<s.length;o++){var l=s[o],d=n[l],c=t[l],f=d(c,e);if(void 0===f){var p=u(l,e);throw new Error(p)}i[l]=f,a=a||f!==c}return a?i:t}}function d(t,e){return function(){return e(t.apply(this,arguments))}}function c(t,e){if("function"==typeof t)return d(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var a in t){var i=t[a];"function"==typeof i&&(n[a]=d(i,e))}return n}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n}function g(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?p(n,!0).forEach((function(e){f(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function h(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function m(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),a=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return a.apply(void 0,arguments)}},o=e.map((function(t){return t(i)}));return g({},n,{dispatch:a=h.apply(void 0,o)(n.dispatch)})}}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]=Object.assign({},e),t}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(6)),s=a(n(7)),u=a(n(4));class l{constructor(t){return{self:l.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 0}static get marginRightMag(){return 0}static get marginLeft(){return l.marginBase*l.marginLeftMag}static get marginRight(){return l.marginBase*l.marginRightMag}static get height(){return 260}static getSelfWidth({app:t,ui:e}){let n="0";const a=l.marginLeftMag+l.marginRightMag;switch(e.screenMode){case i.default.screenModeSmallLabel:n=`${100-a}%`;break;case i.default.screenModeMiddleLabel:n=`calc( ${100-a}% - ${u.default.getWidth({app:t,ui:e},!0)}px )`;break;case i.default.screenModeLargeLabel:n=`calc( ${100-s.default.getWidth({app:t,ui:e},!1)-a}% - ${u.default.getWidth({app:t,ui:e},!0)+a}px )`}return n}static getSelfLeft({app:t,ui:e}){let n="0px";switch(e.screenMode){case i.default.screenModeSmallLabel:n="0px";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:n=u.default.getWidth({app:t,ui:e},!0)}return n}static getSelf({app:t,ui:e}){const n=t.isMediaCh?"block":"none",a=l.getSelfWidth({app:t,ui:e}),i=l.getSelfLeft({app:t,ui:e}),s=o.default.getLayoutBlock({display:n,position:"fixed",background:"black",top:r.default.headerHeight+"px",left:i,margin:`0px ${l.marginRightMag}% 0px ${l.marginLeftMag}%`,width:a,zIndex:1,height:`${l.height}px`,outline:"none"});return o.default.get({layout:s,content:{},animation:{}})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2)),r=a(n(1)),s=a(n(6)),u=a(n(17)),l=a(n(7)),d=a(n(16)),c=a(n(4));class f{static getWidth({app:t,ui:e},n=!1){let a="0";return e.extensionMode===r.default.extensionModeExtBottomLabel?"84%":e.extensionMode===r.default.extensionModeExtModalLabel?"94%":(a=e.screenMode===r.default.screenModeSmallLabel?String(Math.floor(e.width*o.default.widthRatio))+"px":`calc( ${100*o.default.widthRatio}% - ${c.default.getWidth({app:t,ui:e})} )`,n?i.default.trimUnit(a):a)}static getBaseMarginRate({app:t,ui:e},n=!1){return Math.floor((1-o.default.widthRatio)/2*100)}static getBaseMargin({app:t,ui:e},n=!1){return u.default.getWidth({app:t,ui:e},!0)*(f.getBaseMarginRate({app:t,ui:e})/100)}static getMargin({app:t,ui:e},n=!1){if(e.extensionMode===r.default.extensionModeExtBottomLabel)return"0% 8%";switch(e.screenMode){case r.default.screenModeSmallLabel:case r.default.screenModeMiddleLabel:case r.default.screenModeLargeLabel:const n=f.getBaseMarginRate({app:t,ui:e});return`0% ${n}% 0% ${n}%`}}static getHeight({app:t,ui:e},n=!1){const a=f.getBaseMarginRate({app:t,ui:e});switch(e.screenMode){case r.default.screenModeSmallLabel:case r.default.screenModeMiddleLabel:return`calc( ${100-a}% - ${2*s.default.headerHeight}px )`;case r.default.screenModeLargeLabel:const n=f.getBaseMargin({app:t,ui:e});return`calc( 100% - ${2*s.default.headerHeight+n}px )`}}static getTransform({app:t,ui:e}){return e.isOpenDetail?f.getOpenSelfTransform({app:t,ui:e}):f.getCloseSelfTransform({app:t,ui:e})}static getCloseSelfTransform({app:t,ui:e}){return"translate3d(0%, 0px, 0px)"}static getOpenSelfTransform({app:t,ui:e}){return`translate3d(0%, calc( -100% - ${d.default.selfHeight}px ), 0px)`}static getHeader(t){return l.default.getHeader(t)}static getHeaderP(t){return l.default.getHeaderP(t)}static getBody(t){return l.default.getBody(t)}static getMeta(t){return l.default.getMeta(t)}static getImg(t){return l.default.getImg(t)}static getDescription(t){return l.default.getDescription(t)}static getMetaContentTypeWrap(t){return l.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return l.default.getMetaContentType(t)}static getCh(t){return l.default.getCh(t)}static getAnalyze(t){return l.default.getAnalyze(t)}static getAnalyzeRow(t){return l.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return l.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return l.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return l.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return l.default.getAnalyzeHr(t)}static getH1s(t){return l.default.getH1s(t)}static getH1sLi(t){return l.default.getH1sLi(t)}static getFooter(t){return l.default.getFooter(t)}static getFooterChild(t){return l.default.getFooterChild(t)}static getFooterChildLike(t){return l.default.getFooterChildLike(t)}static getFooterChildMoney(t){return l.default.getFooterChildMoney(t)}static getFooterChildShare(t){return l.default.getFooterChildShare(t)}static getMetaItems(t){return l.default.getMetaItems(t)}static getUpdateWrap(t){return l.default.getUpdateWrap(t)}static getUpdate(t){return l.default.getUpdate(t)}}e.default=f},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(4)),u=a(n(25));class l{constructor(t){return{self:l.getSelf(t),fixTimeMarker:l.getFixTimeMarker(t)}}static getSelfWidthRate(){return 33}static getSelfHeightPx(){return 20}static getSelfMarginTop(){return 15}static getSelfLeftRate(){return 50-l.getSelfWidthRate()/2}static getFixTimeMarkerStyles({app:t,ui:e}){let n=l.getSelfWidthRate()/100,a=e.width*n,o=`${l.getSelfHeightPx()}px`,r="25%",d=0,c=0,f=0;switch(e.screenMode){case i.default.screenModeSmallLabel:a=(f=e.width)*n,r=d+f*(l.getSelfLeftRate()/100)+"px";break;case i.default.screenModeMiddleLabel:d=s.default.getWidth({app:t,ui:e},!0),a=(f=e.width-d)*n,r=d+f*(l.getSelfLeftRate()/100)+"px";break;case i.default.screenModeLargeLabel:d=s.default.getWidth({app:t,ui:e},!0),c=e.width*Number(u.default.getWidth({app:t,ui:e},!0))/100,a=(f=e.width-(d+c))*n,r=d+f*(l.getSelfLeftRate()/100)+"px"}return{width:a,height:o,left:r,fontSize:"8px"}}static getSelf({app:t,ui:e}){const n=o.default.getLayoutFlex({width:`${l.getSelfWidthRate()}%`,height:`${l.getSelfHeightPx()}px`,margin:`${l.getSelfMarginTop()}px auto 10px auto`,padding:"5px 10px",background:r.default.darkLightRGBA,borderRadius:"20px"}),a=o.default.getContentBase({color:r.default.whiteRGB,letterSpacing:"2px",fontSize:"8px"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getFixTimeMarker({app:t,ui:e}){const n=l.getSelf({app:t,ui:e}),{left:a,width:i,height:o,fontSize:r}=l.getFixTimeMarkerStyles({app:t,ui:e});return Object.assign(Object.assign({},n),{position:"fixed",width:i,height:o,top:"45px",left:a,fontSize:r})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(5)),o=a(n(1)),r=a(n(0)),s=a(n(2)),u=a(n(7)),l=a(n(4));class d{constructor(t){return{self:d.getSelf(t),menu:d.getMenu(t),menuUl:d.getMenuUl(t),menuLi:d.getMenuLi(t),menuLiChild:d.getMenuLiChild(t),menuLiBubble:d.getMenuLiBubble(t),menuLiLinks:d.getMenuLiLinks(t),menuToggle:d.getMenuToggle(t),links:d.getLinks(t),linksUl:d.getLinksUl(t),linksLi:d.getLinksLi(t),linksLiActive:d.getLinksLiActive(t),linksLiUnactive:d.getLinksLiUnactive(t),linksTuneLi:d.getLinksTuneLi(t),linkMenuUl:d.getLinkMenuUl(t),linkMenuLi:d.getLinkMenuLi(t),linksTabActive:d.getLinksTabActive(t),linksTabUnactive:d.getLinksTabUnactive(t),linksTabLast:d.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return s.default.themeRGB}static get unactiveColor(){return s.default.fontBaseRGB}static get typesMain(){return"MAIN"}static get typesLink(){return"LINK"}static get typesSub(){return"SUB"}static getType({app:t,ui:e}){switch(t.dispThreadType){case i.default.dispThreadTypeMulti:case i.default.dispThreadTypeSingle:return d.typesMain;default:return!t.isRootCh&&t.isLinkCh?d.typesLink:d.typesSub}}static getTotalWidth({app:t,ui:e}){return d.size+2*d.padding+d.right}static getSelfTop({app:t,ui:e}){return"55px"}static getSelfWidth({app:t,ui:e},n=!1){let a="93%";if(e.isOpenLinks)if(e.extensionMode===o.default.extensionModeExtBottomLabel)a="93%";else switch(e.screenMode){case o.default.screenModeSmallLabel:return"93%";case o.default.screenModeMiddleLabel:return`calc(97% - ${l.default.getWidth({app:t,ui:e},!1)})`;case o.default.screenModeLargeLabel:a=`calc( ${97-u.default.getWidth({app:t,ui:e},!1)}% - ${l.default.getWidth({app:t,ui:e},!1)} )`}else a=d.getTotalWidth({app:t,ui:e})+"px";return n?r.default.trimUnit(a):a}static getSelfHeight({app:t,ui:e}){if(!e.isOpenBoard)return"60px";switch(d.getType({app:t,ui:e})){case d.typesMain:return"237px";case d.typesLink:return"178px";case d.typesSub:return"118px";default:return"0px"}}static getSelfBorderRadius({app:t,ui:e}){return"10px 0px 0px 10px"}static getSelfBackground({app:t,ui:e}){return e.isOpenBoard?s.default.lightRGBA:s.default.whiteRGBA}static getSelfRight({app:t,ui:e},n=!1){const a=e.screenMode===o.default.screenModeLargeLabel?`calc( ${u.default.getWidth({app:t,ui:e},!0)} + ${d.right}px )`:`${d.right}px`;return n?a:r.default.trimUnit(a)}static getSelfBoxShadow({app:t,ui:e},n=!1){return e.isOpenLinks,"rgb(220, 220, 220) 0px 0px 5px"}static getLinksDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getSelf({app:t,ui:e}){const n=d.getSelfWidth({app:t,ui:e}),a=d.getSelfHeight({app:t,ui:e}),i=d.getSelfBorderRadius({app:t,ui:e}),o=d.getSelfBackground({app:t,ui:e}),u=d.getSelfRight({app:t,ui:e},!0),l=d.getSelfBoxShadow({app:t,ui:e}),c=r.default.getLayoutFlex({position:"fixed",top:d.getSelfTop({app:t,ui:e}),overflow:"hide",right:u,height:a,width:n,padding:"5px",background:o,flexDirection:"row",alignItems:"flex-start",justifyContent:"flex-end",boxShadow:l,borderRadius:i}),f=r.default.getAnimationBase({transition:s.default.getTransitionFirstOn({app:t,ui:e})});return r.default.get({layout:c,content:{},animation:f})}static getMenu({app:t,ui:e}){const n=r.default.getLayoutFlex({width:d.getTotalWidth({app:t,ui:e})+"px",height:"100%",flexDirection:"column",alignItems:"flex-end"});return r.default.get({layout:n,content:{},animation:{}})}static getMenuUl({app:t,ui:e}){const n=r.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column"}),a=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:n,content:{},animation:a})}static getMenuLi({app:t,ui:e}){const n=d.size+"px",a=r.default.getLayoutFlex({flexDirection:"column",width:n,height:n,minWidth:n,minHeight:n,maxWidth:n,maxHeight:n,background:s.default.whiteRGBA,borderRadius:"5px",marginBottom:"5px"}),i=r.default.getContentBase({fontSize:"10px",lineHeight:"17px"}),o=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:a,content:i,animation:o})}static getMenuLiChild({app:t,ui:e}){const n=i.default.isActiveMultistream({app:t,ui:e},"getLiChild")?d.activeColor:d.unactiveColor,a=r.default.getContentBase({color:n}),o=r.default.getAnimationBase();return r.default.get({layout:{},content:a,animation:o})}static getMenuLiBubble({app:t,ui:e}){const n=e.isBubblePost?d.activeColor:d.unactiveColor,a=r.default.getContentBase({color:n}),i=r.default.getAnimationBase();return r.default.get({layout:{},content:a,animation:i})}static getMenuLiLinks({app:t,ui:e}){const n=s.default.themeRGB,a=r.default.getContentBase({color:n}),i=r.default.getAnimationBase();return r.default.get({layout:{},content:a,animation:i})}static getMenuToggle({app:t,ui:e}){const n=d.size-4+"px",a=r.default.getLayoutFlex({width:n,height:n,minHeight:n,maxHeight:n}),i=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:a,content:{},animation:i})}static getLinks({app:t,ui:e}){const n=d.getLinksDisplay({app:t,ui:e}),a=r.default.getLayoutFlex({display:n,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),i=r.default.getContentBase({fontSize:"14px"});return r.default.get({layout:a,content:i,animation:{}})}static getLinksUl({app:t,ui:e}){const n=r.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),a=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:n,content:{},animation:a})}static getLinksLi({app:t,ui:e}){const n=d.size+"px",a=r.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:n,minHeight:n,maxHeight:n,background:s.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),i=r.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px"}),o=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:a,content:i,animation:o})}static getLinksLiActive({app:t,ui:e}){const n=d.getLinksLi({app:t,ui:e});return n.background=s.default.whiteRGB,n.color=s.default.fontBaseRGB,n}static getLinksLiUnactive({app:t,ui:e}){const n=d.getLinksLi({app:t,ui:e});return n.background=s.default.calmRGB,n.color=s.default.fontBaseRGB,n}static getLinksTuneLi({app:t,ui:e}){const n=d.getLinksLi({app:t,ui:e});return n.alignItems="center",n}static getLinkMenuUl({app:t,ui:e}){const n=d.size+"px",a=r.default.getLayoutFlex({minHeight:n,height:n,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),i=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:a,content:{},animation:i})}static getLinkMenuLi({app:t,ui:e}){const n=d.size-4+"px",a=r.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:n,minHeight:n,maxHeight:n,background:s.default.reliefRGB,borderRadius:"5px"}),i=r.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px",color:s.default.whiteRGB}),o=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:a,content:i,animation:o})}static getLinksTabActive({app:t,ui:e}){const n={};return n.background=s.default.whiteRGBA,n.color=s.default.fontBaseRGB,n}static getLinksTabUnactive({app:t,ui:e}){return d.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){const n={margin:"5px 0px 0px 0px"};return n}}e.default=d},function(t,e,n){"use strict";function a(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(59)),o=a(n(14)),r=a(n(11)),s=a(n(87)),u=a(n(3)),l=a(n(88)),d=a(n(13)),c=a(n(94)),f=a(n(95)),p=a(n(136)),g=a(n(137)),h=a(n(138)),m=a(n(143));class y{constructor(){const t=document.querySelector(`script[src='https://${o.default.apiAccessURL}']`),e=document.querySelector(`script[src='https://${o.default.clientURL}']`),n=document.querySelector(`script[src='https://${o.default.extURL}']`),a=t?y.rebuildAttributes(t.attributes):{},i=n?y.rebuildAttributes(n.attributes):{},r=Object.assign(Object.assign({},i),a);return y.initialBootOption(r,e)}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(n=>{e[t[n].name]=t[n].value}),e}static initialBootOption(t,e){return t.ch=t.ch?t.ch:location.href.replace("https:/","").replace("http:",""),o.default.env===r.default.DEVELOPMENT&&(t.ch=t.ch.replace(`/${r.default.LOCALHOST}:${r.default.PORTS.DEVELOPMENT}`,"")),t.hasslash=y.getHasSlach(t),t.type=e?r.default.APP_TYPES.PORTAL:r.default.APP_TYPES.EXTENSION,delete t.src,delete t.async,t}static getHasSlach(t){if(t.href){const e=t.href.replace("https:/","").replace("http:/","");return e.lastIndexOf("/")===e.length-1}return!!t.hasslash&&u.default.getBool(t.hasslash)}}class x{constructor(t,e){const n=location.host.indexOf(r.default.PRODUCTION_DOMAIN)>=0?r.default.PRODUCTION_DOMAIN:r.default.DEVELOPMENT_DOMAIN;this.apiStore=t,this.ws=i.default(`https://${n}:${r.default.PORTS.SOCKET_IO}`,{forceNew:!0}),this.onResponseMeAPI(e),this.setUp=this.setUp.bind(this)}setUp(t,e){this.state=t,this.ch=e,this.onResponseChAPI(),this.onRequestAPI()}onRequestAPI(){const t=h.default,e=Object.keys(t),n=e.length,a=(t,e)=>(n,a)=>{const i=this.apiStore.getState(),o=d.default.getRequestState(t,i,n),r=d.default.getRequestActionState(t,n,a),{requestState:s,actionState:u}=e(i,o,r);return this.ws.emit(s.type,s),this.apiStore.dispatch(u)};for(let i=0;i<n;i++){const n=e[i],o=n.replace(d.default.CLIENT_TO_SERVER_EMIT,""),r=t[n];this[o]=a(n,r)}}onResponseMeAPI(t=null){const e=((t,e=null)=>{const n=this;return a=>{e&&a.type===d.default.CONNECTION_SERVER_KEY&&e(n);const i=t(a);return this.apiStore.dispatch(i)}})(g.default,t);this.on(d.default.CATCH_ME_KEY,e)}onResponseChAPI(t=this.ch){const e=(t=>e=>{const n=t(e);return this.apiStore.dispatch(n)})(m.default);this.on(t,e)}offResponseChAPI(t=this.ch){this.off(t)}on(t,e=(()=>{})){this.ws._callbacks[`$${t}`]||this.ws.on(t,e)}off(t){this.ws._callbacks[`$${t}`]&&this.ws.off(t)}}class b{constructor(){this.apiStore=f.default(),this.bootOption=new y,this.exeCoreApi=this.exeCoreApi.bind(this),this.exeAction=this.exeAction.bind(this),this.appTo=this.appTo.bind(this),this.subscribe=this.subscribe.bind(this),this.onWsServer=this.onWsServer.bind(this),this.apiStore.subscribe(this.subscribe),this.onActions();const t=[],e=this;t.push(new Promise(t=>{window.onmessage=n=>{t&&(e.origin=n.origin,t()),n.data.type===s.default.appToCoreApi?n.data.method===s.default.connectionMethod?clearInterval(e.bootId):e.exeCoreApi(n):n.data.type===s.default.appToAction&&e.exeAction(n)}})),t.push(new Promise(t=>{"complete"===document.readyState?new x(e.apiStore,t):window.onload=n=>{new x(e.apiStore,t)}}).then(this.onWsServer)),Promise.all(t).then(t=>{this.bootId=setInterval(()=>{this.appTo(s.default.connectionMethod,this.bootOption)},200)})}static getRequestObj(t,e={}){const n=location.href;return{type:s.default.coreApiToApp,href:n,method:t,params:e}}exeCoreApi(t){if(this[t.data.method])this[t.data.method](t.data.params1,t.data.params2);else if(this.coreApi&&this.coreApi[t.data.method]){const{params1:e,params2:n}=t.data;e&&n?this.coreApi[t.data.method](e,n):e?this.coreApi[t.data.method](e):this.coreApi[t.data.method]()}}exeAction(t){this[t.data.method]&&this[t.data.method](t.data.params1,t.data.params2)}onWsServer(t){this.coreApi=t;const e=new l.default(window,this.bootOption);this.coreApi.setUp(e,this.bootOption.ch),this.coreApi.tuned(e),window.$t=new c.default(this.coreApi)}onActions(){const t=Object.keys(p.default),e=t.length,n=t=>(e,n)=>{const a=p.default[t](e);this.apiStore.getState();return this.apiStore.dispatch(a)};for(let a=0;a<e;a++){const e=t[a];this[e]=n(e)}}subscribe(){const t=this.apiStore.getState();t.app.actioned,this.appTo(t.app.actioned,t)}appTo(t,e={}){const n=this.origin,a=b.getRequestObj(t,e);window.postMessage(a,n)}}new b},function(t,e,n){var a=n(60),i=n(27),o=n(37),r=n(19)("socket.io-client");t.exports=e=u;var s=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,i=a(t),u=i.source,l=i.id,d=i.path,c=s[l]&&d in s[l].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||c?(r("ignoring socket cache for %s",u),n=o(u,e)):(s[l]||(r("new io instance for %s",u),s[l]=o(u,e)),n=s[l]),i.query&&!e.query&&(e.query=i.query),n.socket(i.path,e)}e.protocol=i.protocol,e.connect=u,e.Manager=n(37),e.Socket=n(43)},function(t,e,n){var a=n(33),i=n(19)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),n=a(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port,n.href=n.protocol+"://"+o+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return a.colors[Math.abs(e)%a.colors.length]}function a(t){let n;function r(...t){if(!r.enabled)return;const e=r,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=a.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;s++;const o=a.formatters[i];if("function"==typeof o){const a=t[s];n=o.call(e,a),t.splice(s,1),s--}return n}),a.formatArgs.call(e,t),(e.log||a.log).apply(e,t)}return r.namespace=t,r.enabled=a.enabled(t),r.useColors=a.useColors(),r.color=e(t),r.destroy=i,r.extend=o,"function"==typeof a.init&&a.init(r),a.instances.push(r),r}function i(){const t=a.instances.indexOf(this);return-1!==t&&(a.instances.splice(t,1),!0)}function o(t,e){const n=a(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function r(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return a.debug=a,a.default=a,a.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},a.disable=function(){const t=[...a.names.map(r),...a.skips.map(r).map(t=>"-"+t)].join(",");return a.enable(""),t},a.enable=function(t){let e;a.save(t),a.names=[],a.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?a.skips.push(new RegExp("^"+t.substr(1)+"$")):a.names.push(new RegExp("^"+t+"$")));for(e=0;e<a.instances.length;e++){const t=a.instances[e];t.enabled=a.enabled(t.namespace)}},a.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=a.skips.length;e<n;e++)if(a.skips[e].test(t))return!1;for(e=0,n=a.names.length;e<n;e++)if(a.names[e].test(t))return!0;return!1},a.humanize=n(34),Object.keys(t).forEach(e=>{a[e]=t[e]}),a.instances=[],a.names=[],a.skips=[],a.formatters={},a.selectColor=e,a.enable(a.load()),a}},function(t,e,n){(function(a){function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==a&&"env"in a&&(t=a.env.DEBUG),t}(e=t.exports=n(63)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var a="color: "+this.color;t.splice(1,0,a,"color: inherit");var i=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(o=i))})),t.splice(o,0,a)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,n(20))},function(t,e,n){function a(t){var n;function a(){if(a.enabled){var t=a,i=+new Date,o=i-(n||i);t.diff=o,t.prev=n,t.curr=i,n=i;for(var r=new Array(arguments.length),s=0;s<r.length;s++)r[s]=arguments[s];r[0]=e.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var u=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,(function(n,a){if("%%"===n)return n;u++;var i=e.formatters[a];if("function"==typeof i){var o=r[u];n=i.call(t,o),r.splice(u,1),u--}return n})),e.formatArgs.call(t,r),(a.log||e.log||console.log.bind(console)).apply(t,r)}}return a.namespace=t,a.enabled=e.enabled(t),a.useColors=e.useColors(),a.color=function(t){var n,a=0;for(n in t)a=(a<<5)-a+t.charCodeAt(n),a|=0;return e.colors[Math.abs(a)%e.colors.length]}(t),a.destroy=i,"function"==typeof e.init&&e.init(a),e.instances.push(a),a}function i(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=a.debug=a.default=a).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var a=("string"==typeof t?t:"").split(/[\s,]+/),i=a.length;for(n=0;n<i;n++)a[n]&&("-"===(t=a[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var o=e.instances[n];o.enabled=e.enabled(o.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,a;for(n=0,a=e.skips.length;n<a;n++)if(e.skips[n].test(t))return!1;for(n=0,a=e.names.length;n<a;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(64),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,a=60*n,i=60*a,o=24*i,r=365.25*o;function s(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var u,l=typeof t;if("string"===l&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var s=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*r;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*i;case"minutes":case"minute":case"mins":case"min":case"m":return s*a;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(t);if("number"===l&&!1===isNaN(t))return e.long?s(u=t,o,"day")||s(u,i,"hour")||s(u,a,"minute")||s(u,n,"second")||u+" ms":function(t){if(t>=o)return Math.round(t/o)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=a)return Math.round(t/a)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var a=n(35),i=n(36),o=Object.prototype.toString,r="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,o=t;return o.data=function t(e,n){if(!e)return e;if(i(e)){var o={_placeholder:!0,num:n.length};return n.push(e),o}if(a(e)){for(var r=new Array(e.length),s=0;s<e.length;s++)r[s]=t(e[s],n);return r}if("object"==typeof e&&!(e instanceof Date)){r={};for(var u in e)r[u]=t(e[u],n);return r}return e}(n,e),o.attachments=e.length,{packet:o,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(a(e))for(var i=0;i<e.length;i++)e[i]=t(e[i],n);else if("object"==typeof e)for(var o in e)e[o]=t(e[o],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,o=t;!function t(u,l,d){if(!u)return u;if(r&&u instanceof Blob||s&&u instanceof File){n++;var c=new FileReader;c.onload=function(){d?d[l]=this.result:o=this.result,--n||e(o)},c.readAsArrayBuffer(u)}else if(a(u))for(var f=0;f<u.length;f++)t(u[f],f,u);else if("object"==typeof u&&!i(u))for(var p in u)t(u[p],p,u)}(o),n||e(o)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],a=e[1];return 3*(n+a)/4-a},e.toByteArray=function(t){var e,n,a=l(t),r=a[0],s=a[1],u=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),d=0,c=s>0?r-4:r;for(n=0;n<c;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[d++]=e>>16&255,u[d++]=e>>8&255,u[d++]=255&e;2===s&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[d++]=255&e);1===s&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[d++]=e>>8&255,u[d++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],r=0,s=n-i;r<s;r+=16383)o.push(d(t,r,r+16383>s?s:r+16383));1===i?(e=t[n-1],o.push(a[e>>2]+a[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(a[e>>10]+a[e>>4&63]+a[e<<2&63]+"="));return o.join("")};for(var a=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=r.length;s<u;++s)a[s]=r[s],i[r.charCodeAt(s)]=s;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function d(t,e,n){for(var i,o,r=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),r.push(a[(o=i)>>18&63]+a[o>>12&63]+a[o>>6&63]+a[63&o]);return r.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,a,i){var o,r,s=8*i-a-1,u=(1<<s)-1,l=u>>1,d=-7,c=n?i-1:0,f=n?-1:1,p=t[e+c];for(c+=f,o=p&(1<<-d)-1,p>>=-d,d+=s;d>0;o=256*o+t[e+c],c+=f,d-=8);for(r=o&(1<<-d)-1,o>>=-d,d+=a;d>0;r=256*r+t[e+c],c+=f,d-=8);if(0===o)o=1-l;else{if(o===u)return r?NaN:1/0*(p?-1:1);r+=Math.pow(2,a),o-=l}return(p?-1:1)*r*Math.pow(2,o-a)},e.write=function(t,e,n,a,i,o){var r,s,u,l=8*o-i-1,d=(1<<l)-1,c=d>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=a?0:o-1,g=a?1:-1,h=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,r=d):(r=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-r))<1&&(r--,u*=2),(e+=r+c>=1?f/u:f*Math.pow(2,1-c))*u>=2&&(r++,u/=2),r+c>=d?(s=0,r=d):r+c>=1?(s=(e*u-1)*Math.pow(2,i),r+=c):(s=e*Math.pow(2,c-1)*Math.pow(2,i),r=0));i>=8;t[n+p]=255&s,p+=g,s/=256,i-=8);for(r=r<<i|s,l+=i;l>0;t[n+p]=255&r,p+=g,r/=256,l-=8);t[n+p-g]|=128*h}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(70),t.exports.parser=n(10)},function(t,e,n){var a=n(38),i=n(9),o=n(24)("engine.io-client:socket"),r=n(42),s=n(10),u=n(33),l=n(22);function d(t,e){if(!(this instanceof d))return new d(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=l.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=d,d.priorWebsocketSuccess=!1,i(d.prototype),d.protocol=s.protocol,d.Socket=d,d.Transport=n(30),d.transports=n(38),d.parser=n(10),d.prototype.createTransport=function(t){o('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=s.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new a[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},d.prototype.open=function(){var t;if(this.rememberUpgrade&&d.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},d.prototype.setTransport=function(t){o("setting transport %s",t.name);var e=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},d.prototype.probe=function(t){o('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,a=this;function i(){if(a.onlyBinaryUpgrades){var i=!this.supportsBinary&&a.transport.supportsBinary;n=n||i}n||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',t),a.upgrading=!0,a.emit("upgrading",e),!e)return;d.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',a.transport.name),a.transport.pause((function(){n||"closed"!==a.readyState&&(o("changing transport and sending upgrade packet"),f(),a.setTransport(e),e.send([{type:"upgrade"}]),a.emit("upgrade",e),e=null,a.upgrading=!1,a.flush())}))}else{o('probe transport "%s" failed',t);var r=new Error("probe error");r.transport=e.name,a.emit("upgradeError",r)}})))}function r(){n||(n=!0,f(),e.close(),e=null)}function s(n){var i=new Error("probe error: "+n);i.transport=e.name,r(),o('probe transport "%s" failed because of error: %s',t,n),a.emit("upgradeError",i)}function u(){s("transport closed")}function l(){s("socket closed")}function c(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),r())}function f(){e.removeListener("open",i),e.removeListener("error",s),e.removeListener("close",u),a.removeListener("close",l),a.removeListener("upgrading",c)}d.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",s),e.once("close",u),this.once("close",l),this.once("upgrading",c),e.open()},d.prototype.onOpen=function(){if(o("socket open"),this.readyState="open",d.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){o("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},d.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)},d.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},d.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},d.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){o("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},d.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},d.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},d.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},d.prototype.write=d.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},d.prototype.sendPacket=function(t,e,n,a){if("function"==typeof e&&(a=e,e=void 0),"function"==typeof n&&(a=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var i={type:t,data:e,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),a&&this.once("flush",a),this.flush()}},d.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?a():e()})):this.upgrading?a():e()}function e(){t.onClose("forced close"),o("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function a(){t.once("upgrade",n),t.once("upgradeError",n)}return this},d.prototype.onError=function(t){o("socket error %j",t),d.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},d.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},d.prototype.filterUpgrades=function(t){for(var e=[],n=0,a=t.length;n<a;n++)~r(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var a=n(29),i=n(39),o=n(9),r=n(23),s=n(24)("engine.io-client:polling-xhr");function u(){}function l(t){if(i.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function d(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=l,t.exports.Request=d,r(l,i),l.prototype.supportsBinary=!0,l.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new d(t)},l.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,a=this.request({method:"POST",data:t,isBinary:n}),i=this;a.on("success",e),a.on("error",(function(t){i.onError("xhr post error",t)})),this.sendXhr=a},l.prototype.doPoll=function(){s("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},o(d.prototype),d.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new a(t),n=this;try{s("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&e.setRequestHeader(i,this.extraHeaders[i])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof e.status?e.status:0)}),0))},s("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){n.onError(t)}),0)}"undefined"!=typeof document&&(this.index=d.requestsCount++,d.requests[this.index]=this)},d.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},d.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},d.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},d.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete d.requests[this.index],this.xhr=null}},d.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},d.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},d.prototype.abort=function(){this.cleanup()},d.requestsCount=0,d.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){var c="onpagehide"in self?"pagehide":"unload";addEventListener(c,f,!1)}function f(){for(var t in d.requests)d.requests.hasOwnProperty(t)&&d.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var a in t)n.call(t,a)&&e.push(a);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var a=t.byteLength;if(e=e||0,n=n||a,t.slice)return t.slice(e,n);if(e<0&&(e+=a),n<0&&(n+=a),n>a&&(n=a),e>=a||e>=n||0===a)return new ArrayBuffer(0);for(var i=new Uint8Array(t),o=new Uint8Array(n-e),r=e,s=0;r<n;r++,s++)o[s]=i[r];return o.buffer}},function(t,e){function n(){}t.exports=function(t,e,a){var i=!1;return a=a||n,o.count=t,0===t?e():o;function o(t,n){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=a):0!==o.count||i||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,a,i,o=String.fromCharCode;function r(t){for(var e,n,a=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(n=t.charCodeAt(i++)))?a.push(((1023&e)<<10)+(1023&n)+65536):(a.push(e),i--):a.push(e);return a}function s(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return o(t>>e&63|128)}function l(t,e){if(0==(4294967168&t))return o(t);var n="";return 0==(4294965248&t)?n=o(t>>6&31|192):0==(4294901760&t)?(s(t,e)||(t=65533),n=o(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=o(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=o(63&t|128)}function d(){if(i>=a)throw Error("Invalid byte index");var t=255&n[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function c(t){var e,o;if(i>a)throw Error("Invalid byte index");if(i==a)return!1;if(e=255&n[i],i++,0==(128&e))return e;if(192==(224&e)){if((o=(31&e)<<6|d())>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&e)){if((o=(15&e)<<12|d()<<6|d())>=2048)return s(o,t)?o:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(o=(7&e)<<18|d()<<12|d()<<6|d())>=65536&&o<=1114111)return o;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,a=r(t),i=a.length,o=-1,s="";++o<i;)s+=l(a[o],n);return s},decode:function(t,e){var s=!1!==(e=e||{}).strict;n=r(t),a=n.length,i=0;for(var u,l=[];!1!==(u=c(s));)l.push(u);return function(t){for(var e,n=t.length,a=-1,i="";++a<n;)(e=t[a])>65535&&(i+=o((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=o(e);return i}(l)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),a=0;a<t.length;a++)n[t.charCodeAt(a)]=a;e.encode=function(e){var n,a=new Uint8Array(e),i=a.length,o="";for(n=0;n<i;n+=3)o+=t[a[n]>>2],o+=t[(3&a[n])<<4|a[n+1]>>4],o+=t[(15&a[n+1])<<2|a[n+2]>>6],o+=t[63&a[n+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(t){var e,a,i,o,r,s=.75*t.length,u=t.length,l=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var d=new ArrayBuffer(s),c=new Uint8Array(d);for(e=0;e<u;e+=4)a=n[t.charCodeAt(e)],i=n[t.charCodeAt(e+1)],o=n[t.charCodeAt(e+2)],r=n[t.charCodeAt(e+3)],c[l++]=a<<2|i>>4,c[l++]=(15&i)<<4|o>>2,c[l++]=(3&o)<<6|63&r;return d}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,a=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),i=a&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),o=n&&n.prototype.append&&n.prototype.getBlob;function r(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t}))}function s(t,e){e=e||{};var a=new n;return r(t).forEach((function(t){a.append(t)})),e.type?a.getBlob(e.type):a.getBlob()}function u(t,e){return new Blob(r(t),e||{})}"undefined"!=typeof Blob&&(s.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=a?i?Blob:u:o?s:void 0},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return a.colors[Math.abs(e)%a.colors.length]}function a(t){let n;function r(...t){if(!r.enabled)return;const e=r,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=a.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;s++;const o=a.formatters[i];if("function"==typeof o){const a=t[s];n=o.call(e,a),t.splice(s,1),s--}return n}),a.formatArgs.call(e,t),(e.log||a.log).apply(e,t)}return r.namespace=t,r.enabled=a.enabled(t),r.useColors=a.useColors(),r.color=e(t),r.destroy=i,r.extend=o,"function"==typeof a.init&&a.init(r),a.instances.push(r),r}function i(){const t=a.instances.indexOf(this);return-1!==t&&(a.instances.splice(t,1),!0)}function o(t,e){const n=a(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function r(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return a.debug=a,a.default=a,a.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},a.disable=function(){const t=[...a.names.map(r),...a.skips.map(r).map(t=>"-"+t)].join(",");return a.enable(""),t},a.enable=function(t){let e;a.save(t),a.names=[],a.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?a.skips.push(new RegExp("^"+t.substr(1)+"$")):a.names.push(new RegExp("^"+t+"$")));for(e=0;e<a.instances.length;e++){const t=a.instances[e];t.enabled=a.enabled(t.namespace)}},a.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=a.skips.length;e<n;e++)if(a.skips[e].test(t))return!1;for(e=0,n=a.names.length;e<n;e++)if(a.names[e].test(t))return!0;return!1},a.humanize=n(34),Object.keys(t).forEach(e=>{a[e]=t[e]}),a.instances=[],a.names=[],a.skips=[],a.formatters={},a.selectColor=e,a.enable(a.load()),a}},function(t,e,n){(function(e){var a=n(39),i=n(23);t.exports=d;var o,r=/\n/g,s=/\\n/g;function u(){}function l(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function d(t){if(a.call(this,t),this.query=this.query||{},!o){var e=l();o=e.___eio=e.___eio||[]}this.index=o.length;var n=this;o.push((function(t){n.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){n.script&&(n.script.onerror=u)}),!1)}i(d,a),d.prototype.supportsBinary=!1,d.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),a.prototype.doClose.call(this)},d.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},d.prototype.doWrite=function(t,e){var n=this;if(!this.form){var a,i=document.createElement("form"),o=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=u,i.method="POST",i.setAttribute("accept-charset","utf-8"),o.name="d",i.appendChild(o),document.body.appendChild(i),this.form=i,this.area=o}function l(){d(),e()}function d(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';a=document.createElement(t)}catch(t){(a=document.createElement("iframe")).name=n.iframeId,a.src="javascript:0"}a.id=n.iframeId,n.form.appendChild(a),n.iframe=a}this.form.action=this.uri(),d(),t=t.replace(s,"\\\n"),this.area.value=t.replace(r,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&l()}:this.iframe.onload=l}}).call(this,n(21))},function(t,e,n){(function(e){var a,i,o=n(30),r=n(10),s=n(22),u=n(23),l=n(41),d=n(24)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?a=WebSocket:"undefined"!=typeof self&&(a=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{i=n(83)}catch(t){}var c=a||i;function f(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=a&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(c=i),o.call(this,t)}t.exports=f,u(f,o),f.prototype.name="websocket",f.prototype.supportsBinary=!0,f.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new c(t,e):new c(t):new c(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},f.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},f.prototype.write=function(t){var n=this;this.writable=!1;for(var a=t.length,i=0,o=a;i<o;i++)!function(t){r.encodePacket(t,n.supportsBinary,(function(i){if(!n.usingBrowserWebSocket){var o={};if(t.options&&(o.compress=t.options.compress),n.perMessageDeflate)("string"==typeof i?e.byteLength(i):i.length)<n.perMessageDeflate.threshold&&(o.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,o)}catch(t){d("websocket closed before onclose event")}--a||s()}))}(t[i]);function s(){n.emit("flush"),setTimeout((function(){n.writable=!0,n.emit("drain")}),0)}},f.prototype.onClose=function(){o.prototype.onClose.call(this)},f.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},f.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=l()),this.supportsBinary||(t.b64=1),(t=s.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},f.prototype.check=function(){return!(!c||"__initialize"in c&&this.name===f.prototype.name)}}).call(this,n(28).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],a=(e=e||0)||0;a<t.length;a++)n[a-e]=t[a];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e){e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\n",e.homedir=function(){return"/"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static get coreApiToApp(){return"coreApiToApp"}static get connectionMethod(){return"handleCoreApi"}static get appToCoreApi(){return"appToCoreApi"}static get appToAction(){return"appToAction"}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(5)),o=a(n(47)),r=a(n(48)),s=a(n(89)),u=a(n(8)),l=a(n(49)),d=a(n(50)),c=a(n(15)),f=a(n(93));class p{constructor(t,e={},n={}){this.menuIndex=new r.default,this.menuLogs=new s.default(n.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new u.default,this.postsLogs=new u.default,this.analyze=new l.default,this.bootOption=new d.default(e),this.thread=new c.default(t,this.bootOption,n.thread),this.threadDetail=new c.default(t,this.bootOption,n.thread),this.app=new i.default(p.getAppParams(this.thread,this.bootOption,n)),this.user=new o.default(p.getUserParams(this,n)),this.actionLog=new f.default}static getAppParams(t,e,n){return Object.assign(Object.assign({isTransition:!0,rootTitle:t.title},e),t)}static getUserParams(t,e){if(e&&e.user&&e.user.uid)return Object.assign({},e.user);return{dispThreadType:t.thread.ch===t.app.rootCh?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}get appName(){return this.app.name}get talknIndex(){return this.app.talknIndex}get ch(){return this.thread.ch}}e.default=p},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){return{version:"1.0",find:(e={},n=(()=>{}))=>{t.find(e,n)},post:(e={},n=(()=>{}))=>{t.post(e,n)}}}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(51),o=n(97),r=a(n(98)),s=a(n(115));e.default=function(t={}){let e=null,n=[s.default.updateAction];e=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:null;const a=o.createLogger({collapsed:!0,duration:!0});return n.push(a),i.createStore(r.default,t,e?e(i.applyMiddleware(...n)):i.applyMiddleware(...n))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){(function(t){!function(e){"use strict";function n(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function a(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function i(t,e,n){i.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function o(t,e){o.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function r(t,e){r.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function s(t,e,n){s.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function u(t,e,n){var a=t.slice((n||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,a),t}function l(t){var e=void 0===t?"undefined":S(t);return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"function"==typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function d(t,e,n,a,c,f,p){p=p||[];var g=(c=c||[]).slice(0);if(void 0!==f){if(a){if("function"==typeof a&&a(g,f))return;if("object"===(void 0===a?"undefined":S(a))){if(a.prefilter&&a.prefilter(g,f))return;if(a.normalize){var h=a.normalize(g,f,t,e);h&&(t=h[0],e=h[1])}}}g.push(f)}"regexp"===l(t)&&"regexp"===l(e)&&(t=t.toString(),e=e.toString());var m=void 0===t?"undefined":S(t),y=void 0===e?"undefined":S(e),x="undefined"!==m||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(f),b="undefined"!==y||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(f);if(!x&&b)n(new o(g,e));else if(!b&&x)n(new r(g,t));else if(l(t)!==l(e))n(new i(g,t,e));else if("date"===l(t)&&t-e!=0)n(new i(g,t,e));else if("object"===m&&null!==t&&null!==e)if(p.filter((function(e){return e.lhs===t})).length)t!==e&&n(new i(g,t,e));else{if(p.push({lhs:t,rhs:e}),Array.isArray(t)){var T;for(t.length,T=0;T<t.length;T++)T>=e.length?n(new s(g,T,new r(void 0,t[T]))):d(t[T],e[T],n,a,g,T,p);for(;T<e.length;)n(new s(g,T,new o(void 0,e[T++])))}else{var B=Object.keys(t),C=Object.keys(e);B.forEach((function(i,o){var r=C.indexOf(i);r>=0?(d(t[i],e[i],n,a,g,i,p),C=u(C,r)):d(t[i],void 0,n,a,g,i,p)})),C.forEach((function(t){d(void 0,e[t],n,a,g,t,p)}))}p.length=p.length-1}else t!==e&&("number"===m&&isNaN(t)&&isNaN(e)||n(new i(g,t,e)))}function c(t,e,n,a){return a=a||[],d(t,e,(function(t){t&&a.push(t)}),n),a.length?a:void 0}function f(t,e,n){if(t&&e&&n&&n.kind){for(var a=t,i=-1,o=n.path?n.path.length-1:0;++i<o;)void 0===a[n.path[i]]&&(a[n.path[i]]="number"==typeof n.path[i]?[]:{}),a=a[n.path[i]];switch(n.kind){case"A":!function t(e,n,a){if(a.path&&a.path.length){var i,o=e[n],r=a.path.length-1;for(i=0;i<r;i++)o=o[a.path[i]];switch(a.kind){case"A":t(o[a.path[i]],a.index,a.item);break;case"D":delete o[a.path[i]];break;case"E":case"N":o[a.path[i]]=a.rhs}}else switch(a.kind){case"A":t(e[n],a.index,a.item);break;case"D":e=u(e,n);break;case"E":case"N":e[n]=a.rhs}return e}(n.path?a[n.path[i]]:a,n.index,n.item);break;case"D":delete a[n.path[i]];break;case"E":case"N":a[n.path[i]]=n.rhs}}}function p(t){return"color: "+E[t].color+"; font-weight: bold"}function g(t,e,n,a){var i=c(t,e);try{a?n.groupCollapsed("diff"):n.group("diff")}catch(t){n.log("diff")}i?i.forEach((function(t){var e=t.kind,a=function(t){var e=t.kind,n=t.path,a=t.lhs,i=t.rhs,o=t.index,r=t.item;switch(e){case"E":return[n.join("."),a,"→",i];case"N":return[n.join("."),i];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+o+"]",r];default:return[]}}(t);n.log.apply(n,["%c "+E[e].text,p(e)].concat(L(a)))})):n.log("—— no diff ——");try{n.groupEnd()}catch(t){n.log("—— diff end —— ")}}function h(t,e,n,a){switch(void 0===t?"undefined":S(t)){case"object":return"function"==typeof t[a]?t[a].apply(t,L(n)):t[a];case"function":return t(e);default:return t}}function m(t,e){var n=e.logger,a=e.actionTransformer,i=e.titleFormatter,o=void 0===i?function(t){var e=t.timestamp,n=t.duration;return function(t,a,i){var o=["action"];return o.push("%c"+String(t.type)),e&&o.push("%c@ "+a),n&&o.push("%c(in "+i.toFixed(2)+" ms)"),o.join(" ")}}(e):i,r=e.collapsed,s=e.colors,u=e.level,l=e.diff,d=void 0===e.titleFormatter;t.forEach((function(i,c){var f=i.started,p=i.startedTime,m=i.action,y=i.prevState,x=i.error,b=i.took,T=i.nextState,C=t[c+1];C&&(T=C.prevState,b=C.started-f);var S=a(m),L="function"==typeof r?r((function(){return T}),m,i):r,w=B(p),E=s.title?"color: "+s.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E),e.timestamp&&A.push("color: gray; font-weight: lighter;"),e.duration&&A.push("color: gray; font-weight: lighter;");var v=o(S,w,b);try{L?s.title&&d?n.groupCollapsed.apply(n,["%c "+v].concat(A)):n.groupCollapsed(v):s.title&&d?n.group.apply(n,["%c "+v].concat(A)):n.group(v)}catch(t){n.log(v)}var O=h(u,S,[y],"prevState"),M=h(u,S,[S],"action"),R=h(u,S,[x,y],"error"),I=h(u,S,[T],"nextState");if(O)if(s.prevState){var _="color: "+s.prevState(y)+"; font-weight: bold";n[O]("%c prev state",_,y)}else n[O]("prev state",y);if(M)if(s.action){var k="color: "+s.action(S)+"; font-weight: bold";n[M]("%c action    ",k,S)}else n[M]("action    ",S);if(x&&R)if(s.error){var P="color: "+s.error(x,y)+"; font-weight: bold;";n[R]("%c error     ",P,x)}else n[R]("error     ",x);if(I)if(s.nextState){var D="color: "+s.nextState(T)+"; font-weight: bold";n[I]("%c next state",D,T)}else n[I]("next state",T);l&&g(y,T,n,L);try{n.groupEnd()}catch(t){n.log("—— log end ——")}}))}function y(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},A,t),n=e.logger,a=e.stateTransformer,i=e.errorTransformer,o=e.predicate,r=e.logErrors,s=e.diffPredicate;if(void 0===n)return function(){return function(t){return function(e){return t(e)}}};if(t.getState&&t.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(t){return function(e){return t(e)}}};var u=[];return function(t){var n=t.getState;return function(t){return function(l){if("function"==typeof o&&!o(n,l))return t(l);var d={};u.push(d),d.started=C.now(),d.startedTime=new Date,d.prevState=a(n()),d.action=l;var c=void 0;if(r)try{c=t(l)}catch(t){d.error=i(t)}else c=t(l);d.took=C.now()-d.started,d.nextState=a(n());var f=e.diff&&"function"==typeof s?s(n,l):e.diff;if(m(u,Object.assign({},e,{diff:f})),u.length=0,d.error)throw d.error;return c}}}}var x,b,T=function(t,e){return function(t,e){return new Array(e+1).join(t)}("0",e-t.toString().length)+t},B=function(t){return T(t.getHours(),2)+":"+T(t.getMinutes(),2)+":"+T(t.getSeconds(),2)+"."+T(t.getMilliseconds(),3)},C="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},w=[];x="object"===(void 0===t?"undefined":S(t))&&t?t:"undefined"!=typeof window?window:{},(b=x.DeepDiff)&&w.push((function(){void 0!==b&&x.DeepDiff===c&&(x.DeepDiff=b,b=void 0)})),n(i,a),n(o,a),n(r,a),n(s,a),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:d,enumerable:!0},applyDiff:{value:function(t,e,n){t&&e&&d(t,e,(function(a){n&&!n(t,e,a)||f(t,e,a)}))},enumerable:!0},applyChange:{value:f,enumerable:!0},revertChange:{value:function(t,e,n){if(t&&e&&n&&n.kind){var a,i,o=t;for(i=n.path.length-1,a=0;a<i;a++)void 0===o[n.path[a]]&&(o[n.path[a]]={}),o=o[n.path[a]];switch(n.kind){case"A":!function t(e,n,a){if(a.path&&a.path.length){var i,o=e[n],r=a.path.length-1;for(i=0;i<r;i++)o=o[a.path[i]];switch(a.kind){case"A":t(o[a.path[i]],a.index,a.item);break;case"D":case"E":o[a.path[i]]=a.lhs;break;case"N":delete o[a.path[i]]}}else switch(a.kind){case"A":t(e[n],a.index,a.item);break;case"D":case"E":e[n]=a.lhs;break;case"N":e=u(e,n)}return e}(o[n.path[a]],n.index,n.item);break;case"D":case"E":o[n.path[a]]=n.lhs;break;case"N":delete o[n.path[a]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==b},enumerable:!0},noConflict:{value:function(){return w&&(w.forEach((function(t){t()})),w=null),c},enumerable:!0}});var E={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},A={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.dispatch,n=t.getState;return"function"==typeof e||"function"==typeof n?y()({dispatch:e,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=A,e.createLogger=y,e.logger=v,e.default=v,Object.defineProperty(e,"__esModule",{value:!0})}(e)}).call(this,n(21))},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(51),o=a(n(99)),r=a(n(100)),s=a(n(101)),u=a(n(102)),l=a(n(103)),d=a(n(104)),c=a(n(105)),f=a(n(106)),p=a(n(107)),g=a(n(109)),h=a(n(110)),m=a(n(111)),y=a(n(112)),x=a(n(113)),b=a(n(114)),T=i.combineReducers({app:o.default,user:r.default,menuIndex:s.default,thread:u.default,threads:l.default,threadDetail:d.default,analyze:c.default,bootOption:f.default,setting:p.default,posts:g.default,postsTimeline:h.default,postsMulti:m.default,postsSingle:y.default,postsChild:x.default,actionLog:b.default});e.default=T},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(5));e.default=(t=new i.default,e)=>e.app?t.merge(e.app):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(47));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(48)),o=a(n(5));e.default=(t=new i.default,e)=>{const n=(t,n)=>t.ch===e.app.rootCh||n.ch===e.app.rootCh?0:t.watchCnt<n.watchCnt?1:t.watchCnt>n.watchCnt?-1:0;switch(e.type){case"ON_CLICK_MULTISTREAM":const a=e.app.dispThreadType===o.default.dispThreadTypeMulti?e.postsMulti:e.postsSingle,i=a&&a.length?a.length:0;return i>0?t.map(t=>e.app.rootCh===t.ch?Object.assign(Object.assign({},t),{favicon:a[i-1].favicon,post:a[i-1].post}):t):t;case"SERVER_TO_CLIENT[EMIT]:find":if(e.app.isLinkCh)return t;const r=e.posts&&e.posts.length?e.posts.length:0;return 0===r?t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{title:e.thread.title,favicon:e.thread.favicon,watchCnt:e.thread.watchCnt}):t):e.app.dispThreadType===o.default.dispThreadTypeMulti?t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{favicon:e.thread.favicon,stampId:e.posts[r-1].stampId,post:e.posts[r-1].post}):t):t;case"SERVER_TO_CLIENT[BROADCAST]:find":case"SERVER_TO_CLIENT[BROADCAST]:changeThread":case"SERVER_TO_CLIENT[BROADCAST]:disconnect":return t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{watchCnt:e.thread.watchCnt}):t).sort(n);case"SERVER_TO_CLIENT[BROADCAST]:post":return t.map(t=>e.app.rootCh===t.ch?e.app.multistream?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t:e.posts[0].ch===t.ch?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t);case"SERVER_TO_CLIENT[EMIT]:findMenuIndex":return t&&t.length>0&&e.menuIndex&&e.menuIndex.length>0?(e.menuIndex.shift(),[t[0]].concat(e.menuIndex)):e.menuIndex?e.menuIndex:t;default:return e.menuIndex?e.menuIndex:t}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(15));e.default=(t=new i.default({},{},{}),e)=>{switch(console.log("@@@@@@@@ "+e.type),console.log("state thread.ch "+t.ch),e.thread&&console.log("action.thread.ch "+e.thread.ch),e.type){case"CLIENT_TO_SERVER[EMIT]:tuned":return new i.default(e.thread,{},{});case"SERVER_TO_CLIENT[BROADCAST]:find":case"SERVER_TO_CLIENT[BROADCAST]:changeThread":case"SERVER_TO_CLIENT[BROADCAST]:disconnect":case"SERVER_TO_CLIENT[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;break;default:return console.log("default "+e.type),console.log(t.ch),e.thread?t.merge(e.thread):t}return t}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(52));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(15));e.default=(t=new i.default({},{},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(49));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(50));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(108));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(3));class o extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},n=t&&t.common?t.common:{},a=t&&t.server?t.server:{};return this.create({client:e,common:n,server:a})}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(8));e.default=(t=new i.default,e)=>t},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(8));e.default=(t=new i.default,e)=>{switch(e.type){case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map(t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t));case"CLEAR_POSTS_TIMELINE":return t.filter(t=>t.currentTime<=e.mediaCurrentTime);case"SERVER_TO_CLIENT[EMIT]:find":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_CLIENT[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch&&e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(8)),o=a(n(12));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_CLIENT[EMIT]:find":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...t,...e.postsMulti];break;case"SERVER_TO_CLIENT[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.thread.ch)return[...t,...e.postsMulti];break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let n=[];return t.length+e.postsMulti.length>o.default.findOneLimitCnt?(n=[...e.postsMulti,...t]).slice(0,o.default.findOneLimitCnt):[...e.postsMulti,...t]}}return t}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(8));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_CLIENT[EMIT]:find":case"SERVER_TO_CLIENT[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(8));e.default=(t=new i.default,e)=>{switch(e.type){case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_CLIENT[EMIT]:find":case"SERVER_TO_CLIENT[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.posts[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_CLIENT[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(12)),o=a(n(116)),r=a(n(3)),s=a(n(13)),u=a(n(5)),l=a(n(1)),d=a(n(8)),c=a(n(15)),f=a(n(52)),p=a(n(117)),g=a(n(2));e.default={updateAction:t=>e=>n=>{const a=t.getState();n&&(n.app=n.app?Object.assign(Object.assign({},a.app),n.app):a.app,n.app.actioned=n.type),h[n.type]&&(n=h[n.type](a,n)),n&&e(n)}};const h={"CLIENT_TO_SERVER[EMIT]:find":(t,e)=>{e.ui.isLoading=!0},"SERVER_TO_CLIENT[BROADCAST]:find":(t,e)=>(e.app.tuned=e.thread.ch,e),"SERVER_TO_CLIENT[EMIT]:updateThread":(t,e)=>(e.threads=f.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e),"SERVER_TO_CLIENT[EMIT]:find":(t,e)=>{if((e=m.caseNoExistResponsePost(t,e)).app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.detailCh=e.thread.ch,e.app.desc=e.thread.serverMetas.title,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=u.default.getIsMediaCh(e.thread.ch),e.ui.isLoading=!1,(e=Object.assign({},d.default.getAnyActionPosts(e))).thread.title=e.thread.serverMetas.title,e.thread.hasSlash=r.default.getBool(e.thread.hasSlash),e.threads=f.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.app.isRootCh&&(e.app.rootTitle=e.thread.title),!e.app.isLinkCh)switch(e.ui.extensionMode){case l.default.extensionModeExtBottomLabel:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*g.default.transitionNotif+g.default.transitionNotifDisp;window.talknWindow.parentExtTo("openNotif",{transition:t})}break;case l.default.extensionModeExtModalLabel:if(e.posts.length>0){const t=e.posts[e.posts.length-1]._id,n=e.posts[e.posts.length-1].post,a=e.posts[e.posts.length-1].stampId;let r=e.posts[e.posts.length-1].favicon;r=s.default.HTTPS_PROTOCOL+"//"+i.default.assetsIconPath+o.default.getSaveFaviconName(r),window.talknWindow.parentExtTo("openNotif",{id:t,post:n,stampId:a,favicon:r,addUnreadCnt:e.posts.length})}}if(e.app.isMediaCh){const t=u.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=u.default.getMediaTypeFromSrc(t),e=p.default.setStoragePostsTimeline(e)}else e.app.chType=u.default.mediaTagTypeNo;return e},"CLIENT_TO_SERVER[EMIT]:changeThread":(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.app.offsetFindId=u.default.defaultOffsetFindId,e.app.offsetTimelineFindId=u.default.defaultOffsetFindId,e.app.offsetMultiFindId=u.default.defaultOffsetFindId,e.app.offsetSingleFindId=u.default.defaultOffsetFindId,e.app.offsetChildFindId=u.default.defaultOffsetFindId,e.app.offsetLogsFindId=u.default.defaultOffsetFindId,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e),"SERVER_TO_CLIENT[BROADCAST]:post":(t,e)=>{const{user:n}=t,a=e.posts.length-1;e.app.inputStampId=0,e.user=n;const r=Object.keys(e.thread.emotions);if(e.thread.ch===e.posts[a].ch&&r.length>0){const n=Object.assign({},e.thread.emotions);e.thread.emotions=Object.assign({},t.thread.emotions),Object.keys(n).forEach(t=>{Object.keys(n[t]).forEach(a=>{e.thread.emotions[t][a]=e.thread.emotions[t][a]+n[t][a]})})}else e.thread.emotions=t.thread.emotions;switch(e.ui.extensionMode){case l.default.extensionModeExtBottomLabel:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*g.default.transitionNotif+g.default.transitionNotifDisp;window.talknWindow.parentExtTo("openNotif",{transition:t})}break;case l.default.extensionModeExtModalLabel:if(e.posts.length>0){const t=e.posts[a]._id,n=e.posts[a].post,r=e.posts[a].stampId;let u=e.posts[a].favicon;u=s.default.HTTPS_PROTOCOL+"//"+i.default.assetsIconPath+o.default.getSaveFaviconName(u),window.talknWindow.parentExtTo("openNotif",{id:t,post:n,stampId:r,favicon:u,addUnreadCnt:e.posts.length})}}return e=d.default.getAnyActionPosts(e)},"CLIENT_TO_SERVER[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!0,e),"SERVER_TO_CLIENT[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=u.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.ui.isLoading=!1,e=d.default.getAnyActionPosts(e)),"SERVER_TO_CLIENT[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=f.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||r.default.getBool(e.threadDetail.hasSlash),delete e.thread,e),NEXT_POSTS_TIMELINE:(t,e)=>{const{ui:n}=t;switch(n.extensionMode){case l.default.extensionModeExtBottomLabel:if(!n.isOpenPosts&&!n.isDispPosts){const t=4*g.default.transitionNotif+g.default.transitionNotifDisp;window.talknWindow.parentExtTo("openNotif",{transition:t})}break;case l.default.extensionModeExtModalLabel:const t=e.postsTimeline.length;if(t>0){const n=e.postsTimeline[t-1]._id,a=e.postsTimeline[t-1].post,r=e.postsTimeline[t-1].stampId;let u=e.postsTimeline[t-1].favicon;u=s.default.HTTPS_PROTOCOL+"//"+i.default.assetsIconPath+o.default.getSaveFaviconName(u),window.talknWindow.parentExtTo("openNotif",{id:n,post:a,stampId:r,favicon:u,addUnreadCnt:t})}}return e},ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread=Object.assign(Object.assign({},t.thread),e.thread),e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const n=e.thread.ch;e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.thread.ch=n;const a=u.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=c.default.getFindTypeFromSrc(a),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=u.default.defaultOffsetFindId,e.app.offsetChildFindId=u.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.postsChild=[],e.app.offsetFindId=u.default.defaultOffsetFindId,e.app.offsetChildFindId=u.default.defaultOffsetFindId,e),TOGGLE_DISP_POSTS_SUPPORTER:(t,e)=>(t.ui.isOpenPostsSupporter=!t.ui.isOpenPostsSupporter,e),TOGGLE_LINKS:(t,e)=>(t.ui.isOpenLinks=!t.ui.isOpenLinks,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),ON_CLICK_TOGGLE_POSTS:(t,e)=>(e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:l.default.getIsOpenPosts(e.ui),e),OFF_TRANSITION:(t,e)=>(e.ui.height=u.default.getHeight(),e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:l.default.getIsOpenPosts(e.ui),e),ON_TRANSITION_END:(t,e)=>(e.ui.height=l.default.getHeight(),e.ui.isOpenPosts=l.default.getIsOpenPosts(e.ui),e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e.ui.isOpenPosts=l.default.getIsOpenPosts(e.ui),e),ON_CLICK_TOGGLE_DISP_MENU:(t,e)=>(e.ui.isOpenMenu=!e.ui.isOpenMenu,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||r.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_DISP_BOARD:(t,e)=>(e.ui.isOpenBoard=!t.ui.isOpenBoard,e),TOGGLE_BUBBLE_POST:(t,e)=>(e.ui.isBubblePost=!t.ui.isBubblePost,e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let n=!1,{clientMetas:a}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(a).forEach((t,o)=>{a[t]&&""!==a[t]&&i[t]!==a[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),n=!0,e.thread.serverMetas[t]=a[t])}),n)return e.threadDetail=Object.assign({},t.threadDetail),e.threadDetail.serverMetas=Object.assign(Object.assign({},e.threadDetail.serverMetas),e.thread.serverMetas),e}},m={caseNoExistResponsePost:(t,e)=>(0===e.posts.length?(e.posts=t.posts,e.existResponsePostFlg=!1):e.existResponsePostFlg=!0,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={isUrl:t=>{return!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*|\\/)?$","i").test(t)},getSaveFaviconName:t=>{if(t){const e=t.replace(/\u002f/g,"_");return e.indexOf(".png")>0?e:e+".png"}},trimPx:t=>t.toString().replace("px","")}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(11)),o=a(n(5)),r=a(n(1)),s=a(n(118));function u(t,e){const{app:n}=t,{storageKey:a}=i.default;if(n.isRootCh){const{postsMulti:e,postsSingle:i}=t;s.default.setStorage(n.rootCh,a.postsMulti,e),s.default.setStorage(n.rootCh,a.postsSingle,i)}return{state:t,props:e}}function l(t){const{app:e,thread:n,postsTimeline:a}=t,{storageKey:o}=i.default;if(e.isMediaCh){const e=a&&a.length?a.length:0;let i=[],r=[];for(let t=0;t<e;t++)0===a[t].currentTime?i.push(a[t]):r.push(a[t]);t.postsTimeline=i,s.default.setStorage(n.ch,o.postsTimelineZero,i),s.default.setStorage(n.ch,o.postsTimeline,r)}return t}e.default={"SERVER_TO_CLIENT[BROADCAST]:post":u,"SERVER_TO_CLIENT[EMIT]:getMore":u,"SERVER_TO_CLIENT[EMIT]:find":(t,e)=>({state:t,props:e}),"SERVER_TO_CLIENT[EMIT]:changeThread":(t,e)=>{const{app:n}=t,{rootCh:a}=n,{storageKey:r}=i.default,u=n.dispThreadType===o.default.dispThreadTypeMulti?r.postSingle:r.postMulti;return s.default.setStorage(a,i.default.storageKey[u],[]),{state:t,props:e}},ON_CLICK_TOGGLE_DISP_MENU:(t,e)=>{const{ui:n}=t;return n.screenMode===r.default.screenModeSmallLabel&&(n.isOpenMenu||(window.talknWindow.unlockWindow(),window.scrollTo(0,n.threadScrollY))),{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:n}=t.app;return s.default.setStorage(n,i.default.storageKey.app,t.app),{state:t,props:e}},"SERVER_TO_CLIENT[EMIT]:tuned ":(t,e)=>({state:t,props:e}),RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:n}=t;return n.isMediaCh?{state:t=l(t),props:e}:u(t,e)},setStorageHtmlPosts:u,setStoragePostsTimeline:l,getStoragePostsTimeline:function(t){const{storageKey:e}=i.default,n=s.default.getStorage(t,e.postsTimeline);return"Array"===n.constructor.name?n:[]},getStoragePostsTimelineZero:function(t){const{storageKey:e}=i.default,n=s.default.getStorage(t,e.postsTimelineZero);return"Array"===n.constructor.name?n:[]}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(11));class o{static getBaseKey(t){return`${i.default.storageKey.baseKey}${t}`}static setStorage(t,e,n){if(e){const a=o.getBaseKey(t);let i=JSON.parse(localStorage.getItem(a));return i=JSON.stringify(Object.assign(Object.assign({},i),{[e]:n})),localStorage.setItem(a,i),!0}return!1}static getStorage(t,e){const n=o.getBaseKey(t),a=JSON.parse(localStorage.getItem(n));return a&&a[e]?a[e]:{}}static getCaches(t){return{menuLogs:o.getStorage(t,i.default.storageKey.menuLogs),app:o.getStorage(t,i.default.storageKey.app),thread:o.getStorage(t,i.default.storageKey.thread),setting:o.getStorage(t,i.default.storageKey.setting)}}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(7)),r=a(n(25)),s=a(n(54));e.default=class{constructor(t){const{app:e,ui:n}=t,a=o.default.getDetailClass({app:e,ui:n});return{self:a.getFooter(t),child:a.getFooterChild(t),childLike:a.getFooterChildLike(t),childMoney:a.getFooterChildMoney(t),childShare:a.getFooterChildShare(t)}}static getDetailClass({app:t,ui:e}){return e.screenMode===i.default.screenModeSmallLabel?s.default:r.default}static get padding(){return 20}static get margin(){return 5}static getWidth({app:t,ui:e},n=!1){switch(e.screenMode){case i.default.screenModeSmallLabel:return"100%";case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:return o.default.getDetailClass({app:t,ui:e}).getWidth({app:t,ui:e},n)}}}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2));class r{constructor(t){return{self:r.getSelf(t)}}static get datasetsBase(){return{backgroundColor:"rgba(240, 100, 195, 0.2 )",borderCapStyle:"square",borderColor:"rgba(240, 100, 195, 0.8 )",borderWidth:"4",pointBackgroundColor:"rgba(240, 100, 195, 0.8 )",pointBorderColor:"rgba(240, 100, 195, 0 )",pointHoverBackgroundColor:"rgba(255, 255, 255, 0.8 )",pointHoverBorderColor:"rgba(240, 100, 195, 0.8 )",pointHoverBorderWidth:"4",data:[]}}static get optionsBase(){return{responsive:!0,responsiveAnimationDuration:0,elements:{point:{backgroundColor:"rgba(79, 174, 159, 0.6)",borderAlign:"left",borderColor:"rgba(79, 174, 159, 0.6)",borderWidth:100},line:{tension:.1,backgroundColor:"rgba(79, 174, 159, 0.6)",borderWidth:"10",borderColor:"rgba(79, 174, 159, 0.6)",borderCapStyle:"square",borderDash:[]}},legend:{display:!1},tooltips:{enabled:!0,intersect:!0,backgroundColor:"rgba(240, 100, 195, 0.7 )",callbacks:{label:(t,e)=>{let n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),"0"!==(n+=Math.round(100*t.yLabel)/100)?n:null},title:(t,e)=>t.map(t=>e.labels[t.index])}},scale:{ticks:{fontSize:17,fontColor:o.default.fontBaseRGB,backdropColor:"rgba(255,255,255,0)",beginAtZero:!0,max:5,min:0,stepSize:1},pointLabels:{fontSize:14,fontColor:o.default.fontBaseRGB}}}}static getSelf(t){const e=i.default.getLayoutFlex({marginBottom:"40px",flexDirection:"column"}),n=i.default.getContentBase({}),a=i.default.getAnimationBase({});return i.default.get({layout:e,content:n,animation:a})}}e.default=r},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(16));class u{constructor(t){return{self:u.getSelf(t),emoji:u.getEmoji(t),emojiLabel:u.getEmojiLabel(t)}}static get selfHeight(){return 172}static getTransform({app:t,ui:e}){return e.isOpenPostsSupporter?`translate3d( 0px, -${u.selfHeight+s.default.selfHeight}px, 0px )`:"translate3d( 0px, 0px, 0px )"}static getSelf({app:t,ui:e}){const n=o.default.getLayoutFlex({display:"flex",position:"fixed",bottom:`-${u.selfHeight}px`,left:s.default.getLeft({app:t,ui:e}),height:u.selfHeight,width:s.default.getWidth({app:t,ui:e}),maxWidth:s.default.getWidth({app:t,ui:e}),color:r.default.whiteRGB,flexFlow:"column wrap",alignItems:"center",justifyContent:"flex-start",background:r.default.darkRGBA,whiteSpace:"nowrap",overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflowX:"scroll",overflowY:"hidden"}),a=o.default.getAnimationBase({transition:r.default.getTransitionFirstOn({app:t,ui:e}),transform:u.getTransform({app:t,ui:e})});return o.default.get({layout:n,content:{},animation:a})}static getEmoji({app:t,ui:e}){const n=i.default.screenModeSmallLabel===e.screenMode?"35px":"40px",a=o.default.getLayoutFlex({minWidth:"20%",maxWidth:"20%",height:"86px",flexFlow:"row wrap",alignItems:"center",justifyContent:"center",padding:"5px"}),s=o.default.getContentBase({fontSize:n,cursor:"pointer"}),u=o.default.getAnimationBase({transition:r.default.getTransition({app:t,ui:e}),transform:"scale(1.0)"});return o.default.get({layout:a,content:s,animation:u})}static getEmojiLabel({app:t,ui:e}){const n=(i.default.screenModeSmallLabel,e.screenMode,"0px"),a=i.default.screenModeSmallLabel===e.screenMode?"8px":"10px",s=o.default.getLayoutFlex({width:"100%",minWidth:"100%",height:"30px",margin:n}),u=o.default.getContentBase({wordBreak:"break-word",fontSize:a,color:r.default.whiteRGB}),l=o.default.getAnimationBase({});return o.default.get({layout:s,content:u,animation:l})}}e.default=u},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(18)),u=a(n(4));class l{constructor(t){return{self:l.getSelf(t),child:l.getChild(t),childIndex:l.getChildIndex(t)}}static getWidth({app:t,ui:e},n=!1){let a="0";if(e.extensionMode===i.default.extensionModeExtBottomLabel)a="50%";else switch(e.screenMode){case i.default.screenModeSmallLabel:a="100%";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:a=u.default.baseWidth}return n?o.default.trimUnit(a):a}static getSelf({app:t,ui:e}){const n=(e.screenMode,i.default.screenModeSmallLabel,{border:r.default.border}),a=e.extensionMode===i.default.extensionModeExtBottomLabel?r.default.radiuses:"0px",u=o.default.getLayoutFlex(Object.assign({width:l.getWidth({app:t,ui:e}),minWidth:l.getWidth({app:t,ui:e}),height:`${s.default.headerHeight}px`,background:r.default.offWhiteRGB,borderRadius:a},n)),d=o.default.getContentBase({}),c=o.default.getAnimationBase();return o.default.get({layout:u,content:d,animation:c})}static getChild({app:t,ui:e}){const n=o.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=o.default.getContentBase({fontSize:"0.5em"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}static getChildIndex({app:t,ui:e}){const n=o.default.getLayoutBlock({flexGrow:1,height:"100%"}),a=o.default.getContentBase({fontSize:"0.5em",fontWeight:"bold"}),i=o.default.getAnimationBase();return o.default.get({layout:n,content:a,animation:i})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2)),r=a(n(14)),s=a(n(5)),u=a(n(1));class l{constructor(t){Object.assign(Object.assign({},t.bootOption),t.app);const e=l.getHeadTab(t),n=l.getMenu(t),a=l.getTalknLogo(t),i=l.getUser(t),o=l.getHeaderUser(t),r=l.getTag(t),s=l.getHome(t),u=l.getGraph(t);return{headTab:e,menu:n,talknLogo:a,user:i,headerUser:o,search:l.getSearch(t),tag:r,home:s,graph:u,index:l.getIndex(t),logs:l.getLogs(t),setting:l.getSetting(t),thunder:l.getThunder(t),bubble:l.getBubble(t),detail:l.getDetail(t),heart:l.getHeart(t),share:l.getShare(t),money:l.getMoney(t),openEmoji:l.getOpenEmoji(t),close:l.getClose(t),ch:l.getCh(t),update:l.getUpdate(t),loading:l.getLoading(t),tune:l.getTune(t)}}static get defaultOption(){return{sizePx:l.largeSize,active:!0}}static get smallSize(){return"24px"}static get middleSize(){return"36px"}static get largeSize(){return"48px"}static get bigSize(){return"64px"}static getEmpty({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:o}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTwitter({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"twitter.png":"twitter_gray.png",s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getFacebook({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"facebook.png":"facebook_gray.png",s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAppstore({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"appstore.png":"appstore_gray.png",s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAndroid({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"android.png":"android_gray.png",s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getHome({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"home.png":"home_gray.png",s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getGraph({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=n.active?"graph.png":"graph_gray.png",s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalkn({app:t,ui:e},n={}){const a=(n=Object.assign(Object.assign({},l.defaultOption),n)).sizePx?n.sizePx:l.middleSize,o=(n.active,"talkn.png"),s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:a,height:a,minWidth:a,minHeight:a,backgroundSize:a,backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${o})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalknLogo({app:t,ui:e}){return{img:i.default.get({layout:i.default.getLayoutBlock({backgroundImage:`url(${r.default.assetsImgPath}talkn_logo2.png)`,backgroundPosition:"center center",backgroundSize:"90%",backgroundRepeat:"no-repeat"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getChromeExtension({app:t,ui:e},n={}){const a=((n=Object.assign(Object.assign({},l.defaultOption),n)).active,"chrome_extension.png"),s=n.active?"pointer":"default";return i.default.get({layout:i.default.getLayoutBlock({flexGrow:"1",width:"100%",minWidth:"100%",height:"180px",minHeight:"60px",backgroundColor:o.default.reliefRGB,backgroundSize:"75%",backgroundPosition:"center",backgroundImage:`url(https://${r.default.assetsImgPath}${a})`,backgroundRepeat:"no-repeat"}),content:i.default.getContentBase({cursor:s}),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTag({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),left:i.default.get({layout:i.default.getLayoutInlineBlock({borderBottom:`2px solid ${o.default.reliefRGB}`,borderLeft:`2px solid ${o.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(45deg) translate3d(5px, 5px, 0px)"})}),right:i.default.get({layout:i.default.getLayoutInlineBlock({borderBottom:`2px solid ${o.default.reliefRGB}`,borderLeft:`2px solid ${o.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(-135deg) translate3d(-6px, -4px, 0px)"})}),bar:i.default.get({layout:i.default.getLayoutInlineBlock({background:o.default.reliefRGB,width:"2px",height:"13px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(40deg) translate3d(-5px, 13px, 0px)"})})}}static getHomeCss({app:t,ui:e}){const n=i.default.get({layout:i.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),a=i.default.get({layout:i.default.getLayoutInlineBlock({borderBottom:`2px solid ${o.default.reliefRGB}`,borderLeft:`2px solid ${o.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"19px",height:"18px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(135deg) translate3d(5px, -3px, 0px)"})}),r=i.default.get({layout:i.default.getLayoutInlineBlock({borderRight:`2px solid ${o.default.reliefRGB}`,borderBottom:`2px solid ${o.default.reliefRGB}`,borderLeft:`2px solid ${o.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"20px",height:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(2px, -6px, 0px)"})});return{div:n,leaf:a,door:i.default.get({layout:i.default.getLayoutInlineBlock({background:`${o.default.reliefRGB}`,width:"6px",height:"8px",margin:"0 auto",borderRadius:"5px 5px 0px 0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(-11px, -5px, 0px)"})}),base:r}}static getSearch({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"45px",height:"45px",borderRadius:"100px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),circle:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",top:"4px",left:"16px",margin:"7px auto",width:"18px",height:"18px",borderRadius:"100px",border:`3px solid ${o.default.chromeOffTabRGB}`}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bar:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"23px",left:"13px",margin:"0 auto",background:o.default.chromeOffTabRGB,width:"4px",height:"12px",borderRadius:"10px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e}),transform:"scale(1) translate3d(0px, 0px, 0px) rotate(45deg)"})})}}static getUser({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"22px",height:l.smallSize,margin:"2px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),top:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:o.default.reliefRGB,width:"12px",height:"12px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:o.default.reliefRGB,width:"8px",height:"12px",borderRadius:"6px",position:"relative",top:"8px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getHeaderUser({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"5px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),top:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:`${o.default.chromeOffTabRGB}`,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:`${o.default.chromeOffTabRGB}`,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"12px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getIndex({app:t,ui:e}){const n=i.default.get({layout:i.default.getLayoutInlineBlock({width:"22px",height:l.smallSize,margin:"2px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),a=i.default.get({layout:i.default.getLayoutBlock({width:"22px",height:"22px",margin:"0 auto",borderRadius:"4px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),r=i.default.get({layout:i.default.getLayoutBlock({width:"16px",height:"2px",margin:"4px auto",borderRadius:"6px",background:o.default.reliefRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()});return{div:n,wrap:a,top:i.default.get({layout:r,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),middle:i.default.get({layout:r,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bottom:i.default.get({layout:r,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})})}}static getLogs({app:t,ui:e}){const n=i.default.get({layout:i.default.getLayoutInlineBlock({width:"22px",height:l.smallSize,margin:"2px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),a=i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"3px",left:"-6px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 ) rotate(-15deg)"})}),r=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:o.default.reliefRGB,width:"8px",height:"12px",borderRadius:"45px 30px 45px 45px",position:"relative",left:"2px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),s=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:o.default.reliefRGB,width:"5px",height:"7px",borderRadius:"10px",position:"relative",top:"-2px",left:"2px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),u=i.default.get({layout:i.default.getLayoutBlock({width:"7px",height:"2px",background:o.default.offWhiteRGB,margin:"0 auto",zIndex:"1000",position:"relative",left:"1px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, -8px, 1000px )"})}),d=i.default.get({layout:i.default.getLayoutInlineBlock({width:"36px",height:"36px",position:"absolute",top:"-4px",left:"0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 0.5 ) rotate(30deg)"})}),c=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:o.default.reliefRGB,width:"10px",height:"20px",borderRadius:"30px 50px 40px 40px",position:"relative",left:"-5px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),f=i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",background:o.default.reliefRGB,width:"7px",height:"7px",borderRadius:"2px 2px 3px 3px",position:"relative",left:"-5px",zIndex:"0"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:n,foot1:a,foot1Top:r,foot1Space:u,foot1Bottom:s,foot2:d,foot2Top:c,foot2Space:i.default.get({layout:i.default.getLayoutBlock({width:"19px",height:"3px",background:o.default.offWhiteRGB,margin:"0 auto",zIndex:"1000"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, -10px, 1000px )"})}),foot2Bottom:f}}static getSetting({app:t,ui:e}){const n=i.default.get({layout:i.default.getLayoutInlineBlock({width:"22px",height:l.smallSize,margin:"2px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"scale( 1 )"})}),a=i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",background:o.default.reliefRGB,width:"3px",height:"3px",borderRadius:"1px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:n,wing1:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(9.5px, 2px, 0px) rotate(0deg)"})}),wing2:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 15px, 4.5px, 0px ) rotate( 45deg )"})}),wing3:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 16.5px, 9px, 0px ) rotate( 90deg )"})}),wing4:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 15.5px, 14px, 0px ) rotate( 125deg )"})}),wing5:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 10px, 17px, 0px ) rotate( 180deg )"})}),wing6:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 4px, 14.5px, 0px ) rotate( 225deg )"})}),wing7:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 2.5px, 9.5px, 0px ) rotate( 270deg )"})}),wing8:i.default.get({layout:a,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 4px, 4.5px, 0px ) rotate( 315deg )"})}),circle:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",top:"3px",left:"4px",width:"14px",height:"14px",border:`3px solid ${o.default.reliefRGB}`,borderRadius:"50px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 1px, 0px )"})})}}static getThunder({app:t,ui:e}){let n=o.default.reliefRGBA;return s.default.isActiveMultistream({app:t,ui:e})&&(n=o.default.themeRGBA),{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"rotate(0deg) translate(0px, 0px)"})}),wrap:i.default.get({layout:i.default.getLayoutInlineBlock({borderRadius:"50px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"rotate(90deg) translate3d(0px,0px,0px)"})}),top:i.default.get({layout:i.default.getLayoutBlock({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:"transparent",borderRightColor:"transparent",borderBottomColor:`${n}`,borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(-3px, -3px)"})}),bottom:i.default.get({layout:i.default.getLayoutFlex({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:`${n}`,borderRightColor:"transparent",borderBottomColor:"transparent",borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(15px, -3px)"})})}}static getPlay({app:t,ui:e}){const n=e.isOpenLinks?o.default.themeRGB:o.default.reliefRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate(0px, 0px)"})}),playCircle:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"5px",width:"24px",height:"24px",minWidth:"24px",minHeight:"24px",border:`2px solid ${n}`,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),playTriangle:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",width:"6px",height:"6px",borderTop:"6px solid transparent",borderRight:"6px solid transparent",borderBottom:"6px solid transparent",borderLeft:`6px solid ${n}`}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate3d(4px, 1.5px, 0px)"})})}}static getLinks({app:t,ui:e}){const n=o.default.themeRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate(0px, 0px)"})}),linksA1:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"6px",width:"24px",height:"14px",border:`2px solid ${n}`,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksA2:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"5px",left:"5px",width:"4px",height:"4px",borderRadius:"10px",background:o.default.whiteRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({})}),linksB1:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"0px",width:"24px",height:"14px",border:`2px solid ${n}`,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksB2:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"-5px",left:"-5px",width:"4px",height:"4px",borderRadius:"10px",background:o.default.whiteRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({})})}}static getBubble({app:t,ui:e}){const n=e.isBubblePost?o.default.themeRGB:o.default.reliefRGBA;return{div:i.default.get({layout:i.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"30px",height:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate(0px, 0px)"})}),bubble:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"18px",height:"14px",background:n,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),bubbleBar:i.default.get({layout:i.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"5px",height:"10px",background:n,border:`3px solid ${n}`}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.transitionOff,transform:"skew(30deg, 28deg) rotate(30deg) translate3d(-2px, -7px, 0px)"})})}}static getDetail({app:t,ui:e}){const n=e.screenMode===u.default.screenModeSmallLabel?"3px 0px 0px 0px":"1px auto",a=i.default.get({layout:i.default.getLayoutFlex({width:"40px",height:"40px",borderRadius:"100px",margin:n,cursor:"pointer"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),r=i.default.get({layout:i.default.getLayoutBlock({width:"26px",height:"28px",margin:"7px auto",borderRadius:"2px",background:`${o.default.calmRGB}`}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),s=i.default.get({layout:i.default.getLayoutBlock({width:"14px",height:"2px",margin:"3px auto",borderRadius:"6px",background:o.default.whiteRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()});return{div:a,wrap:r,bar1:i.default.get({layout:Object.assign(Object.assign({},s),{width:"7px",margin:"5px 0px 0px 6px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar2:i.default.get({layout:s,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar3:i.default.get({layout:s,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),bar4:i.default.get({layout:s,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),mekuri:i.default.get({layout:Object.assign(Object.assign({},s),{position:"absolute",top:0,rightt:0,width:0,height:0,borderRadius:0,borderTop:`4px solid ${o.default.whiteRGB}`,borderLeft:`4px solid ${o.default.whiteRGB}`,borderRight:`4px solid ${o.default.reliefRGB}`,borderBottom:`4px solid ${o.default.reliefRGB}`}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(18px, -3px, 0px) rotate( 90deg )"})})}}static getMenu({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"4px auto"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e})})}),dot:i.default.get({layout:i.default.getLayoutBlock({width:"6px",height:"6px",margin:"4px auto",borderRadius:"6px",background:o.default.calmRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()})}}static getHeadTabLeftTransform(){return l.getHeadTabLeftOpenTransform}static getHeadTabRightTransform(){return l.getHeadTabRightOpenTransform}static get getHeadTabLeftOpenTransform(){return"rotate( 120deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightOpenTransform(){return"rotate( -120deg ) translate3d(-3px, 5px, 0px)"}static get getHeadTabLeftCloseTransform(){return"rotate( 90deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightCloseTransform(){return"rotate( -90deg ) translate3d(-3px, 5px, 0px)"}static getHeadTab({app:t,ui:e}){const n=i.default.getLayoutInlineBlock({width:"4px",borderRadius:"10px",background:o.default.calmRGB});return{div:i.default.get({layout:i.default.getLayoutBlock({width:"40px",height:"20px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase()}),left:i.default.get({layout:n,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e}),transform:l.getHeadTabLeftTransform()})}),right:i.default.get({layout:n,content:i.default.getContentBase(),animation:i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e}),transform:l.getHeadTabRightTransform()})})}}static getHeart({app:t,ui:e}){e.openLockMenu===u.default.openLockMenuLabelShare?o.default.themeRGBA:o.default.reliefRGB;return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:l.smallSize,height:l.smallSize,margin:"2px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),before:i.default.get({layout:i.default.getLayoutBase({width:"10px",height:"17px",borderRadius:"10px 10px 0 0",background:o.default.reliefRGB}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"rotate(-45deg) translate3d(0px, 7px, 0px)"})}),after:i.default.get({layout:i.default.getLayoutBase({width:"17px",height:"10px",borderRadius:"0 10px 10px 0",background:o.default.reliefRGB}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"rotate(-45deg) translate3d(11px, -1px, 0px)"})})}}static getShare({app:t,ui:e}){const n=e.openLockMenu===u.default.openLockMenuLabelShare?o.default.themeRGBA:o.default.reliefRGB,a=i.default.get({layout:i.default.getLayoutInlineBlock({width:l.smallSize,height:l.smallSize,margin:"2px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),r=i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"9px",width:"16px",height:"14px",margin:"0 auto",border:`2px solid ${n}`,borderRadius:"3px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px)"})}),s=i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"6px",left:"16px",width:"2px",height:"11px",margin:"0 auto",background:n}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px)"})});return{div:a,base:r,whiteBar1:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"11px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, 0px, 0px)"})}),whiteBar2:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"18px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, 0px, 0px)"})}),bar:s,arrow:i.default.get({layout:i.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"13px",width:"8px",height:"8px",borderTop:`2px solid ${n}`,borderRight:`2px solid ${n}`}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px) rotate( -45deg)"})})}}static getMoney({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:l.smallSize,height:l.smallSize,margin:"2px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),outer:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",width:"22px",height:"22px",borderRadius:"24px",border:`2px solid ${o.default.reliefRGB}`}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(0px, 3px, 0px)"})}),inner:i.default.get({layout:i.default.getLayoutBlock({margin:"0 auto",width:"8px",height:"8px",borderRadius:"8px",border:`2px solid ${o.default.reliefRGB}`}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(0px, 5px, 0px)"})})}}static getOpenEmoji(t){const{app:e,ui:n}=t,a=u.default.screenModeSmallLabel===n.screenMode?"none":"inline-block";return{div:i.default.get({layout:i.default.getLayoutInlineBlock({display:a,width:"5px",height:"5px",minWidth:"5px",minHeight:"5px",margin:"0px 5px 0px 0px",borderRight:"5px solid transparent",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid rgba(200,200,200,0.8)"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:o.default.getTransition({app:e,ui:n})})})}}static getCloseEmoji({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"8px",height:"8px",minWidth:"8px",minHeight:"8px",margin:"0px 0px 0px -20px",borderRight:"8px solid rgba(200,200,200,0.8)",borderTop:"8px solid transparent",borderBottom:"8px solid transparent",borderLeft:"8px solid transparent"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:o.default.getTransition({app:t,ui:e})})})}}static getClose({app:t,ui:e}){return{div:i.default.get({layout:i.default.getLayoutInlineBlock({width:"26px",height:"26px",margin:"1px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),circle:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"26px",height:"26px",border:`2px solid ${o.default.calmRGB}`,borderRadius:"30px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(0deg)"})}),bar1:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"18px",background:o.default.calmRGBA,borderRadius:"2px"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({transform:"translate3d(10px, 2px, 0px) rotate(45deg)"})}),bar2:i.default.get({layout:i.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"18px",background:o.default.calmRGBA,borderRadius:"2px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"translate3d(10px, 2px, 0px) rotate(-45deg)"})})}}static getCh({app:t,ui:e}){const n=o.default.lightGrayRGB,a=i.default.get({layout:i.default.getLayoutFlex({width:"44px",height:"44px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({})}),r=i.default.get({layout:i.default.getLayoutFlex({position:"absolute",top:"0px",width:"inherit",height:"inherit",border:`2px solid ${n}`,borderRadius:"30px"}),content:{},animation:{}}),s=i.default.get({layout:i.default.getLayoutFlex({width:"75%",height:"75%",border:`2px solid ${n}`,borderRadius:"30px"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({})}),u=i.default.get({layout:i.default.getLayoutFlex({width:"inherit",height:"inherit",justifyContent:"center",alignItems:"center",borderRadius:"30px"}),content:i.default.getContentBase({lineHeight:2,color:n,fontSize:"10px"}),animation:i.default.getAnimationBase({})}),l={width:"24px",height:"24px",background:o.default.lightRGB,position:"absolute",zIndex:10};return{div:a,circle1:r,circle2:s,str:u,shadow1:i.default.get({layout:Object.assign(Object.assign({},l),{top:"-4px"}),content:{},animation:{transform:"rotate(45deg) scale3d(1, 1, 1) skew(-57deg, -57deg)"}}),shadow2:i.default.get({layout:Object.assign(Object.assign({},l),{top:"24px"}),content:{},animation:{transform:"rotate(45deg) scale3d(1, 1, 1) skew(-57deg, -57deg)"}})}}static getUpdate({app:t,ui:e}){const n=o.default.whiteRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({width:l.middleSize,height:l.middleSize}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"scale( 0.75)"})}),circle:i.default.get({layout:i.default.getLayoutBase({width:"55%",height:"55%",borderRadius:"30px",border:`2px solid ${n}`,overflow:"visible"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({})}),bar:i.default.get({layout:i.default.getLayoutBase({position:"relative",top:"1px",left:"12px",width:"8px",height:"8px",background:"none",borderTop:`0px solid ${o.default.themeRGB}`,borderRight:`2px solid ${n}`,borderBottom:`2px solid ${n}`,borderLeft:`0px solid ${o.default.themeRGB}`}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"rotate(25deg)"})}),white:i.default.get({layout:i.default.getLayoutBase({position:"relative",top:"2px",left:"12px",width:"10px",height:"4px",background:"rgba(100, 192, 170, 1)"}),content:i.default.getContentBase({cursor:"pointer"}),animation:i.default.getAnimationBase({transform:"rotate(25deg)"})})}}static getLoading({app:t,ui:e}){o.default.whiteRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),circle:i.default.get({layout:i.default.getLayoutBase({margin:"0 auto",width:"5em",height:"5em",borderRadius:"50%",borderTop:"0.6em solid rgba(255, 255, 255, 0.2)",borderRight:"0.6em solid rgba(255, 255, 255, 0.2)",borderBottom:"0.6em solid rgba(255, 255, 255, 0.2)",borderLeft:"0.6em solid #ffffff"}),content:i.default.getContentBase({fontSize:"5px"}),animation:i.default.getAnimationBase({transform:"translateZ(0)",animation:"Rotation 1.1s infinite linear"})}),after:i.default.get({layout:i.default.getLayoutBase({display:"none",borderRadius:"50%",width:"5em",height:"5em"}),content:i.default.getContentBase(),animation:i.default.getAnimationBase({})})}}static getTune({app:t,ui:e}){const n="30px",a=o.default.chromeOffTabRGB;return{div:i.default.get({layout:i.default.getLayoutFlex({position:"absolute",width:"500px",height:"500px"}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({transform:"scale(0.1)"})}),side1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"135px",left:"135px",border:`30px solid ${a}`,borderRadius:"300px",width:"230px",height:"230px",zIndex:0}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),side2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"50px",left:"50px",border:`30px solid ${a}`,borderRadius:"300px",width:"400px",height:"400px",zIndex:0}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),cut:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"50px",left:"-150px",background:"none",width:"0px",height:"0px",borderTop:`200px solid ${o.default.lightRGB}`,borderRight:"400px solid rgba(255,255,255,0)",borderBottom:`200px solid ${o.default.lightRGB}`,borderLeft:"400px solid rgba(255,255,255,0)",zIndex:1}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),center:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"220px",left:"220px",width:"60px",height:"60px",borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftTop1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"153px",left:"69px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftTop2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"190px",left:"146px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftBottom1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"317px",left:"69px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalLeftBottom2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"280px",left:"146px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightTop1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"153px",left:"401px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightTop2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"190px",left:"324px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightBottom1:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"317px",left:"401px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})}),terminalRightBottom2:i.default.get({layout:i.default.getLayoutBase({position:"absolute",top:"280px",left:"324px",width:n,height:n,borderRadius:"100px",background:a,zIndex:1e6}),content:i.default.getContentBase({}),animation:i.default.getAnimationBase({})})}}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(12)),o=a(n(1)),r=a(n(0)),s=a(n(2)),u=a(n(18));class l{constructor(t){return{self:l.getSelf(t),header:l.getHeader(t),headerSearchIcon:l.getHeaderSearchIcon(t),headerInput:l.getHeaderInput(t),headerFindSelect:l.getHeaderFindSelect(t),headerUpdateIcon:l.getHeaderUpdateIcon(t),ol:l.getOl(t)}}static get iconSize(){return"25px"}static get liHeight(){return 90}static getSelf({app:t,ui:e}){const n=r.default.getLayoutBlock({width:"100%",height:"100%",margin:"0 auto"}),a=r.default.getContentBase({}),i=r.default.getAnimationBase({});return r.default.get({layout:n,content:a,animation:i})}static getHeader({app:t,ui:e}){const n=e.screenMode===o.default.screenModeSmallLabel?{borderBottom:s.default.border,borderLeft:0}:{borderBottom:s.default.border,borderLeft:0,borderRight:s.default.border},a=r.default.getLayoutFlex(Object.assign(Object.assign({width:"100%",height:`${l.liHeight/2}px`},n),{background:s.default.lightRGB})),i=r.default.getContentBase({textAlign:"left"}),u=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:a,content:i,animation:u})}static getHeaderSearchIcon({app:t,ui:e}){const n=r.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"72px",height:"45px"}),a=r.default.getContentBase({fontSize:"13px",color:s.default.reliefRGBA,fontWeight:"bold"}),i=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:n,content:a,animation:i})}static getHeaderInput({app:t,ui:e}){const n=r.default.getLayoutInlineBlock({width:"calc( 100% - 120px )",height:"25px",padding:"0px 0px 1px 10px",background:s.default.whiteRGB,outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),a=r.default.getContentBase({whiteSpace:"nowrap",fontSize:"14px",lineHeight:"2",textAlign:"left"}),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getHeaderUpdateIcon({app:t,ui:e}){const n=r.default.getLayoutFlex({width:"70px",height:"50px",alignItems:"center",justifyContent:"flex-start"}),a=r.default.getContentBase({cursor:"pointer"}),i=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:n,content:a,animation:i})}static getHeaderFindSelect({app:t,ui:e}){const n=r.default.getLayoutFlex({width:"100%",height:"50px",alignItems:"center",justifyContent:"center",background:"transparent",WebkitAppearance:"none",padding:"10px"}),a=r.default.getContentBase({outline:0,cursor:"pointer",fontSize:"14px"}),i=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:n,content:a,animation:i})}static getOl({app:t,ui:e}){const n=r.default.getLayoutBlock({width:"100%",height:`calc( 100% - ${u.default.headerHeight}px )`,overflowX:"hidden",overflowY:"scroll"}),a=r.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return r.default.get({layout:n,content:{},animation:a})}static getLiActive(){const t=r.default.getLayoutBlock({position:"relative",width:"initial",height:`${l.liHeight}px`,padding:"10px",borderBottom:s.default.border,zIndex:3,borderRight:`1px solid ${s.default.whiteRGB}`,background:s.default.whiteRGB}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getLiUnactive(){const t=r.default.getLayoutBlock({position:"relative",width:"initial",height:`${l.liHeight}px`,padding:"10px",borderBottom:s.default.border,background:s.default.offWhiteRGB,borderRight:s.default.border}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getUpper(){const t=r.default.getLayoutBlock({width:"100%",height:"20px"}),e=r.default.getContentBase({fontSize:"10px"}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getUpperSpace(){const t=r.default.getLayoutInlineBlock({width:"20%"}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getUpperRight(){const t=r.default.getLayoutInlineBlock({width:"80%"}),e=r.default.getContentBase({textAlign:"left"}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottom(){const t=r.default.getLayoutBlock({width:"100%",height:"50px"}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottomIcon(){const t=r.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:`url(${i.default.protcol}:${i.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 15%",backgroundSize:"20px 20px",backgroundRepeat:"no-repeat"}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottomPost(){const t=r.default.getLayoutInlineBlock({width:"80%",flexGrow:2}),e=r.default.getContentBase({lineHeight:2,textAlign:"left"}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(12)),r=a(n(0)),s=a(n(2));class u{constructor(t){return{activeLiSelf:u.getActiveLiSelf(t),unactiveLiSelf:u.getUnactiveLiSelf(t),upper:u.getUpper(),upperSpace:u.getUpperSpace(),upperRankWrap:u.getUpperRankWrap(),upperRank:u.getUpperRank(),upperRight:u.getUpperRight(),bottom:u.getBottom(),bottomIcon:u.getBottomIcon(),bottomPost:u.getBottomPost(),bottomWatchCnt:u.getBottomWatchCnt(),bottomWatchCntWrap:u.getBottomWatchCntWrap(),ext:u.getExt(),extMusic:u.getExtMusic(),extVideo:u.getExtVideo()}}static get tuneRGB(){return s.default.themeRGB}static get rank1RGB(){return"rgb(255, 10, 78)"}static get rank2RGB(){return"rgb(255, 127, 0)"}static get rank3RGB(){return"rgb(0, 142, 255)"}static get rankOtherRGB(){return s.default.downreliefRGB}static get oneDigitWidth(){return"17%"}static get twoDigitWidth(){return"18%"}static get thirdDigitWidth(){return"19%"}static get fontSize(){return 15}static get iconSize(){return 24}static get liHeight(){return 90}static get activeLiSelfLabel(){return"activeLiSelf"}static get unactiveLiSelfLabel(){return"unactiveLiSelf"}static get activeLiSelfBackground(){return s.default.whiteRGB}static get activeLiSelfMouseOverBackground(){return s.default.whiteRGB}static get activeLiSelfMouseDownBackground(){return s.default.whiteRGB}static get unactiveLiSelfBackground(){return s.default.calmRGB}static get unactiveLiSelfMouseOverBackground(){return s.default.whiteRGB}static get unactiveLiSelfMouseDownBackground(){return s.default.whiteRGB}static get activeLiSelfBorderRightColor(){return`1px solid ${s.default.whiteRGB}`}static get unactiveLiSelfBorderRightColor(){return s.default.border}static getUnactiveLiBorder({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?{borderBottom:s.default.border}:e.screenMode===i.default.screenModeSmallLabel?{borderBottom:s.default.border,borderLeft:0}:{borderRight:s.default.border,borderBottom:s.default.border,borderLeft:0}}static getDispRankBackground(t){switch(t){case 0:return u.tuneRGB;case 1:return u.rank1RGB;case 2:return u.rank2RGB;case 3:return u.rank3RGB;default:return u.rankOtherRGB}}static getDispRankWidth(t){switch(String(t).length){case 0:case 1:return u.oneDigitWidth;case 2:return u.twoDigitWidth;case 3:default:return u.thirdDigitWidth}}static getActiveLiSelf({app:t,ui:e}){const n=r.default.getLayoutBlock({width:"initial",height:`${u.liHeight}px`,padding:"5px",borderBottom:s.default.border,borderRight:`1px solid ${s.default.whiteRGB}`,background:u.activeLiSelfBackground,cursor:"pointer"}),a=r.default.getContentBase(),i=r.default.getAnimationBase({transition:`${s.default.transitionFirstOn}ms`});return r.default.get({layout:n,content:a,animation:i})}static getUnactiveLiSelf({app:t,ui:e}){const n=u.getUnactiveLiBorder({app:t,ui:e}),a=r.default.getLayoutBlock(Object.assign(Object.assign({width:"initial",height:`${u.liHeight}px`,padding:"5px"},n),{background:u.unactiveLiSelfBackground,cursor:"pointer"})),i=r.default.getContentBase(),o=r.default.getAnimationBase({transition:`${s.default.transitionFirstOn}ms`});return r.default.get({layout:a,content:i,animation:o})}static getUpper(){const t=r.default.getLayoutBlock({width:"100%",height:"20px"}),e=r.default.getContentBase({fontSize:`${u.fontSize}px`}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getUpperSpace(){const t=r.default.getLayoutInlineBlock({width:"18%",margin:"0px 2% 0px 0px"}),e=r.default.getContentBase({}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getUpperRankWrap(){const t=r.default.getLayoutInlineFlex({position:"absolute",left:"5px",top:"7px",width:u.thirdDigitWidth,height:"20px",background:u.rankOtherRGB,borderRadius:"10px",margin:"0"}),e=r.default.getContentBase({}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getUpperRank(){const t=r.default.getLayoutFlex({width:"100%"}),e=r.default.getContentBase({fontSize:"10px",fontWeight:"bold",color:s.default.whiteRGB,lineHeight:"1.5"}),n=r.default.getAnimationBase({transform:"scale(0.8)"});return r.default.get({layout:t,content:e,animation:n})}static getUpperRight(){const t=r.default.getLayoutInlineBlock({width:"80%"}),e=r.default.getContentBase({lineHeight:"1.5",textAlign:"left"}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottom(){const t=r.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"100%",height:"55px"}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottomIcon(){const t=r.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:`url("${o.default.assetsURL}/favicon.ico")`,backgroundPosition:"50% 30%",backgroundSize:"24px 24px",backgroundRepeat:"no-repeat"}),e=r.default.getContentBase(),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottomPost(){const t=r.default.getLayoutInlineBlock({width:"60%"}),e=r.default.getContentBase({fontSize:`${u.fontSize}px`,lineHeight:2.8,textAlign:"left",whiteSpace:"nowrap"}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottomWatchCnt(){const t=r.default.getLayoutInlineFlex({width:"20%"}),e=r.default.getContentBase({textAlign:"center"}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getBottomWatchCntWrap(){const t=r.default.getLayoutInlineFlex({position:"relative",top:"-6px",width:"26px",height:"26px",background:s.default.themeRGBA,borderRadius:"20px"}),e=r.default.getContentBase({fontSize:"10px",lineHeight:2,textAlign:"center",color:s.default.whiteRGB}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getExt(){const t=r.default.getLayoutFlex({position:"absolute",alignItems:"center",justifyContent:"center",bottom:"0px",right:"10px",width:"50px",height:"15px",background:s.default.lightGrayRGBA,borderRadius:"3px 3px 0px 0px"}),e=r.default.getContentBase({textIndent:"3px",fontSize:"8px",textAlign:"center",lineHeight:"1.5px",color:s.default.whiteRGB}),n=r.default.getAnimationBase();return r.default.get({layout:t,content:e,animation:n})}static getExtMusic(){let t=u.getExt();return t.background="rgba(143,198,143, 1)",t}static getExtVideo(){let t=u.getExt();return t.background="rgba(105, 70, 255, 1)",t}}e.default=u},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2)),r=a(n(1));class s{constructor(t){const e=s.getSelf(t),n=s.getColumns(t),a=s.getColumn(t),i=s.getColumnLast(t),o=s.getImg(t),r=s.getWrap(t);return{self:e,columns:n,column:a,columnLast:i,img:o,imgWrap:s.getImgWrap(t),wrap:r,names:s.getNames(t),namesAddCh:s.getNamesAddCh(t)}}static getWidth({app:t,ui:e},n=!1){let a="0";switch(e.screenMode){case r.default.screenModeSmallLabel:a="100.0%";break;case r.default.screenModeMiddleLabel:case r.default.screenModeLargeLabel:a="300px"}return n?i.default.trimUnit(a):a}static getTransform({app:t,ui:e}){let n="translate3d( 0px ,0px, 0px )";switch(e.screenMode){case r.default.screenModeSmallLabel:n="translate3d( 0px ,0px, 0px )";break;case r.default.screenModeMiddleLabel:t.isOpenDetail,n="translate3d( 0px ,0px, 0px )";break;case r.default.screenModeLargeLabel:n="translate3d( 0px ,0px, 0px )"}return n}static getSelf({app:t,ui:e}){const n=i.default.getLayoutInlineBlock({position:"relative",width:s.getWidth({app:t,ui:e}),minWidth:s.getWidth({app:t,ui:e}),maxWidth:"inherit",height:"100%",WebkitOverflowScrolling:"touch",overflow:"scroll",borderTop:0,borderRight:o.default.border,borderBottom:0,borderLeft:0}),a=i.default.getAnimationBase();return i.default.get({layout:n,content:{},animation:a})}static getColumns({app:t,ui:e}){const n=i.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",height:"auto",borderBottom:o.default.border,borderRight:o.default.border,background:o.default.whiteRGB,overflow:"scroll"}),a=i.default.getContentBase({whiteSpace:"nowrap"}),r=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:r})}static getColumn({app:t,ui:e}){const n=i.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",borderBottom:o.default.border,borderRight:o.default.border}),a=i.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),r=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:r})}static getColumnLast({app:t,ui:e}){const n=i.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",marginLeft:"20px"}),a=i.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getWrap({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:o.default.border}),a=i.default.getContentBase({textAlign:"left",content:"getWrap"}),r=i.default.getAnimationBase({});return i.default.get({layout:n,content:a,animation:r})}static getImgWrap({app:t,ui:e}){const n=i.default.getLayoutBlock({flexGrow:1,margin:"22px 0px 0px 0px",width:"60px",maxWidth:"60px",minWidth:"60px",height:"60px"}),a=i.default.getContentBase({}),o=i.default.getAnimationBase({});return i.default.get({layout:n,content:a,animation:o})}static getImg({app:t,ui:e}){const n=i.default.getLayoutInlineBlock({borderRadius:"50%",width:"34px",height:"34px"}),a=i.default.getContentBase({}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getNamesAddCh({app:t,ui:e}){const n=i.default.getLayoutBlock({padding:"5px 10px 5px 5px",flexGrow:4}),a=i.default.getContentBase({fontSize:"12px",textAlign:"left",lineHeight:"2"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getNames({app:t,ui:e}){const n=i.default.getLayoutBlock({flexGrow:4}),a=i.default.getContentBase({fontSize:"12px",textAlign:"left",lineHeight:"1.7"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}}e.default=s},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(1)),r=a(n(2)),s=a(n(6)),u=a(n(18));class l{constructor(t){return{menuShare:l.getMenuShare(t),header:l.getHeader(t),ul:l.getUl(t),liGoWeb:l.getLiGoWeb(t),liTwitter:l.getLiTwitter(t),liFacebook:l.getLiFacebook(t),liEmbed:l.getLiEmbed(t),liEmbedInput:l.getLiEmbedInput(t),shareLabel:l.getShareLabel(t)}}static get headTabUpdate(){return{div:{position:"absolute",top:"13px",right:"10px",transform:"scale(0.5)"}}}static getCommonLayout({app:t,ui:e}){const n={position:"fixed",width:"90%",height:"fit-content",minHeight:"fit-content",maxHeight:"fit-content",top:`calc( 100% + ${s.default.headerHeight}px)`,left:"5%",flexFlow:"column",border:r.default.border,borderRadius:"5px",background:r.default.whiteRGB,zIndex:0};switch(e.screenMode){case o.default.screenModeSmallLabel:case o.default.screenModeMiddleLabel:n.width=`${100*r.default.widthRatio}`,n.left=(100-n.width)/2,n.width=n.width+"%",n.left=n.left+"%",n.zIndex=0;break;case o.default.screenModeLargeLabel:n.width="33.3%",n.left="33.3%",n.zIndex=1}return n}static getCommonTransform({app:t,ui:e}){return e.openLockMenu===o.default.openLockMenuLabelNo?"translate3d(0px, 0px, 0px)":"translate3d(0px, -70vh, 0px)"}static getPaddingLi({app:t,ui:e}){switch(e.screenMode){case o.default.screenModeSmallLabel:return"15px";case o.default.screenModeMiddleLabel:case o.default.screenModeLargeLabel:return"15px 15px 15px 20px"}}static getMenuShare({app:t,ui:e}){const n=l.getCommonLayout({app:t,ui:e}),a=i.default.getLayoutFlex(n),o=i.default.getContentBase(),s=i.default.getAnimationBase({transition:r.default.getTransition({app:t,ui:e}),transform:l.getCommonTransform({app:t,ui:e})});return i.default.get({layout:a,content:o,animation:s})}static getHeader({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"100%",height:u.default.headerHeight,maxHeight:u.default.headerHeight,borderBottom:r.default.border,background:r.default.whiteRGB,padding:"0px 20px"}),a=i.default.getContentBase(),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getUl({app:t,ui:e}){const n=i.default.getLayoutBlock({width:"100%"}),a=i.default.getContentBase({}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getLiGoWeb({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"100%",height:"45px",padding:l.getPaddingLi({app:t,ui:e})}),a=i.default.getContentBase({cursor:"pointer"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getLiTwitter({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"100%",height:"45px",padding:l.getPaddingLi({app:t,ui:e}),borderBottom:r.default.border}),a=i.default.getContentBase({cursor:"pointer"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getLiFacebook({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"100%",height:"45px",padding:l.getPaddingLi({app:t,ui:e}),borderBottom:r.default.border}),a=i.default.getContentBase({cursor:"pointer"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getLiEmbed({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"100%",height:"45px",padding:l.getPaddingLi({app:t,ui:e})}),a=i.default.getContentBase({cursor:"pointer"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getLiEmbedInput({app:t,ui:e}){const n=i.default.getLayoutFlex({width:"98%",height:"25px",margin:"0px 0px 0px 20px",border:r.default.border,borderRadius:"5px",padding:"5px"}),a=i.default.getContentBase({fontSize:"12px",outline:0,cursor:"pointer"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}static getShareLabel({app:t,ui:e}){const n=i.default.getLayoutFlex({flexGrow:"1"}),a=i.default.getContentBase({color:"inherit",justifyContent:"flex-start",textIndent:"20px",textAlign:"left"}),o=i.default.getAnimationBase();return i.default.get({layout:n,content:a,animation:o})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(12)),r=a(n(0)),s=a(n(2));class u{constructor(t){return{self:u.getSelf(t),upper:u.getUpper(t),upperChild:u.getUpperChild(t),upperTitle:u.getUpperTitle(t),upperTimeago:u.getUpperTimeago(t),bottom:u.getBottom(t),bottomIcon:u.getBottomIcon(t),bottomPost:u.getBottomPost(t),stampLabelWrap:u.getStampLabelWrap(t),stampLabel:u.getStampLabel(t)}}static get bubblestampScale(){return 2}static get stampScale(){return 1}static get fontSize(){return 14}static get iconSize(){return"25px"}static getStampTag(t,e=!0){return`<div class="talknStamps" style="${u.getStampStyle(e)}">${t}</div>`}static getStampStyle(t=!0){return`display: flex;justify-content: center;align-items: center;width: 100%;height: 100%;transform: scale(${t?u.bubblestampScale:u.stampScale});font-size: 50px;`}static getSelf({app:t,ui:e}){const n=e.isBubblePost?"10px 0px 10px 0px":"0px 0px 0px 0px",a=e.isBubblePost?"75px":"40px",i="calc( 100% - 0px )",o=r.default.getLayoutBlock({width:i,minWidth:"calc( 100% - 20px )",maxWidth:i,height:"auto",minHeight:a,padding:n}),s=r.default.getContentBase(),u=r.default.getAnimationBase();return r.default.get({layout:o,content:s,animation:u})}static getFixTimeMarker({app:t,ui:e}){const n=u.getTimeMarker({app:t,ui:e});return Object.assign(Object.assign({},n),{position:"fixed"})}static getTimeMarker({app:t,ui:e}){const n=r.default.getLayoutFlex({width:"18%",height:"auto",margin:"15px auto 10px auto",padding:"5px 10px",background:s.default.darkLightRGBA,borderRadius:"20px"}),a=r.default.getContentBase({color:s.default.whiteRGB,letterSpacing:"2px",fontSize:"0.1em"}),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getUpper({app:t,ui:e}){const n=e.isBubblePost?"flex":"none",a=r.default.getLayoutFlex({display:n,justifyContent:"space-between",height:"20px"}),i=r.default.getContentBase({fontSize:"14px"}),o=r.default.getAnimationBase();return r.default.get({layout:a,content:i,animation:o})}static getUpperChild({app:t,ui:e}){const n=r.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"center",flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%"}),a=r.default.getContentBase({textAlign:"left",textIndent:"10px"}),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getUpperTitle({app:t,ui:e}){const n=r.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:6,width:"60%",minWidth:"60%",maxWidth:"60%",margin:"0px 15px 0px 5px"}),a=r.default.getContentBase({textAlign:"left",whiteSpace:"nowrap",wordBreak:"break-all"}),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getUpperTimeago({app:t,ui:e}){const n=r.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:2,padding:"0px 20px 0px 0px",width:"20%",minWidth:"20%",maxWidth:"20%"}),a=r.default.getContentBase({textAlign:"right",fontSize:"0.75em",letterSpacing:"0.5px"}),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getBottom({app:t,ui:e}){const n=r.default.getLayoutFlex({padding:"0px 10px 0px 0px"}),a=r.default.getContentBase(),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getBottomIcon({app:t,ui:e}){const n=r.default.getLayoutBlock({flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%",height:u.iconSize,backgroundImage:`url(${o.default.protcol}:${o.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 50%",backgroundSize:"24px 24px",backgroundRepeat:"no-repeat"}),a=r.default.getContentBase(),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}static getBottomPost({app:t,ui:e}){const n=e.isBubblePost?s.default.themeRGBA:"none",a=e.isBubblePost?s.default.whiteRGBA:"rgba(160, 160, 160)",i=e.isBubblePost?"15px 15px 15px 25px":"0px",o=r.default.getLayoutBlock({flexGrow:8,width:"79%",minWidth:"79%",maxWidth:"79%",background:n,padding:i,margin:"0px 1% 0px 0px",borderRadius:"10px"}),l=r.default.getContentBase({color:a,lineHeight:1.7,fontSize:`${u.fontSize}px`,textAlign:"left",cursor:"pointer",wordWrap:"break-word",overflowWrap:"break-word"}),d=r.default.getAnimationBase();return r.default.get({layout:o,content:l,animation:d})}static getStampLabelWrap({app:t,ui:e}){const n=i.default.screenModeSmallLabel===e.screenMode?"9%":"7%",a=r.default.getLayoutFlex({position:"absolute",bottom:"10px",right:n,width:"100%",height:"20px",justifyContent:"flex-end",alignItems:"center",zIndex:10}),o=r.default.getContentBase({textAlign:"right"}),s=r.default.getAnimationBase();return r.default.get({layout:a,content:o,animation:s})}static getStampLabel({app:t,ui:e}){const n=r.default.getLayoutFlex({width:"100px",height:"inherit",padding:"5px",background:"rgba(80, 80 ,80, 0.2)",justifyContent:"center",alignItems:"center",borderRadius:"5px 5px 0px 0px"}),a=r.default.getContentBase({fontSize:"10px",color:s.default.whiteRGB}),i=r.default.getAnimationBase();return r.default.get({layout:n,content:a,animation:i})}}e.default=u},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2)),r=a(n(6)),s=a(n(17));class u{constructor(t){return{self:u.getSelf(t)}}static get selfHeight(){return r.default.headerHeight}static getSelf({app:t,ui:e}){const n=s.default.getOlWidth({app:t,ui:e},!0),a=(100-n)/2,u=t.isOpenInnerNotif?r.default.headerHeight:0,l=i.default.getLayoutFlex({position:"fixed",top:r.default.headerHeight+"px",alignItems:"center",justifyContent:"center",width:`calc( ${n}% - 2px )`,margin:`0px calc( ${a}% + 1px ) 0px calc( ${a}% + 1px )`,height:u,background:o.default.themeRGBA}),d=i.default.getContentBase({color:o.default.whiteRGB}),c=i.default.getAnimationBase({transition:`${o.default.transitionNotif}ms`});return i.default.get({layout:l,content:d,animation:c})}}e.default=u},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(6)),s=a(n(7)),u=a(n(4)),l=a(n(56));class d{constructor(t){return{self:d.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 5}static get marginRightMag(){return 1}static get marginLeft(){return Math.floor(.05*window.innerWidth)}static get marginRight(){return d.marginBase*d.marginRightMag}static get height(){return 50}static getSelfWidth({app:t,ui:e}){let n="0";const a=d.marginLeft+d.marginRight+l.default.getTotalWidth({app:t,ui:e});switch(e.screenMode){case i.default.screenModeSmallLabel:n=`calc( 100% - ${a}px )`;break;case i.default.screenModeMiddleLabel:n=`calc( 100% - ${u.default.getWidth({app:t,ui:e},!0)+a}px )`;break;case i.default.screenModeLargeLabel:n=`calc( ${100-s.default.getWidth({app:t,ui:e},!1)}% - ${u.default.getWidth({app:t,ui:e},!0)+a}px )`}return n}static getSelfLeft({app:t,ui:e}){let n="0px";switch(e.screenMode){case i.default.screenModeSmallLabel:n="0px";break;case i.default.screenModeMiddleLabel:case i.default.screenModeLargeLabel:n=u.default.getWidth({app:t,ui:e},!0)}return n}static getSelf({app:t,ui:e}){const n=t.isMediaCh?"block":"none",a=d.getSelfWidth({app:t,ui:e}),i=d.getSelfLeft({app:t,ui:e}),s=o.default.getLayoutBlock({display:n,position:"fixed",top:r.default.headerHeight+15+"px",left:i,margin:`0px ${d.marginRight}px 0px ${d.marginLeft}px`,width:a,height:`${d.height}px`});return o.default.get({layout:s,content:{},animation:{}})}}e.default=d},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2)),s=a(n(31)),u=a(n(17));class l{constructor(t){return{notifs:l.getNotifs(t),self:l.getSelf(t),bottom:l.getBottom(t),bottomIcon:l.getBottomIcon(t),bottomPost:l.getBottomPost(t)}}static get selfHeight(){return 40}static getNotifsDisplay({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?"block":"none"}static getNotifsHeight({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?e.isOpenPosts?"0px":e.isOpenNotif?`${s.default.selfHeight+l.selfHeight}px`:`${l.selfHeight}px`:"0px"}static getNotifs({app:t,ui:e}){const n=l.getNotifsDisplay({app:t,ui:e}),a=l.getNotifsHeight({app:t,ui:e}),i=o.default.getLayoutBlock({display:n,position:"absolute",top:"0px",width:"100%",height:a,overflow:"visible"}),r=o.default.getContentBase(),s=o.default.getAnimationBase();return o.default.get({layout:i,content:r,animation:s})}static getSelf({app:t,ui:e}){const n=l.getNotifsDisplay({app:t,ui:e}),a=u.default.getOlWidth({app:t,ui:e},!0),i=(100-a)/2,s=o.default.getLayoutBlock({display:n,position:"absolute",top:0,width:`${a}%`,height:l.selfHeight+"px",background:r.default.whiteRGBA,marginLeft:`${i}%`,borderTop:r.default.border,borderLeft:r.default.border,borderRight:r.default.border,borderRadius:"3px 3px 0px 0px"}),d=o.default.getContentBase({textAlign:"left"}),c=o.default.getAnimationBase({transform:"translate3d(0px, 40px, 0px)",transition:`${r.default.transitionNotif}ms`});return o.default.get({layout:s,content:d,animation:c})}static getBottom({app:t,ui:e}){return o.default.get({layout:{width:"100%"},content:{},animation:{}})}static getBottomIcon({app:t,ui:e}){return o.default.get({layout:{},content:{},animation:{}})}static getBottomPost({app:t,ui:e}){const n={lineHeight:"0.8",whiteSpace:"nowrap",color:o.default.fontBaseRGB};return o.default.get({layout:{overflow:"hidden",padding:"15px 15px 15px 0px",background:"none"},content:n,animation:{}})}}e.default=l},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2));class r{constructor(t){return{self:r.getSelf(t),linksUl:r.getLinksUl(t),linksLi:r.getLinksLi(t),linksLiActive:r.getLinksLiActive(t),linksLiUnactive:r.getLinksLiUnactive(t),linkMenuUl:r.getLinkMenuUl(t),linkMenuLi:r.getLinkMenuLi(t),linksTabActive:r.getLinksTabActive(t),linksTabUnactive:r.getLinksTabUnactive(t),linksTabLast:r.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return o.default.themeRGB}static get unactiveColor(){return o.default.fontBaseRGB}static getSelfDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getLinksUlOevrflowY({app:t,ui:e}){return e.isOpenLinks?"scroll":"hidden"}static getSelf({app:t,ui:e}){const n=r.getSelfDisplay({app:t,ui:e}),a=i.default.getLayoutFlex({display:n,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),o=i.default.getContentBase({fontSize:"14px"});return i.default.get({layout:a,content:o,animation:{}})}static getLinksUl({app:t,ui:e}){const n=r.getLinksUlOevrflowY({app:t,ui:e}),a=i.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflowX:"hidden",overflowY:n,overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),s=i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e})});return i.default.get({layout:a,content:{},animation:s})}static getLinksLi({app:t,ui:e}){const n=r.size+"px",a=i.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:n,minHeight:n,maxHeight:n,background:o.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),s=i.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px"}),u=i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e})});return i.default.get({layout:a,content:s,animation:u})}static getLinksLiActive({app:t,ui:e}){const n=r.getLinksLi({app:t,ui:e});return n.background=o.default.whiteRGB,n.color=o.default.fontBaseRGB,n}static getLinksLiUnactive({app:t,ui:e}){const n=r.getLinksLi({app:t,ui:e});return n.background=o.default.calmRGB,n.color=o.default.fontBaseRGB,n}static getLinkMenuUl({app:t,ui:e}){const n=r.size+"px",a=i.default.getLayoutFlex({minHeight:n,height:n,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),s=i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e})});return i.default.get({layout:a,content:{},animation:s})}static getLinkMenuLi({app:t,ui:e}){const n=r.size-4+"px",a=i.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:n,minHeight:n,maxHeight:n,background:o.default.reliefRGB,borderRadius:"5px"}),s=i.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px",color:o.default.whiteRGB}),u=i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e})});return i.default.get({layout:a,content:s,animation:u})}static getLinksTabActive({app:t,ui:e}){const n={};return n.background=o.default.whiteRGBA,n.color=o.default.fontBaseRGB,n}static getLinksTabUnactive({app:t,ui:e}){return r.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){const n={margin:"5px 0px 0px 0px"};return n}}e.default=r},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0)),o=a(n(2));class r{constructor(t){return{self:r.getSelf(t),tuneLi:r.getTuneLi(t),activeLi:r.getActiveLi(t),unactiveLi:r.getUnactiveLi(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return o.default.themeRGB}static get unactiveColor(){return o.default.fontBaseRGB}static get activeBgColor(){return o.default.whiteRGBA}static get unactiveBgColor(){return"rgba( 235, 235, 235, 0.96 )"}static getSelf({app:t,ui:e}){const n=r.size+"px",a=i.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:n,minHeight:n,maxHeight:n,background:r.activeBgColor,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),s=i.default.getContentBase({cursor:"pointer",fontSize:"14px",lineHeight:"17px"}),u=i.default.getAnimationBase({transition:o.default.getTransition({app:t,ui:e})});return i.default.get({layout:a,content:s,animation:u})}static getTuneLi({app:t,ui:e}){const n=r.getActiveLi({app:t,ui:e});return n.alignItems="center",n}static getActiveLi({app:t,ui:e}){const n=r.getSelf({app:t,ui:e});return n.background=r.activeBgColor,n.color=o.default.fontBaseRGB,n}static getUnactiveLi({app:t,ui:e}){const n=r.getSelf({app:t,ui:e});return n.background=r.unactiveBgColor,n.color=o.default.fontBaseRGB,n}}e.default=r},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(0));class o{constructor(t){return{self:o.getSelf()}}static getSelf(){const t=i.default.getLayoutFlex({margin:"0 auto",height:"100vh",width:"10%"}),e=i.default.getAnimationBase();return i.default.get({layout:t,content:{},animation:e})}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(1)),o=a(n(0)),r=a(n(2));class s{constructor(t){return{self:s.getSelf(t)}}static getTop({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtModalLabel?"0%":"100%"}static getSelfTransform({app:t,ui:e},n=""){return e.extensionMode===i.default.extensionModeExtBottomLabel?e.isDispPosts?"translate3d(0px, -100%, 0px)":"translate3d(0px, 0%, 0px)":"translate3d(0px, 0px, 0px)"}static getSelfTransition({app:t,ui:e}){return e.extensionMode===i.default.extensionModeExtBottomLabel?(e.isDispPosts,`${r.default.transitionOn}ms`):"0ms"}static getSelf({app:t,ui:e}){const n=o.default.getLayoutFlex({position:"fixed",top:s.getTop({app:t,ui:e}),justifyContent:"flex-start",alignItems:"flex-start",height:"100%"}),a=o.default.getContentBase(),i=o.default.getAnimationBase({transform:s.getSelfTransform({app:t,ui:e}),transition:s.getSelfTransition({app:t,ui:e})});return o.default.get({layout:n,content:a,animation:i})}}e.default=s},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(11));e.default={updateStyle:({styleKey:t,eleType:e,tagName:n,style:a})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:n,style:a}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:n})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:n}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({threadDetail:t,app:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",threadDetail:t,app:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>Object.assign({type:"RESIZE_START_WINDOW"},t),onResizeEndWindow:({app:t,setting:e,bootOption:n})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:n}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=i.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>({type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:n})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:n}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(13));e.default=t=>{const e=`${i.default.SERVER_TO_CLIENT_EMIT}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(13)),o=new(a(n(26)).default);let r={};Object.keys(i.default.map).forEach(t=>{const e=`${i.default.CLIENT_TO_SERVER_EMIT}${t}`;r[e]=(t,e,n)=>s[e.type]?s[e.type](t,e,n):{requestState:e,actionState:n}});const s={post:(t,e,n)=>{const{app:a}=t;return a.isMediaCh&&(window.talknMedia&&window.talknMedia.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},a.inputStampId?Object.keys(o.balances).forEach(n=>{if(o.balances[n]&&t.thread.emotions[n]){const t=o.balances[n](a.inputStampId);t&&t.forEach(t=>{const a=Object.keys(t)[0],i=o.idKeyTypes[a];e.thread.emotions[n]||(e.thread.emotions[n]={}),e.thread.emotions[n][i]||(e.thread.emotions[n][i]=0),e.thread.emotions[n][i]=t[a]})}}):(n.app=Object.assign({},a),n.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:n}}};e.default=r},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(140)),o=a(n(141)),r=a(n(142));e.default={Plain:i.default,Russell:o.default,RussellSimple:r.default}},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(26));class o{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return o.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(26));class o{constructor(t){this.typesArray=[],Object.keys(o.TYPES).forEach(t=>{this.typesArray.push(o.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return o.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(26));class o{constructor(t){this.typesArray=[],Object.keys(o.TYPES).forEach(t=>{this.typesArray.push(o.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return o.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=o},function(t,e,n){"use strict";var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=a(n(13));e.default=t=>{const e=`${i.default.SERVER_TO_CLIENT_BROADCAST}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,