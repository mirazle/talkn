!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=46)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==r.getType(t)&&"Null"!==r.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||("function() {}"===e||("function (){}"===e||("function () {}"===e||"()=>{}"===e)))}create(t){const e=this.constructor.name;r.getType(t);return Object.keys(t).forEach(n=>{let i,s,o=null,a=!1,u=!1,c=()=>{},l=null;if("Object"===r.getType(t[n])){i=t[n];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,u=i.isAcceptBlank?i.isAcceptBlank:u,o=!e&&i.def?i.def:o,l=e||!i.value&&""!==i.value?i:i.value,l=e&&o?o:l,s=r.getType(l),c=i.valid?i.valid:c}else l=t[n],o=l,a=a,u=u,s=r.getType(l),c=c;const f=t=>{let i=null;const o=`${e}.${n}`,f=l,p=s,h=t,d=r.getType(t);return d!==s&&(i=`SCHEMA_TYPE : ${o} [validType: ${s}][paramsType: ${d}]`),a&&null===t&&(i="SCHEMA_IS_ACCEPT_NULL :  "+o),u&&""===t&&(i="SCHEMA_IS_ACCEPT_BLANK :  "+o),"Function"===r.getType(c)&&c(t)&&(i="SCHEMA_YOUR_VALID_METHOD :  "+o),{pointer:o,validValue:f,validType:p,paramsValue:h,paramsType:d,error:i}},{pointer:p,validValue:h,validType:d,paramsValue:g,paramsType:y,error:T}=f(l);if(null===T)Object.defineProperty(this,n,{get:()=>l,set:t=>{const e=f(l);if(null===T)return l=t,Object.assign(Object.assign({},this),{[n]:l});throw this.validWarn(e),T},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw T;console.warn(T)}}),this}canSet(t,e){try{const n=this[t];if(void 0===n)return!0;if(null===n)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:r}=this[t]=e;return!r&&(this[t]=n,!0)}catch(n){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),"BAD CAN SET: "+n}}merge(t={},e=!0){try{const n=r.getType(t),i=Object.keys(t);if(i.length>0){let r=Object.assign({},this);return i.forEach(e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?r[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))}),"Array"===n?(r=Object.values(r),e?new this.constructor(r):r):e?new this.constructor(r):r}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${r.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${r.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach(n=>{let r=t[n];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?e[n]=r.default:e[n]=r}),e}forEach(t){return Object.values(this).forEach(t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=r},function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((n=r[i])===e||n.fn===e){r.splice(i,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r,i=n(61),s=n(30),o=n(63),a=n(64),u=n(65);"undefined"!=typeof ArrayBuffer&&(r=n(66));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;e.protocol=3;var p=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},h=i(p),d={type:"error",data:"parser error"},g=n(67);function y(t,e,n){for(var r=new Array(t.length),i=a(t.length,n),s=function(t,n,i){e(n,(function(e,n){r[t]=n,i(e,r)}))},o=0;o<t.length;o++)s(o,t[o],i)}e.encodePacket=function(t,n,r,i){"function"==typeof n&&(i=n,n=!1),"function"==typeof r&&(i=r,r=null);var s=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&s instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=t.data,s=new Uint8Array(i),o=new Uint8Array(1+i.byteLength);o[0]=p[t.type];for(var a=0;a<s.length;a++)o[a+1]=s[a];return r(o.buffer)}(t,n,i);if(void 0!==g&&s instanceof g)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(f)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},n,!0,r)},i.readAsArrayBuffer(t.data)}(t,n,r);var i=new Uint8Array(1);i[0]=p[t.type];var s=new g([i.buffer,t.data]);return r(s)}(t,n,i);if(s&&s.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,i);var o=p[t.type];return void 0!==t.data&&(o+=r?u.encode(String(t.data),{strict:!1}):String(t.data)),i(""+o)},e.encodeBase64Packet=function(t,n){var r,i="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var s=new FileReader;return s.onload=function(){var t=s.result.split(",")[1];n(i+t)},s.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var o=new Uint8Array(t.data),a=new Array(o.length),u=0;u<o.length;u++)a[u]=o[u];r=String.fromCharCode.apply(null,a)}return i+=btoa(r),n(i)},e.decodePacket=function(t,n,r){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var i=t.charAt(0);return Number(i)==i&&h[i]?t.length>1?{type:h[i],data:t.substring(1)}:{type:h[i]}:d}i=new Uint8Array(t)[0];var s=o(t,1);return g&&"blob"===n&&(s=new g([s])),{type:h[i],data:s}},e.decodeBase64Packet=function(t,e){var n=h[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var i=r.decode(t.substr(1));return"blob"===e&&g&&(i=new g([i])),{type:n,data:i}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var i=s(t);if(n&&i)return g&&!f?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");y(t,(function(t,r){e.encodePacket(t,!!i&&n,!1,(function(t){r(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return r(e.join(""))}))},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var i;if("function"==typeof n&&(r=n,n=null),""===t)return r(d,0,1);for(var s,o,a="",u=0,c=t.length;u<c;u++){var l=t.charAt(u);if(":"===l){if(""===a||a!=(s=Number(a)))return r(d,0,1);if(a!=(o=t.substr(u+1,s)).length)return r(d,0,1);if(o.length){if(i=e.decodePacket(o,n,!1),d.type===i.type&&d.data===i.data)return r(d,0,1);if(!1===r(i,u+s,c))return}u+=s,a=""}else a+=l}return""!==a?r(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));y(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){return n(null,t)}))}),(function(t,e){var r=e.reduce((function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2}),0),i=new Uint8Array(r),s=0;return e.forEach((function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);n=r.buffer}i[s++]=e?0:1;var a=n.byteLength.toString();for(o=0;o<a.length;o++)i[s++]=parseInt(a[o]);i[s++]=255;for(r=new Uint8Array(n),o=0;o<r.length;o++)i[s++]=r[o]})),n(i.buffer)}))},e.encodePayloadAsBlob=function(t,n){y(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),i=0;i<t.length;i++)r[i]=t.charCodeAt(i);t=r.buffer,e[0]=0}var s=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),o=new Uint8Array(s.length+1);for(i=0;i<s.length;i++)o[i]=parseInt(s[i]);if(o[s.length]=255,g){var a=new g([e.buffer,o.buffer,t]);n(null,a)}}))}),(function(t,e){return n(new g(e))}))},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var i=t,s=[];i.byteLength>0;){for(var a=new Uint8Array(i),u=0===a[0],c="",l=1;255!==a[l];l++){if(c.length>310)return r(d,0,1);c+=a[l]}i=o(i,2+c.length),c=parseInt(c);var f=o(i,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var p=new Uint8Array(f);f="";for(l=0;l<p.length;l++)f+=String.fromCharCode(p[l])}s.push(f),i=o(i,c)}var h=s.length;s.forEach((function(t,i){r(e.decodePacket(t,n,!0),i,h)}))}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(7)),s={PRODUCTION:"production",LOCALHOST:"localhost",DEVELOPMENT:"development",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT:8080,DEVELOPMENT_API:8081,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"portal",EXTENSION:"extension",API:"api"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id="},talknClientJs:"talkn.client.js",noInnerNotif:"Sorry, No Function.",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0)),s=r(n(38)),o=r(n(5));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const n=t.ch?t.ch:"/",r=t.name?t.name:"talkn",u=t.talknIndex?t.talknIndex:0,c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(n),l=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,f=t.rootCh?t.rootCh:n,p=i.default.isSet(t.isRootCh)?t.isRootCh:f===n,h=t.rootTitle?t.rootTitle:"talkn",d=a.getMediaSrc(t.protocol,n),g=a.getMediaType(d,t),y=t&&t.tuned?t.tuned:"",T=a.getDispThreadType(t,c),E=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,_=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,C=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,O=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,I=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,P=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,A=t.inputPost?t.inputPost:"",v=!!t.inputStampId&&t.inputStampId,b=t.inputCurrentTime?t.inputCurrentTime:0,w=t.inputSearch?t.inputSearch:"",R=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=t&&t.actioned?t.actioned:"",L=i.default.isSet(t.debug)?t.debug:"";return this.create({name:r,talknIndex:u,isRootCh:p,isLinkCh:l,isMediaCh:c,rootCh:f,rootTitle:h,chType:g,dispThreadType:T,tuned:y,multistream:E,findType:m,offsetFindId:S,offsetTimelineFindId:_,offsetSingleFindId:C,offsetMultiFindId:O,offsetChildFindId:I,offsetLogsFindId:P,inputPost:A,inputStampId:v,inputCurrentTime:b,inputSearch:w,isToggleMultistream:R,actioned:D,debug:L})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),n=e.length;let r="html";for(let i=0;i<n;i++){const n=new RegExp(`.${e[i]}$`);if(t.match(n)){r=a.mediaChTagTypes[e[i]];break}}return r}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some(e=>{const n=new RegExp(`.${e}/$|.${e}$`);return t.match(n)})}static isActiveMultistream({app:t,ui:e},n=""){return"Index"===e.menuComponent&&t.dispThreadType===a.dispThreadTypeMulti}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,rank:e},n,r,i=""){let s="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return s=(t=a.getStepDispThreadType({app:t,rank:e},n,r,i)).dispThreadType,{app:t,stepTo:`${o} to ${s}`}}static getStepDispThreadType({app:t,rank:e},n={},r,i){const s=t||{};if(s.isLinkCh=!1,s.offsetFindId=a.defaultOffsetFindId,n.isMediaCh)return s.dispThreadType=a.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:a.defaultOffsetFindId,s.isLinkCh="toLinks"===i||"findMediaCh"===i,s.isMediaCh=!0,s;if("toLinks"===i){const t=e.some(t=>t.ch===r||t.ch===r+"/");if(!t)return s.offsetFindId=a.defaultOffsetFindId,s.dispThreadType=a.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===r?s.multistream?s.dispThreadType=a.dispThreadTypeMulti:s.dispThreadType=a.dispThreadTypeSingle:s.dispThreadType=a.dispThreadTypeChild,s}}e.default=a},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(36)),s=r(n(8)),o=r(n(0)),a=r(n(4));class u extends o.default{constructor(t={},e,n={}){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const r=u.isWindowObj(t)?u.constructorFromWindow(t,e,n):t;return this.create(r)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e,n){const r=!!e.ch&&e.ch,i=u.getCh(e,r);if(n.ch&&n.ch===i)return n;{let n={},s="";return n.ch=i,n.chs=["/"],n.hasSlash=!!e.hasslash&&o.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=u.getDefaultFavicon(),n.findType=u.findTypeAll,r?(n.protocol=u.getProtocol(r),n.host=u.getHost(r),n.chs=r.chs&&r.chs.length>0?r.chs:u.getChs(i)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:u.getChs(i),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=u.getFaviconFromWindow(window)),n.title=u.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=u.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=u.getIsSelfCh(s,n.ch),n.createTime="",n.updateTime="",n}}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const r="/"===t.slice(-1)?t:t+"/";if("/"!==r){const t=r.split("/"),i=t.length;let s="";for(var n=1;n<i;n++)""!==t[n]&&(s+=t[n],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):i.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=u.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,n="http://",r="https://",i=location.host;if(e.indexOf(n)||e.indexOf(r)){const t=n+i+(e||"/favicon.ico");return 1===t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,n={}){let r={dispType:"",isSchema:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return r.isSchema=u.getStatusIsSchema(t),r.isRequireUpsert=u.getStatusIsRequireUpsert(t,n,r.isSchema),r.isMultistream=u.getStatusIsMultistream(e),r.isToggleMultistream=u.getStatusIsToggleMultistream(e),r.isMediaCh=u.getStatusIsMediaCh(t.ch),r}static getStatusIsSchema(t){if(t.createTime&&t.updateTime){if((t.createTime.getTime?t.createTime.getTime():t.createTime)===(t.updateTime.getTime?t.updateTime.getTime():t.updateTime)){if(t.lastPost.createTime.getTime()===t.lastPost.updateTime.getTime())return!0}}return!1}static getStatusIsRequireUpsert(t,e,n=!1){if(t.updateTime){const r=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,s=i.getFullYear(),o=i.getMonth(),a=i.getDate(),u=i.getHours(),c=(i.getMinutes(),new Date(s,o,a,u-e.server.findOneThreadActiveHour).getTime());return!!n||r<c}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=u.findTypes[u.findTypeHtml],n=u.findTypes[u.findTypeMusic],r=u.findTypes[u.findTypeVideo];let i="",s="";return t.indexOf(";")>0&&(s=t.split(";")[0]),t.indexOf("/")>0&&(s=t.split("/")[0]),i=u.findTypeHtml,e.includes(s)&&(i=u.findTypeHtml),n.includes(s)&&(i=u.findTypeMusic),r.includes(s)&&(i=u.findTypeVideo),i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=u},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(4)),s=r(n(79)),o=r(n(13)),a=r(n(14)),u=r(n(40));class c{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:n,postsMulti:r,postsSingle:s,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return n;case i.default.dispThreadTypeMulti:return r;case i.default.dispThreadTypeSingle:return s;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:n,posts:r}=t,o=r&&r.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new u.default,t.postsChild=[],t.postsLogs=[],n.dispThreadType){case i.default.dispThreadTypeTimeline:t=c.getAnyActionPostsTimeline(t,r,e,o);break;case i.default.dispThreadTypeMulti:t.postsMulti=o?r:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=o?r:[];break;case i.default.dispThreadTypeChild:t.postsChild=o?r:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=o?r:[]}return t}static getAnyActionPostsTimeline(t,e,n,r){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new o.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new o.default,t.postsTimelineStock=new a.default,r)){const n=e.length;for(let r=0;r<n;r++)0===e[r].currentTime?t.postsTimeline.push(e[r]):t.postsTimelineStock.push(e[r])}return t}}e.default=c},function(t,e){var n,r,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(t){n=s}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=a(p);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get CONNECTION_SERVER_KEY(){return"connectionServer"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{user:["uid"],setting:"*",thread:["watchCnt"]},responseBroadcastState:{}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*",app:["dispThreadType","offsetFindId","tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{thread:"*",app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["tuned","rootCh","multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["tuned"]},responseBroadcastState:{thread:["watchCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:"*",rank:"*"}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:"*"},responseEmitState:{thread:"*"},responseBroadcastState:{}},login:{requestPublicState:{user:["requestLoginType"]},requestPrivateState:{user:["uid","href"]},responseEmitState:{user:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["watchCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),n=e[0].split("[")[0];let r;return r=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:n,actionType:r,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,n){const r=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=s.map[r];let u={[s.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach(t=>{u[t]||(u[t]={}),a[t].forEach(r=>{if(!u[t][r]){let s=e[t][r];n&&n[t]&&i.default.isSet(n[t][r])&&(s=n[t][r]),u[t][r]=s}})}),Object.keys(o).forEach(t=>{u[t]||(u[t]={}),o[t].forEach(e=>{u[t][e]||(u[t][e]=n)})}),u}static getResponseState(t,e,n){const r=e.type,i=s.map[r][`response${t}State`];let o={[s.REDUX_ACTION_KEY]:r};return Object.keys(i).forEach(t=>{if(!n[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const r=i[t];let s=n[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===r?o=Object.assign(Object.assign({},o),{[t]:s}):r.forEach(r=>{if(void 0===n[t][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${r}`;o=Object.assign(Object.assign({},o),{[t]:Object.assign(Object.assign({},o[t]),{[r]:n[t][r]})})})}}),o}static getRequestActionState(t,e=null,n=null){return"string"==typeof e&&null===n?{type:t}:"object"==typeof e&&"object"==typeof n?Object.assign(Object.assign(Object.assign({},e),n),{type:t}):"string"==typeof e&&"object"==typeof n?Object.assign(Object.assign({},n),{type:t}):Object.assign(Object.assign({},e),{type:t})}}e.default=s},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(49)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(7))},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,i=n.length;r<i;r++){var s=n[r].split("=");e[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(68)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(7))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(112));class s{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(s.inputs).forEach(t=>{s.inputs[t].forEach(e=>{this.belongCoverTypes[e]=t})}),Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(t);const e=s.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL}),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=s.defaultModelKey,e=0,n=!0){let r=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const n=o[t],s=i[n];if(n>e)break;r=s}return n?r+1:r}static get inputs(){return{[s.TYPES.LIKE.LABEL]:[1,2,3,4,5],[s.TYPES.MONEY.LABEL]:[100],[s.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[s.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[s.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[s.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[s.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[s.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[s.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[s.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=s},function(t,e,n){var r=n(50)("socket.io-parser"),i=n(1),s=n(53),o=n(24),a=n(25);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=f;var c=e.ERROR+'"encode error"';function l(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return c;n+=i}return r("encoded %j as %s",t,n),n}function f(){this.reconstructor=null}function p(t){this.reconPack=t,this.buffers=[]}function h(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){s.removeBlobs(t,(function(t){var n=s.deconstructPacket(t),r=l(n.packet),i=n.buffers;i.unshift(r),e(i)}))}(t,n):n([l(t)])},i(f.prototype),f.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return h("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var s="";"-"!==t.charAt(++n)&&(s+=t.charAt(n),n!=t.length););if(s!=Number(s)||"-"!==t.charAt(n))throw new Error("Illegal attachments");i.attachments=Number(s)}if("/"===t.charAt(n+1))for(i.nsp="";++n;){if(","===(u=t.charAt(n)))break;if(i.nsp+=u,n===t.length)break}else i.nsp="/";var a=t.charAt(n+1);if(""!==a&&Number(a)==a){for(i.id="";++n;){var u;if(null==(u=t.charAt(n))||Number(u)!=u){--n;break}if(i.id+=t.charAt(n),n===t.length)break}i.id=Number(i.id)}if(t.charAt(++n)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==c&&(i.type===e.ERROR||o(c))))return h("invalid payload");i.data=c}return r("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=s.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(54),i=n(55),s=n(56);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=p(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|h(e.length);return 0===(t=a(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):p(t,e);if("Buffer"===e.type&&s(e.data))return p(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=a(t,e<0?0:0|h(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function p(t,e){var n=e.length<0?0:0|h(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return x(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return U(t).length;default:if(r)return x(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return w(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return v(this,e,n);case"latin1":case"binary":return b(this,e,n);case"base64":return P(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function y(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function T(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:E(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):E(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function E(t,e,n,r,i){var s,o=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;o=2,a/=2,u/=2,n/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var l=-1;for(s=n;s<a;s++)if(c(t,s)===c(e,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*o}else-1!==l&&(s-=s-l),l=-1}else for(n+u>a&&(n=a-u),s=n;s>=0;s--){for(var f=!0,p=0;p<u;p++)if(c(t,s+p)!==c(e,p)){f=!1;break}if(f)return s}return-1}function m(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");r>s/2&&(r=s/2);for(var o=0;o<r;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[n+o]=a}return o}function S(t,e,n,r){return H(x(e,t.length-n),t,n,r)}function _(t,e,n,r){return H(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return _(t,e,n,r)}function O(t,e,n,r){return H(U(e),t,n,r)}function I(t,e,n,r){return H(function(t,e){for(var n,r,i,s=[],o=0;o<t.length&&!((e-=2)<0);++o)n=t.charCodeAt(o),r=n>>8,i=n%256,s.push(i),s.push(r);return s}(e,t.length-n),t,n,r)}function P(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var s,o,a,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(s=t[i+1]))&&(u=(31&c)<<6|63&s)>127&&(l=u);break;case 3:s=t[i+1],o=t[i+2],128==(192&s)&&128==(192&o)&&(u=(15&c)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=t[i+1],o=t[i+2],a=t[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=f}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,s=Math.min(n,r);i<s;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!s(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):g.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(r>>>=0),o=(n>>>=0)-(e>>>=0),a=Math.min(s,o),c=this.slice(r,i),l=t.slice(e,n),f=0;f<a;++f)if(c[f]!==l[f]){s=c[f],o=l[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return T(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return T(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return S(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return O(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,e,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function v(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function b(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function w(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",s=e;s<n;++s)i+=j(t[s]);return i}function R(t,e,n){for(var r=t.slice(e,n),i="",s=0;s<r.length;s+=2)i+=String.fromCharCode(r[s]+256*r[s+1]);return i}function D(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,n,r,i,s){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,s=Math.min(t.length-n,2);i<s;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function N(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,s=Math.min(t.length-n,4);i<s;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function k(t,e,n,r,i,s){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function F(t,e,n,r,s){return s||k(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function Y(t,e,n,r,s){return s||k(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var s=0;s<i;++s)n[s]=this[s+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,s=0;++s<e&&(i*=256);)r+=this[t+s]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||D(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||D(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||D(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||D(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||D(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,s=0;++s<e&&(i*=256);)r+=this[t+s]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=e,i=1,s=this[t+--r];r>0&&(i*=256);)s+=this[t+--r]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*e)),s},u.prototype.readInt8=function(t,e){return e||D(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||D(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||D(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||D(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||D(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,s=0;for(this[e]=255&t;++s<n&&(i*=256);)this[e+s]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,s=1;for(this[e+i]=255&t;--i>=0&&(s*=256);)this[e+i]=t/s&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):N(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var s=0,o=1,a=0;for(this[e]=255&t;++s<n&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var s=n-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):N(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):N(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return Y(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return Y(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,s=r-n;if(this===t&&n<e&&e<r)for(i=s-1;i>=0;--i)t[i+e]=this[i+n];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+s),e);return s},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var s;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(s=e;s<n;++s)this[s]=t;else{var o=u.isBuffer(t)?t:x(new u(t,r).toString()),a=o.length;for(s=0;s<n-e;++s)this[s+e]=o[s%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function x(t,e){var n;e=e||1/0;for(var r=t.length,i=null,s=[],o=0;o<r;++o){if((n=t.charCodeAt(o))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===r){(e-=3)>-1&&s.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&s.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&s.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;s.push(n)}else if(n<2048){if((e-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function U(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function H(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(26))},function(t,e,n){var r=n(59),i=n(19);t.exports=function(t){var e=t.xdomain,n=t.xscheme,s=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&s)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e){t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(t,e,n){var r=n(2),i=n(1);function s(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=s,i(s.prototype),s.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},s.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},s.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},s.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},s.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},s.prototype.onData=function(t){var e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)},s.prototype.onPacket=function(t){this.emit("packet",t)},s.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){"use strict";(function(t,r){var i,s=n(45);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var o=Object(s.a)(i);e.a=o}).call(this,n(26),n(83)(t))},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,i=t.indexOf("["),s=t.indexOf("]");-1!=i&&-1!=s&&(t=t.substring(0,i)+t.substring(i,s).replace(/:/g,";")+t.substring(s,t.length));for(var o=n.exec(t||""),a={},u=14;u--;)a[r[u]]=o[u]||"";return-1!=i&&-1!=s&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var n=1e3,r=6e4,i=60*r,s=24*i;function o(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var a=typeof t;if("string"===a&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*r;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===a&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=s)return o(t,e,s,"day");if(e>=i)return o(t,e,i,"hour");if(e>=r)return o(t,e,r,"minute");if(e>=n)return o(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=s)return Math.round(t/s)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||r&&(t instanceof ArrayBuffer||function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,r="function"==typeof ArrayBuffer}).call(this,n(17).Buffer)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(57),i=n(33),s=n(1),o=n(16),a=n(34),u=n(35),c=n(9)("socket.io-client:manager"),l=n(32),f=n(73),p=Object.prototype.hasOwnProperty;function h(t,e){if(!(this instanceof h))return new h(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||o;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=h,h.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},h.prototype.updateSocketIds=function(){for(var t in this.nsps)p.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},h.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},s(h.prototype),h.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},h.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},h.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},h.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},h.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},h.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},h.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},h.prototype.open=h.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var s=a(n,"open",(function(){i.onopen(),t&&t()})),o=a(n,"error",(function(e){if(c("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout((function(){c("connect attempt timed out after %d",u),s.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",u)}),u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(s),this.subs.push(o),this},h.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},h.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},h.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},h.prototype.ondata=function(t){this.decoder.add(t)},h.prototype.ondecoded=function(t){this.emit("packet",t)},h.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},h.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new i(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",s),n.on("connect",(function(){n.id=r.generateId(t)})),this.autoConnect&&s()}function s(){~l(r.connecting,n)||r.connecting.push(n)}return n},h.prototype.destroy=function(t){var e=l(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},h.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()})))},h.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},h.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},h.prototype.close=h.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},h.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},h.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout((function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}},h.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var r=n(18),i=n(60),s=n(69),o=n(70);e.polling=function(t){var e=!1,n=!1,o=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new i(t);if(!o)throw new Error("JSONP disabled");return new s(t)},e.websocket=o},function(t,e,n){var r=n(20),i=n(10),s=n(2),o=n(11),a=n(31),u=n(12)("engine.io-client:polling");t.exports=l;var c=null!=new(n(18))({xdomain:!1}).responseType;function l(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),r.call(this,t)}o(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(t){var e=this;function n(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",(function(){u("pre-pause polling complete"),--r||n()}))),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",(function(){u("pre-pause writing complete"),--r||n()})))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(t){var e=this;u("polling got data %s",t);s.decodePayload(t,this.socket.binaryType,(function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},l.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,n)}))},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var r=n(62),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var i=0,a=n.length;i<a;i++)if(t(n[i]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||s&&n instanceof Blob||o&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&t(n[u]))return!0;return!1}}).call(this,n(17).Buffer)},function(t,e,n){"use strict";var r,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),s={},o=0,a=0;function u(t){var e="";do{e=i[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function c(){var t=u(+new Date);return t!==r?(o=0,r=t):t+"."+u(o++)}for(;a<64;a++)s[i[a]]=a;c.encode=u,c.decode=function(t){var e=0;for(a=0;a<t.length;a++)e=64*e+s[t.charAt(a)];return e},t.exports=c},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(16),i=n(1),s=n(72),o=n(34),a=n(35),u=n(9)("socket.io-client:socket"),c=n(10),l=n(30);t.exports=h;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=i.prototype.emit;function h(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}i(h.prototype),h.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[o(t,"open",a(this,"onopen")),o(t,"packet",a(this,"onpacket")),o(t,"close",a(this,"onclose"))]}},h.prototype.open=h.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},h.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},h.prototype.emit=function(t){if(f.hasOwnProperty(t))return p.apply(this,arguments),this;var e=s(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(e))?r.BINARY_EVENT:r.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},h.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},h.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:r.CONNECT,query:t})}else this.packet({type:r.CONNECT})},h.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},h.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===r.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(t);break;case r.ACK:case r.BINARY_ACK:this.onack(t);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",t.data)}},h.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?p.apply(this,e):this.receiveBuffer.push(e)},h.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var i=s(arguments);u("sending ack %j",i),e.packet({type:l(i)?r.BINARY_ACK:r.ACK,id:t,data:i})}}},h.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},h.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},h.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)p.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},h.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},h.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},h.prototype.close=h.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},h.prototype.compress=function(t){return this.flags.compress=t,this},h.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3)),s=r(n(37)),{SUB_DOMAINS:o,DEVELOPMENT:a}=i.default,{domain:u}=s.default,c="object"==typeof location;s.default.mediaSecondInterval=200,s.default.screenMode={small:600,middle:960},s.default.protcol=c?0===location.href.indexOf("https")?"https":"http":"",s.default.server=u,s.default.portalPath=(s.default.env,`//${o.PORTAL}.${u}/`),s.default.clientPath=`//${o.CLIENT}.${u}/`,s.default.assetsPath=`//${o.ASSETS}.${u}/`,s.default.sessionPath=`//${o.SESSION}.${u}/`,s.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"},e.default=s.default},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3)),s=r(n(74)),o=r(n(7)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_IP:c,LOCALHOST:l,PRODUCTION_DOMAIN:f,DEVELOPMENT_DOMAIN:p,SUB_DOMAINS:h,PORTS:d}=i.default,g=s.default.hostname(),y=function(t){if(t===i.default.PRODUCTION_IP||t.indexOf(i.default.PRODUCTION_DOMAIN)>=0)return i.default.PRODUCTION;if("browser"===o.default.title){const t=Number(location.port);if(t===i.default.PORTS.DEVELOPMENT||t===i.default.PORTS.DEVELOPMENT_API)return i.default.DEVELOPMENT}return i.default.LOCALHOST}(g),T=y===u,E=y===a?f:p,m=`${h.WWW}.${E}`,S=`${h.API}.${E}`,_=T?`${l}:${d.DEVELOPMENT_API}/talkn.api.js`:S+"/v1",C=T?`${l}:${d.DEVELOPMENT}/talkn.client.js`:`${h.CLIENT}.${E}`,O=`${h.DESC}.${E}`,I=`${h.PORTAL}.${E}`,P=`${h.ASSETS}.${E}`,A=P+"/img/",v={domain:E,env:y,hostName:g,apiURL:S,apiAccessURL:_,wwwURL:m,descURL:O,portalURL:I,clientURL:C,assetsURL:P,autoURL:`${h.AUTO}.${E}`,extURL:`${h.EXT}.${E}`,transactionURL:`${h.TRANSACTION}.${E}`,assetsImgPath:A,assetsIconPath:P+"/icon/",assetsJsPath:P+"/js/",sessionURL:`${h.SESSION}.${E}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${A}talkn_logo_html.png`,Music:`//${A}talkn_logo_music.png`,Video:`//${A}talkn_logo_video.png`}};e.default=Object.assign({},v)},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{static get defaultFindId(){return"000000000000000000000000"}constructor(t={}){return super(),this.create({})}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0)),s=r(n(38));class o extends i.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",n=t&&t.utype?t.utype:"",r=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,u=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,c=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,l=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,f=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;t.requestLoginType&&t.requestLoginType;return this.create({uid:e,utype:n,tuned:r,multistreamed:i,actioned:s,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:l,offsetLogsFindId:f,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href?window.location.href:t&&t.href?t.href:"/"}}e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){super();return this.create({watchCnt:0})}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){return super(),this.create(Object.assign({},t))}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(n=>{e[t[n].name]=t[n].value}),e}}e.default=s},function(t,e,n){"use strict";n.r(e),n.d(e,"__DO_NOT_USE__ActionTypes",(function(){return s})),n.d(e,"applyMiddleware",(function(){return y})),n.d(e,"bindActionCreators",(function(){return f})),n.d(e,"combineReducers",(function(){return c})),n.d(e,"compose",(function(){return g})),n.d(e,"createStore",(function(){return a}));var r=n(21),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},s={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function o(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function a(t,e,n){var i;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(a)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var u=t,c=e,l=[],f=l,p=!1;function h(){f===l&&(f=l.slice())}function d(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function g(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return h(),f.push(t),function(){if(e){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,h();var n=f.indexOf(t);f.splice(n,1),l=null}}}function y(t){if(!o(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=u(c,t)}finally{p=!1}for(var e=l=f,n=0;n<e.length;n++){(0,e[n])()}return t}function T(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");u=t,y({type:s.REPLACE})}function E(){var t,e=g;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(d())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t}return y({type:s.INIT}),(i={dispatch:y,subscribe:g,getState:d,replaceReducer:T})[r.a]=E,i}function u(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];0,"function"==typeof t[i]&&(n[i]=t[i])}var o,a=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:s.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:s.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+s.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var r=!1,i={},s=0;s<a.length;s++){var c=a[s],l=n[c],f=t[c],p=l(f,e);if(void 0===p){var h=u(c,e);throw new Error(h)}i[c]=p,r=r||p!==f}return(r=r||a.length!==Object.keys(t).length)?i:t}}function l(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return l(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in t){var i=t[r];"function"==typeof i&&(n[r]=l(i,e))}return n}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function h(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n}function d(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?h(n,!0).forEach((function(e){p(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):h(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function g(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function y(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},s=e.map((function(t){return t(i)}));return d({},n,{dispatch:r=g.apply(void 0,s)(n.dispatch)})}}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]=Object.assign({},e),t}}e.default=s},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(47)),s=r(n(36)),o=r(n(3)),a=r(n(75)),u=r(n(76)),c=r(n(8)),l=r(n(81)),f=r(n(82)),p=r(n(109)),h=r(n(110)),d=r(n(111)),g=r(n(116)),y=r(n(5)),T=r(n(117)),E=r(n(13)),m=r(n(14));class S{constructor(){const{env:t,apiScript:e}=S.getEnvAndApiScript(),n=S.getClientScript(),r=S.getExtScript(),i=e?S.rebuildAttributes(e.attributes):{},s=r?S.rebuildAttributes(r.attributes):{},o=Object.assign(Object.assign({},s),i),a=S.initialBootOption(o,n,r);return a.env=t,a}static getEnvAndApiScript(){const{SUB_DOMAINS:t,PORTS:e}=o.default,n=`${c.default.HTTPS_PROTOCOL}//${t.API}.${o.default.PRODUCTION_DOMAIN}/v${s.default.apiVer}`,r=document.querySelector(`script[src='${n}']`);if(r)return{env:o.default.PRODUCTION,apiScript:r};const i=`${c.default.HTTPS_PROTOCOL}//${t.API}.${o.default.DEVELOPMENT_DOMAIN}/v${s.default.apiVer}`,a=document.querySelector(`script[src='${i}']`);if(a)return{env:o.default.LOCALHOST,apiScript:a};const u=`${c.default.HTTPS_PROTOCOL}//${o.default.DEVELOPMENT_DOMAIN}:${e.DEVELOPMENT_API}/talkn.api.js`,l=document.querySelector(`script[src='${u}']`);return l?{env:o.default.DEVELOPMENT,apiScript:l}:void 0}static getClientScript(){const t=document.querySelector(`script[src='${c.default.HTTPS_PROTOCOL}//${s.default.clientURL}']`);if(t)return t;const e=document.querySelector(`script[src='//${s.default.clientURL}']`);if(e)return e;const n=document.querySelector(`script[src='https://${o.default.DEVELOPMENT_DOMAIN}:8080/talkn.client.js']`);return n||void 0}static getExtScript(){const t=document.querySelector(`script[src='${c.default.HTTPS_PROTOCOL}//${s.default.extURL}']`),e=document.querySelector(`script[src='//${s.default.extURL}']`);return t||e}static rebuildAttributes(t){let e={};return Object.keys(t).forEach(n=>{e[t[n].name]=t[n].value}),e}static initialBootOption(t,e,n){return t.ch=t.ch?t.ch:location.href.replace(`${c.default.HTTPS_PROTOCOL}//${s.default.domain}`,"").replace(":"+o.default.PORTS.DEVELOPMENT,"").replace(o.default.DEVELOPMENT_DOMAIN+"/","").replace(":"+o.default.PORTS.DEVELOPMENT_API,"").replace(c.default.HTTPS_PROTOCOL+"/","").replace(c.default.HTTP_PROTOCOL+"/",""),s.default.env===o.default.DEVELOPMENT&&(t.ch=t.ch.replace(`/${o.default.LOCALHOST}:${o.default.PORTS.DEVELOPMENT}`,"")),t.hasSlash=S.getHasSlach(t),"/"!==t.ch&&(t.hasSlash?t.ch=t.ch:t.ch=t.ch+"/"),t.type=o.default.APP_TYPES.API,n&&(t.type=o.default.APP_TYPES.EXTENSION),e&&(t.type=o.default.APP_TYPES.PORTAL),delete t.src,delete t.async,t}static getHasSlach({ch:t}){return t.lastIndexOf("/")===t.length-1}}class _{constructor(t,e,n){this.callbacks={};const r=t===o.default.DEVELOPMENT||t===o.default.LOCALHOST?o.default.DEVELOPMENT_DOMAIN:o.default.PRODUCTION_DOMAIN;this.apiStore=e,this.ws=i.default(`${c.default.HTTPS_PROTOCOL}//${r}:${o.default.PORTS.SOCKET_IO}`,{forceNew:!0}),this.onResponseMeAPI(n),this.setUp=this.setUp.bind(this)}setUp(t,e){this.state=t,this.ch=e,this.onResponseChAPI(),this.onRequestAPI()}onRequestAPI(){const t=d.default,e=Object.keys(t),n=e.length,r=(t,e)=>(n,r=(()=>{}))=>{const i=this.apiStore.getState(),s=c.default.getRequestState(t,i,n),o=c.default.getRequestActionState(t,n),{requestState:a,actionState:u}=e(i,s,o);return this.callbacks[a.type]=r,this.ws.emit(a.type,a),this.apiStore.dispatch(u)};for(let i=0;i<n;i++){const n=e[i],s=n.replace(c.default.API_TO_SERVER_REQUEST,""),o=t[n];this[s]=r(n,o)}}onResponseMeAPI(t=null){const e=((t,e=null)=>{const n=this;return r=>{e&&r.type===c.default.CONNECTION_SERVER_KEY&&e(n);const i=t(r);return this.apiStore.dispatch(i)}})(h.default,t);this.on(c.default.CATCH_ME_KEY,e)}onResponseChAPI(t=this.ch){const e=(t=>e=>{const n=t(e);return this.apiStore.dispatch(n)})(g.default);this.on(t,e)}offResponseChAPI(t=this.ch){this.off(t)}on(t,e=(()=>{})){this.ws._callbacks["$"+t]||this.ws.on(t,e)}off(t){this.ws._callbacks["$"+t]&&this.ws.off(t)}}class C{constructor(){this.apiStore=f.default(),this.bootOption=new S,this.exeCoreApi=this.exeCoreApi.bind(this),this.clientTo=this.clientTo.bind(this),this.subscribe=this.subscribe.bind(this),this.onWsServer=this.onWsServer.bind(this),this.exeCallback=this.exeCallback.bind(this),this.afterMediaFilter=this.afterMediaFilter.bind(this),this.apiStore.subscribe(this.subscribe),this.onActions();const t=[],e=this;t.push(new Promise(t=>{window.onmessage=n=>{switch(t&&(e.origin=n.origin,t()),n.data.type){case a.default.CLIENT_TO_API_TYPE:n.data.method===a.default.HANDLE_API_AND_CLIENT?clearInterval(e.bootId):e.exeCoreApi(n);break;case a.default.HANDLE_EXT_AND_API:break;case a.default.EXT_TO_API_TYPE:e.exeCoreApi(n)}}})),t.push(new Promise(t=>{"complete"===document.readyState?new _(this.bootOption.env,e.apiStore,t):window.onload=n=>{new _(this.bootOption.env,e.apiStore,t)}}).then(this.onWsServer)),Promise.all(t).then(t=>{this.bootId=setInterval(()=>{this.clientTo(a.default.HANDLE_API_AND_CLIENT,this.bootOption)},200)})}static getRequestObj(t,e={}){const n=location.href;return{windowType:window.name,type:a.default.API_TO_CLIENT_TYPE,href:n,method:t,params:e}}exeCoreApi(t){if(this.coreApi&&this.coreApi[t.data.method]){const{method:e,params:n}=t.data,r=this.apiStore.getState();this.beforeMediaFilter({method:e,params:n,apiState:r}),this.coreApi[e](n)}}onWsServer(t){this.coreApi=t;const e=new u.default(window,this.bootOption);this.coreApi.setUp(e,this.bootOption.ch),this.bootOption.type!==o.default.APP_TYPES.API&&this.coreApi.tune(e),window.$t=new l.default(this.coreApi)}onActions(){const t=Object.keys(p.default),e=t.length,n=t=>(e,n)=>{const r=p.default[t](e);this.apiStore.getState();return this.apiStore.dispatch(r)};for(let r=0;r<e;r++){const e=t[r];this[e]=n(e)}}subscribe(){if(this.coreApi){const t=this.apiStore.getState();this.afterMediaFilter(t),this.exeCallback(t.app.actioned,t),this.clientTo(t.app.actioned,t)}}exeCallback(t,e){const{actionType:n,actionName:r}=c.default.getSequenceActionMap(t);if(r!==c.default.API_BROADCAST_CALLBACK&&n===c.default.API_RESPONSE_TYPE_EMIT&&this.coreApi.callbacks[r]){const{posts:t,thread:n,user:i}=e;this.coreApi.callbacks[r](e,{posts:t,thread:n,uid:i.uid})}if(n===c.default.API_RESPONSE_TYPE_BROADCAST&&this.coreApi.callbacks[c.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:n,user:i}=e;this.coreApi.callbacks[c.default.API_BROADCAST_CALLBACK](r,{posts:t,thread:n,uid:i.uid})}}beforeMediaFilter({method:t,params:e,apiState:n}){return n.app.isMediaCh&&"post"===t&&(e.app.inputCurrentTime=this.media.currentTime>0?this.media.currentTime:0),e}afterMediaFilter(t){switch(t.app.actioned){case"SERVER_TO_API[EMIT]:fetchPosts":t.app.isMediaCh&&this.media&&"finding"===this.media.status&&this.media.ch===t.thread.ch?(this.media.setPostsTimelines(t),this.media.playing()):(this.media=new O(this),this.media.searching());break;case"SERVER_TO_API[BROADCAST]:post":if(t.app.isMediaCh){const e=t.posts[0];e.ch===this.media.ch&&e.uid===t.user.uid&&this.media.refrectSelfPost(e)}}}clientTo(t,e={}){const n=C.getRequestObj(t,e);if(this.bootOption.type===o.default.APP_TYPES.PORTAL)window.postMessage(n,this.bootOption.clientHref);else{const t=document.querySelector("iframe#talknExtension");t&&t.contentWindow.postMessage(n,t.src)}}}class O{constructor(t){this.maxSearchingCnt=30,this.status="shutdown",this.isLog=!1,this.globalWindow=t,this.ch=t.apiStore.getState().thread.ch,this.searchingCnt=0,this.playingCnt=0,this.pointerTime=0,this.started=!1,this.isPosting=!1,clearInterval(this.searchingId),clearInterval(this.playIntervalId),this.postsTimeline=[],this.postsTimelineStock=[],this.setPostsTimelines=this.setPostsTimelines.bind(this),this.refrectSelfPost=this.refrectSelfPost.bind(this),this.searching=this.searching.bind(this),this.handleEvents=this.handleEvents.bind(this),this.posting=this.posting.bind(this),this.apiTo=this.apiTo.bind(this),this.log=this.log.bind(this)}static get mediaSecondInterval(){return 200}static getMedia(t){const e=y.default.getMediaSrc(t),n=y.default.getMediaTagType(t);return document.querySelector(`${n}[src='${e}']`)}static getRequestObj(t,e={}){return{windowType:window.name,type:a.default.MEDIA_TO_CLIENT_TYPE,method:t,params:e}}setStatus(t){this.status=t,this.log("SET STATUS")}setPostsTimelines({postsTimeline:t,postsTimelineStock:e}){this.postsTimeline=[...t],this.postsTimelineStock=[...e],this.log("INIT TIMELINES")}refrectSelfPost(t){const e=this.postsTimeline.length;let n=!1;for(let r=0;r<e;r++)t.currentTime<this.postsTimeline[r].currentTime&&(n=!0,this.postsTimeline.splice(r,0,t));n||this.postsTimeline.push(t)}get currentTime(){return this.file?Math.floor(10*this.file.currentTime)/10:0}searching(t=O.mediaSecondInterval){this.setStatus("searching"),this.searchingCnt=0,this.searchingId=null,this.waitingId=null,this.playIntervalId=null,this.searchingId=setInterval(()=>{if(this.searchingCnt<this.maxSearchingCnt){const t=document.querySelectorAll("video"),e=document.querySelectorAll("audio");t.forEach(this.handleEvents),e.forEach(this.handleEvents),t.length>0||e.length>0?(this.setStatus("waiting"),clearInterval(this.searchingId),clearInterval(this.playIntervalId)):this.searchingCnt++}else clearInterval(this.searchingId),clearInterval(this.playIntervalId),this.searching(10*O.mediaSecondInterval)},t)}handleEvents(t){t.addEventListener("play",t=>{this.file=t.srcElement;const e=T.default.deleteProtcol(this.file.currentSrc)+"/";this.ch===e?(0===this.playingCnt&&this.setPostsTimelines(this.globalWindow.apiStore.getState()),this.playing()):(this.setStatus("finding"),this.ch=e,this.globalWindow.coreApi.onResponseChAPI(this.ch),this.globalWindow.coreApi.changeThread({thread:{ch:this.ch}}))}),t.addEventListener("seeked",t=>{this.setStatus("seeking")}),t.addEventListener("pause",t=>{this.setStatus("waiting")}),t.addEventListener("ended",t=>{this.setStatus("waiting"),clearInterval(this.playIntervalId);const e=Number.MAX_SAFE_INTEGER,n=this.postsTimelineStock.length;for(let t=0;t<n&&(this.postsTimelineStock[t]&&this.postsTimelineStock[t].currentTime<=e);t++)this.apiTo("NEXT_POSTS_TIMELINE",{postsTimeline:[this.postsTimelineStock[t]]});this.setStatus("waiting")})}playing(){this.setStatus("playing"),clearInterval(this.playIntervalId),this.playIntervalId=setInterval(()=>{this.posting(this.currentTime)},s.default.mediaSecondInterval)}posting(t=0){if(this.isPosting)return;const e=this.postsTimelineStock.length;if(this.playingCnt++,this.isPosting=!0,this.pointerTime<=t)for(this.pointerTime=t;this.isPosting;)if(0===e)this.isPosting=!1;else{if(!(this.postsTimelineStock[0]&&this.postsTimelineStock[0].currentTime<=t)){this.isPosting=!1;break}{const t=this.postsTimelineStock.shift();this.apiTo("NEXT_POSTS_TIMELINE",{postsTimeline:[t]}),this.log("POSTING")}}else{this.file.pause();const t=this.globalWindow.apiStore.getState().postsTimeline.concat(this.postsTimelineStock),e=t.length;this.pointerTime=this.currentTime,this.postsTimeline=new E.default,this.postsTimelineStock=new m.default;for(let n=0;n<e;n++){const e=t[n];e.currentTime<=this.pointerTime?this.postsTimeline.push(e):this.postsTimelineStock.push(e)}this.apiTo("CLEAR_POSTS_TIMELINE",{postsTimeline:this.postsTimeline,postsTimelineStock:this.postsTimelineStock}),this.isPosting=!1,this.file.play()}}apiTo(t,e={}){this.globalWindow.apiStore.dispatch(Object.assign({type:t},e))}log(t,e=!1){(this.isLog||e)&&(console.log(`@@@@@@@@@@@ ${t} ${this.status} CH ${this.ch} ${this.pointerTime} @@@`),console.log(`postsTimeline: ${this.postsTimeline.length} postsTimelineStock: ${this.postsTimelineStock.length}`),console.log(this.postsTimeline),console.log(this.postsTimelineStock))}}e.Media=O;new C},function(t,e,n){var r=n(48),i=n(16),s=n(27),o=n(9)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,i=r(t),u=i.source,c=i.id,l=i.path,f=a[c]&&l in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||f?(o("ignoring socket cache for %s",u),n=s(u,e)):(a[c]||(o("new io instance for %s",u),a[c]=s(u,e)),n=a[c]),i.query&&!e.query&&(e.query=i.query),n.socket(i.path,e)}e.protocol=i.protocol,e.connect=u,e.Manager=n(27),e.Socket=n(33)},function(t,e,n){var r=n(22),i=n(9)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var s=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+s+":"+n.port,n.href=n.protocol+"://"+s+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(n||i);e.diff=s,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const s=r.formatters[i];if("function"==typeof s){const r=t[a];n=s.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return o.namespace=t,o.enabled=r.enabled(t),o.useColors=r.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function s(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(o),...r.skips.map(o).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(23),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){(function(r){function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(51)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var i=0,s=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(s=i))})),t.splice(s,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,n(7))},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,i=+new Date,s=i-(n||i);t.diff=s,t.prev=n,t.curr=i,n=i;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var u=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,(function(n,r){if("%%"===n)return n;u++;var i=e.formatters[r];if("function"==typeof i){var s=o[u];n=i.call(t,s),o.splice(u,1),u--}return n})),e.formatArgs.call(t,o);var c=r.log||e.log||console.log.bind(console);c.apply(t,o)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=i,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function i(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var s=e.instances[n];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(52),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=6e4,i=60*r,s=24*i;function o(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var a,u=typeof t;if("string"===u&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var o=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"days":case"day":case"d":return o*s;case"hours":case"hour":case"hrs":case"hr":case"h":return o*i;case"minutes":case"minute":case"mins":case"min":case"m":return o*r;case"seconds":case"second":case"secs":case"sec":case"s":return o*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}(t);if("number"===u&&!1===isNaN(t))return e.long?o(a=t,s,"day")||o(a,i,"hour")||o(a,r,"minute")||o(a,n,"second")||a+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(24),i=n(25),s=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,s=t;return s.data=function t(e,n){if(!e)return e;if(i(e)){var s={_placeholder:!0,num:n.length};return n.push(e),s}if(r(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=t(e[a],n);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var u in e)o[u]=t(e[u],n);return o}return e}(n,e),s.attachments=e.length,{packet:s,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(r(e))for(var i=0;i<e.length;i++)e[i]=t(e[i],n);else if("object"==typeof e)for(var s in e)e[s]=t(e[s],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,s=t;!function t(u,c,l){if(!u)return u;if(o&&u instanceof Blob||a&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:s=this.result,--n||e(s)},f.readAsArrayBuffer(u)}else if(r(u))for(var p=0;p<u.length;p++)t(u[p],p,u);else if("object"==typeof u&&!i(u))for(var h in u)t(u[h],h,u)}(s),n||e(s)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),o=r[0],a=r[1],u=new s(function(t,e,n){return 3*(e+n)/4-n}(0,o,a)),l=0,f=a>0?o-4:o;for(n=0;n<f;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===a&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,s=[],o=0,a=n-i;o<a;o+=16383)s.push(l(t,o,o+16383>a?a:o+16383));1===i?(e=t[n-1],s.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],s.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return s.join("")};for(var r=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=o.length;a<u;++a)r[a]=o[a],i[o.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var i,s,o=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var s,o,a=8*i-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?i-1:0,p=n?-1:1,h=t[e+f];for(f+=p,s=h&(1<<-l)-1,h>>=-l,l+=a;l>0;s=256*s+t[e+f],f+=p,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=r;l>0;o=256*o+t[e+f],f+=p,l-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(h?-1:1);o+=Math.pow(2,r),s-=c}return(h?-1:1)*o*Math.pow(2,s-r)},e.write=function(t,e,n,r,i,s){var o,a,u,c=8*s-i-1,l=(1<<c)-1,f=l>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:s-1,d=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=l?(a=0,o=l):o+f>=1?(a=(e*u-1)*Math.pow(2,i),o+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),o=0));i>=8;t[n+h]=255&a,h+=d,a/=256,i-=8);for(o=o<<i|a,c+=i;c>0;t[n+h]=255&o,h+=d,o/=256,c-=8);t[n+h-d]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(58),t.exports.parser=n(2)},function(t,e,n){var r=n(28),i=n(1),s=n(12)("engine.io-client:socket"),o=n(32),a=n(2),u=n(22),c=n(10);function l(t,e){if(!(this instanceof l))return new l(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=l,l.priorWebsocketSuccess=!1,i(l.prototype),l.protocol=a.protocol,l.Socket=l,l.Transport=n(20),l.transports=n(28),l.parser=n(2),l.prototype.createTransport=function(t){s('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new r[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},l.prototype.open=function(){var t;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},l.prototype.setTransport=function(t){s("setting transport %s",t.name);var e=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},l.prototype.probe=function(t){s('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function i(){if(r.onlyBinaryUpgrades){var i=!this.supportsBinary&&r.transport.supportsBinary;n=n||i}n||(s('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(s('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,s('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(s("changing transport and sending upgrade packet"),p(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{s('probe transport "%s" failed',t);var o=new Error("probe error");o.transport=e.name,r.emit("upgradeError",o)}})))}function o(){n||(n=!0,p(),e.close(),e=null)}function a(n){var i=new Error("probe error: "+n);i.transport=e.name,o(),s('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",i)}function u(){a("transport closed")}function c(){a("socket closed")}function f(t){e&&t.name!==e.name&&(s('"%s" works - aborting "%s"',t.name,e.name),o())}function p(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",f),e.open()},l.prototype.onOpen=function(){if(s("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){s("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},l.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else s('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},l.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){s("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},l.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},l.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var i={type:t,data:e,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()}function e(){t.onClose("forced close"),s("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},l.prototype.onError=function(t){s("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},l.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~o(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var r=n(18),i=n(29),s=n(1),o=n(11),a=n(12)("engine.io-client:polling-xhr"),u=n(19);function c(){}function l(t){if(i.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function f(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=l,t.exports.Request=f,o(l,i),l.prototype.supportsBinary=!0,l.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new f(t)},l.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),i=this;r.on("success",e),r.on("error",(function(t){i.onError("xhr post error",t)})),this.sendXhr=r},l.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},s(f.prototype),f.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new r(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&e.setRequestHeader(i,this.extraHeaders[i])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof e.status?e.status:0)}),0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){n.onError(t)}),0)}"undefined"!=typeof document&&(this.index=f.requestsCount++,f.requests[this.index]=this)},f.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},f.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},f.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},f.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete f.requests[this.index],this.xhr=null}},f.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},f.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},f.prototype.abort=function(){this.cleanup()},f.requestsCount=0,f.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",p);else if("function"==typeof addEventListener){addEventListener("onpagehide"in u?"pagehide":"unload",p,!1)}function p(){for(var t in f.requests)f.requests.hasOwnProperty(t)&&f.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var i=new Uint8Array(t),s=new Uint8Array(n-e),o=e,a=0;o<n;o++,a++)s[a]=i[o];return s.buffer}},function(t,e){function n(){}t.exports=function(t,e,r){var i=!1;return r=r||n,s.count=t,0===t?e():s;function s(t,n){if(s.count<=0)throw new Error("after called too many times");--s.count,t?(i=!0,e(t),e=r):0!==s.count||i||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,i,s=String.fromCharCode;function o(t){for(var e,n,r=[],i=0,s=t.length;i<s;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<s?56320==(64512&(n=t.charCodeAt(i++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),i--):r.push(e);return r}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return s(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return s(t);var n="";return 0==(4294965248&t)?n=s(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=s(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=s(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=s(63&t|128)}function l(){if(i>=r)throw Error("Invalid byte index");var t=255&n[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(t){var e,s;if(i>r)throw Error("Invalid byte index");if(i==r)return!1;if(e=255&n[i],i++,0==(128&e))return e;if(192==(224&e)){if((s=(31&e)<<6|l())>=128)return s;throw Error("Invalid continuation byte")}if(224==(240&e)){if((s=(15&e)<<12|l()<<6|l())>=2048)return a(s,t)?s:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(s=(7&e)<<18|l()<<12|l()<<6|l())>=65536&&s<=1114111)return s;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=o(t),i=r.length,s=-1,a="";++s<i;)a+=c(r[s],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=o(t),r=n.length,i=0;for(var u,c=[];!1!==(u=f(a));)c.push(u);return function(t){for(var e,n=t.length,r=-1,i="";++r<n;)(e=t[r])>65535&&(i+=s((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=s(e);return i}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),i=r.length,s="";for(n=0;n<i;n+=3)s+=t[r[n]>>2],s+=t[(3&r[n])<<4|r[n+1]>>4],s+=t[(15&r[n+1])<<2|r[n+2]>>6],s+=t[63&r[n+2]];return i%3==2?s=s.substring(0,s.length-1)+"=":i%3==1&&(s=s.substring(0,s.length-2)+"=="),s},e.decode=function(t){var e,r,i,s,o,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),f=new Uint8Array(l);for(e=0;e<u;e+=4)r=n[t.charCodeAt(e)],i=n[t.charCodeAt(e+1)],s=n[t.charCodeAt(e+2)],o=n[t.charCodeAt(e+3)],f[c++]=r<<2|i>>4,f[c++]=(15&i)<<4|s>>2,f[c++]=(3&s)<<6|63&o;return l}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),i=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),s=n&&n.prototype.append&&n.prototype.getBlob;function o(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t}))}function a(t,e){e=e||{};var r=new n;return o(t).forEach((function(t){r.append(t)})),e.type?r.getBlob(e.type):r.getBlob()}function u(t,e){return new Blob(o(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=r?i?Blob:u:s?a:void 0},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function o(...t){if(!o.enabled)return;const e=o,i=Number(new Date),s=i-(n||i);e.diff=s,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const s=r.formatters[i];if("function"==typeof s){const r=t[a];n=s.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return o.namespace=t,o.enabled=r.enabled(t),o.useColors=r.useColors(),o.color=e(t),o.destroy=i,o.extend=s,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function s(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(o),...r.skips.map(o).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(23),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){var r=n(29),i=n(11),s=n(19);t.exports=l;var o,a=/\n/g,u=/\\n/g;function c(){}function l(t){r.call(this,t),this.query=this.query||{},o||(o=s.___eio=s.___eio||[]),this.index=o.length;var e=this;o.push((function(t){e.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.script&&(e.script.onerror=c)}),!1)}i(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},l.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,i=document.createElement("form"),s=document.createElement("textarea"),o=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=o,i.method="POST",i.setAttribute("accept-charset","utf-8"),s.name="d",i.appendChild(s),document.body.appendChild(i),this.form=i,this.area=s}function c(){l(),e()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),t=t.replace(u,"\\\n"),this.area.value=t.replace(a,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}},function(t,e,n){(function(e){var r,i,s=n(20),o=n(2),a=n(10),u=n(11),c=n(31),l=n(12)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{i=n(71)}catch(t){}var f=r||i;function p(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=r&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(f=i),s.call(this,t)}t.exports=p,u(p,s),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new f(t,e):new f(t):new f(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},p.prototype.write=function(t){var n=this;this.writable=!1;for(var r=t.length,i=0,s=r;i<s;i++)!function(t){o.encodePacket(t,n.supportsBinary,(function(i){if(!n.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),n.perMessageDeflate)("string"==typeof i?e.byteLength(i):i.length)<n.perMessageDeflate.threshold&&(s.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,s)}catch(t){l("websocket closed before onclose event")}--r||a()}))}(t[i]);function a(){n.emit("flush"),setTimeout((function(){n.writable=!0,n.emit("drain")}),0)}},p.prototype.onClose=function(){s.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(17).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e){e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\n",e.homedir=function(){return"/"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"bootApi"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"bootExtension"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(4)),s=r(n(39)),o=r(n(77)),a=r(n(78)),u=r(n(6)),c=r(n(13)),l=r(n(14)),f=r(n(41)),p=r(n(42)),h=r(n(5)),d=r(n(80));class g{constructor(t,e={},n={}){this.rank=new o.default,this.menuLogs=new a.default(n.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new l.default,this.postsLogs=new u.default,this.analyze=new f.default,this.bootOption=new p.default(e),this.thread=new h.default(t,this.bootOption,n.thread),this.threadDetail=new h.default(t,this.bootOption,n.thread),this.app=new i.default(g.getAppParams(this.thread,this.bootOption,n)),this.user=new s.default(g.getUserParams(this,n)),this.actionLog=new d.default}static getAppParams(t,e,n){return Object.assign(Object.assign({isTransition:!0,rootTitle:t.title},e),t)}static getUserParams(t,e){if(e&&e.user&&e.user.uid)return Object.assign({},e.user);return{dispThreadType:t.thread.ch===t.app.rootCh?i.default.dispThreadTypeMulti:i.default.dispThreadTypeSingle}}get appName(){return this.app.name}get talknIndex(){return this.app.talknIndex}get ch(){return this.thread.ch}}e.default=g},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t=[]){return super(),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(){return[]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t){return{ver:"2020/06/04",tune:(e,n)=>t.tune({thread:{ch:e}},n),rank:(e,n)=>t.rank({thread:{ch:e}},n),fetchPosts:(e,n)=>t.fetchPosts({thread:{ch:e}},n),post:(e={},n)=>t.post(e,n),getState:()=>t.apiStore.getState()}}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(43),s=r(n(84)),o=r(n(106));e.default=function(t={}){let e=[o.default.updateAction];return i.createStore(s.default,t,i.applyMiddleware(...e))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(43),s=r(n(85)),o=r(n(86)),a=r(n(87)),u=r(n(88)),c=r(n(89)),l=r(n(90)),f=r(n(91)),p=r(n(92)),h=r(n(93)),d=r(n(95)),g=r(n(96)),y=r(n(97)),T=r(n(98)),E=r(n(100)),m=r(n(102)),S=r(n(103)),_=r(n(104)),C=r(n(105));e.reducerFiles={app:s.default,user:o.default,rank:a.default,thread:u.default,threads:c.default,threadDetail:l.default,analyze:f.default,bootOption:p.default,setting:h.default,posts:d.default,postsTimeline:g.default,postsTimelineStock:y.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:m.default,postsSingle:S.default,postsChild:_.default,actioned:C.default},e.default=i.combineReducers(e.reducerFiles)},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(4));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(39));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6));e.default=(t=[],e)=>{let n=[],r=0;const s=(t,n)=>t.ch===e.app.rootCh||n.ch===e.app.rootCh?0:t.watchCnt<n.watchCnt?1:t.watchCnt>n.watchCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(n=i.default.getDispPosts(e),r=n&&n.length?e.posts.length:0,0===r?t:t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{favicon:n[r-1].favicon,stampId:n[r-1].stampId,post:n[r-1].post}):t));case"SERVER_TO_API[BROADCAST]:fetchPosts":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return 0===t.length?[e.thread]:t.map(t=>e.thread.ch===t.ch?Object.assign(Object.assign({},t),{watchCnt:e.thread.watchCnt}):t).sort(s);case"SERVER_TO_API[BROADCAST]:post":return t.map(t=>e.app.rootCh===t.ch?e.app.multistream?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t:e.posts[0].ch===t.ch?Object.assign(Object.assign({},t),{title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}):t);case"SERVER_TO_API[EMIT]:rank":if(t&&1===t.length&&e.rank&&e.rank.length>0){const n=[],r=e.rank.length;let i=e.rank[0];for(let s=0;s<r;s++){let r=e.rank[s];i=r.updateTime>i.updateTime?r:i,r.ch===t[0].ch&&(r=Object.assign(Object.assign({},r),{watchCnt:t[0].watchCnt})),n.push(r)}return n.sort(s),n[0].faicon=i.favicon,n[0].post=i.post,n[0].stampId=i.stampId,n}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(5));e.default=(t=new i.default({},{},{}),e)=>e.thread?t.merge(e.thread):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(44));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(5));e.default=(t=new i.default({},{},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(41));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(42));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(94));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0));class s extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},n=t&&t.common?t.common:{},r=t&&t.server?t.server:{};return this.create({client:e,common:n,server:r})}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6));e.default=(t=new i.default,e)=>e.posts?new i.default(e.posts):t},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(13));e.default=(t=new i.default,e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map(t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(14));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(99));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(101));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t=[]){return t}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6)),s=r(n(37));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.thread.ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let n=[];return t.length+e.postsMulti.length>s.default.findOneLimitCnt?(n=[...e.postsMulti,...t],n.slice(0,s.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(40));e.default=(t=new i.default,e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(6));e.default=(t=new i.default,e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.posts[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(0)),s=r(n(4)),o=r(n(6)),a=r(n(5)),u=r(n(44)),c=r(n(107));e.default={updateAction:t=>e=>n=>{const r=t.getState();n&&(n.app=n.app?Object.assign(Object.assign({},r.app),n.app):r.app,n.app.actioned=n.type),l[n.type]&&(n=l[n.type](r,n)),n&&e(n)}};const l={"SERVER_TO_API[BROADCAST]:fetchPosts":(t,e)=>(e.app.tuned=e.thread.ch,e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e),"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.detailCh=e.thread.ch,e.app.desc=e.thread.serverMetas.title,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=s.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,(e=Object.assign({},o.default.getAnyActionPosts(e,t))).thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=s.default.getMediaTypeFromSrc(t),e=c.default.setStoragePostsTimeline(e)}else e.app.chType=s.default.mediaTagTypeNo;return e},"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetTimelineFindId=s.default.defaultOffsetFindId,e.app.offsetMultiFindId=s.default.defaultOffsetFindId,e.app.offsetSingleFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e.app.offsetLogsFindId=s.default.defaultOffsetFindId,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e.posts=new o.default,e.postsMulti=new o.default,e.postsChild=new o.default,e.postsTimeline=new o.default,e.postsSingle=new o.default,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?Object.assign(Object.assign({},t.app),e.app):t.app,e.thread=e.thread?Object.assign(Object.assign({},t.thread),e.thread):t.thread,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{const{user:n}=t,r=e.posts.length-1;e.app.inputStampId=0,e.user=n;const i=Object.keys(e.thread.emotions);if(e.thread.ch===e.posts[r].ch&&i.length>0){const n=Object.assign({},e.thread.emotions);e.thread.emotions=Object.assign({},t.thread.emotions),Object.keys(n).forEach(t=>{Object.keys(n[t]).forEach(r=>{e.thread.emotions[t][r]=e.thread.emotions[t][r]+n[t][r]})})}else e.thread.emotions=t.thread.emotions;return e=o.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=s.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e=o.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail=Object.assign({},e.thread),e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions=Object.assign({},t.threads[e.app.detailCh].emotions),console.log(e.threadDetail.emotions.russellSimple),e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread=Object.assign(Object.assign({},t.thread),e.thread),e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const n=e.thread.ch;e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.thread.ch=n;const r=s.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=a.default.getFindTypeFromSrc(r),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread=Object.assign(Object.assign({},t.thread),e.thread),e.postsChild=[],e.app.offsetFindId=s.default.defaultOffsetFindId,e.app.offsetChildFindId=s.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let n=!1,{clientMetas:r}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(r).forEach((t,s)=>{r[t]&&""!==r[t]&&i[t]!==r[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),n=!0,e.thread.serverMetas[t]=r[t])}),n)return e.threadDetail=Object.assign({},t.threadDetail),e.threadDetail.serverMetas=Object.assign(Object.assign({},e.threadDetail.serverMetas),e.thread.serverMetas),e}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3)),s=r(n(4)),o=r(n(108));function a(t,e){const{app:n}=t,{storageKey:r}=i.default;if(n.isRootCh){const{postsMulti:e,postsSingle:i}=t;o.default.setStorage(n.rootCh,r.postsMulti,e),o.default.setStorage(n.rootCh,r.postsSingle,i)}return{state:t,props:e}}function u(t){const{app:e,thread:n,postsTimeline:r}=t,{storageKey:s}=i.default;if(e.isMediaCh){const e=r&&r.length?r.length:0;let i=[],a=[];for(let t=0;t<e;t++)0===r[t].currentTime?i.push(r[t]):a.push(r[t]);t.postsTimeline=i,o.default.setStorage(n.ch,s.postsTimelineZero,i),o.default.setStorage(n.ch,s.postsTimeline,a)}return t}e.default={"SERVER_TO_API[BROADCAST]:post":a,"SERVER_TO_API[EMIT]:getMore":a,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:n}=t,{rootCh:r}=n,{storageKey:a}=i.default,u=n.dispThreadType===s.default.dispThreadTypeMulti?a.postSingle:a.postMulti;return o.default.setStorage(r,i.default.storageKey[u],[]),{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:n}=t.app;return o.default.setStorage(n,i.default.storageKey.app,t.app),{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:n}=t;return n.isMediaCh?{state:t=u(t),props:e}:a(t,e)},setStorageHtmlPosts:a,setStoragePostsTimeline:u,getStoragePostsTimeline:function(t){const{storageKey:e}=i.default,n=o.default.getStorage(t,e.postsTimeline);return"Array"===n.constructor.name?n:[]},getStoragePostsTimelineZero:function(t){const{storageKey:e}=i.default,n=o.default.getStorage(t,e.postsTimelineZero);return"Array"===n.constructor.name?n:[]}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3));class s{static getBaseKey(t){return`${i.default.storageKey.baseKey}${t}`}static setStorage(t,e,n){if(e){const r=s.getBaseKey(t);let i=JSON.parse(localStorage.getItem(r));return i=JSON.stringify(Object.assign(Object.assign({},i),{[e]:n})),localStorage.setItem(r,i),!0}return!1}static getStorage(t,e){const n=s.getBaseKey(t),r=JSON.parse(localStorage.getItem(n));return r&&r[e]?r[e]:{}}static getCaches(t){return{menuLogs:s.getStorage(t,i.default.storageKey.menuLogs),app:s.getStorage(t,i.default.storageKey.app),thread:s.getStorage(t,i.default.storageKey.thread),setting:s.getStorage(t,i.default.storageKey.setting)}}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(3));e.default={updateStyle:({styleKey:t,eleType:e,tagName:n,style:r})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:n,style:r}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),onClickToggleMain:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_MAIN",app:t,ui:e}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:n})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:n}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",app:t,ui:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>Object.assign({type:"RESIZE_START_WINDOW"},t),onResizeEndWindow:({app:t,setting:e,bootOption:n})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:n}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=i.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>({type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:n})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:n}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(8));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(8)),s=new(r(n(15)).default);let o={};Object.keys(i.default.map).forEach(t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,n)=>a[e.type]?a[e.type](t,e,n):{requestState:e,actionState:n}});const a={post:(t,e,n)=>{const{app:r}=e;return r.isMediaCh&&(r.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},r.inputStampId?Object.keys(s.balances).forEach(n=>{if(s.balances[n]&&t.thread.emotions[n]){const t=s.balances[n](r.inputStampId);t&&t.forEach(t=>{const r=Object.keys(t)[0],i=s.idKeyTypes[r];e.thread.emotions[n]||(e.thread.emotions[n]={}),e.thread.emotions[n][i]||(e.thread.emotions[n][i]=0),e.thread.emotions[n][i]=t[r]})}}):(n.app=Object.assign({},r),n.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:n}}};e.default=o},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(113)),s=r(n(114)),o=r(n(115));e.default={Plain:i.default,Russell:s.default,RussellSimple:o.default}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(15));class s{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(15));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(15));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach(t=>{this.typesArray.push(s.TYPES[t].LABEL)})}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach((e,n)=>{t[e.LABEL]={type:Number,default:0,min:0}}),t}}e.default=s},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(8));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return Object.assign(Object.assign({},t),{type:e})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{static deleteProtcol(t){return t.replace("https:/","").replace("http:/","")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,