/*! For license information please see talkn.top.js.LICENSE.txt */
(()=>{var t={665:(t,e,i)=>{"use strict";function l(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function n(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,l)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?n(Object(i),!0).forEach((function(e){l(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}i.r(e),i.d(e,{__DO_NOT_USE__ActionTypes:()=>I,applyMiddleware:()=>C,bindActionCreators:()=>F,combineReducers:()=>B,compose:()=>r,createStore:()=>d});var c="function"==typeof Symbol&&Symbol.observable||"@@observable",g=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function d(t,e,i){var l;if("function"==typeof e&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof e&&void 0===i&&(i=e,e=void 0),void 0!==i){if("function"!=typeof i)throw new Error(a(1));return i(d)(t,e)}if("function"!=typeof t)throw new Error(a(2));var n=t,s=e,g=[],B=g,o=!1;function F(){B===g&&(B=g.slice())}function r(){if(o)throw new Error(a(3));return s}function C(t){if("function"!=typeof t)throw new Error(a(4));if(o)throw new Error(a(5));var e=!0;return F(),B.push(t),function(){if(e){if(o)throw new Error(a(6));e=!1,F();var i=B.indexOf(t);B.splice(i,1),g=null}}}function U(t){if(!u(t))throw new Error(a(7));if(void 0===t.type)throw new Error(a(8));if(o)throw new Error(a(9));try{o=!0,s=n(s,t)}finally{o=!1}for(var e=g=B,i=0;i<e.length;i++)(0,e[i])();return t}function Q(t){if("function"!=typeof t)throw new Error(a(10));n=t,U({type:I.REPLACE})}function b(){var t,e=C;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(a(11));function i(){t.next&&t.next(r())}return i(),{unsubscribe:e(i)}}})[c]=function(){return this},t}return U({type:I.INIT}),(l={dispatch:U,subscribe:C,getState:r,replaceReducer:Q})[c]=b,l}function B(t){for(var e=Object.keys(t),i={},l=0;l<e.length;l++){var n=e[l];"function"==typeof t[n]&&(i[n]=t[n])}var s,c=Object.keys(i);try{!function(t){Object.keys(t).forEach((function(e){var i=t[e];if(void 0===i(void 0,{type:I.INIT}))throw new Error(a(12));if(void 0===i(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(i)}catch(t){s=t}return function(t,e){if(void 0===t&&(t={}),s)throw s;for(var l=!1,n={},g=0;g<c.length;g++){var I=c[g],u=i[I],d=t[I],B=u(d,e);if(void 0===B)throw e&&e.type,new Error(a(14));n[I]=B,l=l||B!==d}return(l=l||c.length!==Object.keys(t).length)?n:t}}function o(t,e){return function(){return e(t.apply(this,arguments))}}function F(t,e){if("function"==typeof t)return o(t,e);if("object"!=typeof t||null===t)throw new Error(a(16));var i={};for(var l in t){var n=t[l];"function"==typeof n&&(i[l]=o(n,e))}return i}function r(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(){var i=t.apply(void 0,arguments),l=function(){throw new Error(a(15))},n={getState:i.getState,dispatch:function(){return l.apply(void 0,arguments)}},c=e.map((function(t){return t(n)}));return l=r.apply(void 0,c)(i.dispatch),s(s({},i),{},{dispatch:l})}}}},5303:t=>{"use strict";var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var l={};return"abcdefghijklmnopqrst".split("").forEach((function(t){l[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},l)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var a,c,g=n(t),I=1;I<arguments.length;I++){for(var u in a=Object(arguments[I]))i.call(a,u)&&(g[u]=a[u]);if(e){c=e(a);for(var d=0;d<c.length;d++)l.call(a,c[d])&&(g[c[d]]=a[c[d]])}}return g}},9573:t=>{var e,i,l=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===n||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(i){try{return e.call(null,t,0)}catch(i){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:n}catch(t){e=n}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,g=[],I=!1,u=-1;function d(){I&&c&&(I=!1,c.length?g=c.concat(g):u=-1,g.length&&B())}function B(){if(!I){var t=a(d);I=!0;for(var e=g.length;e;){for(c=g,g=[];++u<e;)c&&c[u].run();u=-1,e=g.length}c=null,I=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function o(t,e){this.fun=t,this.array=e}function F(){}l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];g.push(new o(t,e)),1!==g.length||I||a(B)},o.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=F,l.addListener=F,l.once=F,l.off=F,l.removeListener=F,l.removeAllListeners=F,l.emit=F,l.prependListener=F,l.prependOnceListener=F,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},9777:(t,e,i)=>{"use strict";var l=i(5303),n=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,g=60112;e.Suspense=60113;var I=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;n=d("react.element"),s=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),c=d("react.context"),g=d("react.forward_ref"),e.Suspense=d("react.suspense"),I=d("react.memo"),u=d("react.lazy")}var B="function"==typeof Symbol&&Symbol.iterator;function o(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var F={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},r={};function C(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}function U(){}function Q(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}C.prototype.isReactComponent={},C.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(o(85));this.updater.enqueueSetState(this,t,e,"setState")},C.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},U.prototype=C.prototype;var b=Q.prototype=new U;b.constructor=Q,l(b,C.prototype),b.isPureReactComponent=!0;var V={current:null},A=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function p(t,e,i){var l,s={},a=null,c=null;if(null!=e)for(l in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)A.call(e,l)&&!x.hasOwnProperty(l)&&(s[l]=e[l]);var g=arguments.length-2;if(1===g)s.children=i;else if(1<g){for(var I=Array(g),u=0;u<g;u++)I[u]=arguments[u+2];s.children=I}if(t&&t.defaultProps)for(l in g=t.defaultProps)void 0===s[l]&&(s[l]=g[l]);return{$$typeof:n,type:t,key:a,ref:c,props:s,_owner:V.current}}function G(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var R=/\/+/g;function L(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function h(t,e,i,l,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var g=!1;if(null===t)g=!0;else switch(c){case"string":case"number":g=!0;break;case"object":switch(t.$$typeof){case n:case s:g=!0}}if(g)return a=a(g=t),t=""===l?"."+L(g,0):l,Array.isArray(a)?(i="",null!=t&&(i=t.replace(R,"$&/")+"/"),h(a,e,i,"",(function(t){return t}))):null!=a&&(G(a)&&(a=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||g&&g.key===a.key?"":(""+a.key).replace(R,"$&/")+"/")+t)),e.push(a)),1;if(g=0,l=""===l?".":l+":",Array.isArray(t))for(var I=0;I<t.length;I++){var u=l+L(c=t[I],I);g+=h(c,e,i,u,a)}else if("function"==typeof(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}(t)))for(t=u.call(t),I=0;!(c=t.next()).done;)g+=h(c=c.value,e,i,u=l+L(c,I++),a);else if("object"===c)throw e=""+t,Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return g}function m(t,e,i){if(null==t)return t;var l=[],n=0;return h(t,l,"","",(function(t){return e.call(i,t,n++)})),l}function S(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var Z={current:null};function y(){var t=Z.current;if(null===t)throw Error(o(321));return t}var X={ReactCurrentDispatcher:Z,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:V,IsSomeRendererActing:{current:!1},assign:l};e.Children={map:m,forEach:function(t,e,i){m(t,(function(){e.apply(this,arguments)}),i)},count:function(t){var e=0;return m(t,(function(){e++})),e},toArray:function(t){return m(t,(function(t){return t}))||[]},only:function(t){if(!G(t))throw Error(o(143));return t}},e.Component=C,e.PureComponent=Q,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=X,e.cloneElement=function(t,e,i){if(null==t)throw Error(o(267,t));var s=l({},t.props),a=t.key,c=t.ref,g=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,g=V.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var I=t.type.defaultProps;for(u in e)A.call(e,u)&&!x.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==I?I[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=i;else if(1<u){I=Array(u);for(var d=0;d<u;d++)I[d]=arguments[d+2];s.children=I}return{$$typeof:n,type:t.type,key:a,ref:c,props:s,_owner:g}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=p,e.createFactory=function(t){var e=p.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:g,render:t}},e.isValidElement=G,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:S}},e.memo=function(t,e){return{$$typeof:I,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return y().useCallback(t,e)},e.useContext=function(t,e){return y().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return y().useEffect(t,e)},e.useImperativeHandle=function(t,e,i){return y().useImperativeHandle(t,e,i)},e.useLayoutEffect=function(t,e){return y().useLayoutEffect(t,e)},e.useMemo=function(t,e){return y().useMemo(t,e)},e.useReducer=function(t,e,i){return y().useReducer(t,e,i)},e.useRef=function(t){return y().useRef(t)},e.useState=function(t){return y().useState(t)},e.version="17.0.2"},4065:(t,e,i)=>{"use strict";t.exports=i(9777)},831:(t,e,i)=>{"use strict";function l(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function n(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,l)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?n(Object(i),!0).forEach((function(e){l(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}i.r(e),i.d(e,{__DO_NOT_USE__ActionTypes:()=>I,applyMiddleware:()=>C,bindActionCreators:()=>F,combineReducers:()=>B,compose:()=>r,createStore:()=>d});var c="function"==typeof Symbol&&Symbol.observable||"@@observable",g=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function d(t,e,i){var l;if("function"==typeof e&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof e&&void 0===i&&(i=e,e=void 0),void 0!==i){if("function"!=typeof i)throw new Error(a(1));return i(d)(t,e)}if("function"!=typeof t)throw new Error(a(2));var n=t,s=e,g=[],B=g,o=!1;function F(){B===g&&(B=g.slice())}function r(){if(o)throw new Error(a(3));return s}function C(t){if("function"!=typeof t)throw new Error(a(4));if(o)throw new Error(a(5));var e=!0;return F(),B.push(t),function(){if(e){if(o)throw new Error(a(6));e=!1,F();var i=B.indexOf(t);B.splice(i,1),g=null}}}function U(t){if(!u(t))throw new Error(a(7));if(void 0===t.type)throw new Error(a(8));if(o)throw new Error(a(9));try{o=!0,s=n(s,t)}finally{o=!1}for(var e=g=B,i=0;i<e.length;i++)(0,e[i])();return t}function Q(t){if("function"!=typeof t)throw new Error(a(10));n=t,U({type:I.REPLACE})}function b(){var t,e=C;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(a(11));function i(){t.next&&t.next(r())}return i(),{unsubscribe:e(i)}}})[c]=function(){return this},t}return U({type:I.INIT}),(l={dispatch:U,subscribe:C,getState:r,replaceReducer:Q})[c]=b,l}function B(t){for(var e=Object.keys(t),i={},l=0;l<e.length;l++){var n=e[l];"function"==typeof t[n]&&(i[n]=t[n])}var s,c=Object.keys(i);try{!function(t){Object.keys(t).forEach((function(e){var i=t[e];if(void 0===i(void 0,{type:I.INIT}))throw new Error(a(12));if(void 0===i(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(i)}catch(t){s=t}return function(t,e){if(void 0===t&&(t={}),s)throw s;for(var l=!1,n={},g=0;g<c.length;g++){var I=c[g],u=i[I],d=t[I],B=u(d,e);if(void 0===B)throw e&&e.type,new Error(a(14));n[I]=B,l=l||B!==d}return(l=l||c.length!==Object.keys(t).length)?n:t}}function o(t,e){return function(){return e(t.apply(this,arguments))}}function F(t,e){if("function"==typeof t)return o(t,e);if("object"!=typeof t||null===t)throw new Error(a(16));var i={};for(var l in t){var n=t[l];"function"==typeof n&&(i[l]=o(n,e))}return i}function r(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(){var i=t.apply(void 0,arguments),l=function(){throw new Error(a(15))},n={getState:i.getState,dispatch:function(){return l.apply(void 0,arguments)}},c=e.map((function(t){return t(n)}));return l=r.apply(void 0,c)(i.dispatch),s(s({},i),{},{dispatch:l})}}}},6894:(t,e,i)=>{t.exports=i(6894)},8399:t=>{var e,i,l=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===n||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(i){try{return e.call(null,t,0)}catch(i){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:n}catch(t){e=n}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,g=[],I=!1,u=-1;function d(){I&&c&&(I=!1,c.length?g=c.concat(g):u=-1,g.length&&B())}function B(){if(!I){var t=a(d);I=!0;for(var e=g.length;e;){for(c=g,g=[];++u<e;)c&&c[u].run();u=-1,e=g.length}c=null,I=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function o(t,e){this.fun=t,this.array=e}function F(){}l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];g.push(new o(t,e)),1!==g.length||I||a(B)},o.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=F,l.addListener=F,l.once=F,l.off=F,l.removeListener=F,l.removeAllListeners=F,l.emit=F,l.prependListener=F,l.prependOnceListener=F,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},8622:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});class l{get mediaSecondInterval(){return 200}get currentTime(){return this.file?Math.floor(10*this.file.currentTime)/10:0}static get STATUS_SEARCH(){return"SEARCH"}static get STATUS_STANBY(){return"STANBY"}static get STATUS_PLAY(){return"PLAY"}static get STATUS_ENDED(){return"ENDED"}static get STATUS_STOP(){return"STOP"}static get PORTAL_KEY(){return"PORTAL"}constructor(){this.init=this.init.bind(this),this.onError=this.onError.bind(this),this.onMessage=this.onMessage.bind(this),this.postMessage=this.postMessage.bind(this),this.setClientParams=this.setClientParams.bind(this),this.setRelationElms=this.setRelationElms.bind(this),this.searching=this.searching.bind(this),this.handleEvents=this.handleEvents.bind(this),this.play=this.play.bind(this),this.pause=this.pause.bind(this),this.ended=this.ended.bind(this),this.log=this.log.bind(this),this.init(),this.setRelationElms(),this.listenMessage()}listenMessage(){window.addEventListener("message",this.onMessage),window.addEventListener("messageerror",this.onError)}setStatus(t,e){this.status=t,this.log("SET STATUS "+e)}init(){this.ch=null,this.setStatus(l.STATUS_STANBY),this.iframes={},this.audios=[],this.videos=[],this.handleEventSrc=[],this.file=null,this.searchingIds={},this.maxSearchingCnt=30,this.playIntervalId=null,this.searchingCnt=0,this.isLog=!1,window.removeEventListener("message",this.onMessage),window.removeEventListener("messageerror",this.onError),Object.keys(this.searchingIds).forEach((t=>{clearInterval(this.searchingIds[t])})),clearInterval(this.playIntervalId)}setRelationElms(t){0===Object.keys(this.iframes).length&&(t===l.PORTAL_KEY?this.iframes[t]={dom:window,params:{id:"",ch:"",href:"",audios:[],videos:[]}}:window.document.querySelectorAll(".talknIframes").forEach((t=>{if(!t.id)throw"Error: Please set iframe id.";this.iframes[t.id]={dom:t,params:{id:"",ch:"",href:"",audios:[],videos:[]}}}))),0===this.videos.length&&(this.videos=window.document.querySelectorAll("video")),0===this.audios.length&&(this.audios=window.document.querySelectorAll("audio"))}setClientParams(t){t&&t.id&&(this.iframes[t.id].params=t)}onMessage(t){if(t.data&&t.data.type&&"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"===t.data.type){const{method:e,params:i}=t.data;this.file&&this.file[e]&&"function"==typeof this.file[e]?this.file[e]():this[e]&&"function"==typeof this[e]&&(this.setRelationElms(i.id),this.setClientParams(i),this[e](i.id))}}onError(t){console.warn(t)}postMessage(){Object.keys(this.iframes).forEach((t=>{const e=this.iframes[t].dom,i=this.iframes[t].params.href,n={ch:this.ch,status:this.status.toLowerCase(),currentTime:this.currentTime};(t===l.PORTAL_KEY?window:e.contentWindow).postMessage({type:"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE",params:n},i)}))}searching(t){if(!t)return!1;this.setStatus(l.STATUS_SEARCH,`start searching ${t}`),this.searchingCnt=0,this.searchingId=null,this.playIntervalId=null;const e=e=>{let i=!1;return this[e].forEach((l=>{i||this.iframes[t].params[e].forEach((t=>{i||l.src.indexOf(t.src)>=0&&(this.handleEventSrc.includes(l.src)||(this.handleEventSrc.push(l.src),this.handleEvents(l),i=!0))}))})),i};this.searchingIds[t]=setInterval((()=>{this.setRelationElms(t);const i=Boolean(this.iframes[t].params.audios.length),n=Boolean(this.iframes[t].params.videos.length);let s=!1;this.searchingCnt<this.maxSearchingCnt?(this.videos.length>0&&n&&(s=e("videos"),s&&this.setStatus(l.STATUS_STANBY,`searched video ${t}`)),this.audios.length>0&&i&&(s=e("audios"),s&&this.setStatus(l.STATUS_STANBY,`searched audio ${t}`))):(clearInterval(this.searchingIds[t]),this.setStatus(l.STATUS_ENDED,`search to ended ${t}`)),this.searchingCnt++}),l.mediaSecondInterval)}handleEvents(t){t.addEventListener("play",this.play),t.addEventListener("pause",this.pause),t.addEventListener("ended",this.ended)}play(t){this.file=t.srcElement,this.ch=this.file.currentSrc.replace("http:/","").replace("https:/","")+"/",this.setStatus(l.STATUS_PLAY,"play"),this.playIntervalId=setInterval((()=>{this.postMessage()}),this.mediaSecondInterval)}pause(t){this.status!==l.STATUS_STANBY&&(this.setStatus(l.STATUS_STANBY,"pause"),clearInterval(this.playIntervalId),this.postMessage())}ended(t){this.setStatus(l.STATUS_ENDED,"ended"),clearInterval(this.playIntervalId),this.postMessage(),Object.keys(this.searchingIds).forEach((t=>{clearInterval(this.searchingIds[t])}))}log(t,e){this.isLog&&console.log(`@@@@@@@@@@@ ${t} ${this.status} [${e}] ch: ${this.ch} time: ${this.pointerTime} @@@`)}}},9444:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"05ce4977c2c51d72e87d4dc0ae3d779a.png"},4425:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"cee8cd6d71d2b2dabe527de2df785d9d.png"},685:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"d9f0133107825a266ef82507b592c9ae.png"},5069:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"f0f1aafafdd2ab70a86acec8b1c5f2d7.png"},6631:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"a4f29311070cd37b8a91c1539eed5abd.png"},3673:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"a92b5fd114be2c8b2d8f28ca2473ed67.png"},3152:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"923c9d22dde7fee58770a0695efdedb9.png"},3588:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"e87f52c32b39bd6523508349a5d3824d.png"},5328:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"9667275a5c27c650a4351efe2492b01c.png"},7873:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"ff4ee0ae2f88a8a770648b75c1a3f41c.png"},1262:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"d4c35ba478524fdb720752bb2922c423.png"},1635:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"f47d909586b59fa3ab7a400ca22ed6ed.png"},4697:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"3468e0add7c8cc887a7159c3e77f4c11.png"},2721:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"80fc75d23b2f70b54b13c120d065067f.png"},5474:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"b297ee5a80057cb3358b55bd49ae2a99.png"},4726:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"b0e469fdf98fc87b355ddbf12905baff.png"},8679:(t,e,i)=>{"use strict";var l=i(9864),n={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},s={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function g(t){return l.isMemo(t)?a:c[t.$$typeof]||n}c[l.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[l.Memo]=a;var I=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,B=Object.getOwnPropertyDescriptor,o=Object.getPrototypeOf,F=Object.prototype;t.exports=function t(e,i,l){if("string"!=typeof i){if(F){var n=o(i);n&&n!==F&&t(e,n,l)}var a=u(i);d&&(a=a.concat(d(i)));for(var c=g(e),r=g(i),C=0;C<a.length;++C){var U=a[C];if(!(s[U]||l&&l[U]||r&&r[U]||c&&c[U])){var Q=B(i,U);try{I(e,U,Q)}catch(t){}}}}return e}},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var l={};return"abcdefghijklmnopqrst".split("").forEach((function(t){l[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},l)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var a,c,g=n(t),I=1;I<arguments.length;I++){for(var u in a=Object(arguments[I]))i.call(a,u)&&(g[u]=a[u]);if(e){c=e(a);for(var d=0;d<c.length;d++)l.call(a,c[d])&&(g[c[d]]=a[c[d]])}}return g}},2703:(t,e,i)=>{"use strict";var l=i(414);function n(){}function s(){}s.resetWarningCache=n,t.exports=function(){function t(t,e,i,n,s,a){if(a!==l){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function e(){return t}t.isRequired=t;var i={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:s,resetWarningCache:n};return i.PropTypes=i,i}},5697:(t,e,i)=>{t.exports=i(2703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(t,e,i)=>{"use strict";var l=i(7294),n=i(7418),s=i(3840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!l)throw Error(a(227));var c=new Set,g={};function I(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(g[t]=e,t=0;t<e.length;t++)c.add(e[t])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),B=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,o=Object.prototype.hasOwnProperty,F={},r={};function C(t,e,i,l,n,s,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=l,this.attributeNamespace=n,this.mustUseProperty=i,this.propertyName=t,this.type=e,this.sanitizeURL=s,this.removeEmptyString=a}var U={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){U[t]=new C(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];U[e]=new C(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){U[t]=new C(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){U[t]=new C(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){U[t]=new C(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){U[t]=new C(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){U[t]=new C(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){U[t]=new C(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){U[t]=new C(t,5,!1,t.toLowerCase(),null,!1,!1)}));var Q=/[\-:]([a-z])/g;function b(t){return t[1].toUpperCase()}function V(t,e,i,l){var n=U.hasOwnProperty(e)?U[e]:null;(null!==n?0===n.type:!l&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,i,l){if(null==e||function(t,e,i,l){if(null!==i&&0===i.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!l&&(null!==i?!i.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,i,l))return!0;if(l)return!1;if(null!==i)switch(i.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,i,n,l)&&(i=null),l||null===n?function(t){return!!o.call(r,t)||!o.call(F,t)&&(B.test(t)?r[t]=!0:(F[t]=!0,!1))}(e)&&(null===i?t.removeAttribute(e):t.setAttribute(e,""+i)):n.mustUseProperty?t[n.propertyName]=null===i?3!==n.type&&"":i:(e=n.attributeName,l=n.attributeNamespace,null===i?t.removeAttribute(e):(i=3===(n=n.type)||4===n&&!0===i?"":""+i,l?t.setAttributeNS(l,e,i):t.setAttribute(e,i))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){U[t]=new C(t,1,!1,t.toLowerCase(),null,!1,!1)})),U.xlinkHref=new C("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){U[t]=new C(t,1,!1,t.toLowerCase(),null,!0,!0)}));var A=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,p=60106,G=60107,R=60108,L=60114,h=60109,m=60110,S=60112,Z=60113,y=60120,X=60115,E=60116,f=60121,W=60128,N=60129,T=60130,Y=60131;if("function"==typeof Symbol&&Symbol.for){var J=Symbol.for;x=J("react.element"),p=J("react.portal"),G=J("react.fragment"),R=J("react.strict_mode"),L=J("react.profiler"),h=J("react.provider"),m=J("react.context"),S=J("react.forward_ref"),Z=J("react.suspense"),y=J("react.suspense_list"),X=J("react.memo"),E=J("react.lazy"),f=J("react.block"),J("react.scope"),W=J("react.opaque.id"),N=J("react.debug_trace_mode"),T=J("react.offscreen"),Y=J("react.legacy_hidden")}var H,k="function"==typeof Symbol&&Symbol.iterator;function v(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=k&&t[k]||t["@@iterator"])?t:null}function w(t){if(void 0===H)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);H=e&&e[1]||""}return"\n"+H+t}var M=!1;function D(t,e){if(!t||M)return"";M=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var l=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){l=t}t.call(e.prototype)}else{try{throw Error()}catch(t){l=t}t()}}catch(t){if(t&&l&&"string"==typeof t.stack){for(var n=t.stack.split("\n"),s=l.stack.split("\n"),a=n.length-1,c=s.length-1;1<=a&&0<=c&&n[a]!==s[c];)c--;for(;1<=a&&0<=c;a--,c--)if(n[a]!==s[c]){if(1!==a||1!==c)do{if(a--,0>--c||n[a]!==s[c])return"\n"+n[a].replace(" at new "," at ")}while(1<=a&&0<=c);break}}}finally{M=!1,Error.prepareStackTrace=i}return(t=t?t.displayName||t.name:"")?w(t):""}function z(t){switch(t.tag){case 5:return w(t.type);case 16:return w("Lazy");case 13:return w("Suspense");case 19:return w("SuspenseList");case 0:case 2:case 15:return D(t.type,!1);case 11:return D(t.type.render,!1);case 22:return D(t.type._render,!1);case 1:return D(t.type,!0);default:return""}}function P(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case G:return"Fragment";case p:return"Portal";case L:return"Profiler";case R:return"StrictMode";case Z:return"Suspense";case y:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case m:return(t.displayName||"Context")+".Consumer";case h:return(t._context.displayName||"Context")+".Provider";case S:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case X:return P(t.type);case f:return P(t._render);case E:e=t._payload,t=t._init;try{return P(t(e))}catch(t){}}return null}function O(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function j(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function K(t){t._valueTracker||(t._valueTracker=function(t){var e=j(t)?"checked":"value",i=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),l=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==i&&"function"==typeof i.get&&"function"==typeof i.set){var n=i.get,s=i.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return n.call(this)},set:function(t){l=""+t,s.call(this,t)}}),Object.defineProperty(t,e,{enumerable:i.enumerable}),{getValue:function(){return l},setValue:function(t){l=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function _(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var i=e.getValue(),l="";return t&&(l=j(t)?t.checked?"true":"false":t.value),(t=l)!==i&&(e.setValue(t),!0)}function q(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function $(t,e){var i=e.checked;return n({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=i?i:t._wrapperState.initialChecked})}function tt(t,e){var i=null==e.defaultValue?"":e.defaultValue,l=null!=e.checked?e.checked:e.defaultChecked;i=O(null!=e.value?e.value:i),t._wrapperState={initialChecked:l,initialValue:i,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&V(t,"checked",e,!1)}function it(t,e){et(t,e);var i=O(e.value),l=e.type;if(null!=i)"number"===l?(0===i&&""===t.value||t.value!=i)&&(t.value=""+i):t.value!==""+i&&(t.value=""+i);else if("submit"===l||"reset"===l)return void t.removeAttribute("value");e.hasOwnProperty("value")?nt(t,e.type,i):e.hasOwnProperty("defaultValue")&&nt(t,e.type,O(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function lt(t,e,i){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var l=e.type;if(!("submit"!==l&&"reset"!==l||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,i||e===t.value||(t.value=e),t.defaultValue=e}""!==(i=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==i&&(t.name=i)}function nt(t,e,i){"number"===e&&q(t.ownerDocument)===t||(null==i?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+i&&(t.defaultValue=""+i))}function st(t,e){return t=n({children:void 0},e),(e=function(t){var e="";return l.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,i,l){if(t=t.options,e){e={};for(var n=0;n<i.length;n++)e["$"+i[n]]=!0;for(i=0;i<t.length;i++)n=e.hasOwnProperty("$"+t[i].value),t[i].selected!==n&&(t[i].selected=n),n&&l&&(t[i].defaultSelected=!0)}else{for(i=""+O(i),e=null,n=0;n<t.length;n++){if(t[n].value===i)return t[n].selected=!0,void(l&&(t[n].defaultSelected=!0));null!==e||t[n].disabled||(e=t[n])}null!==e&&(e.selected=!0)}}function ct(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return n({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function gt(t,e){var i=e.value;if(null==i){if(i=e.children,e=e.defaultValue,null!=i){if(null!=e)throw Error(a(92));if(Array.isArray(i)){if(!(1>=i.length))throw Error(a(93));i=i[0]}e=i}null==e&&(e=""),i=e}t._wrapperState={initialValue:O(i)}}function It(t,e){var i=O(e.value),l=O(e.defaultValue);null!=i&&((i=""+i)!==t.value&&(t.value=i),null==e.defaultValue&&t.defaultValue!==i&&(t.defaultValue=i)),null!=l&&(t.defaultValue=""+l)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var dt="http://www.w3.org/1999/xhtml";function Bt(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ot(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?Bt(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Ft,rt,Ct=(rt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((Ft=Ft||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=Ft.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,i,l){MSApp.execUnsafeLocalFunction((function(){return rt(t,e)}))}:rt);function Ut(t,e){if(e){var i=t.firstChild;if(i&&i===t.lastChild&&3===i.nodeType)return void(i.nodeValue=e)}t.textContent=e}var Qt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},bt=["Webkit","ms","Moz","O"];function Vt(t,e,i){return null==e||"boolean"==typeof e||""===e?"":i||"number"!=typeof e||0===e||Qt.hasOwnProperty(t)&&Qt[t]?(""+e).trim():e+"px"}function At(t,e){for(var i in t=t.style,e)if(e.hasOwnProperty(i)){var l=0===i.indexOf("--"),n=Vt(i,e[i],l);"float"===i&&(i="cssFloat"),l?t.setProperty(i,n):t[i]=n}}Object.keys(Qt).forEach((function(t){bt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),Qt[e]=Qt[t]}))}));var xt=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function pt(t,e){if(e){if(xt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function Gt(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Rt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Lt=null,ht=null,mt=null;function St(t){if(t=ql(t)){if("function"!=typeof Lt)throw Error(a(280));var e=t.stateNode;e&&(e=tn(e),Lt(t.stateNode,t.type,e))}}function Zt(t){ht?mt?mt.push(t):mt=[t]:ht=t}function yt(){if(ht){var t=ht,e=mt;if(mt=ht=null,St(t),e)for(t=0;t<e.length;t++)St(e[t])}}function Xt(t,e){return t(e)}function Et(t,e,i,l,n){return t(e,i,l,n)}function ft(){}var Wt=Xt,Nt=!1,Tt=!1;function Yt(){null===ht&&null===mt||(ft(),yt())}function Jt(t,e){var i=t.stateNode;if(null===i)return null;var l=tn(i);if(null===l)return null;i=l[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(l=!l.disabled)||(l=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!l;break t;default:t=!1}if(t)return null;if(i&&"function"!=typeof i)throw Error(a(231,e,typeof i));return i}var Ht=!1;if(d)try{var kt={};Object.defineProperty(kt,"passive",{get:function(){Ht=!0}}),window.addEventListener("test",kt,kt),window.removeEventListener("test",kt,kt)}catch(rt){Ht=!1}function vt(t,e,i,l,n,s,a,c,g){var I=Array.prototype.slice.call(arguments,3);try{e.apply(i,I)}catch(t){this.onError(t)}}var wt=!1,Mt=null,Dt=!1,zt=null,Pt={onError:function(t){wt=!0,Mt=t}};function Ot(t,e,i,l,n,s,a,c,g){wt=!1,Mt=null,vt.apply(Pt,arguments)}function jt(t){var e=t,i=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(i=e.return),t=e.return}while(t)}return 3===e.tag?i:null}function Kt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function _t(t){if(jt(t)!==t)throw Error(a(188))}function qt(t){if(!(t=function(t){var e=t.alternate;if(!e){if(null===(e=jt(t)))throw Error(a(188));return e!==t?null:t}for(var i=t,l=e;;){var n=i.return;if(null===n)break;var s=n.alternate;if(null===s){if(null!==(l=n.return)){i=l;continue}break}if(n.child===s.child){for(s=n.child;s;){if(s===i)return _t(n),t;if(s===l)return _t(n),e;s=s.sibling}throw Error(a(188))}if(i.return!==l.return)i=n,l=s;else{for(var c=!1,g=n.child;g;){if(g===i){c=!0,i=n,l=s;break}if(g===l){c=!0,l=n,i=s;break}g=g.sibling}if(!c){for(g=s.child;g;){if(g===i){c=!0,i=s,l=n;break}if(g===l){c=!0,l=s,i=n;break}g=g.sibling}if(!c)throw Error(a(189))}}if(i.alternate!==l)throw Error(a(190))}if(3!==i.tag)throw Error(a(188));return i.stateNode.current===i?t:e}(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function $t(t,e){for(var i=t.alternate;null!==e;){if(e===t||e===i)return!0;e=e.return}return!1}var te,ee,ie,le,ne=!1,se=[],ae=null,ce=null,ge=null,Ie=new Map,ue=new Map,de=[],Be="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function oe(t,e,i,l,n){return{blockedOn:t,domEventName:e,eventSystemFlags:16|i,nativeEvent:n,targetContainers:[l]}}function Fe(t,e){switch(t){case"focusin":case"focusout":ae=null;break;case"dragenter":case"dragleave":ce=null;break;case"mouseover":case"mouseout":ge=null;break;case"pointerover":case"pointerout":Ie.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ue.delete(e.pointerId)}}function re(t,e,i,l,n,s){return null===t||t.nativeEvent!==s?(t=oe(e,i,l,n,s),null!==e&&null!==(e=ql(e))&&ee(e),t):(t.eventSystemFlags|=l,e=t.targetContainers,null!==n&&-1===e.indexOf(n)&&e.push(n),t)}function Ce(t){var e=_l(t.target);if(null!==e){var i=jt(e);if(null!==i)if(13===(e=i.tag)){if(null!==(e=Kt(i)))return t.blockedOn=e,void le(t.lanePriority,(function(){s.unstable_runWithPriority(t.priority,(function(){ie(i)}))}))}else if(3===e&&i.stateNode.hydrate)return void(t.blockedOn=3===i.tag?i.stateNode.containerInfo:null)}t.blockedOn=null}function Ue(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var i=qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==i)return null!==(e=ql(i))&&ee(e),t.blockedOn=i,!1;e.shift()}return!0}function Qe(t,e,i){Ue(t)&&i.delete(e)}function be(){for(ne=!1;0<se.length;){var t=se[0];if(null!==t.blockedOn){null!==(t=ql(t.blockedOn))&&te(t);break}for(var e=t.targetContainers;0<e.length;){var i=qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==i){t.blockedOn=i;break}e.shift()}null===t.blockedOn&&se.shift()}null!==ae&&Ue(ae)&&(ae=null),null!==ce&&Ue(ce)&&(ce=null),null!==ge&&Ue(ge)&&(ge=null),Ie.forEach(Qe),ue.forEach(Qe)}function Ve(t,e){t.blockedOn===e&&(t.blockedOn=null,ne||(ne=!0,s.unstable_scheduleCallback(s.unstable_NormalPriority,be)))}function Ae(t){function e(e){return Ve(e,t)}if(0<se.length){Ve(se[0],t);for(var i=1;i<se.length;i++){var l=se[i];l.blockedOn===t&&(l.blockedOn=null)}}for(null!==ae&&Ve(ae,t),null!==ce&&Ve(ce,t),null!==ge&&Ve(ge,t),Ie.forEach(e),ue.forEach(e),i=0;i<de.length;i++)(l=de[i]).blockedOn===t&&(l.blockedOn=null);for(;0<de.length&&null===(i=de[0]).blockedOn;)Ce(i),null===i.blockedOn&&de.shift()}function xe(t,e){var i={};return i[t.toLowerCase()]=e.toLowerCase(),i["Webkit"+t]="webkit"+e,i["Moz"+t]="moz"+e,i}var pe={animationend:xe("Animation","AnimationEnd"),animationiteration:xe("Animation","AnimationIteration"),animationstart:xe("Animation","AnimationStart"),transitionend:xe("Transition","TransitionEnd")},Ge={},Re={};function Le(t){if(Ge[t])return Ge[t];if(!pe[t])return t;var e,i=pe[t];for(e in i)if(i.hasOwnProperty(e)&&e in Re)return Ge[t]=i[e];return t}d&&(Re=document.createElement("div").style,"AnimationEvent"in window||(delete pe.animationend.animation,delete pe.animationiteration.animation,delete pe.animationstart.animation),"TransitionEvent"in window||delete pe.transitionend.transition);var he=Le("animationend"),me=Le("animationiteration"),Se=Le("animationstart"),Ze=Le("transitionend"),ye=new Map,Xe=new Map,Ee=["abort","abort",he,"animationEnd",me,"animationIteration",Se,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ze,"transitionEnd","waiting","waiting"];function fe(t,e){for(var i=0;i<t.length;i+=2){var l=t[i],n=t[i+1];n="on"+(n[0].toUpperCase()+n.slice(1)),Xe.set(l,e),ye.set(l,n),I(n,[l])}}(0,s.unstable_now)();var We=8;function Ne(t){if(0!=(1&t))return We=15,1;if(0!=(2&t))return We=14,2;if(0!=(4&t))return We=13,4;var e=24&t;return 0!==e?(We=12,e):0!=(32&t)?(We=11,32):0!=(e=192&t)?(We=10,e):0!=(256&t)?(We=9,256):0!=(e=3584&t)?(We=8,e):0!=(4096&t)?(We=7,4096):0!=(e=4186112&t)?(We=6,e):0!=(e=62914560&t)?(We=5,e):67108864&t?(We=4,67108864):0!=(134217728&t)?(We=3,134217728):0!=(e=805306368&t)?(We=2,e):0!=(1073741824&t)?(We=1,1073741824):(We=8,t)}function Te(t,e){var i=t.pendingLanes;if(0===i)return We=0;var l=0,n=0,s=t.expiredLanes,a=t.suspendedLanes,c=t.pingedLanes;if(0!==s)l=s,n=We=15;else if(0!=(s=134217727&i)){var g=s&~a;0!==g?(l=Ne(g),n=We):0!=(c&=s)&&(l=Ne(c),n=We)}else 0!=(s=i&~a)?(l=Ne(s),n=We):0!==c&&(l=Ne(c),n=We);if(0===l)return 0;if(l=i&((0>(l=31-we(l))?0:1<<l)<<1)-1,0!==e&&e!==l&&0==(e&a)){if(Ne(e),n<=We)return e;We=n}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=l;0<e;)n=1<<(i=31-we(e)),l|=t[i],e&=~n;return l}function Ye(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Je(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=He(24&~e))?Je(10,e):t;case 10:return 0===(t=He(192&~e))?Je(8,e):t;case 8:return 0===(t=He(3584&~e))&&0===(t=He(4186112&~e))&&(t=512),t;case 2:return 0===(e=He(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function He(t){return t&-t}function ke(t){for(var e=[],i=0;31>i;i++)e.push(t);return e}function ve(t,e,i){t.pendingLanes|=e;var l=e-1;t.suspendedLanes&=l,t.pingedLanes&=l,(t=t.eventTimes)[e=31-we(e)]=i}var we=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Me(t)/De|0)|0},Me=Math.log,De=Math.LN2,ze=s.unstable_UserBlockingPriority,Pe=s.unstable_runWithPriority,Oe=!0;function je(t,e,i,l){Nt||ft();var n=_e,s=Nt;Nt=!0;try{Et(n,t,e,i,l)}finally{(Nt=s)||Yt()}}function Ke(t,e,i,l){Pe(ze,_e.bind(null,t,e,i,l))}function _e(t,e,i,l){var n;if(Oe)if((n=0==(4&e))&&0<se.length&&-1<Be.indexOf(t))t=oe(null,t,e,i,l),se.push(t);else{var s=qe(t,e,i,l);if(null===s)n&&Fe(t,l);else{if(n){if(-1<Be.indexOf(t))return t=oe(s,t,e,i,l),void se.push(t);if(function(t,e,i,l,n){switch(e){case"focusin":return ae=re(ae,t,e,i,l,n),!0;case"dragenter":return ce=re(ce,t,e,i,l,n),!0;case"mouseover":return ge=re(ge,t,e,i,l,n),!0;case"pointerover":var s=n.pointerId;return Ie.set(s,re(Ie.get(s)||null,t,e,i,l,n)),!0;case"gotpointercapture":return s=n.pointerId,ue.set(s,re(ue.get(s)||null,t,e,i,l,n)),!0}return!1}(s,t,e,i,l))return;Fe(t,l)}Zl(t,e,l,null,i)}}}function qe(t,e,i,l){var n=Rt(l);if(null!==(n=_l(n))){var s=jt(n);if(null===s)n=null;else{var a=s.tag;if(13===a){if(null!==(n=Kt(s)))return n;n=null}else if(3===a){if(s.stateNode.hydrate)return 3===s.tag?s.stateNode.containerInfo:null;n=null}else s!==n&&(n=null)}}return Zl(t,e,l,n,i),null}var $e=null,ti=null,ei=null;function ii(){if(ei)return ei;var t,e,i=ti,l=i.length,n="value"in $e?$e.value:$e.textContent,s=n.length;for(t=0;t<l&&i[t]===n[t];t++);var a=l-t;for(e=1;e<=a&&i[l-e]===n[s-e];e++);return ei=n.slice(t,1<e?1-e:void 0)}function li(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function ni(){return!0}function si(){return!1}function ai(t){function e(e,i,l,n,s){for(var a in this._reactName=e,this._targetInst=l,this.type=i,this.nativeEvent=n,this.target=s,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(n):n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ni:si,this.isPropagationStopped=si,this}return n(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=ni)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=ni)},persist:function(){},isPersistent:ni}),e}var ci,gi,Ii,ui={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},di=ai(ui),Bi=n({},ui,{view:0,detail:0}),oi=ai(Bi),Fi=n({},Bi,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Ri,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==Ii&&(Ii&&"mousemove"===t.type?(ci=t.screenX-Ii.screenX,gi=t.screenY-Ii.screenY):gi=ci=0,Ii=t),ci)},movementY:function(t){return"movementY"in t?t.movementY:gi}}),ri=ai(Fi),Ci=ai(n({},Fi,{dataTransfer:0})),Ui=ai(n({},Bi,{relatedTarget:0})),Qi=ai(n({},ui,{animationName:0,elapsedTime:0,pseudoElement:0})),bi=ai(n({},ui,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}})),Vi=ai(n({},ui,{data:0})),Ai={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xi={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pi={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gi(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=pi[t])&&!!e[t]}function Ri(){return Gi}var Li=ai(n({},Bi,{key:function(t){if(t.key){var e=Ai[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=li(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?xi[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Ri,charCode:function(t){return"keypress"===t.type?li(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?li(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}})),hi=ai(n({},Fi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),mi=ai(n({},Bi,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Ri})),Si=ai(n({},ui,{propertyName:0,elapsedTime:0,pseudoElement:0})),Zi=ai(n({},Fi,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0})),yi=[9,13,27,32],Xi=d&&"CompositionEvent"in window,Ei=null;d&&"documentMode"in document&&(Ei=document.documentMode);var fi=d&&"TextEvent"in window&&!Ei,Wi=d&&(!Xi||Ei&&8<Ei&&11>=Ei),Ni=String.fromCharCode(32),Ti=!1;function Yi(t,e){switch(t){case"keyup":return-1!==yi.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ji(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Hi=!1,ki={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function vi(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!ki[t.type]:"textarea"===e}function wi(t,e,i,l){Zt(l),0<(e=Xl(e,"onChange")).length&&(i=new di("onChange","change",null,i,l),t.push({event:i,listeners:e}))}var Mi=null,Di=null;function zi(t){Gl(t,0)}function Pi(t){if(_($l(t)))return t}function Oi(t,e){if("change"===t)return e}var ji=!1;if(d){var Ki;if(d){var _i="oninput"in document;if(!_i){var qi=document.createElement("div");qi.setAttribute("oninput","return;"),_i="function"==typeof qi.oninput}Ki=_i}else Ki=!1;ji=Ki&&(!document.documentMode||9<document.documentMode)}function $i(){Mi&&(Mi.detachEvent("onpropertychange",tl),Di=Mi=null)}function tl(t){if("value"===t.propertyName&&Pi(Di)){var e=[];if(wi(e,Di,t,Rt(t)),t=zi,Nt)t(e);else{Nt=!0;try{Xt(t,e)}finally{Nt=!1,Yt()}}}}function el(t,e,i){"focusin"===t?($i(),Di=i,(Mi=e).attachEvent("onpropertychange",tl)):"focusout"===t&&$i()}function il(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Pi(Di)}function ll(t,e){if("click"===t)return Pi(e)}function nl(t,e){if("input"===t||"change"===t)return Pi(e)}var sl="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},al=Object.prototype.hasOwnProperty;function cl(t,e){if(sl(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),l=Object.keys(e);if(i.length!==l.length)return!1;for(l=0;l<i.length;l++)if(!al.call(e,i[l])||!sl(t[i[l]],e[i[l]]))return!1;return!0}function gl(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Il(t,e){var i,l=gl(t);for(t=0;l;){if(3===l.nodeType){if(i=t+l.textContent.length,t<=e&&i>=e)return{node:l,offset:e-t};t=i}t:{for(;l;){if(l.nextSibling){l=l.nextSibling;break t}l=l.parentNode}l=void 0}l=gl(l)}}function ul(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?ul(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function dl(){for(var t=window,e=q();e instanceof t.HTMLIFrameElement;){try{var i="string"==typeof e.contentWindow.location.href}catch(t){i=!1}if(!i)break;e=q((t=e.contentWindow).document)}return e}function Bl(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var ol=d&&"documentMode"in document&&11>=document.documentMode,Fl=null,rl=null,Cl=null,Ul=!1;function Ql(t,e,i){var l=i.window===i?i.document:9===i.nodeType?i:i.ownerDocument;Ul||null==Fl||Fl!==q(l)||(l="selectionStart"in(l=Fl)&&Bl(l)?{start:l.selectionStart,end:l.selectionEnd}:{anchorNode:(l=(l.ownerDocument&&l.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:l.anchorOffset,focusNode:l.focusNode,focusOffset:l.focusOffset},Cl&&cl(Cl,l)||(Cl=l,0<(l=Xl(rl,"onSelect")).length&&(e=new di("onSelect","select",null,e,i),t.push({event:e,listeners:l}),e.target=Fl)))}fe("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),fe("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),fe(Ee,2);for(var bl="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vl=0;Vl<bl.length;Vl++)Xe.set(bl[Vl],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),I("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),I("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),I("onBeforeInput",["compositionend","keypress","textInput","paste"]),I("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),I("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),I("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Al="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xl=new Set("cancel close invalid load scroll toggle".split(" ").concat(Al));function pl(t,e,i){var l=t.type||"unknown-event";t.currentTarget=i,function(t,e,i,l,n,s,c,g,I){if(Ot.apply(this,arguments),wt){if(!wt)throw Error(a(198));var u=Mt;wt=!1,Mt=null,Dt||(Dt=!0,zt=u)}}(l,e,void 0,t),t.currentTarget=null}function Gl(t,e){e=0!=(4&e);for(var i=0;i<t.length;i++){var l=t[i],n=l.event;l=l.listeners;t:{var s=void 0;if(e)for(var a=l.length-1;0<=a;a--){var c=l[a],g=c.instance,I=c.currentTarget;if(c=c.listener,g!==s&&n.isPropagationStopped())break t;pl(n,c,I),s=g}else for(a=0;a<l.length;a++){if(g=(c=l[a]).instance,I=c.currentTarget,c=c.listener,g!==s&&n.isPropagationStopped())break t;pl(n,c,I),s=g}}}if(Dt)throw t=zt,Dt=!1,zt=null,t}function Rl(t,e){var i=en(e),l=t+"__bubble";i.has(l)||(Sl(e,t,2,!1),i.add(l))}var Ll="_reactListening"+Math.random().toString(36).slice(2);function hl(t){t[Ll]||(t[Ll]=!0,c.forEach((function(e){xl.has(e)||ml(e,!1,t,null),ml(e,!0,t,null)})))}function ml(t,e,i,l){var n=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,s=i;if("selectionchange"===t&&9!==i.nodeType&&(s=i.ownerDocument),null!==l&&!e&&xl.has(t)){if("scroll"!==t)return;n|=2,s=l}var a=en(s),c=t+"__"+(e?"capture":"bubble");a.has(c)||(e&&(n|=4),Sl(s,t,n,e),a.add(c))}function Sl(t,e,i,l){var n=Xe.get(e);switch(void 0===n?2:n){case 0:n=je;break;case 1:n=Ke;break;default:n=_e}i=n.bind(null,e,i,t),n=void 0,!Ht||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(n=!0),l?void 0!==n?t.addEventListener(e,i,{capture:!0,passive:n}):t.addEventListener(e,i,!0):void 0!==n?t.addEventListener(e,i,{passive:n}):t.addEventListener(e,i,!1)}function Zl(t,e,i,l,n){var s=l;if(0==(1&e)&&0==(2&e)&&null!==l)t:for(;;){if(null===l)return;var a=l.tag;if(3===a||4===a){var c=l.stateNode.containerInfo;if(c===n||8===c.nodeType&&c.parentNode===n)break;if(4===a)for(a=l.return;null!==a;){var g=a.tag;if((3===g||4===g)&&((g=a.stateNode.containerInfo)===n||8===g.nodeType&&g.parentNode===n))return;a=a.return}for(;null!==c;){if(null===(a=_l(c)))return;if(5===(g=a.tag)||6===g){l=s=a;continue t}c=c.parentNode}}l=l.return}!function(t,e,i){if(Tt)return t();Tt=!0;try{Wt(t,e,i)}finally{Tt=!1,Yt()}}((function(){var l=s,n=Rt(i),a=[];t:{var c=ye.get(t);if(void 0!==c){var g=di,I=t;switch(t){case"keypress":if(0===li(i))break t;case"keydown":case"keyup":g=Li;break;case"focusin":I="focus",g=Ui;break;case"focusout":I="blur",g=Ui;break;case"beforeblur":case"afterblur":g=Ui;break;case"click":if(2===i.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=ri;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=Ci;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=mi;break;case he:case me:case Se:g=Qi;break;case Ze:g=Si;break;case"scroll":g=oi;break;case"wheel":g=Zi;break;case"copy":case"cut":case"paste":g=bi;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=hi}var u=0!=(4&e),d=!u&&"scroll"===t,B=u?null!==c?c+"Capture":null:c;u=[];for(var o,F=l;null!==F;){var r=(o=F).stateNode;if(5===o.tag&&null!==r&&(o=r,null!==B&&null!=(r=Jt(F,B))&&u.push(yl(F,r,o))),d)break;F=F.return}0<u.length&&(c=new g(c,I,null,i,n),a.push({event:c,listeners:u}))}}if(0==(7&e)){if(g="mouseout"===t||"pointerout"===t,(!(c="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(I=i.relatedTarget||i.fromElement)||!_l(I)&&!I[jl])&&(g||c)&&(c=n.window===n?n:(c=n.ownerDocument)?c.defaultView||c.parentWindow:window,g?(g=l,null!==(I=(I=i.relatedTarget||i.toElement)?_l(I):null)&&(I!==(d=jt(I))||5!==I.tag&&6!==I.tag)&&(I=null)):(g=null,I=l),g!==I)){if(u=ri,r="onMouseLeave",B="onMouseEnter",F="mouse","pointerout"!==t&&"pointerover"!==t||(u=hi,r="onPointerLeave",B="onPointerEnter",F="pointer"),d=null==g?c:$l(g),o=null==I?c:$l(I),(c=new u(r,F+"leave",g,i,n)).target=d,c.relatedTarget=o,r=null,_l(n)===l&&((u=new u(B,F+"enter",I,i,n)).target=o,u.relatedTarget=d,r=u),d=r,g&&I)t:{for(B=I,F=0,o=u=g;o;o=El(o))F++;for(o=0,r=B;r;r=El(r))o++;for(;0<F-o;)u=El(u),F--;for(;0<o-F;)B=El(B),o--;for(;F--;){if(u===B||null!==B&&u===B.alternate)break t;u=El(u),B=El(B)}u=null}else u=null;null!==g&&fl(a,c,g,u,!1),null!==I&&null!==d&&fl(a,d,I,u,!0)}if("select"===(g=(c=l?$l(l):window).nodeName&&c.nodeName.toLowerCase())||"input"===g&&"file"===c.type)var C=Oi;else if(vi(c))if(ji)C=nl;else{C=il;var U=el}else(g=c.nodeName)&&"input"===g.toLowerCase()&&("checkbox"===c.type||"radio"===c.type)&&(C=ll);switch(C&&(C=C(t,l))?wi(a,C,i,n):(U&&U(t,c,l),"focusout"===t&&(U=c._wrapperState)&&U.controlled&&"number"===c.type&&nt(c,"number",c.value)),U=l?$l(l):window,t){case"focusin":(vi(U)||"true"===U.contentEditable)&&(Fl=U,rl=l,Cl=null);break;case"focusout":Cl=rl=Fl=null;break;case"mousedown":Ul=!0;break;case"contextmenu":case"mouseup":case"dragend":Ul=!1,Ql(a,i,n);break;case"selectionchange":if(ol)break;case"keydown":case"keyup":Ql(a,i,n)}var Q;if(Xi)t:{switch(t){case"compositionstart":var b="onCompositionStart";break t;case"compositionend":b="onCompositionEnd";break t;case"compositionupdate":b="onCompositionUpdate";break t}b=void 0}else Hi?Yi(t,i)&&(b="onCompositionEnd"):"keydown"===t&&229===i.keyCode&&(b="onCompositionStart");b&&(Wi&&"ko"!==i.locale&&(Hi||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hi&&(Q=ii()):(ti="value"in($e=n)?$e.value:$e.textContent,Hi=!0)),0<(U=Xl(l,b)).length&&(b=new Vi(b,t,null,i,n),a.push({event:b,listeners:U}),(Q||null!==(Q=Ji(i)))&&(b.data=Q))),(Q=fi?function(t,e){switch(t){case"compositionend":return Ji(e);case"keypress":return 32!==e.which?null:(Ti=!0,Ni);case"textInput":return(t=e.data)===Ni&&Ti?null:t;default:return null}}(t,i):function(t,e){if(Hi)return"compositionend"===t||!Xi&&Yi(t,e)?(t=ii(),ei=ti=$e=null,Hi=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Wi&&"ko"!==e.locale?null:e.data;default:return null}}(t,i))&&0<(l=Xl(l,"onBeforeInput")).length&&(n=new Vi("onBeforeInput","beforeinput",null,i,n),a.push({event:n,listeners:l}),n.data=Q)}Gl(a,e)}))}function yl(t,e,i){return{instance:t,listener:e,currentTarget:i}}function Xl(t,e){for(var i=e+"Capture",l=[];null!==t;){var n=t,s=n.stateNode;5===n.tag&&null!==s&&(n=s,null!=(s=Jt(t,i))&&l.unshift(yl(t,s,n)),null!=(s=Jt(t,e))&&l.push(yl(t,s,n))),t=t.return}return l}function El(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function fl(t,e,i,l,n){for(var s=e._reactName,a=[];null!==i&&i!==l;){var c=i,g=c.alternate,I=c.stateNode;if(null!==g&&g===l)break;5===c.tag&&null!==I&&(c=I,n?null!=(g=Jt(i,s))&&a.unshift(yl(i,g,c)):n||null!=(g=Jt(i,s))&&a.push(yl(i,g,c))),i=i.return}0!==a.length&&t.push({event:e,listeners:a})}function Wl(){}var Nl=null,Tl=null;function Yl(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Jl(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Hl="function"==typeof setTimeout?setTimeout:void 0,kl="function"==typeof clearTimeout?clearTimeout:void 0;function vl(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function wl(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Ml(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var i=t.data;if("$"===i||"$!"===i||"$?"===i){if(0===e)return t;e--}else"/$"===i&&e++}t=t.previousSibling}return null}var Dl=0,zl=Math.random().toString(36).slice(2),Pl="__reactFiber$"+zl,Ol="__reactProps$"+zl,jl="__reactContainer$"+zl,Kl="__reactEvents$"+zl;function _l(t){var e=t[Pl];if(e)return e;for(var i=t.parentNode;i;){if(e=i[jl]||i[Pl]){if(i=e.alternate,null!==e.child||null!==i&&null!==i.child)for(t=Ml(t);null!==t;){if(i=t[Pl])return i;t=Ml(t)}return e}i=(t=i).parentNode}return null}function ql(t){return!(t=t[Pl]||t[jl])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function $l(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function tn(t){return t[Ol]||null}function en(t){var e=t[Kl];return void 0===e&&(e=t[Kl]=new Set),e}var ln=[],nn=-1;function sn(t){return{current:t}}function an(t){0>nn||(t.current=ln[nn],ln[nn]=null,nn--)}function cn(t,e){nn++,ln[nn]=t.current,t.current=e}var gn={},In=sn(gn),un=sn(!1),dn=gn;function Bn(t,e){var i=t.type.contextTypes;if(!i)return gn;var l=t.stateNode;if(l&&l.__reactInternalMemoizedUnmaskedChildContext===e)return l.__reactInternalMemoizedMaskedChildContext;var n,s={};for(n in i)s[n]=e[n];return l&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=s),s}function on(t){return null!=t.childContextTypes}function Fn(){an(un),an(In)}function rn(t,e,i){if(In.current!==gn)throw Error(a(168));cn(In,e),cn(un,i)}function Cn(t,e,i){var l=t.stateNode;if(t=e.childContextTypes,"function"!=typeof l.getChildContext)return i;for(var s in l=l.getChildContext())if(!(s in t))throw Error(a(108,P(e)||"Unknown",s));return n({},i,l)}function Un(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||gn,dn=In.current,cn(In,t),cn(un,un.current),!0}function Qn(t,e,i){var l=t.stateNode;if(!l)throw Error(a(169));i?(t=Cn(t,e,dn),l.__reactInternalMemoizedMergedChildContext=t,an(un),an(In),cn(In,t)):an(un),cn(un,i)}var bn=null,Vn=null,An=s.unstable_runWithPriority,xn=s.unstable_scheduleCallback,pn=s.unstable_cancelCallback,Gn=s.unstable_shouldYield,Rn=s.unstable_requestPaint,Ln=s.unstable_now,hn=s.unstable_getCurrentPriorityLevel,mn=s.unstable_ImmediatePriority,Sn=s.unstable_UserBlockingPriority,Zn=s.unstable_NormalPriority,yn=s.unstable_LowPriority,Xn=s.unstable_IdlePriority,En={},fn=void 0!==Rn?Rn:function(){},Wn=null,Nn=null,Tn=!1,Yn=Ln(),Jn=1e4>Yn?Ln:function(){return Ln()-Yn};function Hn(){switch(hn()){case mn:return 99;case Sn:return 98;case Zn:return 97;case yn:return 96;case Xn:return 95;default:throw Error(a(332))}}function kn(t){switch(t){case 99:return mn;case 98:return Sn;case 97:return Zn;case 96:return yn;case 95:return Xn;default:throw Error(a(332))}}function vn(t,e){return t=kn(t),An(t,e)}function wn(t,e,i){return t=kn(t),xn(t,e,i)}function Mn(){if(null!==Nn){var t=Nn;Nn=null,pn(t)}Dn()}function Dn(){if(!Tn&&null!==Wn){Tn=!0;var t=0;try{var e=Wn;vn(99,(function(){for(;t<e.length;t++){var i=e[t];do{i=i(!0)}while(null!==i)}})),Wn=null}catch(e){throw null!==Wn&&(Wn=Wn.slice(t+1)),xn(mn,Mn),e}finally{Tn=!1}}}var zn=A.ReactCurrentBatchConfig;function Pn(t,e){if(t&&t.defaultProps){for(var i in e=n({},e),t=t.defaultProps)void 0===e[i]&&(e[i]=t[i]);return e}return e}var On=sn(null),jn=null,Kn=null,_n=null;function qn(){_n=Kn=jn=null}function $n(t){var e=On.current;an(On),t.type._context._currentValue=e}function ts(t,e){for(;null!==t;){var i=t.alternate;if((t.childLanes&e)===e){if(null===i||(i.childLanes&e)===e)break;i.childLanes|=e}else t.childLanes|=e,null!==i&&(i.childLanes|=e);t=t.return}}function es(t,e){jn=t,_n=Kn=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Xa=!0),t.firstContext=null)}function is(t,e){if(_n!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(_n=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Kn){if(null===jn)throw Error(a(308));Kn=e,jn.dependencies={lanes:0,firstContext:e,responders:null}}else Kn=Kn.next=e;return t._currentValue}var ls=!1;function ns(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ss(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function as(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function cs(t,e){if(null!==(t=t.updateQueue)){var i=(t=t.shared).pending;null===i?e.next=e:(e.next=i.next,i.next=e),t.pending=e}}function gs(t,e){var i=t.updateQueue,l=t.alternate;if(null!==l&&i===(l=l.updateQueue)){var n=null,s=null;if(null!==(i=i.firstBaseUpdate)){do{var a={eventTime:i.eventTime,lane:i.lane,tag:i.tag,payload:i.payload,callback:i.callback,next:null};null===s?n=s=a:s=s.next=a,i=i.next}while(null!==i);null===s?n=s=e:s=s.next=e}else n=s=e;return i={baseState:l.baseState,firstBaseUpdate:n,lastBaseUpdate:s,shared:l.shared,effects:l.effects},void(t.updateQueue=i)}null===(t=i.lastBaseUpdate)?i.firstBaseUpdate=e:t.next=e,i.lastBaseUpdate=e}function Is(t,e,i,l){var s=t.updateQueue;ls=!1;var a=s.firstBaseUpdate,c=s.lastBaseUpdate,g=s.shared.pending;if(null!==g){s.shared.pending=null;var I=g,u=I.next;I.next=null,null===c?a=u:c.next=u,c=I;var d=t.alternate;if(null!==d){var B=(d=d.updateQueue).lastBaseUpdate;B!==c&&(null===B?d.firstBaseUpdate=u:B.next=u,d.lastBaseUpdate=I)}}if(null!==a){for(B=s.baseState,c=0,d=u=I=null;;){g=a.lane;var o=a.eventTime;if((l&g)===g){null!==d&&(d=d.next={eventTime:o,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var F=t,r=a;switch(g=e,o=i,r.tag){case 1:if("function"==typeof(F=r.payload)){B=F.call(o,B,g);break t}B=F;break t;case 3:F.flags=-4097&F.flags|64;case 0:if(null==(g="function"==typeof(F=r.payload)?F.call(o,B,g):F))break t;B=n({},B,g);break t;case 2:ls=!0}}null!==a.callback&&(t.flags|=32,null===(g=s.effects)?s.effects=[a]:g.push(a))}else o={eventTime:o,lane:g,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=o,I=B):d=d.next=o,c|=g;if(null===(a=a.next)){if(null===(g=s.shared.pending))break;a=g.next,g.next=null,s.lastBaseUpdate=g,s.shared.pending=null}}null===d&&(I=B),s.baseState=I,s.firstBaseUpdate=u,s.lastBaseUpdate=d,fc|=c,t.lanes=c,t.memoizedState=B}}function us(t,e,i){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var l=t[e],n=l.callback;if(null!==n){if(l.callback=null,l=i,"function"!=typeof n)throw Error(a(191,n));n.call(l)}}}var ds=(new l.Component).refs;function Bs(t,e,i,l){i=null==(i=i(l,e=t.memoizedState))?e:n({},e,i),t.memoizedState=i,0===t.lanes&&(t.updateQueue.baseState=i)}var os={isMounted:function(t){return!!(t=t._reactInternals)&&jt(t)===t},enqueueSetState:function(t,e,i){t=t._reactInternals;var l=sg(),n=ag(t),s=as(l,n);s.payload=e,null!=i&&(s.callback=i),cs(t,s),cg(t,n,l)},enqueueReplaceState:function(t,e,i){t=t._reactInternals;var l=sg(),n=ag(t),s=as(l,n);s.tag=1,s.payload=e,null!=i&&(s.callback=i),cs(t,s),cg(t,n,l)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var i=sg(),l=ag(t),n=as(i,l);n.tag=2,null!=e&&(n.callback=e),cs(t,n),cg(t,l,i)}};function Fs(t,e,i,l,n,s,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(l,s,a):!(e.prototype&&e.prototype.isPureReactComponent&&cl(i,l)&&cl(n,s))}function rs(t,e,i){var l=!1,n=gn,s=e.contextType;return"object"==typeof s&&null!==s?s=is(s):(n=on(e)?dn:In.current,s=(l=null!=(l=e.contextTypes))?Bn(t,n):gn),e=new e(i,s),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=os,t.stateNode=e,e._reactInternals=t,l&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,t.__reactInternalMemoizedMaskedChildContext=s),e}function Cs(t,e,i,l){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(i,l),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(i,l),e.state!==t&&os.enqueueReplaceState(e,e.state,null)}function Us(t,e,i,l){var n=t.stateNode;n.props=i,n.state=t.memoizedState,n.refs=ds,ns(t);var s=e.contextType;"object"==typeof s&&null!==s?n.context=is(s):(s=on(e)?dn:In.current,n.context=Bn(t,s)),Is(t,i,n,l),n.state=t.memoizedState,"function"==typeof(s=e.getDerivedStateFromProps)&&(Bs(t,e,s,i),n.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof n.getSnapshotBeforeUpdate||"function"!=typeof n.UNSAFE_componentWillMount&&"function"!=typeof n.componentWillMount||(e=n.state,"function"==typeof n.componentWillMount&&n.componentWillMount(),"function"==typeof n.UNSAFE_componentWillMount&&n.UNSAFE_componentWillMount(),e!==n.state&&os.enqueueReplaceState(n,n.state,null),Is(t,i,n,l),n.state=t.memoizedState),"function"==typeof n.componentDidMount&&(t.flags|=4)}var Qs=Array.isArray;function bs(t,e,i){if(null!==(t=i.ref)&&"function"!=typeof t&&"object"!=typeof t){if(i._owner){if(i=i._owner){if(1!==i.tag)throw Error(a(309));var l=i.stateNode}if(!l)throw Error(a(147,t));var n=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===n?e.ref:((e=function(t){var e=l.refs;e===ds&&(e=l.refs={}),null===t?delete e[n]:e[n]=t})._stringRef=n,e)}if("string"!=typeof t)throw Error(a(284));if(!i._owner)throw Error(a(290,t))}return t}function Vs(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function As(t){function e(e,i){if(t){var l=e.lastEffect;null!==l?(l.nextEffect=i,e.lastEffect=i):e.firstEffect=e.lastEffect=i,i.nextEffect=null,i.flags=8}}function i(i,l){if(!t)return null;for(;null!==l;)e(i,l),l=l.sibling;return null}function l(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function n(t,e){return(t=Jg(t,e)).index=0,t.sibling=null,t}function s(e,i,l){return e.index=l,t?null!==(l=e.alternate)?(l=l.index)<i?(e.flags=2,i):l:(e.flags=2,i):i}function c(e){return t&&null===e.alternate&&(e.flags=2),e}function g(t,e,i,l){return null===e||6!==e.tag?((e=wg(i,t.mode,l)).return=t,e):((e=n(e,i)).return=t,e)}function I(t,e,i,l){return null!==e&&e.elementType===i.type?((l=n(e,i.props)).ref=bs(t,e,i),l.return=t,l):((l=Hg(i.type,i.key,i.props,null,t.mode,l)).ref=bs(t,e,i),l.return=t,l)}function u(t,e,i,l){return null===e||4!==e.tag||e.stateNode.containerInfo!==i.containerInfo||e.stateNode.implementation!==i.implementation?((e=Mg(i,t.mode,l)).return=t,e):((e=n(e,i.children||[])).return=t,e)}function d(t,e,i,l,s){return null===e||7!==e.tag?((e=kg(i,t.mode,l,s)).return=t,e):((e=n(e,i)).return=t,e)}function B(t,e,i){if("string"==typeof e||"number"==typeof e)return(e=wg(""+e,t.mode,i)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case x:return(i=Hg(e.type,e.key,e.props,null,t.mode,i)).ref=bs(t,null,e),i.return=t,i;case p:return(e=Mg(e,t.mode,i)).return=t,e}if(Qs(e)||v(e))return(e=kg(e,t.mode,i,null)).return=t,e;Vs(t,e)}return null}function o(t,e,i,l){var n=null!==e?e.key:null;if("string"==typeof i||"number"==typeof i)return null!==n?null:g(t,e,""+i,l);if("object"==typeof i&&null!==i){switch(i.$$typeof){case x:return i.key===n?i.type===G?d(t,e,i.props.children,l,n):I(t,e,i,l):null;case p:return i.key===n?u(t,e,i,l):null}if(Qs(i)||v(i))return null!==n?null:d(t,e,i,l,null);Vs(t,i)}return null}function F(t,e,i,l,n){if("string"==typeof l||"number"==typeof l)return g(e,t=t.get(i)||null,""+l,n);if("object"==typeof l&&null!==l){switch(l.$$typeof){case x:return t=t.get(null===l.key?i:l.key)||null,l.type===G?d(e,t,l.props.children,n,l.key):I(e,t,l,n);case p:return u(e,t=t.get(null===l.key?i:l.key)||null,l,n)}if(Qs(l)||v(l))return d(e,t=t.get(i)||null,l,n,null);Vs(e,l)}return null}function r(n,a,c,g){for(var I=null,u=null,d=a,r=a=0,C=null;null!==d&&r<c.length;r++){d.index>r?(C=d,d=null):C=d.sibling;var U=o(n,d,c[r],g);if(null===U){null===d&&(d=C);break}t&&d&&null===U.alternate&&e(n,d),a=s(U,a,r),null===u?I=U:u.sibling=U,u=U,d=C}if(r===c.length)return i(n,d),I;if(null===d){for(;r<c.length;r++)null!==(d=B(n,c[r],g))&&(a=s(d,a,r),null===u?I=d:u.sibling=d,u=d);return I}for(d=l(n,d);r<c.length;r++)null!==(C=F(d,n,r,c[r],g))&&(t&&null!==C.alternate&&d.delete(null===C.key?r:C.key),a=s(C,a,r),null===u?I=C:u.sibling=C,u=C);return t&&d.forEach((function(t){return e(n,t)})),I}function C(n,c,g,I){var u=v(g);if("function"!=typeof u)throw Error(a(150));if(null==(g=u.call(g)))throw Error(a(151));for(var d=u=null,r=c,C=c=0,U=null,Q=g.next();null!==r&&!Q.done;C++,Q=g.next()){r.index>C?(U=r,r=null):U=r.sibling;var b=o(n,r,Q.value,I);if(null===b){null===r&&(r=U);break}t&&r&&null===b.alternate&&e(n,r),c=s(b,c,C),null===d?u=b:d.sibling=b,d=b,r=U}if(Q.done)return i(n,r),u;if(null===r){for(;!Q.done;C++,Q=g.next())null!==(Q=B(n,Q.value,I))&&(c=s(Q,c,C),null===d?u=Q:d.sibling=Q,d=Q);return u}for(r=l(n,r);!Q.done;C++,Q=g.next())null!==(Q=F(r,n,C,Q.value,I))&&(t&&null!==Q.alternate&&r.delete(null===Q.key?C:Q.key),c=s(Q,c,C),null===d?u=Q:d.sibling=Q,d=Q);return t&&r.forEach((function(t){return e(n,t)})),u}return function(t,l,s,g){var I="object"==typeof s&&null!==s&&s.type===G&&null===s.key;I&&(s=s.props.children);var u="object"==typeof s&&null!==s;if(u)switch(s.$$typeof){case x:t:{for(u=s.key,I=l;null!==I;){if(I.key===u){switch(I.tag){case 7:if(s.type===G){i(t,I.sibling),(l=n(I,s.props.children)).return=t,t=l;break t}break;default:if(I.elementType===s.type){i(t,I.sibling),(l=n(I,s.props)).ref=bs(t,I,s),l.return=t,t=l;break t}}i(t,I);break}e(t,I),I=I.sibling}s.type===G?((l=kg(s.props.children,t.mode,g,s.key)).return=t,t=l):((g=Hg(s.type,s.key,s.props,null,t.mode,g)).ref=bs(t,l,s),g.return=t,t=g)}return c(t);case p:t:{for(I=s.key;null!==l;){if(l.key===I){if(4===l.tag&&l.stateNode.containerInfo===s.containerInfo&&l.stateNode.implementation===s.implementation){i(t,l.sibling),(l=n(l,s.children||[])).return=t,t=l;break t}i(t,l);break}e(t,l),l=l.sibling}(l=Mg(s,t.mode,g)).return=t,t=l}return c(t)}if("string"==typeof s||"number"==typeof s)return s=""+s,null!==l&&6===l.tag?(i(t,l.sibling),(l=n(l,s)).return=t,t=l):(i(t,l),(l=wg(s,t.mode,g)).return=t,t=l),c(t);if(Qs(s))return r(t,l,s,g);if(v(s))return C(t,l,s,g);if(u&&Vs(t,s),void 0===s&&!I)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,P(t.type)||"Component"))}return i(t,l)}}var xs=As(!0),ps=As(!1),Gs={},Rs=sn(Gs),Ls=sn(Gs),hs=sn(Gs);function ms(t){if(t===Gs)throw Error(a(174));return t}function Ss(t,e){switch(cn(hs,e),cn(Ls,t),cn(Rs,Gs),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ot(null,"");break;default:e=ot(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}an(Rs),cn(Rs,e)}function Zs(){an(Rs),an(Ls),an(hs)}function ys(t){ms(hs.current);var e=ms(Rs.current),i=ot(e,t.type);e!==i&&(cn(Ls,t),cn(Rs,i))}function Xs(t){Ls.current===t&&(an(Rs),an(Ls))}var Es=sn(0);function fs(t){for(var e=t;null!==e;){if(13===e.tag){var i=e.memoizedState;if(null!==i&&(null===(i=i.dehydrated)||"$?"===i.data||"$!"===i.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Ws=null,Ns=null,Ts=!1;function Ys(t,e){var i=Tg(5,null,null,0);i.elementType="DELETED",i.type="DELETED",i.stateNode=e,i.return=t,i.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=i,t.lastEffect=i):t.firstEffect=t.lastEffect=i}function Js(t,e){switch(t.tag){case 5:var i=t.type;return null!==(e=1!==e.nodeType||i.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);case 13:default:return!1}}function Hs(t){if(Ts){var e=Ns;if(e){var i=e;if(!Js(t,e)){if(!(e=wl(i.nextSibling))||!Js(t,e))return t.flags=-1025&t.flags|2,Ts=!1,void(Ws=t);Ys(Ws,i)}Ws=t,Ns=wl(e.firstChild)}else t.flags=-1025&t.flags|2,Ts=!1,Ws=t}}function ks(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Ws=t}function vs(t){if(t!==Ws)return!1;if(!Ts)return ks(t),Ts=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Jl(e,t.memoizedProps))for(e=Ns;e;)Ys(t,e),e=wl(e.nextSibling);if(ks(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var i=t.data;if("/$"===i){if(0===e){Ns=wl(t.nextSibling);break t}e--}else"$"!==i&&"$!"!==i&&"$?"!==i||e++}t=t.nextSibling}Ns=null}}else Ns=Ws?wl(t.stateNode.nextSibling):null;return!0}function ws(){Ns=Ws=null,Ts=!1}var Ms=[];function Ds(){for(var t=0;t<Ms.length;t++)Ms[t]._workInProgressVersionPrimary=null;Ms.length=0}var zs=A.ReactCurrentDispatcher,Ps=A.ReactCurrentBatchConfig,Os=0,js=null,Ks=null,_s=null,qs=!1,$s=!1;function ta(){throw Error(a(321))}function ea(t,e){if(null===e)return!1;for(var i=0;i<e.length&&i<t.length;i++)if(!sl(t[i],e[i]))return!1;return!0}function ia(t,e,i,l,n,s){if(Os=s,js=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,zs.current=null===t||null===t.memoizedState?ma:Sa,t=i(l,n),$s){s=0;do{if($s=!1,!(25>s))throw Error(a(301));s+=1,_s=Ks=null,e.updateQueue=null,zs.current=Za,t=i(l,n)}while($s)}if(zs.current=ha,e=null!==Ks&&null!==Ks.next,Os=0,_s=Ks=js=null,qs=!1,e)throw Error(a(300));return t}function la(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===_s?js.memoizedState=_s=t:_s=_s.next=t,_s}function na(){if(null===Ks){var t=js.alternate;t=null!==t?t.memoizedState:null}else t=Ks.next;var e=null===_s?js.memoizedState:_s.next;if(null!==e)_s=e,Ks=t;else{if(null===t)throw Error(a(310));t={memoizedState:(Ks=t).memoizedState,baseState:Ks.baseState,baseQueue:Ks.baseQueue,queue:Ks.queue,next:null},null===_s?js.memoizedState=_s=t:_s=_s.next=t}return _s}function sa(t,e){return"function"==typeof e?e(t):e}function aa(t){var e=na(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var l=Ks,n=l.baseQueue,s=i.pending;if(null!==s){if(null!==n){var c=n.next;n.next=s.next,s.next=c}l.baseQueue=n=s,i.pending=null}if(null!==n){n=n.next,l=l.baseState;var g=c=s=null,I=n;do{var u=I.lane;if((Os&u)===u)null!==g&&(g=g.next={lane:0,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null}),l=I.eagerReducer===t?I.eagerState:t(l,I.action);else{var d={lane:u,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null};null===g?(c=g=d,s=l):g=g.next=d,js.lanes|=u,fc|=u}I=I.next}while(null!==I&&I!==n);null===g?s=l:g.next=c,sl(l,e.memoizedState)||(Xa=!0),e.memoizedState=l,e.baseState=s,e.baseQueue=g,i.lastRenderedState=l}return[e.memoizedState,i.dispatch]}function ca(t){var e=na(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var l=i.dispatch,n=i.pending,s=e.memoizedState;if(null!==n){i.pending=null;var c=n=n.next;do{s=t(s,c.action),c=c.next}while(c!==n);sl(s,e.memoizedState)||(Xa=!0),e.memoizedState=s,null===e.baseQueue&&(e.baseState=s),i.lastRenderedState=s}return[s,l]}function ga(t,e,i){var l=e._getVersion;l=l(e._source);var n=e._workInProgressVersionPrimary;if(null!==n?t=n===l:(t=t.mutableReadLanes,(t=(Os&t)===t)&&(e._workInProgressVersionPrimary=l,Ms.push(e))),t)return i(e._source);throw Ms.push(e),Error(a(350))}function Ia(t,e,i,l){var n=Lc;if(null===n)throw Error(a(349));var s=e._getVersion,c=s(e._source),g=zs.current,I=g.useState((function(){return ga(n,e,i)})),u=I[1],d=I[0];I=_s;var B=t.memoizedState,o=B.refs,F=o.getSnapshot,r=B.source;B=B.subscribe;var C=js;return t.memoizedState={refs:o,source:e,subscribe:l},g.useEffect((function(){o.getSnapshot=i,o.setSnapshot=u;var t=s(e._source);if(!sl(c,t)){t=i(e._source),sl(d,t)||(u(t),t=ag(C),n.mutableReadLanes|=t&n.pendingLanes),t=n.mutableReadLanes,n.entangledLanes|=t;for(var l=n.entanglements,a=t;0<a;){var g=31-we(a),I=1<<g;l[g]|=t,a&=~I}}}),[i,e,l]),g.useEffect((function(){return l(e._source,(function(){var t=o.getSnapshot,i=o.setSnapshot;try{i(t(e._source));var l=ag(C);n.mutableReadLanes|=l&n.pendingLanes}catch(t){i((function(){throw t}))}}))}),[e,l]),sl(F,i)&&sl(r,e)&&sl(B,l)||((t={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:d}).dispatch=u=La.bind(null,js,t),I.queue=t,I.baseQueue=null,d=ga(n,e,i),I.memoizedState=I.baseState=d),d}function ua(t,e,i){return Ia(na(),t,e,i)}function da(t){var e=la();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:t}).dispatch=La.bind(null,js,t),[e.memoizedState,t]}function Ba(t,e,i,l){return t={tag:t,create:e,destroy:i,deps:l,next:null},null===(e=js.updateQueue)?(e={lastEffect:null},js.updateQueue=e,e.lastEffect=t.next=t):null===(i=e.lastEffect)?e.lastEffect=t.next=t:(l=i.next,i.next=t,t.next=l,e.lastEffect=t),t}function oa(t){return t={current:t},la().memoizedState=t}function Fa(){return na().memoizedState}function ra(t,e,i,l){var n=la();js.flags|=t,n.memoizedState=Ba(1|e,i,void 0,void 0===l?null:l)}function Ca(t,e,i,l){var n=na();l=void 0===l?null:l;var s=void 0;if(null!==Ks){var a=Ks.memoizedState;if(s=a.destroy,null!==l&&ea(l,a.deps))return void Ba(e,i,s,l)}js.flags|=t,n.memoizedState=Ba(1|e,i,s,l)}function Ua(t,e){return ra(516,4,t,e)}function Qa(t,e){return Ca(516,4,t,e)}function ba(t,e){return Ca(4,2,t,e)}function Va(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Aa(t,e,i){return i=null!=i?i.concat([t]):null,Ca(4,2,Va.bind(null,e,t),i)}function xa(){}function pa(t,e){var i=na();e=void 0===e?null:e;var l=i.memoizedState;return null!==l&&null!==e&&ea(e,l[1])?l[0]:(i.memoizedState=[t,e],t)}function Ga(t,e){var i=na();e=void 0===e?null:e;var l=i.memoizedState;return null!==l&&null!==e&&ea(e,l[1])?l[0]:(t=t(),i.memoizedState=[t,e],t)}function Ra(t,e){var i=Hn();vn(98>i?98:i,(function(){t(!0)})),vn(97<i?97:i,(function(){var i=Ps.transition;Ps.transition=1;try{t(!1),e()}finally{Ps.transition=i}}))}function La(t,e,i){var l=sg(),n=ag(t),s={lane:n,action:i,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?s.next=s:(s.next=a.next,a.next=s),e.pending=s,a=t.alternate,t===js||null!==a&&a===js)$s=qs=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var c=e.lastRenderedState,g=a(c,i);if(s.eagerReducer=a,s.eagerState=g,sl(g,c))return}catch(t){}cg(t,n,l)}}var ha={readContext:is,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},ma={readContext:is,useCallback:function(t,e){return la().memoizedState=[t,void 0===e?null:e],t},useContext:is,useEffect:Ua,useImperativeHandle:function(t,e,i){return i=null!=i?i.concat([t]):null,ra(4,2,Va.bind(null,e,t),i)},useLayoutEffect:function(t,e){return ra(4,2,t,e)},useMemo:function(t,e){var i=la();return e=void 0===e?null:e,t=t(),i.memoizedState=[t,e],t},useReducer:function(t,e,i){var l=la();return e=void 0!==i?i(e):e,l.memoizedState=l.baseState=e,t=(t=l.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=La.bind(null,js,t),[l.memoizedState,t]},useRef:oa,useState:da,useDebugValue:xa,useDeferredValue:function(t){var e=da(t),i=e[0],l=e[1];return Ua((function(){var e=Ps.transition;Ps.transition=1;try{l(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=da(!1),e=t[0];return oa(t=Ra.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,i){var l=la();return l.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:i},Ia(l,t,e,i)},useOpaqueIdentifier:function(){if(Ts){var t=!1,e=function(t){return{$$typeof:W,toString:t,valueOf:t}}((function(){throw t||(t=!0,i("r:"+(Dl++).toString(36))),Error(a(355))})),i=da(e)[1];return 0==(2&js.mode)&&(js.flags|=516,Ba(5,(function(){i("r:"+(Dl++).toString(36))}),void 0,null)),e}return da(e="r:"+(Dl++).toString(36)),e},unstable_isNewReconciler:!1},Sa={readContext:is,useCallback:pa,useContext:is,useEffect:Qa,useImperativeHandle:Aa,useLayoutEffect:ba,useMemo:Ga,useReducer:aa,useRef:Fa,useState:function(){return aa(sa)},useDebugValue:xa,useDeferredValue:function(t){var e=aa(sa),i=e[0],l=e[1];return Qa((function(){var e=Ps.transition;Ps.transition=1;try{l(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=aa(sa)[0];return[Fa().current,t]},useMutableSource:ua,useOpaqueIdentifier:function(){return aa(sa)[0]},unstable_isNewReconciler:!1},Za={readContext:is,useCallback:pa,useContext:is,useEffect:Qa,useImperativeHandle:Aa,useLayoutEffect:ba,useMemo:Ga,useReducer:ca,useRef:Fa,useState:function(){return ca(sa)},useDebugValue:xa,useDeferredValue:function(t){var e=ca(sa),i=e[0],l=e[1];return Qa((function(){var e=Ps.transition;Ps.transition=1;try{l(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=ca(sa)[0];return[Fa().current,t]},useMutableSource:ua,useOpaqueIdentifier:function(){return ca(sa)[0]},unstable_isNewReconciler:!1},ya=A.ReactCurrentOwner,Xa=!1;function Ea(t,e,i,l){e.child=null===t?ps(e,null,i,l):xs(e,t.child,i,l)}function fa(t,e,i,l,n){i=i.render;var s=e.ref;return es(e,n),l=ia(t,e,i,l,s,n),null===t||Xa?(e.flags|=1,Ea(t,e,l,n),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~n,qa(t,e,n))}function Wa(t,e,i,l,n,s){if(null===t){var a=i.type;return"function"!=typeof a||Yg(a)||void 0!==a.defaultProps||null!==i.compare||void 0!==i.defaultProps?((t=Hg(i.type,null,l,e,e.mode,s)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Na(t,e,a,l,n,s))}return a=t.child,0==(n&s)&&(n=a.memoizedProps,(i=null!==(i=i.compare)?i:cl)(n,l)&&t.ref===e.ref)?qa(t,e,s):(e.flags|=1,(t=Jg(a,l)).ref=e.ref,t.return=e,e.child=t)}function Na(t,e,i,l,n,s){if(null!==t&&cl(t.memoizedProps,l)&&t.ref===e.ref){if(Xa=!1,0==(s&n))return e.lanes=t.lanes,qa(t,e,s);0!=(16384&t.flags)&&(Xa=!0)}return Ja(t,e,i,l,s)}function Ta(t,e,i){var l=e.pendingProps,n=l.children,s=null!==t?t.memoizedState:null;if("hidden"===l.mode||"unstable-defer-without-hiding"===l.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},rg(0,i);else{if(0==(1073741824&i))return t=null!==s?s.baseLanes|i:i,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},rg(0,t),null;e.memoizedState={baseLanes:0},rg(0,null!==s?s.baseLanes:i)}else null!==s?(l=s.baseLanes|i,e.memoizedState=null):l=i,rg(0,l);return Ea(t,e,n,i),e.child}function Ya(t,e){var i=e.ref;(null===t&&null!==i||null!==t&&t.ref!==i)&&(e.flags|=128)}function Ja(t,e,i,l,n){var s=on(i)?dn:In.current;return s=Bn(e,s),es(e,n),i=ia(t,e,i,l,s,n),null===t||Xa?(e.flags|=1,Ea(t,e,i,n),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~n,qa(t,e,n))}function Ha(t,e,i,l,n){if(on(i)){var s=!0;Un(e)}else s=!1;if(es(e,n),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),rs(e,i,l),Us(e,i,l,n),l=!0;else if(null===t){var a=e.stateNode,c=e.memoizedProps;a.props=c;var g=a.context,I=i.contextType;I="object"==typeof I&&null!==I?is(I):Bn(e,I=on(i)?dn:In.current);var u=i.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==l||g!==I)&&Cs(e,a,l,I),ls=!1;var B=e.memoizedState;a.state=B,Is(e,l,a,n),g=e.memoizedState,c!==l||B!==g||un.current||ls?("function"==typeof u&&(Bs(e,i,u,l),g=e.memoizedState),(c=ls||Fs(e,i,c,l,B,g,I))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=l,e.memoizedState=g),a.props=l,a.state=g,a.context=I,l=c):("function"==typeof a.componentDidMount&&(e.flags|=4),l=!1)}else{a=e.stateNode,ss(t,e),c=e.memoizedProps,I=e.type===e.elementType?c:Pn(e.type,c),a.props=I,d=e.pendingProps,B=a.context,g="object"==typeof(g=i.contextType)&&null!==g?is(g):Bn(e,g=on(i)?dn:In.current);var o=i.getDerivedStateFromProps;(u="function"==typeof o||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==d||B!==g)&&Cs(e,a,l,g),ls=!1,B=e.memoizedState,a.state=B,Is(e,l,a,n);var F=e.memoizedState;c!==d||B!==F||un.current||ls?("function"==typeof o&&(Bs(e,i,o,l),F=e.memoizedState),(I=ls||Fs(e,i,I,l,B,F,g))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(l,F,g),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(l,F,g)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=256),e.memoizedProps=l,e.memoizedState=F),a.props=l,a.state=F,a.context=g,l=I):("function"!=typeof a.componentDidUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=256),l=!1)}return ka(t,e,i,l,s,n)}function ka(t,e,i,l,n,s){Ya(t,e);var a=0!=(64&e.flags);if(!l&&!a)return n&&Qn(e,i,!1),qa(t,e,s);l=e.stateNode,ya.current=e;var c=a&&"function"!=typeof i.getDerivedStateFromError?null:l.render();return e.flags|=1,null!==t&&a?(e.child=xs(e,t.child,null,s),e.child=xs(e,null,c,s)):Ea(t,e,c,s),e.memoizedState=l.state,n&&Qn(e,i,!0),e.child}function va(t){var e=t.stateNode;e.pendingContext?rn(0,e.pendingContext,e.pendingContext!==e.context):e.context&&rn(0,e.context,!1),Ss(t,e.containerInfo)}var wa,Ma,Da,za={dehydrated:null,retryLane:0};function Pa(t,e,i){var l,n=e.pendingProps,s=Es.current,a=!1;return(l=0!=(64&e.flags))||(l=(null===t||null!==t.memoizedState)&&0!=(2&s)),l?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===n.fallback||!0===n.unstable_avoidThisFallback||(s|=1),cn(Es,1&s),null===t?(void 0!==n.fallback&&Hs(e),t=n.children,s=n.fallback,a?(t=Oa(e,t,s,i),e.child.memoizedState={baseLanes:i},e.memoizedState=za,t):"number"==typeof n.unstable_expectedLoadTime?(t=Oa(e,t,s,i),e.child.memoizedState={baseLanes:i},e.memoizedState=za,e.lanes=33554432,t):((i=vg({mode:"visible",children:t},e.mode,i,null)).return=e,e.child=i)):(t.memoizedState,a?(n=function(t,e,i,l,n){var s=e.mode,a=t.child;t=a.sibling;var c={mode:"hidden",children:i};return 0==(2&s)&&e.child!==a?((i=e.child).childLanes=0,i.pendingProps=c,null!==(a=i.lastEffect)?(e.firstEffect=i.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):i=Jg(a,c),null!==t?l=Jg(t,l):(l=kg(l,s,n,null)).flags|=2,l.return=e,i.return=e,i.sibling=l,e.child=i,l}(t,e,n.children,n.fallback,i),a=e.child,s=t.child.memoizedState,a.memoizedState=null===s?{baseLanes:i}:{baseLanes:s.baseLanes|i},a.childLanes=t.childLanes&~i,e.memoizedState=za,n):(i=function(t,e,i,l){var n=t.child;return t=n.sibling,i=Jg(n,{mode:"visible",children:i}),0==(2&e.mode)&&(i.lanes=l),i.return=e,i.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=i}(t,e,n.children,i),e.memoizedState=null,i))}function Oa(t,e,i,l){var n=t.mode,s=t.child;return e={mode:"hidden",children:e},0==(2&n)&&null!==s?(s.childLanes=0,s.pendingProps=e):s=vg(e,n,0,null),i=kg(i,n,l,null),s.return=t,i.return=t,s.sibling=i,t.child=s,i}function ja(t,e){t.lanes|=e;var i=t.alternate;null!==i&&(i.lanes|=e),ts(t.return,e)}function Ka(t,e,i,l,n,s){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:l,tail:i,tailMode:n,lastEffect:s}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=l,a.tail=i,a.tailMode=n,a.lastEffect=s)}function _a(t,e,i){var l=e.pendingProps,n=l.revealOrder,s=l.tail;if(Ea(t,e,l.children,i),0!=(2&(l=Es.current)))l=1&l|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&ja(t,i);else if(19===t.tag)ja(t,i);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}l&=1}if(cn(Es,l),0==(2&e.mode))e.memoizedState=null;else switch(n){case"forwards":for(i=e.child,n=null;null!==i;)null!==(t=i.alternate)&&null===fs(t)&&(n=i),i=i.sibling;null===(i=n)?(n=e.child,e.child=null):(n=i.sibling,i.sibling=null),Ka(e,!1,n,i,s,e.lastEffect);break;case"backwards":for(i=null,n=e.child,e.child=null;null!==n;){if(null!==(t=n.alternate)&&null===fs(t)){e.child=n;break}t=n.sibling,n.sibling=i,i=n,n=t}Ka(e,!0,i,null,s,e.lastEffect);break;case"together":Ka(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function qa(t,e,i){if(null!==t&&(e.dependencies=t.dependencies),fc|=e.lanes,0!=(i&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(i=Jg(t=e.child,t.pendingProps),e.child=i,i.return=e;null!==t.sibling;)t=t.sibling,(i=i.sibling=Jg(t,t.pendingProps)).return=e;i.sibling=null}return e.child}return null}function $a(t,e){if(!Ts)switch(t.tailMode){case"hidden":e=t.tail;for(var i=null;null!==e;)null!==e.alternate&&(i=e),e=e.sibling;null===i?t.tail=null:i.sibling=null;break;case"collapsed":i=t.tail;for(var l=null;null!==i;)null!==i.alternate&&(l=i),i=i.sibling;null===l?e||null===t.tail?t.tail=null:t.tail.sibling=null:l.sibling=null}}function tc(t,e,i){var l=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return on(e.type)&&Fn(),null;case 3:return Zs(),an(un),an(In),Ds(),(l=e.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==t&&null!==t.child||(vs(e)?e.flags|=4:l.hydrate||(e.flags|=256)),null;case 5:Xs(e);var s=ms(hs.current);if(i=e.type,null!==t&&null!=e.stateNode)Ma(t,e,i,l),t.ref!==e.ref&&(e.flags|=128);else{if(!l){if(null===e.stateNode)throw Error(a(166));return null}if(t=ms(Rs.current),vs(e)){l=e.stateNode,i=e.type;var c=e.memoizedProps;switch(l[Pl]=e,l[Ol]=c,i){case"dialog":Rl("cancel",l),Rl("close",l);break;case"iframe":case"object":case"embed":Rl("load",l);break;case"video":case"audio":for(t=0;t<Al.length;t++)Rl(Al[t],l);break;case"source":Rl("error",l);break;case"img":case"image":case"link":Rl("error",l),Rl("load",l);break;case"details":Rl("toggle",l);break;case"input":tt(l,c),Rl("invalid",l);break;case"select":l._wrapperState={wasMultiple:!!c.multiple},Rl("invalid",l);break;case"textarea":gt(l,c),Rl("invalid",l)}for(var I in pt(i,c),t=null,c)c.hasOwnProperty(I)&&(s=c[I],"children"===I?"string"==typeof s?l.textContent!==s&&(t=["children",s]):"number"==typeof s&&l.textContent!==""+s&&(t=["children",""+s]):g.hasOwnProperty(I)&&null!=s&&"onScroll"===I&&Rl("scroll",l));switch(i){case"input":K(l),lt(l,c,!0);break;case"textarea":K(l),ut(l);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(l.onclick=Wl)}l=t,e.updateQueue=l,null!==l&&(e.flags|=4)}else{switch(I=9===s.nodeType?s:s.ownerDocument,t===dt&&(t=Bt(i)),t===dt?"script"===i?((t=I.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof l.is?t=I.createElement(i,{is:l.is}):(t=I.createElement(i),"select"===i&&(I=t,l.multiple?I.multiple=!0:l.size&&(I.size=l.size))):t=I.createElementNS(t,i),t[Pl]=e,t[Ol]=l,wa(t,e),e.stateNode=t,I=Gt(i,l),i){case"dialog":Rl("cancel",t),Rl("close",t),s=l;break;case"iframe":case"object":case"embed":Rl("load",t),s=l;break;case"video":case"audio":for(s=0;s<Al.length;s++)Rl(Al[s],t);s=l;break;case"source":Rl("error",t),s=l;break;case"img":case"image":case"link":Rl("error",t),Rl("load",t),s=l;break;case"details":Rl("toggle",t),s=l;break;case"input":tt(t,l),s=$(t,l),Rl("invalid",t);break;case"option":s=st(t,l);break;case"select":t._wrapperState={wasMultiple:!!l.multiple},s=n({},l,{value:void 0}),Rl("invalid",t);break;case"textarea":gt(t,l),s=ct(t,l),Rl("invalid",t);break;default:s=l}pt(i,s);var u=s;for(c in u)if(u.hasOwnProperty(c)){var d=u[c];"style"===c?At(t,d):"dangerouslySetInnerHTML"===c?null!=(d=d?d.__html:void 0)&&Ct(t,d):"children"===c?"string"==typeof d?("textarea"!==i||""!==d)&&Ut(t,d):"number"==typeof d&&Ut(t,""+d):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(g.hasOwnProperty(c)?null!=d&&"onScroll"===c&&Rl("scroll",t):null!=d&&V(t,c,d,I))}switch(i){case"input":K(t),lt(t,l,!1);break;case"textarea":K(t),ut(t);break;case"option":null!=l.value&&t.setAttribute("value",""+O(l.value));break;case"select":t.multiple=!!l.multiple,null!=(c=l.value)?at(t,!!l.multiple,c,!1):null!=l.defaultValue&&at(t,!!l.multiple,l.defaultValue,!0);break;default:"function"==typeof s.onClick&&(t.onclick=Wl)}Yl(i,l)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)Da(0,e,t.memoizedProps,l);else{if("string"!=typeof l&&null===e.stateNode)throw Error(a(166));i=ms(hs.current),ms(Rs.current),vs(e)?(l=e.stateNode,i=e.memoizedProps,l[Pl]=e,l.nodeValue!==i&&(e.flags|=4)):((l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[Pl]=e,e.stateNode=l)}return null;case 13:return an(Es),l=e.memoizedState,0!=(64&e.flags)?(e.lanes=i,e):(l=null!==l,i=!1,null===t?void 0!==e.memoizedProps.fallback&&vs(e):i=null!==t.memoizedState,l&&!i&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Es.current)?0===yc&&(yc=3):(0!==yc&&3!==yc||(yc=4),null===Lc||0==(134217727&fc)&&0==(134217727&Wc)||dg(Lc,mc))),(l||i)&&(e.flags|=4),null);case 4:return Zs(),null===t&&hl(e.stateNode.containerInfo),null;case 10:return $n(e),null;case 17:return on(e.type)&&Fn(),null;case 19:if(an(Es),null===(l=e.memoizedState))return null;if(c=0!=(64&e.flags),null===(I=l.rendering))if(c)$a(l,!1);else{if(0!==yc||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(I=fs(t))){for(e.flags|=64,$a(l,!1),null!==(c=I.updateQueue)&&(e.updateQueue=c,e.flags|=4),null===l.lastEffect&&(e.firstEffect=null),e.lastEffect=l.lastEffect,l=i,i=e.child;null!==i;)t=l,(c=i).flags&=2,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null,null===(I=c.alternate)?(c.childLanes=0,c.lanes=t,c.child=null,c.memoizedProps=null,c.memoizedState=null,c.updateQueue=null,c.dependencies=null,c.stateNode=null):(c.childLanes=I.childLanes,c.lanes=I.lanes,c.child=I.child,c.memoizedProps=I.memoizedProps,c.memoizedState=I.memoizedState,c.updateQueue=I.updateQueue,c.type=I.type,t=I.dependencies,c.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),i=i.sibling;return cn(Es,1&Es.current|2),e.child}t=t.sibling}null!==l.tail&&Jn()>Jc&&(e.flags|=64,c=!0,$a(l,!1),e.lanes=33554432)}else{if(!c)if(null!==(t=fs(I))){if(e.flags|=64,c=!0,null!==(i=t.updateQueue)&&(e.updateQueue=i,e.flags|=4),$a(l,!0),null===l.tail&&"hidden"===l.tailMode&&!I.alternate&&!Ts)return null!==(e=e.lastEffect=l.lastEffect)&&(e.nextEffect=null),null}else 2*Jn()-l.renderingStartTime>Jc&&1073741824!==i&&(e.flags|=64,c=!0,$a(l,!1),e.lanes=33554432);l.isBackwards?(I.sibling=e.child,e.child=I):(null!==(i=l.last)?i.sibling=I:e.child=I,l.last=I)}return null!==l.tail?(i=l.tail,l.rendering=i,l.tail=i.sibling,l.lastEffect=e.lastEffect,l.renderingStartTime=Jn(),i.sibling=null,e=Es.current,cn(Es,c?1&e|2:1&e),i):null;case 23:case 24:return Cg(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==l.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function ec(t){switch(t.tag){case 1:on(t.type)&&Fn();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Zs(),an(un),an(In),Ds(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Xs(t),null;case 13:return an(Es),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return an(Es),null;case 4:return Zs(),null;case 10:return $n(t),null;case 23:case 24:return Cg(),null;default:return null}}function ic(t,e){try{var i="",l=e;do{i+=z(l),l=l.return}while(l);var n=i}catch(t){n="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:n}}function lc(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}wa=function(t,e){for(var i=e.child;null!==i;){if(5===i.tag||6===i.tag)t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},Ma=function(t,e,i,l){var s=t.memoizedProps;if(s!==l){t=e.stateNode,ms(Rs.current);var a,c=null;switch(i){case"input":s=$(t,s),l=$(t,l),c=[];break;case"option":s=st(t,s),l=st(t,l),c=[];break;case"select":s=n({},s,{value:void 0}),l=n({},l,{value:void 0}),c=[];break;case"textarea":s=ct(t,s),l=ct(t,l),c=[];break;default:"function"!=typeof s.onClick&&"function"==typeof l.onClick&&(t.onclick=Wl)}for(d in pt(i,l),i=null,s)if(!l.hasOwnProperty(d)&&s.hasOwnProperty(d)&&null!=s[d])if("style"===d){var I=s[d];for(a in I)I.hasOwnProperty(a)&&(i||(i={}),i[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(g.hasOwnProperty(d)?c||(c=[]):(c=c||[]).push(d,null));for(d in l){var u=l[d];if(I=null!=s?s[d]:void 0,l.hasOwnProperty(d)&&u!==I&&(null!=u||null!=I))if("style"===d)if(I){for(a in I)!I.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(i||(i={}),i[a]="");for(a in u)u.hasOwnProperty(a)&&I[a]!==u[a]&&(i||(i={}),i[a]=u[a])}else i||(c||(c=[]),c.push(d,i)),i=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,I=I?I.__html:void 0,null!=u&&I!==u&&(c=c||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(c=c||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(g.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Rl("scroll",t),c||I===u||(c=[])):"object"==typeof u&&null!==u&&u.$$typeof===W?u.toString():(c=c||[]).push(d,u))}i&&(c=c||[]).push("style",i);var d=c;(e.updateQueue=d)&&(e.flags|=4)}},Da=function(t,e,i,l){i!==l&&(e.flags|=4)};var nc="function"==typeof WeakMap?WeakMap:Map;function sc(t,e,i){(i=as(-1,i)).tag=3,i.payload={element:null};var l=e.value;return i.callback=function(){wc||(wc=!0,Mc=l),lc(0,e)},i}function ac(t,e,i){(i=as(-1,i)).tag=3;var l=t.type.getDerivedStateFromError;if("function"==typeof l){var n=e.value;i.payload=function(){return lc(0,e),l(n)}}var s=t.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(i.callback=function(){"function"!=typeof l&&(null===Dc?Dc=new Set([this]):Dc.add(this),lc(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),i}var cc="function"==typeof WeakSet?WeakSet:Set;function gc(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Eg(t,e)}else e.current=null}function Ic(t,e){switch(e.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&e.flags&&null!==t){var i=t.memoizedProps,l=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?i:Pn(e.type,i),l),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&vl(e.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function uc(t,e,i){switch(i.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var l=t.create;t.destroy=l()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var n=t;l=n.next,0!=(4&(n=n.tag))&&0!=(1&n)&&(Zg(i,t),Sg(i,t)),t=l}while(t!==e)}return;case 1:return t=i.stateNode,4&i.flags&&(null===e?t.componentDidMount():(l=i.elementType===i.type?e.memoizedProps:Pn(i.type,e.memoizedProps),t.componentDidUpdate(l,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=i.updateQueue)&&us(i,e,t));case 3:if(null!==(e=i.updateQueue)){if(t=null,null!==i.child)switch(i.child.tag){case 5:t=i.child.stateNode;break;case 1:t=i.child.stateNode}us(i,e,t)}return;case 5:return t=i.stateNode,void(null===e&&4&i.flags&&Yl(i.type,i.memoizedProps)&&t.focus());case 6:case 4:case 12:return;case 13:return void(null===i.memoizedState&&(i=i.alternate,null!==i&&(i=i.memoizedState,null!==i&&(i=i.dehydrated,null!==i&&Ae(i)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function dc(t,e){for(var i=t;;){if(5===i.tag){var l=i.stateNode;if(e)"function"==typeof(l=l.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{l=i.stateNode;var n=i.memoizedProps.style;n=null!=n&&n.hasOwnProperty("display")?n.display:null,l.style.display=Vt("display",n)}}else if(6===i.tag)i.stateNode.nodeValue=e?"":i.memoizedProps;else if((23!==i.tag&&24!==i.tag||null===i.memoizedState||i===t)&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Bc(t,e){if(Vn&&"function"==typeof Vn.onCommitFiberUnmount)try{Vn.onCommitFiberUnmount(bn,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var i=t=t.next;do{var l=i,n=l.destroy;if(l=l.tag,void 0!==n)if(0!=(4&l))Zg(e,i);else{l=e;try{n()}catch(t){Eg(l,t)}}i=i.next}while(i!==t)}break;case 1:if(gc(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Eg(e,t)}break;case 5:gc(e);break;case 4:Qc(t,e)}}function oc(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function Fc(t){return 5===t.tag||3===t.tag||4===t.tag}function rc(t){t:{for(var e=t.return;null!==e;){if(Fc(e))break t;e=e.return}throw Error(a(160))}var i=e;switch(e=i.stateNode,i.tag){case 5:var l=!1;break;case 3:case 4:e=e.containerInfo,l=!0;break;default:throw Error(a(161))}16&i.flags&&(Ut(e,""),i.flags&=-17);t:e:for(i=t;;){for(;null===i.sibling;){if(null===i.return||Fc(i.return)){i=null;break t}i=i.return}for(i.sibling.return=i.return,i=i.sibling;5!==i.tag&&6!==i.tag&&18!==i.tag;){if(2&i.flags)continue e;if(null===i.child||4===i.tag)continue e;i.child.return=i,i=i.child}if(!(2&i.flags)){i=i.stateNode;break t}}l?Cc(t,i,e):Uc(t,i,e)}function Cc(t,e,i){var l=t.tag,n=5===l||6===l;if(n)t=n?t.stateNode:t.stateNode.instance,e?8===i.nodeType?i.parentNode.insertBefore(t,e):i.insertBefore(t,e):(8===i.nodeType?(e=i.parentNode).insertBefore(t,i):(e=i).appendChild(t),null!=(i=i._reactRootContainer)||null!==e.onclick||(e.onclick=Wl));else if(4!==l&&null!==(t=t.child))for(Cc(t,e,i),t=t.sibling;null!==t;)Cc(t,e,i),t=t.sibling}function Uc(t,e,i){var l=t.tag,n=5===l||6===l;if(n)t=n?t.stateNode:t.stateNode.instance,e?i.insertBefore(t,e):i.appendChild(t);else if(4!==l&&null!==(t=t.child))for(Uc(t,e,i),t=t.sibling;null!==t;)Uc(t,e,i),t=t.sibling}function Qc(t,e){for(var i,l,n=e,s=!1;;){if(!s){s=n.return;t:for(;;){if(null===s)throw Error(a(160));switch(i=s.stateNode,s.tag){case 5:l=!1;break t;case 3:case 4:i=i.containerInfo,l=!0;break t}s=s.return}s=!0}if(5===n.tag||6===n.tag){t:for(var c=t,g=n,I=g;;)if(Bc(c,I),null!==I.child&&4!==I.tag)I.child.return=I,I=I.child;else{if(I===g)break t;for(;null===I.sibling;){if(null===I.return||I.return===g)break t;I=I.return}I.sibling.return=I.return,I=I.sibling}l?(c=i,g=n.stateNode,8===c.nodeType?c.parentNode.removeChild(g):c.removeChild(g)):i.removeChild(n.stateNode)}else if(4===n.tag){if(null!==n.child){i=n.stateNode.containerInfo,l=!0,n.child.return=n,n=n.child;continue}}else if(Bc(t,n),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(s=!1)}n.sibling.return=n.return,n=n.sibling}}function bc(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var i=e.updateQueue;if(null!==(i=null!==i?i.lastEffect:null)){var l=i=i.next;do{3==(3&l.tag)&&(t=l.destroy,l.destroy=void 0,void 0!==t&&t()),l=l.next}while(l!==i)}return;case 1:return;case 5:if(null!=(i=e.stateNode)){l=e.memoizedProps;var n=null!==t?t.memoizedProps:l;t=e.type;var s=e.updateQueue;if(e.updateQueue=null,null!==s){for(i[Ol]=l,"input"===t&&"radio"===l.type&&null!=l.name&&et(i,l),Gt(t,n),e=Gt(t,l),n=0;n<s.length;n+=2){var c=s[n],g=s[n+1];"style"===c?At(i,g):"dangerouslySetInnerHTML"===c?Ct(i,g):"children"===c?Ut(i,g):V(i,c,g,e)}switch(t){case"input":it(i,l);break;case"textarea":It(i,l);break;case"select":t=i._wrapperState.wasMultiple,i._wrapperState.wasMultiple=!!l.multiple,null!=(s=l.value)?at(i,!!l.multiple,s,!1):t!==!!l.multiple&&(null!=l.defaultValue?at(i,!!l.multiple,l.defaultValue,!0):at(i,!!l.multiple,l.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((i=e.stateNode).hydrate&&(i.hydrate=!1,Ae(i.containerInfo)));case 12:return;case 13:return null!==e.memoizedState&&(Yc=Jn(),dc(e.child,!0)),void Vc(e);case 19:return void Vc(e);case 17:return;case 23:case 24:return void dc(e,null!==e.memoizedState)}throw Error(a(163))}function Vc(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var i=t.stateNode;null===i&&(i=t.stateNode=new cc),e.forEach((function(e){var l=Wg.bind(null,t,e);i.has(e)||(i.add(e),e.then(l,l))}))}}function Ac(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var xc=Math.ceil,pc=A.ReactCurrentDispatcher,Gc=A.ReactCurrentOwner,Rc=0,Lc=null,hc=null,mc=0,Sc=0,Zc=sn(0),yc=0,Xc=null,Ec=0,fc=0,Wc=0,Nc=0,Tc=null,Yc=0,Jc=1/0;function Hc(){Jc=Jn()+500}var kc,vc=null,wc=!1,Mc=null,Dc=null,zc=!1,Pc=null,Oc=90,jc=[],Kc=[],_c=null,qc=0,$c=null,tg=-1,eg=0,ig=0,lg=null,ng=!1;function sg(){return 0!=(48&Rc)?Jn():-1!==tg?tg:tg=Jn()}function ag(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hn()?1:2;if(0===eg&&(eg=Ec),0!==zn.transition){0!==ig&&(ig=null!==Tc?Tc.pendingLanes:0),t=eg;var e=4186112&~ig;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hn(),t=Je(0!=(4&Rc)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),eg)}function cg(t,e,i){if(50<qc)throw qc=0,$c=null,Error(a(185));if(null===(t=gg(t,e)))return null;ve(t,e,i),t===Lc&&(Wc|=e,4===yc&&dg(t,mc));var l=Hn();1===e?0!=(8&Rc)&&0==(48&Rc)?Bg(t):(Ig(t,i),0===Rc&&(Hc(),Mn())):(0==(4&Rc)||98!==l&&99!==l||(null===_c?_c=new Set([t]):_c.add(t)),Ig(t,i)),Tc=t}function gg(t,e){t.lanes|=e;var i=t.alternate;for(null!==i&&(i.lanes|=e),i=t,t=t.return;null!==t;)t.childLanes|=e,null!==(i=t.alternate)&&(i.childLanes|=e),i=t,t=t.return;return 3===i.tag?i.stateNode:null}function Ig(t,e){for(var i=t.callbackNode,l=t.suspendedLanes,n=t.pingedLanes,s=t.expirationTimes,c=t.pendingLanes;0<c;){var g=31-we(c),I=1<<g,u=s[g];if(-1===u){if(0==(I&l)||0!=(I&n)){u=e,Ne(I);var d=We;s[g]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=e&&(t.expiredLanes|=I);c&=~I}if(l=Te(t,t===Lc?mc:0),e=We,0===l)null!==i&&(i!==En&&pn(i),t.callbackNode=null,t.callbackPriority=0);else{if(null!==i){if(t.callbackPriority===e)return;i!==En&&pn(i)}15===e?(i=Bg.bind(null,t),null===Wn?(Wn=[i],Nn=xn(mn,Dn)):Wn.push(i),i=En):i=14===e?wn(99,Bg.bind(null,t)):wn(i=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),ug.bind(null,t)),t.callbackPriority=e,t.callbackNode=i}}function ug(t){if(tg=-1,ig=eg=0,0!=(48&Rc))throw Error(a(327));var e=t.callbackNode;if(mg()&&t.callbackNode!==e)return null;var i=Te(t,t===Lc?mc:0);if(0===i)return null;var l=i,n=Rc;Rc|=16;var s=bg();for(Lc===t&&mc===l||(Hc(),Ug(t,l));;)try{xg();break}catch(e){Qg(t,e)}if(qn(),pc.current=s,Rc=n,null!==hc?l=0:(Lc=null,mc=0,l=yc),0!=(Ec&Wc))Ug(t,0);else if(0!==l){if(2===l&&(Rc|=64,t.hydrate&&(t.hydrate=!1,vl(t.containerInfo)),0!==(i=Ye(t))&&(l=Vg(t,i))),1===l)throw e=Xc,Ug(t,0),dg(t,i),Ig(t,Jn()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=i,l){case 0:case 1:throw Error(a(345));case 2:Rg(t);break;case 3:if(dg(t,i),(62914560&i)===i&&10<(l=Yc+500-Jn())){if(0!==Te(t,0))break;if(((n=t.suspendedLanes)&i)!==i){sg(),t.pingedLanes|=t.suspendedLanes&n;break}t.timeoutHandle=Hl(Rg.bind(null,t),l);break}Rg(t);break;case 4:if(dg(t,i),(4186112&i)===i)break;for(l=t.eventTimes,n=-1;0<i;){var c=31-we(i);s=1<<c,(c=l[c])>n&&(n=c),i&=~s}if(i=n,10<(i=(120>(i=Jn()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*xc(i/1960))-i)){t.timeoutHandle=Hl(Rg.bind(null,t),i);break}Rg(t);break;case 5:Rg(t);break;default:throw Error(a(329))}}return Ig(t,Jn()),t.callbackNode===e?ug.bind(null,t):null}function dg(t,e){for(e&=~Nc,e&=~Wc,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var i=31-we(e),l=1<<i;t[i]=-1,e&=~l}}function Bg(t){if(0!=(48&Rc))throw Error(a(327));if(mg(),t===Lc&&0!=(t.expiredLanes&mc)){var e=mc,i=Vg(t,e);0!=(Ec&Wc)&&(i=Vg(t,e=Te(t,e)))}else i=Vg(t,e=Te(t,0));if(0!==t.tag&&2===i&&(Rc|=64,t.hydrate&&(t.hydrate=!1,vl(t.containerInfo)),0!==(e=Ye(t))&&(i=Vg(t,e))),1===i)throw i=Xc,Ug(t,0),dg(t,e),Ig(t,Jn()),i;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Rg(t),Ig(t,Jn()),null}function og(t,e){var i=Rc;Rc|=1;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Mn())}}function Fg(t,e){var i=Rc;Rc&=-2,Rc|=8;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Mn())}}function rg(t,e){cn(Zc,Sc),Sc|=e,Ec|=e}function Cg(){Sc=Zc.current,an(Zc)}function Ug(t,e){t.finishedWork=null,t.finishedLanes=0;var i=t.timeoutHandle;if(-1!==i&&(t.timeoutHandle=-1,kl(i)),null!==hc)for(i=hc.return;null!==i;){var l=i;switch(l.tag){case 1:null!=(l=l.type.childContextTypes)&&Fn();break;case 3:Zs(),an(un),an(In),Ds();break;case 5:Xs(l);break;case 4:Zs();break;case 13:case 19:an(Es);break;case 10:$n(l);break;case 23:case 24:Cg()}i=i.return}Lc=t,hc=Jg(t.current,null),mc=Sc=Ec=e,yc=0,Xc=null,Nc=Wc=fc=0}function Qg(t,e){for(;;){var i=hc;try{if(qn(),zs.current=ha,qs){for(var l=js.memoizedState;null!==l;){var n=l.queue;null!==n&&(n.pending=null),l=l.next}qs=!1}if(Os=0,_s=Ks=js=null,$s=!1,Gc.current=null,null===i||null===i.return){yc=1,Xc=e,hc=null;break}t:{var s=t,a=i.return,c=i,g=e;if(e=mc,c.flags|=2048,c.firstEffect=c.lastEffect=null,null!==g&&"object"==typeof g&&"function"==typeof g.then){var I=g;if(0==(2&c.mode)){var u=c.alternate;u?(c.updateQueue=u.updateQueue,c.memoizedState=u.memoizedState,c.lanes=u.lanes):(c.updateQueue=null,c.memoizedState=null)}var d=0!=(1&Es.current),B=a;do{var o;if(o=13===B.tag){var F=B.memoizedState;if(null!==F)o=null!==F.dehydrated;else{var r=B.memoizedProps;o=void 0!==r.fallback&&(!0!==r.unstable_avoidThisFallback||!d)}}if(o){var C=B.updateQueue;if(null===C){var U=new Set;U.add(I),B.updateQueue=U}else C.add(I);if(0==(2&B.mode)){if(B.flags|=64,c.flags|=16384,c.flags&=-2981,1===c.tag)if(null===c.alternate)c.tag=17;else{var Q=as(-1,1);Q.tag=2,cs(c,Q)}c.lanes|=1;break t}g=void 0,c=e;var b=s.pingCache;if(null===b?(b=s.pingCache=new nc,g=new Set,b.set(I,g)):void 0===(g=b.get(I))&&(g=new Set,b.set(I,g)),!g.has(c)){g.add(c);var V=fg.bind(null,s,I,c);I.then(V,V)}B.flags|=4096,B.lanes=e;break t}B=B.return}while(null!==B);g=Error((P(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==yc&&(yc=2),g=ic(g,c),B=a;do{switch(B.tag){case 3:s=g,B.flags|=4096,e&=-e,B.lanes|=e,gs(B,sc(0,s,e));break t;case 1:s=g;var A=B.type,x=B.stateNode;if(0==(64&B.flags)&&("function"==typeof A.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Dc||!Dc.has(x)))){B.flags|=4096,e&=-e,B.lanes|=e,gs(B,ac(B,s,e));break t}}B=B.return}while(null!==B)}Gg(i)}catch(t){e=t,hc===i&&null!==i&&(hc=i=i.return);continue}break}}function bg(){var t=pc.current;return pc.current=ha,null===t?ha:t}function Vg(t,e){var i=Rc;Rc|=16;var l=bg();for(Lc===t&&mc===e||Ug(t,e);;)try{Ag();break}catch(e){Qg(t,e)}if(qn(),Rc=i,pc.current=l,null!==hc)throw Error(a(261));return Lc=null,mc=0,yc}function Ag(){for(;null!==hc;)pg(hc)}function xg(){for(;null!==hc&&!Gn();)pg(hc)}function pg(t){var e=kc(t.alternate,t,Sc);t.memoizedProps=t.pendingProps,null===e?Gg(t):hc=e,Gc.current=null}function Gg(t){var e=t;do{var i=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(i=tc(i,e,Sc)))return void(hc=i);if(24!==(i=e).tag&&23!==i.tag||null===i.memoizedState||0!=(1073741824&Sc)||0==(4&i.mode)){for(var l=0,n=i.child;null!==n;)l|=n.lanes|n.childLanes,n=n.sibling;i.childLanes=l}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(i=ec(e)))return i.flags&=2047,void(hc=i);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(hc=e);hc=e=t}while(null!==e);0===yc&&(yc=5)}function Rg(t){var e=Hn();return vn(99,Lg.bind(null,t,e)),null}function Lg(t,e){do{mg()}while(null!==Pc);if(0!=(48&Rc))throw Error(a(327));var i=t.finishedWork;if(null===i)return null;if(t.finishedWork=null,t.finishedLanes=0,i===t.current)throw Error(a(177));t.callbackNode=null;var l=i.lanes|i.childLanes,n=l,s=t.pendingLanes&~n;t.pendingLanes=n,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=n,t.mutableReadLanes&=n,t.entangledLanes&=n,n=t.entanglements;for(var c=t.eventTimes,g=t.expirationTimes;0<s;){var I=31-we(s),u=1<<I;n[I]=0,c[I]=-1,g[I]=-1,s&=~u}if(null!==_c&&0==(24&l)&&_c.has(t)&&_c.delete(t),t===Lc&&(hc=Lc=null,mc=0),1<i.flags?null!==i.lastEffect?(i.lastEffect.nextEffect=i,l=i.firstEffect):l=i:l=i.firstEffect,null!==l){if(n=Rc,Rc|=32,Gc.current=null,Nl=Oe,Bl(c=dl())){if("selectionStart"in c)g={start:c.selectionStart,end:c.selectionEnd};else t:if(g=(g=c.ownerDocument)&&g.defaultView||window,(u=g.getSelection&&g.getSelection())&&0!==u.rangeCount){g=u.anchorNode,s=u.anchorOffset,I=u.focusNode,u=u.focusOffset;try{g.nodeType,I.nodeType}catch(t){g=null;break t}var d=0,B=-1,o=-1,F=0,r=0,C=c,U=null;e:for(;;){for(var Q;C!==g||0!==s&&3!==C.nodeType||(B=d+s),C!==I||0!==u&&3!==C.nodeType||(o=d+u),3===C.nodeType&&(d+=C.nodeValue.length),null!==(Q=C.firstChild);)U=C,C=Q;for(;;){if(C===c)break e;if(U===g&&++F===s&&(B=d),U===I&&++r===u&&(o=d),null!==(Q=C.nextSibling))break;U=(C=U).parentNode}C=Q}g=-1===B||-1===o?null:{start:B,end:o}}else g=null;g=g||{start:0,end:0}}else g=null;Tl={focusedElem:c,selectionRange:g},Oe=!1,lg=null,ng=!1,vc=l;do{try{hg()}catch(t){if(null===vc)throw Error(a(330));Eg(vc,t),vc=vc.nextEffect}}while(null!==vc);lg=null,vc=l;do{try{for(c=t;null!==vc;){var b=vc.flags;if(16&b&&Ut(vc.stateNode,""),128&b){var V=vc.alternate;if(null!==V){var A=V.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(1038&b){case 2:rc(vc),vc.flags&=-3;break;case 6:rc(vc),vc.flags&=-3,bc(vc.alternate,vc);break;case 1024:vc.flags&=-1025;break;case 1028:vc.flags&=-1025,bc(vc.alternate,vc);break;case 4:bc(vc.alternate,vc);break;case 8:Qc(c,g=vc);var x=g.alternate;oc(g),null!==x&&oc(x)}vc=vc.nextEffect}}catch(t){if(null===vc)throw Error(a(330));Eg(vc,t),vc=vc.nextEffect}}while(null!==vc);if(A=Tl,V=dl(),b=A.focusedElem,c=A.selectionRange,V!==b&&b&&b.ownerDocument&&ul(b.ownerDocument.documentElement,b)){null!==c&&Bl(b)&&(V=c.start,void 0===(A=c.end)&&(A=V),"selectionStart"in b?(b.selectionStart=V,b.selectionEnd=Math.min(A,b.value.length)):(A=(V=b.ownerDocument||document)&&V.defaultView||window).getSelection&&(A=A.getSelection(),g=b.textContent.length,x=Math.min(c.start,g),c=void 0===c.end?x:Math.min(c.end,g),!A.extend&&x>c&&(g=c,c=x,x=g),g=Il(b,x),s=Il(b,c),g&&s&&(1!==A.rangeCount||A.anchorNode!==g.node||A.anchorOffset!==g.offset||A.focusNode!==s.node||A.focusOffset!==s.offset)&&((V=V.createRange()).setStart(g.node,g.offset),A.removeAllRanges(),x>c?(A.addRange(V),A.extend(s.node,s.offset)):(V.setEnd(s.node,s.offset),A.addRange(V))))),V=[];for(A=b;A=A.parentNode;)1===A.nodeType&&V.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<V.length;b++)(A=V[b]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Oe=!!Nl,Tl=Nl=null,t.current=i,vc=l;do{try{for(b=t;null!==vc;){var p=vc.flags;if(36&p&&uc(b,vc.alternate,vc),128&p){V=void 0;var G=vc.ref;if(null!==G){var R=vc.stateNode;switch(vc.tag){case 5:V=R;break;default:V=R}"function"==typeof G?G(V):G.current=V}}vc=vc.nextEffect}}catch(t){if(null===vc)throw Error(a(330));Eg(vc,t),vc=vc.nextEffect}}while(null!==vc);vc=null,fn(),Rc=n}else t.current=i;if(zc)zc=!1,Pc=t,Oc=e;else for(vc=l;null!==vc;)e=vc.nextEffect,vc.nextEffect=null,8&vc.flags&&((p=vc).sibling=null,p.stateNode=null),vc=e;if(0===(l=t.pendingLanes)&&(Dc=null),1===l?t===$c?qc++:(qc=0,$c=t):qc=0,i=i.stateNode,Vn&&"function"==typeof Vn.onCommitFiberRoot)try{Vn.onCommitFiberRoot(bn,i,void 0,64==(64&i.current.flags))}catch(t){}if(Ig(t,Jn()),wc)throw wc=!1,t=Mc,Mc=null,t;return 0!=(8&Rc)||Mn(),null}function hg(){for(;null!==vc;){var t=vc.alternate;ng||null===lg||(0!=(8&vc.flags)?$t(vc,lg)&&(ng=!0):13===vc.tag&&Ac(t,vc)&&$t(vc,lg)&&(ng=!0));var e=vc.flags;0!=(256&e)&&Ic(t,vc),0==(512&e)||zc||(zc=!0,wn(97,(function(){return mg(),null}))),vc=vc.nextEffect}}function mg(){if(90!==Oc){var t=97<Oc?97:Oc;return Oc=90,vn(t,yg)}return!1}function Sg(t,e){jc.push(e,t),zc||(zc=!0,wn(97,(function(){return mg(),null})))}function Zg(t,e){Kc.push(e,t),zc||(zc=!0,wn(97,(function(){return mg(),null})))}function yg(){if(null===Pc)return!1;var t=Pc;if(Pc=null,0!=(48&Rc))throw Error(a(331));var e=Rc;Rc|=32;var i=Kc;Kc=[];for(var l=0;l<i.length;l+=2){var n=i[l],s=i[l+1],c=n.destroy;if(n.destroy=void 0,"function"==typeof c)try{c()}catch(t){if(null===s)throw Error(a(330));Eg(s,t)}}for(i=jc,jc=[],l=0;l<i.length;l+=2){n=i[l],s=i[l+1];try{var g=n.create;n.destroy=g()}catch(t){if(null===s)throw Error(a(330));Eg(s,t)}}for(g=t.current.firstEffect;null!==g;)t=g.nextEffect,g.nextEffect=null,8&g.flags&&(g.sibling=null,g.stateNode=null),g=t;return Rc=e,Mn(),!0}function Xg(t,e,i){cs(t,e=sc(0,e=ic(i,e),1)),e=sg(),null!==(t=gg(t,1))&&(ve(t,1,e),Ig(t,e))}function Eg(t,e){if(3===t.tag)Xg(t,t,e);else for(var i=t.return;null!==i;){if(3===i.tag){Xg(i,t,e);break}if(1===i.tag){var l=i.stateNode;if("function"==typeof i.type.getDerivedStateFromError||"function"==typeof l.componentDidCatch&&(null===Dc||!Dc.has(l))){var n=ac(i,t=ic(e,t),1);if(cs(i,n),n=sg(),null!==(i=gg(i,1)))ve(i,1,n),Ig(i,n);else if("function"==typeof l.componentDidCatch&&(null===Dc||!Dc.has(l)))try{l.componentDidCatch(e,t)}catch(t){}break}}i=i.return}}function fg(t,e,i){var l=t.pingCache;null!==l&&l.delete(e),e=sg(),t.pingedLanes|=t.suspendedLanes&i,Lc===t&&(mc&i)===i&&(4===yc||3===yc&&(62914560&mc)===mc&&500>Jn()-Yc?Ug(t,0):Nc|=i),Ig(t,e)}function Wg(t,e){var i=t.stateNode;null!==i&&i.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hn()?1:2:(0===eg&&(eg=Ec),0===(e=He(62914560&~eg))&&(e=4194304))),i=sg(),null!==(t=gg(t,e))&&(ve(t,e,i),Ig(t,i))}function Ng(t,e,i,l){this.tag=t,this.key=i,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=l,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Tg(t,e,i,l){return new Ng(t,e,i,l)}function Yg(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Jg(t,e){var i=t.alternate;return null===i?((i=Tg(t.tag,e,t.key,t.mode)).elementType=t.elementType,i.type=t.type,i.stateNode=t.stateNode,i.alternate=t,t.alternate=i):(i.pendingProps=e,i.type=t.type,i.flags=0,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null),i.childLanes=t.childLanes,i.lanes=t.lanes,i.child=t.child,i.memoizedProps=t.memoizedProps,i.memoizedState=t.memoizedState,i.updateQueue=t.updateQueue,e=t.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},i.sibling=t.sibling,i.index=t.index,i.ref=t.ref,i}function Hg(t,e,i,l,n,s){var c=2;if(l=t,"function"==typeof t)Yg(t)&&(c=1);else if("string"==typeof t)c=5;else t:switch(t){case G:return kg(i.children,n,s,e);case N:c=8,n|=16;break;case R:c=8,n|=1;break;case L:return(t=Tg(12,i,e,8|n)).elementType=L,t.type=L,t.lanes=s,t;case Z:return(t=Tg(13,i,e,n)).type=Z,t.elementType=Z,t.lanes=s,t;case y:return(t=Tg(19,i,e,n)).elementType=y,t.lanes=s,t;case T:return vg(i,n,s,e);case Y:return(t=Tg(24,i,e,n)).elementType=Y,t.lanes=s,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case h:c=10;break t;case m:c=9;break t;case S:c=11;break t;case X:c=14;break t;case E:c=16,l=null;break t;case f:c=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Tg(c,i,e,n)).elementType=t,e.type=l,e.lanes=s,e}function kg(t,e,i,l){return(t=Tg(7,t,l,e)).lanes=i,t}function vg(t,e,i,l){return(t=Tg(23,t,l,e)).elementType=T,t.lanes=i,t}function wg(t,e,i){return(t=Tg(6,t,null,e)).lanes=i,t}function Mg(t,e,i){return(e=Tg(4,null!==t.children?t.children:[],t.key,e)).lanes=i,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Dg(t,e,i){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=i,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=ke(0),this.expirationTimes=ke(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ke(0),this.mutableSourceEagerHydrationData=null}function zg(t,e,i){var l=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:p,key:null==l?null:""+l,children:t,containerInfo:e,implementation:i}}function Pg(t,e,i,l){var n=e.current,s=sg(),c=ag(n);t:if(i){e:{if(jt(i=i._reactInternals)!==i||1!==i.tag)throw Error(a(170));var g=i;do{switch(g.tag){case 3:g=g.stateNode.context;break e;case 1:if(on(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break e}}g=g.return}while(null!==g);throw Error(a(171))}if(1===i.tag){var I=i.type;if(on(I)){i=Cn(i,I,g);break t}}i=g}else i=gn;return null===e.context?e.context=i:e.pendingContext=i,(e=as(s,c)).payload={element:t},null!==(l=void 0===l?null:l)&&(e.callback=l),cs(n,e),cg(n,c,s),c}function Og(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function jg(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var i=t.retryLane;t.retryLane=0!==i&&i<e?i:e}}function Kg(t,e){jg(t,e),(t=t.alternate)&&jg(t,e)}function _g(t,e,i){var l=null!=i&&null!=i.hydrationOptions&&i.hydrationOptions.mutableSources||null;if(i=new Dg(t,e,null!=i&&!0===i.hydrate),e=Tg(3,null,null,2===e?7:1===e?3:0),i.current=e,e.stateNode=i,ns(e),t[jl]=i.current,hl(8===t.nodeType?t.parentNode:t),l)for(t=0;t<l.length;t++){var n=(e=l[t])._getVersion;n=n(e._source),null==i.mutableSourceEagerHydrationData?i.mutableSourceEagerHydrationData=[e,n]:i.mutableSourceEagerHydrationData.push(e,n)}this._internalRoot=i}function qg(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function $g(t,e,i,l,n){var s=i._reactRootContainer;if(s){var a=s._internalRoot;if("function"==typeof n){var c=n;n=function(){var t=Og(a);c.call(t)}}Pg(e,a,t,n)}else{if(s=i._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var i;i=t.lastChild;)t.removeChild(i);return new _g(t,0,e?{hydrate:!0}:void 0)}(i,l),a=s._internalRoot,"function"==typeof n){var g=n;n=function(){var t=Og(a);g.call(t)}}Fg((function(){Pg(e,a,t,n)}))}return Og(a)}function tI(t,e){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!qg(e))throw Error(a(200));return zg(t,e,null,i)}kc=function(t,e,i){var l=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||un.current)Xa=!0;else{if(0==(i&l)){switch(Xa=!1,e.tag){case 3:va(e),ws();break;case 5:ys(e);break;case 1:on(e.type)&&Un(e);break;case 4:Ss(e,e.stateNode.containerInfo);break;case 10:l=e.memoizedProps.value;var n=e.type._context;cn(On,n._currentValue),n._currentValue=l;break;case 13:if(null!==e.memoizedState)return 0!=(i&e.child.childLanes)?Pa(t,e,i):(cn(Es,1&Es.current),null!==(e=qa(t,e,i))?e.sibling:null);cn(Es,1&Es.current);break;case 19:if(l=0!=(i&e.childLanes),0!=(64&t.flags)){if(l)return _a(t,e,i);e.flags|=64}if(null!==(n=e.memoizedState)&&(n.rendering=null,n.tail=null,n.lastEffect=null),cn(Es,Es.current),l)break;return null;case 23:case 24:return e.lanes=0,Ta(t,e,i)}return qa(t,e,i)}Xa=0!=(16384&t.flags)}else Xa=!1;switch(e.lanes=0,e.tag){case 2:if(l=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,n=Bn(e,In.current),es(e,i),n=ia(null,e,l,t,n,i),e.flags|=1,"object"==typeof n&&null!==n&&"function"==typeof n.render&&void 0===n.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,on(l)){var s=!0;Un(e)}else s=!1;e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,ns(e);var c=l.getDerivedStateFromProps;"function"==typeof c&&Bs(e,l,c,t),n.updater=os,e.stateNode=n,n._reactInternals=e,Us(e,l,t,i),e=ka(null,e,l,!0,s,i)}else e.tag=0,Ea(null,e,n,i),e=e.child;return e;case 16:n=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,n=(s=n._init)(n._payload),e.type=n,s=e.tag=function(t){if("function"==typeof t)return Yg(t)?1:0;if(null!=t){if((t=t.$$typeof)===S)return 11;if(t===X)return 14}return 2}(n),t=Pn(n,t),s){case 0:e=Ja(null,e,n,t,i);break t;case 1:e=Ha(null,e,n,t,i);break t;case 11:e=fa(null,e,n,t,i);break t;case 14:e=Wa(null,e,n,Pn(n.type,t),l,i);break t}throw Error(a(306,n,""))}return e;case 0:return l=e.type,n=e.pendingProps,Ja(t,e,l,n=e.elementType===l?n:Pn(l,n),i);case 1:return l=e.type,n=e.pendingProps,Ha(t,e,l,n=e.elementType===l?n:Pn(l,n),i);case 3:if(va(e),l=e.updateQueue,null===t||null===l)throw Error(a(282));if(l=e.pendingProps,n=null!==(n=e.memoizedState)?n.element:null,ss(t,e),Is(e,l,null,i),(l=e.memoizedState.element)===n)ws(),e=qa(t,e,i);else{if((s=(n=e.stateNode).hydrate)&&(Ns=wl(e.stateNode.containerInfo.firstChild),Ws=e,s=Ts=!0),s){if(null!=(t=n.mutableSourceEagerHydrationData))for(n=0;n<t.length;n+=2)(s=t[n])._workInProgressVersionPrimary=t[n+1],Ms.push(s);for(i=ps(e,null,l,i),e.child=i;i;)i.flags=-3&i.flags|1024,i=i.sibling}else Ea(t,e,l,i),ws();e=e.child}return e;case 5:return ys(e),null===t&&Hs(e),l=e.type,n=e.pendingProps,s=null!==t?t.memoizedProps:null,c=n.children,Jl(l,n)?c=null:null!==s&&Jl(l,s)&&(e.flags|=16),Ya(t,e),Ea(t,e,c,i),e.child;case 6:return null===t&&Hs(e),null;case 13:return Pa(t,e,i);case 4:return Ss(e,e.stateNode.containerInfo),l=e.pendingProps,null===t?e.child=xs(e,null,l,i):Ea(t,e,l,i),e.child;case 11:return l=e.type,n=e.pendingProps,fa(t,e,l,n=e.elementType===l?n:Pn(l,n),i);case 7:return Ea(t,e,e.pendingProps,i),e.child;case 8:case 12:return Ea(t,e,e.pendingProps.children,i),e.child;case 10:t:{l=e.type._context,n=e.pendingProps,c=e.memoizedProps,s=n.value;var g=e.type._context;if(cn(On,g._currentValue),g._currentValue=s,null!==c)if(g=c.value,0==(s=sl(g,s)?0:0|("function"==typeof l._calculateChangedBits?l._calculateChangedBits(g,s):1073741823))){if(c.children===n.children&&!un.current){e=qa(t,e,i);break t}}else for(null!==(g=e.child)&&(g.return=e);null!==g;){var I=g.dependencies;if(null!==I){c=g.child;for(var u=I.firstContext;null!==u;){if(u.context===l&&0!=(u.observedBits&s)){1===g.tag&&((u=as(-1,i&-i)).tag=2,cs(g,u)),g.lanes|=i,null!==(u=g.alternate)&&(u.lanes|=i),ts(g.return,i),I.lanes|=i;break}u=u.next}}else c=10===g.tag&&g.type===e.type?null:g.child;if(null!==c)c.return=g;else for(c=g;null!==c;){if(c===e){c=null;break}if(null!==(g=c.sibling)){g.return=c.return,c=g;break}c=c.return}g=c}Ea(t,e,n.children,i),e=e.child}return e;case 9:return n=e.type,l=(s=e.pendingProps).children,es(e,i),l=l(n=is(n,s.unstable_observedBits)),e.flags|=1,Ea(t,e,l,i),e.child;case 14:return s=Pn(n=e.type,e.pendingProps),Wa(t,e,n,s=Pn(n.type,s),l,i);case 15:return Na(t,e,e.type,e.pendingProps,l,i);case 17:return l=e.type,n=e.pendingProps,n=e.elementType===l?n:Pn(l,n),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,on(l)?(t=!0,Un(e)):t=!1,es(e,i),rs(e,l,n),Us(e,l,n,i),ka(null,e,l,!0,t,i);case 19:return _a(t,e,i);case 23:case 24:return Ta(t,e,i)}throw Error(a(156,e.tag))},_g.prototype.render=function(t){Pg(t,this._internalRoot,null,null)},_g.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Pg(null,t,null,(function(){e[jl]=null}))},te=function(t){13===t.tag&&(cg(t,4,sg()),Kg(t,4))},ee=function(t){13===t.tag&&(cg(t,67108864,sg()),Kg(t,67108864))},ie=function(t){if(13===t.tag){var e=sg(),i=ag(t);cg(t,i,e),Kg(t,i)}},le=function(t,e){return e()},Lt=function(t,e,i){switch(e){case"input":if(it(t,i),e=i.name,"radio"===i.type&&null!=e){for(i=t;i.parentNode;)i=i.parentNode;for(i=i.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<i.length;e++){var l=i[e];if(l!==t&&l.form===t.form){var n=tn(l);if(!n)throw Error(a(90));_(l),it(l,n)}}}break;case"textarea":It(t,i);break;case"select":null!=(e=i.value)&&at(t,!!i.multiple,e,!1)}},Xt=og,Et=function(t,e,i,l,n){var s=Rc;Rc|=4;try{return vn(98,t.bind(null,e,i,l,n))}finally{0===(Rc=s)&&(Hc(),Mn())}},ft=function(){0==(49&Rc)&&(function(){if(null!==_c){var t=_c;_c=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,Ig(t,Jn())}))}Mn()}(),mg())},Wt=function(t,e){var i=Rc;Rc|=2;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Mn())}};var eI={Events:[ql,$l,tn,Zt,yt,mg,{current:!1}]},iI={findFiberByHostInstance:_l,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lI={bundleType:iI.bundleType,version:iI.version,rendererPackageName:iI.rendererPackageName,rendererConfig:iI.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=qt(t))?null:t.stateNode},findFiberByHostInstance:iI.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var nI=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!nI.isDisabled&&nI.supportsFiber)try{bn=nI.inject(lI),Vn=nI}catch(rt){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eI,e.createPortal=tI,e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw Error(a(268,Object.keys(t)))}return null===(t=qt(e))?null:t.stateNode},e.flushSync=function(t,e){var i=Rc;if(0!=(48&i))return t(e);Rc|=1;try{if(t)return vn(99,t.bind(null,e))}finally{Rc=i,Mn()}},e.hydrate=function(t,e,i){if(!qg(e))throw Error(a(200));return $g(null,t,e,!0,i)},e.render=function(t,e,i){if(!qg(e))throw Error(a(200));return $g(null,t,e,!1,i)},e.unmountComponentAtNode=function(t){if(!qg(t))throw Error(a(40));return!!t._reactRootContainer&&(Fg((function(){$g(null,null,t,!1,(function(){t._reactRootContainer=null,t[jl]=null}))})),!0)},e.unstable_batchedUpdates=og,e.unstable_createPortal=function(t,e){return tI(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},e.unstable_renderSubtreeIntoContainer=function(t,e,i,l){if(!qg(i))throw Error(a(200));if(null==t||void 0===t._reactInternals)throw Error(a(38));return $g(t,e,i,!1,l)},e.version="17.0.2"},3935:(t,e,i)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=i(4448)},9921:(t,e)=>{"use strict";var i="function"==typeof Symbol&&Symbol.for,l=i?Symbol.for("react.element"):60103,n=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,a=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,g=i?Symbol.for("react.provider"):60109,I=i?Symbol.for("react.context"):60110,u=i?Symbol.for("react.async_mode"):60111,d=i?Symbol.for("react.concurrent_mode"):60111,B=i?Symbol.for("react.forward_ref"):60112,o=i?Symbol.for("react.suspense"):60113,F=i?Symbol.for("react.suspense_list"):60120,r=i?Symbol.for("react.memo"):60115,C=i?Symbol.for("react.lazy"):60116,U=i?Symbol.for("react.block"):60121,Q=i?Symbol.for("react.fundamental"):60117,b=i?Symbol.for("react.responder"):60118,V=i?Symbol.for("react.scope"):60119;function A(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case l:switch(t=t.type){case u:case d:case s:case c:case a:case o:return t;default:switch(t=t&&t.$$typeof){case I:case B:case C:case r:case g:return t;default:return e}}case n:return e}}}function x(t){return A(t)===d}e.AsyncMode=u,e.ConcurrentMode=d,e.ContextConsumer=I,e.ContextProvider=g,e.Element=l,e.ForwardRef=B,e.Fragment=s,e.Lazy=C,e.Memo=r,e.Portal=n,e.Profiler=c,e.StrictMode=a,e.Suspense=o,e.isAsyncMode=function(t){return x(t)||A(t)===u},e.isConcurrentMode=x,e.isContextConsumer=function(t){return A(t)===I},e.isContextProvider=function(t){return A(t)===g},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===l},e.isForwardRef=function(t){return A(t)===B},e.isFragment=function(t){return A(t)===s},e.isLazy=function(t){return A(t)===C},e.isMemo=function(t){return A(t)===r},e.isPortal=function(t){return A(t)===n},e.isProfiler=function(t){return A(t)===c},e.isStrictMode=function(t){return A(t)===a},e.isSuspense=function(t){return A(t)===o},e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===s||t===d||t===c||t===a||t===o||t===F||"object"==typeof t&&null!==t&&(t.$$typeof===C||t.$$typeof===r||t.$$typeof===g||t.$$typeof===I||t.$$typeof===B||t.$$typeof===Q||t.$$typeof===b||t.$$typeof===V||t.$$typeof===U)},e.typeOf=A},9864:(t,e,i)=>{"use strict";t.exports=i(9921)},8928:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Provider:()=>u,ReactReduxContext:()=>n,batch:()=>$.unstable_batchedUpdates,connect:()=>w,connectAdvanced:()=>R,createDispatchHook:()=>P,createSelectorHook:()=>K,createStoreHook:()=>D,shallowEqual:()=>h,useDispatch:()=>O,useSelector:()=>q,useStore:()=>z});var l=i(7294),n=(i(5697),l.createContext(null)),s=function(t){t()},a=function(){return s},c={notify:function(){},get:function(){return[]}};function g(t,e){var i,l=c;function n(){g.onStateChange&&g.onStateChange()}function s(){i||(i=e?e.addNestedSub(n):t.subscribe(n),l=function(){var t=a(),e=null,i=null;return{clear:function(){e=null,i=null},notify:function(){t((function(){for(var t=e;t;)t.callback(),t=t.next}))},get:function(){for(var t=[],i=e;i;)t.push(i),i=i.next;return t},subscribe:function(t){var l=!0,n=i={callback:t,next:null,prev:i};return n.prev?n.prev.next=n:e=n,function(){l&&null!==e&&(l=!1,n.next?n.next.prev=n.prev:i=n.prev,n.prev?n.prev.next=n.next:e=n.next)}}}}())}var g={addNestedSub:function(t){return s(),l.subscribe(t)},notifyNestedSubs:function(){l.notify()},handleChangeWrapper:n,isSubscribed:function(){return Boolean(i)},trySubscribe:s,tryUnsubscribe:function(){i&&(i(),i=void 0,l.clear(),l=c)},getListeners:function(){return l}};return g}var I="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;const u=function(t){var e=t.store,i=t.context,s=t.children,a=(0,l.useMemo)((function(){var t=g(e);return t.onStateChange=t.notifyNestedSubs,{store:e,subscription:t}}),[e]),c=(0,l.useMemo)((function(){return e.getState()}),[e]);I((function(){var t=a.subscription;return t.trySubscribe(),c!==e.getState()&&t.notifyNestedSubs(),function(){t.tryUnsubscribe(),t.onStateChange=null}}),[a,c]);var u=i||n;return l.createElement(u.Provider,{value:a},s)};function d(){return(d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(t[l]=i[l])}return t}).apply(this,arguments)}function B(t,e){if(null==t)return{};var i,l,n={},s=Object.keys(t);for(l=0;l<s.length;l++)i=s[l],e.indexOf(i)>=0||(n[i]=t[i]);return n}var o=i(8679),F=i.n(o),r=i(9864),C=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],U=["reactReduxForwardedRef"],Q=[],b=[null,null];function V(t,e){var i=t[1];return[e.payload,i+1]}function A(t,e,i){I((function(){return t.apply(void 0,e)}),i)}function x(t,e,i,l,n,s,a){t.current=l,e.current=n,i.current=!1,s.current&&(s.current=null,a())}function p(t,e,i,l,n,s,a,c,g,I){if(t){var u=!1,d=null,B=function(){if(!u){var t,i,B=e.getState();try{t=l(B,n.current)}catch(t){i=t,d=t}i||(d=null),t===s.current?a.current||g():(s.current=t,c.current=t,a.current=!0,I({type:"STORE_UPDATED",payload:{error:i}}))}};return i.onStateChange=B,i.trySubscribe(),B(),function(){if(u=!0,i.tryUnsubscribe(),i.onStateChange=null,d)throw d}}}var G=function(){return[null,0]};function R(t,e){void 0===e&&(e={});var i=e,s=i.getDisplayName,a=void 0===s?function(t){return"ConnectAdvanced("+t+")"}:s,c=i.methodName,I=void 0===c?"connectAdvanced":c,u=i.renderCountProp,o=void 0===u?void 0:u,R=i.shouldHandleStateChanges,L=void 0===R||R,h=i.storeKey,m=void 0===h?"store":h,S=(i.withRef,i.forwardRef),Z=void 0!==S&&S,y=i.context,X=void 0===y?n:y,E=B(i,C),f=X;return function(e){var i=e.displayName||e.name||"Component",n=a(i),s=d({},E,{getDisplayName:a,methodName:I,renderCountProp:o,shouldHandleStateChanges:L,storeKey:m,displayName:n,wrappedComponentName:i,WrappedComponent:e}),c=E.pure,u=c?l.useMemo:function(t){return t()};function C(i){var n=(0,l.useMemo)((function(){var t=i.reactReduxForwardedRef,e=B(i,U);return[i.context,t,e]}),[i]),a=n[0],c=n[1],I=n[2],o=(0,l.useMemo)((function(){return a&&a.Consumer&&(0,r.isContextConsumer)(l.createElement(a.Consumer,null))?a:f}),[a,f]),F=(0,l.useContext)(o),C=Boolean(i.store)&&Boolean(i.store.getState)&&Boolean(i.store.dispatch);Boolean(F)&&Boolean(F.store);var R=C?i.store:F.store,h=(0,l.useMemo)((function(){return function(e){return t(e.dispatch,s)}(R)}),[R]),m=(0,l.useMemo)((function(){if(!L)return b;var t=g(R,C?null:F.subscription),e=t.notifyNestedSubs.bind(t);return[t,e]}),[R,C,F]),S=m[0],Z=m[1],y=(0,l.useMemo)((function(){return C?F:d({},F,{subscription:S})}),[C,F,S]),X=(0,l.useReducer)(V,Q,G),E=X[0][0],W=X[1];if(E&&E.error)throw E.error;var N=(0,l.useRef)(),T=(0,l.useRef)(I),Y=(0,l.useRef)(),J=(0,l.useRef)(!1),H=u((function(){return Y.current&&I===T.current?Y.current:h(R.getState(),I)}),[R,E,I]);A(x,[T,N,J,I,H,Y,Z]),A(p,[L,R,S,h,T,N,J,Y,Z,W],[R,S,h]);var k=(0,l.useMemo)((function(){return l.createElement(e,d({},H,{ref:c}))}),[c,e,H]);return(0,l.useMemo)((function(){return L?l.createElement(o.Provider,{value:y},k):k}),[o,k,y])}var R=c?l.memo(C):C;if(R.WrappedComponent=e,R.displayName=C.displayName=n,Z){var h=l.forwardRef((function(t,e){return l.createElement(R,d({},t,{reactReduxForwardedRef:e}))}));return h.displayName=n,h.WrappedComponent=e,F()(h,e)}return F()(R,e)}}function L(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function h(t,e){if(L(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),l=Object.keys(e);if(i.length!==l.length)return!1;for(var n=0;n<i.length;n++)if(!Object.prototype.hasOwnProperty.call(e,i[n])||!L(t[i[n]],e[i[n]]))return!1;return!0}function m(t){return function(e,i){var l=t(e,i);function n(){return l}return n.dependsOnOwnProps=!1,n}}function S(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function Z(t,e){return function(e,i){i.displayName;var l=function(t,e){return l.dependsOnOwnProps?l.mapToProps(t,e):l.mapToProps(t)};return l.dependsOnOwnProps=!0,l.mapToProps=function(e,i){l.mapToProps=t,l.dependsOnOwnProps=S(t);var n=l(e,i);return"function"==typeof n&&(l.mapToProps=n,l.dependsOnOwnProps=S(n),n=l(e,i)),n},l}}const y=[function(t){return"function"==typeof t?Z(t):void 0},function(t){return t?void 0:m((function(t){return{dispatch:t}}))},function(t){return t&&"object"==typeof t?m((function(e){return function(t,e){var i={},l=function(l){var n=t[l];"function"==typeof n&&(i[l]=function(){return e(n.apply(void 0,arguments))})};for(var n in t)l(n);return i}(t,e)})):void 0}],X=[function(t){return"function"==typeof t?Z(t):void 0},function(t){return t?void 0:m((function(){return{}}))}];function E(t,e,i){return d({},i,t,e)}const f=[function(t){return"function"==typeof t?function(t){return function(e,i){i.displayName;var l,n=i.pure,s=i.areMergedPropsEqual,a=!1;return function(e,i,c){var g=t(e,i,c);return a?n&&s(g,l)||(l=g):(a=!0,l=g),l}}}(t):void 0},function(t){return t?void 0:function(){return E}}];var W=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function N(t,e,i,l){return function(n,s){return i(t(n,s),e(l,s),s)}}function T(t,e,i,l,n){var s,a,c,g,I,u=n.areStatesEqual,d=n.areOwnPropsEqual,B=n.areStatePropsEqual,o=!1;return function(n,F){return o?function(n,o){var F,r,C=!d(o,a),U=!u(n,s);return s=n,a=o,C&&U?(c=t(s,a),e.dependsOnOwnProps&&(g=e(l,a)),I=i(c,g,a)):C?(t.dependsOnOwnProps&&(c=t(s,a)),e.dependsOnOwnProps&&(g=e(l,a)),I=i(c,g,a)):U?(F=t(s,a),r=!B(F,c),c=F,r&&(I=i(c,g,a)),I):I}(n,F):(c=t(s=n,a=F),g=e(l,a),I=i(c,g,a),o=!0,I)}}function Y(t,e){var i=e.initMapStateToProps,l=e.initMapDispatchToProps,n=e.initMergeProps,s=B(e,W),a=i(t,s),c=l(t,s),g=n(t,s);return(s.pure?T:N)(a,c,g,t,s)}var J=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function H(t,e,i){for(var l=e.length-1;l>=0;l--){var n=e[l](t);if(n)return n}return function(e,l){throw new Error("Invalid value of type "+typeof t+" for "+i+" argument when connecting component "+l.wrappedComponentName+".")}}function k(t,e){return t===e}function v(t){var e=void 0===t?{}:t,i=e.connectHOC,l=void 0===i?R:i,n=e.mapStateToPropsFactories,s=void 0===n?X:n,a=e.mapDispatchToPropsFactories,c=void 0===a?y:a,g=e.mergePropsFactories,I=void 0===g?f:g,u=e.selectorFactory,o=void 0===u?Y:u;return function(t,e,i,n){void 0===n&&(n={});var a=n,g=a.pure,u=void 0===g||g,F=a.areStatesEqual,r=void 0===F?k:F,C=a.areOwnPropsEqual,U=void 0===C?h:C,Q=a.areStatePropsEqual,b=void 0===Q?h:Q,V=a.areMergedPropsEqual,A=void 0===V?h:V,x=B(a,J),p=H(t,s,"mapStateToProps"),G=H(e,c,"mapDispatchToProps"),R=H(i,I,"mergeProps");return l(o,d({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:p,initMapDispatchToProps:G,initMergeProps:R,pure:u,areStatesEqual:r,areOwnPropsEqual:U,areStatePropsEqual:b,areMergedPropsEqual:A},x))}}const w=v();function M(){return(0,l.useContext)(n)}function D(t){void 0===t&&(t=n);var e=t===n?M:function(){return(0,l.useContext)(t)};return function(){return e().store}}var z=D();function P(t){void 0===t&&(t=n);var e=t===n?z:D(t);return function(){return e().dispatch}}var O=P(),j=function(t,e){return t===e};function K(t){void 0===t&&(t=n);var e=t===n?M:function(){return(0,l.useContext)(t)};return function(t,i){void 0===i&&(i=j);var n=e(),s=function(t,e,i,n){var s,a=(0,l.useReducer)((function(t){return t+1}),0)[1],c=(0,l.useMemo)((function(){return g(i,n)}),[i,n]),u=(0,l.useRef)(),d=(0,l.useRef)(),B=(0,l.useRef)(),o=(0,l.useRef)(),F=i.getState();try{if(t!==d.current||F!==B.current||u.current){var r=t(F);s=void 0!==o.current&&e(r,o.current)?o.current:r}else s=o.current}catch(t){throw u.current&&(t.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),t}return I((function(){d.current=t,B.current=F,o.current=s,u.current=void 0})),I((function(){function t(){try{var t=i.getState();if(t===B.current)return;var l=d.current(t);if(e(l,o.current))return;o.current=l,B.current=t}catch(t){u.current=t}a()}return c.onStateChange=t,c.trySubscribe(),t(),function(){return c.tryUnsubscribe()}}),[i,c]),s}(t,i,n.store,n.subscription);return(0,l.useDebugValue)(s),s}}var _,q=K(),$=i(3935);_=$.unstable_batchedUpdates,s=_},2408:(t,e,i)=>{"use strict";var l=i(7418),n=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,g=60112;e.Suspense=60113;var I=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;n=d("react.element"),s=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),c=d("react.context"),g=d("react.forward_ref"),e.Suspense=d("react.suspense"),I=d("react.memo"),u=d("react.lazy")}var B="function"==typeof Symbol&&Symbol.iterator;function o(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var F={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},r={};function C(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}function U(){}function Q(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}C.prototype.isReactComponent={},C.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(o(85));this.updater.enqueueSetState(this,t,e,"setState")},C.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},U.prototype=C.prototype;var b=Q.prototype=new U;b.constructor=Q,l(b,C.prototype),b.isPureReactComponent=!0;var V={current:null},A=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function p(t,e,i){var l,s={},a=null,c=null;if(null!=e)for(l in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)A.call(e,l)&&!x.hasOwnProperty(l)&&(s[l]=e[l]);var g=arguments.length-2;if(1===g)s.children=i;else if(1<g){for(var I=Array(g),u=0;u<g;u++)I[u]=arguments[u+2];s.children=I}if(t&&t.defaultProps)for(l in g=t.defaultProps)void 0===s[l]&&(s[l]=g[l]);return{$$typeof:n,type:t,key:a,ref:c,props:s,_owner:V.current}}function G(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var R=/\/+/g;function L(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function h(t,e,i,l,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var g=!1;if(null===t)g=!0;else switch(c){case"string":case"number":g=!0;break;case"object":switch(t.$$typeof){case n:case s:g=!0}}if(g)return a=a(g=t),t=""===l?"."+L(g,0):l,Array.isArray(a)?(i="",null!=t&&(i=t.replace(R,"$&/")+"/"),h(a,e,i,"",(function(t){return t}))):null!=a&&(G(a)&&(a=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||g&&g.key===a.key?"":(""+a.key).replace(R,"$&/")+"/")+t)),e.push(a)),1;if(g=0,l=""===l?".":l+":",Array.isArray(t))for(var I=0;I<t.length;I++){var u=l+L(c=t[I],I);g+=h(c,e,i,u,a)}else if("function"==typeof(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}(t)))for(t=u.call(t),I=0;!(c=t.next()).done;)g+=h(c=c.value,e,i,u=l+L(c,I++),a);else if("object"===c)throw e=""+t,Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return g}function m(t,e,i){if(null==t)return t;var l=[],n=0;return h(t,l,"","",(function(t){return e.call(i,t,n++)})),l}function S(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var Z={current:null};function y(){var t=Z.current;if(null===t)throw Error(o(321));return t}var X={ReactCurrentDispatcher:Z,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:V,IsSomeRendererActing:{current:!1},assign:l};e.Children={map:m,forEach:function(t,e,i){m(t,(function(){e.apply(this,arguments)}),i)},count:function(t){var e=0;return m(t,(function(){e++})),e},toArray:function(t){return m(t,(function(t){return t}))||[]},only:function(t){if(!G(t))throw Error(o(143));return t}},e.Component=C,e.PureComponent=Q,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=X,e.cloneElement=function(t,e,i){if(null==t)throw Error(o(267,t));var s=l({},t.props),a=t.key,c=t.ref,g=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,g=V.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var I=t.type.defaultProps;for(u in e)A.call(e,u)&&!x.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==I?I[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=i;else if(1<u){I=Array(u);for(var d=0;d<u;d++)I[d]=arguments[d+2];s.children=I}return{$$typeof:n,type:t.type,key:a,ref:c,props:s,_owner:g}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=p,e.createFactory=function(t){var e=p.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:g,render:t}},e.isValidElement=G,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:S}},e.memo=function(t,e){return{$$typeof:I,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return y().useCallback(t,e)},e.useContext=function(t,e){return y().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return y().useEffect(t,e)},e.useImperativeHandle=function(t,e,i){return y().useImperativeHandle(t,e,i)},e.useLayoutEffect=function(t,e){return y().useLayoutEffect(t,e)},e.useMemo=function(t,e){return y().useMemo(t,e)},e.useReducer=function(t,e,i){return y().useReducer(t,e,i)},e.useRef=function(t){return y().useRef(t)},e.useState=function(t){return y().useState(t)},e.version="17.0.2"},7294:(t,e,i)=>{"use strict";t.exports=i(2408)},53:(t,e)=>{"use strict";var i,l,n,s;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var c=Date,g=c.now();e.unstable_now=function(){return c.now()-g}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var I=null,u=null,d=function(){if(null!==I)try{var t=e.unstable_now();I(!0,t),I=null}catch(t){throw setTimeout(d,0),t}};i=function(t){null!==I?setTimeout(i,0,t):(I=t,setTimeout(d,0))},l=function(t,e){u=setTimeout(t,e)},n=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},s=e.unstable_forceFrameRate=function(){}}else{var B=window.setTimeout,o=window.clearTimeout;if("undefined"!=typeof console){var F=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof F&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var r=!1,C=null,U=-1,Q=5,b=0;e.unstable_shouldYield=function(){return e.unstable_now()>=b},s=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Q=0<t?Math.floor(1e3/t):5};var V=new MessageChannel,A=V.port2;V.port1.onmessage=function(){if(null!==C){var t=e.unstable_now();b=t+Q;try{C(!0,t)?A.postMessage(null):(r=!1,C=null)}catch(t){throw A.postMessage(null),t}}else r=!1},i=function(t){C=t,r||(r=!0,A.postMessage(null))},l=function(t,i){U=B((function(){t(e.unstable_now())}),i)},n=function(){o(U),U=-1}}function x(t,e){var i=t.length;t.push(e);t:for(;;){var l=i-1>>>1,n=t[l];if(!(void 0!==n&&0<R(n,e)))break t;t[l]=e,t[i]=n,i=l}}function p(t){return void 0===(t=t[0])?null:t}function G(t){var e=t[0];if(void 0!==e){var i=t.pop();if(i!==e){t[0]=i;t:for(var l=0,n=t.length;l<n;){var s=2*(l+1)-1,a=t[s],c=s+1,g=t[c];if(void 0!==a&&0>R(a,i))void 0!==g&&0>R(g,a)?(t[l]=g,t[c]=i,l=c):(t[l]=a,t[s]=i,l=s);else{if(!(void 0!==g&&0>R(g,i)))break t;t[l]=g,t[c]=i,l=c}}}return e}return null}function R(t,e){var i=t.sortIndex-e.sortIndex;return 0!==i?i:t.id-e.id}var L=[],h=[],m=1,S=null,Z=3,y=!1,X=!1,E=!1;function f(t){for(var e=p(h);null!==e;){if(null===e.callback)G(h);else{if(!(e.startTime<=t))break;G(h),e.sortIndex=e.expirationTime,x(L,e)}e=p(h)}}function W(t){if(E=!1,f(t),!X)if(null!==p(L))X=!0,i(N);else{var e=p(h);null!==e&&l(W,e.startTime-t)}}function N(t,i){X=!1,E&&(E=!1,n()),y=!0;var s=Z;try{for(f(i),S=p(L);null!==S&&(!(S.expirationTime>i)||t&&!e.unstable_shouldYield());){var a=S.callback;if("function"==typeof a){S.callback=null,Z=S.priorityLevel;var c=a(S.expirationTime<=i);i=e.unstable_now(),"function"==typeof c?S.callback=c:S===p(L)&&G(L),f(i)}else G(L);S=p(L)}if(null!==S)var g=!0;else{var I=p(h);null!==I&&l(W,I.startTime-i),g=!1}return g}finally{S=null,Z=s,y=!1}}var T=s;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){X||y||(X=!0,i(N))},e.unstable_getCurrentPriorityLevel=function(){return Z},e.unstable_getFirstCallbackNode=function(){return p(L)},e.unstable_next=function(t){switch(Z){case 1:case 2:case 3:var e=3;break;default:e=Z}var i=Z;Z=e;try{return t()}finally{Z=i}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=T,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var i=Z;Z=t;try{return e()}finally{Z=i}},e.unstable_scheduleCallback=function(t,s,a){var c=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?c+a:c,t){case 1:var g=-1;break;case 2:g=250;break;case 5:g=1073741823;break;case 4:g=1e4;break;default:g=5e3}return t={id:m++,callback:s,priorityLevel:t,startTime:a,expirationTime:g=a+g,sortIndex:-1},a>c?(t.sortIndex=a,x(h,t),null===p(L)&&t===p(h)&&(E?n():E=!0,l(W,a-c))):(t.sortIndex=g,x(L,t),X||y||(X=!0,i(N))),t},e.unstable_wrapCallback=function(t){var e=Z;return function(){var i=Z;Z=e;try{return t.apply(this,arguments)}finally{Z=i}}}},3840:(t,e,i)=>{"use strict";t.exports=i(53)},482:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},1583:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(2802));e.default=(t=new n.default,e)=>e.analyze?t.merge(e.analyze):t},257:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817));e.default=(t=new n.default,e)=>e.app?new n.default(e.app):t},6690:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5813));e.default=(t=new n.default,e)=>e.bootOption?t.merge(e.bootOption):t},9530:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const n=i(665),s=l(i(482)),a=l(i(1583)),c=l(i(257)),g=l(i(6690)),I=l(i(9202)),u=l(i(7738)),d=l(i(6686)),B=l(i(705)),o=l(i(6706)),F=l(i(4005)),r=l(i(358)),C=l(i(7706)),U=l(i(2543)),Q=l(i(5181)),b=l(i(4980)),V=l(i(6086)),A=l(i(6297)),x=l(i(6087)),p=l(i(507));e.reducerFiles={app:c.default,user:p.default,tuneCh:x.default,ranks:U.default,thread:b.default,threads:A.default,threadDetail:V.default,analyze:a.default,bootOption:g.default,setting:Q.default,posts:I.default,postsTimeline:o.default,postsTimelineStock:F.default,postsTimelineZero:r.default,postsTimelineZeroAfter:C.default,postsMulti:d.default,postsSingle:B.default,postsChild:u.default,actioned:s.default},e.default=(0,n.combineReducers)(e.reducerFiles)},9202:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5232));e.default=(t=[],e)=>e.posts?new n.default(e.posts):t},7738:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5232));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},6686:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(5232));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new s.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let i=[];return t.length+e.postsMulti.length>n.default.findOneLimitCnt?(i=[...e.postsMulti,...t],i.slice(0,n.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},705:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5853));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},6706:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6423));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},4005:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3443));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new n.default(e.postsTimelineStock):t}}},358:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(8059));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new n.default(e.postsTimelineZero):t}}},7706:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6301));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new n.default(e.postsTimelineZeroAfter):t}}},2543:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5232));e.default=(t=[],e)=>{let i=[],l=0;const s=(t,i)=>t.ch===e.app.rootCh||i.ch===e.app.rootCh?0:t.liveCnt<i.liveCnt?1:t.liveCnt>i.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(i=n.default.getDispPosts(e),l=i&&i.length?i.length:0,0===l?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:i[l-1].favicon,stampId:i[l-1].stampId,post:i[l-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(s);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const i=[],l=e.rank.length;let n=e.rank[0];for(let s=0;s<l;s++){let l=e.rank[s];n=l.updateTime>n.updateTime?l:n,l.ch===t[0].ch&&(l={...l,liveCnt:t[0].liveCnt}),i.push(l)}return i.sort(s),i[0].faicon=n.favicon,i[0].post=n.post,i[0].stampId=n.stampId,i}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},5181:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3871));e.default=(t=new n.default,e)=>e.setting?t.merge(e.setting):t},4980:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5537));e.default=(t=new n.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new n.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},6086:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5537));e.default=(t=new n.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},6297:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5300));e.default=(t=new n.default,e)=>e.threads?t.merge(e.threads):t},6087:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1960));e.default=(t=new n.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new n.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:i}=e;if(i.ch===t.ch)return{...t,liveCnt:i.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const l=e.posts[0];if(l.ch===t.ch)return{...t,title:l.title,stampId:l.stampId,favicon:l.favicon,post:l.post}}return t}},507:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6548));e.default=(t=new n.default,e)=>e.user?t.merge(e.user):t},3560:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2802:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=s},4817:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(1960)),a=l(i(5537));class c extends n.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const i=t.ch?t.ch:"/",l=t.id?t.id:"",g=n.default.isSet(t.isMediaCh)?t.isMediaCh:c.getIsMediaCh(i),I=!!n.default.isSet(t.isLinkCh)&&t.isLinkCh,u=t.rootCh?t.rootCh:i,d=n.default.isSet(t.isRootCh)?t.isRootCh:u===i,B=t.rootTitle?t.rootTitle:"talkn",o=c.getMediaSrc(t.protocol,i),F=c.getMediaType(o,t),r=t&&t.tuned?t.tuned:"",C=c.getDispThreadType(t,g),U=!n.default.isSet(t.multistream)||t.multistream,Q=t&&t.findType?t.findType:a.default.findTypeAll,b=t&&t.offsetFindId?t.offsetFindId:c.defaultOffsetFindId,V=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:c.defaultOffsetFindId,A=t&&t.offsetSingleFindId?t.offsetSingleFindId:c.defaultOffsetFindId,x=t&&t.offsetMultiFindId?t.offsetMultiFindId:c.defaultOffsetFindId,p=t&&t.offsetChildFindId?t.offsetChildFindId:c.defaultOffsetFindId,G=t&&t.offsetLogsFindId?t.offsetLogsFindId:c.defaultOffsetFindId,R=t.inputPost?t.inputPost:"",L=!!t.inputStampId&&t.inputStampId,h=t.inputCurrentTime?t.inputCurrentTime:0,m=t.inputSearch?t.inputSearch:"",S=!!n.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,Z=t&&t.actioned?t.actioned:"",y=n.default.isSet(t.debug)?t.debug:"";return this.create({id:l,isRootCh:d,isLinkCh:I,isMediaCh:g,rootCh:u,rootTitle:B,chType:F,dispThreadType:C,tuned:r,multistream:U,findType:Q,offsetFindId:b,offsetTimelineFindId:V,offsetSingleFindId:A,offsetMultiFindId:x,offsetChildFindId:p,offsetLogsFindId:G,inputPost:R,inputStampId:L,inputCurrentTime:h,inputSearch:m,isToggleMultistream:S,actioned:Z,debug:y})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[c.mediaTypeMp3,c.mediaTypeMp4,c.mediaTypeM4a]}static get mediaChTagTypes(){return{[c.mediaTypeMp3]:c.mediaTagTypeAudio,[c.mediaTypeMp4]:c.mediaTagTypeVideo,[c.mediaTypeM4a]:c.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:c.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(c.mediaChTagTypes),i=e.length;let l="html";for(let n=0;n<i;n++){const i=new RegExp(`.${e[n]}$`);if(t.match(i)){l=c.mediaChTagTypes[e[n]];break}}return l}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return c.isAudioContentType(t)||c.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(c.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(c.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return c.mediaChs.some((e=>{const i=new RegExp(`.${e}/$|.${e}$`);return t.match(i)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?c.dispThreadTypeTimeline:c.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},i,l,n=""){let s="";const a=t&&t.dispThreadType?t.dispThreadType:c.dispThreadTypeMulti;return s=(t=c.getStepDispThreadType({app:t,ranks:e},i,l,n)).dispThreadType,{app:t,stepTo:`${a} to ${s}`}}static getStepDispThreadType({app:t,ranks:e},i={},l,n){const s=t||{};if(s.offsetFindId=c.defaultOffsetFindId,i.isMediaCh)return s.dispThreadType=c.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:c.defaultOffsetFindId,s.isLinkCh="Links"===n||"findMediaCh"===n||"ToMedia"===n,s.isMediaCh=!0,s;if("BackToRootCh"===n&&(s.isLinkCh=!1),"Links"===n&&e.length>0){if(!e.some((t=>t.ch===l||t.ch===l+"/")))return s.offsetFindId=c.defaultOffsetFindId,s.dispThreadType=c.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===l?s.multistream?s.dispThreadType=c.dispThreadTypeMulti:s.dispThreadType=c.dispThreadTypeSingle:s.dispThreadType=c.dispThreadTypeChild,s}}e.default=c},5813:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((i=>{e[t[i].name]=t[i].value})),e}}e.default=s},367:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},1960:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(300));class a extends n.default{constructor(t){super(),this.ch=a.defaultValues.ch,this.chs=a.defaultValues.chs,this.favicon=a.defaultValues.favicon,this.findType=a.defaultValues.findType,this.layer=a.defaultValues.layer,this.post=a.defaultValues.post,this.protocol=a.defaultValues.protocol,this.stampId=a.defaultValues.stampId,this.title=a.defaultValues.title,this.liveCnt=a.defaultValues.liveCnt,this.uid=a.defaultValues.uid,this.utype=a.defaultValues.utype,this.dispFlg=a.defaultValues.dispFlg,this.data=a.defaultValues.data,this.createTime=a.defaultValues.createTime,this.currentTime=a.defaultValues.currentTime,this.updateTime=a.defaultValues.updateTime;const e=t?{...a.defaultValues,...t}:a.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:s.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=a},9565:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5232:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817)),s=l(i(9565)),a=l(i(5853)),c=l(i(6423)),g=l(i(3443));class I{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:i,postsMulti:l,postsSingle:s,postsChild:a,postsLogs:c}=t;switch(e.dispThreadType){case n.default.dispThreadTypeTimeline:return i;case n.default.dispThreadTypeMulti:return l;case n.default.dispThreadTypeSingle:return s;case n.default.dispThreadTypeChild:return a;case n.default.dispThreadTypeLogs:return c}}static getAnyActionPosts(t,e){const{app:i,posts:l}=t,c=l&&l.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new a.default,t.postsChild=[],t.postsLogs=[],i.dispThreadType){case n.default.dispThreadTypeTimeline:t=I.getAnyActionPostsTimeline(t,l,e,c);break;case n.default.dispThreadTypeMulti:t.postsMulti=c?l:[];break;case n.default.dispThreadTypeSingle:t.postsSingle=c?l:[];break;case n.default.dispThreadTypeChild:t.postsChild=c?l:[];break;case n.default.dispThreadTypeLogs:t.postsLogs=c?l:[]}return t}static getAnyActionPostsTimeline(t,e,i,l){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new c.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new c.default,t.postsTimelineStock=new g.default,l)){const i=e.length;for(let l=0;l<i;l++)0===e[l].currentTime?t.postsTimeline.push(e[l]):t.postsTimelineStock.push(e[l])}return t}}e.default=I},5853:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6423:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8059:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3871:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){super();const e=t&&t.client?t.client:{},i=t&&t.common?t.common:{},l=t&&t.server?t.server:{};return this.create({client:e,common:i,server:l})}}e.default=s},5537:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(7771)),a=l(i(300)),c=l(i(4817));class g extends n.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=g.getDefaultFavicon(),this.findType=g.findTypeAll,this.title=g.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=g.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const i=g.isWindowObj(t)?g.constructorFromWindow(t,e):t;return this.create(i)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[g.findTypeHtml]:["text/html"],[g.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[g.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const i=!!e.ch&&e.ch,l=g.getCh(e,i);let s={};return s.ch=l,s.chs=["/"],s.hasSlash=!!e.hasslash&&n.default.getBool(e.hasslash),s.protocol="talkn:",s.contentType="",s.charset="UTF-8",s.host="",s.favicon=g.getDefaultFavicon(),s.findType=g.findTypeAll,i?(s.protocol=g.getProtocol(i),s.host=g.getHost(i),s.chs=i.chs&&i.chs.length>0?i.chs:g.getChs(l)):(s.protocol=location.protocol?location.protocol:"????:",s.chs=t.chs&&t.chs.length>0?t.chs:g.getChs(l),s.contentType=document.contentType?document.contentType:"",s.charset=document.charset?document.charset:"",s.host=location.host?location.host:"",s.favicon=g.getFaviconFromWindow(window)),s.title=g.getDefaultTitle(),s.metas=[],s.serverMetas={},s.clientMetas={},s.emotions={},s.links=[],s.h1s=[],s.audios=[],s.videos=[],s.layer=g.getLayer(s.ch),s.mediaIndex=[],s.postCnt=0,s.multiPostCnt=0,s.isSelfCh=g.getIsSelfCh("",s.ch),s.createTime="",s.updateTime="",s}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const l="/"===t.slice(-1)?t:t+"/";if("/"!==l){const t=l.split("/"),n=t.length;let s="";for(var i=1;i<n;i++)""!==t[i]&&(s+=t[i],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):a.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return c.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=g.getMediaSrc(t);return c.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,i="http://",l="https://",n=location.host;if(e.indexOf(i)||e.indexOf(l)){const t=i+n+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,i,l={}){let n={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return n.isCreate=g.getStatusCreate(i),n.isRequireUpsert=g.getStatusIsRequireUpsert(t,l,n.isCreate),n.isMultistream=g.getStatusIsMultistream(e),n.isToggleMultistream=g.getStatusIsToggleMultistream(e),n.isMediaCh=g.getStatusIsMediaCh(t.ch),n}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,i=!1){if(!i)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,l=i.getFullYear(),n=i.getMonth(),s=i.getDate(),c=i.getHours();return i.getMinutes(),e<new Date(l,n,s,c-a.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===c.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return c.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=g.findTypes[g.findTypeHtml],i=g.findTypes[g.findTypeMusic],l=g.findTypes[g.findTypeVideo];let n;if(t&&""!==t){let s="";t.indexOf(";")>0&&(s=t.split(";")[0]),(e.includes(t)||e.includes(s))&&(n=g.findTypeHtml),(i.includes(t)||i.includes(s))&&(n=g.findTypeMusic),(l.includes(t)||l.includes(s))&&(n=g.findTypeVideo)}return n}static getFindTypeFromSrc(t){const e=c.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=g},5300:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=s},6548:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(1960));class a extends n.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",i=t&&t.utype?t.utype:"",l=t&&t.tuned?t.tuned:"",n=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",c=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,u=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,d=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:i,tuned:l,multistreamed:n,actioned:s,offsetFindId:c,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:u,offsetLogsFindId:d,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=a},2230:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3560)),s=l(i(2802)),a=l(i(4817)),c=l(i(367)),g=l(i(5232)),I=l(i(6423)),u=l(i(3443)),d=l(i(3364)),B=l(i(5537)),o=l(i(6548));class F{constructor(t,e={}){this.bootOption=t,this.ranks=new d.default,this.menuLogs=new c.default(e.menuLogs),this.posts=new g.default,this.postsMulti=new g.default,this.postsSingle=new g.default,this.postsChild=new g.default,this.postsTimeline=new I.default,this.postsTimelineStock=new u.default,this.postsLogs=new g.default,this.analyze=new s.default,this.thread=new B.default(this.bootOption,e.thread),this.threadDetail=new B.default(this.bootOption,e.thread),this.app=new a.default(F.getAppParams(this.thread,this.bootOption,e)),this.user=new o.default(F.getUserParams(this,e)),this.actionLog=new n.default}static getAppParams(t,e,i){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?a.default.dispThreadTypeMulti:a.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=F},3841:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1665));e.default={updateStyle:({styleKey:t,eleType:e,tagName:i,style:l})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:i,style:l}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),toggleDispSetChModal:({app:t,thread:e})=>({type:"TOGGLE_DISP_SET_CH_MODAL"}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),onClickToggleMain:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_MAIN",app:t,ui:e}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:i})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:i}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",app:t,ui:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>({type:"RESIZE_START_WINDOW",...t}),onResizeEndWindow:({app:t,setting:e,bootOption:i})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:i}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=n.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>(console.log(t),{type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:i})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:i}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},8215:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(4065),s=l(i(1216)),a=l(i(4817)),c=l(i(5537)),g=l(i(7638)),I=l(i(7865)),u=l(i(3669));class d extends n.Component{constructor(t){super(t),this.onScroll=this.onScroll.bind(this)}get clientStore(){if(window.talknWindow)return window.talknWindow.store}get clientState(){if(window.talknWindow)return window.talknWindow.store.getState()}api(t,e={}){window.talknWindow.api(t,e)}clientAction(t,e,i=(()=>{})){const l=e?{...e,type:t}:{type:t};window.talknWindow.store.dispatch(l)}onClickCh(t,e,i,l){let{app:n,thread:g,ranks:u,setting:d}=this.clientState;const B=g.ch;g.ch=t,e.clicked=l,e.isOpenLinks=!1,e.isOpenMenu=e.screenSize===I.default.screenSizeSmallLabel&&e.isOpenMenu,e.isOpenBoard=!0,s.default.isSet(i)&&(g.hasSlash=i);const o=c.default.getStatus(g,n,d);let{app:F,stepTo:r}=a.default.getStepToDispThreadType({app:n,ranks:u},o,t,l);switch("ToMedia"===l&&this.api("onResponseChAPI",t),n.isLinkCh&&!F.isLinkCh&&this.api("offResponseChAPI",B),n=F,n.offsetFindId=a.default.defaultOffsetFindId,r){case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeMulti} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeSingle} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeChild}`:e.isRootCh=!1,this.clientAction("ON_CLICK_TO_CHILD_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g});break;case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeMulti}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeMulti}`:e.isRootCh=!0,this.clientAction("ON_CLICK_TO_MULTI_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g});break;case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeSingle}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeSingle}`:e.isRootCh=!0,this.clientAction("ON_CLICK_TO_SINGLE_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g});break;case`${a.default.dispThreadTypeMulti} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeSingle} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeTimeline}`:e.isRootCh=!n.isLinkCh,this.clientAction("ON_CLICK_TO_TIMELINE_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g})}}onScroll({scrollTop:t=0,clientHeight:e=0,scrollHeight:i=0}){const{thread:l,app:n,ui:s,actionLog:a}=this.clientState,c=(s.extensionMode,I.default.extensionModeNone,["ON_RESIZE_END_WINDOW"]);let{uiTimeMarker:d}=this.clientState;if(0===t&&!c.includes(a[0])&&l[n.multistream?"multiPostCnt":"postCnt"]>g.default.findOnePostCnt){const t=document.querySelector("[data-component-name=TimeMarkerList]");t&&t.style&&(t.style.opacity=0),window.talknWindow.dom.exeGetMore(this.clientStore)}s.isOpenNewPost&&this.clientAction("CLOSE_NEW_POST");const B=u.default.update(t,d,{app:n,ui:s});d.now.label!==B.now.label&&this.clientAction("ON_SCROLL_UPDATE_TIME_MARKER",{uiTimeMarker:B}),window.talknWindow.dom.scrollTop=t,window.talknWindow.dom.scrollHeight=i,window.talknWindow.dom.clientHeight=e,window.talknWindow.dom.isScrollBottom=i===t+e}scrollToDidUpdateGetMore(){const{ui:t}=this.clientState,e=document.querySelector("[data-component-name=Posts]");let i=0;switch(t.screenSize){case I.default.screenSizeLargeLabel:case I.default.screenSizeSmallLabel:i=e.scrollHeight;break;case I.default.screenSizeMiddleLabel:i=document.body.scrollHeight}window.talknWindow.dom.scrollTop=i-window.talknWindow.dom.scrollHeight,e.scrollTop=window.talknWindow.dom.scrollTop,window.scrollTo(0,window.talknWindow.dom.scrollTop)}}e.default=d},7638:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(9573)),s=l(i(300)),a=l(i(1665));if("browser"===n.default.title){const{SUB_DOMAINS:t,DEVELOPMENT:e}=a.default,{env:i,domain:l}=s.default;s.default.mediaSecondInterval=200,s.default.screenSize={small:600,middle:960},s.default.defaultFavicon=`//${t.ASSETS}.${l}/favicon.ico`,s.default.portalPath=`//${t.PORTAL}.${l}/`,s.default.clientPath=`//${t.CLIENT}.${l}/`,s.default.assetsPath=`//${t.ASSETS}.${l}/`,s.default.sessionPath=`//${t.SESSION}.${l}/`,s.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"}}e.default=s.default},3691:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7771)),s=l(i(3365)),a=l(i(7865));e.default=(t,e)=>{const{props:i}=t,{actionLog:l}=i.state,n=l[0];c[e]&&c[e][n]&&c[e][n](t)};const c={Container:{"API_TO_CLIENT[EMIT]:tune":t=>{const{ui:e}=t.props.state;if(e.extensionMode===a.default.extensionModeLiveMedia){const t=JSON.stringify(s.default.inputs),e=JSON.stringify(s.default.map);window.talknWindow.ext.to("sendStampData",n.default.UNKNOWN,{inputs:t,map:e})}},"API_TO_CLIENT[EMIT]:fetchPosts":t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");switch(i.postsHeight+=window.talknWindow.dom.getPostsHeight(),t.props.updatePostsHeight(i.postsHeight),i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:l&&(l.scrollTop=99999999);break;case a.default.screenSizeMiddleLabel:window.scrollTo(0,99999999)}if(l){switch(window.talknWindow.dom.srollHeight=l.clientHeight,i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:l&&l.scrollHeight&&window.talknWindow.dom.updateUiTimeMarker(l.scrollHeight-l.clientHeight,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.updateUiTimeMarker(window.scrollY-window.innerHeight,{app:e,ui:i})}i.isOpenLinks||t.clientAction("CLOSE_LINKS"),window.talknWindow.dom.resizeEndWindow()}},"API_TO_CLIENT[EMIT]:changeThread":t=>{const{ui:e}=t.props.state;e.screenSize===a.default.screenSizeSmallLabel&&"Links"!==e.clicked&&"BackToRootCh"!==e.clicked&&"ToMedia"!==e.clicked&&t.clientAction("ON_CLICK_TOGGLE_DISP_MENU")},"API_TO_CLIENT[EMIT]:changeThreadDetail":t=>{const{threadDetail:e,ui:i}=t.props.state;i.isOpenDetail||(i.isOpenDetail=!0,t.clientAction("ON_CLICK_TOGGLE_DISP_DETAIL",{threadDetail:e,app:{detailCh:e.ch},ui:i}))},ON_CLICK_MULTISTREAM:t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");if(i.extensionMode===a.default.extensionModeNone)switch(i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:window.talknWindow.dom.updateUiTimeMarker(l.scrollHeight-l.clientHeight,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.updateUiTimeMarker(window.scrollY-window.innerHeight,{app:e,ui:i})}else window.talknWindow.dom.updateUiTimeMarker(l.scrollHeight-l.clientHeight,{app:e,ui:i});window.scrollTo(0,9999999),l.scrollTop=l.scrollHeight-l.clientHeight},ON_TRANSITION_END:t=>{const{ui:e}=t.props.state;e.postsHeight+=window.talknWindow.dom.getPostsHeight(),t.props.updatePostsHeight(e.postsHeight)},ON_CHANGE_FIND_TYPE:t=>{const{app:e,thread:i}=t.props.state;t.api("rank",{thread:i,app:e})},DELEGATE_POST:t=>{t.api("post"),t.api("onChangeInputPost"),t.clientAction("CLOSE_DISP_POSTS_SUPPORTER")},GET_CLIENT_METAS:t=>{const{app:e,thread:i}=t.props.state,{serverMetas:l}=i;e.isLinkCh||t.parentCoreApi("updateThreadServerMetas",l)},ON_CLICK_TOGGLE_DISP_DETAIL:t=>{const{ui:e}=t.props.state;e.extensionMode!==a.default.extensionModeModal&&e.extensionMode!==a.default.extensionModeEmbed||window.talknWindow.ext.to("getClientMetas",n.default.UNKNOWN)},TOGGLE_BUBBLE_POST:t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");if(i.extensionMode===a.default.extensionModeNone)switch(i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:l.scrollTop=l.scrollHeight-l.clientHeight,window.talknWindow.dom.updateUiTimeMarker(l.scrollTop,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:const t=9999999;window.scrollTo(0,t),window.talknWindow.dom.updateUiTimeMarker(t,{app:e,ui:i})}else l.scrollTop=l.scrollHeight-l.clientHeight,window.talknWindow.dom.updateUiTimeMarker(l.scrollTop,{app:e,ui:i})},RESIZE_END_WINDOW:t=>{}},Posts:{"API_TO_CLIENT[BROADCAST]:fetchPosts":t=>{},SCROLL_THREAD:t=>{},NEXT_POSTS_TIMELINE:g,"API_TO_CLIENT[BROADCAST]:post":g,"API_TO_CLIENT[EMIT]:getMore":t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");switch(t.scrollToDidUpdateGetMore(),i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:window.talknWindow.dom.updateUiTimeMarker(l.scrollTop,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.updateUiTimeMarker(window.scrollY,{app:e,ui:i})}}}};function g(t){const{ui:e}=t.props.state,i=document.querySelector("[data-component-name=Posts]");switch(e.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:e.isOpenPosts&&window.talknWindow.dom.isScrollBottom&&t.animateScrollTo(i,i.scrollHeight,400,t.props.endAnimateScrollTo),e.isOpenPosts&&t.props.openNewPost();break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.scrollHeight=i.clientHeight,e.isOpenPosts&&(window.talknWindow.dom.isScrollBottom?window.talknWindow.dom.animateScrollTo(window.talknWindow.dom.scrollHeight,400,t.props.endAnimateScrollTo):t.props.openNewPost())}}},7851:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t,e)=>({state:t})},4435:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7771)),s=l(i(300)),a=l(i(1665)),c=l(i(6562)),g=l(i(4817)),I=l(i(5232)),u=l(i(7865)),d=l(i(5549));e.default={updateAction:t=>e=>i=>{const l=t.getState();i.ui=i.ui?{...l.ui,...i.ui}:l.ui,i.app=i.app?{...l.app,...i.app}:l.app,B[i.type]&&(i=B[i.type](l,i)),i&&e(i)}};const B={"API_TO_CLIENT[REQUEST]:getMore":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!1,e),"API_TO_CLIENT[REQUEST]:fetchPosts":(t,e)=>e,"API_TO_CLIENT[REQUEST]:changeThread":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:fetchPosts":(t,e)=>{if(e.ui.isLoading=!1,e.ui.detailCh=e.thread.ch,!e.app.isLinkCh)switch(e.ui.extensionMode){case u.default.extensionModeBottom:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*d.default.transitionNotif+d.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{transition:t})}break;case u.default.extensionModeModal:if(!e.app.isMediaCh&&e.posts.length>0){const t=e.posts[e.posts.length-1]._id,i=e.posts[e.posts.length-1].post,l=e.posts[e.posts.length-1].stampId;let a=e.posts[e.posts.length-1].favicon;a=n.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(a),window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{id:t,post:i,stampId:l,favicon:a,addUnreadCnt:e.posts.length})}}return e},"API_TO_CLIENT[BROADCAST]:post":(t,e)=>{const i=e.posts.length-1;switch(e.ui.extensionMode){case u.default.extensionModeBottom:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*d.default.transitionNotif+d.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",{transition:t})}break;case u.default.extensionModeModal:if(e.posts.length>0){const t=e.posts[i]._id,l=e.posts[i].post,a=e.posts[i].stampId;let g=e.posts[i].favicon;g=n.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(g),window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{id:t,post:l,stampId:a,favicon:g,addUnreadCnt:e.posts.length})}}return e},"CLIENT_TO_API[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!0,e),ON_CLICK_MULTISTREAM:(t,e)=>{const i=I.default.getDispPosts(e),l=i&&i.length?i.length:0;return l>0&&t.ranks.length>0&&(e.ranks=t.ranks.map((e=>t.app.rootCh===e.ch?{...e,favicon:i[l-1].favicon,post:i[l-1].post,stampId:i[l-1].stampId}:e))),e},NEXT_POSTS_TIMELINE:(t,e)=>{const i=e.postsTimeline.length-1,l=e.postsTimeline[i]._id,a=e.postsTimeline[i].post,g=e.postsTimeline[i].stampId;let I=e.postsTimeline[i].favicon;return I=n.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(I),window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{id:l,post:a,stampId:g,favicon:I}),e.postsTimeline=[...t.postsTimeline,...e.postsTimeline],e},TOGGLE_DISP_POSTS_SUPPORTER:(t,e)=>(t.ui.isOpenPostsSupporter=!t.ui.isOpenPostsSupporter,e),TOGGLE_LINKS:(t,e)=>(e.ui.isOpenLinks=!t.ui.isOpenLinks,e),ON_CLICK_TOGGLE_POSTS:(t,e)=>(e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:u.default.getIsOpenPosts(e.ui),e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>{const i=t.threads[e.app.detailCh];return e.threadDetail={...i},e},OFF_TRANSITION:(t,e)=>(e.ui.height=g.default.getHeight(),e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:u.default.getIsOpenPosts(e.ui),e),ON_TRANSITION_END:(t,e)=>(e.ui.height=u.default.getHeight(),e.ui.isOpenPosts=u.default.getIsOpenPosts(e.ui),e),ON_RESIZE_START_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_RESIZE_END_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.ui.isLoading=!e.ui.isLoading,e),ON_CLICK_TOGGLE_DISP_MENU:(t,e)=>(e.ui.isOpenMenu=!e.ui.isOpenMenu,e),TOGGLE_DISP_SET_CH_MODAL:(t,e)=>(e.ui.isOpenSetChModal=!t.ui.isOpenSetChModal,e),TOGGLE_DISP_BOARD:(t,e)=>(e.ui.isOpenBoard=!t.ui.isOpenBoard,e),OPEN_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!0,e),TOGGLE_BUBBLE_POST:(t,e)=>(e.ui.isBubblePost=!t.ui.isBubblePost,e),CLOSE_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!1,e),OPEN_INNER_NOTIF:(t,e)=>(e.ui.openInnerNotif=""===e.ui.openInnerNotif?a.default.noInnerNotif:e.ui.openInnerNotif,e),ON_CHANGE_INPUT_POST:(t,e)=>{const i=e.ui.inputPost;return window.talknWindow.ext.to("setInputPost",n.default.UNKNOWN,{inputPost:i}),e},GET_CLIENT_METAS:(t,e)=>{let i=!1,{clientMetas:l}=e,{serverMetas:n}=t.thread;if(console.log(t,e),e.thread={},Object.keys(l).forEach(((t,s)=>{l[t]&&""!==l[t]&&n[t]!==l[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),i=!0,e.thread.serverMetas[t]=l[t])})),i)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},4603:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(1665));class a{constructor(){a.setupMath()}static setupMath(){Math.easeInOutQuad=(t,e,i,l)=>(t/=l/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e}static setupLog(){n.default.env===s.default.PRODUCTION&&window.talknWindow&&(window.log=t=>{const{ui:e}=window.talknWindow.store.getState();console.log(e.iFrameId)})}}e.default=a},4451:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>"COMPONENT_DID_MOUNTS"!==e.type?[e.type,...t]:t},4679:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>(e.componentDidMounts&&"string"==typeof e.componentDidMounts&&t.push(e.componentDidMounts),t)},5513:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(831),s=i(9530),a=l(i(7532)),c=l(i(4451)),g=l(i(4679)),I=l(i(4436)),u=l(i(2165)),d=l(i(695)),B={};Object.keys(s.reducerFiles).forEach((t=>{B[t]=(t=>(e={},i)=>i[t]?"Array"===i[t].constructor.name?[...i[t]]:{...i[t]}:e)(t)}));const o=(0,n.combineReducers)({ui:d.default,uiTimeMarker:a.default,style:u.default,componentDidMounts:g.default,actionLog:c.default,setting:I.default,...B});e.default=o},4436:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t={},e)=>e.setting?{...e.setting}:t},2165:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(8506)),a=l(i(5549)),c=l(i(9301)),g=l(i(982)),I=l(i(2243)),u=l(i(1540)),d=l(i(434)),B=l(i(9422)),o=l(i(865)),F=l(i(7825)),r=l(i(9201)),C=l(i(2423)),U=l(i(4857)),Q=l(i(3829)),b=l(i(8381)),V=l(i(4359)),A=l(i(6620)),x=l(i(7608)),p=l(i(4909)),G=l(i(9167)),R=l(i(1433)),L=l(i(7162)),h=l(i(4381));e.default=(t={},e)=>{switch(e.type){case"ON_RESIZE_START_WINDOW":case"ON_RESIZE_END_WINDOW":case"ON_TRANSITION":case"ON_TRANSITION_END":case"OFF_TRANSITION":case"EXT_TO_CLIENT[ACTION]:ON_TRANSITION":case"bootExtension":return new h.default(e);case"TOGGLE_DISP_MAIN":return{...t};case"API_TO_CLIENT[EMIT]:rank":case"API_TO_CLIENT[EMIT]:tune":case"API_TO_CLIENT[BROADCAST]:tune":return{...t,ranks:{...t.ranks,ol:b.default.getOl(e)}};case"ON_CLICK_MULTISTREAM":return{...t,board:{...t.board,menuLiChild:{...t.board.menuLiChild,color:e.app.multistream?s.default.activeColor:s.default.unactiveColor}},icon:{...t.icon,thunder:{}}};case"COMPONENT_DID_MOUNTS":case"API_TO_CLIENT[BROADCAST]:fetchPosts":return{...t,menus:{...t.menus,self:{...t.menus,transform:Q.default.getTransform(e)}}};case"API_TO_CLIENT[REQUEST]:fetchPosts":case"API_TO_CLIENT[REQUEST]:changeThread":return{...t,posts:{...t.posts,self:G.default.getSelf(e)}};case"API_TO_CLIENT[EMIT]:fetchPosts":case"OPEN_LINKS":case"CLOSE_LINKS":case"TOGGLE_LINKS":return{...t,menus:{...t.menus,self:{...t.menus,transform:Q.default.getTransform(e)}},posts:{...t.posts,self:G.default.getSelf(e)},board:{...t.board,self:{...t.board.self,width:s.default.getSelfWidth(e),height:s.default.getSelfHeight(e),boxShadow:s.default.getSelfBoxShadow(e)},menuLiChild:s.default.getMenuLiChild(e),menuLiLinks:s.default.getMenuLiLinks(e)},links:{...t.links,self:{...t.links.self,display:F.default.getSelfDisplay(e)},linksUl:{...t.links.linksUl,overflowY:F.default.getLinksUlOevrflowY(e)}},icon:{...t.icon,thunder:o.default.getThunder(e),bubble:o.default.getBubble(e),links:o.default.getLinks(e)}};case"TOGGLE_DISP_SET_CH_MODAL":return{...t,setChModal:{...t.setChModal,self:V.default.getSelf(e)}};case"TOGGLE_BUBBLE_POST":return{...t,board:{...t.board,menuLiBubble:{...t.board.menuLiBubble,color:e.ui.isBubblePost?s.default.activeColor:s.default.unactiveColor}},posts:{...t.posts,self:G.default.getSelf(e),more:G.default.getMore(e)},post:{...t.post,self:p.default.getSelf(e),upper:p.default.getUpper(e),bottomPost:p.default.getBottomPost(e)}};case"TOGGLE_DISP_POSTS_SUPPORTER":case"CLOSE_DISP_POSTS_SUPPORTER":return{...t,postsSupporter:{...t.postsSupporter,self:{...t.postsSupporter.self,transform:L.default.getTransform(e)}}};case"ON_CLICK_TO_TIMELINE_THREAD":return{...t,posts:{...t.posts,self:G.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.menuLiChild,color:n.default.isActiveMultistream(e,"reducer")?s.default.activeColor:s.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:s.default.unactiveColor}},video:{...t.video,self:U.default.getSelf(e)},audio:{...t.audio,self:C.default.getSelf(e)}};case"ON_CLICK_TO_MULTI_THREAD":return{...t,posts:{...t.posts,self:G.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:s.default.activeColor},menuLiLinks:{...t.menuLiLinks,color:s.default.activeColor}}};case"ON_CLICK_TO_SINGLE_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiLinks:{...t.menuLiLinks,color:s.default.activeColor}}};case"ON_CLICK_TO_CHILD_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:s.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:s.default.unactiveColor}},icon:{...t.icon,thunder:o.default.getThunder(e)}};case"ON_CLICK_TOGGLE_DISP_MENU_END":return{...t,posts:{...t.posts,self:G.default.getSelf(e)}};case"ON_CLICK_TOGGLE_DISP_DETAIL":case"ON_CLICK_TOGGLE_DISP_MENU":return{...t,menu:{...t.menu,self:{...t.menu.self,width:Q.default.getWidth(e),transform:Q.default.getTransform(e)}},detail:{...t.detail,[`self${c.default.detailRightSelfKey}`]:{...t.detail[`self${c.default.detailRightSelfKey}`],transform:I.default.getTransform(e)},[`self${c.default.detailModalSelfKey}`]:{...t.detail[`self${c.default.detailModalSelfKey}`],transform:g.default.getTransform(e)}},posts:{...t.posts,self:{...t.posts.self,width:G.default.getWidth(e)}},footer:{...t.footer,self:{...t.footer.self,width:d.default.getWidth(e),transform:d.default.getTransform(e)}},menuFooter:{...t.menuFooter,self:{...t.menuFooter.self,width:A.default.getWidth(e)}},postsFooter:{...t.postsFooter,self:{...t.postsFooter.self,maxWidth:R.default.getWidth(e),width:R.default.getWidth(e)}}};case"ON_CLICK_OPEN_LOCK_MENU":return{...t,lockMenu:{...t.lockMenu,menuShare:{...t.lockMenu.menuShare,transform:r.default.getCommonTransform(e)}}};case"OPEN_NEW_POST":case"CLOSE_NEW_POST":return{...t,container:{...t.container,newPost:{...t.container.newPost,transform:a.default.getNotifTranslateY(e)}}};case"OPEN_NOTIF":case"CLOSE_NOTIF":const i=x.default.getNotifsDisplay(e);return{...t,header:{...t.header,self:{...t.header.self,transform:B.default.getNotifTranslateY(e)}},container:{...t.container,newPost:{...t.container.newPost,display:a.default.getNewPostDisplay(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,height:x.default.getNotifsHeight(e)},self:{...t.notif.self,display:i}}};case"TOGGLE_DISP_BOARD":return{...t,board:{...t.board,self:s.default.getSelf(e)}};case"OPEN_INNER_NOTIF":case"CLOSE_INNER_NOTIF":return{...t,innerNotif:{...t.innerNotif,self:{...t.innerNotif.self,height:""!==e.ui.openInnerNotif?`${a.default.getBlockSize(e)}px`:"0px"}}};case"UPDATE_STYLE":const{styleKey:l,eleType:m,tagName:S,style:Z}=e;if(l&&m&&S)return{...t,[l]:{...t[l],[m]:{...t[l][m],[S]:{...t[l][m][S],...Z}}}};if(l&&m)return{...t,[l]:{...t[l],[m]:{...t[l][m],...Z}}};break;case"START_DISP_POSTS":case"START_UNDISP_POSTS":return{...t,extScreen:{...t.extScreen,self:{...t.extScreen.self,transform:u.default.getSelfTransform(e),transition:u.default.getSelfTransition(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,display:x.default.getNotifsDisplay(e)}}};default:return e.style?e.style:t}}},695:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865));e.default=(t=new n.default,e)=>e.ui?t.merge(e.ui):t},7532:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3669));e.default=(t=new n.default,e)=>e.uiTimeMarker?{...e.uiTimeMarker}:t},5221:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2030:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){return[]}}},7242:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4381));e.default=n.default},7865:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(4817)),a=l(i(7638));class c extends n.default{constructor(t={}){super();const e=t.iFrameId?t.iFrameId:"",i=c.getWidth(t),l=c.getHeight(t),s=t.postsHeight?t.postsHeight:0,a=c.getScreenSize(i),g=t.extensionMode?t.extensionMode:c.extensionModeNone,I=t.extensionWidth?t.extensionWidth:"0%",u=t.extensionHeight?t.extensionHeight:0,d=t&&t.threadScrollY?t.threadScrollY:0,B=c.getIsOpenPosts({height:l,extensionMode:g,extensionHeight:u}),o=!!t.isOpenSetting&&t.isOpenSetting,F=n.default.isSet(t.isOpenMenu)?t.isOpenMenu:c.getIsOpenMenu({screenSize:a}),r=a===c.screenSizeDetailLabel||!!n.default.isSet(t.isOpenDetail)&&t.isOpenDetail,C=!!t.isOpenNewPost&&t.isOpenNewPost,U=!!t.isOpenNotif&&t.isOpenNotif,Q=!!n.default.isSet(t.isOpenPostsSupporter)&&t.isOpenPostsSupporter,b=n.default.isSet(t.isOpenBoard)?t.isOpenBoard:c.getIsOpenBoard({screenSize:a}),V=!!n.default.isSet(t.isOpenSetChModal)&&t.isOpenSetChModal,A=!n.default.isSet(t.isBubblePost)||t.isBubblePost,x=!!n.default.isSet(t.isDispPosts)&&t.isDispPosts,p=!!n.default.isSet(t.isOpenLinks)&&t.isOpenLinks,G=!n.default.isSet(t.isTransition)||t.isTransition,R=t.menuComponent?t.menuComponent:c.getDefaultMenuComponent(),L=t.openLockMenu?t.openLockMenu:c.openLockMenuLabelNo,h=t.openInnerNotif?t.openInnerNotif:"",m=t.clicked?t.clicked:"",S=t.detailCh?t.detailCh:"/",Z=t.inputPost?t.inputPost:"",y=!!t.inputStampId&&t.inputStampId,X=t.inputCurrentTime?t.inputCurrentTime:0,E=t.inputSearch?t.inputSearch:"",f=!n.default.isSet(t.isLoading)||t.isLoading;return this.create({iFrameId:e,width:i,height:l,postsHeight:s,screenSize:a,extensionMode:g,extensionWidth:I,extensionHeight:u,threadScrollY:d,isOpenPosts:B,isOpenSetting:o,isOpenMenu:F,isOpenDetail:r,isOpenNewPost:C,isOpenNotif:U,isOpenPostsSupporter:Q,isOpenBoard:b,isOpenSetChModal:V,isBubblePost:A,isDispPosts:x,isOpenLinks:p,isTransition:G,menuComponent:R,openLockMenu:L,openInnerNotif:h,clicked:m,detailCh:S,inputPost:Z,inputStampId:y,inputCurrentTime:X,inputSearch:E,isLoading:f})}static get openLockMenuLabelNo(){return"No"}static get openLockMenuLabelLike(){return"Like"}static get openLockMenuLabelShare(){return"Share"}static get openLockMenuLabelAbout(){return"About"}static get screenSizeSmallLabel(){return"SMALL"}static get screenSizeMiddleLabel(){return"MIDDLE"}static get screenSizeLargeLabel(){return"LARGE"}static get screenSizeIndexLabel(){return"MENU"}static get screenSizeThreadLabel(){return"THREAD"}static get screenSizeDetailLabel(){return"DETAIL"}static get screenSizeSmallWidthPx(){return a.default.screenSize.small}static get screenSizeMiddleWidthPx(){return a.default.screenSize.middle}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static get menuComponentUsersLabel(){return"Users"}static get menuComponentRankLabel(){return"Rank"}static get menuComponentLogsLabel(){return"Logs"}static get menuComponentSettingLabel(){return"Setting"}static getDefaultMenuComponent(){return c.menuComponentRankLabel}static getWidth(t){return t&&t.extensionWidth>0?t.extensionWidth:t&&t.width>0?t.width:"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return t&&t.extensionHeigt>0?t.extensionHeigt:t&&t.height>0?t.height:"object"==typeof window&&window.innerHeight?window.innerHeight:0}static getScreenSize(t=0){if(!t){if(window&&0===window.innerWidth||0===window.innerHeight)return;window&&window.innerWidth>0&&(t=window.innerWidth)}return"string"==typeof t&&(t=t.replace("px","")),c.screenSizeSmallWidthPx>=t?c.screenSizeSmallLabel:c.screenSizeSmallWidthPx<=t&&c.screenSizeMiddleWidthPx>=t?c.screenSizeMiddleLabel:c.screenSizeLargeLabel}static getIsOpenMenu(t){switch(t.screenSize){case c.screenSizeSmallLabel:return!1;case c.screenSizeMiddleLabel:case c.screenSizeLargeLabel:return!0}}static getIsOpenBoard(t){switch(t.screenSize){case c.screenSizeSmallLabel:return!1;case c.screenSizeMiddleLabel:case c.screenSizeLargeLabel:return!0}}static getIsOpenPosts(t,e=""){let{extensionMode:i,height:l,extensionHeight:n,extensionCloseHeight:s}=t;return i!==c.extensionModeBottom&&i!==c.extensionModeModal||("number"!=typeof l&&(l=Number(l)),"number"!=typeof n&&(n=Number(n)),0!==l&&n<=l)}static getUiUpdatedOpenFlgs({app:t,ui:e},i=""){switch(i){case"toggleMain":case"headerDetailIcon":switch(e.screenSize){case c.screenSizeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenSizeMiddleLabel:e.isOpenDetail?t.detailCh===t.rootCh?(e.isOpenDetail=!1,e.isOpenMenu=!0):(e.isOpenMenu=!1,e.isOpenDetail=!1):(e.isOpenMenu=!1,e.isOpenDetail=!0)}break;case"headerMenuIcon":switch(e.screenSize){case c.screenSizeMiddleLabel:e.isOpenDetail,e.isOpenMenu=!0,e.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(e.screenSize){case c.screenSizeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenSizeMiddleLabel:e.isOpenMenu=!1,e.isOpenDetail=!0;case c.screenSizeLargeLabel:e.isOpenMenu=!0,e.isOpenDetail=!0}}return e}static isActiveMultistream({app:t,ui:e},i=""){return e.menuComponent===c.menuComponentRankLabel&&t.dispThreadType===s.default.dispThreadTypeMulti}}e.default=c},3669:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(5549)),a=l(i(544)),c=l(i(7865)),g={index:0,offsetTop:0,label:""};class I extends n.default{constructor(t={}){super(),this.list=[],this.now={...g},this.before={...g},this.after={...g};const e=t&&t.list?t.list:[],i=t&&t.now?t.now:{...g},l=t&&t.before?t.before:{...g},n=t&&t.after?t.after:{...g};return this.create({list:e,now:i,before:l,after:n})}static generate(t=0,e,{app:i,ui:l}){const n=e.length;let c=[],I={...g},u={...g},d={...g};if(n>0){const g=a.default.getSelfMarginTop()+t+s.default.getBlockSize({app:i,ui:l});e.forEach(((t,i)=>{""===I.label&&g<=t.offsetTop&&(I.index=i,I.label=t.innerHTML,I.offsetTop=t.offsetTop,e[i-1]?(u.index=I.index-1,u.label=e[i-1].innerHTML,u.offsetTop=e[i-1].offsetTop):u={...I},e[i+1]?(d.index=I.index+1,d.label=e[i+1].innerHTML,d.offsetTop=e[i+1].offsetTop):d={...I});const l={index:i,offsetTop:t.offsetTop,label:t.innerHTML};c.push(l)})),""===I.label&&(I.index=n-1,I.label=e[I.index].innerHTML,I.offsetTop=e[I.index].offsetTop,u={...I},d={...I},e[I.index-1]&&(u.index=e[I.index-1]?I.index-1:I.index,u.label=e[I.index-1]?e[I.index-1].innerHTML:I.label,u.offsetTop=e[I.index-1]?e[I.index-1].offsetTop:I.offsetTop),e[I.index+1]&&(d.index=e[I.index+1]?I.index+1:I.index,d.label=e[I.index+1]?e[I.index+1].innerHTML:I.label,d.offsetTop=e[I.index+1]?e[I.index+1].offsetTop:I.offsetTop))}return{list:c,now:I,before:u,after:d}}static update(t=0,e,{app:i,ui:l}){let n=e.list,s=e.now,g=e.before,I=e.after;const u=n.length;if(u>0){const e=l.extensionMode===c.default.extensionModeLiveMedia?0:54,i=t+a.default.getSelfMarginTop()+e;s.index===u-1?i<s.offsetTop&&(I={...s},s={...g},g=n[g.index-1]?{...n[g.index-1]}:g):0===s.index?I.offsetTop<=i&&(g=n[s.index],s=n[s.index+1],I=n[I.index+1]?n[I.index+1]:I):s.offsetTop<=i&&i<I.offsetTop||(i<s.offsetTop&&(g=n[g.index-1]?n[g.index-1]:g,s=n[s.index-1]?n[s.index-1]:s,I=n[I.index-1]),I.offsetTop<=i&&(g=n[g.index+1],s=n[s.index+1]?n[s.index+1]:s,I=n[I.index+1]?n[I.index+1]:I))}return{list:n,now:s,before:g,after:I}}}e.default=I},6612:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(831),s=l(i(4435)),a=l(i(5513));e.default=function(t={}){let e=null,i=[s.default.updateAction];return e=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:null,(0,n.createStore)(a.default,t,e?e((0,n.applyMiddleware)(...i)):(0,n.applyMiddleware)(...i))}},7923:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5221)),s=l(i(2030)),a=l(i(7242)),c=l(i(7865)),g=l(i(3669));e.default=class{constructor(t){this.ui=new c.default(t.ui),this.componentDidMounts=new s.default(t.componentDidMounts),this.uiTimeMarker=new g.default(t.uiTimeMarker),this.style=new a.default({...t,ui:this.ui}),this.actionLog=new n.default}}},8506:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817)),s=l(i(7865)),a=l(i(5549)),c=l(i(9301)),g=l(i(3829)),I=l(i(4381));class u{constructor(t){return{self:u.getSelf(t),menu:u.getMenu(t),menuUl:u.getMenuUl(t),menuLi:u.getMenuLi(t),menuLiChild:u.getMenuLiChild(t),menuLiBubble:u.getMenuLiBubble(t),menuLiLinks:u.getMenuLiLinks(t),menuToggle:u.getMenuToggle(t),links:u.getLinks(t),linksUl:u.getLinksUl(t),linksLi:u.getLinksLi(t),linksLiActive:u.getLinksLiActive(t),linksLiUnactive:u.getLinksLiUnactive(t),linksTuneLi:u.getLinksTuneLi(t),linkMenuUl:u.getLinkMenuUl(t),linkMenuLi:u.getLinkMenuLi(t),linksTabActive:u.getLinksTabActive(t),linksTabUnactive:u.getLinksTabUnactive(t),linksTabLast:u.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return a.default.themeRGB}static get unactiveColor(){return a.default.fontBaseRGB}static get typesMain(){return"MAIN"}static get typesLink(){return"LINK"}static get typesSub(){return"SUB"}static getType({app:t,ui:e}){switch(t.dispThreadType){case n.default.dispThreadTypeMulti:case n.default.dispThreadTypeSingle:return u.typesMain;default:return t.isLinkCh?u.typesLink:u.typesSub}}static getTotalWidth({app:t,ui:e}){return u.size+2*u.padding+u.right}static getSelfTop({app:t,ui:e}){return a.default.getBlockSize({app:t,ui:e})+5}static getSelfWidth({app:t,ui:e},i=!1){let l="93%";if(e.isOpenLinks)if(e.extensionMode===s.default.extensionModeBottom)l="93%";else switch(e.screenSize){case s.default.screenSizeSmallLabel:return"93%";case s.default.screenSizeMiddleLabel:return`calc(97% - ${g.default.getWidth({app:t,ui:e},!1)})`;case s.default.screenSizeLargeLabel:l=`calc( ${97-c.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!1)} )`}else l=u.getTotalWidth({app:t,ui:e})+"px";return i?I.default.trimUnit(l):l}static getSelfHeight({app:t,ui:e}){if(!e.isOpenBoard)return"60px";switch(u.getType({app:t,ui:e})){case u.typesMain:return"237px";case u.typesLink:return"178px";case u.typesSub:return"118px";default:return"0px"}}static getSelfBorderRadius({app:t,ui:e}){return"10px 0px 0px 10px"}static getSelfBackground({app:t,ui:e}){return e.isOpenBoard?a.default.lightRGBA:a.default.whiteRGBA}static getSelfRight({app:t,ui:e},i=!1){const l=e.screenSize===s.default.screenSizeLargeLabel?`calc( ${c.default.getWidth({app:t,ui:e},!0)} + ${u.right}px )`:`${u.right}px`;return i?l:I.default.trimUnit(l)}static getSelfBoxShadow({app:t,ui:e},i=!1){return e.isOpenLinks,"rgb(210, 210, 210) 0px 0px 2px"}static getLinksDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getSelf({app:t,ui:e}){const i=u.getSelfWidth({app:t,ui:e}),l=u.getSelfHeight({app:t,ui:e}),n=u.getSelfBorderRadius({app:t,ui:e}),s=u.getSelfBackground({app:t,ui:e}),c=u.getSelfRight({app:t,ui:e},!0),g=u.getSelfBoxShadow({app:t,ui:e}),d=I.default.getLayoutFlex({position:"fixed",top:u.getSelfTop({app:t,ui:e}),overflow:"hide",right:c,height:l,width:i,padding:"5px",background:s,flexDirection:"row",alignItems:"flex-start",justifyContent:"flex-end",boxShadow:g,borderRadius:n,zIndex:3}),B=I.default.getAnimationBase({transition:a.default.getTransitionFirstOn({app:t,ui:e})});return I.default.get({layout:d,content:{},animation:B})}static getMenu({app:t,ui:e}){const i=I.default.getLayoutFlex({width:u.getTotalWidth({app:t,ui:e})+"px",height:"100%",flexDirection:"column",alignItems:"flex-end"});return I.default.get({layout:i,content:{},animation:{}})}static getMenuUl({app:t,ui:e}){const i=I.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column"}),l=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:{},animation:l})}static getMenuLi({app:t,ui:e}){const i=u.size+"px",l=I.default.getLayoutFlex({flexDirection:"column",width:i,height:i,minWidth:i,minHeight:i,maxWidth:i,maxHeight:i,background:a.default.whiteRGBA,borderRadius:"5px",marginBottom:"5px"}),n=I.default.getContentBase({fontSize:"0.7em",letterSpacing:"1px",lineHeight:"17px"}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:n,animation:s})}static getMenuLiChild({app:t,ui:e}){const i=s.default.isActiveMultistream({app:t,ui:e},"getLiChild")?u.activeColor:u.unactiveColor,l=I.default.getContentBase({color:i}),n=I.default.getAnimationBase();return I.default.get({layout:{},content:l,animation:n})}static getMenuLiBubble({app:t,ui:e}){const i=e.isBubblePost?u.activeColor:u.unactiveColor,l=I.default.getContentBase({color:i}),n=I.default.getAnimationBase();return I.default.get({layout:{},content:l,animation:n})}static getMenuLiLinks({app:t,ui:e}){const i=a.default.themeRGB,l=I.default.getContentBase({color:i}),n=I.default.getAnimationBase();return I.default.get({layout:{},content:l,animation:n})}static getMenuToggle({app:t,ui:e}){const i=u.size-4+"px",l=I.default.getLayoutFlex({width:i,height:i,minHeight:i,maxHeight:i}),n=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:{},animation:n})}static getLinks({app:t,ui:e}){const i=u.getLinksDisplay({app:t,ui:e}),l=I.default.getLayoutFlex({display:i,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),n=I.default.getContentBase({});return I.default.get({layout:l,content:n,animation:{}})}static getLinksUl({app:t,ui:e}){const i=I.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),l=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:{},animation:l})}static getLinksLi({app:t,ui:e}){const i=u.size+"px",l=I.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:a.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),n=I.default.getContentBase({cursor:"pointer",lineHeight:"17px"}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:n,animation:s})}static getLinksLiActive({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.background=a.default.whiteRGB,i.color=a.default.fontBaseRGB,i}static getLinksLiUnactive({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.background=a.default.calmRGB,i.color=a.default.fontBaseRGB,i}static getLinksTuneLi({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.alignItems="center",i}static getLinkMenuUl({app:t,ui:e}){const i=u.size+"px",l=I.default.getLayoutFlex({minHeight:i,height:i,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),n=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:{},animation:n})}static getLinkMenuLi({app:t,ui:e}){const i=u.size-4+"px",l=I.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:i,minHeight:i,maxHeight:i,background:a.default.reliefRGB,borderRadius:"5px"}),n=I.default.getContentBase({cursor:"pointer",color:a.default.whiteRGB}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:n,animation:s})}static getLinksTabActive({app:t,ui:e}){const i={};return i.background=a.default.whiteRGBA,i.color=a.default.fontBaseRGB,i}static getLinksTabUnactive({app:t,ui:e}){return u.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){return{margin:"5px 0px 0px 0px"}}}e.default=u},5549:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(2243)),a=l(i(3829)),c=l(i(544)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t),multistreamIconWrap:I.getMultistreamIconWrap(t),newPost:I.getNewPost(t),hideScreenBottom:I.getHideScreenBottom(t),linkLabel:I.getLinkLabel(t)}}static get width(){return"100%"}static get widthRatio(){return.94}static get radius(){return"10px"}static get radiuses(){return`${I.radius} ${I.radius} 0px 0px`}static get openHeight(){return 360}static get closeHeight(){return 360}static get threadHeight(){return 360}static get maxZIndex(){return 2147483647}static get closeBottom(){return 0}static get merginRatio(){return.034}static get borderRGB(){return g.default.mono240RGB}static get border(){return`0px solid ${I.borderRGB}`}static get lineShadow(){return`0px 0px 1px ${I.lineShadowColor}`}static get lineInsetShadow(){return`0px 0px 1px ${I.lineShadowColor} inset`}static get lineShadowColor(){return I.downreliefRGB}static get shadow(){return`${g.default.mono230RGB} 0px 0px 5px 0px`}static get darkLightRGB(){return g.default.darkLightRGB}static get darkLightRGBA(){return g.default.darkLightRGBA}static get darkRGB(){return g.default.darkRGB}static get darkRGBA(){return g.default.darkRGBA}static get downreliefRGB(){return g.default.mono160RGB}static get reliefRGB(){return g.default.mono180RGB}static get reliefRGBA(){return g.default.mono180RGBA}static get silverRGB(){return g.default.mono192RGB}static get silverRGBA(){return g.default.mono192RGBA}static get lightGrayRGB(){return g.default.mono211RGB}static get lightGrayRGBA(){return g.default.mono211RGBA}static get chromeOffTabRGB(){return g.default.mono225RGB}static get chromeOffTabRGBA(){return g.default.mono225RGBA}static get softCalmRGB(){return g.default.mono230RGB}static get softCalmRGBA(){return g.default.mono230RGBA}static get middleCalmRGBA(){return g.default.mono235RGBA}static get calmRGB(){return g.default.mono240RGB}static get calmRGBA(){return g.default.mono240RGBA}static get lightRGB(){return g.default.mono245RGB}static get lightRGBA(){return g.default.mono245RGBA}static get offWhiteRGB(){return g.default.mono250RGB}static get offWhiteRGBA(){return g.default.mono250RGBA}static get offWhitePlusRGB(){return g.default.mono252RGB}static get offWhitePlusRGBA(){return g.default.mono252RGBA}static get whiteRGB(){return g.default.mono255RGB}static get whiteRGBA(){return g.default.mono255RGBA}static get fontBaseRGB(){return g.default.fontBaseRGB}static get themeRGBString(){return"79, 174, 159"}static get themeLightRGBString(){return"89, 184, 169"}static get themeSuperLightRGBString(){return"200, 255, 220"}static get themeRGB(){return`rgb(${I.themeRGBString})`}static get themeRGBA(){return`rgba(${I.themeRGBString}, 0.96)`}static get themeRGBAA(){return`rgba(${I.themeRGBString}, 0.8)`}static getBlockSize({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?45:60}static getLiveMediaBlockSize({app:t,ui:e}){return 60}static getFaviconSize({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?24:30}static getLightThemeRGBA(t=.8){return`rgba(${I.themeLightRGBString}, ${t})`}static getThemeRGBA(t=.8){return`rgba(${I.themeRGBString}, ${t})`}static getTransitionOn({app:t,ui:e}={},i=!1){let l=String(I.transitionOn);return l=t?e.isTransition?`${I.transitionOn}ms`:`${I.transitionOff}ms`:`${I.transitionOn}ms`,i?g.default.trimUnit(l):l}static getTransition({app:t,ui:e}={},i=!1){const l=e.isTransition?`${I.transitionOn}ms`:`${I.transitionOff}ms`;return i?g.default.trimUnit(l):l}static getTransitionFirstOn({app:t,ui:e},i=!1){const l=e.isTransition?`${I.transitionFirstOn}ms`:`${I.transitionOff}ms`;return i?g.default.trimUnit(l):l}static get transitionOn(){return 600}static get transitionNotif(){return 300}static get transitionNotifDisp(){return 3e3}static get transitionFirstOn(){return 300}static get transitionOff(){return 0}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get notifOpenLiveMediaTranslateY(){return"translate3d( 0px, -125px, 0px )"}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, -${2*I.getBlockSize({app:t,ui:e})}px, 0px )`}static getNotifTranslateY({app:t,ui:e}){return e.extensionMode===n.default.extensionModeLiveMedia?e.isOpenNewPost?I.notifOpenLiveMediaTranslateY:I.notifCloseTranslateY:e.isOpenNewPost?I.getNotifOpenTranslateY({app:t,ui:e}):I.notifCloseTranslateY}static getNewPostDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getWidthPx({bootOption:t,app:e,ui:i}){return t?t.width?t.width:I.width:i.width}static getRightPx({app:t},e){return"0%"}static get multistreamWrapDefaultTop(){return 5}static getFontSize({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?14:15}static getLetterSpacing({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?1.5:2}static getSelf({app:t,ui:e,bootOption:i,type:l}){let s="0px";e.extensionMode===n.default.extensionModeModal&&(s="3px");const a=g.default.getLayoutBlock({display:"initial",width:"100%",height:"100%",overflow:"hidden",borderRadius:s,opacity:1}),c=g.default.getContentBase({fontSize:`${I.getFontSize({app:t,ui:e})}px`,lineHeight:`${I.getFontSize({app:t,ui:e})}px`,letterSpacing:`${I.getLetterSpacing({app:t,ui:e})}px`}),u=g.default.getAnimationBase({transition:`${I.transitionFirstOn}ms`});return g.default.get({layout:a,content:c,animation:u})}static getMultistreamIconWrapTop({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom||(e.extensionMode,n.default.extensionModeModal),I.getBlockSize({app:t,ui:e})+I.multistreamWrapDefaultTop+"px"}static getMultistreamIconWrapRight({app:t,ui:e}){switch(e.screenSize){default:case n.default.screenSizeSmallLabel:return"5%";case n.default.screenSizeMiddleLabel:return"20px";case n.default.screenSizeLargeLabel:return`calc( ${s.default.getWidth({app:t,ui:e})} + 20px)`}}static getMultistreamIconWrap({app:t,ui:e}){const i=g.default.getLayoutBlock({width:"30px",height:"30px",margin:"0 auto",background:"rgba(255, 255, 255, 0.8)"}),l=g.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),n=g.default.getAnimationBase({transition:I.transitionOff});return g.default.get({layout:i,content:l,animation:n})}static getNewPost({app:t,ui:e}){let i=I.getNewPostDisplay({app:t,ui:e});const l=c.default.getFixTimeMarker({app:t,ui:e});return delete l.top,{...l,display:i,zIndex:"1",margin:"0px auto",fontSize:"0.7em",bottom:`-${2*I.notifHeight}px`,transition:I.getTransition({app:t,ui:e})}}static getHideScreenBottom({app:t,ui:e}){const i=g.default.getLayoutFlex({position:"fixed",top:"100vh",width:"100vw",height:"100vh",background:I.reliefRGB,zIndex:I.maxZIndex}),l=g.default.getContentBase({}),n=g.default.getAnimationBase({});return g.default.get({layout:i,content:l,animation:n})}static getLinkLabel({app:t,ui:e}){const i=I.getBlockSize({app:t,ui:e})+"px",l=e.screenSize===n.default.screenSizeSmallLabel?"0px":`${a.default.getWidth({app:t,ui:e})}`,s=g.default.getLayoutFlex({maxWidth:"180px",position:"fixed",top:i,left:l,height:"20px",padding:"5px 10px",alignItems:"center",justifyContent:"flex-start",background:"rgba(0, 0, 0, 0.4)",zIndex:"1",borderRadius:"0px 0px 2px 0px"}),c=g.default.getContentBase({fontSize:"0.7em",lineHeight:2,whiteSpace:"nowrap",color:I.whiteRGB}),u=g.default.getAnimationBase();return g.default.get({layout:s,content:c,animation:u})}}e.default=I},9301:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(982)),c=l(i(2243)),g=l(i(3829)),I=l(i(4381)),u=l(i(2721));class d{constructor(t){const{app:e,ui:i}=t,l={},n=d.getDetailClass({app:e,ui:i});return l[`self${d.detailRightSelfKey}`]=d.getDetailRightSelf(t),l[`self${d.detailModalSelfKey}`]=d.getDetailModalSelf(t),l.header=n.getHeader(t),l.headerP=n.getHeaderP(t),l.body=n.getBody(t),l.meta=n.getMeta(t),l.img=n.getImg(t),l.description=n.getDescription(t),l.descriptionAnchor=n.getDescriptionAnchor(t),l.metaContentTypeWrap=n.getMetaContentTypeWrap(t),l.metaContentType=n.getMetaContentType(t),l.ch=n.getCh(t),l.analyze=n.getAnalyze(t),l.analyzeRow=n.getAnalyzeRow(t),l.analyzeCol=n.getAnalyzeCol(t),l.analyzeLabel=n.getAnalyzeLabel(t),l.analyzeValue=n.getAnalyzeValue(t),l.analyzeHr=n.getAnalyzeHr(t),l.h1s=n.getH1s(t),l.h1sLi=n.getH1sLi(t),l.footer=n.getFooter(t),l.footerChild=n.getFooterChild(t),l.footerChildLike=n.getFooterChildLike(t),l.footerChildMoney=n.getFooterChildMoney(t),l.footerChildShare=n.getFooterChildShare(t),l.metaItems=n.getMetaItems(t),l.updateWrap=n.getUpdateWrap(t),l.update=n.getUpdate(t),l.space=n.getSpace(t),l}static get detailRightSelfKey(){return"Right"}static get detailModalSelfKey(){return"Modal"}static get screenSizeOfRightDetail(){return n.default.screenSizeLargeLabel}static get padding(){return 20}static get margin(){return 5}static getDetailClass({app:t,ui:e}){return d.isRightDetail({app:t,ui:e})?c.default:a.default}static isRightDetail({app:t,ui:e}){return e.screenSize===d.screenSizeOfRightDetail}static getDetailModalSelf({app:t,ui:e}){const i=n.default.getScreenSize(e.width),l=i===n.default.screenSizeLargeLabel?"none":"block",c=i===n.default.screenSizeSmallLabel?"0px":g.default.baseWidth,u=a.default.getHeight({app:t,ui:e}),d=e.extensionMode===n.default.extensionModeLiveMedia?"0":s.default.radiuses,B=(s.default.border,s.default.border,s.default.border,I.default.getLayoutBlock({display:l,position:"fixed",top:"100%",left:c,width:a.default.getWidth({app:t,ui:e},!1),height:u,margin:a.default.getMargin({app:t,ui:e}),border:`1px solid ${s.default.borderRGB}`,borderRadius:d,WebkitOverflowScrolling:"touch",zIndex:9})),o=I.default.getContentBase(),F=I.default.getAnimationBase({transform:a.default.getTransform({app:t,ui:e}),transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:B,content:o,animation:F})}static getDetailRightSelf({app:t,ui:e}){const i=I.default.getLayoutBlock({position:"fixed",top:"0px",right:"0px",width:c.default.getWidth({app:t,ui:e}),minWidth:c.default.getWidth({app:t,ui:e}),height:`calc( 100% - ${s.default.getBlockSize({app:t,ui:e})}px )`,WebkitOverflowScrolling:"touch",overflow:"hidden",margin:`${s.default.getBlockSize({app:t,ui:e})}px 0px 0px 0px`,zIndex:0}),l=I.default.getContentBase(),n=I.default.getAnimationBase({transition:"0ms"});return I.default.get({layout:i,content:l,animation:n})}static getFooterBorders({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:return{borderTop:s.default.border};case n.default.screenSizeLargeLabel:return{border:s.default.border}}}static getFooterPositions({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:return{};case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return{position:"absolute",right:"0px",bottom:"0px"}}}static getWidth({app:t,ui:e},i=!1){let l="100%";switch(e.screenSize){case n.default.screenSizeLargeLabel:l="30%"}return i?l:I.default.trimUnit(l)}static getTransform({app:t,ui:e}){return d.getDetailClass({app:t,ui:e}).getTransform({app:t,ui:e})}static getHeader({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeLiveMedia?"none":"flex",l=I.default.getLayoutFlex({display:i,width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,maxHeight:`${s.default.getBlockSize({app:t,ui:e})}px`,borderBottom:`1px solid ${s.default.borderRGB}`,background:s.default.whiteRGBA,padding:"0px 20px"}),a=I.default.getContentBase({fontSize:"1.2em"}),c=I.default.getAnimationBase();return I.default.get({layout:l,content:a,animation:c})}static getHeaderP({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"100%",height:"100%",maxHeight:s.default.getBlockSize({app:t,ui:e})}),l=I.default.getContentBase({textOverflow:"ellipsis"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getBody({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeLiveMedia?`calc( 100% - ${s.default.getLiveMediaBlockSize({app:t,ui:e})}px )`:`calc( 100% - ${2*s.default.getBlockSize({app:t,ui:e})}px )`,l=I.default.getLayoutGrid({overflowX:"hidden",overflowY:"scroll",width:"100%",height:i,zIndex:0}),a=I.default.getContentBase(),c=I.default.getAnimationBase();return I.default.get({layout:l,content:a,animation:c})}static getMeta({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"max-content",background:s.default.lightRGBA,borderBottom:s.default.border}),l=I.default.getContentBase(),n=I.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:l,animation:n})}static getImg({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"30vh",maxHeight:"400px",backgroundImage:`url(${u.default})`,backgroundPosition:"center center",backgroundSize:"cover",backgroundRepeat:"no-repeat"}),l=I.default.getContentBase(),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getDescription({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"90%",height:"initial",margin:"7%"}),l=I.default.getContentBase({lineHeight:"2em",fontSize:"1.1em",textAlign:"left"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getDescriptionAnchor({app:t,ui:e}){const i=I.default.getLayoutInlineFlex({width:"auto"}),l=I.default.getContentBase({textDecoration:"none"}),n=I.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) scale(0.9)"});return I.default.get({layout:i,content:l,animation:n})}static getMetaContentTypeWrap({app:t,ui:e}){const i=I.default.getLayoutFlex({flexDirection:"column",alignItems:"flex-end",width:"initial",height:"initial",borderRadius:"10px",margin:`${2*d.margin}% ${d.margin}%`}),l=I.default.getContentBase({textAlign:"right"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getMetaContentType({app:t,ui:e}){const i=I.default.getLayoutBlock({background:s.default.reliefRGB,width:"initial",height:"initial",margin:"10px 0px",padding:"10px 20px 10px 20px",justifyContent:"flex-end",borderRadius:"30px"}),l=I.default.getContentBase({color:s.default.whiteRGB,textAlign:"right"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getCh({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"max-content",background:s.default.lightRGBA,borderTop:s.default.border,borderBottom:s.default.border,padding:"15px"}),l=I.default.getContentBase({textAlign:"left",lineHeight:"30px",wordBreak:"break-word"}),n=I.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:l,animation:n})}static getAnalyze({app:t,ui:e}){const i=I.default.getLayoutTable({width:"100%",height:"initial",background:s.default.whiteRGB,borderTop:s.default.border,borderBottom:s.default.border}),l=I.default.getContentBase({textAlign:"center"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeRow({app:t,ui:e}){const i=I.default.getLayoutTableRow({}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeCol({app:t,ui:e}){const i=I.default.getLayoutTableCol({width:"33.3%",height:"120px",verticalAlign:"middle",margin:"40px auto 40px auto"}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeLabel({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"initial",height:"initial",marginBottom:"20px"}),l=I.default.getContentBase({lineHeight:"14px",fontSize:"0.8em"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeValue({app:t,ui:e}){const i=I.default.getLayoutBlock({margin:"0 auto",width:"initial",height:"initial"}),l=I.default.getContentBase({fontSize:"1.8em",color:s.default.themeRGBA}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeHr({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"70%",height:"initial",margin:"10px auto 10px auto",borderTop:`1px solid ${s.default.borderRGB}`}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getH1s({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"initial",margin:`${d.margin}px auto`,background:s.default.whiteRGB,borderTop:s.default.border,borderBottom:s.default.border}),l=I.default.getContentBase({textAlign:"left"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getH1sLi({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"90%",height:"initial",margin:`5px ${d.margin}% 5px ${d.margin}%`}),l=I.default.getContentBase({lineHeight:2,textAlign:"left"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooter({app:t,ui:e}){const i=d.getFooterPositions({app:t,ui:e}),l=d.getFooterBorders({app:t,ui:e}),n=I.default.getLayoutFlex({width:"100%",background:s.default.lightRGBA,height:s.default.getBlockSize({app:t,ui:e}),boxShadow:s.default.lineShadow,zÎndex:"1px",...i,...l}),a=I.default.getContentBase({fontSize:"0.7em"}),c=I.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px)"});return I.default.get({layout:n,content:a,animation:c})}static getFooterChild({app:t,ui:e}){const i=I.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooterChildLike({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooterChildMoney({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooterChildShare({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getMetaItems({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"90%",margin:`${d.margin}%`}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getUpdateWrap({app:t,ui:e}){const i=I.default.getLayoutFlex({justifyContent:"flex-end",alignItems:"flex-end",margin:"0px 0px 30px 0px"}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getUpdate({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"160px",borderRadius:"30px",background:s.default.themeRGBA}),l=I.default.getContentBase({textIndent:"15px",cursor:"pointer",color:s.default.whiteRGB}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getSpace({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"100%",height:"100px",background:s.default.silverRGBA}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}}e.default=d},3180:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(9301)),a=l(i(982)),c=l(i(2243));e.default=class{constructor(t){const{app:e,ui:i}=t,l=s.default.getDetailClass({app:e,ui:i});return{self:l.getFooter(t),child:l.getFooterChild(t),childLike:l.getFooterChildLike(t),childMoney:l.getFooterChildMoney(t),childShare:l.getFooterChildShare(t)}}static getDetailClass({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?a.default:c.default}static get padding(){return 20}static get margin(){return 5}static getWidth({app:t,ui:e},i=!1){switch(e.screenSize){case n.default.screenSizeSmallLabel:return"100%";case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return s.default.getDetailClass({app:t,ui:e}).getWidth({app:t,ui:e},i)}}}},982:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9301)),c=l(i(3829)),g=l(i(9167)),I=l(i(4381));class u{static getWidth({app:t,ui:e},i=!1){let l="0";return l=e.extensionMode===n.default.extensionModeLiveMedia?"100%":e.screenSize===n.default.screenSizeSmallLabel?String(Math.floor(e.width*s.default.widthRatio))+"px":`calc( ${100*s.default.widthRatio}% - ${c.default.getWidth({app:t,ui:e})} )`,i?I.default.trimUnit(l):l}static getBaseMarginRate({app:t,ui:e},i=!1){return Math.floor((1-s.default.widthRatio)/2*100)}static getBaseMargin({app:t,ui:e},i=!1){return g.default.getWidth({app:t,ui:e},!0)*(u.getBaseMarginRate({app:t,ui:e})/100)}static getMargin({app:t,ui:e},i=!1){if(e.extensionMode===n.default.extensionModeLiveMedia)return"0";if(e.extensionMode===n.default.extensionModeBottom)return"0% 8%";switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:const i=u.getBaseMarginRate({app:t,ui:e});return`0% ${i}% 0% ${i}%`}}static getHeight({app:t,ui:e},i=!1){const l=u.getBaseMarginRate({app:t,ui:e}),a=s.default.getBlockSize({app:t,ui:e});if(e.extensionMode===n.default.extensionModeLiveMedia)return`calc(100% - ${s.default.getBlockSize({app:t,ui:e})}px)`;switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:return`calc( ${100-l}% - ${2*a}px )`;case n.default.screenSizeLargeLabel:return`calc( 100% - ${2*a+u.getBaseMargin({app:t,ui:e})}px )`}}static getTransform({app:t,ui:e}){return e.isOpenDetail?u.getOpenSelfTransform({app:t,ui:e}):u.getCloseSelfTransform({app:t,ui:e})}static getCloseSelfTransform({app:t,ui:e}){return"translate3d(0%, 0px, 0px)"}static getOpenSelfTransform({app:t,ui:e}){return e.extensionMode,n.default.extensionModeLiveMedia,`translate3d(0%, calc( -100% - ${s.default.getBlockSize({app:t,ui:e})}px ), 0px)`}static getHeader(t){return a.default.getHeader(t)}static getHeaderP(t){return a.default.getHeaderP(t)}static getBody(t){return a.default.getBody(t)}static getMeta(t){return a.default.getMeta(t)}static getImg(t){return a.default.getImg(t)}static getDescription(t){return a.default.getDescription(t)}static getDescriptionAnchor(t){return a.default.getDescriptionAnchor(t)}static getMetaContentTypeWrap(t){return a.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return a.default.getMetaContentType(t)}static getCh(t){return a.default.getCh(t)}static getAnalyze(t){return a.default.getAnalyze(t)}static getAnalyzeRow(t){return a.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return a.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return a.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return a.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return a.default.getAnalyzeHr(t)}static getH1s(t){return a.default.getH1s(t)}static getH1sLi(t){return a.default.getH1sLi(t)}static getFooter(t){return a.default.getFooter(t)}static getFooterChild(t){return a.default.getFooterChild(t)}static getFooterChildLike(t){return a.default.getFooterChildLike(t)}static getFooterChildMoney(t){return a.default.getFooterChildMoney(t)}static getFooterChildShare(t){return a.default.getFooterChildShare(t)}static getMetaItems(t){return a.default.getMetaItems(t)}static getUpdateWrap(t){return a.default.getUpdateWrap(t)}static getUpdate(t){return a.default.getUpdate(t)}static getSpace(t){return a.default.getSpace(t)}}e.default=u},2243:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(9301)),a=l(i(4381));class c{static get widthDecimalRate(){return.3}static get widthRate(){return 100*c.widthDecimalRate}static get otherWidthDecimalRate(){return 1-c.widthDecimalRate}static get otherWidthRate(){return 100*c.otherWidthDecimalRate}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:l="0%";break;case n.default.screenSizeLargeLabel:l="30%"}return i?a.default.trimUnit(l):l}static getMinWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="0%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l="320px"}return i?a.default.trimUnit(l):l}static getTransform({app:t,ui:e}){let i=c.closeSelfTransform;switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:i=c.closeSelfTransform;break;case n.default.screenSizeLargeLabel:i="translate3d(0px, 0px, 0px)"}return i}static get closeSelfTransform(){return`translate3d(0%, calc( 100% + ${2*s.default.padding}px ), 0px)`}static get openSelfTransform(){return"translate3d(0%, 0%, 0px)"}static getHeader(t){return s.default.getHeader(t)}static getHeaderP(t){return s.default.getHeaderP(t)}static getBody(t){return s.default.getBody(t)}static getMeta(t){return s.default.getMeta(t)}static getImg(t){return s.default.getImg(t)}static getDescription(t){return s.default.getDescription(t)}static getDescriptionAnchor(t){return s.default.getDescriptionAnchor(t)}static getMetaContentTypeWrap(t){return s.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return s.default.getMetaContentType(t)}static getCh(t){return s.default.getCh(t)}static getAnalyze(t){return s.default.getAnalyze(t)}static getAnalyzeRow(t){return s.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return s.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return s.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return s.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return s.default.getAnalyzeHr(t)}static getH1s(t){return s.default.getH1s(t)}static getH1sLi(t){return s.default.getH1sLi(t)}static getFooter(t){return s.default.getFooter(t)}static getFooterChild(t){return s.default.getFooterChild(t)}static getFooterChildLike(t){return s.default.getFooterChildLike(t)}static getFooterChildMoney(t){return s.default.getFooterChildMoney(t)}static getFooterChildShare(t){return s.default.getFooterChildShare(t)}static getMetaItems(t){return s.default.getMetaItems(t)}static getUpdateWrap(t){return s.default.getUpdateWrap(t)}static getUpdate(t){return s.default.getUpdate(t)}static getSpace(t){return s.default.getSpace(t)}}e.default=c},3817:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(4381));class a{constructor(t){return{self:a.getSelf(t)}}static get datasetsBase(){return{backgroundColor:"rgba(240, 100, 195, 0.2 )",borderCapStyle:"square",borderColor:"rgba(240, 100, 195, 0.8 )",borderWidth:"4",pointBackgroundColor:"rgba(240, 100, 195, 0.8 )",pointBorderColor:"rgba(240, 100, 195, 0 )",pointHoverBackgroundColor:"rgba(255, 255, 255, 0.8 )",pointHoverBorderColor:"rgba(240, 100, 195, 0.8 )",pointHoverBorderWidth:"4",data:[]}}static get optionsBase(){return{responsive:!0,responsiveAnimationDuration:0,elements:{point:{backgroundColor:"rgba(79, 174, 159, 0.6)",borderAlign:"left",borderColor:"rgba(79, 174, 159, 0.6)",borderWidth:100},line:{tension:.1,backgroundColor:"rgba(79, 174, 159, 0.6)",borderWidth:"10",borderColor:"rgba(79, 174, 159, 0.6)",borderCapStyle:"square",borderDash:[]}},legend:{display:!1},tooltips:{enabled:!0,intersect:!0,backgroundColor:"rgba(240, 100, 195, 0.7 )",callbacks:{label:(t,e)=>{let i=e.datasets[t.datasetIndex].label||"";return i&&(i+=": "),i+=Math.round(100*t.yLabel)/100,"0"!==i?i:null},title:(t,e)=>t.map((t=>e.labels[t.index]))}},scale:{ticks:{fontSize:16,fontColor:n.default.fontBaseRGB,backdropColor:"rgba(255,255,255,0)",beginAtZero:!0,max:5,min:0,stepSize:1},pointLabels:{fontSize:14,fontColor:n.default.fontBaseRGB}}}}static getSelf(t){const e=s.default.getLayoutFlex({height:"auto",marginBottom:"40px",flexDirection:"column"}),i=s.default.getContentBase({}),l=s.default.getAnimationBase({});return s.default.get({layout:e,content:i,animation:l})}}e.default=a},1540:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static getTop({app:t,ui:e}){return 0}static getSelfTransform({app:t,ui:e},i=""){return e.extensionMode===n.default.extensionModeBottom?e.isDispPosts?"translate3d(0px, -100%, 0px)":"translate3d(0px, 0%, 0px)":"translate3d(0px, 0px, 0px)"}static getSelfTransition({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?(e.isDispPosts,`${s.default.transitionOn}ms`):"0ms"}static getSelf({app:t,ui:e}){const i=a.default.getLayoutFlex({position:"fixed",top:c.getTop({app:t,ui:e}),justifyContent:"flex-start",alignItems:"flex-start",height:"100%"}),l=a.default.getContentBase(),n=a.default.getAnimationBase({transform:c.getSelfTransform({app:t,ui:e}),transition:c.getSelfTransition({app:t,ui:e})});return a.default.get({layout:i,content:l,animation:n})}}e.default=c},434:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9301)),c=l(i(3829)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t)}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="200%";break;case n.default.screenSizeMiddleLabel:l=t.isOpenDetail?`calc( 100% + ${c.default.getWidth({app:t,ui:e})} )`:`calc( 100% + ${a.default.getWidth({app:t,ui:e})} )`;break;case n.default.screenSizeLargeLabel:l="100%"}return i?g.default.trimUnit(l):l}static getLeft({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l="0px"}return i?g.default.trimUnit(l):l}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";if(e.extensionMode===n.default.extensionModeBottom)i=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( -50%, 0px, 0px )";else switch(e.screenSize){case n.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 100%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case n.default.screenSizeMiddleLabel:i=e.isOpenDetail?`translate3d( -${c.default.baseWidth}, 0px, 0px )`:"translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getBorders({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?{border:0}:e.screenSize===n.default.screenSizeSmallLabel?{border:s.default.border}:{borderTop:s.default.border,borderBottom:s.default.border}}static getSelf({app:t,ui:e}){const i=I.getBorders({app:t,ui:e}),l=e.extensionMode===n.default.extensionModeBottom?s.default.radiuses:"0px",a=g.default.getLayoutFlex({position:"fixed",bottom:"0px",left:I.getLeft({app:t,ui:e}),height:s.default.getBlockSize({app:t,ui:e}),width:I.getWidth({app:t,ui:e}),zIndex:s.default.maxZIndex,borderRadius:l,justifyContent:"flex-start",...i}),c=g.default.getAnimationBase({transform:I.getTransform({app:t,ui:e}),transition:s.default.getTransition({app:t,ui:e})});return g.default.get({layout:a,content:{},animation:c})}}e.default=I},9422:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t),headTab:c.getHeadTab(t),rightIcon:c.getRightIcon(t),leftIcon:c.getLeftIcon(t),userIcon:c.getUserIcon(t),userIconImg:c.getUserIconImg(t),liveCntWrap:c.getLiveCntWrap(t),childAnalyzeWrap:c.getChildAnalyzeWrap(t),childAnalyzeType:c.getChildAnalyzeType(t),childAnalyzeCnt:c.getChildAnalyzeCnt(t),childTalknLogo:c.getChildTalknLogo(t)}}static get selfHeight(){return"100%"}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get widthRatio(){return.94}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, ${s.default.getBlockSize({app:t,ui:e})}px, 0px )`}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNotif?c.getNotifOpenTranslateY({app:t,ui:e}):c.notifCloseTranslateY}static getMargin({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?"0px 5% 0px 5%":"0 auto"}static getChildAnalyzeRight({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:return"5%";case n.default.screenSizeMiddleLabel:return"10%";case n.default.screenSizeLargeLabel:return"15%"}}static getChildAnalyzePositions({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"8px 0px 0px 0px":"7px auto";return e.extensionMode===n.default.extensionModeBottom||(e.extensionMode,n.default.extensionModeModal),{position:"absolute",top:"0px",right:c.getChildAnalyzeRight({app:t,ui:e}),margin:i}}static getBorderRadius({app:t,ui:e},i=!1){return e.extensionMode===n.default.extensionModeBottom?"100%"===e.extensionWidth?"0px":`${s.default.radius} ${s.default.radius} 0px 0px`:e.extensionMode===n.default.extensionModeModal?`${s.default.radius} ${s.default.radius} 0px 0px`:0}static getSelf({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeBottom?"90%":"100%",l=e.extensionMode===n.default.extensionModeNone?0:s.default.border,g=c.getBorderRadius({app:t,ui:e}),I=e.extensionMode===n.default.extensionModeNone?s.default.lineShadow:s.default.lineInsetShadow,u=a.default.getLayoutFlex({position:"fixed",top:0,left:0,width:i,height:`${s.default.getBlockSize({app:t,ui:e})}px`,borderTop:l,borderRight:s.default.border,borderBottom:s.default.border,borderLeft:s.default.border,borderRadius:g,background:s.default.whiteRGB,margin:c.getMargin({app:t,ui:e}),zIndex:1e3,boxShadow:I}),d=a.default.getContentBase({textAlign:"center"}),B=a.default.getAnimationBase({transform:c.getNotifTranslateY({app:t,ui:e})});return a.default.get({layout:u,content:d,animation:B})}static getUserIcon(t){const e=a.default.getLayoutBlock({flexGrow:2,height:"auto"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getUserIconImg(t){const e=a.default.getLayoutInlineBlock({width:"30px",margin:"0px 10px 0px 0px"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getLiveCntWrap(t){const e=a.default.getLayoutInlineBlock({position:"absolute",width:"100%",height:"100%",top:"3px",left:"20%"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getHeadTab({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"60%":"40%",l=a.default.getLayoutFlex({justifyContent:"center",width:i,height:"100%"}),s=a.default.getContentBase({fontSize:"1.2em"}),c=a.default.getAnimationBase();return a.default.get({layout:l,content:s,animation:c})}static getRightIcon({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"20%":"30%",l=a.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:i,height:"100%"}),s=a.default.getAnimationBase();return a.default.get({layout:l,content:{},animation:s})}static getLeftIcon({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"20%":"30%",l=a.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:i,height:"100%"}),s=a.default.getContentBase({}),c=a.default.getAnimationBase();return a.default.get({layout:l,content:s,animation:c})}static getChildAnalyzeWrap({app:t,ui:e}){const i=c.getChildAnalyzePositions({app:t,ui:e}),l=a.default.getLayoutFlex({...i,flexDirection:"column",width:"40px",height:"28px"}),n=a.default.getContentBase({}),s=a.default.getAnimationBase();return a.default.get({layout:l,content:n,animation:s})}static getChildAnalyzeType({app:t,ui:e}){const i=a.default.getLayoutBlock({height:"14px",marginBottom:"4px"}),l=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getChildAnalyzeCnt({app:t,ui:e}){const i=a.default.getLayoutBlock({height:"14px"}),l=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getChildTalknLogo({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({position:"absolute",width:`${s.default.getBlockSize({app:t,ui:e})}px`,height:`${s.default.getBlockSize({app:t,ui:e})}px`}),l=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getNotif({app:t,ui:e}){const i=a.default.getLayoutBlock({position:"relative",top:`${s.default.getBlockSize({app:t,ui:e})}px`,width:"50%",height:s.default.notifHeight,margin:"0 auto",zIndex:"10",background:"rgba(0, 0, 0, 0.4)",borderRadius:"20px"}),l=a.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),n=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return a.default.get({layout:i,content:l,animation:n})}}e.default=c},865:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7638)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381)),g=l(i(4425)),I=l(i(685)),u=l(i(5069)),d=l(i(6631)),B=l(i(3673)),o=l(i(3152)),F=l(i(3588)),r=l(i(5328)),C=l(i(7873)),U=l(i(1262)),Q=l(i(1635)),b=l(i(4697)),V=l(i(5474)),A=l(i(4726));class x{constructor(t){t.bootOption,t.app;const e=x.getSvgIcon(t),i=x.getHeadTab(t),l=x.getMenu(t),n=x.getTalknLogo(t),s=x.getUser(t),a=x.getHeaderUser(t),c=x.getTag(t),g=x.getHome(t),I=x.getGraph(t);return{svgIcon:e,headTab:i,menu:l,talknLogo:n,user:s,headerUser:a,search:x.getSearch(t),tag:c,home:g,graph:I,index:x.getIndex(t),logs:x.getLogs(t),setting:x.getSetting(t),thunder:x.getThunder(t),bubble:x.getBubble(t),detail:x.getDetail(t),heart:x.getHeart(t),share:x.getShare(t),money:x.getMoney(t),openEmoji:x.getOpenEmoji(t),close:x.getClose(t),ch:x.getCh(t),update:x.getUpdate(t),loading:x.getLoading(t),tune:x.getTune(t),liveCnt:x.getLiveCnt(t),stampStr:x.getStampStr(t),stampLabel:x.getStampLabel(t)}}static get defaultOption(){return{sizePx:x.largeSize,active:!0}}static get smallSize(){return"24px"}static get middleSize(){return"36px"}static get largeSize(){return"48px"}static get bigSize(){return"64px"}static get smallMargin(){return 2}static get largeMargin(){return 4}static getMargin({app:t,ui:e}){return e.screenSize===s.default.screenSizeSmallLabel?x.smallMargin:x.largeMargin}static getSvgIcon({app:t,ui:e},i={active:!1,key:""}){const l=x.smallSize,n=e.screenSize===s.default.screenSizeSmallLabel?"0":"4px 0 6px";return c.default.get({layout:c.default.getLayoutInlineFlex({width:l,maxWidth:l,minWidth:l,height:l,maxHeight:l,minHeight:l,margin:n}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getEmpty({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:n}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTwitter({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?V.default:A.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getFacebook({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?o.default:F.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAppstore({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?u.default:d.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAndroid({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?g.default:I.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getHome({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?U.default:Q.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getGraph({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?r.default:C.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalkn({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=(i.active,b.default),s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalknLogo({app:t,ui:e}){return{img:c.default.get({layout:c.default.getLayoutBlock({backgroundImage:`url(${n.default.assetsImgPath}talkn_logo2.png)`,backgroundPosition:"center center",backgroundSize:"90%",backgroundRepeat:"no-repeat"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getChromeExtension({app:t,ui:e},i={}){i={...x.defaultOption,...i};const l="100%",n=B.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,minWidth:l,height:"180px",minHeight:"60px",backgroundSize:"75%",backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat",backgroundColor:a.default.silverRGBA}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTag({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),left:c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(45deg) translate3d(5px, 5px, 0px)"})}),right:c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(-135deg) translate3d(-6px, -4px, 0px)"})}),bar:c.default.get({layout:c.default.getLayoutInlineBlock({background:a.default.reliefRGB,width:"2px",height:"13px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(40deg) translate3d(-5px, 13px, 0px)"})})}}static getHomeCss({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"19px",height:"18px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(135deg) translate3d(5px, -3px, 0px)"})}),n=c.default.get({layout:c.default.getLayoutInlineBlock({borderRight:`2px solid ${a.default.reliefRGB}`,borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"20px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(2px, -6px, 0px)"})});return{div:i,leaf:l,door:c.default.get({layout:c.default.getLayoutInlineBlock({background:`${a.default.reliefRGB}`,width:"6px",height:"8px",margin:"0 auto",borderRadius:"5px 5px 0px 0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(-11px, -5px, 0px)"})}),base:n}}static getSearch({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:`${a.default.getBlockSize({app:t,ui:e})}px`,height:`${a.default.getBlockSize({app:t,ui:e})}px`,borderRadius:"100px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),circle:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",top:"4px",left:"16px",margin:"7px auto",width:"18px",height:"18px",borderRadius:"100px",border:`3px solid ${a.default.chromeOffTabRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bar:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"23px",left:"13px",margin:"0 auto",background:a.default.chromeOffTabRGB,width:"4px",height:"12px",borderRadius:"10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"scale(1) translate3d(0px, 0px, 0px) rotate(45deg)"})})}}static getUser({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),top:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"6px",height:"6px",borderRadius:"10px",position:"relative",top:"-10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"8px",height:"12px",borderRadius:"6px",position:"relative",top:"10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getHeaderUser({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"5px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),top:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:`${a.default.chromeOffTabRGB}`,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:`${a.default.chromeOffTabRGB}`,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getIndex({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutBlock({width:"24px",height:"24px",margin:"0 auto",borderRadius:"4px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),n=c.default.get({layout:c.default.getLayoutBlock({width:"24px",height:"2px",margin:"5px auto",borderRadius:"6px",background:a.default.reliefRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()});return{div:i,wrap:l,top:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),middle:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})})}}static getLogs({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"3px",left:"-6px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) rotate(-15deg)"})}),n=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"9px",height:"13px",borderRadius:"45px 30px 45px 45px",position:"relative",left:"2px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),s=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"6px",height:"8px",borderRadius:"10px",position:"relative",top:"-2px",left:"2px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),g=c.default.get({layout:c.default.getLayoutBlock({width:"7px",height:"2px",background:a.default.offWhiteRGB,margin:"0 auto",zIndex:"1000",position:"relative",left:"1px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 1px, -9px, 1000px )"})}),I=c.default.get({layout:c.default.getLayoutInlineBlock({width:"36px",height:"36px",position:"absolute",top:"-4px",left:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 0.5 ) rotate(30deg)"})}),u=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"11px",height:"21px",borderRadius:"30px 50px 40px 40px",position:"relative",left:"-1px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),d=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"8px",height:"8px",borderRadius:"2px 2px 3px 3px",position:"relative",left:"-1px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:i,foot1:l,foot1Top:n,foot1Space:g,foot1Bottom:s,foot2:I,foot2Top:u,foot2Space:c.default.get({layout:c.default.getLayoutBlock({width:"19px",height:"3px",background:a.default.offWhiteRGB,margin:"0 auto",zIndex:"1000"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, -10px, 1000px )"})}),foot2Bottom:d}}static getSetting({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",background:a.default.reliefRGB,width:"4px",height:"4px",borderRadius:"1px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:i,wing1:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(9.5px, 1px, 0px) rotate(0deg)"})}),wing2:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 15px, 4px, 0px ) rotate( 45deg )"})}),wing3:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 17px, 9px, 0px ) rotate( 90deg )"})}),wing4:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 15.5px, 14px, 0px ) rotate( 125deg )"})}),wing5:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 9.5px, 17px, 0px ) rotate( 180deg )"})}),wing6:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 3px, 14px, 0px ) rotate( 225deg )"})}),wing7:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 1px, 9px, 0px ) rotate( 270deg )"})}),wing8:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 2.5px, 4px, 0px ) rotate( 315deg )"})}),circle:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",top:"2px",left:"3px",width:"16px",height:"16px",border:`3px solid ${a.default.reliefRGB}`,borderRadius:"50px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 1px, 0px )"})})}}static getThunder({app:t,ui:e}){let i=a.default.reliefRGBA;return s.default.isActiveMultistream({app:t,ui:e})&&(i=a.default.themeRGBA),{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"rotate(0deg) translate(0px, 0px)"})}),wrap:c.default.get({layout:c.default.getLayoutInlineBlock({borderRadius:"50px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"rotate(90deg) translate3d(0px,0px,0px)"})}),top:c.default.get({layout:c.default.getLayoutBlock({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:"transparent",borderRightColor:"transparent",borderBottomColor:`${i}`,borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(-3px, -3px)"})}),bottom:c.default.get({layout:c.default.getLayoutFlex({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:`${i}`,borderRightColor:"transparent",borderBottomColor:"transparent",borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(15px, -3px)"})})}}static getPlay({app:t,ui:e}){const i=e.isOpenLinks?a.default.themeRGB:a.default.reliefRGB,l="24px";return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),playCircle:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",width:l,height:l,minWidth:l,minHeight:l,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),playTriangle:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",width:"6px",height:"6px",borderTop:"6px solid transparent",borderRight:"6px solid transparent",borderBottom:"6px solid transparent",borderLeft:`6px solid ${i}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(4px, 1.5px, 0px)"})})}}static getLinks({app:t,ui:e}){const i=a.default.themeRGB,l="24px",n="14px",s="4px";return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),linksA1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"6px",width:l,height:n,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksA2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",left:"5px",width:s,height:s,borderRadius:"10px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})}),linksB1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"0px",width:l,height:n,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksB2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"-5px",left:"-5px",width:s,height:s,borderRadius:"10px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})})}}static getBubble({app:t,ui:e}){const i=e.isBubblePost?a.default.themeRGB:a.default.reliefRGBA;return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),bubble:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"18px",height:"14px",background:i,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),bubbleBar:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"5px",height:"10px",background:i,border:`3px solid ${i}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(30deg, 28deg) rotate(30deg) translate3d(-2px, -7px, 0px)"})})}}static getDetail({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0":"1px auto",l=c.default.get({layout:c.default.getLayoutInlineFlex({width:"40px",height:"40px",borderRadius:"100px",margin:i,cursor:"pointer"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),n=c.default.get({layout:c.default.getLayoutBlock({width:"26px",height:"28px",margin:"7px auto",borderRadius:"2px",background:`${a.default.calmRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),g=c.default.get({layout:c.default.getLayoutBlock({width:"14px",height:"2px",margin:"3px auto",borderRadius:"6px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()});return{div:l,wrap:n,bar1:c.default.get({layout:{...g,width:"7px",margin:"5px 0px 0px 6px"},content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar2:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar3:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),bar4:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),mekuri:c.default.get({layout:{...g,position:"absolute",top:0,rightt:0,width:0,height:0,borderRadius:0,borderTop:`4px solid ${a.default.whiteRGB}`,borderLeft:`4px solid ${a.default.whiteRGB}`,borderRight:`4px solid ${a.default.reliefRGB}`,borderBottom:`4px solid ${a.default.reliefRGB}`},content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(18px, -3px, 0px) rotate( 90deg )"})})}}static getMenu({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})})}),dot:c.default.get({layout:c.default.getLayoutBlock({position:"relative",top:"2px",width:"6px",height:"6px",margin:"4px auto",borderRadius:"6px",background:a.default.calmRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()})}}static getHeadTabLeftTransform(){return x.getHeadTabLeftOpenTransform}static getHeadTabRightTransform(){return x.getHeadTabRightOpenTransform}static get getHeadTabLeftOpenTransform(){return"rotate( 120deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightOpenTransform(){return"rotate( -120deg ) translate3d(-3px, 5px, 0px)"}static get getHeadTabLeftCloseTransform(){return"rotate( 90deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightCloseTransform(){return"rotate( -90deg ) translate3d(-3px, 5px, 0px)"}static getHeadTab({app:t,ui:e}){const i=c.default.getLayoutInlineBlock({width:"4px",borderRadius:"10px",background:a.default.calmRGB});return{div:c.default.get({layout:c.default.getLayoutBlock({width:"40px",height:"20px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),left:c.default.get({layout:i,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:x.getHeadTabLeftTransform()})}),right:c.default.get({layout:i,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:x.getHeadTabRightTransform()})})}}static getHeart({app:t,ui:e}){return e.openLockMenu===s.default.openLockMenuLabelShare?a.default.themeRGBA:a.default.reliefRGB,{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:x.smallSize,height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),before:c.default.get({layout:c.default.getLayoutBase({width:"10px",height:"17px",borderRadius:"10px 10px 0 0",background:a.default.reliefRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(-45deg) translate3d(0px, 4px, 0px)"})}),after:c.default.get({layout:c.default.getLayoutBase({width:"17px",height:"10px",borderRadius:"0 10px 10px 0",background:a.default.reliefRGB}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"rotate(-45deg) translate3d(11px, -4px, 0px)"})})}}static getShare({app:t,ui:e}){const i=e.openLockMenu===s.default.openLockMenuLabelShare?a.default.themeRGBA:a.default.reliefRGB,l=c.default.get({layout:c.default.getLayoutInlineBlock({width:x.smallSize,height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),n=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"9px",width:"16px",height:"14px",margin:"0 auto",border:`2px solid ${i}`,borderRadius:"3px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -3px, 0px)"})}),g=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"6px",left:"16px",width:"2px",height:"11px",margin:"0 auto",background:i}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -3px, 0px)"})});return{div:l,base:n,whiteBar1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"11px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -2px, 0px)"})}),whiteBar2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"18px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -2px, 0px)"})}),bar:g,arrow:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"13px",width:"8px",height:"8px",borderTop:`2px solid ${i}`,borderRight:`2px solid ${i}`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px) rotate( -45deg)"})})}}static getMoney({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:x.smallSize,height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(0px, -2px, 0px)"})}),outer:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",width:"20px",height:"20px",borderRadius:"24px",border:`2px solid ${a.default.reliefRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(0px, 3px, 0px)"})}),inner:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",width:"8px",height:"8px",borderRadius:"8px",border:`2px solid ${a.default.reliefRGB}`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 4px, 0px)"})})}}static getOpenEmoji(t){const{app:e,ui:i}=t,l="5px",n=s.default.screenSizeSmallLabel===i.screenSize?"none":"inline-block";return{div:c.default.get({layout:c.default.getLayoutInlineBlock({display:n,width:l,height:l,minWidth:l,minHeight:l,margin:"0px 5px 0px 0px",borderRight:"5px solid transparent",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid rgba(200,200,200,0.8)"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:a.default.getTransition({app:e,ui:i})})})}}static getCloseEmoji({app:t,ui:e}){const i="8px";return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:i,height:i,minWidth:i,minHeight:i,margin:"0px 0px 0px -20px",borderRight:"8px solid rgba(200,200,200,0.8)",borderTop:"8px solid transparent",borderBottom:"8px solid transparent",borderLeft:"8px solid transparent"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:a.default.getTransition({app:t,ui:e})})})}}static getCloseOptionModal({app:t,ui:e}){return{div:{position:"absolute",right:0,transform:`translate( 0px, -${a.default.getBlockSize({app:t,ui:e})+20}px)`}}}static getClose({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineFlex({width:a.default.getBlockSize({app:t,ui:e}),height:a.default.getBlockSize({app:t,ui:e}),margin:"1px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutFlex({alignItems:"center",justifyContent:"center",margin:"0 auto",width:"80%",height:"80%",background:a.default.calmRGBA,border:`0px solid ${a.default.calmRGB}`,borderRadius:"50%",boxShadow:"0px 0px 4px rgba(100, 100, 100, 1)"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(0deg)"})}),bar1:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"70%",background:a.default.whiteRGBA,borderRadius:"2px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(45deg)"})}),bar2:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"70%",background:a.default.whiteRGBA,borderRadius:"2px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(-45deg)"})})}}static getCh({app:t,ui:e}){const i=a.default.lightGrayRGB;return{div:c.default.get({layout:c.default.getLayoutFlex({width:"46px",height:"46px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),chC:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"3%",width:"44%",height:"44%",border:`4px solid ${i}`,borderRadius:"100%"}),content:{},animation:{}}),chCSpace:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"35%",left:"30%",width:"30%",height:"30%",background:a.default.lightRGB}),content:{},animation:{transform:"rotate(45deg)"}}),chCCircle1:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"37%",left:"33%",width:"9%",height:"9%",background:i,borderRadius:"100%"}),content:{},animation:{transform:"scale(1) translate(-32%, -60%)"}}),chCCircle2:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"59%",left:"33%",width:"9%",height:"9%",background:i,borderRadius:"100%"}),content:{},animation:{transform:"scale(1) translate(-7%, 30%)"}}),chH1:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"53%",width:"10%",height:"43%",background:i,borderRadius:"23%"}),content:{},animation:{}}),chH2:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"79%",width:"10%",height:"43%",background:i,borderRadius:"23%"}),content:{},animation:{}}),chH3:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"47%",left:"53%",width:"36%",height:"9%",background:i}),content:{},animation:{}})}}static getUpdate({app:t,ui:e}){const i=a.default.whiteRGB;return{div:c.default.get({layout:c.default.getLayoutFlex({width:x.middleSize,height:x.middleSize}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 0.75)"})}),circle:c.default.get({layout:c.default.getLayoutBase({width:"55%",height:"55%",borderRadius:"30px",border:`2px solid ${i}`,overflow:"visible"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),bar:c.default.get({layout:c.default.getLayoutBase({position:"relative",top:"1px",left:"12px",width:"8px",height:"8px",background:"none",borderTop:`0px solid ${a.default.themeRGB}`,borderRight:`2px solid ${i}`,borderBottom:`2px solid ${i}`,borderLeft:`0px solid ${a.default.themeRGB}`}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"rotate(25deg)"})}),white:c.default.get({layout:c.default.getLayoutBase({position:"relative",top:"2px",left:"12px",width:"10px",height:"4px",background:"rgba(100, 192, 170, 1)"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"rotate(25deg)"})})}}static getLoading({app:t,ui:e}){return a.default.whiteRGB,{div:c.default.get({layout:c.default.getLayoutFlex({}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutBase({margin:"0 auto",width:"2em",height:"2em",borderRadius:"50%",borderTop:"0.3em solid rgba(255, 255, 255, 0.2)",borderRight:"0.3em solid rgba(255, 255, 255, 0.2)",borderBottom:"0.3em solid rgba(255, 255, 255, 0.2)",borderLeft:"0.3em solid #ffffff"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translateZ(0)",animation:"Rotation 1.1s infinite linear"})}),after:c.default.get({layout:c.default.getLayoutBase({display:"none",borderRadius:"50%",width:"2em",height:"2em"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})})}}static getTune({app:t,ui:e}){const i="30px",l=1e6,n=a.default.chromeOffTabRGB,s="153px",g="190px",I="280px",u="317px",d="69px",B="146px",o="324px",F="401px";return{div:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",width:"500px",height:"500px"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"scale(1)"})}),side1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"135px",left:"135px",border:`30px solid ${n}`,borderRadius:"300px",width:"230px",height:"230px",zIndex:0}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),side2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"50px",left:"50px",border:`30px solid ${n}`,borderRadius:"300px",width:"400px",height:"400px",zIndex:0}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),cut:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"50px",left:"-150px",background:"none",width:"0px",height:"0px",borderTop:`200px solid ${a.default.lightRGB}`,borderRight:"400px solid rgba(255,255,255,0)",borderBottom:`200px solid ${a.default.lightRGB}`,borderLeft:"400px solid rgba(255,255,255,0)",zIndex:1}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),center:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"220px",left:"220px",width:"60px",height:"60px",borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftTop1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:s,left:d,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftTop2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:g,left:B,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftBottom1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:u,left:d,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftBottom2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:I,left:B,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightTop1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:s,left:F,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightTop2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:g,left:o,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightBottom1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:u,left:F,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightBottom2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:I,left:o,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})})}}static getLiveCnt({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"26px",height:"26px",background:`rgba(${a.default.themeRGBString}, 0.85)`,borderRadius:"26px",boxShadow:"0px 0px 0px rgba(255,255,255,1)"}),content:c.default.getContentBase({fontSize:"0.7em",textAlign:"center"}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:c.default.getContentBase({textAlign:"center",color:a.default.whiteRGB}),animation:c.default.getAnimationBase()})}}static getStampStr(t=!0){let e="1",i="40px",l="2em",n="flex-start";return t&&(e="1.5",i="100%",l="3.2em",n="center"),`display: flex;justify-content: ${n};align-items: center;width: 100%;height: ${i};transform: scale(${e});line-height: 2em;font-size: ${l};`}static getStampLabelAtMenuStr(t=!0){return"text-indent: 0.5em; font-size: 0.5em; letter-spacing: 0.1em;"}static getStampLabel({app:t,ui:e}){let i={height:"20px",justifyContent:"flex-end"},l={left:s.default.screenSizeSmallLabel===e.screenSize?"-12%":"-9%",color:a.default.whiteRGB,background:"rgba(80, 80 ,80, 0.3)",borderRadius:"5px 5px 0px 0px",justifyContent:"center"},n={color:a.default.whiteRGB,fontSize:"0.7em"};return e.isBubblePost||(i.height="40px",i.justifyContent="flex-start",l.left=s.default.screenSizeSmallLabel===e.screenSize?"30%":"27%",l.background="none",l.borderRadius=a.default.radius,l.justifyContent="flex-start",n.color=a.default.fontBaseRGB,n.fontSize="0.9em"),{div:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",bottom:"0px",width:"100%",zIndex:10,...i}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),label:c.default.get({layout:c.default.getLayoutFlex({position:"relative",width:"120px",height:"inherit",padding:"5px 5px 5px 20px",justifyContent:"center",alignItems:"center",...l}),content:c.default.getContentBase({...n}),animation:c.default.getAnimationBase({})})}}}e.default=x},6869:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(9167)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static getSelf({app:t,ui:e}){const i=s.default.getOlWidth({app:t,ui:e},!0),l=(100-i)/2,c=t.isOpenInnerNotif?n.default.getBlockSize({app:t,ui:e}):0,g=a.default.getLayoutFlex({position:"fixed",top:n.default.getBlockSize({app:t,ui:e})+"px",alignItems:"center",justifyContent:"center",width:`calc( ${i}% - 2px )`,margin:`0px calc( ${l}% + 1px ) 0px calc( ${l}% + 1px )`,height:c,background:n.default.themeRGBA,zIndex:20}),I=a.default.getContentBase({color:n.default.whiteRGB}),u=a.default.getAnimationBase({transition:`${n.default.transitionNotif}ms`});return a.default.get({layout:g,content:I,animation:u})}}e.default=c},2945:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(4381));class a{constructor(t){return{self:a.getSelf(t),tuneLi:a.getTuneLi(t),activeLi:a.getActiveLi(t),unactiveLi:a.getUnactiveLi(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return n.default.themeRGB}static get unactiveColor(){return n.default.fontBaseRGB}static get activeBgColor(){return n.default.whiteRGBA}static get unactiveBgColor(){return"rgba( 235, 235, 235, 0.96 )"}static getSelf({app:t,ui:e}){const i=a.size+"px",l=s.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:a.activeBgColor,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),c=s.default.getContentBase({cursor:"pointer"}),g=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:c,animation:g})}static getTuneLi({app:t,ui:e}){const i=a.getActiveLi({app:t,ui:e});return i.alignItems="center",i}static getActiveLi({app:t,ui:e}){const i=a.getSelf({app:t,ui:e});return i.background=a.activeBgColor,i.color=n.default.fontBaseRGB,i}static getUnactiveLi({app:t,ui:e}){const i=a.getSelf({app:t,ui:e});return i.background=a.unactiveBgColor,i.color=n.default.fontBaseRGB,i}}e.default=a},7825:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(4381));class a{constructor(t){return{self:a.getSelf(t),linksUl:a.getLinksUl(t),linksLi:a.getLinksLi(t),linksLiActive:a.getLinksLiActive(t),linksLiUnactive:a.getLinksLiUnactive(t),linkMenuUl:a.getLinkMenuUl(t),linkMenuLi:a.getLinkMenuLi(t),linksTabActive:a.getLinksTabActive(t),linksTabUnactive:a.getLinksTabUnactive(t),linksTabLast:a.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return n.default.themeRGB}static get unactiveColor(){return n.default.fontBaseRGB}static getSelfDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getLinksUlOevrflowY({app:t,ui:e}){return e.isOpenLinks?"scroll":"hidden"}static getSelf({app:t,ui:e}){const i=a.getSelfDisplay({app:t,ui:e}),l=s.default.getLayoutFlex({display:i,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),n=s.default.getContentBase({});return s.default.get({layout:l,content:n,animation:{}})}static getLinksUl({app:t,ui:e}){const i=a.getLinksUlOevrflowY({app:t,ui:e}),l=s.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflowX:"hidden",overflowY:i,overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),c=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:{},animation:c})}static getLinksLi({app:t,ui:e}){const i=a.size+"px",l=s.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:n.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),c=s.default.getContentBase({cursor:"pointer"}),g=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:c,animation:g})}static getLinksLiActive({app:t,ui:e}){const i=a.getLinksLi({app:t,ui:e});return i.background=n.default.whiteRGB,i.color=n.default.fontBaseRGB,i}static getLinksLiUnactive({app:t,ui:e}){const i=a.getLinksLi({app:t,ui:e});return i.background=n.default.calmRGB,i.color=n.default.fontBaseRGB,i}static getLinkMenuUl({app:t,ui:e}){const i=a.size+"px",l=s.default.getLayoutFlex({minHeight:i,height:i,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),c=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:{},animation:c})}static getLinkMenuLi({app:t,ui:e}){const i=a.size-4+"px",l=s.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:i,minHeight:i,maxHeight:i,background:n.default.reliefRGB,borderRadius:"5px"}),c=s.default.getContentBase({cursor:"pointer",color:n.default.whiteRGB}),g=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:c,animation:g})}static getLinksTabActive({app:t,ui:e}){const i={};return i.background=n.default.whiteRGBA,i.color=n.default.fontBaseRGB,i}static getLinksTabUnactive({app:t,ui:e}){return a.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){return{margin:"5px 0px 0px 0px"}}}e.default=a},4289:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4381));class s{constructor(t){return{self:s.getSelf()}}static getSelf(){const t=n.default.getLayoutFlex({margin:"0 auto",height:"100vh",width:"10%"}),e=n.default.getAnimationBase();return n.default.get({layout:t,content:{},animation:e})}}e.default=s},9201:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{menuShare:c.getMenuShare(t),header:c.getHeader(t),ul:c.getUl(t),liGoWeb:c.getLiGoWeb(t),liTwitter:c.getLiTwitter(t),liFacebook:c.getLiFacebook(t),liEmbed:c.getLiEmbed(t),liEmbedInput:c.getLiEmbedInput(t),shareLabel:c.getShareLabel(t),label:c.getLabel(t)}}static getHeadTabUpdate({app:t,ui:e}){return{div:{position:"absolute",top:e.screenSize===n.default.screenSizeSmallLabel?"15px":"20px",right:"15px",transform:"scale(0.7)"}}}static getCommonLayout({app:t,ui:e}){const i={position:"fixed",width:"90%",height:"fit-content",minHeight:"fit-content",maxHeight:"fit-content",top:`calc( 100% + ${s.default.getBlockSize({app:t,ui:e})}px)`,left:"5%",flexFlow:"column",border:s.default.border,borderRadius:"5px",boxShadow:`${s.default.lineShadow}`};switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:i.width=""+100*s.default.widthRatio,i.left=(100-i.width)/2,i.width=i.width+"%",i.left=i.left+"%",i.zIndex=0;break;case n.default.screenSizeLargeLabel:i.width="33.3%",i.left="33.3%",i.zIndex=3}return i}static getCommonTransform({app:t,ui:e}){return e.openLockMenu===n.default.openLockMenuLabelNo?"translate3d(0px, 0px, 0px)":"translate3d(0px, -75vh, 0px)"}static getPaddingLi({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:return"15px";case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return"15px 15px 15px 20px"}}static getMenuShare({app:t,ui:e}){const i=c.getCommonLayout({app:t,ui:e}),l=a.default.getLayoutFlex(i),n=a.default.getContentBase(),g=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:c.getCommonTransform({app:t,ui:e})});return a.default.get({layout:l,content:n,animation:g})}static getHeader({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:s.default.getBlockSize({app:t,ui:e}),maxHeight:s.default.getBlockSize({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow,padding:"0px 20px",zIndex:2}),l=a.default.getContentBase(),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getUl({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"100%"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiGoWeb({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e})}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiTwitter({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiFacebook({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiEmbed({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiEmbedInput({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"98%",height:"25px",margin:"0px 0px 0px 20px",border:s.default.border,borderRadius:"5px",padding:"5px"}),l=a.default.getContentBase({outline:0,cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getShareLabel({app:t,ui:e}){const i=a.default.getLayoutFlex({flexGrow:"1"}),l=a.default.getContentBase({color:"inherit",justifyContent:"flex-start",textIndent:"20px",textAlign:"left"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLabel({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}}e.default=c},2423:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(8506)),a=l(i(5549)),c=l(i(9301)),g=l(i(3829)),I=l(i(4381));class u{constructor(t){return{self:u.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 5}static get marginRightMag(){return 1}static get marginLeft(){return Math.floor(.05*window.innerWidth)}static get marginRight(){return u.marginBase*u.marginRightMag}static get height(){return 50}static getSelfWidth({app:t,ui:e}){let i="0";const l=u.marginLeft+u.marginRight+s.default.getTotalWidth({app:t,ui:e});switch(e.screenSize){case n.default.screenSizeSmallLabel:i=`calc( 100% - ${l}px )`;break;case n.default.screenSizeMiddleLabel:i=`calc( 100% - ${g.default.getWidth({app:t,ui:e},!0)+l}px )`;break;case n.default.screenSizeLargeLabel:i=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!0)+l}px )`}return i}static getSelfLeft({app:t,ui:e}){let i="0px";switch(e.screenSize){case n.default.screenSizeSmallLabel:i="0px";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:i=g.default.getWidth({app:t,ui:e},!0)}return i}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"block":"none",l=u.getSelfWidth({app:t,ui:e}),n=u.getSelfLeft({app:t,ui:e}),s=I.default.getLayoutBlock({display:i,position:"fixed",top:a.default.getBlockSize({app:t,ui:e})+15+"px",left:n,margin:`0px ${u.marginRight}px 0px ${u.marginLeft}px`,width:l,height:`${u.height}px`});return I.default.get({layout:s,content:{},animation:{}})}}e.default=u},4857:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9301)),c=l(i(3829)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 0}static get marginRightMag(){return 0}static get marginLeft(){return I.marginBase*I.marginLeftMag}static get marginRight(){return I.marginBase*I.marginRightMag}static get height(){return 260}static getSelfWidth({app:t,ui:e}){let i="0";const l=I.marginLeftMag+I.marginRightMag;switch(e.screenSize){case n.default.screenSizeSmallLabel:i=100-l+"%";break;case n.default.screenSizeMiddleLabel:i=`calc( ${100-l}% - ${c.default.getWidth({app:t,ui:e},!0)}px )`;break;case n.default.screenSizeLargeLabel:i=`calc( ${100-a.default.getWidth({app:t,ui:e},!1)-l}% - ${c.default.getWidth({app:t,ui:e},!0)+l}px )`}return i}static getSelfLeft({app:t,ui:e}){let i="0px";switch(e.screenSize){case n.default.screenSizeSmallLabel:i="0px";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:i=c.default.getWidth({app:t,ui:e},!0)}return i}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"block":"none",l=I.getSelfWidth({app:t,ui:e}),n=I.getSelfLeft({app:t,ui:e}),a=g.default.getLayoutBlock({display:i,position:"fixed",background:"black",top:s.default.getBlockSize({app:t,ui:e})+"px",left:n,margin:`0px ${I.marginRightMag}% 0px ${I.marginLeftMag}%`,width:l,zIndex:1,height:`${I.height}px`,outline:"none"});return g.default.get({layout:a,content:{},animation:{}})}}e.default=I},3829:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t),body:c.getBody(t),footer:c.getFooter(t),footerChild:c.getFooterChild(t),footerChildMoney:c.getFooterChildMoney(t)}}static get baseWidth(){return"300px"}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case n.default.extensionModeNone:case n.default.extensionModeEmbed:return 0;default:switch(e.screenSize){case n.default.screenSizeSmallLabel:return`0 0 ${s.default.radius} ${s.default.radius}`;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return`0px 0px 0px ${s.default.radius}`}}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100.0%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l=c.baseWidth}return i?a.default.trimUnit(l):l}static getHeight({app:t,ui:e},i=!1){return`calc( 100% - ${s.default.getBlockSize({app:t,ui:e})}px )`}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";switch(e.screenSize){case n.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 0%, 0%, 0px )":"translate3d( -100% , 0%, 0px )";break;case n.default.screenSizeMiddleLabel:e.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){e.extensionMode===n.default.extensionModeBottom||s.default.silverRGBA;const i=a.default.getLayoutBlock({display:"block",position:"fixed",top:`${s.default.getBlockSize({app:t,ui:e})}px`,left:"0px",borderRadius:c.getBorderRadius({app:t,ui:e}),width:c.getWidth({app:t,ui:e}),minWidth:c.getWidth({app:t,ui:e}),height:c.getHeight({app:t,ui:e}),minHeight:"auto",maxHeight:"auto",margin:"0",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:10}),l=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:c.getTransform({app:t,ui:e})});return a.default.get({layout:i,content:{},animation:l})}static getBody({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeBottom?"90%":"100%",l=e.extensionMode===n.default.extensionModeModal?s.default.border:0,c=a.default.getLayoutBlock({borderLeft:l,width:i,minWidth:"inherit",maxWidth:"inherit",height:`calc( 100% - ${2*s.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),g=a.default.getAnimationBase();return a.default.get({layout:c,content:{},animation:g})}static getWrap({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:s.default.border}),l=a.default.getContentBase({textAlign:"left"}),n=a.default.getAnimationBase({});return a.default.get({layout:i,content:l,animation:n})}static getFooter({app:t,ui:e}){const i=(e.screenSize,n.default.screenSizeSmallLabel,{border:s.default.border}),l=a.default.getLayoutFlex({width:"100%",background:s.default.offWhiteRGB,height:`${s.default.getBlockSize({app:t,ui:e})}px`,...i}),c=a.default.getContentBase({}),g=a.default.getAnimationBase();return a.default.get({layout:l,content:c,animation:g})}static getFooterChild({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=a.default.getContentBase({fontSize:"0.5em"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getFooterChildMoney({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=a.default.getContentBase({fontSize:"0.5em"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}}e.default=c},9723:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){const e=c.getSelf(t),i=c.getColumns(t),l=c.getColumn(t),n=c.getColumnLast(t),s=c.getImg(t),a=c.getWrap(t);return{self:e,columns:i,column:l,columnLast:n,img:s,imgWrap:c.getImgWrap(t),wrap:a,names:c.getNames(t),namesAddCh:c.getNamesAddCh(t)}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100.0%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l="300px"}return i?a.default.trimUnit(l):l}static getTransform({app:t,ui:e}){let i="translate3d( 0px ,0px, 0px )";switch(e.screenSize){case n.default.screenSizeSmallLabel:i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeMiddleLabel:t.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({position:"relative",width:c.getWidth({app:t,ui:e}),minWidth:c.getWidth({app:t,ui:e}),maxWidth:"inherit",height:"100%",WebkitOverflowScrolling:"touch",overflow:"scroll",borderTop:0,borderRight:s.default.border,borderBottom:0,borderLeft:0}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:{},animation:l})}static getColumns({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",height:"auto",borderBottom:s.default.border,borderRight:s.default.border,background:s.default.whiteRGB,overflow:"scroll"}),l=a.default.getContentBase({whiteSpace:"nowrap"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getColumn({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",borderBottom:s.default.border,borderRight:s.default.border}),l=a.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getColumnLast({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",marginLeft:"20px"}),l=a.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getWrap({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:s.default.border}),l=a.default.getContentBase({textAlign:"left",content:"getWrap"}),n=a.default.getAnimationBase({});return a.default.get({layout:i,content:l,animation:n})}static getImgWrap({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,margin:"22px 0px 0px 0px",width:"60px",maxWidth:"60px",minWidth:"60px",height:"60px"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase({});return a.default.get({layout:i,content:l,animation:n})}static getImg({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({borderRadius:"50%",width:"34px",height:"34px"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getNamesAddCh({app:t,ui:e}){const i=a.default.getLayoutBlock({padding:"5px 10px 5px 5px",flexGrow:4}),l=a.default.getContentBase({textAlign:"left",lineHeight:"2"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getNames({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:4}),l=a.default.getContentBase({textAlign:"left",lineHeight:"1.7"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}}e.default=c},8381:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{header:g.getHeader(t),headerSearchIcon:g.getHeaderSearchIcon(t),headerInput:g.getHeaderInput(t),headerFindSelect:g.getHeaderFindSelect(t),headerUpdateIcon:g.getHeaderUpdateIcon(t),ol:g.getOl(t),headerCh:{},tuneButton:g.getTuneButton(t),tuneAnchor:g.getTuneAnchor(t)}}static get iconSize(){return"25px"}static get liHeight(){return 90}static getSelf({app:t,ui:e}){const i=c.default.getLayoutBlock({width:"100%",height:`calc( 100% - ${2*a.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getHeader({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?{borderBottom:a.default.border,borderLeft:0}:{borderBottom:a.default.border,borderLeft:0,borderRight:a.default.border},l=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start",width:"100%",height:`${a.default.getBlockSize({app:t,ui:e})}px`,...i,background:a.default.lightRGB}),n=c.default.getContentBase({cursor:"pointer",textAlign:"left"}),g=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:l,content:n,animation:g})}static getHeaderSearchIcon({app:t,ui:e}){const i=c.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"72px",height:`${a.default.getBlockSize({app:t,ui:e})}px`}),l=c.default.getContentBase({color:a.default.reliefRGBA,fontWeight:"bold"}),n=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:l,animation:n})}static getHeaderInput({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0.9em":"1em",l=e.screenSize===s.default.screenSizeSmallLabel?"0.8em":"1.4em",n=c.default.getLayoutInlineBlock({width:"calc( 100% - 120px )",height:"55%",padding:"6px",background:a.default.whiteRGB,outline:"none",resize:"none",border:a.default.border,borderRadius:"3px",WebkitAppearance:"none"}),g=c.default.getContentBase({cursor:"pointer",whiteSpace:"nowrap",fontSize:i,lineHeight:l,textAlign:"left",textIndent:"3%",color:a.default.downreliefRGB}),I=c.default.getAnimationBase();return c.default.get({layout:n,content:g,animation:I})}static getHeaderUpdateIcon({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"70px",height:"50px",alignItems:"center",justifyContent:"flex-start"}),l=c.default.getContentBase({cursor:"pointer"}),n=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:l,animation:n})}static getHeaderFindSelect({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"100%",height:"50px",alignItems:"center",justifyContent:"center",background:"transparent",WebkitAppearance:"none",padding:"10px 4px 10px 10px"}),l=c.default.getContentBase({outline:0,cursor:"pointer"}),n=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:l,animation:n})}static getOl({app:t,ui:e,ranks:i}){const l=a.default.getBlockSize({app:t,ui:e});let n="1fr";const s=(i&&i.length?i.length:0)+(""===t.tuned?0:1);for(let t=0;t<s;t++)n=2*l+"px "+n;const g=c.default.getLayoutGrid({gridTemplateRows:n,gridTemplateColumns:"1fr",height:`calc( 100% - ${2*l}px )`,overflowX:"hidden",overflowY:"scroll"}),I=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:g,content:{},animation:I})}static getLiActive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:`${g.liHeight}px`,padding:"10px",borderBottom:a.default.border,zIndex:3,borderRight:`1px solid ${a.default.whiteRGB}`,background:a.default.whiteRGB}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getLiUnactive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:`${g.liHeight}px`,padding:"10px",borderBottom:a.default.border,background:a.default.offWhiteRGB,borderRight:a.default.border}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"20%"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottom(){const t=c.default.getLayoutBlock({width:"100%",height:"50px"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottomIcon(){const t=c.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:`url(${n.default.protcol}:${n.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 15%",backgroundSize:"20px 20px",backgroundRepeat:"no-repeat"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottomPost(){const t=c.default.getLayoutInlineBlock({width:"80%",flexGrow:2}),e=c.default.getContentBase({lineHeight:2,textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getTuneAnchor({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"130px"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getTuneButton({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"100%",maxWidth:"130px",height:"46px",margin:"0px 0px 0px 10px",background:a.default.themeRGB}),l=c.default.getContentBase({color:a.default.whiteRGB,fontWeight:"500",borderRadius:"50px",outline:0,cursor:"pointer"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}}e.default=g},4359:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),modalWrap:g.getModalWrap(t),modal:g.getModal(t),logo:g.getLogo(t),input:g.getInput(t),recommend:g.getRecommend(t),recommendTitle:g.getRecommendTitle(t),recommendLi:g.getRecommendLi(t),example:g.getExample(t)}}static getSelf({app:t,ui:e}){const i=e.isOpenSetChModal?"flex":"none",l=c.default.getLayoutFlex({display:i,position:"fixed",top:"0",left:"0",zIndex:"1001",flexFlow:"row wrap",alignItems:"center",justifyContent:"center",width:"100vw",height:"100vh",margin:"0 auto",background:a.default.darkRGBA}),n=c.default.getContentBase({}),s=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:l,content:n,animation:s})}static getModalWrap({app:t,ui:e}){const i=c.default.getLayoutFlex({position:"absolute",flexFlow:"column wrap",alignItems:"center",justifyContent:"center",width:"calc( 100% - 40px )",maxWidth:"850px",minWidth:"320px"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getModal({app:t,ui:e}){const i=c.default.getLayoutFlex({position:"absolute",flexFlow:"column wrap",alignItems:"flex-start",justifyContent:"center",width:"100%",maxWidth:"800px",height:"auto",padding:"20px",margin:"20px",background:a.default.lightRGB}),l=c.default.getContentBase({borderRadius:"10px",boxShadow:"0px 0px 10px rgb(100, 100, 100, 1)"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getLogo({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"200px",height:"200px",margin:"70px 0 60px",background:`url(${n.default.assetsPath}logo1.png) center / 128px no-repeat`}),l=c.default.getContentBase({}),s=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:s})}static getInput({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0.9em":"1em",l=e.screenSize===s.default.screenSizeSmallLabel?"0.8em":"1.4em",n=c.default.getLayoutInlineBlock({width:"80%",height:"46px",padding:"6px",background:a.default.whiteRGB,outline:"none",resize:"none",border:a.default.border,borderRadius:"6px",WebkitAppearance:"none"}),g=c.default.getContentBase({cursor:"pointer",whiteSpace:"nowrap",fontSize:i,lineHeight:l,textAlign:"left",textIndent:"3%",color:a.default.downreliefRGB}),I=c.default.getAnimationBase();return c.default.get({layout:n,content:g,animation:I})}static getRecommendTitle({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",padding:"0",margin:"20px 0 0"}),l=c.default.getContentBase({textIndent:"30px"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getRecommend({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",padding:"0",margin:"0"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getRecommendLi({app:t,ui:e}){const i=c.default.getLayoutFlex({}),l=c.default.getContentBase({lineHeight:"28px",textDecoration:"list"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getExample({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start",padding:"0",margin:"0"}),l=c.default.getContentBase({textIndent:"66px"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}}e.default=g},4528:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{activeLiSelf:g.getActiveLiSelf(t),unactiveLiSelf:g.getUnactiveLiSelf(t),space:g.getSpace(t),upper:g.getUpper(),upperSpace:g.getUpperSpace(),upperRankWrap:g.getUpperRankWrap(t),upperRank:g.getUpperRank(),upperRight:g.getUpperRight(),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(),ext:g.getExt(),extMusic:g.getExtMusic(),extVideo:g.getExtVideo()}}static get tuneRGB(){return a.default.themeRGB}static get rank1RGB(){return"rgb(255, 10, 78)"}static get rank2RGB(){return"rgb(255, 127, 0)"}static get rank3RGB(){return"rgb(0, 142, 255)"}static get rankOtherRGB(){return a.default.downreliefRGB}static get oneDigitWidth(){return"17%"}static get twoDigitWidth(){return"18%"}static get thirdDigitWidth(){return"19%"}static get iconSize(){return 24}static get activeLiSelfLabel(){return"activeLiSelf"}static get unactiveLiSelfLabel(){return"unactiveLiSelf"}static get activeLiSelfBackground(){return a.default.whiteRGBA}static get activeLiSelfMouseOverBackground(){return a.default.whiteRGBA}static get activeLiSelfMouseDownBackground(){return a.default.whiteRGBA}static get unactiveLiSelfBackground(){return a.default.calmRGBA}static get unactiveLiSelfMouseOverBackground(){return a.default.whiteRGBA}static get unactiveLiSelfMouseDownBackground(){return a.default.whiteRGBA}static get activeLiSelfBorderRightColor(){return`1px solid ${a.default.whiteRGB}`}static get unactiveLiSelfBorderRightColor(){return a.default.border}static getUnactiveLiBorder({app:t,ui:e}){return e.extensionMode===s.default.extensionModeBottom||e.screenSize===s.default.screenSizeSmallLabel?{borderTop:0,borderRight:0,borderBottom:a.default.border,borderLeft:0}:{borderTop:0,borderRight:a.default.border,borderBottom:a.default.border,borderLeft:0}}static getDispRankBackground(t=0){switch(t){case 0:return g.tuneRGB;case 1:return g.rank1RGB;case 2:return g.rank2RGB;case 3:return g.rank3RGB;default:return g.rankOtherRGB}}static getDispRankWidth(t=0){switch(String(t).length){case 0:case 1:return g.oneDigitWidth;case 2:return g.twoDigitWidth;case 3:default:return g.thirdDigitWidth}}static getActiveLiSelf({app:t,ui:e}){const i=2*a.default.getBlockSize({app:t,ui:e}),l=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",n=c.default.getLayoutBlock({width:"initial",height:`${i}px`,minHeight:`${i}px`,padding:l,borderTop:0,borderRight:`1px solid ${a.default.whiteRGB}`,borderBottom:a.default.border,borderLeft:0,background:g.activeLiSelfBackground,boxShadow:"0px 0px 0px rgba(255,255,255,1), 0px 0px 0px rgba(${Container.themeRGBString}, 0.2) inset ",cursor:"pointer"}),I=c.default.getContentBase(),u=c.default.getAnimationBase({transition:`${a.default.transitionOn}ms`});return c.default.get({layout:n,content:I,animation:u})}static getUnactiveLiSelf({app:t,ui:e}){const i=g.getUnactiveLiBorder({app:t,ui:e}),l=2*a.default.getBlockSize({app:t,ui:e}),n=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",I=c.default.getLayoutBlock({boxShadow:`${a.default.lineShadow}, 0px 0px 0px rgba(${a.default.themeSuperLightRGBString}, 1) inset`,width:"initial",height:`${l}px`,minHeight:`${l}px`,padding:n,...i,background:g.unactiveLiSelfBackground,cursor:"pointer"}),u=c.default.getContentBase(),d=c.default.getAnimationBase({transition:`${a.default.transitionOn}ms`});return c.default.get({layout:I,content:u,animation:d})}static getSpace({app:t,ui:e}){const i=c.default.getLayoutBlock({height:"100%",background:a.default.silverRGBA}),l=c.default.getContentBase({}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"18%",margin:"0px 2% 0px 0px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperRankWrap({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",l=c.default.getLayoutInlineFlex({position:"absolute",left:"14px",top:i,width:g.thirdDigitWidth,height:"20px",background:g.rankOtherRGB,borderRadius:"10px",margin:"0"}),n=c.default.getContentBase({}),a=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:a})}static getUpperRank(){const t=c.default.getLayoutFlex({width:"100%"}),e=c.default.getContentBase({fontSize:"0.7em",fontWeight:"bold",color:a.default.whiteRGB,lineHeight:"1.5"}),i=c.default.getAnimationBase({transform:"scale(0.8)"});return c.default.get({layout:t,content:e,animation:i})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({lineHeight:"1.5",textIndent:"4px",textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottom({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"50%":"63%",l=c.default.getLayoutFlex({justifyContent:"flex-start",alignItems:"center",width:"100%",height:i}),n=c.default.getContentBase(),a=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:a})}static getBottomIcon({app:t,ui:e}){const i=c.default.getLayoutInlineBlock({width:"20%",height:"100%",backgroundImage:`url("${n.default.assetsURL}/favicon.ico")`,backgroundPosition:"30% 50%",backgroundSize:`${a.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat"}),l=c.default.getContentBase(),s=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:s})}static getBottomPost(){const t=c.default.getLayoutInlineFlex({width:"65%",height:"100%",justifyContent:"flex-start"}),e=c.default.getContentBase({textIndent:"3%",textAlign:"left",whiteSpace:"nowrap"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getExt(){const t=c.default.getLayoutFlex({position:"absolute",alignItems:"center",justifyContent:"center",bottom:"0px",right:"10px",width:"70px",height:"20px",background:a.default.lightGrayRGBA,borderRadius:"3px 3px 0px 0px"}),e=c.default.getContentBase({textIndent:"3px",textAlign:"center",fontSize:"0.6em",color:a.default.whiteRGB}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getExtMusic(){let t=g.getExt();return t.background="rgba(143,198,143, 1)",t}static getExtVideo(){let t=g.getExt();return t.background="rgba(105, 70, 255, 1)",t}}e.default=g},6620:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(3829)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),child:g.getChild(t),childIndex:g.getChildIndex(t)}}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case n.default.extensionModeBottom:return s.default.radiuses;case n.default.extensionModeModal:switch(e.screenSize){case n.default.screenSizeSmallLabel:return`0 0 0 ${s.default.radius}`;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return`0px 0px 0px ${s.default.radius}`}default:return"0"}}static getWidth({app:t,ui:e},i=!1){let l="0";if(e.extensionMode===n.default.extensionModeBottom)l="50%";else switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l=a.default.baseWidth}return i?c.default.trimUnit(l):l}static getSelf({app:t,ui:e}){const i=(e.screenSize,n.default.screenSizeSmallLabel,{border:s.default.border}),l=g.getBorderRadius({app:t,ui:e}),a=c.default.getLayoutFlex({width:g.getWidth({app:t,ui:e}),minWidth:g.getWidth({app:t,ui:e}),height:`${s.default.getBlockSize({app:t,ui:e})}px`,background:s.default.lightRGBA,boxShadow:s.default.lineShadow,borderRadius:l,...i}),I=c.default.getContentBase({}),u=c.default.getAnimationBase();return c.default.get({layout:a,content:I,animation:u})}static getChild({app:t,ui:e}){const i=c.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),l=c.default.getContentBase({fontSize:"0.7em",lineHeight:"1.5em",cursor:"pointer"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getChildIndex({app:t,ui:e}){const i=c.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=c.default.getContentBase({fontSize:"0.7em",fontWeight:"600",lineHeight:"1.5em",cursor:"pointer"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}}e.default=g},7608:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9167)),c=l(i(4381));class g{constructor(t){return{notifs:g.getNotifs(t),self:g.getSelf(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get selfHeight(){return 40}static getNotifsDisplay({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?"block":"none"}static getNotifsHeight({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?e.isOpenPosts?"0px":e.isOpenNotif?`${s.default.getBlockSize({app:t,ui:e})+g.selfHeight}px`:`${g.selfHeight}px`:"0px"}static getNotifs({app:t,ui:e}){const i=g.getNotifsDisplay({app:t,ui:e}),l=g.getNotifsHeight({app:t,ui:e}),n=c.default.getLayoutBlock({display:i,position:"absolute",top:"0px",width:"100%",height:l,overflow:"visible"}),s=c.default.getContentBase(),a=c.default.getAnimationBase();return c.default.get({layout:n,content:s,animation:a})}static getSelf({app:t,ui:e}){const i=g.getNotifsDisplay({app:t,ui:e}),l=a.default.getOlWidth({app:t,ui:e},!0),n=(100-l)/2,I=c.default.getLayoutBlock({display:i,position:"absolute",top:0,width:`${l}%`,height:g.selfHeight+"px",background:s.default.whiteRGBA,marginLeft:`${n}%`,borderTop:s.default.border,borderLeft:s.default.border,borderRight:s.default.border,borderRadius:"3px 3px 0px 0px"}),u=c.default.getContentBase({textAlign:"left"}),d=c.default.getAnimationBase({transform:"translate3d(0px, 40px, 0px)",transition:`${s.default.transitionNotif}ms`});return c.default.get({layout:I,content:u,animation:d})}static getBottom({app:t,ui:e}){return c.default.get({layout:{width:"100%"},content:{},animation:{}})}static getBottomIcon({app:t,ui:e}){return c.default.get({layout:{},content:{},animation:{}})}static getBottomPost({app:t,ui:e}){const i={lineHeight:"0.8",whiteSpace:"nowrap",color:c.default.fontBaseRGB};return c.default.get({layout:{overflow:"hidden",padding:"15px 15px 15px 0px",background:"none"},content:i,animation:{}})}}e.default=g},4909:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),upper:g.getUpper(t),upperChild:g.getUpperChild(t),upperTitle:g.getUpperTitle(t),upperTimeago:g.getUpperTimeago(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get bubblestampScale(){return 2}static get stampScale(){return 1}static getBottomPostPadding({app:t,ui:e},i=!1){return i?"0":e.isBubblePost?"20px 20px 20px 30px":"0"}static getSelf({app:t,ui:e}){const i=e.isBubblePost?"5px 0":"0",l=e.isBubblePost?"5px 0":"0",n=(e.isBubblePost,"40px"),s="calc( 100% - 0px )",a=c.default.getLayoutBlock({width:s,minWidth:"calc( 100% - 20px )",maxWidth:s,height:"auto",minHeight:n,margin:l,padding:i}),g=c.default.getContentBase(),I=c.default.getAnimationBase();return c.default.get({layout:a,content:g,animation:I})}static getFixTimeMarker({app:t,ui:e}){return{...g.getTimeMarker({app:t,ui:e}),position:"fixed"}}static getTimeMarker({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"18%",height:"auto",margin:"15px auto 10px auto",padding:"5px 10px",background:a.default.darkLightRGBA,borderRadius:"20px"}),l=c.default.getContentBase({color:a.default.whiteRGB,letterSpacing:"2px"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getUpper({app:t,ui:e}){const i=e.isBubblePost?"flex":"none",l=c.default.getLayoutFlex({display:i,justifyContent:"space-between",height:"22px"}),n=c.default.getContentBase({fontSize:"0.9em"}),s=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:s})}static getUpperChild({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"center",flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%"}),l=c.default.getContentBase({textAlign:"left",textIndent:"10px"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getUpperTitle({app:t,ui:e}){const i=e.extensionMode===s.default.extensionModeLiveMedia?"none":"flex",l=c.default.getLayoutFlex({display:i,alignItems:"flex-start",justifyContent:"flex-start",flexGrow:6,width:"60%",minWidth:"60%",maxWidth:"60%",margin:"0px 15px 0px 5px"}),n=c.default.getContentBase({textAlign:"left",whiteSpace:"nowrap",wordBreak:"break-all"}),a=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:a})}static getUpperTimeago({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:2,padding:"0px 20px 0px 0px",width:"20%",minWidth:"20%",maxWidth:"20%"}),l=c.default.getContentBase({textAlign:"right",fontSize:"0.75em",letterSpacing:"0.5px"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getBottom({app:t,ui:e}){const i=c.default.getLayoutFlex({padding:"0px 10px 0px 0px"}),l=c.default.getContentBase(),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getBottomIcon({app:t,ui:e}){const i=c.default.getLayoutBlock({flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%",height:`${a.default.getFaviconSize({app:t,ui:e})}px`,minHeight:"40px",backgroundImage:`url(${n.default.protcol}:${n.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 50%",backgroundSize:`${a.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat"}),l=c.default.getContentBase(),s=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:s})}static getBottomPost({app:t,ui:e},i=!1){const l="75%",n=e.isBubblePost?a.default.themeRGBA:"none",s=e.isBubblePost?a.default.whiteRGBA:a.default.fontBaseRGB,I=g.getBottomPostPadding({app:t,ui:e},i),u=c.default.getLayoutFlex({justifyContent:"flex-start",flexGrow:8,width:l,minWidth:l,maxWidth:l,minHeight:"40px",background:n,padding:I,margin:"0px 5% 0px 0px",borderRadius:"10px"}),d=c.default.getContentBase({color:s,textAlign:"left",lineHeight:"1.7em",cursor:"pointer",wordWrap:"break-word",overflowWrap:"break-word"}),B=c.default.getAnimationBase();return c.default.get({layout:u,content:d,animation:B})}}e.default=g},9167:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817)),s=l(i(7865)),a=l(i(5549)),c=l(i(9301)),g=l(i(4857)),I=l(i(3829)),u=l(i(4381));class d{constructor(t){return{self:d.getSelf(t),ol:d.getOl(t),more:d.getMore(t),firstAction:d.getFirstAction(t)}}static getSelfDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getMinWidth({app:t,ui:e},i=!1){let l="200px";return i?u.default.trimUnit(l):l}static getOlWidth({app:t,ui:e},i=!1){const l=e.extensionMode===s.default.extensionModeBottom?"90%":"100%";return i?u.default.trimUnit(l):l}static getWidth({app:t,ui:e},i=!1){let l="100%";switch(e.extensionMode){case s.default.extensionModeBottom:l="90%";break;case s.default.extensionModeLiveMedia:l="100%";break;default:switch(e.screenSize){case s.default.screenSizeSmallLabel:return"100%";case s.default.screenSizeMiddleLabel:return`calc(100% - ${I.default.getWidth({app:t,ui:e},!1)})`;case s.default.screenSizeLargeLabel:l=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)}% - ${I.default.getWidth({app:t,ui:e},!1)} )`}}return i?u.default.trimUnit(l):l}static closeIndexTransform({app:t,ui:e}){switch(e.screenSize){case s.default.screenSizeSmallLabel:return`translate3d( -${e.width}px, 0px, 0px)`;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:return`translate3d( -${I.default.getWidth({app:t,ui:e})}px, 0px, 0px)`}}static openIndexTransform(t){return"translate3d( 0px, 0px, 0px)"}static get headerHeight(){return 35}static getBorders({app:t,ui:e}){let i={borderTop:"0",borderRight:"0",borderBottom:"0",borderLeft:"0"};switch(e.screenSize){case s.default.screenSizeSmallLabel:i.borderRight=a.default.border,i.borderLeft=a.default.border;break;case s.default.screenSizeMiddleLabel:i.borderRight=a.default.border;break;case s.default.screenSizeLargeLabel:}return i}static getMargin({app:t,ui:e},i=!1){let l="0";if(e.extensionMode===s.default.extensionModeLiveMedia)l="0";else switch(e.screenSize){case s.default.screenSizeSmallLabel:l="0";break;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:l=`0 0 0 ${I.default.getWidth({app:t,ui:e})}`}return l}static getPadding({app:t,ui:e}){const i=a.default.getBlockSize({app:t,ui:e});let l="0";if(t.isMediaCh)l=`${2.3*i}px 0 ${i}px 0`;else switch(e.extensionMode){case s.default.extensionModeLiveMedia:l=`0 0 ${a.default.getLiveMediaBlockSize({app:t,ui:e})}px 0`;break;default:switch(e.screenSize){case s.default.screenSizeSmallLabel:case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:l=`${i}px 0 ${i}px 0`}}return l}static getSelfTransform({app:t,ui:e}){return e.extensionMode===s.default.extensionModeBottom?e.isDispPosts?"translate3d(0px, 0px, 0px)":`translate3d(0px, calc( 100% + ${a.default.getBlockSize({app:t,ui:e})}px ), 0px)`:"translate3d(0px, 0px, 0px)"}static getSelfHeight({app:t,ui:e}){if(e.extensionMode===s.default.extensionModeLiveMedia)return"100vh";switch(e.screenSize){case s.default.screenSizeLargeLabel:return t.chType===n.default.mediaTagTypeVideo?`calc( 100% - ${a.default.getBlockSize({app:t,ui:e})+a.default.getBlockSize({app:t,ui:e})+g.default.height}px )`:"100vh";case s.default.screenSizeSmallLabel:return"100vh"}}static getSelfMinHeight({app:t,ui:e}){return e.extensionMode!==s.default.extensionModeNone?"430px":e.screenSize===s.default.screenSizeLargeLabel?`calc( 100% - ${a.default.getBlockSize({app:t,ui:e})+a.default.getBlockSize({app:t,ui:e})}px )`:"auto"}static getSelfTop({app:t,ui:e}){return e.extensionMode===s.default.extensionModeNone&&t.chType===n.default.mediaTagTypeVideo?`${a.default.getBlockSize({app:t,ui:e})+g.default.height}px`:"0"}static getSelfLeft({app:t,ui:e}){return"0"}static getSelfBoxShadow({app:t,ui:e}){let i="0px 0px 0px rgba(255,255,255)";if(e.extensionMode===s.default.extensionModeNone)return i;switch(e.screenSize){case s.default.screenSizeSmallLabel:return a.default.lineInsetShadow;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:return i}return i}static getSelf({app:t,ui:e}){let i="absolute",l="hidden",n="hidden",c=d.getBorders({app:t,ui:e}),g=a.default.whiteRGBA;e.screenSize===s.default.screenSizeLargeLabel?("fixed",l="hidden",n="scroll"):e.screenSize===s.default.screenSizeSmallLabel&&(l="hidden",n="scroll");const I=u.default.getLayoutBlock({position:"absolute",top:d.getSelfTop({app:t,ui:e}),left:d.getSelfLeft({app:t,ui:e}),width:d.getWidth({app:t,ui:e}),minWidth:d.getMinWidth({app:t,ui:e}),height:d.getSelfHeight({app:t,ui:e}),minHeight:d.getSelfHeight({app:t,ui:e}),maxHeight:"auto",margin:d.getMargin({app:t,ui:e}),padding:d.getPadding({app:t,ui:e}),background:g,overflowScrolling:"touch",WebkitOverflowScrolling:"touch",boxShadow:0,overflowX:l,overflowY:n,...c}),B=u.default.getAnimationBase({});return u.default.get({layout:I,content:{},animation:B})}static getOl({app:t,ui:e}){let i="100%",l="0",n="0",c="0";e.extensionMode===s.default.extensionModeBottom&&(i=d.getOlWidth({app:t,ui:e}),l="0px 0px 0px 5%",n=a.default.border,c=a.default.border);const g=u.default.getLayoutBlock({width:i,margin:l,height:"100vh",borderRight:n,borderLeft:c}),I=u.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return u.default.get({layout:g,content:{},animation:I})}static getMore({app:t,ui:e}){const i=e.isBubblePost?a.default.themeRGBA:a.default.reliefRGBA,l=e.isBubblePost?"15px auto":"10px auto",n=u.default.getLayoutFlex({width:"50%",height:a.default.notifHeight,margin:l,alignItems:"center",justifyContent:"center",zIndex:"10",background:i,borderRadius:"20px"}),s=u.default.getContentBase({color:a.default.whiteRGB,cursor:"pointer"}),c=u.default.getAnimationBase();return u.default.get({layout:n,content:s,animation:c})}static getFirstAction({app:t,ui:e}){const i=u.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",width:"calc(100% - 120px)",height:"auto",padding:"20px",margin:"60px",background:a.default.themeRGBA,borderRadius:"10px"}),l=u.default.getContentBase({lineHeight:"2em",color:a.default.whiteRGB}),n=u.default.getAnimationBase();return u.default.get({layout:i,content:l,animation:n})}}e.default=d},1433:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(3829)),c=l(i(9167)),g=l(i(4381)),I=l(i(9444));class u{constructor(t){return{self:u.getSelf(t),icon:u.getIcon(t),textarea:u.getTextarea(t),modalTextarea:u.getModalTextarea(t),button:u.getButton(t),upper:u.getUpper(t),bottom:u.getBottom(t)}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l=c.default.getWidth({app:t,ui:e})}return i?g.default.trimUnit(l):l}static getLeft({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="0px";break;case n.default.screenSizeMiddleLabel:l=`${a.default.getWidth({app:t,ui:e})}`;break;case n.default.screenSizeLargeLabel:l=a.default.getWidth({app:t,ui:e})}return i?g.default.trimUnit(l):l}static getBorder({app:t,ui:e},i=!1){switch(e.extensionMode){case n.default.extensionModeBottom:return{borderTop:s.default.border,borderRight:s.default.border,borderLeft:s.default.border};case n.default.extensionModeModal:switch(e.screenSize){case n.default.screenSizeSmallLabel:return{border:s.default.border};case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return{borderTop:s.default.border,borderBottom:s.default.border}}default:return{borderTop:s.default.border,borderBottom:s.default.border}}}static getBorderRadius({app:t,ui:e},i=!1){if(e.extensionMode===n.default.extensionModeBottom)return"100%"===e.extensionWidth?"0px 0px 0px 0px":`${s.default.radius} ${s.default.radius} 0px 0px`;if(e.extensionMode===n.default.extensionModeModal)switch(e.screenSize){case n.default.screenSizeSmallLabel:return`0px 0px ${s.default.radius} ${s.default.radius}`;case n.default.screenSizeMiddleLabel:return`0px 0px ${s.default.radius} 0px`;case n.default.screenSizeLargeLabel:return 0}return 0}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";switch(e.screenSize){case n.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case n.default.screenSizeMiddleLabel:e.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){const i=u.getBorder({app:t,ui:e}),l=u.getBorderRadius({app:t,ui:e}),n=g.default.getLayoutFlex({position:"fixed",bottom:0,left:u.getLeft({app:t,ui:e}),flexGrow:1,height:s.default.getBlockSize({app:t,ui:e}),width:u.getWidth({app:t,ui:e}),maxWidth:u.getWidth({app:t,ui:e}),background:s.default.lightRGBA,justifyContent:"flex-start",boxShadow:`-1px 0px 1px ${s.default.lineShadowColor}`,borderRadius:l,...i,zIndex:10}),a=g.default.getAnimationBase({transform:u.getTransform({app:t,ui:e})});return g.default.get({layout:n,content:{},animation:a})}static getIcon({app:t,ui:e}){const i=g.default.getLayoutInlineBlock({width:"20%",maxWidth:"20%",height:"70%",backgroundImage:"url()",backgroundPosition:"center center",backgroundSize:`${s.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat",zIndex:9999}),l=g.default.getContentBase({cursor:"pointer"});return g.default.get({layout:i,content:l,animation:{}})}static getTextarea({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeModal?"60%":"54%",l=(e.screenSize,n.default.screenSizeSmallLabel,"1em"),a=e.screenSize===n.default.screenSizeSmallLabel?"0.8em":"1.4em",c=g.default.getLayoutInlineBlock({width:i,maxWidth:i,height:"55%",background:s.default.whiteRGB,padding:"6px",margin:"0 3% 0 0",outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),I=g.default.getContentBase({fontSize:l,lineHeight:a,textAlign:"left",textIndent:"3%"}),u=g.default.getAnimationBase();return g.default.get({layout:c,content:I,animation:u})}static getModalTextarea({app:t,ui:e}){const i=g.default.getLayoutInlineBlock({width:"60%",maxWidth:"60%",height:"80%",background:s.default.whiteRGB,padding:"6px",margin:"0",outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),l=g.default.getContentBase({textAlign:"left"}),n=g.default.getAnimationBase();return g.default.get({layout:i,content:l,animation:n})}static getButton({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?30:38,l=g.default.getLayoutInlineBlock({outline:"none",width:"20%",maxWidth:"20%",height:"56%",margin:"0px 3% 0px 0%",background:`url(${I.default}) 50% 35% / ${i}px no-repeat ${s.default.whiteRGBA}`,border:s.default.border,borderRadius:"3px"}),a=g.default.getContentBase({color:s.default.downreliefRGB,cursor:"pointer"}),c=g.default.getAnimationBase();return g.default.get({layout:l,content:a,animation:c})}static getUpper({app:t,ui:e}){const i=g.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start"}),l=g.default.getContentBase({}),n=g.default.getAnimationBase();return g.default.get({layout:i,content:l,animation:n})}static getBottom({app:t,ui:e}){const i=g.default.getLayoutFlex({alignItems:"center",justifyContent:"center"}),l=g.default.getContentBase({}),n=g.default.getAnimationBase();return g.default.get({layout:i,content:l,animation:n})}}e.default=u},7162:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(1433)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),emoji:g.getEmoji(t),emojiLabel:g.getEmojiLabel(t)}}static get selfHeight(){return 172}static getTransform({app:t,ui:e}){return e.isOpenPostsSupporter?`translate3d( 0px, -${g.selfHeight+s.default.getBlockSize({app:t,ui:e})}px, 0px )`:"translate3d( 0px, 0px, 0px )"}static getSelf({app:t,ui:e}){const i=c.default.getLayoutFlex({display:"flex",position:"fixed",bottom:`-${g.selfHeight}px`,left:a.default.getLeft({app:t,ui:e}),height:g.selfHeight,width:a.default.getWidth({app:t,ui:e}),maxWidth:a.default.getWidth({app:t,ui:e}),color:s.default.whiteRGB,flexFlow:"column wrap",alignItems:"center",justifyContent:"flex-start",background:s.default.darkRGBA,whiteSpace:"nowrap",overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:2}),l=c.default.getAnimationBase({transition:s.default.getTransitionFirstOn({app:t,ui:e}),transform:g.getTransform({app:t,ui:e})});return c.default.get({layout:i,content:{overflow:"scroll hidden"},animation:l})}static getEmoji({app:t,ui:e}){const i=n.default.screenSizeSmallLabel===e.screenSize?"35px":"40px",l=c.default.getLayoutFlex({width:"20%",minWidth:"auto",maxWidth:"auto",height:"86px",flexFlow:"column wrap",alignItems:"center",justifyContent:"center",padding:"5px"}),a=c.default.getContentBase({fontSize:i,cursor:"pointer"}),g=c.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:"scale(1.0)"});return c.default.get({layout:l,content:a,animation:g})}static getEmojiLabel({app:t,ui:e}){const i=(n.default.screenSizeSmallLabel,e.screenSize,"0px"),l=n.default.screenSizeSmallLabel===e.screenSize?"8px":"10px",a=c.default.getLayoutFlex({width:"auto",minWidth:"auto",maxWidth:"auto",height:"30px",margin:i}),g=c.default.getContentBase({wordBreak:"break-word",fontSize:l,color:s.default.whiteRGB}),I=c.default.getAnimationBase({});return c.default.get({layout:a,content:g,animation:I})}}e.default=g},544:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(2243)),c=l(i(3829)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t),fixTimeMarker:I.getFixTimeMarker(t)}}static getSelfWidthRate(){return 36}static getSelfHeightPx(){return 22}static getSelfMarginTop(){return 15}static getSelfLeftRate(){return 50-I.getSelfWidthRate()/2}static getFixTimeMarkerStyles({app:t,ui:e}){let i=I.getSelfWidthRate()/100,l=e.width*i,g=`${I.getSelfHeightPx()}px`,u=`${s.default.getBlockSize({app:t,ui:e})}px`,d="25%",B=0,o=0,F=0;if(e.screenMode=e.extensionMode===n.default.extensionModeLiveMedia&&n.default.screenSizeSmallLabel,e.extensionMode===n.default.extensionModeLiveMedia)F=e.width,l=F*i,u="0",d=B+F*(I.getSelfLeftRate()/100)+"px";else switch(e.screenSize){default:case n.default.screenSizeSmallLabel:F=e.width,l=F*i,d=B+F*(I.getSelfLeftRate()/100)+"px";break;case n.default.screenSizeMiddleLabel:B=c.default.getWidth({app:t,ui:e},!0),F=e.width-B,l=F*i,d=B+F*(I.getSelfLeftRate()/100)+"px";break;case n.default.screenSizeLargeLabel:B=c.default.getWidth({app:t,ui:e},!0),o=e.width*Number(a.default.getWidth({app:t,ui:e},!0))/100,F=e.width-(B+o),l=F*i,d=B+F*(I.getSelfLeftRate()/100)+"px"}return{width:l,height:g,top:u,left:d,fontSize:"0.8em"}}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"none":"flex",l=g.default.getLayoutFlex({top:`${s.default.getBlockSize({app:t,ui:e})}px`,width:`${I.getSelfWidthRate()}%`,height:`${I.getSelfHeightPx()}px`,margin:`${I.getSelfMarginTop()}px auto 10px auto`,padding:"5px 10px",background:s.default.darkLightRGBA,borderRadius:"20px",display:i}),n=g.default.getContentBase({color:s.default.whiteRGB,letterSpacing:"2px",fontSize:"0.8em"}),a=g.default.getAnimationBase();return g.default.get({layout:l,content:n,animation:a})}static getFixTimeMarker({app:t,ui:e}){const i=I.getSelf({app:t,ui:e}),{top:l,left:n,width:s,height:a,fontSize:c}=I.getFixTimeMarkerStyles({app:t,ui:e});return{...i,position:"fixed",width:s,minWidth:s,height:a,top:l,left:n,fontSize:c,lineHeight:"0.9em"}}}e.default=I},7862:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static get selfBoxShadowOnHighlight(){return`0px 0px 10px rgba(${s.default.themeRGBString},1)`}static get selfBoxShadowOffHighlight(){return`0px 0px 0px rgba(${s.default.themeRGBString},1)`}static getSelf({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"26px":"30px";return{div:a.default.get({layout:a.default.getLayoutInlineFlex({alignItems:"center",justifyContent:"center",width:i,height:i,background:`rgba(${s.default.themeRGBString}, 0.85)`,borderRadius:i,boxShadow:c.selfBoxShadowOffHighlight}),content:a.default.getContentBase({fontSize:"0.8em",textAlign:"center"}),animation:a.default.getAnimationBase({transition:`${s.default.transitionOn}ms`})}),circle:a.default.get({layout:a.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:a.default.getContentBase({textAlign:"center",color:s.default.whiteRGB}),animation:a.default.getAnimationBase()})}}}e.default=c},4381:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(8506)),s=l(i(5549)),a=l(i(9301)),c=l(i(3180)),g=l(i(3817)),I=l(i(1540)),u=l(i(434)),d=l(i(9422)),B=l(i(865)),o=l(i(6869)),F=l(i(2945)),r=l(i(7825)),C=l(i(4289)),U=l(i(9201)),Q=l(i(2423)),b=l(i(4857)),V=l(i(3829)),A=l(i(9723)),x=l(i(8381)),p=l(i(4359)),G=l(i(4528)),R=l(i(6620)),L=l(i(7608)),h=l(i(4909)),m=l(i(9167)),S=l(i(1433)),Z=l(i(7162)),y=l(i(544)),X=l(i(7862));class E{constructor(t){const e=new s.default(t),i=new d.default(t),l=new u.default(t),E=new Z.default(t),f=new S.default(t),W=new R.default(t),N=new V.default(t),T=new x.default(t),Y=new G.default(t),J=new A.default(t),H=new p.default(t),k=new I.default(t),v=new U.default(t),w=new m.default(t),M=new h.default(t),D=new y.default(t),z=new L.default(t),P=new n.default(t),O=new r.default(t),j=new F.default(t),K=new Q.default(t),_=new b.default(t),q=new o.default(t),$=new a.default(t);return{container:e,header:i,footer:l,postsSupporter:E,postsFooter:f,menuFooter:W,detailFooter:new c.default(t),menu:N,ranks:T,ch:Y,menuUsers:J,setChModal:H,extScreen:k,lockMenu:v,posts:w,post:M,timeMarker:D,notif:z,audio:K,video:_,board:P,links:O,link:j,innerNotif:q,detail:$,emotionGraph:new g.default(t),icon:new B.default(t),liveCnt:new X.default(t),loading:new C.default(t)}}static get fontBaseRGB(){return"rgb(90, 90, 90)"}static get darkLightRGB(){return"rgba(0, 0, 0, 0.2)"}static get darkLightRGBA(){return"rgba(0, 0, 0, 0.25)"}static get darkRGB(){return"rgb(0, 0, 0)"}static get darkRGBA(){return"rgba(0, 0, 0, 0.4)"}static get mono160RGB(){return"rgb(160, 160, 160)"}static get mono160RGBA(){return"rgb(160, 160, 160)"}static get mono180RGB(){return"rgb(180, 180, 180)"}static get mono192RGB(){return"rgb(192, 192, 192)"}static get mono200RGB(){return"rgb(200, 200, 200)"}static get mono205RGB(){return"rgb(205, 205, 205)"}static get mono210RGB(){return"rgb(210, 210, 210)"}static get mono211RGB(){return"rgb(211, 211, 211)"}static get mono215RGB(){return"rgb(215, 215, 215)"}static get mono220RGB(){return"rgb(220, 220, 220)"}static get mono225RGB(){return"rgb(225, 225, 225)"}static get mono230RGB(){return"rgb(230, 230, 230)"}static get mono235RGB(){return"rgb(235, 235, 235)"}static get mono240RGB(){return"rgb(240, 240, 240)"}static get mono245RGB(){return"rgb(245, 245, 245)"}static get mono250RGB(){return"rgb(250, 250, 250)"}static get mono251RGB(){return"rgb(251, 251, 251)"}static get mono252RGB(){return"rgb(252, 252, 252)"}static get mono253RGB(){return"rgb(253, 253, 253)"}static get mono254RGB(){return"rgb(254, 254, 254)"}static get mono255RGB(){return"rgb(255, 255, 255)"}static get mono180RGBA(){return"rgba(180, 180, 180, 0.96)"}static get mono192RGBA(){return"rgba(192, 192, 192, 0.96)"}static get mono200RGBA(){return"rgba(200, 200, 200, 0.96)"}static get mono205RGBA(){return"rgba(205, 205, 205, 0.96)"}static get mono210RGBA(){return"rgba(210, 210, 210, 0.96)"}static get mono211RGBA(){return"rgba(211, 211, 211, 0.96)"}static get mono215RGBA(){return"rgba(215, 215, 215, 0.96)"}static get mono220RGBA(){return"rgba(220, 220, 220, 0.96)"}static get mono225RGBA(){return"rgba(225, 225, 225, 0.96)"}static get mono230RGBA(){return"rgba(230, 230, 230, 0.96)"}static get mono235RGBA(){return"rgba(235, 235, 235, 0.96)"}static get mono240RGBA(){return"rgba(240, 240, 240, 0.96)"}static get mono245RGBA(){return"rgba(245, 245, 245, 0.96)"}static get mono250RGBA(){return"rgba(250, 250, 250, 0.96)"}static get mono252RGBA(){return"rgba(252, 252, 252, 0.96)"}static get mono255RGBA(){return"rgba(255, 255, 255, 0.96)"}static get twitterRGB(){return"rgba(76, 160, 235)"}static get twitterRGBA(){return"rgba(76, 160, 235, 0.96)"}static get facebookRGB(){return"rgba(73, 104, 173)"}static get facebookRGBA(){return"rgba(73, 104, 173, 0.96)"}static get emptyLabelStyle(){return{maxWidth:0,maxHeight:0}}static get(t={layout:{},content:{},animation:{}}){return{...t.layout,...t.content,...t.animation}}static getLayoutBase(t={}){return{display:"block",boxSizing:"border-box",overflow:"hidden",width:"inherit",height:"inherit",minWidth:"auto",minHeight:"auto",maxWidth:"inherit",maxHeight:"inherit",padding:0,margin:0,lineHeight:1,listStyle:"none",userSelect:"none",textDecoration:"none",verticalAlign:"baseline",borderCollapse:"collapse",borderSpacing:0,border:0,borderRadius:0,zIndex:1,...t}}static getLayoutGrid(t={}){return{...E.getLayoutBase({display:"grid"}),...t}}static getLayoutFlex(t={}){return{...E.getLayoutBase({display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutInlineFlex(t={}){return{...E.getLayoutBase({display:"inline-flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutTable(t={}){return{...E.getLayoutBase({display:"table"}),...t}}static getLayoutTableRow(t={}){return{...E.getLayoutBase({display:"table-row"}),...t}}static getLayoutTableCol(t={}){return{...E.getLayoutBase({display:"table-cell"}),...t}}static getLayoutFlexChild(t={}){return{...E.getLayoutBase({width:"auto",height:"auto"}),...t}}static getLayoutBlock(t={}){return{...E.getLayoutBase({display:"block"}),...t}}static getLayoutInlineBlock(t={}){return{...E.getLayoutBase({display:"inline-block",align:"center",verticalAlign:"middle"}),...t}}static getLayoutInline(t={}){return{...E.getLayoutBase({display:"inline"}),...t}}static getContentBase(t={}){return{wordWrap:"break-word",whiteSpace:"normal",quotes:"none",content:"none",cursor:"default",...E.getFontBase(),...t}}static getFontBase(t={}){return{letterSpacing:"inherit",lineHeight:"inherit",textAlign:"center",color:E.fontBaseRGB,fontWeight:300,fontSize:"inherit",fontFamily:"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Hiragino Sans,Noto Sans CJK JP,Original Yu Gothic,Yu Gothic,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Sans Emoji",...t}}static getAnimationBase(t={}){return{transition:`${s.default.transitionOff}ms`,transform:"translate3d(0px, 0px, 0px)",...t}}static trimUnit(t){return Number(t.toString().replace(/px|%|vw|vh|ms/,""))}}e.default=E},6552:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7771)),s=l(i(300)),a=l(i(1665));class c{constructor(t,e){this.env=a.default.PRODUCTION,this.type=a.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=n.default.HTTPS_PROTOCOL,this.host=location.host,this.extensionMode=c.extensionModeNone,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:n.default.HTTPS_PROTOCOL,host:location.host,mode:c.extensionModeNone}};const i=c.getInitialRootCh(s.default.env),l=c.getFirstHasSlach(i);this.env=s.default.env,this.id=t,this.hasSlash=e&&void 0!==e.hasSlash?e.hasSlash:c.getLastHasSlach(i),this.ch=e&&e.ch?e.ch:c.getCh(i,l,this.hasSlash),this.protocol=e&&e.protocol?e.protocol:c.getProtocol(),this.host=e&&e.host?e.host:location.host,this.extensionMode=e&&e.mode?e.mode:c.extensionModeNone}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static getInitialRootCh(t){let e=location.href;switch(e=e.replace(`${n.default.HTTPS_PROTOCOL}/`,"").replace(`${n.default.HTTP_PROTOCOL}/`,""),t){case a.default.PRODUCTION:e=e.replace(`/${a.default.PRODUCTION_DOMAIN}`,"/");break;case a.default.LOCALHOST:e=e.replace(`/${a.default.DEVELOPMENT_DOMAIN}`,"/");break;case a.default.DEVELOPMENT:e=e.replace(`:${a.default.PORTS.DEVELOPMENT_CLIENT}`,"").replace(`:${a.default.PORTS.DEVELOPMENT_API}`,"").replace(`:${a.default.PORTS.DEVELOPMENT_TOP}`,""),0===e.indexOf(`/${a.default.DEVELOPMENT_DOMAIN}/`)&&(e=e.replace(`/${a.default.DEVELOPMENT_DOMAIN}`,""))}return e}static getType(t,e){let i=a.default.APP_TYPES.API;return t?a.default.APP_TYPES.EXTENSION:e?a.default.APP_TYPES.PORTAL:i}static getProtocol(){return location.protocol===n.default.HTTPS_PROTOCOL?n.default.HTTPS_PROTOCOL:location.protocol===n.default.HTTP_PROTOCOL?n.default.HTTP_PROTOCOL:n.default.TALKN_PROTOCOL}static getFirstHasSlach(t){return t.startsWith("/")}static getLastHasSlach(t){return t.endsWith("/")}static getCh(t,e,i){let l=t;return l=e?l:`/${l}`,l=i?l:`${l}/`,l=l.replace(/^\/\//,"/"),l}}e.default=c},1223:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const n=l(i(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(n.default.API_TO_SERVER_REQUEST)?t.replace(n.default.API_TO_SERVER_REQUEST,n.default.API_TO_CLIENT_REQUEST):0===t.indexOf(n.default.SERVER_TO_API_EMIT)?t.replace(n.default.SERVER_TO_API_EMIT,n.default.API_TO_CLIENT_EMIT):0===t.indexOf(n.default.SERVER_TO_API_BROADCAST)?t.replace(n.default.SERVER_TO_API_BROADCAST,n.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==i.getType(t)&&"Null"!==i.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return i.getType(t),Object.keys(t).forEach((l=>{let n,s,a=null,c=!1,g=!1,I=()=>{},u=null;if("Object"===i.getType(t[l])){n=t[l];let e=0===Object.keys(n).length;c=n.isAcceptNull?n.isAcceptNull:c,g=n.isAcceptBlank?n.isAcceptBlank:g,a=!e&&n.def?n.def:a,u=e||!n.value&&""!==n.value?n:n.value,u=e&&a?a:u,s=i.getType(u),I=n.valid?n.valid:I}else u=t[l],a=u,c=c,g=g,s=i.getType(u),I=I;const d=t=>{let n=null;const a=`${e}.${l}`,d=u,B=s,o=t,F=i.getType(t);return F!==s&&(n=`SCHEMA_TYPE : ${a} [validType: ${s}][paramsType: ${F}]`),c&&null===t&&(n=`SCHEMA_IS_ACCEPT_NULL :  ${a}`),g&&""===t&&(n=`SCHEMA_IS_ACCEPT_BLANK :  ${a}`),"Function"===i.getType(I)&&I(t)&&(n=`SCHEMA_YOUR_VALID_METHOD :  ${a}`),{pointer:a,validValue:d,validType:B,paramsValue:o,paramsType:F,error:n}},{pointer:B,validValue:o,validType:F,paramsValue:r,paramsType:C,error:U}=d(u);if(null===U)Object.defineProperty(this,l,{get:()=>u,set:t=>{const e=d(u);if(null===U)return u=t,{...this,[l]:u};throw this.validWarn(e),U},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw U;console.warn(U)}})),this}canSet(t,e){try{const i=this[t];if(void 0===i)return!0;if(null===i)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:l}=this[t]=e;return!l&&(this[t]=i,!0)}catch(i){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${i}`}}merge(t={},e=!0){try{const l=i.getType(t),n=Object.keys(t);if(n.length>0){let i={...this};return n.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?i[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===l?(i=Object.values(i),e?new this.constructor(i):i):e?new this.constructor(i):i}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${i.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${i.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((i=>{let l=t[i];"Object"===l.constructor.name&&(l.type||l.default||(l=this.toJSON(l))),l.default||""===l.default||0===l.default?e[i]=l.default:e[i]=l})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=i},7771:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),i=e[0].split("[")[0];let l;return l=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:i,actionType:l,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_REQUEST_TYPE}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_REQUEST_TYPE:e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_RESPONSE_TYPE_BROADCAST}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_RESPONSE_TYPE_EMIT}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_RESPONSE_TYPE_EMIT:s.API_SETUP}static convertExtToClientActionType(t,e){return s.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,i){const l=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:a,requestPrivateState:c}=s.map[l];let g={[s.REDUX_ACTION_KEY]:l};return Object.keys(c).forEach((t=>{g[t]||(g[t]={}),c[t].forEach((l=>{if(!g[t][l]){let s=e[t][l];i&&i[t]&&n.default.isSet(i[t][l])&&(s=i[t][l]),g[t][l]=s}}))})),Object.keys(a).forEach((t=>{g[t]||(g[t]={}),a[t].forEach((e=>{g[t][e]||(g[t][e]=i)}))})),g}static getResponseState(t,e,i){const l=e.type,n=s.map[l][`response${t}State`];let a={[s.REDUX_ACTION_KEY]:l};return Object.keys(n).forEach((t=>{if(!i[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const l=n[t];let s=i[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===l?a={...a,[t]:s}:l.forEach((l=>{if(void 0===i[t][l])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${l}`;a={...a,[t]:{...a[t],[l]:i[t][l]}}}))}})),a}static getRequestActionState(t,e=null,i=null){return"string"==typeof e&&null===i?{type:t}:"object"==typeof e&&"object"==typeof i?{...e,...i,type:t}:"string"==typeof e&&"object"==typeof i?{...i,type:t}:{...e,type:t}}}e.default=s},300:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6894)),s=l(i(8399)),a=l(i(1665)),{PRODUCTION:c,DEVELOPMENT:g,PRODUCTION_DOMAIN:I,DEVELOPMENT_DOMAIN:u,SUB_DOMAINS:d,PORTS:B}=a.default,o=n.default.hasOwnProperty("hostname")?n.default.hostname():"localhost",F=function(t){if("browser"===s.default.title){if(location.href.indexOf(a.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===a.default.PORTS.DEVELOPMENT_CLIENT||t===a.default.PORTS.DEVELOPMENT_API||t===a.default.PORTS.DEVELOPMENT_TOP?a.default.DEVELOPMENT:a.default.LOCALHOST}return a.default.PRODUCTION}return t.indexOf(a.default.AWS_HOST_KEY)>=0?a.default.PRODUCTION:a.default.DEVELOPMENT}(o),r={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},C=F===g,U=F===c?I:u,Q=`${d.WWW}.${U}`,b=`${d.API}.${U}`,V=C?`${U}:${B.DEVELOPMENT_API}/${r.api}`:`${b}/v1`,A=C?`${U}:${B.DEVELOPMENT}/${r.client}`:`${d.CLIENT}.${U}`,x=`${d.DESC}.${U}`,p=`${d.PORTAL}.${U}`,G=`${d.ASSETS}.${U}`,R=`${G}/img/`,L={domain:U,env:F,files:r,hostName:o,apiURL:b,apiAccessURL:V,wwwURL:Q,descURL:x,portalURL:p,clientURL:A,assetsURL:G,autoURL:`${d.AUTO}.${U}`,extURL:`${d.EXT}.${U}`,ownURL:`${d.OWN}.${U}`,newsURL:`${d.NEWS}.${U}`,bannerURL:`${d.BANNER}.${U}`,transactionURL:`${d.TRANSACTION}.${U}`,assetsImgPath:R,assetsIconPath:`${G}/icon/`,assetsJsPath:`${G}/js/`,sessionURL:`${d.SESSION}.${U}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${R}talkn_logo_html.png`,Music:`//${R}talkn_logo_music.png`,Video:`//${R}talkn_logo_video.png`},defaultFavicon:`//${d.ASSETS}.${U}/favicon.ico`};e.default={...L}},1665:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(8399)),s={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:n.default.env.HOSTNAME?n.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_CLIENT:8080,DEVELOPMENT_API:8001,DEVELOPMENT_TOP:8e3,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",TOP:"TOP"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=s},3365:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1025));class s{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(s.inputs).forEach((t=>{s.inputs[t].forEach((e=>{this.belongCoverTypes[e]=t}))})),Object.keys(s.TYPES).forEach((t=>{this.typesArray.push(t);const e=s.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL})),this.model=n.default,this.balances={plain:n.default.Plain.getSaveBalance,russell:n.default.Russell.getSaveBalance,russellSimple:n.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=s.defaultModelKey,e=0,i=!0){let l=0,n={};switch(t){case"plain":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":n={6:5,10:5,20:5,30:5,50:5};break;case"russell":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const a=Object.keys(n),c=a.length-1;for(let t=0;t<c;t++){const i=a[t],s=n[i];if(i>e)break;l=s}return i?l+1:l}static get inputs(){return{[s.TYPES.LIKE.LABEL]:[1,2,3,4,5],[s.TYPES.MONEY.LABEL]:[100],[s.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[s.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[s.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[s.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[s.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[s.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[s.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[s.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=s},557:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3365));class s{static get TYPES(){return[n.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[n.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach(((e,i)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=s},6663:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3365));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach((t=>{this.typesArray.push(s.TYPES[t].LABEL)}))}static get TYPES(){return[n.default.TYPES.SUPRISE,n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.GLAD,n.default.TYPES.SATISFACTION,n.default.TYPES.COMFORT,n.default.TYPES.RELAX,n.default.TYPES.TIRED,n.default.TYPES.SLEEPY,n.default.TYPES.SLACK,n.default.TYPES.BORING,n.default.TYPES.MELANCHOLY,n.default.TYPES.SAD,n.default.TYPES.UNPLEASANT,n.default.TYPES.FRUSTRATED,n.default.TYPES.DISSATISFIED,n.default.TYPES.ANGER,n.default.TYPES.WORRY,n.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[n.default.TYPES.SUPRISE.ID]:1}],1002:[{[n.default.TYPES.SUPRISE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.GLAD.ID]:1}],1402:[{[n.default.TYPES.GLAD.ID]:1}],1501:[{[n.default.TYPES.SATISFACTION.ID]:1}],1502:[{[n.default.TYPES.SATISFACTION.ID]:1}],1503:[{[n.default.TYPES.SATISFACTION.ID]:1}],1504:[{[n.default.TYPES.SATISFACTION.ID]:1}],1601:[{[n.default.TYPES.COMFORT.ID]:1}],1602:[{[n.default.TYPES.COMFORT.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.BORING.ID]:1}],2102:[{[n.default.TYPES.BORING.ID]:1}],2103:[{[n.default.TYPES.BORING.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.SAD.ID]:1}],2302:[{[n.default.TYPES.SAD.ID]:1}],2303:[{[n.default.TYPES.SAD.ID]:1}],2401:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY.ID]:1}],2802:[{[n.default.TYPES.WORRY.ID]:1}],2803:[{[n.default.TYPES.WORRY.ID]:1}],2804:[{[n.default.TYPES.WORRY.ID]:1}],2805:[{[n.default.TYPES.WORRY.ID]:1}],2806:[{[n.default.TYPES.WORRY.ID]:1}],2807:[{[n.default.TYPES.WORRY.ID]:1}],2901:[{[n.default.TYPES.FEAR.ID]:1}],2902:[{[n.default.TYPES.FEAR.ID]:1}],2903:[{[n.default.TYPES.FEAR.ID]:1}],2904:[{[n.default.TYPES.FEAR.ID]:1}],2905:[{[n.default.TYPES.FEAR.ID]:1}],2906:[{[n.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach(((e,i)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=s},3005:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3365));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach((t=>{this.typesArray.push(s.TYPES[t].LABEL)}))}static get TYPES(){return[n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.RELAX,n.default.TYPES.SLACK,n.default.TYPES.MELANCHOLY,n.default.TYPES.ANGER,n.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[n.default.TYPES.EXCITE.ID]:1}],1002:[{[n.default.TYPES.EXCITE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.JOY.ID]:1}],1402:[{[n.default.TYPES.JOY.ID]:1}],1501:[{[n.default.TYPES.JOY.ID]:1}],1502:[{[n.default.TYPES.JOY.ID]:1}],1503:[{[n.default.TYPES.JOY.ID]:1}],1504:[{[n.default.TYPES.JOY.ID]:1}],1601:[{[n.default.TYPES.RELAX.ID]:1}],1602:[{[n.default.TYPES.RELAX.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.SLACK.ID]:1}],2102:[{[n.default.TYPES.SLACK.ID]:1}],2103:[{[n.default.TYPES.SLACK.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[n.default.TYPES.ANGER.ID]:1}],2602:[{[n.default.TYPES.ANGER.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[n.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach(((e,i)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=s},1025:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(557)),s=l(i(6663)),a=l(i(3005));e.default={Plain:n.default,Russell:s.default,RussellSimple:a.default}},6562:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={isUrl:t=>!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*|\\/)?$","i").test(t),getSaveFaviconName:t=>{if(t){const e=t.replace(/\u002f/g,"_");return e.indexOf(".png")>0?e:e+".png"}},trimPx:t=>t.toString().replace("px",""),getUpperPrefix:t=>{let e=t.charAt(0).toUpperCase()+t.slice(1);return e.substring(0,1).toUpperCase()+e.substring(1)}}},8957:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7294)),s=l(i(3935)),a=i(8928),c=l(i(7303));e.default=(t,e=(()=>{}))=>{s.default.render(n.default.createElement(a.Provider,{store:t.window.store},n.default.createElement(c.default,null)),document.querySelector("div#talkn"),e)}},2874:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7213)),s=l(i(6552)),a=l(i(1223)),c=l(i(7771)),g=l(i(300)),I=l(i(1665)),u=l(i(2230)),d=l(i(4817)),B=l(i(5232)),o=l(i(8215)),F=l(i(4603)),r=l(i(7923)),C=l(i(7865)),U=l(i(3669)),Q=l(i(6612)),b=l(i(8957));new(i(8622).default);class V{constructor(t){this.id=I.default.APP_TYPES.PORTAL,this.store=(0,Q.default)(),this.parentHref=location.href,F.default.setupMath(),this.id=t,this.bootOption=new s.default(this.id);const e=new u.default(this.bootOption),i=new r.default(e),l={...e,...i};this.store.dispatch({...l,type:"INIT_CLIENT"}),this.api=this.api.bind(this),this.injectStateToApp=this.injectStateToApp.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise((t=>{this.conned=t,this.wsApi=new n.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage,this.id!==I.default.APP_TYPES.TOP&&this.id!==I.default.APP_TYPES.PORTAL&&this.id!==I.default.APP_TYPES.EXTENSION||(this.ext=new A(this),this.mediaClient=new x(this),this.dom=new p(this))}))}api(t,e={},i){t===V.SET_CALLBACK_METHOD&&i&&(this.callback=i),this.postMessage(t,e)}injectStateToApp(t){this.api("fetchPosts",t),this.api("rank",t)}postMessage(t,e={}){const i={id:e.id?e.id:this.id,type:a.default.CLIENT_TO_WSAPI_TYPE,ioType:c.default.API_SETUP,method:t,params:e};this.mediaClient&&this.mediaClient.wsClientBeforeFilter({method:t,params:e}),this.wsApi.postMessage(i)}onMessage(t){const{currentTarget:e,data:i}=t,{type:l,method:n,ioType:s,params:c,methodBack:g}=i;if(e instanceof Worker&&l===a.default.WSAPI_TO_CLIENT_TYPE){const t=a.default.convertApiToClientActionType(n),{ioType:e,exeMethod:i}=a.default.getMessageTypes(t),l={...c,type:t};if(this.store.dispatch(l),this.exePublicCallback(e,i,l),"WS_CONSTRUCTED"===n&&(this.conned(this),this.id===I.default.APP_TYPES.TOP||this.id===I.default.APP_TYPES.PORTAL)){const t=c.ch?{...this.bootOption,ch:c.ch}:this.bootOption;this.api("tune",t)}this.id===I.default.APP_TYPES.EXTENSION&&this.ext&&this.ext.to(n,e,c),this.mediaClient&&this.mediaClient.wsClientAfterFilter({method:n,params:c,state:l}),this.id!==I.default.APP_TYPES.TOP&&this.id!==I.default.APP_TYPES.PORTAL&&this.id!==I.default.APP_TYPES.EXTENSION||"SERVER_TO_API[EMIT]:tune"===n&&this.injectStateToApp(c)}}onError(t){console.warn(t)}exePublicCallback(t,e,i){this.callback&&(t!==c.default.API_RESPONSE_TYPE_EMIT&&t!==c.default.API_RESPONSE_TYPE_BROADCAST||this.callback(t,e,i))}}e.default=V;class A{constructor(t){this.window=t,this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),window.onmessage=this.onMessage,window.onmessageerror=this.onMessageError}to(t,e,i={}){t.indexOf(c.default.METHOD_COLON)>=0&&(t=t.split(c.default.METHOD_COLON)[1]);const l={id:this.id,type:a.default.CLIENT_TO_EXT_TYPE,ioType:e,method:t,params:i,href:location.href};this.postMessage(l)}toMediaServer(t,e={}){const i={id:this.id,type:a.default.MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE,method:t,params:e};this.postMessage(i)}postMessage(t={}){this.href?window.top.postMessage(t,this.href):window.postMessage(t,location.href)}onMessage(t){const{id:e,href:i,type:l,method:n,ioType:g,params:I,methodBack:d}=t.data;if(l===a.default.EXT_TO_CLIENT_TYPE){switch(n){case a.default.HANDLE_EXT_AND_CLIENT:this.id=e,this.window.bootOption=new s.default(e,I.bootOption),this.href=i;const t=new u.default(this.window.bootOption),l=new r.default({...t,ui:I.ui}),d={...t,...l};this.window.store.dispatch({...d,type:"EXT_INIT_CLIENT"}),this.window.api("tune",this.window.bootOption),this.to(n,g,d);break;default:Boolean(Object.keys(c.default.map).find((t=>t===n)))&&this.window.api(n,I)}this.window.store.dispatch({...I,type:n})}else l===a.default.MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE&&this.window.mediaClient.onMessage(t,this.window.store.getState())}onMessageError(t){console.warn(t)}}class x{constructor(t){this.pointerTime=0,this.isPosting=!1,this.isChangeThread=!1,this.window=t,this.status=x.STATUS_ENDED,this.requestServer=this.requestServer.bind(this),this.onMessage=this.onMessage.bind(this),this.wsClientBeforeFilter=this.wsClientBeforeFilter.bind(this),this.wsClientAfterFilter=this.wsClientAfterFilter.bind(this),this.setPostsTimelines=this.setPostsTimelines.bind(this),this.refrectSelfPost=this.refrectSelfPost.bind(this),this.play=this.play.bind(this),this.stanby=this.stanby.bind(this),this.ended=this.ended.bind(this),this.postsTimeline=[],this.postsTimelineStock=[]}static get STATUS_SEARCH(){return"SEARCH"}static get STATUS_STANBY(){return"STANBY"}static get STATUS_PLAY(){return"PLAY"}static get STATUS_ENDED(){return"ENDED"}static get STATUS_BACK(){return"BACK"}requestServer(t,e={}){this.window.ext.toMediaServer(t,e)}onMessage(t,e){const{params:i}=t.data,{currentTime:l,status:n,ch:s}=i,a=n.toUpperCase();switch(a){case x.STATUS_PLAY:e.thread.ch!==s||this.isChangeThread?this.status!==x.STATUS_BACK&&(e.thread.ch=s,this.isChangeThread=!0,window.talknWindow.dom.onClickCh(e.thread.ch,e.ui,e.thread.hasSlash,"ToMedia")):(this.postsTimeline.length>0||this.postsTimelineStock.length>0)&&(this.status=a,this.play(l))}}wsClientBeforeFilter({method:t,params:e}){return"post"===t&&this.window.store.getState().app.isMediaCh&&(e.app.inputCurrentTime=this.pointerTime>0?this.pointerTime:0),e}wsClientAfterFilter({method:t,params:e,state:i}){switch(t){case"SERVER_TO_API[EMIT]:tune":this.window.mediaClient=new x(this.window),this.requestServer("searching",{id:this.window.ext.id,ch:i.thread.ch,href:location.href,audios:i.thread.audios,videos:i.thread.videos});break;case"SERVER_TO_API[EMIT]:changeThread":this.window.id===I.default.APP_TYPES.TOP||this.window.id===I.default.APP_TYPES.PORTAL?this.requestServer("searching",{id:this.window.ext.id,ch:i.thread.ch,href:location.href,audios:i.thread.audios,videos:i.thread.videos}):"BackToRootCh"===i.ui.clicked&&(this.status=x.STATUS_BACK),this.isChangeThread=!1;break;case"SERVER_TO_API[EMIT]:fetchPosts":this.setPostsTimelines(i);break;case"SERVER_TO_API[BROADCAST]:post":if(i.app.isMediaCh){const t=i.posts[0];t.ch===i.thread.ch&&t.uid===i.user.uid&&this.refrectSelfPost(t)}}}setPostsTimelines({postsTimeline:t,postsTimelineStock:e}){this.postsTimeline=[...t],this.postsTimelineStock=[...e]}refrectSelfPost(t){const e=this.postsTimeline.length;let i=!1;for(let l=0;l<e;l++)t.currentTime<this.postsTimeline[l].currentTime&&(i=!0,this.postsTimeline.splice(l,0,t));i||this.postsTimeline.push(t)}setServerParams(t){this.ch=t.ch,this.status=t.status,this.pointerTime=t.currentTime}searching(){}stanby(){}ended(){const t=Number.MAX_SAFE_INTEGER,e=this.postsTimelineStock.length;for(let i=0;i<e&&this.postsTimelineStock[i]&&this.postsTimelineStock[i].currentTime<=t;i++)this.window.dom.clientAction("NEXT_POSTS_TIMELINE",{postsTimeline:[this.postsTimelineStock[i]]})}play(t=0){if(this.isPosting)return;const e=this.postsTimelineStock.length;if(this.isPosting=!0,this.pointerTime<=t)for(this.pointerTime=t;this.isPosting;)if(0===e)this.isPosting=!1;else{if(!(this.postsTimelineStock[0]&&this.postsTimelineStock[0].currentTime<=t)){this.isPosting=!1;break}{const t=this.postsTimelineStock.shift();this.postsTimeline.push(t),this.window.dom.clientAction("NEXT_POSTS_TIMELINE",{postsTimeline:[t]})}}else{this.requestServer("pause");const e=this.postsTimeline.concat(this.postsTimelineStock),i=e.length;this.pointerTime=t,this.postsTimeline=[],this.postsTimelineStock=[];for(let t=0;t<i;t++){const i=e[t];i.currentTime<=this.pointerTime?this.postsTimeline.push(i):this.postsTimelineStock.push(i)}this.window.dom.clientAction("CLEAR_POSTS_TIMELINE",{postsTimeline:this.postsTimeline,postsTimelineStock:this.postsTimelineStock}),this.requestServer("play")}this.isPosting=!1}}class p extends o.default{constructor(t){super(null),this.id="talkn",this.scrollHeight=0,this.isScrollBottom=!1,this.resizeTimer=null,this.isAnimateScrolling=!1,this.window=t,this.load=this.load.bind(this),this.resize=this.resize.bind(this),this.scroll=this.scroll.bind(this),this.renderTalkn=this.renderTalkn.bind(this),this.loadContainer=this.loadContainer.bind(this),this.updateUiTimeMarker=this.updateUiTimeMarker.bind(this),this.getPostsClientHeight=this.getPostsClientHeight.bind(this),window.onload=this.load,window.onresize=this.resize,window.onscroll=this.scroll}static get resizeInterval(){return 300}static get selectHtml(){return document.querySelector("html")}static get selectBody(){return document.querySelector("body")}static get selectTalkn(){return document.querySelector("div#talkn")}static get selectPosts(){return document.querySelector("[data-component-name=Posts]")}static get selectAllPost(){return document.querySelectorAll("[data-component-name=Post]")}static get selectAllTimeMarkerList(){return document.querySelectorAll("li[data-component-name=TimeMarkerList]")}renderTalkn(){(0,b.default)(this,this.loadContainer)}loadContainer(){this.html=p.selectHtml,this.body=p.selectBody,this.talkn=p.selectTalkn,this.removeTalknLoading()}load(){}resize(t){if(window.talknWindow){const{ui:t}=this.window.store.getState();null===this.resizeTimer&&(this.resizeStartWindow(t),this.resizeTimer=setTimeout((()=>{this.resizeEndWindow(t)}),p.resizeInterval))}}scroll(t){const e=window.scrollY,i=window.innerHeight,l=this.body.scrollHeight;this.onScroll({scrollTop:e,clientHeight:i,scrollHeight:l})}updateUiTimeMarker(t,{app:e,ui:i}){const l=U.default.generate(t,p.selectAllTimeMarkerList,{app:e,ui:i});l.list.length>0&&this.clientAction("ON_SCROLL_UPDATE_TIME_MARKER",{uiTimeMarker:l})}resizeStartWindow(t){t.isTransition=!1,this.clientAction("ON_RESIZE_START_WINDOW",{ui:t})}resizeEndWindow(t){if(t){clearTimeout(this.resizeTimer),this.resizeTimer=null;const e=window.talknWindow.store.getState();let i=!1;t.width!==window.innerWidth&&(t.width=window.innerWidth,i=!0),t.height!==window.innerHeight&&(t.height=window.innerHeight,i=!0),i&&(t.screenSize=C.default.getScreenSize(),t.isTransition=!0,e.ui=t,this.clientAction("ON_RESIZE_END_WINDOW",e))}}animateScrollTo(t=9999999,e=400,i=(()=>{})){if(0===e)window.scrollTo(0,t);else if(!this.isAnimateScrolling){let l=window.scrollY,n=t-l,s=0,a=20;const c=()=>{s+=a;let t=Math.easeInOutQuad(s,l,n,e);screenTop=Math.floor(t),window.scrollTo(0,t),s<e?(this.isAnimateScrolling=!0,setTimeout(c,a)):(this.isAnimateScrolling=!1,i())};c()}}exeGetMore(){const{thread:t,app:e}=this.clientState,i=B.default.getDispPosts(this.clientState).length,l=e.dispThreadType===d.default.dispThreadTypeMulti?"multiPostCnt":"postCnt";g.default.findOnePostCnt<=i&&i<g.default.findOneLimitCnt&&t[l]>g.default.findOnePostCnt&&i<t[l]&&this.api("getMore")}getPostsHeight(){let t=0;return p.selectAllPost.forEach((e=>{t+=e.clientHeight})),t}getPostsClientHeight(){const t=p.selectPosts;return t?t.clientHeight:0}removeTalknLoading(){this.talkn.style.display="initial",this.talkn.style["background-image"]="none",this.talkn.style["animation-name"]="none"}lockWindow(){const t="hidden";return this.html.style.overflow=t,this.body.style.overflow=t,this.talkn.style.overflow=t,window.scrollY}unlockWindow(){const t="inherit";this.html.style.overflow=t,this.body.style.overflow=t,this.talkn.style.overflow=t}}},7303:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7294)),s=i(8928),a=l(i(3841)),c=l(i(8215)),g=l(i(3691)),I=l(i(7851));class u extends c.default{constructor(t){super(t);const{ui:e,thread:i}=t.state;this.state={notifs:[]}}componentDidMount(){this.clientAction("COMPONENT_DID_MOUNTS","Container")}componentDidUpdate(){(0,g.default)(this,"Container")}render(){const{ranks:t}=this.props.state;return console.log(t),n.default.createElement(n.default.Fragment,null,"HOHO")}}e.default=(0,s.connect)(I.default,{...a.default})(u)},2417:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1665)),s=l(i(2874)),a=n.default.APP_TYPES.TOP;window.talknWindow=new s.default(a),window.talknWindow.boot(),window.talknWindow.dom.renderTalkn()},7213:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var l=i(477),n=i.n(l);function s(){return n()('(()=>{var t={5198:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},9954:(t,e)=>{!function(t){"use strict";e.encode=function(e){var s,r=new Uint8Array(e),i=r.length,n="";for(s=0;s<i;s+=3)n+=t[r[s]>>2],n+=t[(3&r[s])<<4|r[s+1]>>4],n+=t[(15&r[s+1])<<2|r[s+2]>>6],n+=t[63&r[s+2]];return i%3==2?n=n.substring(0,n.length-1)+"=":i%3==1&&(n=n.substring(0,n.length-2)+"=="),n},e.decode=function(e){var s,r,i,n,o,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var d=new ArrayBuffer(a),l=new Uint8Array(d);for(s=0;s<c;s+=4)r=t.indexOf(e[s]),i=t.indexOf(e[s+1]),n=t.indexOf(e[s+2]),o=t.indexOf(e[s+3]),l[u++]=r<<2|i>>4,l[u++]=(15&i)<<4|n>>2,l[u++]=(3&n)<<6|63&o;return d}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},1778:t=>{function e(t){if(t)return function(t){for(var s in e.prototype)t[s]=e.prototype[s];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((s=r[i])===e||s.fn===e){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(s){r=0;for(var i=(s=s.slice(0)).length;r<i;++r)s[r].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},9164:t=>{var e=1e3,s=60*e,r=60*s,i=24*r;function n(t,e,s,r){var i=e>=1.5*s;return Math.round(t/s)+" "+r+(i?"s":"")}t.exports=function(t,o){o=o||{};var a,c,u=typeof t;if("string"===u&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var n=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(n){var o=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(t);if("number"===u&&isFinite(t))return o.long?(a=t,(c=Math.abs(a))>=i?n(a,c,i,"day"):c>=r?n(a,c,r,"hour"):c>=s?n(a,c,s,"minute"):c>=e?n(a,c,e,"second"):a+" ms"):function(t){var n=Math.abs(t);return n>=i?Math.round(t/i)+"d":n>=r?Math.round(t/r)+"h":n>=s?Math.round(t/s)+"m":n>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},4510:(t,e,s)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;e.splice(1,0,s,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,s)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=s(76)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},76:(t,e,s)=>{t.exports=function(t){function e(t){let s,i,n,o=null;function a(...t){if(!a.enabled)return;const r=a,i=Number(new Date),n=i-(s||i);r.diff=n,r.prev=s,r.curr=i,s=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let o=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((s,i)=>{if("%%"===s)return"%";o++;const n=e.formatters[i];if("function"==typeof n){const e=t[o];s=n.call(r,e),t.splice(o,1),o--}return s})),e.formatArgs.call(r,t),(r.log||e.log).apply(r,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=r,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(i!==e.namespaces&&(i=e.namespaces,n=e.enabled(t)),n),set:t=>{o=t}}),"function"==typeof e.init&&e.init(a),a}function r(t,s){const r=e(this.namespace+(void 0===s?":":s)+t);return r.log=this.log,r}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let s;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(s=0;s<i;s++)r[s]&&("-"===(t=r[s].replace(/\\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let s,r;for(s=0,r=e.skips.length;s<r;s++)if(e.skips[s].test(t))return!1;for(s=0,r=e.names.length;s<r;s++)if(e.names[s].test(t))return!0;return!1},e.humanize=s(9164),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((s=>{e[s]=t[s]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let s=0;for(let e=0;e<t.length;e++)s=(s<<5)-s+t.charCodeAt(e),s|=0;return e.colors[Math.abs(s)%e.colors.length]},e.enable(e.load()),e}},8583:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},1072:(t,e,s)=>{const r=s(1383);t.exports=(t,e)=>new r(t,e),t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=s(6206),t.exports.transports=s(442),t.exports.parser=s(4113)},1383:(t,e,s)=>{const r=s(442),i=s(1778),n=s(4510)("engine.io-client:socket"),o=s(4113),a=s(7657),c=s(8407);class u extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=a(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=a(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=c.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){n(\'creating transport "%s"\',t);const e=function(t){const e={};for(let s in t)t.hasOwnProperty(s)&&(e[s]=t[s]);return e}(this.opts.query);e.EIO=o.protocol,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return n("options: %j",s),new r[t](s)}open(){let t;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return n("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){n("setting transport %s",t.name),this.transport&&(n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(t){n(\'probing transport "%s"\',t);let e=this.createTransport(t,{probe:1}),s=!1;u.priorWebsocketSuccess=!1;const r=()=>{s||(n(\'probe transport "%s" opened\',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(n(\'probe transport "%s" pong\',t),this.upgrading=!0,this.emit("upgrading",e),!e)return;u.priorWebsocketSuccess="websocket"===e.name,n(\'pausing current transport "%s"\',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(n("changing transport and sending upgrade packet"),l(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emit("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{n(\'probe transport "%s" failed\',t);const s=new Error("probe error");s.transport=e.name,this.emit("upgradeError",s)}})))};function i(){s||(s=!0,l(),e.close(),e=null)}const o=s=>{const r=new Error("probe error: "+s);r.transport=e.name,i(),n(\'probe transport "%s" failed because of error: %s\',t,s),this.emit("upgradeError",r)};function a(){o("transport closed")}function c(){o("socket closed")}function d(t){e&&t.name!==e.name&&(n(\'"%s" works - aborting "%s"\',t.name,e.name),i())}const l=()=>{e.removeListener("open",r),e.removeListener("error",o),e.removeListener("close",a),this.removeListener("close",c),this.removeListener("upgrading",d)};e.once("open",r),e.once("error",o),e.once("close",a),this.once("close",c),this.once("upgrading",d),e.open()}onOpen(){if(n("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){n("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(n(\'socket receive: type "%s", data "%s"\',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else n(\'packet received with socket readyState "%s"\',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const i={type:t,data:e,options:s};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const t=()=>{this.onClose("forced close"),n("socket closing - telling transport to close"),this.transport.close()},e=()=>{this.removeListener("upgrade",e),this.removeListener("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){n("socket error %j",t),u.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(n(\'socket close with reason: "%s"\',t),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const r=t.length;for(;s<r;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}u.priorWebsocketSuccess=!1,u.protocol=o.protocol,t.exports=u},6206:(t,e,s)=>{const r=s(4113),i=s(1778),n=s(4510)("engine.io-client:transport");t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const s=new Error(t);return s.type="TransportError",s.description=e,this.emit("error",s),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState?this.write(t):n("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},442:(t,e,s)=>{const r=s(1526),i=s(453),n=s(4735),o=s(1985);e.polling=function(t){let e,s=!1,o=!1;const a=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),s=t.hostname!==location.hostname||r!==t.port,o=t.secure!==e}if(t.xdomain=s,t.xscheme=o,e=new r(t),"open"in e&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new n(t)},e.websocket=o},4735:(t,e,s)=>{const r=s(3105),i=s(8583),n=/\\n/g,o=/\\\\n/g;let a;t.exports=class extends r{constructor(t){super(t),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length,a.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=t=>{this.onError("jsonp poll error",t)};const e=document.getElementsByTagName("script")[0];e?e.parentNode.insertBefore(t,e):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){let s;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=s,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function r(){i(),e()}this.form.action=this.uri();const i=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(t){this.onError("jsonp polling iframe removal error",t)}try{const t=\'<iframe src="javascript:0" name="\'+this.iframeId+\'">\';s=document.createElement(t)}catch(t){s=document.createElement("iframe"),s.name=this.iframeId,s.src="javascript:0"}s.id=this.iframeId,this.form.appendChild(s),this.iframe=s};i(),t=t.replace(o,"\\\\\\n"),this.area.value=t.replace(n,"\\\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},453:(t,e,s)=>{const r=s(1526),i=s(3105),n=s(1778),{pick:o}=s(7306),a=s(8583),c=s(4510)("engine.io-client:polling-xhr");function u(){}const d=null!=new r({xdomain:!1}).responseType;class l extends n{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=o(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new r(t);try{c("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=()=>{this.onLoad()},e.onerror=()=>{this.onError(e.responseText)}):e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},c("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=l.requestsCount++,l.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete l.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function h(){for(let t in l.requests)l.requests.hasOwnProperty(t)&&l.requests[t].abort()}l.requestsCount=0,l.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",h):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",h,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=d&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new l(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",(t=>{this.onError("xhr post error",t)}))}doPoll(){c("xhr poll");const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t=>{this.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=l},3105:(t,e,s)=>{const r=s(6206),i=s(8407),n=s(4113),o=s(6408),a=s(4510)("engine.io-client:polling");t.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{a("paused"),this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(a("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--t||e()}))),this.writable||(a("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){a("pre-pause writing complete"),--t||e()})))}else e()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){a("polling got data %s",t),n.decodePayload(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose(),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a(\'ignoring poll - transport state "%s"\',this.readyState))}doClose(){const t=()=>{a("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(a("transport open - closing"),t()):(a("transport not open - deferring close"),this.once("open",t))}write(t){this.writable=!1,n.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}}},7894:(t,e,s)=>{const r=s(8583),i="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):t=>setTimeout(t,0);t.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:i}},1985:(t,e,s)=>{const r=s(6206),i=s(4113),n=s(8407),o=s(6408),{pick:a}=s(7306),{WebSocket:c,usingBrowserWebSocket:u,defaultBinaryType:d,nextTick:l}=s(7894),h=s(4510)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends r{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=p?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u&&!p?e?new c(t,e):new c(t):new c(t,e,s)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||d,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],r=e===t.length-1;i.encodePacket(s,this.supportsBinary,(t=>{const e={};!u&&(s.options&&(e.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof t?Buffer.byteLength(t):t.length)<this.opts.perMessageDeflate.threshold&&(e.compress=!1);try{u?this.ws.send(t):this.ws.send(t,e)}catch(t){h("websocket closed before onclose event")}r&&l((()=>{this.writable=!0,this.emit("drain")}))}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||(t.b64=1),t=n.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}check(){return!(!c||"__initialize"in c&&this.name===f.prototype.name)}}t.exports=f},7306:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})},1526:(t,e,s)=>{const r=s(2888),i=s(8583);t.exports=function(t){const e=t.xdomain,s=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!s&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},1450:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const s=Object.create(null);Object.keys(e).forEach((t=>{s[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:s,ERROR_PACKET:{type:"error",data:"parser error"}}},4383:(t,e,s)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:i}=s(1450);let n;"function"==typeof ArrayBuffer&&(n=s(9954));const o=(t,e)=>{if(n){const s=n.decode(t);return a(s,e)}return{base64:!0,data:t}},a=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:a(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:o(t.substring(1),e)}:r[s]?t.length>1?{type:r[s],data:t.substring(1)}:{type:r[s]}:i}},5157:(t,e,s)=>{const{PACKET_TYPES:r}=s(1450),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),n="function"==typeof ArrayBuffer,o=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+t)},s.readAsDataURL(t)};t.exports=({type:t,data:e},s,a)=>{return i&&e instanceof Blob?s?a(e):o(e,a):n&&(e instanceof ArrayBuffer||(c=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?s?a(e instanceof ArrayBuffer?e:e.buffer):o(new Blob([e]),a):a(r[t]+(e||""));var c}},4113:(t,e,s)=>{const r=s(5157),i=s(4383),n=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:(t,e)=>{const s=t.length,i=new Array(s);let o=0;t.forEach(((t,a)=>{r(t,!1,(t=>{i[a]=t,++o===s&&e(i.join(n))}))}))},decodePacket:i,decodePayload:(t,e)=>{const s=t.split(n),r=[];for(let t=0;t<s.length;t++){const n=i(s[t],e);if(r.push(n),"error"===n.type)break}return r}}},2888:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},8407:(t,e)=>{e.encode=function(t){var e="";for(var s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e},e.decode=function(t){for(var e={},s=t.split("&"),r=0,i=s.length;r<i;r++){var n=s[r].split("=");e[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return e}},7657:t=>{var e=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,s=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var r,i,n=t,o=t.indexOf("["),a=t.indexOf("]");-1!=o&&-1!=a&&(t=t.substring(0,o)+t.substring(o,a).replace(/:/g,";")+t.substring(a,t.length));for(var c,u,d=e.exec(t||""),l={},h=14;h--;)l[s[h]]=d[h]||"";return-1!=o&&-1!=a&&(l.source=n,l.host=l.host.substring(1,l.host.length-1).replace(/;/g,":"),l.authority=l.authority.replace("[","").replace("]","").replace(/;/g,":"),l.ipv6uri=!0),l.pathNames=(r=l.path,i=r.replace(/\\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||i.splice(0,1),"/"==r.substr(r.length-1,1)&&i.splice(i.length-1,1),i),l.queryKey=(c=l.query,u={},c.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,s){e&&(u[e]=s)})),u),l}},665:(t,e,s)=>{"use strict";function r(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function i(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,r)}return s}function n(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?i(Object(s),!0).forEach((function(e){r(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function o(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}s.r(e),s.d(e,{__DO_NOT_USE__ActionTypes:()=>u,applyMiddleware:()=>E,bindActionCreators:()=>f,combineReducers:()=>h,compose:()=>T,createStore:()=>l});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",c=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+c(),REPLACE:"@@redux/REPLACE"+c(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+c()}};function d(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,s){var r;if("function"==typeof e&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof e&&void 0===s&&(s=e,e=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(t,e)}if("function"!=typeof t)throw new Error(o(2));var i=t,n=e,c=[],h=c,p=!1;function f(){h===c&&(h=c.slice())}function T(){if(p)throw new Error(o(3));return n}function E(t){if("function"!=typeof t)throw new Error(o(4));if(p)throw new Error(o(5));var e=!0;return f(),h.push(t),function(){if(e){if(p)throw new Error(o(6));e=!1,f();var s=h.indexOf(t);h.splice(s,1),c=null}}}function _(t){if(!d(t))throw new Error(o(7));if(void 0===t.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,n=i(n,t)}finally{p=!1}for(var e=c=h,s=0;s<e.length;s++)(0,e[s])();return t}function m(t){if("function"!=typeof t)throw new Error(o(10));i=t,_({type:u.REPLACE})}function S(){var t,e=E;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(o(11));function s(){t.next&&t.next(T())}return s(),{unsubscribe:e(s)}}})[a]=function(){return this},t}return _({type:u.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:m})[a]=S,r}function h(t){for(var e=Object.keys(t),s={},r=0;r<e.length;r++){var i=e[r];"function"==typeof t[i]&&(s[i]=t[i])}var n,a=Object.keys(s);try{!function(t){Object.keys(t).forEach((function(e){var s=t[e];if(void 0===s(void 0,{type:u.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(t){n=t}return function(t,e){if(void 0===t&&(t={}),n)throw n;for(var r=!1,i={},c=0;c<a.length;c++){var u=a[c],d=s[u],l=t[u],h=d(l,e);if(void 0===h)throw e&&e.type,new Error(o(14));i[u]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(t).length)?i:t}}function p(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return p(t,e);if("object"!=typeof t||null===t)throw new Error(o(16));var s={};for(var r in t){var i=t[r];"function"==typeof i&&(s[r]=p(i,e))}return s}function T(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function E(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return function(){var s=t.apply(void 0,arguments),r=function(){throw new Error(o(15))},i={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=e.map((function(t){return t(i)}));return r=T.apply(void 0,a)(s.dispatch),n(n({},s),{},{dispatch:r})}}}},9995:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const r=s(8511);function i(t,e){if(!t)return t;if(r.isBinary(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let r=0;r<t.length;r++)s[r]=i(t[r],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const r in t)t.hasOwnProperty(r)&&(s[r]=i(t[r],e));return s}return t}function n(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=n(t[s],e);else if("object"==typeof t)for(const s in t)t.hasOwnProperty(s)&&(t[s]=n(t[s],e));return t}e.deconstructPacket=function(t){const e=[],s=t.data,r=t;return r.data=i(s,e),r.attachments=e.length,{packet:r,buffers:e}},e.reconstructPacket=function(t,e){return t.data=n(t.data,e),t.attachments=void 0,t}},9565:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const r=s(1778),i=s(9995),n=s(8511),o=s(4510)("socket.io-parser");var a;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(a=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return o("encoding packet %j",t),t.type!==a.EVENT&&t.type!==a.ACK||!n.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==a.BINARY_EVENT&&t.type!==a.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),o("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),s=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(s),r}};class c extends r{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===a.BINARY_EVENT||e.type===a.BINARY_ACK?(this.reconstructor=new u(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!n.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(r,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){const r=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(r,e)}else s.nsp="/";const r=t.charAt(e+1);if(""!==r&&Number(r)==r){const r=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(r,e+1))}if(t.charAt(++e)){const r=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!c.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",t,s),s}static isPayloadValid(t,e){switch(t){case a.CONNECT:return"object"==typeof e;case a.DISCONNECT:return void 0===e;case a.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=c;class u{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},8511:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),n="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(t){return s&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||n&&t instanceof File}e.isBinary=o,e.hasBinary=function t(e,s){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let s=0,r=e.length;s<r;s++)if(t(e[s]))return!0;return!1}if(o(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const s in e)if(Object.prototype.hasOwnProperty.call(e,s)&&t(e[s]))return!0;return!1}},6408:t=>{"use strict";var e,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},i=0,n=0;function o(t){var e="";do{e=s[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=o(+new Date);return t!==e?(i=0,e=t):t+"."+o(i++)}for(;n<64;n++)r[s[n]]=n;a.encode=o,a.decode=function(t){var e=0;for(n=0;n<t.length;n++)e=64*e+r[t.charAt(n)];return e},t.exports=a},6894:(t,e,s)=>{t.exports=s(6894)},8399:t=>{var e,s,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(s){try{return e.call(null,t,0)}catch(s){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{s="function"==typeof clearTimeout?clearTimeout:n}catch(t){s=n}}();var a,c=[],u=!1,d=-1;function l(){u&&a&&(u=!1,a.length?c=a.concat(c):d=-1,c.length&&h())}function h(){if(!u){var t=o(l);u=!0;for(var e=c.length;e;){for(a=c,c=[];++d<e;)a&&a[d].run();d=-1,e=c.length}a=null,u=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===n||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function f(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)e[s-1]=arguments[s];c.push(new p(t,e)),1!==c.length||u||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5741:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2989)),n=r(s(7771)),o=r(s(300)),a=r(s(1665)),c=r(s(3642)),u=r(s(89)),d=r(s(249)),l=r(s(2230)),h=r(s(9274));class p{constructor(t){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=t,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:n.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(t){return!(!this.stores[t]||!this.ios[this.id]||(this.id=t,0))}exe(t,e){return this[t]&&"function"==typeof this[t]?(this[t](e),!0):!(!this.methods[t]||"function"!=typeof this.methods[t]||(this.methods[t](e),0))}onResponseChAPI(t){const e=(t=>e=>{const s=t(e);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(u.default);this.on(t,e)}offResponseChAPI(t){this.off(t)}getIoParams(t){let e="";return Object.keys(t).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=t[s];e+=`${s}=${encodeURIComponent(r)}&`})),e.replace(/&$/,"")}tune(t){if(!this.use(t.id)){this.id=t.id,this.stores[this.id]=(0,h.default)(),this.stores[this.id].subscribe(this.subscribe);const e=new l.default(t);this.stores[this.id].dispatch({...e,type:"SETUPED_API_STORE"});const s=this.getIoParams(t),r=`${n.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=(0,i.default)(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(t.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(t){const e=t&&t.id?t.id:this.id;return!!this.ios[e]&&(this.ios[e].disconnect(),delete this.ios[e],delete this.stores[e],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:n.default.API_SETUP})}onRequestAPI(){const t=c.default,e=Object.keys(t),s=e.length,r=(t,e)=>(s,r=(()=>{}))=>{const i=this.stores[this.id].getState(),o=n.default.getRequestState(t,i,s),a=n.default.getRequestActionState(t,s),{requestState:c,actionState:u}=e(i,o,a);return this.publicCallbacks[c.type]=r,this.ios[this.id].emit(c.type,c),this.stores[this.id].dispatch(u)};for(let i=0;i<s;i++){const s=e[i],o=s.replace(n.default.API_TO_SERVER_REQUEST,""),a=t[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const t=(t=>e=>{const s=t(e);this.stores[this.id].dispatch(s)})(d.default);this.on(n.default.CATCH_ME_KEY,t)}on(t,e=(()=>{})){this.ios[this.id]._callbacks[`$${t}`]||this.ios[this.id].on(t,e)}off(t){this.ios[this.id]._callbacks[`$${t}`]&&this.ios[this.id].off(t)}subscribe(t){const e=this.stores[this.id].getState(),s=n.default.convertServerToApiIoType(this.id,e.app.actioned);this.exeCallback(e.app.actioned,e),this.webWorker.postMessage(e.app.actioned,{...e,ioType:s})}exeCallback(t,e){const{actionType:s,actionName:r}=n.default.getSequenceActionMap(t);if(r!==n.default.API_BROADCAST_CALLBACK&&s===n.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[r](e,{posts:t,thread:s,uid:i.uid})}if(s===n.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[n.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[n.default.API_BROADCAST_CALLBACK](r,{posts:t,thread:s,uid:i.uid})}}}e.default=p},3642:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771)),n=new(r(s(3365)).default);let o={};Object.keys(i.default.map).forEach((t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,s)=>a[e.type]?a[e.type](t,e,s):{requestState:e,actionState:s}}));const a={post:(t,e,s)=>{const{app:r}=e;return r.isMediaCh&&(r.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},r.inputStampId?Object.keys(n.balances).forEach((s=>{if(n.balances[s]&&t.thread.emotions[s]){const t=n.balances[s](r.inputStampId);t&&t.forEach((t=>{const r=Object.keys(t)[0],i=n.idKeyTypes[r];e.thread.emotions[s]||(e.thread.emotions[s]={}),e.thread.emotions[s][i]||(e.thread.emotions[s][i]=0),e.thread.emotions[s][i]=t[r]}))}})):(s.app={...r},s.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:s}}};e.default=o},89:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return{...t,type:e}}},249:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return{...t,type:e}}},9274:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(665),n=r(s(8267)),o=r(s(9530));e.default=function(t={}){let e=[n.default.updateAction];return(0,i.createStore)(o.default,t,(0,i.applyMiddleware)(...e))}},5406:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1665)),n=r(s(4817));function o(t,e){const{app:s}=t,{storageKey:r}=i.default;if(s.isRootCh){const{postsMulti:e,postsSingle:s}=t}return{state:t,props:e}}function a(t){const{app:e,thread:s,postsTimeline:r}=t,{storageKey:n}=i.default;if(e.isMediaCh){const e=r&&r.length?r.length:0;let s=[],i=[];for(let t=0;t<e;t++)0===r[t].currentTime?s.push(r[t]):i.push(r[t]);t.postsTimeline=s}return t}e.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:s}=t,{rootCh:r}=s,{storageKey:o}=i.default;return s.dispThreadType===n.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:s}=t.app;return{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:s}=t;return s.isMediaCh?{state:t=a(t),props:e}:o(t,e)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},8267:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(5406)),o=r(s(4817)),a=r(s(5232)),c=r(s(5537)),u=r(s(5300));e.default={updateAction:t=>e=>s=>{const r=t.getState();s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&e(s)}};const d={"SERVER_TO_API[EMIT]:tune":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.tuned=e.thread.ch,e.app.detailCh=e.thread.ch,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=o.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,e.thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=o.default.getMediaTypeFromSrc(t)}else e.app.chType=o.default.mediaTagTypeNo;return e},"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>((e={...a.default.getAnyActionPosts(e,t)}).app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.isMediaCh&&(e=n.default.setStoragePostsTimeline(e)),e),"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetTimelineFindId=o.default.defaultOffsetFindId,e.app.offsetMultiFindId=o.default.defaultOffsetFindId,e.app.offsetSingleFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e.app.offsetLogsFindId=o.default.defaultOffsetFindId,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e.posts=new a.default,e.postsMulti=new a.default,e.postsChild=new a.default,e.postsTimeline=new a.default,e.postsSingle=new a.default,e),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>(e.app.tuned=e.thread.ch,e.thread.title=e.thread.serverMetas.title,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[REQUEST]:post":(t,e)=>(e.app.inputStampId=0,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{if(t.thread.ch===e.thread.ch&&e.thread.emotions&&Object.keys(e.thread.emotions).length>0){const s={...e.thread.emotions};e.thread.emotions={...t.thread.emotions},Object.keys(s).forEach((t=>{Object.keys(s[t]).forEach((r=>{e.thread.emotions[t][r]=e.thread.emotions[t][r]+s[t][r]}))})),e.threadDetail={...e.thread}}return e.thread.ch=t.thread.ch,e=a.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,a.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions={...t.threads[e.app.detailCh].emotions},e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread={...t.thread,...e.thread},e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const s=e.thread.ch;e.thread={...t.thread,...e.thread},e.thread.ch=s;const r=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=c.default.getFindTypeFromSrc(r),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.postsChild=[],e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let s=!1,{clientMetas:r}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(r).forEach(((t,n)=>{r[t]&&""!==r[t]&&i[t]!==r[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),s=!0,e.thread.serverMetas[t]=r[t])})),s)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},482:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},1583:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2802));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},5221:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4817));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},6690:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5813));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},9530:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const i=s(665),n=r(s(482)),o=r(s(1583)),a=r(s(5221)),c=r(s(6690)),u=r(s(9202)),d=r(s(7738)),l=r(s(6686)),h=r(s(705)),p=r(s(6706)),f=r(s(4005)),T=r(s(358)),E=r(s(7706)),_=r(s(2543)),m=r(s(5181)),S=r(s(4980)),y=r(s(6086)),g=r(s(6297)),I=r(s(6087)),P=r(s(507));e.reducerFiles={app:a.default,user:P.default,tuneCh:I.default,ranks:_.default,thread:S.default,threads:g.default,threadDetail:y.default,analyze:o.default,bootOption:c.default,setting:m.default,posts:u.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,actioned:n.default},e.default=(0,i.combineReducers)(e.reducerFiles)},9202:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>e.posts?new i.default(e.posts):t},7738:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},6686:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(300)),n=r(s(5232));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let s=[];return t.length+e.postsMulti.length>i.default.findOneLimitCnt?(s=[...e.postsMulti,...t],s.slice(0,i.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},705:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5853));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},6706:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6423));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},4005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3443));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},358:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8059));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},7706:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6301));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},2543:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>{let s=[],r=0;const n=(t,s)=>t.ch===e.app.rootCh||s.ch===e.app.rootCh?0:t.liveCnt<s.liveCnt?1:t.liveCnt>s.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(s=i.default.getDispPosts(e),r=s&&s.length?s.length:0,0===r?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(n);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const s=[],r=e.rank.length;let i=e.rank[0];for(let n=0;n<r;n++){let r=e.rank[n];i=r.updateTime>i.updateTime?r:i,r.ch===t[0].ch&&(r={...r,liveCnt:t[0].liveCnt}),s.push(r)}return s.sort(n),s[0].faicon=i.favicon,s[0].post=i.post,s[0].stampId=i.stampId,s}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},5181:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3871));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},4980:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5537));e.default=(t=new i.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new i.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},6086:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5537));e.default=(t=new i.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},6297:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5300));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},6087:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1960));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new i.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=e;if(s.ch===t.ch)return{...t,liveCnt:s.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const r=e.posts[0];if(r.ch===t.ch)return{...t,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post}}return t}},507:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6548));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},3560:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2802:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=n},4817:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(1960)),o=r(s(5537));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=n.default.defaultFindId,this.offsetSingleFindId=n.default.defaultFindId,this.offsetMultiFindId=n.default.defaultFindId,this.offsetChildFindId=n.default.defaultFindId,this.offsetLogsFindId=n.default.defaultFindId;const s=t.ch?t.ch:"/",r=t.id?t.id:"",c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(s),u=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,d=t.rootCh?t.rootCh:s,l=i.default.isSet(t.isRootCh)?t.isRootCh:d===s,h=t.rootTitle?t.rootTitle:"talkn",p=a.getMediaSrc(t.protocol,s),f=a.getMediaType(p,t),T=t&&t.tuned?t.tuned:"",E=a.getDispThreadType(t,c),_=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,y=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,P=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,A=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,O=t.inputPost?t.inputPost:"",C=!!t.inputStampId&&t.inputStampId,R=t.inputCurrentTime?t.inputCurrentTime:0,b=t.inputSearch?t.inputSearch:"",v=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=t&&t.actioned?t.actioned:"",M=i.default.isSet(t.debug)?t.debug:"";return this.create({id:r,isRootCh:l,isLinkCh:u,isMediaCh:c,rootCh:d,rootTitle:h,chType:f,dispThreadType:E,tuned:T,multistream:_,findType:m,offsetFindId:S,offsetTimelineFindId:y,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:P,offsetLogsFindId:A,inputPost:O,inputStampId:C,inputCurrentTime:R,inputSearch:b,isToggleMultistream:v,actioned:D,debug:M})}static get defaultOffsetFindId(){return n.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),s=e.length;let r="html";for(let i=0;i<s;i++){const s=new RegExp(`.${e[i]}$`);if(t.match(s)){r=a.mediaChTagTypes[e[i]];break}}return r}static validInputPost(t){return!!/\\r\\n$|\\n$|\\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(t)?"ONLY NEW LINE":/^\\s+$/g.test(t)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some((e=>{const s=new RegExp(`.${e}/$|.${e}$`);return t.match(s)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},s,r,i=""){let n="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return n=(t=a.getStepDispThreadType({app:t,ranks:e},s,r,i)).dispThreadType,{app:t,stepTo:`${o} to ${n}`}}static getStepDispThreadType({app:t,ranks:e},s={},r,i){const n=t||{};if(n.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return n.dispThreadType=a.dispThreadTypeTimeline,n.offsetFindId=n.offsetTimelineFindId?n.offsetTimelineFindId:a.defaultOffsetFindId,n.isLinkCh="Links"===i||"findMediaCh"===i||"ToMedia"===i,n.isMediaCh=!0,n;if("BackToRootCh"===i&&(n.isLinkCh=!1),"Links"===i&&e.length>0){if(!e.some((t=>t.ch===r||t.ch===r+"/")))return n.offsetFindId=a.defaultOffsetFindId,n.dispThreadType=a.dispThreadTypeChild,n.isLinkCh=!0,n}return n.rootCh===r?n.multistream?n.dispThreadType=a.dispThreadTypeMulti:n.dispThreadType=a.dispThreadTypeSingle:n.dispThreadType=a.dispThreadTypeChild,n}}e.default=a},5813:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((s=>{e[t[s].name]=t[s].value})),e}}e.default=n},367:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=n},1960:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(300));class o extends i.default{constructor(t){super(),this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const e=t?{...o.defaultValues,...t}:o.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:n.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=o},6036:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5232:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4817)),n=r(s(6036)),o=r(s(5853)),a=r(s(6423)),c=r(s(3443));class u{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:s,postsMulti:r,postsSingle:n,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return s;case i.default.dispThreadTypeMulti:return r;case i.default.dispThreadTypeSingle:return n;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:s,posts:r}=t,a=r&&r.length>0;switch(t.postsMulti=new n.default,t.postsSingle=new o.default,t.postsChild=[],t.postsLogs=[],s.dispThreadType){case i.default.dispThreadTypeTimeline:t=u.getAnyActionPostsTimeline(t,r,e,a);break;case i.default.dispThreadTypeMulti:t.postsMulti=a?r:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=a?r:[];break;case i.default.dispThreadTypeChild:t.postsChild=a?r:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=a?r:[]}return t}static getAnyActionPostsTimeline(t,e,s,r){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new a.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new a.default,t.postsTimelineStock=new c.default,r)){const s=e.length;for(let r=0;r<s;r++)0===e[r].currentTime?t.postsTimeline.push(e[r]):t.postsTimelineStock.push(e[r])}return t}}e.default=u},5853:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6423:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8059:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3871:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},s=t&&t.common?t.common:{},r=t&&t.server?t.server:{};return this.create({client:e,common:s,server:r})}}e.default=n},5537:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(7771)),o=r(s(300)),a=r(s(4817));class c extends i.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=n.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=c.getDefaultFavicon(),this.findType=c.findTypeAll,this.title=c.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=c.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=c.isWindowObj(t)?c.constructorFromWindow(t,e):t;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[c.findTypeHtml]:["text/html"],[c.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[c.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const s=!!e.ch&&e.ch,r=c.getCh(e,s);let n={};return n.ch=r,n.chs=["/"],n.hasSlash=!!e.hasslash&&i.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=c.getDefaultFavicon(),n.findType=c.findTypeAll,s?(n.protocol=c.getProtocol(s),n.host=c.getHost(s),n.chs=s.chs&&s.chs.length>0?s.chs:c.getChs(r)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:c.getChs(r),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=c.getFaviconFromWindow(window)),n.title=c.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.emotions={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=c.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=c.getIsSelfCh("",n.ch),n.createTime="",n.updateTime="",n}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const r="/"===t.slice(-1)?t:t+"/";if("/"!==r){const t=r.split("/"),i=t.length;let n="";for(var s=1;s<i;s++)""!==t[s]&&(n+=t[s],n="/"===n.slice(-1)?n:n+"/",n="/"===n.slice(0,1)?n:"/"+n,e.push(n))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):o.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=c.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",t.document,null,2,null).stringValue,s="http://",r="https://",i=location.host;if(e.indexOf(s)||e.indexOf(r)){const t=s+i+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,s,r={}){let i={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return i.isCreate=c.getStatusCreate(s),i.isRequireUpsert=c.getStatusIsRequireUpsert(t,r,i.isCreate),i.isMultistream=c.getStatusIsMultistream(e),i.isToggleMultistream=c.getStatusIsToggleMultistream(e),i.isMediaCh=c.getStatusIsMediaCh(t.ch),i}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,s=!1){if(!s)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,s=new Date,r=s.getFullYear(),i=s.getMonth(),n=s.getDate(),a=s.getHours();return s.getMinutes(),e<new Date(r,i,n,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=c.findTypes[c.findTypeHtml],s=c.findTypes[c.findTypeMusic],r=c.findTypes[c.findTypeVideo];let i;if(t&&""!==t){let n="";t.indexOf(";")>0&&(n=t.split(";")[0]),(e.includes(t)||e.includes(n))&&(i=c.findTypeHtml),(s.includes(t)||s.includes(n))&&(i=c.findTypeMusic),(r.includes(t)||r.includes(n))&&(i=c.findTypeVideo)}return i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=c},5300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=n},6548:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(1960));class o extends i.default{static get defaultOffsetFindId(){return n.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",s=t&&t.utype?t.utype:"",r=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,n=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,c=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,u=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,d=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,l=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:s,tuned:r,multistreamed:i,actioned:n,offsetFindId:a,offsetSingleFindId:c,offsetMultiFindId:u,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=o},2230:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3560)),n=r(s(2802)),o=r(s(4817)),a=r(s(367)),c=r(s(5232)),u=r(s(6423)),d=r(s(3443)),l=r(s(3364)),h=r(s(5537)),p=r(s(6548));class f{constructor(t,e={}){this.bootOption=t,this.ranks=new l.default,this.menuLogs=new a.default(e.menuLogs),this.posts=new c.default,this.postsMulti=new c.default,this.postsSingle=new c.default,this.postsChild=new c.default,this.postsTimeline=new u.default,this.postsTimelineStock=new d.default,this.postsLogs=new c.default,this.analyze=new n.default,this.thread=new h.default(this.bootOption,e.thread),this.threadDetail=new h.default(this.bootOption,e.thread),this.app=new o.default(f.getAppParams(this.thread,this.bootOption,e)),this.user=new p.default(f.getUserParams(this,e)),this.actionLog=new i.default}static getAppParams(t,e,s){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=f},4039:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1223)),n=r(s(7771)),o=r(s(5741));class a{constructor(t){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=t,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(t,e={},s){const r={id:this.id,type:i.default.WSAPI_TO_CLIENT_TYPE,ioType:n.default.API_SETUP,method:t,params:e,methodBack:s};this.worker.postMessage(r)}onMessage(t){const{id:e,type:s,ioType:r,method:n,params:o}=t.data;s===i.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(n,o)}onMessageError(t){console.warn(t)}}e.default=a,new a(self)},1223:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const i=r(s(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(i.default.API_TO_SERVER_REQUEST)?t.replace(i.default.API_TO_SERVER_REQUEST,i.default.API_TO_CLIENT_REQUEST):0===t.indexOf(i.default.SERVER_TO_API_EMIT)?t.replace(i.default.SERVER_TO_API_EMIT,i.default.API_TO_CLIENT_EMIT):0===t.indexOf(i.default.SERVER_TO_API_BROADCAST)?t.replace(i.default.SERVER_TO_API_BROADCAST,i.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==s.getType(t)&&"Null"!==s.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return s.getType(t),Object.keys(t).forEach((r=>{let i,n,o=null,a=!1,c=!1,u=()=>{},d=null;if("Object"===s.getType(t[r])){i=t[r];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,c=i.isAcceptBlank?i.isAcceptBlank:c,o=!e&&i.def?i.def:o,d=e||!i.value&&""!==i.value?i:i.value,d=e&&o?o:d,n=s.getType(d),u=i.valid?i.valid:u}else d=t[r],o=d,a=a,c=c,n=s.getType(d),u=u;const l=t=>{let i=null;const o=`${e}.${r}`,l=d,h=n,p=t,f=s.getType(t);return f!==n&&(i=`SCHEMA_TYPE : ${o} [validType: ${n}][paramsType: ${f}]`),a&&null===t&&(i=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),c&&""===t&&(i=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(u)&&u(t)&&(i=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:i}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:t=>{const e=l(d);if(null===_)return d=t,{...this,[r]:d};throw this.validWarn(e),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(t,e){try{const s=this[t];if(void 0===s)return!0;if(null===s)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:r}=this[t]=e;return!r&&(this[t]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${s}`}}merge(t={},e=!0){try{const r=s.getType(t),i=Object.keys(t);if(i.length>0){let s={...this};return i.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?s[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===r?(s=Object.values(s),e?new this.constructor(s):s):e?new this.constructor(s):s}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${s.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${s.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((s=>{let r=t[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?e[s]=r.default:e[s]=r})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=s},7771:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(n.METHOD_COLON),s=e[0].split("[")[0];let r;return r=e[0].indexOf(`[${n.API_REQUEST_TYPE}]`)>0?n.API_REQUEST_TYPE:e[0].indexOf(`[${n.API_RESPONSE_TYPE_EMIT}]`)>0?n.API_RESPONSE_TYPE_EMIT:n.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return n.map[t]&&(e.emit=!(Object.keys(n.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(n.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_REQUEST_TYPE}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_REQUEST_TYPE:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_BROADCAST}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_EMIT}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_EMIT:n.API_SETUP}static convertExtToClientActionType(t,e){return n.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(n.API_TO_SERVER_REQUEST)?t.replace(n.API_TO_SERVER_REQUEST,n.API_TO_CLIENT_REQUEST):0===t.indexOf(n.SERVER_TO_API_EMIT)?t.replace(n.SERVER_TO_API_EMIT,n.API_TO_CLIENT_EMIT):0===t.indexOf(n.SERVER_TO_API_BROADCAST)?t.replace(n.SERVER_TO_API_BROADCAST,n.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,s){const r=t.replace(n.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=n.map[r];let c={[n.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((t=>{c[t]||(c[t]={}),a[t].forEach((r=>{if(!c[t][r]){let n=e[t][r];s&&s[t]&&i.default.isSet(s[t][r])&&(n=s[t][r]),c[t][r]=n}}))})),Object.keys(o).forEach((t=>{c[t]||(c[t]={}),o[t].forEach((e=>{c[t][e]||(c[t][e]=s)}))})),c}static getResponseState(t,e,s){const r=e.type,i=n.map[r][`response${t}State`];let o={[n.REDUX_ACTION_KEY]:r};return Object.keys(i).forEach((t=>{if(!s[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const r=i[t];let n=s[t];switch(n.constructor.name){case"model":n=n.toJSON(),delete n._id,delete n.__v}"*"===r?o={...o,[t]:n}:r.forEach((r=>{if(void 0===s[t][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${r}`;o={...o,[t]:{...o[t],[r]:s[t][r]}}}))}})),o}static getRequestActionState(t,e=null,s=null){return"string"==typeof e&&null===s?{type:t}:"object"==typeof e&&"object"==typeof s?{...e,...s,type:t}:"string"==typeof e&&"object"==typeof s?{...s,type:t}:{...e,type:t}}}e.default=n},300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6894)),n=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:c,PRODUCTION_DOMAIN:u,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=i.default.hasOwnProperty("hostname")?i.default.hostname():"localhost",f=function(t){if("browser"===n.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===o.default.PORTS.DEVELOPMENT_CLIENT||t===o.default.PORTS.DEVELOPMENT_API||t===o.default.PORTS.DEVELOPMENT_TOP?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return t.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},E=f===c,_=f===a?u:d,m=`${l.WWW}.${_}`,S=`${l.API}.${_}`,y=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${S}/v1`,g=E?`${_}:${h.DEVELOPMENT}/${T.client}`:`${l.CLIENT}.${_}`,I=`${l.DESC}.${_}`,P=`${l.PORTAL}.${_}`,A=`${l.ASSETS}.${_}`,O=`${A}/img/`,C={domain:_,env:f,files:T,hostName:p,apiURL:S,apiAccessURL:y,wwwURL:m,descURL:I,portalURL:P,clientURL:g,assetsURL:A,autoURL:`${l.AUTO}.${_}`,extURL:`${l.EXT}.${_}`,ownURL:`${l.OWN}.${_}`,newsURL:`${l.NEWS}.${_}`,bannerURL:`${l.BANNER}.${_}`,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:O,assetsIconPath:`${A}/icon/`,assetsJsPath:`${A}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${O}talkn_logo_html.png`,Music:`//${O}talkn_logo_music.png`,Video:`//${O}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};e.default={...C}},1665:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8399)),n={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_CLIENT:8080,DEVELOPMENT_API:8001,DEVELOPMENT_TOP:8e3,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",TOP:"TOP"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=n},3365:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1025));class n{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(n.inputs).forEach((t=>{n.inputs[t].forEach((e=>{this.belongCoverTypes[e]=t}))})),Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(t);const e=n.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL})),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=n.defaultModelKey,e=0,s=!0){let r=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const s=o[t],n=i[s];if(s>e)break;r=n}return s?r+1:r}static get inputs(){return{[n.TYPES.LIKE.LABEL]:[1,2,3,4,5],[n.TYPES.MONEY.LABEL]:[100],[n.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[n.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[n.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[n.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[n.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[n.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[n.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[n.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=n},2703:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},6663:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},3005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},1025:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2703)),n=r(s(6663)),o=r(s(3005));e.default={Plain:i.default,Russell:n.default,RussellSimple:o.default}},2989:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.io=e.Socket=e.Manager=e.protocol=void 0;const r=s(4078),i=s(6412),n=s(4510)("socket.io-client");t.exports=e=a;const o=e.managers={};function a(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const s=r.url(t,e.path||"/socket.io"),a=s.source,c=s.id,u=s.path,d=o[c]&&u in o[c].nsps;let l;return e.forceNew||e["force new connection"]||!1===e.multiplex||d?(n("ignoring socket cache for %s",a),l=new i.Manager(a,e)):(o[c]||(n("new io instance for %s",a),o[c]=new i.Manager(a,e)),l=o[c]),s.query&&!e.query&&(e.query=s.queryKey),l.socket(s.path,e)}e.io=a;var c=s(9565);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return c.protocol}}),e.connect=a;var u=s(6412);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return u.Manager}});var d=s(9088);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return d.Socket}}),e.default=a},6412:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const r=s(1072),i=s(9088),n=s(9565),o=s(3030),a=s(5198),c=s(6437),u=s(4510)("socket.io-client:manager");class d extends c.StrictEventEmitter{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new a({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const s=e.parser||n;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=o.on(e,"open",(function(){s.onopen(),t&&t()})),n=o.on(e,"error",(e=>{u("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;u("connect attempt will timeout after %d",t),0===t&&i();const s=setTimeout((()=>{u("connect attempt timed out after %d",t),i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(n),this}connect(t){return this.open(t)}onopen(){u("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(o.on(t,"ping",this.onping.bind(this)),o.on(t,"data",this.ondata.bind(this)),o.on(t,"error",this.onerror.bind(this)),o.on(t,"close",this.onclose.bind(this)),o.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){this.emitReserved("packet",t)}onerror(t){u("error",t),this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s||(s=new i.Socket(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void u("socket %s is still active, skipping close",t);this._close()}_packet(t){u("writing packet %j",t);const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){u("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const s=setTimeout((()=>{t.skipReconnect||(u("attempting reconnect"),this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(u("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):(u("reconnect success"),t.onreconnect())})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}e.Manager=d},3030:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,s){return t.on(e,s),function(){t.off(e,s)}}},9088:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const r=s(9565),i=s(3030),n=s(6437),o=s(4510)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends n.StrictEventEmitter{constructor(t,e,s){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[i.on(t,"open",this.onopen.bind(this)),i.on(t,"packet",this.onpacket.bind(this)),i.on(t,"error",this.onerror.bind(this)),i.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(a.hasOwnProperty(t))throw new Error(\'"\'+t+\'" is a reserved event name\');e.unshift(t);const s={type:r.PacketType.EVENT,data:e,options:{}};s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(o("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),s.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(s):this.sendBuffer.push(s):o("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){o("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:r.PacketType.CONNECT,data:t})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t){o("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case r.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(t);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(t);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];o("emitting event %j",e),null!=t.id&&(o("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,o("sending ack %j",i),e.packet({type:r.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(o("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):o("bad ack %s",t.id)}onconnect(t){o("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){o("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(o("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}e.Socket=c},6437:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StrictEventEmitter=void 0;const r=s(1778);e.StrictEventEmitter=class extends r{on(t,e){return super.on(t,e),this}once(t,e){return super.once(t,e),this}emit(t,...e){return super.emit(t,...e),this}emitReserved(t,...e){return super.emit(t,...e),this}listeners(t){return super.listeners(t)}}},4078:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const r=s(7657),i=s(4510)("socket.io-client:url");e.url=function(t,e="",s){let n=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\\/\\//.test(t)||(i("protocol-less url %s",t),t=void 0!==s?s.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port+e,n.href=n.protocol+"://"+o+(s&&s.port===n.port?"":":"+n.port),n}}},e={};function s(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r].call(n.exports,n,n.exports,s),n.exports}s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(4039)})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,',"Worker",void 0,i.p+"ws.api.worker.js")}},477:t=>{"use strict";t.exports=function(t,e,i,l){var n=self||window;try{try{var s;try{s=new n.Blob([t])}catch(e){(s=new(n.BlobBuilder||n.WebKitBlobBuilder||n.MozBlobBuilder||n.MSBlobBuilder)).append(t),s=s.getBlob()}var a=n.URL||n.webkitURL,c=a.createObjectURL(s),g=new n[e](c,i);return a.revokeObjectURL(c),g}catch(l){return new n[e]("data:application/javascript,".concat(encodeURIComponent(t)),i)}}catch(t){if(!l)throw Error("Inline worker is not supported");return new n[e](l,i)}}}},e={};function i(l){var n=e[l];if(void 0!==n)return n.exports;var s=e[l]={exports:{}};return t[l].call(s.exports,s,s.exports,i),s.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var l in e)i.o(e,l)&&!i.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:e[l]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var l=e.getElementsByTagName("script");l.length&&(t=l[l.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i(2417)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,