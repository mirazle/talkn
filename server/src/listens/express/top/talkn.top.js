/*! For license information please see talkn.top.js.LICENSE.txt */
(()=>{var t={665:(t,e,i)=>{"use strict";function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function l(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?l(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}i.r(e),i.d(e,{__DO_NOT_USE__ActionTypes:()=>I,applyMiddleware:()=>C,bindActionCreators:()=>B,combineReducers:()=>o,compose:()=>F,createStore:()=>d});var c="function"==typeof Symbol&&Symbol.observable||"@@observable",g=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function d(t,e,i){var n;if("function"==typeof e&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof e&&void 0===i&&(i=e,e=void 0),void 0!==i){if("function"!=typeof i)throw new Error(a(1));return i(d)(t,e)}if("function"!=typeof t)throw new Error(a(2));var l=t,s=e,g=[],o=g,r=!1;function B(){o===g&&(o=g.slice())}function F(){if(r)throw new Error(a(3));return s}function C(t){if("function"!=typeof t)throw new Error(a(4));if(r)throw new Error(a(5));var e=!0;return B(),o.push(t),function(){if(e){if(r)throw new Error(a(6));e=!1,B();var i=o.indexOf(t);o.splice(i,1),g=null}}}function U(t){if(!u(t))throw new Error(a(7));if(void 0===t.type)throw new Error(a(8));if(r)throw new Error(a(9));try{r=!0,s=l(s,t)}finally{r=!1}for(var e=g=o,i=0;i<e.length;i++)(0,e[i])();return t}function Q(t){if("function"!=typeof t)throw new Error(a(10));l=t,U({type:I.REPLACE})}function b(){var t,e=C;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(a(11));function i(){t.next&&t.next(F())}return i(),{unsubscribe:e(i)}}})[c]=function(){return this},t}return U({type:I.INIT}),(n={dispatch:U,subscribe:C,getState:F,replaceReducer:Q})[c]=b,n}function o(t){for(var e=Object.keys(t),i={},n=0;n<e.length;n++){var l=e[n];"function"==typeof t[l]&&(i[l]=t[l])}var s,c=Object.keys(i);try{!function(t){Object.keys(t).forEach((function(e){var i=t[e];if(void 0===i(void 0,{type:I.INIT}))throw new Error(a(12));if(void 0===i(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(i)}catch(t){s=t}return function(t,e){if(void 0===t&&(t={}),s)throw s;for(var n=!1,l={},g=0;g<c.length;g++){var I=c[g],u=i[I],d=t[I],o=u(d,e);if(void 0===o)throw e&&e.type,new Error(a(14));l[I]=o,n=n||o!==d}return(n=n||c.length!==Object.keys(t).length)?l:t}}function r(t,e){return function(){return e(t.apply(this,arguments))}}function B(t,e){if("function"==typeof t)return r(t,e);if("object"!=typeof t||null===t)throw new Error(a(16));var i={};for(var n in t){var l=t[n];"function"==typeof l&&(i[n]=r(l,e))}return i}function F(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(){var i=t.apply(void 0,arguments),n=function(){throw new Error(a(15))},l={getState:i.getState,dispatch:function(){return n.apply(void 0,arguments)}},c=e.map((function(t){return t(l)}));return n=F.apply(void 0,c)(i.dispatch),s(s({},i),{},{dispatch:n})}}}},5303:t=>{"use strict";var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function l(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var a,c,g=l(t),I=1;I<arguments.length;I++){for(var u in a=Object(arguments[I]))i.call(a,u)&&(g[u]=a[u]);if(e){c=e(a);for(var d=0;d<c.length;d++)n.call(a,c[d])&&(g[c[d]]=a[c[d]])}}return g}},9573:t=>{var e,i,n=t.exports={};function l(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===l||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(i){try{return e.call(null,t,0)}catch(i){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:l}catch(t){e=l}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,g=[],I=!1,u=-1;function d(){I&&c&&(I=!1,c.length?g=c.concat(g):u=-1,g.length&&o())}function o(){if(!I){var t=a(d);I=!0;for(var e=g.length;e;){for(c=g,g=[];++u<e;)c&&c[u].run();u=-1,e=g.length}c=null,I=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function r(t,e){this.fun=t,this.array=e}function B(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];g.push(new r(t,e)),1!==g.length||I||a(o)},r.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=B,n.addListener=B,n.once=B,n.off=B,n.removeListener=B,n.removeAllListeners=B,n.emit=B,n.prependListener=B,n.prependOnceListener=B,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},9777:(t,e,i)=>{"use strict";var n=i(5303),l=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,g=60112;e.Suspense=60113;var I=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;l=d("react.element"),s=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),c=d("react.context"),g=d("react.forward_ref"),e.Suspense=d("react.suspense"),I=d("react.memo"),u=d("react.lazy")}var o="function"==typeof Symbol&&Symbol.iterator;function r(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};function C(t,e,i){this.props=t,this.context=e,this.refs=F,this.updater=i||B}function U(){}function Q(t,e,i){this.props=t,this.context=e,this.refs=F,this.updater=i||B}C.prototype.isReactComponent={},C.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(r(85));this.updater.enqueueSetState(this,t,e,"setState")},C.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},U.prototype=C.prototype;var b=Q.prototype=new U;b.constructor=Q,n(b,C.prototype),b.isPureReactComponent=!0;var V={current:null},A=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function G(t,e,i){var n,s={},a=null,c=null;if(null!=e)for(n in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)A.call(e,n)&&!p.hasOwnProperty(n)&&(s[n]=e[n]);var g=arguments.length-2;if(1===g)s.children=i;else if(1<g){for(var I=Array(g),u=0;u<g;u++)I[u]=arguments[u+2];s.children=I}if(t&&t.defaultProps)for(n in g=t.defaultProps)void 0===s[n]&&(s[n]=g[n]);return{$$typeof:l,type:t,key:a,ref:c,props:s,_owner:V.current}}function x(t){return"object"==typeof t&&null!==t&&t.$$typeof===l}var R=/\/+/g;function h(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function m(t,e,i,n,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var g=!1;if(null===t)g=!0;else switch(c){case"string":case"number":g=!0;break;case"object":switch(t.$$typeof){case l:case s:g=!0}}if(g)return a=a(g=t),t=""===n?"."+h(g,0):n,Array.isArray(a)?(i="",null!=t&&(i=t.replace(R,"$&/")+"/"),m(a,e,i,"",(function(t){return t}))):null!=a&&(x(a)&&(a=function(t,e){return{$$typeof:l,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||g&&g.key===a.key?"":(""+a.key).replace(R,"$&/")+"/")+t)),e.push(a)),1;if(g=0,n=""===n?".":n+":",Array.isArray(t))for(var I=0;I<t.length;I++){var u=n+h(c=t[I],I);g+=m(c,e,i,u,a)}else if("function"==typeof(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=o&&t[o]||t["@@iterator"])?t:null}(t)))for(t=u.call(t),I=0;!(c=t.next()).done;)g+=m(c=c.value,e,i,u=n+h(c,I++),a);else if("object"===c)throw e=""+t,Error(r(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return g}function L(t,e,i){if(null==t)return t;var n=[],l=0;return m(t,n,"","",(function(t){return e.call(i,t,l++)})),n}function y(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var S={current:null};function Z(){var t=S.current;if(null===t)throw Error(r(321));return t}var X={ReactCurrentDispatcher:S,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:V,IsSomeRendererActing:{current:!1},assign:n};e.Children={map:L,forEach:function(t,e,i){L(t,(function(){e.apply(this,arguments)}),i)},count:function(t){var e=0;return L(t,(function(){e++})),e},toArray:function(t){return L(t,(function(t){return t}))||[]},only:function(t){if(!x(t))throw Error(r(143));return t}},e.Component=C,e.PureComponent=Q,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=X,e.cloneElement=function(t,e,i){if(null==t)throw Error(r(267,t));var s=n({},t.props),a=t.key,c=t.ref,g=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,g=V.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var I=t.type.defaultProps;for(u in e)A.call(e,u)&&!p.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==I?I[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=i;else if(1<u){I=Array(u);for(var d=0;d<u;d++)I[d]=arguments[d+2];s.children=I}return{$$typeof:l,type:t.type,key:a,ref:c,props:s,_owner:g}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=G,e.createFactory=function(t){var e=G.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:g,render:t}},e.isValidElement=x,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:y}},e.memo=function(t,e){return{$$typeof:I,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return Z().useCallback(t,e)},e.useContext=function(t,e){return Z().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return Z().useEffect(t,e)},e.useImperativeHandle=function(t,e,i){return Z().useImperativeHandle(t,e,i)},e.useLayoutEffect=function(t,e){return Z().useLayoutEffect(t,e)},e.useMemo=function(t,e){return Z().useMemo(t,e)},e.useReducer=function(t,e,i){return Z().useReducer(t,e,i)},e.useRef=function(t){return Z().useRef(t)},e.useState=function(t){return Z().useState(t)},e.version="17.0.2"},4065:(t,e,i)=>{"use strict";t.exports=i(9777)},831:(t,e,i)=>{"use strict";function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function l(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?l(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}i.r(e),i.d(e,{__DO_NOT_USE__ActionTypes:()=>I,applyMiddleware:()=>C,bindActionCreators:()=>B,combineReducers:()=>o,compose:()=>F,createStore:()=>d});var c="function"==typeof Symbol&&Symbol.observable||"@@observable",g=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function d(t,e,i){var n;if("function"==typeof e&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof e&&void 0===i&&(i=e,e=void 0),void 0!==i){if("function"!=typeof i)throw new Error(a(1));return i(d)(t,e)}if("function"!=typeof t)throw new Error(a(2));var l=t,s=e,g=[],o=g,r=!1;function B(){o===g&&(o=g.slice())}function F(){if(r)throw new Error(a(3));return s}function C(t){if("function"!=typeof t)throw new Error(a(4));if(r)throw new Error(a(5));var e=!0;return B(),o.push(t),function(){if(e){if(r)throw new Error(a(6));e=!1,B();var i=o.indexOf(t);o.splice(i,1),g=null}}}function U(t){if(!u(t))throw new Error(a(7));if(void 0===t.type)throw new Error(a(8));if(r)throw new Error(a(9));try{r=!0,s=l(s,t)}finally{r=!1}for(var e=g=o,i=0;i<e.length;i++)(0,e[i])();return t}function Q(t){if("function"!=typeof t)throw new Error(a(10));l=t,U({type:I.REPLACE})}function b(){var t,e=C;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(a(11));function i(){t.next&&t.next(F())}return i(),{unsubscribe:e(i)}}})[c]=function(){return this},t}return U({type:I.INIT}),(n={dispatch:U,subscribe:C,getState:F,replaceReducer:Q})[c]=b,n}function o(t){for(var e=Object.keys(t),i={},n=0;n<e.length;n++){var l=e[n];"function"==typeof t[l]&&(i[l]=t[l])}var s,c=Object.keys(i);try{!function(t){Object.keys(t).forEach((function(e){var i=t[e];if(void 0===i(void 0,{type:I.INIT}))throw new Error(a(12));if(void 0===i(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(i)}catch(t){s=t}return function(t,e){if(void 0===t&&(t={}),s)throw s;for(var n=!1,l={},g=0;g<c.length;g++){var I=c[g],u=i[I],d=t[I],o=u(d,e);if(void 0===o)throw e&&e.type,new Error(a(14));l[I]=o,n=n||o!==d}return(n=n||c.length!==Object.keys(t).length)?l:t}}function r(t,e){return function(){return e(t.apply(this,arguments))}}function B(t,e){if("function"==typeof t)return r(t,e);if("object"!=typeof t||null===t)throw new Error(a(16));var i={};for(var n in t){var l=t[n];"function"==typeof l&&(i[n]=r(l,e))}return i}function F(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(){var i=t.apply(void 0,arguments),n=function(){throw new Error(a(15))},l={getState:i.getState,dispatch:function(){return n.apply(void 0,arguments)}},c=e.map((function(t){return t(l)}));return n=F.apply(void 0,c)(i.dispatch),s(s({},i),{},{dispatch:n})}}}},6894:(t,e,i)=>{t.exports=i(6894)},8399:t=>{var e,i,n=t.exports={};function l(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===l||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(i){try{return e.call(null,t,0)}catch(i){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:l}catch(t){e=l}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,g=[],I=!1,u=-1;function d(){I&&c&&(I=!1,c.length?g=c.concat(g):u=-1,g.length&&o())}function o(){if(!I){var t=a(d);I=!0;for(var e=g.length;e;){for(c=g,g=[];++u<e;)c&&c[u].run();u=-1,e=g.length}c=null,I=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function r(t,e){this.fun=t,this.array=e}function B(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];g.push(new r(t,e)),1!==g.length||I||a(o)},r.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=B,n.addListener=B,n.once=B,n.off=B,n.removeListener=B,n.removeAllListeners=B,n.emit=B,n.prependListener=B,n.prependOnceListener=B,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},8622:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});class n{get mediaSecondInterval(){return 200}get currentTime(){return this.file?Math.floor(10*this.file.currentTime)/10:0}static get STATUS_SEARCH(){return"SEARCH"}static get STATUS_STANBY(){return"STANBY"}static get STATUS_PLAY(){return"PLAY"}static get STATUS_ENDED(){return"ENDED"}static get STATUS_STOP(){return"STOP"}static get PORTAL_KEY(){return"PORTAL"}constructor(){this.init=this.init.bind(this),this.onError=this.onError.bind(this),this.onMessage=this.onMessage.bind(this),this.postMessage=this.postMessage.bind(this),this.setClientParams=this.setClientParams.bind(this),this.setRelationElms=this.setRelationElms.bind(this),this.searching=this.searching.bind(this),this.handleEvents=this.handleEvents.bind(this),this.play=this.play.bind(this),this.pause=this.pause.bind(this),this.ended=this.ended.bind(this),this.log=this.log.bind(this),this.init(),this.setRelationElms(),this.listenMessage()}listenMessage(){window.addEventListener("message",this.onMessage),window.addEventListener("messageerror",this.onError)}setStatus(t,e){this.status=t,this.log("SET STATUS "+e)}init(){this.ch=null,this.setStatus(n.STATUS_STANBY),this.iframes={},this.audios=[],this.videos=[],this.handleEventSrc=[],this.file=null,this.searchingIds={},this.maxSearchingCnt=30,this.playIntervalId=null,this.searchingCnt=0,this.isLog=!1,window.removeEventListener("message",this.onMessage),window.removeEventListener("messageerror",this.onError),Object.keys(this.searchingIds).forEach((t=>{clearInterval(this.searchingIds[t])})),clearInterval(this.playIntervalId)}setRelationElms(t){0===Object.keys(this.iframes).length&&(t===n.PORTAL_KEY?this.iframes[t]={dom:window,params:{id:"",ch:"",href:"",audios:[],videos:[]}}:window.document.querySelectorAll(".talknIframes").forEach((t=>{if(!t.id)throw"Error: Please set iframe id.";this.iframes[t.id]={dom:t,params:{id:"",ch:"",href:"",audios:[],videos:[]}}}))),0===this.videos.length&&(this.videos=window.document.querySelectorAll("video")),0===this.audios.length&&(this.audios=window.document.querySelectorAll("audio"))}setClientParams(t){t&&t.id&&(this.iframes[t.id].params=t)}onMessage(t){if(t.data&&t.data.type&&"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"===t.data.type){const{method:e,params:i}=t.data;this.file&&this.file[e]&&"function"==typeof this.file[e]?this.file[e]():this[e]&&"function"==typeof this[e]&&(this.setRelationElms(i.id),this.setClientParams(i),this[e](i.id))}}onError(t){console.warn(t)}postMessage(){Object.keys(this.iframes).forEach((t=>{const e=this.iframes[t].dom,i=this.iframes[t].params.href,l={ch:this.ch,status:this.status.toLowerCase(),currentTime:this.currentTime};(t===n.PORTAL_KEY?window:e.contentWindow).postMessage({type:"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE",params:l},i)}))}searching(t){if(!t)return!1;this.setStatus(n.STATUS_SEARCH,`start searching ${t}`),this.searchingCnt=0,this.searchingId=null,this.playIntervalId=null;const e=e=>{let i=!1;return this[e].forEach((n=>{i||this.iframes[t].params[e].forEach((t=>{i||n.src.indexOf(t.src)>=0&&(this.handleEventSrc.includes(n.src)||(this.handleEventSrc.push(n.src),this.handleEvents(n),i=!0))}))})),i};this.searchingIds[t]=setInterval((()=>{this.setRelationElms(t);const i=Boolean(this.iframes[t].params.audios.length),l=Boolean(this.iframes[t].params.videos.length);let s=!1;this.searchingCnt<this.maxSearchingCnt?(this.videos.length>0&&l&&(s=e("videos"),s&&this.setStatus(n.STATUS_STANBY,`searched video ${t}`)),this.audios.length>0&&i&&(s=e("audios"),s&&this.setStatus(n.STATUS_STANBY,`searched audio ${t}`))):(clearInterval(this.searchingIds[t]),this.setStatus(n.STATUS_ENDED,`search to ended ${t}`)),this.searchingCnt++}),n.mediaSecondInterval)}handleEvents(t){t.addEventListener("play",this.play),t.addEventListener("pause",this.pause),t.addEventListener("ended",this.ended)}play(t){this.file=t.srcElement,this.ch=this.file.currentSrc.replace("http:/","").replace("https:/","")+"/",this.setStatus(n.STATUS_PLAY,"play"),this.playIntervalId=setInterval((()=>{this.postMessage()}),this.mediaSecondInterval)}pause(t){this.status!==n.STATUS_STANBY&&(this.setStatus(n.STATUS_STANBY,"pause"),clearInterval(this.playIntervalId),this.postMessage())}ended(t){this.setStatus(n.STATUS_ENDED,"ended"),clearInterval(this.playIntervalId),this.postMessage(),Object.keys(this.searchingIds).forEach((t=>{clearInterval(this.searchingIds[t])}))}log(t,e){this.isLog&&console.log(`@@@@@@@@@@@ ${t} ${this.status} [${e}] ch: ${this.ch} time: ${this.pointerTime} @@@`)}}},5735:(t,e,i)=>{"use strict";i.d(e,{Z:()=>c});var n=i(4015),l=i.n(n),s=i(3645),a=i.n(s)()(l());a.push([t.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./node_modules/normalize.css/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,iBAAiB,EAAE,MAAM;EACzB,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,SAAS,EAAE,MAAM;EACjB,iBAAiB,EAAE,MAAM;AAC3B;;AAEA;;;EAGE;;AAEF;EACE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB,EAAE,MAAM;EAC3B,0BAA0B,EAAE,MAAM;EAClC,iCAAiC,EAAE,MAAM;AAC3C;;AAEA;;EAEE;;AAEF;;EAEE,mBAAmB;AACrB;;AAEA;;;EAGE;;AAEF;;;EAGE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;EAEE;;AAEF;;;;EAIE,0BAA0B;AAC5B;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,aAAa;AACf;;AAEA;;EAEE;;AAEF;EACE,aAAa;AACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}]);const c=a},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var l={};if(n)for(var s=0;s<this.length;s++){var a=this[s][0];null!=a&&(l[a]=!0)}for(var c=0;c<t.length;c++){var g=[].concat(t[c]);n&&l[g[0]]||(i&&(g[2]?g[2]="".concat(i," and ").concat(g[2]):g[2]=i),e.push(g))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,l=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=i){var n,l,s=[],a=!0,c=!1;try{for(i=i.call(t);!(a=(n=i.next()).done)&&(s.push(n.value),!e||s.length!==e);a=!0);}catch(t){c=!0,l=t}finally{try{a||null==i.return||i.return()}finally{if(c)throw l}}return s}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[1],a=l[3];if(!a)return s;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),g="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),I="/*# ".concat(g," */"),u=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[s].concat(u).concat([I]).join("\n")}return[s].join("\n")}},9924:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"05ce4977c2c51d72e87d4dc0ae3d779a.png"},3065:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"cee8cd6d71d2b2dabe527de2df785d9d.png"},3415:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"d9f0133107825a266ef82507b592c9ae.png"},9993:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"f0f1aafafdd2ab70a86acec8b1c5f2d7.png"},157:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"a4f29311070cd37b8a91c1539eed5abd.png"},8649:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"a92b5fd114be2c8b2d8f28ca2473ed67.png"},8443:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"923c9d22dde7fee58770a0695efdedb9.png"},2107:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"e87f52c32b39bd6523508349a5d3824d.png"},1708:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"9667275a5c27c650a4351efe2492b01c.png"},4836:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"ff4ee0ae2f88a8a770648b75c1a3f41c.png"},8907:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"d4c35ba478524fdb720752bb2922c423.png"},8397:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"f47d909586b59fa3ab7a400ca22ed6ed.png"},6349:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"3468e0add7c8cc887a7159c3e77f4c11.png"},3282:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"80fc75d23b2f70b54b13c120d065067f.png"},7820:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"b297ee5a80057cb3358b55bd49ae2a99.png"},9567:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"b0e469fdf98fc87b355ddbf12905baff.png"},2736:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"b5967c8836550f5e7dd8f6f9e6d11e81.svg"},8679:(t,e,i)=>{"use strict";var n=i(9864),l={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},s={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function g(t){return n.isMemo(t)?a:c[t.$$typeof]||l}c[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[n.Memo]=a;var I=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,o=Object.getOwnPropertyDescriptor,r=Object.getPrototypeOf,B=Object.prototype;t.exports=function t(e,i,n){if("string"!=typeof i){if(B){var l=r(i);l&&l!==B&&t(e,l,n)}var a=u(i);d&&(a=a.concat(d(i)));for(var c=g(e),F=g(i),C=0;C<a.length;++C){var U=a[C];if(!(s[U]||n&&n[U]||F&&F[U]||c&&c[U])){var Q=o(i,U);try{I(e,U,Q)}catch(t){}}}}return e}},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function l(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var a,c,g=l(t),I=1;I<arguments.length;I++){for(var u in a=Object(arguments[I]))i.call(a,u)&&(g[u]=a[u]);if(e){c=e(a);for(var d=0;d<c.length;d++)n.call(a,c[d])&&(g[c[d]]=a[c[d]])}}return g}},2703:(t,e,i)=>{"use strict";var n=i(414);function l(){}function s(){}s.resetWarningCache=l,t.exports=function(){function t(t,e,i,l,s,a){if(a!==n){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function e(){return t}t.isRequired=t;var i={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:s,resetWarningCache:l};return i.PropTypes=i,i}},5697:(t,e,i)=>{t.exports=i(2703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(t,e,i)=>{"use strict";var n=i(7294),l=i(7418),s=i(3840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(a(227));var c=new Set,g={};function I(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(g[t]=e,t=0;t<e.length;t++)c.add(e[t])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),o=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,r=Object.prototype.hasOwnProperty,B={},F={};function C(t,e,i,n,l,s,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=n,this.attributeNamespace=l,this.mustUseProperty=i,this.propertyName=t,this.type=e,this.sanitizeURL=s,this.removeEmptyString=a}var U={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){U[t]=new C(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];U[e]=new C(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){U[t]=new C(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){U[t]=new C(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){U[t]=new C(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){U[t]=new C(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){U[t]=new C(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){U[t]=new C(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){U[t]=new C(t,5,!1,t.toLowerCase(),null,!1,!1)}));var Q=/[\-:]([a-z])/g;function b(t){return t[1].toUpperCase()}function V(t,e,i,n){var l=U.hasOwnProperty(e)?U[e]:null;(null!==l?0===l.type:!n&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,i,n){if(null==e||function(t,e,i,n){if(null!==i&&0===i.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==i?!i.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,i,n))return!0;if(n)return!1;if(null!==i)switch(i.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,i,l,n)&&(i=null),n||null===l?function(t){return!!r.call(F,t)||!r.call(B,t)&&(o.test(t)?F[t]=!0:(B[t]=!0,!1))}(e)&&(null===i?t.removeAttribute(e):t.setAttribute(e,""+i)):l.mustUseProperty?t[l.propertyName]=null===i?3!==l.type&&"":i:(e=l.attributeName,n=l.attributeNamespace,null===i?t.removeAttribute(e):(i=3===(l=l.type)||4===l&&!0===i?"":""+i,n?t.setAttributeNS(n,e,i):t.setAttribute(e,i))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){U[t]=new C(t,1,!1,t.toLowerCase(),null,!1,!1)})),U.xlinkHref=new C("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){U[t]=new C(t,1,!1,t.toLowerCase(),null,!0,!0)}));var A=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,p=60103,G=60106,x=60107,R=60108,h=60114,m=60109,L=60110,y=60112,S=60113,Z=60120,X=60115,f=60116,E=60121,W=60128,N=60129,T=60130,Y=60131;if("function"==typeof Symbol&&Symbol.for){var J=Symbol.for;p=J("react.element"),G=J("react.portal"),x=J("react.fragment"),R=J("react.strict_mode"),h=J("react.profiler"),m=J("react.provider"),L=J("react.context"),y=J("react.forward_ref"),S=J("react.suspense"),Z=J("react.suspense_list"),X=J("react.memo"),f=J("react.lazy"),E=J("react.block"),J("react.scope"),W=J("react.opaque.id"),N=J("react.debug_trace_mode"),T=J("react.offscreen"),Y=J("react.legacy_hidden")}var H,v="function"==typeof Symbol&&Symbol.iterator;function k(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=v&&t[v]||t["@@iterator"])?t:null}function w(t){if(void 0===H)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);H=e&&e[1]||""}return"\n"+H+t}var M=!1;function z(t,e){if(!t||M)return"";M=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var n=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){n=t}t.call(e.prototype)}else{try{throw Error()}catch(t){n=t}t()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var l=t.stack.split("\n"),s=n.stack.split("\n"),a=l.length-1,c=s.length-1;1<=a&&0<=c&&l[a]!==s[c];)c--;for(;1<=a&&0<=c;a--,c--)if(l[a]!==s[c]){if(1!==a||1!==c)do{if(a--,0>--c||l[a]!==s[c])return"\n"+l[a].replace(" at new "," at ")}while(1<=a&&0<=c);break}}}finally{M=!1,Error.prepareStackTrace=i}return(t=t?t.displayName||t.name:"")?w(t):""}function D(t){switch(t.tag){case 5:return w(t.type);case 16:return w("Lazy");case 13:return w("Suspense");case 19:return w("SuspenseList");case 0:case 2:case 15:return z(t.type,!1);case 11:return z(t.type.render,!1);case 22:return z(t.type._render,!1);case 1:return z(t.type,!0);default:return""}}function P(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case x:return"Fragment";case G:return"Portal";case h:return"Profiler";case R:return"StrictMode";case S:return"Suspense";case Z:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case L:return(t.displayName||"Context")+".Consumer";case m:return(t._context.displayName||"Context")+".Provider";case y:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case X:return P(t.type);case E:return P(t._render);case f:e=t._payload,t=t._init;try{return P(t(e))}catch(t){}}return null}function O(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function j(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function K(t){t._valueTracker||(t._valueTracker=function(t){var e=j(t)?"checked":"value",i=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),n=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==i&&"function"==typeof i.get&&"function"==typeof i.set){var l=i.get,s=i.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return l.call(this)},set:function(t){n=""+t,s.call(this,t)}}),Object.defineProperty(t,e,{enumerable:i.enumerable}),{getValue:function(){return n},setValue:function(t){n=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function _(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var i=e.getValue(),n="";return t&&(n=j(t)?t.checked?"true":"false":t.value),(t=n)!==i&&(e.setValue(t),!0)}function q(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function $(t,e){var i=e.checked;return l({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=i?i:t._wrapperState.initialChecked})}function tt(t,e){var i=null==e.defaultValue?"":e.defaultValue,n=null!=e.checked?e.checked:e.defaultChecked;i=O(null!=e.value?e.value:i),t._wrapperState={initialChecked:n,initialValue:i,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&V(t,"checked",e,!1)}function it(t,e){et(t,e);var i=O(e.value),n=e.type;if(null!=i)"number"===n?(0===i&&""===t.value||t.value!=i)&&(t.value=""+i):t.value!==""+i&&(t.value=""+i);else if("submit"===n||"reset"===n)return void t.removeAttribute("value");e.hasOwnProperty("value")?lt(t,e.type,i):e.hasOwnProperty("defaultValue")&&lt(t,e.type,O(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function nt(t,e,i){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var n=e.type;if(!("submit"!==n&&"reset"!==n||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,i||e===t.value||(t.value=e),t.defaultValue=e}""!==(i=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==i&&(t.name=i)}function lt(t,e,i){"number"===e&&q(t.ownerDocument)===t||(null==i?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+i&&(t.defaultValue=""+i))}function st(t,e){return t=l({children:void 0},e),(e=function(t){var e="";return n.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,i,n){if(t=t.options,e){e={};for(var l=0;l<i.length;l++)e["$"+i[l]]=!0;for(i=0;i<t.length;i++)l=e.hasOwnProperty("$"+t[i].value),t[i].selected!==l&&(t[i].selected=l),l&&n&&(t[i].defaultSelected=!0)}else{for(i=""+O(i),e=null,l=0;l<t.length;l++){if(t[l].value===i)return t[l].selected=!0,void(n&&(t[l].defaultSelected=!0));null!==e||t[l].disabled||(e=t[l])}null!==e&&(e.selected=!0)}}function ct(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return l({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function gt(t,e){var i=e.value;if(null==i){if(i=e.children,e=e.defaultValue,null!=i){if(null!=e)throw Error(a(92));if(Array.isArray(i)){if(!(1>=i.length))throw Error(a(93));i=i[0]}e=i}null==e&&(e=""),i=e}t._wrapperState={initialValue:O(i)}}function It(t,e){var i=O(e.value),n=O(e.defaultValue);null!=i&&((i=""+i)!==t.value&&(t.value=i),null==e.defaultValue&&t.defaultValue!==i&&(t.defaultValue=i)),null!=n&&(t.defaultValue=""+n)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var dt="http://www.w3.org/1999/xhtml";function ot(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function rt(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?ot(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Bt,Ft,Ct=(Ft=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((Bt=Bt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=Bt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,i,n){MSApp.execUnsafeLocalFunction((function(){return Ft(t,e)}))}:Ft);function Ut(t,e){if(e){var i=t.firstChild;if(i&&i===t.lastChild&&3===i.nodeType)return void(i.nodeValue=e)}t.textContent=e}var Qt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},bt=["Webkit","ms","Moz","O"];function Vt(t,e,i){return null==e||"boolean"==typeof e||""===e?"":i||"number"!=typeof e||0===e||Qt.hasOwnProperty(t)&&Qt[t]?(""+e).trim():e+"px"}function At(t,e){for(var i in t=t.style,e)if(e.hasOwnProperty(i)){var n=0===i.indexOf("--"),l=Vt(i,e[i],n);"float"===i&&(i="cssFloat"),n?t.setProperty(i,l):t[i]=l}}Object.keys(Qt).forEach((function(t){bt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),Qt[e]=Qt[t]}))}));var pt=l({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Gt(t,e){if(e){if(pt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function xt(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Rt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var ht=null,mt=null,Lt=null;function yt(t){if(t=$n(t)){if("function"!=typeof ht)throw Error(a(280));var e=t.stateNode;e&&(e=el(e),ht(t.stateNode,t.type,e))}}function St(t){mt?Lt?Lt.push(t):Lt=[t]:mt=t}function Zt(){if(mt){var t=mt,e=Lt;if(Lt=mt=null,yt(t),e)for(t=0;t<e.length;t++)yt(e[t])}}function Xt(t,e){return t(e)}function ft(t,e,i,n,l){return t(e,i,n,l)}function Et(){}var Wt=Xt,Nt=!1,Tt=!1;function Yt(){null===mt&&null===Lt||(Et(),Zt())}function Jt(t,e){var i=t.stateNode;if(null===i)return null;var n=el(i);if(null===n)return null;i=n[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!n;break t;default:t=!1}if(t)return null;if(i&&"function"!=typeof i)throw Error(a(231,e,typeof i));return i}var Ht=!1;if(d)try{var vt={};Object.defineProperty(vt,"passive",{get:function(){Ht=!0}}),window.addEventListener("test",vt,vt),window.removeEventListener("test",vt,vt)}catch(Ft){Ht=!1}function kt(t,e,i,n,l,s,a,c,g){var I=Array.prototype.slice.call(arguments,3);try{e.apply(i,I)}catch(t){this.onError(t)}}var wt=!1,Mt=null,zt=!1,Dt=null,Pt={onError:function(t){wt=!0,Mt=t}};function Ot(t,e,i,n,l,s,a,c,g){wt=!1,Mt=null,kt.apply(Pt,arguments)}function jt(t){var e=t,i=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(i=e.return),t=e.return}while(t)}return 3===e.tag?i:null}function Kt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function _t(t){if(jt(t)!==t)throw Error(a(188))}function qt(t){if(!(t=function(t){var e=t.alternate;if(!e){if(null===(e=jt(t)))throw Error(a(188));return e!==t?null:t}for(var i=t,n=e;;){var l=i.return;if(null===l)break;var s=l.alternate;if(null===s){if(null!==(n=l.return)){i=n;continue}break}if(l.child===s.child){for(s=l.child;s;){if(s===i)return _t(l),t;if(s===n)return _t(l),e;s=s.sibling}throw Error(a(188))}if(i.return!==n.return)i=l,n=s;else{for(var c=!1,g=l.child;g;){if(g===i){c=!0,i=l,n=s;break}if(g===n){c=!0,n=l,i=s;break}g=g.sibling}if(!c){for(g=s.child;g;){if(g===i){c=!0,i=s,n=l;break}if(g===n){c=!0,n=s,i=l;break}g=g.sibling}if(!c)throw Error(a(189))}}if(i.alternate!==n)throw Error(a(190))}if(3!==i.tag)throw Error(a(188));return i.stateNode.current===i?t:e}(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function $t(t,e){for(var i=t.alternate;null!==e;){if(e===t||e===i)return!0;e=e.return}return!1}var te,ee,ie,ne,le=!1,se=[],ae=null,ce=null,ge=null,Ie=new Map,ue=new Map,de=[],oe="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function re(t,e,i,n,l){return{blockedOn:t,domEventName:e,eventSystemFlags:16|i,nativeEvent:l,targetContainers:[n]}}function Be(t,e){switch(t){case"focusin":case"focusout":ae=null;break;case"dragenter":case"dragleave":ce=null;break;case"mouseover":case"mouseout":ge=null;break;case"pointerover":case"pointerout":Ie.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ue.delete(e.pointerId)}}function Fe(t,e,i,n,l,s){return null===t||t.nativeEvent!==s?(t=re(e,i,n,l,s),null!==e&&null!==(e=$n(e))&&ee(e),t):(t.eventSystemFlags|=n,e=t.targetContainers,null!==l&&-1===e.indexOf(l)&&e.push(l),t)}function Ce(t){var e=qn(t.target);if(null!==e){var i=jt(e);if(null!==i)if(13===(e=i.tag)){if(null!==(e=Kt(i)))return t.blockedOn=e,void ne(t.lanePriority,(function(){s.unstable_runWithPriority(t.priority,(function(){ie(i)}))}))}else if(3===e&&i.stateNode.hydrate)return void(t.blockedOn=3===i.tag?i.stateNode.containerInfo:null)}t.blockedOn=null}function Ue(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var i=qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==i)return null!==(e=$n(i))&&ee(e),t.blockedOn=i,!1;e.shift()}return!0}function Qe(t,e,i){Ue(t)&&i.delete(e)}function be(){for(le=!1;0<se.length;){var t=se[0];if(null!==t.blockedOn){null!==(t=$n(t.blockedOn))&&te(t);break}for(var e=t.targetContainers;0<e.length;){var i=qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==i){t.blockedOn=i;break}e.shift()}null===t.blockedOn&&se.shift()}null!==ae&&Ue(ae)&&(ae=null),null!==ce&&Ue(ce)&&(ce=null),null!==ge&&Ue(ge)&&(ge=null),Ie.forEach(Qe),ue.forEach(Qe)}function Ve(t,e){t.blockedOn===e&&(t.blockedOn=null,le||(le=!0,s.unstable_scheduleCallback(s.unstable_NormalPriority,be)))}function Ae(t){function e(e){return Ve(e,t)}if(0<se.length){Ve(se[0],t);for(var i=1;i<se.length;i++){var n=se[i];n.blockedOn===t&&(n.blockedOn=null)}}for(null!==ae&&Ve(ae,t),null!==ce&&Ve(ce,t),null!==ge&&Ve(ge,t),Ie.forEach(e),ue.forEach(e),i=0;i<de.length;i++)(n=de[i]).blockedOn===t&&(n.blockedOn=null);for(;0<de.length&&null===(i=de[0]).blockedOn;)Ce(i),null===i.blockedOn&&de.shift()}function pe(t,e){var i={};return i[t.toLowerCase()]=e.toLowerCase(),i["Webkit"+t]="webkit"+e,i["Moz"+t]="moz"+e,i}var Ge={animationend:pe("Animation","AnimationEnd"),animationiteration:pe("Animation","AnimationIteration"),animationstart:pe("Animation","AnimationStart"),transitionend:pe("Transition","TransitionEnd")},xe={},Re={};function he(t){if(xe[t])return xe[t];if(!Ge[t])return t;var e,i=Ge[t];for(e in i)if(i.hasOwnProperty(e)&&e in Re)return xe[t]=i[e];return t}d&&(Re=document.createElement("div").style,"AnimationEvent"in window||(delete Ge.animationend.animation,delete Ge.animationiteration.animation,delete Ge.animationstart.animation),"TransitionEvent"in window||delete Ge.transitionend.transition);var me=he("animationend"),Le=he("animationiteration"),ye=he("animationstart"),Se=he("transitionend"),Ze=new Map,Xe=new Map,fe=["abort","abort",me,"animationEnd",Le,"animationIteration",ye,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Se,"transitionEnd","waiting","waiting"];function Ee(t,e){for(var i=0;i<t.length;i+=2){var n=t[i],l=t[i+1];l="on"+(l[0].toUpperCase()+l.slice(1)),Xe.set(n,e),Ze.set(n,l),I(l,[n])}}(0,s.unstable_now)();var We=8;function Ne(t){if(0!=(1&t))return We=15,1;if(0!=(2&t))return We=14,2;if(0!=(4&t))return We=13,4;var e=24&t;return 0!==e?(We=12,e):0!=(32&t)?(We=11,32):0!=(e=192&t)?(We=10,e):0!=(256&t)?(We=9,256):0!=(e=3584&t)?(We=8,e):0!=(4096&t)?(We=7,4096):0!=(e=4186112&t)?(We=6,e):0!=(e=62914560&t)?(We=5,e):67108864&t?(We=4,67108864):0!=(134217728&t)?(We=3,134217728):0!=(e=805306368&t)?(We=2,e):0!=(1073741824&t)?(We=1,1073741824):(We=8,t)}function Te(t,e){var i=t.pendingLanes;if(0===i)return We=0;var n=0,l=0,s=t.expiredLanes,a=t.suspendedLanes,c=t.pingedLanes;if(0!==s)n=s,l=We=15;else if(0!=(s=134217727&i)){var g=s&~a;0!==g?(n=Ne(g),l=We):0!=(c&=s)&&(n=Ne(c),l=We)}else 0!=(s=i&~a)?(n=Ne(s),l=We):0!==c&&(n=Ne(c),l=We);if(0===n)return 0;if(n=i&((0>(n=31-we(n))?0:1<<n)<<1)-1,0!==e&&e!==n&&0==(e&a)){if(Ne(e),l<=We)return e;We=l}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=n;0<e;)l=1<<(i=31-we(e)),n|=t[i],e&=~l;return n}function Ye(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Je(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=He(24&~e))?Je(10,e):t;case 10:return 0===(t=He(192&~e))?Je(8,e):t;case 8:return 0===(t=He(3584&~e))&&0===(t=He(4186112&~e))&&(t=512),t;case 2:return 0===(e=He(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function He(t){return t&-t}function ve(t){for(var e=[],i=0;31>i;i++)e.push(t);return e}function ke(t,e,i){t.pendingLanes|=e;var n=e-1;t.suspendedLanes&=n,t.pingedLanes&=n,(t=t.eventTimes)[e=31-we(e)]=i}var we=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Me(t)/ze|0)|0},Me=Math.log,ze=Math.LN2,De=s.unstable_UserBlockingPriority,Pe=s.unstable_runWithPriority,Oe=!0;function je(t,e,i,n){Nt||Et();var l=_e,s=Nt;Nt=!0;try{ft(l,t,e,i,n)}finally{(Nt=s)||Yt()}}function Ke(t,e,i,n){Pe(De,_e.bind(null,t,e,i,n))}function _e(t,e,i,n){var l;if(Oe)if((l=0==(4&e))&&0<se.length&&-1<oe.indexOf(t))t=re(null,t,e,i,n),se.push(t);else{var s=qe(t,e,i,n);if(null===s)l&&Be(t,n);else{if(l){if(-1<oe.indexOf(t))return t=re(s,t,e,i,n),void se.push(t);if(function(t,e,i,n,l){switch(e){case"focusin":return ae=Fe(ae,t,e,i,n,l),!0;case"dragenter":return ce=Fe(ce,t,e,i,n,l),!0;case"mouseover":return ge=Fe(ge,t,e,i,n,l),!0;case"pointerover":var s=l.pointerId;return Ie.set(s,Fe(Ie.get(s)||null,t,e,i,n,l)),!0;case"gotpointercapture":return s=l.pointerId,ue.set(s,Fe(ue.get(s)||null,t,e,i,n,l)),!0}return!1}(s,t,e,i,n))return;Be(t,n)}Zn(t,e,n,null,i)}}}function qe(t,e,i,n){var l=Rt(n);if(null!==(l=qn(l))){var s=jt(l);if(null===s)l=null;else{var a=s.tag;if(13===a){if(null!==(l=Kt(s)))return l;l=null}else if(3===a){if(s.stateNode.hydrate)return 3===s.tag?s.stateNode.containerInfo:null;l=null}else s!==l&&(l=null)}}return Zn(t,e,n,l,i),null}var $e=null,ti=null,ei=null;function ii(){if(ei)return ei;var t,e,i=ti,n=i.length,l="value"in $e?$e.value:$e.textContent,s=l.length;for(t=0;t<n&&i[t]===l[t];t++);var a=n-t;for(e=1;e<=a&&i[n-e]===l[s-e];e++);return ei=l.slice(t,1<e?1-e:void 0)}function ni(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function li(){return!0}function si(){return!1}function ai(t){function e(e,i,n,l,s){for(var a in this._reactName=e,this._targetInst=n,this.type=i,this.nativeEvent=l,this.target=s,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(l):l[a]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?li:si,this.isPropagationStopped=si,this}return l(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=li)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=li)},persist:function(){},isPersistent:li}),e}var ci,gi,Ii,ui={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},di=ai(ui),oi=l({},ui,{view:0,detail:0}),ri=ai(oi),Bi=l({},oi,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Ri,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==Ii&&(Ii&&"mousemove"===t.type?(ci=t.screenX-Ii.screenX,gi=t.screenY-Ii.screenY):gi=ci=0,Ii=t),ci)},movementY:function(t){return"movementY"in t?t.movementY:gi}}),Fi=ai(Bi),Ci=ai(l({},Bi,{dataTransfer:0})),Ui=ai(l({},oi,{relatedTarget:0})),Qi=ai(l({},ui,{animationName:0,elapsedTime:0,pseudoElement:0})),bi=ai(l({},ui,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}})),Vi=ai(l({},ui,{data:0})),Ai={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},pi={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Gi={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xi(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Gi[t])&&!!e[t]}function Ri(){return xi}var hi=ai(l({},oi,{key:function(t){if(t.key){var e=Ai[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=ni(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?pi[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Ri,charCode:function(t){return"keypress"===t.type?ni(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?ni(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}})),mi=ai(l({},Bi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Li=ai(l({},oi,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Ri})),yi=ai(l({},ui,{propertyName:0,elapsedTime:0,pseudoElement:0})),Si=ai(l({},Bi,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0})),Zi=[9,13,27,32],Xi=d&&"CompositionEvent"in window,fi=null;d&&"documentMode"in document&&(fi=document.documentMode);var Ei=d&&"TextEvent"in window&&!fi,Wi=d&&(!Xi||fi&&8<fi&&11>=fi),Ni=String.fromCharCode(32),Ti=!1;function Yi(t,e){switch(t){case"keyup":return-1!==Zi.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ji(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Hi=!1,vi={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ki(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!vi[t.type]:"textarea"===e}function wi(t,e,i,n){St(n),0<(e=fn(e,"onChange")).length&&(i=new di("onChange","change",null,i,n),t.push({event:i,listeners:e}))}var Mi=null,zi=null;function Di(t){Rn(t,0)}function Pi(t){if(_(tl(t)))return t}function Oi(t,e){if("change"===t)return e}var ji=!1;if(d){var Ki;if(d){var _i="oninput"in document;if(!_i){var qi=document.createElement("div");qi.setAttribute("oninput","return;"),_i="function"==typeof qi.oninput}Ki=_i}else Ki=!1;ji=Ki&&(!document.documentMode||9<document.documentMode)}function $i(){Mi&&(Mi.detachEvent("onpropertychange",tn),zi=Mi=null)}function tn(t){if("value"===t.propertyName&&Pi(zi)){var e=[];if(wi(e,zi,t,Rt(t)),t=Di,Nt)t(e);else{Nt=!0;try{Xt(t,e)}finally{Nt=!1,Yt()}}}}function en(t,e,i){"focusin"===t?($i(),zi=i,(Mi=e).attachEvent("onpropertychange",tn)):"focusout"===t&&$i()}function nn(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Pi(zi)}function ln(t,e){if("click"===t)return Pi(e)}function sn(t,e){if("input"===t||"change"===t)return Pi(e)}var an="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},cn=Object.prototype.hasOwnProperty;function gn(t,e){if(an(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),n=Object.keys(e);if(i.length!==n.length)return!1;for(n=0;n<i.length;n++)if(!cn.call(e,i[n])||!an(t[i[n]],e[i[n]]))return!1;return!0}function In(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function un(t,e){var i,n=In(t);for(t=0;n;){if(3===n.nodeType){if(i=t+n.textContent.length,t<=e&&i>=e)return{node:n,offset:e-t};t=i}t:{for(;n;){if(n.nextSibling){n=n.nextSibling;break t}n=n.parentNode}n=void 0}n=In(n)}}function dn(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?dn(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function on(){for(var t=window,e=q();e instanceof t.HTMLIFrameElement;){try{var i="string"==typeof e.contentWindow.location.href}catch(t){i=!1}if(!i)break;e=q((t=e.contentWindow).document)}return e}function rn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var Bn=d&&"documentMode"in document&&11>=document.documentMode,Fn=null,Cn=null,Un=null,Qn=!1;function bn(t,e,i){var n=i.window===i?i.document:9===i.nodeType?i:i.ownerDocument;Qn||null==Fn||Fn!==q(n)||(n="selectionStart"in(n=Fn)&&rn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Un&&gn(Un,n)||(Un=n,0<(n=fn(Cn,"onSelect")).length&&(e=new di("onSelect","select",null,e,i),t.push({event:e,listeners:n}),e.target=Fn)))}Ee("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ee("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ee(fe,2);for(var Vn="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),An=0;An<Vn.length;An++)Xe.set(Vn[An],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),I("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),I("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),I("onBeforeInput",["compositionend","keypress","textInput","paste"]),I("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),I("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),I("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var pn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Gn=new Set("cancel close invalid load scroll toggle".split(" ").concat(pn));function xn(t,e,i){var n=t.type||"unknown-event";t.currentTarget=i,function(t,e,i,n,l,s,c,g,I){if(Ot.apply(this,arguments),wt){if(!wt)throw Error(a(198));var u=Mt;wt=!1,Mt=null,zt||(zt=!0,Dt=u)}}(n,e,void 0,t),t.currentTarget=null}function Rn(t,e){e=0!=(4&e);for(var i=0;i<t.length;i++){var n=t[i],l=n.event;n=n.listeners;t:{var s=void 0;if(e)for(var a=n.length-1;0<=a;a--){var c=n[a],g=c.instance,I=c.currentTarget;if(c=c.listener,g!==s&&l.isPropagationStopped())break t;xn(l,c,I),s=g}else for(a=0;a<n.length;a++){if(g=(c=n[a]).instance,I=c.currentTarget,c=c.listener,g!==s&&l.isPropagationStopped())break t;xn(l,c,I),s=g}}}if(zt)throw t=Dt,zt=!1,Dt=null,t}function hn(t,e){var i=il(e),n=t+"__bubble";i.has(n)||(Sn(e,t,2,!1),i.add(n))}var mn="_reactListening"+Math.random().toString(36).slice(2);function Ln(t){t[mn]||(t[mn]=!0,c.forEach((function(e){Gn.has(e)||yn(e,!1,t,null),yn(e,!0,t,null)})))}function yn(t,e,i,n){var l=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,s=i;if("selectionchange"===t&&9!==i.nodeType&&(s=i.ownerDocument),null!==n&&!e&&Gn.has(t)){if("scroll"!==t)return;l|=2,s=n}var a=il(s),c=t+"__"+(e?"capture":"bubble");a.has(c)||(e&&(l|=4),Sn(s,t,l,e),a.add(c))}function Sn(t,e,i,n){var l=Xe.get(e);switch(void 0===l?2:l){case 0:l=je;break;case 1:l=Ke;break;default:l=_e}i=l.bind(null,e,i,t),l=void 0,!Ht||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(l=!0),n?void 0!==l?t.addEventListener(e,i,{capture:!0,passive:l}):t.addEventListener(e,i,!0):void 0!==l?t.addEventListener(e,i,{passive:l}):t.addEventListener(e,i,!1)}function Zn(t,e,i,n,l){var s=n;if(0==(1&e)&&0==(2&e)&&null!==n)t:for(;;){if(null===n)return;var a=n.tag;if(3===a||4===a){var c=n.stateNode.containerInfo;if(c===l||8===c.nodeType&&c.parentNode===l)break;if(4===a)for(a=n.return;null!==a;){var g=a.tag;if((3===g||4===g)&&((g=a.stateNode.containerInfo)===l||8===g.nodeType&&g.parentNode===l))return;a=a.return}for(;null!==c;){if(null===(a=qn(c)))return;if(5===(g=a.tag)||6===g){n=s=a;continue t}c=c.parentNode}}n=n.return}!function(t,e,i){if(Tt)return t();Tt=!0;try{Wt(t,e,i)}finally{Tt=!1,Yt()}}((function(){var n=s,l=Rt(i),a=[];t:{var c=Ze.get(t);if(void 0!==c){var g=di,I=t;switch(t){case"keypress":if(0===ni(i))break t;case"keydown":case"keyup":g=hi;break;case"focusin":I="focus",g=Ui;break;case"focusout":I="blur",g=Ui;break;case"beforeblur":case"afterblur":g=Ui;break;case"click":if(2===i.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=Fi;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=Ci;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=Li;break;case me:case Le:case ye:g=Qi;break;case Se:g=yi;break;case"scroll":g=ri;break;case"wheel":g=Si;break;case"copy":case"cut":case"paste":g=bi;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=mi}var u=0!=(4&e),d=!u&&"scroll"===t,o=u?null!==c?c+"Capture":null:c;u=[];for(var r,B=n;null!==B;){var F=(r=B).stateNode;if(5===r.tag&&null!==F&&(r=F,null!==o&&null!=(F=Jt(B,o))&&u.push(Xn(B,F,r))),d)break;B=B.return}0<u.length&&(c=new g(c,I,null,i,l),a.push({event:c,listeners:u}))}}if(0==(7&e)){if(g="mouseout"===t||"pointerout"===t,(!(c="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(I=i.relatedTarget||i.fromElement)||!qn(I)&&!I[Kn])&&(g||c)&&(c=l.window===l?l:(c=l.ownerDocument)?c.defaultView||c.parentWindow:window,g?(g=n,null!==(I=(I=i.relatedTarget||i.toElement)?qn(I):null)&&(I!==(d=jt(I))||5!==I.tag&&6!==I.tag)&&(I=null)):(g=null,I=n),g!==I)){if(u=Fi,F="onMouseLeave",o="onMouseEnter",B="mouse","pointerout"!==t&&"pointerover"!==t||(u=mi,F="onPointerLeave",o="onPointerEnter",B="pointer"),d=null==g?c:tl(g),r=null==I?c:tl(I),(c=new u(F,B+"leave",g,i,l)).target=d,c.relatedTarget=r,F=null,qn(l)===n&&((u=new u(o,B+"enter",I,i,l)).target=r,u.relatedTarget=d,F=u),d=F,g&&I)t:{for(o=I,B=0,r=u=g;r;r=En(r))B++;for(r=0,F=o;F;F=En(F))r++;for(;0<B-r;)u=En(u),B--;for(;0<r-B;)o=En(o),r--;for(;B--;){if(u===o||null!==o&&u===o.alternate)break t;u=En(u),o=En(o)}u=null}else u=null;null!==g&&Wn(a,c,g,u,!1),null!==I&&null!==d&&Wn(a,d,I,u,!0)}if("select"===(g=(c=n?tl(n):window).nodeName&&c.nodeName.toLowerCase())||"input"===g&&"file"===c.type)var C=Oi;else if(ki(c))if(ji)C=sn;else{C=nn;var U=en}else(g=c.nodeName)&&"input"===g.toLowerCase()&&("checkbox"===c.type||"radio"===c.type)&&(C=ln);switch(C&&(C=C(t,n))?wi(a,C,i,l):(U&&U(t,c,n),"focusout"===t&&(U=c._wrapperState)&&U.controlled&&"number"===c.type&&lt(c,"number",c.value)),U=n?tl(n):window,t){case"focusin":(ki(U)||"true"===U.contentEditable)&&(Fn=U,Cn=n,Un=null);break;case"focusout":Un=Cn=Fn=null;break;case"mousedown":Qn=!0;break;case"contextmenu":case"mouseup":case"dragend":Qn=!1,bn(a,i,l);break;case"selectionchange":if(Bn)break;case"keydown":case"keyup":bn(a,i,l)}var Q;if(Xi)t:{switch(t){case"compositionstart":var b="onCompositionStart";break t;case"compositionend":b="onCompositionEnd";break t;case"compositionupdate":b="onCompositionUpdate";break t}b=void 0}else Hi?Yi(t,i)&&(b="onCompositionEnd"):"keydown"===t&&229===i.keyCode&&(b="onCompositionStart");b&&(Wi&&"ko"!==i.locale&&(Hi||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hi&&(Q=ii()):(ti="value"in($e=l)?$e.value:$e.textContent,Hi=!0)),0<(U=fn(n,b)).length&&(b=new Vi(b,t,null,i,l),a.push({event:b,listeners:U}),(Q||null!==(Q=Ji(i)))&&(b.data=Q))),(Q=Ei?function(t,e){switch(t){case"compositionend":return Ji(e);case"keypress":return 32!==e.which?null:(Ti=!0,Ni);case"textInput":return(t=e.data)===Ni&&Ti?null:t;default:return null}}(t,i):function(t,e){if(Hi)return"compositionend"===t||!Xi&&Yi(t,e)?(t=ii(),ei=ti=$e=null,Hi=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Wi&&"ko"!==e.locale?null:e.data;default:return null}}(t,i))&&0<(n=fn(n,"onBeforeInput")).length&&(l=new Vi("onBeforeInput","beforeinput",null,i,l),a.push({event:l,listeners:n}),l.data=Q)}Rn(a,e)}))}function Xn(t,e,i){return{instance:t,listener:e,currentTarget:i}}function fn(t,e){for(var i=e+"Capture",n=[];null!==t;){var l=t,s=l.stateNode;5===l.tag&&null!==s&&(l=s,null!=(s=Jt(t,i))&&n.unshift(Xn(t,s,l)),null!=(s=Jt(t,e))&&n.push(Xn(t,s,l))),t=t.return}return n}function En(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function Wn(t,e,i,n,l){for(var s=e._reactName,a=[];null!==i&&i!==n;){var c=i,g=c.alternate,I=c.stateNode;if(null!==g&&g===n)break;5===c.tag&&null!==I&&(c=I,l?null!=(g=Jt(i,s))&&a.unshift(Xn(i,g,c)):l||null!=(g=Jt(i,s))&&a.push(Xn(i,g,c))),i=i.return}0!==a.length&&t.push({event:e,listeners:a})}function Nn(){}var Tn=null,Yn=null;function Jn(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Hn(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var vn="function"==typeof setTimeout?setTimeout:void 0,kn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function Mn(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function zn(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var i=t.data;if("$"===i||"$!"===i||"$?"===i){if(0===e)return t;e--}else"/$"===i&&e++}t=t.previousSibling}return null}var Dn=0,Pn=Math.random().toString(36).slice(2),On="__reactFiber$"+Pn,jn="__reactProps$"+Pn,Kn="__reactContainer$"+Pn,_n="__reactEvents$"+Pn;function qn(t){var e=t[On];if(e)return e;for(var i=t.parentNode;i;){if(e=i[Kn]||i[On]){if(i=e.alternate,null!==e.child||null!==i&&null!==i.child)for(t=zn(t);null!==t;){if(i=t[On])return i;t=zn(t)}return e}i=(t=i).parentNode}return null}function $n(t){return!(t=t[On]||t[Kn])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function tl(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function el(t){return t[jn]||null}function il(t){var e=t[_n];return void 0===e&&(e=t[_n]=new Set),e}var nl=[],ll=-1;function sl(t){return{current:t}}function al(t){0>ll||(t.current=nl[ll],nl[ll]=null,ll--)}function cl(t,e){ll++,nl[ll]=t.current,t.current=e}var gl={},Il=sl(gl),ul=sl(!1),dl=gl;function ol(t,e){var i=t.type.contextTypes;if(!i)return gl;var n=t.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===e)return n.__reactInternalMemoizedMaskedChildContext;var l,s={};for(l in i)s[l]=e[l];return n&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=s),s}function rl(t){return null!=t.childContextTypes}function Bl(){al(ul),al(Il)}function Fl(t,e,i){if(Il.current!==gl)throw Error(a(168));cl(Il,e),cl(ul,i)}function Cl(t,e,i){var n=t.stateNode;if(t=e.childContextTypes,"function"!=typeof n.getChildContext)return i;for(var s in n=n.getChildContext())if(!(s in t))throw Error(a(108,P(e)||"Unknown",s));return l({},i,n)}function Ul(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||gl,dl=Il.current,cl(Il,t),cl(ul,ul.current),!0}function Ql(t,e,i){var n=t.stateNode;if(!n)throw Error(a(169));i?(t=Cl(t,e,dl),n.__reactInternalMemoizedMergedChildContext=t,al(ul),al(Il),cl(Il,t)):al(ul),cl(ul,i)}var bl=null,Vl=null,Al=s.unstable_runWithPriority,pl=s.unstable_scheduleCallback,Gl=s.unstable_cancelCallback,xl=s.unstable_shouldYield,Rl=s.unstable_requestPaint,hl=s.unstable_now,ml=s.unstable_getCurrentPriorityLevel,Ll=s.unstable_ImmediatePriority,yl=s.unstable_UserBlockingPriority,Sl=s.unstable_NormalPriority,Zl=s.unstable_LowPriority,Xl=s.unstable_IdlePriority,fl={},El=void 0!==Rl?Rl:function(){},Wl=null,Nl=null,Tl=!1,Yl=hl(),Jl=1e4>Yl?hl:function(){return hl()-Yl};function Hl(){switch(ml()){case Ll:return 99;case yl:return 98;case Sl:return 97;case Zl:return 96;case Xl:return 95;default:throw Error(a(332))}}function vl(t){switch(t){case 99:return Ll;case 98:return yl;case 97:return Sl;case 96:return Zl;case 95:return Xl;default:throw Error(a(332))}}function kl(t,e){return t=vl(t),Al(t,e)}function wl(t,e,i){return t=vl(t),pl(t,e,i)}function Ml(){if(null!==Nl){var t=Nl;Nl=null,Gl(t)}zl()}function zl(){if(!Tl&&null!==Wl){Tl=!0;var t=0;try{var e=Wl;kl(99,(function(){for(;t<e.length;t++){var i=e[t];do{i=i(!0)}while(null!==i)}})),Wl=null}catch(e){throw null!==Wl&&(Wl=Wl.slice(t+1)),pl(Ll,Ml),e}finally{Tl=!1}}}var Dl=A.ReactCurrentBatchConfig;function Pl(t,e){if(t&&t.defaultProps){for(var i in e=l({},e),t=t.defaultProps)void 0===e[i]&&(e[i]=t[i]);return e}return e}var Ol=sl(null),jl=null,Kl=null,_l=null;function ql(){_l=Kl=jl=null}function $l(t){var e=Ol.current;al(Ol),t.type._context._currentValue=e}function ts(t,e){for(;null!==t;){var i=t.alternate;if((t.childLanes&e)===e){if(null===i||(i.childLanes&e)===e)break;i.childLanes|=e}else t.childLanes|=e,null!==i&&(i.childLanes|=e);t=t.return}}function es(t,e){jl=t,_l=Kl=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Xa=!0),t.firstContext=null)}function is(t,e){if(_l!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(_l=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Kl){if(null===jl)throw Error(a(308));Kl=e,jl.dependencies={lanes:0,firstContext:e,responders:null}}else Kl=Kl.next=e;return t._currentValue}var ns=!1;function ls(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ss(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function as(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function cs(t,e){if(null!==(t=t.updateQueue)){var i=(t=t.shared).pending;null===i?e.next=e:(e.next=i.next,i.next=e),t.pending=e}}function gs(t,e){var i=t.updateQueue,n=t.alternate;if(null!==n&&i===(n=n.updateQueue)){var l=null,s=null;if(null!==(i=i.firstBaseUpdate)){do{var a={eventTime:i.eventTime,lane:i.lane,tag:i.tag,payload:i.payload,callback:i.callback,next:null};null===s?l=s=a:s=s.next=a,i=i.next}while(null!==i);null===s?l=s=e:s=s.next=e}else l=s=e;return i={baseState:n.baseState,firstBaseUpdate:l,lastBaseUpdate:s,shared:n.shared,effects:n.effects},void(t.updateQueue=i)}null===(t=i.lastBaseUpdate)?i.firstBaseUpdate=e:t.next=e,i.lastBaseUpdate=e}function Is(t,e,i,n){var s=t.updateQueue;ns=!1;var a=s.firstBaseUpdate,c=s.lastBaseUpdate,g=s.shared.pending;if(null!==g){s.shared.pending=null;var I=g,u=I.next;I.next=null,null===c?a=u:c.next=u,c=I;var d=t.alternate;if(null!==d){var o=(d=d.updateQueue).lastBaseUpdate;o!==c&&(null===o?d.firstBaseUpdate=u:o.next=u,d.lastBaseUpdate=I)}}if(null!==a){for(o=s.baseState,c=0,d=u=I=null;;){g=a.lane;var r=a.eventTime;if((n&g)===g){null!==d&&(d=d.next={eventTime:r,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var B=t,F=a;switch(g=e,r=i,F.tag){case 1:if("function"==typeof(B=F.payload)){o=B.call(r,o,g);break t}o=B;break t;case 3:B.flags=-4097&B.flags|64;case 0:if(null==(g="function"==typeof(B=F.payload)?B.call(r,o,g):B))break t;o=l({},o,g);break t;case 2:ns=!0}}null!==a.callback&&(t.flags|=32,null===(g=s.effects)?s.effects=[a]:g.push(a))}else r={eventTime:r,lane:g,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=r,I=o):d=d.next=r,c|=g;if(null===(a=a.next)){if(null===(g=s.shared.pending))break;a=g.next,g.next=null,s.lastBaseUpdate=g,s.shared.pending=null}}null===d&&(I=o),s.baseState=I,s.firstBaseUpdate=u,s.lastBaseUpdate=d,Ec|=c,t.lanes=c,t.memoizedState=o}}function us(t,e,i){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var n=t[e],l=n.callback;if(null!==l){if(n.callback=null,n=i,"function"!=typeof l)throw Error(a(191,l));l.call(n)}}}var ds=(new n.Component).refs;function os(t,e,i,n){i=null==(i=i(n,e=t.memoizedState))?e:l({},e,i),t.memoizedState=i,0===t.lanes&&(t.updateQueue.baseState=i)}var rs={isMounted:function(t){return!!(t=t._reactInternals)&&jt(t)===t},enqueueSetState:function(t,e,i){t=t._reactInternals;var n=sg(),l=ag(t),s=as(n,l);s.payload=e,null!=i&&(s.callback=i),cs(t,s),cg(t,l,n)},enqueueReplaceState:function(t,e,i){t=t._reactInternals;var n=sg(),l=ag(t),s=as(n,l);s.tag=1,s.payload=e,null!=i&&(s.callback=i),cs(t,s),cg(t,l,n)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var i=sg(),n=ag(t),l=as(i,n);l.tag=2,null!=e&&(l.callback=e),cs(t,l),cg(t,n,i)}};function Bs(t,e,i,n,l,s,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(n,s,a):!(e.prototype&&e.prototype.isPureReactComponent&&gn(i,n)&&gn(l,s))}function Fs(t,e,i){var n=!1,l=gl,s=e.contextType;return"object"==typeof s&&null!==s?s=is(s):(l=rl(e)?dl:Il.current,s=(n=null!=(n=e.contextTypes))?ol(t,l):gl),e=new e(i,s),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=rs,t.stateNode=e,e._reactInternals=t,n&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=l,t.__reactInternalMemoizedMaskedChildContext=s),e}function Cs(t,e,i,n){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(i,n),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(i,n),e.state!==t&&rs.enqueueReplaceState(e,e.state,null)}function Us(t,e,i,n){var l=t.stateNode;l.props=i,l.state=t.memoizedState,l.refs=ds,ls(t);var s=e.contextType;"object"==typeof s&&null!==s?l.context=is(s):(s=rl(e)?dl:Il.current,l.context=ol(t,s)),Is(t,i,l,n),l.state=t.memoizedState,"function"==typeof(s=e.getDerivedStateFromProps)&&(os(t,e,s,i),l.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(e=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),e!==l.state&&rs.enqueueReplaceState(l,l.state,null),Is(t,i,l,n),l.state=t.memoizedState),"function"==typeof l.componentDidMount&&(t.flags|=4)}var Qs=Array.isArray;function bs(t,e,i){if(null!==(t=i.ref)&&"function"!=typeof t&&"object"!=typeof t){if(i._owner){if(i=i._owner){if(1!==i.tag)throw Error(a(309));var n=i.stateNode}if(!n)throw Error(a(147,t));var l=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===l?e.ref:((e=function(t){var e=n.refs;e===ds&&(e=n.refs={}),null===t?delete e[l]:e[l]=t})._stringRef=l,e)}if("string"!=typeof t)throw Error(a(284));if(!i._owner)throw Error(a(290,t))}return t}function Vs(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function As(t){function e(e,i){if(t){var n=e.lastEffect;null!==n?(n.nextEffect=i,e.lastEffect=i):e.firstEffect=e.lastEffect=i,i.nextEffect=null,i.flags=8}}function i(i,n){if(!t)return null;for(;null!==n;)e(i,n),n=n.sibling;return null}function n(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function l(t,e){return(t=Jg(t,e)).index=0,t.sibling=null,t}function s(e,i,n){return e.index=n,t?null!==(n=e.alternate)?(n=n.index)<i?(e.flags=2,i):n:(e.flags=2,i):i}function c(e){return t&&null===e.alternate&&(e.flags=2),e}function g(t,e,i,n){return null===e||6!==e.tag?((e=wg(i,t.mode,n)).return=t,e):((e=l(e,i)).return=t,e)}function I(t,e,i,n){return null!==e&&e.elementType===i.type?((n=l(e,i.props)).ref=bs(t,e,i),n.return=t,n):((n=Hg(i.type,i.key,i.props,null,t.mode,n)).ref=bs(t,e,i),n.return=t,n)}function u(t,e,i,n){return null===e||4!==e.tag||e.stateNode.containerInfo!==i.containerInfo||e.stateNode.implementation!==i.implementation?((e=Mg(i,t.mode,n)).return=t,e):((e=l(e,i.children||[])).return=t,e)}function d(t,e,i,n,s){return null===e||7!==e.tag?((e=vg(i,t.mode,n,s)).return=t,e):((e=l(e,i)).return=t,e)}function o(t,e,i){if("string"==typeof e||"number"==typeof e)return(e=wg(""+e,t.mode,i)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case p:return(i=Hg(e.type,e.key,e.props,null,t.mode,i)).ref=bs(t,null,e),i.return=t,i;case G:return(e=Mg(e,t.mode,i)).return=t,e}if(Qs(e)||k(e))return(e=vg(e,t.mode,i,null)).return=t,e;Vs(t,e)}return null}function r(t,e,i,n){var l=null!==e?e.key:null;if("string"==typeof i||"number"==typeof i)return null!==l?null:g(t,e,""+i,n);if("object"==typeof i&&null!==i){switch(i.$$typeof){case p:return i.key===l?i.type===x?d(t,e,i.props.children,n,l):I(t,e,i,n):null;case G:return i.key===l?u(t,e,i,n):null}if(Qs(i)||k(i))return null!==l?null:d(t,e,i,n,null);Vs(t,i)}return null}function B(t,e,i,n,l){if("string"==typeof n||"number"==typeof n)return g(e,t=t.get(i)||null,""+n,l);if("object"==typeof n&&null!==n){switch(n.$$typeof){case p:return t=t.get(null===n.key?i:n.key)||null,n.type===x?d(e,t,n.props.children,l,n.key):I(e,t,n,l);case G:return u(e,t=t.get(null===n.key?i:n.key)||null,n,l)}if(Qs(n)||k(n))return d(e,t=t.get(i)||null,n,l,null);Vs(e,n)}return null}function F(l,a,c,g){for(var I=null,u=null,d=a,F=a=0,C=null;null!==d&&F<c.length;F++){d.index>F?(C=d,d=null):C=d.sibling;var U=r(l,d,c[F],g);if(null===U){null===d&&(d=C);break}t&&d&&null===U.alternate&&e(l,d),a=s(U,a,F),null===u?I=U:u.sibling=U,u=U,d=C}if(F===c.length)return i(l,d),I;if(null===d){for(;F<c.length;F++)null!==(d=o(l,c[F],g))&&(a=s(d,a,F),null===u?I=d:u.sibling=d,u=d);return I}for(d=n(l,d);F<c.length;F++)null!==(C=B(d,l,F,c[F],g))&&(t&&null!==C.alternate&&d.delete(null===C.key?F:C.key),a=s(C,a,F),null===u?I=C:u.sibling=C,u=C);return t&&d.forEach((function(t){return e(l,t)})),I}function C(l,c,g,I){var u=k(g);if("function"!=typeof u)throw Error(a(150));if(null==(g=u.call(g)))throw Error(a(151));for(var d=u=null,F=c,C=c=0,U=null,Q=g.next();null!==F&&!Q.done;C++,Q=g.next()){F.index>C?(U=F,F=null):U=F.sibling;var b=r(l,F,Q.value,I);if(null===b){null===F&&(F=U);break}t&&F&&null===b.alternate&&e(l,F),c=s(b,c,C),null===d?u=b:d.sibling=b,d=b,F=U}if(Q.done)return i(l,F),u;if(null===F){for(;!Q.done;C++,Q=g.next())null!==(Q=o(l,Q.value,I))&&(c=s(Q,c,C),null===d?u=Q:d.sibling=Q,d=Q);return u}for(F=n(l,F);!Q.done;C++,Q=g.next())null!==(Q=B(F,l,C,Q.value,I))&&(t&&null!==Q.alternate&&F.delete(null===Q.key?C:Q.key),c=s(Q,c,C),null===d?u=Q:d.sibling=Q,d=Q);return t&&F.forEach((function(t){return e(l,t)})),u}return function(t,n,s,g){var I="object"==typeof s&&null!==s&&s.type===x&&null===s.key;I&&(s=s.props.children);var u="object"==typeof s&&null!==s;if(u)switch(s.$$typeof){case p:t:{for(u=s.key,I=n;null!==I;){if(I.key===u){switch(I.tag){case 7:if(s.type===x){i(t,I.sibling),(n=l(I,s.props.children)).return=t,t=n;break t}break;default:if(I.elementType===s.type){i(t,I.sibling),(n=l(I,s.props)).ref=bs(t,I,s),n.return=t,t=n;break t}}i(t,I);break}e(t,I),I=I.sibling}s.type===x?((n=vg(s.props.children,t.mode,g,s.key)).return=t,t=n):((g=Hg(s.type,s.key,s.props,null,t.mode,g)).ref=bs(t,n,s),g.return=t,t=g)}return c(t);case G:t:{for(I=s.key;null!==n;){if(n.key===I){if(4===n.tag&&n.stateNode.containerInfo===s.containerInfo&&n.stateNode.implementation===s.implementation){i(t,n.sibling),(n=l(n,s.children||[])).return=t,t=n;break t}i(t,n);break}e(t,n),n=n.sibling}(n=Mg(s,t.mode,g)).return=t,t=n}return c(t)}if("string"==typeof s||"number"==typeof s)return s=""+s,null!==n&&6===n.tag?(i(t,n.sibling),(n=l(n,s)).return=t,t=n):(i(t,n),(n=wg(s,t.mode,g)).return=t,t=n),c(t);if(Qs(s))return F(t,n,s,g);if(k(s))return C(t,n,s,g);if(u&&Vs(t,s),void 0===s&&!I)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,P(t.type)||"Component"))}return i(t,n)}}var ps=As(!0),Gs=As(!1),xs={},Rs=sl(xs),hs=sl(xs),ms=sl(xs);function Ls(t){if(t===xs)throw Error(a(174));return t}function ys(t,e){switch(cl(ms,e),cl(hs,t),cl(Rs,xs),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:rt(null,"");break;default:e=rt(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}al(Rs),cl(Rs,e)}function Ss(){al(Rs),al(hs),al(ms)}function Zs(t){Ls(ms.current);var e=Ls(Rs.current),i=rt(e,t.type);e!==i&&(cl(hs,t),cl(Rs,i))}function Xs(t){hs.current===t&&(al(Rs),al(hs))}var fs=sl(0);function Es(t){for(var e=t;null!==e;){if(13===e.tag){var i=e.memoizedState;if(null!==i&&(null===(i=i.dehydrated)||"$?"===i.data||"$!"===i.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Ws=null,Ns=null,Ts=!1;function Ys(t,e){var i=Tg(5,null,null,0);i.elementType="DELETED",i.type="DELETED",i.stateNode=e,i.return=t,i.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=i,t.lastEffect=i):t.firstEffect=t.lastEffect=i}function Js(t,e){switch(t.tag){case 5:var i=t.type;return null!==(e=1!==e.nodeType||i.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);case 13:default:return!1}}function Hs(t){if(Ts){var e=Ns;if(e){var i=e;if(!Js(t,e)){if(!(e=Mn(i.nextSibling))||!Js(t,e))return t.flags=-1025&t.flags|2,Ts=!1,void(Ws=t);Ys(Ws,i)}Ws=t,Ns=Mn(e.firstChild)}else t.flags=-1025&t.flags|2,Ts=!1,Ws=t}}function vs(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Ws=t}function ks(t){if(t!==Ws)return!1;if(!Ts)return vs(t),Ts=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Hn(e,t.memoizedProps))for(e=Ns;e;)Ys(t,e),e=Mn(e.nextSibling);if(vs(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var i=t.data;if("/$"===i){if(0===e){Ns=Mn(t.nextSibling);break t}e--}else"$"!==i&&"$!"!==i&&"$?"!==i||e++}t=t.nextSibling}Ns=null}}else Ns=Ws?Mn(t.stateNode.nextSibling):null;return!0}function ws(){Ns=Ws=null,Ts=!1}var Ms=[];function zs(){for(var t=0;t<Ms.length;t++)Ms[t]._workInProgressVersionPrimary=null;Ms.length=0}var Ds=A.ReactCurrentDispatcher,Ps=A.ReactCurrentBatchConfig,Os=0,js=null,Ks=null,_s=null,qs=!1,$s=!1;function ta(){throw Error(a(321))}function ea(t,e){if(null===e)return!1;for(var i=0;i<e.length&&i<t.length;i++)if(!an(t[i],e[i]))return!1;return!0}function ia(t,e,i,n,l,s){if(Os=s,js=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Ds.current=null===t||null===t.memoizedState?La:ya,t=i(n,l),$s){s=0;do{if($s=!1,!(25>s))throw Error(a(301));s+=1,_s=Ks=null,e.updateQueue=null,Ds.current=Sa,t=i(n,l)}while($s)}if(Ds.current=ma,e=null!==Ks&&null!==Ks.next,Os=0,_s=Ks=js=null,qs=!1,e)throw Error(a(300));return t}function na(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===_s?js.memoizedState=_s=t:_s=_s.next=t,_s}function la(){if(null===Ks){var t=js.alternate;t=null!==t?t.memoizedState:null}else t=Ks.next;var e=null===_s?js.memoizedState:_s.next;if(null!==e)_s=e,Ks=t;else{if(null===t)throw Error(a(310));t={memoizedState:(Ks=t).memoizedState,baseState:Ks.baseState,baseQueue:Ks.baseQueue,queue:Ks.queue,next:null},null===_s?js.memoizedState=_s=t:_s=_s.next=t}return _s}function sa(t,e){return"function"==typeof e?e(t):e}function aa(t){var e=la(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var n=Ks,l=n.baseQueue,s=i.pending;if(null!==s){if(null!==l){var c=l.next;l.next=s.next,s.next=c}n.baseQueue=l=s,i.pending=null}if(null!==l){l=l.next,n=n.baseState;var g=c=s=null,I=l;do{var u=I.lane;if((Os&u)===u)null!==g&&(g=g.next={lane:0,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null}),n=I.eagerReducer===t?I.eagerState:t(n,I.action);else{var d={lane:u,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null};null===g?(c=g=d,s=n):g=g.next=d,js.lanes|=u,Ec|=u}I=I.next}while(null!==I&&I!==l);null===g?s=n:g.next=c,an(n,e.memoizedState)||(Xa=!0),e.memoizedState=n,e.baseState=s,e.baseQueue=g,i.lastRenderedState=n}return[e.memoizedState,i.dispatch]}function ca(t){var e=la(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var n=i.dispatch,l=i.pending,s=e.memoizedState;if(null!==l){i.pending=null;var c=l=l.next;do{s=t(s,c.action),c=c.next}while(c!==l);an(s,e.memoizedState)||(Xa=!0),e.memoizedState=s,null===e.baseQueue&&(e.baseState=s),i.lastRenderedState=s}return[s,n]}function ga(t,e,i){var n=e._getVersion;n=n(e._source);var l=e._workInProgressVersionPrimary;if(null!==l?t=l===n:(t=t.mutableReadLanes,(t=(Os&t)===t)&&(e._workInProgressVersionPrimary=n,Ms.push(e))),t)return i(e._source);throw Ms.push(e),Error(a(350))}function Ia(t,e,i,n){var l=hc;if(null===l)throw Error(a(349));var s=e._getVersion,c=s(e._source),g=Ds.current,I=g.useState((function(){return ga(l,e,i)})),u=I[1],d=I[0];I=_s;var o=t.memoizedState,r=o.refs,B=r.getSnapshot,F=o.source;o=o.subscribe;var C=js;return t.memoizedState={refs:r,source:e,subscribe:n},g.useEffect((function(){r.getSnapshot=i,r.setSnapshot=u;var t=s(e._source);if(!an(c,t)){t=i(e._source),an(d,t)||(u(t),t=ag(C),l.mutableReadLanes|=t&l.pendingLanes),t=l.mutableReadLanes,l.entangledLanes|=t;for(var n=l.entanglements,a=t;0<a;){var g=31-we(a),I=1<<g;n[g]|=t,a&=~I}}}),[i,e,n]),g.useEffect((function(){return n(e._source,(function(){var t=r.getSnapshot,i=r.setSnapshot;try{i(t(e._source));var n=ag(C);l.mutableReadLanes|=n&l.pendingLanes}catch(t){i((function(){throw t}))}}))}),[e,n]),an(B,i)&&an(F,e)&&an(o,n)||((t={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:d}).dispatch=u=ha.bind(null,js,t),I.queue=t,I.baseQueue=null,d=ga(l,e,i),I.memoizedState=I.baseState=d),d}function ua(t,e,i){return Ia(la(),t,e,i)}function da(t){var e=na();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:t}).dispatch=ha.bind(null,js,t),[e.memoizedState,t]}function oa(t,e,i,n){return t={tag:t,create:e,destroy:i,deps:n,next:null},null===(e=js.updateQueue)?(e={lastEffect:null},js.updateQueue=e,e.lastEffect=t.next=t):null===(i=e.lastEffect)?e.lastEffect=t.next=t:(n=i.next,i.next=t,t.next=n,e.lastEffect=t),t}function ra(t){return t={current:t},na().memoizedState=t}function Ba(){return la().memoizedState}function Fa(t,e,i,n){var l=na();js.flags|=t,l.memoizedState=oa(1|e,i,void 0,void 0===n?null:n)}function Ca(t,e,i,n){var l=la();n=void 0===n?null:n;var s=void 0;if(null!==Ks){var a=Ks.memoizedState;if(s=a.destroy,null!==n&&ea(n,a.deps))return void oa(e,i,s,n)}js.flags|=t,l.memoizedState=oa(1|e,i,s,n)}function Ua(t,e){return Fa(516,4,t,e)}function Qa(t,e){return Ca(516,4,t,e)}function ba(t,e){return Ca(4,2,t,e)}function Va(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Aa(t,e,i){return i=null!=i?i.concat([t]):null,Ca(4,2,Va.bind(null,e,t),i)}function pa(){}function Ga(t,e){var i=la();e=void 0===e?null:e;var n=i.memoizedState;return null!==n&&null!==e&&ea(e,n[1])?n[0]:(i.memoizedState=[t,e],t)}function xa(t,e){var i=la();e=void 0===e?null:e;var n=i.memoizedState;return null!==n&&null!==e&&ea(e,n[1])?n[0]:(t=t(),i.memoizedState=[t,e],t)}function Ra(t,e){var i=Hl();kl(98>i?98:i,(function(){t(!0)})),kl(97<i?97:i,(function(){var i=Ps.transition;Ps.transition=1;try{t(!1),e()}finally{Ps.transition=i}}))}function ha(t,e,i){var n=sg(),l=ag(t),s={lane:l,action:i,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?s.next=s:(s.next=a.next,a.next=s),e.pending=s,a=t.alternate,t===js||null!==a&&a===js)$s=qs=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var c=e.lastRenderedState,g=a(c,i);if(s.eagerReducer=a,s.eagerState=g,an(g,c))return}catch(t){}cg(t,l,n)}}var ma={readContext:is,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},La={readContext:is,useCallback:function(t,e){return na().memoizedState=[t,void 0===e?null:e],t},useContext:is,useEffect:Ua,useImperativeHandle:function(t,e,i){return i=null!=i?i.concat([t]):null,Fa(4,2,Va.bind(null,e,t),i)},useLayoutEffect:function(t,e){return Fa(4,2,t,e)},useMemo:function(t,e){var i=na();return e=void 0===e?null:e,t=t(),i.memoizedState=[t,e],t},useReducer:function(t,e,i){var n=na();return e=void 0!==i?i(e):e,n.memoizedState=n.baseState=e,t=(t=n.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=ha.bind(null,js,t),[n.memoizedState,t]},useRef:ra,useState:da,useDebugValue:pa,useDeferredValue:function(t){var e=da(t),i=e[0],n=e[1];return Ua((function(){var e=Ps.transition;Ps.transition=1;try{n(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=da(!1),e=t[0];return ra(t=Ra.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,i){var n=na();return n.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:i},Ia(n,t,e,i)},useOpaqueIdentifier:function(){if(Ts){var t=!1,e=function(t){return{$$typeof:W,toString:t,valueOf:t}}((function(){throw t||(t=!0,i("r:"+(Dn++).toString(36))),Error(a(355))})),i=da(e)[1];return 0==(2&js.mode)&&(js.flags|=516,oa(5,(function(){i("r:"+(Dn++).toString(36))}),void 0,null)),e}return da(e="r:"+(Dn++).toString(36)),e},unstable_isNewReconciler:!1},ya={readContext:is,useCallback:Ga,useContext:is,useEffect:Qa,useImperativeHandle:Aa,useLayoutEffect:ba,useMemo:xa,useReducer:aa,useRef:Ba,useState:function(){return aa(sa)},useDebugValue:pa,useDeferredValue:function(t){var e=aa(sa),i=e[0],n=e[1];return Qa((function(){var e=Ps.transition;Ps.transition=1;try{n(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=aa(sa)[0];return[Ba().current,t]},useMutableSource:ua,useOpaqueIdentifier:function(){return aa(sa)[0]},unstable_isNewReconciler:!1},Sa={readContext:is,useCallback:Ga,useContext:is,useEffect:Qa,useImperativeHandle:Aa,useLayoutEffect:ba,useMemo:xa,useReducer:ca,useRef:Ba,useState:function(){return ca(sa)},useDebugValue:pa,useDeferredValue:function(t){var e=ca(sa),i=e[0],n=e[1];return Qa((function(){var e=Ps.transition;Ps.transition=1;try{n(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=ca(sa)[0];return[Ba().current,t]},useMutableSource:ua,useOpaqueIdentifier:function(){return ca(sa)[0]},unstable_isNewReconciler:!1},Za=A.ReactCurrentOwner,Xa=!1;function fa(t,e,i,n){e.child=null===t?Gs(e,null,i,n):ps(e,t.child,i,n)}function Ea(t,e,i,n,l){i=i.render;var s=e.ref;return es(e,l),n=ia(t,e,i,n,s,l),null===t||Xa?(e.flags|=1,fa(t,e,n,l),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~l,qa(t,e,l))}function Wa(t,e,i,n,l,s){if(null===t){var a=i.type;return"function"!=typeof a||Yg(a)||void 0!==a.defaultProps||null!==i.compare||void 0!==i.defaultProps?((t=Hg(i.type,null,n,e,e.mode,s)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Na(t,e,a,n,l,s))}return a=t.child,0==(l&s)&&(l=a.memoizedProps,(i=null!==(i=i.compare)?i:gn)(l,n)&&t.ref===e.ref)?qa(t,e,s):(e.flags|=1,(t=Jg(a,n)).ref=e.ref,t.return=e,e.child=t)}function Na(t,e,i,n,l,s){if(null!==t&&gn(t.memoizedProps,n)&&t.ref===e.ref){if(Xa=!1,0==(s&l))return e.lanes=t.lanes,qa(t,e,s);0!=(16384&t.flags)&&(Xa=!0)}return Ja(t,e,i,n,s)}function Ta(t,e,i){var n=e.pendingProps,l=n.children,s=null!==t?t.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},Fg(0,i);else{if(0==(1073741824&i))return t=null!==s?s.baseLanes|i:i,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},Fg(0,t),null;e.memoizedState={baseLanes:0},Fg(0,null!==s?s.baseLanes:i)}else null!==s?(n=s.baseLanes|i,e.memoizedState=null):n=i,Fg(0,n);return fa(t,e,l,i),e.child}function Ya(t,e){var i=e.ref;(null===t&&null!==i||null!==t&&t.ref!==i)&&(e.flags|=128)}function Ja(t,e,i,n,l){var s=rl(i)?dl:Il.current;return s=ol(e,s),es(e,l),i=ia(t,e,i,n,s,l),null===t||Xa?(e.flags|=1,fa(t,e,i,l),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~l,qa(t,e,l))}function Ha(t,e,i,n,l){if(rl(i)){var s=!0;Ul(e)}else s=!1;if(es(e,l),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),Fs(e,i,n),Us(e,i,n,l),n=!0;else if(null===t){var a=e.stateNode,c=e.memoizedProps;a.props=c;var g=a.context,I=i.contextType;I="object"==typeof I&&null!==I?is(I):ol(e,I=rl(i)?dl:Il.current);var u=i.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==n||g!==I)&&Cs(e,a,n,I),ns=!1;var o=e.memoizedState;a.state=o,Is(e,n,a,l),g=e.memoizedState,c!==n||o!==g||ul.current||ns?("function"==typeof u&&(os(e,i,u,n),g=e.memoizedState),(c=ns||Bs(e,i,c,n,o,g,I))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=n,e.memoizedState=g),a.props=n,a.state=g,a.context=I,n=c):("function"==typeof a.componentDidMount&&(e.flags|=4),n=!1)}else{a=e.stateNode,ss(t,e),c=e.memoizedProps,I=e.type===e.elementType?c:Pl(e.type,c),a.props=I,d=e.pendingProps,o=a.context,g="object"==typeof(g=i.contextType)&&null!==g?is(g):ol(e,g=rl(i)?dl:Il.current);var r=i.getDerivedStateFromProps;(u="function"==typeof r||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==d||o!==g)&&Cs(e,a,n,g),ns=!1,o=e.memoizedState,a.state=o,Is(e,n,a,l);var B=e.memoizedState;c!==d||o!==B||ul.current||ns?("function"==typeof r&&(os(e,i,r,n),B=e.memoizedState),(I=ns||Bs(e,i,I,n,o,B,g))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(n,B,g),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(n,B,g)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||c===t.memoizedProps&&o===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===t.memoizedProps&&o===t.memoizedState||(e.flags|=256),e.memoizedProps=n,e.memoizedState=B),a.props=n,a.state=B,a.context=g,n=I):("function"!=typeof a.componentDidUpdate||c===t.memoizedProps&&o===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===t.memoizedProps&&o===t.memoizedState||(e.flags|=256),n=!1)}return va(t,e,i,n,s,l)}function va(t,e,i,n,l,s){Ya(t,e);var a=0!=(64&e.flags);if(!n&&!a)return l&&Ql(e,i,!1),qa(t,e,s);n=e.stateNode,Za.current=e;var c=a&&"function"!=typeof i.getDerivedStateFromError?null:n.render();return e.flags|=1,null!==t&&a?(e.child=ps(e,t.child,null,s),e.child=ps(e,null,c,s)):fa(t,e,c,s),e.memoizedState=n.state,l&&Ql(e,i,!0),e.child}function ka(t){var e=t.stateNode;e.pendingContext?Fl(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Fl(0,e.context,!1),ys(t,e.containerInfo)}var wa,Ma,za,Da={dehydrated:null,retryLane:0};function Pa(t,e,i){var n,l=e.pendingProps,s=fs.current,a=!1;return(n=0!=(64&e.flags))||(n=(null===t||null!==t.memoizedState)&&0!=(2&s)),n?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===l.fallback||!0===l.unstable_avoidThisFallback||(s|=1),cl(fs,1&s),null===t?(void 0!==l.fallback&&Hs(e),t=l.children,s=l.fallback,a?(t=Oa(e,t,s,i),e.child.memoizedState={baseLanes:i},e.memoizedState=Da,t):"number"==typeof l.unstable_expectedLoadTime?(t=Oa(e,t,s,i),e.child.memoizedState={baseLanes:i},e.memoizedState=Da,e.lanes=33554432,t):((i=kg({mode:"visible",children:t},e.mode,i,null)).return=e,e.child=i)):(t.memoizedState,a?(l=function(t,e,i,n,l){var s=e.mode,a=t.child;t=a.sibling;var c={mode:"hidden",children:i};return 0==(2&s)&&e.child!==a?((i=e.child).childLanes=0,i.pendingProps=c,null!==(a=i.lastEffect)?(e.firstEffect=i.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):i=Jg(a,c),null!==t?n=Jg(t,n):(n=vg(n,s,l,null)).flags|=2,n.return=e,i.return=e,i.sibling=n,e.child=i,n}(t,e,l.children,l.fallback,i),a=e.child,s=t.child.memoizedState,a.memoizedState=null===s?{baseLanes:i}:{baseLanes:s.baseLanes|i},a.childLanes=t.childLanes&~i,e.memoizedState=Da,l):(i=function(t,e,i,n){var l=t.child;return t=l.sibling,i=Jg(l,{mode:"visible",children:i}),0==(2&e.mode)&&(i.lanes=n),i.return=e,i.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=i}(t,e,l.children,i),e.memoizedState=null,i))}function Oa(t,e,i,n){var l=t.mode,s=t.child;return e={mode:"hidden",children:e},0==(2&l)&&null!==s?(s.childLanes=0,s.pendingProps=e):s=kg(e,l,0,null),i=vg(i,l,n,null),s.return=t,i.return=t,s.sibling=i,t.child=s,i}function ja(t,e){t.lanes|=e;var i=t.alternate;null!==i&&(i.lanes|=e),ts(t.return,e)}function Ka(t,e,i,n,l,s){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:n,tail:i,tailMode:l,lastEffect:s}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=n,a.tail=i,a.tailMode=l,a.lastEffect=s)}function _a(t,e,i){var n=e.pendingProps,l=n.revealOrder,s=n.tail;if(fa(t,e,n.children,i),0!=(2&(n=fs.current)))n=1&n|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&ja(t,i);else if(19===t.tag)ja(t,i);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}n&=1}if(cl(fs,n),0==(2&e.mode))e.memoizedState=null;else switch(l){case"forwards":for(i=e.child,l=null;null!==i;)null!==(t=i.alternate)&&null===Es(t)&&(l=i),i=i.sibling;null===(i=l)?(l=e.child,e.child=null):(l=i.sibling,i.sibling=null),Ka(e,!1,l,i,s,e.lastEffect);break;case"backwards":for(i=null,l=e.child,e.child=null;null!==l;){if(null!==(t=l.alternate)&&null===Es(t)){e.child=l;break}t=l.sibling,l.sibling=i,i=l,l=t}Ka(e,!0,i,null,s,e.lastEffect);break;case"together":Ka(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function qa(t,e,i){if(null!==t&&(e.dependencies=t.dependencies),Ec|=e.lanes,0!=(i&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(i=Jg(t=e.child,t.pendingProps),e.child=i,i.return=e;null!==t.sibling;)t=t.sibling,(i=i.sibling=Jg(t,t.pendingProps)).return=e;i.sibling=null}return e.child}return null}function $a(t,e){if(!Ts)switch(t.tailMode){case"hidden":e=t.tail;for(var i=null;null!==e;)null!==e.alternate&&(i=e),e=e.sibling;null===i?t.tail=null:i.sibling=null;break;case"collapsed":i=t.tail;for(var n=null;null!==i;)null!==i.alternate&&(n=i),i=i.sibling;null===n?e||null===t.tail?t.tail=null:t.tail.sibling=null:n.sibling=null}}function tc(t,e,i){var n=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return rl(e.type)&&Bl(),null;case 3:return Ss(),al(ul),al(Il),zs(),(n=e.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==t&&null!==t.child||(ks(e)?e.flags|=4:n.hydrate||(e.flags|=256)),null;case 5:Xs(e);var s=Ls(ms.current);if(i=e.type,null!==t&&null!=e.stateNode)Ma(t,e,i,n),t.ref!==e.ref&&(e.flags|=128);else{if(!n){if(null===e.stateNode)throw Error(a(166));return null}if(t=Ls(Rs.current),ks(e)){n=e.stateNode,i=e.type;var c=e.memoizedProps;switch(n[On]=e,n[jn]=c,i){case"dialog":hn("cancel",n),hn("close",n);break;case"iframe":case"object":case"embed":hn("load",n);break;case"video":case"audio":for(t=0;t<pn.length;t++)hn(pn[t],n);break;case"source":hn("error",n);break;case"img":case"image":case"link":hn("error",n),hn("load",n);break;case"details":hn("toggle",n);break;case"input":tt(n,c),hn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!c.multiple},hn("invalid",n);break;case"textarea":gt(n,c),hn("invalid",n)}for(var I in Gt(i,c),t=null,c)c.hasOwnProperty(I)&&(s=c[I],"children"===I?"string"==typeof s?n.textContent!==s&&(t=["children",s]):"number"==typeof s&&n.textContent!==""+s&&(t=["children",""+s]):g.hasOwnProperty(I)&&null!=s&&"onScroll"===I&&hn("scroll",n));switch(i){case"input":K(n),nt(n,c,!0);break;case"textarea":K(n),ut(n);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(n.onclick=Nn)}n=t,e.updateQueue=n,null!==n&&(e.flags|=4)}else{switch(I=9===s.nodeType?s:s.ownerDocument,t===dt&&(t=ot(i)),t===dt?"script"===i?((t=I.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof n.is?t=I.createElement(i,{is:n.is}):(t=I.createElement(i),"select"===i&&(I=t,n.multiple?I.multiple=!0:n.size&&(I.size=n.size))):t=I.createElementNS(t,i),t[On]=e,t[jn]=n,wa(t,e),e.stateNode=t,I=xt(i,n),i){case"dialog":hn("cancel",t),hn("close",t),s=n;break;case"iframe":case"object":case"embed":hn("load",t),s=n;break;case"video":case"audio":for(s=0;s<pn.length;s++)hn(pn[s],t);s=n;break;case"source":hn("error",t),s=n;break;case"img":case"image":case"link":hn("error",t),hn("load",t),s=n;break;case"details":hn("toggle",t),s=n;break;case"input":tt(t,n),s=$(t,n),hn("invalid",t);break;case"option":s=st(t,n);break;case"select":t._wrapperState={wasMultiple:!!n.multiple},s=l({},n,{value:void 0}),hn("invalid",t);break;case"textarea":gt(t,n),s=ct(t,n),hn("invalid",t);break;default:s=n}Gt(i,s);var u=s;for(c in u)if(u.hasOwnProperty(c)){var d=u[c];"style"===c?At(t,d):"dangerouslySetInnerHTML"===c?null!=(d=d?d.__html:void 0)&&Ct(t,d):"children"===c?"string"==typeof d?("textarea"!==i||""!==d)&&Ut(t,d):"number"==typeof d&&Ut(t,""+d):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(g.hasOwnProperty(c)?null!=d&&"onScroll"===c&&hn("scroll",t):null!=d&&V(t,c,d,I))}switch(i){case"input":K(t),nt(t,n,!1);break;case"textarea":K(t),ut(t);break;case"option":null!=n.value&&t.setAttribute("value",""+O(n.value));break;case"select":t.multiple=!!n.multiple,null!=(c=n.value)?at(t,!!n.multiple,c,!1):null!=n.defaultValue&&at(t,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof s.onClick&&(t.onclick=Nn)}Jn(i,n)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)za(0,e,t.memoizedProps,n);else{if("string"!=typeof n&&null===e.stateNode)throw Error(a(166));i=Ls(ms.current),Ls(Rs.current),ks(e)?(n=e.stateNode,i=e.memoizedProps,n[On]=e,n.nodeValue!==i&&(e.flags|=4)):((n=(9===i.nodeType?i:i.ownerDocument).createTextNode(n))[On]=e,e.stateNode=n)}return null;case 13:return al(fs),n=e.memoizedState,0!=(64&e.flags)?(e.lanes=i,e):(n=null!==n,i=!1,null===t?void 0!==e.memoizedProps.fallback&&ks(e):i=null!==t.memoizedState,n&&!i&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&fs.current)?0===Zc&&(Zc=3):(0!==Zc&&3!==Zc||(Zc=4),null===hc||0==(134217727&Ec)&&0==(134217727&Wc)||dg(hc,Lc))),(n||i)&&(e.flags|=4),null);case 4:return Ss(),null===t&&Ln(e.stateNode.containerInfo),null;case 10:return $l(e),null;case 17:return rl(e.type)&&Bl(),null;case 19:if(al(fs),null===(n=e.memoizedState))return null;if(c=0!=(64&e.flags),null===(I=n.rendering))if(c)$a(n,!1);else{if(0!==Zc||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(I=Es(t))){for(e.flags|=64,$a(n,!1),null!==(c=I.updateQueue)&&(e.updateQueue=c,e.flags|=4),null===n.lastEffect&&(e.firstEffect=null),e.lastEffect=n.lastEffect,n=i,i=e.child;null!==i;)t=n,(c=i).flags&=2,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null,null===(I=c.alternate)?(c.childLanes=0,c.lanes=t,c.child=null,c.memoizedProps=null,c.memoizedState=null,c.updateQueue=null,c.dependencies=null,c.stateNode=null):(c.childLanes=I.childLanes,c.lanes=I.lanes,c.child=I.child,c.memoizedProps=I.memoizedProps,c.memoizedState=I.memoizedState,c.updateQueue=I.updateQueue,c.type=I.type,t=I.dependencies,c.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),i=i.sibling;return cl(fs,1&fs.current|2),e.child}t=t.sibling}null!==n.tail&&Jl()>Jc&&(e.flags|=64,c=!0,$a(n,!1),e.lanes=33554432)}else{if(!c)if(null!==(t=Es(I))){if(e.flags|=64,c=!0,null!==(i=t.updateQueue)&&(e.updateQueue=i,e.flags|=4),$a(n,!0),null===n.tail&&"hidden"===n.tailMode&&!I.alternate&&!Ts)return null!==(e=e.lastEffect=n.lastEffect)&&(e.nextEffect=null),null}else 2*Jl()-n.renderingStartTime>Jc&&1073741824!==i&&(e.flags|=64,c=!0,$a(n,!1),e.lanes=33554432);n.isBackwards?(I.sibling=e.child,e.child=I):(null!==(i=n.last)?i.sibling=I:e.child=I,n.last=I)}return null!==n.tail?(i=n.tail,n.rendering=i,n.tail=i.sibling,n.lastEffect=e.lastEffect,n.renderingStartTime=Jl(),i.sibling=null,e=fs.current,cl(fs,c?1&e|2:1&e),i):null;case 23:case 24:return Cg(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function ec(t){switch(t.tag){case 1:rl(t.type)&&Bl();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Ss(),al(ul),al(Il),zs(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Xs(t),null;case 13:return al(fs),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return al(fs),null;case 4:return Ss(),null;case 10:return $l(t),null;case 23:case 24:return Cg(),null;default:return null}}function ic(t,e){try{var i="",n=e;do{i+=D(n),n=n.return}while(n);var l=i}catch(t){l="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:l}}function nc(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}wa=function(t,e){for(var i=e.child;null!==i;){if(5===i.tag||6===i.tag)t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},Ma=function(t,e,i,n){var s=t.memoizedProps;if(s!==n){t=e.stateNode,Ls(Rs.current);var a,c=null;switch(i){case"input":s=$(t,s),n=$(t,n),c=[];break;case"option":s=st(t,s),n=st(t,n),c=[];break;case"select":s=l({},s,{value:void 0}),n=l({},n,{value:void 0}),c=[];break;case"textarea":s=ct(t,s),n=ct(t,n),c=[];break;default:"function"!=typeof s.onClick&&"function"==typeof n.onClick&&(t.onclick=Nn)}for(d in Gt(i,n),i=null,s)if(!n.hasOwnProperty(d)&&s.hasOwnProperty(d)&&null!=s[d])if("style"===d){var I=s[d];for(a in I)I.hasOwnProperty(a)&&(i||(i={}),i[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(g.hasOwnProperty(d)?c||(c=[]):(c=c||[]).push(d,null));for(d in n){var u=n[d];if(I=null!=s?s[d]:void 0,n.hasOwnProperty(d)&&u!==I&&(null!=u||null!=I))if("style"===d)if(I){for(a in I)!I.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(i||(i={}),i[a]="");for(a in u)u.hasOwnProperty(a)&&I[a]!==u[a]&&(i||(i={}),i[a]=u[a])}else i||(c||(c=[]),c.push(d,i)),i=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,I=I?I.__html:void 0,null!=u&&I!==u&&(c=c||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(c=c||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(g.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&hn("scroll",t),c||I===u||(c=[])):"object"==typeof u&&null!==u&&u.$$typeof===W?u.toString():(c=c||[]).push(d,u))}i&&(c=c||[]).push("style",i);var d=c;(e.updateQueue=d)&&(e.flags|=4)}},za=function(t,e,i,n){i!==n&&(e.flags|=4)};var lc="function"==typeof WeakMap?WeakMap:Map;function sc(t,e,i){(i=as(-1,i)).tag=3,i.payload={element:null};var n=e.value;return i.callback=function(){wc||(wc=!0,Mc=n),nc(0,e)},i}function ac(t,e,i){(i=as(-1,i)).tag=3;var n=t.type.getDerivedStateFromError;if("function"==typeof n){var l=e.value;i.payload=function(){return nc(0,e),n(l)}}var s=t.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(i.callback=function(){"function"!=typeof n&&(null===zc?zc=new Set([this]):zc.add(this),nc(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),i}var cc="function"==typeof WeakSet?WeakSet:Set;function gc(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){fg(t,e)}else e.current=null}function Ic(t,e){switch(e.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&e.flags&&null!==t){var i=t.memoizedProps,n=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?i:Pl(e.type,i),n),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&wn(e.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function uc(t,e,i){switch(i.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var n=t.create;t.destroy=n()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var l=t;n=l.next,0!=(4&(l=l.tag))&&0!=(1&l)&&(Sg(i,t),yg(i,t)),t=n}while(t!==e)}return;case 1:return t=i.stateNode,4&i.flags&&(null===e?t.componentDidMount():(n=i.elementType===i.type?e.memoizedProps:Pl(i.type,e.memoizedProps),t.componentDidUpdate(n,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=i.updateQueue)&&us(i,e,t));case 3:if(null!==(e=i.updateQueue)){if(t=null,null!==i.child)switch(i.child.tag){case 5:t=i.child.stateNode;break;case 1:t=i.child.stateNode}us(i,e,t)}return;case 5:return t=i.stateNode,void(null===e&&4&i.flags&&Jn(i.type,i.memoizedProps)&&t.focus());case 6:case 4:case 12:return;case 13:return void(null===i.memoizedState&&(i=i.alternate,null!==i&&(i=i.memoizedState,null!==i&&(i=i.dehydrated,null!==i&&Ae(i)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function dc(t,e){for(var i=t;;){if(5===i.tag){var n=i.stateNode;if(e)"function"==typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=i.stateNode;var l=i.memoizedProps.style;l=null!=l&&l.hasOwnProperty("display")?l.display:null,n.style.display=Vt("display",l)}}else if(6===i.tag)i.stateNode.nodeValue=e?"":i.memoizedProps;else if((23!==i.tag&&24!==i.tag||null===i.memoizedState||i===t)&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function oc(t,e){if(Vl&&"function"==typeof Vl.onCommitFiberUnmount)try{Vl.onCommitFiberUnmount(bl,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var i=t=t.next;do{var n=i,l=n.destroy;if(n=n.tag,void 0!==l)if(0!=(4&n))Sg(e,i);else{n=e;try{l()}catch(t){fg(n,t)}}i=i.next}while(i!==t)}break;case 1:if(gc(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){fg(e,t)}break;case 5:gc(e);break;case 4:Qc(t,e)}}function rc(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function Bc(t){return 5===t.tag||3===t.tag||4===t.tag}function Fc(t){t:{for(var e=t.return;null!==e;){if(Bc(e))break t;e=e.return}throw Error(a(160))}var i=e;switch(e=i.stateNode,i.tag){case 5:var n=!1;break;case 3:case 4:e=e.containerInfo,n=!0;break;default:throw Error(a(161))}16&i.flags&&(Ut(e,""),i.flags&=-17);t:e:for(i=t;;){for(;null===i.sibling;){if(null===i.return||Bc(i.return)){i=null;break t}i=i.return}for(i.sibling.return=i.return,i=i.sibling;5!==i.tag&&6!==i.tag&&18!==i.tag;){if(2&i.flags)continue e;if(null===i.child||4===i.tag)continue e;i.child.return=i,i=i.child}if(!(2&i.flags)){i=i.stateNode;break t}}n?Cc(t,i,e):Uc(t,i,e)}function Cc(t,e,i){var n=t.tag,l=5===n||6===n;if(l)t=l?t.stateNode:t.stateNode.instance,e?8===i.nodeType?i.parentNode.insertBefore(t,e):i.insertBefore(t,e):(8===i.nodeType?(e=i.parentNode).insertBefore(t,i):(e=i).appendChild(t),null!=(i=i._reactRootContainer)||null!==e.onclick||(e.onclick=Nn));else if(4!==n&&null!==(t=t.child))for(Cc(t,e,i),t=t.sibling;null!==t;)Cc(t,e,i),t=t.sibling}function Uc(t,e,i){var n=t.tag,l=5===n||6===n;if(l)t=l?t.stateNode:t.stateNode.instance,e?i.insertBefore(t,e):i.appendChild(t);else if(4!==n&&null!==(t=t.child))for(Uc(t,e,i),t=t.sibling;null!==t;)Uc(t,e,i),t=t.sibling}function Qc(t,e){for(var i,n,l=e,s=!1;;){if(!s){s=l.return;t:for(;;){if(null===s)throw Error(a(160));switch(i=s.stateNode,s.tag){case 5:n=!1;break t;case 3:case 4:i=i.containerInfo,n=!0;break t}s=s.return}s=!0}if(5===l.tag||6===l.tag){t:for(var c=t,g=l,I=g;;)if(oc(c,I),null!==I.child&&4!==I.tag)I.child.return=I,I=I.child;else{if(I===g)break t;for(;null===I.sibling;){if(null===I.return||I.return===g)break t;I=I.return}I.sibling.return=I.return,I=I.sibling}n?(c=i,g=l.stateNode,8===c.nodeType?c.parentNode.removeChild(g):c.removeChild(g)):i.removeChild(l.stateNode)}else if(4===l.tag){if(null!==l.child){i=l.stateNode.containerInfo,n=!0,l.child.return=l,l=l.child;continue}}else if(oc(t,l),null!==l.child){l.child.return=l,l=l.child;continue}if(l===e)break;for(;null===l.sibling;){if(null===l.return||l.return===e)return;4===(l=l.return).tag&&(s=!1)}l.sibling.return=l.return,l=l.sibling}}function bc(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var i=e.updateQueue;if(null!==(i=null!==i?i.lastEffect:null)){var n=i=i.next;do{3==(3&n.tag)&&(t=n.destroy,n.destroy=void 0,void 0!==t&&t()),n=n.next}while(n!==i)}return;case 1:return;case 5:if(null!=(i=e.stateNode)){n=e.memoizedProps;var l=null!==t?t.memoizedProps:n;t=e.type;var s=e.updateQueue;if(e.updateQueue=null,null!==s){for(i[jn]=n,"input"===t&&"radio"===n.type&&null!=n.name&&et(i,n),xt(t,l),e=xt(t,n),l=0;l<s.length;l+=2){var c=s[l],g=s[l+1];"style"===c?At(i,g):"dangerouslySetInnerHTML"===c?Ct(i,g):"children"===c?Ut(i,g):V(i,c,g,e)}switch(t){case"input":it(i,n);break;case"textarea":It(i,n);break;case"select":t=i._wrapperState.wasMultiple,i._wrapperState.wasMultiple=!!n.multiple,null!=(s=n.value)?at(i,!!n.multiple,s,!1):t!==!!n.multiple&&(null!=n.defaultValue?at(i,!!n.multiple,n.defaultValue,!0):at(i,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((i=e.stateNode).hydrate&&(i.hydrate=!1,Ae(i.containerInfo)));case 12:return;case 13:return null!==e.memoizedState&&(Yc=Jl(),dc(e.child,!0)),void Vc(e);case 19:return void Vc(e);case 17:return;case 23:case 24:return void dc(e,null!==e.memoizedState)}throw Error(a(163))}function Vc(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var i=t.stateNode;null===i&&(i=t.stateNode=new cc),e.forEach((function(e){var n=Wg.bind(null,t,e);i.has(e)||(i.add(e),e.then(n,n))}))}}function Ac(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var pc=Math.ceil,Gc=A.ReactCurrentDispatcher,xc=A.ReactCurrentOwner,Rc=0,hc=null,mc=null,Lc=0,yc=0,Sc=sl(0),Zc=0,Xc=null,fc=0,Ec=0,Wc=0,Nc=0,Tc=null,Yc=0,Jc=1/0;function Hc(){Jc=Jl()+500}var vc,kc=null,wc=!1,Mc=null,zc=null,Dc=!1,Pc=null,Oc=90,jc=[],Kc=[],_c=null,qc=0,$c=null,tg=-1,eg=0,ig=0,ng=null,lg=!1;function sg(){return 0!=(48&Rc)?Jl():-1!==tg?tg:tg=Jl()}function ag(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hl()?1:2;if(0===eg&&(eg=fc),0!==Dl.transition){0!==ig&&(ig=null!==Tc?Tc.pendingLanes:0),t=eg;var e=4186112&~ig;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hl(),t=Je(0!=(4&Rc)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),eg)}function cg(t,e,i){if(50<qc)throw qc=0,$c=null,Error(a(185));if(null===(t=gg(t,e)))return null;ke(t,e,i),t===hc&&(Wc|=e,4===Zc&&dg(t,Lc));var n=Hl();1===e?0!=(8&Rc)&&0==(48&Rc)?og(t):(Ig(t,i),0===Rc&&(Hc(),Ml())):(0==(4&Rc)||98!==n&&99!==n||(null===_c?_c=new Set([t]):_c.add(t)),Ig(t,i)),Tc=t}function gg(t,e){t.lanes|=e;var i=t.alternate;for(null!==i&&(i.lanes|=e),i=t,t=t.return;null!==t;)t.childLanes|=e,null!==(i=t.alternate)&&(i.childLanes|=e),i=t,t=t.return;return 3===i.tag?i.stateNode:null}function Ig(t,e){for(var i=t.callbackNode,n=t.suspendedLanes,l=t.pingedLanes,s=t.expirationTimes,c=t.pendingLanes;0<c;){var g=31-we(c),I=1<<g,u=s[g];if(-1===u){if(0==(I&n)||0!=(I&l)){u=e,Ne(I);var d=We;s[g]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=e&&(t.expiredLanes|=I);c&=~I}if(n=Te(t,t===hc?Lc:0),e=We,0===n)null!==i&&(i!==fl&&Gl(i),t.callbackNode=null,t.callbackPriority=0);else{if(null!==i){if(t.callbackPriority===e)return;i!==fl&&Gl(i)}15===e?(i=og.bind(null,t),null===Wl?(Wl=[i],Nl=pl(Ll,zl)):Wl.push(i),i=fl):i=14===e?wl(99,og.bind(null,t)):wl(i=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),ug.bind(null,t)),t.callbackPriority=e,t.callbackNode=i}}function ug(t){if(tg=-1,ig=eg=0,0!=(48&Rc))throw Error(a(327));var e=t.callbackNode;if(Lg()&&t.callbackNode!==e)return null;var i=Te(t,t===hc?Lc:0);if(0===i)return null;var n=i,l=Rc;Rc|=16;var s=bg();for(hc===t&&Lc===n||(Hc(),Ug(t,n));;)try{pg();break}catch(e){Qg(t,e)}if(ql(),Gc.current=s,Rc=l,null!==mc?n=0:(hc=null,Lc=0,n=Zc),0!=(fc&Wc))Ug(t,0);else if(0!==n){if(2===n&&(Rc|=64,t.hydrate&&(t.hydrate=!1,wn(t.containerInfo)),0!==(i=Ye(t))&&(n=Vg(t,i))),1===n)throw e=Xc,Ug(t,0),dg(t,i),Ig(t,Jl()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=i,n){case 0:case 1:throw Error(a(345));case 2:Rg(t);break;case 3:if(dg(t,i),(62914560&i)===i&&10<(n=Yc+500-Jl())){if(0!==Te(t,0))break;if(((l=t.suspendedLanes)&i)!==i){sg(),t.pingedLanes|=t.suspendedLanes&l;break}t.timeoutHandle=vn(Rg.bind(null,t),n);break}Rg(t);break;case 4:if(dg(t,i),(4186112&i)===i)break;for(n=t.eventTimes,l=-1;0<i;){var c=31-we(i);s=1<<c,(c=n[c])>l&&(l=c),i&=~s}if(i=l,10<(i=(120>(i=Jl()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*pc(i/1960))-i)){t.timeoutHandle=vn(Rg.bind(null,t),i);break}Rg(t);break;case 5:Rg(t);break;default:throw Error(a(329))}}return Ig(t,Jl()),t.callbackNode===e?ug.bind(null,t):null}function dg(t,e){for(e&=~Nc,e&=~Wc,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var i=31-we(e),n=1<<i;t[i]=-1,e&=~n}}function og(t){if(0!=(48&Rc))throw Error(a(327));if(Lg(),t===hc&&0!=(t.expiredLanes&Lc)){var e=Lc,i=Vg(t,e);0!=(fc&Wc)&&(i=Vg(t,e=Te(t,e)))}else i=Vg(t,e=Te(t,0));if(0!==t.tag&&2===i&&(Rc|=64,t.hydrate&&(t.hydrate=!1,wn(t.containerInfo)),0!==(e=Ye(t))&&(i=Vg(t,e))),1===i)throw i=Xc,Ug(t,0),dg(t,e),Ig(t,Jl()),i;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Rg(t),Ig(t,Jl()),null}function rg(t,e){var i=Rc;Rc|=1;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Ml())}}function Bg(t,e){var i=Rc;Rc&=-2,Rc|=8;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Ml())}}function Fg(t,e){cl(Sc,yc),yc|=e,fc|=e}function Cg(){yc=Sc.current,al(Sc)}function Ug(t,e){t.finishedWork=null,t.finishedLanes=0;var i=t.timeoutHandle;if(-1!==i&&(t.timeoutHandle=-1,kn(i)),null!==mc)for(i=mc.return;null!==i;){var n=i;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&Bl();break;case 3:Ss(),al(ul),al(Il),zs();break;case 5:Xs(n);break;case 4:Ss();break;case 13:case 19:al(fs);break;case 10:$l(n);break;case 23:case 24:Cg()}i=i.return}hc=t,mc=Jg(t.current,null),Lc=yc=fc=e,Zc=0,Xc=null,Nc=Wc=Ec=0}function Qg(t,e){for(;;){var i=mc;try{if(ql(),Ds.current=ma,qs){for(var n=js.memoizedState;null!==n;){var l=n.queue;null!==l&&(l.pending=null),n=n.next}qs=!1}if(Os=0,_s=Ks=js=null,$s=!1,xc.current=null,null===i||null===i.return){Zc=1,Xc=e,mc=null;break}t:{var s=t,a=i.return,c=i,g=e;if(e=Lc,c.flags|=2048,c.firstEffect=c.lastEffect=null,null!==g&&"object"==typeof g&&"function"==typeof g.then){var I=g;if(0==(2&c.mode)){var u=c.alternate;u?(c.updateQueue=u.updateQueue,c.memoizedState=u.memoizedState,c.lanes=u.lanes):(c.updateQueue=null,c.memoizedState=null)}var d=0!=(1&fs.current),o=a;do{var r;if(r=13===o.tag){var B=o.memoizedState;if(null!==B)r=null!==B.dehydrated;else{var F=o.memoizedProps;r=void 0!==F.fallback&&(!0!==F.unstable_avoidThisFallback||!d)}}if(r){var C=o.updateQueue;if(null===C){var U=new Set;U.add(I),o.updateQueue=U}else C.add(I);if(0==(2&o.mode)){if(o.flags|=64,c.flags|=16384,c.flags&=-2981,1===c.tag)if(null===c.alternate)c.tag=17;else{var Q=as(-1,1);Q.tag=2,cs(c,Q)}c.lanes|=1;break t}g=void 0,c=e;var b=s.pingCache;if(null===b?(b=s.pingCache=new lc,g=new Set,b.set(I,g)):void 0===(g=b.get(I))&&(g=new Set,b.set(I,g)),!g.has(c)){g.add(c);var V=Eg.bind(null,s,I,c);I.then(V,V)}o.flags|=4096,o.lanes=e;break t}o=o.return}while(null!==o);g=Error((P(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Zc&&(Zc=2),g=ic(g,c),o=a;do{switch(o.tag){case 3:s=g,o.flags|=4096,e&=-e,o.lanes|=e,gs(o,sc(0,s,e));break t;case 1:s=g;var A=o.type,p=o.stateNode;if(0==(64&o.flags)&&("function"==typeof A.getDerivedStateFromError||null!==p&&"function"==typeof p.componentDidCatch&&(null===zc||!zc.has(p)))){o.flags|=4096,e&=-e,o.lanes|=e,gs(o,ac(o,s,e));break t}}o=o.return}while(null!==o)}xg(i)}catch(t){e=t,mc===i&&null!==i&&(mc=i=i.return);continue}break}}function bg(){var t=Gc.current;return Gc.current=ma,null===t?ma:t}function Vg(t,e){var i=Rc;Rc|=16;var n=bg();for(hc===t&&Lc===e||Ug(t,e);;)try{Ag();break}catch(e){Qg(t,e)}if(ql(),Rc=i,Gc.current=n,null!==mc)throw Error(a(261));return hc=null,Lc=0,Zc}function Ag(){for(;null!==mc;)Gg(mc)}function pg(){for(;null!==mc&&!xl();)Gg(mc)}function Gg(t){var e=vc(t.alternate,t,yc);t.memoizedProps=t.pendingProps,null===e?xg(t):mc=e,xc.current=null}function xg(t){var e=t;do{var i=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(i=tc(i,e,yc)))return void(mc=i);if(24!==(i=e).tag&&23!==i.tag||null===i.memoizedState||0!=(1073741824&yc)||0==(4&i.mode)){for(var n=0,l=i.child;null!==l;)n|=l.lanes|l.childLanes,l=l.sibling;i.childLanes=n}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(i=ec(e)))return i.flags&=2047,void(mc=i);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(mc=e);mc=e=t}while(null!==e);0===Zc&&(Zc=5)}function Rg(t){var e=Hl();return kl(99,hg.bind(null,t,e)),null}function hg(t,e){do{Lg()}while(null!==Pc);if(0!=(48&Rc))throw Error(a(327));var i=t.finishedWork;if(null===i)return null;if(t.finishedWork=null,t.finishedLanes=0,i===t.current)throw Error(a(177));t.callbackNode=null;var n=i.lanes|i.childLanes,l=n,s=t.pendingLanes&~l;t.pendingLanes=l,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=l,t.mutableReadLanes&=l,t.entangledLanes&=l,l=t.entanglements;for(var c=t.eventTimes,g=t.expirationTimes;0<s;){var I=31-we(s),u=1<<I;l[I]=0,c[I]=-1,g[I]=-1,s&=~u}if(null!==_c&&0==(24&n)&&_c.has(t)&&_c.delete(t),t===hc&&(mc=hc=null,Lc=0),1<i.flags?null!==i.lastEffect?(i.lastEffect.nextEffect=i,n=i.firstEffect):n=i:n=i.firstEffect,null!==n){if(l=Rc,Rc|=32,xc.current=null,Tn=Oe,rn(c=on())){if("selectionStart"in c)g={start:c.selectionStart,end:c.selectionEnd};else t:if(g=(g=c.ownerDocument)&&g.defaultView||window,(u=g.getSelection&&g.getSelection())&&0!==u.rangeCount){g=u.anchorNode,s=u.anchorOffset,I=u.focusNode,u=u.focusOffset;try{g.nodeType,I.nodeType}catch(t){g=null;break t}var d=0,o=-1,r=-1,B=0,F=0,C=c,U=null;e:for(;;){for(var Q;C!==g||0!==s&&3!==C.nodeType||(o=d+s),C!==I||0!==u&&3!==C.nodeType||(r=d+u),3===C.nodeType&&(d+=C.nodeValue.length),null!==(Q=C.firstChild);)U=C,C=Q;for(;;){if(C===c)break e;if(U===g&&++B===s&&(o=d),U===I&&++F===u&&(r=d),null!==(Q=C.nextSibling))break;U=(C=U).parentNode}C=Q}g=-1===o||-1===r?null:{start:o,end:r}}else g=null;g=g||{start:0,end:0}}else g=null;Yn={focusedElem:c,selectionRange:g},Oe=!1,ng=null,lg=!1,kc=n;do{try{mg()}catch(t){if(null===kc)throw Error(a(330));fg(kc,t),kc=kc.nextEffect}}while(null!==kc);ng=null,kc=n;do{try{for(c=t;null!==kc;){var b=kc.flags;if(16&b&&Ut(kc.stateNode,""),128&b){var V=kc.alternate;if(null!==V){var A=V.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(1038&b){case 2:Fc(kc),kc.flags&=-3;break;case 6:Fc(kc),kc.flags&=-3,bc(kc.alternate,kc);break;case 1024:kc.flags&=-1025;break;case 1028:kc.flags&=-1025,bc(kc.alternate,kc);break;case 4:bc(kc.alternate,kc);break;case 8:Qc(c,g=kc);var p=g.alternate;rc(g),null!==p&&rc(p)}kc=kc.nextEffect}}catch(t){if(null===kc)throw Error(a(330));fg(kc,t),kc=kc.nextEffect}}while(null!==kc);if(A=Yn,V=on(),b=A.focusedElem,c=A.selectionRange,V!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==c&&rn(b)&&(V=c.start,void 0===(A=c.end)&&(A=V),"selectionStart"in b?(b.selectionStart=V,b.selectionEnd=Math.min(A,b.value.length)):(A=(V=b.ownerDocument||document)&&V.defaultView||window).getSelection&&(A=A.getSelection(),g=b.textContent.length,p=Math.min(c.start,g),c=void 0===c.end?p:Math.min(c.end,g),!A.extend&&p>c&&(g=c,c=p,p=g),g=un(b,p),s=un(b,c),g&&s&&(1!==A.rangeCount||A.anchorNode!==g.node||A.anchorOffset!==g.offset||A.focusNode!==s.node||A.focusOffset!==s.offset)&&((V=V.createRange()).setStart(g.node,g.offset),A.removeAllRanges(),p>c?(A.addRange(V),A.extend(s.node,s.offset)):(V.setEnd(s.node,s.offset),A.addRange(V))))),V=[];for(A=b;A=A.parentNode;)1===A.nodeType&&V.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<V.length;b++)(A=V[b]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Oe=!!Tn,Yn=Tn=null,t.current=i,kc=n;do{try{for(b=t;null!==kc;){var G=kc.flags;if(36&G&&uc(b,kc.alternate,kc),128&G){V=void 0;var x=kc.ref;if(null!==x){var R=kc.stateNode;switch(kc.tag){case 5:V=R;break;default:V=R}"function"==typeof x?x(V):x.current=V}}kc=kc.nextEffect}}catch(t){if(null===kc)throw Error(a(330));fg(kc,t),kc=kc.nextEffect}}while(null!==kc);kc=null,El(),Rc=l}else t.current=i;if(Dc)Dc=!1,Pc=t,Oc=e;else for(kc=n;null!==kc;)e=kc.nextEffect,kc.nextEffect=null,8&kc.flags&&((G=kc).sibling=null,G.stateNode=null),kc=e;if(0===(n=t.pendingLanes)&&(zc=null),1===n?t===$c?qc++:(qc=0,$c=t):qc=0,i=i.stateNode,Vl&&"function"==typeof Vl.onCommitFiberRoot)try{Vl.onCommitFiberRoot(bl,i,void 0,64==(64&i.current.flags))}catch(t){}if(Ig(t,Jl()),wc)throw wc=!1,t=Mc,Mc=null,t;return 0!=(8&Rc)||Ml(),null}function mg(){for(;null!==kc;){var t=kc.alternate;lg||null===ng||(0!=(8&kc.flags)?$t(kc,ng)&&(lg=!0):13===kc.tag&&Ac(t,kc)&&$t(kc,ng)&&(lg=!0));var e=kc.flags;0!=(256&e)&&Ic(t,kc),0==(512&e)||Dc||(Dc=!0,wl(97,(function(){return Lg(),null}))),kc=kc.nextEffect}}function Lg(){if(90!==Oc){var t=97<Oc?97:Oc;return Oc=90,kl(t,Zg)}return!1}function yg(t,e){jc.push(e,t),Dc||(Dc=!0,wl(97,(function(){return Lg(),null})))}function Sg(t,e){Kc.push(e,t),Dc||(Dc=!0,wl(97,(function(){return Lg(),null})))}function Zg(){if(null===Pc)return!1;var t=Pc;if(Pc=null,0!=(48&Rc))throw Error(a(331));var e=Rc;Rc|=32;var i=Kc;Kc=[];for(var n=0;n<i.length;n+=2){var l=i[n],s=i[n+1],c=l.destroy;if(l.destroy=void 0,"function"==typeof c)try{c()}catch(t){if(null===s)throw Error(a(330));fg(s,t)}}for(i=jc,jc=[],n=0;n<i.length;n+=2){l=i[n],s=i[n+1];try{var g=l.create;l.destroy=g()}catch(t){if(null===s)throw Error(a(330));fg(s,t)}}for(g=t.current.firstEffect;null!==g;)t=g.nextEffect,g.nextEffect=null,8&g.flags&&(g.sibling=null,g.stateNode=null),g=t;return Rc=e,Ml(),!0}function Xg(t,e,i){cs(t,e=sc(0,e=ic(i,e),1)),e=sg(),null!==(t=gg(t,1))&&(ke(t,1,e),Ig(t,e))}function fg(t,e){if(3===t.tag)Xg(t,t,e);else for(var i=t.return;null!==i;){if(3===i.tag){Xg(i,t,e);break}if(1===i.tag){var n=i.stateNode;if("function"==typeof i.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===zc||!zc.has(n))){var l=ac(i,t=ic(e,t),1);if(cs(i,l),l=sg(),null!==(i=gg(i,1)))ke(i,1,l),Ig(i,l);else if("function"==typeof n.componentDidCatch&&(null===zc||!zc.has(n)))try{n.componentDidCatch(e,t)}catch(t){}break}}i=i.return}}function Eg(t,e,i){var n=t.pingCache;null!==n&&n.delete(e),e=sg(),t.pingedLanes|=t.suspendedLanes&i,hc===t&&(Lc&i)===i&&(4===Zc||3===Zc&&(62914560&Lc)===Lc&&500>Jl()-Yc?Ug(t,0):Nc|=i),Ig(t,e)}function Wg(t,e){var i=t.stateNode;null!==i&&i.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hl()?1:2:(0===eg&&(eg=fc),0===(e=He(62914560&~eg))&&(e=4194304))),i=sg(),null!==(t=gg(t,e))&&(ke(t,e,i),Ig(t,i))}function Ng(t,e,i,n){this.tag=t,this.key=i,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Tg(t,e,i,n){return new Ng(t,e,i,n)}function Yg(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Jg(t,e){var i=t.alternate;return null===i?((i=Tg(t.tag,e,t.key,t.mode)).elementType=t.elementType,i.type=t.type,i.stateNode=t.stateNode,i.alternate=t,t.alternate=i):(i.pendingProps=e,i.type=t.type,i.flags=0,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null),i.childLanes=t.childLanes,i.lanes=t.lanes,i.child=t.child,i.memoizedProps=t.memoizedProps,i.memoizedState=t.memoizedState,i.updateQueue=t.updateQueue,e=t.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},i.sibling=t.sibling,i.index=t.index,i.ref=t.ref,i}function Hg(t,e,i,n,l,s){var c=2;if(n=t,"function"==typeof t)Yg(t)&&(c=1);else if("string"==typeof t)c=5;else t:switch(t){case x:return vg(i.children,l,s,e);case N:c=8,l|=16;break;case R:c=8,l|=1;break;case h:return(t=Tg(12,i,e,8|l)).elementType=h,t.type=h,t.lanes=s,t;case S:return(t=Tg(13,i,e,l)).type=S,t.elementType=S,t.lanes=s,t;case Z:return(t=Tg(19,i,e,l)).elementType=Z,t.lanes=s,t;case T:return kg(i,l,s,e);case Y:return(t=Tg(24,i,e,l)).elementType=Y,t.lanes=s,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case m:c=10;break t;case L:c=9;break t;case y:c=11;break t;case X:c=14;break t;case f:c=16,n=null;break t;case E:c=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Tg(c,i,e,l)).elementType=t,e.type=n,e.lanes=s,e}function vg(t,e,i,n){return(t=Tg(7,t,n,e)).lanes=i,t}function kg(t,e,i,n){return(t=Tg(23,t,n,e)).elementType=T,t.lanes=i,t}function wg(t,e,i){return(t=Tg(6,t,null,e)).lanes=i,t}function Mg(t,e,i){return(e=Tg(4,null!==t.children?t.children:[],t.key,e)).lanes=i,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function zg(t,e,i){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=i,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=ve(0),this.expirationTimes=ve(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ve(0),this.mutableSourceEagerHydrationData=null}function Dg(t,e,i){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:G,key:null==n?null:""+n,children:t,containerInfo:e,implementation:i}}function Pg(t,e,i,n){var l=e.current,s=sg(),c=ag(l);t:if(i){e:{if(jt(i=i._reactInternals)!==i||1!==i.tag)throw Error(a(170));var g=i;do{switch(g.tag){case 3:g=g.stateNode.context;break e;case 1:if(rl(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break e}}g=g.return}while(null!==g);throw Error(a(171))}if(1===i.tag){var I=i.type;if(rl(I)){i=Cl(i,I,g);break t}}i=g}else i=gl;return null===e.context?e.context=i:e.pendingContext=i,(e=as(s,c)).payload={element:t},null!==(n=void 0===n?null:n)&&(e.callback=n),cs(l,e),cg(l,c,s),c}function Og(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function jg(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var i=t.retryLane;t.retryLane=0!==i&&i<e?i:e}}function Kg(t,e){jg(t,e),(t=t.alternate)&&jg(t,e)}function _g(t,e,i){var n=null!=i&&null!=i.hydrationOptions&&i.hydrationOptions.mutableSources||null;if(i=new zg(t,e,null!=i&&!0===i.hydrate),e=Tg(3,null,null,2===e?7:1===e?3:0),i.current=e,e.stateNode=i,ls(e),t[Kn]=i.current,Ln(8===t.nodeType?t.parentNode:t),n)for(t=0;t<n.length;t++){var l=(e=n[t])._getVersion;l=l(e._source),null==i.mutableSourceEagerHydrationData?i.mutableSourceEagerHydrationData=[e,l]:i.mutableSourceEagerHydrationData.push(e,l)}this._internalRoot=i}function qg(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function $g(t,e,i,n,l){var s=i._reactRootContainer;if(s){var a=s._internalRoot;if("function"==typeof l){var c=l;l=function(){var t=Og(a);c.call(t)}}Pg(e,a,t,l)}else{if(s=i._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var i;i=t.lastChild;)t.removeChild(i);return new _g(t,0,e?{hydrate:!0}:void 0)}(i,n),a=s._internalRoot,"function"==typeof l){var g=l;l=function(){var t=Og(a);g.call(t)}}Bg((function(){Pg(e,a,t,l)}))}return Og(a)}function tI(t,e){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!qg(e))throw Error(a(200));return Dg(t,e,null,i)}vc=function(t,e,i){var n=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||ul.current)Xa=!0;else{if(0==(i&n)){switch(Xa=!1,e.tag){case 3:ka(e),ws();break;case 5:Zs(e);break;case 1:rl(e.type)&&Ul(e);break;case 4:ys(e,e.stateNode.containerInfo);break;case 10:n=e.memoizedProps.value;var l=e.type._context;cl(Ol,l._currentValue),l._currentValue=n;break;case 13:if(null!==e.memoizedState)return 0!=(i&e.child.childLanes)?Pa(t,e,i):(cl(fs,1&fs.current),null!==(e=qa(t,e,i))?e.sibling:null);cl(fs,1&fs.current);break;case 19:if(n=0!=(i&e.childLanes),0!=(64&t.flags)){if(n)return _a(t,e,i);e.flags|=64}if(null!==(l=e.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),cl(fs,fs.current),n)break;return null;case 23:case 24:return e.lanes=0,Ta(t,e,i)}return qa(t,e,i)}Xa=0!=(16384&t.flags)}else Xa=!1;switch(e.lanes=0,e.tag){case 2:if(n=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,l=ol(e,Il.current),es(e,i),l=ia(null,e,n,t,l,i),e.flags|=1,"object"==typeof l&&null!==l&&"function"==typeof l.render&&void 0===l.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,rl(n)){var s=!0;Ul(e)}else s=!1;e.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,ls(e);var c=n.getDerivedStateFromProps;"function"==typeof c&&os(e,n,c,t),l.updater=rs,e.stateNode=l,l._reactInternals=e,Us(e,n,t,i),e=va(null,e,n,!0,s,i)}else e.tag=0,fa(null,e,l,i),e=e.child;return e;case 16:l=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,l=(s=l._init)(l._payload),e.type=l,s=e.tag=function(t){if("function"==typeof t)return Yg(t)?1:0;if(null!=t){if((t=t.$$typeof)===y)return 11;if(t===X)return 14}return 2}(l),t=Pl(l,t),s){case 0:e=Ja(null,e,l,t,i);break t;case 1:e=Ha(null,e,l,t,i);break t;case 11:e=Ea(null,e,l,t,i);break t;case 14:e=Wa(null,e,l,Pl(l.type,t),n,i);break t}throw Error(a(306,l,""))}return e;case 0:return n=e.type,l=e.pendingProps,Ja(t,e,n,l=e.elementType===n?l:Pl(n,l),i);case 1:return n=e.type,l=e.pendingProps,Ha(t,e,n,l=e.elementType===n?l:Pl(n,l),i);case 3:if(ka(e),n=e.updateQueue,null===t||null===n)throw Error(a(282));if(n=e.pendingProps,l=null!==(l=e.memoizedState)?l.element:null,ss(t,e),Is(e,n,null,i),(n=e.memoizedState.element)===l)ws(),e=qa(t,e,i);else{if((s=(l=e.stateNode).hydrate)&&(Ns=Mn(e.stateNode.containerInfo.firstChild),Ws=e,s=Ts=!0),s){if(null!=(t=l.mutableSourceEagerHydrationData))for(l=0;l<t.length;l+=2)(s=t[l])._workInProgressVersionPrimary=t[l+1],Ms.push(s);for(i=Gs(e,null,n,i),e.child=i;i;)i.flags=-3&i.flags|1024,i=i.sibling}else fa(t,e,n,i),ws();e=e.child}return e;case 5:return Zs(e),null===t&&Hs(e),n=e.type,l=e.pendingProps,s=null!==t?t.memoizedProps:null,c=l.children,Hn(n,l)?c=null:null!==s&&Hn(n,s)&&(e.flags|=16),Ya(t,e),fa(t,e,c,i),e.child;case 6:return null===t&&Hs(e),null;case 13:return Pa(t,e,i);case 4:return ys(e,e.stateNode.containerInfo),n=e.pendingProps,null===t?e.child=ps(e,null,n,i):fa(t,e,n,i),e.child;case 11:return n=e.type,l=e.pendingProps,Ea(t,e,n,l=e.elementType===n?l:Pl(n,l),i);case 7:return fa(t,e,e.pendingProps,i),e.child;case 8:case 12:return fa(t,e,e.pendingProps.children,i),e.child;case 10:t:{n=e.type._context,l=e.pendingProps,c=e.memoizedProps,s=l.value;var g=e.type._context;if(cl(Ol,g._currentValue),g._currentValue=s,null!==c)if(g=c.value,0==(s=an(g,s)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(g,s):1073741823))){if(c.children===l.children&&!ul.current){e=qa(t,e,i);break t}}else for(null!==(g=e.child)&&(g.return=e);null!==g;){var I=g.dependencies;if(null!==I){c=g.child;for(var u=I.firstContext;null!==u;){if(u.context===n&&0!=(u.observedBits&s)){1===g.tag&&((u=as(-1,i&-i)).tag=2,cs(g,u)),g.lanes|=i,null!==(u=g.alternate)&&(u.lanes|=i),ts(g.return,i),I.lanes|=i;break}u=u.next}}else c=10===g.tag&&g.type===e.type?null:g.child;if(null!==c)c.return=g;else for(c=g;null!==c;){if(c===e){c=null;break}if(null!==(g=c.sibling)){g.return=c.return,c=g;break}c=c.return}g=c}fa(t,e,l.children,i),e=e.child}return e;case 9:return l=e.type,n=(s=e.pendingProps).children,es(e,i),n=n(l=is(l,s.unstable_observedBits)),e.flags|=1,fa(t,e,n,i),e.child;case 14:return s=Pl(l=e.type,e.pendingProps),Wa(t,e,l,s=Pl(l.type,s),n,i);case 15:return Na(t,e,e.type,e.pendingProps,n,i);case 17:return n=e.type,l=e.pendingProps,l=e.elementType===n?l:Pl(n,l),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,rl(n)?(t=!0,Ul(e)):t=!1,es(e,i),Fs(e,n,l),Us(e,n,l,i),va(null,e,n,!0,t,i);case 19:return _a(t,e,i);case 23:case 24:return Ta(t,e,i)}throw Error(a(156,e.tag))},_g.prototype.render=function(t){Pg(t,this._internalRoot,null,null)},_g.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Pg(null,t,null,(function(){e[Kn]=null}))},te=function(t){13===t.tag&&(cg(t,4,sg()),Kg(t,4))},ee=function(t){13===t.tag&&(cg(t,67108864,sg()),Kg(t,67108864))},ie=function(t){if(13===t.tag){var e=sg(),i=ag(t);cg(t,i,e),Kg(t,i)}},ne=function(t,e){return e()},ht=function(t,e,i){switch(e){case"input":if(it(t,i),e=i.name,"radio"===i.type&&null!=e){for(i=t;i.parentNode;)i=i.parentNode;for(i=i.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<i.length;e++){var n=i[e];if(n!==t&&n.form===t.form){var l=el(n);if(!l)throw Error(a(90));_(n),it(n,l)}}}break;case"textarea":It(t,i);break;case"select":null!=(e=i.value)&&at(t,!!i.multiple,e,!1)}},Xt=rg,ft=function(t,e,i,n,l){var s=Rc;Rc|=4;try{return kl(98,t.bind(null,e,i,n,l))}finally{0===(Rc=s)&&(Hc(),Ml())}},Et=function(){0==(49&Rc)&&(function(){if(null!==_c){var t=_c;_c=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,Ig(t,Jl())}))}Ml()}(),Lg())},Wt=function(t,e){var i=Rc;Rc|=2;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Ml())}};var eI={Events:[$n,tl,el,St,Zt,Lg,{current:!1}]},iI={findFiberByHostInstance:qn,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},nI={bundleType:iI.bundleType,version:iI.version,rendererPackageName:iI.rendererPackageName,rendererConfig:iI.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=qt(t))?null:t.stateNode},findFiberByHostInstance:iI.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lI=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lI.isDisabled&&lI.supportsFiber)try{bl=lI.inject(nI),Vl=lI}catch(Ft){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eI,e.createPortal=tI,e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw Error(a(268,Object.keys(t)))}return null===(t=qt(e))?null:t.stateNode},e.flushSync=function(t,e){var i=Rc;if(0!=(48&i))return t(e);Rc|=1;try{if(t)return kl(99,t.bind(null,e))}finally{Rc=i,Ml()}},e.hydrate=function(t,e,i){if(!qg(e))throw Error(a(200));return $g(null,t,e,!0,i)},e.render=function(t,e,i){if(!qg(e))throw Error(a(200));return $g(null,t,e,!1,i)},e.unmountComponentAtNode=function(t){if(!qg(t))throw Error(a(40));return!!t._reactRootContainer&&(Bg((function(){$g(null,null,t,!1,(function(){t._reactRootContainer=null,t[Kn]=null}))})),!0)},e.unstable_batchedUpdates=rg,e.unstable_createPortal=function(t,e){return tI(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},e.unstable_renderSubtreeIntoContainer=function(t,e,i,n){if(!qg(i))throw Error(a(200));if(null==t||void 0===t._reactInternals)throw Error(a(38));return $g(t,e,i,!1,n)},e.version="17.0.2"},3935:(t,e,i)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=i(4448)},9921:(t,e)=>{"use strict";var i="function"==typeof Symbol&&Symbol.for,n=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,a=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,g=i?Symbol.for("react.provider"):60109,I=i?Symbol.for("react.context"):60110,u=i?Symbol.for("react.async_mode"):60111,d=i?Symbol.for("react.concurrent_mode"):60111,o=i?Symbol.for("react.forward_ref"):60112,r=i?Symbol.for("react.suspense"):60113,B=i?Symbol.for("react.suspense_list"):60120,F=i?Symbol.for("react.memo"):60115,C=i?Symbol.for("react.lazy"):60116,U=i?Symbol.for("react.block"):60121,Q=i?Symbol.for("react.fundamental"):60117,b=i?Symbol.for("react.responder"):60118,V=i?Symbol.for("react.scope"):60119;function A(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case n:switch(t=t.type){case u:case d:case s:case c:case a:case r:return t;default:switch(t=t&&t.$$typeof){case I:case o:case C:case F:case g:return t;default:return e}}case l:return e}}}function p(t){return A(t)===d}e.AsyncMode=u,e.ConcurrentMode=d,e.ContextConsumer=I,e.ContextProvider=g,e.Element=n,e.ForwardRef=o,e.Fragment=s,e.Lazy=C,e.Memo=F,e.Portal=l,e.Profiler=c,e.StrictMode=a,e.Suspense=r,e.isAsyncMode=function(t){return p(t)||A(t)===u},e.isConcurrentMode=p,e.isContextConsumer=function(t){return A(t)===I},e.isContextProvider=function(t){return A(t)===g},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===n},e.isForwardRef=function(t){return A(t)===o},e.isFragment=function(t){return A(t)===s},e.isLazy=function(t){return A(t)===C},e.isMemo=function(t){return A(t)===F},e.isPortal=function(t){return A(t)===l},e.isProfiler=function(t){return A(t)===c},e.isStrictMode=function(t){return A(t)===a},e.isSuspense=function(t){return A(t)===r},e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===s||t===d||t===c||t===a||t===r||t===B||"object"==typeof t&&null!==t&&(t.$$typeof===C||t.$$typeof===F||t.$$typeof===g||t.$$typeof===I||t.$$typeof===o||t.$$typeof===Q||t.$$typeof===b||t.$$typeof===V||t.$$typeof===U)},e.typeOf=A},9864:(t,e,i)=>{"use strict";t.exports=i(9921)},8928:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Provider:()=>u,ReactReduxContext:()=>l,batch:()=>$.unstable_batchedUpdates,connect:()=>w,connectAdvanced:()=>R,createDispatchHook:()=>P,createSelectorHook:()=>K,createStoreHook:()=>z,shallowEqual:()=>m,useDispatch:()=>O,useSelector:()=>q,useStore:()=>D});var n=i(7294),l=(i(5697),n.createContext(null)),s=function(t){t()},a=function(){return s},c={notify:function(){},get:function(){return[]}};function g(t,e){var i,n=c;function l(){g.onStateChange&&g.onStateChange()}function s(){i||(i=e?e.addNestedSub(l):t.subscribe(l),n=function(){var t=a(),e=null,i=null;return{clear:function(){e=null,i=null},notify:function(){t((function(){for(var t=e;t;)t.callback(),t=t.next}))},get:function(){for(var t=[],i=e;i;)t.push(i),i=i.next;return t},subscribe:function(t){var n=!0,l=i={callback:t,next:null,prev:i};return l.prev?l.prev.next=l:e=l,function(){n&&null!==e&&(n=!1,l.next?l.next.prev=l.prev:i=l.prev,l.prev?l.prev.next=l.next:e=l.next)}}}}())}var g={addNestedSub:function(t){return s(),n.subscribe(t)},notifyNestedSubs:function(){n.notify()},handleChangeWrapper:l,isSubscribed:function(){return Boolean(i)},trySubscribe:s,tryUnsubscribe:function(){i&&(i(),i=void 0,n.clear(),n=c)},getListeners:function(){return n}};return g}var I="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?n.useLayoutEffect:n.useEffect;const u=function(t){var e=t.store,i=t.context,s=t.children,a=(0,n.useMemo)((function(){var t=g(e);return t.onStateChange=t.notifyNestedSubs,{store:e,subscription:t}}),[e]),c=(0,n.useMemo)((function(){return e.getState()}),[e]);I((function(){var t=a.subscription;return t.trySubscribe(),c!==e.getState()&&t.notifyNestedSubs(),function(){t.tryUnsubscribe(),t.onStateChange=null}}),[a,c]);var u=i||l;return n.createElement(u.Provider,{value:a},s)};function d(){return(d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}function o(t,e){if(null==t)return{};var i,n,l={},s=Object.keys(t);for(n=0;n<s.length;n++)i=s[n],e.indexOf(i)>=0||(l[i]=t[i]);return l}var r=i(8679),B=i.n(r),F=i(9864),C=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],U=["reactReduxForwardedRef"],Q=[],b=[null,null];function V(t,e){var i=t[1];return[e.payload,i+1]}function A(t,e,i){I((function(){return t.apply(void 0,e)}),i)}function p(t,e,i,n,l,s,a){t.current=n,e.current=l,i.current=!1,s.current&&(s.current=null,a())}function G(t,e,i,n,l,s,a,c,g,I){if(t){var u=!1,d=null,o=function(){if(!u){var t,i,o=e.getState();try{t=n(o,l.current)}catch(t){i=t,d=t}i||(d=null),t===s.current?a.current||g():(s.current=t,c.current=t,a.current=!0,I({type:"STORE_UPDATED",payload:{error:i}}))}};return i.onStateChange=o,i.trySubscribe(),o(),function(){if(u=!0,i.tryUnsubscribe(),i.onStateChange=null,d)throw d}}}var x=function(){return[null,0]};function R(t,e){void 0===e&&(e={});var i=e,s=i.getDisplayName,a=void 0===s?function(t){return"ConnectAdvanced("+t+")"}:s,c=i.methodName,I=void 0===c?"connectAdvanced":c,u=i.renderCountProp,r=void 0===u?void 0:u,R=i.shouldHandleStateChanges,h=void 0===R||R,m=i.storeKey,L=void 0===m?"store":m,y=(i.withRef,i.forwardRef),S=void 0!==y&&y,Z=i.context,X=void 0===Z?l:Z,f=o(i,C),E=X;return function(e){var i=e.displayName||e.name||"Component",l=a(i),s=d({},f,{getDisplayName:a,methodName:I,renderCountProp:r,shouldHandleStateChanges:h,storeKey:L,displayName:l,wrappedComponentName:i,WrappedComponent:e}),c=f.pure,u=c?n.useMemo:function(t){return t()};function C(i){var l=(0,n.useMemo)((function(){var t=i.reactReduxForwardedRef,e=o(i,U);return[i.context,t,e]}),[i]),a=l[0],c=l[1],I=l[2],r=(0,n.useMemo)((function(){return a&&a.Consumer&&(0,F.isContextConsumer)(n.createElement(a.Consumer,null))?a:E}),[a,E]),B=(0,n.useContext)(r),C=Boolean(i.store)&&Boolean(i.store.getState)&&Boolean(i.store.dispatch);Boolean(B)&&Boolean(B.store);var R=C?i.store:B.store,m=(0,n.useMemo)((function(){return function(e){return t(e.dispatch,s)}(R)}),[R]),L=(0,n.useMemo)((function(){if(!h)return b;var t=g(R,C?null:B.subscription),e=t.notifyNestedSubs.bind(t);return[t,e]}),[R,C,B]),y=L[0],S=L[1],Z=(0,n.useMemo)((function(){return C?B:d({},B,{subscription:y})}),[C,B,y]),X=(0,n.useReducer)(V,Q,x),f=X[0][0],W=X[1];if(f&&f.error)throw f.error;var N=(0,n.useRef)(),T=(0,n.useRef)(I),Y=(0,n.useRef)(),J=(0,n.useRef)(!1),H=u((function(){return Y.current&&I===T.current?Y.current:m(R.getState(),I)}),[R,f,I]);A(p,[T,N,J,I,H,Y,S]),A(G,[h,R,y,m,T,N,J,Y,S,W],[R,y,m]);var v=(0,n.useMemo)((function(){return n.createElement(e,d({},H,{ref:c}))}),[c,e,H]);return(0,n.useMemo)((function(){return h?n.createElement(r.Provider,{value:Z},v):v}),[r,v,Z])}var R=c?n.memo(C):C;if(R.WrappedComponent=e,R.displayName=C.displayName=l,S){var m=n.forwardRef((function(t,e){return n.createElement(R,d({},t,{reactReduxForwardedRef:e}))}));return m.displayName=l,m.WrappedComponent=e,B()(m,e)}return B()(R,e)}}function h(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function m(t,e){if(h(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),n=Object.keys(e);if(i.length!==n.length)return!1;for(var l=0;l<i.length;l++)if(!Object.prototype.hasOwnProperty.call(e,i[l])||!h(t[i[l]],e[i[l]]))return!1;return!0}function L(t){return function(e,i){var n=t(e,i);function l(){return n}return l.dependsOnOwnProps=!1,l}}function y(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function S(t,e){return function(e,i){i.displayName;var n=function(t,e){return n.dependsOnOwnProps?n.mapToProps(t,e):n.mapToProps(t)};return n.dependsOnOwnProps=!0,n.mapToProps=function(e,i){n.mapToProps=t,n.dependsOnOwnProps=y(t);var l=n(e,i);return"function"==typeof l&&(n.mapToProps=l,n.dependsOnOwnProps=y(l),l=n(e,i)),l},n}}const Z=[function(t){return"function"==typeof t?S(t):void 0},function(t){return t?void 0:L((function(t){return{dispatch:t}}))},function(t){return t&&"object"==typeof t?L((function(e){return function(t,e){var i={},n=function(n){var l=t[n];"function"==typeof l&&(i[n]=function(){return e(l.apply(void 0,arguments))})};for(var l in t)n(l);return i}(t,e)})):void 0}],X=[function(t){return"function"==typeof t?S(t):void 0},function(t){return t?void 0:L((function(){return{}}))}];function f(t,e,i){return d({},i,t,e)}const E=[function(t){return"function"==typeof t?function(t){return function(e,i){i.displayName;var n,l=i.pure,s=i.areMergedPropsEqual,a=!1;return function(e,i,c){var g=t(e,i,c);return a?l&&s(g,n)||(n=g):(a=!0,n=g),n}}}(t):void 0},function(t){return t?void 0:function(){return f}}];var W=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function N(t,e,i,n){return function(l,s){return i(t(l,s),e(n,s),s)}}function T(t,e,i,n,l){var s,a,c,g,I,u=l.areStatesEqual,d=l.areOwnPropsEqual,o=l.areStatePropsEqual,r=!1;return function(l,B){return r?function(l,r){var B,F,C=!d(r,a),U=!u(l,s);return s=l,a=r,C&&U?(c=t(s,a),e.dependsOnOwnProps&&(g=e(n,a)),I=i(c,g,a)):C?(t.dependsOnOwnProps&&(c=t(s,a)),e.dependsOnOwnProps&&(g=e(n,a)),I=i(c,g,a)):U?(B=t(s,a),F=!o(B,c),c=B,F&&(I=i(c,g,a)),I):I}(l,B):(c=t(s=l,a=B),g=e(n,a),I=i(c,g,a),r=!0,I)}}function Y(t,e){var i=e.initMapStateToProps,n=e.initMapDispatchToProps,l=e.initMergeProps,s=o(e,W),a=i(t,s),c=n(t,s),g=l(t,s);return(s.pure?T:N)(a,c,g,t,s)}var J=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function H(t,e,i){for(var n=e.length-1;n>=0;n--){var l=e[n](t);if(l)return l}return function(e,n){throw new Error("Invalid value of type "+typeof t+" for "+i+" argument when connecting component "+n.wrappedComponentName+".")}}function v(t,e){return t===e}function k(t){var e=void 0===t?{}:t,i=e.connectHOC,n=void 0===i?R:i,l=e.mapStateToPropsFactories,s=void 0===l?X:l,a=e.mapDispatchToPropsFactories,c=void 0===a?Z:a,g=e.mergePropsFactories,I=void 0===g?E:g,u=e.selectorFactory,r=void 0===u?Y:u;return function(t,e,i,l){void 0===l&&(l={});var a=l,g=a.pure,u=void 0===g||g,B=a.areStatesEqual,F=void 0===B?v:B,C=a.areOwnPropsEqual,U=void 0===C?m:C,Q=a.areStatePropsEqual,b=void 0===Q?m:Q,V=a.areMergedPropsEqual,A=void 0===V?m:V,p=o(a,J),G=H(t,s,"mapStateToProps"),x=H(e,c,"mapDispatchToProps"),R=H(i,I,"mergeProps");return n(r,d({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:G,initMapDispatchToProps:x,initMergeProps:R,pure:u,areStatesEqual:F,areOwnPropsEqual:U,areStatePropsEqual:b,areMergedPropsEqual:A},p))}}const w=k();function M(){return(0,n.useContext)(l)}function z(t){void 0===t&&(t=l);var e=t===l?M:function(){return(0,n.useContext)(t)};return function(){return e().store}}var D=z();function P(t){void 0===t&&(t=l);var e=t===l?D:z(t);return function(){return e().dispatch}}var O=P(),j=function(t,e){return t===e};function K(t){void 0===t&&(t=l);var e=t===l?M:function(){return(0,n.useContext)(t)};return function(t,i){void 0===i&&(i=j);var l=e(),s=function(t,e,i,l){var s,a=(0,n.useReducer)((function(t){return t+1}),0)[1],c=(0,n.useMemo)((function(){return g(i,l)}),[i,l]),u=(0,n.useRef)(),d=(0,n.useRef)(),o=(0,n.useRef)(),r=(0,n.useRef)(),B=i.getState();try{if(t!==d.current||B!==o.current||u.current){var F=t(B);s=void 0!==r.current&&e(F,r.current)?r.current:F}else s=r.current}catch(t){throw u.current&&(t.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),t}return I((function(){d.current=t,o.current=B,r.current=s,u.current=void 0})),I((function(){function t(){try{var t=i.getState();if(t===o.current)return;var n=d.current(t);if(e(n,r.current))return;r.current=n,o.current=t}catch(t){u.current=t}a()}return c.onStateChange=t,c.trySubscribe(),t(),function(){return c.tryUnsubscribe()}}),[i,c]),s}(t,i,l.store,l.subscription);return(0,n.useDebugValue)(s),s}}var _,q=K(),$=i(3935);_=$.unstable_batchedUpdates,s=_},904:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i(7294);function l(t,e,i){return t+" "+(1!==t?e+"s":e)+" "+i}function s(t){const e=new Date(t);if(!Number.isNaN(e.valueOf()))return e;const i=String(t).match(/\d+/g);if(null==i||i.length<=2)return e;{const[t,e,...n]=i.map((t=>parseInt(t))),l=[t,e-1,...n];return new Date(Date.UTC(...l))}}function a(){return(a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}const c=3600,g=86400,I=7*g,u=30*g,d=365*g;function o({date:t,formatter:e=l,component:i="time",live:o=!0,minPeriod:r=0,maxPeriod:B=I,title:F,now:C=(()=>Date.now()),...U}){const Q=function(){const[t,e]=(0,n.useState)(0);return(0,n.useCallback)((()=>{e((t=>t+1))}),[])}();(0,n.useEffect)((()=>{if(!o)return;let e;const i=n=>{const l=s(t).valueOf();if(!l)return void console.warn("[react-timeago] Invalid Date provided");const a=C(),I=Math.round(Math.abs(a-l)/1e3),u=I<60?1e3:I<c?6e4:I<g?36e5:6048e5,d=Math.min(Math.max(u,1e3*r),1e3*B);d&&(e&&clearTimeout(e),e=setTimeout(i,d)),n||Q()};return i(!0),()=>{clearTimeout(e)}}),[t,Q,o,B,r,C]);const b=i,V=s(t).valueOf();if(!V)return null;const A=C(),p=Math.round(Math.abs(A-V)/1e3),G=V<A?"ago":"from now",[x,R]=p<60?[Math.round(p),"second"]:p<c?[Math.round(p/60),"minute"]:p<g?[Math.round(p/c),"hour"]:p<I?[Math.round(p/g),"day"]:p<u?[Math.round(p/I),"week"]:p<d?[Math.round(p/u),"month"]:[Math.round(p/d),"year"],h=void 0===F?"string"==typeof t?t:s(t).toISOString().substr(0,16).replace("T"," "):F,m="time"===b?{...U,dateTime:s(t).toISOString()}:U,L=l.bind(null,x,R,G);return n.createElement(b,a({},m,{title:h}),e(x,R,G,V,L,C))}},2408:(t,e,i)=>{"use strict";var n=i(7418),l=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,g=60112;e.Suspense=60113;var I=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;l=d("react.element"),s=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),c=d("react.context"),g=d("react.forward_ref"),e.Suspense=d("react.suspense"),I=d("react.memo"),u=d("react.lazy")}var o="function"==typeof Symbol&&Symbol.iterator;function r(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};function C(t,e,i){this.props=t,this.context=e,this.refs=F,this.updater=i||B}function U(){}function Q(t,e,i){this.props=t,this.context=e,this.refs=F,this.updater=i||B}C.prototype.isReactComponent={},C.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(r(85));this.updater.enqueueSetState(this,t,e,"setState")},C.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},U.prototype=C.prototype;var b=Q.prototype=new U;b.constructor=Q,n(b,C.prototype),b.isPureReactComponent=!0;var V={current:null},A=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function G(t,e,i){var n,s={},a=null,c=null;if(null!=e)for(n in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)A.call(e,n)&&!p.hasOwnProperty(n)&&(s[n]=e[n]);var g=arguments.length-2;if(1===g)s.children=i;else if(1<g){for(var I=Array(g),u=0;u<g;u++)I[u]=arguments[u+2];s.children=I}if(t&&t.defaultProps)for(n in g=t.defaultProps)void 0===s[n]&&(s[n]=g[n]);return{$$typeof:l,type:t,key:a,ref:c,props:s,_owner:V.current}}function x(t){return"object"==typeof t&&null!==t&&t.$$typeof===l}var R=/\/+/g;function h(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function m(t,e,i,n,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var g=!1;if(null===t)g=!0;else switch(c){case"string":case"number":g=!0;break;case"object":switch(t.$$typeof){case l:case s:g=!0}}if(g)return a=a(g=t),t=""===n?"."+h(g,0):n,Array.isArray(a)?(i="",null!=t&&(i=t.replace(R,"$&/")+"/"),m(a,e,i,"",(function(t){return t}))):null!=a&&(x(a)&&(a=function(t,e){return{$$typeof:l,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||g&&g.key===a.key?"":(""+a.key).replace(R,"$&/")+"/")+t)),e.push(a)),1;if(g=0,n=""===n?".":n+":",Array.isArray(t))for(var I=0;I<t.length;I++){var u=n+h(c=t[I],I);g+=m(c,e,i,u,a)}else if("function"==typeof(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=o&&t[o]||t["@@iterator"])?t:null}(t)))for(t=u.call(t),I=0;!(c=t.next()).done;)g+=m(c=c.value,e,i,u=n+h(c,I++),a);else if("object"===c)throw e=""+t,Error(r(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return g}function L(t,e,i){if(null==t)return t;var n=[],l=0;return m(t,n,"","",(function(t){return e.call(i,t,l++)})),n}function y(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var S={current:null};function Z(){var t=S.current;if(null===t)throw Error(r(321));return t}var X={ReactCurrentDispatcher:S,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:V,IsSomeRendererActing:{current:!1},assign:n};e.Children={map:L,forEach:function(t,e,i){L(t,(function(){e.apply(this,arguments)}),i)},count:function(t){var e=0;return L(t,(function(){e++})),e},toArray:function(t){return L(t,(function(t){return t}))||[]},only:function(t){if(!x(t))throw Error(r(143));return t}},e.Component=C,e.PureComponent=Q,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=X,e.cloneElement=function(t,e,i){if(null==t)throw Error(r(267,t));var s=n({},t.props),a=t.key,c=t.ref,g=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,g=V.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var I=t.type.defaultProps;for(u in e)A.call(e,u)&&!p.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==I?I[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=i;else if(1<u){I=Array(u);for(var d=0;d<u;d++)I[d]=arguments[d+2];s.children=I}return{$$typeof:l,type:t.type,key:a,ref:c,props:s,_owner:g}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=G,e.createFactory=function(t){var e=G.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:g,render:t}},e.isValidElement=x,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:y}},e.memo=function(t,e){return{$$typeof:I,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return Z().useCallback(t,e)},e.useContext=function(t,e){return Z().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return Z().useEffect(t,e)},e.useImperativeHandle=function(t,e,i){return Z().useImperativeHandle(t,e,i)},e.useLayoutEffect=function(t,e){return Z().useLayoutEffect(t,e)},e.useMemo=function(t,e){return Z().useMemo(t,e)},e.useReducer=function(t,e,i){return Z().useReducer(t,e,i)},e.useRef=function(t){return Z().useRef(t)},e.useState=function(t){return Z().useState(t)},e.version="17.0.2"},7294:(t,e,i)=>{"use strict";t.exports=i(2408)},53:(t,e)=>{"use strict";var i,n,l,s;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var c=Date,g=c.now();e.unstable_now=function(){return c.now()-g}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var I=null,u=null,d=function(){if(null!==I)try{var t=e.unstable_now();I(!0,t),I=null}catch(t){throw setTimeout(d,0),t}};i=function(t){null!==I?setTimeout(i,0,t):(I=t,setTimeout(d,0))},n=function(t,e){u=setTimeout(t,e)},l=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},s=e.unstable_forceFrameRate=function(){}}else{var o=window.setTimeout,r=window.clearTimeout;if("undefined"!=typeof console){var B=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof B&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var F=!1,C=null,U=-1,Q=5,b=0;e.unstable_shouldYield=function(){return e.unstable_now()>=b},s=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Q=0<t?Math.floor(1e3/t):5};var V=new MessageChannel,A=V.port2;V.port1.onmessage=function(){if(null!==C){var t=e.unstable_now();b=t+Q;try{C(!0,t)?A.postMessage(null):(F=!1,C=null)}catch(t){throw A.postMessage(null),t}}else F=!1},i=function(t){C=t,F||(F=!0,A.postMessage(null))},n=function(t,i){U=o((function(){t(e.unstable_now())}),i)},l=function(){r(U),U=-1}}function p(t,e){var i=t.length;t.push(e);t:for(;;){var n=i-1>>>1,l=t[n];if(!(void 0!==l&&0<R(l,e)))break t;t[n]=e,t[i]=l,i=n}}function G(t){return void 0===(t=t[0])?null:t}function x(t){var e=t[0];if(void 0!==e){var i=t.pop();if(i!==e){t[0]=i;t:for(var n=0,l=t.length;n<l;){var s=2*(n+1)-1,a=t[s],c=s+1,g=t[c];if(void 0!==a&&0>R(a,i))void 0!==g&&0>R(g,a)?(t[n]=g,t[c]=i,n=c):(t[n]=a,t[s]=i,n=s);else{if(!(void 0!==g&&0>R(g,i)))break t;t[n]=g,t[c]=i,n=c}}}return e}return null}function R(t,e){var i=t.sortIndex-e.sortIndex;return 0!==i?i:t.id-e.id}var h=[],m=[],L=1,y=null,S=3,Z=!1,X=!1,f=!1;function E(t){for(var e=G(m);null!==e;){if(null===e.callback)x(m);else{if(!(e.startTime<=t))break;x(m),e.sortIndex=e.expirationTime,p(h,e)}e=G(m)}}function W(t){if(f=!1,E(t),!X)if(null!==G(h))X=!0,i(N);else{var e=G(m);null!==e&&n(W,e.startTime-t)}}function N(t,i){X=!1,f&&(f=!1,l()),Z=!0;var s=S;try{for(E(i),y=G(h);null!==y&&(!(y.expirationTime>i)||t&&!e.unstable_shouldYield());){var a=y.callback;if("function"==typeof a){y.callback=null,S=y.priorityLevel;var c=a(y.expirationTime<=i);i=e.unstable_now(),"function"==typeof c?y.callback=c:y===G(h)&&x(h),E(i)}else x(h);y=G(h)}if(null!==y)var g=!0;else{var I=G(m);null!==I&&n(W,I.startTime-i),g=!1}return g}finally{y=null,S=s,Z=!1}}var T=s;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){X||Z||(X=!0,i(N))},e.unstable_getCurrentPriorityLevel=function(){return S},e.unstable_getFirstCallbackNode=function(){return G(h)},e.unstable_next=function(t){switch(S){case 1:case 2:case 3:var e=3;break;default:e=S}var i=S;S=e;try{return t()}finally{S=i}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=T,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var i=S;S=t;try{return e()}finally{S=i}},e.unstable_scheduleCallback=function(t,s,a){var c=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?c+a:c,t){case 1:var g=-1;break;case 2:g=250;break;case 5:g=1073741823;break;case 4:g=1e4;break;default:g=5e3}return t={id:L++,callback:s,priorityLevel:t,startTime:a,expirationTime:g=a+g,sortIndex:-1},a>c?(t.sortIndex=a,p(m,t),null===G(h)&&t===G(m)&&(f?l():f=!0,n(W,a-c))):(t.sortIndex=g,p(h,t),X||Z||(X=!0,i(N))),t},e.unstable_wrapCallback=function(t){var e=S;return function(){var i=S;S=e;try{return t.apply(this,arguments)}finally{S=i}}}},3840:(t,e,i)=>{"use strict";t.exports=i(53)},6774:t=>{t.exports=function(t,e,i,n){var l=i?i.call(n,t,e):void 0;if(void 0!==l)return!!l;if(t===e)return!0;if("object"!=typeof t||!t||"object"!=typeof e||!e)return!1;var s=Object.keys(t),a=Object.keys(e);if(s.length!==a.length)return!1;for(var c=Object.prototype.hasOwnProperty.bind(e),g=0;g<s.length;g++){var I=s[g];if(!c(I))return!1;var u=t[I],d=e[I];if(!1===(l=i?i.call(n,u,d,I):void 0)||void 0===l&&u!==d)return!1}return!0}},9232:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>U});var n=i(3379),l=i.n(n),s=i(7795),a=i.n(s),c=i(569),g=i.n(c),I=i(3565),u=i.n(I),d=i(9216),o=i.n(d),r=i(4589),B=i.n(r),F=i(5735),C={};C.styleTagTransform=B(),C.setAttributes=u(),C.insert=g().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=o(),l()(F.Z,C);const U=F.Z&&F.Z.locals?F.Z.locals:void 0},3379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var s={},a=[],c=0;c<t.length;c++){var g=t[c],I=n.base?g[0]+n.base:g[0],u=s[I]||0,d="".concat(I," ").concat(u);s[I]=u+1;var o=i(d),r={css:g[1],media:g[2],sourceMap:g[3]};-1!==o?(e[o].references++,e[o].updater(r)):e.push({identifier:d,updater:l(r,n),references:1}),a.push(d)}return a}function l(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i.update(t=e)}else i.remove()}}t.exports=function(t,l){var s=n(t=t||[],l=l||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var c=i(s[a]);e[c].references--}for(var g=n(t,l),I=0;I<s.length;I++){var u=i(s[I]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=g}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},3565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n=i.css,l=i.media,s=i.sourceMap;l?t.setAttribute("media",l):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},9163:(t,e,i)=>{"use strict";i.r(e),i.d(e,{ServerStyleSheet:()=>vt,StyleSheetConsumer:()=>st,StyleSheetContext:()=>lt,StyleSheetManager:()=>dt,ThemeConsumer:()=>ft,ThemeContext:()=>Xt,ThemeProvider:()=>Et,__PRIVATE__:()=>Mt,createGlobalStyle:()=>Jt,css:()=>At,default:()=>zt,isStyledComponent:()=>A,keyframes:()=>Ht,useTheme:()=>wt,version:()=>G,withTheme:()=>kt});var n=i(9864),l=i(7294),s=i(6774),a=i.n(s);const c=function(t){function e(t,n,g,I,o){for(var r,B,F,C,V,p=0,G=0,x=0,R=0,h=0,X=0,E=F=r=0,N=0,T=0,Y=0,J=0,H=g.length,v=H-1,k="",w="",M="",z="";N<H;){if(B=g.charCodeAt(N),N===v&&0!==G+R+x+p&&(0!==G&&(B=47===G?10:47),R=x=p=0,H++,v++),0===G+R+x+p){if(N===v&&(0<T&&(k=k.replace(d,"")),0<k.trim().length)){switch(B){case 32:case 9:case 59:case 13:case 10:break;default:k+=g.charAt(N)}B=59}switch(B){case 123:for(r=(k=k.trim()).charCodeAt(0),F=1,J=++N;N<H;){switch(B=g.charCodeAt(N)){case 123:F++;break;case 125:F--;break;case 47:switch(B=g.charCodeAt(N+1)){case 42:case 47:t:{for(E=N+1;E<v;++E)switch(g.charCodeAt(E)){case 47:if(42===B&&42===g.charCodeAt(E-1)&&N+2!==E){N=E+1;break t}break;case 10:if(47===B){N=E+1;break t}}N=E}}break;case 91:B++;case 40:B++;case 34:case 39:for(;N++<v&&g.charCodeAt(N)!==B;);}if(0===F)break;N++}switch(F=g.substring(J,N),0===r&&(r=(k=k.replace(u,"").trim()).charCodeAt(0)),r){case 64:switch(0<T&&(k=k.replace(d,"")),B=k.charCodeAt(1)){case 100:case 109:case 115:case 45:T=n;break;default:T=Z}if(J=(F=e(n,T,F,B,o+1)).length,0<f&&(V=c(3,F,T=i(Z,k,Y),n,L,m,J,B,o,I),k=T.join(""),void 0!==V&&0===(J=(F=V.trim()).length)&&(B=0,F="")),0<J)switch(B){case 115:k=k.replace(A,a);case 100:case 109:case 45:F=k+"{"+F+"}";break;case 107:F=(k=k.replace(U,"$1 $2"))+"{"+F+"}",F=1===S||2===S&&s("@"+F,3)?"@-webkit-"+F+"@"+F:"@"+F;break;default:F=k+F,112===I&&(w+=F,F="")}else F="";break;default:F=e(n,i(n,k,Y),F,I,o+1)}M+=F,F=Y=T=E=r=0,k="",B=g.charCodeAt(++N);break;case 125:case 59:if(1<(J=(k=(0<T?k.replace(d,""):k).trim()).length))switch(0===E&&(r=k.charCodeAt(0),45===r||96<r&&123>r)&&(J=(k=k.replace(" ",":")).length),0<f&&void 0!==(V=c(1,k,n,t,L,m,w.length,I,o,I))&&0===(J=(k=V.trim()).length)&&(k="\0\0"),r=k.charCodeAt(0),B=k.charCodeAt(1),r){case 0:break;case 64:if(105===B||99===B){z+=k+g.charAt(N);break}default:58!==k.charCodeAt(J-1)&&(w+=l(k,r,B,k.charCodeAt(2)))}Y=T=E=r=0,k="",B=g.charCodeAt(++N)}}switch(B){case 13:case 10:47===G?G=0:0===1+r&&107!==I&&0<k.length&&(T=1,k+="\0"),0<f*W&&c(0,k,n,t,L,m,w.length,I,o,I),m=1,L++;break;case 59:case 125:if(0===G+R+x+p){m++;break}default:switch(m++,C=g.charAt(N),B){case 9:case 32:if(0===R+p+G)switch(h){case 44:case 58:case 9:case 32:C="";break;default:32!==B&&(C=" ")}break;case 0:C="\\0";break;case 12:C="\\f";break;case 11:C="\\v";break;case 38:0===R+G+p&&(T=Y=1,C="\f"+C);break;case 108:if(0===R+G+p+y&&0<E)switch(N-E){case 2:112===h&&58===g.charCodeAt(N-3)&&(y=h);case 8:111===X&&(y=X)}break;case 58:0===R+G+p&&(E=N);break;case 44:0===G+x+R+p&&(T=1,C+="\r");break;case 34:case 39:0===G&&(R=R===B?0:0===R?B:R);break;case 91:0===R+G+x&&p++;break;case 93:0===R+G+x&&p--;break;case 41:0===R+G+p&&x--;break;case 40:if(0===R+G+p){if(0===r)switch(2*h+3*X){case 533:break;default:r=1}x++}break;case 64:0===G+x+R+p+E+F&&(F=1);break;case 42:case 47:if(!(0<R+p+x))switch(G){case 0:switch(2*B+3*g.charCodeAt(N+1)){case 235:G=47;break;case 220:J=N,G=42}break;case 42:47===B&&42===h&&J+2!==N&&(33===g.charCodeAt(J+2)&&(w+=g.substring(J,N+1)),C="",G=0)}}0===G&&(k+=C)}X=h,h=B,N++}if(0<(J=w.length)){if(T=n,0<f&&void 0!==(V=c(2,w,T,t,L,m,J,I,o,I))&&0===(w=V).length)return z+w+M;if(w=T.join(",")+"{"+w+"}",0!=S*y){switch(2!==S||s(w,2)||(y=0),y){case 111:w=w.replace(b,":-moz-$1")+w;break;case 112:w=w.replace(Q,"::-webkit-input-$1")+w.replace(Q,"::-moz-$1")+w.replace(Q,":-ms-input-$1")+w}y=0}}return z+w+M}function i(t,e,i){var l=e.trim().split(F);e=l;var s=l.length,a=t.length;switch(a){case 0:case 1:var c=0;for(t=0===a?"":t[0]+" ";c<s;++c)e[c]=n(t,e[c],i).trim();break;default:var g=c=0;for(e=[];c<s;++c)for(var I=0;I<a;++I)e[g++]=n(t[I]+" ",l[c],i).trim()}return e}function n(t,e,i){var n=e.charCodeAt(0);switch(33>n&&(n=(e=e.trim()).charCodeAt(0)),n){case 38:return e.replace(C,"$1"+t.trim());case 58:return t.trim()+e.replace(C,"$1"+t.trim());default:if(0<1*i&&0<e.indexOf("\f"))return e.replace(C,(58===t.charCodeAt(0)?"":"$1")+t.trim())}return t+e}function l(t,e,i,n){var a=t+";",c=2*e+3*i+4*n;if(944===c){t=a.indexOf(":",9)+1;var g=a.substring(t,a.length-1).trim();return g=a.substring(0,t).trim()+g+";",1===S||2===S&&s(g,1)?"-webkit-"+g+g:g}if(0===S||2===S&&!s(a,1))return a;switch(c){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(h,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(g=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+g+a;case 1005:return r.test(a)?a.replace(o,":-webkit-")+a.replace(o,":-moz-")+a:a;case 1e3:switch(e=(g=a.substring(13).trim()).indexOf("-")+1,g.charCodeAt(0)+g.charCodeAt(e)){case 226:g=a.replace(V,"tb");break;case 232:g=a.replace(V,"tb-rl");break;case 220:g=a.replace(V,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+g+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(e=(a=t).length-10,c=(g=(33===a.charCodeAt(e)?a.substring(0,e):a).substring(t.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|g.charCodeAt(7))){case 203:if(111>g.charCodeAt(8))break;case 115:a=a.replace(g,"-webkit-"+g)+";"+a;break;case 207:case 102:a=a.replace(g,"-webkit-"+(102<c?"inline-":"")+"box")+";"+a.replace(g,"-webkit-"+g)+";"+a.replace(g,"-ms-"+g+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return g=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+g+"-ms-flex-"+g+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(G,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(G,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===R.test(t))return 115===(g=t.substring(t.indexOf(":")+1)).charCodeAt(0)?l(t.replace("stretch","fill-available"),e,i,n).replace(":fill-available",":stretch"):a.replace(g,"-webkit-"+g)+a.replace(g,"-moz-"+g.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===i+n&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(B,"$1-webkit-$2")+a}return a}function s(t,e){var i=t.indexOf(1===e?":":"{"),n=t.substring(0,3!==e?i:10);return i=t.substring(i+1,t.length-1),E(2!==e?n:n.replace(x,"$1"),i,e)}function a(t,e){var i=l(e,e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2));return i!==e+";"?i.replace(p," or ($1)").substring(4):"("+e+")"}function c(t,e,i,n,l,s,a,c,g,u){for(var d,o=0,r=e;o<f;++o)switch(d=X[o].call(I,t,r,i,n,l,s,a,c,g,u)){case void 0:case!1:case!0:case null:break;default:r=d}if(r!==e)return r}function g(t){return void 0!==(t=t.prefix)&&(E=null,t?"function"!=typeof t?S=1:(S=2,E=t):S=0),g}function I(t,i){var n=t;if(33>n.charCodeAt(0)&&(n=n.trim()),n=[n],0<f){var l=c(-1,i,n,n,L,m,0,0,0,0);void 0!==l&&"string"==typeof l&&(i=l)}var s=e(Z,n,i,0,0);return 0<f&&void 0!==(l=c(-2,s,n,n,L,m,s.length,0,0,0))&&(s=l),y=0,m=L=1,s}var u=/^\0+/g,d=/[\0\r\f]/g,o=/: */g,r=/zoo|gra/,B=/([,: ])(transform)/g,F=/,\r+?/g,C=/([\t\r\n ])*\f?&/g,U=/@(k\w+)\s*(\S*)\s*/,Q=/::(place)/g,b=/:(read-only)/g,V=/[svh]\w+-[tblr]{2}/,A=/\(\s*(.*)\s*\)/g,p=/([\s\S]*?);/g,G=/-self|flex-/g,x=/[^]*?(:[rp][el]a[\w-]+)[^]*/,R=/stretch|:\s*\w+\-(?:conte|avail)/,h=/([^-])(image-set\()/,m=1,L=1,y=0,S=1,Z=[],X=[],f=0,E=null,W=0;return I.use=function t(e){switch(e){case void 0:case null:f=X.length=0;break;default:if("function"==typeof e)X[f++]=e;else if("object"==typeof e)for(var i=0,n=e.length;i<n;++i)t(e[i]);else W=0|!!e}return t},I.set=g,void 0!==t&&g(t),I},g={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var I=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const u=(d={},function(t){return void 0===d[t]&&(d[t]=(e=t,I.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91)),d[t];var e});var d,o=i(8679),r=i.n(o);function B(){return(B=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}var F=function(t,e){for(var i=[t[0]],n=0,l=e.length;n<l;n+=1)i.push(e[n],t[n+1]);return i},C=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!(0,n.typeOf)(t)},U=Object.freeze([]),Q=Object.freeze({});function b(t){return"function"==typeof t}function V(t){return t.displayName||t.name||"Component"}function A(t){return t&&"string"==typeof t.styledComponentId}var p="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",G="5.3.1",x="undefined"!=typeof window&&"HTMLElement"in window,R=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),h={};function m(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];throw new Error("An error occurred. See https://git.io/JUIaE#"+t+" for more information."+(i.length>0?" Args: "+i.join(", "):""))}var L=function(){function t(t){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=t}var e=t.prototype;return e.indexOfGroup=function(t){for(var e=0,i=0;i<t;i++)e+=this.groupSizes[i];return e},e.insertRules=function(t,e){if(t>=this.groupSizes.length){for(var i=this.groupSizes,n=i.length,l=n;t>=l;)(l<<=1)<0&&m(16,""+t);this.groupSizes=new Uint32Array(l),this.groupSizes.set(i),this.length=l;for(var s=n;s<l;s++)this.groupSizes[s]=0}for(var a=this.indexOfGroup(t+1),c=0,g=e.length;c<g;c++)this.tag.insertRule(a,e[c])&&(this.groupSizes[t]++,a++)},e.clearGroup=function(t){if(t<this.length){var e=this.groupSizes[t],i=this.indexOfGroup(t),n=i+e;this.groupSizes[t]=0;for(var l=i;l<n;l++)this.tag.deleteRule(i)}},e.getGroup=function(t){var e="";if(t>=this.length||0===this.groupSizes[t])return e;for(var i=this.groupSizes[t],n=this.indexOfGroup(t),l=n+i,s=n;s<l;s++)e+=this.tag.getRule(s)+"/*!sc*/\n";return e},t}(),y=new Map,S=new Map,Z=1,X=function(t){if(y.has(t))return y.get(t);for(;S.has(Z);)Z++;var e=Z++;return y.set(t,e),S.set(e,t),e},f=function(t){return S.get(t)},E=function(t,e){e>=Z&&(Z=e+1),y.set(t,e),S.set(e,t)},W="style["+p+'][data-styled-version="5.3.1"]',N=new RegExp("^"+p+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),T=function(t,e,i){for(var n,l=i.split(","),s=0,a=l.length;s<a;s++)(n=l[s])&&t.registerName(e,n)},Y=function(t,e){for(var i=(e.innerHTML||"").split("/*!sc*/\n"),n=[],l=0,s=i.length;l<s;l++){var a=i[l].trim();if(a){var c=a.match(N);if(c){var g=0|parseInt(c[1],10),I=c[2];0!==g&&(E(I,g),T(t,I,c[3]),t.getTag().insertRules(g,n)),n.length=0}else n.push(a)}}},J=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},H=function(t){var e=document.head,i=t||e,n=document.createElement("style"),l=function(t){for(var e=t.childNodes,i=e.length;i>=0;i--){var n=e[i];if(n&&1===n.nodeType&&n.hasAttribute(p))return n}}(i),s=void 0!==l?l.nextSibling:null;n.setAttribute(p,"active"),n.setAttribute("data-styled-version","5.3.1");var a=J();return a&&n.setAttribute("nonce",a),i.insertBefore(n,s),n},v=function(){function t(t){var e=this.element=H(t);e.appendChild(document.createTextNode("")),this.sheet=function(t){if(t.sheet)return t.sheet;for(var e=document.styleSheets,i=0,n=e.length;i<n;i++){var l=e[i];if(l.ownerNode===t)return l}m(17)}(e),this.length=0}var e=t.prototype;return e.insertRule=function(t,e){try{return this.sheet.insertRule(e,t),this.length++,!0}catch(t){return!1}},e.deleteRule=function(t){this.sheet.deleteRule(t),this.length--},e.getRule=function(t){var e=this.sheet.cssRules[t];return void 0!==e&&"string"==typeof e.cssText?e.cssText:""},t}(),k=function(){function t(t){var e=this.element=H(t);this.nodes=e.childNodes,this.length=0}var e=t.prototype;return e.insertRule=function(t,e){if(t<=this.length&&t>=0){var i=document.createTextNode(e),n=this.nodes[t];return this.element.insertBefore(i,n||null),this.length++,!0}return!1},e.deleteRule=function(t){this.element.removeChild(this.nodes[t]),this.length--},e.getRule=function(t){return t<this.length?this.nodes[t].textContent:""},t}(),w=function(){function t(t){this.rules=[],this.length=0}var e=t.prototype;return e.insertRule=function(t,e){return t<=this.length&&(this.rules.splice(t,0,e),this.length++,!0)},e.deleteRule=function(t){this.rules.splice(t,1),this.length--},e.getRule=function(t){return t<this.length?this.rules[t]:""},t}(),M=x,z={isServer:!x,useCSSOMInjection:!R},D=function(){function t(t,e,i){void 0===t&&(t=Q),void 0===e&&(e={}),this.options=B({},z,{},t),this.gs=e,this.names=new Map(i),this.server=!!t.isServer,!this.server&&x&&M&&(M=!1,function(t){for(var e=document.querySelectorAll(W),i=0,n=e.length;i<n;i++){var l=e[i];l&&"active"!==l.getAttribute(p)&&(Y(t,l),l.parentNode&&l.parentNode.removeChild(l))}}(this))}t.registerId=function(t){return X(t)};var e=t.prototype;return e.reconstructWithOptions=function(e,i){return void 0===i&&(i=!0),new t(B({},this.options,{},e),this.gs,i&&this.names||void 0)},e.allocateGSInstance=function(t){return this.gs[t]=(this.gs[t]||0)+1},e.getTag=function(){return this.tag||(this.tag=(i=(e=this.options).isServer,n=e.useCSSOMInjection,l=e.target,t=i?new w(l):n?new v(l):new k(l),new L(t)));var t,e,i,n,l},e.hasNameForId=function(t,e){return this.names.has(t)&&this.names.get(t).has(e)},e.registerName=function(t,e){if(X(t),this.names.has(t))this.names.get(t).add(e);else{var i=new Set;i.add(e),this.names.set(t,i)}},e.insertRules=function(t,e,i){this.registerName(t,e),this.getTag().insertRules(X(t),i)},e.clearNames=function(t){this.names.has(t)&&this.names.get(t).clear()},e.clearRules=function(t){this.getTag().clearGroup(X(t)),this.clearNames(t)},e.clearTag=function(){this.tag=void 0},e.toString=function(){return function(t){for(var e=t.getTag(),i=e.length,n="",l=0;l<i;l++){var s=f(l);if(void 0!==s){var a=t.names.get(s),c=e.getGroup(l);if(a&&c&&a.size){var g=p+".g"+l+'[id="'+s+'"]',I="";void 0!==a&&a.forEach((function(t){t.length>0&&(I+=t+",")})),n+=""+c+g+'{content:"'+I+'"}/*!sc*/\n'}}}return n}(this)},t}(),P=/(a)(d)/gi,O=function(t){return String.fromCharCode(t+(t>25?39:97))};function j(t){var e,i="";for(e=Math.abs(t);e>52;e=e/52|0)i=O(e%52)+i;return(O(e%52)+i).replace(P,"$1-$2")}var K=function(t,e){for(var i=e.length;i;)t=33*t^e.charCodeAt(--i);return t},_=function(t){return K(5381,t)};function q(t){for(var e=0;e<t.length;e+=1){var i=t[e];if(b(i)&&!A(i))return!1}return!0}var $=_("5.3.1"),tt=function(){function t(t,e,i){this.rules=t,this.staticRulesId="",this.isStatic=(void 0===i||i.isStatic)&&q(t),this.componentId=e,this.baseHash=K($,e),this.baseStyle=i,D.registerId(e)}return t.prototype.generateAndInjectStyles=function(t,e,i){var n=this.componentId,l=[];if(this.baseStyle&&l.push(this.baseStyle.generateAndInjectStyles(t,e,i)),this.isStatic&&!i.hash)if(this.staticRulesId&&e.hasNameForId(n,this.staticRulesId))l.push(this.staticRulesId);else{var s=bt(this.rules,t,e,i).join(""),a=j(K(this.baseHash,s)>>>0);if(!e.hasNameForId(n,a)){var c=i(s,"."+a,void 0,n);e.insertRules(n,a,c)}l.push(a),this.staticRulesId=a}else{for(var g=this.rules.length,I=K(this.baseHash,i.hash),u="",d=0;d<g;d++){var o=this.rules[d];if("string"==typeof o)u+=o;else if(o){var r=bt(o,t,e,i),B=Array.isArray(r)?r.join(""):r;I=K(I,B+d),u+=B}}if(u){var F=j(I>>>0);if(!e.hasNameForId(n,F)){var C=i(u,"."+F,void 0,n);e.insertRules(n,F,C)}l.push(F)}}return l.join(" ")},t}(),et=/^\s*\/\/.*$/gm,it=[":","[",".","#"];function nt(t){var e,i,n,l,s=void 0===t?Q:t,a=s.options,g=void 0===a?Q:a,I=s.plugins,u=void 0===I?U:I,d=new c(g),o=[],r=function(t){function e(e){if(e)try{t(e+"}")}catch(t){}}return function(i,n,l,s,a,c,g,I,u,d){switch(i){case 1:if(0===u&&64===n.charCodeAt(0))return t(n+";"),"";break;case 2:if(0===I)return n+"/*|*/";break;case 3:switch(I){case 102:case 112:return t(l[0]+n),"";default:return n+(0===d?"/*|*/":"")}case-2:n.split("/*|*/}").forEach(e)}}}((function(t){o.push(t)})),B=function(t,n,s){return 0===n&&-1!==it.indexOf(s[i.length])||s.match(l)?t:"."+e};function F(t,s,a,c){void 0===c&&(c="&");var g=t.replace(et,""),I=s&&a?a+" "+s+" { "+g+" }":g;return e=c,i=s,n=new RegExp("\\"+i+"\\b","g"),l=new RegExp("(\\"+i+"\\b){2,}"),d(a||!s?"":s,I)}return d.use([].concat(u,[function(t,e,l){2===t&&l.length&&l[0].lastIndexOf(i)>0&&(l[0]=l[0].replace(n,B))},r,function(t){if(-2===t){var e=o;return o=[],e}}])),F.hash=u.length?u.reduce((function(t,e){return e.name||m(15),K(t,e.name)}),5381).toString():"",F}var lt=l.createContext(),st=lt.Consumer,at=l.createContext(),ct=(at.Consumer,new D),gt=nt();function It(){return(0,l.useContext)(lt)||ct}function ut(){return(0,l.useContext)(at)||gt}function dt(t){var e=(0,l.useState)(t.stylisPlugins),i=e[0],n=e[1],s=It(),c=(0,l.useMemo)((function(){var e=s;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),g=(0,l.useMemo)((function(){return nt({options:{prefix:!t.disableVendorPrefixes},plugins:i})}),[t.disableVendorPrefixes,i]);return(0,l.useEffect)((function(){a()(i,t.stylisPlugins)||n(t.stylisPlugins)}),[t.stylisPlugins]),l.createElement(lt.Provider,{value:c},l.createElement(at.Provider,{value:g},t.children))}var ot=function(){function t(t,e){var i=this;this.inject=function(t,e){void 0===e&&(e=gt);var n=i.name+e.hash;t.hasNameForId(i.id,n)||t.insertRules(i.id,n,e(i.rules,n,"@keyframes"))},this.toString=function(){return m(12,String(i.name))},this.name=t,this.id="sc-keyframes-"+t,this.rules=e}return t.prototype.getName=function(t){return void 0===t&&(t=gt),this.name+t.hash},t}(),rt=/([A-Z])/,Bt=/([A-Z])/g,Ft=/^ms-/,Ct=function(t){return"-"+t.toLowerCase()};function Ut(t){return rt.test(t)?t.replace(Bt,Ct).replace(Ft,"-ms-"):t}var Qt=function(t){return null==t||!1===t||""===t};function bt(t,e,i,n){if(Array.isArray(t)){for(var l,s=[],a=0,c=t.length;a<c;a+=1)""!==(l=bt(t[a],e,i,n))&&(Array.isArray(l)?s.push.apply(s,l):s.push(l));return s}return Qt(t)?"":A(t)?"."+t.styledComponentId:b(t)?"function"!=typeof(I=t)||I.prototype&&I.prototype.isReactComponent||!e?t:bt(t(e),e,i,n):t instanceof ot?i?(t.inject(i,n),t.getName(n)):t:C(t)?function t(e,i){var n,l,s=[];for(var a in e)e.hasOwnProperty(a)&&!Qt(e[a])&&(Array.isArray(e[a])&&e[a].isCss||b(e[a])?s.push(Ut(a)+":",e[a],";"):C(e[a])?s.push.apply(s,t(e[a],a)):s.push(Ut(a)+": "+(n=a,(null==(l=e[a])||"boolean"==typeof l||""===l?"":"number"!=typeof l||0===l||n in g?String(l).trim():l+"px")+";")));return i?[i+" {"].concat(s,["}"]):s}(t):t.toString();var I}var Vt=function(t){return Array.isArray(t)&&(t.isCss=!0),t};function At(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];return b(t)||C(t)?Vt(bt(F(U,[t].concat(i)))):0===i.length&&1===t.length&&"string"==typeof t[0]?t:Vt(bt(F(t,i)))}new Set;var pt=function(t,e,i){return void 0===i&&(i=Q),t.theme!==i.theme&&t.theme||e||i.theme},Gt=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,xt=/(^-|-$)/g;function Rt(t){return t.replace(Gt,"-").replace(xt,"")}var ht=function(t){return j(_(t)>>>0)};function mt(t){return"string"==typeof t&&!0}var Lt=function(t){return"function"==typeof t||"object"==typeof t&&null!==t&&!Array.isArray(t)},yt=function(t){return"__proto__"!==t&&"constructor"!==t&&"prototype"!==t};function St(t,e,i){var n=t[i];Lt(e)&&Lt(n)?Zt(n,e):t[i]=e}function Zt(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];for(var l=0,s=i;l<s.length;l++){var a=s[l];if(Lt(a))for(var c in a)yt(c)&&St(t,a[c],c)}return t}var Xt=l.createContext(),ft=Xt.Consumer;function Et(t){var e=(0,l.useContext)(Xt),i=(0,l.useMemo)((function(){return function(t,e){return t?b(t)?t(e):Array.isArray(t)||"object"!=typeof t?m(8):e?B({},e,{},t):t:m(14)}(t.theme,e)}),[t.theme,e]);return t.children?l.createElement(Xt.Provider,{value:i},t.children):null}var Wt={};function Nt(t,e,i){var n=A(t),s=!mt(t),a=e.attrs,c=void 0===a?U:a,g=e.componentId,I=void 0===g?function(t,e){var i="string"!=typeof t?"sc":Rt(t);Wt[i]=(Wt[i]||0)+1;var n=i+"-"+ht("5.3.1"+i+Wt[i]);return e?e+"-"+n:n}(e.displayName,e.parentComponentId):g,d=e.displayName,o=void 0===d?function(t){return mt(t)?"styled."+t:"Styled("+V(t)+")"}(t):d,F=e.displayName&&e.componentId?Rt(e.displayName)+"-"+e.componentId:e.componentId||I,C=n&&t.attrs?Array.prototype.concat(t.attrs,c).filter(Boolean):c,p=e.shouldForwardProp;n&&t.shouldForwardProp&&(p=e.shouldForwardProp?function(i,n,l){return t.shouldForwardProp(i,n,l)&&e.shouldForwardProp(i,n,l)}:t.shouldForwardProp);var G,x=new tt(i,F,n?t.componentStyle:void 0),R=x.isStatic&&0===c.length,h=function(t,e){return function(t,e,i,n){var s=t.attrs,a=t.componentStyle,c=t.defaultProps,g=t.foldedComponentIds,I=t.shouldForwardProp,d=t.styledComponentId,o=t.target,r=function(t,e,i){void 0===t&&(t=Q);var n=B({},e,{theme:t}),l={};return i.forEach((function(t){var e,i,s,a=t;for(e in b(a)&&(a=a(n)),a)n[e]=l[e]="className"===e?(i=l[e],s=a[e],i&&s?i+" "+s:i||s):a[e]})),[n,l]}(pt(e,(0,l.useContext)(Xt),c)||Q,e,s),F=r[0],C=r[1],U=function(t,e,i,n){var l=It(),s=ut();return e?t.generateAndInjectStyles(Q,l,s):t.generateAndInjectStyles(i,l,s)}(a,n,F),V=i,A=C.$as||e.$as||C.as||e.as||o,p=mt(A),G=C!==e?B({},e,{},C):e,x={};for(var R in G)"$"!==R[0]&&"as"!==R&&("forwardedAs"===R?x.as=G[R]:(I?I(R,u,A):!p||u(R))&&(x[R]=G[R]));return e.style&&C.style!==e.style&&(x.style=B({},e.style,{},C.style)),x.className=Array.prototype.concat(g,d,U!==d?U:null,e.className,C.className).filter(Boolean).join(" "),x.ref=V,(0,l.createElement)(A,x)}(G,t,e,R)};return h.displayName=o,(G=l.forwardRef(h)).attrs=C,G.componentStyle=x,G.displayName=o,G.shouldForwardProp=p,G.foldedComponentIds=n?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):U,G.styledComponentId=F,G.target=n?t.target:t,G.withComponent=function(t){var n=e.componentId,l=function(t,e){if(null==t)return{};var i,n,l={},s=Object.keys(t);for(n=0;n<s.length;n++)i=s[n],e.indexOf(i)>=0||(l[i]=t[i]);return l}(e,["componentId"]),s=n&&n+"-"+(mt(t)?t:Rt(V(t)));return Nt(t,B({},l,{attrs:C,componentId:s}),i)},Object.defineProperty(G,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=n?Zt({},t.defaultProps,e):e}}),G.toString=function(){return"."+G.styledComponentId},s&&r()(G,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),G}var Tt=function(t){return function t(e,i,l){if(void 0===l&&(l=Q),!(0,n.isValidElementType)(i))return m(1,String(i));var s=function(){return e(i,l,At.apply(void 0,arguments))};return s.withConfig=function(n){return t(e,i,B({},l,{},n))},s.attrs=function(n){return t(e,i,B({},l,{attrs:Array.prototype.concat(l.attrs,n).filter(Boolean)}))},s}(Nt,t)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(t){Tt[t]=Tt(t)}));var Yt=function(){function t(t,e){this.rules=t,this.componentId=e,this.isStatic=q(t),D.registerId(this.componentId+1)}var e=t.prototype;return e.createStyles=function(t,e,i,n){var l=n(bt(this.rules,e,i,n).join(""),""),s=this.componentId+t;i.insertRules(s,s,l)},e.removeStyles=function(t,e){e.clearRules(this.componentId+t)},e.renderStyles=function(t,e,i,n){t>2&&D.registerId(this.componentId+t),this.removeStyles(t,i),this.createStyles(t,e,i,n)},t}();function Jt(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];var s=At.apply(void 0,[t].concat(i)),a="sc-global-"+ht(JSON.stringify(s)),c=new Yt(s,a);function g(t){var e=It(),i=ut(),n=(0,l.useContext)(Xt),s=(0,l.useRef)(e.allocateGSInstance(a)).current;return e.server&&I(s,t,e,n,i),(0,l.useLayoutEffect)((function(){if(!e.server)return I(s,t,e,n,i),function(){return c.removeStyles(s,e)}}),[s,t,e,n,i]),null}function I(t,e,i,n,l){if(c.isStatic)c.renderStyles(t,h,i,l);else{var s=B({},e,{theme:pt(e,n,g.defaultProps)});c.renderStyles(t,s,i,l)}}return l.memo(g)}function Ht(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];var l=At.apply(void 0,[t].concat(i)).join(""),s=ht(l);return new ot(s,l)}var vt=function(){function t(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var i=J();return"<style "+[i&&'nonce="'+i+'"',p+'="true"','data-styled-version="5.3.1"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?m(2):t._emitSheetCSS()},this.getStyleElement=function(){var e;if(t.sealed)return m(2);var i=((e={})[p]="",e["data-styled-version"]="5.3.1",e.dangerouslySetInnerHTML={__html:t.instance.toString()},e),n=J();return n&&(i.nonce=n),[l.createElement("style",B({},i,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new D({isServer:!0}),this.sealed=!1}var e=t.prototype;return e.collectStyles=function(t){return this.sealed?m(2):l.createElement(dt,{sheet:this.instance},t)},e.interleaveWithNodeStream=function(t){return m(3)},t}(),kt=function(t){var e=l.forwardRef((function(e,i){var n=(0,l.useContext)(Xt),s=t.defaultProps,a=pt(e,n,s);return l.createElement(t,B({},e,{theme:a,ref:i}))}));return r()(e,t),e.displayName="WithTheme("+V(t)+")",e},wt=function(){return(0,l.useContext)(Xt)},Mt={StyleSheet:D,masterSheet:ct};const zt=Tt},482:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},1583:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(2802));e.default=(t=new l.default,e)=>e.analyze?t.merge(e.analyze):t},257:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(4817));e.default=(t=new l.default,e)=>e.app?new l.default(e.app):t},6690:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5813));e.default=(t=new l.default,e)=>e.bootOption?t.merge(e.bootOption):t},9530:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const l=i(665),s=n(i(482)),a=n(i(1583)),c=n(i(257)),g=n(i(6690)),I=n(i(9202)),u=n(i(7738)),d=n(i(6686)),o=n(i(705)),r=n(i(6706)),B=n(i(4005)),F=n(i(358)),C=n(i(7706)),U=n(i(2543)),Q=n(i(5181)),b=n(i(4980)),V=n(i(6086)),A=n(i(6297)),p=n(i(6087)),G=n(i(507));e.reducerFiles={app:c.default,user:G.default,tuneCh:p.default,ranks:U.default,thread:b.default,threads:A.default,threadDetail:V.default,analyze:a.default,bootOption:g.default,setting:Q.default,posts:I.default,postsTimeline:r.default,postsTimelineStock:B.default,postsTimelineZero:F.default,postsTimelineZeroAfter:C.default,postsMulti:d.default,postsSingle:o.default,postsChild:u.default,actioned:s.default},e.default=(0,l.combineReducers)(e.reducerFiles)},9202:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5232));e.default=(t=[],e)=>e.posts?new l.default(e.posts):t},7738:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5232));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new l.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},6686:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(300)),s=n(i(5232));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new s.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let i=[];return t.length+e.postsMulti.length>l.default.findOneLimitCnt?(i=[...e.postsMulti,...t],i.slice(0,l.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},705:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5853));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new l.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},6706:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(6423));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new l.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},4005:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(3443));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new l.default(e.postsTimelineStock):t}}},358:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(8059));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new l.default(e.postsTimelineZero):t}}},7706:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(6301));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new l.default(e.postsTimelineZeroAfter):t}}},2543:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5232));e.default=(t=[],e)=>{let i=[],n=0;const s=(t,i)=>t.ch===e.app.rootCh||i.ch===e.app.rootCh?0:t.liveCnt<i.liveCnt?1:t.liveCnt>i.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(i=l.default.getDispPosts(e),n=i&&i.length?i.length:0,0===n?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:i[n-1].favicon,stampId:i[n-1].stampId,post:i[n-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(s);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const i=[],n=e.rank.length;let l=e.rank[0];for(let s=0;s<n;s++){let n=e.rank[s];l=n.updateTime>l.updateTime?n:l,n.ch===t[0].ch&&(n={...n,liveCnt:t[0].liveCnt}),i.push(n)}return i.sort(s),i[0].faicon=l.favicon,i[0].post=l.post,i[0].stampId=l.stampId,i}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},5181:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(3871));e.default=(t=new l.default,e)=>e.setting?t.merge(e.setting):t},4980:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5537));e.default=(t=new l.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new l.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},6086:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5537));e.default=(t=new l.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},6297:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5300));e.default=(t=new l.default,e)=>e.threads?t.merge(e.threads):t},6087:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1960));e.default=(t=new l.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new l.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:i}=e;if(i.ch===t.ch)return{...t,liveCnt:i.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const n=e.posts[0];if(n.ch===t.ch)return{...t,title:n.title,stampId:n.stampId,favicon:n.favicon,post:n.post}}return t}},507:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(6548));e.default=(t=new l.default,e)=>e.user?t.merge(e.user):t},3560:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2802:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216));class s extends l.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=s},4817:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216)),s=n(i(1960)),a=n(i(5537));class c extends l.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const i=t.ch?t.ch:"/",n=t.id?t.id:"",g=l.default.isSet(t.isMediaCh)?t.isMediaCh:c.getIsMediaCh(i),I=!!l.default.isSet(t.isLinkCh)&&t.isLinkCh,u=t.rootCh?t.rootCh:i,d=l.default.isSet(t.isRootCh)?t.isRootCh:u===i,o=t.rootTitle?t.rootTitle:"talkn",r=c.getMediaSrc(t.protocol,i),B=c.getMediaType(r,t),F=t&&t.tuned?t.tuned:"",C=c.getDispThreadType(t,g),U=!l.default.isSet(t.multistream)||t.multistream,Q=t&&t.findType?t.findType:a.default.findTypeAll,b=t&&t.offsetFindId?t.offsetFindId:c.defaultOffsetFindId,V=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:c.defaultOffsetFindId,A=t&&t.offsetSingleFindId?t.offsetSingleFindId:c.defaultOffsetFindId,p=t&&t.offsetMultiFindId?t.offsetMultiFindId:c.defaultOffsetFindId,G=t&&t.offsetChildFindId?t.offsetChildFindId:c.defaultOffsetFindId,x=t&&t.offsetLogsFindId?t.offsetLogsFindId:c.defaultOffsetFindId,R=t.inputPost?t.inputPost:"",h=!!t.inputStampId&&t.inputStampId,m=t.inputCurrentTime?t.inputCurrentTime:0,L=t.inputSearch?t.inputSearch:"",y=!!l.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,S=!!l.default.isSet(t.isRankDetailMode)&&t.isRankDetailMode,Z=t&&t.actioned?t.actioned:"",X=l.default.isSet(t.debug)?t.debug:"";return this.create({id:n,isRootCh:d,isLinkCh:I,isMediaCh:g,rootCh:u,rootTitle:o,chType:B,dispThreadType:C,tuned:F,multistream:U,findType:Q,offsetFindId:b,offsetTimelineFindId:V,offsetSingleFindId:A,offsetMultiFindId:p,offsetChildFindId:G,offsetLogsFindId:x,inputPost:R,inputStampId:h,inputCurrentTime:m,inputSearch:L,isToggleMultistream:y,isRankDetailMode:S,actioned:Z,debug:X})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[c.mediaTypeMp3,c.mediaTypeMp4,c.mediaTypeM4a]}static get mediaChTagTypes(){return{[c.mediaTypeMp3]:c.mediaTagTypeAudio,[c.mediaTypeMp4]:c.mediaTagTypeVideo,[c.mediaTypeM4a]:c.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:c.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(c.mediaChTagTypes),i=e.length;let n="html";for(let l=0;l<i;l++){const i=new RegExp(`.${e[l]}$`);if(t.match(i)){n=c.mediaChTagTypes[e[l]];break}}return n}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return c.isAudioContentType(t)||c.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(c.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(c.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return c.mediaChs.some((e=>{const i=new RegExp(`.${e}/$|.${e}$`);return t.match(i)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?c.dispThreadTypeTimeline:c.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},i,n,l=""){let s="";const a=t&&t.dispThreadType?t.dispThreadType:c.dispThreadTypeMulti;return s=(t=c.getStepDispThreadType({app:t,ranks:e},i,n,l)).dispThreadType,{app:t,stepTo:`${a} to ${s}`}}static getStepDispThreadType({app:t,ranks:e},i={},n,l){const s=t||{};if(s.offsetFindId=c.defaultOffsetFindId,i.isMediaCh)return s.dispThreadType=c.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:c.defaultOffsetFindId,s.isLinkCh="Links"===l||"findMediaCh"===l||"ToMedia"===l,s.isMediaCh=!0,s;if("BackToRootCh"===l&&(s.isLinkCh=!1),"Links"===l&&e.length>0){if(!e.some((t=>t.ch===n||t.ch===n+"/")))return s.offsetFindId=c.defaultOffsetFindId,s.dispThreadType=c.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===n?s.multistream?s.dispThreadType=c.dispThreadTypeMulti:s.dispThreadType=c.dispThreadTypeSingle:s.dispThreadType=c.dispThreadTypeChild,s}}e.default=c},5813:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216));class s extends l.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((i=>{e[t[i].name]=t[i].value})),e}}e.default=s},367:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216));class s extends l.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},1960:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216)),s=n(i(300));class a extends l.default{constructor(t){super(),this.ch=a.defaultValues.ch,this.chs=a.defaultValues.chs,this.favicon=a.defaultValues.favicon,this.findType=a.defaultValues.findType,this.layer=a.defaultValues.layer,this.post=a.defaultValues.post,this.protocol=a.defaultValues.protocol,this.stampId=a.defaultValues.stampId,this.title=a.defaultValues.title,this.liveCnt=a.defaultValues.liveCnt,this.uid=a.defaultValues.uid,this.utype=a.defaultValues.utype,this.dispFlg=a.defaultValues.dispFlg,this.data=a.defaultValues.data,this.createTime=a.defaultValues.createTime,this.currentTime=a.defaultValues.currentTime,this.updateTime=a.defaultValues.updateTime;const e=t?{...a.defaultValues,...t}:a.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:s.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=a},9565:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5232:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(4817)),s=n(i(9565)),a=n(i(5853)),c=n(i(6423)),g=n(i(3443));class I{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:i,postsMulti:n,postsSingle:s,postsChild:a,postsLogs:c}=t;switch(e.dispThreadType){case l.default.dispThreadTypeTimeline:return i;case l.default.dispThreadTypeMulti:return n;case l.default.dispThreadTypeSingle:return s;case l.default.dispThreadTypeChild:return a;case l.default.dispThreadTypeLogs:return c}}static getAnyActionPosts(t,e){const{app:i,posts:n}=t,c=n&&n.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new a.default,t.postsChild=[],t.postsLogs=[],i.dispThreadType){case l.default.dispThreadTypeTimeline:t=I.getAnyActionPostsTimeline(t,n,e,c);break;case l.default.dispThreadTypeMulti:t.postsMulti=c?n:[];break;case l.default.dispThreadTypeSingle:t.postsSingle=c?n:[];break;case l.default.dispThreadTypeChild:t.postsChild=c?n:[];break;case l.default.dispThreadTypeLogs:t.postsLogs=c?n:[]}return t}static getAnyActionPostsTimeline(t,e,i,n){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new c.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new c.default,t.postsTimelineStock=new g.default,n)){const i=e.length;for(let n=0;n<i;n++)0===e[n].currentTime?t.postsTimeline.push(e[n]):t.postsTimelineStock.push(e[n])}return t}}e.default=I},5853:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6423:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8059:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3871:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216));class s extends l.default{constructor(t={}){super();const e=t&&t.client?t.client:{},i=t&&t.common?t.common:{},n=t&&t.server?t.server:{};return this.create({client:e,common:i,server:n})}}e.default=s},5537:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216)),s=n(i(7771)),a=n(i(300)),c=n(i(4817));class g extends l.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=g.getDefaultFavicon(),this.findType=g.findTypeAll,this.title=g.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=g.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const i=g.isWindowObj(t)?g.constructorFromWindow(t,e):t;return this.create(i)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[g.findTypeHtml]:["text/html"],[g.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[g.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const i=!!e.ch&&e.ch,n=g.getCh(e,i);let s={};return s.ch=n,s.chs=["/"],s.hasSlash=!!e.hasslash&&l.default.getBool(e.hasslash),s.protocol="talkn:",s.contentType="",s.charset="UTF-8",s.host="",s.favicon=g.getDefaultFavicon(),s.findType=g.findTypeAll,i?(s.protocol=g.getProtocol(i),s.host=g.getHost(i),s.chs=i.chs&&i.chs.length>0?i.chs:g.getChs(n)):(s.protocol=location.protocol?location.protocol:"????:",s.chs=t.chs&&t.chs.length>0?t.chs:g.getChs(n),s.contentType=document.contentType?document.contentType:"",s.charset=document.charset?document.charset:"",s.host=location.host?location.host:"",s.favicon=g.getFaviconFromWindow(window)),s.title=g.getDefaultTitle(),s.metas=[],s.serverMetas={},s.clientMetas={},s.emotions={},s.links=[],s.h1s=[],s.audios=[],s.videos=[],s.layer=g.getLayer(s.ch),s.mediaIndex=[],s.postCnt=0,s.multiPostCnt=0,s.isSelfCh=g.getIsSelfCh("",s.ch),s.createTime="",s.updateTime="",s}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const n="/"===t.slice(-1)?t:t+"/";if("/"!==n){const t=n.split("/"),l=t.length;let s="";for(var i=1;i<l;i++)""!==t[i]&&(s+=t[i],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):a.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return c.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=g.getMediaSrc(t);return c.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,i="http://",n="https://",l=location.host;if(e.indexOf(i)||e.indexOf(n)){const t=i+l+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,i,n={}){let l={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return l.isCreate=g.getStatusCreate(i),l.isRequireUpsert=g.getStatusIsRequireUpsert(t,n,l.isCreate),l.isMultistream=g.getStatusIsMultistream(e),l.isToggleMultistream=g.getStatusIsToggleMultistream(e),l.isMediaCh=g.getStatusIsMediaCh(t.ch),l}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,i=!1){if(!i)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,n=i.getFullYear(),l=i.getMonth(),s=i.getDate(),c=i.getHours();return i.getMinutes(),e<new Date(n,l,s,c-a.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===c.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return c.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=g.findTypes[g.findTypeHtml],i=g.findTypes[g.findTypeMusic],n=g.findTypes[g.findTypeVideo];let l;if(t&&""!==t){let s="";t.indexOf(";")>0&&(s=t.split(";")[0]),(e.includes(t)||e.includes(s))&&(l=g.findTypeHtml),(i.includes(t)||i.includes(s))&&(l=g.findTypeMusic),(n.includes(t)||n.includes(s))&&(l=g.findTypeVideo)}return l}static getFindTypeFromSrc(t){const e=c.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=g},5300:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216));class s extends l.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=s},6548:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216)),s=n(i(1960));class a extends l.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",i=t&&t.utype?t.utype:"",n=t&&t.tuned?t.tuned:"",l=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",c=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,u=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,d=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:i,tuned:n,multistreamed:l,actioned:s,offsetFindId:c,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:u,offsetLogsFindId:d,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=a},2230:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(3560)),s=n(i(2802)),a=n(i(4817)),c=n(i(367)),g=n(i(5232)),I=n(i(6423)),u=n(i(3443)),d=n(i(3364)),o=n(i(5537)),r=n(i(6548));class B{constructor(t,e={}){this.bootOption=t,this.ranks=new d.default,this.menuLogs=new c.default(e.menuLogs),this.posts=new g.default,this.postsMulti=new g.default,this.postsSingle=new g.default,this.postsChild=new g.default,this.postsTimeline=new I.default,this.postsTimelineStock=new u.default,this.postsLogs=new g.default,this.analyze=new s.default,this.thread=new o.default(this.bootOption,e.thread),this.threadDetail=new o.default(this.bootOption,e.thread),this.app=new a.default(B.getAppParams(this.thread,this.bootOption,e)),this.user=new r.default(B.getUserParams(this,e)),this.actionLog=new l.default}static getAppParams(t,e,i){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?a.default.dispThreadTypeMulti:a.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=B},3841:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1665));e.default={updateStyle:({styleKey:t,eleType:e,tagName:i,style:n})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:i,style:n}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),toggleDispSetChModal:({app:t,thread:e})=>({type:"TOGGLE_DISP_SET_CH_MODAL"}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),onClickToggleMain:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_MAIN",app:t,ui:e}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:i})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:i}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",app:t,ui:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>({type:"RESIZE_START_WINDOW",...t}),onResizeEndWindow:({app:t,setting:e,bootOption:i})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:i}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=l.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>({type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:i})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:i}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},8215:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=i(4065),s=n(i(1216)),a=n(i(4817)),c=n(i(5537)),g=n(i(7638)),I=n(i(7865)),u=n(i(3669));class d extends l.Component{constructor(t){super(t),this.onScroll=this.onScroll.bind(this)}get clientStore(){if(window.talknWindow)return window.talknWindow.store}get clientState(){if(window.talknWindow)return window.talknWindow.store.getState()}api(t,e={}){window.talknWindow.api(t,e)}clientAction(t,e,i=(()=>{})){const n=e?{...e,type:t}:{type:t};window.talknWindow.store.dispatch(n)}onClickCh(t,e,i,n){let{app:l,thread:g,ranks:u,setting:d}=this.clientState;const o=g.ch;g.ch=t,e.clicked=n,e.isOpenLinks=!1,e.isOpenMenu=e.screenSize===I.default.screenSizeSmallLabel&&e.isOpenMenu,e.isOpenBoard=!0,s.default.isSet(i)&&(g.hasSlash=i);const r=c.default.getStatus(g,l,d);let{app:B,stepTo:F}=a.default.getStepToDispThreadType({app:l,ranks:u},r,t,n);switch("ToMedia"===n&&this.api("onResponseChAPI",t),l.isLinkCh&&!B.isLinkCh&&this.api("offResponseChAPI",o),l=B,l.offsetFindId=a.default.defaultOffsetFindId,F){case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeMulti} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeSingle} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeChild}`:e.isRootCh=!1,this.clientAction("ON_CLICK_TO_CHILD_THREAD",{ui:e}),this.api("changeThread",{app:l,thread:g});break;case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeMulti}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeMulti}`:e.isRootCh=!0,this.clientAction("ON_CLICK_TO_MULTI_THREAD",{ui:e}),this.api("changeThread",{app:l,thread:g});break;case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeSingle}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeSingle}`:e.isRootCh=!0,this.clientAction("ON_CLICK_TO_SINGLE_THREAD",{ui:e}),this.api("changeThread",{app:l,thread:g});break;case`${a.default.dispThreadTypeMulti} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeSingle} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeTimeline}`:e.isRootCh=!l.isLinkCh,this.clientAction("ON_CLICK_TO_TIMELINE_THREAD",{ui:e}),this.api("changeThread",{app:l,thread:g})}}onScroll({scrollTop:t=0,clientHeight:e=0,scrollHeight:i=0}){const{thread:n,app:l,ui:s,actionLog:a}=this.clientState,c=(s.extensionMode,I.default.extensionModeNone,["ON_RESIZE_END_WINDOW"]);let{uiTimeMarker:d}=this.clientState;if(0===t&&!c.includes(a[0])&&n[l.multistream?"multiPostCnt":"postCnt"]>g.default.findOnePostCnt){const t=document.querySelector("[data-component-name=TimeMarkerList]");t&&t.style&&(t.style.opacity=0),window.talknWindow.dom.exeGetMore(this.clientStore)}s.isOpenNewPost&&this.clientAction("CLOSE_NEW_POST");const o=u.default.update(t,d,{app:l,ui:s});d.now.label!==o.now.label&&this.clientAction("ON_SCROLL_UPDATE_TIME_MARKER",{uiTimeMarker:o}),window.talknWindow.dom.scrollTop=t,window.talknWindow.dom.scrollHeight=i,window.talknWindow.dom.clientHeight=e,window.talknWindow.dom.isScrollBottom=i===t+e}scrollToDidUpdateGetMore(){const{ui:t}=this.clientState,e=document.querySelector("[data-component-name=Posts]");let i=0;switch(t.screenSize){case I.default.screenSizeLargeLabel:case I.default.screenSizeSmallLabel:i=e.scrollHeight;break;case I.default.screenSizeMiddleLabel:i=document.body.scrollHeight}window.talknWindow.dom.scrollTop=i-window.talknWindow.dom.scrollHeight,e.scrollTop=window.talknWindow.dom.scrollTop,window.scrollTo(0,window.talknWindow.dom.scrollTop)}}e.default=d},7638:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(9573)),s=n(i(300)),a=n(i(1665));if("browser"===l.default.title){const{SUB_DOMAINS:t,DEVELOPMENT:e}=a.default,{env:i,domain:n}=s.default;s.default.mediaSecondInterval=200,s.default.screenSize={small:600,middle:960},s.default.defaultFavicon=`//${t.ASSETS}.${n}/favicon.ico`,s.default.portalPath=`//${t.PORTAL}.${n}/`,s.default.clientPath=`//${t.CLIENT}.${n}/`,s.default.assetsPath=`//${t.ASSETS}.${n}/`,s.default.sessionPath=`//${t.SESSION}.${n}/`,s.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"}}e.default=s.default},7851:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t,e)=>({state:t})},4435:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7771)),s=n(i(300)),a=n(i(1665)),c=n(i(6562)),g=n(i(4817)),I=n(i(5232)),u=n(i(7865)),d=n(i(5549));e.default={updateAction:t=>e=>i=>{const n=t.getState();i.ui=i.ui?{...n.ui,...i.ui}:n.ui,i.app=i.app?{...n.app,...i.app}:n.app,o[i.type]&&(i=o[i.type](n,i)),i&&e(i)}};const o={"API_TO_CLIENT[REQUEST]:getMore":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!1,e),"API_TO_CLIENT[REQUEST]:fetchPosts":(t,e)=>e,"API_TO_CLIENT[REQUEST]:changeThread":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:fetchPosts":(t,e)=>{if(e.ui.isLoading=!1,e.ui.detailCh=e.thread.ch,!e.app.isLinkCh)switch(e.ui.extensionMode){case u.default.extensionModeBottom:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*d.default.transitionNotif+d.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",l.default.UNKNOWN,{transition:t})}break;case u.default.extensionModeModal:if(!e.app.isMediaCh&&e.posts.length>0){const t=e.posts[e.posts.length-1]._id,i=e.posts[e.posts.length-1].post,n=e.posts[e.posts.length-1].stampId;let a=e.posts[e.posts.length-1].favicon;a=l.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(a),window.talknWindow.ext.to("openNotif",l.default.UNKNOWN,{id:t,post:i,stampId:n,favicon:a,addUnreadCnt:e.posts.length})}}return e},"API_TO_CLIENT[BROADCAST]:post":(t,e)=>{const i=e.posts.length-1;switch(e.ui.extensionMode){case u.default.extensionModeBottom:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*d.default.transitionNotif+d.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",{transition:t})}break;case u.default.extensionModeModal:if(e.posts.length>0){const t=e.posts[i]._id,n=e.posts[i].post,a=e.posts[i].stampId;let g=e.posts[i].favicon;g=l.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(g),window.talknWindow.ext.to("openNotif",l.default.UNKNOWN,{id:t,post:n,stampId:a,favicon:g,addUnreadCnt:e.posts.length})}}return e},"CLIENT_TO_API[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!0,e),ON_CLICK_MULTISTREAM:(t,e)=>{const i=I.default.getDispPosts(e),n=i&&i.length?i.length:0;return n>0&&t.ranks.length>0&&(e.ranks=t.ranks.map((e=>t.app.rootCh===e.ch?{...e,favicon:i[n-1].favicon,post:i[n-1].post,stampId:i[n-1].stampId}:e))),e},NEXT_POSTS_TIMELINE:(t,e)=>{const i=e.postsTimeline.length-1,n=e.postsTimeline[i]._id,a=e.postsTimeline[i].post,g=e.postsTimeline[i].stampId;let I=e.postsTimeline[i].favicon;return I=l.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(I),window.talknWindow.ext.to("openNotif",l.default.UNKNOWN,{id:n,post:a,stampId:g,favicon:I}),e.postsTimeline=[...t.postsTimeline,...e.postsTimeline],e},TOGGLE_DISP_POSTS_SUPPORTER:(t,e)=>(t.ui.isOpenPostsSupporter=!t.ui.isOpenPostsSupporter,e),TOGGLE_LINKS:(t,e)=>(e.ui.isOpenLinks=!t.ui.isOpenLinks,e),ON_CLICK_TOGGLE_POSTS:(t,e)=>(e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:u.default.getIsOpenPosts(e.ui),e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>{const i=t.threads[e.app.detailCh];return e.threadDetail={...i},e},OFF_TRANSITION:(t,e)=>(e.ui.height=g.default.getHeight(),e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:u.default.getIsOpenPosts(e.ui),e),ON_TRANSITION_END:(t,e)=>(e.ui.height=u.default.getHeight(),e.ui.isOpenPosts=u.default.getIsOpenPosts(e.ui),e),ON_RESIZE_START_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_RESIZE_END_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.ui.isLoading=!e.ui.isLoading,e),ON_CLICK_TOGGLE_DISP_MENU:(t,e)=>(e.ui.isOpenMenu=!e.ui.isOpenMenu,e),TOGGLE_DISP_SET_CH_MODAL:(t,e)=>(e.ui.isOpenSetChModal=!t.ui.isOpenSetChModal,e),TOGGLE_DISP_BOARD:(t,e)=>(e.ui.isOpenBoard=!t.ui.isOpenBoard,e),OPEN_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!0,e),TOGGLE_BUBBLE_POST:(t,e)=>(e.ui.isBubblePost=!t.ui.isBubblePost,e),CLOSE_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!1,e),OPEN_INNER_NOTIF:(t,e)=>(e.ui.openInnerNotif=""===e.ui.openInnerNotif?a.default.noInnerNotif:e.ui.openInnerNotif,e),ON_CHANGE_INPUT_POST:(t,e)=>{const i=e.ui.inputPost;return window.talknWindow.ext.to("setInputPost",l.default.UNKNOWN,{inputPost:i}),e},GET_CLIENT_METAS:(t,e)=>{let i=!1,n=e,{serverMetas:l}=t.thread;if(e.thread={},Object.keys(n).forEach(((t,s)=>{n[t]&&""!==n[t]&&l[t]!==n[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),i=!0,e.thread.serverMetas[t]=n[t])})),i)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},console.log(e.thread.serverMetas),e}}},4603:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(300)),s=n(i(1665));class a{constructor(){a.setupMath()}static setupMath(){Math.easeInOutQuad=(t,e,i,n)=>(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e}static setupLog(){l.default.env===s.default.PRODUCTION&&window.talknWindow&&(window.log=t=>{const{ui:e}=window.talknWindow.store.getState();console.log(e.iFrameId)})}}e.default=a},4451:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>"COMPONENT_DID_MOUNTS"!==e.type?[e.type,...t]:t},4679:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>(e.componentDidMounts&&"string"==typeof e.componentDidMounts&&t.push(e.componentDidMounts),t)},5513:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=i(831),s=i(9530),a=n(i(7532)),c=n(i(4451)),g=n(i(4679)),I=n(i(4436)),u=n(i(2165)),d=n(i(695)),o={};Object.keys(s.reducerFiles).forEach((t=>{o[t]=(t=>(e={},i)=>i[t]?"Array"===i[t].constructor.name?[...i[t]]:{...i[t]}:e)(t)}));const r=(0,l.combineReducers)({ui:d.default,uiTimeMarker:a.default,style:u.default,componentDidMounts:g.default,actionLog:c.default,setting:I.default,...o});e.default=r},4436:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t={},e)=>e.setting?{...e.setting}:t},2165:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(8506)),a=n(i(5549)),c=n(i(9301)),g=n(i(982)),I=n(i(2243)),u=n(i(1540)),d=n(i(434)),o=n(i(9422)),r=n(i(865)),B=n(i(7825)),F=n(i(9201)),C=n(i(2423)),U=n(i(4857)),Q=n(i(3829)),b=n(i(8381)),V=n(i(4359)),A=n(i(6620)),p=n(i(7608)),G=n(i(4909)),x=n(i(9167)),R=n(i(1433)),h=n(i(7162)),m=n(i(4381));e.default=(t={},e)=>{switch(e.type){case"ON_RESIZE_START_WINDOW":case"ON_RESIZE_END_WINDOW":case"ON_TRANSITION":case"ON_TRANSITION_END":case"OFF_TRANSITION":case"EXT_TO_CLIENT[ACTION]:ON_TRANSITION":case"bootExtension":return new m.default(e);case"TOGGLE_DISP_MAIN":return{...t};case"API_TO_CLIENT[EMIT]:rank":case"API_TO_CLIENT[EMIT]:tune":case"API_TO_CLIENT[BROADCAST]:tune":return{...t,ranks:{...t.ranks,ol:b.default.getOl(e)}};case"ON_CLICK_MULTISTREAM":return{...t,board:{...t.board,menuLiChild:{...t.board.menuLiChild,color:e.app.multistream?s.default.activeColor:s.default.unactiveColor}},icon:{...t.icon,thunder:{}}};case"COMPONENT_DID_MOUNTS":case"API_TO_CLIENT[BROADCAST]:fetchPosts":return{...t,menus:{...t.menus,self:{...t.menus,transform:Q.default.getTransform(e)}}};case"API_TO_CLIENT[REQUEST]:fetchPosts":case"API_TO_CLIENT[REQUEST]:changeThread":return{...t,posts:{...t.posts,self:x.default.getSelf(e)}};case"API_TO_CLIENT[EMIT]:fetchPosts":case"OPEN_LINKS":case"CLOSE_LINKS":case"TOGGLE_LINKS":return{...t,menus:{...t.menus,self:{...t.menus,transform:Q.default.getTransform(e)}},posts:{...t.posts,self:x.default.getSelf(e)},board:{...t.board,self:{...t.board.self,width:s.default.getSelfWidth(e),height:s.default.getSelfHeight(e),boxShadow:s.default.getSelfBoxShadow(e)},menuLiChild:s.default.getMenuLiChild(e),menuLiLinks:s.default.getMenuLiLinks(e)},links:{...t.links,self:{...t.links.self,display:B.default.getSelfDisplay(e)},linksUl:{...t.links.linksUl,overflowY:B.default.getLinksUlOevrflowY(e)}},icon:{...t.icon,thunder:r.default.getThunder(e),bubble:r.default.getBubble(e),links:r.default.getLinks(e)}};case"TOGGLE_DISP_SET_CH_MODAL":return{...t,setChModal:{...t.setChModal,self:V.default.getSelf(e)}};case"TOGGLE_BUBBLE_POST":return{...t,board:{...t.board,menuLiBubble:{...t.board.menuLiBubble,color:e.ui.isBubblePost?s.default.activeColor:s.default.unactiveColor}},posts:{...t.posts,self:x.default.getSelf(e),more:x.default.getMore(e)},post:{...t.post,self:G.default.getSelf(e),upper:G.default.getUpper(e),bottomPost:G.default.getBottomPost(e)}};case"TOGGLE_DISP_POSTS_SUPPORTER":case"CLOSE_DISP_POSTS_SUPPORTER":return{...t,postsSupporter:{...t.postsSupporter,self:{...t.postsSupporter.self,transform:h.default.getTransform(e)}}};case"ON_CLICK_TO_TIMELINE_THREAD":return{...t,posts:{...t.posts,self:x.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.menuLiChild,color:l.default.isActiveMultistream(e,"reducer")?s.default.activeColor:s.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:s.default.unactiveColor}},video:{...t.video,self:U.default.getSelf(e)},audio:{...t.audio,self:C.default.getSelf(e)}};case"ON_CLICK_TO_MULTI_THREAD":return{...t,posts:{...t.posts,self:x.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:s.default.activeColor},menuLiLinks:{...t.menuLiLinks,color:s.default.activeColor}}};case"ON_CLICK_TO_SINGLE_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiLinks:{...t.menuLiLinks,color:s.default.activeColor}}};case"ON_CLICK_TO_CHILD_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:s.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:s.default.unactiveColor}},icon:{...t.icon,thunder:r.default.getThunder(e)}};case"ON_CLICK_TOGGLE_DISP_MENU_END":return{...t,posts:{...t.posts,self:x.default.getSelf(e)}};case"ON_CLICK_TOGGLE_DISP_DETAIL":case"ON_CLICK_TOGGLE_DISP_MENU":return{...t,menu:{...t.menu,self:{...t.menu.self,width:Q.default.getWidth(e),transform:Q.default.getTransform(e)}},detail:{...t.detail,[`self${c.default.detailRightSelfKey}`]:{...t.detail[`self${c.default.detailRightSelfKey}`],transform:I.default.getTransform(e)},[`self${c.default.detailModalSelfKey}`]:{...t.detail[`self${c.default.detailModalSelfKey}`],transform:g.default.getTransform(e)}},posts:{...t.posts,self:{...t.posts.self,width:x.default.getWidth(e)}},footer:{...t.footer,self:{...t.footer.self,width:d.default.getWidth(e),transform:d.default.getTransform(e)}},menuFooter:{...t.menuFooter,self:{...t.menuFooter.self,width:A.default.getWidth(e)}},postsFooter:{...t.postsFooter,self:{...t.postsFooter.self,maxWidth:R.default.getWidth(e),width:R.default.getWidth(e)}}};case"ON_CLICK_OPEN_LOCK_MENU":return{...t,lockMenu:{...t.lockMenu,menuShare:{...t.lockMenu.menuShare,transform:F.default.getCommonTransform(e)}}};case"OPEN_NEW_POST":case"CLOSE_NEW_POST":return{...t,container:{...t.container,newPost:{...t.container.newPost,transform:a.default.getNotifTranslateY(e)}}};case"OPEN_NOTIF":case"CLOSE_NOTIF":const i=p.default.getNotifsDisplay(e);return{...t,header:{...t.header,self:{...t.header.self,transform:o.default.getNotifTranslateY(e)}},container:{...t.container,newPost:{...t.container.newPost,display:a.default.getNewPostDisplay(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,height:p.default.getNotifsHeight(e)},self:{...t.notif.self,display:i}}};case"TOGGLE_DISP_BOARD":return{...t,board:{...t.board,self:s.default.getSelf(e)}};case"OPEN_INNER_NOTIF":case"CLOSE_INNER_NOTIF":return{...t,innerNotif:{...t.innerNotif,self:{...t.innerNotif.self,height:""!==e.ui.openInnerNotif?`${a.default.getBlockSize(e)}px`:"0px"}}};case"UPDATE_STYLE":const{styleKey:n,eleType:L,tagName:y,style:S}=e;if(n&&L&&y)return{...t,[n]:{...t[n],[L]:{...t[n][L],[y]:{...t[n][L][y],...S}}}};if(n&&L)return{...t,[n]:{...t[n],[L]:{...t[n][L],...S}}};break;case"START_DISP_POSTS":case"START_UNDISP_POSTS":return{...t,extScreen:{...t.extScreen,self:{...t.extScreen.self,transform:u.default.getSelfTransform(e),transition:u.default.getSelfTransition(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,display:p.default.getNotifsDisplay(e)}}};default:return e.style?e.style:t}}},695:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865));e.default=(t=new l.default,e)=>e.ui?t.merge(e.ui):t},7532:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(3669));e.default=(t=new l.default,e)=>e.uiTimeMarker?{...e.uiTimeMarker}:t},5221:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2030:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){return[]}}},7242:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(4381));e.default=l.default},7865:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216)),s=n(i(4817)),a=n(i(7638));class c extends l.default{constructor(t={}){super();const e=t.iFrameId?t.iFrameId:"",i=c.getWidth(t),n=c.getHeight(t),s=t.postsHeight?t.postsHeight:0,a=c.getScreenSize(i),g=t.extensionMode?t.extensionMode:c.extensionModeNone,I=t.extensionWidth?t.extensionWidth:"0%",u=t.extensionHeight?t.extensionHeight:0,d=t&&t.threadScrollY?t.threadScrollY:0,o=c.getIsOpenPosts({height:n,extensionMode:g,extensionHeight:u}),r=!!t.isOpenSetting&&t.isOpenSetting,B=l.default.isSet(t.isOpenMenu)?t.isOpenMenu:c.getIsOpenMenu({screenSize:a}),F=a===c.screenSizeDetailLabel||!!l.default.isSet(t.isOpenDetail)&&t.isOpenDetail,C=!!t.isOpenNewPost&&t.isOpenNewPost,U=!!t.isOpenNotif&&t.isOpenNotif,Q=!!l.default.isSet(t.isOpenPostsSupporter)&&t.isOpenPostsSupporter,b=l.default.isSet(t.isOpenBoard)?t.isOpenBoard:c.getIsOpenBoard({screenSize:a}),V=!!l.default.isSet(t.isOpenSetChModal)&&t.isOpenSetChModal,A=!l.default.isSet(t.isBubblePost)||t.isBubblePost,p=!!l.default.isSet(t.isDispPosts)&&t.isDispPosts,G=!!l.default.isSet(t.isOpenLinks)&&t.isOpenLinks,x=!l.default.isSet(t.isTransition)||t.isTransition,R=t.menuComponent?t.menuComponent:c.getDefaultMenuComponent(),h=t.openLockMenu?t.openLockMenu:c.openLockMenuLabelNo,m=t.openInnerNotif?t.openInnerNotif:"",L=t.clicked?t.clicked:"",y=t.detailCh?t.detailCh:"/",S=t.inputPost?t.inputPost:"",Z=!!t.inputStampId&&t.inputStampId,X=t.inputCurrentTime?t.inputCurrentTime:0,f=t.inputSearch?t.inputSearch:"",E=!l.default.isSet(t.isLoading)||t.isLoading;return this.create({iFrameId:e,width:i,height:n,postsHeight:s,screenSize:a,extensionMode:g,extensionWidth:I,extensionHeight:u,threadScrollY:d,isOpenPosts:o,isOpenSetting:r,isOpenMenu:B,isOpenDetail:F,isOpenNewPost:C,isOpenNotif:U,isOpenPostsSupporter:Q,isOpenBoard:b,isOpenSetChModal:V,isBubblePost:A,isDispPosts:p,isOpenLinks:G,isTransition:x,menuComponent:R,openLockMenu:h,openInnerNotif:m,clicked:L,detailCh:y,inputPost:S,inputStampId:Z,inputCurrentTime:X,inputSearch:f,isLoading:E})}static get openLockMenuLabelNo(){return"No"}static get openLockMenuLabelLike(){return"Like"}static get openLockMenuLabelShare(){return"Share"}static get openLockMenuLabelAbout(){return"About"}static get screenSizeSmallLabel(){return"SMALL"}static get screenSizeMiddleLabel(){return"MIDDLE"}static get screenSizeLargeLabel(){return"LARGE"}static get screenSizeIndexLabel(){return"MENU"}static get screenSizeThreadLabel(){return"THREAD"}static get screenSizeDetailLabel(){return"DETAIL"}static get screenSizeSmallWidthPx(){return a.default.screenSize.small}static get screenSizeMiddleWidthPx(){return a.default.screenSize.middle}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static get menuComponentUsersLabel(){return"Users"}static get menuComponentRankLabel(){return"Rank"}static get menuComponentLogsLabel(){return"Logs"}static get menuComponentSettingLabel(){return"Setting"}static getDefaultMenuComponent(){return c.menuComponentRankLabel}static getWidth(t){return t&&t.extensionWidth>0?t.extensionWidth:t&&t.width>0?t.width:"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return t&&t.extensionHeigt>0?t.extensionHeigt:t&&t.height>0?t.height:"object"==typeof window&&window.innerHeight?window.innerHeight:0}static getScreenSize(t=0){if(!t){if(window&&0===window.innerWidth||0===window.innerHeight)return;window&&window.innerWidth>0&&(t=window.innerWidth)}return"string"==typeof t&&(t=t.replace("px","")),c.screenSizeSmallWidthPx>=t?c.screenSizeSmallLabel:c.screenSizeSmallWidthPx<=t&&c.screenSizeMiddleWidthPx>=t?c.screenSizeMiddleLabel:c.screenSizeLargeLabel}static getIsOpenMenu(t){switch(t.screenSize){case c.screenSizeSmallLabel:return!1;case c.screenSizeMiddleLabel:case c.screenSizeLargeLabel:return!0}}static getIsOpenBoard(t){switch(t.screenSize){case c.screenSizeSmallLabel:return!1;case c.screenSizeMiddleLabel:case c.screenSizeLargeLabel:return!0}}static getIsOpenPosts(t,e=""){let{extensionMode:i,height:n,extensionHeight:l,extensionCloseHeight:s}=t;return i!==c.extensionModeBottom&&i!==c.extensionModeModal||("number"!=typeof n&&(n=Number(n)),"number"!=typeof l&&(l=Number(l)),0!==n&&l<=n)}static getUiUpdatedOpenFlgs({app:t,ui:e},i=""){switch(i){case"toggleMain":case"headerDetailIcon":switch(e.screenSize){case c.screenSizeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenSizeMiddleLabel:e.isOpenDetail?t.detailCh===t.rootCh?(e.isOpenDetail=!1,e.isOpenMenu=!0):(e.isOpenMenu=!1,e.isOpenDetail=!1):(e.isOpenMenu=!1,e.isOpenDetail=!0)}break;case"headerMenuIcon":switch(e.screenSize){case c.screenSizeMiddleLabel:e.isOpenDetail,e.isOpenMenu=!0,e.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(e.screenSize){case c.screenSizeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenSizeMiddleLabel:e.isOpenMenu=!1,e.isOpenDetail=!0;case c.screenSizeLargeLabel:e.isOpenMenu=!0,e.isOpenDetail=!0}}return e}static isActiveMultistream({app:t,ui:e},i=""){return e.menuComponent===c.menuComponentRankLabel&&t.dispThreadType===s.default.dispThreadTypeMulti}}e.default=c},3669:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216)),s=n(i(5549)),a=n(i(544)),c=n(i(7865)),g={index:0,offsetTop:0,label:""};class I extends l.default{constructor(t={}){super(),this.list=[],this.now={...g},this.before={...g},this.after={...g};const e=t&&t.list?t.list:[],i=t&&t.now?t.now:{...g},n=t&&t.before?t.before:{...g},l=t&&t.after?t.after:{...g};return this.create({list:e,now:i,before:n,after:l})}static generate(t=0,e,{app:i,ui:n}){const l=e.length;let c=[],I={...g},u={...g},d={...g};if(l>0){const g=a.default.getSelfMarginTop()+t+s.default.getBlockSize({app:i,ui:n});e.forEach(((t,i)=>{""===I.label&&g<=t.offsetTop&&(I.index=i,I.label=t.innerHTML,I.offsetTop=t.offsetTop,e[i-1]?(u.index=I.index-1,u.label=e[i-1].innerHTML,u.offsetTop=e[i-1].offsetTop):u={...I},e[i+1]?(d.index=I.index+1,d.label=e[i+1].innerHTML,d.offsetTop=e[i+1].offsetTop):d={...I});const n={index:i,offsetTop:t.offsetTop,label:t.innerHTML};c.push(n)})),""===I.label&&(I.index=l-1,I.label=e[I.index].innerHTML,I.offsetTop=e[I.index].offsetTop,u={...I},d={...I},e[I.index-1]&&(u.index=e[I.index-1]?I.index-1:I.index,u.label=e[I.index-1]?e[I.index-1].innerHTML:I.label,u.offsetTop=e[I.index-1]?e[I.index-1].offsetTop:I.offsetTop),e[I.index+1]&&(d.index=e[I.index+1]?I.index+1:I.index,d.label=e[I.index+1]?e[I.index+1].innerHTML:I.label,d.offsetTop=e[I.index+1]?e[I.index+1].offsetTop:I.offsetTop))}return{list:c,now:I,before:u,after:d}}static update(t=0,e,{app:i,ui:n}){let l=e.list,s=e.now,g=e.before,I=e.after;const u=l.length;if(u>0){const e=n.extensionMode===c.default.extensionModeLiveMedia?0:54,i=t+a.default.getSelfMarginTop()+e;s.index===u-1?i<s.offsetTop&&(I={...s},s={...g},g=l[g.index-1]?{...l[g.index-1]}:g):0===s.index?I.offsetTop<=i&&(g=l[s.index],s=l[s.index+1],I=l[I.index+1]?l[I.index+1]:I):s.offsetTop<=i&&i<I.offsetTop||(i<s.offsetTop&&(g=l[g.index-1]?l[g.index-1]:g,s=l[s.index-1]?l[s.index-1]:s,I=l[I.index-1]),I.offsetTop<=i&&(g=l[g.index+1],s=l[s.index+1]?l[s.index+1]:s,I=l[I.index+1]?l[I.index+1]:I))}return{list:l,now:s,before:g,after:I}}}e.default=I},6612:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=i(831),s=n(i(4435)),a=n(i(5513));e.default=function(t={}){let e=null,i=[s.default.updateAction];return e=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:null,(0,l.createStore)(a.default,t,e?e((0,l.applyMiddleware)(...i)):(0,l.applyMiddleware)(...i))}},7923:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5221)),s=n(i(2030)),a=n(i(7242)),c=n(i(7865)),g=n(i(3669));e.default=class{constructor(t){this.ui=new c.default(t.ui),this.componentDidMounts=new s.default(t.componentDidMounts),this.uiTimeMarker=new g.default(t.uiTimeMarker),this.style=new a.default({...t,ui:this.ui}),this.actionLog=new l.default}}},8506:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(4817)),s=n(i(7865)),a=n(i(5549)),c=n(i(9301)),g=n(i(3829)),I=n(i(4381));class u{constructor(t){return{self:u.getSelf(t),menu:u.getMenu(t),menuUl:u.getMenuUl(t),menuLi:u.getMenuLi(t),menuLiChild:u.getMenuLiChild(t),menuLiBubble:u.getMenuLiBubble(t),menuLiLinks:u.getMenuLiLinks(t),menuToggle:u.getMenuToggle(t),links:u.getLinks(t),linksUl:u.getLinksUl(t),linksLi:u.getLinksLi(t),linksLiActive:u.getLinksLiActive(t),linksLiUnactive:u.getLinksLiUnactive(t),linksTuneLi:u.getLinksTuneLi(t),linkMenuUl:u.getLinkMenuUl(t),linkMenuLi:u.getLinkMenuLi(t),linksTabActive:u.getLinksTabActive(t),linksTabUnactive:u.getLinksTabUnactive(t),linksTabLast:u.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return a.default.themeRGB}static get unactiveColor(){return a.default.fontBaseRGB}static get typesMain(){return"MAIN"}static get typesLink(){return"LINK"}static get typesSub(){return"SUB"}static getType({app:t,ui:e}){switch(t.dispThreadType){case l.default.dispThreadTypeMulti:case l.default.dispThreadTypeSingle:return u.typesMain;default:return t.isLinkCh?u.typesLink:u.typesSub}}static getTotalWidth({app:t,ui:e}){return u.size+2*u.padding+u.right}static getSelfTop({app:t,ui:e}){return a.default.getBlockSize({app:t,ui:e})+5}static getSelfWidth({app:t,ui:e},i=!1){let n="93%";if(e.isOpenLinks)if(e.extensionMode===s.default.extensionModeBottom)n="93%";else switch(e.screenSize){case s.default.screenSizeSmallLabel:return"93%";case s.default.screenSizeMiddleLabel:return`calc(97% - ${g.default.getWidth({app:t,ui:e},!1)})`;case s.default.screenSizeLargeLabel:n=`calc( ${97-c.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!1)} )`}else n=u.getTotalWidth({app:t,ui:e})+"px";return i?I.default.trimUnit(n):n}static getSelfHeight({app:t,ui:e}){if(!e.isOpenBoard)return"60px";switch(u.getType({app:t,ui:e})){case u.typesMain:return"237px";case u.typesLink:return"178px";case u.typesSub:return"118px";default:return"0px"}}static getSelfBorderRadius({app:t,ui:e}){return"10px 0px 0px 10px"}static getSelfBackground({app:t,ui:e}){return e.isOpenBoard?a.default.lightRGBA:a.default.whiteRGBA}static getSelfRight({app:t,ui:e},i=!1){const n=e.screenSize===s.default.screenSizeLargeLabel?`calc( ${c.default.getWidth({app:t,ui:e},!0)} + ${u.right}px )`:`${u.right}px`;return i?n:I.default.trimUnit(n)}static getSelfBoxShadow({app:t,ui:e},i=!1){return e.isOpenLinks,"rgb(210, 210, 210) 0px 0px 2px"}static getLinksDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getSelf({app:t,ui:e}){const i=u.getSelfWidth({app:t,ui:e}),n=u.getSelfHeight({app:t,ui:e}),l=u.getSelfBorderRadius({app:t,ui:e}),s=u.getSelfBackground({app:t,ui:e}),c=u.getSelfRight({app:t,ui:e},!0),g=u.getSelfBoxShadow({app:t,ui:e}),d=I.default.getLayoutFlex({position:"fixed",top:u.getSelfTop({app:t,ui:e}),overflow:"hide",right:c,height:n,width:i,padding:"5px",background:s,flexDirection:"row",alignItems:"flex-start",justifyContent:"flex-end",boxShadow:g,borderRadius:l,zIndex:3}),o=I.default.getAnimationBase({transition:a.default.getTransitionFirstOn({app:t,ui:e})});return I.default.get({layout:d,content:{},animation:o})}static getMenu({app:t,ui:e}){const i=I.default.getLayoutFlex({width:u.getTotalWidth({app:t,ui:e})+"px",height:"100%",flexDirection:"column",alignItems:"flex-end"});return I.default.get({layout:i,content:{},animation:{}})}static getMenuUl({app:t,ui:e}){const i=I.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column"}),n=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:{},animation:n})}static getMenuLi({app:t,ui:e}){const i=u.size+"px",n=I.default.getLayoutFlex({flexDirection:"column",width:i,height:i,minWidth:i,minHeight:i,maxWidth:i,maxHeight:i,background:a.default.whiteRGBA,borderRadius:"5px",marginBottom:"5px"}),l=I.default.getContentBase({fontSize:"0.7em",letterSpacing:"1px",lineHeight:"17px"}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:n,content:l,animation:s})}static getMenuLiChild({app:t,ui:e}){const i=s.default.isActiveMultistream({app:t,ui:e},"getLiChild")?u.activeColor:u.unactiveColor,n=I.default.getContentBase({color:i}),l=I.default.getAnimationBase();return I.default.get({layout:{},content:n,animation:l})}static getMenuLiBubble({app:t,ui:e}){const i=e.isBubblePost?u.activeColor:u.unactiveColor,n=I.default.getContentBase({color:i}),l=I.default.getAnimationBase();return I.default.get({layout:{},content:n,animation:l})}static getMenuLiLinks({app:t,ui:e}){const i=a.default.themeRGB,n=I.default.getContentBase({color:i}),l=I.default.getAnimationBase();return I.default.get({layout:{},content:n,animation:l})}static getMenuToggle({app:t,ui:e}){const i=u.size-4+"px",n=I.default.getLayoutFlex({width:i,height:i,minHeight:i,maxHeight:i}),l=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:n,content:{},animation:l})}static getLinks({app:t,ui:e}){const i=u.getLinksDisplay({app:t,ui:e}),n=I.default.getLayoutFlex({display:i,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),l=I.default.getContentBase({});return I.default.get({layout:n,content:l,animation:{}})}static getLinksUl({app:t,ui:e}){const i=I.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),n=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:{},animation:n})}static getLinksLi({app:t,ui:e}){const i=u.size+"px",n=I.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:a.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),l=I.default.getContentBase({cursor:"pointer",lineHeight:"17px"}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:n,content:l,animation:s})}static getLinksLiActive({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.background=a.default.whiteRGB,i.color=a.default.fontBaseRGB,i}static getLinksLiUnactive({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.background=a.default.calmRGB,i.color=a.default.fontBaseRGB,i}static getLinksTuneLi({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.alignItems="center",i}static getLinkMenuUl({app:t,ui:e}){const i=u.size+"px",n=I.default.getLayoutFlex({minHeight:i,height:i,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),l=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:n,content:{},animation:l})}static getLinkMenuLi({app:t,ui:e}){const i=u.size-4+"px",n=I.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:i,minHeight:i,maxHeight:i,background:a.default.reliefRGB,borderRadius:"5px"}),l=I.default.getContentBase({cursor:"pointer",color:a.default.whiteRGB}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:n,content:l,animation:s})}static getLinksTabActive({app:t,ui:e}){const i={};return i.background=a.default.whiteRGBA,i.color=a.default.fontBaseRGB,i}static getLinksTabUnactive({app:t,ui:e}){return u.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){return{margin:"5px 0px 0px 0px"}}}e.default=u},5549:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(2243)),a=n(i(3829)),c=n(i(544)),g=n(i(4381));class I{constructor(t){return{self:I.getSelf(t),multistreamIconWrap:I.getMultistreamIconWrap(t),newPost:I.getNewPost(t),hideScreenBottom:I.getHideScreenBottom(t),linkLabel:I.getLinkLabel(t)}}static get width(){return"100%"}static get widthRatio(){return.94}static get radius(){return"10px"}static get radiuses(){return`${I.radius} ${I.radius} 0px 0px`}static get openHeight(){return 360}static get closeHeight(){return 360}static get threadHeight(){return 360}static get maxZIndex(){return 2147483647}static get closeBottom(){return 0}static get merginRatio(){return.034}static get borderRGB(){return g.default.mono240RGB}static get border(){return`0px solid ${I.borderRGB}`}static get lineShadow(){return`0px 0px 1px ${I.lineShadowColor}`}static get lineInsetShadow(){return`0px 0px 1px ${I.lineShadowColor} inset`}static get lineShadowColor(){return I.downreliefRGB}static get shadow(){return`${g.default.mono230RGB} 0px 0px 5px 0px`}static get darkLightRGB(){return g.default.darkLightRGB}static get darkLightRGBA(){return g.default.darkLightRGBA}static get darkRGB(){return g.default.darkRGB}static get darkRGBA(){return g.default.darkRGBA}static get downreliefRGB(){return g.default.mono160RGB}static get reliefRGB(){return g.default.mono180RGB}static get reliefRGBA(){return g.default.mono180RGBA}static get silverRGB(){return g.default.mono192RGB}static get silverRGBA(){return g.default.mono192RGBA}static get lightGrayRGB(){return g.default.mono211RGB}static get lightGrayRGBA(){return g.default.mono211RGBA}static get chromeOffTabRGB(){return g.default.mono225RGB}static get chromeOffTabRGBA(){return g.default.mono225RGBA}static get softCalmRGB(){return g.default.mono230RGB}static get softCalmRGBA(){return g.default.mono230RGBA}static get middleCalmRGBA(){return g.default.mono235RGBA}static get calmRGB(){return g.default.mono240RGB}static get calmRGBA(){return g.default.mono240RGBA}static get lightRGB(){return g.default.mono245RGB}static get lightRGBA(){return g.default.mono245RGBA}static get offWhiteRGB(){return g.default.mono250RGB}static get offWhiteRGBA(){return g.default.mono250RGBA}static get offWhitePlusRGB(){return g.default.mono252RGB}static get offWhitePlusRGBA(){return g.default.mono252RGBA}static get whiteRGB(){return g.default.mono255RGB}static get whiteRGBA(){return g.default.mono255RGBA}static get fontBaseRGB(){return g.default.fontBaseRGB}static get themeRGBString(){return"79, 174, 159"}static get themeLightRGBString(){return"89, 184, 169"}static get themeSuperLightRGBString(){return"200, 255, 220"}static get themeRGB(){return`rgb(${I.themeRGBString})`}static get themeRGBA(){return`rgba(${I.themeRGBString}, 0.96)`}static get themeRGBAA(){return`rgba(${I.themeRGBString}, 0.8)`}static getBlockSize({app:t,ui:e}){return e.screenSize===l.default.screenSizeSmallLabel?45:60}static getLiveMediaBlockSize({app:t,ui:e}){return 60}static getFaviconSize({app:t,ui:e}){return e.screenSize===l.default.screenSizeSmallLabel?24:30}static getLightThemeRGBA(t=.8){return`rgba(${I.themeLightRGBString}, ${t})`}static getThemeRGBA(t=.8){return`rgba(${I.themeRGBString}, ${t})`}static getTransitionOn({app:t,ui:e}={},i=!1){let n=String(I.transitionOn);return n=t?e.isTransition?`${I.transitionOn}ms`:`${I.transitionOff}ms`:`${I.transitionOn}ms`,i?g.default.trimUnit(n):n}static getTransition({app:t,ui:e}={},i=!1){const n=e.isTransition?`${I.transitionOn}ms`:`${I.transitionOff}ms`;return i?g.default.trimUnit(n):n}static getTransitionFirstOn({app:t,ui:e},i=!1){const n=e.isTransition?`${I.transitionFirstOn}ms`:`${I.transitionOff}ms`;return i?g.default.trimUnit(n):n}static get transitionOn(){return 600}static get transitionNotif(){return 300}static get transitionNotifDisp(){return 3e3}static get transitionFirstOn(){return 300}static get transitionOff(){return 0}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get notifOpenLiveMediaTranslateY(){return"translate3d( 0px, -125px, 0px )"}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, -${2*I.getBlockSize({app:t,ui:e})}px, 0px )`}static getNotifTranslateY({app:t,ui:e}){return e.extensionMode===l.default.extensionModeLiveMedia?e.isOpenNewPost?I.notifOpenLiveMediaTranslateY:I.notifCloseTranslateY:e.isOpenNewPost?I.getNotifOpenTranslateY({app:t,ui:e}):I.notifCloseTranslateY}static getNewPostDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getWidthPx({bootOption:t,app:e,ui:i}){return t?t.width?t.width:I.width:i.width}static getRightPx({app:t},e){return"0%"}static get multistreamWrapDefaultTop(){return 5}static getFontSize({app:t,ui:e}){return e.screenSize===l.default.screenSizeSmallLabel?14:15}static getLetterSpacing({app:t,ui:e}){return e.screenSize===l.default.screenSizeSmallLabel?1.5:2}static getSelf({app:t,ui:e,bootOption:i,type:n}){let s="0px";e.extensionMode===l.default.extensionModeModal&&(s="3px");const a=g.default.getLayoutBlock({display:"initial",width:"100%",height:"100%",overflow:"hidden",borderRadius:s,opacity:1}),c=g.default.getContentBase({fontSize:`${I.getFontSize({app:t,ui:e})}px`,lineHeight:`${I.getFontSize({app:t,ui:e})}px`,letterSpacing:`${I.getLetterSpacing({app:t,ui:e})}px`}),u=g.default.getAnimationBase({transition:`${I.transitionFirstOn}ms`});return g.default.get({layout:a,content:c,animation:u})}static getMultistreamIconWrapTop({app:t,ui:e}){return e.extensionMode===l.default.extensionModeBottom||(e.extensionMode,l.default.extensionModeModal),I.getBlockSize({app:t,ui:e})+I.multistreamWrapDefaultTop+"px"}static getMultistreamIconWrapRight({app:t,ui:e}){switch(e.screenSize){default:case l.default.screenSizeSmallLabel:return"5%";case l.default.screenSizeMiddleLabel:return"20px";case l.default.screenSizeLargeLabel:return`calc( ${s.default.getWidth({app:t,ui:e})} + 20px)`}}static getMultistreamIconWrap({app:t,ui:e}){const i=g.default.getLayoutBlock({width:"30px",height:"30px",margin:"0 auto",background:"rgba(255, 255, 255, 0.8)"}),n=g.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),l=g.default.getAnimationBase({transition:I.transitionOff});return g.default.get({layout:i,content:n,animation:l})}static getNewPost({app:t,ui:e}){let i=I.getNewPostDisplay({app:t,ui:e});const n=c.default.getFixTimeMarker({app:t,ui:e});return delete n.top,{...n,display:i,zIndex:"1",margin:"0px auto",fontSize:"0.7em",bottom:`-${2*I.notifHeight}px`,transition:I.getTransition({app:t,ui:e})}}static getHideScreenBottom({app:t,ui:e}){const i=g.default.getLayoutFlex({position:"fixed",top:"100vh",width:"100vw",height:"100vh",background:I.reliefRGB,zIndex:I.maxZIndex}),n=g.default.getContentBase({}),l=g.default.getAnimationBase({});return g.default.get({layout:i,content:n,animation:l})}static getLinkLabel({app:t,ui:e}){const i=I.getBlockSize({app:t,ui:e})+"px",n=e.screenSize===l.default.screenSizeSmallLabel?"0px":`${a.default.getWidth({app:t,ui:e})}`,s=g.default.getLayoutFlex({maxWidth:"180px",position:"fixed",top:i,left:n,height:"20px",padding:"5px 10px",alignItems:"center",justifyContent:"flex-start",background:"rgba(0, 0, 0, 0.4)",zIndex:"1",borderRadius:"0px 0px 2px 0px"}),c=g.default.getContentBase({fontSize:"0.7em",lineHeight:2,whiteSpace:"nowrap",color:I.whiteRGB}),u=g.default.getAnimationBase();return g.default.get({layout:s,content:c,animation:u})}}e.default=I},9301:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(982)),c=n(i(2243)),g=n(i(3829)),I=n(i(4381)),u=n(i(3282));class d{constructor(t){const{app:e,ui:i}=t,n={},l=d.getDetailClass({app:e,ui:i});return n[`self${d.detailRightSelfKey}`]=d.getDetailRightSelf(t),n[`self${d.detailModalSelfKey}`]=d.getDetailModalSelf(t),n.header=l.getHeader(t),n.headerP=l.getHeaderP(t),n.body=l.getBody(t),n.meta=l.getMeta(t),n.img=l.getImg(t),n.description=l.getDescription(t),n.descriptionAnchor=l.getDescriptionAnchor(t),n.metaContentTypeWrap=l.getMetaContentTypeWrap(t),n.metaContentType=l.getMetaContentType(t),n.ch=l.getCh(t),n.analyze=l.getAnalyze(t),n.analyzeRow=l.getAnalyzeRow(t),n.analyzeCol=l.getAnalyzeCol(t),n.analyzeLabel=l.getAnalyzeLabel(t),n.analyzeValue=l.getAnalyzeValue(t),n.analyzeHr=l.getAnalyzeHr(t),n.h1s=l.getH1s(t),n.h1sLi=l.getH1sLi(t),n.footer=l.getFooter(t),n.footerChild=l.getFooterChild(t),n.footerChildLike=l.getFooterChildLike(t),n.footerChildMoney=l.getFooterChildMoney(t),n.footerChildShare=l.getFooterChildShare(t),n.metaItems=l.getMetaItems(t),n.updateWrap=l.getUpdateWrap(t),n.update=l.getUpdate(t),n.space=l.getSpace(t),n}static get detailRightSelfKey(){return"Right"}static get detailModalSelfKey(){return"Modal"}static get screenSizeOfRightDetail(){return l.default.screenSizeLargeLabel}static get padding(){return 20}static get margin(){return 5}static getDetailClass({app:t,ui:e}){return d.isRightDetail({app:t,ui:e})?c.default:a.default}static isRightDetail({app:t,ui:e}){return e.screenSize===d.screenSizeOfRightDetail}static getDetailModalSelf({app:t,ui:e}){const i=l.default.getScreenSize(e.width),n=i===l.default.screenSizeLargeLabel?"none":"block",c=i===l.default.screenSizeSmallLabel?"0px":g.default.baseWidth,u=a.default.getHeight({app:t,ui:e}),d=e.extensionMode===l.default.extensionModeLiveMedia?"0":s.default.radiuses,o=(s.default.border,s.default.border,s.default.border,I.default.getLayoutBlock({display:n,position:"fixed",top:"100%",left:c,width:a.default.getWidth({app:t,ui:e},!1),height:u,margin:a.default.getMargin({app:t,ui:e}),border:`1px solid ${s.default.borderRGB}`,borderRadius:d,WebkitOverflowScrolling:"touch",zIndex:9})),r=I.default.getContentBase(),B=I.default.getAnimationBase({transform:a.default.getTransform({app:t,ui:e}),transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:o,content:r,animation:B})}static getDetailRightSelf({app:t,ui:e}){const i=I.default.getLayoutBlock({position:"fixed",top:"0px",right:"0px",width:c.default.getWidth({app:t,ui:e}),minWidth:c.default.getWidth({app:t,ui:e}),height:`calc( 100% - ${s.default.getBlockSize({app:t,ui:e})}px )`,WebkitOverflowScrolling:"touch",overflow:"hidden",margin:`${s.default.getBlockSize({app:t,ui:e})}px 0px 0px 0px`,zIndex:0}),n=I.default.getContentBase(),l=I.default.getAnimationBase({transition:"0ms"});return I.default.get({layout:i,content:n,animation:l})}static getFooterBorders({app:t,ui:e}){switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:return{borderTop:s.default.border};case l.default.screenSizeLargeLabel:return{border:s.default.border}}}static getFooterPositions({app:t,ui:e}){switch(e.screenSize){case l.default.screenSizeSmallLabel:return{};case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:return{position:"absolute",right:"0px",bottom:"0px"}}}static getWidth({app:t,ui:e},i=!1){let n="100%";switch(e.screenSize){case l.default.screenSizeLargeLabel:n="30%"}return i?n:I.default.trimUnit(n)}static getTransform({app:t,ui:e}){return d.getDetailClass({app:t,ui:e}).getTransform({app:t,ui:e})}static getHeader({app:t,ui:e}){const i=e.extensionMode===l.default.extensionModeLiveMedia?"none":"flex",n=I.default.getLayoutFlex({display:i,width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,maxHeight:`${s.default.getBlockSize({app:t,ui:e})}px`,borderBottom:`1px solid ${s.default.borderRGB}`,background:s.default.whiteRGBA,padding:"0px 20px"}),a=I.default.getContentBase({fontSize:"1.2em"}),c=I.default.getAnimationBase();return I.default.get({layout:n,content:a,animation:c})}static getHeaderP({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"100%",height:"100%",maxHeight:s.default.getBlockSize({app:t,ui:e})}),n=I.default.getContentBase({textOverflow:"ellipsis"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getBody({app:t,ui:e}){const i=e.extensionMode===l.default.extensionModeLiveMedia?`calc( 100% - ${s.default.getLiveMediaBlockSize({app:t,ui:e})}px )`:`calc( 100% - ${2*s.default.getBlockSize({app:t,ui:e})}px )`,n=I.default.getLayoutGrid({overflowX:"hidden",overflowY:"scroll",width:"100%",height:i,zIndex:0}),a=I.default.getContentBase(),c=I.default.getAnimationBase();return I.default.get({layout:n,content:a,animation:c})}static getMeta({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"max-content",background:s.default.lightRGBA,borderBottom:s.default.border}),n=I.default.getContentBase(),l=I.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:n,animation:l})}static getImg({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"30vh",maxHeight:"400px",backgroundImage:`url(${u.default})`,backgroundPosition:"center center",backgroundSize:"cover",backgroundRepeat:"no-repeat"}),n=I.default.getContentBase(),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getDescription({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"90%",height:"initial",margin:"7%"}),n=I.default.getContentBase({lineHeight:"2em",fontSize:"1.1em",textAlign:"left"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getDescriptionAnchor({app:t,ui:e}){const i=I.default.getLayoutInlineFlex({width:"auto"}),n=I.default.getContentBase({textDecoration:"none"}),l=I.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) scale(0.9)"});return I.default.get({layout:i,content:n,animation:l})}static getMetaContentTypeWrap({app:t,ui:e}){const i=I.default.getLayoutFlex({flexDirection:"column",alignItems:"flex-end",width:"initial",height:"initial",borderRadius:"10px",margin:`${2*d.margin}% ${d.margin}%`}),n=I.default.getContentBase({textAlign:"right"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getMetaContentType({app:t,ui:e}){const i=I.default.getLayoutBlock({background:s.default.reliefRGB,width:"initial",height:"initial",margin:"10px 0px",padding:"10px 20px 10px 20px",justifyContent:"flex-end",borderRadius:"30px"}),n=I.default.getContentBase({color:s.default.whiteRGB,textAlign:"right"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getCh({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"max-content",background:s.default.lightRGBA,borderTop:s.default.border,borderBottom:s.default.border,padding:"15px"}),n=I.default.getContentBase({textAlign:"left",lineHeight:"30px",wordBreak:"break-word"}),l=I.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:n,animation:l})}static getAnalyze({app:t,ui:e}){const i=I.default.getLayoutTable({width:"100%",height:"initial",background:s.default.whiteRGB,borderTop:s.default.border,borderBottom:s.default.border}),n=I.default.getContentBase({textAlign:"center"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getAnalyzeRow({app:t,ui:e}){const i=I.default.getLayoutTableRow({}),n=I.default.getContentBase({}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getAnalyzeCol({app:t,ui:e}){const i=I.default.getLayoutTableCol({width:"33.3%",height:"120px",verticalAlign:"middle",margin:"40px auto 40px auto"}),n=I.default.getContentBase({}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getAnalyzeLabel({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"initial",height:"initial",marginBottom:"20px"}),n=I.default.getContentBase({lineHeight:"14px",fontSize:"0.8em"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getAnalyzeValue({app:t,ui:e}){const i=I.default.getLayoutBlock({margin:"0 auto",width:"initial",height:"initial"}),n=I.default.getContentBase({fontSize:"1.8em",color:s.default.themeRGBA}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getAnalyzeHr({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"70%",height:"initial",margin:"10px auto 10px auto",borderTop:`1px solid ${s.default.borderRGB}`}),n=I.default.getContentBase({}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getH1s({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"initial",margin:`${d.margin}px auto`,background:s.default.whiteRGB,borderTop:s.default.border,borderBottom:s.default.border}),n=I.default.getContentBase({textAlign:"left"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getH1sLi({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"90%",height:"initial",margin:`5px ${d.margin}% 5px ${d.margin}%`}),n=I.default.getContentBase({lineHeight:2,textAlign:"left"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getFooter({app:t,ui:e}){const i=d.getFooterPositions({app:t,ui:e}),n=d.getFooterBorders({app:t,ui:e}),l=I.default.getLayoutFlex({width:"100%",background:s.default.lightRGBA,height:s.default.getBlockSize({app:t,ui:e}),boxShadow:s.default.lineShadow,zÎndex:"1px",...i,...n}),a=I.default.getContentBase({fontSize:"0.7em"}),c=I.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px)"});return I.default.get({layout:l,content:a,animation:c})}static getFooterChild({app:t,ui:e}){const i=I.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=I.default.getContentBase({cursor:"pointer"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getFooterChildLike({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),n=I.default.getContentBase({cursor:"pointer"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getFooterChildMoney({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",height:"100%"}),n=I.default.getContentBase({cursor:"pointer"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getFooterChildShare({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",height:"100%"}),n=I.default.getContentBase({cursor:"pointer"}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getMetaItems({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"90%",margin:`${d.margin}%`}),n=I.default.getContentBase({}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getUpdateWrap({app:t,ui:e}){const i=I.default.getLayoutFlex({justifyContent:"flex-end",alignItems:"flex-end",margin:"0px 0px 30px 0px"}),n=I.default.getContentBase({}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getUpdate({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"160px",borderRadius:"30px",background:s.default.themeRGBA}),n=I.default.getContentBase({textIndent:"15px",cursor:"pointer",color:s.default.whiteRGB}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}static getSpace({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"100%",height:"100px",background:s.default.silverRGBA}),n=I.default.getContentBase({}),l=I.default.getAnimationBase();return I.default.get({layout:i,content:n,animation:l})}}e.default=d},3180:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(9301)),a=n(i(982)),c=n(i(2243));e.default=class{constructor(t){const{app:e,ui:i}=t,n=s.default.getDetailClass({app:e,ui:i});return{self:n.getFooter(t),child:n.getFooterChild(t),childLike:n.getFooterChildLike(t),childMoney:n.getFooterChildMoney(t),childShare:n.getFooterChildShare(t)}}static getDetailClass({app:t,ui:e}){return e.screenSize===l.default.screenSizeSmallLabel?a.default:c.default}static get padding(){return 20}static get margin(){return 5}static getWidth({app:t,ui:e},i=!1){switch(e.screenSize){case l.default.screenSizeSmallLabel:return"100%";case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:return s.default.getDetailClass({app:t,ui:e}).getWidth({app:t,ui:e},i)}}}},982:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(9301)),c=n(i(3829)),g=n(i(9167)),I=n(i(4381));class u{static getWidth({app:t,ui:e},i=!1){let n="0";return n=e.extensionMode===l.default.extensionModeLiveMedia?"100%":e.screenSize===l.default.screenSizeSmallLabel?String(Math.floor(e.width*s.default.widthRatio))+"px":`calc( ${100*s.default.widthRatio}% - ${c.default.getWidth({app:t,ui:e})} )`,i?I.default.trimUnit(n):n}static getBaseMarginRate({app:t,ui:e},i=!1){return Math.floor((1-s.default.widthRatio)/2*100)}static getBaseMargin({app:t,ui:e},i=!1){return g.default.getWidth({app:t,ui:e},!0)*(u.getBaseMarginRate({app:t,ui:e})/100)}static getMargin({app:t,ui:e},i=!1){if(e.extensionMode===l.default.extensionModeLiveMedia)return"0";if(e.extensionMode===l.default.extensionModeBottom)return"0% 8%";switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:const i=u.getBaseMarginRate({app:t,ui:e});return`0% ${i}% 0% ${i}%`}}static getHeight({app:t,ui:e},i=!1){const n=u.getBaseMarginRate({app:t,ui:e}),a=s.default.getBlockSize({app:t,ui:e});if(e.extensionMode===l.default.extensionModeLiveMedia)return`calc(100% - ${s.default.getBlockSize({app:t,ui:e})}px)`;switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:return`calc( ${100-n}% - ${2*a}px )`;case l.default.screenSizeLargeLabel:return`calc( 100% - ${2*a+u.getBaseMargin({app:t,ui:e})}px )`}}static getTransform({app:t,ui:e}){return e.isOpenDetail?u.getOpenSelfTransform({app:t,ui:e}):u.getCloseSelfTransform({app:t,ui:e})}static getCloseSelfTransform({app:t,ui:e}){return"translate3d(0%, 0px, 0px)"}static getOpenSelfTransform({app:t,ui:e}){return e.extensionMode,l.default.extensionModeLiveMedia,`translate3d(0%, calc( -100% - ${s.default.getBlockSize({app:t,ui:e})}px ), 0px)`}static getHeader(t){return a.default.getHeader(t)}static getHeaderP(t){return a.default.getHeaderP(t)}static getBody(t){return a.default.getBody(t)}static getMeta(t){return a.default.getMeta(t)}static getImg(t){return a.default.getImg(t)}static getDescription(t){return a.default.getDescription(t)}static getDescriptionAnchor(t){return a.default.getDescriptionAnchor(t)}static getMetaContentTypeWrap(t){return a.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return a.default.getMetaContentType(t)}static getCh(t){return a.default.getCh(t)}static getAnalyze(t){return a.default.getAnalyze(t)}static getAnalyzeRow(t){return a.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return a.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return a.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return a.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return a.default.getAnalyzeHr(t)}static getH1s(t){return a.default.getH1s(t)}static getH1sLi(t){return a.default.getH1sLi(t)}static getFooter(t){return a.default.getFooter(t)}static getFooterChild(t){return a.default.getFooterChild(t)}static getFooterChildLike(t){return a.default.getFooterChildLike(t)}static getFooterChildMoney(t){return a.default.getFooterChildMoney(t)}static getFooterChildShare(t){return a.default.getFooterChildShare(t)}static getMetaItems(t){return a.default.getMetaItems(t)}static getUpdateWrap(t){return a.default.getUpdateWrap(t)}static getUpdate(t){return a.default.getUpdate(t)}static getSpace(t){return a.default.getSpace(t)}}e.default=u},2243:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(9301)),a=n(i(4381));class c{static get widthDecimalRate(){return.3}static get widthRate(){return 100*c.widthDecimalRate}static get otherWidthDecimalRate(){return 1-c.widthDecimalRate}static get otherWidthRate(){return 100*c.otherWidthDecimalRate}static getWidth({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:n="0%";break;case l.default.screenSizeLargeLabel:n="30%"}return i?a.default.trimUnit(n):n}static getMinWidth({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:n="0%";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:n="320px"}return i?a.default.trimUnit(n):n}static getTransform({app:t,ui:e}){let i=c.closeSelfTransform;switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:i=c.closeSelfTransform;break;case l.default.screenSizeLargeLabel:i="translate3d(0px, 0px, 0px)"}return i}static get closeSelfTransform(){return`translate3d(0%, calc( 100% + ${2*s.default.padding}px ), 0px)`}static get openSelfTransform(){return"translate3d(0%, 0%, 0px)"}static getHeader(t){return s.default.getHeader(t)}static getHeaderP(t){return s.default.getHeaderP(t)}static getBody(t){return s.default.getBody(t)}static getMeta(t){return s.default.getMeta(t)}static getImg(t){return s.default.getImg(t)}static getDescription(t){return s.default.getDescription(t)}static getDescriptionAnchor(t){return s.default.getDescriptionAnchor(t)}static getMetaContentTypeWrap(t){return s.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return s.default.getMetaContentType(t)}static getCh(t){return s.default.getCh(t)}static getAnalyze(t){return s.default.getAnalyze(t)}static getAnalyzeRow(t){return s.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return s.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return s.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return s.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return s.default.getAnalyzeHr(t)}static getH1s(t){return s.default.getH1s(t)}static getH1sLi(t){return s.default.getH1sLi(t)}static getFooter(t){return s.default.getFooter(t)}static getFooterChild(t){return s.default.getFooterChild(t)}static getFooterChildLike(t){return s.default.getFooterChildLike(t)}static getFooterChildMoney(t){return s.default.getFooterChildMoney(t)}static getFooterChildShare(t){return s.default.getFooterChildShare(t)}static getMetaItems(t){return s.default.getMetaItems(t)}static getUpdateWrap(t){return s.default.getUpdateWrap(t)}static getUpdate(t){return s.default.getUpdate(t)}static getSpace(t){return s.default.getSpace(t)}}e.default=c},3817:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5549)),s=n(i(4381));class a{constructor(t){return{self:a.getSelf(t)}}static get datasetsBase(){return{backgroundColor:"rgba(240, 100, 195, 0.2 )",borderCapStyle:"square",borderColor:"rgba(240, 100, 195, 0.8 )",borderWidth:"4",pointBackgroundColor:"rgba(240, 100, 195, 0.8 )",pointBorderColor:"rgba(240, 100, 195, 0 )",pointHoverBackgroundColor:"rgba(255, 255, 255, 0.8 )",pointHoverBorderColor:"rgba(240, 100, 195, 0.8 )",pointHoverBorderWidth:"4",data:[]}}static get optionsBase(){return{responsive:!0,responsiveAnimationDuration:0,elements:{point:{backgroundColor:"rgba(79, 174, 159, 0.6)",borderAlign:"left",borderColor:"rgba(79, 174, 159, 0.6)",borderWidth:100},line:{tension:.1,backgroundColor:"rgba(79, 174, 159, 0.6)",borderWidth:"10",borderColor:"rgba(79, 174, 159, 0.6)",borderCapStyle:"square",borderDash:[]}},legend:{display:!1},tooltips:{enabled:!0,intersect:!0,backgroundColor:"rgba(240, 100, 195, 0.7 )",callbacks:{label:(t,e)=>{let i=e.datasets[t.datasetIndex].label||"";return i&&(i+=": "),i+=Math.round(100*t.yLabel)/100,"0"!==i?i:null},title:(t,e)=>t.map((t=>e.labels[t.index]))}},scale:{ticks:{fontSize:16,fontColor:l.default.fontBaseRGB,backdropColor:"rgba(255,255,255,0)",beginAtZero:!0,max:5,min:0,stepSize:1},pointLabels:{fontSize:14,fontColor:l.default.fontBaseRGB}}}}static getSelf(t){const e=s.default.getLayoutFlex({height:"auto",marginBottom:"40px",flexDirection:"column"}),i=s.default.getContentBase({}),n=s.default.getAnimationBase({});return s.default.get({layout:e,content:i,animation:n})}}e.default=a},1540:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static getTop({app:t,ui:e}){return 0}static getSelfTransform({app:t,ui:e},i=""){return e.extensionMode===l.default.extensionModeBottom?e.isDispPosts?"translate3d(0px, -100%, 0px)":"translate3d(0px, 0%, 0px)":"translate3d(0px, 0px, 0px)"}static getSelfTransition({app:t,ui:e}){return e.extensionMode===l.default.extensionModeBottom?(e.isDispPosts,`${s.default.transitionOn}ms`):"0ms"}static getSelf({app:t,ui:e}){const i=a.default.getLayoutFlex({position:"fixed",top:c.getTop({app:t,ui:e}),justifyContent:"flex-start",alignItems:"flex-start",height:"100%"}),n=a.default.getContentBase(),l=a.default.getAnimationBase({transform:c.getSelfTransform({app:t,ui:e}),transition:c.getSelfTransition({app:t,ui:e})});return a.default.get({layout:i,content:n,animation:l})}}e.default=c},434:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(9301)),c=n(i(3829)),g=n(i(4381));class I{constructor(t){return{self:I.getSelf(t)}}static getWidth({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:n="200%";break;case l.default.screenSizeMiddleLabel:n=t.isOpenDetail?`calc( 100% + ${c.default.getWidth({app:t,ui:e})} )`:`calc( 100% + ${a.default.getWidth({app:t,ui:e})} )`;break;case l.default.screenSizeLargeLabel:n="100%"}return i?g.default.trimUnit(n):n}static getLeft({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:n="0px"}return i?g.default.trimUnit(n):n}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";if(e.extensionMode===l.default.extensionModeBottom)i=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( -50%, 0px, 0px )";else switch(e.screenSize){case l.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 100%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case l.default.screenSizeMiddleLabel:i=e.isOpenDetail?`translate3d( -${c.default.baseWidth}, 0px, 0px )`:"translate3d( 0px ,0px, 0px )";break;case l.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getBorders({app:t,ui:e}){return e.extensionMode===l.default.extensionModeBottom?{border:0}:e.screenSize===l.default.screenSizeSmallLabel?{border:s.default.border}:{borderTop:s.default.border,borderBottom:s.default.border}}static getSelf({app:t,ui:e}){const i=I.getBorders({app:t,ui:e}),n=e.extensionMode===l.default.extensionModeBottom?s.default.radiuses:"0px",a=g.default.getLayoutFlex({position:"fixed",bottom:"0px",left:I.getLeft({app:t,ui:e}),height:s.default.getBlockSize({app:t,ui:e}),width:I.getWidth({app:t,ui:e}),zIndex:s.default.maxZIndex,borderRadius:n,justifyContent:"flex-start",...i}),c=g.default.getAnimationBase({transform:I.getTransform({app:t,ui:e}),transition:s.default.getTransition({app:t,ui:e})});return g.default.get({layout:a,content:{},animation:c})}}e.default=I},9422:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(4381));class c{constructor(t){return{self:c.getSelf(t),headTab:c.getHeadTab(t),rightIcon:c.getRightIcon(t),leftIcon:c.getLeftIcon(t),userIcon:c.getUserIcon(t),userIconImg:c.getUserIconImg(t),liveCntWrap:c.getLiveCntWrap(t),childAnalyzeWrap:c.getChildAnalyzeWrap(t),childAnalyzeType:c.getChildAnalyzeType(t),childAnalyzeCnt:c.getChildAnalyzeCnt(t),childTalknLogo:c.getChildTalknLogo(t)}}static get selfHeight(){return"100%"}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get widthRatio(){return.94}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, ${s.default.getBlockSize({app:t,ui:e})}px, 0px )`}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNotif?c.getNotifOpenTranslateY({app:t,ui:e}):c.notifCloseTranslateY}static getMargin({app:t,ui:e}){return e.extensionMode===l.default.extensionModeBottom?"0px 5% 0px 5%":"0 auto"}static getChildAnalyzeRight({app:t,ui:e}){switch(e.screenSize){case l.default.screenSizeSmallLabel:return"5%";case l.default.screenSizeMiddleLabel:return"10%";case l.default.screenSizeLargeLabel:return"15%"}}static getChildAnalyzePositions({app:t,ui:e}){const i=e.screenSize===l.default.screenSizeSmallLabel?"8px 0px 0px 0px":"7px auto";return e.extensionMode===l.default.extensionModeBottom||(e.extensionMode,l.default.extensionModeModal),{position:"absolute",top:"0px",right:c.getChildAnalyzeRight({app:t,ui:e}),margin:i}}static getBorderRadius({app:t,ui:e},i=!1){return e.extensionMode===l.default.extensionModeBottom?"100%"===e.extensionWidth?"0px":`${s.default.radius} ${s.default.radius} 0px 0px`:e.extensionMode===l.default.extensionModeModal?`${s.default.radius} ${s.default.radius} 0px 0px`:0}static getSelf({app:t,ui:e}){const i=e.extensionMode===l.default.extensionModeBottom?"90%":"100%",n=e.extensionMode===l.default.extensionModeNone?0:s.default.border,g=c.getBorderRadius({app:t,ui:e}),I=e.extensionMode===l.default.extensionModeNone?s.default.lineShadow:s.default.lineInsetShadow,u=a.default.getLayoutFlex({position:"fixed",top:0,left:0,width:i,height:`${s.default.getBlockSize({app:t,ui:e})}px`,borderTop:n,borderRight:s.default.border,borderBottom:s.default.border,borderLeft:s.default.border,borderRadius:g,background:s.default.whiteRGB,margin:c.getMargin({app:t,ui:e}),zIndex:1e3,boxShadow:I}),d=a.default.getContentBase({textAlign:"center"}),o=a.default.getAnimationBase({transform:c.getNotifTranslateY({app:t,ui:e})});return a.default.get({layout:u,content:d,animation:o})}static getUserIcon(t){const e=a.default.getLayoutBlock({flexGrow:2,height:"auto"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getUserIconImg(t){const e=a.default.getLayoutInlineBlock({width:"30px",margin:"0px 10px 0px 0px"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getLiveCntWrap(t){const e=a.default.getLayoutInlineBlock({position:"absolute",width:"100%",height:"100%",top:"3px",left:"20%"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getHeadTab({app:t,ui:e}){const i=e.screenSize===l.default.screenSizeSmallLabel?"60%":"40%",n=a.default.getLayoutFlex({justifyContent:"center",width:i,height:"100%"}),s=a.default.getContentBase({fontSize:"1.2em"}),c=a.default.getAnimationBase();return a.default.get({layout:n,content:s,animation:c})}static getRightIcon({app:t,ui:e}){const i=e.screenSize===l.default.screenSizeSmallLabel?"20%":"30%",n=a.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:i,height:"100%"}),s=a.default.getAnimationBase();return a.default.get({layout:n,content:{},animation:s})}static getLeftIcon({app:t,ui:e}){const i=e.screenSize===l.default.screenSizeSmallLabel?"20%":"30%",n=a.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:i,height:"100%"}),s=a.default.getContentBase({}),c=a.default.getAnimationBase();return a.default.get({layout:n,content:s,animation:c})}static getChildAnalyzeWrap({app:t,ui:e}){const i=c.getChildAnalyzePositions({app:t,ui:e}),n=a.default.getLayoutFlex({...i,flexDirection:"column",width:"40px",height:"28px"}),l=a.default.getContentBase({}),s=a.default.getAnimationBase();return a.default.get({layout:n,content:l,animation:s})}static getChildAnalyzeType({app:t,ui:e}){const i=a.default.getLayoutBlock({height:"14px",marginBottom:"4px"}),n=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getChildAnalyzeCnt({app:t,ui:e}){const i=a.default.getLayoutBlock({height:"14px"}),n=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getChildTalknLogo({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({position:"absolute",width:`${s.default.getBlockSize({app:t,ui:e})}px`,height:`${s.default.getBlockSize({app:t,ui:e})}px`}),n=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getNotif({app:t,ui:e}){const i=a.default.getLayoutBlock({position:"relative",top:`${s.default.getBlockSize({app:t,ui:e})}px`,width:"50%",height:s.default.notifHeight,margin:"0 auto",zIndex:"10",background:"rgba(0, 0, 0, 0.4)",borderRadius:"20px"}),n=a.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),l=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return a.default.get({layout:i,content:n,animation:l})}}e.default=c},865:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7638)),s=n(i(7865)),a=n(i(5549)),c=n(i(4381)),g=n(i(3065)),I=n(i(3415)),u=n(i(9993)),d=n(i(157)),o=n(i(8649)),r=n(i(8443)),B=n(i(2107)),F=n(i(1708)),C=n(i(4836)),U=n(i(8907)),Q=n(i(8397)),b=n(i(6349)),V=n(i(7820)),A=n(i(9567));class p{constructor(t){t.bootOption,t.app;const e=p.getSvgIcon(t),i=p.getHeadTab(t),n=p.getMenu(t),l=p.getTalknLogo(t),s=p.getUser(t),a=p.getHeaderUser(t),c=p.getTag(t),g=p.getHome(t),I=p.getGraph(t);return{svgIcon:e,headTab:i,menu:n,talknLogo:l,user:s,headerUser:a,search:p.getSearch(t),tag:c,home:g,graph:I,index:p.getIndex(t),logs:p.getLogs(t),setting:p.getSetting(t),thunder:p.getThunder(t),bubble:p.getBubble(t),detail:p.getDetail(t),heart:p.getHeart(t),share:p.getShare(t),money:p.getMoney(t),openEmoji:p.getOpenEmoji(t),close:p.getClose(t),ch:p.getCh(t),update:p.getUpdate(t),loading:p.getLoading(t),tune:p.getTune(t),liveCnt:p.getLiveCnt(t),stampStr:p.getStampStr(t),stampLabel:p.getStampLabel(t)}}static get defaultOption(){return{sizePx:p.largeSize,active:!0}}static get smallSize(){return"24px"}static get middleSize(){return"36px"}static get largeSize(){return"48px"}static get bigSize(){return"64px"}static get smallMargin(){return 2}static get largeMargin(){return 4}static getMargin({app:t,ui:e}){return e.screenSize===s.default.screenSizeSmallLabel?p.smallMargin:p.largeMargin}static getSvgIcon({app:t,ui:e},i={active:!1,key:""}){const n=p.smallSize,l=e.screenSize===s.default.screenSizeSmallLabel?"0":"4px 0 6px";return c.default.get({layout:c.default.getLayoutInlineFlex({width:n,maxWidth:n,minWidth:n,height:n,maxHeight:n,minHeight:n,margin:l}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getEmpty({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:l}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTwitter({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?V.default:A.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getFacebook({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?r.default:B.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAppstore({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?u.default:d.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAndroid({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?g.default:I.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getHome({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?U.default:Q.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getGraph({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=i.active?F.default:C.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalkn({app:t,ui:e},i={}){const n=(i={...p.defaultOption,...i}).sizePx?i.sizePx:p.middleSize,l=(i.active,b.default),s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,height:n,minWidth:n,minHeight:n,backgroundSize:n,backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalknLogo({app:t,ui:e}){return{img:c.default.get({layout:c.default.getLayoutBlock({backgroundImage:`url(${l.default.assetsImgPath}talkn_logo2.png)`,backgroundPosition:"center center",backgroundSize:"90%",backgroundRepeat:"no-repeat"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getChromeExtension({app:t,ui:e},i={}){i={...p.defaultOption,...i};const n="100%",l=o.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:n,minWidth:n,height:"180px",minHeight:"60px",backgroundSize:"75%",backgroundPosition:"center",backgroundImage:`url(${l})`,backgroundRepeat:"no-repeat",backgroundColor:a.default.silverRGBA}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTag({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),left:c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(45deg) translate3d(5px, 5px, 0px)"})}),right:c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(-135deg) translate3d(-6px, -4px, 0px)"})}),bar:c.default.get({layout:c.default.getLayoutInlineBlock({background:a.default.reliefRGB,width:"2px",height:"13px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(40deg) translate3d(-5px, 13px, 0px)"})})}}static getHomeCss({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),n=c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"19px",height:"18px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(135deg) translate3d(5px, -3px, 0px)"})}),l=c.default.get({layout:c.default.getLayoutInlineBlock({borderRight:`2px solid ${a.default.reliefRGB}`,borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"20px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(2px, -6px, 0px)"})});return{div:i,leaf:n,door:c.default.get({layout:c.default.getLayoutInlineBlock({background:`${a.default.reliefRGB}`,width:"6px",height:"8px",margin:"0 auto",borderRadius:"5px 5px 0px 0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(-11px, -5px, 0px)"})}),base:l}}static getSearch({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:`${a.default.getBlockSize({app:t,ui:e})}px`,height:`${a.default.getBlockSize({app:t,ui:e})}px`,borderRadius:"100px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),circle:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",top:"4px",left:"16px",margin:"7px auto",width:"18px",height:"18px",borderRadius:"100px",border:`3px solid ${a.default.chromeOffTabRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bar:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"23px",left:"13px",margin:"0 auto",background:a.default.chromeOffTabRGB,width:"4px",height:"12px",borderRadius:"10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"scale(1) translate3d(0px, 0px, 0px) rotate(45deg)"})})}}static getUser({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),top:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"6px",height:"6px",borderRadius:"10px",position:"relative",top:"-10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"8px",height:"12px",borderRadius:"6px",position:"relative",top:"10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getHeaderUser({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"5px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),top:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:`${a.default.chromeOffTabRGB}`,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:`${a.default.chromeOffTabRGB}`,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getIndex({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),n=c.default.get({layout:c.default.getLayoutBlock({width:"24px",height:"24px",margin:"0 auto",borderRadius:"4px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),l=c.default.get({layout:c.default.getLayoutBlock({width:"24px",height:"2px",margin:"5px auto",borderRadius:"6px",background:a.default.reliefRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()});return{div:i,wrap:n,top:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),middle:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})})}}static getLogs({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),n=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"3px",left:"-6px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) rotate(-15deg)"})}),l=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"9px",height:"13px",borderRadius:"45px 30px 45px 45px",position:"relative",left:"2px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),s=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"6px",height:"8px",borderRadius:"10px",position:"relative",top:"-2px",left:"2px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),g=c.default.get({layout:c.default.getLayoutBlock({width:"7px",height:"2px",background:a.default.offWhiteRGB,margin:"0 auto",zIndex:"1000",position:"relative",left:"1px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 1px, -9px, 1000px )"})}),I=c.default.get({layout:c.default.getLayoutInlineBlock({width:"36px",height:"36px",position:"absolute",top:"-4px",left:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 0.5 ) rotate(30deg)"})}),u=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"11px",height:"21px",borderRadius:"30px 50px 40px 40px",position:"relative",left:"-1px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),d=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"8px",height:"8px",borderRadius:"2px 2px 3px 3px",position:"relative",left:"-1px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:i,foot1:n,foot1Top:l,foot1Space:g,foot1Bottom:s,foot2:I,foot2Top:u,foot2Space:c.default.get({layout:c.default.getLayoutBlock({width:"19px",height:"3px",background:a.default.offWhiteRGB,margin:"0 auto",zIndex:"1000"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, -10px, 1000px )"})}),foot2Bottom:d}}static getSetting({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),n=c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",background:a.default.reliefRGB,width:"4px",height:"4px",borderRadius:"1px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:i,wing1:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(9.5px, 1px, 0px) rotate(0deg)"})}),wing2:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 15px, 4px, 0px ) rotate( 45deg )"})}),wing3:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 17px, 9px, 0px ) rotate( 90deg )"})}),wing4:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 15.5px, 14px, 0px ) rotate( 125deg )"})}),wing5:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 9.5px, 17px, 0px ) rotate( 180deg )"})}),wing6:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 3px, 14px, 0px ) rotate( 225deg )"})}),wing7:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 1px, 9px, 0px ) rotate( 270deg )"})}),wing8:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 2.5px, 4px, 0px ) rotate( 315deg )"})}),circle:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",top:"2px",left:"3px",width:"16px",height:"16px",border:`3px solid ${a.default.reliefRGB}`,borderRadius:"50px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 1px, 0px )"})})}}static getThunder({app:t,ui:e}){let i=a.default.reliefRGBA;return s.default.isActiveMultistream({app:t,ui:e})&&(i=a.default.themeRGBA),{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"rotate(0deg) translate(0px, 0px)"})}),wrap:c.default.get({layout:c.default.getLayoutInlineBlock({borderRadius:"50px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"rotate(90deg) translate3d(0px,0px,0px)"})}),top:c.default.get({layout:c.default.getLayoutBlock({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:"transparent",borderRightColor:"transparent",borderBottomColor:`${i}`,borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(-3px, -3px)"})}),bottom:c.default.get({layout:c.default.getLayoutFlex({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:`${i}`,borderRightColor:"transparent",borderBottomColor:"transparent",borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(15px, -3px)"})})}}static getPlay({app:t,ui:e}){const i=e.isOpenLinks?a.default.themeRGB:a.default.reliefRGB,n="24px";return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),playCircle:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",width:n,height:n,minWidth:n,minHeight:n,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),playTriangle:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",width:"6px",height:"6px",borderTop:"6px solid transparent",borderRight:"6px solid transparent",borderBottom:"6px solid transparent",borderLeft:`6px solid ${i}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(4px, 1.5px, 0px)"})})}}static getLinks({app:t,ui:e}){const i=a.default.themeRGB,n="24px",l="14px",s="4px";return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),linksA1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"6px",width:n,height:l,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksA2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",left:"5px",width:s,height:s,borderRadius:"10px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})}),linksB1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"0px",width:n,height:l,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksB2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"-5px",left:"-5px",width:s,height:s,borderRadius:"10px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})})}}static getBubble({app:t,ui:e}){const i=e.isBubblePost?a.default.themeRGB:a.default.reliefRGBA;return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),bubble:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"18px",height:"14px",background:i,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),bubbleBar:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"5px",height:"10px",background:i,border:`3px solid ${i}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(30deg, 28deg) rotate(30deg) translate3d(-2px, -7px, 0px)"})})}}static getDetail({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0":"1px auto",n=c.default.get({layout:c.default.getLayoutInlineFlex({width:"40px",height:"40px",borderRadius:"100px",margin:i,cursor:"pointer"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),l=c.default.get({layout:c.default.getLayoutBlock({width:"26px",height:"28px",margin:"7px auto",borderRadius:"2px",background:`${a.default.calmRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),g=c.default.get({layout:c.default.getLayoutBlock({width:"14px",height:"2px",margin:"3px auto",borderRadius:"6px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()});return{div:n,wrap:l,bar1:c.default.get({layout:{...g,width:"7px",margin:"5px 0px 0px 6px"},content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar2:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar3:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),bar4:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),mekuri:c.default.get({layout:{...g,position:"absolute",top:0,rightt:0,width:0,height:0,borderRadius:0,borderTop:`4px solid ${a.default.whiteRGB}`,borderLeft:`4px solid ${a.default.whiteRGB}`,borderRight:`4px solid ${a.default.reliefRGB}`,borderBottom:`4px solid ${a.default.reliefRGB}`},content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(18px, -3px, 0px) rotate( 90deg )"})})}}static getMenu({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})})}),dot:c.default.get({layout:c.default.getLayoutBlock({position:"relative",top:"2px",width:"6px",height:"6px",margin:"4px auto",borderRadius:"6px",background:a.default.calmRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()})}}static getHeadTabLeftTransform(){return p.getHeadTabLeftOpenTransform}static getHeadTabRightTransform(){return p.getHeadTabRightOpenTransform}static get getHeadTabLeftOpenTransform(){return"rotate( 120deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightOpenTransform(){return"rotate( -120deg ) translate3d(-3px, 5px, 0px)"}static get getHeadTabLeftCloseTransform(){return"rotate( 90deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightCloseTransform(){return"rotate( -90deg ) translate3d(-3px, 5px, 0px)"}static getHeadTab({app:t,ui:e}){const i=c.default.getLayoutInlineBlock({width:"4px",borderRadius:"10px",background:a.default.calmRGB});return{div:c.default.get({layout:c.default.getLayoutBlock({width:"40px",height:"20px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),left:c.default.get({layout:i,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:p.getHeadTabLeftTransform()})}),right:c.default.get({layout:i,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:p.getHeadTabRightTransform()})})}}static getHeart({app:t,ui:e}){return e.openLockMenu===s.default.openLockMenuLabelShare?a.default.themeRGBA:a.default.reliefRGB,{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:p.smallSize,height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),before:c.default.get({layout:c.default.getLayoutBase({width:"10px",height:"17px",borderRadius:"10px 10px 0 0",background:a.default.reliefRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(-45deg) translate3d(0px, 4px, 0px)"})}),after:c.default.get({layout:c.default.getLayoutBase({width:"17px",height:"10px",borderRadius:"0 10px 10px 0",background:a.default.reliefRGB}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"rotate(-45deg) translate3d(11px, -4px, 0px)"})})}}static getShare({app:t,ui:e}){const i=e.openLockMenu===s.default.openLockMenuLabelShare?a.default.themeRGBA:a.default.reliefRGB,n=c.default.get({layout:c.default.getLayoutInlineBlock({width:p.smallSize,height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),l=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"9px",width:"16px",height:"14px",margin:"0 auto",border:`2px solid ${i}`,borderRadius:"3px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -3px, 0px)"})}),g=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"6px",left:"16px",width:"2px",height:"11px",margin:"0 auto",background:i}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -3px, 0px)"})});return{div:n,base:l,whiteBar1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"11px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -2px, 0px)"})}),whiteBar2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"18px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -2px, 0px)"})}),bar:g,arrow:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"13px",width:"8px",height:"8px",borderTop:`2px solid ${i}`,borderRight:`2px solid ${i}`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px) rotate( -45deg)"})})}}static getMoney({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:p.smallSize,height:p.smallSize,margin:`${p.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(0px, -2px, 0px)"})}),outer:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",width:"20px",height:"20px",borderRadius:"24px",border:`2px solid ${a.default.reliefRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(0px, 3px, 0px)"})}),inner:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",width:"8px",height:"8px",borderRadius:"8px",border:`2px solid ${a.default.reliefRGB}`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 4px, 0px)"})})}}static getOpenEmoji(t){const{app:e,ui:i}=t,n="5px",l=s.default.screenSizeSmallLabel===i.screenSize?"none":"inline-block";return{div:c.default.get({layout:c.default.getLayoutInlineBlock({display:l,width:n,height:n,minWidth:n,minHeight:n,margin:"0px 5px 0px 0px",borderRight:"5px solid transparent",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid rgba(200,200,200,0.8)"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:a.default.getTransition({app:e,ui:i})})})}}static getCloseEmoji({app:t,ui:e}){const i="8px";return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:i,height:i,minWidth:i,minHeight:i,margin:"0px 0px 0px -20px",borderRight:"8px solid rgba(200,200,200,0.8)",borderTop:"8px solid transparent",borderBottom:"8px solid transparent",borderLeft:"8px solid transparent"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:a.default.getTransition({app:t,ui:e})})})}}static getCloseOptionModal({app:t,ui:e}){return{div:{position:"absolute",right:0,transform:`translate( 0px, -${a.default.getBlockSize({app:t,ui:e})+20}px)`}}}static getClose({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineFlex({width:a.default.getBlockSize({app:t,ui:e}),height:a.default.getBlockSize({app:t,ui:e}),margin:"1px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutFlex({alignItems:"center",justifyContent:"center",margin:"0 auto",width:"80%",height:"80%",background:a.default.calmRGBA,border:`0px solid ${a.default.calmRGB}`,borderRadius:"50%",boxShadow:"0px 0px 4px rgba(100, 100, 100, 1)"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(0deg)"})}),bar1:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"70%",background:a.default.whiteRGBA,borderRadius:"2px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(45deg)"})}),bar2:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"70%",background:a.default.whiteRGBA,borderRadius:"2px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(-45deg)"})})}}static getCh({app:t,ui:e}){const i=a.default.lightGrayRGB;return{div:c.default.get({layout:c.default.getLayoutFlex({width:"46px",height:"46px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),chC:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"3%",width:"44%",height:"44%",border:`4px solid ${i}`,borderRadius:"100%"}),content:{},animation:{}}),chCSpace:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"35%",left:"30%",width:"30%",height:"30%",background:a.default.lightRGB}),content:{},animation:{transform:"rotate(45deg)"}}),chCCircle1:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"37%",left:"33%",width:"9%",height:"9%",background:i,borderRadius:"100%"}),content:{},animation:{transform:"scale(1) translate(-32%, -60%)"}}),chCCircle2:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"59%",left:"33%",width:"9%",height:"9%",background:i,borderRadius:"100%"}),content:{},animation:{transform:"scale(1) translate(-7%, 30%)"}}),chH1:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"53%",width:"10%",height:"43%",background:i,borderRadius:"23%"}),content:{},animation:{}}),chH2:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"79%",width:"10%",height:"43%",background:i,borderRadius:"23%"}),content:{},animation:{}}),chH3:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"47%",left:"53%",width:"36%",height:"9%",background:i}),content:{},animation:{}})}}static getUpdate({app:t,ui:e}){const i=a.default.whiteRGB;return{div:c.default.get({layout:c.default.getLayoutFlex({width:p.middleSize,height:p.middleSize}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 0.75)"})}),circle:c.default.get({layout:c.default.getLayoutBase({width:"55%",height:"55%",borderRadius:"30px",border:`2px solid ${i}`,overflow:"visible"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),bar:c.default.get({layout:c.default.getLayoutBase({position:"relative",top:"1px",left:"12px",width:"8px",height:"8px",background:"none",borderTop:`0px solid ${a.default.themeRGB}`,borderRight:`2px solid ${i}`,borderBottom:`2px solid ${i}`,borderLeft:`0px solid ${a.default.themeRGB}`}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"rotate(25deg)"})}),white:c.default.get({layout:c.default.getLayoutBase({position:"relative",top:"2px",left:"12px",width:"10px",height:"4px",background:"rgba(100, 192, 170, 1)"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"rotate(25deg)"})})}}static getLoading({app:t,ui:e}){return a.default.whiteRGB,{div:c.default.get({layout:c.default.getLayoutFlex({}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutBase({margin:"0 auto",width:"2em",height:"2em",borderRadius:"50%",borderTop:"0.3em solid rgba(255, 255, 255, 0.2)",borderRight:"0.3em solid rgba(255, 255, 255, 0.2)",borderBottom:"0.3em solid rgba(255, 255, 255, 0.2)",borderLeft:"0.3em solid #ffffff"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translateZ(0)",animation:"Rotation 1.1s infinite linear"})}),after:c.default.get({layout:c.default.getLayoutBase({display:"none",borderRadius:"50%",width:"2em",height:"2em"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})})}}static getTune({app:t,ui:e}){const i="30px",n=1e6,l=a.default.chromeOffTabRGB,s="153px",g="190px",I="280px",u="317px",d="69px",o="146px",r="324px",B="401px";return{div:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",width:"500px",height:"500px"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"scale(1)"})}),side1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"135px",left:"135px",border:`30px solid ${l}`,borderRadius:"300px",width:"230px",height:"230px",zIndex:0}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),side2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"50px",left:"50px",border:`30px solid ${l}`,borderRadius:"300px",width:"400px",height:"400px",zIndex:0}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),cut:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"50px",left:"-150px",background:"none",width:"0px",height:"0px",borderTop:`200px solid ${a.default.lightRGB}`,borderRight:"400px solid rgba(255,255,255,0)",borderBottom:`200px solid ${a.default.lightRGB}`,borderLeft:"400px solid rgba(255,255,255,0)",zIndex:1}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),center:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"220px",left:"220px",width:"60px",height:"60px",borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftTop1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:s,left:d,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftTop2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:g,left:o,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftBottom1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:u,left:d,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftBottom2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:I,left:o,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightTop1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:s,left:B,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightTop2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:g,left:r,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightBottom1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:u,left:B,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightBottom2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:I,left:r,width:i,height:i,borderRadius:"100px",background:l,zIndex:n}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})})}}static getLiveCnt({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"26px",height:"26px",background:`rgba(${a.default.themeRGBString}, 0.85)`,borderRadius:"26px",boxShadow:"0px 0px 0px rgba(255,255,255,1)"}),content:c.default.getContentBase({fontSize:"0.7em",textAlign:"center"}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:c.default.getContentBase({textAlign:"center",color:a.default.whiteRGB}),animation:c.default.getAnimationBase()})}}static getStampStr(t=!0){let e="1",i="40px",n="2em",l="flex-start";return t&&(e="1.5",i="100%",n="3.2em",l="center"),`display: flex;justify-content: ${l};align-items: center;width: 100%;height: ${i};transform: scale(${e});line-height: 2em;font-size: ${n};`}static getStampLabelAtMenuStr(t=!0){return"text-indent: 0.5em; font-size: 0.5em; letter-spacing: 0.1em;"}static getStampLabel({app:t,ui:e}){let i={height:"20px",justifyContent:"flex-end"},n={left:s.default.screenSizeSmallLabel===e.screenSize?"-12%":"-9%",color:a.default.whiteRGB,background:"rgba(80, 80 ,80, 0.3)",borderRadius:"5px 5px 0px 0px",justifyContent:"center"},l={color:a.default.whiteRGB,fontSize:"0.7em"};return e.isBubblePost||(i.height="40px",i.justifyContent="flex-start",n.left=s.default.screenSizeSmallLabel===e.screenSize?"30%":"27%",n.background="none",n.borderRadius=a.default.radius,n.justifyContent="flex-start",l.color=a.default.fontBaseRGB,l.fontSize="0.9em"),{div:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",bottom:"0px",width:"100%",zIndex:10,...i}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),label:c.default.get({layout:c.default.getLayoutFlex({position:"relative",width:"120px",height:"inherit",padding:"5px 5px 5px 20px",justifyContent:"center",alignItems:"center",...n}),content:c.default.getContentBase({...l}),animation:c.default.getAnimationBase({})})}}}e.default=p},6869:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5549)),s=n(i(9167)),a=n(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static getSelf({app:t,ui:e}){const i=s.default.getOlWidth({app:t,ui:e},!0),n=(100-i)/2,c=t.isOpenInnerNotif?l.default.getBlockSize({app:t,ui:e}):0,g=a.default.getLayoutFlex({position:"fixed",top:l.default.getBlockSize({app:t,ui:e})+"px",alignItems:"center",justifyContent:"center",width:`calc( ${i}% - 2px )`,margin:`0px calc( ${n}% + 1px ) 0px calc( ${n}% + 1px )`,height:c,background:l.default.themeRGBA,zIndex:20}),I=a.default.getContentBase({color:l.default.whiteRGB}),u=a.default.getAnimationBase({transition:`${l.default.transitionNotif}ms`});return a.default.get({layout:g,content:I,animation:u})}}e.default=c},2945:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5549)),s=n(i(4381));class a{constructor(t){return{self:a.getSelf(t),tuneLi:a.getTuneLi(t),activeLi:a.getActiveLi(t),unactiveLi:a.getUnactiveLi(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return l.default.themeRGB}static get unactiveColor(){return l.default.fontBaseRGB}static get activeBgColor(){return l.default.whiteRGBA}static get unactiveBgColor(){return"rgba( 235, 235, 235, 0.96 )"}static getSelf({app:t,ui:e}){const i=a.size+"px",n=s.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:a.activeBgColor,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),c=s.default.getContentBase({cursor:"pointer"}),g=s.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return s.default.get({layout:n,content:c,animation:g})}static getTuneLi({app:t,ui:e}){const i=a.getActiveLi({app:t,ui:e});return i.alignItems="center",i}static getActiveLi({app:t,ui:e}){const i=a.getSelf({app:t,ui:e});return i.background=a.activeBgColor,i.color=l.default.fontBaseRGB,i}static getUnactiveLi({app:t,ui:e}){const i=a.getSelf({app:t,ui:e});return i.background=a.unactiveBgColor,i.color=l.default.fontBaseRGB,i}}e.default=a},7825:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(5549)),s=n(i(4381));class a{constructor(t){return{self:a.getSelf(t),linksUl:a.getLinksUl(t),linksLi:a.getLinksLi(t),linksLiActive:a.getLinksLiActive(t),linksLiUnactive:a.getLinksLiUnactive(t),linkMenuUl:a.getLinkMenuUl(t),linkMenuLi:a.getLinkMenuLi(t),linksTabActive:a.getLinksTabActive(t),linksTabUnactive:a.getLinksTabUnactive(t),linksTabLast:a.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return l.default.themeRGB}static get unactiveColor(){return l.default.fontBaseRGB}static getSelfDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getLinksUlOevrflowY({app:t,ui:e}){return e.isOpenLinks?"scroll":"hidden"}static getSelf({app:t,ui:e}){const i=a.getSelfDisplay({app:t,ui:e}),n=s.default.getLayoutFlex({display:i,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),l=s.default.getContentBase({});return s.default.get({layout:n,content:l,animation:{}})}static getLinksUl({app:t,ui:e}){const i=a.getLinksUlOevrflowY({app:t,ui:e}),n=s.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflowX:"hidden",overflowY:i,overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),c=s.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return s.default.get({layout:n,content:{},animation:c})}static getLinksLi({app:t,ui:e}){const i=a.size+"px",n=s.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:l.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),c=s.default.getContentBase({cursor:"pointer"}),g=s.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return s.default.get({layout:n,content:c,animation:g})}static getLinksLiActive({app:t,ui:e}){const i=a.getLinksLi({app:t,ui:e});return i.background=l.default.whiteRGB,i.color=l.default.fontBaseRGB,i}static getLinksLiUnactive({app:t,ui:e}){const i=a.getLinksLi({app:t,ui:e});return i.background=l.default.calmRGB,i.color=l.default.fontBaseRGB,i}static getLinkMenuUl({app:t,ui:e}){const i=a.size+"px",n=s.default.getLayoutFlex({minHeight:i,height:i,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),c=s.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return s.default.get({layout:n,content:{},animation:c})}static getLinkMenuLi({app:t,ui:e}){const i=a.size-4+"px",n=s.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:i,minHeight:i,maxHeight:i,background:l.default.reliefRGB,borderRadius:"5px"}),c=s.default.getContentBase({cursor:"pointer",color:l.default.whiteRGB}),g=s.default.getAnimationBase({transition:l.default.getTransition({app:t,ui:e})});return s.default.get({layout:n,content:c,animation:g})}static getLinksTabActive({app:t,ui:e}){const i={};return i.background=l.default.whiteRGBA,i.color=l.default.fontBaseRGB,i}static getLinksTabUnactive({app:t,ui:e}){return a.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){return{margin:"5px 0px 0px 0px"}}}e.default=a},4289:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(4381));class s{constructor(t){return{self:s.getSelf()}}static getSelf(){const t=l.default.getLayoutFlex({margin:"0 auto",height:"100vh",width:"10%"}),e=l.default.getAnimationBase();return l.default.get({layout:t,content:{},animation:e})}}e.default=s},9201:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(4381));class c{constructor(t){return{menuShare:c.getMenuShare(t),header:c.getHeader(t),ul:c.getUl(t),liGoWeb:c.getLiGoWeb(t),liTwitter:c.getLiTwitter(t),liFacebook:c.getLiFacebook(t),liEmbed:c.getLiEmbed(t),liEmbedInput:c.getLiEmbedInput(t),shareLabel:c.getShareLabel(t),label:c.getLabel(t)}}static getHeadTabUpdate({app:t,ui:e}){return{div:{position:"absolute",top:e.screenSize===l.default.screenSizeSmallLabel?"15px":"20px",right:"15px",transform:"scale(0.7)"}}}static getCommonLayout({app:t,ui:e}){const i={position:"fixed",width:"90%",height:"fit-content",minHeight:"fit-content",maxHeight:"fit-content",top:`calc( 100% + ${s.default.getBlockSize({app:t,ui:e})}px)`,left:"5%",flexFlow:"column",border:s.default.border,borderRadius:"5px",boxShadow:`${s.default.lineShadow}`};switch(e.screenSize){case l.default.screenSizeSmallLabel:case l.default.screenSizeMiddleLabel:i.width=""+100*s.default.widthRatio,i.left=(100-i.width)/2,i.width=i.width+"%",i.left=i.left+"%",i.zIndex=0;break;case l.default.screenSizeLargeLabel:i.width="33.3%",i.left="33.3%",i.zIndex=3}return i}static getCommonTransform({app:t,ui:e}){return e.openLockMenu===l.default.openLockMenuLabelNo?"translate3d(0px, 0px, 0px)":"translate3d(0px, -75vh, 0px)"}static getPaddingLi({app:t,ui:e}){switch(e.screenSize){case l.default.screenSizeSmallLabel:return"15px";case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:return"15px 15px 15px 20px"}}static getMenuShare({app:t,ui:e}){const i=c.getCommonLayout({app:t,ui:e}),n=a.default.getLayoutFlex(i),l=a.default.getContentBase(),g=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:c.getCommonTransform({app:t,ui:e})});return a.default.get({layout:n,content:l,animation:g})}static getHeader({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:s.default.getBlockSize({app:t,ui:e}),maxHeight:s.default.getBlockSize({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow,padding:"0px 20px",zIndex:2}),n=a.default.getContentBase(),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getUl({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"100%"}),n=a.default.getContentBase({}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getLiGoWeb({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e})}),n=a.default.getContentBase({cursor:"pointer"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getLiTwitter({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),n=a.default.getContentBase({cursor:"pointer"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getLiFacebook({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),n=a.default.getContentBase({cursor:"pointer"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getLiEmbed({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),n=a.default.getContentBase({cursor:"pointer"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getLiEmbedInput({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"98%",height:"25px",margin:"0px 0px 0px 20px",border:s.default.border,borderRadius:"5px",padding:"5px"}),n=a.default.getContentBase({outline:0,cursor:"pointer"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getShareLabel({app:t,ui:e}){const i=a.default.getLayoutFlex({flexGrow:"1"}),n=a.default.getContentBase({color:"inherit",justifyContent:"flex-start",textIndent:"20px",textAlign:"left"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getLabel({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%"}),n=a.default.getContentBase({}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}}e.default=c},2423:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(8506)),a=n(i(5549)),c=n(i(9301)),g=n(i(3829)),I=n(i(4381));class u{constructor(t){return{self:u.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 5}static get marginRightMag(){return 1}static get marginLeft(){return Math.floor(.05*window.innerWidth)}static get marginRight(){return u.marginBase*u.marginRightMag}static get height(){return 50}static getSelfWidth({app:t,ui:e}){let i="0";const n=u.marginLeft+u.marginRight+s.default.getTotalWidth({app:t,ui:e});switch(e.screenSize){case l.default.screenSizeSmallLabel:i=`calc( 100% - ${n}px )`;break;case l.default.screenSizeMiddleLabel:i=`calc( 100% - ${g.default.getWidth({app:t,ui:e},!0)+n}px )`;break;case l.default.screenSizeLargeLabel:i=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!0)+n}px )`}return i}static getSelfLeft({app:t,ui:e}){let i="0px";switch(e.screenSize){case l.default.screenSizeSmallLabel:i="0px";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:i=g.default.getWidth({app:t,ui:e},!0)}return i}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"block":"none",n=u.getSelfWidth({app:t,ui:e}),l=u.getSelfLeft({app:t,ui:e}),s=I.default.getLayoutBlock({display:i,position:"fixed",top:a.default.getBlockSize({app:t,ui:e})+15+"px",left:l,margin:`0px ${u.marginRight}px 0px ${u.marginLeft}px`,width:n,height:`${u.height}px`});return I.default.get({layout:s,content:{},animation:{}})}}e.default=u},4857:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(9301)),c=n(i(3829)),g=n(i(4381));class I{constructor(t){return{self:I.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 0}static get marginRightMag(){return 0}static get marginLeft(){return I.marginBase*I.marginLeftMag}static get marginRight(){return I.marginBase*I.marginRightMag}static get height(){return 260}static getSelfWidth({app:t,ui:e}){let i="0";const n=I.marginLeftMag+I.marginRightMag;switch(e.screenSize){case l.default.screenSizeSmallLabel:i=100-n+"%";break;case l.default.screenSizeMiddleLabel:i=`calc( ${100-n}% - ${c.default.getWidth({app:t,ui:e},!0)}px )`;break;case l.default.screenSizeLargeLabel:i=`calc( ${100-a.default.getWidth({app:t,ui:e},!1)-n}% - ${c.default.getWidth({app:t,ui:e},!0)+n}px )`}return i}static getSelfLeft({app:t,ui:e}){let i="0px";switch(e.screenSize){case l.default.screenSizeSmallLabel:i="0px";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:i=c.default.getWidth({app:t,ui:e},!0)}return i}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"block":"none",n=I.getSelfWidth({app:t,ui:e}),l=I.getSelfLeft({app:t,ui:e}),a=g.default.getLayoutBlock({display:i,position:"fixed",background:"black",top:s.default.getBlockSize({app:t,ui:e})+"px",left:l,margin:`0px ${I.marginRightMag}% 0px ${I.marginLeftMag}%`,width:n,zIndex:1,height:`${I.height}px`,outline:"none"});return g.default.get({layout:a,content:{},animation:{}})}}e.default=I},3829:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(4381));class c{constructor(t){return{self:c.getSelf(t),body:c.getBody(t),footer:c.getFooter(t),footerChild:c.getFooterChild(t),footerChildMoney:c.getFooterChildMoney(t)}}static get baseWidth(){return"300px"}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case l.default.extensionModeNone:case l.default.extensionModeEmbed:return 0;default:switch(e.screenSize){case l.default.screenSizeSmallLabel:return`0 0 ${s.default.radius} ${s.default.radius}`;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:return`0px 0px 0px ${s.default.radius}`}}}static getWidth({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:n="100.0%";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:n=c.baseWidth}return i?a.default.trimUnit(n):n}static getHeight({app:t,ui:e},i=!1){return`calc( 100% - ${s.default.getBlockSize({app:t,ui:e})}px )`}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";switch(e.screenSize){case l.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 0%, 0%, 0px )":"translate3d( -100% , 0%, 0px )";break;case l.default.screenSizeMiddleLabel:e.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case l.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){e.extensionMode===l.default.extensionModeBottom||s.default.silverRGBA;const i=a.default.getLayoutBlock({display:"block",position:"fixed",top:`${s.default.getBlockSize({app:t,ui:e})}px`,left:"0px",borderRadius:c.getBorderRadius({app:t,ui:e}),width:c.getWidth({app:t,ui:e}),minWidth:c.getWidth({app:t,ui:e}),height:c.getHeight({app:t,ui:e}),minHeight:"auto",maxHeight:"auto",margin:"0",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:10}),n=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:c.getTransform({app:t,ui:e})});return a.default.get({layout:i,content:{},animation:n})}static getBody({app:t,ui:e}){const i=e.extensionMode===l.default.extensionModeBottom?"90%":"100%",n=e.extensionMode===l.default.extensionModeModal?s.default.border:0,c=a.default.getLayoutBlock({borderLeft:n,width:i,minWidth:"inherit",maxWidth:"inherit",height:`calc( 100% - ${2*s.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),g=a.default.getAnimationBase();return a.default.get({layout:c,content:{},animation:g})}static getWrap({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:s.default.border}),n=a.default.getContentBase({textAlign:"left"}),l=a.default.getAnimationBase({});return a.default.get({layout:i,content:n,animation:l})}static getFooter({app:t,ui:e}){const i=(e.screenSize,l.default.screenSizeSmallLabel,{border:s.default.border}),n=a.default.getLayoutFlex({width:"100%",background:s.default.offWhiteRGB,height:`${s.default.getBlockSize({app:t,ui:e})}px`,...i}),c=a.default.getContentBase({}),g=a.default.getAnimationBase();return a.default.get({layout:n,content:c,animation:g})}static getFooterChild({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=a.default.getContentBase({fontSize:"0.5em"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getFooterChildMoney({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=a.default.getContentBase({fontSize:"0.5em"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}}e.default=c},9723:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(4381));class c{constructor(t){const e=c.getSelf(t),i=c.getColumns(t),n=c.getColumn(t),l=c.getColumnLast(t),s=c.getImg(t),a=c.getWrap(t);return{self:e,columns:i,column:n,columnLast:l,img:s,imgWrap:c.getImgWrap(t),wrap:a,names:c.getNames(t),namesAddCh:c.getNamesAddCh(t)}}static getWidth({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:n="100.0%";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:n="300px"}return i?a.default.trimUnit(n):n}static getTransform({app:t,ui:e}){let i="translate3d( 0px ,0px, 0px )";switch(e.screenSize){case l.default.screenSizeSmallLabel:i="translate3d( 0px ,0px, 0px )";break;case l.default.screenSizeMiddleLabel:t.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case l.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({position:"relative",width:c.getWidth({app:t,ui:e}),minWidth:c.getWidth({app:t,ui:e}),maxWidth:"inherit",height:"100%",WebkitOverflowScrolling:"touch",overflow:"scroll",borderTop:0,borderRight:s.default.border,borderBottom:0,borderLeft:0}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:{},animation:n})}static getColumns({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",height:"auto",borderBottom:s.default.border,borderRight:s.default.border,background:s.default.whiteRGB,overflow:"scroll"}),n=a.default.getContentBase({whiteSpace:"nowrap"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getColumn({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",borderBottom:s.default.border,borderRight:s.default.border}),n=a.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getColumnLast({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",marginLeft:"20px"}),n=a.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getWrap({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:s.default.border}),n=a.default.getContentBase({textAlign:"left",content:"getWrap"}),l=a.default.getAnimationBase({});return a.default.get({layout:i,content:n,animation:l})}static getImgWrap({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,margin:"22px 0px 0px 0px",width:"60px",maxWidth:"60px",minWidth:"60px",height:"60px"}),n=a.default.getContentBase({}),l=a.default.getAnimationBase({});return a.default.get({layout:i,content:n,animation:l})}static getImg({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({borderRadius:"50%",width:"34px",height:"34px"}),n=a.default.getContentBase({}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getNamesAddCh({app:t,ui:e}){const i=a.default.getLayoutBlock({padding:"5px 10px 5px 5px",flexGrow:4}),n=a.default.getContentBase({textAlign:"left",lineHeight:"2"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}static getNames({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:4}),n=a.default.getContentBase({textAlign:"left",lineHeight:"1.7"}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:n,animation:l})}}e.default=c},8381:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(300)),s=n(i(7865)),a=n(i(5549)),c=n(i(4381));class g{constructor(t){return{header:g.getHeader(t),headerSearchIcon:g.getHeaderSearchIcon(t),headerInput:g.getHeaderInput(t),headerFindSelect:g.getHeaderFindSelect(t),headerUpdateIcon:g.getHeaderUpdateIcon(t),ol:g.getOl(t),headerCh:{},tuneButton:g.getTuneButton(t),tuneAnchor:g.getTuneAnchor(t)}}static get iconSize(){return"25px"}static get liHeight(){return 90}static getSelf({app:t,ui:e}){const i=c.default.getLayoutBlock({width:"100%",height:`calc( 100% - ${2*a.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),n=c.default.getContentBase({}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getHeader({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?{borderBottom:a.default.border,borderLeft:0}:{borderBottom:a.default.border,borderLeft:0,borderRight:a.default.border},n=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start",width:"100%",height:`${a.default.getBlockSize({app:t,ui:e})}px`,...i,background:a.default.lightRGB}),l=c.default.getContentBase({cursor:"pointer",textAlign:"left"}),g=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:n,content:l,animation:g})}static getHeaderSearchIcon({app:t,ui:e}){const i=c.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"72px",height:`${a.default.getBlockSize({app:t,ui:e})}px`}),n=c.default.getContentBase({color:a.default.reliefRGBA,fontWeight:"bold"}),l=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:n,animation:l})}static getHeaderInput({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0.9em":"1em",n=e.screenSize===s.default.screenSizeSmallLabel?"0.8em":"1.4em",l=c.default.getLayoutInlineBlock({width:"calc( 100% - 120px )",height:"55%",padding:"6px",background:a.default.whiteRGB,outline:"none",resize:"none",border:a.default.border,borderRadius:"3px",WebkitAppearance:"none"}),g=c.default.getContentBase({cursor:"pointer",whiteSpace:"nowrap",fontSize:i,lineHeight:n,textAlign:"left",textIndent:"3%",color:a.default.downreliefRGB}),I=c.default.getAnimationBase();return c.default.get({layout:l,content:g,animation:I})}static getHeaderUpdateIcon({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"70px",height:"50px",alignItems:"center",justifyContent:"flex-start"}),n=c.default.getContentBase({cursor:"pointer"}),l=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:n,animation:l})}static getHeaderFindSelect({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"100%",height:"50px",alignItems:"center",justifyContent:"center",background:"transparent",WebkitAppearance:"none",padding:"10px 4px 10px 10px"}),n=c.default.getContentBase({outline:0,cursor:"pointer"}),l=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:n,animation:l})}static getOl({app:t,ui:e,ranks:i}){const n=a.default.getBlockSize({app:t,ui:e});let l="1fr";const s=(i&&i.length?i.length:0)+(""===t.tuned?0:1);for(let t=0;t<s;t++)l=2*n+"px "+l;const g=c.default.getLayoutGrid({gridTemplateRows:l,gridTemplateColumns:"1fr",height:`calc( 100% - ${2*n}px )`,overflowX:"hidden",overflowY:"scroll"}),I=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:g,content:{},animation:I})}static getLiActive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:`${g.liHeight}px`,padding:"10px",borderBottom:a.default.border,zIndex:3,borderRight:`1px solid ${a.default.whiteRGB}`,background:a.default.whiteRGB}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getLiUnactive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:`${g.liHeight}px`,padding:"10px",borderBottom:a.default.border,background:a.default.offWhiteRGB,borderRight:a.default.border}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"20%"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottom(){const t=c.default.getLayoutBlock({width:"100%",height:"50px"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottomIcon(){const t=c.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:`url(${l.default.protcol}:${l.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 15%",backgroundSize:"20px 20px",backgroundRepeat:"no-repeat"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottomPost(){const t=c.default.getLayoutInlineBlock({width:"80%",flexGrow:2}),e=c.default.getContentBase({lineHeight:2,textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getTuneAnchor({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"130px"}),n=c.default.getContentBase({}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getTuneButton({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"100%",maxWidth:"130px",height:"46px",margin:"0px 0px 0px 10px",background:a.default.themeRGB}),n=c.default.getContentBase({color:a.default.whiteRGB,fontWeight:"500",borderRadius:"50px",outline:0,cursor:"pointer"}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}}e.default=g},4359:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(300)),s=n(i(7865)),a=n(i(5549)),c=n(i(4381));class g{constructor(t){return{self:g.getSelf(t),modalWrap:g.getModalWrap(t),modal:g.getModal(t),logo:g.getLogo(t),input:g.getInput(t),recommend:g.getRecommend(t),recommendTitle:g.getRecommendTitle(t),recommendLi:g.getRecommendLi(t),example:g.getExample(t)}}static getSelf({app:t,ui:e}){const i=e.isOpenSetChModal?"flex":"none",n=c.default.getLayoutFlex({display:i,position:"fixed",top:"0",left:"0",zIndex:"1001",flexFlow:"row wrap",alignItems:"center",justifyContent:"center",width:"100vw",height:"100vh",margin:"0 auto",background:a.default.darkRGBA}),l=c.default.getContentBase({}),s=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:n,content:l,animation:s})}static getModalWrap({app:t,ui:e}){const i=c.default.getLayoutFlex({position:"absolute",flexFlow:"column wrap",alignItems:"center",justifyContent:"center",width:"calc( 100% - 40px )",maxWidth:"850px",minWidth:"320px"}),n=c.default.getContentBase({}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getModal({app:t,ui:e}){const i=c.default.getLayoutFlex({position:"absolute",flexFlow:"column wrap",alignItems:"flex-start",justifyContent:"center",width:"100%",maxWidth:"800px",height:"auto",padding:"20px",margin:"20px",background:a.default.lightRGB}),n=c.default.getContentBase({borderRadius:"10px",boxShadow:"0px 0px 10px rgb(100, 100, 100, 1)"}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getLogo({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"200px",height:"200px",margin:"70px 0 60px",background:`url(${l.default.assetsPath}logo1.png) center / 128px no-repeat`}),n=c.default.getContentBase({}),s=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:s})}static getInput({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0.9em":"1em",n=e.screenSize===s.default.screenSizeSmallLabel?"0.8em":"1.4em",l=c.default.getLayoutInlineBlock({width:"80%",height:"46px",padding:"6px",background:a.default.whiteRGB,outline:"none",resize:"none",border:a.default.border,borderRadius:"6px",WebkitAppearance:"none"}),g=c.default.getContentBase({cursor:"pointer",whiteSpace:"nowrap",fontSize:i,lineHeight:n,textAlign:"left",textIndent:"3%",color:a.default.downreliefRGB}),I=c.default.getAnimationBase();return c.default.get({layout:l,content:g,animation:I})}static getRecommendTitle({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",padding:"0",margin:"20px 0 0"}),n=c.default.getContentBase({textIndent:"30px"}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getRecommend({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",padding:"0",margin:"0"}),n=c.default.getContentBase({}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getRecommendLi({app:t,ui:e}){const i=c.default.getLayoutFlex({}),n=c.default.getContentBase({lineHeight:"28px",textDecoration:"list"}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}static getExample({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start",padding:"0",margin:"0"}),n=c.default.getContentBase({textIndent:"66px"}),l=c.default.getAnimationBase({});return c.default.get({layout:i,content:n,animation:l})}}e.default=g},4528:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(300)),s=n(i(7865)),a=n(i(5549)),c=n(i(4381));class g{constructor(t){return{activeLiSelf:g.getActiveLiSelf(t),unactiveLiSelf:g.getUnactiveLiSelf(t),space:g.getSpace(t),upper:g.getUpper(),upperSpace:g.getUpperSpace(),upperRankWrap:g.getUpperRankWrap(t),upperRank:g.getUpperRank(),upperRight:g.getUpperRight(),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(),ext:g.getExt(),extMusic:g.getExtMusic(),extVideo:g.getExtVideo()}}static get tuneRGB(){return a.default.themeRGB}static get rank1RGB(){return"rgb(255, 10, 78)"}static get rank2RGB(){return"rgb(255, 127, 0)"}static get rank3RGB(){return"rgb(0, 142, 255)"}static get rankOtherRGB(){return a.default.downreliefRGB}static get oneDigitWidth(){return"17%"}static get twoDigitWidth(){return"18%"}static get thirdDigitWidth(){return"19%"}static get iconSize(){return 24}static get activeLiSelfLabel(){return"activeLiSelf"}static get unactiveLiSelfLabel(){return"unactiveLiSelf"}static get activeLiSelfBackground(){return a.default.whiteRGBA}static get activeLiSelfMouseOverBackground(){return a.default.whiteRGBA}static get activeLiSelfMouseDownBackground(){return a.default.whiteRGBA}static get unactiveLiSelfBackground(){return a.default.calmRGBA}static get unactiveLiSelfMouseOverBackground(){return a.default.whiteRGBA}static get unactiveLiSelfMouseDownBackground(){return a.default.whiteRGBA}static get activeLiSelfBorderRightColor(){return`1px solid ${a.default.whiteRGB}`}static get unactiveLiSelfBorderRightColor(){return a.default.border}static getUnactiveLiBorder({app:t,ui:e}){return e.extensionMode===s.default.extensionModeBottom||e.screenSize===s.default.screenSizeSmallLabel?{borderTop:0,borderRight:0,borderBottom:a.default.border,borderLeft:0}:{borderTop:0,borderRight:a.default.border,borderBottom:a.default.border,borderLeft:0}}static getDispRankBackground(t=0){switch(t){case 0:return g.tuneRGB;case 1:return g.rank1RGB;case 2:return g.rank2RGB;case 3:return g.rank3RGB;default:return g.rankOtherRGB}}static getDispRankWidth(t=0){switch(String(t).length){case 0:case 1:return g.oneDigitWidth;case 2:return g.twoDigitWidth;case 3:default:return g.thirdDigitWidth}}static getActiveLiSelf({app:t,ui:e}){const i=2*a.default.getBlockSize({app:t,ui:e}),n=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",l=c.default.getLayoutBlock({width:"initial",height:`${i}px`,minHeight:`${i}px`,padding:n,borderTop:0,borderRight:`1px solid ${a.default.whiteRGB}`,borderBottom:a.default.border,borderLeft:0,background:g.activeLiSelfBackground,boxShadow:"0px 0px 0px rgba(255,255,255,1), 0px 0px 0px rgba(${Container.themeRGBString}, 0.2) inset ",cursor:"pointer"}),I=c.default.getContentBase(),u=c.default.getAnimationBase({transition:`${a.default.transitionOn}ms`});return c.default.get({layout:l,content:I,animation:u})}static getUnactiveLiSelf({app:t,ui:e}){const i=g.getUnactiveLiBorder({app:t,ui:e}),n=2*a.default.getBlockSize({app:t,ui:e}),l=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",I=c.default.getLayoutBlock({boxShadow:`${a.default.lineShadow}, 0px 0px 0px rgba(${a.default.themeSuperLightRGBString}, 1) inset`,width:"initial",height:`${n}px`,minHeight:`${n}px`,padding:l,...i,background:g.unactiveLiSelfBackground,cursor:"pointer"}),u=c.default.getContentBase(),d=c.default.getAnimationBase({transition:`${a.default.transitionOn}ms`});return c.default.get({layout:I,content:u,animation:d})}static getSpace({app:t,ui:e}){const i=c.default.getLayoutBlock({height:"100%",background:a.default.silverRGBA}),n=c.default.getContentBase({}),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"18%",margin:"0px 2% 0px 0px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperRankWrap({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",n=c.default.getLayoutInlineFlex({position:"absolute",left:"14px",top:i,width:g.thirdDigitWidth,height:"20px",background:g.rankOtherRGB,borderRadius:"10px",margin:"0"}),l=c.default.getContentBase({}),a=c.default.getAnimationBase();return c.default.get({layout:n,content:l,animation:a})}static getUpperRank(){const t=c.default.getLayoutFlex({width:"100%"}),e=c.default.getContentBase({fontSize:"0.7em",fontWeight:"bold",color:a.default.whiteRGB,lineHeight:"1.5"}),i=c.default.getAnimationBase({transform:"scale(0.8)"});return c.default.get({layout:t,content:e,animation:i})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({lineHeight:"1.5",textIndent:"4px",textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottom({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"50%":"63%",n=c.default.getLayoutFlex({justifyContent:"flex-start",alignItems:"center",width:"100%",height:i}),l=c.default.getContentBase(),a=c.default.getAnimationBase();return c.default.get({layout:n,content:l,animation:a})}static getBottomIcon({app:t,ui:e}){const i=c.default.getLayoutInlineBlock({width:"20%",height:"100%",backgroundImage:`url("${l.default.assetsURL}/favicon.ico")`,backgroundPosition:"30% 50%",backgroundSize:`${a.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat"}),n=c.default.getContentBase(),s=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:s})}static getBottomPost(){const t=c.default.getLayoutInlineFlex({width:"65%",height:"100%",justifyContent:"flex-start"}),e=c.default.getContentBase({textIndent:"3%",textAlign:"left",whiteSpace:"nowrap"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getExt(){const t=c.default.getLayoutFlex({position:"absolute",alignItems:"center",justifyContent:"center",bottom:"0px",right:"10px",width:"70px",height:"20px",background:a.default.lightGrayRGBA,borderRadius:"3px 3px 0px 0px"}),e=c.default.getContentBase({textIndent:"3px",textAlign:"center",fontSize:"0.6em",color:a.default.whiteRGB}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getExtMusic(){let t=g.getExt();return t.background="rgba(143,198,143, 1)",t}static getExtVideo(){let t=g.getExt();return t.background="rgba(105, 70, 255, 1)",t}}e.default=g},6620:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(3829)),c=n(i(4381));class g{constructor(t){return{self:g.getSelf(t),child:g.getChild(t),childIndex:g.getChildIndex(t)}}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case l.default.extensionModeBottom:return s.default.radiuses;case l.default.extensionModeModal:switch(e.screenSize){case l.default.screenSizeSmallLabel:return`0 0 0 ${s.default.radius}`;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:return`0px 0px 0px ${s.default.radius}`}default:return"0"}}static getWidth({app:t,ui:e},i=!1){let n="0";if(e.extensionMode===l.default.extensionModeBottom)n="50%";else switch(e.screenSize){case l.default.screenSizeSmallLabel:n="100%";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:n=a.default.baseWidth}return i?c.default.trimUnit(n):n}static getSelf({app:t,ui:e}){const i=(e.screenSize,l.default.screenSizeSmallLabel,{border:s.default.border}),n=g.getBorderRadius({app:t,ui:e}),a=c.default.getLayoutFlex({width:g.getWidth({app:t,ui:e}),minWidth:g.getWidth({app:t,ui:e}),height:`${s.default.getBlockSize({app:t,ui:e})}px`,background:s.default.lightRGBA,boxShadow:s.default.lineShadow,borderRadius:n,...i}),I=c.default.getContentBase({}),u=c.default.getAnimationBase();return c.default.get({layout:a,content:I,animation:u})}static getChild({app:t,ui:e}){const i=c.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),n=c.default.getContentBase({fontSize:"0.7em",lineHeight:"1.5em",cursor:"pointer"}),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}static getChildIndex({app:t,ui:e}){const i=c.default.getLayoutBlock({flexGrow:1,height:"100%"}),n=c.default.getContentBase({fontSize:"0.7em",fontWeight:"600",lineHeight:"1.5em",cursor:"pointer"}),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}}e.default=g},7608:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(9167)),c=n(i(4381));class g{constructor(t){return{notifs:g.getNotifs(t),self:g.getSelf(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get selfHeight(){return 40}static getNotifsDisplay({app:t,ui:e}){return e.extensionMode===l.default.extensionModeBottom?"block":"none"}static getNotifsHeight({app:t,ui:e}){return e.extensionMode===l.default.extensionModeBottom?e.isOpenPosts?"0px":e.isOpenNotif?`${s.default.getBlockSize({app:t,ui:e})+g.selfHeight}px`:`${g.selfHeight}px`:"0px"}static getNotifs({app:t,ui:e}){const i=g.getNotifsDisplay({app:t,ui:e}),n=g.getNotifsHeight({app:t,ui:e}),l=c.default.getLayoutBlock({display:i,position:"absolute",top:"0px",width:"100%",height:n,overflow:"visible"}),s=c.default.getContentBase(),a=c.default.getAnimationBase();return c.default.get({layout:l,content:s,animation:a})}static getSelf({app:t,ui:e}){const i=g.getNotifsDisplay({app:t,ui:e}),n=a.default.getOlWidth({app:t,ui:e},!0),l=(100-n)/2,I=c.default.getLayoutBlock({display:i,position:"absolute",top:0,width:`${n}%`,height:g.selfHeight+"px",background:s.default.whiteRGBA,marginLeft:`${l}%`,borderTop:s.default.border,borderLeft:s.default.border,borderRight:s.default.border,borderRadius:"3px 3px 0px 0px"}),u=c.default.getContentBase({textAlign:"left"}),d=c.default.getAnimationBase({transform:"translate3d(0px, 40px, 0px)",transition:`${s.default.transitionNotif}ms`});return c.default.get({layout:I,content:u,animation:d})}static getBottom({app:t,ui:e}){return c.default.get({layout:{width:"100%"},content:{},animation:{}})}static getBottomIcon({app:t,ui:e}){return c.default.get({layout:{},content:{},animation:{}})}static getBottomPost({app:t,ui:e}){const i={lineHeight:"0.8",whiteSpace:"nowrap",color:c.default.fontBaseRGB};return c.default.get({layout:{overflow:"hidden",padding:"15px 15px 15px 0px",background:"none"},content:i,animation:{}})}}e.default=g},4909:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(300)),s=n(i(7865)),a=n(i(5549)),c=n(i(4381));class g{constructor(t){return{self:g.getSelf(t),upper:g.getUpper(t),upperChild:g.getUpperChild(t),upperTitle:g.getUpperTitle(t),upperTimeago:g.getUpperTimeago(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get bubblestampScale(){return 2}static get stampScale(){return 1}static getBottomPostPadding({app:t,ui:e},i=!1){return i?"0":e.isBubblePost?"20px 20px 20px 30px":"0"}static getSelf({app:t,ui:e}){const i=e.isBubblePost?"5px 0":"0",n=e.isBubblePost?"5px 0":"0",l=(e.isBubblePost,"40px"),s="calc( 100% - 0px )",a=c.default.getLayoutBlock({width:s,minWidth:"calc( 100% - 20px )",maxWidth:s,height:"auto",minHeight:l,margin:n,padding:i}),g=c.default.getContentBase(),I=c.default.getAnimationBase();return c.default.get({layout:a,content:g,animation:I})}static getFixTimeMarker({app:t,ui:e}){return{...g.getTimeMarker({app:t,ui:e}),position:"fixed"}}static getTimeMarker({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"18%",height:"auto",margin:"15px auto 10px auto",padding:"5px 10px",background:a.default.darkLightRGBA,borderRadius:"20px"}),n=c.default.getContentBase({color:a.default.whiteRGB,letterSpacing:"2px"}),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}static getUpper({app:t,ui:e}){const i=e.isBubblePost?"flex":"none",n=c.default.getLayoutFlex({display:i,justifyContent:"space-between",height:"22px"}),l=c.default.getContentBase({fontSize:"0.9em"}),s=c.default.getAnimationBase();return c.default.get({layout:n,content:l,animation:s})}static getUpperChild({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"center",flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%"}),n=c.default.getContentBase({textAlign:"left",textIndent:"10px"}),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}static getUpperTitle({app:t,ui:e}){const i=e.extensionMode===s.default.extensionModeLiveMedia?"none":"flex",n=c.default.getLayoutFlex({display:i,alignItems:"flex-start",justifyContent:"flex-start",flexGrow:6,width:"60%",minWidth:"60%",maxWidth:"60%",margin:"0px 15px 0px 5px"}),l=c.default.getContentBase({textAlign:"left",whiteSpace:"nowrap",wordBreak:"break-all"}),a=c.default.getAnimationBase();return c.default.get({layout:n,content:l,animation:a})}static getUpperTimeago({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:2,padding:"0px 20px 0px 0px",width:"20%",minWidth:"20%",maxWidth:"20%"}),n=c.default.getContentBase({textAlign:"right",fontSize:"0.75em",letterSpacing:"0.5px"}),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}static getBottom({app:t,ui:e}){const i=c.default.getLayoutFlex({padding:"0px 10px 0px 0px"}),n=c.default.getContentBase(),l=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:l})}static getBottomIcon({app:t,ui:e}){const i=c.default.getLayoutBlock({flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%",height:`${a.default.getFaviconSize({app:t,ui:e})}px`,minHeight:"40px",backgroundImage:`url(${l.default.protcol}:${l.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 50%",backgroundSize:`${a.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat"}),n=c.default.getContentBase(),s=c.default.getAnimationBase();return c.default.get({layout:i,content:n,animation:s})}static getBottomPost({app:t,ui:e},i=!1){const n="75%",l=e.isBubblePost?a.default.themeRGBA:"none",s=e.isBubblePost?a.default.whiteRGBA:a.default.fontBaseRGB,I=g.getBottomPostPadding({app:t,ui:e},i),u=c.default.getLayoutFlex({justifyContent:"flex-start",flexGrow:8,width:n,minWidth:n,maxWidth:n,minHeight:"40px",background:l,padding:I,margin:"0px 5% 0px 0px",borderRadius:"10px"}),d=c.default.getContentBase({color:s,textAlign:"left",lineHeight:"1.7em",cursor:"pointer",wordWrap:"break-word",overflowWrap:"break-word"}),o=c.default.getAnimationBase();return c.default.get({layout:u,content:d,animation:o})}}e.default=g},9167:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(4817)),s=n(i(7865)),a=n(i(5549)),c=n(i(9301)),g=n(i(4857)),I=n(i(3829)),u=n(i(4381));class d{constructor(t){return{self:d.getSelf(t),ol:d.getOl(t),more:d.getMore(t),firstAction:d.getFirstAction(t)}}static getSelfDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getMinWidth({app:t,ui:e},i=!1){let n="200px";return i?u.default.trimUnit(n):n}static getOlWidth({app:t,ui:e},i=!1){const n=e.extensionMode===s.default.extensionModeBottom?"90%":"100%";return i?u.default.trimUnit(n):n}static getWidth({app:t,ui:e},i=!1){let n="100%";switch(e.extensionMode){case s.default.extensionModeBottom:n="90%";break;case s.default.extensionModeLiveMedia:n="100%";break;default:switch(e.screenSize){case s.default.screenSizeSmallLabel:return"100%";case s.default.screenSizeMiddleLabel:return`calc(100% - ${I.default.getWidth({app:t,ui:e},!1)})`;case s.default.screenSizeLargeLabel:n=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)}% - ${I.default.getWidth({app:t,ui:e},!1)} )`}}return i?u.default.trimUnit(n):n}static closeIndexTransform({app:t,ui:e}){switch(e.screenSize){case s.default.screenSizeSmallLabel:return`translate3d( -${e.width}px, 0px, 0px)`;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:return`translate3d( -${I.default.getWidth({app:t,ui:e})}px, 0px, 0px)`}}static openIndexTransform(t){return"translate3d( 0px, 0px, 0px)"}static get headerHeight(){return 35}static getBorders({app:t,ui:e}){let i={borderTop:"0",borderRight:"0",borderBottom:"0",borderLeft:"0"};switch(e.screenSize){case s.default.screenSizeSmallLabel:i.borderRight=a.default.border,i.borderLeft=a.default.border;break;case s.default.screenSizeMiddleLabel:i.borderRight=a.default.border;break;case s.default.screenSizeLargeLabel:}return i}static getMargin({app:t,ui:e},i=!1){let n="0";if(e.extensionMode===s.default.extensionModeLiveMedia)n="0";else switch(e.screenSize){case s.default.screenSizeSmallLabel:n="0";break;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:n=`0 0 0 ${I.default.getWidth({app:t,ui:e})}`}return n}static getPadding({app:t,ui:e}){const i=a.default.getBlockSize({app:t,ui:e});let n="0";if(t.isMediaCh)n=`${2.3*i}px 0 ${i}px 0`;else switch(e.extensionMode){case s.default.extensionModeLiveMedia:n=`0 0 ${a.default.getLiveMediaBlockSize({app:t,ui:e})}px 0`;break;default:switch(e.screenSize){case s.default.screenSizeSmallLabel:case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:n=`${i}px 0 ${i}px 0`}}return n}static getSelfTransform({app:t,ui:e}){return e.extensionMode===s.default.extensionModeBottom?e.isDispPosts?"translate3d(0px, 0px, 0px)":`translate3d(0px, calc( 100% + ${a.default.getBlockSize({app:t,ui:e})}px ), 0px)`:"translate3d(0px, 0px, 0px)"}static getSelfHeight({app:t,ui:e}){if(e.extensionMode===s.default.extensionModeLiveMedia)return"100vh";switch(e.screenSize){case s.default.screenSizeLargeLabel:return t.chType===l.default.mediaTagTypeVideo?`calc( 100% - ${a.default.getBlockSize({app:t,ui:e})+a.default.getBlockSize({app:t,ui:e})+g.default.height}px )`:"100vh";case s.default.screenSizeSmallLabel:return"100vh"}}static getSelfMinHeight({app:t,ui:e}){return e.extensionMode!==s.default.extensionModeNone?"430px":e.screenSize===s.default.screenSizeLargeLabel?`calc( 100% - ${a.default.getBlockSize({app:t,ui:e})+a.default.getBlockSize({app:t,ui:e})}px )`:"auto"}static getSelfTop({app:t,ui:e}){return e.extensionMode===s.default.extensionModeNone&&t.chType===l.default.mediaTagTypeVideo?`${a.default.getBlockSize({app:t,ui:e})+g.default.height}px`:"0"}static getSelfLeft({app:t,ui:e}){return"0"}static getSelfBoxShadow({app:t,ui:e}){let i="0px 0px 0px rgba(255,255,255)";if(e.extensionMode===s.default.extensionModeNone)return i;switch(e.screenSize){case s.default.screenSizeSmallLabel:return a.default.lineInsetShadow;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:return i}return i}static getSelf({app:t,ui:e}){let i="absolute",n="hidden",l="hidden",c=d.getBorders({app:t,ui:e}),g=a.default.whiteRGBA;e.screenSize===s.default.screenSizeLargeLabel?("fixed",n="hidden",l="scroll"):e.screenSize===s.default.screenSizeSmallLabel&&(n="hidden",l="scroll");const I=u.default.getLayoutBlock({position:"absolute",top:d.getSelfTop({app:t,ui:e}),left:d.getSelfLeft({app:t,ui:e}),width:d.getWidth({app:t,ui:e}),minWidth:d.getMinWidth({app:t,ui:e}),height:d.getSelfHeight({app:t,ui:e}),minHeight:d.getSelfHeight({app:t,ui:e}),maxHeight:"auto",margin:d.getMargin({app:t,ui:e}),padding:d.getPadding({app:t,ui:e}),background:g,overflowScrolling:"touch",WebkitOverflowScrolling:"touch",boxShadow:0,overflowX:n,overflowY:l,...c}),o=u.default.getAnimationBase({});return u.default.get({layout:I,content:{},animation:o})}static getOl({app:t,ui:e}){let i="100%",n="0",l="0",c="0";e.extensionMode===s.default.extensionModeBottom&&(i=d.getOlWidth({app:t,ui:e}),n="0px 0px 0px 5%",l=a.default.border,c=a.default.border);const g=u.default.getLayoutBlock({width:i,margin:n,height:"100vh",borderRight:l,borderLeft:c}),I=u.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return u.default.get({layout:g,content:{},animation:I})}static getMore({app:t,ui:e}){const i=e.isBubblePost?a.default.themeRGBA:a.default.reliefRGBA,n=e.isBubblePost?"15px auto":"10px auto",l=u.default.getLayoutFlex({width:"50%",height:a.default.notifHeight,margin:n,alignItems:"center",justifyContent:"center",zIndex:"10",background:i,borderRadius:"20px"}),s=u.default.getContentBase({color:a.default.whiteRGB,cursor:"pointer"}),c=u.default.getAnimationBase();return u.default.get({layout:l,content:s,animation:c})}static getFirstAction({app:t,ui:e}){const i=u.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",width:"calc(100% - 120px)",height:"auto",padding:"20px",margin:"60px",background:a.default.themeRGBA,borderRadius:"10px"}),n=u.default.getContentBase({lineHeight:"2em",color:a.default.whiteRGB}),l=u.default.getAnimationBase();return u.default.get({layout:i,content:n,animation:l})}}e.default=d},1433:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(3829)),c=n(i(9167)),g=n(i(4381)),I=n(i(9924));class u{constructor(t){return{self:u.getSelf(t),icon:u.getIcon(t),textarea:u.getTextarea(t),modalTextarea:u.getModalTextarea(t),button:u.getButton(t),upper:u.getUpper(t),bottom:u.getBottom(t)}}static getWidth({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:n="100%";break;case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:n=c.default.getWidth({app:t,ui:e})}return i?g.default.trimUnit(n):n}static getLeft({app:t,ui:e},i=!1){let n="0";switch(e.screenSize){case l.default.screenSizeSmallLabel:n="0px";break;case l.default.screenSizeMiddleLabel:n=`${a.default.getWidth({app:t,ui:e})}`;break;case l.default.screenSizeLargeLabel:n=a.default.getWidth({app:t,ui:e})}return i?g.default.trimUnit(n):n}static getBorder({app:t,ui:e},i=!1){switch(e.extensionMode){case l.default.extensionModeBottom:return{borderTop:s.default.border,borderRight:s.default.border,borderLeft:s.default.border};case l.default.extensionModeModal:switch(e.screenSize){case l.default.screenSizeSmallLabel:return{border:s.default.border};case l.default.screenSizeMiddleLabel:case l.default.screenSizeLargeLabel:return{borderTop:s.default.border,borderBottom:s.default.border}}default:return{borderTop:s.default.border,borderBottom:s.default.border}}}static getBorderRadius({app:t,ui:e},i=!1){if(e.extensionMode===l.default.extensionModeBottom)return"100%"===e.extensionWidth?"0px 0px 0px 0px":`${s.default.radius} ${s.default.radius} 0px 0px`;if(e.extensionMode===l.default.extensionModeModal)switch(e.screenSize){case l.default.screenSizeSmallLabel:return`0px 0px ${s.default.radius} ${s.default.radius}`;case l.default.screenSizeMiddleLabel:return`0px 0px ${s.default.radius} 0px`;case l.default.screenSizeLargeLabel:return 0}return 0}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";switch(e.screenSize){case l.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case l.default.screenSizeMiddleLabel:e.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case l.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){const i=u.getBorder({app:t,ui:e}),n=u.getBorderRadius({app:t,ui:e}),l=g.default.getLayoutFlex({position:"fixed",bottom:0,left:u.getLeft({app:t,ui:e}),flexGrow:1,height:s.default.getBlockSize({app:t,ui:e}),width:u.getWidth({app:t,ui:e}),maxWidth:u.getWidth({app:t,ui:e}),background:s.default.lightRGBA,justifyContent:"flex-start",boxShadow:`-1px 0px 1px ${s.default.lineShadowColor}`,borderRadius:n,...i,zIndex:10}),a=g.default.getAnimationBase({transform:u.getTransform({app:t,ui:e})});return g.default.get({layout:l,content:{},animation:a})}static getIcon({app:t,ui:e}){const i=g.default.getLayoutInlineBlock({width:"20%",maxWidth:"20%",height:"70%",backgroundImage:"url()",backgroundPosition:"center center",backgroundSize:`${s.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat",zIndex:9999}),n=g.default.getContentBase({cursor:"pointer"});return g.default.get({layout:i,content:n,animation:{}})}static getTextarea({app:t,ui:e}){const i=e.extensionMode===l.default.extensionModeModal?"60%":"54%",n=(e.screenSize,l.default.screenSizeSmallLabel,"1em"),a=e.screenSize===l.default.screenSizeSmallLabel?"0.8em":"1.4em",c=g.default.getLayoutInlineBlock({width:i,maxWidth:i,height:"55%",background:s.default.whiteRGB,padding:"6px",margin:"0 3% 0 0",outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),I=g.default.getContentBase({fontSize:n,lineHeight:a,textAlign:"left",textIndent:"3%"}),u=g.default.getAnimationBase();return g.default.get({layout:c,content:I,animation:u})}static getModalTextarea({app:t,ui:e}){const i=g.default.getLayoutInlineBlock({width:"60%",maxWidth:"60%",height:"80%",background:s.default.whiteRGB,padding:"6px",margin:"0",outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),n=g.default.getContentBase({textAlign:"left"}),l=g.default.getAnimationBase();return g.default.get({layout:i,content:n,animation:l})}static getButton({app:t,ui:e}){const i=e.screenSize===l.default.screenSizeSmallLabel?30:38,n=g.default.getLayoutInlineBlock({outline:"none",width:"20%",maxWidth:"20%",height:"56%",margin:"0px 3% 0px 0%",background:`url(${I.default}) 50% 35% / ${i}px no-repeat ${s.default.whiteRGBA}`,border:s.default.border,borderRadius:"3px"}),a=g.default.getContentBase({color:s.default.downreliefRGB,cursor:"pointer"}),c=g.default.getAnimationBase();return g.default.get({layout:n,content:a,animation:c})}static getUpper({app:t,ui:e}){const i=g.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start"}),n=g.default.getContentBase({}),l=g.default.getAnimationBase();return g.default.get({layout:i,content:n,animation:l})}static getBottom({app:t,ui:e}){const i=g.default.getLayoutFlex({alignItems:"center",justifyContent:"center"}),n=g.default.getContentBase({}),l=g.default.getAnimationBase();return g.default.get({layout:i,content:n,animation:l})}}e.default=u},7162:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(1433)),c=n(i(4381));class g{constructor(t){return{self:g.getSelf(t),emoji:g.getEmoji(t),emojiLabel:g.getEmojiLabel(t)}}static get selfHeight(){return 172}static getTransform({app:t,ui:e}){return e.isOpenPostsSupporter?`translate3d( 0px, -${g.selfHeight+s.default.getBlockSize({app:t,ui:e})}px, 0px )`:"translate3d( 0px, 0px, 0px )"}static getSelf({app:t,ui:e}){const i=c.default.getLayoutFlex({display:"flex",position:"fixed",bottom:`-${g.selfHeight}px`,left:a.default.getLeft({app:t,ui:e}),height:g.selfHeight,width:a.default.getWidth({app:t,ui:e}),maxWidth:a.default.getWidth({app:t,ui:e}),color:s.default.whiteRGB,flexFlow:"column wrap",alignItems:"center",justifyContent:"flex-start",background:s.default.darkRGBA,whiteSpace:"nowrap",overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:2}),n=c.default.getAnimationBase({transition:s.default.getTransitionFirstOn({app:t,ui:e}),transform:g.getTransform({app:t,ui:e})});return c.default.get({layout:i,content:{overflow:"scroll hidden"},animation:n})}static getEmoji({app:t,ui:e}){const i=l.default.screenSizeSmallLabel===e.screenSize?"35px":"40px",n=c.default.getLayoutFlex({width:"20%",minWidth:"auto",maxWidth:"auto",height:"86px",flexFlow:"column wrap",alignItems:"center",justifyContent:"center",padding:"5px"}),a=c.default.getContentBase({fontSize:i,cursor:"pointer"}),g=c.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:"scale(1.0)"});return c.default.get({layout:n,content:a,animation:g})}static getEmojiLabel({app:t,ui:e}){const i=(l.default.screenSizeSmallLabel,e.screenSize,"0px"),n=l.default.screenSizeSmallLabel===e.screenSize?"8px":"10px",a=c.default.getLayoutFlex({width:"auto",minWidth:"auto",maxWidth:"auto",height:"30px",margin:i}),g=c.default.getContentBase({wordBreak:"break-word",fontSize:n,color:s.default.whiteRGB}),I=c.default.getAnimationBase({});return c.default.get({layout:a,content:g,animation:I})}}e.default=g},544:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(2243)),c=n(i(3829)),g=n(i(4381));class I{constructor(t){return{self:I.getSelf(t),fixTimeMarker:I.getFixTimeMarker(t)}}static getSelfWidthRate(){return 36}static getSelfHeightPx(){return 22}static getSelfMarginTop(){return 15}static getSelfLeftRate(){return 50-I.getSelfWidthRate()/2}static getFixTimeMarkerStyles({app:t,ui:e}){let i=I.getSelfWidthRate()/100,n=e.width*i,g=`${I.getSelfHeightPx()}px`,u=`${s.default.getBlockSize({app:t,ui:e})}px`,d="25%",o=0,r=0,B=0;if(e.screenMode=e.extensionMode===l.default.extensionModeLiveMedia&&l.default.screenSizeSmallLabel,e.extensionMode===l.default.extensionModeLiveMedia)B=e.width,n=B*i,u="0",d=o+B*(I.getSelfLeftRate()/100)+"px";else switch(e.screenSize){default:case l.default.screenSizeSmallLabel:B=e.width,n=B*i,d=o+B*(I.getSelfLeftRate()/100)+"px";break;case l.default.screenSizeMiddleLabel:o=c.default.getWidth({app:t,ui:e},!0),B=e.width-o,n=B*i,d=o+B*(I.getSelfLeftRate()/100)+"px";break;case l.default.screenSizeLargeLabel:o=c.default.getWidth({app:t,ui:e},!0),r=e.width*Number(a.default.getWidth({app:t,ui:e},!0))/100,B=e.width-(o+r),n=B*i,d=o+B*(I.getSelfLeftRate()/100)+"px"}return{width:n,height:g,top:u,left:d,fontSize:"0.8em"}}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"none":"flex",n=g.default.getLayoutFlex({top:`${s.default.getBlockSize({app:t,ui:e})}px`,width:`${I.getSelfWidthRate()}%`,height:`${I.getSelfHeightPx()}px`,margin:`${I.getSelfMarginTop()}px auto 10px auto`,padding:"5px 10px",background:s.default.darkLightRGBA,borderRadius:"20px",display:i}),l=g.default.getContentBase({color:s.default.whiteRGB,letterSpacing:"2px",fontSize:"0.8em"}),a=g.default.getAnimationBase();return g.default.get({layout:n,content:l,animation:a})}static getFixTimeMarker({app:t,ui:e}){const i=I.getSelf({app:t,ui:e}),{top:n,left:l,width:s,height:a,fontSize:c}=I.getFixTimeMarkerStyles({app:t,ui:e});return{...i,position:"fixed",width:s,minWidth:s,height:a,top:n,left:l,fontSize:c,lineHeight:"0.9em"}}}e.default=I},7862:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865)),s=n(i(5549)),a=n(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static get selfBoxShadowOnHighlight(){return`0px 0px 10px rgba(${s.default.themeRGBString},1)`}static get selfBoxShadowOffHighlight(){return`0px 0px 0px rgba(${s.default.themeRGBString},1)`}static getSelf({app:t,ui:e}){const i=e.screenSize===l.default.screenSizeSmallLabel?"26px":"30px";return{div:a.default.get({layout:a.default.getLayoutInlineFlex({alignItems:"center",justifyContent:"center",width:i,height:i,background:`rgba(${s.default.themeRGBString}, 0.85)`,borderRadius:i,boxShadow:c.selfBoxShadowOffHighlight}),content:a.default.getContentBase({fontSize:"0.8em",textAlign:"center"}),animation:a.default.getAnimationBase({transition:`${s.default.transitionOn}ms`})}),circle:a.default.get({layout:a.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:a.default.getContentBase({textAlign:"center",color:s.default.whiteRGB}),animation:a.default.getAnimationBase()})}}}e.default=c},4381:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(8506)),s=n(i(5549)),a=n(i(9301)),c=n(i(3180)),g=n(i(3817)),I=n(i(1540)),u=n(i(434)),d=n(i(9422)),o=n(i(865)),r=n(i(6869)),B=n(i(2945)),F=n(i(7825)),C=n(i(4289)),U=n(i(9201)),Q=n(i(2423)),b=n(i(4857)),V=n(i(3829)),A=n(i(9723)),p=n(i(8381)),G=n(i(4359)),x=n(i(4528)),R=n(i(6620)),h=n(i(7608)),m=n(i(4909)),L=n(i(9167)),y=n(i(1433)),S=n(i(7162)),Z=n(i(544)),X=n(i(7862));class f{constructor(t){const e=new s.default(t),i=new d.default(t),n=new u.default(t),f=new S.default(t),E=new y.default(t),W=new R.default(t),N=new V.default(t),T=new p.default(t),Y=new x.default(t),J=new A.default(t),H=new G.default(t),v=new I.default(t),k=new U.default(t),w=new L.default(t),M=new m.default(t),z=new Z.default(t),D=new h.default(t),P=new l.default(t),O=new F.default(t),j=new B.default(t),K=new Q.default(t),_=new b.default(t),q=new r.default(t),$=new a.default(t);return{container:e,header:i,footer:n,postsSupporter:f,postsFooter:E,menuFooter:W,detailFooter:new c.default(t),menu:N,ranks:T,ch:Y,menuUsers:J,setChModal:H,extScreen:v,lockMenu:k,posts:w,post:M,timeMarker:z,notif:D,audio:K,video:_,board:P,links:O,link:j,innerNotif:q,detail:$,emotionGraph:new g.default(t),icon:new o.default(t),liveCnt:new X.default(t),loading:new C.default(t)}}static get fontBaseRGB(){return"rgb(60, 60, 60)"}static get darkLightRGB(){return"rgba(0, 0, 0, 0.2)"}static get darkLightRGBA(){return"rgba(0, 0, 0, 0.25)"}static get darkRGB(){return"rgb(0, 0, 0)"}static get darkRGBA(){return"rgba(0, 0, 0, 0.4)"}static get mono160RGB(){return"rgb(160, 160, 160)"}static get mono160RGBA(){return"rgb(160, 160, 160)"}static get mono180RGB(){return"rgb(180, 180, 180)"}static get mono192RGB(){return"rgb(192, 192, 192)"}static get mono200RGB(){return"rgb(200, 200, 200)"}static get mono205RGB(){return"rgb(205, 205, 205)"}static get mono210RGB(){return"rgb(210, 210, 210)"}static get mono211RGB(){return"rgb(211, 211, 211)"}static get mono215RGB(){return"rgb(215, 215, 215)"}static get mono220RGB(){return"rgb(220, 220, 220)"}static get mono225RGB(){return"rgb(225, 225, 225)"}static get mono230RGB(){return"rgb(230, 230, 230)"}static get mono235RGB(){return"rgb(235, 235, 235)"}static get mono240RGB(){return"rgb(240, 240, 240)"}static get mono245RGB(){return"rgb(245, 245, 245)"}static get mono250RGB(){return"rgb(250, 250, 250)"}static get mono251RGB(){return"rgb(251, 251, 251)"}static get mono252RGB(){return"rgb(252, 252, 252)"}static get mono253RGB(){return"rgb(253, 253, 253)"}static get mono254RGB(){return"rgb(254, 254, 254)"}static get mono255RGB(){return"rgb(255, 255, 255)"}static get mono180RGBA(){return"rgba(180, 180, 180, 0.96)"}static get mono192RGBA(){return"rgba(192, 192, 192, 0.96)"}static get mono200RGBA(){return"rgba(200, 200, 200, 0.96)"}static get mono205RGBA(){return"rgba(205, 205, 205, 0.96)"}static get mono210RGBA(){return"rgba(210, 210, 210, 0.96)"}static get mono211RGBA(){return"rgba(211, 211, 211, 0.96)"}static get mono215RGBA(){return"rgba(215, 215, 215, 0.96)"}static get mono220RGBA(){return"rgba(220, 220, 220, 0.96)"}static get mono225RGBA(){return"rgba(225, 225, 225, 0.96)"}static get mono230RGBA(){return"rgba(230, 230, 230, 0.96)"}static get mono235RGBA(){return"rgba(235, 235, 235, 0.96)"}static get mono240RGBA(){return"rgba(240, 240, 240, 0.96)"}static get mono245RGBA(){return"rgba(245, 245, 245, 0.96)"}static get mono250RGBA(){return"rgba(250, 250, 250, 0.96)"}static get mono252RGBA(){return"rgba(252, 252, 252, 0.96)"}static get mono255RGBA(){return"rgba(255, 255, 255, 0.96)"}static get twitterRGB(){return"rgba(76, 160, 235)"}static get twitterRGBA(){return"rgba(76, 160, 235, 0.96)"}static get facebookRGB(){return"rgba(73, 104, 173)"}static get facebookRGBA(){return"rgba(73, 104, 173, 0.96)"}static get emptyLabelStyle(){return{maxWidth:0,maxHeight:0}}static get(t={layout:{},content:{},animation:{}}){return{...t.layout,...t.content,...t.animation}}static getLayoutBase(t={}){return{display:"block",boxSizing:"border-box",overflow:"hidden",width:"inherit",height:"inherit",minWidth:"auto",minHeight:"auto",maxWidth:"inherit",maxHeight:"inherit",padding:0,margin:0,lineHeight:1,listStyle:"none",userSelect:"none",textDecoration:"none",verticalAlign:"baseline",borderCollapse:"collapse",borderSpacing:0,border:0,borderRadius:0,zIndex:1,...t}}static getLayoutGrid(t={}){return{...f.getLayoutBase({display:"grid"}),...t}}static getLayoutFlex(t={}){return{...f.getLayoutBase({display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutInlineFlex(t={}){return{...f.getLayoutBase({display:"inline-flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutTable(t={}){return{...f.getLayoutBase({display:"table"}),...t}}static getLayoutTableRow(t={}){return{...f.getLayoutBase({display:"table-row"}),...t}}static getLayoutTableCol(t={}){return{...f.getLayoutBase({display:"table-cell"}),...t}}static getLayoutFlexChild(t={}){return{...f.getLayoutBase({width:"auto",height:"auto"}),...t}}static getLayoutBlock(t={}){return{...f.getLayoutBase({display:"block"}),...t}}static getLayoutInlineBlock(t={}){return{...f.getLayoutBase({display:"inline-block",align:"center",verticalAlign:"middle"}),...t}}static getLayoutInline(t={}){return{...f.getLayoutBase({display:"inline"}),...t}}static getContentBase(t={}){return{wordWrap:"break-word",whiteSpace:"normal",quotes:"none",content:"none",cursor:"default",...f.getFontBase(),...t}}static getFontBase(t={}){return{letterSpacing:"inherit",lineHeight:"inherit",textAlign:"center",color:f.fontBaseRGB,fontWeight:300,fontSize:"inherit",fontFamily:"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Hiragino Sans,Noto Sans CJK JP,Original Yu Gothic,Yu Gothic,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Sans Emoji",...t}}static getAnimationBase(t={}){return{transition:`${s.default.transitionOff}ms`,transform:"translate3d(0px, 0px, 0px)",...t}}static trimUnit(t){return Number(t.toString().replace(/px|%|vw|vh|ms/,""))}}e.default=f},6552:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7771)),s=n(i(300)),a=n(i(1665));class c{constructor(t,e){this.env=a.default.PRODUCTION,this.type=a.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=l.default.HTTPS_PROTOCOL,this.host=location.host,this.extensionMode=c.extensionModeNone,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:l.default.HTTPS_PROTOCOL,host:location.host,mode:c.extensionModeNone}};const i=c.getInitialRootCh(s.default.env),n=c.getFirstHasSlach(i);this.env=s.default.env,this.id=t,this.hasSlash=e&&void 0!==e.hasSlash?e.hasSlash:c.getLastHasSlach(i),this.ch=e&&e.ch?e.ch:c.getCh(i,n,this.hasSlash),this.protocol=e&&e.protocol?e.protocol:c.getProtocol(),this.host=e&&e.host?e.host:location.host,this.extensionMode=e&&e.mode?e.mode:c.extensionModeNone}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static getInitialRootCh(t){let e=location.href;switch(e=e.replace(`${l.default.HTTPS_PROTOCOL}/`,"").replace(`${l.default.HTTP_PROTOCOL}/`,""),t){case a.default.PRODUCTION:e=e.replace(`/${a.default.PRODUCTION_DOMAIN}`,"/");break;case a.default.LOCALHOST:e=e.replace(`/${a.default.DEVELOPMENT_DOMAIN}`,"/");break;case a.default.DEVELOPMENT:e=e.replace(`:${a.default.PORTS.DEVELOPMENT_CLIENT}`,"").replace(`:${a.default.PORTS.DEVELOPMENT_API}`,"").replace(`:${a.default.PORTS.DEVELOPMENT_TOP}`,""),0===e.indexOf(`/${a.default.DEVELOPMENT_DOMAIN}/`)&&(e=e.replace(`/${a.default.DEVELOPMENT_DOMAIN}`,""))}return e}static getType(t,e){let i=a.default.APP_TYPES.API;return t?a.default.APP_TYPES.EXTENSION:e?a.default.APP_TYPES.PORTAL:i}static getProtocol(){return location.protocol===l.default.HTTPS_PROTOCOL?l.default.HTTPS_PROTOCOL:location.protocol===l.default.HTTP_PROTOCOL?l.default.HTTP_PROTOCOL:l.default.TALKN_PROTOCOL}static getFirstHasSlach(t){return t.startsWith("/")}static getLastHasSlach(t){return t.endsWith("/")}static getCh(t,e,i){let n=t;return n=e?n:`/${n}`,n=i?n:`${n}/`,n=n.replace(/^\/\//,"/"),n}}e.default=c},1223:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const l=n(i(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(l.default.API_TO_SERVER_REQUEST)?t.replace(l.default.API_TO_SERVER_REQUEST,l.default.API_TO_CLIENT_REQUEST):0===t.indexOf(l.default.SERVER_TO_API_EMIT)?t.replace(l.default.SERVER_TO_API_EMIT,l.default.API_TO_CLIENT_EMIT):0===t.indexOf(l.default.SERVER_TO_API_BROADCAST)?t.replace(l.default.SERVER_TO_API_BROADCAST,l.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==i.getType(t)&&"Null"!==i.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return i.getType(t),Object.keys(t).forEach((n=>{let l,s,a=null,c=!1,g=!1,I=()=>{},u=null;if("Object"===i.getType(t[n])){l=t[n];let e=0===Object.keys(l).length;c=l.isAcceptNull?l.isAcceptNull:c,g=l.isAcceptBlank?l.isAcceptBlank:g,a=!e&&l.def?l.def:a,u=e||!l.value&&""!==l.value?l:l.value,u=e&&a?a:u,s=i.getType(u),I=l.valid?l.valid:I}else u=t[n],a=u,c=c,g=g,s=i.getType(u),I=I;const d=t=>{let l=null;const a=`${e}.${n}`,d=u,o=s,r=t,B=i.getType(t);return B!==s&&(l=`SCHEMA_TYPE : ${a} [validType: ${s}][paramsType: ${B}]`),c&&null===t&&(l=`SCHEMA_IS_ACCEPT_NULL :  ${a}`),g&&""===t&&(l=`SCHEMA_IS_ACCEPT_BLANK :  ${a}`),"Function"===i.getType(I)&&I(t)&&(l=`SCHEMA_YOUR_VALID_METHOD :  ${a}`),{pointer:a,validValue:d,validType:o,paramsValue:r,paramsType:B,error:l}},{pointer:o,validValue:r,validType:B,paramsValue:F,paramsType:C,error:U}=d(u);if(null===U)Object.defineProperty(this,n,{get:()=>u,set:t=>{const e=d(u);if(null===U)return u=t,{...this,[n]:u};throw this.validWarn(e),U},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw U;console.warn(U)}})),this}canSet(t,e){try{const i=this[t];if(void 0===i)return!0;if(null===i)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:n}=this[t]=e;return!n&&(this[t]=i,!0)}catch(i){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${i}`}}merge(t={},e=!0){try{const n=i.getType(t),l=Object.keys(t);if(l.length>0){let i={...this};return l.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?i[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===n?(i=Object.values(i),e?new this.constructor(i):i):e?new this.constructor(i):i}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${i.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${i.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((i=>{let n=t[i];"Object"===n.constructor.name&&(n.type||n.default||(n=this.toJSON(n))),n.default||""===n.default||0===n.default?e[i]=n.default:e[i]=n})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=i},7771:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(1216));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),i=e[0].split("[")[0];let n;return n=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:i,actionType:n,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_REQUEST_TYPE}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_REQUEST_TYPE:e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_RESPONSE_TYPE_BROADCAST}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_RESPONSE_TYPE_EMIT}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_RESPONSE_TYPE_EMIT:s.API_SETUP}static convertExtToClientActionType(t,e){return s.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,i){const n=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:a,requestPrivateState:c}=s.map[n];let g={[s.REDUX_ACTION_KEY]:n};return Object.keys(c).forEach((t=>{g[t]||(g[t]={}),c[t].forEach((n=>{if(!g[t][n]){let s=e[t][n];i&&i[t]&&l.default.isSet(i[t][n])&&(s=i[t][n]),g[t][n]=s}}))})),Object.keys(a).forEach((t=>{g[t]||(g[t]={}),a[t].forEach((e=>{g[t][e]||(g[t][e]=i)}))})),g}static getResponseState(t,e,i){const n=e.type,l=s.map[n][`response${t}State`];let a={[s.REDUX_ACTION_KEY]:n};return Object.keys(l).forEach((t=>{if(!i[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const n=l[t];let s=i[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===n?a={...a,[t]:s}:n.forEach((n=>{if(void 0===i[t][n])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${n}`;a={...a,[t]:{...a[t],[n]:i[t][n]}}}))}})),a}static getRequestActionState(t,e=null,i=null){return"string"==typeof e&&null===i?{type:t}:"object"==typeof e&&"object"==typeof i?{...e,...i,type:t}:"string"==typeof e&&"object"==typeof i?{...i,type:t}:{...e,type:t}}}e.default=s},300:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(6894)),s=n(i(8399)),a=n(i(1665)),{PRODUCTION:c,DEVELOPMENT:g,PRODUCTION_DOMAIN:I,DEVELOPMENT_DOMAIN:u,SUB_DOMAINS:d,PORTS:o}=a.default,r=l.default.hasOwnProperty("hostname")?l.default.hostname():"localhost",B=function(t){if("browser"===s.default.title){if(location.href.indexOf(a.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===a.default.PORTS.DEVELOPMENT_CLIENT||t===a.default.PORTS.DEVELOPMENT_API||t===a.default.PORTS.DEVELOPMENT_TOP?a.default.DEVELOPMENT:a.default.LOCALHOST}return a.default.PRODUCTION}return t.indexOf(a.default.AWS_HOST_KEY)>=0?a.default.PRODUCTION:a.default.DEVELOPMENT}(r),F={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},C=B===g,U=B===c?I:u,Q=`${d.WWW}.${U}`,b=`${d.API}.${U}`,V=C?`${U}:${o.DEVELOPMENT_API}/${F.api}`:`${b}/v1`,A=C?`${U}:${o.DEVELOPMENT_CLIENT}/${F.client}`:`${d.CLIENT}.${U}`,p=`${d.DESC}.${U}`,G=`${d.PORTAL}.${U}`,x=`${d.ASSETS}.${U}`,R=`${x}/img/`,h={domain:U,env:B,files:F,hostName:r,apiURL:b,apiAccessURL:V,wwwURL:Q,descURL:p,portalURL:G,clientURL:A,assetsURL:x,autoURL:`${d.AUTO}.${U}`,extURL:`${d.EXT}.${U}`,ownURL:`${d.OWN}.${U}`,newsURL:`${d.NEWS}.${U}`,bannerURL:`${d.BANNER}.${U}`,transactionURL:`${d.TRANSACTION}.${U}`,assetsImgPath:R,assetsIconPath:`${x}/icon/`,assetsJsPath:`${x}/js/`,sessionURL:`${d.SESSION}.${U}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${R}talkn_logo_html.png`,Music:`//${R}talkn_logo_music.png`,Video:`//${R}talkn_logo_video.png`},defaultFavicon:`//${d.ASSETS}.${U}/favicon.ico`};e.default={...h}},1665:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(8399)),s={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:l.default.env.HOSTNAME?l.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_CLIENT:8080,DEVELOPMENT_API:8001,DEVELOPMENT_TOP:8e3,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",TOP:"TOP"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=s},6562:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7865));e.default={isUrl:t=>!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*|\\/)?$","i").test(t),getSaveFaviconName:t=>{if(t){const e=t.replace(/\u002f/g,"_");return e.indexOf(".png")>0?e:e+".png"}},trimPx:t=>t.toString().replace("px",""),getUpperPrefix:t=>{let e=t.charAt(0).toUpperCase()+t.slice(1);return e.substring(0,1).toUpperCase()+e.substring(1)},timeAgoFormatter:(t,e,i,n=l.default.extensionModeNone)=>{let s=String(e);switch(String(e)){case"year":s="YR";break;case"month":s="mo";break;case"week":s="wk";break;case"hour":s="hr";break;case"minute":s="min";break;case"second":s="sec"}return`${t} ${s} ${n===l.default.extensionModeNone?i:i.replace("ago","")}`}}},8957:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7294)),s=n(i(3935)),a=i(8928),c=n(i(7303));e.default=(t,e=(()=>{}))=>{s.default.render(l.default.createElement(a.Provider,{store:t.window.store},l.default.createElement(c.default,null)),document.querySelector("div#talkn"),e)}},2874:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7213)),s=n(i(6552)),a=n(i(1223)),c=n(i(7771)),g=n(i(300)),I=n(i(1665)),u=n(i(2230)),d=n(i(4817)),o=n(i(5232)),r=n(i(8215)),B=n(i(4603)),F=n(i(7923)),C=n(i(7865)),U=n(i(3669)),Q=n(i(6612)),b=n(i(8957));new(i(8622).default);class V{constructor(t){this.id=I.default.APP_TYPES.PORTAL,this.store=(0,Q.default)(),this.parentHref=location.href,B.default.setupMath(),this.id=t,this.isRankDetailMode=this.id===I.default.APP_TYPES.TOP,this.bootOption=new s.default(this.id);const e=new u.default(this.bootOption),i=new F.default(e),n={...e,...i};this.store.dispatch({...n,type:"INIT_CLIENT"}),this.api=this.api.bind(this),this.injectStateToApp=this.injectStateToApp.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise((t=>{this.conned=t,this.wsApi=new l.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage,this.id!==I.default.APP_TYPES.TOP&&this.id!==I.default.APP_TYPES.PORTAL&&this.id!==I.default.APP_TYPES.EXTENSION||(this.ext=new A(this),this.mediaClient=new p(this),this.dom=new G(this))}))}api(t,e={},i){t===V.SET_CALLBACK_METHOD&&i&&(this.callback=i),this.postMessage(t,e)}injectStateToApp(t){t.app.isRankDetailMode=this.isRankDetailMode,this.api("fetchPosts",t),this.api("rank",t)}postMessage(t,e={}){const i={id:e.id?e.id:this.id,type:a.default.CLIENT_TO_WSAPI_TYPE,ioType:c.default.API_SETUP,method:t,params:e};this.mediaClient&&this.mediaClient.wsClientBeforeFilter({method:t,params:e}),this.wsApi.postMessage(i)}onMessage(t){const{currentTarget:e,data:i}=t,{type:n,method:l,ioType:s,params:c,methodBack:g}=i;if(e instanceof Worker&&n===a.default.WSAPI_TO_CLIENT_TYPE){const t=a.default.convertApiToClientActionType(l),{ioType:e,exeMethod:i}=a.default.getMessageTypes(t),n={...c,type:t};if(this.store.dispatch(n),this.exePublicCallback(e,i,n),"WS_CONSTRUCTED"===l&&(this.conned(this),this.id===I.default.APP_TYPES.TOP||this.id===I.default.APP_TYPES.PORTAL)){const t=c.ch?{...this.bootOption,ch:c.ch}:this.bootOption;this.api("tune",t)}this.id===I.default.APP_TYPES.EXTENSION&&this.ext&&this.ext.to(l,e,c),this.mediaClient&&this.mediaClient.wsClientAfterFilter({method:l,params:c,state:n}),this.id!==I.default.APP_TYPES.TOP&&this.id!==I.default.APP_TYPES.PORTAL&&this.id!==I.default.APP_TYPES.EXTENSION||"SERVER_TO_API[EMIT]:tune"===l&&this.injectStateToApp(c)}}onError(t){console.warn(t)}exePublicCallback(t,e,i){this.callback&&(t!==c.default.API_RESPONSE_TYPE_EMIT&&t!==c.default.API_RESPONSE_TYPE_BROADCAST||this.callback(t,e,i))}}e.default=V;class A{constructor(t){this.window=t,this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),window.onmessage=this.onMessage,window.onmessageerror=this.onMessageError}to(t,e,i={}){t.indexOf(c.default.METHOD_COLON)>=0&&(t=t.split(c.default.METHOD_COLON)[1]);const n={id:this.id,type:a.default.CLIENT_TO_EXT_TYPE,ioType:e,method:t,params:i,href:location.href};this.postMessage(n)}toMediaServer(t,e={}){const i={id:this.id,type:a.default.MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE,method:t,params:e};this.postMessage(i)}postMessage(t={}){this.href?window.top.postMessage(t,this.href):window.postMessage(t,location.href)}onMessage(t){const{id:e,href:i,type:n,method:l,ioType:g,params:I,methodBack:d}=t.data;if(n===a.default.EXT_TO_CLIENT_TYPE){switch(l){case a.default.HANDLE_EXT_AND_CLIENT:this.id=e,this.window.bootOption=new s.default(e,I.bootOption),this.href=i;const t=new u.default(this.window.bootOption),n=new F.default({...t,ui:I.ui}),d={...t,...n};this.window.store.dispatch({...d,type:"EXT_INIT_CLIENT"}),this.window.api("tune",this.window.bootOption),this.to(l,g,d);break;default:Boolean(Object.keys(c.default.map).find((t=>t===l)))&&this.window.api(l,I)}this.window.store.dispatch({...I,type:l})}else n===a.default.MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE&&this.window.mediaClient.onMessage(t,this.window.store.getState())}onMessageError(t){console.warn(t)}}class p{constructor(t){this.pointerTime=0,this.isPosting=!1,this.isChangeThread=!1,this.window=t,this.status=p.STATUS_ENDED,this.requestServer=this.requestServer.bind(this),this.onMessage=this.onMessage.bind(this),this.wsClientBeforeFilter=this.wsClientBeforeFilter.bind(this),this.wsClientAfterFilter=this.wsClientAfterFilter.bind(this),this.setPostsTimelines=this.setPostsTimelines.bind(this),this.refrectSelfPost=this.refrectSelfPost.bind(this),this.play=this.play.bind(this),this.stanby=this.stanby.bind(this),this.ended=this.ended.bind(this),this.postsTimeline=[],this.postsTimelineStock=[]}static get STATUS_SEARCH(){return"SEARCH"}static get STATUS_STANBY(){return"STANBY"}static get STATUS_PLAY(){return"PLAY"}static get STATUS_ENDED(){return"ENDED"}static get STATUS_BACK(){return"BACK"}requestServer(t,e={}){this.window.ext.toMediaServer(t,e)}onMessage(t,e){const{params:i}=t.data,{currentTime:n,status:l,ch:s}=i,a=l.toUpperCase();switch(a){case p.STATUS_PLAY:e.thread.ch!==s||this.isChangeThread?this.status!==p.STATUS_BACK&&(e.thread.ch=s,this.isChangeThread=!0,window.talknWindow.dom.onClickCh(e.thread.ch,e.ui,e.thread.hasSlash,"ToMedia")):(this.postsTimeline.length>0||this.postsTimelineStock.length>0)&&(this.status=a,this.play(n))}}wsClientBeforeFilter({method:t,params:e}){return"post"===t&&this.window.store.getState().app.isMediaCh&&(e.app.inputCurrentTime=this.pointerTime>0?this.pointerTime:0),e}wsClientAfterFilter({method:t,params:e,state:i}){switch(t){case"SERVER_TO_API[EMIT]:tune":this.window.mediaClient=new p(this.window),this.requestServer("searching",{id:this.window.ext.id,ch:i.thread.ch,href:location.href,audios:i.thread.audios,videos:i.thread.videos});break;case"SERVER_TO_API[EMIT]:changeThread":this.window.id===I.default.APP_TYPES.TOP||this.window.id===I.default.APP_TYPES.PORTAL?this.requestServer("searching",{id:this.window.ext.id,ch:i.thread.ch,href:location.href,audios:i.thread.audios,videos:i.thread.videos}):"BackToRootCh"===i.ui.clicked&&(this.status=p.STATUS_BACK),this.isChangeThread=!1;break;case"SERVER_TO_API[EMIT]:fetchPosts":this.setPostsTimelines(i);break;case"SERVER_TO_API[BROADCAST]:post":if(i.app.isMediaCh){const t=i.posts[0];t.ch===i.thread.ch&&t.uid===i.user.uid&&this.refrectSelfPost(t)}}}setPostsTimelines({postsTimeline:t,postsTimelineStock:e}){this.postsTimeline=[...t],this.postsTimelineStock=[...e]}refrectSelfPost(t){const e=this.postsTimeline.length;let i=!1;for(let n=0;n<e;n++)t.currentTime<this.postsTimeline[n].currentTime&&(i=!0,this.postsTimeline.splice(n,0,t));i||this.postsTimeline.push(t)}setServerParams(t){this.ch=t.ch,this.status=t.status,this.pointerTime=t.currentTime}searching(){}stanby(){}ended(){const t=Number.MAX_SAFE_INTEGER,e=this.postsTimelineStock.length;for(let i=0;i<e&&this.postsTimelineStock[i]&&this.postsTimelineStock[i].currentTime<=t;i++)this.window.dom.clientAction("NEXT_POSTS_TIMELINE",{postsTimeline:[this.postsTimelineStock[i]]})}play(t=0){if(this.isPosting)return;const e=this.postsTimelineStock.length;if(this.isPosting=!0,this.pointerTime<=t)for(this.pointerTime=t;this.isPosting;)if(0===e)this.isPosting=!1;else{if(!(this.postsTimelineStock[0]&&this.postsTimelineStock[0].currentTime<=t)){this.isPosting=!1;break}{const t=this.postsTimelineStock.shift();this.postsTimeline.push(t),this.window.dom.clientAction("NEXT_POSTS_TIMELINE",{postsTimeline:[t]})}}else{this.requestServer("pause");const e=this.postsTimeline.concat(this.postsTimelineStock),i=e.length;this.pointerTime=t,this.postsTimeline=[],this.postsTimelineStock=[];for(let t=0;t<i;t++){const i=e[t];i.currentTime<=this.pointerTime?this.postsTimeline.push(i):this.postsTimelineStock.push(i)}this.window.dom.clientAction("CLEAR_POSTS_TIMELINE",{postsTimeline:this.postsTimeline,postsTimelineStock:this.postsTimelineStock}),this.requestServer("play")}this.isPosting=!1}}class G extends r.default{constructor(t){super(null),this.id="talkn",this.scrollHeight=0,this.isScrollBottom=!1,this.resizeTimer=null,this.isAnimateScrolling=!1,this.window=t,this.load=this.load.bind(this),this.resize=this.resize.bind(this),this.scroll=this.scroll.bind(this),this.renderTalkn=this.renderTalkn.bind(this),this.loadContainer=this.loadContainer.bind(this),this.updateUiTimeMarker=this.updateUiTimeMarker.bind(this),this.getPostsClientHeight=this.getPostsClientHeight.bind(this),window.onload=this.load,window.onresize=this.resize,window.onscroll=this.scroll}static get resizeInterval(){return 300}static get selectHtml(){return document.querySelector("html")}static get selectBody(){return document.querySelector("body")}static get selectTalkn(){return document.querySelector("div#talkn")}static get selectPosts(){return document.querySelector("[data-component-name=Posts]")}static get selectAllPost(){return document.querySelectorAll("[data-component-name=Post]")}static get selectAllTimeMarkerList(){return document.querySelectorAll("li[data-component-name=TimeMarkerList]")}renderTalkn(){(0,b.default)(this,this.loadContainer)}loadContainer(){this.html=G.selectHtml,this.body=G.selectBody,this.talkn=G.selectTalkn,this.removeTalknLoading()}load(){}resize(t){if(window.talknWindow){const{ui:t}=this.window.store.getState();null===this.resizeTimer&&(this.resizeStartWindow(t),this.resizeTimer=setTimeout((()=>{this.resizeEndWindow(t)}),G.resizeInterval))}}scroll(t){const e=window.scrollY,i=window.innerHeight,n=this.body.scrollHeight;this.onScroll({scrollTop:e,clientHeight:i,scrollHeight:n})}updateUiTimeMarker(t,{app:e,ui:i}){const n=U.default.generate(t,G.selectAllTimeMarkerList,{app:e,ui:i});n.list.length>0&&this.clientAction("ON_SCROLL_UPDATE_TIME_MARKER",{uiTimeMarker:n})}resizeStartWindow(t){t.isTransition=!1,this.clientAction("ON_RESIZE_START_WINDOW",{ui:t})}resizeEndWindow(t){if(t){clearTimeout(this.resizeTimer),this.resizeTimer=null;const e=window.talknWindow.store.getState();let i=!1;t.width!==window.innerWidth&&(t.width=window.innerWidth,i=!0),t.height!==window.innerHeight&&(t.height=window.innerHeight,i=!0),i&&(t.screenSize=C.default.getScreenSize(),t.isTransition=!0,e.ui=t,this.clientAction("ON_RESIZE_END_WINDOW",e))}}animateScrollTo(t=9999999,e=400,i=(()=>{})){if(0===e)window.scrollTo(0,t);else if(!this.isAnimateScrolling){let n=window.scrollY,l=t-n,s=0,a=20;const c=()=>{s+=a;let t=Math.easeInOutQuad(s,n,l,e);screenTop=Math.floor(t),window.scrollTo(0,t),s<e?(this.isAnimateScrolling=!0,setTimeout(c,a)):(this.isAnimateScrolling=!1,i())};c()}}exeGetMore(){const{thread:t,app:e}=this.clientState,i=o.default.getDispPosts(this.clientState).length,n=e.dispThreadType===d.default.dispThreadTypeMulti?"multiPostCnt":"postCnt";g.default.findOnePostCnt<=i&&i<g.default.findOneLimitCnt&&t[n]>g.default.findOnePostCnt&&i<t[n]&&this.api("getMore")}getPostsHeight(){let t=0;return G.selectAllPost.forEach((e=>{t+=e.clientHeight})),t}getPostsClientHeight(){const t=G.selectPosts;return t?t.clientHeight:0}removeTalknLoading(){this.talkn.style.display="initial",this.talkn.style["background-image"]="none",this.talkn.style["animation-name"]="none"}lockWindow(){const t="hidden";return this.html.style.overflow=t,this.body.style.overflow=t,this.talkn.style.overflow=t,window.scrollY}unlockWindow(){const t="inherit";this.html.style.overflow=t,this.body.style.overflow=t,this.talkn.style.overflow=t}}},8661:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7294)),s=n(i(9163)),a=n(i(2736));e.default=({src:t})=>l.default.createElement(c,{src:t});const c=s.default.div`
  max-width: 320px;
  height: 200px;
  background: url('${t=>t.src}') no-repeat center / cover, url('${a.default}') no-repeat center / contain;
  background-color: #eee;
  border-top: 1px solid #eee;
  border-bottom: 1px solid #eee;
`},5899:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7294)),s=n(i(9163));e.default=({src:t})=>l.default.createElement(a,{src:t});const a=s.default.i`
  z-index: 1;
  width: 50px;
  min-width: 50px;
  max-width: 50px;
  height: 50px;
  min-height: 50px;
  max-height: 50px;
  background: url('${t=>t.src}') no-repeat center / 60%;
  background-color: rgba(255, 255, 255, 1);
`},3868:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),l=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&n(e,t,i);return l(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const c=s(i(7294)),g=a(i(904)),I=a(i(6562));e.default=({value:t})=>{const[e,i]=(0,c.useState)(t);return(0,c.useEffect)((()=>{setTimeout((()=>{i(e)}),1e3)}),[e]),c.default.createElement(g.default,{date:e,formatter:(t,e,i)=>I.default.timeAgoFormatter(t,e,i)})}},2222:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7294)),s=n(i(9163));e.default=({lv:t=2,children:e})=>{switch(t){case 1:return l.default.createElement(a,null,e);case 2:return l.default.createElement(c,null,e);case 3:return l.default.createElement(g,null,e);case 4:return l.default.createElement(I,null,e);case 5:default:return l.default.createElement(u,null,e)}};const a=s.default.h1`
  font-size: 24px;
`,c=s.default.h2`
  font-size: 18px;
`,g=s.default.h3`
  font-size: 18px;
`,I=s.default.h4`
  font-size: 16px;
`,u=s.default.h5`
  font-size: 16px;
`},8219:function(t,e,i){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),l=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&n(e,t,i);return l(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const c=s(i(7294)),g=s(i(9163)),I=a(i(8661)),u=a(i(5899)),d=a(i(3868)),o=a(i(2222));e.default=({article:t})=>{const[e,i]=(0,c.useState)(!1),n=(0,c.useRef)(null);return(0,c.useEffect)((()=>{if(n.current){const t=n.current.children[0];i(t.clientWidth<t.scrollWidth)}}),[]),c.default.createElement(r,null,c.default.createElement(B,{ref:n,marqueeOn:e,marqueeDuration:t.title.length/4},c.default.createElement(C,{overflowTitle:e},c.default.createElement(u.default,{src:t.favicon}),c.default.createElement(o.default,{lv:2},t.title)),c.default.createElement(I.default,{src:t.serverMetas["og:image"]}),c.default.createElement(d.default,{value:t.updateTime}),c.default.createElement("p",null,t.description),c.default.createElement("dl",null,c.default.createElement("dd",null,"Twitter"),c.default.createElement("dd",null,"Facebook"),c.default.createElement("dd",null,"Home"))))};const r=g.default.li`
  list-style: none;
`,B=g.default.article`
  overflow: hidden;
  width: 300px;
  height: 480px;
  margin: 16px;
  background: #fff;
  box-shadow: 0px 0px 16px 0px #ccc;
  border-radius: 10px;
  transition: 300ms;
  :hover {
    background: #fefefe;
    box-shadow: 0px 0px 24px 0px #bbb;
    h2 {
      ${t=>t.marqueeOn?F:""};
    }
  }
`,F=g.css`
  @keyframes animation-marquee {
    0% {
      transform: translate(0%);
    }
    100% {
      transform: translate(-100%);
    }
  }
  @-webkit-keyframes animation-marquee {
    0% {
      transform: translate(0%);
    }
    100% {
      transform: translate(-100%);
    }
  }
  animation-name: animation-marquee;
  animation-duration: ${t=>t.marqueeDuration}s;
  animation-timing-function: linear;
  animation-delay: 0s;
  animation-iteration-count: infinite;
  animation-direction: normal;
`,C=g.default.header`
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
  justify-content: flex-start;
  height: 60px;
  white-space: nowrap;
  h2 {
    position: relative;
    left: -50px;
    width: 100%;
    min-width: 100%;
    text-align: center;
    text-indent: ${t=>t.overflowTitle?50:25}px;
    /*
    :before {
      position: relative;
      left: 274px;
      width: 16px;
      min-width: 16px;
      max-width: 16px;
      height: 60px;
      min-height: 60px;
      max-height: 60px;
      content: '_';
      background: red;
    }
    */
  }
`},7458:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7294)),s=n(i(9163)),a=n(i(2222)),c=n(i(8219));e.default=({title:t,articles:e})=>l.default.createElement(g,null,l.default.createElement(a.default,{lv:2},t),l.default.createElement(I,null,e.map(((t,e)=>l.default.createElement(c.default,{key:e,article:t})))));const g=s.default.div`
  display: flex;
  flex-flow: column wrap;
`,I=s.default.ol`
  display: flex;
  flex-flow: row nowrap;
  width: 100vw;
  overflow: scroll;
`},7303:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const l=n(i(7294)),s=i(8928),a=n(i(9163)),c=n(i(3841)),g=n(i(8215)),I=n(i(7851)),u=n(i(2222)),d=n(i(7458));class o extends g.default{constructor(t){super(t)}render(){const{ranks:t}=this.props.state;return l.default.createElement(r,null,l.default.createElement(B,null,l.default.createElement(u.default,{lv:1},"talkn")),l.default.createElement(F,null,l.default.createElement(d.default,{title:"全体",articles:t})))}}const r=a.default.div`
  display: flex;
  flex-flow: column wrap;
  align-item: flex-start;
  justify-content: flex-start;
  width: 100vw;

  ol {
    padding: 0;
  }

  li {
    text-decoration: none;
  }

  * {
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Hiragino Sans', 'Noto Sans CJK JP', 'Original Yu Gothic',
      'Yu Gothic', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Sans Emoji';
    font-weight: 200;
    color: rgb(60, 60, 60);
    letter-spacing: 2px;
  }
`,B=a.default.header`
  z-index: 10;
  position: fixed;
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: ${60}px;
  background: #fff;
  box-shadow: 0px 0px 16px 0px #ccc;
`,F=a.default.main`
  display: flex;
  margin-top: ${60}px;
`;e.default=(0,s.connect)(I.default,{...c.default})(o)},2417:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(9232);const l=n(i(1665)),s=n(i(2874)),a=l.default.APP_TYPES.TOP;window.talknWindow=new s.default(a),window.talknWindow.boot(),window.talknWindow.dom.renderTalkn()},7213:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i(477),l=i.n(n);function s(){return l()('(()=>{var t={5198:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},9954:(t,e)=>{!function(t){"use strict";e.encode=function(e){var s,r=new Uint8Array(e),i=r.length,n="";for(s=0;s<i;s+=3)n+=t[r[s]>>2],n+=t[(3&r[s])<<4|r[s+1]>>4],n+=t[(15&r[s+1])<<2|r[s+2]>>6],n+=t[63&r[s+2]];return i%3==2?n=n.substring(0,n.length-1)+"=":i%3==1&&(n=n.substring(0,n.length-2)+"=="),n},e.decode=function(e){var s,r,i,n,o,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var d=new ArrayBuffer(a),l=new Uint8Array(d);for(s=0;s<c;s+=4)r=t.indexOf(e[s]),i=t.indexOf(e[s+1]),n=t.indexOf(e[s+2]),o=t.indexOf(e[s+3]),l[u++]=r<<2|i>>4,l[u++]=(15&i)<<4|n>>2,l[u++]=(3&n)<<6|63&o;return d}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},1778:t=>{function e(t){if(t)return function(t){for(var s in e.prototype)t[s]=e.prototype[s];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((s=r[i])===e||s.fn===e){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(s){r=0;for(var i=(s=s.slice(0)).length;r<i;++r)s[r].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},9164:t=>{var e=1e3,s=60*e,r=60*s,i=24*r;function n(t,e,s,r){var i=e>=1.5*s;return Math.round(t/s)+" "+r+(i?"s":"")}t.exports=function(t,o){o=o||{};var a,c,u=typeof t;if("string"===u&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var n=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(n){var o=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(t);if("number"===u&&isFinite(t))return o.long?(a=t,(c=Math.abs(a))>=i?n(a,c,i,"day"):c>=r?n(a,c,r,"hour"):c>=s?n(a,c,s,"minute"):c>=e?n(a,c,e,"second"):a+" ms"):function(t){var n=Math.abs(t);return n>=i?Math.round(t/i)+"d":n>=r?Math.round(t/r)+"h":n>=s?Math.round(t/s)+"m":n>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},4510:(t,e,s)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;e.splice(1,0,s,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,s)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=s(76)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},76:(t,e,s)=>{t.exports=function(t){function e(t){let s,i,n,o=null;function a(...t){if(!a.enabled)return;const r=a,i=Number(new Date),n=i-(s||i);r.diff=n,r.prev=s,r.curr=i,s=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let o=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((s,i)=>{if("%%"===s)return"%";o++;const n=e.formatters[i];if("function"==typeof n){const e=t[o];s=n.call(r,e),t.splice(o,1),o--}return s})),e.formatArgs.call(r,t),(r.log||e.log).apply(r,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=r,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(i!==e.namespaces&&(i=e.namespaces,n=e.enabled(t)),n),set:t=>{o=t}}),"function"==typeof e.init&&e.init(a),a}function r(t,s){const r=e(this.namespace+(void 0===s?":":s)+t);return r.log=this.log,r}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let s;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(s=0;s<i;s++)r[s]&&("-"===(t=r[s].replace(/\\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let s,r;for(s=0,r=e.skips.length;s<r;s++)if(e.skips[s].test(t))return!1;for(s=0,r=e.names.length;s<r;s++)if(e.names[s].test(t))return!0;return!1},e.humanize=s(9164),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((s=>{e[s]=t[s]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let s=0;for(let e=0;e<t.length;e++)s=(s<<5)-s+t.charCodeAt(e),s|=0;return e.colors[Math.abs(s)%e.colors.length]},e.enable(e.load()),e}},8583:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},1072:(t,e,s)=>{const r=s(1383);t.exports=(t,e)=>new r(t,e),t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=s(6206),t.exports.transports=s(442),t.exports.parser=s(4113)},1383:(t,e,s)=>{const r=s(442),i=s(1778),n=s(4510)("engine.io-client:socket"),o=s(4113),a=s(7657),c=s(8407);class u extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=a(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=a(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=c.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){n(\'creating transport "%s"\',t);const e=function(t){const e={};for(let s in t)t.hasOwnProperty(s)&&(e[s]=t[s]);return e}(this.opts.query);e.EIO=o.protocol,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return n("options: %j",s),new r[t](s)}open(){let t;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return n("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){n("setting transport %s",t.name),this.transport&&(n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(t){n(\'probing transport "%s"\',t);let e=this.createTransport(t,{probe:1}),s=!1;u.priorWebsocketSuccess=!1;const r=()=>{s||(n(\'probe transport "%s" opened\',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(n(\'probe transport "%s" pong\',t),this.upgrading=!0,this.emit("upgrading",e),!e)return;u.priorWebsocketSuccess="websocket"===e.name,n(\'pausing current transport "%s"\',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(n("changing transport and sending upgrade packet"),l(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emit("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{n(\'probe transport "%s" failed\',t);const s=new Error("probe error");s.transport=e.name,this.emit("upgradeError",s)}})))};function i(){s||(s=!0,l(),e.close(),e=null)}const o=s=>{const r=new Error("probe error: "+s);r.transport=e.name,i(),n(\'probe transport "%s" failed because of error: %s\',t,s),this.emit("upgradeError",r)};function a(){o("transport closed")}function c(){o("socket closed")}function d(t){e&&t.name!==e.name&&(n(\'"%s" works - aborting "%s"\',t.name,e.name),i())}const l=()=>{e.removeListener("open",r),e.removeListener("error",o),e.removeListener("close",a),this.removeListener("close",c),this.removeListener("upgrading",d)};e.once("open",r),e.once("error",o),e.once("close",a),this.once("close",c),this.once("upgrading",d),e.open()}onOpen(){if(n("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){n("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(n(\'socket receive: type "%s", data "%s"\',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else n(\'packet received with socket readyState "%s"\',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const i={type:t,data:e,options:s};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const t=()=>{this.onClose("forced close"),n("socket closing - telling transport to close"),this.transport.close()},e=()=>{this.removeListener("upgrade",e),this.removeListener("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){n("socket error %j",t),u.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(n(\'socket close with reason: "%s"\',t),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const r=t.length;for(;s<r;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}u.priorWebsocketSuccess=!1,u.protocol=o.protocol,t.exports=u},6206:(t,e,s)=>{const r=s(4113),i=s(1778),n=s(4510)("engine.io-client:transport");t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const s=new Error(t);return s.type="TransportError",s.description=e,this.emit("error",s),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState?this.write(t):n("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},442:(t,e,s)=>{const r=s(1526),i=s(453),n=s(4735),o=s(1985);e.polling=function(t){let e,s=!1,o=!1;const a=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),s=t.hostname!==location.hostname||r!==t.port,o=t.secure!==e}if(t.xdomain=s,t.xscheme=o,e=new r(t),"open"in e&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new n(t)},e.websocket=o},4735:(t,e,s)=>{const r=s(3105),i=s(8583),n=/\\n/g,o=/\\\\n/g;let a;t.exports=class extends r{constructor(t){super(t),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length,a.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=t=>{this.onError("jsonp poll error",t)};const e=document.getElementsByTagName("script")[0];e?e.parentNode.insertBefore(t,e):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){let s;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=s,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function r(){i(),e()}this.form.action=this.uri();const i=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(t){this.onError("jsonp polling iframe removal error",t)}try{const t=\'<iframe src="javascript:0" name="\'+this.iframeId+\'">\';s=document.createElement(t)}catch(t){s=document.createElement("iframe"),s.name=this.iframeId,s.src="javascript:0"}s.id=this.iframeId,this.form.appendChild(s),this.iframe=s};i(),t=t.replace(o,"\\\\\\n"),this.area.value=t.replace(n,"\\\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},453:(t,e,s)=>{const r=s(1526),i=s(3105),n=s(1778),{pick:o}=s(7306),a=s(8583),c=s(4510)("engine.io-client:polling-xhr");function u(){}const d=null!=new r({xdomain:!1}).responseType;class l extends n{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=o(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new r(t);try{c("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=()=>{this.onLoad()},e.onerror=()=>{this.onError(e.responseText)}):e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},c("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=l.requestsCount++,l.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete l.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function h(){for(let t in l.requests)l.requests.hasOwnProperty(t)&&l.requests[t].abort()}l.requestsCount=0,l.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",h):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",h,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=d&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new l(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",(t=>{this.onError("xhr post error",t)}))}doPoll(){c("xhr poll");const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t=>{this.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=l},3105:(t,e,s)=>{const r=s(6206),i=s(8407),n=s(4113),o=s(6408),a=s(4510)("engine.io-client:polling");t.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{a("paused"),this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(a("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--t||e()}))),this.writable||(a("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){a("pre-pause writing complete"),--t||e()})))}else e()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){a("polling got data %s",t),n.decodePayload(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose(),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a(\'ignoring poll - transport state "%s"\',this.readyState))}doClose(){const t=()=>{a("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(a("transport open - closing"),t()):(a("transport not open - deferring close"),this.once("open",t))}write(t){this.writable=!1,n.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}}},7894:(t,e,s)=>{const r=s(8583),i="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):t=>setTimeout(t,0);t.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:i}},1985:(t,e,s)=>{const r=s(6206),i=s(4113),n=s(8407),o=s(6408),{pick:a}=s(7306),{WebSocket:c,usingBrowserWebSocket:u,defaultBinaryType:d,nextTick:l}=s(7894),h=s(4510)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends r{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=p?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u&&!p?e?new c(t,e):new c(t):new c(t,e,s)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||d,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],r=e===t.length-1;i.encodePacket(s,this.supportsBinary,(t=>{const e={};!u&&(s.options&&(e.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof t?Buffer.byteLength(t):t.length)<this.opts.perMessageDeflate.threshold&&(e.compress=!1);try{u?this.ws.send(t):this.ws.send(t,e)}catch(t){h("websocket closed before onclose event")}r&&l((()=>{this.writable=!0,this.emit("drain")}))}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||(t.b64=1),t=n.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}check(){return!(!c||"__initialize"in c&&this.name===f.prototype.name)}}t.exports=f},7306:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})},1526:(t,e,s)=>{const r=s(2888),i=s(8583);t.exports=function(t){const e=t.xdomain,s=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!s&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},1450:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const s=Object.create(null);Object.keys(e).forEach((t=>{s[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:s,ERROR_PACKET:{type:"error",data:"parser error"}}},4383:(t,e,s)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:i}=s(1450);let n;"function"==typeof ArrayBuffer&&(n=s(9954));const o=(t,e)=>{if(n){const s=n.decode(t);return a(s,e)}return{base64:!0,data:t}},a=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:a(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:o(t.substring(1),e)}:r[s]?t.length>1?{type:r[s],data:t.substring(1)}:{type:r[s]}:i}},5157:(t,e,s)=>{const{PACKET_TYPES:r}=s(1450),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),n="function"==typeof ArrayBuffer,o=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+t)},s.readAsDataURL(t)};t.exports=({type:t,data:e},s,a)=>{return i&&e instanceof Blob?s?a(e):o(e,a):n&&(e instanceof ArrayBuffer||(c=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?s?a(e instanceof ArrayBuffer?e:e.buffer):o(new Blob([e]),a):a(r[t]+(e||""));var c}},4113:(t,e,s)=>{const r=s(5157),i=s(4383),n=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:(t,e)=>{const s=t.length,i=new Array(s);let o=0;t.forEach(((t,a)=>{r(t,!1,(t=>{i[a]=t,++o===s&&e(i.join(n))}))}))},decodePacket:i,decodePayload:(t,e)=>{const s=t.split(n),r=[];for(let t=0;t<s.length;t++){const n=i(s[t],e);if(r.push(n),"error"===n.type)break}return r}}},2888:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},8407:(t,e)=>{e.encode=function(t){var e="";for(var s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e},e.decode=function(t){for(var e={},s=t.split("&"),r=0,i=s.length;r<i;r++){var n=s[r].split("=");e[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return e}},7657:t=>{var e=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,s=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var r,i,n=t,o=t.indexOf("["),a=t.indexOf("]");-1!=o&&-1!=a&&(t=t.substring(0,o)+t.substring(o,a).replace(/:/g,";")+t.substring(a,t.length));for(var c,u,d=e.exec(t||""),l={},h=14;h--;)l[s[h]]=d[h]||"";return-1!=o&&-1!=a&&(l.source=n,l.host=l.host.substring(1,l.host.length-1).replace(/;/g,":"),l.authority=l.authority.replace("[","").replace("]","").replace(/;/g,":"),l.ipv6uri=!0),l.pathNames=(r=l.path,i=r.replace(/\\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||i.splice(0,1),"/"==r.substr(r.length-1,1)&&i.splice(i.length-1,1),i),l.queryKey=(c=l.query,u={},c.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,s){e&&(u[e]=s)})),u),l}},665:(t,e,s)=>{"use strict";function r(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function i(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,r)}return s}function n(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?i(Object(s),!0).forEach((function(e){r(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function o(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}s.r(e),s.d(e,{__DO_NOT_USE__ActionTypes:()=>u,applyMiddleware:()=>E,bindActionCreators:()=>f,combineReducers:()=>h,compose:()=>T,createStore:()=>l});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",c=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+c(),REPLACE:"@@redux/REPLACE"+c(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+c()}};function d(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,s){var r;if("function"==typeof e&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof e&&void 0===s&&(s=e,e=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(t,e)}if("function"!=typeof t)throw new Error(o(2));var i=t,n=e,c=[],h=c,p=!1;function f(){h===c&&(h=c.slice())}function T(){if(p)throw new Error(o(3));return n}function E(t){if("function"!=typeof t)throw new Error(o(4));if(p)throw new Error(o(5));var e=!0;return f(),h.push(t),function(){if(e){if(p)throw new Error(o(6));e=!1,f();var s=h.indexOf(t);h.splice(s,1),c=null}}}function _(t){if(!d(t))throw new Error(o(7));if(void 0===t.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,n=i(n,t)}finally{p=!1}for(var e=c=h,s=0;s<e.length;s++)(0,e[s])();return t}function m(t){if("function"!=typeof t)throw new Error(o(10));i=t,_({type:u.REPLACE})}function S(){var t,e=E;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(o(11));function s(){t.next&&t.next(T())}return s(),{unsubscribe:e(s)}}})[a]=function(){return this},t}return _({type:u.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:m})[a]=S,r}function h(t){for(var e=Object.keys(t),s={},r=0;r<e.length;r++){var i=e[r];"function"==typeof t[i]&&(s[i]=t[i])}var n,a=Object.keys(s);try{!function(t){Object.keys(t).forEach((function(e){var s=t[e];if(void 0===s(void 0,{type:u.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(t){n=t}return function(t,e){if(void 0===t&&(t={}),n)throw n;for(var r=!1,i={},c=0;c<a.length;c++){var u=a[c],d=s[u],l=t[u],h=d(l,e);if(void 0===h)throw e&&e.type,new Error(o(14));i[u]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(t).length)?i:t}}function p(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return p(t,e);if("object"!=typeof t||null===t)throw new Error(o(16));var s={};for(var r in t){var i=t[r];"function"==typeof i&&(s[r]=p(i,e))}return s}function T(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function E(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return function(){var s=t.apply(void 0,arguments),r=function(){throw new Error(o(15))},i={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=e.map((function(t){return t(i)}));return r=T.apply(void 0,a)(s.dispatch),n(n({},s),{},{dispatch:r})}}}},9995:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const r=s(8511);function i(t,e){if(!t)return t;if(r.isBinary(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let r=0;r<t.length;r++)s[r]=i(t[r],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const r in t)t.hasOwnProperty(r)&&(s[r]=i(t[r],e));return s}return t}function n(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=n(t[s],e);else if("object"==typeof t)for(const s in t)t.hasOwnProperty(s)&&(t[s]=n(t[s],e));return t}e.deconstructPacket=function(t){const e=[],s=t.data,r=t;return r.data=i(s,e),r.attachments=e.length,{packet:r,buffers:e}},e.reconstructPacket=function(t,e){return t.data=n(t.data,e),t.attachments=void 0,t}},9565:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const r=s(1778),i=s(9995),n=s(8511),o=s(4510)("socket.io-parser");var a;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(a=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return o("encoding packet %j",t),t.type!==a.EVENT&&t.type!==a.ACK||!n.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==a.BINARY_EVENT&&t.type!==a.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),o("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),s=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(s),r}};class c extends r{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===a.BINARY_EVENT||e.type===a.BINARY_ACK?(this.reconstructor=new u(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!n.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(r,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){const r=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(r,e)}else s.nsp="/";const r=t.charAt(e+1);if(""!==r&&Number(r)==r){const r=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(r,e+1))}if(t.charAt(++e)){const r=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!c.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",t,s),s}static isPayloadValid(t,e){switch(t){case a.CONNECT:return"object"==typeof e;case a.DISCONNECT:return void 0===e;case a.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=c;class u{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},8511:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),n="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(t){return s&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||n&&t instanceof File}e.isBinary=o,e.hasBinary=function t(e,s){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let s=0,r=e.length;s<r;s++)if(t(e[s]))return!0;return!1}if(o(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const s in e)if(Object.prototype.hasOwnProperty.call(e,s)&&t(e[s]))return!0;return!1}},6408:t=>{"use strict";var e,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},i=0,n=0;function o(t){var e="";do{e=s[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=o(+new Date);return t!==e?(i=0,e=t):t+"."+o(i++)}for(;n<64;n++)r[s[n]]=n;a.encode=o,a.decode=function(t){var e=0;for(n=0;n<t.length;n++)e=64*e+r[t.charAt(n)];return e},t.exports=a},6894:(t,e,s)=>{t.exports=s(6894)},8399:t=>{var e,s,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(s){try{return e.call(null,t,0)}catch(s){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{s="function"==typeof clearTimeout?clearTimeout:n}catch(t){s=n}}();var a,c=[],u=!1,d=-1;function l(){u&&a&&(u=!1,a.length?c=a.concat(c):d=-1,c.length&&h())}function h(){if(!u){var t=o(l);u=!0;for(var e=c.length;e;){for(a=c,c=[];++d<e;)a&&a[d].run();d=-1,e=c.length}a=null,u=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===n||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function f(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)e[s-1]=arguments[s];c.push(new p(t,e)),1!==c.length||u||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5741:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2989)),n=r(s(7771)),o=r(s(300)),a=r(s(1665)),c=r(s(3642)),u=r(s(89)),d=r(s(249)),l=r(s(2230)),h=r(s(9274));class p{constructor(t){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=t,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:n.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(t){return!(!this.stores[t]||!this.ios[this.id]||(this.id=t,0))}exe(t,e){return this[t]&&"function"==typeof this[t]?(this[t](e),!0):!(!this.methods[t]||"function"!=typeof this.methods[t]||(this.methods[t](e),0))}onResponseChAPI(t){const e=(t=>e=>{const s=t(e);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(u.default);this.on(t,e)}offResponseChAPI(t){this.off(t)}getIoParams(t){let e="";return Object.keys(t).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=t[s];e+=`${s}=${encodeURIComponent(r)}&`})),e.replace(/&$/,"")}tune(t){if(!this.use(t.id)){this.id=t.id,this.stores[this.id]=(0,h.default)(),this.stores[this.id].subscribe(this.subscribe);const e=new l.default(t);this.stores[this.id].dispatch({...e,type:"SETUPED_API_STORE"});const s=this.getIoParams(t),r=`${n.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=(0,i.default)(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(t.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(t){const e=t&&t.id?t.id:this.id;return!!this.ios[e]&&(this.ios[e].disconnect(),delete this.ios[e],delete this.stores[e],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:n.default.API_SETUP})}onRequestAPI(){const t=c.default,e=Object.keys(t),s=e.length,r=(t,e)=>(s,r=(()=>{}))=>{const i=this.stores[this.id].getState(),o=n.default.getRequestState(t,i,s),a=n.default.getRequestActionState(t,s),{requestState:c,actionState:u}=e(i,o,a);return this.publicCallbacks[c.type]=r,this.ios[this.id].emit(c.type,c),this.stores[this.id].dispatch(u)};for(let i=0;i<s;i++){const s=e[i],o=s.replace(n.default.API_TO_SERVER_REQUEST,""),a=t[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const t=(t=>e=>{const s=t(e);this.stores[this.id].dispatch(s)})(d.default);this.on(n.default.CATCH_ME_KEY,t)}on(t,e=(()=>{})){this.ios[this.id]._callbacks[`$${t}`]||this.ios[this.id].on(t,e)}off(t){this.ios[this.id]._callbacks[`$${t}`]&&this.ios[this.id].off(t)}subscribe(t){const e=this.stores[this.id].getState(),s=n.default.convertServerToApiIoType(this.id,e.app.actioned);this.exeCallback(e.app.actioned,e),this.webWorker.postMessage(e.app.actioned,{...e,ioType:s})}exeCallback(t,e){const{actionType:s,actionName:r}=n.default.getSequenceActionMap(t);if(r!==n.default.API_BROADCAST_CALLBACK&&s===n.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[r](e,{posts:t,thread:s,uid:i.uid})}if(s===n.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[n.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[n.default.API_BROADCAST_CALLBACK](r,{posts:t,thread:s,uid:i.uid})}}}e.default=p},3642:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771)),n=new(r(s(3365)).default);let o={};Object.keys(i.default.map).forEach((t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,s)=>a[e.type]?a[e.type](t,e,s):{requestState:e,actionState:s}}));const a={post:(t,e,s)=>{const{app:r}=e;return r.isMediaCh&&(r.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},r.inputStampId?Object.keys(n.balances).forEach((s=>{if(n.balances[s]&&t.thread.emotions[s]){const t=n.balances[s](r.inputStampId);t&&t.forEach((t=>{const r=Object.keys(t)[0],i=n.idKeyTypes[r];e.thread.emotions[s]||(e.thread.emotions[s]={}),e.thread.emotions[s][i]||(e.thread.emotions[s][i]=0),e.thread.emotions[s][i]=t[r]}))}})):(s.app={...r},s.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:s}}};e.default=o},89:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return{...t,type:e}}},249:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return{...t,type:e}}},9274:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(665),n=r(s(8267)),o=r(s(9530));e.default=function(t={}){let e=[n.default.updateAction];return(0,i.createStore)(o.default,t,(0,i.applyMiddleware)(...e))}},5406:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1665)),n=r(s(4817));function o(t,e){const{app:s}=t,{storageKey:r}=i.default;if(s.isRootCh){const{postsMulti:e,postsSingle:s}=t}return{state:t,props:e}}function a(t){const{app:e,thread:s,postsTimeline:r}=t,{storageKey:n}=i.default;if(e.isMediaCh){const e=r&&r.length?r.length:0;let s=[],i=[];for(let t=0;t<e;t++)0===r[t].currentTime?s.push(r[t]):i.push(r[t]);t.postsTimeline=s}return t}e.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:s}=t,{rootCh:r}=s,{storageKey:o}=i.default;return s.dispThreadType===n.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:s}=t.app;return{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:s}=t;return s.isMediaCh?{state:t=a(t),props:e}:o(t,e)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},8267:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(5406)),o=r(s(4817)),a=r(s(5232)),c=r(s(5537)),u=r(s(5300));e.default={updateAction:t=>e=>s=>{const r=t.getState();s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&e(s)}};const d={"SERVER_TO_API[EMIT]:tune":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.tuned=e.thread.ch,e.app.detailCh=e.thread.ch,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=o.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,e.thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=o.default.getMediaTypeFromSrc(t)}else e.app.chType=o.default.mediaTagTypeNo;return e},"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>((e={...a.default.getAnyActionPosts(e,t)}).app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.isMediaCh&&(e=n.default.setStoragePostsTimeline(e)),e),"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetTimelineFindId=o.default.defaultOffsetFindId,e.app.offsetMultiFindId=o.default.defaultOffsetFindId,e.app.offsetSingleFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e.app.offsetLogsFindId=o.default.defaultOffsetFindId,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e.posts=new a.default,e.postsMulti=new a.default,e.postsChild=new a.default,e.postsTimeline=new a.default,e.postsSingle=new a.default,e),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>(e.app.tuned=e.thread.ch,e.thread.title=e.thread.serverMetas.title,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[REQUEST]:post":(t,e)=>(e.app.inputStampId=0,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{if(t.thread.ch===e.thread.ch&&e.thread.emotions&&Object.keys(e.thread.emotions).length>0){const s={...e.thread.emotions};e.thread.emotions={...t.thread.emotions},Object.keys(s).forEach((t=>{Object.keys(s[t]).forEach((r=>{e.thread.emotions[t][r]=e.thread.emotions[t][r]+s[t][r]}))})),e.threadDetail={...e.thread}}return e.thread.ch=t.thread.ch,e=a.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,a.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions={...t.threads[e.app.detailCh].emotions},e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread={...t.thread,...e.thread},e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const s=e.thread.ch;e.thread={...t.thread,...e.thread},e.thread.ch=s;const r=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=c.default.getFindTypeFromSrc(r),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.postsChild=[],e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let s=!1,{clientMetas:r}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(r).forEach(((t,n)=>{r[t]&&""!==r[t]&&i[t]!==r[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),s=!0,e.thread.serverMetas[t]=r[t])})),s)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},482:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},1583:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2802));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},5221:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4817));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},6690:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5813));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},9530:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const i=s(665),n=r(s(482)),o=r(s(1583)),a=r(s(5221)),c=r(s(6690)),u=r(s(9202)),d=r(s(7738)),l=r(s(6686)),h=r(s(705)),p=r(s(6706)),f=r(s(4005)),T=r(s(358)),E=r(s(7706)),_=r(s(2543)),m=r(s(5181)),S=r(s(4980)),y=r(s(6086)),g=r(s(6297)),I=r(s(6087)),P=r(s(507));e.reducerFiles={app:a.default,user:P.default,tuneCh:I.default,ranks:_.default,thread:S.default,threads:g.default,threadDetail:y.default,analyze:o.default,bootOption:c.default,setting:m.default,posts:u.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,actioned:n.default},e.default=(0,i.combineReducers)(e.reducerFiles)},9202:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>e.posts?new i.default(e.posts):t},7738:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},6686:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(300)),n=r(s(5232));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let s=[];return t.length+e.postsMulti.length>i.default.findOneLimitCnt?(s=[...e.postsMulti,...t],s.slice(0,i.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},705:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5853));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},6706:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6423));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},4005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3443));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},358:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8059));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},7706:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6301));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},2543:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>{let s=[],r=0;const n=(t,s)=>t.ch===e.app.rootCh||s.ch===e.app.rootCh?0:t.liveCnt<s.liveCnt?1:t.liveCnt>s.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(s=i.default.getDispPosts(e),r=s&&s.length?s.length:0,0===r?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(n);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const s=[],r=e.rank.length;let i=e.rank[0];for(let n=0;n<r;n++){let r=e.rank[n];i=r.updateTime>i.updateTime?r:i,r.ch===t[0].ch&&(r={...r,liveCnt:t[0].liveCnt}),s.push(r)}return s.sort(n),s[0].faicon=i.favicon,s[0].post=i.post,s[0].stampId=i.stampId,s}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},5181:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3871));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},4980:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5537));e.default=(t=new i.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new i.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},6086:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5537));e.default=(t=new i.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},6297:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5300));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},6087:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1960));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new i.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=e;if(s.ch===t.ch)return{...t,liveCnt:s.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const r=e.posts[0];if(r.ch===t.ch)return{...t,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post}}return t}},507:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6548));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},3560:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2802:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=n},4817:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(1960)),o=r(s(5537));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=n.default.defaultFindId,this.offsetSingleFindId=n.default.defaultFindId,this.offsetMultiFindId=n.default.defaultFindId,this.offsetChildFindId=n.default.defaultFindId,this.offsetLogsFindId=n.default.defaultFindId;const s=t.ch?t.ch:"/",r=t.id?t.id:"",c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(s),u=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,d=t.rootCh?t.rootCh:s,l=i.default.isSet(t.isRootCh)?t.isRootCh:d===s,h=t.rootTitle?t.rootTitle:"talkn",p=a.getMediaSrc(t.protocol,s),f=a.getMediaType(p,t),T=t&&t.tuned?t.tuned:"",E=a.getDispThreadType(t,c),_=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,y=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,P=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,A=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,O=t.inputPost?t.inputPost:"",C=!!t.inputStampId&&t.inputStampId,R=t.inputCurrentTime?t.inputCurrentTime:0,b=t.inputSearch?t.inputSearch:"",v=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=!!i.default.isSet(t.isRankDetailMode)&&t.isRankDetailMode,M=t&&t.actioned?t.actioned:"",L=i.default.isSet(t.debug)?t.debug:"";return this.create({id:r,isRootCh:l,isLinkCh:u,isMediaCh:c,rootCh:d,rootTitle:h,chType:f,dispThreadType:E,tuned:T,multistream:_,findType:m,offsetFindId:S,offsetTimelineFindId:y,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:P,offsetLogsFindId:A,inputPost:O,inputStampId:C,inputCurrentTime:R,inputSearch:b,isToggleMultistream:v,isRankDetailMode:D,actioned:M,debug:L})}static get defaultOffsetFindId(){return n.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),s=e.length;let r="html";for(let i=0;i<s;i++){const s=new RegExp(`.${e[i]}$`);if(t.match(s)){r=a.mediaChTagTypes[e[i]];break}}return r}static validInputPost(t){return!!/\\r\\n$|\\n$|\\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(t)?"ONLY NEW LINE":/^\\s+$/g.test(t)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some((e=>{const s=new RegExp(`.${e}/$|.${e}$`);return t.match(s)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},s,r,i=""){let n="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return n=(t=a.getStepDispThreadType({app:t,ranks:e},s,r,i)).dispThreadType,{app:t,stepTo:`${o} to ${n}`}}static getStepDispThreadType({app:t,ranks:e},s={},r,i){const n=t||{};if(n.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return n.dispThreadType=a.dispThreadTypeTimeline,n.offsetFindId=n.offsetTimelineFindId?n.offsetTimelineFindId:a.defaultOffsetFindId,n.isLinkCh="Links"===i||"findMediaCh"===i||"ToMedia"===i,n.isMediaCh=!0,n;if("BackToRootCh"===i&&(n.isLinkCh=!1),"Links"===i&&e.length>0){if(!e.some((t=>t.ch===r||t.ch===r+"/")))return n.offsetFindId=a.defaultOffsetFindId,n.dispThreadType=a.dispThreadTypeChild,n.isLinkCh=!0,n}return n.rootCh===r?n.multistream?n.dispThreadType=a.dispThreadTypeMulti:n.dispThreadType=a.dispThreadTypeSingle:n.dispThreadType=a.dispThreadTypeChild,n}}e.default=a},5813:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((s=>{e[t[s].name]=t[s].value})),e}}e.default=n},367:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=n},1960:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(300));class o extends i.default{constructor(t){super(),this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const e=t?{...o.defaultValues,...t}:o.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:n.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=o},6036:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5232:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4817)),n=r(s(6036)),o=r(s(5853)),a=r(s(6423)),c=r(s(3443));class u{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:s,postsMulti:r,postsSingle:n,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return s;case i.default.dispThreadTypeMulti:return r;case i.default.dispThreadTypeSingle:return n;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:s,posts:r}=t,a=r&&r.length>0;switch(t.postsMulti=new n.default,t.postsSingle=new o.default,t.postsChild=[],t.postsLogs=[],s.dispThreadType){case i.default.dispThreadTypeTimeline:t=u.getAnyActionPostsTimeline(t,r,e,a);break;case i.default.dispThreadTypeMulti:t.postsMulti=a?r:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=a?r:[];break;case i.default.dispThreadTypeChild:t.postsChild=a?r:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=a?r:[]}return t}static getAnyActionPostsTimeline(t,e,s,r){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new a.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new a.default,t.postsTimelineStock=new c.default,r)){const s=e.length;for(let r=0;r<s;r++)0===e[r].currentTime?t.postsTimeline.push(e[r]):t.postsTimelineStock.push(e[r])}return t}}e.default=u},5853:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6423:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8059:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3871:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},s=t&&t.common?t.common:{},r=t&&t.server?t.server:{};return this.create({client:e,common:s,server:r})}}e.default=n},5537:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(7771)),o=r(s(300)),a=r(s(4817));class c extends i.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=n.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=c.getDefaultFavicon(),this.findType=c.findTypeAll,this.title=c.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=c.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=c.isWindowObj(t)?c.constructorFromWindow(t,e):t;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[c.findTypeHtml]:["text/html"],[c.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[c.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const s=!!e.ch&&e.ch,r=c.getCh(e,s);let n={};return n.ch=r,n.chs=["/"],n.hasSlash=!!e.hasslash&&i.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=c.getDefaultFavicon(),n.findType=c.findTypeAll,s?(n.protocol=c.getProtocol(s),n.host=c.getHost(s),n.chs=s.chs&&s.chs.length>0?s.chs:c.getChs(r)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:c.getChs(r),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=c.getFaviconFromWindow(window)),n.title=c.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.emotions={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=c.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=c.getIsSelfCh("",n.ch),n.createTime="",n.updateTime="",n}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const r="/"===t.slice(-1)?t:t+"/";if("/"!==r){const t=r.split("/"),i=t.length;let n="";for(var s=1;s<i;s++)""!==t[s]&&(n+=t[s],n="/"===n.slice(-1)?n:n+"/",n="/"===n.slice(0,1)?n:"/"+n,e.push(n))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):o.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=c.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",t.document,null,2,null).stringValue,s="http://",r="https://",i=location.host;if(e.indexOf(s)||e.indexOf(r)){const t=s+i+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,s,r={}){let i={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return i.isCreate=c.getStatusCreate(s),i.isRequireUpsert=c.getStatusIsRequireUpsert(t,r,i.isCreate),i.isMultistream=c.getStatusIsMultistream(e),i.isToggleMultistream=c.getStatusIsToggleMultistream(e),i.isMediaCh=c.getStatusIsMediaCh(t.ch),i}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,s=!1){if(!s)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,s=new Date,r=s.getFullYear(),i=s.getMonth(),n=s.getDate(),a=s.getHours();return s.getMinutes(),e<new Date(r,i,n,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=c.findTypes[c.findTypeHtml],s=c.findTypes[c.findTypeMusic],r=c.findTypes[c.findTypeVideo];let i;if(t&&""!==t){let n="";t.indexOf(";")>0&&(n=t.split(";")[0]),(e.includes(t)||e.includes(n))&&(i=c.findTypeHtml),(s.includes(t)||s.includes(n))&&(i=c.findTypeMusic),(r.includes(t)||r.includes(n))&&(i=c.findTypeVideo)}return i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=c},5300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=n},6548:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(1960));class o extends i.default{static get defaultOffsetFindId(){return n.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",s=t&&t.utype?t.utype:"",r=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,n=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,c=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,u=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,d=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,l=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:s,tuned:r,multistreamed:i,actioned:n,offsetFindId:a,offsetSingleFindId:c,offsetMultiFindId:u,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=o},2230:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3560)),n=r(s(2802)),o=r(s(4817)),a=r(s(367)),c=r(s(5232)),u=r(s(6423)),d=r(s(3443)),l=r(s(3364)),h=r(s(5537)),p=r(s(6548));class f{constructor(t,e={}){this.bootOption=t,this.ranks=new l.default,this.menuLogs=new a.default(e.menuLogs),this.posts=new c.default,this.postsMulti=new c.default,this.postsSingle=new c.default,this.postsChild=new c.default,this.postsTimeline=new u.default,this.postsTimelineStock=new d.default,this.postsLogs=new c.default,this.analyze=new n.default,this.thread=new h.default(this.bootOption,e.thread),this.threadDetail=new h.default(this.bootOption,e.thread),this.app=new o.default(f.getAppParams(this.thread,this.bootOption,e)),this.user=new p.default(f.getUserParams(this,e)),this.actionLog=new i.default}static getAppParams(t,e,s){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=f},4039:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1223)),n=r(s(7771)),o=r(s(5741));class a{constructor(t){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=t,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(t,e={},s){const r={id:this.id,type:i.default.WSAPI_TO_CLIENT_TYPE,ioType:n.default.API_SETUP,method:t,params:e,methodBack:s};this.worker.postMessage(r)}onMessage(t){const{id:e,type:s,ioType:r,method:n,params:o}=t.data;s===i.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(n,o)}onMessageError(t){console.warn(t)}}e.default=a,new a(self)},1223:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const i=r(s(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(i.default.API_TO_SERVER_REQUEST)?t.replace(i.default.API_TO_SERVER_REQUEST,i.default.API_TO_CLIENT_REQUEST):0===t.indexOf(i.default.SERVER_TO_API_EMIT)?t.replace(i.default.SERVER_TO_API_EMIT,i.default.API_TO_CLIENT_EMIT):0===t.indexOf(i.default.SERVER_TO_API_BROADCAST)?t.replace(i.default.SERVER_TO_API_BROADCAST,i.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==s.getType(t)&&"Null"!==s.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return s.getType(t),Object.keys(t).forEach((r=>{let i,n,o=null,a=!1,c=!1,u=()=>{},d=null;if("Object"===s.getType(t[r])){i=t[r];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,c=i.isAcceptBlank?i.isAcceptBlank:c,o=!e&&i.def?i.def:o,d=e||!i.value&&""!==i.value?i:i.value,d=e&&o?o:d,n=s.getType(d),u=i.valid?i.valid:u}else d=t[r],o=d,a=a,c=c,n=s.getType(d),u=u;const l=t=>{let i=null;const o=`${e}.${r}`,l=d,h=n,p=t,f=s.getType(t);return f!==n&&(i=`SCHEMA_TYPE : ${o} [validType: ${n}][paramsType: ${f}]`),a&&null===t&&(i=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),c&&""===t&&(i=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(u)&&u(t)&&(i=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:i}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:t=>{const e=l(d);if(null===_)return d=t,{...this,[r]:d};throw this.validWarn(e),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(t,e){try{const s=this[t];if(void 0===s)return!0;if(null===s)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:r}=this[t]=e;return!r&&(this[t]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${s}`}}merge(t={},e=!0){try{const r=s.getType(t),i=Object.keys(t);if(i.length>0){let s={...this};return i.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?s[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===r?(s=Object.values(s),e?new this.constructor(s):s):e?new this.constructor(s):s}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${s.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${s.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((s=>{let r=t[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?e[s]=r.default:e[s]=r})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=s},7771:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(n.METHOD_COLON),s=e[0].split("[")[0];let r;return r=e[0].indexOf(`[${n.API_REQUEST_TYPE}]`)>0?n.API_REQUEST_TYPE:e[0].indexOf(`[${n.API_RESPONSE_TYPE_EMIT}]`)>0?n.API_RESPONSE_TYPE_EMIT:n.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return n.map[t]&&(e.emit=!(Object.keys(n.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(n.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_REQUEST_TYPE}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_REQUEST_TYPE:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_BROADCAST}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_EMIT}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_EMIT:n.API_SETUP}static convertExtToClientActionType(t,e){return n.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(n.API_TO_SERVER_REQUEST)?t.replace(n.API_TO_SERVER_REQUEST,n.API_TO_CLIENT_REQUEST):0===t.indexOf(n.SERVER_TO_API_EMIT)?t.replace(n.SERVER_TO_API_EMIT,n.API_TO_CLIENT_EMIT):0===t.indexOf(n.SERVER_TO_API_BROADCAST)?t.replace(n.SERVER_TO_API_BROADCAST,n.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,s){const r=t.replace(n.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=n.map[r];let c={[n.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((t=>{c[t]||(c[t]={}),a[t].forEach((r=>{if(!c[t][r]){let n=e[t][r];s&&s[t]&&i.default.isSet(s[t][r])&&(n=s[t][r]),c[t][r]=n}}))})),Object.keys(o).forEach((t=>{c[t]||(c[t]={}),o[t].forEach((e=>{c[t][e]||(c[t][e]=s)}))})),c}static getResponseState(t,e,s){const r=e.type,i=n.map[r][`response${t}State`];let o={[n.REDUX_ACTION_KEY]:r};return Object.keys(i).forEach((t=>{if(!s[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const r=i[t];let n=s[t];switch(n.constructor.name){case"model":n=n.toJSON(),delete n._id,delete n.__v}"*"===r?o={...o,[t]:n}:r.forEach((r=>{if(void 0===s[t][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${r}`;o={...o,[t]:{...o[t],[r]:s[t][r]}}}))}})),o}static getRequestActionState(t,e=null,s=null){return"string"==typeof e&&null===s?{type:t}:"object"==typeof e&&"object"==typeof s?{...e,...s,type:t}:"string"==typeof e&&"object"==typeof s?{...s,type:t}:{...e,type:t}}}e.default=n},300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6894)),n=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:c,PRODUCTION_DOMAIN:u,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=i.default.hasOwnProperty("hostname")?i.default.hostname():"localhost",f=function(t){if("browser"===n.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===o.default.PORTS.DEVELOPMENT_CLIENT||t===o.default.PORTS.DEVELOPMENT_API||t===o.default.PORTS.DEVELOPMENT_TOP?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return t.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},E=f===c,_=f===a?u:d,m=`${l.WWW}.${_}`,S=`${l.API}.${_}`,y=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${S}/v1`,g=E?`${_}:${h.DEVELOPMENT_CLIENT}/${T.client}`:`${l.CLIENT}.${_}`,I=`${l.DESC}.${_}`,P=`${l.PORTAL}.${_}`,A=`${l.ASSETS}.${_}`,O=`${A}/img/`,C={domain:_,env:f,files:T,hostName:p,apiURL:S,apiAccessURL:y,wwwURL:m,descURL:I,portalURL:P,clientURL:g,assetsURL:A,autoURL:`${l.AUTO}.${_}`,extURL:`${l.EXT}.${_}`,ownURL:`${l.OWN}.${_}`,newsURL:`${l.NEWS}.${_}`,bannerURL:`${l.BANNER}.${_}`,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:O,assetsIconPath:`${A}/icon/`,assetsJsPath:`${A}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${O}talkn_logo_html.png`,Music:`//${O}talkn_logo_music.png`,Video:`//${O}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};e.default={...C}},1665:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8399)),n={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_CLIENT:8080,DEVELOPMENT_API:8001,DEVELOPMENT_TOP:8e3,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",TOP:"TOP"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=n},3365:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1025));class n{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(n.inputs).forEach((t=>{n.inputs[t].forEach((e=>{this.belongCoverTypes[e]=t}))})),Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(t);const e=n.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL})),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=n.defaultModelKey,e=0,s=!0){let r=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const s=o[t],n=i[s];if(s>e)break;r=n}return s?r+1:r}static get inputs(){return{[n.TYPES.LIKE.LABEL]:[1,2,3,4,5],[n.TYPES.MONEY.LABEL]:[100],[n.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[n.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[n.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[n.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[n.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[n.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[n.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[n.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=n},2703:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},6663:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},3005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},1025:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2703)),n=r(s(6663)),o=r(s(3005));e.default={Plain:i.default,Russell:n.default,RussellSimple:o.default}},2989:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.io=e.Socket=e.Manager=e.protocol=void 0;const r=s(4078),i=s(6412),n=s(4510)("socket.io-client");t.exports=e=a;const o=e.managers={};function a(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const s=r.url(t,e.path||"/socket.io"),a=s.source,c=s.id,u=s.path,d=o[c]&&u in o[c].nsps;let l;return e.forceNew||e["force new connection"]||!1===e.multiplex||d?(n("ignoring socket cache for %s",a),l=new i.Manager(a,e)):(o[c]||(n("new io instance for %s",a),o[c]=new i.Manager(a,e)),l=o[c]),s.query&&!e.query&&(e.query=s.queryKey),l.socket(s.path,e)}e.io=a;var c=s(9565);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return c.protocol}}),e.connect=a;var u=s(6412);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return u.Manager}});var d=s(9088);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return d.Socket}}),e.default=a},6412:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const r=s(1072),i=s(9088),n=s(9565),o=s(3030),a=s(5198),c=s(6437),u=s(4510)("socket.io-client:manager");class d extends c.StrictEventEmitter{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new a({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const s=e.parser||n;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=o.on(e,"open",(function(){s.onopen(),t&&t()})),n=o.on(e,"error",(e=>{u("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;u("connect attempt will timeout after %d",t),0===t&&i();const s=setTimeout((()=>{u("connect attempt timed out after %d",t),i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(n),this}connect(t){return this.open(t)}onopen(){u("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(o.on(t,"ping",this.onping.bind(this)),o.on(t,"data",this.ondata.bind(this)),o.on(t,"error",this.onerror.bind(this)),o.on(t,"close",this.onclose.bind(this)),o.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){this.emitReserved("packet",t)}onerror(t){u("error",t),this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s||(s=new i.Socket(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void u("socket %s is still active, skipping close",t);this._close()}_packet(t){u("writing packet %j",t);const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){u("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const s=setTimeout((()=>{t.skipReconnect||(u("attempting reconnect"),this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(u("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):(u("reconnect success"),t.onreconnect())})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}e.Manager=d},3030:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,s){return t.on(e,s),function(){t.off(e,s)}}},9088:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const r=s(9565),i=s(3030),n=s(6437),o=s(4510)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends n.StrictEventEmitter{constructor(t,e,s){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[i.on(t,"open",this.onopen.bind(this)),i.on(t,"packet",this.onpacket.bind(this)),i.on(t,"error",this.onerror.bind(this)),i.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(a.hasOwnProperty(t))throw new Error(\'"\'+t+\'" is a reserved event name\');e.unshift(t);const s={type:r.PacketType.EVENT,data:e,options:{}};s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(o("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),s.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(s):this.sendBuffer.push(s):o("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){o("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:r.PacketType.CONNECT,data:t})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t){o("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case r.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(t);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(t);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];o("emitting event %j",e),null!=t.id&&(o("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,o("sending ack %j",i),e.packet({type:r.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(o("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):o("bad ack %s",t.id)}onconnect(t){o("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){o("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(o("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}e.Socket=c},6437:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StrictEventEmitter=void 0;const r=s(1778);e.StrictEventEmitter=class extends r{on(t,e){return super.on(t,e),this}once(t,e){return super.once(t,e),this}emit(t,...e){return super.emit(t,...e),this}emitReserved(t,...e){return super.emit(t,...e),this}listeners(t){return super.listeners(t)}}},4078:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const r=s(7657),i=s(4510)("socket.io-client:url");e.url=function(t,e="",s){let n=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\\/\\//.test(t)||(i("protocol-less url %s",t),t=void 0!==s?s.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port+e,n.href=n.protocol+"://"+o+(s&&s.port===n.port?"":":"+n.port),n}}},e={};function s(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r].call(n.exports,n,n.exports,s),n.exports}s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(4039)})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,',"Worker",void 0,i.p+"ws.api.worker.js")}},477:t=>{"use strict";t.exports=function(t,e,i,n){var l=self||window;try{try{var s;try{s=new l.Blob([t])}catch(e){(s=new(l.BlobBuilder||l.WebKitBlobBuilder||l.MozBlobBuilder||l.MSBlobBuilder)).append(t),s=s.getBlob()}var a=l.URL||l.webkitURL,c=a.createObjectURL(s),g=new l[e](c,i);return a.revokeObjectURL(c),g}catch(n){return new l[e]("data:application/javascript,".concat(encodeURIComponent(t)),i)}}catch(t){if(!n)throw Error("Inline worker is not supported");return new l[e](n,i)}}}},e={};function i(n){var l=e[n];if(void 0!==l)return l.exports;var s=e[n]={id:n,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i(2417)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,