/*! For license information please see talkn.top.js.LICENSE.txt */
(()=>{var t={665:(t,e,i)=>{"use strict";function l(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function n(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,l)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?n(Object(i),!0).forEach((function(e){l(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}i.r(e),i.d(e,{__DO_NOT_USE__ActionTypes:()=>I,applyMiddleware:()=>C,bindActionCreators:()=>F,combineReducers:()=>B,compose:()=>r,createStore:()=>d});var c="function"==typeof Symbol&&Symbol.observable||"@@observable",g=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function d(t,e,i){var l;if("function"==typeof e&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof e&&void 0===i&&(i=e,e=void 0),void 0!==i){if("function"!=typeof i)throw new Error(a(1));return i(d)(t,e)}if("function"!=typeof t)throw new Error(a(2));var n=t,s=e,g=[],B=g,o=!1;function F(){B===g&&(B=g.slice())}function r(){if(o)throw new Error(a(3));return s}function C(t){if("function"!=typeof t)throw new Error(a(4));if(o)throw new Error(a(5));var e=!0;return F(),B.push(t),function(){if(e){if(o)throw new Error(a(6));e=!1,F();var i=B.indexOf(t);B.splice(i,1),g=null}}}function U(t){if(!u(t))throw new Error(a(7));if(void 0===t.type)throw new Error(a(8));if(o)throw new Error(a(9));try{o=!0,s=n(s,t)}finally{o=!1}for(var e=g=B,i=0;i<e.length;i++)(0,e[i])();return t}function Q(t){if("function"!=typeof t)throw new Error(a(10));n=t,U({type:I.REPLACE})}function b(){var t,e=C;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(a(11));function i(){t.next&&t.next(r())}return i(),{unsubscribe:e(i)}}})[c]=function(){return this},t}return U({type:I.INIT}),(l={dispatch:U,subscribe:C,getState:r,replaceReducer:Q})[c]=b,l}function B(t){for(var e=Object.keys(t),i={},l=0;l<e.length;l++){var n=e[l];"function"==typeof t[n]&&(i[n]=t[n])}var s,c=Object.keys(i);try{!function(t){Object.keys(t).forEach((function(e){var i=t[e];if(void 0===i(void 0,{type:I.INIT}))throw new Error(a(12));if(void 0===i(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(i)}catch(t){s=t}return function(t,e){if(void 0===t&&(t={}),s)throw s;for(var l=!1,n={},g=0;g<c.length;g++){var I=c[g],u=i[I],d=t[I],B=u(d,e);if(void 0===B)throw e&&e.type,new Error(a(14));n[I]=B,l=l||B!==d}return(l=l||c.length!==Object.keys(t).length)?n:t}}function o(t,e){return function(){return e(t.apply(this,arguments))}}function F(t,e){if("function"==typeof t)return o(t,e);if("object"!=typeof t||null===t)throw new Error(a(16));var i={};for(var l in t){var n=t[l];"function"==typeof n&&(i[l]=o(n,e))}return i}function r(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(){var i=t.apply(void 0,arguments),l=function(){throw new Error(a(15))},n={getState:i.getState,dispatch:function(){return l.apply(void 0,arguments)}},c=e.map((function(t){return t(n)}));return l=r.apply(void 0,c)(i.dispatch),s(s({},i),{},{dispatch:l})}}}},5303:t=>{"use strict";var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var l={};return"abcdefghijklmnopqrst".split("").forEach((function(t){l[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},l)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var a,c,g=n(t),I=1;I<arguments.length;I++){for(var u in a=Object(arguments[I]))i.call(a,u)&&(g[u]=a[u]);if(e){c=e(a);for(var d=0;d<c.length;d++)l.call(a,c[d])&&(g[c[d]]=a[c[d]])}}return g}},9573:t=>{var e,i,l=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===n||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(i){try{return e.call(null,t,0)}catch(i){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:n}catch(t){e=n}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,g=[],I=!1,u=-1;function d(){I&&c&&(I=!1,c.length?g=c.concat(g):u=-1,g.length&&B())}function B(){if(!I){var t=a(d);I=!0;for(var e=g.length;e;){for(c=g,g=[];++u<e;)c&&c[u].run();u=-1,e=g.length}c=null,I=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function o(t,e){this.fun=t,this.array=e}function F(){}l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];g.push(new o(t,e)),1!==g.length||I||a(B)},o.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=F,l.addListener=F,l.once=F,l.off=F,l.removeListener=F,l.removeAllListeners=F,l.emit=F,l.prependListener=F,l.prependOnceListener=F,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},9777:(t,e,i)=>{"use strict";var l=i(5303),n=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,g=60112;e.Suspense=60113;var I=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;n=d("react.element"),s=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),c=d("react.context"),g=d("react.forward_ref"),e.Suspense=d("react.suspense"),I=d("react.memo"),u=d("react.lazy")}var B="function"==typeof Symbol&&Symbol.iterator;function o(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var F={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},r={};function C(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}function U(){}function Q(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}C.prototype.isReactComponent={},C.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(o(85));this.updater.enqueueSetState(this,t,e,"setState")},C.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},U.prototype=C.prototype;var b=Q.prototype=new U;b.constructor=Q,l(b,C.prototype),b.isPureReactComponent=!0;var V={current:null},A=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function p(t,e,i){var l,s={},a=null,c=null;if(null!=e)for(l in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)A.call(e,l)&&!x.hasOwnProperty(l)&&(s[l]=e[l]);var g=arguments.length-2;if(1===g)s.children=i;else if(1<g){for(var I=Array(g),u=0;u<g;u++)I[u]=arguments[u+2];s.children=I}if(t&&t.defaultProps)for(l in g=t.defaultProps)void 0===s[l]&&(s[l]=g[l]);return{$$typeof:n,type:t,key:a,ref:c,props:s,_owner:V.current}}function G(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var R=/\/+/g;function L(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function h(t,e,i,l,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var g=!1;if(null===t)g=!0;else switch(c){case"string":case"number":g=!0;break;case"object":switch(t.$$typeof){case n:case s:g=!0}}if(g)return a=a(g=t),t=""===l?"."+L(g,0):l,Array.isArray(a)?(i="",null!=t&&(i=t.replace(R,"$&/")+"/"),h(a,e,i,"",(function(t){return t}))):null!=a&&(G(a)&&(a=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||g&&g.key===a.key?"":(""+a.key).replace(R,"$&/")+"/")+t)),e.push(a)),1;if(g=0,l=""===l?".":l+":",Array.isArray(t))for(var I=0;I<t.length;I++){var u=l+L(c=t[I],I);g+=h(c,e,i,u,a)}else if("function"==typeof(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}(t)))for(t=u.call(t),I=0;!(c=t.next()).done;)g+=h(c=c.value,e,i,u=l+L(c,I++),a);else if("object"===c)throw e=""+t,Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return g}function m(t,e,i){if(null==t)return t;var l=[],n=0;return h(t,l,"","",(function(t){return e.call(i,t,n++)})),l}function S(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var Z={current:null};function y(){var t=Z.current;if(null===t)throw Error(o(321));return t}var X={ReactCurrentDispatcher:Z,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:V,IsSomeRendererActing:{current:!1},assign:l};e.Children={map:m,forEach:function(t,e,i){m(t,(function(){e.apply(this,arguments)}),i)},count:function(t){var e=0;return m(t,(function(){e++})),e},toArray:function(t){return m(t,(function(t){return t}))||[]},only:function(t){if(!G(t))throw Error(o(143));return t}},e.Component=C,e.PureComponent=Q,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=X,e.cloneElement=function(t,e,i){if(null==t)throw Error(o(267,t));var s=l({},t.props),a=t.key,c=t.ref,g=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,g=V.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var I=t.type.defaultProps;for(u in e)A.call(e,u)&&!x.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==I?I[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=i;else if(1<u){I=Array(u);for(var d=0;d<u;d++)I[d]=arguments[d+2];s.children=I}return{$$typeof:n,type:t.type,key:a,ref:c,props:s,_owner:g}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=p,e.createFactory=function(t){var e=p.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:g,render:t}},e.isValidElement=G,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:S}},e.memo=function(t,e){return{$$typeof:I,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return y().useCallback(t,e)},e.useContext=function(t,e){return y().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return y().useEffect(t,e)},e.useImperativeHandle=function(t,e,i){return y().useImperativeHandle(t,e,i)},e.useLayoutEffect=function(t,e){return y().useLayoutEffect(t,e)},e.useMemo=function(t,e){return y().useMemo(t,e)},e.useReducer=function(t,e,i){return y().useReducer(t,e,i)},e.useRef=function(t){return y().useRef(t)},e.useState=function(t){return y().useState(t)},e.version="17.0.2"},4065:(t,e,i)=>{"use strict";t.exports=i(9777)},831:(t,e,i)=>{"use strict";function l(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function n(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,l)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?n(Object(i),!0).forEach((function(e){l(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}i.r(e),i.d(e,{__DO_NOT_USE__ActionTypes:()=>I,applyMiddleware:()=>C,bindActionCreators:()=>F,combineReducers:()=>B,compose:()=>r,createStore:()=>d});var c="function"==typeof Symbol&&Symbol.observable||"@@observable",g=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function d(t,e,i){var l;if("function"==typeof e&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof e&&void 0===i&&(i=e,e=void 0),void 0!==i){if("function"!=typeof i)throw new Error(a(1));return i(d)(t,e)}if("function"!=typeof t)throw new Error(a(2));var n=t,s=e,g=[],B=g,o=!1;function F(){B===g&&(B=g.slice())}function r(){if(o)throw new Error(a(3));return s}function C(t){if("function"!=typeof t)throw new Error(a(4));if(o)throw new Error(a(5));var e=!0;return F(),B.push(t),function(){if(e){if(o)throw new Error(a(6));e=!1,F();var i=B.indexOf(t);B.splice(i,1),g=null}}}function U(t){if(!u(t))throw new Error(a(7));if(void 0===t.type)throw new Error(a(8));if(o)throw new Error(a(9));try{o=!0,s=n(s,t)}finally{o=!1}for(var e=g=B,i=0;i<e.length;i++)(0,e[i])();return t}function Q(t){if("function"!=typeof t)throw new Error(a(10));n=t,U({type:I.REPLACE})}function b(){var t,e=C;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(a(11));function i(){t.next&&t.next(r())}return i(),{unsubscribe:e(i)}}})[c]=function(){return this},t}return U({type:I.INIT}),(l={dispatch:U,subscribe:C,getState:r,replaceReducer:Q})[c]=b,l}function B(t){for(var e=Object.keys(t),i={},l=0;l<e.length;l++){var n=e[l];"function"==typeof t[n]&&(i[n]=t[n])}var s,c=Object.keys(i);try{!function(t){Object.keys(t).forEach((function(e){var i=t[e];if(void 0===i(void 0,{type:I.INIT}))throw new Error(a(12));if(void 0===i(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(i)}catch(t){s=t}return function(t,e){if(void 0===t&&(t={}),s)throw s;for(var l=!1,n={},g=0;g<c.length;g++){var I=c[g],u=i[I],d=t[I],B=u(d,e);if(void 0===B)throw e&&e.type,new Error(a(14));n[I]=B,l=l||B!==d}return(l=l||c.length!==Object.keys(t).length)?n:t}}function o(t,e){return function(){return e(t.apply(this,arguments))}}function F(t,e){if("function"==typeof t)return o(t,e);if("object"!=typeof t||null===t)throw new Error(a(16));var i={};for(var l in t){var n=t[l];"function"==typeof n&&(i[l]=o(n,e))}return i}function r(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function C(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return function(){var i=t.apply(void 0,arguments),l=function(){throw new Error(a(15))},n={getState:i.getState,dispatch:function(){return l.apply(void 0,arguments)}},c=e.map((function(t){return t(n)}));return l=r.apply(void 0,c)(i.dispatch),s(s({},i),{},{dispatch:l})}}}},6894:(t,e,i)=>{t.exports=i(6894)},8399:t=>{var e,i,l=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===n||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(i){try{return e.call(null,t,0)}catch(i){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:n}catch(t){e=n}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,g=[],I=!1,u=-1;function d(){I&&c&&(I=!1,c.length?g=c.concat(g):u=-1,g.length&&B())}function B(){if(!I){var t=a(d);I=!0;for(var e=g.length;e;){for(c=g,g=[];++u<e;)c&&c[u].run();u=-1,e=g.length}c=null,I=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function o(t,e){this.fun=t,this.array=e}function F(){}l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];g.push(new o(t,e)),1!==g.length||I||a(B)},o.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=F,l.addListener=F,l.once=F,l.off=F,l.removeListener=F,l.removeAllListeners=F,l.emit=F,l.prependListener=F,l.prependOnceListener=F,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},8622:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});class l{get mediaSecondInterval(){return 200}get currentTime(){return this.file?Math.floor(10*this.file.currentTime)/10:0}static get STATUS_SEARCH(){return"SEARCH"}static get STATUS_STANBY(){return"STANBY"}static get STATUS_PLAY(){return"PLAY"}static get STATUS_ENDED(){return"ENDED"}static get STATUS_STOP(){return"STOP"}static get PORTAL_KEY(){return"PORTAL"}constructor(){this.init=this.init.bind(this),this.onError=this.onError.bind(this),this.onMessage=this.onMessage.bind(this),this.postMessage=this.postMessage.bind(this),this.setClientParams=this.setClientParams.bind(this),this.setRelationElms=this.setRelationElms.bind(this),this.searching=this.searching.bind(this),this.handleEvents=this.handleEvents.bind(this),this.play=this.play.bind(this),this.pause=this.pause.bind(this),this.ended=this.ended.bind(this),this.log=this.log.bind(this),this.init(),this.setRelationElms(),this.listenMessage()}listenMessage(){window.addEventListener("message",this.onMessage),window.addEventListener("messageerror",this.onError)}setStatus(t,e){this.status=t,this.log("SET STATUS "+e)}init(){this.ch=null,this.setStatus(l.STATUS_STANBY),this.iframes={},this.audios=[],this.videos=[],this.handleEventSrc=[],this.file=null,this.searchingIds={},this.maxSearchingCnt=30,this.playIntervalId=null,this.searchingCnt=0,this.isLog=!1,window.removeEventListener("message",this.onMessage),window.removeEventListener("messageerror",this.onError),Object.keys(this.searchingIds).forEach((t=>{clearInterval(this.searchingIds[t])})),clearInterval(this.playIntervalId)}setRelationElms(t){0===Object.keys(this.iframes).length&&(t===l.PORTAL_KEY?this.iframes[t]={dom:window,params:{id:"",ch:"",href:"",audios:[],videos:[]}}:window.document.querySelectorAll(".talknIframes").forEach((t=>{if(!t.id)throw"Error: Please set iframe id.";this.iframes[t.id]={dom:t,params:{id:"",ch:"",href:"",audios:[],videos:[]}}}))),0===this.videos.length&&(this.videos=window.document.querySelectorAll("video")),0===this.audios.length&&(this.audios=window.document.querySelectorAll("audio"))}setClientParams(t){t&&t.id&&(this.iframes[t.id].params=t)}onMessage(t){if(t.data&&t.data.type&&"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"===t.data.type){const{method:e,params:i}=t.data;this.file&&this.file[e]&&"function"==typeof this.file[e]?this.file[e]():this[e]&&"function"==typeof this[e]&&(this.setRelationElms(i.id),this.setClientParams(i),this[e](i.id))}}onError(t){console.warn(t)}postMessage(){Object.keys(this.iframes).forEach((t=>{const e=this.iframes[t].dom,i=this.iframes[t].params.href,n={ch:this.ch,status:this.status.toLowerCase(),currentTime:this.currentTime};(t===l.PORTAL_KEY?window:e.contentWindow).postMessage({type:"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE",params:n},i)}))}searching(t){if(!t)return!1;this.setStatus(l.STATUS_SEARCH,`start searching ${t}`),this.searchingCnt=0,this.searchingId=null,this.playIntervalId=null;const e=e=>{let i=!1;return this[e].forEach((l=>{i||this.iframes[t].params[e].forEach((t=>{i||l.src.indexOf(t.src)>=0&&(this.handleEventSrc.includes(l.src)||(this.handleEventSrc.push(l.src),this.handleEvents(l),i=!0))}))})),i};this.searchingIds[t]=setInterval((()=>{this.setRelationElms(t);const i=Boolean(this.iframes[t].params.audios.length),n=Boolean(this.iframes[t].params.videos.length);let s=!1;this.searchingCnt<this.maxSearchingCnt?(this.videos.length>0&&n&&(s=e("videos"),s&&this.setStatus(l.STATUS_STANBY,`searched video ${t}`)),this.audios.length>0&&i&&(s=e("audios"),s&&this.setStatus(l.STATUS_STANBY,`searched audio ${t}`))):(clearInterval(this.searchingIds[t]),this.setStatus(l.STATUS_ENDED,`search to ended ${t}`)),this.searchingCnt++}),l.mediaSecondInterval)}handleEvents(t){t.addEventListener("play",this.play),t.addEventListener("pause",this.pause),t.addEventListener("ended",this.ended)}play(t){this.file=t.srcElement,this.ch=this.file.currentSrc.replace("http:/","").replace("https:/","")+"/",this.setStatus(l.STATUS_PLAY,"play"),this.playIntervalId=setInterval((()=>{this.postMessage()}),this.mediaSecondInterval)}pause(t){this.status!==l.STATUS_STANBY&&(this.setStatus(l.STATUS_STANBY,"pause"),clearInterval(this.playIntervalId),this.postMessage())}ended(t){this.setStatus(l.STATUS_ENDED,"ended"),clearInterval(this.playIntervalId),this.postMessage(),Object.keys(this.searchingIds).forEach((t=>{clearInterval(this.searchingIds[t])}))}log(t,e){this.isLog&&console.log(`@@@@@@@@@@@ ${t} ${this.status} [${e}] ch: ${this.ch} time: ${this.pointerTime} @@@`)}}},9444:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"05ce4977c2c51d72e87d4dc0ae3d779a.png"},4425:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"cee8cd6d71d2b2dabe527de2df785d9d.png"},685:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"d9f0133107825a266ef82507b592c9ae.png"},5069:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"f0f1aafafdd2ab70a86acec8b1c5f2d7.png"},6631:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"a4f29311070cd37b8a91c1539eed5abd.png"},3673:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"a92b5fd114be2c8b2d8f28ca2473ed67.png"},3152:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"923c9d22dde7fee58770a0695efdedb9.png"},3588:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"e87f52c32b39bd6523508349a5d3824d.png"},5328:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"9667275a5c27c650a4351efe2492b01c.png"},7873:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"ff4ee0ae2f88a8a770648b75c1a3f41c.png"},1262:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"d4c35ba478524fdb720752bb2922c423.png"},1635:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"f47d909586b59fa3ab7a400ca22ed6ed.png"},4697:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"3468e0add7c8cc887a7159c3e77f4c11.png"},2721:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"80fc75d23b2f70b54b13c120d065067f.png"},5474:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"b297ee5a80057cb3358b55bd49ae2a99.png"},4726:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});const l=i.p+"b0e469fdf98fc87b355ddbf12905baff.png"},8679:(t,e,i)=>{"use strict";var l=i(9864),n={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},s={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function g(t){return l.isMemo(t)?a:c[t.$$typeof]||n}c[l.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[l.Memo]=a;var I=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,B=Object.getOwnPropertyDescriptor,o=Object.getPrototypeOf,F=Object.prototype;t.exports=function t(e,i,l){if("string"!=typeof i){if(F){var n=o(i);n&&n!==F&&t(e,n,l)}var a=u(i);d&&(a=a.concat(d(i)));for(var c=g(e),r=g(i),C=0;C<a.length;++C){var U=a[C];if(!(s[U]||l&&l[U]||r&&r[U]||c&&c[U])){var Q=B(i,U);try{I(e,U,Q)}catch(t){}}}}return e}},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var l={};return"abcdefghijklmnopqrst".split("").forEach((function(t){l[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},l)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var a,c,g=n(t),I=1;I<arguments.length;I++){for(var u in a=Object(arguments[I]))i.call(a,u)&&(g[u]=a[u]);if(e){c=e(a);for(var d=0;d<c.length;d++)l.call(a,c[d])&&(g[c[d]]=a[c[d]])}}return g}},2703:(t,e,i)=>{"use strict";var l=i(414);function n(){}function s(){}s.resetWarningCache=n,t.exports=function(){function t(t,e,i,n,s,a){if(a!==l){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function e(){return t}t.isRequired=t;var i={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:s,resetWarningCache:n};return i.PropTypes=i,i}},5697:(t,e,i)=>{t.exports=i(2703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(t,e,i)=>{"use strict";var l=i(7294),n=i(7418),s=i(3840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!l)throw Error(a(227));var c=new Set,g={};function I(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(g[t]=e,t=0;t<e.length;t++)c.add(e[t])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),B=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,o=Object.prototype.hasOwnProperty,F={},r={};function C(t,e,i,l,n,s,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=l,this.attributeNamespace=n,this.mustUseProperty=i,this.propertyName=t,this.type=e,this.sanitizeURL=s,this.removeEmptyString=a}var U={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){U[t]=new C(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];U[e]=new C(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){U[t]=new C(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){U[t]=new C(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){U[t]=new C(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){U[t]=new C(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){U[t]=new C(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){U[t]=new C(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){U[t]=new C(t,5,!1,t.toLowerCase(),null,!1,!1)}));var Q=/[\-:]([a-z])/g;function b(t){return t[1].toUpperCase()}function V(t,e,i,l){var n=U.hasOwnProperty(e)?U[e]:null;(null!==n?0===n.type:!l&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,i,l){if(null==e||function(t,e,i,l){if(null!==i&&0===i.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!l&&(null!==i?!i.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,i,l))return!0;if(l)return!1;if(null!==i)switch(i.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,i,n,l)&&(i=null),l||null===n?function(t){return!!o.call(r,t)||!o.call(F,t)&&(B.test(t)?r[t]=!0:(F[t]=!0,!1))}(e)&&(null===i?t.removeAttribute(e):t.setAttribute(e,""+i)):n.mustUseProperty?t[n.propertyName]=null===i?3!==n.type&&"":i:(e=n.attributeName,l=n.attributeNamespace,null===i?t.removeAttribute(e):(i=3===(n=n.type)||4===n&&!0===i?"":""+i,l?t.setAttributeNS(l,e,i):t.setAttribute(e,i))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(Q,b);U[e]=new C(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){U[t]=new C(t,1,!1,t.toLowerCase(),null,!1,!1)})),U.xlinkHref=new C("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){U[t]=new C(t,1,!1,t.toLowerCase(),null,!0,!0)}));var A=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,p=60106,G=60107,R=60108,L=60114,h=60109,m=60110,S=60112,Z=60113,y=60120,X=60115,E=60116,f=60121,W=60128,N=60129,T=60130,Y=60131;if("function"==typeof Symbol&&Symbol.for){var J=Symbol.for;x=J("react.element"),p=J("react.portal"),G=J("react.fragment"),R=J("react.strict_mode"),L=J("react.profiler"),h=J("react.provider"),m=J("react.context"),S=J("react.forward_ref"),Z=J("react.suspense"),y=J("react.suspense_list"),X=J("react.memo"),E=J("react.lazy"),f=J("react.block"),J("react.scope"),W=J("react.opaque.id"),N=J("react.debug_trace_mode"),T=J("react.offscreen"),Y=J("react.legacy_hidden")}var H,k="function"==typeof Symbol&&Symbol.iterator;function v(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=k&&t[k]||t["@@iterator"])?t:null}function w(t){if(void 0===H)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);H=e&&e[1]||""}return"\n"+H+t}var M=!1;function D(t,e){if(!t||M)return"";M=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var l=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){l=t}t.call(e.prototype)}else{try{throw Error()}catch(t){l=t}t()}}catch(t){if(t&&l&&"string"==typeof t.stack){for(var n=t.stack.split("\n"),s=l.stack.split("\n"),a=n.length-1,c=s.length-1;1<=a&&0<=c&&n[a]!==s[c];)c--;for(;1<=a&&0<=c;a--,c--)if(n[a]!==s[c]){if(1!==a||1!==c)do{if(a--,0>--c||n[a]!==s[c])return"\n"+n[a].replace(" at new "," at ")}while(1<=a&&0<=c);break}}}finally{M=!1,Error.prepareStackTrace=i}return(t=t?t.displayName||t.name:"")?w(t):""}function z(t){switch(t.tag){case 5:return w(t.type);case 16:return w("Lazy");case 13:return w("Suspense");case 19:return w("SuspenseList");case 0:case 2:case 15:return D(t.type,!1);case 11:return D(t.type.render,!1);case 22:return D(t.type._render,!1);case 1:return D(t.type,!0);default:return""}}function P(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case G:return"Fragment";case p:return"Portal";case L:return"Profiler";case R:return"StrictMode";case Z:return"Suspense";case y:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case m:return(t.displayName||"Context")+".Consumer";case h:return(t._context.displayName||"Context")+".Provider";case S:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case X:return P(t.type);case f:return P(t._render);case E:e=t._payload,t=t._init;try{return P(t(e))}catch(t){}}return null}function O(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function j(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function K(t){t._valueTracker||(t._valueTracker=function(t){var e=j(t)?"checked":"value",i=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),l=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==i&&"function"==typeof i.get&&"function"==typeof i.set){var n=i.get,s=i.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return n.call(this)},set:function(t){l=""+t,s.call(this,t)}}),Object.defineProperty(t,e,{enumerable:i.enumerable}),{getValue:function(){return l},setValue:function(t){l=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function _(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var i=e.getValue(),l="";return t&&(l=j(t)?t.checked?"true":"false":t.value),(t=l)!==i&&(e.setValue(t),!0)}function q(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function $(t,e){var i=e.checked;return n({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=i?i:t._wrapperState.initialChecked})}function tt(t,e){var i=null==e.defaultValue?"":e.defaultValue,l=null!=e.checked?e.checked:e.defaultChecked;i=O(null!=e.value?e.value:i),t._wrapperState={initialChecked:l,initialValue:i,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&V(t,"checked",e,!1)}function it(t,e){et(t,e);var i=O(e.value),l=e.type;if(null!=i)"number"===l?(0===i&&""===t.value||t.value!=i)&&(t.value=""+i):t.value!==""+i&&(t.value=""+i);else if("submit"===l||"reset"===l)return void t.removeAttribute("value");e.hasOwnProperty("value")?nt(t,e.type,i):e.hasOwnProperty("defaultValue")&&nt(t,e.type,O(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function lt(t,e,i){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var l=e.type;if(!("submit"!==l&&"reset"!==l||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,i||e===t.value||(t.value=e),t.defaultValue=e}""!==(i=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==i&&(t.name=i)}function nt(t,e,i){"number"===e&&q(t.ownerDocument)===t||(null==i?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+i&&(t.defaultValue=""+i))}function st(t,e){return t=n({children:void 0},e),(e=function(t){var e="";return l.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,i,l){if(t=t.options,e){e={};for(var n=0;n<i.length;n++)e["$"+i[n]]=!0;for(i=0;i<t.length;i++)n=e.hasOwnProperty("$"+t[i].value),t[i].selected!==n&&(t[i].selected=n),n&&l&&(t[i].defaultSelected=!0)}else{for(i=""+O(i),e=null,n=0;n<t.length;n++){if(t[n].value===i)return t[n].selected=!0,void(l&&(t[n].defaultSelected=!0));null!==e||t[n].disabled||(e=t[n])}null!==e&&(e.selected=!0)}}function ct(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return n({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function gt(t,e){var i=e.value;if(null==i){if(i=e.children,e=e.defaultValue,null!=i){if(null!=e)throw Error(a(92));if(Array.isArray(i)){if(!(1>=i.length))throw Error(a(93));i=i[0]}e=i}null==e&&(e=""),i=e}t._wrapperState={initialValue:O(i)}}function It(t,e){var i=O(e.value),l=O(e.defaultValue);null!=i&&((i=""+i)!==t.value&&(t.value=i),null==e.defaultValue&&t.defaultValue!==i&&(t.defaultValue=i)),null!=l&&(t.defaultValue=""+l)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var dt="http://www.w3.org/1999/xhtml";function Bt(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ot(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?Bt(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Ft,rt,Ct=(rt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((Ft=Ft||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=Ft.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,i,l){MSApp.execUnsafeLocalFunction((function(){return rt(t,e)}))}:rt);function Ut(t,e){if(e){var i=t.firstChild;if(i&&i===t.lastChild&&3===i.nodeType)return void(i.nodeValue=e)}t.textContent=e}var Qt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},bt=["Webkit","ms","Moz","O"];function Vt(t,e,i){return null==e||"boolean"==typeof e||""===e?"":i||"number"!=typeof e||0===e||Qt.hasOwnProperty(t)&&Qt[t]?(""+e).trim():e+"px"}function At(t,e){for(var i in t=t.style,e)if(e.hasOwnProperty(i)){var l=0===i.indexOf("--"),n=Vt(i,e[i],l);"float"===i&&(i="cssFloat"),l?t.setProperty(i,n):t[i]=n}}Object.keys(Qt).forEach((function(t){bt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),Qt[e]=Qt[t]}))}));var xt=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function pt(t,e){if(e){if(xt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function Gt(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Rt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Lt=null,ht=null,mt=null;function St(t){if(t=ql(t)){if("function"!=typeof Lt)throw Error(a(280));var e=t.stateNode;e&&(e=tn(e),Lt(t.stateNode,t.type,e))}}function Zt(t){ht?mt?mt.push(t):mt=[t]:ht=t}function yt(){if(ht){var t=ht,e=mt;if(mt=ht=null,St(t),e)for(t=0;t<e.length;t++)St(e[t])}}function Xt(t,e){return t(e)}function Et(t,e,i,l,n){return t(e,i,l,n)}function ft(){}var Wt=Xt,Nt=!1,Tt=!1;function Yt(){null===ht&&null===mt||(ft(),yt())}function Jt(t,e){var i=t.stateNode;if(null===i)return null;var l=tn(i);if(null===l)return null;i=l[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(l=!l.disabled)||(l=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!l;break t;default:t=!1}if(t)return null;if(i&&"function"!=typeof i)throw Error(a(231,e,typeof i));return i}var Ht=!1;if(d)try{var kt={};Object.defineProperty(kt,"passive",{get:function(){Ht=!0}}),window.addEventListener("test",kt,kt),window.removeEventListener("test",kt,kt)}catch(rt){Ht=!1}function vt(t,e,i,l,n,s,a,c,g){var I=Array.prototype.slice.call(arguments,3);try{e.apply(i,I)}catch(t){this.onError(t)}}var wt=!1,Mt=null,Dt=!1,zt=null,Pt={onError:function(t){wt=!0,Mt=t}};function Ot(t,e,i,l,n,s,a,c,g){wt=!1,Mt=null,vt.apply(Pt,arguments)}function jt(t){var e=t,i=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(i=e.return),t=e.return}while(t)}return 3===e.tag?i:null}function Kt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function _t(t){if(jt(t)!==t)throw Error(a(188))}function qt(t){if(!(t=function(t){var e=t.alternate;if(!e){if(null===(e=jt(t)))throw Error(a(188));return e!==t?null:t}for(var i=t,l=e;;){var n=i.return;if(null===n)break;var s=n.alternate;if(null===s){if(null!==(l=n.return)){i=l;continue}break}if(n.child===s.child){for(s=n.child;s;){if(s===i)return _t(n),t;if(s===l)return _t(n),e;s=s.sibling}throw Error(a(188))}if(i.return!==l.return)i=n,l=s;else{for(var c=!1,g=n.child;g;){if(g===i){c=!0,i=n,l=s;break}if(g===l){c=!0,l=n,i=s;break}g=g.sibling}if(!c){for(g=s.child;g;){if(g===i){c=!0,i=s,l=n;break}if(g===l){c=!0,l=s,i=n;break}g=g.sibling}if(!c)throw Error(a(189))}}if(i.alternate!==l)throw Error(a(190))}if(3!==i.tag)throw Error(a(188));return i.stateNode.current===i?t:e}(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function $t(t,e){for(var i=t.alternate;null!==e;){if(e===t||e===i)return!0;e=e.return}return!1}var te,ee,ie,le,ne=!1,se=[],ae=null,ce=null,ge=null,Ie=new Map,ue=new Map,de=[],Be="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function oe(t,e,i,l,n){return{blockedOn:t,domEventName:e,eventSystemFlags:16|i,nativeEvent:n,targetContainers:[l]}}function Fe(t,e){switch(t){case"focusin":case"focusout":ae=null;break;case"dragenter":case"dragleave":ce=null;break;case"mouseover":case"mouseout":ge=null;break;case"pointerover":case"pointerout":Ie.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ue.delete(e.pointerId)}}function re(t,e,i,l,n,s){return null===t||t.nativeEvent!==s?(t=oe(e,i,l,n,s),null!==e&&null!==(e=ql(e))&&ee(e),t):(t.eventSystemFlags|=l,e=t.targetContainers,null!==n&&-1===e.indexOf(n)&&e.push(n),t)}function Ce(t){var e=_l(t.target);if(null!==e){var i=jt(e);if(null!==i)if(13===(e=i.tag)){if(null!==(e=Kt(i)))return t.blockedOn=e,void le(t.lanePriority,(function(){s.unstable_runWithPriority(t.priority,(function(){ie(i)}))}))}else if(3===e&&i.stateNode.hydrate)return void(t.blockedOn=3===i.tag?i.stateNode.containerInfo:null)}t.blockedOn=null}function Ue(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var i=qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==i)return null!==(e=ql(i))&&ee(e),t.blockedOn=i,!1;e.shift()}return!0}function Qe(t,e,i){Ue(t)&&i.delete(e)}function be(){for(ne=!1;0<se.length;){var t=se[0];if(null!==t.blockedOn){null!==(t=ql(t.blockedOn))&&te(t);break}for(var e=t.targetContainers;0<e.length;){var i=qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==i){t.blockedOn=i;break}e.shift()}null===t.blockedOn&&se.shift()}null!==ae&&Ue(ae)&&(ae=null),null!==ce&&Ue(ce)&&(ce=null),null!==ge&&Ue(ge)&&(ge=null),Ie.forEach(Qe),ue.forEach(Qe)}function Ve(t,e){t.blockedOn===e&&(t.blockedOn=null,ne||(ne=!0,s.unstable_scheduleCallback(s.unstable_NormalPriority,be)))}function Ae(t){function e(e){return Ve(e,t)}if(0<se.length){Ve(se[0],t);for(var i=1;i<se.length;i++){var l=se[i];l.blockedOn===t&&(l.blockedOn=null)}}for(null!==ae&&Ve(ae,t),null!==ce&&Ve(ce,t),null!==ge&&Ve(ge,t),Ie.forEach(e),ue.forEach(e),i=0;i<de.length;i++)(l=de[i]).blockedOn===t&&(l.blockedOn=null);for(;0<de.length&&null===(i=de[0]).blockedOn;)Ce(i),null===i.blockedOn&&de.shift()}function xe(t,e){var i={};return i[t.toLowerCase()]=e.toLowerCase(),i["Webkit"+t]="webkit"+e,i["Moz"+t]="moz"+e,i}var pe={animationend:xe("Animation","AnimationEnd"),animationiteration:xe("Animation","AnimationIteration"),animationstart:xe("Animation","AnimationStart"),transitionend:xe("Transition","TransitionEnd")},Ge={},Re={};function Le(t){if(Ge[t])return Ge[t];if(!pe[t])return t;var e,i=pe[t];for(e in i)if(i.hasOwnProperty(e)&&e in Re)return Ge[t]=i[e];return t}d&&(Re=document.createElement("div").style,"AnimationEvent"in window||(delete pe.animationend.animation,delete pe.animationiteration.animation,delete pe.animationstart.animation),"TransitionEvent"in window||delete pe.transitionend.transition);var he=Le("animationend"),me=Le("animationiteration"),Se=Le("animationstart"),Ze=Le("transitionend"),ye=new Map,Xe=new Map,Ee=["abort","abort",he,"animationEnd",me,"animationIteration",Se,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ze,"transitionEnd","waiting","waiting"];function fe(t,e){for(var i=0;i<t.length;i+=2){var l=t[i],n=t[i+1];n="on"+(n[0].toUpperCase()+n.slice(1)),Xe.set(l,e),ye.set(l,n),I(n,[l])}}(0,s.unstable_now)();var We=8;function Ne(t){if(0!=(1&t))return We=15,1;if(0!=(2&t))return We=14,2;if(0!=(4&t))return We=13,4;var e=24&t;return 0!==e?(We=12,e):0!=(32&t)?(We=11,32):0!=(e=192&t)?(We=10,e):0!=(256&t)?(We=9,256):0!=(e=3584&t)?(We=8,e):0!=(4096&t)?(We=7,4096):0!=(e=4186112&t)?(We=6,e):0!=(e=62914560&t)?(We=5,e):67108864&t?(We=4,67108864):0!=(134217728&t)?(We=3,134217728):0!=(e=805306368&t)?(We=2,e):0!=(1073741824&t)?(We=1,1073741824):(We=8,t)}function Te(t,e){var i=t.pendingLanes;if(0===i)return We=0;var l=0,n=0,s=t.expiredLanes,a=t.suspendedLanes,c=t.pingedLanes;if(0!==s)l=s,n=We=15;else if(0!=(s=134217727&i)){var g=s&~a;0!==g?(l=Ne(g),n=We):0!=(c&=s)&&(l=Ne(c),n=We)}else 0!=(s=i&~a)?(l=Ne(s),n=We):0!==c&&(l=Ne(c),n=We);if(0===l)return 0;if(l=i&((0>(l=31-we(l))?0:1<<l)<<1)-1,0!==e&&e!==l&&0==(e&a)){if(Ne(e),n<=We)return e;We=n}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=l;0<e;)n=1<<(i=31-we(e)),l|=t[i],e&=~n;return l}function Ye(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Je(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=He(24&~e))?Je(10,e):t;case 10:return 0===(t=He(192&~e))?Je(8,e):t;case 8:return 0===(t=He(3584&~e))&&0===(t=He(4186112&~e))&&(t=512),t;case 2:return 0===(e=He(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function He(t){return t&-t}function ke(t){for(var e=[],i=0;31>i;i++)e.push(t);return e}function ve(t,e,i){t.pendingLanes|=e;var l=e-1;t.suspendedLanes&=l,t.pingedLanes&=l,(t=t.eventTimes)[e=31-we(e)]=i}var we=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Me(t)/De|0)|0},Me=Math.log,De=Math.LN2,ze=s.unstable_UserBlockingPriority,Pe=s.unstable_runWithPriority,Oe=!0;function je(t,e,i,l){Nt||ft();var n=_e,s=Nt;Nt=!0;try{Et(n,t,e,i,l)}finally{(Nt=s)||Yt()}}function Ke(t,e,i,l){Pe(ze,_e.bind(null,t,e,i,l))}function _e(t,e,i,l){var n;if(Oe)if((n=0==(4&e))&&0<se.length&&-1<Be.indexOf(t))t=oe(null,t,e,i,l),se.push(t);else{var s=qe(t,e,i,l);if(null===s)n&&Fe(t,l);else{if(n){if(-1<Be.indexOf(t))return t=oe(s,t,e,i,l),void se.push(t);if(function(t,e,i,l,n){switch(e){case"focusin":return ae=re(ae,t,e,i,l,n),!0;case"dragenter":return ce=re(ce,t,e,i,l,n),!0;case"mouseover":return ge=re(ge,t,e,i,l,n),!0;case"pointerover":var s=n.pointerId;return Ie.set(s,re(Ie.get(s)||null,t,e,i,l,n)),!0;case"gotpointercapture":return s=n.pointerId,ue.set(s,re(ue.get(s)||null,t,e,i,l,n)),!0}return!1}(s,t,e,i,l))return;Fe(t,l)}Zl(t,e,l,null,i)}}}function qe(t,e,i,l){var n=Rt(l);if(null!==(n=_l(n))){var s=jt(n);if(null===s)n=null;else{var a=s.tag;if(13===a){if(null!==(n=Kt(s)))return n;n=null}else if(3===a){if(s.stateNode.hydrate)return 3===s.tag?s.stateNode.containerInfo:null;n=null}else s!==n&&(n=null)}}return Zl(t,e,l,n,i),null}var $e=null,ti=null,ei=null;function ii(){if(ei)return ei;var t,e,i=ti,l=i.length,n="value"in $e?$e.value:$e.textContent,s=n.length;for(t=0;t<l&&i[t]===n[t];t++);var a=l-t;for(e=1;e<=a&&i[l-e]===n[s-e];e++);return ei=n.slice(t,1<e?1-e:void 0)}function li(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function ni(){return!0}function si(){return!1}function ai(t){function e(e,i,l,n,s){for(var a in this._reactName=e,this._targetInst=l,this.type=i,this.nativeEvent=n,this.target=s,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(n):n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ni:si,this.isPropagationStopped=si,this}return n(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=ni)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=ni)},persist:function(){},isPersistent:ni}),e}var ci,gi,Ii,ui={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},di=ai(ui),Bi=n({},ui,{view:0,detail:0}),oi=ai(Bi),Fi=n({},Bi,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Ri,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==Ii&&(Ii&&"mousemove"===t.type?(ci=t.screenX-Ii.screenX,gi=t.screenY-Ii.screenY):gi=ci=0,Ii=t),ci)},movementY:function(t){return"movementY"in t?t.movementY:gi}}),ri=ai(Fi),Ci=ai(n({},Fi,{dataTransfer:0})),Ui=ai(n({},Bi,{relatedTarget:0})),Qi=ai(n({},ui,{animationName:0,elapsedTime:0,pseudoElement:0})),bi=ai(n({},ui,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}})),Vi=ai(n({},ui,{data:0})),Ai={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xi={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pi={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gi(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=pi[t])&&!!e[t]}function Ri(){return Gi}var Li=ai(n({},Bi,{key:function(t){if(t.key){var e=Ai[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=li(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?xi[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Ri,charCode:function(t){return"keypress"===t.type?li(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?li(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}})),hi=ai(n({},Fi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),mi=ai(n({},Bi,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Ri})),Si=ai(n({},ui,{propertyName:0,elapsedTime:0,pseudoElement:0})),Zi=ai(n({},Fi,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0})),yi=[9,13,27,32],Xi=d&&"CompositionEvent"in window,Ei=null;d&&"documentMode"in document&&(Ei=document.documentMode);var fi=d&&"TextEvent"in window&&!Ei,Wi=d&&(!Xi||Ei&&8<Ei&&11>=Ei),Ni=String.fromCharCode(32),Ti=!1;function Yi(t,e){switch(t){case"keyup":return-1!==yi.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ji(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Hi=!1,ki={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function vi(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!ki[t.type]:"textarea"===e}function wi(t,e,i,l){Zt(l),0<(e=Xl(e,"onChange")).length&&(i=new di("onChange","change",null,i,l),t.push({event:i,listeners:e}))}var Mi=null,Di=null;function zi(t){Gl(t,0)}function Pi(t){if(_($l(t)))return t}function Oi(t,e){if("change"===t)return e}var ji=!1;if(d){var Ki;if(d){var _i="oninput"in document;if(!_i){var qi=document.createElement("div");qi.setAttribute("oninput","return;"),_i="function"==typeof qi.oninput}Ki=_i}else Ki=!1;ji=Ki&&(!document.documentMode||9<document.documentMode)}function $i(){Mi&&(Mi.detachEvent("onpropertychange",tl),Di=Mi=null)}function tl(t){if("value"===t.propertyName&&Pi(Di)){var e=[];if(wi(e,Di,t,Rt(t)),t=zi,Nt)t(e);else{Nt=!0;try{Xt(t,e)}finally{Nt=!1,Yt()}}}}function el(t,e,i){"focusin"===t?($i(),Di=i,(Mi=e).attachEvent("onpropertychange",tl)):"focusout"===t&&$i()}function il(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Pi(Di)}function ll(t,e){if("click"===t)return Pi(e)}function nl(t,e){if("input"===t||"change"===t)return Pi(e)}var sl="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},al=Object.prototype.hasOwnProperty;function cl(t,e){if(sl(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),l=Object.keys(e);if(i.length!==l.length)return!1;for(l=0;l<i.length;l++)if(!al.call(e,i[l])||!sl(t[i[l]],e[i[l]]))return!1;return!0}function gl(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Il(t,e){var i,l=gl(t);for(t=0;l;){if(3===l.nodeType){if(i=t+l.textContent.length,t<=e&&i>=e)return{node:l,offset:e-t};t=i}t:{for(;l;){if(l.nextSibling){l=l.nextSibling;break t}l=l.parentNode}l=void 0}l=gl(l)}}function ul(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?ul(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function dl(){for(var t=window,e=q();e instanceof t.HTMLIFrameElement;){try{var i="string"==typeof e.contentWindow.location.href}catch(t){i=!1}if(!i)break;e=q((t=e.contentWindow).document)}return e}function Bl(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var ol=d&&"documentMode"in document&&11>=document.documentMode,Fl=null,rl=null,Cl=null,Ul=!1;function Ql(t,e,i){var l=i.window===i?i.document:9===i.nodeType?i:i.ownerDocument;Ul||null==Fl||Fl!==q(l)||(l="selectionStart"in(l=Fl)&&Bl(l)?{start:l.selectionStart,end:l.selectionEnd}:{anchorNode:(l=(l.ownerDocument&&l.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:l.anchorOffset,focusNode:l.focusNode,focusOffset:l.focusOffset},Cl&&cl(Cl,l)||(Cl=l,0<(l=Xl(rl,"onSelect")).length&&(e=new di("onSelect","select",null,e,i),t.push({event:e,listeners:l}),e.target=Fl)))}fe("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),fe("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),fe(Ee,2);for(var bl="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vl=0;Vl<bl.length;Vl++)Xe.set(bl[Vl],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),I("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),I("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),I("onBeforeInput",["compositionend","keypress","textInput","paste"]),I("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),I("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),I("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Al="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xl=new Set("cancel close invalid load scroll toggle".split(" ").concat(Al));function pl(t,e,i){var l=t.type||"unknown-event";t.currentTarget=i,function(t,e,i,l,n,s,c,g,I){if(Ot.apply(this,arguments),wt){if(!wt)throw Error(a(198));var u=Mt;wt=!1,Mt=null,Dt||(Dt=!0,zt=u)}}(l,e,void 0,t),t.currentTarget=null}function Gl(t,e){e=0!=(4&e);for(var i=0;i<t.length;i++){var l=t[i],n=l.event;l=l.listeners;t:{var s=void 0;if(e)for(var a=l.length-1;0<=a;a--){var c=l[a],g=c.instance,I=c.currentTarget;if(c=c.listener,g!==s&&n.isPropagationStopped())break t;pl(n,c,I),s=g}else for(a=0;a<l.length;a++){if(g=(c=l[a]).instance,I=c.currentTarget,c=c.listener,g!==s&&n.isPropagationStopped())break t;pl(n,c,I),s=g}}}if(Dt)throw t=zt,Dt=!1,zt=null,t}function Rl(t,e){var i=en(e),l=t+"__bubble";i.has(l)||(Sl(e,t,2,!1),i.add(l))}var Ll="_reactListening"+Math.random().toString(36).slice(2);function hl(t){t[Ll]||(t[Ll]=!0,c.forEach((function(e){xl.has(e)||ml(e,!1,t,null),ml(e,!0,t,null)})))}function ml(t,e,i,l){var n=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,s=i;if("selectionchange"===t&&9!==i.nodeType&&(s=i.ownerDocument),null!==l&&!e&&xl.has(t)){if("scroll"!==t)return;n|=2,s=l}var a=en(s),c=t+"__"+(e?"capture":"bubble");a.has(c)||(e&&(n|=4),Sl(s,t,n,e),a.add(c))}function Sl(t,e,i,l){var n=Xe.get(e);switch(void 0===n?2:n){case 0:n=je;break;case 1:n=Ke;break;default:n=_e}i=n.bind(null,e,i,t),n=void 0,!Ht||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(n=!0),l?void 0!==n?t.addEventListener(e,i,{capture:!0,passive:n}):t.addEventListener(e,i,!0):void 0!==n?t.addEventListener(e,i,{passive:n}):t.addEventListener(e,i,!1)}function Zl(t,e,i,l,n){var s=l;if(0==(1&e)&&0==(2&e)&&null!==l)t:for(;;){if(null===l)return;var a=l.tag;if(3===a||4===a){var c=l.stateNode.containerInfo;if(c===n||8===c.nodeType&&c.parentNode===n)break;if(4===a)for(a=l.return;null!==a;){var g=a.tag;if((3===g||4===g)&&((g=a.stateNode.containerInfo)===n||8===g.nodeType&&g.parentNode===n))return;a=a.return}for(;null!==c;){if(null===(a=_l(c)))return;if(5===(g=a.tag)||6===g){l=s=a;continue t}c=c.parentNode}}l=l.return}!function(t,e,i){if(Tt)return t();Tt=!0;try{Wt(t,e,i)}finally{Tt=!1,Yt()}}((function(){var l=s,n=Rt(i),a=[];t:{var c=ye.get(t);if(void 0!==c){var g=di,I=t;switch(t){case"keypress":if(0===li(i))break t;case"keydown":case"keyup":g=Li;break;case"focusin":I="focus",g=Ui;break;case"focusout":I="blur",g=Ui;break;case"beforeblur":case"afterblur":g=Ui;break;case"click":if(2===i.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=ri;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=Ci;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=mi;break;case he:case me:case Se:g=Qi;break;case Ze:g=Si;break;case"scroll":g=oi;break;case"wheel":g=Zi;break;case"copy":case"cut":case"paste":g=bi;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=hi}var u=0!=(4&e),d=!u&&"scroll"===t,B=u?null!==c?c+"Capture":null:c;u=[];for(var o,F=l;null!==F;){var r=(o=F).stateNode;if(5===o.tag&&null!==r&&(o=r,null!==B&&null!=(r=Jt(F,B))&&u.push(yl(F,r,o))),d)break;F=F.return}0<u.length&&(c=new g(c,I,null,i,n),a.push({event:c,listeners:u}))}}if(0==(7&e)){if(g="mouseout"===t||"pointerout"===t,(!(c="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(I=i.relatedTarget||i.fromElement)||!_l(I)&&!I[jl])&&(g||c)&&(c=n.window===n?n:(c=n.ownerDocument)?c.defaultView||c.parentWindow:window,g?(g=l,null!==(I=(I=i.relatedTarget||i.toElement)?_l(I):null)&&(I!==(d=jt(I))||5!==I.tag&&6!==I.tag)&&(I=null)):(g=null,I=l),g!==I)){if(u=ri,r="onMouseLeave",B="onMouseEnter",F="mouse","pointerout"!==t&&"pointerover"!==t||(u=hi,r="onPointerLeave",B="onPointerEnter",F="pointer"),d=null==g?c:$l(g),o=null==I?c:$l(I),(c=new u(r,F+"leave",g,i,n)).target=d,c.relatedTarget=o,r=null,_l(n)===l&&((u=new u(B,F+"enter",I,i,n)).target=o,u.relatedTarget=d,r=u),d=r,g&&I)t:{for(B=I,F=0,o=u=g;o;o=El(o))F++;for(o=0,r=B;r;r=El(r))o++;for(;0<F-o;)u=El(u),F--;for(;0<o-F;)B=El(B),o--;for(;F--;){if(u===B||null!==B&&u===B.alternate)break t;u=El(u),B=El(B)}u=null}else u=null;null!==g&&fl(a,c,g,u,!1),null!==I&&null!==d&&fl(a,d,I,u,!0)}if("select"===(g=(c=l?$l(l):window).nodeName&&c.nodeName.toLowerCase())||"input"===g&&"file"===c.type)var C=Oi;else if(vi(c))if(ji)C=nl;else{C=il;var U=el}else(g=c.nodeName)&&"input"===g.toLowerCase()&&("checkbox"===c.type||"radio"===c.type)&&(C=ll);switch(C&&(C=C(t,l))?wi(a,C,i,n):(U&&U(t,c,l),"focusout"===t&&(U=c._wrapperState)&&U.controlled&&"number"===c.type&&nt(c,"number",c.value)),U=l?$l(l):window,t){case"focusin":(vi(U)||"true"===U.contentEditable)&&(Fl=U,rl=l,Cl=null);break;case"focusout":Cl=rl=Fl=null;break;case"mousedown":Ul=!0;break;case"contextmenu":case"mouseup":case"dragend":Ul=!1,Ql(a,i,n);break;case"selectionchange":if(ol)break;case"keydown":case"keyup":Ql(a,i,n)}var Q;if(Xi)t:{switch(t){case"compositionstart":var b="onCompositionStart";break t;case"compositionend":b="onCompositionEnd";break t;case"compositionupdate":b="onCompositionUpdate";break t}b=void 0}else Hi?Yi(t,i)&&(b="onCompositionEnd"):"keydown"===t&&229===i.keyCode&&(b="onCompositionStart");b&&(Wi&&"ko"!==i.locale&&(Hi||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hi&&(Q=ii()):(ti="value"in($e=n)?$e.value:$e.textContent,Hi=!0)),0<(U=Xl(l,b)).length&&(b=new Vi(b,t,null,i,n),a.push({event:b,listeners:U}),(Q||null!==(Q=Ji(i)))&&(b.data=Q))),(Q=fi?function(t,e){switch(t){case"compositionend":return Ji(e);case"keypress":return 32!==e.which?null:(Ti=!0,Ni);case"textInput":return(t=e.data)===Ni&&Ti?null:t;default:return null}}(t,i):function(t,e){if(Hi)return"compositionend"===t||!Xi&&Yi(t,e)?(t=ii(),ei=ti=$e=null,Hi=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Wi&&"ko"!==e.locale?null:e.data;default:return null}}(t,i))&&0<(l=Xl(l,"onBeforeInput")).length&&(n=new Vi("onBeforeInput","beforeinput",null,i,n),a.push({event:n,listeners:l}),n.data=Q)}Gl(a,e)}))}function yl(t,e,i){return{instance:t,listener:e,currentTarget:i}}function Xl(t,e){for(var i=e+"Capture",l=[];null!==t;){var n=t,s=n.stateNode;5===n.tag&&null!==s&&(n=s,null!=(s=Jt(t,i))&&l.unshift(yl(t,s,n)),null!=(s=Jt(t,e))&&l.push(yl(t,s,n))),t=t.return}return l}function El(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function fl(t,e,i,l,n){for(var s=e._reactName,a=[];null!==i&&i!==l;){var c=i,g=c.alternate,I=c.stateNode;if(null!==g&&g===l)break;5===c.tag&&null!==I&&(c=I,n?null!=(g=Jt(i,s))&&a.unshift(yl(i,g,c)):n||null!=(g=Jt(i,s))&&a.push(yl(i,g,c))),i=i.return}0!==a.length&&t.push({event:e,listeners:a})}function Wl(){}var Nl=null,Tl=null;function Yl(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Jl(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Hl="function"==typeof setTimeout?setTimeout:void 0,kl="function"==typeof clearTimeout?clearTimeout:void 0;function vl(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function wl(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Ml(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var i=t.data;if("$"===i||"$!"===i||"$?"===i){if(0===e)return t;e--}else"/$"===i&&e++}t=t.previousSibling}return null}var Dl=0,zl=Math.random().toString(36).slice(2),Pl="__reactFiber$"+zl,Ol="__reactProps$"+zl,jl="__reactContainer$"+zl,Kl="__reactEvents$"+zl;function _l(t){var e=t[Pl];if(e)return e;for(var i=t.parentNode;i;){if(e=i[jl]||i[Pl]){if(i=e.alternate,null!==e.child||null!==i&&null!==i.child)for(t=Ml(t);null!==t;){if(i=t[Pl])return i;t=Ml(t)}return e}i=(t=i).parentNode}return null}function ql(t){return!(t=t[Pl]||t[jl])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function $l(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function tn(t){return t[Ol]||null}function en(t){var e=t[Kl];return void 0===e&&(e=t[Kl]=new Set),e}var ln=[],nn=-1;function sn(t){return{current:t}}function an(t){0>nn||(t.current=ln[nn],ln[nn]=null,nn--)}function cn(t,e){nn++,ln[nn]=t.current,t.current=e}var gn={},In=sn(gn),un=sn(!1),dn=gn;function Bn(t,e){var i=t.type.contextTypes;if(!i)return gn;var l=t.stateNode;if(l&&l.__reactInternalMemoizedUnmaskedChildContext===e)return l.__reactInternalMemoizedMaskedChildContext;var n,s={};for(n in i)s[n]=e[n];return l&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=s),s}function on(t){return null!=t.childContextTypes}function Fn(){an(un),an(In)}function rn(t,e,i){if(In.current!==gn)throw Error(a(168));cn(In,e),cn(un,i)}function Cn(t,e,i){var l=t.stateNode;if(t=e.childContextTypes,"function"!=typeof l.getChildContext)return i;for(var s in l=l.getChildContext())if(!(s in t))throw Error(a(108,P(e)||"Unknown",s));return n({},i,l)}function Un(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||gn,dn=In.current,cn(In,t),cn(un,un.current),!0}function Qn(t,e,i){var l=t.stateNode;if(!l)throw Error(a(169));i?(t=Cn(t,e,dn),l.__reactInternalMemoizedMergedChildContext=t,an(un),an(In),cn(In,t)):an(un),cn(un,i)}var bn=null,Vn=null,An=s.unstable_runWithPriority,xn=s.unstable_scheduleCallback,pn=s.unstable_cancelCallback,Gn=s.unstable_shouldYield,Rn=s.unstable_requestPaint,Ln=s.unstable_now,hn=s.unstable_getCurrentPriorityLevel,mn=s.unstable_ImmediatePriority,Sn=s.unstable_UserBlockingPriority,Zn=s.unstable_NormalPriority,yn=s.unstable_LowPriority,Xn=s.unstable_IdlePriority,En={},fn=void 0!==Rn?Rn:function(){},Wn=null,Nn=null,Tn=!1,Yn=Ln(),Jn=1e4>Yn?Ln:function(){return Ln()-Yn};function Hn(){switch(hn()){case mn:return 99;case Sn:return 98;case Zn:return 97;case yn:return 96;case Xn:return 95;default:throw Error(a(332))}}function kn(t){switch(t){case 99:return mn;case 98:return Sn;case 97:return Zn;case 96:return yn;case 95:return Xn;default:throw Error(a(332))}}function vn(t,e){return t=kn(t),An(t,e)}function wn(t,e,i){return t=kn(t),xn(t,e,i)}function Mn(){if(null!==Nn){var t=Nn;Nn=null,pn(t)}Dn()}function Dn(){if(!Tn&&null!==Wn){Tn=!0;var t=0;try{var e=Wn;vn(99,(function(){for(;t<e.length;t++){var i=e[t];do{i=i(!0)}while(null!==i)}})),Wn=null}catch(e){throw null!==Wn&&(Wn=Wn.slice(t+1)),xn(mn,Mn),e}finally{Tn=!1}}}var zn=A.ReactCurrentBatchConfig;function Pn(t,e){if(t&&t.defaultProps){for(var i in e=n({},e),t=t.defaultProps)void 0===e[i]&&(e[i]=t[i]);return e}return e}var On=sn(null),jn=null,Kn=null,_n=null;function qn(){_n=Kn=jn=null}function $n(t){var e=On.current;an(On),t.type._context._currentValue=e}function ts(t,e){for(;null!==t;){var i=t.alternate;if((t.childLanes&e)===e){if(null===i||(i.childLanes&e)===e)break;i.childLanes|=e}else t.childLanes|=e,null!==i&&(i.childLanes|=e);t=t.return}}function es(t,e){jn=t,_n=Kn=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Xa=!0),t.firstContext=null)}function is(t,e){if(_n!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(_n=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Kn){if(null===jn)throw Error(a(308));Kn=e,jn.dependencies={lanes:0,firstContext:e,responders:null}}else Kn=Kn.next=e;return t._currentValue}var ls=!1;function ns(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ss(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function as(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function cs(t,e){if(null!==(t=t.updateQueue)){var i=(t=t.shared).pending;null===i?e.next=e:(e.next=i.next,i.next=e),t.pending=e}}function gs(t,e){var i=t.updateQueue,l=t.alternate;if(null!==l&&i===(l=l.updateQueue)){var n=null,s=null;if(null!==(i=i.firstBaseUpdate)){do{var a={eventTime:i.eventTime,lane:i.lane,tag:i.tag,payload:i.payload,callback:i.callback,next:null};null===s?n=s=a:s=s.next=a,i=i.next}while(null!==i);null===s?n=s=e:s=s.next=e}else n=s=e;return i={baseState:l.baseState,firstBaseUpdate:n,lastBaseUpdate:s,shared:l.shared,effects:l.effects},void(t.updateQueue=i)}null===(t=i.lastBaseUpdate)?i.firstBaseUpdate=e:t.next=e,i.lastBaseUpdate=e}function Is(t,e,i,l){var s=t.updateQueue;ls=!1;var a=s.firstBaseUpdate,c=s.lastBaseUpdate,g=s.shared.pending;if(null!==g){s.shared.pending=null;var I=g,u=I.next;I.next=null,null===c?a=u:c.next=u,c=I;var d=t.alternate;if(null!==d){var B=(d=d.updateQueue).lastBaseUpdate;B!==c&&(null===B?d.firstBaseUpdate=u:B.next=u,d.lastBaseUpdate=I)}}if(null!==a){for(B=s.baseState,c=0,d=u=I=null;;){g=a.lane;var o=a.eventTime;if((l&g)===g){null!==d&&(d=d.next={eventTime:o,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var F=t,r=a;switch(g=e,o=i,r.tag){case 1:if("function"==typeof(F=r.payload)){B=F.call(o,B,g);break t}B=F;break t;case 3:F.flags=-4097&F.flags|64;case 0:if(null==(g="function"==typeof(F=r.payload)?F.call(o,B,g):F))break t;B=n({},B,g);break t;case 2:ls=!0}}null!==a.callback&&(t.flags|=32,null===(g=s.effects)?s.effects=[a]:g.push(a))}else o={eventTime:o,lane:g,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=o,I=B):d=d.next=o,c|=g;if(null===(a=a.next)){if(null===(g=s.shared.pending))break;a=g.next,g.next=null,s.lastBaseUpdate=g,s.shared.pending=null}}null===d&&(I=B),s.baseState=I,s.firstBaseUpdate=u,s.lastBaseUpdate=d,fc|=c,t.lanes=c,t.memoizedState=B}}function us(t,e,i){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var l=t[e],n=l.callback;if(null!==n){if(l.callback=null,l=i,"function"!=typeof n)throw Error(a(191,n));n.call(l)}}}var ds=(new l.Component).refs;function Bs(t,e,i,l){i=null==(i=i(l,e=t.memoizedState))?e:n({},e,i),t.memoizedState=i,0===t.lanes&&(t.updateQueue.baseState=i)}var os={isMounted:function(t){return!!(t=t._reactInternals)&&jt(t)===t},enqueueSetState:function(t,e,i){t=t._reactInternals;var l=sg(),n=ag(t),s=as(l,n);s.payload=e,null!=i&&(s.callback=i),cs(t,s),cg(t,n,l)},enqueueReplaceState:function(t,e,i){t=t._reactInternals;var l=sg(),n=ag(t),s=as(l,n);s.tag=1,s.payload=e,null!=i&&(s.callback=i),cs(t,s),cg(t,n,l)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var i=sg(),l=ag(t),n=as(i,l);n.tag=2,null!=e&&(n.callback=e),cs(t,n),cg(t,l,i)}};function Fs(t,e,i,l,n,s,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(l,s,a):!(e.prototype&&e.prototype.isPureReactComponent&&cl(i,l)&&cl(n,s))}function rs(t,e,i){var l=!1,n=gn,s=e.contextType;return"object"==typeof s&&null!==s?s=is(s):(n=on(e)?dn:In.current,s=(l=null!=(l=e.contextTypes))?Bn(t,n):gn),e=new e(i,s),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=os,t.stateNode=e,e._reactInternals=t,l&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,t.__reactInternalMemoizedMaskedChildContext=s),e}function Cs(t,e,i,l){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(i,l),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(i,l),e.state!==t&&os.enqueueReplaceState(e,e.state,null)}function Us(t,e,i,l){var n=t.stateNode;n.props=i,n.state=t.memoizedState,n.refs=ds,ns(t);var s=e.contextType;"object"==typeof s&&null!==s?n.context=is(s):(s=on(e)?dn:In.current,n.context=Bn(t,s)),Is(t,i,n,l),n.state=t.memoizedState,"function"==typeof(s=e.getDerivedStateFromProps)&&(Bs(t,e,s,i),n.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof n.getSnapshotBeforeUpdate||"function"!=typeof n.UNSAFE_componentWillMount&&"function"!=typeof n.componentWillMount||(e=n.state,"function"==typeof n.componentWillMount&&n.componentWillMount(),"function"==typeof n.UNSAFE_componentWillMount&&n.UNSAFE_componentWillMount(),e!==n.state&&os.enqueueReplaceState(n,n.state,null),Is(t,i,n,l),n.state=t.memoizedState),"function"==typeof n.componentDidMount&&(t.flags|=4)}var Qs=Array.isArray;function bs(t,e,i){if(null!==(t=i.ref)&&"function"!=typeof t&&"object"!=typeof t){if(i._owner){if(i=i._owner){if(1!==i.tag)throw Error(a(309));var l=i.stateNode}if(!l)throw Error(a(147,t));var n=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===n?e.ref:((e=function(t){var e=l.refs;e===ds&&(e=l.refs={}),null===t?delete e[n]:e[n]=t})._stringRef=n,e)}if("string"!=typeof t)throw Error(a(284));if(!i._owner)throw Error(a(290,t))}return t}function Vs(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function As(t){function e(e,i){if(t){var l=e.lastEffect;null!==l?(l.nextEffect=i,e.lastEffect=i):e.firstEffect=e.lastEffect=i,i.nextEffect=null,i.flags=8}}function i(i,l){if(!t)return null;for(;null!==l;)e(i,l),l=l.sibling;return null}function l(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function n(t,e){return(t=Jg(t,e)).index=0,t.sibling=null,t}function s(e,i,l){return e.index=l,t?null!==(l=e.alternate)?(l=l.index)<i?(e.flags=2,i):l:(e.flags=2,i):i}function c(e){return t&&null===e.alternate&&(e.flags=2),e}function g(t,e,i,l){return null===e||6!==e.tag?((e=wg(i,t.mode,l)).return=t,e):((e=n(e,i)).return=t,e)}function I(t,e,i,l){return null!==e&&e.elementType===i.type?((l=n(e,i.props)).ref=bs(t,e,i),l.return=t,l):((l=Hg(i.type,i.key,i.props,null,t.mode,l)).ref=bs(t,e,i),l.return=t,l)}function u(t,e,i,l){return null===e||4!==e.tag||e.stateNode.containerInfo!==i.containerInfo||e.stateNode.implementation!==i.implementation?((e=Mg(i,t.mode,l)).return=t,e):((e=n(e,i.children||[])).return=t,e)}function d(t,e,i,l,s){return null===e||7!==e.tag?((e=kg(i,t.mode,l,s)).return=t,e):((e=n(e,i)).return=t,e)}function B(t,e,i){if("string"==typeof e||"number"==typeof e)return(e=wg(""+e,t.mode,i)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case x:return(i=Hg(e.type,e.key,e.props,null,t.mode,i)).ref=bs(t,null,e),i.return=t,i;case p:return(e=Mg(e,t.mode,i)).return=t,e}if(Qs(e)||v(e))return(e=kg(e,t.mode,i,null)).return=t,e;Vs(t,e)}return null}function o(t,e,i,l){var n=null!==e?e.key:null;if("string"==typeof i||"number"==typeof i)return null!==n?null:g(t,e,""+i,l);if("object"==typeof i&&null!==i){switch(i.$$typeof){case x:return i.key===n?i.type===G?d(t,e,i.props.children,l,n):I(t,e,i,l):null;case p:return i.key===n?u(t,e,i,l):null}if(Qs(i)||v(i))return null!==n?null:d(t,e,i,l,null);Vs(t,i)}return null}function F(t,e,i,l,n){if("string"==typeof l||"number"==typeof l)return g(e,t=t.get(i)||null,""+l,n);if("object"==typeof l&&null!==l){switch(l.$$typeof){case x:return t=t.get(null===l.key?i:l.key)||null,l.type===G?d(e,t,l.props.children,n,l.key):I(e,t,l,n);case p:return u(e,t=t.get(null===l.key?i:l.key)||null,l,n)}if(Qs(l)||v(l))return d(e,t=t.get(i)||null,l,n,null);Vs(e,l)}return null}function r(n,a,c,g){for(var I=null,u=null,d=a,r=a=0,C=null;null!==d&&r<c.length;r++){d.index>r?(C=d,d=null):C=d.sibling;var U=o(n,d,c[r],g);if(null===U){null===d&&(d=C);break}t&&d&&null===U.alternate&&e(n,d),a=s(U,a,r),null===u?I=U:u.sibling=U,u=U,d=C}if(r===c.length)return i(n,d),I;if(null===d){for(;r<c.length;r++)null!==(d=B(n,c[r],g))&&(a=s(d,a,r),null===u?I=d:u.sibling=d,u=d);return I}for(d=l(n,d);r<c.length;r++)null!==(C=F(d,n,r,c[r],g))&&(t&&null!==C.alternate&&d.delete(null===C.key?r:C.key),a=s(C,a,r),null===u?I=C:u.sibling=C,u=C);return t&&d.forEach((function(t){return e(n,t)})),I}function C(n,c,g,I){var u=v(g);if("function"!=typeof u)throw Error(a(150));if(null==(g=u.call(g)))throw Error(a(151));for(var d=u=null,r=c,C=c=0,U=null,Q=g.next();null!==r&&!Q.done;C++,Q=g.next()){r.index>C?(U=r,r=null):U=r.sibling;var b=o(n,r,Q.value,I);if(null===b){null===r&&(r=U);break}t&&r&&null===b.alternate&&e(n,r),c=s(b,c,C),null===d?u=b:d.sibling=b,d=b,r=U}if(Q.done)return i(n,r),u;if(null===r){for(;!Q.done;C++,Q=g.next())null!==(Q=B(n,Q.value,I))&&(c=s(Q,c,C),null===d?u=Q:d.sibling=Q,d=Q);return u}for(r=l(n,r);!Q.done;C++,Q=g.next())null!==(Q=F(r,n,C,Q.value,I))&&(t&&null!==Q.alternate&&r.delete(null===Q.key?C:Q.key),c=s(Q,c,C),null===d?u=Q:d.sibling=Q,d=Q);return t&&r.forEach((function(t){return e(n,t)})),u}return function(t,l,s,g){var I="object"==typeof s&&null!==s&&s.type===G&&null===s.key;I&&(s=s.props.children);var u="object"==typeof s&&null!==s;if(u)switch(s.$$typeof){case x:t:{for(u=s.key,I=l;null!==I;){if(I.key===u){switch(I.tag){case 7:if(s.type===G){i(t,I.sibling),(l=n(I,s.props.children)).return=t,t=l;break t}break;default:if(I.elementType===s.type){i(t,I.sibling),(l=n(I,s.props)).ref=bs(t,I,s),l.return=t,t=l;break t}}i(t,I);break}e(t,I),I=I.sibling}s.type===G?((l=kg(s.props.children,t.mode,g,s.key)).return=t,t=l):((g=Hg(s.type,s.key,s.props,null,t.mode,g)).ref=bs(t,l,s),g.return=t,t=g)}return c(t);case p:t:{for(I=s.key;null!==l;){if(l.key===I){if(4===l.tag&&l.stateNode.containerInfo===s.containerInfo&&l.stateNode.implementation===s.implementation){i(t,l.sibling),(l=n(l,s.children||[])).return=t,t=l;break t}i(t,l);break}e(t,l),l=l.sibling}(l=Mg(s,t.mode,g)).return=t,t=l}return c(t)}if("string"==typeof s||"number"==typeof s)return s=""+s,null!==l&&6===l.tag?(i(t,l.sibling),(l=n(l,s)).return=t,t=l):(i(t,l),(l=wg(s,t.mode,g)).return=t,t=l),c(t);if(Qs(s))return r(t,l,s,g);if(v(s))return C(t,l,s,g);if(u&&Vs(t,s),void 0===s&&!I)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,P(t.type)||"Component"))}return i(t,l)}}var xs=As(!0),ps=As(!1),Gs={},Rs=sn(Gs),Ls=sn(Gs),hs=sn(Gs);function ms(t){if(t===Gs)throw Error(a(174));return t}function Ss(t,e){switch(cn(hs,e),cn(Ls,t),cn(Rs,Gs),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ot(null,"");break;default:e=ot(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}an(Rs),cn(Rs,e)}function Zs(){an(Rs),an(Ls),an(hs)}function ys(t){ms(hs.current);var e=ms(Rs.current),i=ot(e,t.type);e!==i&&(cn(Ls,t),cn(Rs,i))}function Xs(t){Ls.current===t&&(an(Rs),an(Ls))}var Es=sn(0);function fs(t){for(var e=t;null!==e;){if(13===e.tag){var i=e.memoizedState;if(null!==i&&(null===(i=i.dehydrated)||"$?"===i.data||"$!"===i.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Ws=null,Ns=null,Ts=!1;function Ys(t,e){var i=Tg(5,null,null,0);i.elementType="DELETED",i.type="DELETED",i.stateNode=e,i.return=t,i.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=i,t.lastEffect=i):t.firstEffect=t.lastEffect=i}function Js(t,e){switch(t.tag){case 5:var i=t.type;return null!==(e=1!==e.nodeType||i.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);case 13:default:return!1}}function Hs(t){if(Ts){var e=Ns;if(e){var i=e;if(!Js(t,e)){if(!(e=wl(i.nextSibling))||!Js(t,e))return t.flags=-1025&t.flags|2,Ts=!1,void(Ws=t);Ys(Ws,i)}Ws=t,Ns=wl(e.firstChild)}else t.flags=-1025&t.flags|2,Ts=!1,Ws=t}}function ks(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Ws=t}function vs(t){if(t!==Ws)return!1;if(!Ts)return ks(t),Ts=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Jl(e,t.memoizedProps))for(e=Ns;e;)Ys(t,e),e=wl(e.nextSibling);if(ks(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var i=t.data;if("/$"===i){if(0===e){Ns=wl(t.nextSibling);break t}e--}else"$"!==i&&"$!"!==i&&"$?"!==i||e++}t=t.nextSibling}Ns=null}}else Ns=Ws?wl(t.stateNode.nextSibling):null;return!0}function ws(){Ns=Ws=null,Ts=!1}var Ms=[];function Ds(){for(var t=0;t<Ms.length;t++)Ms[t]._workInProgressVersionPrimary=null;Ms.length=0}var zs=A.ReactCurrentDispatcher,Ps=A.ReactCurrentBatchConfig,Os=0,js=null,Ks=null,_s=null,qs=!1,$s=!1;function ta(){throw Error(a(321))}function ea(t,e){if(null===e)return!1;for(var i=0;i<e.length&&i<t.length;i++)if(!sl(t[i],e[i]))return!1;return!0}function ia(t,e,i,l,n,s){if(Os=s,js=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,zs.current=null===t||null===t.memoizedState?ma:Sa,t=i(l,n),$s){s=0;do{if($s=!1,!(25>s))throw Error(a(301));s+=1,_s=Ks=null,e.updateQueue=null,zs.current=Za,t=i(l,n)}while($s)}if(zs.current=ha,e=null!==Ks&&null!==Ks.next,Os=0,_s=Ks=js=null,qs=!1,e)throw Error(a(300));return t}function la(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===_s?js.memoizedState=_s=t:_s=_s.next=t,_s}function na(){if(null===Ks){var t=js.alternate;t=null!==t?t.memoizedState:null}else t=Ks.next;var e=null===_s?js.memoizedState:_s.next;if(null!==e)_s=e,Ks=t;else{if(null===t)throw Error(a(310));t={memoizedState:(Ks=t).memoizedState,baseState:Ks.baseState,baseQueue:Ks.baseQueue,queue:Ks.queue,next:null},null===_s?js.memoizedState=_s=t:_s=_s.next=t}return _s}function sa(t,e){return"function"==typeof e?e(t):e}function aa(t){var e=na(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var l=Ks,n=l.baseQueue,s=i.pending;if(null!==s){if(null!==n){var c=n.next;n.next=s.next,s.next=c}l.baseQueue=n=s,i.pending=null}if(null!==n){n=n.next,l=l.baseState;var g=c=s=null,I=n;do{var u=I.lane;if((Os&u)===u)null!==g&&(g=g.next={lane:0,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null}),l=I.eagerReducer===t?I.eagerState:t(l,I.action);else{var d={lane:u,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null};null===g?(c=g=d,s=l):g=g.next=d,js.lanes|=u,fc|=u}I=I.next}while(null!==I&&I!==n);null===g?s=l:g.next=c,sl(l,e.memoizedState)||(Xa=!0),e.memoizedState=l,e.baseState=s,e.baseQueue=g,i.lastRenderedState=l}return[e.memoizedState,i.dispatch]}function ca(t){var e=na(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var l=i.dispatch,n=i.pending,s=e.memoizedState;if(null!==n){i.pending=null;var c=n=n.next;do{s=t(s,c.action),c=c.next}while(c!==n);sl(s,e.memoizedState)||(Xa=!0),e.memoizedState=s,null===e.baseQueue&&(e.baseState=s),i.lastRenderedState=s}return[s,l]}function ga(t,e,i){var l=e._getVersion;l=l(e._source);var n=e._workInProgressVersionPrimary;if(null!==n?t=n===l:(t=t.mutableReadLanes,(t=(Os&t)===t)&&(e._workInProgressVersionPrimary=l,Ms.push(e))),t)return i(e._source);throw Ms.push(e),Error(a(350))}function Ia(t,e,i,l){var n=Lc;if(null===n)throw Error(a(349));var s=e._getVersion,c=s(e._source),g=zs.current,I=g.useState((function(){return ga(n,e,i)})),u=I[1],d=I[0];I=_s;var B=t.memoizedState,o=B.refs,F=o.getSnapshot,r=B.source;B=B.subscribe;var C=js;return t.memoizedState={refs:o,source:e,subscribe:l},g.useEffect((function(){o.getSnapshot=i,o.setSnapshot=u;var t=s(e._source);if(!sl(c,t)){t=i(e._source),sl(d,t)||(u(t),t=ag(C),n.mutableReadLanes|=t&n.pendingLanes),t=n.mutableReadLanes,n.entangledLanes|=t;for(var l=n.entanglements,a=t;0<a;){var g=31-we(a),I=1<<g;l[g]|=t,a&=~I}}}),[i,e,l]),g.useEffect((function(){return l(e._source,(function(){var t=o.getSnapshot,i=o.setSnapshot;try{i(t(e._source));var l=ag(C);n.mutableReadLanes|=l&n.pendingLanes}catch(t){i((function(){throw t}))}}))}),[e,l]),sl(F,i)&&sl(r,e)&&sl(B,l)||((t={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:d}).dispatch=u=La.bind(null,js,t),I.queue=t,I.baseQueue=null,d=ga(n,e,i),I.memoizedState=I.baseState=d),d}function ua(t,e,i){return Ia(na(),t,e,i)}function da(t){var e=la();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:sa,lastRenderedState:t}).dispatch=La.bind(null,js,t),[e.memoizedState,t]}function Ba(t,e,i,l){return t={tag:t,create:e,destroy:i,deps:l,next:null},null===(e=js.updateQueue)?(e={lastEffect:null},js.updateQueue=e,e.lastEffect=t.next=t):null===(i=e.lastEffect)?e.lastEffect=t.next=t:(l=i.next,i.next=t,t.next=l,e.lastEffect=t),t}function oa(t){return t={current:t},la().memoizedState=t}function Fa(){return na().memoizedState}function ra(t,e,i,l){var n=la();js.flags|=t,n.memoizedState=Ba(1|e,i,void 0,void 0===l?null:l)}function Ca(t,e,i,l){var n=na();l=void 0===l?null:l;var s=void 0;if(null!==Ks){var a=Ks.memoizedState;if(s=a.destroy,null!==l&&ea(l,a.deps))return void Ba(e,i,s,l)}js.flags|=t,n.memoizedState=Ba(1|e,i,s,l)}function Ua(t,e){return ra(516,4,t,e)}function Qa(t,e){return Ca(516,4,t,e)}function ba(t,e){return Ca(4,2,t,e)}function Va(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Aa(t,e,i){return i=null!=i?i.concat([t]):null,Ca(4,2,Va.bind(null,e,t),i)}function xa(){}function pa(t,e){var i=na();e=void 0===e?null:e;var l=i.memoizedState;return null!==l&&null!==e&&ea(e,l[1])?l[0]:(i.memoizedState=[t,e],t)}function Ga(t,e){var i=na();e=void 0===e?null:e;var l=i.memoizedState;return null!==l&&null!==e&&ea(e,l[1])?l[0]:(t=t(),i.memoizedState=[t,e],t)}function Ra(t,e){var i=Hn();vn(98>i?98:i,(function(){t(!0)})),vn(97<i?97:i,(function(){var i=Ps.transition;Ps.transition=1;try{t(!1),e()}finally{Ps.transition=i}}))}function La(t,e,i){var l=sg(),n=ag(t),s={lane:n,action:i,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?s.next=s:(s.next=a.next,a.next=s),e.pending=s,a=t.alternate,t===js||null!==a&&a===js)$s=qs=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var c=e.lastRenderedState,g=a(c,i);if(s.eagerReducer=a,s.eagerState=g,sl(g,c))return}catch(t){}cg(t,n,l)}}var ha={readContext:is,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},ma={readContext:is,useCallback:function(t,e){return la().memoizedState=[t,void 0===e?null:e],t},useContext:is,useEffect:Ua,useImperativeHandle:function(t,e,i){return i=null!=i?i.concat([t]):null,ra(4,2,Va.bind(null,e,t),i)},useLayoutEffect:function(t,e){return ra(4,2,t,e)},useMemo:function(t,e){var i=la();return e=void 0===e?null:e,t=t(),i.memoizedState=[t,e],t},useReducer:function(t,e,i){var l=la();return e=void 0!==i?i(e):e,l.memoizedState=l.baseState=e,t=(t=l.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=La.bind(null,js,t),[l.memoizedState,t]},useRef:oa,useState:da,useDebugValue:xa,useDeferredValue:function(t){var e=da(t),i=e[0],l=e[1];return Ua((function(){var e=Ps.transition;Ps.transition=1;try{l(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=da(!1),e=t[0];return oa(t=Ra.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,i){var l=la();return l.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:i},Ia(l,t,e,i)},useOpaqueIdentifier:function(){if(Ts){var t=!1,e=function(t){return{$$typeof:W,toString:t,valueOf:t}}((function(){throw t||(t=!0,i("r:"+(Dl++).toString(36))),Error(a(355))})),i=da(e)[1];return 0==(2&js.mode)&&(js.flags|=516,Ba(5,(function(){i("r:"+(Dl++).toString(36))}),void 0,null)),e}return da(e="r:"+(Dl++).toString(36)),e},unstable_isNewReconciler:!1},Sa={readContext:is,useCallback:pa,useContext:is,useEffect:Qa,useImperativeHandle:Aa,useLayoutEffect:ba,useMemo:Ga,useReducer:aa,useRef:Fa,useState:function(){return aa(sa)},useDebugValue:xa,useDeferredValue:function(t){var e=aa(sa),i=e[0],l=e[1];return Qa((function(){var e=Ps.transition;Ps.transition=1;try{l(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=aa(sa)[0];return[Fa().current,t]},useMutableSource:ua,useOpaqueIdentifier:function(){return aa(sa)[0]},unstable_isNewReconciler:!1},Za={readContext:is,useCallback:pa,useContext:is,useEffect:Qa,useImperativeHandle:Aa,useLayoutEffect:ba,useMemo:Ga,useReducer:ca,useRef:Fa,useState:function(){return ca(sa)},useDebugValue:xa,useDeferredValue:function(t){var e=ca(sa),i=e[0],l=e[1];return Qa((function(){var e=Ps.transition;Ps.transition=1;try{l(t)}finally{Ps.transition=e}}),[t]),i},useTransition:function(){var t=ca(sa)[0];return[Fa().current,t]},useMutableSource:ua,useOpaqueIdentifier:function(){return ca(sa)[0]},unstable_isNewReconciler:!1},ya=A.ReactCurrentOwner,Xa=!1;function Ea(t,e,i,l){e.child=null===t?ps(e,null,i,l):xs(e,t.child,i,l)}function fa(t,e,i,l,n){i=i.render;var s=e.ref;return es(e,n),l=ia(t,e,i,l,s,n),null===t||Xa?(e.flags|=1,Ea(t,e,l,n),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~n,qa(t,e,n))}function Wa(t,e,i,l,n,s){if(null===t){var a=i.type;return"function"!=typeof a||Yg(a)||void 0!==a.defaultProps||null!==i.compare||void 0!==i.defaultProps?((t=Hg(i.type,null,l,e,e.mode,s)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Na(t,e,a,l,n,s))}return a=t.child,0==(n&s)&&(n=a.memoizedProps,(i=null!==(i=i.compare)?i:cl)(n,l)&&t.ref===e.ref)?qa(t,e,s):(e.flags|=1,(t=Jg(a,l)).ref=e.ref,t.return=e,e.child=t)}function Na(t,e,i,l,n,s){if(null!==t&&cl(t.memoizedProps,l)&&t.ref===e.ref){if(Xa=!1,0==(s&n))return e.lanes=t.lanes,qa(t,e,s);0!=(16384&t.flags)&&(Xa=!0)}return Ja(t,e,i,l,s)}function Ta(t,e,i){var l=e.pendingProps,n=l.children,s=null!==t?t.memoizedState:null;if("hidden"===l.mode||"unstable-defer-without-hiding"===l.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},rg(0,i);else{if(0==(1073741824&i))return t=null!==s?s.baseLanes|i:i,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},rg(0,t),null;e.memoizedState={baseLanes:0},rg(0,null!==s?s.baseLanes:i)}else null!==s?(l=s.baseLanes|i,e.memoizedState=null):l=i,rg(0,l);return Ea(t,e,n,i),e.child}function Ya(t,e){var i=e.ref;(null===t&&null!==i||null!==t&&t.ref!==i)&&(e.flags|=128)}function Ja(t,e,i,l,n){var s=on(i)?dn:In.current;return s=Bn(e,s),es(e,n),i=ia(t,e,i,l,s,n),null===t||Xa?(e.flags|=1,Ea(t,e,i,n),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~n,qa(t,e,n))}function Ha(t,e,i,l,n){if(on(i)){var s=!0;Un(e)}else s=!1;if(es(e,n),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),rs(e,i,l),Us(e,i,l,n),l=!0;else if(null===t){var a=e.stateNode,c=e.memoizedProps;a.props=c;var g=a.context,I=i.contextType;I="object"==typeof I&&null!==I?is(I):Bn(e,I=on(i)?dn:In.current);var u=i.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==l||g!==I)&&Cs(e,a,l,I),ls=!1;var B=e.memoizedState;a.state=B,Is(e,l,a,n),g=e.memoizedState,c!==l||B!==g||un.current||ls?("function"==typeof u&&(Bs(e,i,u,l),g=e.memoizedState),(c=ls||Fs(e,i,c,l,B,g,I))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=l,e.memoizedState=g),a.props=l,a.state=g,a.context=I,l=c):("function"==typeof a.componentDidMount&&(e.flags|=4),l=!1)}else{a=e.stateNode,ss(t,e),c=e.memoizedProps,I=e.type===e.elementType?c:Pn(e.type,c),a.props=I,d=e.pendingProps,B=a.context,g="object"==typeof(g=i.contextType)&&null!==g?is(g):Bn(e,g=on(i)?dn:In.current);var o=i.getDerivedStateFromProps;(u="function"==typeof o||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(c!==d||B!==g)&&Cs(e,a,l,g),ls=!1,B=e.memoizedState,a.state=B,Is(e,l,a,n);var F=e.memoizedState;c!==d||B!==F||un.current||ls?("function"==typeof o&&(Bs(e,i,o,l),F=e.memoizedState),(I=ls||Fs(e,i,I,l,B,F,g))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(l,F,g),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(l,F,g)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=256),e.memoizedProps=l,e.memoizedState=F),a.props=l,a.state=F,a.context=g,l=I):("function"!=typeof a.componentDidUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||c===t.memoizedProps&&B===t.memoizedState||(e.flags|=256),l=!1)}return ka(t,e,i,l,s,n)}function ka(t,e,i,l,n,s){Ya(t,e);var a=0!=(64&e.flags);if(!l&&!a)return n&&Qn(e,i,!1),qa(t,e,s);l=e.stateNode,ya.current=e;var c=a&&"function"!=typeof i.getDerivedStateFromError?null:l.render();return e.flags|=1,null!==t&&a?(e.child=xs(e,t.child,null,s),e.child=xs(e,null,c,s)):Ea(t,e,c,s),e.memoizedState=l.state,n&&Qn(e,i,!0),e.child}function va(t){var e=t.stateNode;e.pendingContext?rn(0,e.pendingContext,e.pendingContext!==e.context):e.context&&rn(0,e.context,!1),Ss(t,e.containerInfo)}var wa,Ma,Da,za={dehydrated:null,retryLane:0};function Pa(t,e,i){var l,n=e.pendingProps,s=Es.current,a=!1;return(l=0!=(64&e.flags))||(l=(null===t||null!==t.memoizedState)&&0!=(2&s)),l?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===n.fallback||!0===n.unstable_avoidThisFallback||(s|=1),cn(Es,1&s),null===t?(void 0!==n.fallback&&Hs(e),t=n.children,s=n.fallback,a?(t=Oa(e,t,s,i),e.child.memoizedState={baseLanes:i},e.memoizedState=za,t):"number"==typeof n.unstable_expectedLoadTime?(t=Oa(e,t,s,i),e.child.memoizedState={baseLanes:i},e.memoizedState=za,e.lanes=33554432,t):((i=vg({mode:"visible",children:t},e.mode,i,null)).return=e,e.child=i)):(t.memoizedState,a?(n=function(t,e,i,l,n){var s=e.mode,a=t.child;t=a.sibling;var c={mode:"hidden",children:i};return 0==(2&s)&&e.child!==a?((i=e.child).childLanes=0,i.pendingProps=c,null!==(a=i.lastEffect)?(e.firstEffect=i.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):i=Jg(a,c),null!==t?l=Jg(t,l):(l=kg(l,s,n,null)).flags|=2,l.return=e,i.return=e,i.sibling=l,e.child=i,l}(t,e,n.children,n.fallback,i),a=e.child,s=t.child.memoizedState,a.memoizedState=null===s?{baseLanes:i}:{baseLanes:s.baseLanes|i},a.childLanes=t.childLanes&~i,e.memoizedState=za,n):(i=function(t,e,i,l){var n=t.child;return t=n.sibling,i=Jg(n,{mode:"visible",children:i}),0==(2&e.mode)&&(i.lanes=l),i.return=e,i.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=i}(t,e,n.children,i),e.memoizedState=null,i))}function Oa(t,e,i,l){var n=t.mode,s=t.child;return e={mode:"hidden",children:e},0==(2&n)&&null!==s?(s.childLanes=0,s.pendingProps=e):s=vg(e,n,0,null),i=kg(i,n,l,null),s.return=t,i.return=t,s.sibling=i,t.child=s,i}function ja(t,e){t.lanes|=e;var i=t.alternate;null!==i&&(i.lanes|=e),ts(t.return,e)}function Ka(t,e,i,l,n,s){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:l,tail:i,tailMode:n,lastEffect:s}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=l,a.tail=i,a.tailMode=n,a.lastEffect=s)}function _a(t,e,i){var l=e.pendingProps,n=l.revealOrder,s=l.tail;if(Ea(t,e,l.children,i),0!=(2&(l=Es.current)))l=1&l|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&ja(t,i);else if(19===t.tag)ja(t,i);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}l&=1}if(cn(Es,l),0==(2&e.mode))e.memoizedState=null;else switch(n){case"forwards":for(i=e.child,n=null;null!==i;)null!==(t=i.alternate)&&null===fs(t)&&(n=i),i=i.sibling;null===(i=n)?(n=e.child,e.child=null):(n=i.sibling,i.sibling=null),Ka(e,!1,n,i,s,e.lastEffect);break;case"backwards":for(i=null,n=e.child,e.child=null;null!==n;){if(null!==(t=n.alternate)&&null===fs(t)){e.child=n;break}t=n.sibling,n.sibling=i,i=n,n=t}Ka(e,!0,i,null,s,e.lastEffect);break;case"together":Ka(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function qa(t,e,i){if(null!==t&&(e.dependencies=t.dependencies),fc|=e.lanes,0!=(i&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(i=Jg(t=e.child,t.pendingProps),e.child=i,i.return=e;null!==t.sibling;)t=t.sibling,(i=i.sibling=Jg(t,t.pendingProps)).return=e;i.sibling=null}return e.child}return null}function $a(t,e){if(!Ts)switch(t.tailMode){case"hidden":e=t.tail;for(var i=null;null!==e;)null!==e.alternate&&(i=e),e=e.sibling;null===i?t.tail=null:i.sibling=null;break;case"collapsed":i=t.tail;for(var l=null;null!==i;)null!==i.alternate&&(l=i),i=i.sibling;null===l?e||null===t.tail?t.tail=null:t.tail.sibling=null:l.sibling=null}}function tc(t,e,i){var l=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return on(e.type)&&Fn(),null;case 3:return Zs(),an(un),an(In),Ds(),(l=e.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==t&&null!==t.child||(vs(e)?e.flags|=4:l.hydrate||(e.flags|=256)),null;case 5:Xs(e);var s=ms(hs.current);if(i=e.type,null!==t&&null!=e.stateNode)Ma(t,e,i,l),t.ref!==e.ref&&(e.flags|=128);else{if(!l){if(null===e.stateNode)throw Error(a(166));return null}if(t=ms(Rs.current),vs(e)){l=e.stateNode,i=e.type;var c=e.memoizedProps;switch(l[Pl]=e,l[Ol]=c,i){case"dialog":Rl("cancel",l),Rl("close",l);break;case"iframe":case"object":case"embed":Rl("load",l);break;case"video":case"audio":for(t=0;t<Al.length;t++)Rl(Al[t],l);break;case"source":Rl("error",l);break;case"img":case"image":case"link":Rl("error",l),Rl("load",l);break;case"details":Rl("toggle",l);break;case"input":tt(l,c),Rl("invalid",l);break;case"select":l._wrapperState={wasMultiple:!!c.multiple},Rl("invalid",l);break;case"textarea":gt(l,c),Rl("invalid",l)}for(var I in pt(i,c),t=null,c)c.hasOwnProperty(I)&&(s=c[I],"children"===I?"string"==typeof s?l.textContent!==s&&(t=["children",s]):"number"==typeof s&&l.textContent!==""+s&&(t=["children",""+s]):g.hasOwnProperty(I)&&null!=s&&"onScroll"===I&&Rl("scroll",l));switch(i){case"input":K(l),lt(l,c,!0);break;case"textarea":K(l),ut(l);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(l.onclick=Wl)}l=t,e.updateQueue=l,null!==l&&(e.flags|=4)}else{switch(I=9===s.nodeType?s:s.ownerDocument,t===dt&&(t=Bt(i)),t===dt?"script"===i?((t=I.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof l.is?t=I.createElement(i,{is:l.is}):(t=I.createElement(i),"select"===i&&(I=t,l.multiple?I.multiple=!0:l.size&&(I.size=l.size))):t=I.createElementNS(t,i),t[Pl]=e,t[Ol]=l,wa(t,e),e.stateNode=t,I=Gt(i,l),i){case"dialog":Rl("cancel",t),Rl("close",t),s=l;break;case"iframe":case"object":case"embed":Rl("load",t),s=l;break;case"video":case"audio":for(s=0;s<Al.length;s++)Rl(Al[s],t);s=l;break;case"source":Rl("error",t),s=l;break;case"img":case"image":case"link":Rl("error",t),Rl("load",t),s=l;break;case"details":Rl("toggle",t),s=l;break;case"input":tt(t,l),s=$(t,l),Rl("invalid",t);break;case"option":s=st(t,l);break;case"select":t._wrapperState={wasMultiple:!!l.multiple},s=n({},l,{value:void 0}),Rl("invalid",t);break;case"textarea":gt(t,l),s=ct(t,l),Rl("invalid",t);break;default:s=l}pt(i,s);var u=s;for(c in u)if(u.hasOwnProperty(c)){var d=u[c];"style"===c?At(t,d):"dangerouslySetInnerHTML"===c?null!=(d=d?d.__html:void 0)&&Ct(t,d):"children"===c?"string"==typeof d?("textarea"!==i||""!==d)&&Ut(t,d):"number"==typeof d&&Ut(t,""+d):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(g.hasOwnProperty(c)?null!=d&&"onScroll"===c&&Rl("scroll",t):null!=d&&V(t,c,d,I))}switch(i){case"input":K(t),lt(t,l,!1);break;case"textarea":K(t),ut(t);break;case"option":null!=l.value&&t.setAttribute("value",""+O(l.value));break;case"select":t.multiple=!!l.multiple,null!=(c=l.value)?at(t,!!l.multiple,c,!1):null!=l.defaultValue&&at(t,!!l.multiple,l.defaultValue,!0);break;default:"function"==typeof s.onClick&&(t.onclick=Wl)}Yl(i,l)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)Da(0,e,t.memoizedProps,l);else{if("string"!=typeof l&&null===e.stateNode)throw Error(a(166));i=ms(hs.current),ms(Rs.current),vs(e)?(l=e.stateNode,i=e.memoizedProps,l[Pl]=e,l.nodeValue!==i&&(e.flags|=4)):((l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[Pl]=e,e.stateNode=l)}return null;case 13:return an(Es),l=e.memoizedState,0!=(64&e.flags)?(e.lanes=i,e):(l=null!==l,i=!1,null===t?void 0!==e.memoizedProps.fallback&&vs(e):i=null!==t.memoizedState,l&&!i&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Es.current)?0===yc&&(yc=3):(0!==yc&&3!==yc||(yc=4),null===Lc||0==(134217727&fc)&&0==(134217727&Wc)||dg(Lc,mc))),(l||i)&&(e.flags|=4),null);case 4:return Zs(),null===t&&hl(e.stateNode.containerInfo),null;case 10:return $n(e),null;case 17:return on(e.type)&&Fn(),null;case 19:if(an(Es),null===(l=e.memoizedState))return null;if(c=0!=(64&e.flags),null===(I=l.rendering))if(c)$a(l,!1);else{if(0!==yc||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(I=fs(t))){for(e.flags|=64,$a(l,!1),null!==(c=I.updateQueue)&&(e.updateQueue=c,e.flags|=4),null===l.lastEffect&&(e.firstEffect=null),e.lastEffect=l.lastEffect,l=i,i=e.child;null!==i;)t=l,(c=i).flags&=2,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null,null===(I=c.alternate)?(c.childLanes=0,c.lanes=t,c.child=null,c.memoizedProps=null,c.memoizedState=null,c.updateQueue=null,c.dependencies=null,c.stateNode=null):(c.childLanes=I.childLanes,c.lanes=I.lanes,c.child=I.child,c.memoizedProps=I.memoizedProps,c.memoizedState=I.memoizedState,c.updateQueue=I.updateQueue,c.type=I.type,t=I.dependencies,c.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),i=i.sibling;return cn(Es,1&Es.current|2),e.child}t=t.sibling}null!==l.tail&&Jn()>Jc&&(e.flags|=64,c=!0,$a(l,!1),e.lanes=33554432)}else{if(!c)if(null!==(t=fs(I))){if(e.flags|=64,c=!0,null!==(i=t.updateQueue)&&(e.updateQueue=i,e.flags|=4),$a(l,!0),null===l.tail&&"hidden"===l.tailMode&&!I.alternate&&!Ts)return null!==(e=e.lastEffect=l.lastEffect)&&(e.nextEffect=null),null}else 2*Jn()-l.renderingStartTime>Jc&&1073741824!==i&&(e.flags|=64,c=!0,$a(l,!1),e.lanes=33554432);l.isBackwards?(I.sibling=e.child,e.child=I):(null!==(i=l.last)?i.sibling=I:e.child=I,l.last=I)}return null!==l.tail?(i=l.tail,l.rendering=i,l.tail=i.sibling,l.lastEffect=e.lastEffect,l.renderingStartTime=Jn(),i.sibling=null,e=Es.current,cn(Es,c?1&e|2:1&e),i):null;case 23:case 24:return Cg(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==l.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function ec(t){switch(t.tag){case 1:on(t.type)&&Fn();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Zs(),an(un),an(In),Ds(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Xs(t),null;case 13:return an(Es),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return an(Es),null;case 4:return Zs(),null;case 10:return $n(t),null;case 23:case 24:return Cg(),null;default:return null}}function ic(t,e){try{var i="",l=e;do{i+=z(l),l=l.return}while(l);var n=i}catch(t){n="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:n}}function lc(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}wa=function(t,e){for(var i=e.child;null!==i;){if(5===i.tag||6===i.tag)t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},Ma=function(t,e,i,l){var s=t.memoizedProps;if(s!==l){t=e.stateNode,ms(Rs.current);var a,c=null;switch(i){case"input":s=$(t,s),l=$(t,l),c=[];break;case"option":s=st(t,s),l=st(t,l),c=[];break;case"select":s=n({},s,{value:void 0}),l=n({},l,{value:void 0}),c=[];break;case"textarea":s=ct(t,s),l=ct(t,l),c=[];break;default:"function"!=typeof s.onClick&&"function"==typeof l.onClick&&(t.onclick=Wl)}for(d in pt(i,l),i=null,s)if(!l.hasOwnProperty(d)&&s.hasOwnProperty(d)&&null!=s[d])if("style"===d){var I=s[d];for(a in I)I.hasOwnProperty(a)&&(i||(i={}),i[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(g.hasOwnProperty(d)?c||(c=[]):(c=c||[]).push(d,null));for(d in l){var u=l[d];if(I=null!=s?s[d]:void 0,l.hasOwnProperty(d)&&u!==I&&(null!=u||null!=I))if("style"===d)if(I){for(a in I)!I.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(i||(i={}),i[a]="");for(a in u)u.hasOwnProperty(a)&&I[a]!==u[a]&&(i||(i={}),i[a]=u[a])}else i||(c||(c=[]),c.push(d,i)),i=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,I=I?I.__html:void 0,null!=u&&I!==u&&(c=c||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(c=c||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(g.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Rl("scroll",t),c||I===u||(c=[])):"object"==typeof u&&null!==u&&u.$$typeof===W?u.toString():(c=c||[]).push(d,u))}i&&(c=c||[]).push("style",i);var d=c;(e.updateQueue=d)&&(e.flags|=4)}},Da=function(t,e,i,l){i!==l&&(e.flags|=4)};var nc="function"==typeof WeakMap?WeakMap:Map;function sc(t,e,i){(i=as(-1,i)).tag=3,i.payload={element:null};var l=e.value;return i.callback=function(){wc||(wc=!0,Mc=l),lc(0,e)},i}function ac(t,e,i){(i=as(-1,i)).tag=3;var l=t.type.getDerivedStateFromError;if("function"==typeof l){var n=e.value;i.payload=function(){return lc(0,e),l(n)}}var s=t.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(i.callback=function(){"function"!=typeof l&&(null===Dc?Dc=new Set([this]):Dc.add(this),lc(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),i}var cc="function"==typeof WeakSet?WeakSet:Set;function gc(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Eg(t,e)}else e.current=null}function Ic(t,e){switch(e.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&e.flags&&null!==t){var i=t.memoizedProps,l=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?i:Pn(e.type,i),l),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&vl(e.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function uc(t,e,i){switch(i.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var l=t.create;t.destroy=l()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var n=t;l=n.next,0!=(4&(n=n.tag))&&0!=(1&n)&&(Zg(i,t),Sg(i,t)),t=l}while(t!==e)}return;case 1:return t=i.stateNode,4&i.flags&&(null===e?t.componentDidMount():(l=i.elementType===i.type?e.memoizedProps:Pn(i.type,e.memoizedProps),t.componentDidUpdate(l,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=i.updateQueue)&&us(i,e,t));case 3:if(null!==(e=i.updateQueue)){if(t=null,null!==i.child)switch(i.child.tag){case 5:t=i.child.stateNode;break;case 1:t=i.child.stateNode}us(i,e,t)}return;case 5:return t=i.stateNode,void(null===e&&4&i.flags&&Yl(i.type,i.memoizedProps)&&t.focus());case 6:case 4:case 12:return;case 13:return void(null===i.memoizedState&&(i=i.alternate,null!==i&&(i=i.memoizedState,null!==i&&(i=i.dehydrated,null!==i&&Ae(i)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function dc(t,e){for(var i=t;;){if(5===i.tag){var l=i.stateNode;if(e)"function"==typeof(l=l.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{l=i.stateNode;var n=i.memoizedProps.style;n=null!=n&&n.hasOwnProperty("display")?n.display:null,l.style.display=Vt("display",n)}}else if(6===i.tag)i.stateNode.nodeValue=e?"":i.memoizedProps;else if((23!==i.tag&&24!==i.tag||null===i.memoizedState||i===t)&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Bc(t,e){if(Vn&&"function"==typeof Vn.onCommitFiberUnmount)try{Vn.onCommitFiberUnmount(bn,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var i=t=t.next;do{var l=i,n=l.destroy;if(l=l.tag,void 0!==n)if(0!=(4&l))Zg(e,i);else{l=e;try{n()}catch(t){Eg(l,t)}}i=i.next}while(i!==t)}break;case 1:if(gc(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Eg(e,t)}break;case 5:gc(e);break;case 4:Qc(t,e)}}function oc(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function Fc(t){return 5===t.tag||3===t.tag||4===t.tag}function rc(t){t:{for(var e=t.return;null!==e;){if(Fc(e))break t;e=e.return}throw Error(a(160))}var i=e;switch(e=i.stateNode,i.tag){case 5:var l=!1;break;case 3:case 4:e=e.containerInfo,l=!0;break;default:throw Error(a(161))}16&i.flags&&(Ut(e,""),i.flags&=-17);t:e:for(i=t;;){for(;null===i.sibling;){if(null===i.return||Fc(i.return)){i=null;break t}i=i.return}for(i.sibling.return=i.return,i=i.sibling;5!==i.tag&&6!==i.tag&&18!==i.tag;){if(2&i.flags)continue e;if(null===i.child||4===i.tag)continue e;i.child.return=i,i=i.child}if(!(2&i.flags)){i=i.stateNode;break t}}l?Cc(t,i,e):Uc(t,i,e)}function Cc(t,e,i){var l=t.tag,n=5===l||6===l;if(n)t=n?t.stateNode:t.stateNode.instance,e?8===i.nodeType?i.parentNode.insertBefore(t,e):i.insertBefore(t,e):(8===i.nodeType?(e=i.parentNode).insertBefore(t,i):(e=i).appendChild(t),null!=(i=i._reactRootContainer)||null!==e.onclick||(e.onclick=Wl));else if(4!==l&&null!==(t=t.child))for(Cc(t,e,i),t=t.sibling;null!==t;)Cc(t,e,i),t=t.sibling}function Uc(t,e,i){var l=t.tag,n=5===l||6===l;if(n)t=n?t.stateNode:t.stateNode.instance,e?i.insertBefore(t,e):i.appendChild(t);else if(4!==l&&null!==(t=t.child))for(Uc(t,e,i),t=t.sibling;null!==t;)Uc(t,e,i),t=t.sibling}function Qc(t,e){for(var i,l,n=e,s=!1;;){if(!s){s=n.return;t:for(;;){if(null===s)throw Error(a(160));switch(i=s.stateNode,s.tag){case 5:l=!1;break t;case 3:case 4:i=i.containerInfo,l=!0;break t}s=s.return}s=!0}if(5===n.tag||6===n.tag){t:for(var c=t,g=n,I=g;;)if(Bc(c,I),null!==I.child&&4!==I.tag)I.child.return=I,I=I.child;else{if(I===g)break t;for(;null===I.sibling;){if(null===I.return||I.return===g)break t;I=I.return}I.sibling.return=I.return,I=I.sibling}l?(c=i,g=n.stateNode,8===c.nodeType?c.parentNode.removeChild(g):c.removeChild(g)):i.removeChild(n.stateNode)}else if(4===n.tag){if(null!==n.child){i=n.stateNode.containerInfo,l=!0,n.child.return=n,n=n.child;continue}}else if(Bc(t,n),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(s=!1)}n.sibling.return=n.return,n=n.sibling}}function bc(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var i=e.updateQueue;if(null!==(i=null!==i?i.lastEffect:null)){var l=i=i.next;do{3==(3&l.tag)&&(t=l.destroy,l.destroy=void 0,void 0!==t&&t()),l=l.next}while(l!==i)}return;case 1:return;case 5:if(null!=(i=e.stateNode)){l=e.memoizedProps;var n=null!==t?t.memoizedProps:l;t=e.type;var s=e.updateQueue;if(e.updateQueue=null,null!==s){for(i[Ol]=l,"input"===t&&"radio"===l.type&&null!=l.name&&et(i,l),Gt(t,n),e=Gt(t,l),n=0;n<s.length;n+=2){var c=s[n],g=s[n+1];"style"===c?At(i,g):"dangerouslySetInnerHTML"===c?Ct(i,g):"children"===c?Ut(i,g):V(i,c,g,e)}switch(t){case"input":it(i,l);break;case"textarea":It(i,l);break;case"select":t=i._wrapperState.wasMultiple,i._wrapperState.wasMultiple=!!l.multiple,null!=(s=l.value)?at(i,!!l.multiple,s,!1):t!==!!l.multiple&&(null!=l.defaultValue?at(i,!!l.multiple,l.defaultValue,!0):at(i,!!l.multiple,l.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((i=e.stateNode).hydrate&&(i.hydrate=!1,Ae(i.containerInfo)));case 12:return;case 13:return null!==e.memoizedState&&(Yc=Jn(),dc(e.child,!0)),void Vc(e);case 19:return void Vc(e);case 17:return;case 23:case 24:return void dc(e,null!==e.memoizedState)}throw Error(a(163))}function Vc(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var i=t.stateNode;null===i&&(i=t.stateNode=new cc),e.forEach((function(e){var l=Wg.bind(null,t,e);i.has(e)||(i.add(e),e.then(l,l))}))}}function Ac(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var xc=Math.ceil,pc=A.ReactCurrentDispatcher,Gc=A.ReactCurrentOwner,Rc=0,Lc=null,hc=null,mc=0,Sc=0,Zc=sn(0),yc=0,Xc=null,Ec=0,fc=0,Wc=0,Nc=0,Tc=null,Yc=0,Jc=1/0;function Hc(){Jc=Jn()+500}var kc,vc=null,wc=!1,Mc=null,Dc=null,zc=!1,Pc=null,Oc=90,jc=[],Kc=[],_c=null,qc=0,$c=null,tg=-1,eg=0,ig=0,lg=null,ng=!1;function sg(){return 0!=(48&Rc)?Jn():-1!==tg?tg:tg=Jn()}function ag(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hn()?1:2;if(0===eg&&(eg=Ec),0!==zn.transition){0!==ig&&(ig=null!==Tc?Tc.pendingLanes:0),t=eg;var e=4186112&~ig;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hn(),t=Je(0!=(4&Rc)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),eg)}function cg(t,e,i){if(50<qc)throw qc=0,$c=null,Error(a(185));if(null===(t=gg(t,e)))return null;ve(t,e,i),t===Lc&&(Wc|=e,4===yc&&dg(t,mc));var l=Hn();1===e?0!=(8&Rc)&&0==(48&Rc)?Bg(t):(Ig(t,i),0===Rc&&(Hc(),Mn())):(0==(4&Rc)||98!==l&&99!==l||(null===_c?_c=new Set([t]):_c.add(t)),Ig(t,i)),Tc=t}function gg(t,e){t.lanes|=e;var i=t.alternate;for(null!==i&&(i.lanes|=e),i=t,t=t.return;null!==t;)t.childLanes|=e,null!==(i=t.alternate)&&(i.childLanes|=e),i=t,t=t.return;return 3===i.tag?i.stateNode:null}function Ig(t,e){for(var i=t.callbackNode,l=t.suspendedLanes,n=t.pingedLanes,s=t.expirationTimes,c=t.pendingLanes;0<c;){var g=31-we(c),I=1<<g,u=s[g];if(-1===u){if(0==(I&l)||0!=(I&n)){u=e,Ne(I);var d=We;s[g]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=e&&(t.expiredLanes|=I);c&=~I}if(l=Te(t,t===Lc?mc:0),e=We,0===l)null!==i&&(i!==En&&pn(i),t.callbackNode=null,t.callbackPriority=0);else{if(null!==i){if(t.callbackPriority===e)return;i!==En&&pn(i)}15===e?(i=Bg.bind(null,t),null===Wn?(Wn=[i],Nn=xn(mn,Dn)):Wn.push(i),i=En):i=14===e?wn(99,Bg.bind(null,t)):wn(i=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),ug.bind(null,t)),t.callbackPriority=e,t.callbackNode=i}}function ug(t){if(tg=-1,ig=eg=0,0!=(48&Rc))throw Error(a(327));var e=t.callbackNode;if(mg()&&t.callbackNode!==e)return null;var i=Te(t,t===Lc?mc:0);if(0===i)return null;var l=i,n=Rc;Rc|=16;var s=bg();for(Lc===t&&mc===l||(Hc(),Ug(t,l));;)try{xg();break}catch(e){Qg(t,e)}if(qn(),pc.current=s,Rc=n,null!==hc?l=0:(Lc=null,mc=0,l=yc),0!=(Ec&Wc))Ug(t,0);else if(0!==l){if(2===l&&(Rc|=64,t.hydrate&&(t.hydrate=!1,vl(t.containerInfo)),0!==(i=Ye(t))&&(l=Vg(t,i))),1===l)throw e=Xc,Ug(t,0),dg(t,i),Ig(t,Jn()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=i,l){case 0:case 1:throw Error(a(345));case 2:Rg(t);break;case 3:if(dg(t,i),(62914560&i)===i&&10<(l=Yc+500-Jn())){if(0!==Te(t,0))break;if(((n=t.suspendedLanes)&i)!==i){sg(),t.pingedLanes|=t.suspendedLanes&n;break}t.timeoutHandle=Hl(Rg.bind(null,t),l);break}Rg(t);break;case 4:if(dg(t,i),(4186112&i)===i)break;for(l=t.eventTimes,n=-1;0<i;){var c=31-we(i);s=1<<c,(c=l[c])>n&&(n=c),i&=~s}if(i=n,10<(i=(120>(i=Jn()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*xc(i/1960))-i)){t.timeoutHandle=Hl(Rg.bind(null,t),i);break}Rg(t);break;case 5:Rg(t);break;default:throw Error(a(329))}}return Ig(t,Jn()),t.callbackNode===e?ug.bind(null,t):null}function dg(t,e){for(e&=~Nc,e&=~Wc,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var i=31-we(e),l=1<<i;t[i]=-1,e&=~l}}function Bg(t){if(0!=(48&Rc))throw Error(a(327));if(mg(),t===Lc&&0!=(t.expiredLanes&mc)){var e=mc,i=Vg(t,e);0!=(Ec&Wc)&&(i=Vg(t,e=Te(t,e)))}else i=Vg(t,e=Te(t,0));if(0!==t.tag&&2===i&&(Rc|=64,t.hydrate&&(t.hydrate=!1,vl(t.containerInfo)),0!==(e=Ye(t))&&(i=Vg(t,e))),1===i)throw i=Xc,Ug(t,0),dg(t,e),Ig(t,Jn()),i;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Rg(t),Ig(t,Jn()),null}function og(t,e){var i=Rc;Rc|=1;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Mn())}}function Fg(t,e){var i=Rc;Rc&=-2,Rc|=8;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Mn())}}function rg(t,e){cn(Zc,Sc),Sc|=e,Ec|=e}function Cg(){Sc=Zc.current,an(Zc)}function Ug(t,e){t.finishedWork=null,t.finishedLanes=0;var i=t.timeoutHandle;if(-1!==i&&(t.timeoutHandle=-1,kl(i)),null!==hc)for(i=hc.return;null!==i;){var l=i;switch(l.tag){case 1:null!=(l=l.type.childContextTypes)&&Fn();break;case 3:Zs(),an(un),an(In),Ds();break;case 5:Xs(l);break;case 4:Zs();break;case 13:case 19:an(Es);break;case 10:$n(l);break;case 23:case 24:Cg()}i=i.return}Lc=t,hc=Jg(t.current,null),mc=Sc=Ec=e,yc=0,Xc=null,Nc=Wc=fc=0}function Qg(t,e){for(;;){var i=hc;try{if(qn(),zs.current=ha,qs){for(var l=js.memoizedState;null!==l;){var n=l.queue;null!==n&&(n.pending=null),l=l.next}qs=!1}if(Os=0,_s=Ks=js=null,$s=!1,Gc.current=null,null===i||null===i.return){yc=1,Xc=e,hc=null;break}t:{var s=t,a=i.return,c=i,g=e;if(e=mc,c.flags|=2048,c.firstEffect=c.lastEffect=null,null!==g&&"object"==typeof g&&"function"==typeof g.then){var I=g;if(0==(2&c.mode)){var u=c.alternate;u?(c.updateQueue=u.updateQueue,c.memoizedState=u.memoizedState,c.lanes=u.lanes):(c.updateQueue=null,c.memoizedState=null)}var d=0!=(1&Es.current),B=a;do{var o;if(o=13===B.tag){var F=B.memoizedState;if(null!==F)o=null!==F.dehydrated;else{var r=B.memoizedProps;o=void 0!==r.fallback&&(!0!==r.unstable_avoidThisFallback||!d)}}if(o){var C=B.updateQueue;if(null===C){var U=new Set;U.add(I),B.updateQueue=U}else C.add(I);if(0==(2&B.mode)){if(B.flags|=64,c.flags|=16384,c.flags&=-2981,1===c.tag)if(null===c.alternate)c.tag=17;else{var Q=as(-1,1);Q.tag=2,cs(c,Q)}c.lanes|=1;break t}g=void 0,c=e;var b=s.pingCache;if(null===b?(b=s.pingCache=new nc,g=new Set,b.set(I,g)):void 0===(g=b.get(I))&&(g=new Set,b.set(I,g)),!g.has(c)){g.add(c);var V=fg.bind(null,s,I,c);I.then(V,V)}B.flags|=4096,B.lanes=e;break t}B=B.return}while(null!==B);g=Error((P(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==yc&&(yc=2),g=ic(g,c),B=a;do{switch(B.tag){case 3:s=g,B.flags|=4096,e&=-e,B.lanes|=e,gs(B,sc(0,s,e));break t;case 1:s=g;var A=B.type,x=B.stateNode;if(0==(64&B.flags)&&("function"==typeof A.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Dc||!Dc.has(x)))){B.flags|=4096,e&=-e,B.lanes|=e,gs(B,ac(B,s,e));break t}}B=B.return}while(null!==B)}Gg(i)}catch(t){e=t,hc===i&&null!==i&&(hc=i=i.return);continue}break}}function bg(){var t=pc.current;return pc.current=ha,null===t?ha:t}function Vg(t,e){var i=Rc;Rc|=16;var l=bg();for(Lc===t&&mc===e||Ug(t,e);;)try{Ag();break}catch(e){Qg(t,e)}if(qn(),Rc=i,pc.current=l,null!==hc)throw Error(a(261));return Lc=null,mc=0,yc}function Ag(){for(;null!==hc;)pg(hc)}function xg(){for(;null!==hc&&!Gn();)pg(hc)}function pg(t){var e=kc(t.alternate,t,Sc);t.memoizedProps=t.pendingProps,null===e?Gg(t):hc=e,Gc.current=null}function Gg(t){var e=t;do{var i=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(i=tc(i,e,Sc)))return void(hc=i);if(24!==(i=e).tag&&23!==i.tag||null===i.memoizedState||0!=(1073741824&Sc)||0==(4&i.mode)){for(var l=0,n=i.child;null!==n;)l|=n.lanes|n.childLanes,n=n.sibling;i.childLanes=l}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(i=ec(e)))return i.flags&=2047,void(hc=i);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(hc=e);hc=e=t}while(null!==e);0===yc&&(yc=5)}function Rg(t){var e=Hn();return vn(99,Lg.bind(null,t,e)),null}function Lg(t,e){do{mg()}while(null!==Pc);if(0!=(48&Rc))throw Error(a(327));var i=t.finishedWork;if(null===i)return null;if(t.finishedWork=null,t.finishedLanes=0,i===t.current)throw Error(a(177));t.callbackNode=null;var l=i.lanes|i.childLanes,n=l,s=t.pendingLanes&~n;t.pendingLanes=n,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=n,t.mutableReadLanes&=n,t.entangledLanes&=n,n=t.entanglements;for(var c=t.eventTimes,g=t.expirationTimes;0<s;){var I=31-we(s),u=1<<I;n[I]=0,c[I]=-1,g[I]=-1,s&=~u}if(null!==_c&&0==(24&l)&&_c.has(t)&&_c.delete(t),t===Lc&&(hc=Lc=null,mc=0),1<i.flags?null!==i.lastEffect?(i.lastEffect.nextEffect=i,l=i.firstEffect):l=i:l=i.firstEffect,null!==l){if(n=Rc,Rc|=32,Gc.current=null,Nl=Oe,Bl(c=dl())){if("selectionStart"in c)g={start:c.selectionStart,end:c.selectionEnd};else t:if(g=(g=c.ownerDocument)&&g.defaultView||window,(u=g.getSelection&&g.getSelection())&&0!==u.rangeCount){g=u.anchorNode,s=u.anchorOffset,I=u.focusNode,u=u.focusOffset;try{g.nodeType,I.nodeType}catch(t){g=null;break t}var d=0,B=-1,o=-1,F=0,r=0,C=c,U=null;e:for(;;){for(var Q;C!==g||0!==s&&3!==C.nodeType||(B=d+s),C!==I||0!==u&&3!==C.nodeType||(o=d+u),3===C.nodeType&&(d+=C.nodeValue.length),null!==(Q=C.firstChild);)U=C,C=Q;for(;;){if(C===c)break e;if(U===g&&++F===s&&(B=d),U===I&&++r===u&&(o=d),null!==(Q=C.nextSibling))break;U=(C=U).parentNode}C=Q}g=-1===B||-1===o?null:{start:B,end:o}}else g=null;g=g||{start:0,end:0}}else g=null;Tl={focusedElem:c,selectionRange:g},Oe=!1,lg=null,ng=!1,vc=l;do{try{hg()}catch(t){if(null===vc)throw Error(a(330));Eg(vc,t),vc=vc.nextEffect}}while(null!==vc);lg=null,vc=l;do{try{for(c=t;null!==vc;){var b=vc.flags;if(16&b&&Ut(vc.stateNode,""),128&b){var V=vc.alternate;if(null!==V){var A=V.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(1038&b){case 2:rc(vc),vc.flags&=-3;break;case 6:rc(vc),vc.flags&=-3,bc(vc.alternate,vc);break;case 1024:vc.flags&=-1025;break;case 1028:vc.flags&=-1025,bc(vc.alternate,vc);break;case 4:bc(vc.alternate,vc);break;case 8:Qc(c,g=vc);var x=g.alternate;oc(g),null!==x&&oc(x)}vc=vc.nextEffect}}catch(t){if(null===vc)throw Error(a(330));Eg(vc,t),vc=vc.nextEffect}}while(null!==vc);if(A=Tl,V=dl(),b=A.focusedElem,c=A.selectionRange,V!==b&&b&&b.ownerDocument&&ul(b.ownerDocument.documentElement,b)){null!==c&&Bl(b)&&(V=c.start,void 0===(A=c.end)&&(A=V),"selectionStart"in b?(b.selectionStart=V,b.selectionEnd=Math.min(A,b.value.length)):(A=(V=b.ownerDocument||document)&&V.defaultView||window).getSelection&&(A=A.getSelection(),g=b.textContent.length,x=Math.min(c.start,g),c=void 0===c.end?x:Math.min(c.end,g),!A.extend&&x>c&&(g=c,c=x,x=g),g=Il(b,x),s=Il(b,c),g&&s&&(1!==A.rangeCount||A.anchorNode!==g.node||A.anchorOffset!==g.offset||A.focusNode!==s.node||A.focusOffset!==s.offset)&&((V=V.createRange()).setStart(g.node,g.offset),A.removeAllRanges(),x>c?(A.addRange(V),A.extend(s.node,s.offset)):(V.setEnd(s.node,s.offset),A.addRange(V))))),V=[];for(A=b;A=A.parentNode;)1===A.nodeType&&V.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<V.length;b++)(A=V[b]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Oe=!!Nl,Tl=Nl=null,t.current=i,vc=l;do{try{for(b=t;null!==vc;){var p=vc.flags;if(36&p&&uc(b,vc.alternate,vc),128&p){V=void 0;var G=vc.ref;if(null!==G){var R=vc.stateNode;switch(vc.tag){case 5:V=R;break;default:V=R}"function"==typeof G?G(V):G.current=V}}vc=vc.nextEffect}}catch(t){if(null===vc)throw Error(a(330));Eg(vc,t),vc=vc.nextEffect}}while(null!==vc);vc=null,fn(),Rc=n}else t.current=i;if(zc)zc=!1,Pc=t,Oc=e;else for(vc=l;null!==vc;)e=vc.nextEffect,vc.nextEffect=null,8&vc.flags&&((p=vc).sibling=null,p.stateNode=null),vc=e;if(0===(l=t.pendingLanes)&&(Dc=null),1===l?t===$c?qc++:(qc=0,$c=t):qc=0,i=i.stateNode,Vn&&"function"==typeof Vn.onCommitFiberRoot)try{Vn.onCommitFiberRoot(bn,i,void 0,64==(64&i.current.flags))}catch(t){}if(Ig(t,Jn()),wc)throw wc=!1,t=Mc,Mc=null,t;return 0!=(8&Rc)||Mn(),null}function hg(){for(;null!==vc;){var t=vc.alternate;ng||null===lg||(0!=(8&vc.flags)?$t(vc,lg)&&(ng=!0):13===vc.tag&&Ac(t,vc)&&$t(vc,lg)&&(ng=!0));var e=vc.flags;0!=(256&e)&&Ic(t,vc),0==(512&e)||zc||(zc=!0,wn(97,(function(){return mg(),null}))),vc=vc.nextEffect}}function mg(){if(90!==Oc){var t=97<Oc?97:Oc;return Oc=90,vn(t,yg)}return!1}function Sg(t,e){jc.push(e,t),zc||(zc=!0,wn(97,(function(){return mg(),null})))}function Zg(t,e){Kc.push(e,t),zc||(zc=!0,wn(97,(function(){return mg(),null})))}function yg(){if(null===Pc)return!1;var t=Pc;if(Pc=null,0!=(48&Rc))throw Error(a(331));var e=Rc;Rc|=32;var i=Kc;Kc=[];for(var l=0;l<i.length;l+=2){var n=i[l],s=i[l+1],c=n.destroy;if(n.destroy=void 0,"function"==typeof c)try{c()}catch(t){if(null===s)throw Error(a(330));Eg(s,t)}}for(i=jc,jc=[],l=0;l<i.length;l+=2){n=i[l],s=i[l+1];try{var g=n.create;n.destroy=g()}catch(t){if(null===s)throw Error(a(330));Eg(s,t)}}for(g=t.current.firstEffect;null!==g;)t=g.nextEffect,g.nextEffect=null,8&g.flags&&(g.sibling=null,g.stateNode=null),g=t;return Rc=e,Mn(),!0}function Xg(t,e,i){cs(t,e=sc(0,e=ic(i,e),1)),e=sg(),null!==(t=gg(t,1))&&(ve(t,1,e),Ig(t,e))}function Eg(t,e){if(3===t.tag)Xg(t,t,e);else for(var i=t.return;null!==i;){if(3===i.tag){Xg(i,t,e);break}if(1===i.tag){var l=i.stateNode;if("function"==typeof i.type.getDerivedStateFromError||"function"==typeof l.componentDidCatch&&(null===Dc||!Dc.has(l))){var n=ac(i,t=ic(e,t),1);if(cs(i,n),n=sg(),null!==(i=gg(i,1)))ve(i,1,n),Ig(i,n);else if("function"==typeof l.componentDidCatch&&(null===Dc||!Dc.has(l)))try{l.componentDidCatch(e,t)}catch(t){}break}}i=i.return}}function fg(t,e,i){var l=t.pingCache;null!==l&&l.delete(e),e=sg(),t.pingedLanes|=t.suspendedLanes&i,Lc===t&&(mc&i)===i&&(4===yc||3===yc&&(62914560&mc)===mc&&500>Jn()-Yc?Ug(t,0):Nc|=i),Ig(t,e)}function Wg(t,e){var i=t.stateNode;null!==i&&i.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hn()?1:2:(0===eg&&(eg=Ec),0===(e=He(62914560&~eg))&&(e=4194304))),i=sg(),null!==(t=gg(t,e))&&(ve(t,e,i),Ig(t,i))}function Ng(t,e,i,l){this.tag=t,this.key=i,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=l,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Tg(t,e,i,l){return new Ng(t,e,i,l)}function Yg(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Jg(t,e){var i=t.alternate;return null===i?((i=Tg(t.tag,e,t.key,t.mode)).elementType=t.elementType,i.type=t.type,i.stateNode=t.stateNode,i.alternate=t,t.alternate=i):(i.pendingProps=e,i.type=t.type,i.flags=0,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null),i.childLanes=t.childLanes,i.lanes=t.lanes,i.child=t.child,i.memoizedProps=t.memoizedProps,i.memoizedState=t.memoizedState,i.updateQueue=t.updateQueue,e=t.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},i.sibling=t.sibling,i.index=t.index,i.ref=t.ref,i}function Hg(t,e,i,l,n,s){var c=2;if(l=t,"function"==typeof t)Yg(t)&&(c=1);else if("string"==typeof t)c=5;else t:switch(t){case G:return kg(i.children,n,s,e);case N:c=8,n|=16;break;case R:c=8,n|=1;break;case L:return(t=Tg(12,i,e,8|n)).elementType=L,t.type=L,t.lanes=s,t;case Z:return(t=Tg(13,i,e,n)).type=Z,t.elementType=Z,t.lanes=s,t;case y:return(t=Tg(19,i,e,n)).elementType=y,t.lanes=s,t;case T:return vg(i,n,s,e);case Y:return(t=Tg(24,i,e,n)).elementType=Y,t.lanes=s,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case h:c=10;break t;case m:c=9;break t;case S:c=11;break t;case X:c=14;break t;case E:c=16,l=null;break t;case f:c=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Tg(c,i,e,n)).elementType=t,e.type=l,e.lanes=s,e}function kg(t,e,i,l){return(t=Tg(7,t,l,e)).lanes=i,t}function vg(t,e,i,l){return(t=Tg(23,t,l,e)).elementType=T,t.lanes=i,t}function wg(t,e,i){return(t=Tg(6,t,null,e)).lanes=i,t}function Mg(t,e,i){return(e=Tg(4,null!==t.children?t.children:[],t.key,e)).lanes=i,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Dg(t,e,i){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=i,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=ke(0),this.expirationTimes=ke(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ke(0),this.mutableSourceEagerHydrationData=null}function zg(t,e,i){var l=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:p,key:null==l?null:""+l,children:t,containerInfo:e,implementation:i}}function Pg(t,e,i,l){var n=e.current,s=sg(),c=ag(n);t:if(i){e:{if(jt(i=i._reactInternals)!==i||1!==i.tag)throw Error(a(170));var g=i;do{switch(g.tag){case 3:g=g.stateNode.context;break e;case 1:if(on(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break e}}g=g.return}while(null!==g);throw Error(a(171))}if(1===i.tag){var I=i.type;if(on(I)){i=Cn(i,I,g);break t}}i=g}else i=gn;return null===e.context?e.context=i:e.pendingContext=i,(e=as(s,c)).payload={element:t},null!==(l=void 0===l?null:l)&&(e.callback=l),cs(n,e),cg(n,c,s),c}function Og(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function jg(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var i=t.retryLane;t.retryLane=0!==i&&i<e?i:e}}function Kg(t,e){jg(t,e),(t=t.alternate)&&jg(t,e)}function _g(t,e,i){var l=null!=i&&null!=i.hydrationOptions&&i.hydrationOptions.mutableSources||null;if(i=new Dg(t,e,null!=i&&!0===i.hydrate),e=Tg(3,null,null,2===e?7:1===e?3:0),i.current=e,e.stateNode=i,ns(e),t[jl]=i.current,hl(8===t.nodeType?t.parentNode:t),l)for(t=0;t<l.length;t++){var n=(e=l[t])._getVersion;n=n(e._source),null==i.mutableSourceEagerHydrationData?i.mutableSourceEagerHydrationData=[e,n]:i.mutableSourceEagerHydrationData.push(e,n)}this._internalRoot=i}function qg(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function $g(t,e,i,l,n){var s=i._reactRootContainer;if(s){var a=s._internalRoot;if("function"==typeof n){var c=n;n=function(){var t=Og(a);c.call(t)}}Pg(e,a,t,n)}else{if(s=i._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var i;i=t.lastChild;)t.removeChild(i);return new _g(t,0,e?{hydrate:!0}:void 0)}(i,l),a=s._internalRoot,"function"==typeof n){var g=n;n=function(){var t=Og(a);g.call(t)}}Fg((function(){Pg(e,a,t,n)}))}return Og(a)}function tI(t,e){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!qg(e))throw Error(a(200));return zg(t,e,null,i)}kc=function(t,e,i){var l=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||un.current)Xa=!0;else{if(0==(i&l)){switch(Xa=!1,e.tag){case 3:va(e),ws();break;case 5:ys(e);break;case 1:on(e.type)&&Un(e);break;case 4:Ss(e,e.stateNode.containerInfo);break;case 10:l=e.memoizedProps.value;var n=e.type._context;cn(On,n._currentValue),n._currentValue=l;break;case 13:if(null!==e.memoizedState)return 0!=(i&e.child.childLanes)?Pa(t,e,i):(cn(Es,1&Es.current),null!==(e=qa(t,e,i))?e.sibling:null);cn(Es,1&Es.current);break;case 19:if(l=0!=(i&e.childLanes),0!=(64&t.flags)){if(l)return _a(t,e,i);e.flags|=64}if(null!==(n=e.memoizedState)&&(n.rendering=null,n.tail=null,n.lastEffect=null),cn(Es,Es.current),l)break;return null;case 23:case 24:return e.lanes=0,Ta(t,e,i)}return qa(t,e,i)}Xa=0!=(16384&t.flags)}else Xa=!1;switch(e.lanes=0,e.tag){case 2:if(l=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,n=Bn(e,In.current),es(e,i),n=ia(null,e,l,t,n,i),e.flags|=1,"object"==typeof n&&null!==n&&"function"==typeof n.render&&void 0===n.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,on(l)){var s=!0;Un(e)}else s=!1;e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,ns(e);var c=l.getDerivedStateFromProps;"function"==typeof c&&Bs(e,l,c,t),n.updater=os,e.stateNode=n,n._reactInternals=e,Us(e,l,t,i),e=ka(null,e,l,!0,s,i)}else e.tag=0,Ea(null,e,n,i),e=e.child;return e;case 16:n=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,n=(s=n._init)(n._payload),e.type=n,s=e.tag=function(t){if("function"==typeof t)return Yg(t)?1:0;if(null!=t){if((t=t.$$typeof)===S)return 11;if(t===X)return 14}return 2}(n),t=Pn(n,t),s){case 0:e=Ja(null,e,n,t,i);break t;case 1:e=Ha(null,e,n,t,i);break t;case 11:e=fa(null,e,n,t,i);break t;case 14:e=Wa(null,e,n,Pn(n.type,t),l,i);break t}throw Error(a(306,n,""))}return e;case 0:return l=e.type,n=e.pendingProps,Ja(t,e,l,n=e.elementType===l?n:Pn(l,n),i);case 1:return l=e.type,n=e.pendingProps,Ha(t,e,l,n=e.elementType===l?n:Pn(l,n),i);case 3:if(va(e),l=e.updateQueue,null===t||null===l)throw Error(a(282));if(l=e.pendingProps,n=null!==(n=e.memoizedState)?n.element:null,ss(t,e),Is(e,l,null,i),(l=e.memoizedState.element)===n)ws(),e=qa(t,e,i);else{if((s=(n=e.stateNode).hydrate)&&(Ns=wl(e.stateNode.containerInfo.firstChild),Ws=e,s=Ts=!0),s){if(null!=(t=n.mutableSourceEagerHydrationData))for(n=0;n<t.length;n+=2)(s=t[n])._workInProgressVersionPrimary=t[n+1],Ms.push(s);for(i=ps(e,null,l,i),e.child=i;i;)i.flags=-3&i.flags|1024,i=i.sibling}else Ea(t,e,l,i),ws();e=e.child}return e;case 5:return ys(e),null===t&&Hs(e),l=e.type,n=e.pendingProps,s=null!==t?t.memoizedProps:null,c=n.children,Jl(l,n)?c=null:null!==s&&Jl(l,s)&&(e.flags|=16),Ya(t,e),Ea(t,e,c,i),e.child;case 6:return null===t&&Hs(e),null;case 13:return Pa(t,e,i);case 4:return Ss(e,e.stateNode.containerInfo),l=e.pendingProps,null===t?e.child=xs(e,null,l,i):Ea(t,e,l,i),e.child;case 11:return l=e.type,n=e.pendingProps,fa(t,e,l,n=e.elementType===l?n:Pn(l,n),i);case 7:return Ea(t,e,e.pendingProps,i),e.child;case 8:case 12:return Ea(t,e,e.pendingProps.children,i),e.child;case 10:t:{l=e.type._context,n=e.pendingProps,c=e.memoizedProps,s=n.value;var g=e.type._context;if(cn(On,g._currentValue),g._currentValue=s,null!==c)if(g=c.value,0==(s=sl(g,s)?0:0|("function"==typeof l._calculateChangedBits?l._calculateChangedBits(g,s):1073741823))){if(c.children===n.children&&!un.current){e=qa(t,e,i);break t}}else for(null!==(g=e.child)&&(g.return=e);null!==g;){var I=g.dependencies;if(null!==I){c=g.child;for(var u=I.firstContext;null!==u;){if(u.context===l&&0!=(u.observedBits&s)){1===g.tag&&((u=as(-1,i&-i)).tag=2,cs(g,u)),g.lanes|=i,null!==(u=g.alternate)&&(u.lanes|=i),ts(g.return,i),I.lanes|=i;break}u=u.next}}else c=10===g.tag&&g.type===e.type?null:g.child;if(null!==c)c.return=g;else for(c=g;null!==c;){if(c===e){c=null;break}if(null!==(g=c.sibling)){g.return=c.return,c=g;break}c=c.return}g=c}Ea(t,e,n.children,i),e=e.child}return e;case 9:return n=e.type,l=(s=e.pendingProps).children,es(e,i),l=l(n=is(n,s.unstable_observedBits)),e.flags|=1,Ea(t,e,l,i),e.child;case 14:return s=Pn(n=e.type,e.pendingProps),Wa(t,e,n,s=Pn(n.type,s),l,i);case 15:return Na(t,e,e.type,e.pendingProps,l,i);case 17:return l=e.type,n=e.pendingProps,n=e.elementType===l?n:Pn(l,n),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,on(l)?(t=!0,Un(e)):t=!1,es(e,i),rs(e,l,n),Us(e,l,n,i),ka(null,e,l,!0,t,i);case 19:return _a(t,e,i);case 23:case 24:return Ta(t,e,i)}throw Error(a(156,e.tag))},_g.prototype.render=function(t){Pg(t,this._internalRoot,null,null)},_g.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Pg(null,t,null,(function(){e[jl]=null}))},te=function(t){13===t.tag&&(cg(t,4,sg()),Kg(t,4))},ee=function(t){13===t.tag&&(cg(t,67108864,sg()),Kg(t,67108864))},ie=function(t){if(13===t.tag){var e=sg(),i=ag(t);cg(t,i,e),Kg(t,i)}},le=function(t,e){return e()},Lt=function(t,e,i){switch(e){case"input":if(it(t,i),e=i.name,"radio"===i.type&&null!=e){for(i=t;i.parentNode;)i=i.parentNode;for(i=i.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<i.length;e++){var l=i[e];if(l!==t&&l.form===t.form){var n=tn(l);if(!n)throw Error(a(90));_(l),it(l,n)}}}break;case"textarea":It(t,i);break;case"select":null!=(e=i.value)&&at(t,!!i.multiple,e,!1)}},Xt=og,Et=function(t,e,i,l,n){var s=Rc;Rc|=4;try{return vn(98,t.bind(null,e,i,l,n))}finally{0===(Rc=s)&&(Hc(),Mn())}},ft=function(){0==(49&Rc)&&(function(){if(null!==_c){var t=_c;_c=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,Ig(t,Jn())}))}Mn()}(),mg())},Wt=function(t,e){var i=Rc;Rc|=2;try{return t(e)}finally{0===(Rc=i)&&(Hc(),Mn())}};var eI={Events:[ql,$l,tn,Zt,yt,mg,{current:!1}]},iI={findFiberByHostInstance:_l,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lI={bundleType:iI.bundleType,version:iI.version,rendererPackageName:iI.rendererPackageName,rendererConfig:iI.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=qt(t))?null:t.stateNode},findFiberByHostInstance:iI.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var nI=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!nI.isDisabled&&nI.supportsFiber)try{bn=nI.inject(lI),Vn=nI}catch(rt){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eI,e.createPortal=tI,e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw Error(a(268,Object.keys(t)))}return null===(t=qt(e))?null:t.stateNode},e.flushSync=function(t,e){var i=Rc;if(0!=(48&i))return t(e);Rc|=1;try{if(t)return vn(99,t.bind(null,e))}finally{Rc=i,Mn()}},e.hydrate=function(t,e,i){if(!qg(e))throw Error(a(200));return $g(null,t,e,!0,i)},e.render=function(t,e,i){if(!qg(e))throw Error(a(200));return $g(null,t,e,!1,i)},e.unmountComponentAtNode=function(t){if(!qg(t))throw Error(a(40));return!!t._reactRootContainer&&(Fg((function(){$g(null,null,t,!1,(function(){t._reactRootContainer=null,t[jl]=null}))})),!0)},e.unstable_batchedUpdates=og,e.unstable_createPortal=function(t,e){return tI(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},e.unstable_renderSubtreeIntoContainer=function(t,e,i,l){if(!qg(i))throw Error(a(200));if(null==t||void 0===t._reactInternals)throw Error(a(38));return $g(t,e,i,!1,l)},e.version="17.0.2"},3935:(t,e,i)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=i(4448)},9921:(t,e)=>{"use strict";var i="function"==typeof Symbol&&Symbol.for,l=i?Symbol.for("react.element"):60103,n=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,a=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,g=i?Symbol.for("react.provider"):60109,I=i?Symbol.for("react.context"):60110,u=i?Symbol.for("react.async_mode"):60111,d=i?Symbol.for("react.concurrent_mode"):60111,B=i?Symbol.for("react.forward_ref"):60112,o=i?Symbol.for("react.suspense"):60113,F=i?Symbol.for("react.suspense_list"):60120,r=i?Symbol.for("react.memo"):60115,C=i?Symbol.for("react.lazy"):60116,U=i?Symbol.for("react.block"):60121,Q=i?Symbol.for("react.fundamental"):60117,b=i?Symbol.for("react.responder"):60118,V=i?Symbol.for("react.scope"):60119;function A(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case l:switch(t=t.type){case u:case d:case s:case c:case a:case o:return t;default:switch(t=t&&t.$$typeof){case I:case B:case C:case r:case g:return t;default:return e}}case n:return e}}}function x(t){return A(t)===d}e.AsyncMode=u,e.ConcurrentMode=d,e.ContextConsumer=I,e.ContextProvider=g,e.Element=l,e.ForwardRef=B,e.Fragment=s,e.Lazy=C,e.Memo=r,e.Portal=n,e.Profiler=c,e.StrictMode=a,e.Suspense=o,e.isAsyncMode=function(t){return x(t)||A(t)===u},e.isConcurrentMode=x,e.isContextConsumer=function(t){return A(t)===I},e.isContextProvider=function(t){return A(t)===g},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===l},e.isForwardRef=function(t){return A(t)===B},e.isFragment=function(t){return A(t)===s},e.isLazy=function(t){return A(t)===C},e.isMemo=function(t){return A(t)===r},e.isPortal=function(t){return A(t)===n},e.isProfiler=function(t){return A(t)===c},e.isStrictMode=function(t){return A(t)===a},e.isSuspense=function(t){return A(t)===o},e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===s||t===d||t===c||t===a||t===o||t===F||"object"==typeof t&&null!==t&&(t.$$typeof===C||t.$$typeof===r||t.$$typeof===g||t.$$typeof===I||t.$$typeof===B||t.$$typeof===Q||t.$$typeof===b||t.$$typeof===V||t.$$typeof===U)},e.typeOf=A},9864:(t,e,i)=>{"use strict";t.exports=i(9921)},8928:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Provider:()=>u,ReactReduxContext:()=>n,batch:()=>$.unstable_batchedUpdates,connect:()=>w,connectAdvanced:()=>R,createDispatchHook:()=>P,createSelectorHook:()=>K,createStoreHook:()=>D,shallowEqual:()=>h,useDispatch:()=>O,useSelector:()=>q,useStore:()=>z});var l=i(7294),n=(i(5697),l.createContext(null)),s=function(t){t()},a=function(){return s},c={notify:function(){},get:function(){return[]}};function g(t,e){var i,l=c;function n(){g.onStateChange&&g.onStateChange()}function s(){i||(i=e?e.addNestedSub(n):t.subscribe(n),l=function(){var t=a(),e=null,i=null;return{clear:function(){e=null,i=null},notify:function(){t((function(){for(var t=e;t;)t.callback(),t=t.next}))},get:function(){for(var t=[],i=e;i;)t.push(i),i=i.next;return t},subscribe:function(t){var l=!0,n=i={callback:t,next:null,prev:i};return n.prev?n.prev.next=n:e=n,function(){l&&null!==e&&(l=!1,n.next?n.next.prev=n.prev:i=n.prev,n.prev?n.prev.next=n.next:e=n.next)}}}}())}var g={addNestedSub:function(t){return s(),l.subscribe(t)},notifyNestedSubs:function(){l.notify()},handleChangeWrapper:n,isSubscribed:function(){return Boolean(i)},trySubscribe:s,tryUnsubscribe:function(){i&&(i(),i=void 0,l.clear(),l=c)},getListeners:function(){return l}};return g}var I="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;const u=function(t){var e=t.store,i=t.context,s=t.children,a=(0,l.useMemo)((function(){var t=g(e);return t.onStateChange=t.notifyNestedSubs,{store:e,subscription:t}}),[e]),c=(0,l.useMemo)((function(){return e.getState()}),[e]);I((function(){var t=a.subscription;return t.trySubscribe(),c!==e.getState()&&t.notifyNestedSubs(),function(){t.tryUnsubscribe(),t.onStateChange=null}}),[a,c]);var u=i||n;return l.createElement(u.Provider,{value:a},s)};function d(){return(d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(t[l]=i[l])}return t}).apply(this,arguments)}function B(t,e){if(null==t)return{};var i,l,n={},s=Object.keys(t);for(l=0;l<s.length;l++)i=s[l],e.indexOf(i)>=0||(n[i]=t[i]);return n}var o=i(8679),F=i.n(o),r=i(9864),C=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],U=["reactReduxForwardedRef"],Q=[],b=[null,null];function V(t,e){var i=t[1];return[e.payload,i+1]}function A(t,e,i){I((function(){return t.apply(void 0,e)}),i)}function x(t,e,i,l,n,s,a){t.current=l,e.current=n,i.current=!1,s.current&&(s.current=null,a())}function p(t,e,i,l,n,s,a,c,g,I){if(t){var u=!1,d=null,B=function(){if(!u){var t,i,B=e.getState();try{t=l(B,n.current)}catch(t){i=t,d=t}i||(d=null),t===s.current?a.current||g():(s.current=t,c.current=t,a.current=!0,I({type:"STORE_UPDATED",payload:{error:i}}))}};return i.onStateChange=B,i.trySubscribe(),B(),function(){if(u=!0,i.tryUnsubscribe(),i.onStateChange=null,d)throw d}}}var G=function(){return[null,0]};function R(t,e){void 0===e&&(e={});var i=e,s=i.getDisplayName,a=void 0===s?function(t){return"ConnectAdvanced("+t+")"}:s,c=i.methodName,I=void 0===c?"connectAdvanced":c,u=i.renderCountProp,o=void 0===u?void 0:u,R=i.shouldHandleStateChanges,L=void 0===R||R,h=i.storeKey,m=void 0===h?"store":h,S=(i.withRef,i.forwardRef),Z=void 0!==S&&S,y=i.context,X=void 0===y?n:y,E=B(i,C),f=X;return function(e){var i=e.displayName||e.name||"Component",n=a(i),s=d({},E,{getDisplayName:a,methodName:I,renderCountProp:o,shouldHandleStateChanges:L,storeKey:m,displayName:n,wrappedComponentName:i,WrappedComponent:e}),c=E.pure,u=c?l.useMemo:function(t){return t()};function C(i){var n=(0,l.useMemo)((function(){var t=i.reactReduxForwardedRef,e=B(i,U);return[i.context,t,e]}),[i]),a=n[0],c=n[1],I=n[2],o=(0,l.useMemo)((function(){return a&&a.Consumer&&(0,r.isContextConsumer)(l.createElement(a.Consumer,null))?a:f}),[a,f]),F=(0,l.useContext)(o),C=Boolean(i.store)&&Boolean(i.store.getState)&&Boolean(i.store.dispatch);Boolean(F)&&Boolean(F.store);var R=C?i.store:F.store,h=(0,l.useMemo)((function(){return function(e){return t(e.dispatch,s)}(R)}),[R]),m=(0,l.useMemo)((function(){if(!L)return b;var t=g(R,C?null:F.subscription),e=t.notifyNestedSubs.bind(t);return[t,e]}),[R,C,F]),S=m[0],Z=m[1],y=(0,l.useMemo)((function(){return C?F:d({},F,{subscription:S})}),[C,F,S]),X=(0,l.useReducer)(V,Q,G),E=X[0][0],W=X[1];if(E&&E.error)throw E.error;var N=(0,l.useRef)(),T=(0,l.useRef)(I),Y=(0,l.useRef)(),J=(0,l.useRef)(!1),H=u((function(){return Y.current&&I===T.current?Y.current:h(R.getState(),I)}),[R,E,I]);A(x,[T,N,J,I,H,Y,Z]),A(p,[L,R,S,h,T,N,J,Y,Z,W],[R,S,h]);var k=(0,l.useMemo)((function(){return l.createElement(e,d({},H,{ref:c}))}),[c,e,H]);return(0,l.useMemo)((function(){return L?l.createElement(o.Provider,{value:y},k):k}),[o,k,y])}var R=c?l.memo(C):C;if(R.WrappedComponent=e,R.displayName=C.displayName=n,Z){var h=l.forwardRef((function(t,e){return l.createElement(R,d({},t,{reactReduxForwardedRef:e}))}));return h.displayName=n,h.WrappedComponent=e,F()(h,e)}return F()(R,e)}}function L(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function h(t,e){if(L(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),l=Object.keys(e);if(i.length!==l.length)return!1;for(var n=0;n<i.length;n++)if(!Object.prototype.hasOwnProperty.call(e,i[n])||!L(t[i[n]],e[i[n]]))return!1;return!0}function m(t){return function(e,i){var l=t(e,i);function n(){return l}return n.dependsOnOwnProps=!1,n}}function S(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function Z(t,e){return function(e,i){i.displayName;var l=function(t,e){return l.dependsOnOwnProps?l.mapToProps(t,e):l.mapToProps(t)};return l.dependsOnOwnProps=!0,l.mapToProps=function(e,i){l.mapToProps=t,l.dependsOnOwnProps=S(t);var n=l(e,i);return"function"==typeof n&&(l.mapToProps=n,l.dependsOnOwnProps=S(n),n=l(e,i)),n},l}}const y=[function(t){return"function"==typeof t?Z(t):void 0},function(t){return t?void 0:m((function(t){return{dispatch:t}}))},function(t){return t&&"object"==typeof t?m((function(e){return function(t,e){var i={},l=function(l){var n=t[l];"function"==typeof n&&(i[l]=function(){return e(n.apply(void 0,arguments))})};for(var n in t)l(n);return i}(t,e)})):void 0}],X=[function(t){return"function"==typeof t?Z(t):void 0},function(t){return t?void 0:m((function(){return{}}))}];function E(t,e,i){return d({},i,t,e)}const f=[function(t){return"function"==typeof t?function(t){return function(e,i){i.displayName;var l,n=i.pure,s=i.areMergedPropsEqual,a=!1;return function(e,i,c){var g=t(e,i,c);return a?n&&s(g,l)||(l=g):(a=!0,l=g),l}}}(t):void 0},function(t){return t?void 0:function(){return E}}];var W=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function N(t,e,i,l){return function(n,s){return i(t(n,s),e(l,s),s)}}function T(t,e,i,l,n){var s,a,c,g,I,u=n.areStatesEqual,d=n.areOwnPropsEqual,B=n.areStatePropsEqual,o=!1;return function(n,F){return o?function(n,o){var F,r,C=!d(o,a),U=!u(n,s);return s=n,a=o,C&&U?(c=t(s,a),e.dependsOnOwnProps&&(g=e(l,a)),I=i(c,g,a)):C?(t.dependsOnOwnProps&&(c=t(s,a)),e.dependsOnOwnProps&&(g=e(l,a)),I=i(c,g,a)):U?(F=t(s,a),r=!B(F,c),c=F,r&&(I=i(c,g,a)),I):I}(n,F):(c=t(s=n,a=F),g=e(l,a),I=i(c,g,a),o=!0,I)}}function Y(t,e){var i=e.initMapStateToProps,l=e.initMapDispatchToProps,n=e.initMergeProps,s=B(e,W),a=i(t,s),c=l(t,s),g=n(t,s);return(s.pure?T:N)(a,c,g,t,s)}var J=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function H(t,e,i){for(var l=e.length-1;l>=0;l--){var n=e[l](t);if(n)return n}return function(e,l){throw new Error("Invalid value of type "+typeof t+" for "+i+" argument when connecting component "+l.wrappedComponentName+".")}}function k(t,e){return t===e}function v(t){var e=void 0===t?{}:t,i=e.connectHOC,l=void 0===i?R:i,n=e.mapStateToPropsFactories,s=void 0===n?X:n,a=e.mapDispatchToPropsFactories,c=void 0===a?y:a,g=e.mergePropsFactories,I=void 0===g?f:g,u=e.selectorFactory,o=void 0===u?Y:u;return function(t,e,i,n){void 0===n&&(n={});var a=n,g=a.pure,u=void 0===g||g,F=a.areStatesEqual,r=void 0===F?k:F,C=a.areOwnPropsEqual,U=void 0===C?h:C,Q=a.areStatePropsEqual,b=void 0===Q?h:Q,V=a.areMergedPropsEqual,A=void 0===V?h:V,x=B(a,J),p=H(t,s,"mapStateToProps"),G=H(e,c,"mapDispatchToProps"),R=H(i,I,"mergeProps");return l(o,d({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:p,initMapDispatchToProps:G,initMergeProps:R,pure:u,areStatesEqual:r,areOwnPropsEqual:U,areStatePropsEqual:b,areMergedPropsEqual:A},x))}}const w=v();function M(){return(0,l.useContext)(n)}function D(t){void 0===t&&(t=n);var e=t===n?M:function(){return(0,l.useContext)(t)};return function(){return e().store}}var z=D();function P(t){void 0===t&&(t=n);var e=t===n?z:D(t);return function(){return e().dispatch}}var O=P(),j=function(t,e){return t===e};function K(t){void 0===t&&(t=n);var e=t===n?M:function(){return(0,l.useContext)(t)};return function(t,i){void 0===i&&(i=j);var n=e(),s=function(t,e,i,n){var s,a=(0,l.useReducer)((function(t){return t+1}),0)[1],c=(0,l.useMemo)((function(){return g(i,n)}),[i,n]),u=(0,l.useRef)(),d=(0,l.useRef)(),B=(0,l.useRef)(),o=(0,l.useRef)(),F=i.getState();try{if(t!==d.current||F!==B.current||u.current){var r=t(F);s=void 0!==o.current&&e(r,o.current)?o.current:r}else s=o.current}catch(t){throw u.current&&(t.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),t}return I((function(){d.current=t,B.current=F,o.current=s,u.current=void 0})),I((function(){function t(){try{var t=i.getState();if(t===B.current)return;var l=d.current(t);if(e(l,o.current))return;o.current=l,B.current=t}catch(t){u.current=t}a()}return c.onStateChange=t,c.trySubscribe(),t(),function(){return c.tryUnsubscribe()}}),[i,c]),s}(t,i,n.store,n.subscription);return(0,l.useDebugValue)(s),s}}var _,q=K(),$=i(3935);_=$.unstable_batchedUpdates,s=_},2408:(t,e,i)=>{"use strict";var l=i(7418),n=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,g=60112;e.Suspense=60113;var I=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;n=d("react.element"),s=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),c=d("react.context"),g=d("react.forward_ref"),e.Suspense=d("react.suspense"),I=d("react.memo"),u=d("react.lazy")}var B="function"==typeof Symbol&&Symbol.iterator;function o(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var F={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},r={};function C(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}function U(){}function Q(t,e,i){this.props=t,this.context=e,this.refs=r,this.updater=i||F}C.prototype.isReactComponent={},C.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(o(85));this.updater.enqueueSetState(this,t,e,"setState")},C.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},U.prototype=C.prototype;var b=Q.prototype=new U;b.constructor=Q,l(b,C.prototype),b.isPureReactComponent=!0;var V={current:null},A=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function p(t,e,i){var l,s={},a=null,c=null;if(null!=e)for(l in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)A.call(e,l)&&!x.hasOwnProperty(l)&&(s[l]=e[l]);var g=arguments.length-2;if(1===g)s.children=i;else if(1<g){for(var I=Array(g),u=0;u<g;u++)I[u]=arguments[u+2];s.children=I}if(t&&t.defaultProps)for(l in g=t.defaultProps)void 0===s[l]&&(s[l]=g[l]);return{$$typeof:n,type:t,key:a,ref:c,props:s,_owner:V.current}}function G(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var R=/\/+/g;function L(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function h(t,e,i,l,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var g=!1;if(null===t)g=!0;else switch(c){case"string":case"number":g=!0;break;case"object":switch(t.$$typeof){case n:case s:g=!0}}if(g)return a=a(g=t),t=""===l?"."+L(g,0):l,Array.isArray(a)?(i="",null!=t&&(i=t.replace(R,"$&/")+"/"),h(a,e,i,"",(function(t){return t}))):null!=a&&(G(a)&&(a=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||g&&g.key===a.key?"":(""+a.key).replace(R,"$&/")+"/")+t)),e.push(a)),1;if(g=0,l=""===l?".":l+":",Array.isArray(t))for(var I=0;I<t.length;I++){var u=l+L(c=t[I],I);g+=h(c,e,i,u,a)}else if("function"==typeof(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}(t)))for(t=u.call(t),I=0;!(c=t.next()).done;)g+=h(c=c.value,e,i,u=l+L(c,I++),a);else if("object"===c)throw e=""+t,Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return g}function m(t,e,i){if(null==t)return t;var l=[],n=0;return h(t,l,"","",(function(t){return e.call(i,t,n++)})),l}function S(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var Z={current:null};function y(){var t=Z.current;if(null===t)throw Error(o(321));return t}var X={ReactCurrentDispatcher:Z,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:V,IsSomeRendererActing:{current:!1},assign:l};e.Children={map:m,forEach:function(t,e,i){m(t,(function(){e.apply(this,arguments)}),i)},count:function(t){var e=0;return m(t,(function(){e++})),e},toArray:function(t){return m(t,(function(t){return t}))||[]},only:function(t){if(!G(t))throw Error(o(143));return t}},e.Component=C,e.PureComponent=Q,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=X,e.cloneElement=function(t,e,i){if(null==t)throw Error(o(267,t));var s=l({},t.props),a=t.key,c=t.ref,g=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,g=V.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var I=t.type.defaultProps;for(u in e)A.call(e,u)&&!x.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==I?I[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=i;else if(1<u){I=Array(u);for(var d=0;d<u;d++)I[d]=arguments[d+2];s.children=I}return{$$typeof:n,type:t.type,key:a,ref:c,props:s,_owner:g}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=p,e.createFactory=function(t){var e=p.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:g,render:t}},e.isValidElement=G,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:S}},e.memo=function(t,e){return{$$typeof:I,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return y().useCallback(t,e)},e.useContext=function(t,e){return y().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return y().useEffect(t,e)},e.useImperativeHandle=function(t,e,i){return y().useImperativeHandle(t,e,i)},e.useLayoutEffect=function(t,e){return y().useLayoutEffect(t,e)},e.useMemo=function(t,e){return y().useMemo(t,e)},e.useReducer=function(t,e,i){return y().useReducer(t,e,i)},e.useRef=function(t){return y().useRef(t)},e.useState=function(t){return y().useState(t)},e.version="17.0.2"},7294:(t,e,i)=>{"use strict";t.exports=i(2408)},53:(t,e)=>{"use strict";var i,l,n,s;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var c=Date,g=c.now();e.unstable_now=function(){return c.now()-g}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var I=null,u=null,d=function(){if(null!==I)try{var t=e.unstable_now();I(!0,t),I=null}catch(t){throw setTimeout(d,0),t}};i=function(t){null!==I?setTimeout(i,0,t):(I=t,setTimeout(d,0))},l=function(t,e){u=setTimeout(t,e)},n=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},s=e.unstable_forceFrameRate=function(){}}else{var B=window.setTimeout,o=window.clearTimeout;if("undefined"!=typeof console){var F=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof F&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var r=!1,C=null,U=-1,Q=5,b=0;e.unstable_shouldYield=function(){return e.unstable_now()>=b},s=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Q=0<t?Math.floor(1e3/t):5};var V=new MessageChannel,A=V.port2;V.port1.onmessage=function(){if(null!==C){var t=e.unstable_now();b=t+Q;try{C(!0,t)?A.postMessage(null):(r=!1,C=null)}catch(t){throw A.postMessage(null),t}}else r=!1},i=function(t){C=t,r||(r=!0,A.postMessage(null))},l=function(t,i){U=B((function(){t(e.unstable_now())}),i)},n=function(){o(U),U=-1}}function x(t,e){var i=t.length;t.push(e);t:for(;;){var l=i-1>>>1,n=t[l];if(!(void 0!==n&&0<R(n,e)))break t;t[l]=e,t[i]=n,i=l}}function p(t){return void 0===(t=t[0])?null:t}function G(t){var e=t[0];if(void 0!==e){var i=t.pop();if(i!==e){t[0]=i;t:for(var l=0,n=t.length;l<n;){var s=2*(l+1)-1,a=t[s],c=s+1,g=t[c];if(void 0!==a&&0>R(a,i))void 0!==g&&0>R(g,a)?(t[l]=g,t[c]=i,l=c):(t[l]=a,t[s]=i,l=s);else{if(!(void 0!==g&&0>R(g,i)))break t;t[l]=g,t[c]=i,l=c}}}return e}return null}function R(t,e){var i=t.sortIndex-e.sortIndex;return 0!==i?i:t.id-e.id}var L=[],h=[],m=1,S=null,Z=3,y=!1,X=!1,E=!1;function f(t){for(var e=p(h);null!==e;){if(null===e.callback)G(h);else{if(!(e.startTime<=t))break;G(h),e.sortIndex=e.expirationTime,x(L,e)}e=p(h)}}function W(t){if(E=!1,f(t),!X)if(null!==p(L))X=!0,i(N);else{var e=p(h);null!==e&&l(W,e.startTime-t)}}function N(t,i){X=!1,E&&(E=!1,n()),y=!0;var s=Z;try{for(f(i),S=p(L);null!==S&&(!(S.expirationTime>i)||t&&!e.unstable_shouldYield());){var a=S.callback;if("function"==typeof a){S.callback=null,Z=S.priorityLevel;var c=a(S.expirationTime<=i);i=e.unstable_now(),"function"==typeof c?S.callback=c:S===p(L)&&G(L),f(i)}else G(L);S=p(L)}if(null!==S)var g=!0;else{var I=p(h);null!==I&&l(W,I.startTime-i),g=!1}return g}finally{S=null,Z=s,y=!1}}var T=s;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){X||y||(X=!0,i(N))},e.unstable_getCurrentPriorityLevel=function(){return Z},e.unstable_getFirstCallbackNode=function(){return p(L)},e.unstable_next=function(t){switch(Z){case 1:case 2:case 3:var e=3;break;default:e=Z}var i=Z;Z=e;try{return t()}finally{Z=i}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=T,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var i=Z;Z=t;try{return e()}finally{Z=i}},e.unstable_scheduleCallback=function(t,s,a){var c=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?c+a:c,t){case 1:var g=-1;break;case 2:g=250;break;case 5:g=1073741823;break;case 4:g=1e4;break;default:g=5e3}return t={id:m++,callback:s,priorityLevel:t,startTime:a,expirationTime:g=a+g,sortIndex:-1},a>c?(t.sortIndex=a,x(h,t),null===p(L)&&t===p(h)&&(E?n():E=!0,l(W,a-c))):(t.sortIndex=g,x(L,t),X||y||(X=!0,i(N))),t},e.unstable_wrapCallback=function(t){var e=Z;return function(){var i=Z;Z=e;try{return t.apply(this,arguments)}finally{Z=i}}}},3840:(t,e,i)=>{"use strict";t.exports=i(53)},482:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},1583:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(2802));e.default=(t=new n.default,e)=>e.analyze?t.merge(e.analyze):t},257:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817));e.default=(t=new n.default,e)=>e.app?new n.default(e.app):t},6690:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5813));e.default=(t=new n.default,e)=>e.bootOption?t.merge(e.bootOption):t},9530:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const n=i(665),s=l(i(482)),a=l(i(1583)),c=l(i(257)),g=l(i(6690)),I=l(i(9202)),u=l(i(7738)),d=l(i(6686)),B=l(i(705)),o=l(i(6706)),F=l(i(4005)),r=l(i(358)),C=l(i(7706)),U=l(i(2543)),Q=l(i(5181)),b=l(i(4980)),V=l(i(6086)),A=l(i(6297)),x=l(i(6087)),p=l(i(507));e.reducerFiles={app:c.default,user:p.default,tuneCh:x.default,ranks:U.default,thread:b.default,threads:A.default,threadDetail:V.default,analyze:a.default,bootOption:g.default,setting:Q.default,posts:I.default,postsTimeline:o.default,postsTimelineStock:F.default,postsTimelineZero:r.default,postsTimelineZeroAfter:C.default,postsMulti:d.default,postsSingle:B.default,postsChild:u.default,actioned:s.default},e.default=(0,n.combineReducers)(e.reducerFiles)},9202:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5232));e.default=(t=[],e)=>e.posts?new n.default(e.posts):t},7738:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5232));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},6686:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(5232));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new s.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let i=[];return t.length+e.postsMulti.length>n.default.findOneLimitCnt?(i=[...e.postsMulti,...t],i.slice(0,n.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},705:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5853));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},6706:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6423));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},4005:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3443));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new n.default(e.postsTimelineStock):t}}},358:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(8059));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new n.default(e.postsTimelineZero):t}}},7706:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6301));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new n.default(e.postsTimelineZeroAfter):t}}},2543:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5232));e.default=(t=[],e)=>{let i=[],l=0;const s=(t,i)=>t.ch===e.app.rootCh||i.ch===e.app.rootCh?0:t.liveCnt<i.liveCnt?1:t.liveCnt>i.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(i=n.default.getDispPosts(e),l=i&&i.length?i.length:0,0===l?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:i[l-1].favicon,stampId:i[l-1].stampId,post:i[l-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(s);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const i=[],l=e.rank.length;let n=e.rank[0];for(let s=0;s<l;s++){let l=e.rank[s];n=l.updateTime>n.updateTime?l:n,l.ch===t[0].ch&&(l={...l,liveCnt:t[0].liveCnt}),i.push(l)}return i.sort(s),i[0].faicon=n.favicon,i[0].post=n.post,i[0].stampId=n.stampId,i}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},5181:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3871));e.default=(t=new n.default,e)=>e.setting?t.merge(e.setting):t},4980:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5537));e.default=(t=new n.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new n.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},6086:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5537));e.default=(t=new n.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},6297:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5300));e.default=(t=new n.default,e)=>e.threads?t.merge(e.threads):t},6087:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1960));e.default=(t=new n.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new n.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:i}=e;if(i.ch===t.ch)return{...t,liveCnt:i.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const l=e.posts[0];if(l.ch===t.ch)return{...t,title:l.title,stampId:l.stampId,favicon:l.favicon,post:l.post}}return t}},507:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6548));e.default=(t=new n.default,e)=>e.user?t.merge(e.user):t},3560:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2802:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=s},4817:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(1960)),a=l(i(5537));class c extends n.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=s.default.defaultFindId,this.offsetSingleFindId=s.default.defaultFindId,this.offsetMultiFindId=s.default.defaultFindId,this.offsetChildFindId=s.default.defaultFindId,this.offsetLogsFindId=s.default.defaultFindId;const i=t.ch?t.ch:"/",l=t.id?t.id:"",g=n.default.isSet(t.isMediaCh)?t.isMediaCh:c.getIsMediaCh(i),I=!!n.default.isSet(t.isLinkCh)&&t.isLinkCh,u=t.rootCh?t.rootCh:i,d=n.default.isSet(t.isRootCh)?t.isRootCh:u===i,B=t.rootTitle?t.rootTitle:"talkn",o=c.getMediaSrc(t.protocol,i),F=c.getMediaType(o,t),r=t&&t.tuned?t.tuned:"",C=c.getDispThreadType(t,g),U=!n.default.isSet(t.multistream)||t.multistream,Q=t&&t.findType?t.findType:a.default.findTypeAll,b=t&&t.offsetFindId?t.offsetFindId:c.defaultOffsetFindId,V=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:c.defaultOffsetFindId,A=t&&t.offsetSingleFindId?t.offsetSingleFindId:c.defaultOffsetFindId,x=t&&t.offsetMultiFindId?t.offsetMultiFindId:c.defaultOffsetFindId,p=t&&t.offsetChildFindId?t.offsetChildFindId:c.defaultOffsetFindId,G=t&&t.offsetLogsFindId?t.offsetLogsFindId:c.defaultOffsetFindId,R=t.inputPost?t.inputPost:"",L=!!t.inputStampId&&t.inputStampId,h=t.inputCurrentTime?t.inputCurrentTime:0,m=t.inputSearch?t.inputSearch:"",S=!!n.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,Z=t&&t.actioned?t.actioned:"",y=n.default.isSet(t.debug)?t.debug:"";return this.create({id:l,isRootCh:d,isLinkCh:I,isMediaCh:g,rootCh:u,rootTitle:B,chType:F,dispThreadType:C,tuned:r,multistream:U,findType:Q,offsetFindId:b,offsetTimelineFindId:V,offsetSingleFindId:A,offsetMultiFindId:x,offsetChildFindId:p,offsetLogsFindId:G,inputPost:R,inputStampId:L,inputCurrentTime:h,inputSearch:m,isToggleMultistream:S,actioned:Z,debug:y})}static get defaultOffsetFindId(){return s.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[c.mediaTypeMp3,c.mediaTypeMp4,c.mediaTypeM4a]}static get mediaChTagTypes(){return{[c.mediaTypeMp3]:c.mediaTagTypeAudio,[c.mediaTypeMp4]:c.mediaTagTypeVideo,[c.mediaTypeM4a]:c.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:c.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(c.mediaChTagTypes),i=e.length;let l="html";for(let n=0;n<i;n++){const i=new RegExp(`.${e[n]}$`);if(t.match(i)){l=c.mediaChTagTypes[e[n]];break}}return l}static validInputPost(t){return!!/\r\n$|\n$|\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(t)?"ONLY NEW LINE":/^\s+$/g.test(t)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return c.isAudioContentType(t)||c.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(c.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(c.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\/$/,"")}static getIsMediaCh(t){return c.mediaChs.some((e=>{const i=new RegExp(`.${e}/$|.${e}$`);return t.match(i)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?c.dispThreadTypeTimeline:c.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},i,l,n=""){let s="";const a=t&&t.dispThreadType?t.dispThreadType:c.dispThreadTypeMulti;return s=(t=c.getStepDispThreadType({app:t,ranks:e},i,l,n)).dispThreadType,{app:t,stepTo:`${a} to ${s}`}}static getStepDispThreadType({app:t,ranks:e},i={},l,n){const s=t||{};if(s.offsetFindId=c.defaultOffsetFindId,i.isMediaCh)return s.dispThreadType=c.dispThreadTypeTimeline,s.offsetFindId=s.offsetTimelineFindId?s.offsetTimelineFindId:c.defaultOffsetFindId,s.isLinkCh="Links"===n||"findMediaCh"===n||"ToMedia"===n,s.isMediaCh=!0,s;if("BackToRootCh"===n&&(s.isLinkCh=!1),"Links"===n&&e.length>0){if(!e.some((t=>t.ch===l||t.ch===l+"/")))return s.offsetFindId=c.defaultOffsetFindId,s.dispThreadType=c.dispThreadTypeChild,s.isLinkCh=!0,s}return s.rootCh===l?s.multistream?s.dispThreadType=c.dispThreadTypeMulti:s.dispThreadType=c.dispThreadTypeSingle:s.dispThreadType=c.dispThreadTypeChild,s}}e.default=c},5813:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((i=>{e[t[i].name]=t[i].value})),e}}e.default=s},367:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=s},1960:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(300));class a extends n.default{constructor(t){super(),this.ch=a.defaultValues.ch,this.chs=a.defaultValues.chs,this.favicon=a.defaultValues.favicon,this.findType=a.defaultValues.findType,this.layer=a.defaultValues.layer,this.post=a.defaultValues.post,this.protocol=a.defaultValues.protocol,this.stampId=a.defaultValues.stampId,this.title=a.defaultValues.title,this.liveCnt=a.defaultValues.liveCnt,this.uid=a.defaultValues.uid,this.utype=a.defaultValues.utype,this.dispFlg=a.defaultValues.dispFlg,this.data=a.defaultValues.data,this.createTime=a.defaultValues.createTime,this.currentTime=a.defaultValues.currentTime,this.updateTime=a.defaultValues.updateTime;const e=t?{...a.defaultValues,...t}:a.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:s.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=a},9565:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5232:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817)),s=l(i(9565)),a=l(i(5853)),c=l(i(6423)),g=l(i(3443));class I{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:i,postsMulti:l,postsSingle:s,postsChild:a,postsLogs:c}=t;switch(e.dispThreadType){case n.default.dispThreadTypeTimeline:return i;case n.default.dispThreadTypeMulti:return l;case n.default.dispThreadTypeSingle:return s;case n.default.dispThreadTypeChild:return a;case n.default.dispThreadTypeLogs:return c}}static getAnyActionPosts(t,e){const{app:i,posts:l}=t,c=l&&l.length>0;switch(t.postsMulti=new s.default,t.postsSingle=new a.default,t.postsChild=[],t.postsLogs=[],i.dispThreadType){case n.default.dispThreadTypeTimeline:t=I.getAnyActionPostsTimeline(t,l,e,c);break;case n.default.dispThreadTypeMulti:t.postsMulti=c?l:[];break;case n.default.dispThreadTypeSingle:t.postsSingle=c?l:[];break;case n.default.dispThreadTypeChild:t.postsChild=c?l:[];break;case n.default.dispThreadTypeLogs:t.postsLogs=c?l:[]}return t}static getAnyActionPostsTimeline(t,e,i,l){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new c.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new c.default,t.postsTimelineStock=new g.default,l)){const i=e.length;for(let l=0;l<i;l++)0===e[l].currentTime?t.postsTimeline.push(e[l]):t.postsTimelineStock.push(e[l])}return t}}e.default=I},5853:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6423:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8059:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3871:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){super();const e=t&&t.client?t.client:{},i=t&&t.common?t.common:{},l=t&&t.server?t.server:{};return this.create({client:e,common:i,server:l})}}e.default=s},5537:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(7771)),a=l(i(300)),c=l(i(4817));class g extends n.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=s.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=g.getDefaultFavicon(),this.findType=g.findTypeAll,this.title=g.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=g.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const i=g.isWindowObj(t)?g.constructorFromWindow(t,e):t;return this.create(i)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[g.findTypeHtml]:["text/html"],[g.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[g.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const i=!!e.ch&&e.ch,l=g.getCh(e,i);let s={};return s.ch=l,s.chs=["/"],s.hasSlash=!!e.hasslash&&n.default.getBool(e.hasslash),s.protocol="talkn:",s.contentType="",s.charset="UTF-8",s.host="",s.favicon=g.getDefaultFavicon(),s.findType=g.findTypeAll,i?(s.protocol=g.getProtocol(i),s.host=g.getHost(i),s.chs=i.chs&&i.chs.length>0?i.chs:g.getChs(l)):(s.protocol=location.protocol?location.protocol:"????:",s.chs=t.chs&&t.chs.length>0?t.chs:g.getChs(l),s.contentType=document.contentType?document.contentType:"",s.charset=document.charset?document.charset:"",s.host=location.host?location.host:"",s.favicon=g.getFaviconFromWindow(window)),s.title=g.getDefaultTitle(),s.metas=[],s.serverMetas={},s.clientMetas={},s.emotions={},s.links=[],s.h1s=[],s.audios=[],s.videos=[],s.layer=g.getLayer(s.ch),s.mediaIndex=[],s.postCnt=0,s.multiPostCnt=0,s.isSelfCh=g.getIsSelfCh("",s.ch),s.createTime="",s.updateTime="",s}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const l="/"===t.slice(-1)?t:t+"/";if("/"!==l){const t=l.split("/"),n=t.length;let s="";for(var i=1;i<n;i++)""!==t[i]&&(s+=t[i],s="/"===s.slice(-1)?s:s+"/",s="/"===s.slice(0,1)?s:"/"+s,e.push(s))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):a.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return c.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=g.getMediaSrc(t);return c.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",t.document,null,2,null).stringValue,i="http://",l="https://",n=location.host;if(e.indexOf(i)||e.indexOf(l)){const t=i+n+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,i,l={}){let n={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return n.isCreate=g.getStatusCreate(i),n.isRequireUpsert=g.getStatusIsRequireUpsert(t,l,n.isCreate),n.isMultistream=g.getStatusIsMultistream(e),n.isToggleMultistream=g.getStatusIsToggleMultistream(e),n.isMediaCh=g.getStatusIsMediaCh(t.ch),n}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,i=!1){if(!i)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,i=new Date,l=i.getFullYear(),n=i.getMonth(),s=i.getDate(),c=i.getHours();return i.getMinutes(),e<new Date(l,n,s,c-a.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===c.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return c.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=g.findTypes[g.findTypeHtml],i=g.findTypes[g.findTypeMusic],l=g.findTypes[g.findTypeVideo];let n;if(t&&""!==t){let s="";t.indexOf(";")>0&&(s=t.split(";")[0]),(e.includes(t)||e.includes(s))&&(n=g.findTypeHtml),(i.includes(t)||i.includes(s))&&(n=g.findTypeMusic),(l.includes(t)||l.includes(s))&&(n=g.findTypeVideo)}return n}static getFindTypeFromSrc(t){const e=c.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=g},5300:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s extends n.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=s},6548:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(1960));class a extends n.default{static get defaultOffsetFindId(){return s.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",i=t&&t.utype?t.utype:"",l=t&&t.tuned?t.tuned:"",n=!(!t||!t.multistreamed)&&t.multistreamed,s=t&&t.actioned?t.actioned:"",c=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,u=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,d=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:i,tuned:l,multistreamed:n,actioned:s,offsetFindId:c,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:u,offsetLogsFindId:d,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:s.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=a},2230:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3560)),s=l(i(2802)),a=l(i(4817)),c=l(i(367)),g=l(i(5232)),I=l(i(6423)),u=l(i(3443)),d=l(i(3364)),B=l(i(5537)),o=l(i(6548));class F{constructor(t,e={}){this.bootOption=t,this.ranks=new d.default,this.menuLogs=new c.default(e.menuLogs),this.posts=new g.default,this.postsMulti=new g.default,this.postsSingle=new g.default,this.postsChild=new g.default,this.postsTimeline=new I.default,this.postsTimelineStock=new u.default,this.postsLogs=new g.default,this.analyze=new s.default,this.thread=new B.default(this.bootOption,e.thread),this.threadDetail=new B.default(this.bootOption,e.thread),this.app=new a.default(F.getAppParams(this.thread,this.bootOption,e)),this.user=new o.default(F.getUserParams(this,e)),this.actionLog=new n.default}static getAppParams(t,e,i){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?a.default.dispThreadTypeMulti:a.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=F},3841:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1665));e.default={updateStyle:({styleKey:t,eleType:e,tagName:i,style:l})=>({type:"UPDATE_STYLE",styleKey:t,eleType:e,tagName:i,style:l}),onClickTogglePosts:({app:t})=>({type:"ON_CLICK_TOGGLE_POSTS",app:t}),onClickToTimelineThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_TIMELINE_THREAD",app:t,thread:{ch:e.ch}}),onClickToMultiThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_MULTI_THREAD",app:t,thread:{ch:e.ch}}),onClickToSingleThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_SINGLE_THREAD",app:t,thread:{ch:e.ch}}),onClickToChildThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_CHILD_THREAD",app:t,thread:{ch:e.ch}}),onClickToLogsThread:({app:t,thread:e})=>({type:"ON_CLICK_TO_LOGS_THREAD",app:t,thread:{ch:e.ch}}),toggleDispSetChModal:({app:t,thread:e})=>({type:"TOGGLE_DISP_SET_CH_MODAL"}),onChangeInputPost:(t="")=>({type:"ON_CHANGE_INPUT_POST",app:{inputPost:t="string"==typeof t?t:""}}),toggleDispMain:t=>({type:"TOGGLE_DISP_MAIN",app:t}),toggleDispBoard:t=>({type:"TOGGLE_DISP_BOARD",app:t}),onClickToggleMain:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_MAIN",app:t,ui:e}),toggleBubblePost:()=>({type:"TOGGLE_BUBBLE_POST",ui:{isTransition:!1}}),openLinks:()=>({type:"OPEN_LINKS",ui:{isOpenLinks:!0}}),closeLinks:()=>({type:"CLOSE_LINKS",ui:{isOpenLinks:!1}}),toggleLinks:t=>({type:"TOGGLE_LINKS"}),onClickMultistream:({app:t,postsMulti:e,postsSingle:i})=>({type:"ON_CLICK_MULTISTREAM",app:t,postsMulti:e,postsSingle:i}),onClickToggleDispMenu:()=>({type:"ON_CLICK_TOGGLE_DISP_MENU"}),onClickToggleDispDetail:({app:t,ui:e})=>({type:"ON_CLICK_TOGGLE_DISP_DETAIL",app:t,ui:e}),onClickLike:t=>({type:"ON_CLICK_LIKE",app:{inputPost:t}}),onClickMoney:t=>({type:"ON_CLICK_MONEY",app:{inputPost:t}}),onClickShare:t=>({type:"ON_CLICK_SHARE",app:{inputPost:t}}),onResizeStartWindow:(t={app:{},setting:{}})=>({type:"RESIZE_START_WINDOW",...t}),onResizeEndWindow:({app:t,setting:e,bootOption:i})=>({type:"RESIZE_END_WINDOW",app:t,setting:e,bootOption:i}),onScrollUpdateTimeMarker:t=>({type:"ON_SCROLL_UPDATE_TIME_MARKER",uiTimeMarker:t}),onTransition:()=>({type:"ON_TRANSITION",ui:{isTransition:!0}}),offTransition:()=>({type:"OFF_TRANSITION",ui:{isTransition:!1}}),onTransitionEnd:()=>({type:"ON_TRANSITION_END"}),onClickMenu:t=>({type:"ON_CLICK_MENU",ui:{menuComponent:t}}),onClickSetting:(t,{setting:e})=>({type:"ON_CLICK_SETTING",settingType:t,setting:e}),openInnerNotif:(t=n.default.noInnerNotif)=>({type:"OPEN_INNER_NOTIF",ui:{openInnerNotif:t}}),closeInnerNotif:()=>({type:"CLOSE_INNER_NOTIF",ui:{openInnerNotif:""}}),openNotif:()=>({type:"OPEN_NOTIF",ui:{isOpenNotif:!0}}),closeNotif:()=>({type:"CLOSE_NOTIF",ui:{isOpenNotif:!1}}),onClickOpenLockMenu:t=>({type:"ON_CLICK_OPEN_LOCK_MENU",ui:{openLockMenu:t}}),openNewPost:()=>({type:"OPEN_NEW_POST",ui:{isOpenNewPost:!0}}),closeNewPost:()=>({type:"CLOSE_NEW_POST",ui:{isOpenNewPost:!1}}),openMenuTransitionEnd:t=>({type:"OPEN_MENU_TRANSITION_END",ui:{threadScrollY:t}}),startDispPosts:()=>({type:"START_DISP_POSTS",ui:{isDispPosts:!0}}),startUndispPosts:()=>({type:"START_UNDISP_POSTS",ui:{isDispPosts:!1}}),componentDidMounts:t=>({type:"COMPONENT_DID_MOUNTS",componentDidMounts:t}),bootExtension:t=>({type:"BOOT_EXTENSION",app:t}),updateExtension:t=>({type:"UPDATE_EXTENSION",app:t}),getClientMetas:t=>({type:"GET_CLIENT_METAS",clientMetas:t}),toggleDispPostsSupporter:()=>({type:"TOGGLE_DISP_POSTS_SUPPORTER"}),closeDispPostsSupporter:()=>({type:"CLOSE_DISP_POSTS_SUPPORTER",ui:{isOpenPostsSupporter:!1}}),nextPostsTimeline:(t=[])=>({type:"NEXT_POSTS_TIMELINE",postsTimeline:t}),unmountPostsTimeline:(t=0)=>({type:"UNMOUNT_POSTS_TIMELINE",mediaCurrentTime:t}),clearPostsTimeline:(t=0)=>({type:"CLEAR_POSTS_TIMELINE",mediaCurrentTime:t}),prevPostsTimeline:(t=[])=>({type:"PREV_POSTS_TIMELINE",postsTimeline:t}),delegatePost:({inputPost:t,inputCurrentTime:e,inputStampId:i})=>({type:"DELEGATE_POST",app:{inputPost:t,inputCurrentTime:e,inputStampId:i}}),playVideo:()=>({type:"PLAY_VIDEO"}),stopVideo:()=>({type:"STOP_VIDEO"}),onChangeFindType:t=>({type:"ON_CHANGE_FIND_TYPE",app:{findType:t.target.value}}),startLinkMedia:()=>({type:"START_LINK_MEDIA"}),loadingEnd:()=>({type:"LOADING_END"}),scrollThread:()=>({type:"SCROLL_THREAD"}),endAnimateScrollTo:()=>({type:"END_ANIMATE_SCROLL_TO"}),createNotif:()=>({type:"CREATE_NOTIF"}),updatePostsHeight:t=>({type:"UPDATE_POSTS_HEIGHT",app:{postsHeight:t}}),debug:t=>({type:"DEBUG",app:t})}},8215:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(4065),s=l(i(1216)),a=l(i(4817)),c=l(i(5537)),g=l(i(7638)),I=l(i(7865)),u=l(i(3669));class d extends n.Component{constructor(t){super(t),this.onScroll=this.onScroll.bind(this)}get clientStore(){if(window.talknWindow)return window.talknWindow.store}get clientState(){if(window.talknWindow)return window.talknWindow.store.getState()}api(t,e={}){window.talknWindow.api(t,e)}clientAction(t,e,i=(()=>{})){const l=e?{...e,type:t}:{type:t};window.talknWindow.store.dispatch(l)}onClickCh(t,e,i,l){let{app:n,thread:g,ranks:u,setting:d}=this.clientState;const B=g.ch;g.ch=t,e.clicked=l,e.isOpenLinks=!1,e.isOpenMenu=e.screenSize===I.default.screenSizeSmallLabel&&e.isOpenMenu,e.isOpenBoard=!0,s.default.isSet(i)&&(g.hasSlash=i);const o=c.default.getStatus(g,n,d);let{app:F,stepTo:r}=a.default.getStepToDispThreadType({app:n,ranks:u},o,t,l);switch("ToMedia"===l&&this.api("onResponseChAPI",t),n.isLinkCh&&!F.isLinkCh&&this.api("offResponseChAPI",B),n=F,n.offsetFindId=a.default.defaultOffsetFindId,r){case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeMulti} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeSingle} to ${a.default.dispThreadTypeChild}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeChild}`:e.isRootCh=!1,this.clientAction("ON_CLICK_TO_CHILD_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g});break;case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeMulti}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeMulti}`:e.isRootCh=!0,this.clientAction("ON_CLICK_TO_MULTI_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g});break;case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeSingle}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeSingle}`:e.isRootCh=!0,this.clientAction("ON_CLICK_TO_SINGLE_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g});break;case`${a.default.dispThreadTypeMulti} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeSingle} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeChild} to ${a.default.dispThreadTypeTimeline}`:case`${a.default.dispThreadTypeTimeline} to ${a.default.dispThreadTypeTimeline}`:e.isRootCh=!n.isLinkCh,this.clientAction("ON_CLICK_TO_TIMELINE_THREAD",{ui:e}),this.api("changeThread",{app:n,thread:g})}}onScroll({scrollTop:t=0,clientHeight:e=0,scrollHeight:i=0}){const{thread:l,app:n,ui:s,actionLog:a}=this.clientState,c=(s.extensionMode,I.default.extensionModeNone,["ON_RESIZE_END_WINDOW"]);let{uiTimeMarker:d}=this.clientState;if(0===t&&!c.includes(a[0])&&l[n.multistream?"multiPostCnt":"postCnt"]>g.default.findOnePostCnt){const t=document.querySelector("[data-component-name=TimeMarkerList]");t&&t.style&&(t.style.opacity=0),window.talknWindow.dom.exeGetMore(this.clientStore)}s.isOpenNewPost&&this.clientAction("CLOSE_NEW_POST");const B=u.default.update(t,d,{app:n,ui:s});d.now.label!==B.now.label&&this.clientAction("ON_SCROLL_UPDATE_TIME_MARKER",{uiTimeMarker:B}),window.talknWindow.dom.scrollTop=t,window.talknWindow.dom.scrollHeight=i,window.talknWindow.dom.clientHeight=e,window.talknWindow.dom.isScrollBottom=i===t+e}scrollToDidUpdateGetMore(){const{ui:t}=this.clientState,e=document.querySelector("[data-component-name=Posts]");let i=0;switch(t.screenSize){case I.default.screenSizeLargeLabel:case I.default.screenSizeSmallLabel:i=e.scrollHeight;break;case I.default.screenSizeMiddleLabel:i=document.body.scrollHeight}window.talknWindow.dom.scrollTop=i-window.talknWindow.dom.scrollHeight,e.scrollTop=window.talknWindow.dom.scrollTop,window.scrollTo(0,window.talknWindow.dom.scrollTop)}}e.default=d},7638:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(9573)),s=l(i(300)),a=l(i(1665));if("browser"===n.default.title){const{SUB_DOMAINS:t,DEVELOPMENT:e}=a.default,{env:i,domain:l}=s.default;s.default.mediaSecondInterval=200,s.default.screenSize={small:600,middle:960},s.default.defaultFavicon=`//${t.ASSETS}.${l}/favicon.ico`,s.default.portalPath=`//${t.PORTAL}.${l}/`,s.default.clientPath=`//${t.CLIENT}.${l}/`,s.default.assetsPath=`//${t.ASSETS}.${l}/`,s.default.sessionPath=`//${t.SESSION}.${l}/`,s.default.cacheKey={index:"talknIndexList",setting:"talknSettingParams"}}e.default=s.default},3691:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7771)),s=l(i(3365)),a=l(i(7865));e.default=(t,e)=>{const{props:i}=t,{actionLog:l}=i.state,n=l[0];c[e]&&c[e][n]&&c[e][n](t)};const c={Container:{"API_TO_CLIENT[EMIT]:tune":t=>{const{ui:e}=t.props.state;if(e.extensionMode===a.default.extensionModeLiveMedia){const t=JSON.stringify(s.default.inputs),e=JSON.stringify(s.default.map);window.talknWindow.ext.to("sendStampData",n.default.UNKNOWN,{inputs:t,map:e})}},"API_TO_CLIENT[EMIT]:fetchPosts":t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");switch(i.postsHeight+=window.talknWindow.dom.getPostsHeight(),t.props.updatePostsHeight(i.postsHeight),i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:l&&(l.scrollTop=99999999);break;case a.default.screenSizeMiddleLabel:window.scrollTo(0,99999999)}if(l){switch(window.talknWindow.dom.srollHeight=l.clientHeight,i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:l&&l.scrollHeight&&window.talknWindow.dom.updateUiTimeMarker(l.scrollHeight-l.clientHeight,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.updateUiTimeMarker(window.scrollY-window.innerHeight,{app:e,ui:i})}i.isOpenLinks||t.clientAction("CLOSE_LINKS"),window.talknWindow.dom.resizeEndWindow()}},"API_TO_CLIENT[EMIT]:changeThread":t=>{const{ui:e}=t.props.state;e.screenSize===a.default.screenSizeSmallLabel&&"Links"!==e.clicked&&"BackToRootCh"!==e.clicked&&"ToMedia"!==e.clicked&&t.clientAction("ON_CLICK_TOGGLE_DISP_MENU")},"API_TO_CLIENT[EMIT]:changeThreadDetail":t=>{const{threadDetail:e,ui:i}=t.props.state;i.isOpenDetail||(i.isOpenDetail=!0,t.clientAction("ON_CLICK_TOGGLE_DISP_DETAIL",{threadDetail:e,app:{detailCh:e.ch},ui:i}))},ON_CLICK_MULTISTREAM:t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");if(i.extensionMode===a.default.extensionModeNone)switch(i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:window.talknWindow.dom.updateUiTimeMarker(l.scrollHeight-l.clientHeight,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.updateUiTimeMarker(window.scrollY-window.innerHeight,{app:e,ui:i})}else window.talknWindow.dom.updateUiTimeMarker(l.scrollHeight-l.clientHeight,{app:e,ui:i});window.scrollTo(0,9999999),l.scrollTop=l.scrollHeight-l.clientHeight},ON_TRANSITION_END:t=>{const{ui:e}=t.props.state;e.postsHeight+=window.talknWindow.dom.getPostsHeight(),t.props.updatePostsHeight(e.postsHeight)},ON_CHANGE_FIND_TYPE:t=>{const{app:e,thread:i}=t.props.state;t.api("rank",{thread:i,app:e})},DELEGATE_POST:t=>{t.api("post"),t.api("onChangeInputPost"),t.clientAction("CLOSE_DISP_POSTS_SUPPORTER")},GET_CLIENT_METAS:t=>{const{app:e,thread:i}=t.props.state,{serverMetas:l}=i;e.isLinkCh||t.parentCoreApi("updateThreadServerMetas",l)},ON_CLICK_TOGGLE_DISP_DETAIL:t=>{const{ui:e}=t.props.state;e.extensionMode!==a.default.extensionModeModal&&e.extensionMode!==a.default.extensionModeEmbed||window.talknWindow.ext.to("getClientMetas",n.default.UNKNOWN)},TOGGLE_BUBBLE_POST:t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");if(i.extensionMode===a.default.extensionModeNone)switch(i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:l.scrollTop=l.scrollHeight-l.clientHeight,window.talknWindow.dom.updateUiTimeMarker(l.scrollTop,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:const t=9999999;window.scrollTo(0,t),window.talknWindow.dom.updateUiTimeMarker(t,{app:e,ui:i})}else l.scrollTop=l.scrollHeight-l.clientHeight,window.talknWindow.dom.updateUiTimeMarker(l.scrollTop,{app:e,ui:i})},RESIZE_END_WINDOW:t=>{}},Posts:{"API_TO_CLIENT[BROADCAST]:fetchPosts":t=>{},SCROLL_THREAD:t=>{},NEXT_POSTS_TIMELINE:g,"API_TO_CLIENT[BROADCAST]:post":g,"API_TO_CLIENT[EMIT]:getMore":t=>{const{app:e,ui:i}=t.props.state,l=document.querySelector("[data-component-name=Posts]");switch(t.scrollToDidUpdateGetMore(),i.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:window.talknWindow.dom.updateUiTimeMarker(l.scrollTop,{app:e,ui:i});break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.updateUiTimeMarker(window.scrollY,{app:e,ui:i})}}}};function g(t){const{ui:e}=t.props.state,i=document.querySelector("[data-component-name=Posts]");switch(e.screenSize){case a.default.screenSizeLargeLabel:case a.default.screenSizeSmallLabel:e.isOpenPosts&&window.talknWindow.dom.isScrollBottom&&t.animateScrollTo(i,i.scrollHeight,400,t.props.endAnimateScrollTo),e.isOpenPosts&&t.props.openNewPost();break;case a.default.screenSizeMiddleLabel:window.talknWindow.dom.scrollHeight=i.clientHeight,e.isOpenPosts&&(window.talknWindow.dom.isScrollBottom?window.talknWindow.dom.animateScrollTo(window.talknWindow.dom.scrollHeight,400,t.props.endAnimateScrollTo):t.props.openNewPost())}}},7851:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t,e)=>({state:t})},4435:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7771)),s=l(i(300)),a=l(i(1665)),c=l(i(6562)),g=l(i(4817)),I=l(i(5232)),u=l(i(7865)),d=l(i(5549));e.default={updateAction:t=>e=>i=>{const l=t.getState();i.ui=i.ui?{...l.ui,...i.ui}:l.ui,i.app=i.app?{...l.app,...i.app}:l.app,B[i.type]&&(i=B[i.type](l,i)),i&&e(i)}};const B={"API_TO_CLIENT[REQUEST]:getMore":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!1,e),"API_TO_CLIENT[REQUEST]:fetchPosts":(t,e)=>e,"API_TO_CLIENT[REQUEST]:changeThread":(t,e)=>(e.ui.isLoading=!0,e),"API_TO_CLIENT[EMIT]:fetchPosts":(t,e)=>{if(e.ui.isLoading=!1,e.ui.detailCh=e.thread.ch,!e.app.isLinkCh)switch(e.ui.extensionMode){case u.default.extensionModeBottom:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*d.default.transitionNotif+d.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{transition:t})}break;case u.default.extensionModeModal:if(!e.app.isMediaCh&&e.posts.length>0){const t=e.posts[e.posts.length-1]._id,i=e.posts[e.posts.length-1].post,l=e.posts[e.posts.length-1].stampId;let a=e.posts[e.posts.length-1].favicon;a=n.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(a),window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{id:t,post:i,stampId:l,favicon:a,addUnreadCnt:e.posts.length})}}return e},"API_TO_CLIENT[BROADCAST]:post":(t,e)=>{const i=e.posts.length-1;switch(e.ui.extensionMode){case u.default.extensionModeBottom:if(!e.ui.isOpenPosts&&!e.ui.isDispPosts){const t=4*d.default.transitionNotif+d.default.transitionNotifDisp;window.talknWindow.ext.to("openNotif",{transition:t})}break;case u.default.extensionModeModal:if(e.posts.length>0){const t=e.posts[i]._id,l=e.posts[i].post,a=e.posts[i].stampId;let g=e.posts[i].favicon;g=n.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(g),window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{id:t,post:l,stampId:a,favicon:g,addUnreadCnt:e.posts.length})}}return e},"CLIENT_TO_API[EMIT]:getMore":(t,e)=>(e.ui.isLoading=!0,e),ON_CLICK_MULTISTREAM:(t,e)=>{const i=I.default.getDispPosts(e),l=i&&i.length?i.length:0;return l>0&&t.ranks.length>0&&(e.ranks=t.ranks.map((e=>t.app.rootCh===e.ch?{...e,favicon:i[l-1].favicon,post:i[l-1].post,stampId:i[l-1].stampId}:e))),e},NEXT_POSTS_TIMELINE:(t,e)=>{const i=e.postsTimeline.length-1,l=e.postsTimeline[i]._id,a=e.postsTimeline[i].post,g=e.postsTimeline[i].stampId;let I=e.postsTimeline[i].favicon;return I=n.default.HTTPS_PROTOCOL+"//"+s.default.assetsIconPath+c.default.getSaveFaviconName(I),window.talknWindow.ext.to("openNotif",n.default.UNKNOWN,{id:l,post:a,stampId:g,favicon:I}),e.postsTimeline=[...t.postsTimeline,...e.postsTimeline],e},TOGGLE_DISP_POSTS_SUPPORTER:(t,e)=>(t.ui.isOpenPostsSupporter=!t.ui.isOpenPostsSupporter,e),TOGGLE_LINKS:(t,e)=>(e.ui.isOpenLinks=!t.ui.isOpenLinks,e),ON_CLICK_TOGGLE_POSTS:(t,e)=>(e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:u.default.getIsOpenPosts(e.ui),e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>{const i=t.threads[e.app.detailCh];return e.threadDetail={...i},e},OFF_TRANSITION:(t,e)=>(e.ui.height=g.default.getHeight(),e.ui.isOpenPosts=e.ui.isOpenPosts?e.ui.isOpenPosts:u.default.getIsOpenPosts(e.ui),e),ON_TRANSITION_END:(t,e)=>(e.ui.height=u.default.getHeight(),e.ui.isOpenPosts=u.default.getIsOpenPosts(e.ui),e),ON_RESIZE_START_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_RESIZE_END_WINDOW:(t,e)=>(e.ranks=t.ranks,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.ui.isLoading=!e.ui.isLoading,e),ON_CLICK_TOGGLE_DISP_MENU:(t,e)=>(e.ui.isOpenMenu=!e.ui.isOpenMenu,e),TOGGLE_DISP_SET_CH_MODAL:(t,e)=>(e.ui.isOpenSetChModal=!t.ui.isOpenSetChModal,e),TOGGLE_DISP_BOARD:(t,e)=>(e.ui.isOpenBoard=!t.ui.isOpenBoard,e),OPEN_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!0,e),TOGGLE_BUBBLE_POST:(t,e)=>(e.ui.isBubblePost=!t.ui.isBubblePost,e),CLOSE_NEW_POST:(t,e)=>(e.ui.isOpenNewPost=!1,e),OPEN_INNER_NOTIF:(t,e)=>(e.ui.openInnerNotif=""===e.ui.openInnerNotif?a.default.noInnerNotif:e.ui.openInnerNotif,e),ON_CHANGE_INPUT_POST:(t,e)=>{const i=e.ui.inputPost;return window.talknWindow.ext.to("setInputPost",n.default.UNKNOWN,{inputPost:i}),e},GET_CLIENT_METAS:(t,e)=>{let i=!1,l=e,{serverMetas:n}=t.thread;if(console.log(n,l),e.thread={},Object.keys(l).forEach(((t,s)=>{l[t]&&""!==l[t]&&n[t]!==l[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),i=!0,e.thread.serverMetas[t]=l[t])})),console.log(i),i)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},console.log(e.thread.serverMetas),e}}},4603:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(1665));class a{constructor(){a.setupMath()}static setupMath(){Math.easeInOutQuad=(t,e,i,l)=>(t/=l/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e}static setupLog(){n.default.env===s.default.PRODUCTION&&window.talknWindow&&(window.log=t=>{const{ui:e}=window.talknWindow.store.getState();console.log(e.iFrameId)})}}e.default=a},4451:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>"COMPONENT_DID_MOUNTS"!==e.type?[e.type,...t]:t},4679:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>(e.componentDidMounts&&"string"==typeof e.componentDidMounts&&t.push(e.componentDidMounts),t)},5513:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(831),s=i(9530),a=l(i(7532)),c=l(i(4451)),g=l(i(4679)),I=l(i(4436)),u=l(i(2165)),d=l(i(695)),B={};Object.keys(s.reducerFiles).forEach((t=>{B[t]=(t=>(e={},i)=>i[t]?"Array"===i[t].constructor.name?[...i[t]]:{...i[t]}:e)(t)}));const o=(0,n.combineReducers)({ui:d.default,uiTimeMarker:a.default,style:u.default,componentDidMounts:g.default,actionLog:c.default,setting:I.default,...B});e.default=o},4436:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t={},e)=>e.setting?{...e.setting}:t},2165:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(8506)),a=l(i(5549)),c=l(i(9301)),g=l(i(982)),I=l(i(2243)),u=l(i(1540)),d=l(i(434)),B=l(i(9422)),o=l(i(865)),F=l(i(7825)),r=l(i(9201)),C=l(i(2423)),U=l(i(4857)),Q=l(i(3829)),b=l(i(8381)),V=l(i(4359)),A=l(i(6620)),x=l(i(7608)),p=l(i(4909)),G=l(i(9167)),R=l(i(1433)),L=l(i(7162)),h=l(i(4381));e.default=(t={},e)=>{switch(e.type){case"ON_RESIZE_START_WINDOW":case"ON_RESIZE_END_WINDOW":case"ON_TRANSITION":case"ON_TRANSITION_END":case"OFF_TRANSITION":case"EXT_TO_CLIENT[ACTION]:ON_TRANSITION":case"bootExtension":return new h.default(e);case"TOGGLE_DISP_MAIN":return{...t};case"API_TO_CLIENT[EMIT]:rank":case"API_TO_CLIENT[EMIT]:tune":case"API_TO_CLIENT[BROADCAST]:tune":return{...t,ranks:{...t.ranks,ol:b.default.getOl(e)}};case"ON_CLICK_MULTISTREAM":return{...t,board:{...t.board,menuLiChild:{...t.board.menuLiChild,color:e.app.multistream?s.default.activeColor:s.default.unactiveColor}},icon:{...t.icon,thunder:{}}};case"COMPONENT_DID_MOUNTS":case"API_TO_CLIENT[BROADCAST]:fetchPosts":return{...t,menus:{...t.menus,self:{...t.menus,transform:Q.default.getTransform(e)}}};case"API_TO_CLIENT[REQUEST]:fetchPosts":case"API_TO_CLIENT[REQUEST]:changeThread":return{...t,posts:{...t.posts,self:G.default.getSelf(e)}};case"API_TO_CLIENT[EMIT]:fetchPosts":case"OPEN_LINKS":case"CLOSE_LINKS":case"TOGGLE_LINKS":return{...t,menus:{...t.menus,self:{...t.menus,transform:Q.default.getTransform(e)}},posts:{...t.posts,self:G.default.getSelf(e)},board:{...t.board,self:{...t.board.self,width:s.default.getSelfWidth(e),height:s.default.getSelfHeight(e),boxShadow:s.default.getSelfBoxShadow(e)},menuLiChild:s.default.getMenuLiChild(e),menuLiLinks:s.default.getMenuLiLinks(e)},links:{...t.links,self:{...t.links.self,display:F.default.getSelfDisplay(e)},linksUl:{...t.links.linksUl,overflowY:F.default.getLinksUlOevrflowY(e)}},icon:{...t.icon,thunder:o.default.getThunder(e),bubble:o.default.getBubble(e),links:o.default.getLinks(e)}};case"TOGGLE_DISP_SET_CH_MODAL":return{...t,setChModal:{...t.setChModal,self:V.default.getSelf(e)}};case"TOGGLE_BUBBLE_POST":return{...t,board:{...t.board,menuLiBubble:{...t.board.menuLiBubble,color:e.ui.isBubblePost?s.default.activeColor:s.default.unactiveColor}},posts:{...t.posts,self:G.default.getSelf(e),more:G.default.getMore(e)},post:{...t.post,self:p.default.getSelf(e),upper:p.default.getUpper(e),bottomPost:p.default.getBottomPost(e)}};case"TOGGLE_DISP_POSTS_SUPPORTER":case"CLOSE_DISP_POSTS_SUPPORTER":return{...t,postsSupporter:{...t.postsSupporter,self:{...t.postsSupporter.self,transform:L.default.getTransform(e)}}};case"ON_CLICK_TO_TIMELINE_THREAD":return{...t,posts:{...t.posts,self:G.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.menuLiChild,color:n.default.isActiveMultistream(e,"reducer")?s.default.activeColor:s.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:s.default.unactiveColor}},video:{...t.video,self:U.default.getSelf(e)},audio:{...t.audio,self:C.default.getSelf(e)}};case"ON_CLICK_TO_MULTI_THREAD":return{...t,posts:{...t.posts,self:G.default.getSelf(e)},board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:s.default.activeColor},menuLiLinks:{...t.menuLiLinks,color:s.default.activeColor}}};case"ON_CLICK_TO_SINGLE_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiLinks:{...t.menuLiLinks,color:s.default.activeColor}}};case"ON_CLICK_TO_CHILD_THREAD":return{...t,board:{...t.board,self:{...t.board.self,height:s.default.getSelfHeight(e)},menuLiChild:{...t.board.menuLiChild,color:s.default.unactiveColor},menuLiLinks:{...t.menuLiLinks,color:s.default.unactiveColor}},icon:{...t.icon,thunder:o.default.getThunder(e)}};case"ON_CLICK_TOGGLE_DISP_MENU_END":return{...t,posts:{...t.posts,self:G.default.getSelf(e)}};case"ON_CLICK_TOGGLE_DISP_DETAIL":case"ON_CLICK_TOGGLE_DISP_MENU":return{...t,menu:{...t.menu,self:{...t.menu.self,width:Q.default.getWidth(e),transform:Q.default.getTransform(e)}},detail:{...t.detail,[`self${c.default.detailRightSelfKey}`]:{...t.detail[`self${c.default.detailRightSelfKey}`],transform:I.default.getTransform(e)},[`self${c.default.detailModalSelfKey}`]:{...t.detail[`self${c.default.detailModalSelfKey}`],transform:g.default.getTransform(e)}},posts:{...t.posts,self:{...t.posts.self,width:G.default.getWidth(e)}},footer:{...t.footer,self:{...t.footer.self,width:d.default.getWidth(e),transform:d.default.getTransform(e)}},menuFooter:{...t.menuFooter,self:{...t.menuFooter.self,width:A.default.getWidth(e)}},postsFooter:{...t.postsFooter,self:{...t.postsFooter.self,maxWidth:R.default.getWidth(e),width:R.default.getWidth(e)}}};case"ON_CLICK_OPEN_LOCK_MENU":return{...t,lockMenu:{...t.lockMenu,menuShare:{...t.lockMenu.menuShare,transform:r.default.getCommonTransform(e)}}};case"OPEN_NEW_POST":case"CLOSE_NEW_POST":return{...t,container:{...t.container,newPost:{...t.container.newPost,transform:a.default.getNotifTranslateY(e)}}};case"OPEN_NOTIF":case"CLOSE_NOTIF":const i=x.default.getNotifsDisplay(e);return{...t,header:{...t.header,self:{...t.header.self,transform:B.default.getNotifTranslateY(e)}},container:{...t.container,newPost:{...t.container.newPost,display:a.default.getNewPostDisplay(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,height:x.default.getNotifsHeight(e)},self:{...t.notif.self,display:i}}};case"TOGGLE_DISP_BOARD":return{...t,board:{...t.board,self:s.default.getSelf(e)}};case"OPEN_INNER_NOTIF":case"CLOSE_INNER_NOTIF":return{...t,innerNotif:{...t.innerNotif,self:{...t.innerNotif.self,height:""!==e.ui.openInnerNotif?`${a.default.getBlockSize(e)}px`:"0px"}}};case"UPDATE_STYLE":const{styleKey:l,eleType:m,tagName:S,style:Z}=e;if(l&&m&&S)return{...t,[l]:{...t[l],[m]:{...t[l][m],[S]:{...t[l][m][S],...Z}}}};if(l&&m)return{...t,[l]:{...t[l],[m]:{...t[l][m],...Z}}};break;case"START_DISP_POSTS":case"START_UNDISP_POSTS":return{...t,extScreen:{...t.extScreen,self:{...t.extScreen.self,transform:u.default.getSelfTransform(e),transition:u.default.getSelfTransition(e)}},notif:{...t.notif,notifs:{...t.notif.notifs,display:x.default.getNotifsDisplay(e)}}};default:return e.style?e.style:t}}},695:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865));e.default=(t=new n.default,e)=>e.ui?t.merge(e.ui):t},7532:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3669));e.default=(t=new n.default,e)=>e.uiTimeMarker?{...e.uiTimeMarker}:t},5221:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2030:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){return[]}}},7242:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4381));e.default=n.default},7865:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(4817)),a=l(i(7638));class c extends n.default{constructor(t={}){super();const e=t.iFrameId?t.iFrameId:"",i=c.getWidth(t),l=c.getHeight(t),s=t.postsHeight?t.postsHeight:0,a=c.getScreenSize(i),g=t.extensionMode?t.extensionMode:c.extensionModeNone,I=t.extensionWidth?t.extensionWidth:"0%",u=t.extensionHeight?t.extensionHeight:0,d=t&&t.threadScrollY?t.threadScrollY:0,B=c.getIsOpenPosts({height:l,extensionMode:g,extensionHeight:u}),o=!!t.isOpenSetting&&t.isOpenSetting,F=n.default.isSet(t.isOpenMenu)?t.isOpenMenu:c.getIsOpenMenu({screenSize:a}),r=a===c.screenSizeDetailLabel||!!n.default.isSet(t.isOpenDetail)&&t.isOpenDetail,C=!!t.isOpenNewPost&&t.isOpenNewPost,U=!!t.isOpenNotif&&t.isOpenNotif,Q=!!n.default.isSet(t.isOpenPostsSupporter)&&t.isOpenPostsSupporter,b=n.default.isSet(t.isOpenBoard)?t.isOpenBoard:c.getIsOpenBoard({screenSize:a}),V=!!n.default.isSet(t.isOpenSetChModal)&&t.isOpenSetChModal,A=!n.default.isSet(t.isBubblePost)||t.isBubblePost,x=!!n.default.isSet(t.isDispPosts)&&t.isDispPosts,p=!!n.default.isSet(t.isOpenLinks)&&t.isOpenLinks,G=!n.default.isSet(t.isTransition)||t.isTransition,R=t.menuComponent?t.menuComponent:c.getDefaultMenuComponent(),L=t.openLockMenu?t.openLockMenu:c.openLockMenuLabelNo,h=t.openInnerNotif?t.openInnerNotif:"",m=t.clicked?t.clicked:"",S=t.detailCh?t.detailCh:"/",Z=t.inputPost?t.inputPost:"",y=!!t.inputStampId&&t.inputStampId,X=t.inputCurrentTime?t.inputCurrentTime:0,E=t.inputSearch?t.inputSearch:"",f=!n.default.isSet(t.isLoading)||t.isLoading;return this.create({iFrameId:e,width:i,height:l,postsHeight:s,screenSize:a,extensionMode:g,extensionWidth:I,extensionHeight:u,threadScrollY:d,isOpenPosts:B,isOpenSetting:o,isOpenMenu:F,isOpenDetail:r,isOpenNewPost:C,isOpenNotif:U,isOpenPostsSupporter:Q,isOpenBoard:b,isOpenSetChModal:V,isBubblePost:A,isDispPosts:x,isOpenLinks:p,isTransition:G,menuComponent:R,openLockMenu:L,openInnerNotif:h,clicked:m,detailCh:S,inputPost:Z,inputStampId:y,inputCurrentTime:X,inputSearch:E,isLoading:f})}static get openLockMenuLabelNo(){return"No"}static get openLockMenuLabelLike(){return"Like"}static get openLockMenuLabelShare(){return"Share"}static get openLockMenuLabelAbout(){return"About"}static get screenSizeSmallLabel(){return"SMALL"}static get screenSizeMiddleLabel(){return"MIDDLE"}static get screenSizeLargeLabel(){return"LARGE"}static get screenSizeIndexLabel(){return"MENU"}static get screenSizeThreadLabel(){return"THREAD"}static get screenSizeDetailLabel(){return"DETAIL"}static get screenSizeSmallWidthPx(){return a.default.screenSize.small}static get screenSizeMiddleWidthPx(){return a.default.screenSize.middle}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static get menuComponentUsersLabel(){return"Users"}static get menuComponentRankLabel(){return"Rank"}static get menuComponentLogsLabel(){return"Logs"}static get menuComponentSettingLabel(){return"Setting"}static getDefaultMenuComponent(){return c.menuComponentRankLabel}static getWidth(t){return t&&t.extensionWidth>0?t.extensionWidth:t&&t.width>0?t.width:"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return t&&t.extensionHeigt>0?t.extensionHeigt:t&&t.height>0?t.height:"object"==typeof window&&window.innerHeight?window.innerHeight:0}static getScreenSize(t=0){if(!t){if(window&&0===window.innerWidth||0===window.innerHeight)return;window&&window.innerWidth>0&&(t=window.innerWidth)}return"string"==typeof t&&(t=t.replace("px","")),c.screenSizeSmallWidthPx>=t?c.screenSizeSmallLabel:c.screenSizeSmallWidthPx<=t&&c.screenSizeMiddleWidthPx>=t?c.screenSizeMiddleLabel:c.screenSizeLargeLabel}static getIsOpenMenu(t){switch(t.screenSize){case c.screenSizeSmallLabel:return!1;case c.screenSizeMiddleLabel:case c.screenSizeLargeLabel:return!0}}static getIsOpenBoard(t){switch(t.screenSize){case c.screenSizeSmallLabel:return!1;case c.screenSizeMiddleLabel:case c.screenSizeLargeLabel:return!0}}static getIsOpenPosts(t,e=""){let{extensionMode:i,height:l,extensionHeight:n,extensionCloseHeight:s}=t;return i!==c.extensionModeBottom&&i!==c.extensionModeModal||("number"!=typeof l&&(l=Number(l)),"number"!=typeof n&&(n=Number(n)),0!==l&&n<=l)}static getUiUpdatedOpenFlgs({app:t,ui:e},i=""){switch(i){case"toggleMain":case"headerDetailIcon":switch(e.screenSize){case c.screenSizeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenSizeMiddleLabel:e.isOpenDetail?t.detailCh===t.rootCh?(e.isOpenDetail=!1,e.isOpenMenu=!0):(e.isOpenMenu=!1,e.isOpenDetail=!1):(e.isOpenMenu=!1,e.isOpenDetail=!0)}break;case"headerMenuIcon":switch(e.screenSize){case c.screenSizeMiddleLabel:e.isOpenDetail,e.isOpenMenu=!0,e.isOpenDetail=!1}break;case"changeThreadDetail":case"post":switch(e.screenSize){case c.screenSizeSmallLabel:e.isOpenDetail=!e.isOpenDetail;break;case c.screenSizeMiddleLabel:e.isOpenMenu=!1,e.isOpenDetail=!0;case c.screenSizeLargeLabel:e.isOpenMenu=!0,e.isOpenDetail=!0}}return e}static isActiveMultistream({app:t,ui:e},i=""){return e.menuComponent===c.menuComponentRankLabel&&t.dispThreadType===s.default.dispThreadTypeMulti}}e.default=c},3669:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216)),s=l(i(5549)),a=l(i(544)),c=l(i(7865)),g={index:0,offsetTop:0,label:""};class I extends n.default{constructor(t={}){super(),this.list=[],this.now={...g},this.before={...g},this.after={...g};const e=t&&t.list?t.list:[],i=t&&t.now?t.now:{...g},l=t&&t.before?t.before:{...g},n=t&&t.after?t.after:{...g};return this.create({list:e,now:i,before:l,after:n})}static generate(t=0,e,{app:i,ui:l}){const n=e.length;let c=[],I={...g},u={...g},d={...g};if(n>0){const g=a.default.getSelfMarginTop()+t+s.default.getBlockSize({app:i,ui:l});e.forEach(((t,i)=>{""===I.label&&g<=t.offsetTop&&(I.index=i,I.label=t.innerHTML,I.offsetTop=t.offsetTop,e[i-1]?(u.index=I.index-1,u.label=e[i-1].innerHTML,u.offsetTop=e[i-1].offsetTop):u={...I},e[i+1]?(d.index=I.index+1,d.label=e[i+1].innerHTML,d.offsetTop=e[i+1].offsetTop):d={...I});const l={index:i,offsetTop:t.offsetTop,label:t.innerHTML};c.push(l)})),""===I.label&&(I.index=n-1,I.label=e[I.index].innerHTML,I.offsetTop=e[I.index].offsetTop,u={...I},d={...I},e[I.index-1]&&(u.index=e[I.index-1]?I.index-1:I.index,u.label=e[I.index-1]?e[I.index-1].innerHTML:I.label,u.offsetTop=e[I.index-1]?e[I.index-1].offsetTop:I.offsetTop),e[I.index+1]&&(d.index=e[I.index+1]?I.index+1:I.index,d.label=e[I.index+1]?e[I.index+1].innerHTML:I.label,d.offsetTop=e[I.index+1]?e[I.index+1].offsetTop:I.offsetTop))}return{list:c,now:I,before:u,after:d}}static update(t=0,e,{app:i,ui:l}){let n=e.list,s=e.now,g=e.before,I=e.after;const u=n.length;if(u>0){const e=l.extensionMode===c.default.extensionModeLiveMedia?0:54,i=t+a.default.getSelfMarginTop()+e;s.index===u-1?i<s.offsetTop&&(I={...s},s={...g},g=n[g.index-1]?{...n[g.index-1]}:g):0===s.index?I.offsetTop<=i&&(g=n[s.index],s=n[s.index+1],I=n[I.index+1]?n[I.index+1]:I):s.offsetTop<=i&&i<I.offsetTop||(i<s.offsetTop&&(g=n[g.index-1]?n[g.index-1]:g,s=n[s.index-1]?n[s.index-1]:s,I=n[I.index-1]),I.offsetTop<=i&&(g=n[g.index+1],s=n[s.index+1]?n[s.index+1]:s,I=n[I.index+1]?n[I.index+1]:I))}return{list:n,now:s,before:g,after:I}}}e.default=I},6612:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(831),s=l(i(4435)),a=l(i(5513));e.default=function(t={}){let e=null,i=[s.default.updateAction];return e=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:null,(0,n.createStore)(a.default,t,e?e((0,n.applyMiddleware)(...i)):(0,n.applyMiddleware)(...i))}},7923:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5221)),s=l(i(2030)),a=l(i(7242)),c=l(i(7865)),g=l(i(3669));e.default=class{constructor(t){this.ui=new c.default(t.ui),this.componentDidMounts=new s.default(t.componentDidMounts),this.uiTimeMarker=new g.default(t.uiTimeMarker),this.style=new a.default({...t,ui:this.ui}),this.actionLog=new n.default}}},8506:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817)),s=l(i(7865)),a=l(i(5549)),c=l(i(9301)),g=l(i(3829)),I=l(i(4381));class u{constructor(t){return{self:u.getSelf(t),menu:u.getMenu(t),menuUl:u.getMenuUl(t),menuLi:u.getMenuLi(t),menuLiChild:u.getMenuLiChild(t),menuLiBubble:u.getMenuLiBubble(t),menuLiLinks:u.getMenuLiLinks(t),menuToggle:u.getMenuToggle(t),links:u.getLinks(t),linksUl:u.getLinksUl(t),linksLi:u.getLinksLi(t),linksLiActive:u.getLinksLiActive(t),linksLiUnactive:u.getLinksLiUnactive(t),linksTuneLi:u.getLinksTuneLi(t),linkMenuUl:u.getLinkMenuUl(t),linkMenuLi:u.getLinkMenuLi(t),linksTabActive:u.getLinksTabActive(t),linksTabUnactive:u.getLinksTabUnactive(t),linksTabLast:u.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return a.default.themeRGB}static get unactiveColor(){return a.default.fontBaseRGB}static get typesMain(){return"MAIN"}static get typesLink(){return"LINK"}static get typesSub(){return"SUB"}static getType({app:t,ui:e}){switch(t.dispThreadType){case n.default.dispThreadTypeMulti:case n.default.dispThreadTypeSingle:return u.typesMain;default:return t.isLinkCh?u.typesLink:u.typesSub}}static getTotalWidth({app:t,ui:e}){return u.size+2*u.padding+u.right}static getSelfTop({app:t,ui:e}){return a.default.getBlockSize({app:t,ui:e})+5}static getSelfWidth({app:t,ui:e},i=!1){let l="93%";if(e.isOpenLinks)if(e.extensionMode===s.default.extensionModeBottom)l="93%";else switch(e.screenSize){case s.default.screenSizeSmallLabel:return"93%";case s.default.screenSizeMiddleLabel:return`calc(97% - ${g.default.getWidth({app:t,ui:e},!1)})`;case s.default.screenSizeLargeLabel:l=`calc( ${97-c.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!1)} )`}else l=u.getTotalWidth({app:t,ui:e})+"px";return i?I.default.trimUnit(l):l}static getSelfHeight({app:t,ui:e}){if(!e.isOpenBoard)return"60px";switch(u.getType({app:t,ui:e})){case u.typesMain:return"237px";case u.typesLink:return"178px";case u.typesSub:return"118px";default:return"0px"}}static getSelfBorderRadius({app:t,ui:e}){return"10px 0px 0px 10px"}static getSelfBackground({app:t,ui:e}){return e.isOpenBoard?a.default.lightRGBA:a.default.whiteRGBA}static getSelfRight({app:t,ui:e},i=!1){const l=e.screenSize===s.default.screenSizeLargeLabel?`calc( ${c.default.getWidth({app:t,ui:e},!0)} + ${u.right}px )`:`${u.right}px`;return i?l:I.default.trimUnit(l)}static getSelfBoxShadow({app:t,ui:e},i=!1){return e.isOpenLinks,"rgb(210, 210, 210) 0px 0px 2px"}static getLinksDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getSelf({app:t,ui:e}){const i=u.getSelfWidth({app:t,ui:e}),l=u.getSelfHeight({app:t,ui:e}),n=u.getSelfBorderRadius({app:t,ui:e}),s=u.getSelfBackground({app:t,ui:e}),c=u.getSelfRight({app:t,ui:e},!0),g=u.getSelfBoxShadow({app:t,ui:e}),d=I.default.getLayoutFlex({position:"fixed",top:u.getSelfTop({app:t,ui:e}),overflow:"hide",right:c,height:l,width:i,padding:"5px",background:s,flexDirection:"row",alignItems:"flex-start",justifyContent:"flex-end",boxShadow:g,borderRadius:n,zIndex:3}),B=I.default.getAnimationBase({transition:a.default.getTransitionFirstOn({app:t,ui:e})});return I.default.get({layout:d,content:{},animation:B})}static getMenu({app:t,ui:e}){const i=I.default.getLayoutFlex({width:u.getTotalWidth({app:t,ui:e})+"px",height:"100%",flexDirection:"column",alignItems:"flex-end"});return I.default.get({layout:i,content:{},animation:{}})}static getMenuUl({app:t,ui:e}){const i=I.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column"}),l=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:{},animation:l})}static getMenuLi({app:t,ui:e}){const i=u.size+"px",l=I.default.getLayoutFlex({flexDirection:"column",width:i,height:i,minWidth:i,minHeight:i,maxWidth:i,maxHeight:i,background:a.default.whiteRGBA,borderRadius:"5px",marginBottom:"5px"}),n=I.default.getContentBase({fontSize:"0.7em",letterSpacing:"1px",lineHeight:"17px"}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:n,animation:s})}static getMenuLiChild({app:t,ui:e}){const i=s.default.isActiveMultistream({app:t,ui:e},"getLiChild")?u.activeColor:u.unactiveColor,l=I.default.getContentBase({color:i}),n=I.default.getAnimationBase();return I.default.get({layout:{},content:l,animation:n})}static getMenuLiBubble({app:t,ui:e}){const i=e.isBubblePost?u.activeColor:u.unactiveColor,l=I.default.getContentBase({color:i}),n=I.default.getAnimationBase();return I.default.get({layout:{},content:l,animation:n})}static getMenuLiLinks({app:t,ui:e}){const i=a.default.themeRGB,l=I.default.getContentBase({color:i}),n=I.default.getAnimationBase();return I.default.get({layout:{},content:l,animation:n})}static getMenuToggle({app:t,ui:e}){const i=u.size-4+"px",l=I.default.getLayoutFlex({width:i,height:i,minHeight:i,maxHeight:i}),n=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:{},animation:n})}static getLinks({app:t,ui:e}){const i=u.getLinksDisplay({app:t,ui:e}),l=I.default.getLayoutFlex({display:i,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),n=I.default.getContentBase({});return I.default.get({layout:l,content:n,animation:{}})}static getLinksUl({app:t,ui:e}){const i=I.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflow:"scroll",overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),l=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:{},animation:l})}static getLinksLi({app:t,ui:e}){const i=u.size+"px",l=I.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:a.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),n=I.default.getContentBase({cursor:"pointer",lineHeight:"17px"}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:n,animation:s})}static getLinksLiActive({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.background=a.default.whiteRGB,i.color=a.default.fontBaseRGB,i}static getLinksLiUnactive({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.background=a.default.calmRGB,i.color=a.default.fontBaseRGB,i}static getLinksTuneLi({app:t,ui:e}){const i=u.getLinksLi({app:t,ui:e});return i.alignItems="center",i}static getLinkMenuUl({app:t,ui:e}){const i=u.size+"px",l=I.default.getLayoutFlex({minHeight:i,height:i,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),n=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:{},animation:n})}static getLinkMenuLi({app:t,ui:e}){const i=u.size-4+"px",l=I.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:i,minHeight:i,maxHeight:i,background:a.default.reliefRGB,borderRadius:"5px"}),n=I.default.getContentBase({cursor:"pointer",color:a.default.whiteRGB}),s=I.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return I.default.get({layout:l,content:n,animation:s})}static getLinksTabActive({app:t,ui:e}){const i={};return i.background=a.default.whiteRGBA,i.color=a.default.fontBaseRGB,i}static getLinksTabUnactive({app:t,ui:e}){return u.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){return{margin:"5px 0px 0px 0px"}}}e.default=u},5549:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(2243)),a=l(i(3829)),c=l(i(544)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t),multistreamIconWrap:I.getMultistreamIconWrap(t),newPost:I.getNewPost(t),hideScreenBottom:I.getHideScreenBottom(t),linkLabel:I.getLinkLabel(t)}}static get width(){return"100%"}static get widthRatio(){return.94}static get radius(){return"10px"}static get radiuses(){return`${I.radius} ${I.radius} 0px 0px`}static get openHeight(){return 360}static get closeHeight(){return 360}static get threadHeight(){return 360}static get maxZIndex(){return 2147483647}static get closeBottom(){return 0}static get merginRatio(){return.034}static get borderRGB(){return g.default.mono240RGB}static get border(){return`0px solid ${I.borderRGB}`}static get lineShadow(){return`0px 0px 1px ${I.lineShadowColor}`}static get lineInsetShadow(){return`0px 0px 1px ${I.lineShadowColor} inset`}static get lineShadowColor(){return I.downreliefRGB}static get shadow(){return`${g.default.mono230RGB} 0px 0px 5px 0px`}static get darkLightRGB(){return g.default.darkLightRGB}static get darkLightRGBA(){return g.default.darkLightRGBA}static get darkRGB(){return g.default.darkRGB}static get darkRGBA(){return g.default.darkRGBA}static get downreliefRGB(){return g.default.mono160RGB}static get reliefRGB(){return g.default.mono180RGB}static get reliefRGBA(){return g.default.mono180RGBA}static get silverRGB(){return g.default.mono192RGB}static get silverRGBA(){return g.default.mono192RGBA}static get lightGrayRGB(){return g.default.mono211RGB}static get lightGrayRGBA(){return g.default.mono211RGBA}static get chromeOffTabRGB(){return g.default.mono225RGB}static get chromeOffTabRGBA(){return g.default.mono225RGBA}static get softCalmRGB(){return g.default.mono230RGB}static get softCalmRGBA(){return g.default.mono230RGBA}static get middleCalmRGBA(){return g.default.mono235RGBA}static get calmRGB(){return g.default.mono240RGB}static get calmRGBA(){return g.default.mono240RGBA}static get lightRGB(){return g.default.mono245RGB}static get lightRGBA(){return g.default.mono245RGBA}static get offWhiteRGB(){return g.default.mono250RGB}static get offWhiteRGBA(){return g.default.mono250RGBA}static get offWhitePlusRGB(){return g.default.mono252RGB}static get offWhitePlusRGBA(){return g.default.mono252RGBA}static get whiteRGB(){return g.default.mono255RGB}static get whiteRGBA(){return g.default.mono255RGBA}static get fontBaseRGB(){return g.default.fontBaseRGB}static get themeRGBString(){return"79, 174, 159"}static get themeLightRGBString(){return"89, 184, 169"}static get themeSuperLightRGBString(){return"200, 255, 220"}static get themeRGB(){return`rgb(${I.themeRGBString})`}static get themeRGBA(){return`rgba(${I.themeRGBString}, 0.96)`}static get themeRGBAA(){return`rgba(${I.themeRGBString}, 0.8)`}static getBlockSize({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?45:60}static getLiveMediaBlockSize({app:t,ui:e}){return 60}static getFaviconSize({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?24:30}static getLightThemeRGBA(t=.8){return`rgba(${I.themeLightRGBString}, ${t})`}static getThemeRGBA(t=.8){return`rgba(${I.themeRGBString}, ${t})`}static getTransitionOn({app:t,ui:e}={},i=!1){let l=String(I.transitionOn);return l=t?e.isTransition?`${I.transitionOn}ms`:`${I.transitionOff}ms`:`${I.transitionOn}ms`,i?g.default.trimUnit(l):l}static getTransition({app:t,ui:e}={},i=!1){const l=e.isTransition?`${I.transitionOn}ms`:`${I.transitionOff}ms`;return i?g.default.trimUnit(l):l}static getTransitionFirstOn({app:t,ui:e},i=!1){const l=e.isTransition?`${I.transitionFirstOn}ms`:`${I.transitionOff}ms`;return i?g.default.trimUnit(l):l}static get transitionOn(){return 600}static get transitionNotif(){return 300}static get transitionNotifDisp(){return 3e3}static get transitionFirstOn(){return 300}static get transitionOff(){return 0}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get notifOpenLiveMediaTranslateY(){return"translate3d( 0px, -125px, 0px )"}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, -${2*I.getBlockSize({app:t,ui:e})}px, 0px )`}static getNotifTranslateY({app:t,ui:e}){return e.extensionMode===n.default.extensionModeLiveMedia?e.isOpenNewPost?I.notifOpenLiveMediaTranslateY:I.notifCloseTranslateY:e.isOpenNewPost?I.getNotifOpenTranslateY({app:t,ui:e}):I.notifCloseTranslateY}static getNewPostDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getWidthPx({bootOption:t,app:e,ui:i}){return t?t.width?t.width:I.width:i.width}static getRightPx({app:t},e){return"0%"}static get multistreamWrapDefaultTop(){return 5}static getFontSize({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?14:15}static getLetterSpacing({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?1.5:2}static getSelf({app:t,ui:e,bootOption:i,type:l}){let s="0px";e.extensionMode===n.default.extensionModeModal&&(s="3px");const a=g.default.getLayoutBlock({display:"initial",width:"100%",height:"100%",overflow:"hidden",borderRadius:s,opacity:1}),c=g.default.getContentBase({fontSize:`${I.getFontSize({app:t,ui:e})}px`,lineHeight:`${I.getFontSize({app:t,ui:e})}px`,letterSpacing:`${I.getLetterSpacing({app:t,ui:e})}px`}),u=g.default.getAnimationBase({transition:`${I.transitionFirstOn}ms`});return g.default.get({layout:a,content:c,animation:u})}static getMultistreamIconWrapTop({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom||(e.extensionMode,n.default.extensionModeModal),I.getBlockSize({app:t,ui:e})+I.multistreamWrapDefaultTop+"px"}static getMultistreamIconWrapRight({app:t,ui:e}){switch(e.screenSize){default:case n.default.screenSizeSmallLabel:return"5%";case n.default.screenSizeMiddleLabel:return"20px";case n.default.screenSizeLargeLabel:return`calc( ${s.default.getWidth({app:t,ui:e})} + 20px)`}}static getMultistreamIconWrap({app:t,ui:e}){const i=g.default.getLayoutBlock({width:"30px",height:"30px",margin:"0 auto",background:"rgba(255, 255, 255, 0.8)"}),l=g.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),n=g.default.getAnimationBase({transition:I.transitionOff});return g.default.get({layout:i,content:l,animation:n})}static getNewPost({app:t,ui:e}){let i=I.getNewPostDisplay({app:t,ui:e});const l=c.default.getFixTimeMarker({app:t,ui:e});return delete l.top,{...l,display:i,zIndex:"1",margin:"0px auto",fontSize:"0.7em",bottom:`-${2*I.notifHeight}px`,transition:I.getTransition({app:t,ui:e})}}static getHideScreenBottom({app:t,ui:e}){const i=g.default.getLayoutFlex({position:"fixed",top:"100vh",width:"100vw",height:"100vh",background:I.reliefRGB,zIndex:I.maxZIndex}),l=g.default.getContentBase({}),n=g.default.getAnimationBase({});return g.default.get({layout:i,content:l,animation:n})}static getLinkLabel({app:t,ui:e}){const i=I.getBlockSize({app:t,ui:e})+"px",l=e.screenSize===n.default.screenSizeSmallLabel?"0px":`${a.default.getWidth({app:t,ui:e})}`,s=g.default.getLayoutFlex({maxWidth:"180px",position:"fixed",top:i,left:l,height:"20px",padding:"5px 10px",alignItems:"center",justifyContent:"flex-start",background:"rgba(0, 0, 0, 0.4)",zIndex:"1",borderRadius:"0px 0px 2px 0px"}),c=g.default.getContentBase({fontSize:"0.7em",lineHeight:2,whiteSpace:"nowrap",color:I.whiteRGB}),u=g.default.getAnimationBase();return g.default.get({layout:s,content:c,animation:u})}}e.default=I},9301:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(982)),c=l(i(2243)),g=l(i(3829)),I=l(i(4381)),u=l(i(2721));class d{constructor(t){const{app:e,ui:i}=t,l={},n=d.getDetailClass({app:e,ui:i});return l[`self${d.detailRightSelfKey}`]=d.getDetailRightSelf(t),l[`self${d.detailModalSelfKey}`]=d.getDetailModalSelf(t),l.header=n.getHeader(t),l.headerP=n.getHeaderP(t),l.body=n.getBody(t),l.meta=n.getMeta(t),l.img=n.getImg(t),l.description=n.getDescription(t),l.descriptionAnchor=n.getDescriptionAnchor(t),l.metaContentTypeWrap=n.getMetaContentTypeWrap(t),l.metaContentType=n.getMetaContentType(t),l.ch=n.getCh(t),l.analyze=n.getAnalyze(t),l.analyzeRow=n.getAnalyzeRow(t),l.analyzeCol=n.getAnalyzeCol(t),l.analyzeLabel=n.getAnalyzeLabel(t),l.analyzeValue=n.getAnalyzeValue(t),l.analyzeHr=n.getAnalyzeHr(t),l.h1s=n.getH1s(t),l.h1sLi=n.getH1sLi(t),l.footer=n.getFooter(t),l.footerChild=n.getFooterChild(t),l.footerChildLike=n.getFooterChildLike(t),l.footerChildMoney=n.getFooterChildMoney(t),l.footerChildShare=n.getFooterChildShare(t),l.metaItems=n.getMetaItems(t),l.updateWrap=n.getUpdateWrap(t),l.update=n.getUpdate(t),l.space=n.getSpace(t),l}static get detailRightSelfKey(){return"Right"}static get detailModalSelfKey(){return"Modal"}static get screenSizeOfRightDetail(){return n.default.screenSizeLargeLabel}static get padding(){return 20}static get margin(){return 5}static getDetailClass({app:t,ui:e}){return d.isRightDetail({app:t,ui:e})?c.default:a.default}static isRightDetail({app:t,ui:e}){return e.screenSize===d.screenSizeOfRightDetail}static getDetailModalSelf({app:t,ui:e}){const i=n.default.getScreenSize(e.width),l=i===n.default.screenSizeLargeLabel?"none":"block",c=i===n.default.screenSizeSmallLabel?"0px":g.default.baseWidth,u=a.default.getHeight({app:t,ui:e}),d=e.extensionMode===n.default.extensionModeLiveMedia?"0":s.default.radiuses,B=(s.default.border,s.default.border,s.default.border,I.default.getLayoutBlock({display:l,position:"fixed",top:"100%",left:c,width:a.default.getWidth({app:t,ui:e},!1),height:u,margin:a.default.getMargin({app:t,ui:e}),border:`1px solid ${s.default.borderRGB}`,borderRadius:d,WebkitOverflowScrolling:"touch",zIndex:9})),o=I.default.getContentBase(),F=I.default.getAnimationBase({transform:a.default.getTransform({app:t,ui:e}),transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:B,content:o,animation:F})}static getDetailRightSelf({app:t,ui:e}){const i=I.default.getLayoutBlock({position:"fixed",top:"0px",right:"0px",width:c.default.getWidth({app:t,ui:e}),minWidth:c.default.getWidth({app:t,ui:e}),height:`calc( 100% - ${s.default.getBlockSize({app:t,ui:e})}px )`,WebkitOverflowScrolling:"touch",overflow:"hidden",margin:`${s.default.getBlockSize({app:t,ui:e})}px 0px 0px 0px`,zIndex:0}),l=I.default.getContentBase(),n=I.default.getAnimationBase({transition:"0ms"});return I.default.get({layout:i,content:l,animation:n})}static getFooterBorders({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:return{borderTop:s.default.border};case n.default.screenSizeLargeLabel:return{border:s.default.border}}}static getFooterPositions({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:return{};case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return{position:"absolute",right:"0px",bottom:"0px"}}}static getWidth({app:t,ui:e},i=!1){let l="100%";switch(e.screenSize){case n.default.screenSizeLargeLabel:l="30%"}return i?l:I.default.trimUnit(l)}static getTransform({app:t,ui:e}){return d.getDetailClass({app:t,ui:e}).getTransform({app:t,ui:e})}static getHeader({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeLiveMedia?"none":"flex",l=I.default.getLayoutFlex({display:i,width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,maxHeight:`${s.default.getBlockSize({app:t,ui:e})}px`,borderBottom:`1px solid ${s.default.borderRGB}`,background:s.default.whiteRGBA,padding:"0px 20px"}),a=I.default.getContentBase({fontSize:"1.2em"}),c=I.default.getAnimationBase();return I.default.get({layout:l,content:a,animation:c})}static getHeaderP({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"100%",height:"100%",maxHeight:s.default.getBlockSize({app:t,ui:e})}),l=I.default.getContentBase({textOverflow:"ellipsis"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getBody({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeLiveMedia?`calc( 100% - ${s.default.getLiveMediaBlockSize({app:t,ui:e})}px )`:`calc( 100% - ${2*s.default.getBlockSize({app:t,ui:e})}px )`,l=I.default.getLayoutGrid({overflowX:"hidden",overflowY:"scroll",width:"100%",height:i,zIndex:0}),a=I.default.getContentBase(),c=I.default.getAnimationBase();return I.default.get({layout:l,content:a,animation:c})}static getMeta({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"max-content",background:s.default.lightRGBA,borderBottom:s.default.border}),l=I.default.getContentBase(),n=I.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:l,animation:n})}static getImg({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"30vh",maxHeight:"400px",backgroundImage:`url(${u.default})`,backgroundPosition:"center center",backgroundSize:"cover",backgroundRepeat:"no-repeat"}),l=I.default.getContentBase(),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getDescription({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"90%",height:"initial",margin:"7%"}),l=I.default.getContentBase({lineHeight:"2em",fontSize:"1.1em",textAlign:"left"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getDescriptionAnchor({app:t,ui:e}){const i=I.default.getLayoutInlineFlex({width:"auto"}),l=I.default.getContentBase({textDecoration:"none"}),n=I.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) scale(0.9)"});return I.default.get({layout:i,content:l,animation:n})}static getMetaContentTypeWrap({app:t,ui:e}){const i=I.default.getLayoutFlex({flexDirection:"column",alignItems:"flex-end",width:"initial",height:"initial",borderRadius:"10px",margin:`${2*d.margin}% ${d.margin}%`}),l=I.default.getContentBase({textAlign:"right"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getMetaContentType({app:t,ui:e}){const i=I.default.getLayoutBlock({background:s.default.reliefRGB,width:"initial",height:"initial",margin:"10px 0px",padding:"10px 20px 10px 20px",justifyContent:"flex-end",borderRadius:"30px"}),l=I.default.getContentBase({color:s.default.whiteRGB,textAlign:"right"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getCh({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"max-content",background:s.default.lightRGBA,borderTop:s.default.border,borderBottom:s.default.border,padding:"15px"}),l=I.default.getContentBase({textAlign:"left",lineHeight:"30px",wordBreak:"break-word"}),n=I.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return I.default.get({layout:i,content:l,animation:n})}static getAnalyze({app:t,ui:e}){const i=I.default.getLayoutTable({width:"100%",height:"initial",background:s.default.whiteRGB,borderTop:s.default.border,borderBottom:s.default.border}),l=I.default.getContentBase({textAlign:"center"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeRow({app:t,ui:e}){const i=I.default.getLayoutTableRow({}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeCol({app:t,ui:e}){const i=I.default.getLayoutTableCol({width:"33.3%",height:"120px",verticalAlign:"middle",margin:"40px auto 40px auto"}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeLabel({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"initial",height:"initial",marginBottom:"20px"}),l=I.default.getContentBase({lineHeight:"14px",fontSize:"0.8em"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeValue({app:t,ui:e}){const i=I.default.getLayoutBlock({margin:"0 auto",width:"initial",height:"initial"}),l=I.default.getContentBase({fontSize:"1.8em",color:s.default.themeRGBA}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getAnalyzeHr({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"70%",height:"initial",margin:"10px auto 10px auto",borderTop:`1px solid ${s.default.borderRGB}`}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getH1s({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"100%",height:"initial",margin:`${d.margin}px auto`,background:s.default.whiteRGB,borderTop:s.default.border,borderBottom:s.default.border}),l=I.default.getContentBase({textAlign:"left"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getH1sLi({app:t,ui:e}){const i=I.default.getLayoutBlock({width:"90%",height:"initial",margin:`5px ${d.margin}% 5px ${d.margin}%`}),l=I.default.getContentBase({lineHeight:2,textAlign:"left"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooter({app:t,ui:e}){const i=d.getFooterPositions({app:t,ui:e}),l=d.getFooterBorders({app:t,ui:e}),n=I.default.getLayoutFlex({width:"100%",background:s.default.lightRGBA,height:s.default.getBlockSize({app:t,ui:e}),boxShadow:s.default.lineShadow,zÎndex:"1px",...i,...l}),a=I.default.getContentBase({fontSize:"0.7em"}),c=I.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px)"});return I.default.get({layout:n,content:a,animation:c})}static getFooterChild({app:t,ui:e}){const i=I.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooterChildLike({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooterChildMoney({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getFooterChildShare({app:t,ui:e}){const i=I.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",height:"100%"}),l=I.default.getContentBase({cursor:"pointer"}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getMetaItems({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"90%",margin:`${d.margin}%`}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getUpdateWrap({app:t,ui:e}){const i=I.default.getLayoutFlex({justifyContent:"flex-end",alignItems:"flex-end",margin:"0px 0px 30px 0px"}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getUpdate({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"160px",borderRadius:"30px",background:s.default.themeRGBA}),l=I.default.getContentBase({textIndent:"15px",cursor:"pointer",color:s.default.whiteRGB}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}static getSpace({app:t,ui:e}){const i=I.default.getLayoutFlex({width:"100%",height:"100px",background:s.default.silverRGBA}),l=I.default.getContentBase({}),n=I.default.getAnimationBase();return I.default.get({layout:i,content:l,animation:n})}}e.default=d},3180:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(9301)),a=l(i(982)),c=l(i(2243));e.default=class{constructor(t){const{app:e,ui:i}=t,l=s.default.getDetailClass({app:e,ui:i});return{self:l.getFooter(t),child:l.getFooterChild(t),childLike:l.getFooterChildLike(t),childMoney:l.getFooterChildMoney(t),childShare:l.getFooterChildShare(t)}}static getDetailClass({app:t,ui:e}){return e.screenSize===n.default.screenSizeSmallLabel?a.default:c.default}static get padding(){return 20}static get margin(){return 5}static getWidth({app:t,ui:e},i=!1){switch(e.screenSize){case n.default.screenSizeSmallLabel:return"100%";case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return s.default.getDetailClass({app:t,ui:e}).getWidth({app:t,ui:e},i)}}}},982:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9301)),c=l(i(3829)),g=l(i(9167)),I=l(i(4381));class u{static getWidth({app:t,ui:e},i=!1){let l="0";return l=e.extensionMode===n.default.extensionModeLiveMedia?"100%":e.screenSize===n.default.screenSizeSmallLabel?String(Math.floor(e.width*s.default.widthRatio))+"px":`calc( ${100*s.default.widthRatio}% - ${c.default.getWidth({app:t,ui:e})} )`,i?I.default.trimUnit(l):l}static getBaseMarginRate({app:t,ui:e},i=!1){return Math.floor((1-s.default.widthRatio)/2*100)}static getBaseMargin({app:t,ui:e},i=!1){return g.default.getWidth({app:t,ui:e},!0)*(u.getBaseMarginRate({app:t,ui:e})/100)}static getMargin({app:t,ui:e},i=!1){if(e.extensionMode===n.default.extensionModeLiveMedia)return"0";if(e.extensionMode===n.default.extensionModeBottom)return"0% 8%";switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:const i=u.getBaseMarginRate({app:t,ui:e});return`0% ${i}% 0% ${i}%`}}static getHeight({app:t,ui:e},i=!1){const l=u.getBaseMarginRate({app:t,ui:e}),a=s.default.getBlockSize({app:t,ui:e});if(e.extensionMode===n.default.extensionModeLiveMedia)return`calc(100% - ${s.default.getBlockSize({app:t,ui:e})}px)`;switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:return`calc( ${100-l}% - ${2*a}px )`;case n.default.screenSizeLargeLabel:return`calc( 100% - ${2*a+u.getBaseMargin({app:t,ui:e})}px )`}}static getTransform({app:t,ui:e}){return e.isOpenDetail?u.getOpenSelfTransform({app:t,ui:e}):u.getCloseSelfTransform({app:t,ui:e})}static getCloseSelfTransform({app:t,ui:e}){return"translate3d(0%, 0px, 0px)"}static getOpenSelfTransform({app:t,ui:e}){return e.extensionMode,n.default.extensionModeLiveMedia,`translate3d(0%, calc( -100% - ${s.default.getBlockSize({app:t,ui:e})}px ), 0px)`}static getHeader(t){return a.default.getHeader(t)}static getHeaderP(t){return a.default.getHeaderP(t)}static getBody(t){return a.default.getBody(t)}static getMeta(t){return a.default.getMeta(t)}static getImg(t){return a.default.getImg(t)}static getDescription(t){return a.default.getDescription(t)}static getDescriptionAnchor(t){return a.default.getDescriptionAnchor(t)}static getMetaContentTypeWrap(t){return a.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return a.default.getMetaContentType(t)}static getCh(t){return a.default.getCh(t)}static getAnalyze(t){return a.default.getAnalyze(t)}static getAnalyzeRow(t){return a.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return a.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return a.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return a.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return a.default.getAnalyzeHr(t)}static getH1s(t){return a.default.getH1s(t)}static getH1sLi(t){return a.default.getH1sLi(t)}static getFooter(t){return a.default.getFooter(t)}static getFooterChild(t){return a.default.getFooterChild(t)}static getFooterChildLike(t){return a.default.getFooterChildLike(t)}static getFooterChildMoney(t){return a.default.getFooterChildMoney(t)}static getFooterChildShare(t){return a.default.getFooterChildShare(t)}static getMetaItems(t){return a.default.getMetaItems(t)}static getUpdateWrap(t){return a.default.getUpdateWrap(t)}static getUpdate(t){return a.default.getUpdate(t)}static getSpace(t){return a.default.getSpace(t)}}e.default=u},2243:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(9301)),a=l(i(4381));class c{static get widthDecimalRate(){return.3}static get widthRate(){return 100*c.widthDecimalRate}static get otherWidthDecimalRate(){return 1-c.widthDecimalRate}static get otherWidthRate(){return 100*c.otherWidthDecimalRate}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:l="0%";break;case n.default.screenSizeLargeLabel:l="30%"}return i?a.default.trimUnit(l):l}static getMinWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="0%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l="320px"}return i?a.default.trimUnit(l):l}static getTransform({app:t,ui:e}){let i=c.closeSelfTransform;switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:i=c.closeSelfTransform;break;case n.default.screenSizeLargeLabel:i="translate3d(0px, 0px, 0px)"}return i}static get closeSelfTransform(){return`translate3d(0%, calc( 100% + ${2*s.default.padding}px ), 0px)`}static get openSelfTransform(){return"translate3d(0%, 0%, 0px)"}static getHeader(t){return s.default.getHeader(t)}static getHeaderP(t){return s.default.getHeaderP(t)}static getBody(t){return s.default.getBody(t)}static getMeta(t){return s.default.getMeta(t)}static getImg(t){return s.default.getImg(t)}static getDescription(t){return s.default.getDescription(t)}static getDescriptionAnchor(t){return s.default.getDescriptionAnchor(t)}static getMetaContentTypeWrap(t){return s.default.getMetaContentTypeWrap(t)}static getMetaContentType(t){return s.default.getMetaContentType(t)}static getCh(t){return s.default.getCh(t)}static getAnalyze(t){return s.default.getAnalyze(t)}static getAnalyzeRow(t){return s.default.getAnalyzeRow(t)}static getAnalyzeCol(t){return s.default.getAnalyzeCol(t)}static getAnalyzeLabel(t){return s.default.getAnalyzeLabel(t)}static getAnalyzeValue(t){return s.default.getAnalyzeValue(t)}static getAnalyzeHr(t){return s.default.getAnalyzeHr(t)}static getH1s(t){return s.default.getH1s(t)}static getH1sLi(t){return s.default.getH1sLi(t)}static getFooter(t){return s.default.getFooter(t)}static getFooterChild(t){return s.default.getFooterChild(t)}static getFooterChildLike(t){return s.default.getFooterChildLike(t)}static getFooterChildMoney(t){return s.default.getFooterChildMoney(t)}static getFooterChildShare(t){return s.default.getFooterChildShare(t)}static getMetaItems(t){return s.default.getMetaItems(t)}static getUpdateWrap(t){return s.default.getUpdateWrap(t)}static getUpdate(t){return s.default.getUpdate(t)}static getSpace(t){return s.default.getSpace(t)}}e.default=c},3817:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(4381));class a{constructor(t){return{self:a.getSelf(t)}}static get datasetsBase(){return{backgroundColor:"rgba(240, 100, 195, 0.2 )",borderCapStyle:"square",borderColor:"rgba(240, 100, 195, 0.8 )",borderWidth:"4",pointBackgroundColor:"rgba(240, 100, 195, 0.8 )",pointBorderColor:"rgba(240, 100, 195, 0 )",pointHoverBackgroundColor:"rgba(255, 255, 255, 0.8 )",pointHoverBorderColor:"rgba(240, 100, 195, 0.8 )",pointHoverBorderWidth:"4",data:[]}}static get optionsBase(){return{responsive:!0,responsiveAnimationDuration:0,elements:{point:{backgroundColor:"rgba(79, 174, 159, 0.6)",borderAlign:"left",borderColor:"rgba(79, 174, 159, 0.6)",borderWidth:100},line:{tension:.1,backgroundColor:"rgba(79, 174, 159, 0.6)",borderWidth:"10",borderColor:"rgba(79, 174, 159, 0.6)",borderCapStyle:"square",borderDash:[]}},legend:{display:!1},tooltips:{enabled:!0,intersect:!0,backgroundColor:"rgba(240, 100, 195, 0.7 )",callbacks:{label:(t,e)=>{let i=e.datasets[t.datasetIndex].label||"";return i&&(i+=": "),i+=Math.round(100*t.yLabel)/100,"0"!==i?i:null},title:(t,e)=>t.map((t=>e.labels[t.index]))}},scale:{ticks:{fontSize:16,fontColor:n.default.fontBaseRGB,backdropColor:"rgba(255,255,255,0)",beginAtZero:!0,max:5,min:0,stepSize:1},pointLabels:{fontSize:14,fontColor:n.default.fontBaseRGB}}}}static getSelf(t){const e=s.default.getLayoutFlex({height:"auto",marginBottom:"40px",flexDirection:"column"}),i=s.default.getContentBase({}),l=s.default.getAnimationBase({});return s.default.get({layout:e,content:i,animation:l})}}e.default=a},1540:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static getTop({app:t,ui:e}){return 0}static getSelfTransform({app:t,ui:e},i=""){return e.extensionMode===n.default.extensionModeBottom?e.isDispPosts?"translate3d(0px, -100%, 0px)":"translate3d(0px, 0%, 0px)":"translate3d(0px, 0px, 0px)"}static getSelfTransition({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?(e.isDispPosts,`${s.default.transitionOn}ms`):"0ms"}static getSelf({app:t,ui:e}){const i=a.default.getLayoutFlex({position:"fixed",top:c.getTop({app:t,ui:e}),justifyContent:"flex-start",alignItems:"flex-start",height:"100%"}),l=a.default.getContentBase(),n=a.default.getAnimationBase({transform:c.getSelfTransform({app:t,ui:e}),transition:c.getSelfTransition({app:t,ui:e})});return a.default.get({layout:i,content:l,animation:n})}}e.default=c},434:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9301)),c=l(i(3829)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t)}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="200%";break;case n.default.screenSizeMiddleLabel:l=t.isOpenDetail?`calc( 100% + ${c.default.getWidth({app:t,ui:e})} )`:`calc( 100% + ${a.default.getWidth({app:t,ui:e})} )`;break;case n.default.screenSizeLargeLabel:l="100%"}return i?g.default.trimUnit(l):l}static getLeft({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l="0px"}return i?g.default.trimUnit(l):l}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";if(e.extensionMode===n.default.extensionModeBottom)i=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( -50%, 0px, 0px )";else switch(e.screenSize){case n.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 100%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case n.default.screenSizeMiddleLabel:i=e.isOpenDetail?`translate3d( -${c.default.baseWidth}, 0px, 0px )`:"translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getBorders({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?{border:0}:e.screenSize===n.default.screenSizeSmallLabel?{border:s.default.border}:{borderTop:s.default.border,borderBottom:s.default.border}}static getSelf({app:t,ui:e}){const i=I.getBorders({app:t,ui:e}),l=e.extensionMode===n.default.extensionModeBottom?s.default.radiuses:"0px",a=g.default.getLayoutFlex({position:"fixed",bottom:"0px",left:I.getLeft({app:t,ui:e}),height:s.default.getBlockSize({app:t,ui:e}),width:I.getWidth({app:t,ui:e}),zIndex:s.default.maxZIndex,borderRadius:l,justifyContent:"flex-start",...i}),c=g.default.getAnimationBase({transform:I.getTransform({app:t,ui:e}),transition:s.default.getTransition({app:t,ui:e})});return g.default.get({layout:a,content:{},animation:c})}}e.default=I},9422:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t),headTab:c.getHeadTab(t),rightIcon:c.getRightIcon(t),leftIcon:c.getLeftIcon(t),userIcon:c.getUserIcon(t),userIconImg:c.getUserIconImg(t),liveCntWrap:c.getLiveCntWrap(t),childAnalyzeWrap:c.getChildAnalyzeWrap(t),childAnalyzeType:c.getChildAnalyzeType(t),childAnalyzeCnt:c.getChildAnalyzeCnt(t),childTalknLogo:c.getChildTalknLogo(t)}}static get selfHeight(){return"100%"}static get notifHeight(){return 20}static get notifOpenTranslate(){return 20}static get widthRatio(){return.94}static getNotifOpenTranslateY({app:t,ui:e}){return`translate3d( 0px, ${s.default.getBlockSize({app:t,ui:e})}px, 0px )`}static get notifCloseTranslateY(){return"translate3d( 0px, 0px, 0px )"}static getNotifTranslateY({app:t,ui:e}){return e.isOpenNotif?c.getNotifOpenTranslateY({app:t,ui:e}):c.notifCloseTranslateY}static getMargin({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?"0px 5% 0px 5%":"0 auto"}static getChildAnalyzeRight({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:return"5%";case n.default.screenSizeMiddleLabel:return"10%";case n.default.screenSizeLargeLabel:return"15%"}}static getChildAnalyzePositions({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"8px 0px 0px 0px":"7px auto";return e.extensionMode===n.default.extensionModeBottom||(e.extensionMode,n.default.extensionModeModal),{position:"absolute",top:"0px",right:c.getChildAnalyzeRight({app:t,ui:e}),margin:i}}static getBorderRadius({app:t,ui:e},i=!1){return e.extensionMode===n.default.extensionModeBottom?"100%"===e.extensionWidth?"0px":`${s.default.radius} ${s.default.radius} 0px 0px`:e.extensionMode===n.default.extensionModeModal?`${s.default.radius} ${s.default.radius} 0px 0px`:0}static getSelf({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeBottom?"90%":"100%",l=e.extensionMode===n.default.extensionModeNone?0:s.default.border,g=c.getBorderRadius({app:t,ui:e}),I=e.extensionMode===n.default.extensionModeNone?s.default.lineShadow:s.default.lineInsetShadow,u=a.default.getLayoutFlex({position:"fixed",top:0,left:0,width:i,height:`${s.default.getBlockSize({app:t,ui:e})}px`,borderTop:l,borderRight:s.default.border,borderBottom:s.default.border,borderLeft:s.default.border,borderRadius:g,background:s.default.whiteRGB,margin:c.getMargin({app:t,ui:e}),zIndex:1e3,boxShadow:I}),d=a.default.getContentBase({textAlign:"center"}),B=a.default.getAnimationBase({transform:c.getNotifTranslateY({app:t,ui:e})});return a.default.get({layout:u,content:d,animation:B})}static getUserIcon(t){const e=a.default.getLayoutBlock({flexGrow:2,height:"auto"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getUserIconImg(t){const e=a.default.getLayoutInlineBlock({width:"30px",margin:"0px 10px 0px 0px"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getLiveCntWrap(t){const e=a.default.getLayoutInlineBlock({position:"absolute",width:"100%",height:"100%",top:"3px",left:"20%"}),i=a.default.getAnimationBase();return a.default.get({layout:e,content:{},animation:i})}static getHeadTab({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"60%":"40%",l=a.default.getLayoutFlex({justifyContent:"center",width:i,height:"100%"}),s=a.default.getContentBase({fontSize:"1.2em"}),c=a.default.getAnimationBase();return a.default.get({layout:l,content:s,animation:c})}static getRightIcon({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"20%":"30%",l=a.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:i,height:"100%"}),s=a.default.getAnimationBase();return a.default.get({layout:l,content:{},animation:s})}static getLeftIcon({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"20%":"30%",l=a.default.getLayoutFlex({flexFlow:"column",alignItems:"center",justifyContent:"center",width:i,height:"100%"}),s=a.default.getContentBase({}),c=a.default.getAnimationBase();return a.default.get({layout:l,content:s,animation:c})}static getChildAnalyzeWrap({app:t,ui:e}){const i=c.getChildAnalyzePositions({app:t,ui:e}),l=a.default.getLayoutFlex({...i,flexDirection:"column",width:"40px",height:"28px"}),n=a.default.getContentBase({}),s=a.default.getAnimationBase();return a.default.get({layout:l,content:n,animation:s})}static getChildAnalyzeType({app:t,ui:e}){const i=a.default.getLayoutBlock({height:"14px",marginBottom:"4px"}),l=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getChildAnalyzeCnt({app:t,ui:e}){const i=a.default.getLayoutBlock({height:"14px"}),l=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getChildTalknLogo({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({position:"absolute",width:`${s.default.getBlockSize({app:t,ui:e})}px`,height:`${s.default.getBlockSize({app:t,ui:e})}px`}),l=a.default.getContentBase({color:s.default.themeRGBA,fontWeight:"bold"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getNotif({app:t,ui:e}){const i=a.default.getLayoutBlock({position:"relative",top:`${s.default.getBlockSize({app:t,ui:e})}px`,width:"50%",height:s.default.notifHeight,margin:"0 auto",zIndex:"10",background:"rgba(0, 0, 0, 0.4)",borderRadius:"20px"}),l=a.default.getContentBase({color:"rgb(255,255,255)",textAlign:"center",lineHeight:2,cursor:"pointer"}),n=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e})});return a.default.get({layout:i,content:l,animation:n})}}e.default=c},865:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7638)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381)),g=l(i(4425)),I=l(i(685)),u=l(i(5069)),d=l(i(6631)),B=l(i(3673)),o=l(i(3152)),F=l(i(3588)),r=l(i(5328)),C=l(i(7873)),U=l(i(1262)),Q=l(i(1635)),b=l(i(4697)),V=l(i(5474)),A=l(i(4726));class x{constructor(t){t.bootOption,t.app;const e=x.getSvgIcon(t),i=x.getHeadTab(t),l=x.getMenu(t),n=x.getTalknLogo(t),s=x.getUser(t),a=x.getHeaderUser(t),c=x.getTag(t),g=x.getHome(t),I=x.getGraph(t);return{svgIcon:e,headTab:i,menu:l,talknLogo:n,user:s,headerUser:a,search:x.getSearch(t),tag:c,home:g,graph:I,index:x.getIndex(t),logs:x.getLogs(t),setting:x.getSetting(t),thunder:x.getThunder(t),bubble:x.getBubble(t),detail:x.getDetail(t),heart:x.getHeart(t),share:x.getShare(t),money:x.getMoney(t),openEmoji:x.getOpenEmoji(t),close:x.getClose(t),ch:x.getCh(t),update:x.getUpdate(t),loading:x.getLoading(t),tune:x.getTune(t),liveCnt:x.getLiveCnt(t),stampStr:x.getStampStr(t),stampLabel:x.getStampLabel(t)}}static get defaultOption(){return{sizePx:x.largeSize,active:!0}}static get smallSize(){return"24px"}static get middleSize(){return"36px"}static get largeSize(){return"48px"}static get bigSize(){return"64px"}static get smallMargin(){return 2}static get largeMargin(){return 4}static getMargin({app:t,ui:e}){return e.screenSize===s.default.screenSizeSmallLabel?x.smallMargin:x.largeMargin}static getSvgIcon({app:t,ui:e},i={active:!1,key:""}){const l=x.smallSize,n=e.screenSize===s.default.screenSizeSmallLabel?"0":"4px 0 6px";return c.default.get({layout:c.default.getLayoutInlineFlex({width:l,maxWidth:l,minWidth:l,height:l,maxHeight:l,minHeight:l,margin:n}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getEmpty({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:n}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTwitter({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?V.default:A.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getFacebook({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?o.default:F.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAppstore({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?u.default:d.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getAndroid({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?g.default:I.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getHome({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?U.default:Q.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getGraph({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=i.active?r.default:C.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalkn({app:t,ui:e},i={}){const l=(i={...x.defaultOption,...i}).sizePx?i.sizePx:x.middleSize,n=(i.active,b.default),s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,height:l,minWidth:l,minHeight:l,backgroundSize:l,backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat"}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTalknLogo({app:t,ui:e}){return{img:c.default.get({layout:c.default.getLayoutBlock({backgroundImage:`url(${n.default.assetsImgPath}talkn_logo2.png)`,backgroundPosition:"center center",backgroundSize:"90%",backgroundRepeat:"no-repeat"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getChromeExtension({app:t,ui:e},i={}){i={...x.defaultOption,...i};const l="100%",n=B.default,s=i.active?"pointer":"default";return c.default.get({layout:c.default.getLayoutBlock({flexGrow:"1",width:l,minWidth:l,height:"180px",minHeight:"60px",backgroundSize:"75%",backgroundPosition:"center",backgroundImage:`url(${n})`,backgroundRepeat:"no-repeat",backgroundColor:a.default.silverRGBA}),content:c.default.getContentBase({cursor:s}),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}static getTag({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),left:c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(45deg) translate3d(5px, 5px, 0px)"})}),right:c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"12px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(-135deg) translate3d(-6px, -4px, 0px)"})}),bar:c.default.get({layout:c.default.getLayoutInlineBlock({background:a.default.reliefRGB,width:"2px",height:"13px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(40deg) translate3d(-5px, 13px, 0px)"})})}}static getHomeCss({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutInlineBlock({borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"19px",height:"18px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(135deg) translate3d(5px, -3px, 0px)"})}),n=c.default.get({layout:c.default.getLayoutInlineBlock({borderRight:`2px solid ${a.default.reliefRGB}`,borderBottom:`2px solid ${a.default.reliefRGB}`,borderLeft:`2px solid ${a.default.reliefRGB}`,borderRadius:"0px",margin:"0 auto",width:"20px",height:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(2px, -6px, 0px)"})});return{div:i,leaf:l,door:c.default.get({layout:c.default.getLayoutInlineBlock({background:`${a.default.reliefRGB}`,width:"6px",height:"8px",margin:"0 auto",borderRadius:"5px 5px 0px 0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(-11px, -5px, 0px)"})}),base:n}}static getSearch({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:`${a.default.getBlockSize({app:t,ui:e})}px`,height:`${a.default.getBlockSize({app:t,ui:e})}px`,borderRadius:"100px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),circle:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",top:"4px",left:"16px",margin:"7px auto",width:"18px",height:"18px",borderRadius:"100px",border:`3px solid ${a.default.chromeOffTabRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bar:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"23px",left:"13px",margin:"0 auto",background:a.default.chromeOffTabRGB,width:"4px",height:"12px",borderRadius:"10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"scale(1) translate3d(0px, 0px, 0px) rotate(45deg)"})})}}static getUser({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),top:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"6px",height:"6px",borderRadius:"10px",position:"relative",top:"-10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"8px",height:"12px",borderRadius:"6px",position:"relative",top:"10px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getHeaderUser({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:"5px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),top:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:`${a.default.chromeOffTabRGB}`,width:"14px",height:"14px",borderRadius:"10px",position:"relative",top:"-12px",border:"3px solid rgb(250, 250, 250)"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:`${a.default.chromeOffTabRGB}`,width:"10px",height:"16px",borderRadius:"6px",position:"relative",top:"12px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) translate3d( 0px, 0px, 0px )"})})}}static getIndex({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutBlock({width:"24px",height:"24px",margin:"0 auto",borderRadius:"4px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),n=c.default.get({layout:c.default.getLayoutBlock({width:"24px",height:"2px",margin:"5px auto",borderRadius:"6px",background:a.default.reliefRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()});return{div:i,wrap:l,top:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),middle:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bottom:c.default.get({layout:n,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})})}}static getLogs({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"3px",left:"-6px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 ) rotate(-15deg)"})}),n=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"9px",height:"13px",borderRadius:"45px 30px 45px 45px",position:"relative",left:"2px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),s=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"6px",height:"8px",borderRadius:"10px",position:"relative",top:"-2px",left:"2px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),g=c.default.get({layout:c.default.getLayoutBlock({width:"7px",height:"2px",background:a.default.offWhiteRGB,margin:"0 auto",zIndex:"1000",position:"relative",left:"1px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 1px, -9px, 1000px )"})}),I=c.default.get({layout:c.default.getLayoutInlineBlock({width:"36px",height:"36px",position:"absolute",top:"-4px",left:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 0.5 ) rotate(30deg)"})}),u=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"11px",height:"21px",borderRadius:"30px 50px 40px 40px",position:"relative",left:"-1px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),d=c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",background:a.default.reliefRGB,width:"8px",height:"8px",borderRadius:"2px 2px 3px 3px",position:"relative",left:"-1px",zIndex:"0"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:i,foot1:l,foot1Top:n,foot1Space:g,foot1Bottom:s,foot2:I,foot2Top:u,foot2Space:c.default.get({layout:c.default.getLayoutBlock({width:"19px",height:"3px",background:a.default.offWhiteRGB,margin:"0 auto",zIndex:"1000"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, -10px, 1000px )"})}),foot2Bottom:d}}static getSetting({app:t,ui:e}){const i=c.default.get({layout:c.default.getLayoutInlineBlock({width:"24px",height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"scale( 1 )"})}),l=c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",background:a.default.reliefRGB,width:"4px",height:"4px",borderRadius:"1px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})});return{div:i,wing1:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(9.5px, 1px, 0px) rotate(0deg)"})}),wing2:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 15px, 4px, 0px ) rotate( 45deg )"})}),wing3:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 17px, 9px, 0px ) rotate( 90deg )"})}),wing4:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 15.5px, 14px, 0px ) rotate( 125deg )"})}),wing5:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 9.5px, 17px, 0px ) rotate( 180deg )"})}),wing6:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 3px, 14px, 0px ) rotate( 225deg )"})}),wing7:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 1px, 9px, 0px ) rotate( 270deg )"})}),wing8:c.default.get({layout:l,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 2.5px, 4px, 0px ) rotate( 315deg )"})}),circle:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",top:"2px",left:"3px",width:"16px",height:"16px",border:`3px solid ${a.default.reliefRGB}`,borderRadius:"50px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 1px, 0px )"})})}}static getThunder({app:t,ui:e}){let i=a.default.reliefRGBA;return s.default.isActiveMultistream({app:t,ui:e})&&(i=a.default.themeRGBA),{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"rotate(0deg) translate(0px, 0px)"})}),wrap:c.default.get({layout:c.default.getLayoutInlineBlock({borderRadius:"50px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"rotate(90deg) translate3d(0px,0px,0px)"})}),top:c.default.get({layout:c.default.getLayoutBlock({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:"transparent",borderRightColor:"transparent",borderBottomColor:`${i}`,borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(-3px, -3px)"})}),bottom:c.default.get({layout:c.default.getLayoutFlex({position:"relative",top:"0px",left:"0px",width:"0px",height:"0px",margin:"0 auto",borderWidth:"8px 8px 10px 8px",borderTopStyle:"solid",borderRightStyle:"solid",borderBottomStyle:"solid",borderLeftStyle:"solid",borderTopColor:`${i}`,borderRightColor:"transparent",borderBottomColor:"transparent",borderLeftColor:"transparent",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderBottomRightRadius:"0px",borderBottomLeftRadius:"0px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(60deg, 0deg) rotate(0deg) translate(15px, -3px)"})})}}static getPlay({app:t,ui:e}){const i=e.isOpenLinks?a.default.themeRGB:a.default.reliefRGB,l="24px";return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),playCircle:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",width:l,height:l,minWidth:l,minHeight:l,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),playTriangle:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",width:"6px",height:"6px",borderTop:"6px solid transparent",borderRight:"6px solid transparent",borderBottom:"6px solid transparent",borderLeft:`6px solid ${i}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(4px, 1.5px, 0px)"})})}}static getLinks({app:t,ui:e}){const i=a.default.themeRGB,l="24px",n="14px",s="4px";return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"center",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),linksA1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"6px",width:l,height:n,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksA2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",left:"5px",width:s,height:s,borderRadius:"10px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})}),linksB1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"0px",width:l,height:n,border:`2px solid ${i}`,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),linksB2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"-5px",left:"-5px",width:s,height:s,borderRadius:"10px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})})}}static getBubble({app:t,ui:e}){const i=e.isBubblePost?a.default.themeRGB:a.default.reliefRGBA;return{div:c.default.get({layout:c.default.getLayoutFlex({flexDirection:"column",alignItems:"center",justifyContent:"flex-start",width:"30px",height:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate(0px, 0px)"})}),bubble:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"18px",height:"14px",background:i,borderRadius:"30px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"translate3d(0px,0px,0px)"})}),bubbleBar:c.default.get({layout:c.default.getLayoutInlineBlock({position:"relative",top:"5px",width:"5px",height:"10px",background:i,border:`3px solid ${i}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.transitionOff,transform:"skew(30deg, 28deg) rotate(30deg) translate3d(-2px, -7px, 0px)"})})}}static getDetail({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0":"1px auto",l=c.default.get({layout:c.default.getLayoutInlineFlex({width:"40px",height:"40px",borderRadius:"100px",margin:i,cursor:"pointer"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),n=c.default.get({layout:c.default.getLayoutBlock({width:"26px",height:"28px",margin:"7px auto",borderRadius:"2px",background:`${a.default.calmRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),g=c.default.get({layout:c.default.getLayoutBlock({width:"14px",height:"2px",margin:"3px auto",borderRadius:"6px",background:a.default.whiteRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()});return{div:l,wrap:n,bar1:c.default.get({layout:{...g,width:"7px",margin:"5px 0px 0px 6px"},content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar2:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d( 0px, 0px, 0px )"})}),bar3:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),bar4:c.default.get({layout:g,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:"translate3d( 0px, 0px, 0px )"})}),mekuri:c.default.get({layout:{...g,position:"absolute",top:0,rightt:0,width:0,height:0,borderRadius:0,borderTop:`4px solid ${a.default.whiteRGB}`,borderLeft:`4px solid ${a.default.whiteRGB}`,borderRight:`4px solid ${a.default.reliefRGB}`,borderBottom:`4px solid ${a.default.reliefRGB}`},content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(18px, -3px, 0px) rotate( 90deg )"})})}}static getMenu({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"40px",height:"40px",margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})})}),dot:c.default.get({layout:c.default.getLayoutBlock({position:"relative",top:"2px",width:"6px",height:"6px",margin:"4px auto",borderRadius:"6px",background:a.default.calmRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()})}}static getHeadTabLeftTransform(){return x.getHeadTabLeftOpenTransform}static getHeadTabRightTransform(){return x.getHeadTabRightOpenTransform}static get getHeadTabLeftOpenTransform(){return"rotate( 120deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightOpenTransform(){return"rotate( -120deg ) translate3d(-3px, 5px, 0px)"}static get getHeadTabLeftCloseTransform(){return"rotate( 90deg ) translate3d(3px, 5px, 0px)"}static get getHeadTabRightCloseTransform(){return"rotate( -90deg ) translate3d(-3px, 5px, 0px)"}static getHeadTab({app:t,ui:e}){const i=c.default.getLayoutInlineBlock({width:"4px",borderRadius:"10px",background:a.default.calmRGB});return{div:c.default.get({layout:c.default.getLayoutBlock({width:"40px",height:"20px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase()}),left:c.default.get({layout:i,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:x.getHeadTabLeftTransform()})}),right:c.default.get({layout:i,content:c.default.getContentBase(),animation:c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e}),transform:x.getHeadTabRightTransform()})})}}static getHeart({app:t,ui:e}){return e.openLockMenu===s.default.openLockMenuLabelShare?a.default.themeRGBA:a.default.reliefRGB,{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:x.smallSize,height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),before:c.default.get({layout:c.default.getLayoutBase({width:"10px",height:"17px",borderRadius:"10px 10px 0 0",background:a.default.reliefRGB}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"rotate(-45deg) translate3d(0px, 4px, 0px)"})}),after:c.default.get({layout:c.default.getLayoutBase({width:"17px",height:"10px",borderRadius:"0 10px 10px 0",background:a.default.reliefRGB}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"rotate(-45deg) translate3d(11px, -4px, 0px)"})})}}static getShare({app:t,ui:e}){const i=e.openLockMenu===s.default.openLockMenuLabelShare?a.default.themeRGBA:a.default.reliefRGB,l=c.default.get({layout:c.default.getLayoutInlineBlock({width:x.smallSize,height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),n=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"11px",left:"9px",width:"16px",height:"14px",margin:"0 auto",border:`2px solid ${i}`,borderRadius:"3px"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -3px, 0px)"})}),g=c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"6px",left:"16px",width:"2px",height:"11px",margin:"0 auto",background:i}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -3px, 0px)"})});return{div:l,base:n,whiteBar1:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"11px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -2px, 0px)"})}),whiteBar2:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",width:"5px",height:"4px",top:"10px",left:"18px",margin:"0 auto",background:"rgb(250, 250, 250)",zIndex:100}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -2px, 0px)"})}),bar:g,arrow:c.default.get({layout:c.default.getLayoutInlineBlock({position:"absolute",top:"5px",left:"13px",width:"8px",height:"8px",borderTop:`2px solid ${i}`,borderRight:`2px solid ${i}`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(-4px, -1px, 0px) rotate( -45deg)"})})}}static getMoney({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:x.smallSize,height:x.smallSize,margin:`${x.getMargin({app:t,ui:e})}px`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(0px, -2px, 0px)"})}),outer:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",width:"20px",height:"20px",borderRadius:"24px",border:`2px solid ${a.default.reliefRGB}`}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({transform:"translate3d(0px, 3px, 0px)"})}),inner:c.default.get({layout:c.default.getLayoutBlock({margin:"0 auto",width:"8px",height:"8px",borderRadius:"8px",border:`2px solid ${a.default.reliefRGB}`}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 4px, 0px)"})})}}static getOpenEmoji(t){const{app:e,ui:i}=t,l="5px",n=s.default.screenSizeSmallLabel===i.screenSize?"none":"inline-block";return{div:c.default.get({layout:c.default.getLayoutInlineBlock({display:n,width:l,height:l,minWidth:l,minHeight:l,margin:"0px 5px 0px 0px",borderRight:"5px solid transparent",borderTop:"5px solid transparent",borderBottom:"5px solid transparent",borderLeft:"5px solid rgba(200,200,200,0.8)"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:a.default.getTransition({app:e,ui:i})})})}}static getCloseEmoji({app:t,ui:e}){const i="8px";return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:i,height:i,minWidth:i,minHeight:i,margin:"0px 0px 0px -20px",borderRight:"8px solid rgba(200,200,200,0.8)",borderTop:"8px solid transparent",borderBottom:"8px solid transparent",borderLeft:"8px solid transparent"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translate3d( 5px, 0px, 0px )",transition:a.default.getTransition({app:t,ui:e})})})}}static getCloseOptionModal({app:t,ui:e}){return{div:{position:"absolute",right:0,transform:`translate( 0px, -${a.default.getBlockSize({app:t,ui:e})+20}px)`}}}static getClose({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineFlex({width:a.default.getBlockSize({app:t,ui:e}),height:a.default.getBlockSize({app:t,ui:e}),margin:"1px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutFlex({alignItems:"center",justifyContent:"center",margin:"0 auto",width:"80%",height:"80%",background:a.default.calmRGBA,border:`0px solid ${a.default.calmRGB}`,borderRadius:"50%",boxShadow:"0px 0px 4px rgba(100, 100, 100, 1)"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(0deg)"})}),bar1:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"70%",background:a.default.whiteRGBA,borderRadius:"2px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(45deg)"})}),bar2:c.default.get({layout:c.default.getLayoutBlock({position:"absolute",margin:"0 auto",width:"2px",height:"70%",background:a.default.whiteRGBA,borderRadius:"2px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"translate3d(0px, 0px, 0px) rotate(-45deg)"})})}}static getCh({app:t,ui:e}){const i=a.default.lightGrayRGB;return{div:c.default.get({layout:c.default.getLayoutFlex({width:"46px",height:"46px"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),chC:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"3%",width:"44%",height:"44%",border:`4px solid ${i}`,borderRadius:"100%"}),content:{},animation:{}}),chCSpace:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"35%",left:"30%",width:"30%",height:"30%",background:a.default.lightRGB}),content:{},animation:{transform:"rotate(45deg)"}}),chCCircle1:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"37%",left:"33%",width:"9%",height:"9%",background:i,borderRadius:"100%"}),content:{},animation:{transform:"scale(1) translate(-32%, -60%)"}}),chCCircle2:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"59%",left:"33%",width:"9%",height:"9%",background:i,borderRadius:"100%"}),content:{},animation:{transform:"scale(1) translate(-7%, 30%)"}}),chH1:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"53%",width:"10%",height:"43%",background:i,borderRadius:"23%"}),content:{},animation:{}}),chH2:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"30%",left:"79%",width:"10%",height:"43%",background:i,borderRadius:"23%"}),content:{},animation:{}}),chH3:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",top:"47%",left:"53%",width:"36%",height:"9%",background:i}),content:{},animation:{}})}}static getUpdate({app:t,ui:e}){const i=a.default.whiteRGB;return{div:c.default.get({layout:c.default.getLayoutFlex({width:x.middleSize,height:x.middleSize}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"scale( 0.75)"})}),circle:c.default.get({layout:c.default.getLayoutBase({width:"55%",height:"55%",borderRadius:"30px",border:`2px solid ${i}`,overflow:"visible"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({})}),bar:c.default.get({layout:c.default.getLayoutBase({position:"relative",top:"1px",left:"12px",width:"8px",height:"8px",background:"none",borderTop:`0px solid ${a.default.themeRGB}`,borderRight:`2px solid ${i}`,borderBottom:`2px solid ${i}`,borderLeft:`0px solid ${a.default.themeRGB}`}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"rotate(25deg)"})}),white:c.default.get({layout:c.default.getLayoutBase({position:"relative",top:"2px",left:"12px",width:"10px",height:"4px",background:"rgba(100, 192, 170, 1)"}),content:c.default.getContentBase({cursor:"pointer"}),animation:c.default.getAnimationBase({transform:"rotate(25deg)"})})}}static getLoading({app:t,ui:e}){return a.default.whiteRGB,{div:c.default.get({layout:c.default.getLayoutFlex({}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutBase({margin:"0 auto",width:"2em",height:"2em",borderRadius:"50%",borderTop:"0.3em solid rgba(255, 255, 255, 0.2)",borderRight:"0.3em solid rgba(255, 255, 255, 0.2)",borderBottom:"0.3em solid rgba(255, 255, 255, 0.2)",borderLeft:"0.3em solid #ffffff"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"translateZ(0)",animation:"Rotation 1.1s infinite linear"})}),after:c.default.get({layout:c.default.getLayoutBase({display:"none",borderRadius:"50%",width:"2em",height:"2em"}),content:c.default.getContentBase(),animation:c.default.getAnimationBase({})})}}static getTune({app:t,ui:e}){const i="30px",l=1e6,n=a.default.chromeOffTabRGB,s="153px",g="190px",I="280px",u="317px",d="69px",B="146px",o="324px",F="401px";return{div:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",width:"500px",height:"500px"}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({transform:"scale(1)"})}),side1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"135px",left:"135px",border:`30px solid ${n}`,borderRadius:"300px",width:"230px",height:"230px",zIndex:0}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),side2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"50px",left:"50px",border:`30px solid ${n}`,borderRadius:"300px",width:"400px",height:"400px",zIndex:0}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),cut:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"50px",left:"-150px",background:"none",width:"0px",height:"0px",borderTop:`200px solid ${a.default.lightRGB}`,borderRight:"400px solid rgba(255,255,255,0)",borderBottom:`200px solid ${a.default.lightRGB}`,borderLeft:"400px solid rgba(255,255,255,0)",zIndex:1}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),center:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:"220px",left:"220px",width:"60px",height:"60px",borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftTop1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:s,left:d,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftTop2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:g,left:B,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftBottom1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:u,left:d,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalLeftBottom2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:I,left:B,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightTop1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:s,left:F,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightTop2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:g,left:o,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightBottom1:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:u,left:F,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),terminalRightBottom2:c.default.get({layout:c.default.getLayoutBase({position:"absolute",top:I,left:o,width:i,height:i,borderRadius:"100px",background:n,zIndex:l}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})})}}static getLiveCnt({app:t,ui:e}){return{div:c.default.get({layout:c.default.getLayoutInlineBlock({width:"26px",height:"26px",background:`rgba(${a.default.themeRGBString}, 0.85)`,borderRadius:"26px",boxShadow:"0px 0px 0px rgba(255,255,255,1)"}),content:c.default.getContentBase({fontSize:"0.7em",textAlign:"center"}),animation:c.default.getAnimationBase({})}),circle:c.default.get({layout:c.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:c.default.getContentBase({textAlign:"center",color:a.default.whiteRGB}),animation:c.default.getAnimationBase()})}}static getStampStr(t=!0){let e="1",i="40px",l="2em",n="flex-start";return t&&(e="1.5",i="100%",l="3.2em",n="center"),`display: flex;justify-content: ${n};align-items: center;width: 100%;height: ${i};transform: scale(${e});line-height: 2em;font-size: ${l};`}static getStampLabelAtMenuStr(t=!0){return"text-indent: 0.5em; font-size: 0.5em; letter-spacing: 0.1em;"}static getStampLabel({app:t,ui:e}){let i={height:"20px",justifyContent:"flex-end"},l={left:s.default.screenSizeSmallLabel===e.screenSize?"-12%":"-9%",color:a.default.whiteRGB,background:"rgba(80, 80 ,80, 0.3)",borderRadius:"5px 5px 0px 0px",justifyContent:"center"},n={color:a.default.whiteRGB,fontSize:"0.7em"};return e.isBubblePost||(i.height="40px",i.justifyContent="flex-start",l.left=s.default.screenSizeSmallLabel===e.screenSize?"30%":"27%",l.background="none",l.borderRadius=a.default.radius,l.justifyContent="flex-start",n.color=a.default.fontBaseRGB,n.fontSize="0.9em"),{div:c.default.get({layout:c.default.getLayoutFlex({position:"absolute",bottom:"0px",width:"100%",zIndex:10,...i}),content:c.default.getContentBase({}),animation:c.default.getAnimationBase({})}),label:c.default.get({layout:c.default.getLayoutFlex({position:"relative",width:"120px",height:"inherit",padding:"5px 5px 5px 20px",justifyContent:"center",alignItems:"center",...l}),content:c.default.getContentBase({...n}),animation:c.default.getAnimationBase({})})}}}e.default=x},6869:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(9167)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static getSelf({app:t,ui:e}){const i=s.default.getOlWidth({app:t,ui:e},!0),l=(100-i)/2,c=t.isOpenInnerNotif?n.default.getBlockSize({app:t,ui:e}):0,g=a.default.getLayoutFlex({position:"fixed",top:n.default.getBlockSize({app:t,ui:e})+"px",alignItems:"center",justifyContent:"center",width:`calc( ${i}% - 2px )`,margin:`0px calc( ${l}% + 1px ) 0px calc( ${l}% + 1px )`,height:c,background:n.default.themeRGBA,zIndex:20}),I=a.default.getContentBase({color:n.default.whiteRGB}),u=a.default.getAnimationBase({transition:`${n.default.transitionNotif}ms`});return a.default.get({layout:g,content:I,animation:u})}}e.default=c},2945:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(4381));class a{constructor(t){return{self:a.getSelf(t),tuneLi:a.getTuneLi(t),activeLi:a.getActiveLi(t),unactiveLi:a.getUnactiveLi(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return n.default.themeRGB}static get unactiveColor(){return n.default.fontBaseRGB}static get activeBgColor(){return n.default.whiteRGBA}static get unactiveBgColor(){return"rgba( 235, 235, 235, 0.96 )"}static getSelf({app:t,ui:e}){const i=a.size+"px",l=s.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:a.activeBgColor,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),c=s.default.getContentBase({cursor:"pointer"}),g=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:c,animation:g})}static getTuneLi({app:t,ui:e}){const i=a.getActiveLi({app:t,ui:e});return i.alignItems="center",i}static getActiveLi({app:t,ui:e}){const i=a.getSelf({app:t,ui:e});return i.background=a.activeBgColor,i.color=n.default.fontBaseRGB,i}static getUnactiveLi({app:t,ui:e}){const i=a.getSelf({app:t,ui:e});return i.background=a.unactiveBgColor,i.color=n.default.fontBaseRGB,i}}e.default=a},7825:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(5549)),s=l(i(4381));class a{constructor(t){return{self:a.getSelf(t),linksUl:a.getLinksUl(t),linksLi:a.getLinksLi(t),linksLiActive:a.getLinksLiActive(t),linksLiUnactive:a.getLinksLiUnactive(t),linkMenuUl:a.getLinkMenuUl(t),linkMenuLi:a.getLinkMenuLi(t),linksTabActive:a.getLinksTabActive(t),linksTabUnactive:a.getLinksTabUnactive(t),linksTabLast:a.getLinksTabLast(t)}}static get tuneSize(){return 50}static get size(){return 54}static get padding(){return 5}static get right(){return 0}static get activeColor(){return n.default.themeRGB}static get unactiveColor(){return n.default.fontBaseRGB}static getSelfDisplay({app:t,ui:e}){return e.isOpenLinks?"flex":"none"}static getLinksUlOevrflowY({app:t,ui:e}){return e.isOpenLinks?"scroll":"hidden"}static getSelf({app:t,ui:e}){const i=a.getSelfDisplay({app:t,ui:e}),l=s.default.getLayoutFlex({display:i,width:"100%",height:"calc( 100% )",flexDirection:"column",alignItems:"center",justifyContent:"flex-start",padding:"0px 3px 0px 0px"}),n=s.default.getContentBase({});return s.default.get({layout:l,content:n,animation:{}})}static getLinksUl({app:t,ui:e}){const i=a.getLinksUlOevrflowY({app:t,ui:e}),l=s.default.getLayoutFlex({height:"100%",width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"column",overflowX:"hidden",overflowY:i,overflowScrolling:"touch",WebkitOverflowScrolling:"touch"}),c=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:{},animation:c})}static getLinksLi({app:t,ui:e}){const i=a.size+"px",l=s.default.getLayoutFlex({alignItems:"flex-start",flexDirection:"column",width:"100%",height:i,minHeight:i,maxHeight:i,background:n.default.whiteRGBA,borderRadius:"5px",padding:"0px 0px 0px 10px",marginBottom:"5px"}),c=s.default.getContentBase({cursor:"pointer"}),g=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:c,animation:g})}static getLinksLiActive({app:t,ui:e}){const i=a.getLinksLi({app:t,ui:e});return i.background=n.default.whiteRGB,i.color=n.default.fontBaseRGB,i}static getLinksLiUnactive({app:t,ui:e}){const i=a.getLinksLi({app:t,ui:e});return i.background=n.default.calmRGB,i.color=n.default.fontBaseRGB,i}static getLinkMenuUl({app:t,ui:e}){const i=a.size+"px",l=s.default.getLayoutFlex({minHeight:i,height:i,width:"100%",justifyContent:"flex-start",alignItems:"flex-end",flexDirection:"row"}),c=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:{},animation:c})}static getLinkMenuLi({app:t,ui:e}){const i=a.size-4+"px",l=s.default.getLayoutFlex({justifyContent:"center",alignItems:"center",flexDirection:"row",flexGrow:1,margin:"5px 1% 0px 0px",height:i,minHeight:i,maxHeight:i,background:n.default.reliefRGB,borderRadius:"5px"}),c=s.default.getContentBase({cursor:"pointer",color:n.default.whiteRGB}),g=s.default.getAnimationBase({transition:n.default.getTransition({app:t,ui:e})});return s.default.get({layout:l,content:c,animation:g})}static getLinksTabActive({app:t,ui:e}){const i={};return i.background=n.default.whiteRGBA,i.color=n.default.fontBaseRGB,i}static getLinksTabUnactive({app:t,ui:e}){return a.getLinkMenuLi({app:t,ui:e})}static getLinksTabLast({app:t,ui:e}){return{margin:"5px 0px 0px 0px"}}}e.default=a},4289:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4381));class s{constructor(t){return{self:s.getSelf()}}static getSelf(){const t=n.default.getLayoutFlex({margin:"0 auto",height:"100vh",width:"10%"}),e=n.default.getAnimationBase();return n.default.get({layout:t,content:{},animation:e})}}e.default=s},9201:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{menuShare:c.getMenuShare(t),header:c.getHeader(t),ul:c.getUl(t),liGoWeb:c.getLiGoWeb(t),liTwitter:c.getLiTwitter(t),liFacebook:c.getLiFacebook(t),liEmbed:c.getLiEmbed(t),liEmbedInput:c.getLiEmbedInput(t),shareLabel:c.getShareLabel(t),label:c.getLabel(t)}}static getHeadTabUpdate({app:t,ui:e}){return{div:{position:"absolute",top:e.screenSize===n.default.screenSizeSmallLabel?"15px":"20px",right:"15px",transform:"scale(0.7)"}}}static getCommonLayout({app:t,ui:e}){const i={position:"fixed",width:"90%",height:"fit-content",minHeight:"fit-content",maxHeight:"fit-content",top:`calc( 100% + ${s.default.getBlockSize({app:t,ui:e})}px)`,left:"5%",flexFlow:"column",border:s.default.border,borderRadius:"5px",boxShadow:`${s.default.lineShadow}`};switch(e.screenSize){case n.default.screenSizeSmallLabel:case n.default.screenSizeMiddleLabel:i.width=""+100*s.default.widthRatio,i.left=(100-i.width)/2,i.width=i.width+"%",i.left=i.left+"%",i.zIndex=0;break;case n.default.screenSizeLargeLabel:i.width="33.3%",i.left="33.3%",i.zIndex=3}return i}static getCommonTransform({app:t,ui:e}){return e.openLockMenu===n.default.openLockMenuLabelNo?"translate3d(0px, 0px, 0px)":"translate3d(0px, -75vh, 0px)"}static getPaddingLi({app:t,ui:e}){switch(e.screenSize){case n.default.screenSizeSmallLabel:return"15px";case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return"15px 15px 15px 20px"}}static getMenuShare({app:t,ui:e}){const i=c.getCommonLayout({app:t,ui:e}),l=a.default.getLayoutFlex(i),n=a.default.getContentBase(),g=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:c.getCommonTransform({app:t,ui:e})});return a.default.get({layout:l,content:n,animation:g})}static getHeader({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:s.default.getBlockSize({app:t,ui:e}),maxHeight:s.default.getBlockSize({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow,padding:"0px 20px",zIndex:2}),l=a.default.getContentBase(),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getUl({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"100%"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiGoWeb({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e})}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiTwitter({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiFacebook({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiEmbed({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%",height:`${s.default.getBlockSize({app:t,ui:e})}px`,padding:c.getPaddingLi({app:t,ui:e}),background:s.default.whiteRGBA,boxShadow:s.default.lineShadow}),l=a.default.getContentBase({cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLiEmbedInput({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"98%",height:"25px",margin:"0px 0px 0px 20px",border:s.default.border,borderRadius:"5px",padding:"5px"}),l=a.default.getContentBase({outline:0,cursor:"pointer"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getShareLabel({app:t,ui:e}){const i=a.default.getLayoutFlex({flexGrow:"1"}),l=a.default.getContentBase({color:"inherit",justifyContent:"flex-start",textIndent:"20px",textAlign:"left"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getLabel({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"100%"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}}e.default=c},2423:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(8506)),a=l(i(5549)),c=l(i(9301)),g=l(i(3829)),I=l(i(4381));class u{constructor(t){return{self:u.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 5}static get marginRightMag(){return 1}static get marginLeft(){return Math.floor(.05*window.innerWidth)}static get marginRight(){return u.marginBase*u.marginRightMag}static get height(){return 50}static getSelfWidth({app:t,ui:e}){let i="0";const l=u.marginLeft+u.marginRight+s.default.getTotalWidth({app:t,ui:e});switch(e.screenSize){case n.default.screenSizeSmallLabel:i=`calc( 100% - ${l}px )`;break;case n.default.screenSizeMiddleLabel:i=`calc( 100% - ${g.default.getWidth({app:t,ui:e},!0)+l}px )`;break;case n.default.screenSizeLargeLabel:i=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)}% - ${g.default.getWidth({app:t,ui:e},!0)+l}px )`}return i}static getSelfLeft({app:t,ui:e}){let i="0px";switch(e.screenSize){case n.default.screenSizeSmallLabel:i="0px";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:i=g.default.getWidth({app:t,ui:e},!0)}return i}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"block":"none",l=u.getSelfWidth({app:t,ui:e}),n=u.getSelfLeft({app:t,ui:e}),s=I.default.getLayoutBlock({display:i,position:"fixed",top:a.default.getBlockSize({app:t,ui:e})+15+"px",left:n,margin:`0px ${u.marginRight}px 0px ${u.marginLeft}px`,width:l,height:`${u.height}px`});return I.default.get({layout:s,content:{},animation:{}})}}e.default=u},4857:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9301)),c=l(i(3829)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t)}}static get marginBase(){return 5}static get marginLeftMag(){return 0}static get marginRightMag(){return 0}static get marginLeft(){return I.marginBase*I.marginLeftMag}static get marginRight(){return I.marginBase*I.marginRightMag}static get height(){return 260}static getSelfWidth({app:t,ui:e}){let i="0";const l=I.marginLeftMag+I.marginRightMag;switch(e.screenSize){case n.default.screenSizeSmallLabel:i=100-l+"%";break;case n.default.screenSizeMiddleLabel:i=`calc( ${100-l}% - ${c.default.getWidth({app:t,ui:e},!0)}px )`;break;case n.default.screenSizeLargeLabel:i=`calc( ${100-a.default.getWidth({app:t,ui:e},!1)-l}% - ${c.default.getWidth({app:t,ui:e},!0)+l}px )`}return i}static getSelfLeft({app:t,ui:e}){let i="0px";switch(e.screenSize){case n.default.screenSizeSmallLabel:i="0px";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:i=c.default.getWidth({app:t,ui:e},!0)}return i}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"block":"none",l=I.getSelfWidth({app:t,ui:e}),n=I.getSelfLeft({app:t,ui:e}),a=g.default.getLayoutBlock({display:i,position:"fixed",background:"black",top:s.default.getBlockSize({app:t,ui:e})+"px",left:n,margin:`0px ${I.marginRightMag}% 0px ${I.marginLeftMag}%`,width:l,zIndex:1,height:`${I.height}px`,outline:"none"});return g.default.get({layout:a,content:{},animation:{}})}}e.default=I},3829:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t),body:c.getBody(t),footer:c.getFooter(t),footerChild:c.getFooterChild(t),footerChildMoney:c.getFooterChildMoney(t)}}static get baseWidth(){return"300px"}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case n.default.extensionModeNone:case n.default.extensionModeEmbed:return 0;default:switch(e.screenSize){case n.default.screenSizeSmallLabel:return`0 0 ${s.default.radius} ${s.default.radius}`;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return`0px 0px 0px ${s.default.radius}`}}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100.0%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l=c.baseWidth}return i?a.default.trimUnit(l):l}static getHeight({app:t,ui:e},i=!1){return`calc( 100% - ${s.default.getBlockSize({app:t,ui:e})}px )`}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";switch(e.screenSize){case n.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 0%, 0%, 0px )":"translate3d( -100% , 0%, 0px )";break;case n.default.screenSizeMiddleLabel:e.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){e.extensionMode===n.default.extensionModeBottom||s.default.silverRGBA;const i=a.default.getLayoutBlock({display:"block",position:"fixed",top:`${s.default.getBlockSize({app:t,ui:e})}px`,left:"0px",borderRadius:c.getBorderRadius({app:t,ui:e}),width:c.getWidth({app:t,ui:e}),minWidth:c.getWidth({app:t,ui:e}),height:c.getHeight({app:t,ui:e}),minHeight:"auto",maxHeight:"auto",margin:"0",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:10}),l=a.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:c.getTransform({app:t,ui:e})});return a.default.get({layout:i,content:{},animation:l})}static getBody({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeBottom?"90%":"100%",l=e.extensionMode===n.default.extensionModeModal?s.default.border:0,c=a.default.getLayoutBlock({borderLeft:l,width:i,minWidth:"inherit",maxWidth:"inherit",height:`calc( 100% - ${2*s.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),g=a.default.getAnimationBase();return a.default.get({layout:c,content:{},animation:g})}static getWrap({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:s.default.border}),l=a.default.getContentBase({textAlign:"left"}),n=a.default.getAnimationBase({});return a.default.get({layout:i,content:l,animation:n})}static getFooter({app:t,ui:e}){const i=(e.screenSize,n.default.screenSizeSmallLabel,{border:s.default.border}),l=a.default.getLayoutFlex({width:"100%",background:s.default.offWhiteRGB,height:`${s.default.getBlockSize({app:t,ui:e})}px`,...i}),c=a.default.getContentBase({}),g=a.default.getAnimationBase();return a.default.get({layout:l,content:c,animation:g})}static getFooterChild({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=a.default.getContentBase({fontSize:"0.5em"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getFooterChildMoney({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=a.default.getContentBase({fontSize:"0.5em"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}}e.default=c},9723:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){const e=c.getSelf(t),i=c.getColumns(t),l=c.getColumn(t),n=c.getColumnLast(t),s=c.getImg(t),a=c.getWrap(t);return{self:e,columns:i,column:l,columnLast:n,img:s,imgWrap:c.getImgWrap(t),wrap:a,names:c.getNames(t),namesAddCh:c.getNamesAddCh(t)}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100.0%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l="300px"}return i?a.default.trimUnit(l):l}static getTransform({app:t,ui:e}){let i="translate3d( 0px ,0px, 0px )";switch(e.screenSize){case n.default.screenSizeSmallLabel:i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeMiddleLabel:t.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({position:"relative",width:c.getWidth({app:t,ui:e}),minWidth:c.getWidth({app:t,ui:e}),maxWidth:"inherit",height:"100%",WebkitOverflowScrolling:"touch",overflow:"scroll",borderTop:0,borderRight:s.default.border,borderBottom:0,borderLeft:0}),l=a.default.getAnimationBase();return a.default.get({layout:i,content:{},animation:l})}static getColumns({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",height:"auto",borderBottom:s.default.border,borderRight:s.default.border,background:s.default.whiteRGB,overflow:"scroll"}),l=a.default.getContentBase({whiteSpace:"nowrap"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getColumn({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",borderBottom:s.default.border,borderRight:s.default.border}),l=a.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getColumnLast({app:t,ui:e}){const i=a.default.getLayoutBlock({width:"inherit",minWidth:"inherit",maxWidth:"inherit",marginLeft:"20px"}),l=a.default.getContentBase({letterSpacing:"2px",textAlign:"left",lineHeight:"60px",whiteSpace:"nowrap"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getWrap({app:t,ui:e}){const i=a.default.getLayoutFlex({width:"initial",height:"60px",minWidth:"initial",minHeight:"initial",borderRight:s.default.border}),l=a.default.getContentBase({textAlign:"left",content:"getWrap"}),n=a.default.getAnimationBase({});return a.default.get({layout:i,content:l,animation:n})}static getImgWrap({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:1,margin:"22px 0px 0px 0px",width:"60px",maxWidth:"60px",minWidth:"60px",height:"60px"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase({});return a.default.get({layout:i,content:l,animation:n})}static getImg({app:t,ui:e}){const i=a.default.getLayoutInlineBlock({borderRadius:"50%",width:"34px",height:"34px"}),l=a.default.getContentBase({}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getNamesAddCh({app:t,ui:e}){const i=a.default.getLayoutBlock({padding:"5px 10px 5px 5px",flexGrow:4}),l=a.default.getContentBase({textAlign:"left",lineHeight:"2"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}static getNames({app:t,ui:e}){const i=a.default.getLayoutBlock({flexGrow:4}),l=a.default.getContentBase({textAlign:"left",lineHeight:"1.7"}),n=a.default.getAnimationBase();return a.default.get({layout:i,content:l,animation:n})}}e.default=c},8381:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{header:g.getHeader(t),headerSearchIcon:g.getHeaderSearchIcon(t),headerInput:g.getHeaderInput(t),headerFindSelect:g.getHeaderFindSelect(t),headerUpdateIcon:g.getHeaderUpdateIcon(t),ol:g.getOl(t),headerCh:{},tuneButton:g.getTuneButton(t),tuneAnchor:g.getTuneAnchor(t)}}static get iconSize(){return"25px"}static get liHeight(){return 90}static getSelf({app:t,ui:e}){const i=c.default.getLayoutBlock({width:"100%",height:`calc( 100% - ${2*a.default.getBlockSize({app:t,ui:e})}px )`,margin:"0 auto"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getHeader({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?{borderBottom:a.default.border,borderLeft:0}:{borderBottom:a.default.border,borderLeft:0,borderRight:a.default.border},l=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start",width:"100%",height:`${a.default.getBlockSize({app:t,ui:e})}px`,...i,background:a.default.lightRGB}),n=c.default.getContentBase({cursor:"pointer",textAlign:"left"}),g=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:l,content:n,animation:g})}static getHeaderSearchIcon({app:t,ui:e}){const i=c.default.getLayoutFlex({justifyContent:"center",alignItems:"center",width:"72px",height:`${a.default.getBlockSize({app:t,ui:e})}px`}),l=c.default.getContentBase({color:a.default.reliefRGBA,fontWeight:"bold"}),n=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:l,animation:n})}static getHeaderInput({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0.9em":"1em",l=e.screenSize===s.default.screenSizeSmallLabel?"0.8em":"1.4em",n=c.default.getLayoutInlineBlock({width:"calc( 100% - 120px )",height:"55%",padding:"6px",background:a.default.whiteRGB,outline:"none",resize:"none",border:a.default.border,borderRadius:"3px",WebkitAppearance:"none"}),g=c.default.getContentBase({cursor:"pointer",whiteSpace:"nowrap",fontSize:i,lineHeight:l,textAlign:"left",textIndent:"3%",color:a.default.downreliefRGB}),I=c.default.getAnimationBase();return c.default.get({layout:n,content:g,animation:I})}static getHeaderUpdateIcon({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"70px",height:"50px",alignItems:"center",justifyContent:"flex-start"}),l=c.default.getContentBase({cursor:"pointer"}),n=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:l,animation:n})}static getHeaderFindSelect({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"100%",height:"50px",alignItems:"center",justifyContent:"center",background:"transparent",WebkitAppearance:"none",padding:"10px 4px 10px 10px"}),l=c.default.getContentBase({outline:0,cursor:"pointer"}),n=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:i,content:l,animation:n})}static getOl({app:t,ui:e,ranks:i}){const l=a.default.getBlockSize({app:t,ui:e});let n="1fr";const s=(i&&i.length?i.length:0)+(""===t.tuned?0:1);for(let t=0;t<s;t++)n=2*l+"px "+n;const g=c.default.getLayoutGrid({gridTemplateRows:n,gridTemplateColumns:"1fr",height:`calc( 100% - ${2*l}px )`,overflowX:"hidden",overflowY:"scroll"}),I=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:g,content:{},animation:I})}static getLiActive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:`${g.liHeight}px`,padding:"10px",borderBottom:a.default.border,zIndex:3,borderRight:`1px solid ${a.default.whiteRGB}`,background:a.default.whiteRGB}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getLiUnactive(){const t=c.default.getLayoutBlock({position:"relative",width:"initial",height:`${g.liHeight}px`,padding:"10px",borderBottom:a.default.border,background:a.default.offWhiteRGB,borderRight:a.default.border}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"20%"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottom(){const t=c.default.getLayoutBlock({width:"100%",height:"50px"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottomIcon(){const t=c.default.getLayoutInlineBlock({width:"20%",height:"50px",backgroundImage:`url(${n.default.protcol}:${n.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 15%",backgroundSize:"20px 20px",backgroundRepeat:"no-repeat"}),e=c.default.getContentBase(),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottomPost(){const t=c.default.getLayoutInlineBlock({width:"80%",flexGrow:2}),e=c.default.getContentBase({lineHeight:2,textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getTuneAnchor({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"130px"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getTuneButton({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"100%",maxWidth:"130px",height:"46px",margin:"0px 0px 0px 10px",background:a.default.themeRGB}),l=c.default.getContentBase({color:a.default.whiteRGB,fontWeight:"500",borderRadius:"50px",outline:0,cursor:"pointer"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}}e.default=g},4359:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),modalWrap:g.getModalWrap(t),modal:g.getModal(t),logo:g.getLogo(t),input:g.getInput(t),recommend:g.getRecommend(t),recommendTitle:g.getRecommendTitle(t),recommendLi:g.getRecommendLi(t),example:g.getExample(t)}}static getSelf({app:t,ui:e}){const i=e.isOpenSetChModal?"flex":"none",l=c.default.getLayoutFlex({display:i,position:"fixed",top:"0",left:"0",zIndex:"1001",flexFlow:"row wrap",alignItems:"center",justifyContent:"center",width:"100vw",height:"100vh",margin:"0 auto",background:a.default.darkRGBA}),n=c.default.getContentBase({}),s=c.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return c.default.get({layout:l,content:n,animation:s})}static getModalWrap({app:t,ui:e}){const i=c.default.getLayoutFlex({position:"absolute",flexFlow:"column wrap",alignItems:"center",justifyContent:"center",width:"calc( 100% - 40px )",maxWidth:"850px",minWidth:"320px"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getModal({app:t,ui:e}){const i=c.default.getLayoutFlex({position:"absolute",flexFlow:"column wrap",alignItems:"flex-start",justifyContent:"center",width:"100%",maxWidth:"800px",height:"auto",padding:"20px",margin:"20px",background:a.default.lightRGB}),l=c.default.getContentBase({borderRadius:"10px",boxShadow:"0px 0px 10px rgb(100, 100, 100, 1)"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getLogo({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"200px",height:"200px",margin:"70px 0 60px",background:`url(${n.default.assetsPath}logo1.png) center / 128px no-repeat`}),l=c.default.getContentBase({}),s=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:s})}static getInput({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"0.9em":"1em",l=e.screenSize===s.default.screenSizeSmallLabel?"0.8em":"1.4em",n=c.default.getLayoutInlineBlock({width:"80%",height:"46px",padding:"6px",background:a.default.whiteRGB,outline:"none",resize:"none",border:a.default.border,borderRadius:"6px",WebkitAppearance:"none"}),g=c.default.getContentBase({cursor:"pointer",whiteSpace:"nowrap",fontSize:i,lineHeight:l,textAlign:"left",textIndent:"3%",color:a.default.downreliefRGB}),I=c.default.getAnimationBase();return c.default.get({layout:n,content:g,animation:I})}static getRecommendTitle({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",padding:"0",margin:"20px 0 0"}),l=c.default.getContentBase({textIndent:"30px"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getRecommend({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",padding:"0",margin:"0"}),l=c.default.getContentBase({}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getRecommendLi({app:t,ui:e}){const i=c.default.getLayoutFlex({}),l=c.default.getContentBase({lineHeight:"28px",textDecoration:"list"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}static getExample({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start",padding:"0",margin:"0"}),l=c.default.getContentBase({textIndent:"66px"}),n=c.default.getAnimationBase({});return c.default.get({layout:i,content:l,animation:n})}}e.default=g},4528:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{activeLiSelf:g.getActiveLiSelf(t),unactiveLiSelf:g.getUnactiveLiSelf(t),space:g.getSpace(t),upper:g.getUpper(),upperSpace:g.getUpperSpace(),upperRankWrap:g.getUpperRankWrap(t),upperRank:g.getUpperRank(),upperRight:g.getUpperRight(),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(),ext:g.getExt(),extMusic:g.getExtMusic(),extVideo:g.getExtVideo()}}static get tuneRGB(){return a.default.themeRGB}static get rank1RGB(){return"rgb(255, 10, 78)"}static get rank2RGB(){return"rgb(255, 127, 0)"}static get rank3RGB(){return"rgb(0, 142, 255)"}static get rankOtherRGB(){return a.default.downreliefRGB}static get oneDigitWidth(){return"17%"}static get twoDigitWidth(){return"18%"}static get thirdDigitWidth(){return"19%"}static get iconSize(){return 24}static get activeLiSelfLabel(){return"activeLiSelf"}static get unactiveLiSelfLabel(){return"unactiveLiSelf"}static get activeLiSelfBackground(){return a.default.whiteRGBA}static get activeLiSelfMouseOverBackground(){return a.default.whiteRGBA}static get activeLiSelfMouseDownBackground(){return a.default.whiteRGBA}static get unactiveLiSelfBackground(){return a.default.calmRGBA}static get unactiveLiSelfMouseOverBackground(){return a.default.whiteRGBA}static get unactiveLiSelfMouseDownBackground(){return a.default.whiteRGBA}static get activeLiSelfBorderRightColor(){return`1px solid ${a.default.whiteRGB}`}static get unactiveLiSelfBorderRightColor(){return a.default.border}static getUnactiveLiBorder({app:t,ui:e}){return e.extensionMode===s.default.extensionModeBottom||e.screenSize===s.default.screenSizeSmallLabel?{borderTop:0,borderRight:0,borderBottom:a.default.border,borderLeft:0}:{borderTop:0,borderRight:a.default.border,borderBottom:a.default.border,borderLeft:0}}static getDispRankBackground(t=0){switch(t){case 0:return g.tuneRGB;case 1:return g.rank1RGB;case 2:return g.rank2RGB;case 3:return g.rank3RGB;default:return g.rankOtherRGB}}static getDispRankWidth(t=0){switch(String(t).length){case 0:case 1:return g.oneDigitWidth;case 2:return g.twoDigitWidth;case 3:default:return g.thirdDigitWidth}}static getActiveLiSelf({app:t,ui:e}){const i=2*a.default.getBlockSize({app:t,ui:e}),l=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",n=c.default.getLayoutBlock({width:"initial",height:`${i}px`,minHeight:`${i}px`,padding:l,borderTop:0,borderRight:`1px solid ${a.default.whiteRGB}`,borderBottom:a.default.border,borderLeft:0,background:g.activeLiSelfBackground,boxShadow:"0px 0px 0px rgba(255,255,255,1), 0px 0px 0px rgba(${Container.themeRGBString}, 0.2) inset ",cursor:"pointer"}),I=c.default.getContentBase(),u=c.default.getAnimationBase({transition:`${a.default.transitionOn}ms`});return c.default.get({layout:n,content:I,animation:u})}static getUnactiveLiSelf({app:t,ui:e}){const i=g.getUnactiveLiBorder({app:t,ui:e}),l=2*a.default.getBlockSize({app:t,ui:e}),n=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",I=c.default.getLayoutBlock({boxShadow:`${a.default.lineShadow}, 0px 0px 0px rgba(${a.default.themeSuperLightRGBString}, 1) inset`,width:"initial",height:`${l}px`,minHeight:`${l}px`,padding:n,...i,background:g.unactiveLiSelfBackground,cursor:"pointer"}),u=c.default.getContentBase(),d=c.default.getAnimationBase({transition:`${a.default.transitionOn}ms`});return c.default.get({layout:I,content:u,animation:d})}static getSpace({app:t,ui:e}){const i=c.default.getLayoutBlock({height:"100%",background:a.default.silverRGBA}),l=c.default.getContentBase({}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getUpper(){const t=c.default.getLayoutBlock({width:"100%",height:"20px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperSpace(){const t=c.default.getLayoutInlineBlock({width:"18%",margin:"0px 2% 0px 0px"}),e=c.default.getContentBase({}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getUpperRankWrap({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"8px":"16px",l=c.default.getLayoutInlineFlex({position:"absolute",left:"14px",top:i,width:g.thirdDigitWidth,height:"20px",background:g.rankOtherRGB,borderRadius:"10px",margin:"0"}),n=c.default.getContentBase({}),a=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:a})}static getUpperRank(){const t=c.default.getLayoutFlex({width:"100%"}),e=c.default.getContentBase({fontSize:"0.7em",fontWeight:"bold",color:a.default.whiteRGB,lineHeight:"1.5"}),i=c.default.getAnimationBase({transform:"scale(0.8)"});return c.default.get({layout:t,content:e,animation:i})}static getUpperRight(){const t=c.default.getLayoutInlineBlock({width:"80%"}),e=c.default.getContentBase({lineHeight:"1.5",textIndent:"4px",textAlign:"left"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getBottom({app:t,ui:e}){const i=e.screenSize===s.default.screenSizeSmallLabel?"50%":"63%",l=c.default.getLayoutFlex({justifyContent:"flex-start",alignItems:"center",width:"100%",height:i}),n=c.default.getContentBase(),a=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:a})}static getBottomIcon({app:t,ui:e}){const i=c.default.getLayoutInlineBlock({width:"20%",height:"100%",backgroundImage:`url("${n.default.assetsURL}/favicon.ico")`,backgroundPosition:"30% 50%",backgroundSize:`${a.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat"}),l=c.default.getContentBase(),s=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:s})}static getBottomPost(){const t=c.default.getLayoutInlineFlex({width:"65%",height:"100%",justifyContent:"flex-start"}),e=c.default.getContentBase({textIndent:"3%",textAlign:"left",whiteSpace:"nowrap"}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getExt(){const t=c.default.getLayoutFlex({position:"absolute",alignItems:"center",justifyContent:"center",bottom:"0px",right:"10px",width:"70px",height:"20px",background:a.default.lightGrayRGBA,borderRadius:"3px 3px 0px 0px"}),e=c.default.getContentBase({textIndent:"3px",textAlign:"center",fontSize:"0.6em",color:a.default.whiteRGB}),i=c.default.getAnimationBase();return c.default.get({layout:t,content:e,animation:i})}static getExtMusic(){let t=g.getExt();return t.background="rgba(143,198,143, 1)",t}static getExtVideo(){let t=g.getExt();return t.background="rgba(105, 70, 255, 1)",t}}e.default=g},6620:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(3829)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),child:g.getChild(t),childIndex:g.getChildIndex(t)}}static getBorderRadius({app:t,ui:e}){switch(e.extensionMode){case n.default.extensionModeBottom:return s.default.radiuses;case n.default.extensionModeModal:switch(e.screenSize){case n.default.screenSizeSmallLabel:return`0 0 0 ${s.default.radius}`;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return`0px 0px 0px ${s.default.radius}`}default:return"0"}}static getWidth({app:t,ui:e},i=!1){let l="0";if(e.extensionMode===n.default.extensionModeBottom)l="50%";else switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l=a.default.baseWidth}return i?c.default.trimUnit(l):l}static getSelf({app:t,ui:e}){const i=(e.screenSize,n.default.screenSizeSmallLabel,{border:s.default.border}),l=g.getBorderRadius({app:t,ui:e}),a=c.default.getLayoutFlex({width:g.getWidth({app:t,ui:e}),minWidth:g.getWidth({app:t,ui:e}),height:`${s.default.getBlockSize({app:t,ui:e})}px`,background:s.default.lightRGBA,boxShadow:s.default.lineShadow,borderRadius:l,...i}),I=c.default.getContentBase({}),u=c.default.getAnimationBase();return c.default.get({layout:a,content:I,animation:u})}static getChild({app:t,ui:e}){const i=c.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",flexGrow:1,height:"100%"}),l=c.default.getContentBase({fontSize:"0.7em",lineHeight:"1.5em",cursor:"pointer"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getChildIndex({app:t,ui:e}){const i=c.default.getLayoutBlock({flexGrow:1,height:"100%"}),l=c.default.getContentBase({fontSize:"0.7em",fontWeight:"600",lineHeight:"1.5em",cursor:"pointer"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}}e.default=g},7608:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(9167)),c=l(i(4381));class g{constructor(t){return{notifs:g.getNotifs(t),self:g.getSelf(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get selfHeight(){return 40}static getNotifsDisplay({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?"block":"none"}static getNotifsHeight({app:t,ui:e}){return e.extensionMode===n.default.extensionModeBottom?e.isOpenPosts?"0px":e.isOpenNotif?`${s.default.getBlockSize({app:t,ui:e})+g.selfHeight}px`:`${g.selfHeight}px`:"0px"}static getNotifs({app:t,ui:e}){const i=g.getNotifsDisplay({app:t,ui:e}),l=g.getNotifsHeight({app:t,ui:e}),n=c.default.getLayoutBlock({display:i,position:"absolute",top:"0px",width:"100%",height:l,overflow:"visible"}),s=c.default.getContentBase(),a=c.default.getAnimationBase();return c.default.get({layout:n,content:s,animation:a})}static getSelf({app:t,ui:e}){const i=g.getNotifsDisplay({app:t,ui:e}),l=a.default.getOlWidth({app:t,ui:e},!0),n=(100-l)/2,I=c.default.getLayoutBlock({display:i,position:"absolute",top:0,width:`${l}%`,height:g.selfHeight+"px",background:s.default.whiteRGBA,marginLeft:`${n}%`,borderTop:s.default.border,borderLeft:s.default.border,borderRight:s.default.border,borderRadius:"3px 3px 0px 0px"}),u=c.default.getContentBase({textAlign:"left"}),d=c.default.getAnimationBase({transform:"translate3d(0px, 40px, 0px)",transition:`${s.default.transitionNotif}ms`});return c.default.get({layout:I,content:u,animation:d})}static getBottom({app:t,ui:e}){return c.default.get({layout:{width:"100%"},content:{},animation:{}})}static getBottomIcon({app:t,ui:e}){return c.default.get({layout:{},content:{},animation:{}})}static getBottomPost({app:t,ui:e}){const i={lineHeight:"0.8",whiteSpace:"nowrap",color:c.default.fontBaseRGB};return c.default.get({layout:{overflow:"hidden",padding:"15px 15px 15px 0px",background:"none"},content:i,animation:{}})}}e.default=g},4909:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(300)),s=l(i(7865)),a=l(i(5549)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),upper:g.getUpper(t),upperChild:g.getUpperChild(t),upperTitle:g.getUpperTitle(t),upperTimeago:g.getUpperTimeago(t),bottom:g.getBottom(t),bottomIcon:g.getBottomIcon(t),bottomPost:g.getBottomPost(t)}}static get bubblestampScale(){return 2}static get stampScale(){return 1}static getBottomPostPadding({app:t,ui:e},i=!1){return i?"0":e.isBubblePost?"20px 20px 20px 30px":"0"}static getSelf({app:t,ui:e}){const i=e.isBubblePost?"5px 0":"0",l=e.isBubblePost?"5px 0":"0",n=(e.isBubblePost,"40px"),s="calc( 100% - 0px )",a=c.default.getLayoutBlock({width:s,minWidth:"calc( 100% - 20px )",maxWidth:s,height:"auto",minHeight:n,margin:l,padding:i}),g=c.default.getContentBase(),I=c.default.getAnimationBase();return c.default.get({layout:a,content:g,animation:I})}static getFixTimeMarker({app:t,ui:e}){return{...g.getTimeMarker({app:t,ui:e}),position:"fixed"}}static getTimeMarker({app:t,ui:e}){const i=c.default.getLayoutFlex({width:"18%",height:"auto",margin:"15px auto 10px auto",padding:"5px 10px",background:a.default.darkLightRGBA,borderRadius:"20px"}),l=c.default.getContentBase({color:a.default.whiteRGB,letterSpacing:"2px"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getUpper({app:t,ui:e}){const i=e.isBubblePost?"flex":"none",l=c.default.getLayoutFlex({display:i,justifyContent:"space-between",height:"22px"}),n=c.default.getContentBase({fontSize:"0.9em"}),s=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:s})}static getUpperChild({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"center",flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%"}),l=c.default.getContentBase({textAlign:"left",textIndent:"10px"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getUpperTitle({app:t,ui:e}){const i=e.extensionMode===s.default.extensionModeLiveMedia?"none":"flex",l=c.default.getLayoutFlex({display:i,alignItems:"flex-start",justifyContent:"flex-start",flexGrow:6,width:"60%",minWidth:"60%",maxWidth:"60%",margin:"0px 15px 0px 5px"}),n=c.default.getContentBase({textAlign:"left",whiteSpace:"nowrap",wordBreak:"break-all"}),a=c.default.getAnimationBase();return c.default.get({layout:l,content:n,animation:a})}static getUpperTimeago({app:t,ui:e}){const i=c.default.getLayoutFlex({alignItems:"flex-start",justifyContent:"flex-start",flexGrow:2,padding:"0px 20px 0px 0px",width:"20%",minWidth:"20%",maxWidth:"20%"}),l=c.default.getContentBase({textAlign:"right",fontSize:"0.75em",letterSpacing:"0.5px"}),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getBottom({app:t,ui:e}){const i=c.default.getLayoutFlex({padding:"0px 10px 0px 0px"}),l=c.default.getContentBase(),n=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:n})}static getBottomIcon({app:t,ui:e}){const i=c.default.getLayoutBlock({flexGrow:2,width:"20%",minWidth:"20%",maxWidth:"20%",height:`${a.default.getFaviconSize({app:t,ui:e})}px`,minHeight:"40px",backgroundImage:`url(${n.default.protcol}:${n.default.assetsPath}favicon.ico")`,backgroundPosition:"50% 50%",backgroundSize:`${a.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat"}),l=c.default.getContentBase(),s=c.default.getAnimationBase();return c.default.get({layout:i,content:l,animation:s})}static getBottomPost({app:t,ui:e},i=!1){const l="75%",n=e.isBubblePost?a.default.themeRGBA:"none",s=e.isBubblePost?a.default.whiteRGBA:a.default.fontBaseRGB,I=g.getBottomPostPadding({app:t,ui:e},i),u=c.default.getLayoutFlex({justifyContent:"flex-start",flexGrow:8,width:l,minWidth:l,maxWidth:l,minHeight:"40px",background:n,padding:I,margin:"0px 5% 0px 0px",borderRadius:"10px"}),d=c.default.getContentBase({color:s,textAlign:"left",lineHeight:"1.7em",cursor:"pointer",wordWrap:"break-word",overflowWrap:"break-word"}),B=c.default.getAnimationBase();return c.default.get({layout:u,content:d,animation:B})}}e.default=g},9167:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(4817)),s=l(i(7865)),a=l(i(5549)),c=l(i(9301)),g=l(i(4857)),I=l(i(3829)),u=l(i(4381));class d{constructor(t){return{self:d.getSelf(t),ol:d.getOl(t),more:d.getMore(t),firstAction:d.getFirstAction(t)}}static getSelfDisplay({app:t,ui:e}){return e.isOpenNotif?"none":"flex"}static getMinWidth({app:t,ui:e},i=!1){let l="200px";return i?u.default.trimUnit(l):l}static getOlWidth({app:t,ui:e},i=!1){const l=e.extensionMode===s.default.extensionModeBottom?"90%":"100%";return i?u.default.trimUnit(l):l}static getWidth({app:t,ui:e},i=!1){let l="100%";switch(e.extensionMode){case s.default.extensionModeBottom:l="90%";break;case s.default.extensionModeLiveMedia:l="100%";break;default:switch(e.screenSize){case s.default.screenSizeSmallLabel:return"100%";case s.default.screenSizeMiddleLabel:return`calc(100% - ${I.default.getWidth({app:t,ui:e},!1)})`;case s.default.screenSizeLargeLabel:l=`calc( ${100-c.default.getWidth({app:t,ui:e},!1)}% - ${I.default.getWidth({app:t,ui:e},!1)} )`}}return i?u.default.trimUnit(l):l}static closeIndexTransform({app:t,ui:e}){switch(e.screenSize){case s.default.screenSizeSmallLabel:return`translate3d( -${e.width}px, 0px, 0px)`;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:return`translate3d( -${I.default.getWidth({app:t,ui:e})}px, 0px, 0px)`}}static openIndexTransform(t){return"translate3d( 0px, 0px, 0px)"}static get headerHeight(){return 35}static getBorders({app:t,ui:e}){let i={borderTop:"0",borderRight:"0",borderBottom:"0",borderLeft:"0"};switch(e.screenSize){case s.default.screenSizeSmallLabel:i.borderRight=a.default.border,i.borderLeft=a.default.border;break;case s.default.screenSizeMiddleLabel:i.borderRight=a.default.border;break;case s.default.screenSizeLargeLabel:}return i}static getMargin({app:t,ui:e},i=!1){let l="0";if(e.extensionMode===s.default.extensionModeLiveMedia)l="0";else switch(e.screenSize){case s.default.screenSizeSmallLabel:l="0";break;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:l=`0 0 0 ${I.default.getWidth({app:t,ui:e})}`}return l}static getPadding({app:t,ui:e}){const i=a.default.getBlockSize({app:t,ui:e});let l="0";if(t.isMediaCh)l=`${2.3*i}px 0 ${i}px 0`;else switch(e.extensionMode){case s.default.extensionModeLiveMedia:l=`0 0 ${a.default.getLiveMediaBlockSize({app:t,ui:e})}px 0`;break;default:switch(e.screenSize){case s.default.screenSizeSmallLabel:case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:l=`${i}px 0 ${i}px 0`}}return l}static getSelfTransform({app:t,ui:e}){return e.extensionMode===s.default.extensionModeBottom?e.isDispPosts?"translate3d(0px, 0px, 0px)":`translate3d(0px, calc( 100% + ${a.default.getBlockSize({app:t,ui:e})}px ), 0px)`:"translate3d(0px, 0px, 0px)"}static getSelfHeight({app:t,ui:e}){if(e.extensionMode===s.default.extensionModeLiveMedia)return"100vh";switch(e.screenSize){case s.default.screenSizeLargeLabel:return t.chType===n.default.mediaTagTypeVideo?`calc( 100% - ${a.default.getBlockSize({app:t,ui:e})+a.default.getBlockSize({app:t,ui:e})+g.default.height}px )`:"100vh";case s.default.screenSizeSmallLabel:return"100vh"}}static getSelfMinHeight({app:t,ui:e}){return e.extensionMode!==s.default.extensionModeNone?"430px":e.screenSize===s.default.screenSizeLargeLabel?`calc( 100% - ${a.default.getBlockSize({app:t,ui:e})+a.default.getBlockSize({app:t,ui:e})}px )`:"auto"}static getSelfTop({app:t,ui:e}){return e.extensionMode===s.default.extensionModeNone&&t.chType===n.default.mediaTagTypeVideo?`${a.default.getBlockSize({app:t,ui:e})+g.default.height}px`:"0"}static getSelfLeft({app:t,ui:e}){return"0"}static getSelfBoxShadow({app:t,ui:e}){let i="0px 0px 0px rgba(255,255,255)";if(e.extensionMode===s.default.extensionModeNone)return i;switch(e.screenSize){case s.default.screenSizeSmallLabel:return a.default.lineInsetShadow;case s.default.screenSizeMiddleLabel:case s.default.screenSizeLargeLabel:return i}return i}static getSelf({app:t,ui:e}){let i="absolute",l="hidden",n="hidden",c=d.getBorders({app:t,ui:e}),g=a.default.whiteRGBA;e.screenSize===s.default.screenSizeLargeLabel?("fixed",l="hidden",n="scroll"):e.screenSize===s.default.screenSizeSmallLabel&&(l="hidden",n="scroll");const I=u.default.getLayoutBlock({position:"absolute",top:d.getSelfTop({app:t,ui:e}),left:d.getSelfLeft({app:t,ui:e}),width:d.getWidth({app:t,ui:e}),minWidth:d.getMinWidth({app:t,ui:e}),height:d.getSelfHeight({app:t,ui:e}),minHeight:d.getSelfHeight({app:t,ui:e}),maxHeight:"auto",margin:d.getMargin({app:t,ui:e}),padding:d.getPadding({app:t,ui:e}),background:g,overflowScrolling:"touch",WebkitOverflowScrolling:"touch",boxShadow:0,overflowX:l,overflowY:n,...c}),B=u.default.getAnimationBase({});return u.default.get({layout:I,content:{},animation:B})}static getOl({app:t,ui:e}){let i="100%",l="0",n="0",c="0";e.extensionMode===s.default.extensionModeBottom&&(i=d.getOlWidth({app:t,ui:e}),l="0px 0px 0px 5%",n=a.default.border,c=a.default.border);const g=u.default.getLayoutBlock({width:i,margin:l,height:"100vh",borderRight:n,borderLeft:c}),I=u.default.getAnimationBase({transition:a.default.getTransition({app:t,ui:e})});return u.default.get({layout:g,content:{},animation:I})}static getMore({app:t,ui:e}){const i=e.isBubblePost?a.default.themeRGBA:a.default.reliefRGBA,l=e.isBubblePost?"15px auto":"10px auto",n=u.default.getLayoutFlex({width:"50%",height:a.default.notifHeight,margin:l,alignItems:"center",justifyContent:"center",zIndex:"10",background:i,borderRadius:"20px"}),s=u.default.getContentBase({color:a.default.whiteRGB,cursor:"pointer"}),c=u.default.getAnimationBase();return u.default.get({layout:n,content:s,animation:c})}static getFirstAction({app:t,ui:e}){const i=u.default.getLayoutFlex({flexFlow:"column wrap",alignItems:"center",justifyContent:"center",width:"calc(100% - 120px)",height:"auto",padding:"20px",margin:"60px",background:a.default.themeRGBA,borderRadius:"10px"}),l=u.default.getContentBase({lineHeight:"2em",color:a.default.whiteRGB}),n=u.default.getAnimationBase();return u.default.get({layout:i,content:l,animation:n})}}e.default=d},1433:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(3829)),c=l(i(9167)),g=l(i(4381)),I=l(i(9444));class u{constructor(t){return{self:u.getSelf(t),icon:u.getIcon(t),textarea:u.getTextarea(t),modalTextarea:u.getModalTextarea(t),button:u.getButton(t),upper:u.getUpper(t),bottom:u.getBottom(t)}}static getWidth({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="100%";break;case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:l=c.default.getWidth({app:t,ui:e})}return i?g.default.trimUnit(l):l}static getLeft({app:t,ui:e},i=!1){let l="0";switch(e.screenSize){case n.default.screenSizeSmallLabel:l="0px";break;case n.default.screenSizeMiddleLabel:l=`${a.default.getWidth({app:t,ui:e})}`;break;case n.default.screenSizeLargeLabel:l=a.default.getWidth({app:t,ui:e})}return i?g.default.trimUnit(l):l}static getBorder({app:t,ui:e},i=!1){switch(e.extensionMode){case n.default.extensionModeBottom:return{borderTop:s.default.border,borderRight:s.default.border,borderLeft:s.default.border};case n.default.extensionModeModal:switch(e.screenSize){case n.default.screenSizeSmallLabel:return{border:s.default.border};case n.default.screenSizeMiddleLabel:case n.default.screenSizeLargeLabel:return{borderTop:s.default.border,borderBottom:s.default.border}}default:return{borderTop:s.default.border,borderBottom:s.default.border}}}static getBorderRadius({app:t,ui:e},i=!1){if(e.extensionMode===n.default.extensionModeBottom)return"100%"===e.extensionWidth?"0px 0px 0px 0px":`${s.default.radius} ${s.default.radius} 0px 0px`;if(e.extensionMode===n.default.extensionModeModal)switch(e.screenSize){case n.default.screenSizeSmallLabel:return`0px 0px ${s.default.radius} ${s.default.radius}`;case n.default.screenSizeMiddleLabel:return`0px 0px ${s.default.radius} 0px`;case n.default.screenSizeLargeLabel:return 0}return 0}static getTransform({app:t,ui:e}){let i="translate3d( 0px, 0px, 0px )";switch(e.screenSize){case n.default.screenSizeSmallLabel:i=e.isOpenMenu?"translate3d( 0%, 0px, 0px )":"translate3d( 0px, 0px, 0px )";break;case n.default.screenSizeMiddleLabel:e.isOpenDetail,i="translate3d( 0px ,0px, 0px )";break;case n.default.screenSizeLargeLabel:i="translate3d( 0px ,0px, 0px )"}return i}static getSelf({app:t,ui:e}){const i=u.getBorder({app:t,ui:e}),l=u.getBorderRadius({app:t,ui:e}),n=g.default.getLayoutFlex({position:"fixed",bottom:0,left:u.getLeft({app:t,ui:e}),flexGrow:1,height:s.default.getBlockSize({app:t,ui:e}),width:u.getWidth({app:t,ui:e}),maxWidth:u.getWidth({app:t,ui:e}),background:s.default.lightRGBA,justifyContent:"flex-start",boxShadow:`-1px 0px 1px ${s.default.lineShadowColor}`,borderRadius:l,...i,zIndex:10}),a=g.default.getAnimationBase({transform:u.getTransform({app:t,ui:e})});return g.default.get({layout:n,content:{},animation:a})}static getIcon({app:t,ui:e}){const i=g.default.getLayoutInlineBlock({width:"20%",maxWidth:"20%",height:"70%",backgroundImage:"url()",backgroundPosition:"center center",backgroundSize:`${s.default.getFaviconSize({app:t,ui:e})}px`,backgroundRepeat:"no-repeat",zIndex:9999}),l=g.default.getContentBase({cursor:"pointer"});return g.default.get({layout:i,content:l,animation:{}})}static getTextarea({app:t,ui:e}){const i=e.extensionMode===n.default.extensionModeModal?"60%":"54%",l=(e.screenSize,n.default.screenSizeSmallLabel,"1em"),a=e.screenSize===n.default.screenSizeSmallLabel?"0.8em":"1.4em",c=g.default.getLayoutInlineBlock({width:i,maxWidth:i,height:"55%",background:s.default.whiteRGB,padding:"6px",margin:"0 3% 0 0",outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),I=g.default.getContentBase({fontSize:l,lineHeight:a,textAlign:"left",textIndent:"3%"}),u=g.default.getAnimationBase();return g.default.get({layout:c,content:I,animation:u})}static getModalTextarea({app:t,ui:e}){const i=g.default.getLayoutInlineBlock({width:"60%",maxWidth:"60%",height:"80%",background:s.default.whiteRGB,padding:"6px",margin:"0",outline:"none",resize:"none",border:s.default.border,borderRadius:"3px",WebkitAppearance:"none"}),l=g.default.getContentBase({textAlign:"left"}),n=g.default.getAnimationBase();return g.default.get({layout:i,content:l,animation:n})}static getButton({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?30:38,l=g.default.getLayoutInlineBlock({outline:"none",width:"20%",maxWidth:"20%",height:"56%",margin:"0px 3% 0px 0%",background:`url(${I.default}) 50% 35% / ${i}px no-repeat ${s.default.whiteRGBA}`,border:s.default.border,borderRadius:"3px"}),a=g.default.getContentBase({color:s.default.downreliefRGB,cursor:"pointer"}),c=g.default.getAnimationBase();return g.default.get({layout:l,content:a,animation:c})}static getUpper({app:t,ui:e}){const i=g.default.getLayoutFlex({alignItems:"center",justifyContent:"flex-start"}),l=g.default.getContentBase({}),n=g.default.getAnimationBase();return g.default.get({layout:i,content:l,animation:n})}static getBottom({app:t,ui:e}){const i=g.default.getLayoutFlex({alignItems:"center",justifyContent:"center"}),l=g.default.getContentBase({}),n=g.default.getAnimationBase();return g.default.get({layout:i,content:l,animation:n})}}e.default=u},7162:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(1433)),c=l(i(4381));class g{constructor(t){return{self:g.getSelf(t),emoji:g.getEmoji(t),emojiLabel:g.getEmojiLabel(t)}}static get selfHeight(){return 172}static getTransform({app:t,ui:e}){return e.isOpenPostsSupporter?`translate3d( 0px, -${g.selfHeight+s.default.getBlockSize({app:t,ui:e})}px, 0px )`:"translate3d( 0px, 0px, 0px )"}static getSelf({app:t,ui:e}){const i=c.default.getLayoutFlex({display:"flex",position:"fixed",bottom:`-${g.selfHeight}px`,left:a.default.getLeft({app:t,ui:e}),height:g.selfHeight,width:a.default.getWidth({app:t,ui:e}),maxWidth:a.default.getWidth({app:t,ui:e}),color:s.default.whiteRGB,flexFlow:"column wrap",alignItems:"center",justifyContent:"flex-start",background:s.default.darkRGBA,whiteSpace:"nowrap",overflowScrolling:"touch",WebkitOverflowScrolling:"touch",overflow:"hidden",zIndex:2}),l=c.default.getAnimationBase({transition:s.default.getTransitionFirstOn({app:t,ui:e}),transform:g.getTransform({app:t,ui:e})});return c.default.get({layout:i,content:{overflow:"scroll hidden"},animation:l})}static getEmoji({app:t,ui:e}){const i=n.default.screenSizeSmallLabel===e.screenSize?"35px":"40px",l=c.default.getLayoutFlex({width:"20%",minWidth:"auto",maxWidth:"auto",height:"86px",flexFlow:"column wrap",alignItems:"center",justifyContent:"center",padding:"5px"}),a=c.default.getContentBase({fontSize:i,cursor:"pointer"}),g=c.default.getAnimationBase({transition:s.default.getTransition({app:t,ui:e}),transform:"scale(1.0)"});return c.default.get({layout:l,content:a,animation:g})}static getEmojiLabel({app:t,ui:e}){const i=(n.default.screenSizeSmallLabel,e.screenSize,"0px"),l=n.default.screenSizeSmallLabel===e.screenSize?"8px":"10px",a=c.default.getLayoutFlex({width:"auto",minWidth:"auto",maxWidth:"auto",height:"30px",margin:i}),g=c.default.getContentBase({wordBreak:"break-word",fontSize:l,color:s.default.whiteRGB}),I=c.default.getAnimationBase({});return c.default.get({layout:a,content:g,animation:I})}}e.default=g},544:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(2243)),c=l(i(3829)),g=l(i(4381));class I{constructor(t){return{self:I.getSelf(t),fixTimeMarker:I.getFixTimeMarker(t)}}static getSelfWidthRate(){return 36}static getSelfHeightPx(){return 22}static getSelfMarginTop(){return 15}static getSelfLeftRate(){return 50-I.getSelfWidthRate()/2}static getFixTimeMarkerStyles({app:t,ui:e}){let i=I.getSelfWidthRate()/100,l=e.width*i,g=`${I.getSelfHeightPx()}px`,u=`${s.default.getBlockSize({app:t,ui:e})}px`,d="25%",B=0,o=0,F=0;if(e.screenMode=e.extensionMode===n.default.extensionModeLiveMedia&&n.default.screenSizeSmallLabel,e.extensionMode===n.default.extensionModeLiveMedia)F=e.width,l=F*i,u="0",d=B+F*(I.getSelfLeftRate()/100)+"px";else switch(e.screenSize){default:case n.default.screenSizeSmallLabel:F=e.width,l=F*i,d=B+F*(I.getSelfLeftRate()/100)+"px";break;case n.default.screenSizeMiddleLabel:B=c.default.getWidth({app:t,ui:e},!0),F=e.width-B,l=F*i,d=B+F*(I.getSelfLeftRate()/100)+"px";break;case n.default.screenSizeLargeLabel:B=c.default.getWidth({app:t,ui:e},!0),o=e.width*Number(a.default.getWidth({app:t,ui:e},!0))/100,F=e.width-(B+o),l=F*i,d=B+F*(I.getSelfLeftRate()/100)+"px"}return{width:l,height:g,top:u,left:d,fontSize:"0.8em"}}static getSelf({app:t,ui:e}){const i=t.isMediaCh?"none":"flex",l=g.default.getLayoutFlex({top:`${s.default.getBlockSize({app:t,ui:e})}px`,width:`${I.getSelfWidthRate()}%`,height:`${I.getSelfHeightPx()}px`,margin:`${I.getSelfMarginTop()}px auto 10px auto`,padding:"5px 10px",background:s.default.darkLightRGBA,borderRadius:"20px",display:i}),n=g.default.getContentBase({color:s.default.whiteRGB,letterSpacing:"2px",fontSize:"0.8em"}),a=g.default.getAnimationBase();return g.default.get({layout:l,content:n,animation:a})}static getFixTimeMarker({app:t,ui:e}){const i=I.getSelf({app:t,ui:e}),{top:l,left:n,width:s,height:a,fontSize:c}=I.getFixTimeMarkerStyles({app:t,ui:e});return{...i,position:"fixed",width:s,minWidth:s,height:a,top:l,left:n,fontSize:c,lineHeight:"0.9em"}}}e.default=I},7862:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7865)),s=l(i(5549)),a=l(i(4381));class c{constructor(t){return{self:c.getSelf(t)}}static get selfBoxShadowOnHighlight(){return`0px 0px 10px rgba(${s.default.themeRGBString},1)`}static get selfBoxShadowOffHighlight(){return`0px 0px 0px rgba(${s.default.themeRGBString},1)`}static getSelf({app:t,ui:e}){const i=e.screenSize===n.default.screenSizeSmallLabel?"26px":"30px";return{div:a.default.get({layout:a.default.getLayoutInlineFlex({alignItems:"center",justifyContent:"center",width:i,height:i,background:`rgba(${s.default.themeRGBString}, 0.85)`,borderRadius:i,boxShadow:c.selfBoxShadowOffHighlight}),content:a.default.getContentBase({fontSize:"0.8em",textAlign:"center"}),animation:a.default.getAnimationBase({transition:`${s.default.transitionOn}ms`})}),circle:a.default.get({layout:a.default.getLayoutInlineFlex({width:"100%",height:"100%"}),content:a.default.getContentBase({textAlign:"center",color:s.default.whiteRGB}),animation:a.default.getAnimationBase()})}}}e.default=c},4381:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(8506)),s=l(i(5549)),a=l(i(9301)),c=l(i(3180)),g=l(i(3817)),I=l(i(1540)),u=l(i(434)),d=l(i(9422)),B=l(i(865)),o=l(i(6869)),F=l(i(2945)),r=l(i(7825)),C=l(i(4289)),U=l(i(9201)),Q=l(i(2423)),b=l(i(4857)),V=l(i(3829)),A=l(i(9723)),x=l(i(8381)),p=l(i(4359)),G=l(i(4528)),R=l(i(6620)),L=l(i(7608)),h=l(i(4909)),m=l(i(9167)),S=l(i(1433)),Z=l(i(7162)),y=l(i(544)),X=l(i(7862));class E{constructor(t){const e=new s.default(t),i=new d.default(t),l=new u.default(t),E=new Z.default(t),f=new S.default(t),W=new R.default(t),N=new V.default(t),T=new x.default(t),Y=new G.default(t),J=new A.default(t),H=new p.default(t),k=new I.default(t),v=new U.default(t),w=new m.default(t),M=new h.default(t),D=new y.default(t),z=new L.default(t),P=new n.default(t),O=new r.default(t),j=new F.default(t),K=new Q.default(t),_=new b.default(t),q=new o.default(t),$=new a.default(t);return{container:e,header:i,footer:l,postsSupporter:E,postsFooter:f,menuFooter:W,detailFooter:new c.default(t),menu:N,ranks:T,ch:Y,menuUsers:J,setChModal:H,extScreen:k,lockMenu:v,posts:w,post:M,timeMarker:D,notif:z,audio:K,video:_,board:P,links:O,link:j,innerNotif:q,detail:$,emotionGraph:new g.default(t),icon:new B.default(t),liveCnt:new X.default(t),loading:new C.default(t)}}static get fontBaseRGB(){return"rgb(90, 90, 90)"}static get darkLightRGB(){return"rgba(0, 0, 0, 0.2)"}static get darkLightRGBA(){return"rgba(0, 0, 0, 0.25)"}static get darkRGB(){return"rgb(0, 0, 0)"}static get darkRGBA(){return"rgba(0, 0, 0, 0.4)"}static get mono160RGB(){return"rgb(160, 160, 160)"}static get mono160RGBA(){return"rgb(160, 160, 160)"}static get mono180RGB(){return"rgb(180, 180, 180)"}static get mono192RGB(){return"rgb(192, 192, 192)"}static get mono200RGB(){return"rgb(200, 200, 200)"}static get mono205RGB(){return"rgb(205, 205, 205)"}static get mono210RGB(){return"rgb(210, 210, 210)"}static get mono211RGB(){return"rgb(211, 211, 211)"}static get mono215RGB(){return"rgb(215, 215, 215)"}static get mono220RGB(){return"rgb(220, 220, 220)"}static get mono225RGB(){return"rgb(225, 225, 225)"}static get mono230RGB(){return"rgb(230, 230, 230)"}static get mono235RGB(){return"rgb(235, 235, 235)"}static get mono240RGB(){return"rgb(240, 240, 240)"}static get mono245RGB(){return"rgb(245, 245, 245)"}static get mono250RGB(){return"rgb(250, 250, 250)"}static get mono251RGB(){return"rgb(251, 251, 251)"}static get mono252RGB(){return"rgb(252, 252, 252)"}static get mono253RGB(){return"rgb(253, 253, 253)"}static get mono254RGB(){return"rgb(254, 254, 254)"}static get mono255RGB(){return"rgb(255, 255, 255)"}static get mono180RGBA(){return"rgba(180, 180, 180, 0.96)"}static get mono192RGBA(){return"rgba(192, 192, 192, 0.96)"}static get mono200RGBA(){return"rgba(200, 200, 200, 0.96)"}static get mono205RGBA(){return"rgba(205, 205, 205, 0.96)"}static get mono210RGBA(){return"rgba(210, 210, 210, 0.96)"}static get mono211RGBA(){return"rgba(211, 211, 211, 0.96)"}static get mono215RGBA(){return"rgba(215, 215, 215, 0.96)"}static get mono220RGBA(){return"rgba(220, 220, 220, 0.96)"}static get mono225RGBA(){return"rgba(225, 225, 225, 0.96)"}static get mono230RGBA(){return"rgba(230, 230, 230, 0.96)"}static get mono235RGBA(){return"rgba(235, 235, 235, 0.96)"}static get mono240RGBA(){return"rgba(240, 240, 240, 0.96)"}static get mono245RGBA(){return"rgba(245, 245, 245, 0.96)"}static get mono250RGBA(){return"rgba(250, 250, 250, 0.96)"}static get mono252RGBA(){return"rgba(252, 252, 252, 0.96)"}static get mono255RGBA(){return"rgba(255, 255, 255, 0.96)"}static get twitterRGB(){return"rgba(76, 160, 235)"}static get twitterRGBA(){return"rgba(76, 160, 235, 0.96)"}static get facebookRGB(){return"rgba(73, 104, 173)"}static get facebookRGBA(){return"rgba(73, 104, 173, 0.96)"}static get emptyLabelStyle(){return{maxWidth:0,maxHeight:0}}static get(t={layout:{},content:{},animation:{}}){return{...t.layout,...t.content,...t.animation}}static getLayoutBase(t={}){return{display:"block",boxSizing:"border-box",overflow:"hidden",width:"inherit",height:"inherit",minWidth:"auto",minHeight:"auto",maxWidth:"inherit",maxHeight:"inherit",padding:0,margin:0,lineHeight:1,listStyle:"none",userSelect:"none",textDecoration:"none",verticalAlign:"baseline",borderCollapse:"collapse",borderSpacing:0,border:0,borderRadius:0,zIndex:1,...t}}static getLayoutGrid(t={}){return{...E.getLayoutBase({display:"grid"}),...t}}static getLayoutFlex(t={}){return{...E.getLayoutBase({display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutInlineFlex(t={}){return{...E.getLayoutBase({display:"inline-flex",justifyContent:"center",alignItems:"center",flexDirection:"row",flexWrap:"no-wrap"}),...t}}static getLayoutTable(t={}){return{...E.getLayoutBase({display:"table"}),...t}}static getLayoutTableRow(t={}){return{...E.getLayoutBase({display:"table-row"}),...t}}static getLayoutTableCol(t={}){return{...E.getLayoutBase({display:"table-cell"}),...t}}static getLayoutFlexChild(t={}){return{...E.getLayoutBase({width:"auto",height:"auto"}),...t}}static getLayoutBlock(t={}){return{...E.getLayoutBase({display:"block"}),...t}}static getLayoutInlineBlock(t={}){return{...E.getLayoutBase({display:"inline-block",align:"center",verticalAlign:"middle"}),...t}}static getLayoutInline(t={}){return{...E.getLayoutBase({display:"inline"}),...t}}static getContentBase(t={}){return{wordWrap:"break-word",whiteSpace:"normal",quotes:"none",content:"none",cursor:"default",...E.getFontBase(),...t}}static getFontBase(t={}){return{letterSpacing:"inherit",lineHeight:"inherit",textAlign:"center",color:E.fontBaseRGB,fontWeight:300,fontSize:"inherit",fontFamily:"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Hiragino Sans,Noto Sans CJK JP,Original Yu Gothic,Yu Gothic,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Sans Emoji",...t}}static getAnimationBase(t={}){return{transition:`${s.default.transitionOff}ms`,transform:"translate3d(0px, 0px, 0px)",...t}}static trimUnit(t){return Number(t.toString().replace(/px|%|vw|vh|ms/,""))}}e.default=E},6552:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7771)),s=l(i(300)),a=l(i(1665));class c{constructor(t,e){this.env=a.default.PRODUCTION,this.type=a.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=n.default.HTTPS_PROTOCOL,this.host=location.host,this.extensionMode=c.extensionModeNone,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:n.default.HTTPS_PROTOCOL,host:location.host,mode:c.extensionModeNone}};const i=c.getInitialRootCh(s.default.env),l=c.getFirstHasSlach(i);this.env=s.default.env,this.id=t,this.hasSlash=e&&void 0!==e.hasSlash?e.hasSlash:c.getLastHasSlach(i),this.ch=e&&e.ch?e.ch:c.getCh(i,l,this.hasSlash),this.protocol=e&&e.protocol?e.protocol:c.getProtocol(),this.host=e&&e.host?e.host:location.host,this.extensionMode=e&&e.mode?e.mode:c.extensionModeNone}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static getInitialRootCh(t){let e=location.href;switch(e=e.replace(`${n.default.HTTPS_PROTOCOL}/`,"").replace(`${n.default.HTTP_PROTOCOL}/`,""),t){case a.default.PRODUCTION:e=e.replace(`/${a.default.PRODUCTION_DOMAIN}`,"/");break;case a.default.LOCALHOST:e=e.replace(`/${a.default.DEVELOPMENT_DOMAIN}`,"/");break;case a.default.DEVELOPMENT:e=e.replace(`:${a.default.PORTS.DEVELOPMENT_CLIENT}`,"").replace(`:${a.default.PORTS.DEVELOPMENT_API}`,"").replace(`:${a.default.PORTS.DEVELOPMENT_TOP}`,""),0===e.indexOf(`/${a.default.DEVELOPMENT_DOMAIN}/`)&&(e=e.replace(`/${a.default.DEVELOPMENT_DOMAIN}`,""))}return e}static getType(t,e){let i=a.default.APP_TYPES.API;return t?a.default.APP_TYPES.EXTENSION:e?a.default.APP_TYPES.PORTAL:i}static getProtocol(){return location.protocol===n.default.HTTPS_PROTOCOL?n.default.HTTPS_PROTOCOL:location.protocol===n.default.HTTP_PROTOCOL?n.default.HTTP_PROTOCOL:n.default.TALKN_PROTOCOL}static getFirstHasSlach(t){return t.startsWith("/")}static getLastHasSlach(t){return t.endsWith("/")}static getCh(t,e,i){let l=t;return l=e?l:`/${l}`,l=i?l:`${l}/`,l=l.replace(/^\/\//,"/"),l}}e.default=c},1223:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const n=l(i(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(n.default.API_TO_SERVER_REQUEST)?t.replace(n.default.API_TO_SERVER_REQUEST,n.default.API_TO_CLIENT_REQUEST):0===t.indexOf(n.default.SERVER_TO_API_EMIT)?t.replace(n.default.SERVER_TO_API_EMIT,n.default.API_TO_CLIENT_EMIT):0===t.indexOf(n.default.SERVER_TO_API_BROADCAST)?t.replace(n.default.SERVER_TO_API_BROADCAST,n.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==i.getType(t)&&"Null"!==i.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return i.getType(t),Object.keys(t).forEach((l=>{let n,s,a=null,c=!1,g=!1,I=()=>{},u=null;if("Object"===i.getType(t[l])){n=t[l];let e=0===Object.keys(n).length;c=n.isAcceptNull?n.isAcceptNull:c,g=n.isAcceptBlank?n.isAcceptBlank:g,a=!e&&n.def?n.def:a,u=e||!n.value&&""!==n.value?n:n.value,u=e&&a?a:u,s=i.getType(u),I=n.valid?n.valid:I}else u=t[l],a=u,c=c,g=g,s=i.getType(u),I=I;const d=t=>{let n=null;const a=`${e}.${l}`,d=u,B=s,o=t,F=i.getType(t);return F!==s&&(n=`SCHEMA_TYPE : ${a} [validType: ${s}][paramsType: ${F}]`),c&&null===t&&(n=`SCHEMA_IS_ACCEPT_NULL :  ${a}`),g&&""===t&&(n=`SCHEMA_IS_ACCEPT_BLANK :  ${a}`),"Function"===i.getType(I)&&I(t)&&(n=`SCHEMA_YOUR_VALID_METHOD :  ${a}`),{pointer:a,validValue:d,validType:B,paramsValue:o,paramsType:F,error:n}},{pointer:B,validValue:o,validType:F,paramsValue:r,paramsType:C,error:U}=d(u);if(null===U)Object.defineProperty(this,l,{get:()=>u,set:t=>{const e=d(u);if(null===U)return u=t,{...this,[l]:u};throw this.validWarn(e),U},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw U;console.warn(U)}})),this}canSet(t,e){try{const i=this[t];if(void 0===i)return!0;if(null===i)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:l}=this[t]=e;return!l&&(this[t]=i,!0)}catch(i){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${i}`}}merge(t={},e=!0){try{const l=i.getType(t),n=Object.keys(t);if(n.length>0){let i={...this};return n.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?i[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===l?(i=Object.values(i),e?new this.constructor(i):i):e?new this.constructor(i):i}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${i.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${i.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((i=>{let l=t[i];"Object"===l.constructor.name&&(l.type||l.default||(l=this.toJSON(l))),l.default||""===l.default||0===l.default?e[i]=l.default:e[i]=l})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=i},7771:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1216));class s{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${s.API_REQUEST_TYPE}]${s.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_EMIT}]${s.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${s.API_RESPONSE_TYPE_BROADCAST}]${s.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(s.METHOD_COLON),i=e[0].split("[")[0];let l;return l=e[0].indexOf(`[${s.API_REQUEST_TYPE}]`)>0?s.API_REQUEST_TYPE:e[0].indexOf(`[${s.API_RESPONSE_TYPE_EMIT}]`)>0?s.API_RESPONSE_TYPE_EMIT:s.API_RESPONSE_TYPE_BROADCAST,{sequence:i,actionType:l,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return s.map[t]&&(e.emit=!(Object.keys(s.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(s.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_REQUEST_TYPE}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_REQUEST_TYPE:e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_RESPONSE_TYPE_BROADCAST}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${s.API_SEPARATE_IO_TYPE_START}${s.API_RESPONSE_TYPE_EMIT}${s.API_SEPARATE_IO_TYPE_END}`)>=0?s.API_RESPONSE_TYPE_EMIT:s.API_SETUP}static convertExtToClientActionType(t,e){return s.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(s.API_TO_SERVER_REQUEST)?t.replace(s.API_TO_SERVER_REQUEST,s.API_TO_CLIENT_REQUEST):0===t.indexOf(s.SERVER_TO_API_EMIT)?t.replace(s.SERVER_TO_API_EMIT,s.API_TO_CLIENT_EMIT):0===t.indexOf(s.SERVER_TO_API_BROADCAST)?t.replace(s.SERVER_TO_API_BROADCAST,s.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,i){const l=t.replace(s.API_TO_SERVER_REQUEST,""),{requestPublicState:a,requestPrivateState:c}=s.map[l];let g={[s.REDUX_ACTION_KEY]:l};return Object.keys(c).forEach((t=>{g[t]||(g[t]={}),c[t].forEach((l=>{if(!g[t][l]){let s=e[t][l];i&&i[t]&&n.default.isSet(i[t][l])&&(s=i[t][l]),g[t][l]=s}}))})),Object.keys(a).forEach((t=>{g[t]||(g[t]={}),a[t].forEach((e=>{g[t][e]||(g[t][e]=i)}))})),g}static getResponseState(t,e,i){const l=e.type,n=s.map[l][`response${t}State`];let a={[s.REDUX_ACTION_KEY]:l};return Object.keys(n).forEach((t=>{if(!i[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const l=n[t];let s=i[t];switch(s.constructor.name){case"model":s=s.toJSON(),delete s._id,delete s.__v}"*"===l?a={...a,[t]:s}:l.forEach((l=>{if(void 0===i[t][l])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${l}`;a={...a,[t]:{...a[t],[l]:i[t][l]}}}))}})),a}static getRequestActionState(t,e=null,i=null){return"string"==typeof e&&null===i?{type:t}:"object"==typeof e&&"object"==typeof i?{...e,...i,type:t}:"string"==typeof e&&"object"==typeof i?{...i,type:t}:{...e,type:t}}}e.default=s},300:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(6894)),s=l(i(8399)),a=l(i(1665)),{PRODUCTION:c,DEVELOPMENT:g,PRODUCTION_DOMAIN:I,DEVELOPMENT_DOMAIN:u,SUB_DOMAINS:d,PORTS:B}=a.default,o=n.default.hasOwnProperty("hostname")?n.default.hostname():"localhost",F=function(t){if("browser"===s.default.title){if(location.href.indexOf(a.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===a.default.PORTS.DEVELOPMENT_CLIENT||t===a.default.PORTS.DEVELOPMENT_API||t===a.default.PORTS.DEVELOPMENT_TOP?a.default.DEVELOPMENT:a.default.LOCALHOST}return a.default.PRODUCTION}return t.indexOf(a.default.AWS_HOST_KEY)>=0?a.default.PRODUCTION:a.default.DEVELOPMENT}(o),r={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},C=F===g,U=F===c?I:u,Q=`${d.WWW}.${U}`,b=`${d.API}.${U}`,V=C?`${U}:${B.DEVELOPMENT_API}/${r.api}`:`${b}/v1`,A=C?`${U}:${B.DEVELOPMENT}/${r.client}`:`${d.CLIENT}.${U}`,x=`${d.DESC}.${U}`,p=`${d.PORTAL}.${U}`,G=`${d.ASSETS}.${U}`,R=`${G}/img/`,L={domain:U,env:F,files:r,hostName:o,apiURL:b,apiAccessURL:V,wwwURL:Q,descURL:x,portalURL:p,clientURL:A,assetsURL:G,autoURL:`${d.AUTO}.${U}`,extURL:`${d.EXT}.${U}`,ownURL:`${d.OWN}.${U}`,newsURL:`${d.NEWS}.${U}`,bannerURL:`${d.BANNER}.${U}`,transactionURL:`${d.TRANSACTION}.${U}`,assetsImgPath:R,assetsIconPath:`${G}/icon/`,assetsJsPath:`${G}/js/`,sessionURL:`${d.SESSION}.${U}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${R}talkn_logo_html.png`,Music:`//${R}talkn_logo_music.png`,Video:`//${R}talkn_logo_video.png`},defaultFavicon:`//${d.ASSETS}.${U}/favicon.ico`};e.default={...L}},1665:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(8399)),s={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:n.default.env.HOSTNAME?n.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_CLIENT:8080,DEVELOPMENT_API:8001,DEVELOPMENT_TOP:8e3,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",TOP:"TOP"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=s},3365:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1025));class s{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(s.inputs).forEach((t=>{s.inputs[t].forEach((e=>{this.belongCoverTypes[e]=t}))})),Object.keys(s.TYPES).forEach((t=>{this.typesArray.push(t);const e=s.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL})),this.model=n.default,this.balances={plain:n.default.Plain.getSaveBalance,russell:n.default.Russell.getSaveBalance,russellSimple:n.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=s.defaultModelKey,e=0,i=!0){let l=0,n={};switch(t){case"plain":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":n={6:5,10:5,20:5,30:5,50:5};break;case"russell":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const a=Object.keys(n),c=a.length-1;for(let t=0;t<c;t++){const i=a[t],s=n[i];if(i>e)break;l=s}return i?l+1:l}static get inputs(){return{[s.TYPES.LIKE.LABEL]:[1,2,3,4,5],[s.TYPES.MONEY.LABEL]:[100],[s.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[s.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[s.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[s.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[s.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[s.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[s.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[s.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=s},557:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3365));class s{static get TYPES(){return[n.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[n.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach(((e,i)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=s},6663:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3365));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach((t=>{this.typesArray.push(s.TYPES[t].LABEL)}))}static get TYPES(){return[n.default.TYPES.SUPRISE,n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.GLAD,n.default.TYPES.SATISFACTION,n.default.TYPES.COMFORT,n.default.TYPES.RELAX,n.default.TYPES.TIRED,n.default.TYPES.SLEEPY,n.default.TYPES.SLACK,n.default.TYPES.BORING,n.default.TYPES.MELANCHOLY,n.default.TYPES.SAD,n.default.TYPES.UNPLEASANT,n.default.TYPES.FRUSTRATED,n.default.TYPES.DISSATISFIED,n.default.TYPES.ANGER,n.default.TYPES.WORRY,n.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[n.default.TYPES.SUPRISE.ID]:1}],1002:[{[n.default.TYPES.SUPRISE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.GLAD.ID]:1}],1402:[{[n.default.TYPES.GLAD.ID]:1}],1501:[{[n.default.TYPES.SATISFACTION.ID]:1}],1502:[{[n.default.TYPES.SATISFACTION.ID]:1}],1503:[{[n.default.TYPES.SATISFACTION.ID]:1}],1504:[{[n.default.TYPES.SATISFACTION.ID]:1}],1601:[{[n.default.TYPES.COMFORT.ID]:1}],1602:[{[n.default.TYPES.COMFORT.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.BORING.ID]:1}],2102:[{[n.default.TYPES.BORING.ID]:1}],2103:[{[n.default.TYPES.BORING.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.SAD.ID]:1}],2302:[{[n.default.TYPES.SAD.ID]:1}],2303:[{[n.default.TYPES.SAD.ID]:1}],2401:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY.ID]:1}],2802:[{[n.default.TYPES.WORRY.ID]:1}],2803:[{[n.default.TYPES.WORRY.ID]:1}],2804:[{[n.default.TYPES.WORRY.ID]:1}],2805:[{[n.default.TYPES.WORRY.ID]:1}],2806:[{[n.default.TYPES.WORRY.ID]:1}],2807:[{[n.default.TYPES.WORRY.ID]:1}],2901:[{[n.default.TYPES.FEAR.ID]:1}],2902:[{[n.default.TYPES.FEAR.ID]:1}],2903:[{[n.default.TYPES.FEAR.ID]:1}],2904:[{[n.default.TYPES.FEAR.ID]:1}],2905:[{[n.default.TYPES.FEAR.ID]:1}],2906:[{[n.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach(((e,i)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=s},3005:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(3365));class s{constructor(t){this.typesArray=[],Object.keys(s.TYPES).forEach((t=>{this.typesArray.push(s.TYPES[t].LABEL)}))}static get TYPES(){return[n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.RELAX,n.default.TYPES.SLACK,n.default.TYPES.MELANCHOLY,n.default.TYPES.ANGER,n.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[n.default.TYPES.EXCITE.ID]:1}],1002:[{[n.default.TYPES.EXCITE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.JOY.ID]:1}],1402:[{[n.default.TYPES.JOY.ID]:1}],1501:[{[n.default.TYPES.JOY.ID]:1}],1502:[{[n.default.TYPES.JOY.ID]:1}],1503:[{[n.default.TYPES.JOY.ID]:1}],1504:[{[n.default.TYPES.JOY.ID]:1}],1601:[{[n.default.TYPES.RELAX.ID]:1}],1602:[{[n.default.TYPES.RELAX.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.SLACK.ID]:1}],2102:[{[n.default.TYPES.SLACK.ID]:1}],2103:[{[n.default.TYPES.SLACK.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[n.default.TYPES.ANGER.ID]:1}],2602:[{[n.default.TYPES.ANGER.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[n.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return s.TYPES.forEach(((e,i)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=s},1025:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(557)),s=l(i(6663)),a=l(i(3005));e.default={Plain:n.default,Russell:s.default,RussellSimple:a.default}},6562:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={isUrl:t=>!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*|\\/)?$","i").test(t),getSaveFaviconName:t=>{if(t){const e=t.replace(/\u002f/g,"_");return e.indexOf(".png")>0?e:e+".png"}},trimPx:t=>t.toString().replace("px",""),getUpperPrefix:t=>{let e=t.charAt(0).toUpperCase()+t.slice(1);return e.substring(0,1).toUpperCase()+e.substring(1)}}},8957:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7294)),s=l(i(3935)),a=i(8928),c=l(i(7303));e.default=(t,e=(()=>{}))=>{s.default.render(n.default.createElement(a.Provider,{store:t.window.store},n.default.createElement(c.default,null)),document.querySelector("div#talkn"),e)}},2874:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7213)),s=l(i(6552)),a=l(i(1223)),c=l(i(7771)),g=l(i(300)),I=l(i(1665)),u=l(i(2230)),d=l(i(4817)),B=l(i(5232)),o=l(i(8215)),F=l(i(4603)),r=l(i(7923)),C=l(i(7865)),U=l(i(3669)),Q=l(i(6612)),b=l(i(8957));new(i(8622).default);class V{constructor(t){this.id=I.default.APP_TYPES.PORTAL,this.store=(0,Q.default)(),this.parentHref=location.href,F.default.setupMath(),this.id=t,this.bootOption=new s.default(this.id);const e=new u.default(this.bootOption),i=new r.default(e),l={...e,...i};this.store.dispatch({...l,type:"INIT_CLIENT"}),this.api=this.api.bind(this),this.injectStateToApp=this.injectStateToApp.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise((t=>{this.conned=t,this.wsApi=new n.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage,this.id!==I.default.APP_TYPES.TOP&&this.id!==I.default.APP_TYPES.PORTAL&&this.id!==I.default.APP_TYPES.EXTENSION||(this.ext=new A(this),this.mediaClient=new x(this),this.dom=new p(this))}))}api(t,e={},i){t===V.SET_CALLBACK_METHOD&&i&&(this.callback=i),this.postMessage(t,e)}injectStateToApp(t){this.api("fetchPosts",t),this.api("rank",t)}postMessage(t,e={}){const i={id:e.id?e.id:this.id,type:a.default.CLIENT_TO_WSAPI_TYPE,ioType:c.default.API_SETUP,method:t,params:e};this.mediaClient&&this.mediaClient.wsClientBeforeFilter({method:t,params:e}),this.wsApi.postMessage(i)}onMessage(t){const{currentTarget:e,data:i}=t,{type:l,method:n,ioType:s,params:c,methodBack:g}=i;if(e instanceof Worker&&l===a.default.WSAPI_TO_CLIENT_TYPE){const t=a.default.convertApiToClientActionType(n),{ioType:e,exeMethod:i}=a.default.getMessageTypes(t),l={...c,type:t};if(this.store.dispatch(l),this.exePublicCallback(e,i,l),"WS_CONSTRUCTED"===n&&(this.conned(this),this.id===I.default.APP_TYPES.TOP||this.id===I.default.APP_TYPES.PORTAL)){const t=c.ch?{...this.bootOption,ch:c.ch}:this.bootOption;this.api("tune",t)}this.id===I.default.APP_TYPES.EXTENSION&&this.ext&&this.ext.to(n,e,c),this.mediaClient&&this.mediaClient.wsClientAfterFilter({method:n,params:c,state:l}),this.id!==I.default.APP_TYPES.TOP&&this.id!==I.default.APP_TYPES.PORTAL&&this.id!==I.default.APP_TYPES.EXTENSION||"SERVER_TO_API[EMIT]:tune"===n&&this.injectStateToApp(c)}}onError(t){console.warn(t)}exePublicCallback(t,e,i){this.callback&&(t!==c.default.API_RESPONSE_TYPE_EMIT&&t!==c.default.API_RESPONSE_TYPE_BROADCAST||this.callback(t,e,i))}}e.default=V;class A{constructor(t){this.window=t,this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),window.onmessage=this.onMessage,window.onmessageerror=this.onMessageError}to(t,e,i={}){t.indexOf(c.default.METHOD_COLON)>=0&&(t=t.split(c.default.METHOD_COLON)[1]);const l={id:this.id,type:a.default.CLIENT_TO_EXT_TYPE,ioType:e,method:t,params:i,href:location.href};this.postMessage(l)}toMediaServer(t,e={}){const i={id:this.id,type:a.default.MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE,method:t,params:e};this.postMessage(i)}postMessage(t={}){this.href?window.top.postMessage(t,this.href):window.postMessage(t,location.href)}onMessage(t){const{id:e,href:i,type:l,method:n,ioType:g,params:I,methodBack:d}=t.data;if(l===a.default.EXT_TO_CLIENT_TYPE){switch(n){case a.default.HANDLE_EXT_AND_CLIENT:this.id=e,this.window.bootOption=new s.default(e,I.bootOption),this.href=i;const t=new u.default(this.window.bootOption),l=new r.default({...t,ui:I.ui}),d={...t,...l};this.window.store.dispatch({...d,type:"EXT_INIT_CLIENT"}),this.window.api("tune",this.window.bootOption),this.to(n,g,d);break;default:Boolean(Object.keys(c.default.map).find((t=>t===n)))&&this.window.api(n,I)}this.window.store.dispatch({...I,type:n})}else l===a.default.MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE&&this.window.mediaClient.onMessage(t,this.window.store.getState())}onMessageError(t){console.warn(t)}}class x{constructor(t){this.pointerTime=0,this.isPosting=!1,this.isChangeThread=!1,this.window=t,this.status=x.STATUS_ENDED,this.requestServer=this.requestServer.bind(this),this.onMessage=this.onMessage.bind(this),this.wsClientBeforeFilter=this.wsClientBeforeFilter.bind(this),this.wsClientAfterFilter=this.wsClientAfterFilter.bind(this),this.setPostsTimelines=this.setPostsTimelines.bind(this),this.refrectSelfPost=this.refrectSelfPost.bind(this),this.play=this.play.bind(this),this.stanby=this.stanby.bind(this),this.ended=this.ended.bind(this),this.postsTimeline=[],this.postsTimelineStock=[]}static get STATUS_SEARCH(){return"SEARCH"}static get STATUS_STANBY(){return"STANBY"}static get STATUS_PLAY(){return"PLAY"}static get STATUS_ENDED(){return"ENDED"}static get STATUS_BACK(){return"BACK"}requestServer(t,e={}){this.window.ext.toMediaServer(t,e)}onMessage(t,e){const{params:i}=t.data,{currentTime:l,status:n,ch:s}=i,a=n.toUpperCase();switch(a){case x.STATUS_PLAY:e.thread.ch!==s||this.isChangeThread?this.status!==x.STATUS_BACK&&(e.thread.ch=s,this.isChangeThread=!0,window.talknWindow.dom.onClickCh(e.thread.ch,e.ui,e.thread.hasSlash,"ToMedia")):(this.postsTimeline.length>0||this.postsTimelineStock.length>0)&&(this.status=a,this.play(l))}}wsClientBeforeFilter({method:t,params:e}){return"post"===t&&this.window.store.getState().app.isMediaCh&&(e.app.inputCurrentTime=this.pointerTime>0?this.pointerTime:0),e}wsClientAfterFilter({method:t,params:e,state:i}){switch(t){case"SERVER_TO_API[EMIT]:tune":this.window.mediaClient=new x(this.window),this.requestServer("searching",{id:this.window.ext.id,ch:i.thread.ch,href:location.href,audios:i.thread.audios,videos:i.thread.videos});break;case"SERVER_TO_API[EMIT]:changeThread":this.window.id===I.default.APP_TYPES.TOP||this.window.id===I.default.APP_TYPES.PORTAL?this.requestServer("searching",{id:this.window.ext.id,ch:i.thread.ch,href:location.href,audios:i.thread.audios,videos:i.thread.videos}):"BackToRootCh"===i.ui.clicked&&(this.status=x.STATUS_BACK),this.isChangeThread=!1;break;case"SERVER_TO_API[EMIT]:fetchPosts":this.setPostsTimelines(i);break;case"SERVER_TO_API[BROADCAST]:post":if(i.app.isMediaCh){const t=i.posts[0];t.ch===i.thread.ch&&t.uid===i.user.uid&&this.refrectSelfPost(t)}}}setPostsTimelines({postsTimeline:t,postsTimelineStock:e}){this.postsTimeline=[...t],this.postsTimelineStock=[...e]}refrectSelfPost(t){const e=this.postsTimeline.length;let i=!1;for(let l=0;l<e;l++)t.currentTime<this.postsTimeline[l].currentTime&&(i=!0,this.postsTimeline.splice(l,0,t));i||this.postsTimeline.push(t)}setServerParams(t){this.ch=t.ch,this.status=t.status,this.pointerTime=t.currentTime}searching(){}stanby(){}ended(){const t=Number.MAX_SAFE_INTEGER,e=this.postsTimelineStock.length;for(let i=0;i<e&&this.postsTimelineStock[i]&&this.postsTimelineStock[i].currentTime<=t;i++)this.window.dom.clientAction("NEXT_POSTS_TIMELINE",{postsTimeline:[this.postsTimelineStock[i]]})}play(t=0){if(this.isPosting)return;const e=this.postsTimelineStock.length;if(this.isPosting=!0,this.pointerTime<=t)for(this.pointerTime=t;this.isPosting;)if(0===e)this.isPosting=!1;else{if(!(this.postsTimelineStock[0]&&this.postsTimelineStock[0].currentTime<=t)){this.isPosting=!1;break}{const t=this.postsTimelineStock.shift();this.postsTimeline.push(t),this.window.dom.clientAction("NEXT_POSTS_TIMELINE",{postsTimeline:[t]})}}else{this.requestServer("pause");const e=this.postsTimeline.concat(this.postsTimelineStock),i=e.length;this.pointerTime=t,this.postsTimeline=[],this.postsTimelineStock=[];for(let t=0;t<i;t++){const i=e[t];i.currentTime<=this.pointerTime?this.postsTimeline.push(i):this.postsTimelineStock.push(i)}this.window.dom.clientAction("CLEAR_POSTS_TIMELINE",{postsTimeline:this.postsTimeline,postsTimelineStock:this.postsTimelineStock}),this.requestServer("play")}this.isPosting=!1}}class p extends o.default{constructor(t){super(null),this.id="talkn",this.scrollHeight=0,this.isScrollBottom=!1,this.resizeTimer=null,this.isAnimateScrolling=!1,this.window=t,this.load=this.load.bind(this),this.resize=this.resize.bind(this),this.scroll=this.scroll.bind(this),this.renderTalkn=this.renderTalkn.bind(this),this.loadContainer=this.loadContainer.bind(this),this.updateUiTimeMarker=this.updateUiTimeMarker.bind(this),this.getPostsClientHeight=this.getPostsClientHeight.bind(this),window.onload=this.load,window.onresize=this.resize,window.onscroll=this.scroll}static get resizeInterval(){return 300}static get selectHtml(){return document.querySelector("html")}static get selectBody(){return document.querySelector("body")}static get selectTalkn(){return document.querySelector("div#talkn")}static get selectPosts(){return document.querySelector("[data-component-name=Posts]")}static get selectAllPost(){return document.querySelectorAll("[data-component-name=Post]")}static get selectAllTimeMarkerList(){return document.querySelectorAll("li[data-component-name=TimeMarkerList]")}renderTalkn(){(0,b.default)(this,this.loadContainer)}loadContainer(){this.html=p.selectHtml,this.body=p.selectBody,this.talkn=p.selectTalkn,this.removeTalknLoading()}load(){}resize(t){if(window.talknWindow){const{ui:t}=this.window.store.getState();null===this.resizeTimer&&(this.resizeStartWindow(t),this.resizeTimer=setTimeout((()=>{this.resizeEndWindow(t)}),p.resizeInterval))}}scroll(t){const e=window.scrollY,i=window.innerHeight,l=this.body.scrollHeight;this.onScroll({scrollTop:e,clientHeight:i,scrollHeight:l})}updateUiTimeMarker(t,{app:e,ui:i}){const l=U.default.generate(t,p.selectAllTimeMarkerList,{app:e,ui:i});l.list.length>0&&this.clientAction("ON_SCROLL_UPDATE_TIME_MARKER",{uiTimeMarker:l})}resizeStartWindow(t){t.isTransition=!1,this.clientAction("ON_RESIZE_START_WINDOW",{ui:t})}resizeEndWindow(t){if(t){clearTimeout(this.resizeTimer),this.resizeTimer=null;const e=window.talknWindow.store.getState();let i=!1;t.width!==window.innerWidth&&(t.width=window.innerWidth,i=!0),t.height!==window.innerHeight&&(t.height=window.innerHeight,i=!0),i&&(t.screenSize=C.default.getScreenSize(),t.isTransition=!0,e.ui=t,this.clientAction("ON_RESIZE_END_WINDOW",e))}}animateScrollTo(t=9999999,e=400,i=(()=>{})){if(0===e)window.scrollTo(0,t);else if(!this.isAnimateScrolling){let l=window.scrollY,n=t-l,s=0,a=20;const c=()=>{s+=a;let t=Math.easeInOutQuad(s,l,n,e);screenTop=Math.floor(t),window.scrollTo(0,t),s<e?(this.isAnimateScrolling=!0,setTimeout(c,a)):(this.isAnimateScrolling=!1,i())};c()}}exeGetMore(){const{thread:t,app:e}=this.clientState,i=B.default.getDispPosts(this.clientState).length,l=e.dispThreadType===d.default.dispThreadTypeMulti?"multiPostCnt":"postCnt";g.default.findOnePostCnt<=i&&i<g.default.findOneLimitCnt&&t[l]>g.default.findOnePostCnt&&i<t[l]&&this.api("getMore")}getPostsHeight(){let t=0;return p.selectAllPost.forEach((e=>{t+=e.clientHeight})),t}getPostsClientHeight(){const t=p.selectPosts;return t?t.clientHeight:0}removeTalknLoading(){this.talkn.style.display="initial",this.talkn.style["background-image"]="none",this.talkn.style["animation-name"]="none"}lockWindow(){const t="hidden";return this.html.style.overflow=t,this.body.style.overflow=t,this.talkn.style.overflow=t,window.scrollY}unlockWindow(){const t="inherit";this.html.style.overflow=t,this.body.style.overflow=t,this.talkn.style.overflow=t}}},7303:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(7294)),s=i(8928),a=l(i(3841)),c=l(i(8215)),g=l(i(3691)),I=l(i(7851));class u extends c.default{constructor(t){super(t);const{ui:e,thread:i}=t.state;this.state={notifs:[]}}componentDidMount(){this.clientAction("COMPONENT_DID_MOUNTS","Container")}componentDidUpdate(){(0,g.default)(this,"Container")}render(){const{ranks:t}=this.props.state;return console.log(t),n.default.createElement(n.default.Fragment,null,"HOHO")}}e.default=(0,s.connect)(I.default,{...a.default})(u)},2417:function(t,e,i){"use strict";var l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=l(i(1665)),s=l(i(2874)),a=n.default.APP_TYPES.TOP;window.talknWindow=new s.default(a),window.talknWindow.boot(),window.talknWindow.dom.renderTalkn()},7213:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var l=i(477),n=i.n(l);function s(){return n()('(()=>{var t={5198:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},9954:(t,e)=>{!function(t){"use strict";e.encode=function(e){var s,r=new Uint8Array(e),i=r.length,n="";for(s=0;s<i;s+=3)n+=t[r[s]>>2],n+=t[(3&r[s])<<4|r[s+1]>>4],n+=t[(15&r[s+1])<<2|r[s+2]>>6],n+=t[63&r[s+2]];return i%3==2?n=n.substring(0,n.length-1)+"=":i%3==1&&(n=n.substring(0,n.length-2)+"=="),n},e.decode=function(e){var s,r,i,n,o,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var d=new ArrayBuffer(a),l=new Uint8Array(d);for(s=0;s<c;s+=4)r=t.indexOf(e[s]),i=t.indexOf(e[s+1]),n=t.indexOf(e[s+2]),o=t.indexOf(e[s+3]),l[u++]=r<<2|i>>4,l[u++]=(15&i)<<4|n>>2,l[u++]=(3&n)<<6|63&o;return d}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},1778:t=>{function e(t){if(t)return function(t){for(var s in e.prototype)t[s]=e.prototype[s];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((s=r[i])===e||s.fn===e){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(s){r=0;for(var i=(s=s.slice(0)).length;r<i;++r)s[r].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},9164:t=>{var e=1e3,s=60*e,r=60*s,i=24*r;function n(t,e,s,r){var i=e>=1.5*s;return Math.round(t/s)+" "+r+(i?"s":"")}t.exports=function(t,o){o=o||{};var a,c,u=typeof t;if("string"===u&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var n=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(n){var o=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(t);if("number"===u&&isFinite(t))return o.long?(a=t,(c=Math.abs(a))>=i?n(a,c,i,"day"):c>=r?n(a,c,r,"hour"):c>=s?n(a,c,s,"minute"):c>=e?n(a,c,e,"second"):a+" ms"):function(t){var n=Math.abs(t);return n>=i?Math.round(t/i)+"d":n>=r?Math.round(t/r)+"h":n>=s?Math.round(t/s)+"m":n>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},4510:(t,e,s)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;e.splice(1,0,s,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,s)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=s(76)(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},76:(t,e,s)=>{t.exports=function(t){function e(t){let s,i,n,o=null;function a(...t){if(!a.enabled)return;const r=a,i=Number(new Date),n=i-(s||i);r.diff=n,r.prev=s,r.curr=i,s=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let o=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((s,i)=>{if("%%"===s)return"%";o++;const n=e.formatters[i];if("function"==typeof n){const e=t[o];s=n.call(r,e),t.splice(o,1),o--}return s})),e.formatArgs.call(r,t),(r.log||e.log).apply(r,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=r,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(i!==e.namespaces&&(i=e.namespaces,n=e.enabled(t)),n),set:t=>{o=t}}),"function"==typeof e.init&&e.init(a),a}function r(t,s){const r=e(this.namespace+(void 0===s?":":s)+t);return r.log=this.log,r}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(i),...e.skips.map(i).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let s;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(s=0;s<i;s++)r[s]&&("-"===(t=r[s].replace(/\\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let s,r;for(s=0,r=e.skips.length;s<r;s++)if(e.skips[s].test(t))return!1;for(s=0,r=e.names.length;s<r;s++)if(e.names[s].test(t))return!0;return!1},e.humanize=s(9164),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((s=>{e[s]=t[s]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let s=0;for(let e=0;e<t.length;e++)s=(s<<5)-s+t.charCodeAt(e),s|=0;return e.colors[Math.abs(s)%e.colors.length]},e.enable(e.load()),e}},8583:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},1072:(t,e,s)=>{const r=s(1383);t.exports=(t,e)=>new r(t,e),t.exports.Socket=r,t.exports.protocol=r.protocol,t.exports.Transport=s(6206),t.exports.transports=s(442),t.exports.parser=s(4113)},1383:(t,e,s)=>{const r=s(442),i=s(1778),n=s(4510)("engine.io-client:socket"),o=s(4113),a=s(7657),c=s(8407);class u extends i{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=a(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=a(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=c.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){n(\'creating transport "%s"\',t);const e=function(t){const e={};for(let s in t)t.hasOwnProperty(s)&&(e[s]=t[s]);return e}(this.opts.query);e.EIO=o.protocol,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return n("options: %j",s),new r[t](s)}open(){let t;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return n("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){n("setting transport %s",t.name),this.transport&&(n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(t){n(\'probing transport "%s"\',t);let e=this.createTransport(t,{probe:1}),s=!1;u.priorWebsocketSuccess=!1;const r=()=>{s||(n(\'probe transport "%s" opened\',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(n(\'probe transport "%s" pong\',t),this.upgrading=!0,this.emit("upgrading",e),!e)return;u.priorWebsocketSuccess="websocket"===e.name,n(\'pausing current transport "%s"\',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(n("changing transport and sending upgrade packet"),l(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emit("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{n(\'probe transport "%s" failed\',t);const s=new Error("probe error");s.transport=e.name,this.emit("upgradeError",s)}})))};function i(){s||(s=!0,l(),e.close(),e=null)}const o=s=>{const r=new Error("probe error: "+s);r.transport=e.name,i(),n(\'probe transport "%s" failed because of error: %s\',t,s),this.emit("upgradeError",r)};function a(){o("transport closed")}function c(){o("socket closed")}function d(t){e&&t.name!==e.name&&(n(\'"%s" works - aborting "%s"\',t.name,e.name),i())}const l=()=>{e.removeListener("open",r),e.removeListener("error",o),e.removeListener("close",a),this.removeListener("close",c),this.removeListener("upgrading",d)};e.once("open",r),e.once("error",o),e.once("close",a),this.once("close",c),this.once("upgrading",d),e.open()}onOpen(){if(n("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){n("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(n(\'socket receive: type "%s", data "%s"\',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else n(\'packet received with socket readyState "%s"\',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const i={type:t,data:e,options:s};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const t=()=>{this.onClose("forced close"),n("socket closing - telling transport to close"),this.transport.close()},e=()=>{this.removeListener("upgrade",e),this.removeListener("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){n("socket error %j",t),u.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(n(\'socket close with reason: "%s"\',t),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const r=t.length;for(;s<r;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}u.priorWebsocketSuccess=!1,u.protocol=o.protocol,t.exports=u},6206:(t,e,s)=>{const r=s(4113),i=s(1778),n=s(4510)("engine.io-client:transport");t.exports=class extends i{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const s=new Error(t);return s.type="TransportError",s.description=e,this.emit("error",s),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState?this.write(t):n("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},442:(t,e,s)=>{const r=s(1526),i=s(453),n=s(4735),o=s(1985);e.polling=function(t){let e,s=!1,o=!1;const a=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let r=location.port;r||(r=e?443:80),s=t.hostname!==location.hostname||r!==t.port,o=t.secure!==e}if(t.xdomain=s,t.xscheme=o,e=new r(t),"open"in e&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new n(t)},e.websocket=o},4735:(t,e,s)=>{const r=s(3105),i=s(8583),n=/\\n/g,o=/\\\\n/g;let a;t.exports=class extends r{constructor(t){super(t),this.query=this.query||{},a||(a=i.___eio=i.___eio||[]),this.index=a.length,a.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=t=>{this.onError("jsonp poll error",t)};const e=document.getElementsByTagName("script")[0];e?e.parentNode.insertBefore(t,e):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){let s;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=s,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function r(){i(),e()}this.form.action=this.uri();const i=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(t){this.onError("jsonp polling iframe removal error",t)}try{const t=\'<iframe src="javascript:0" name="\'+this.iframeId+\'">\';s=document.createElement(t)}catch(t){s=document.createElement("iframe"),s.name=this.iframeId,s.src="javascript:0"}s.id=this.iframeId,this.form.appendChild(s),this.iframe=s};i(),t=t.replace(o,"\\\\\\n"),this.area.value=t.replace(n,"\\\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},453:(t,e,s)=>{const r=s(1526),i=s(3105),n=s(1778),{pick:o}=s(7306),a=s(8583),c=s(4510)("engine.io-client:polling-xhr");function u(){}const d=null!=new r({xdomain:!1}).responseType;class l extends n{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=o(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new r(t);try{c("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=()=>{this.onLoad()},e.onerror=()=>{this.onError(e.responseText)}):e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},c("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=l.requestsCount++,l.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete l.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function h(){for(let t in l.requests)l.requests.hasOwnProperty(t)&&l.requests[t].abort()}l.requestsCount=0,l.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",h):"function"==typeof addEventListener&&addEventListener("onpagehide"in a?"pagehide":"unload",h,!1)),t.exports=class extends i{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=d&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new l(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",(t=>{this.onError("xhr post error",t)}))}doPoll(){c("xhr poll");const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t=>{this.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=l},3105:(t,e,s)=>{const r=s(6206),i=s(8407),n=s(4113),o=s(6408),a=s(4510)("engine.io-client:polling");t.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{a("paused"),this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(a("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--t||e()}))),this.writable||(a("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){a("pre-pause writing complete"),--t||e()})))}else e()}poll(){a("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){a("polling got data %s",t),n.decodePayload(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose(),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():a(\'ignoring poll - transport state "%s"\',this.readyState))}doClose(){const t=()=>{a("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(a("transport open - closing"),t()):(a("transport not open - deferring close"),this.once("open",t))}write(t){this.writable=!1,n.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}}},7894:(t,e,s)=>{const r=s(8583),i="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):t=>setTimeout(t,0);t.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:i}},1985:(t,e,s)=>{const r=s(6206),i=s(4113),n=s(8407),o=s(6408),{pick:a}=s(7306),{WebSocket:c,usingBrowserWebSocket:u,defaultBinaryType:d,nextTick:l}=s(7894),h=s(4510)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends r{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=p?{}:a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u&&!p?e?new c(t,e):new c(t):new c(t,e,s)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||d,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],r=e===t.length-1;i.encodePacket(s,this.supportsBinary,(t=>{const e={};!u&&(s.options&&(e.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof t?Buffer.byteLength(t):t.length)<this.opts.perMessageDeflate.threshold&&(e.compress=!1);try{u?this.ws.send(t):this.ws.send(t,e)}catch(t){h("websocket closed before onclose event")}r&&l((()=>{this.writable=!0,this.emit("drain")}))}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=o()),this.supportsBinary||(t.b64=1),t=n.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+t}check(){return!(!c||"__initialize"in c&&this.name===f.prototype.name)}}t.exports=f},7306:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})},1526:(t,e,s)=>{const r=s(2888),i=s(8583);t.exports=function(t){const e=t.xdomain,s=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!s&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(i[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},1450:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const s=Object.create(null);Object.keys(e).forEach((t=>{s[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:s,ERROR_PACKET:{type:"error",data:"parser error"}}},4383:(t,e,s)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:i}=s(1450);let n;"function"==typeof ArrayBuffer&&(n=s(9954));const o=(t,e)=>{if(n){const s=n.decode(t);return a(s,e)}return{base64:!0,data:t}},a=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:a(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:o(t.substring(1),e)}:r[s]?t.length>1?{type:r[s],data:t.substring(1)}:{type:r[s]}:i}},5157:(t,e,s)=>{const{PACKET_TYPES:r}=s(1450),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),n="function"==typeof ArrayBuffer,o=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+t)},s.readAsDataURL(t)};t.exports=({type:t,data:e},s,a)=>{return i&&e instanceof Blob?s?a(e):o(e,a):n&&(e instanceof ArrayBuffer||(c=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?s?a(e instanceof ArrayBuffer?e:e.buffer):o(new Blob([e]),a):a(r[t]+(e||""));var c}},4113:(t,e,s)=>{const r=s(5157),i=s(4383),n=String.fromCharCode(30);t.exports={protocol:4,encodePacket:r,encodePayload:(t,e)=>{const s=t.length,i=new Array(s);let o=0;t.forEach(((t,a)=>{r(t,!1,(t=>{i[a]=t,++o===s&&e(i.join(n))}))}))},decodePacket:i,decodePayload:(t,e)=>{const s=t.split(n),r=[];for(let t=0;t<s.length;t++){const n=i(s[t],e);if(r.push(n),"error"===n.type)break}return r}}},2888:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},8407:(t,e)=>{e.encode=function(t){var e="";for(var s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e},e.decode=function(t){for(var e={},s=t.split("&"),r=0,i=s.length;r<i;r++){var n=s[r].split("=");e[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return e}},7657:t=>{var e=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,s=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var r,i,n=t,o=t.indexOf("["),a=t.indexOf("]");-1!=o&&-1!=a&&(t=t.substring(0,o)+t.substring(o,a).replace(/:/g,";")+t.substring(a,t.length));for(var c,u,d=e.exec(t||""),l={},h=14;h--;)l[s[h]]=d[h]||"";return-1!=o&&-1!=a&&(l.source=n,l.host=l.host.substring(1,l.host.length-1).replace(/;/g,":"),l.authority=l.authority.replace("[","").replace("]","").replace(/;/g,":"),l.ipv6uri=!0),l.pathNames=(r=l.path,i=r.replace(/\\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||i.splice(0,1),"/"==r.substr(r.length-1,1)&&i.splice(i.length-1,1),i),l.queryKey=(c=l.query,u={},c.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,s){e&&(u[e]=s)})),u),l}},665:(t,e,s)=>{"use strict";function r(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function i(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,r)}return s}function n(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?i(Object(s),!0).forEach((function(e){r(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function o(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}s.r(e),s.d(e,{__DO_NOT_USE__ActionTypes:()=>u,applyMiddleware:()=>E,bindActionCreators:()=>f,combineReducers:()=>h,compose:()=>T,createStore:()=>l});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",c=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+c(),REPLACE:"@@redux/REPLACE"+c(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+c()}};function d(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,s){var r;if("function"==typeof e&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof e&&void 0===s&&(s=e,e=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(t,e)}if("function"!=typeof t)throw new Error(o(2));var i=t,n=e,c=[],h=c,p=!1;function f(){h===c&&(h=c.slice())}function T(){if(p)throw new Error(o(3));return n}function E(t){if("function"!=typeof t)throw new Error(o(4));if(p)throw new Error(o(5));var e=!0;return f(),h.push(t),function(){if(e){if(p)throw new Error(o(6));e=!1,f();var s=h.indexOf(t);h.splice(s,1),c=null}}}function _(t){if(!d(t))throw new Error(o(7));if(void 0===t.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,n=i(n,t)}finally{p=!1}for(var e=c=h,s=0;s<e.length;s++)(0,e[s])();return t}function m(t){if("function"!=typeof t)throw new Error(o(10));i=t,_({type:u.REPLACE})}function S(){var t,e=E;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(o(11));function s(){t.next&&t.next(T())}return s(),{unsubscribe:e(s)}}})[a]=function(){return this},t}return _({type:u.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:m})[a]=S,r}function h(t){for(var e=Object.keys(t),s={},r=0;r<e.length;r++){var i=e[r];"function"==typeof t[i]&&(s[i]=t[i])}var n,a=Object.keys(s);try{!function(t){Object.keys(t).forEach((function(e){var s=t[e];if(void 0===s(void 0,{type:u.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(t){n=t}return function(t,e){if(void 0===t&&(t={}),n)throw n;for(var r=!1,i={},c=0;c<a.length;c++){var u=a[c],d=s[u],l=t[u],h=d(l,e);if(void 0===h)throw e&&e.type,new Error(o(14));i[u]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(t).length)?i:t}}function p(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return p(t,e);if("object"!=typeof t||null===t)throw new Error(o(16));var s={};for(var r in t){var i=t[r];"function"==typeof i&&(s[r]=p(i,e))}return s}function T(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function E(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return function(){var s=t.apply(void 0,arguments),r=function(){throw new Error(o(15))},i={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=e.map((function(t){return t(i)}));return r=T.apply(void 0,a)(s.dispatch),n(n({},s),{},{dispatch:r})}}}},9995:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const r=s(8511);function i(t,e){if(!t)return t;if(r.isBinary(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let r=0;r<t.length;r++)s[r]=i(t[r],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const r in t)t.hasOwnProperty(r)&&(s[r]=i(t[r],e));return s}return t}function n(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=n(t[s],e);else if("object"==typeof t)for(const s in t)t.hasOwnProperty(s)&&(t[s]=n(t[s],e));return t}e.deconstructPacket=function(t){const e=[],s=t.data,r=t;return r.data=i(s,e),r.attachments=e.length,{packet:r,buffers:e}},e.reconstructPacket=function(t,e){return t.data=n(t.data,e),t.attachments=void 0,t}},9565:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const r=s(1778),i=s(9995),n=s(8511),o=s(4510)("socket.io-parser");var a;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(a=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return o("encoding packet %j",t),t.type!==a.EVENT&&t.type!==a.ACK||!n.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==a.BINARY_EVENT&&t.type!==a.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),o("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=i.deconstructPacket(t),s=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(s),r}};class c extends r{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===a.BINARY_EVENT||e.type===a.BINARY_ACK?(this.reconstructor=new u(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!n.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(r,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){const r=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(r,e)}else s.nsp="/";const r=t.charAt(e+1);if(""!==r&&Number(r)==r){const r=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(r,e+1))}if(t.charAt(++e)){const r=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!c.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",t,s),s}static isPayloadValid(t,e){switch(t){case a.CONNECT:return"object"==typeof e;case a.DISCONNECT:return void 0===e;case a.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=c;class u{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},8511:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),n="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(t){return s&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||n&&t instanceof File}e.isBinary=o,e.hasBinary=function t(e,s){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let s=0,r=e.length;s<r;s++)if(t(e[s]))return!0;return!1}if(o(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const s in e)if(Object.prototype.hasOwnProperty.call(e,s)&&t(e[s]))return!0;return!1}},6408:t=>{"use strict";var e,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},i=0,n=0;function o(t){var e="";do{e=s[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=o(+new Date);return t!==e?(i=0,e=t):t+"."+o(i++)}for(;n<64;n++)r[s[n]]=n;a.encode=o,a.decode=function(t){var e=0;for(n=0;n<t.length;n++)e=64*e+r[t.charAt(n)];return e},t.exports=a},6894:(t,e,s)=>{t.exports=s(6894)},8399:t=>{var e,s,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(s){try{return e.call(null,t,0)}catch(s){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{s="function"==typeof clearTimeout?clearTimeout:n}catch(t){s=n}}();var a,c=[],u=!1,d=-1;function l(){u&&a&&(u=!1,a.length?c=a.concat(c):d=-1,c.length&&h())}function h(){if(!u){var t=o(l);u=!0;for(var e=c.length;e;){for(a=c,c=[];++d<e;)a&&a[d].run();d=-1,e=c.length}a=null,u=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===n||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function f(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)e[s-1]=arguments[s];c.push(new p(t,e)),1!==c.length||u||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5741:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2989)),n=r(s(7771)),o=r(s(300)),a=r(s(1665)),c=r(s(3642)),u=r(s(89)),d=r(s(249)),l=r(s(2230)),h=r(s(9274));class p{constructor(t){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=t,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:n.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(t){return!(!this.stores[t]||!this.ios[this.id]||(this.id=t,0))}exe(t,e){return this[t]&&"function"==typeof this[t]?(this[t](e),!0):!(!this.methods[t]||"function"!=typeof this.methods[t]||(this.methods[t](e),0))}onResponseChAPI(t){const e=(t=>e=>{const s=t(e);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(u.default);this.on(t,e)}offResponseChAPI(t){this.off(t)}getIoParams(t){let e="";return Object.keys(t).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=t[s];e+=`${s}=${encodeURIComponent(r)}&`})),e.replace(/&$/,"")}tune(t){if(!this.use(t.id)){this.id=t.id,this.stores[this.id]=(0,h.default)(),this.stores[this.id].subscribe(this.subscribe);const e=new l.default(t);this.stores[this.id].dispatch({...e,type:"SETUPED_API_STORE"});const s=this.getIoParams(t),r=`${n.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=(0,i.default)(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(t.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(t){const e=t&&t.id?t.id:this.id;return!!this.ios[e]&&(this.ios[e].disconnect(),delete this.ios[e],delete this.stores[e],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:n.default.API_SETUP})}onRequestAPI(){const t=c.default,e=Object.keys(t),s=e.length,r=(t,e)=>(s,r=(()=>{}))=>{const i=this.stores[this.id].getState(),o=n.default.getRequestState(t,i,s),a=n.default.getRequestActionState(t,s),{requestState:c,actionState:u}=e(i,o,a);return this.publicCallbacks[c.type]=r,this.ios[this.id].emit(c.type,c),this.stores[this.id].dispatch(u)};for(let i=0;i<s;i++){const s=e[i],o=s.replace(n.default.API_TO_SERVER_REQUEST,""),a=t[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const t=(t=>e=>{const s=t(e);this.stores[this.id].dispatch(s)})(d.default);this.on(n.default.CATCH_ME_KEY,t)}on(t,e=(()=>{})){this.ios[this.id]._callbacks[`$${t}`]||this.ios[this.id].on(t,e)}off(t){this.ios[this.id]._callbacks[`$${t}`]&&this.ios[this.id].off(t)}subscribe(t){const e=this.stores[this.id].getState(),s=n.default.convertServerToApiIoType(this.id,e.app.actioned);this.exeCallback(e.app.actioned,e),this.webWorker.postMessage(e.app.actioned,{...e,ioType:s})}exeCallback(t,e){const{actionType:s,actionName:r}=n.default.getSequenceActionMap(t);if(r!==n.default.API_BROADCAST_CALLBACK&&s===n.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[r](e,{posts:t,thread:s,uid:i.uid})}if(s===n.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[n.default.API_BROADCAST_CALLBACK]){const{posts:t,thread:s,user:i}=e;this.publicCallbacks[n.default.API_BROADCAST_CALLBACK](r,{posts:t,thread:s,uid:i.uid})}}}e.default=p},3642:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771)),n=new(r(s(3365)).default);let o={};Object.keys(i.default.map).forEach((t=>{const e=`${i.default.API_TO_SERVER_REQUEST}${t}`;o[e]=(t,e,s)=>a[e.type]?a[e.type](t,e,s):{requestState:e,actionState:s}}));const a={post:(t,e,s)=>{const{app:r}=e;return r.isMediaCh&&(r.currentTime?e.app.inputCurrentTime=window.talknMedia.currentTime:e.app.inputCurrentTime=0),e.thread.emotions={},r.inputStampId?Object.keys(n.balances).forEach((s=>{if(n.balances[s]&&t.thread.emotions[s]){const t=n.balances[s](r.inputStampId);t&&t.forEach((t=>{const r=Object.keys(t)[0],i=n.idKeyTypes[r];e.thread.emotions[s]||(e.thread.emotions[s]={}),e.thread.emotions[s][i]||(e.thread.emotions[s][i]=0),e.thread.emotions[s][i]=t[r]}))}})):(s.app={...r},s.app.inputStampId=0,e.app.inputStampId=0),{requestState:e,actionState:s}}};e.default=o},89:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_BROADCAST}${t.type}`;return{...t,type:e}}},249:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(7771));e.default=t=>{const e=`${i.default.SERVER_TO_API_EMIT}${t.type}`;return{...t,type:e}}},9274:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(665),n=r(s(8267)),o=r(s(9530));e.default=function(t={}){let e=[n.default.updateAction];return(0,i.createStore)(o.default,t,(0,i.applyMiddleware)(...e))}},5406:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1665)),n=r(s(4817));function o(t,e){const{app:s}=t,{storageKey:r}=i.default;if(s.isRootCh){const{postsMulti:e,postsSingle:s}=t}return{state:t,props:e}}function a(t){const{app:e,thread:s,postsTimeline:r}=t,{storageKey:n}=i.default;if(e.isMediaCh){const e=r&&r.length?r.length:0;let s=[],i=[];for(let t=0;t<e;t++)0===r[t].currentTime?s.push(r[t]):i.push(r[t]);t.postsTimeline=s}return t}e.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>({state:t,props:e}),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>{const{app:s}=t,{rootCh:r}=s,{storageKey:o}=i.default;return s.dispThreadType===n.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:t,props:e}},ON_CLICK_MENU:(t,e)=>{const{rootCh:s}=t.app;return{state:t,props:e}},RESIZE_END_WINDOW:(t,e)=>({state:t,props:e}),setStoragePosts:function(t,e){const{app:s}=t;return s.isMediaCh?{state:t=a(t),props:e}:o(t,e)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},8267:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(5406)),o=r(s(4817)),a=r(s(5232)),c=r(s(5537)),u=r(s(5300));e.default={updateAction:t=>e=>s=>{const r=t.getState();s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&e(s)}};const d={"SERVER_TO_API[EMIT]:tune":(t,e)=>{if(e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.tuned=e.thread.ch,e.app.detailCh=e.thread.ch,e.app.isRootCh=e.app.rootCh===e.thread.ch,e.app.isMediaCh=o.default.getIsMediaCh(e.thread.ch),e.app.isToggleMultistream=!1,e.thread.title=e.thread.serverMetas.title,e.thread.hasSlash=i.default.getBool(e.thread.hasSlash),e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.app.isRootCh&&(e.app.rootTitle=e.thread.title),e.app.isMediaCh){const t=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);e.app.chType=o.default.getMediaTypeFromSrc(t)}else e.app.chType=o.default.mediaTagTypeNo;return e},"SERVER_TO_API[EMIT]:fetchPosts":(t,e)=>((e={...a.default.getAnyActionPosts(e,t)}).app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,e.app.isMediaCh&&(e=n.default.setStoragePostsTimeline(e)),e),"API_TO_SERVER[REQUEST]:changeThread":(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetTimelineFindId=o.default.defaultOffsetFindId,e.app.offsetMultiFindId=o.default.defaultOffsetFindId,e.app.offsetSingleFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e.app.offsetLogsFindId=o.default.defaultOffsetFindId,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e.posts=new a.default,e.postsMulti=new a.default,e.postsChild=new a.default,e.postsTimeline=new a.default,e.postsSingle=new a.default,e),"SERVER_TO_API[EMIT]:changeThread":(t,e)=>(e.app.tuned=e.thread.ch,e.thread.title=e.thread.serverMetas.title,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThread":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(t,e)=>(e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e),"SERVER_TO_API[REQUEST]:post":(t,e)=>(e.app.inputStampId=0,e),"SERVER_TO_API[BROADCAST]:post":(t,e)=>{if(t.thread.ch===e.thread.ch&&e.thread.emotions&&Object.keys(e.thread.emotions).length>0){const s={...e.thread.emotions};e.thread.emotions={...t.thread.emotions},Object.keys(s).forEach((t=>{Object.keys(s[t]).forEach((r=>{e.thread.emotions[t][r]=e.thread.emotions[t][r]+s[t][r]}))})),e.threadDetail={...e.thread}}return e.thread.ch=t.thread.ch,e=a.default.getAnyActionPosts(e,t)},"SERVER_TO_API[EMIT]:getMore":(t,e)=>(e.app.offsetFindId=o.default.getOffsetFindId({posts:e.posts}),e.app[`offset${e.app.dispThreadType}FindId`]=e.app.offsetFindId,a.default.getAnyActionPosts(e,t)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(t,e)=>(delete e.thread,e),"SERVER_TO_API[EMIT]:changeThreadDetail":(t,e)=>(e.app.detailCh=e.thread.ch,e.threads=u.default.getMergedThreads(t.threads,e.thread),e.threadDetail={...e.thread},e.threadDetail.title=e.thread.serverMetas.title,e.threadDetail.emotions={...t.threads[e.app.detailCh].emotions},e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),delete e.thread,e.thread=e,e),CLOSE_LINKS:(t,e)=>(e.app=e.app?{...t.app,...e.app}:t.app,e.thread=e.thread?{...t.thread,...e.thread}:t.thread,e),ON_CLICK_TO_MULTI_THREAD:(t,e)=>(e.app.isLinkCh=!1,e.app.isRootCh=e.thread.ch===t.app.rootCh,t.threads[e.thread.ch]?e.thread=t.threads[e.thread.ch]:e.thread={...t.thread,...e.thread},e),ON_CLICK_TO_TIMELINE_THREAD:(t,e)=>{const s=e.thread.ch;e.thread={...t.thread,...e.thread},e.thread.ch=s;const r=o.default.getMediaSrc(e.thread.protocol,e.thread.ch);return e.thread.findType=c.default.getFindTypeFromSrc(r),e.postsTimeline=[],e.app.isMediaCh=!0,e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e},ON_CLICK_TO_SINGLE_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.app=t.app,e.app.isLinkCh=!1,e),ON_CLICK_TO_CHILD_THREAD:(t,e)=>(e.thread={...t.thread,...e.thread},e.postsChild=[],e.app.offsetFindId=o.default.defaultOffsetFindId,e.app.offsetChildFindId=o.default.defaultOffsetFindId,e),ON_CLICK_MENU:(t,e)=>(e.app.desc=e.ui.menuComponent,e),RESIZE_END_WINDOW:(t,e)=>(e.thread=t.thread,e),ON_CLICK_TOGGLE_DISP_DETAIL:(t,e)=>(e.threadDetail.hasSlash=null===e.threadDetail.hasSlash||i.default.getBool(e.threadDetail.hasSlash),e),TOGGLE_BUBBLE_POST:(t,e)=>(e.thread=t.thread,e),START_LINK_MEDIA:(t,e)=>(e.app.isLinkCh=!0,e),GET_CLIENT_METAS:(t,e)=>{let s=!1,{clientMetas:r}=e,{serverMetas:i}=t.thread;if(e.thread={},Object.keys(r).forEach(((t,n)=>{r[t]&&""!==r[t]&&i[t]!==r[t]&&(e.thread.serverMetas||(e.thread.serverMetas={}),s=!0,e.thread.serverMetas[t]=r[t])})),s)return e.threadDetail={...t.threadDetail},e.threadDetail.serverMetas={...e.threadDetail.serverMetas,...e.thread.serverMetas},e}}},482:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t=[],e)=>[e.type,...t]},1583:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2802));e.default=(t=new i.default,e)=>e.analyze?t.merge(e.analyze):t},5221:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4817));e.default=(t=new i.default,e)=>e.app?new i.default(e.app):t},6690:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5813));e.default=(t=new i.default,e)=>e.bootOption?t.merge(e.bootOption):t},9530:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.reducerFiles=void 0;const i=s(665),n=r(s(482)),o=r(s(1583)),a=r(s(5221)),c=r(s(6690)),u=r(s(9202)),d=r(s(7738)),l=r(s(6686)),h=r(s(705)),p=r(s(6706)),f=r(s(4005)),T=r(s(358)),E=r(s(7706)),_=r(s(2543)),m=r(s(5181)),S=r(s(4980)),y=r(s(6086)),g=r(s(6297)),I=r(s(6087)),P=r(s(507));e.reducerFiles={app:a.default,user:P.default,tuneCh:I.default,ranks:_.default,thread:S.default,threads:g.default,threadDetail:y.default,analyze:o.default,bootOption:c.default,setting:m.default,posts:u.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,actioned:n.default},e.default=(0,i.combineReducers)(e.reducerFiles)},9202:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>e.posts?new i.default(e.posts):t},7738:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsChild&&e.postsChild.length>0&&e.thread.ch===e.postsChild[0].ch)return[...t,...e.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsChild&&e.postsChild.length>0)return[...e.postsChild,...t]}return t}},6686:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(300)),n=r(s(5232));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(e.postsMulti&&e.postsMulti.length>0&&e.app.isRootCh)return[...e.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsMulti&&e.postsMulti.length>0&&e.app.rootCh===e.postsMulti[0].ch)return[...t,...e.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsMulti&&e.postsMulti.length>0){let s=[];return t.length+e.postsMulti.length>i.default.findOneLimitCnt?(s=[...e.postsMulti,...t],s.slice(0,i.default.findOneLimitCnt)):[...e.postsMulti,...t]}}return t}},705:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5853));e.default=(t=[],e)=>{switch(e.type){case"ON_CLICK_MULTISTREAM":return e.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(e.postsSingle&&e.postsSingle.length>0)return[...t,...e.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsSingle&&e.postsSingle.length>0)return[...e.postsSingle,...t]}return t}},6706:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6423));e.default=(t=[],e)=>{switch(e.type){case"API_TO_SERVER[REQUEST]:changeThread":return new i.default;case"UNMOUNT_POSTS_TIMELINE":return t.map((t=>(t.dispFlg=t.currentTime<=e.mediaCurrentTime,t)));case"CLEAR_POSTS_TIMELINE":return[...e.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...t,...e.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(e.postsTimeline&&e.postsTimeline.length>0&&e.postsTimeline[0].uid===e.user.uid&&e.postsTimeline[0].ch===e.thread.ch)return[...t,...e.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(e.postsTimeline&&e.postsTimeline.length>0)return[...e.postsTimeline,...t]}return t}},4005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3443));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineStock?[...t,e.postsTimelineStock]:t;default:return e.postsTimelineStock?new i.default(e.postsTimelineStock):t}}},358:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8059));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZero?[...t,e.postsTimelineZero]:t;default:return e.postsTimelineZero?new i.default(e.postsTimelineZero):t}}},7706:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6301));e.default=(t=[],e)=>{switch(e.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return e.postsTimelineZeroAfter?[...t,e.postsTimelineZeroAfter]:t;default:return e.postsTimelineZeroAfter?new i.default(e.postsTimelineZeroAfter):t}}},2543:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5232));e.default=(t=[],e)=>{let s=[],r=0;const n=(t,s)=>t.ch===e.app.rootCh||s.ch===e.app.rootCh?0:t.liveCnt<s.liveCnt?1:t.liveCnt>s.liveCnt?-1:0;switch(e.type){case"SERVER_TO_API[EMIT]:fetchPosts":return e.app.isLinkCh?t:(s=i.default.getDispPosts(e),r=s&&s.length?s.length:0,0===r?t:t.map((t=>e.thread.ch===t.ch?{...t,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:t)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return t.map((t=>e.thread.ch===t.ch?{...t,liveCnt:e.thread.liveCnt}:t)).sort(n);case"SERVER_TO_API[BROADCAST]:post":return t.map((t=>e.posts[0].ch===t.ch?{...t,title:e.posts[0].title,stampId:e.posts[0].stampId,favicon:e.posts[0].favicon,post:e.posts[0].post}:t));case"SERVER_TO_API[EMIT]:rank":if(t&&t.length>0&&e.rank&&e.rank.length>0){const s=[],r=e.rank.length;let i=e.rank[0];for(let n=0;n<r;n++){let r=e.rank[n];i=r.updateTime>i.updateTime?r:i,r.ch===t[0].ch&&(r={...r,liveCnt:t[0].liveCnt}),s.push(r)}return s.sort(n),s[0].faicon=i.favicon,s[0].post=i.post,s[0].stampId=i.stampId,s}return e.rank?e.rank:t;default:return e.rank?e.rank:t}}},5181:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3871));e.default=(t=new i.default,e)=>e.setting?t.merge(e.setting):t},4980:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5537));e.default=(t=new i.default({},{}),e)=>{switch(e.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new i.default(e.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t;case"SERVER_TO_API[BROADCAST]:post":if(t.ch===e.thread.ch)return e.thread?t.merge(e.thread):t}return t}},6086:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5537));e.default=(t=new i.default({},{}),e)=>e.threadDetail?t.merge(e.threadDetail):t},6297:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(5300));e.default=(t=new i.default,e)=>e.threads?t.merge(e.threads):t},6087:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1960));e.default=(t=new i.default,e)=>{switch(e.type){case"SERVER_TO_API[EMIT]:tune":return new i.default(e.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=e;if(s.ch===t.ch)return{...t,liveCnt:s.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const r=e.posts[0];if(r.ch===t.ch)return{...t,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post}}return t}},507:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6548));e.default=(t=new i.default,e)=>e.user?t.merge(e.user):t},3560:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){return[]}}},2802:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({liveCnt:0})}}e.default=n},4817:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(1960)),o=r(s(5537));class a extends i.default{constructor(t={},e=""){super(),this.offsetTimelineFindId=n.default.defaultFindId,this.offsetSingleFindId=n.default.defaultFindId,this.offsetMultiFindId=n.default.defaultFindId,this.offsetChildFindId=n.default.defaultFindId,this.offsetLogsFindId=n.default.defaultFindId;const s=t.ch?t.ch:"/",r=t.id?t.id:"",c=i.default.isSet(t.isMediaCh)?t.isMediaCh:a.getIsMediaCh(s),u=!!i.default.isSet(t.isLinkCh)&&t.isLinkCh,d=t.rootCh?t.rootCh:s,l=i.default.isSet(t.isRootCh)?t.isRootCh:d===s,h=t.rootTitle?t.rootTitle:"talkn",p=a.getMediaSrc(t.protocol,s),f=a.getMediaType(p,t),T=t&&t.tuned?t.tuned:"",E=a.getDispThreadType(t,c),_=!i.default.isSet(t.multistream)||t.multistream,m=t&&t.findType?t.findType:o.default.findTypeAll,S=t&&t.offsetFindId?t.offsetFindId:a.defaultOffsetFindId,y=t&&t.offsetTimelineFindId?t.offsetTimelineFindId:a.defaultOffsetFindId,g=t&&t.offsetSingleFindId?t.offsetSingleFindId:a.defaultOffsetFindId,I=t&&t.offsetMultiFindId?t.offsetMultiFindId:a.defaultOffsetFindId,P=t&&t.offsetChildFindId?t.offsetChildFindId:a.defaultOffsetFindId,A=t&&t.offsetLogsFindId?t.offsetLogsFindId:a.defaultOffsetFindId,O=t.inputPost?t.inputPost:"",C=!!t.inputStampId&&t.inputStampId,R=t.inputCurrentTime?t.inputCurrentTime:0,b=t.inputSearch?t.inputSearch:"",v=!!i.default.isSet(t.isToggleMultistream)&&t.isToggleMultistream,D=t&&t.actioned?t.actioned:"",M=i.default.isSet(t.debug)?t.debug:"";return this.create({id:r,isRootCh:l,isLinkCh:u,isMediaCh:c,rootCh:d,rootTitle:h,chType:f,dispThreadType:E,tuned:T,multistream:_,findType:m,offsetFindId:S,offsetTimelineFindId:y,offsetSingleFindId:g,offsetMultiFindId:I,offsetChildFindId:P,offsetLogsFindId:A,inputPost:O,inputStampId:C,inputCurrentTime:R,inputSearch:b,isToggleMultistream:v,actioned:D,debug:M})}static get defaultOffsetFindId(){return n.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(t,e){return e&&e.chType?e.chType:a.getMediaTypeFromSrc(t)}static getMediaTypeFromSrc(t){const e=Object.keys(a.mediaChTagTypes),s=e.length;let r="html";for(let i=0;i<s;i++){const s=new RegExp(`.${e[i]}$`);if(t.match(s)){r=a.mediaChTagTypes[e[i]];break}}return r}static validInputPost(t){return!!/\\r\\n$|\\n$|\\r$/gim.test(t)&&"LAST TYPE BREAK LINE."}static validPost(t){return""===t?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(t)?"ONLY NEW LINE":/^\\s+$/g.test(t)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(t)&&"EMPTY POST"}static getWidth(t){return"object"==typeof window&&window.innerWidth?window.innerWidth:t.width?"string"==typeof t.width&&t.width.indexOf("px")>=0?Number(t.width.replace("px","")):t.width:0}static getHeight(t={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(t){return a.isAudioContentType(t)||a.isVideoContentType(t)}static isAudioContentType(t){return t.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(t){return t.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(t,e){return t+"/"+e.replace(/\\/$/,"")}static getIsMediaCh(t){return a.mediaChs.some((e=>{const s=new RegExp(`.${e}/$|.${e}$`);return t.match(s)}))}static getDispThreadType(t,e){return t&&t.dispThreadType?t.dispThreadType:e?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getStepToDispThreadType({app:t,ranks:e},s,r,i=""){let n="";const o=t&&t.dispThreadType?t.dispThreadType:a.dispThreadTypeMulti;return n=(t=a.getStepDispThreadType({app:t,ranks:e},s,r,i)).dispThreadType,{app:t,stepTo:`${o} to ${n}`}}static getStepDispThreadType({app:t,ranks:e},s={},r,i){const n=t||{};if(n.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return n.dispThreadType=a.dispThreadTypeTimeline,n.offsetFindId=n.offsetTimelineFindId?n.offsetTimelineFindId:a.defaultOffsetFindId,n.isLinkCh="Links"===i||"findMediaCh"===i||"ToMedia"===i,n.isMediaCh=!0,n;if("BackToRootCh"===i&&(n.isLinkCh=!1),"Links"===i&&e.length>0){if(!e.some((t=>t.ch===r||t.ch===r+"/")))return n.offsetFindId=a.defaultOffsetFindId,n.dispThreadType=a.dispThreadTypeChild,n.isLinkCh=!0,n}return n.rootCh===r?n.multistream?n.dispThreadType=a.dispThreadTypeMulti:n.dispThreadType=a.dispThreadTypeSingle:n.dispThreadType=a.dispThreadTypeChild,n}}e.default=a},5813:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create({...t})}static rebuildAttributes(t){let e={};return Object.keys(t).forEach((s=>{e[t[s].name]=t[s].value})),e}}e.default=n},367:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t=[]){return super(),t=t||[],this.create(t)}}e.default=n},1960:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(300));class o extends i.default{constructor(t){super(),this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const e=t?{...o.defaultValues,...t}:o.defaultValues;return this.create(e)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:n.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}e.default=o},6036:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},5232:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(4817)),n=r(s(6036)),o=r(s(5853)),a=r(s(6423)),c=r(s(3443));class u{constructor(t=[]){return t}static getDispPosts(t){const{app:e,postsTimeline:s,postsMulti:r,postsSingle:n,postsChild:o,postsLogs:a}=t;switch(e.dispThreadType){case i.default.dispThreadTypeTimeline:return s;case i.default.dispThreadTypeMulti:return r;case i.default.dispThreadTypeSingle:return n;case i.default.dispThreadTypeChild:return o;case i.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(t,e){const{app:s,posts:r}=t,a=r&&r.length>0;switch(t.postsMulti=new n.default,t.postsSingle=new o.default,t.postsChild=[],t.postsLogs=[],s.dispThreadType){case i.default.dispThreadTypeTimeline:t=u.getAnyActionPostsTimeline(t,r,e,a);break;case i.default.dispThreadTypeMulti:t.postsMulti=a?r:[];break;case i.default.dispThreadTypeSingle:t.postsSingle=a?r:[];break;case i.default.dispThreadTypeChild:t.postsChild=a?r:[];break;case i.default.dispThreadTypeLogs:t.postsLogs=a?r:[]}return t}static getAnyActionPostsTimeline(t,e,s,r){if("SERVER_TO_API[BROADCAST]:post"===t.type)t.postsTimeline=new a.default,t.postsTimeline.push(t.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===t.type&&(t.postsTimeline=new a.default,t.postsTimelineStock=new c.default,r)){const s=e.length;for(let r=0;r<s;r++)0===e[r].currentTime?t.postsTimeline.push(e[r]):t.postsTimelineStock.push(e[r])}return t}}e.default=u},5853:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6423:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3443:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},8059:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},6301:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3364:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t=[]){return t}}},3871:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){super();const e=t&&t.client?t.client:{},s=t&&t.common?t.common:{},r=t&&t.server?t.server:{};return this.create({client:e,common:s,server:r})}}e.default=n},5537:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(7771)),o=r(s(300)),a=r(s(4817));class c extends i.default{constructor(t={},e){super(),this.chs=["/"],this.protocol=n.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=c.getDefaultFavicon(),this.findType=c.findTypeAll,this.title=c.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=c.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=c.isWindowObj(t)?c.constructorFromWindow(t,e):t;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[c.findTypeHtml]:["text/html"],[c.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[c.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return"user.png"}static isWindowObj(t){return!!t.alert}static constructorFromWindow(t,e){const s=!!e.ch&&e.ch,r=c.getCh(e,s);let n={};return n.ch=r,n.chs=["/"],n.hasSlash=!!e.hasslash&&i.default.getBool(e.hasslash),n.protocol="talkn:",n.contentType="",n.charset="UTF-8",n.host="",n.favicon=c.getDefaultFavicon(),n.findType=c.findTypeAll,s?(n.protocol=c.getProtocol(s),n.host=c.getHost(s),n.chs=s.chs&&s.chs.length>0?s.chs:c.getChs(r)):(n.protocol=location.protocol?location.protocol:"????:",n.chs=t.chs&&t.chs.length>0?t.chs:c.getChs(r),n.contentType=document.contentType?document.contentType:"",n.charset=document.charset?document.charset:"",n.host=location.host?location.host:"",n.favicon=c.getFaviconFromWindow(window)),n.title=c.getDefaultTitle(),n.metas=[],n.serverMetas={},n.clientMetas={},n.emotions={},n.links=[],n.h1s=[],n.audios=[],n.videos=[],n.layer=c.getLayer(n.ch),n.mediaIndex=[],n.postCnt=0,n.multiPostCnt=0,n.isSelfCh=c.getIsSelfCh("",n.ch),n.createTime="",n.updateTime="",n}static getCh(t,e){return t&&t.ch&&""!==t.ch?t.ch:"/"}static getChTop(t){return""!==t?"/"+t.split("/")[1]:""}static getChs(t){let e=["/"];if(""!==t){const r="/"===t.slice(-1)?t:t+"/";if("/"!==r){const t=r.split("/"),i=t.length;let n="";for(var s=1;s<i;s++)""!==t[s]&&(n+=t[s],n="/"===n.slice(-1)?n:n+"/",n="/"===n.slice(0,1)?n:"/"+n,e.push(n))}}return e}static getHost(t){return t.indexOf(".")>=0?(t=t.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):o.default.domain}static getProtocol(t){return t.indexOf("http:")>=0?"http:":t.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(t,e){return t.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===e}static getLayer(t="/"){return t.split("/").length-1}static getMediaSrc(t){return a.default.getMediaSrc(t.protocol,t.ch)}static getMediaTagType(t){const e=c.getMediaSrc(t);return a.default.getMediaType(e,null)}static getFaviconFromWindow(t){if(t&&t.document){const e=t.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",t.document,null,2,null).stringValue,s="http://",r="https://",i=location.host;if(e.indexOf(s)||e.indexOf(r)){const t=s+i+(e||"/favicon.ico");return 1==t.split("//").length-1?t:e}return e}return""}static getStatus(t,e,s,r={}){let i={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return i.isCreate=c.getStatusCreate(s),i.isRequireUpsert=c.getStatusIsRequireUpsert(t,r,i.isCreate),i.isMultistream=c.getStatusIsMultistream(e),i.isToggleMultistream=c.getStatusIsToggleMultistream(e),i.isMediaCh=c.getStatusIsMediaCh(t.ch),i}static getStatusCreate(t){return!t}static getStatusIsRequireUpsert(t,e,s=!1){if(!s)return!0;if(t.updateTime){const e=t.updateTime.getTime?t.updateTime.getTime():t.updateTime,s=new Date,r=s.getFullYear(),i=s.getMonth(),n=s.getDate(),a=s.getHours();return s.getMinutes(),e<new Date(r,i,n,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(t){return void 0===t||void 0===t.dispThreadType||t.dispThreadType===a.default.dispThreadTypeMulti&&t.multistream}static getStatusIsMediaCh(t){return a.default.getIsMediaCh(t)}static getStatusIsToggleMultistream(t){return void 0!==t&&void 0!==t.actioned&&t.isToggleMultistream}static getContentTypeFromFindType(t){const e=c.findTypes[c.findTypeHtml],s=c.findTypes[c.findTypeMusic],r=c.findTypes[c.findTypeVideo];let i;if(t&&""!==t){let n="";t.indexOf(";")>0&&(n=t.split(";")[0]),(e.includes(t)||e.includes(n))&&(i=c.findTypeHtml),(s.includes(t)||s.includes(n))&&(i=c.findTypeMusic),(r.includes(t)||r.includes(n))&&(i=c.findTypeVideo)}return i}static getFindTypeFromSrc(t){const e=a.default.getMediaTypeFromSrc(t);return e.charAt(0).toUpperCase()+e.slice(1)}}e.default=c},5300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n extends i.default{constructor(t={}){return super(),this.create(t)}static getMergedThreads(t,e){return t[e.ch]={...e},t}}e.default=n},6548:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216)),n=r(s(1960));class o extends i.default{static get defaultOffsetFindId(){return n.default.defaultFindId}constructor(t={}){super();const e=t&&t.uid?t.uid:"",s=t&&t.utype?t.utype:"",r=t&&t.tuned?t.tuned:"",i=!(!t||!t.multistreamed)&&t.multistreamed,n=t&&t.actioned?t.actioned:"",a=t&&t.offsetFindId?t.offsetFindId:o.defaultOffsetFindId,c=t&&t.offsetSingleFindId?t.offsetSingleFindId:o.defaultOffsetFindId,u=t&&t.offsetMultiFindId?t.offsetMultiFindId:o.defaultOffsetFindId,d=t&&t.offsetChildFindId?t.offsetChildFindId:o.defaultOffsetFindId,l=t&&t.offsetLogsFindId?t.offsetLogsFindId:o.defaultOffsetFindId;return t.requestLoginType&&t.requestLoginType,this.create({uid:e,utype:s,tuned:r,multistreamed:i,actioned:n,offsetFindId:a,offsetSingleFindId:c,offsetMultiFindId:u,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:t}){return t&&t[0]&&t[0]._id?t[0]._id:n.default.defaultFindId}static getHref(t={}){return"undefined"!=typeof window&&window.location&&window.location.href,t&&t.href?t.href:"/"}}e.default=o},2230:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3560)),n=r(s(2802)),o=r(s(4817)),a=r(s(367)),c=r(s(5232)),u=r(s(6423)),d=r(s(3443)),l=r(s(3364)),h=r(s(5537)),p=r(s(6548));class f{constructor(t,e={}){this.bootOption=t,this.ranks=new l.default,this.menuLogs=new a.default(e.menuLogs),this.posts=new c.default,this.postsMulti=new c.default,this.postsSingle=new c.default,this.postsChild=new c.default,this.postsTimeline=new u.default,this.postsTimelineStock=new d.default,this.postsLogs=new c.default,this.analyze=new n.default,this.thread=new h.default(this.bootOption,e.thread),this.threadDetail=new h.default(this.bootOption,e.thread),this.app=new o.default(f.getAppParams(this.thread,this.bootOption,e)),this.user=new p.default(f.getUserParams(this,e)),this.actionLog=new i.default}static getAppParams(t,e,s){return{isTransition:!0,rootTitle:t.title,...e,...t}}static getUserParams(t,e){return e&&e.user&&e.user.uid?{...e.user}:{dispThreadType:t.thread.ch===t.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}e.default=f},4039:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1223)),n=r(s(7771)),o=r(s(5741));class a{constructor(t){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=t,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(t,e={},s){const r={id:this.id,type:i.default.WSAPI_TO_CLIENT_TYPE,ioType:n.default.API_SETUP,method:t,params:e,methodBack:s};this.worker.postMessage(r)}onMessage(t){const{id:e,type:s,ioType:r,method:n,params:o}=t.data;s===i.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(n,o)}onMessageError(t){console.warn(t)}}e.default=a,new a(self)},1223:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.HandleRequestMethod=e.HandleMessageMethod=void 0;const i=r(s(7771));e.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(t){return 0===t.indexOf(i.default.API_TO_SERVER_REQUEST)?t.replace(i.default.API_TO_SERVER_REQUEST,i.default.API_TO_CLIENT_REQUEST):0===t.indexOf(i.default.SERVER_TO_API_EMIT)?t.replace(i.default.SERVER_TO_API_EMIT,i.default.API_TO_CLIENT_EMIT):0===t.indexOf(i.default.SERVER_TO_API_BROADCAST)?t.replace(i.default.SERVER_TO_API_BROADCAST,i.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${t}`}static getMessageTypes(t){const e=t.split(":");return{ioType:e[0].split("[")[1].replace("]",""),exeMethod:e[1]}}static convertExtToClientActionType(t){return`EXT_TO_CLIENT[ACTION]:${t}`}},e.HandleMessageMethod="handle",e.HandleRequestMethod="handle"},1216:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t={}){}static getType(t){return null===t?"Null":void 0===t?"Undefined":t.constructor.name}static isSet(t){return"Undefined"!==s.getType(t)&&"Null"!==s.getType(t)}static getBool(t){return"boolean"==typeof t?t:"true"===t}static isAnonymousFunc(t){const e=t.toString();return"function(){}"===e||"function() {}"===e||"function (){}"===e||"function () {}"===e||"()=>{}"===e}create(t){const e=this.constructor.name;return s.getType(t),Object.keys(t).forEach((r=>{let i,n,o=null,a=!1,c=!1,u=()=>{},d=null;if("Object"===s.getType(t[r])){i=t[r];let e=0===Object.keys(i).length;a=i.isAcceptNull?i.isAcceptNull:a,c=i.isAcceptBlank?i.isAcceptBlank:c,o=!e&&i.def?i.def:o,d=e||!i.value&&""!==i.value?i:i.value,d=e&&o?o:d,n=s.getType(d),u=i.valid?i.valid:u}else d=t[r],o=d,a=a,c=c,n=s.getType(d),u=u;const l=t=>{let i=null;const o=`${e}.${r}`,l=d,h=n,p=t,f=s.getType(t);return f!==n&&(i=`SCHEMA_TYPE : ${o} [validType: ${n}][paramsType: ${f}]`),a&&null===t&&(i=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),c&&""===t&&(i=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(u)&&u(t)&&(i=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:i}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:t=>{const e=l(d);if(null===_)return d=t,{...this,[r]:d};throw this.validWarn(e),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(t,e){try{const s=this[t];if(void 0===s)return!0;if(null===s)return!0;if(void 0===e)return!0;if(null===e)return!0;const{error:r}=this[t]=e;return!r&&(this[t]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+t),console.warn("BEFOER VALUE"),console.warn(typeof this[t]),console.warn(this[t]),console.warn("AFTER VALUE"),console.warn(typeof e),console.warn(e),`BAD CAN SET: ${s}`}}merge(t={},e=!0){try{const r=s.getType(t),i=Object.keys(t);if(i.length>0){let s={...this};return i.forEach((e=>{this[e]!==t[e]&&(this.canSet(e,t[e])?s[e]=t[e]:console.warn("BAD MERGE A : "+e+" "+t[e]+" "+typeof t[e]))})),"Array"===r?(s=Object.values(s),e?new this.constructor(s):s):e?new this.constructor(s):s}return new this.constructor}catch(e){if(this.errorThrow)throw console.warn(t),console.warn(e),`BAD MERGE B : ${s.getType(t)} ${e}`;return console.warn(t),console.warn(e),console.warn(`BAD MERGE C : ${s.getType(t)} ${e}`),t}}toJSON(t=this){let e={};return Object.keys(t).forEach((s=>{let r=t[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?e[s]=r.default:e[s]=r})),e}forEach(t){return Object.values(this).forEach(t)}concat(t){return this.returnImmutable(Object.values(this).concat(t),t)}map(t){return this.returnImmutable(Object.values(this).map(t),t)}filter(t){return this.returnImmutable(Object.values(this).filter(t),t)}reduce(t){return this.returnImmutable(Object.values(this).reduce(t),t)}find(t){return Object.values(this).find(t)}sort(t){return Object.values(this).sort(t)}push(t){const e=Object.values(this);return e.push(t),this.returnImmutable(e)}unshift(t){const e=Object.values(this);return e.unshift(t),this.returnImmutable(e)}getShift(){const t=Object.values(this).shift();return this.returnImmutable(t)}pop(t){const e=Object.values(this);return e.pop(t),this.returnImmutable(e)}returnImmutable(t,e=(()=>{})){return void 0===t?new this.constructor:0===t.length&&0===Object.keys(this).length?String(e).indexOf("createElement")>0?[]:new this.constructor(t):t[0]&&t[0].$$typeof&&"Symbol"===t[0].$$typeof.constructor.name?t:new this.constructor(t)}validWarn(t){console.warn("##########################"),console.warn("#"+t.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(t.validType),console.warn("### initializedValidValue"),console.warn(t.validValue),console.warn("### paramsType"),console.warn(t.paramsType),console.warn("### paramsValue"),console.warn(t.paramsValue),console.warn("##########################")}}e.default=s},7771:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1216));class n{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${n.API_REQUEST_TYPE}]${n.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_EMIT}]${n.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${n.API_RESPONSE_TYPE_BROADCAST}]${n.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(t){const e=t.split(n.METHOD_COLON),s=e[0].split("[")[0];let r;return r=e[0].indexOf(`[${n.API_REQUEST_TYPE}]`)>0?n.API_REQUEST_TYPE:e[0].indexOf(`[${n.API_RESPONSE_TYPE_EMIT}]`)>0?n.API_RESPONSE_TYPE_EMIT:n.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:e[1]}}static updateCallbackExeConditionMap(t){let e={emit:!0,broadcast:!0};return n.map[t]&&(e.emit=!(Object.keys(n.map[t].responseEmitState).length>0),e.broadcast=!(Object.keys(n.map[t].responseBroadcastState).length>0)),e}static convertServerToApiIoType(t,e){return e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_REQUEST_TYPE}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_REQUEST_TYPE:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_BROADCAST}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_BROADCAST:e.indexOf(`${n.API_SEPARATE_IO_TYPE_START}${n.API_RESPONSE_TYPE_EMIT}${n.API_SEPARATE_IO_TYPE_END}`)>=0?n.API_RESPONSE_TYPE_EMIT:n.API_SETUP}static convertExtToClientActionType(t,e){return n.convertApiToClientActionType(e)}static convertApiToClientActionType(t){return 0===t.indexOf(n.API_TO_SERVER_REQUEST)?t.replace(n.API_TO_SERVER_REQUEST,n.API_TO_CLIENT_REQUEST):0===t.indexOf(n.SERVER_TO_API_EMIT)?t.replace(n.SERVER_TO_API_EMIT,n.API_TO_CLIENT_EMIT):0===t.indexOf(n.SERVER_TO_API_BROADCAST)?t.replace(n.SERVER_TO_API_BROADCAST,n.API_TO_CLIENT_BROADCAST):t}static getRequestState(t,e,s){const r=t.replace(n.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=n.map[r];let c={[n.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((t=>{c[t]||(c[t]={}),a[t].forEach((r=>{if(!c[t][r]){let n=e[t][r];s&&s[t]&&i.default.isSet(s[t][r])&&(n=s[t][r]),c[t][r]=n}}))})),Object.keys(o).forEach((t=>{c[t]||(c[t]={}),o[t].forEach((e=>{c[t][e]||(c[t][e]=s)}))})),c}static getResponseState(t,e,s){const r=e.type,i=n.map[r][`response${t}State`];let o={[n.REDUX_ACTION_KEY]:r};return Object.keys(i).forEach((t=>{if(!s[t])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${e.type}: ${t}`;{const r=i[t];let n=s[t];switch(n.constructor.name){case"model":n=n.toJSON(),delete n._id,delete n.__v}"*"===r?o={...o,[t]:n}:r.forEach((r=>{if(void 0===s[t][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${e.type}: ${t}.${r}`;o={...o,[t]:{...o[t],[r]:s[t][r]}}}))}})),o}static getRequestActionState(t,e=null,s=null){return"string"==typeof e&&null===s?{type:t}:"object"==typeof e&&"object"==typeof s?{...e,...s,type:t}:"string"==typeof e&&"object"==typeof s?{...s,type:t}:{...e,type:t}}}e.default=n},300:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(6894)),n=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:c,PRODUCTION_DOMAIN:u,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=i.default.hasOwnProperty("hostname")?i.default.hostname():"localhost",f=function(t){if("browser"===n.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const t=Number(location.port);return t===o.default.PORTS.DEVELOPMENT_CLIENT||t===o.default.PORTS.DEVELOPMENT_API||t===o.default.PORTS.DEVELOPMENT_TOP?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return t.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js"},E=f===c,_=f===a?u:d,m=`${l.WWW}.${_}`,S=`${l.API}.${_}`,y=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${S}/v1`,g=E?`${_}:${h.DEVELOPMENT}/${T.client}`:`${l.CLIENT}.${_}`,I=`${l.DESC}.${_}`,P=`${l.PORTAL}.${_}`,A=`${l.ASSETS}.${_}`,O=`${A}/img/`,C={domain:_,env:f,files:T,hostName:p,apiURL:S,apiAccessURL:y,wwwURL:m,descURL:I,portalURL:P,clientURL:g,assetsURL:A,autoURL:`${l.AUTO}.${_}`,extURL:`${l.EXT}.${_}`,ownURL:`${l.OWN}.${_}`,newsURL:`${l.NEWS}.${_}`,bannerURL:`${l.BANNER}.${_}`,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:O,assetsIconPath:`${A}/icon/`,assetsJsPath:`${A}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${O}talkn_logo_html.png`,Music:`//${O}talkn_logo_music.png`,Video:`//${O}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};e.default={...C}},1665:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(8399)),n={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:i.default.env.HOSTNAME?i.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_CLIENT:8080,DEVELOPMENT_API:8001,DEVELOPMENT_TOP:8e3,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",EXT:"ext",TRANSACTION:"transaction"},APP_TYPES:{PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",TOP:"TOP"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};e.default=n},3365:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(1025));class n{constructor(t=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(n.inputs).forEach((t=>{n.inputs[t].forEach((e=>{this.belongCoverTypes[e]=t}))})),Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(t);const e=n.TYPES[t];this.idKeyTypes[e.ID]=e.LABEL})),this.model=i.default,this.balances={plain:i.default.Plain.getSaveBalance,russell:i.default.Russell.getSaveBalance,russellSimple:i.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(t=n.defaultModelKey,e=0,s=!0){let r=0,i={};switch(t){case"plain":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":i={6:5,10:5,20:5,30:5,50:5};break;case"russell":i={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(i),a=o.length-1;for(let t=0;t<a;t++){const s=o[t],n=i[s];if(s>e)break;r=n}return s?r+1:r}static get inputs(){return{[n.TYPES.LIKE.LABEL]:[1,2,3,4,5],[n.TYPES.MONEY.LABEL]:[100],[n.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[n.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[n.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[n.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[n.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[n.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[n.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[n.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}e.default=n},2703:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{static get TYPES(){return[i.default.TYPES.LIKE]}static getSaveBalance(t){const e={1:[{[i.default.TYPES.LIKE.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},6663:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.SUPRISE,i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.GLAD,i.default.TYPES.SATISFACTION,i.default.TYPES.COMFORT,i.default.TYPES.RELAX,i.default.TYPES.TIRED,i.default.TYPES.SLEEPY,i.default.TYPES.SLACK,i.default.TYPES.BORING,i.default.TYPES.MELANCHOLY,i.default.TYPES.SAD,i.default.TYPES.UNPLEASANT,i.default.TYPES.FRUSTRATED,i.default.TYPES.DISSATISFIED,i.default.TYPES.ANGER,i.default.TYPES.WORRY,i.default.TYPES.FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.SUPRISE.ID]:1}],1002:[{[i.default.TYPES.SUPRISE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.GLAD.ID]:1}],1402:[{[i.default.TYPES.GLAD.ID]:1}],1501:[{[i.default.TYPES.SATISFACTION.ID]:1}],1502:[{[i.default.TYPES.SATISFACTION.ID]:1}],1503:[{[i.default.TYPES.SATISFACTION.ID]:1}],1504:[{[i.default.TYPES.SATISFACTION.ID]:1}],1601:[{[i.default.TYPES.COMFORT.ID]:1}],1602:[{[i.default.TYPES.COMFORT.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.BORING.ID]:1}],2102:[{[i.default.TYPES.BORING.ID]:1}],2103:[{[i.default.TYPES.BORING.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.SAD.ID]:1}],2302:[{[i.default.TYPES.SAD.ID]:1}],2303:[{[i.default.TYPES.SAD.ID]:1}],2401:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[i.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[i.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[i.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY.ID]:1}],2802:[{[i.default.TYPES.WORRY.ID]:1}],2803:[{[i.default.TYPES.WORRY.ID]:1}],2804:[{[i.default.TYPES.WORRY.ID]:1}],2805:[{[i.default.TYPES.WORRY.ID]:1}],2806:[{[i.default.TYPES.WORRY.ID]:1}],2807:[{[i.default.TYPES.WORRY.ID]:1}],2901:[{[i.default.TYPES.FEAR.ID]:1}],2902:[{[i.default.TYPES.FEAR.ID]:1}],2903:[{[i.default.TYPES.FEAR.ID]:1}],2904:[{[i.default.TYPES.FEAR.ID]:1}],2905:[{[i.default.TYPES.FEAR.ID]:1}],2906:[{[i.default.TYPES.FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},3005:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(3365));class n{constructor(t){this.typesArray=[],Object.keys(n.TYPES).forEach((t=>{this.typesArray.push(n.TYPES[t].LABEL)}))}static get TYPES(){return[i.default.TYPES.EXCITE,i.default.TYPES.HAPPY,i.default.TYPES.JOY,i.default.TYPES.RELAX,i.default.TYPES.SLACK,i.default.TYPES.MELANCHOLY,i.default.TYPES.ANGER,i.default.TYPES.WORRY_FEAR]}static getSaveBalance(t){const e={1001:[{[i.default.TYPES.EXCITE.ID]:1}],1002:[{[i.default.TYPES.EXCITE.ID]:1}],1101:[{[i.default.TYPES.EXCITE.ID]:1}],1102:[{[i.default.TYPES.EXCITE.ID]:1}],1103:[{[i.default.TYPES.EXCITE.ID]:1}],1201:[{[i.default.TYPES.HAPPY.ID]:1}],1202:[{[i.default.TYPES.HAPPY.ID]:1}],1203:[{[i.default.TYPES.HAPPY.ID]:1}],1204:[{[i.default.TYPES.HAPPY.ID]:1}],1301:[{[i.default.TYPES.JOY.ID]:1}],1302:[{[i.default.TYPES.JOY.ID]:1}],1303:[{[i.default.TYPES.JOY.ID]:1}],1304:[{[i.default.TYPES.JOY.ID]:1}],1305:[{[i.default.TYPES.JOY.ID]:1}],1306:[{[i.default.TYPES.JOY.ID]:1}],1307:[{[i.default.TYPES.JOY.ID]:1}],1401:[{[i.default.TYPES.JOY.ID]:1}],1402:[{[i.default.TYPES.JOY.ID]:1}],1501:[{[i.default.TYPES.JOY.ID]:1}],1502:[{[i.default.TYPES.JOY.ID]:1}],1503:[{[i.default.TYPES.JOY.ID]:1}],1504:[{[i.default.TYPES.JOY.ID]:1}],1601:[{[i.default.TYPES.RELAX.ID]:1}],1602:[{[i.default.TYPES.RELAX.ID]:1}],1701:[{[i.default.TYPES.RELAX.ID]:1}],1702:[{[i.default.TYPES.RELAX.ID]:1}],1703:[{[i.default.TYPES.RELAX.ID]:1}],1801:[{[i.default.TYPES.TIRED.ID]:1}],1802:[{[i.default.TYPES.TIRED.ID]:1}],1803:[{[i.default.TYPES.TIRED.ID]:1}],2001:[{[i.default.TYPES.SLACK.ID]:1}],2002:[{[i.default.TYPES.SLACK.ID]:1}],2003:[{[i.default.TYPES.SLACK.ID]:1}],2004:[{[i.default.TYPES.SLACK.ID]:1}],2101:[{[i.default.TYPES.SLACK.ID]:1}],2102:[{[i.default.TYPES.SLACK.ID]:1}],2103:[{[i.default.TYPES.SLACK.ID]:1}],2201:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[i.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[i.default.TYPES.ANGER.ID]:1}],2602:[{[i.default.TYPES.ANGER.ID]:1}],2701:[{[i.default.TYPES.ANGER.ID]:1}],2702:[{[i.default.TYPES.ANGER.ID]:1}],2703:[{[i.default.TYPES.ANGER.ID]:1}],2704:[{[i.default.TYPES.ANGER.ID]:1}],2705:[{[i.default.TYPES.ANGER.ID]:1}],2706:[{[i.default.TYPES.ANGER.ID]:1}],2801:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[i.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[i.default.TYPES.WORRY_FEAR.ID]:1}]};return e[t]?e[t]:null}static getSchemas(){let t={};return n.TYPES.forEach(((e,s)=>{t[e.LABEL]={type:Number,default:0,min:0}})),t}}e.default=n},1025:function(t,e,s){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(s(2703)),n=r(s(6663)),o=r(s(3005));e.default={Plain:i.default,Russell:n.default,RussellSimple:o.default}},2989:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.io=e.Socket=e.Manager=e.protocol=void 0;const r=s(4078),i=s(6412),n=s(4510)("socket.io-client");t.exports=e=a;const o=e.managers={};function a(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const s=r.url(t,e.path||"/socket.io"),a=s.source,c=s.id,u=s.path,d=o[c]&&u in o[c].nsps;let l;return e.forceNew||e["force new connection"]||!1===e.multiplex||d?(n("ignoring socket cache for %s",a),l=new i.Manager(a,e)):(o[c]||(n("new io instance for %s",a),o[c]=new i.Manager(a,e)),l=o[c]),s.query&&!e.query&&(e.query=s.queryKey),l.socket(s.path,e)}e.io=a;var c=s(9565);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return c.protocol}}),e.connect=a;var u=s(6412);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return u.Manager}});var d=s(9088);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return d.Socket}}),e.default=a},6412:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const r=s(1072),i=s(9088),n=s(9565),o=s(3030),a=s(5198),c=s(6437),u=s(4510)("socket.io-client:manager");class d extends c.StrictEventEmitter{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new a({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const s=e.parser||n;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=o.on(e,"open",(function(){s.onopen(),t&&t()})),n=o.on(e,"error",(e=>{u("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;u("connect attempt will timeout after %d",t),0===t&&i();const s=setTimeout((()=>{u("connect attempt timed out after %d",t),i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(n),this}connect(t){return this.open(t)}onopen(){u("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(o.on(t,"ping",this.onping.bind(this)),o.on(t,"data",this.ondata.bind(this)),o.on(t,"error",this.onerror.bind(this)),o.on(t,"close",this.onclose.bind(this)),o.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){this.emitReserved("packet",t)}onerror(t){u("error",t),this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s||(s=new i.Socket(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void u("socket %s is still active, skipping close",t);this._close()}_packet(t){u("writing packet %j",t);const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){u("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const s=setTimeout((()=>{t.skipReconnect||(u("attempting reconnect"),this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(u("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):(u("reconnect success"),t.onreconnect())})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}e.Manager=d},3030:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,s){return t.on(e,s),function(){t.off(e,s)}}},9088:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const r=s(9565),i=s(3030),n=s(6437),o=s(4510)("socket.io-client:socket"),a=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends n.StrictEventEmitter{constructor(t,e,s){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[i.on(t,"open",this.onopen.bind(this)),i.on(t,"packet",this.onpacket.bind(this)),i.on(t,"error",this.onerror.bind(this)),i.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(a.hasOwnProperty(t))throw new Error(\'"\'+t+\'" is a reserved event name\');e.unshift(t);const s={type:r.PacketType.EVENT,data:e,options:{}};s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(o("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),s.id=this.ids++);const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||i&&this.connected?this.connected?this.packet(s):this.sendBuffer.push(s):o("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){o("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:r.PacketType.CONNECT,data:t})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t){o("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case r.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(t);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(t);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];o("emitting event %j",e),null!=t.id&&(o("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,o("sending ack %j",i),e.packet({type:r.PacketType.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(o("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):o("bad ack %s",t.id)}onconnect(t){o("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){o("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(o("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}e.Socket=c},6437:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StrictEventEmitter=void 0;const r=s(1778);e.StrictEventEmitter=class extends r{on(t,e){return super.on(t,e),this}once(t,e){return super.once(t,e),this}emit(t,...e){return super.emit(t,...e),this}emitReserved(t,...e){return super.emit(t,...e),this}listeners(t){return super.listeners(t)}}},4078:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const r=s(7657),i=s(4510)("socket.io-client:url");e.url=function(t,e="",s){let n=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\\/\\//.test(t)||(i("protocol-less url %s",t),t=void 0!==s?s.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port+e,n.href=n.protocol+"://"+o+(s&&s.port===n.port?"":":"+n.port),n}}},e={};function s(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r].call(n.exports,n,n.exports,s),n.exports}s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s(4039)})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTSyxNQUFNOEIsTUFBTTVCLE9BQVEsQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3pFLENBQUNQLEVBQVNLLE1BQU1nQyxXQUFXOUIsT0FBUSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUN4SCxDQUFDUCxFQUFTSyxNQUFNcUMsTUFBTW5DLE9BQVEsQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3pFLENBQUNQLEVBQVNLLE1BQU13QyxXQUFXdEMsT0FBUSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sT0FJcEcsaUJBQ0UsTUFBTyxDQUVMLEVBQUcsS0FDSCxFQUFHLEtBQ0gsRUFBRyxLQUNILEVBQUcsS0FDSCxFQUFHLEtBQ0gsR0FBSSxHQUNKLElBQUssS0FHTCxLQUFNLEtBQ04sS0FBTSxLQUdOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUdOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FHTixLQUFNLEtBQ04sS0FBTSxJQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBR04sS0FBTSxLQUNOLEtBQU0sS0FHTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBR04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBR04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBR04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBR04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FHTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FHTixLQUFNLEtBQ04sS0FBTSxLQUNOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FBTSxLQUdOLEtBQU0sS0FDTixLQUFNLEtBQ04sS0FB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QixJQUFLLElBQ2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVCLElBQUl0QixJQUFLLElBQ2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVCLElBQUl0QixJQUFLLElBQ2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVCLElBQUl0QixJQUFLLElBQ2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVCLElBQUl0QixJQUFLLElBR2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXdCLEtBQUt2QixJQUFLLElBQ25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXdCLEtBQUt2QixJQUFLLElBR25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXlCLGFBQWF4QixJQUFLLElBQzNDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXlCLGFBQWF4QixJQUFLLElBQzNDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXlCLGFBQWF4QixJQUFLLElBQzNDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXlCLGFBQWF4QixJQUFLLElBRzNDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTBCLFFBQVF6QixJQUFLLElBQ3RDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTBCLFFBQVF6QixJQUFLLElBR3RDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTJCLE1BQU0xQixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTJCLE1BQU0xQixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTJCLE1BQU0xQixJQUFLLElBR3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTRCLE1BQU0zQixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTRCLE1BQU0zQixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTTRCLE1BQU0zQixJQUFLLElBR3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTThCLE1BQU03QixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTThCLE1BQU03QixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTThCLE1BQU03QixJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTThCLE1BQU03QixJQUFLLElBR3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTStCLE9BQU85QixJQUFLLElBQ3JDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTStCLE9BQU85QixJQUFLLElBQ3JDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTStCLE9BQU85QixJQUFLLElBR3JDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWdDLFdBQVcvQixJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWdDLFdBQVcvQixJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWdDLFdBQVcvQixJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWdDLFdBQVcvQixJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWdDLFdBQVcvQixJQUFLLElBR3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWlDLElBQUloQyxJQUFLLElBQ2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWlDLElBQUloQyxJQUFLLElBQ2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWlDLElBQUloQyxJQUFLLElBR2xDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWtDLFdBQVdqQyxJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWtDLFdBQVdqQyxJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWtDLFdBQVdqQyxJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTWtDLFdBQVdqQyxJQUFLLElBR3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTW1DLFdBQVdsQyxJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTW1DLFdBQVdsQyxJQUFLLElBQ3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTW1DLFdBQVdsQyxJQUFLLElBR3pDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTW9DLGFBQWFuQyxJQUFLLElBQzNDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTW9DLGFBQWFuQyxJQUFLLElBRzNDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXFDLE1BQU1wQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXFDLE1BQU1wQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXFDLE1BQU1wQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXFDLE1BQU1wQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXFDLE1BQU1wQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXFDLE1BQU1wQyxJQUFLLElBR3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBQ3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXNDLE1BQU1yQyxJQUFLLElBR3BDLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVDLEtBQUt0QyxJQUFLLElBQ25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVDLEtBQUt0QyxJQUFLLElBQ25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVDLEtBQUt0QyxJQUFLLElBQ25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVDLEtBQUt0QyxJQUFLLElBQ25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVDLEtBQUt0QyxJQUFLLElBQ25DLEtBQU0sQ0FBQyxDQUFFLENBQUMsVUFBU0QsTUFBTXVDLEtBQUt0QyxJQUFLLEtBR3JDLE9BQU9yWSxFQUFRZ0YsR0FBV2hGLEVBQVFnRixHQUFXLEtBRy9DLG9CQUNFLElBQUl1VyxFQUFVLEdBSWQsT0FIQTNDLEVBQVFSLE1BQU1uNEIsU0FBUSxDQUFDL0ksRUFBS2pCLEtBQzFCc2xDLEVBQVFya0MsRUFBSW9oQyxPQUFTLENBQUUvK0IsS0FBTXdFLE9BQVFzQixRQUFTLEVBQUcxSyxJQUFLLE1BRWpENG1DLEdBNUpYLGEsdUtDRkEsbUJBRUEsTUFBcUJ6QyxFQWVuQmo0QixZQUFZdEgsR0FDVjlFLEtBQUt3akMsV0FBYSxHQUNsQng1QixPQUFPdUIsS0FBSzg0QixFQUFjVixPQUFPbjRCLFNBQVNwRixJQUN4Q3BHLEtBQUt3akMsV0FBV3ZnQyxLQUFLb2hDLEVBQWNWLE1BQU12OUIsR0FBT3k5QixVQWpCcEQsbUJBQ0UsTUFBTyxDQUNMLFVBQVNGLE1BQU1xQixPQUNmLFVBQVNyQixNQUFNc0IsTUFDZixVQUFTdEIsTUFBTXVCLElBQ2YsVUFBU3ZCLE1BQU0yQixNQUNmLFVBQVMzQixNQUFNOEIsTUFDZixVQUFTOUIsTUFBTWdDLFdBQ2YsVUFBU2hDLE1BQU1xQyxNQUNmLFVBQVNyQyxNQUFNd0MsWUFZbkIsc0JBQXNCNVYsR0FDcEIsTUFBTWhGLEVBQVUsQ0FFZCxLQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVNvWSxNQUFNcUIsT0FBT3BCLElBQUssSUFDckMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUIsT0FBT3BCLElBQUssSUFHckMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUIsT0FBT3BCLElBQUssSUFDckMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUIsT0FBT3BCLElBQUssSUFDckMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUIsT0FBT3BCLElBQUssSUFHckMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNc0IsTUFBTXJCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNc0IsTUFBTXJCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNc0IsTUFBTXJCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNc0IsTUFBTXJCLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFHbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFHbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFDbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNdUIsSUFBSXRCLElBQUssSUFHbEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNMkIsTUFBTTFCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNMkIsTUFBTTFCLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNMkIsTUFBTTFCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNMkIsTUFBTTFCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNMkIsTUFBTTFCLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNNEIsTUFBTTNCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNNEIsTUFBTTNCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNNEIsTUFBTTNCLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNOEIsTUFBTTdCLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFHekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFHekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFHekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNZ0MsV0FBVy9CLElBQUssSUFHekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFDcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNcUMsTUFBTXBDLElBQUssSUFHcEMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFHekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxDQUFDLENBQUUsQ0FBQyxVQUFTRCxNQUFNd0MsV0FBV3ZDLElBQUssSUFDekMsS0FBTSxD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QWpCeTdCLEVBQ0gsT0FBT0EsRUFBYXJzQyxRQUdyQixJQUFJRCxFQUFTbXNDLEVBQXlCRSxHQUFZLENBR2pEcHNDLFFBQVMsSUFPVixPQUhBc3NDLEVBQW9CRixHQUFVL2lDLEtBQUt0SixFQUFPQyxRQUFTRCxFQUFRQSxFQUFPQyxRQUFTbXNDLEdBR3BFcHNDLEVBQU9DLFFDcEJmbXNDLEVBQW9CdG9DLEVBQUksQ0FBQzdELEVBQVN1c0MsS0FDakMsSUFBSSxJQUFJcnFDLEtBQU9xcUMsRUFDWEosRUFBb0JwK0IsRUFBRXcrQixFQUFZcnFDLEtBQVNpcUMsRUFBb0JwK0IsRUFBRS9OLEVBQVNrQyxJQUM1RXNILE9BQU9DLGVBQWV6SixFQUFTa0MsRUFBSyxDQUFFd0gsWUFBWSxFQUFNRSxJQUFLMmlDLEVBQVdycUMsTUNKM0VpcUMsRUFBb0JwK0IsRUFBSSxDQUFDOUwsRUFBS3VxQyxJQUFVaGpDLE9BQU92SixVQUFVK04sZUFBZTNFLEtBQUtwSCxFQUFLdXFDLEdDQ2xGTCxFQUFvQjdsQyxFQUFLdEcsSUFDSCxvQkFBWDBjLFFBQTBCQSxPQUFPK3ZCLGFBQzFDampDLE9BQU9DLGVBQWV6SixFQUFTMGMsT0FBTyt2QixZQUFhLENBQUVoNEIsTUFBTyxXQUU3RGpMLE9BQU9DLGVBQWV6SixFQUFTLGFBQWMsQ0FBRXlVLE9BQU8sS0NGN0IwM0IsRUFBb0IsTyIsInNvdXJjZXMiOlsid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9kZWJ1Zy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9nbG9iYWxUaGlzLmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvY29tbW9ucy5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9kaXN0L2JpbmFyeS5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9kaXN0L2lzLWJpbmFyeS5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL25vZGVfbW9kdWxlcy9vcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvV3MudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvYWN0aW9ucy93cy9hcGlUb1NlcnZlclJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvYWN0aW9ucy93cy9zZXJ2ZXJUb0FwaUJyYWRjYXN0LnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL2FjdGlvbnMvd3Mvc2VydmVyVG9BcGlFbWl0LnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL2FwaVN0b3JlLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL21hcFRvU3RhdGVUb1Byb3BzL3N0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvbWlkZGxld2FyZS9pbmRleC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9hY3Rpb25lZC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9hbmFseXplLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL2FwcC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9ib290T3B0aW9uLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL2luZGV4LnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3Bvc3RzLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3Bvc3RzQ2hpbGQudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvcmVkdWNlcnMvcG9zdHNNdWx0aS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9wb3N0c1NpbmdsZS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3Bvc3RzVGltZWxpbmVTdG9jay50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lWmVyby50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lWmVyb0FmdGVyLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3JhbmtzLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3NldHRpbmcudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvcmVkdWNlcnMvdGhyZWFkLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3RocmVhZERldGFpbC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy90aHJlYWRzLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3JlZHVjZXJzL3R1bmVDaC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9yZWR1Y2Vycy91c2VyLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3N0b3JlL0FjdGlvbkxvZ3MudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvc3RvcmUvQW5hbHl6ZS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9BcHAudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvc3RvcmUvQm9vdE9wdGlvbi50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9NZW51TG9ncy50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9Qb3N0LnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3N0b3JlL1Bvc3RNdWx0aS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9Qb3N0cy50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9Qb3N0c1NpbmdsZS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9Qb3N0c1RpbWVsaW5lLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9jay50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyby50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyb0FmdGVyLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3N0b3JlL1JhbmtzLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3N0b3JlL1NldHRpbmcudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvc3RvcmUvVGhyZWFkLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9hcGkvc3JjL3N0b3JlL1RocmVhZHMudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9zcmMvc3RvcmUvVXNlci50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy9zdG9yZS9pbmRleC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL3NyYy93cy5hcGkud29ya2VyLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9jb21tb24vc3JjL1Bvc3RNZXNzYWdlLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9jb21tb24vc3JjL1NjaGVtYS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL3NyYy9TZXF1ZW5jZS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL3NyYy9jb25mLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9jb21tb24vc3JjL2RlZmluZS50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL3NyYy9lbW90aW9ucy9pbmRleC50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL3NyYy9lbW90aW9ucy9tb2RlbC9QbGFpbi50cyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vY29tbW9uL3NyYy9lbW90aW9ucy9tb2RlbC9SdXNzZWxsLnRzIiwid2VicGFjazovL3RhbGtuLXRvcC8uLi9jb21tb24vc3JjL2Vtb3Rpb25zL21vZGVsL1J1c3NlbGxTaW1wbGUudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2NvbW1vbi9zcmMvZW1vdGlvbnMvbW9kZWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wLy4uL2FwaS9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9vbi5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3NvY2tldC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3R5cGVkLWV2ZW50cy5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3AvLi4vYXBpL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3VybC5qcyIsIndlYnBhY2s6Ly90YWxrbi10b3Avd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGFsa24tdG9wL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90YWxrbi10b3Avd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90YWxrbi10b3Avd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly90YWxrbi10b3Avd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKGNoYXJzKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaV0pO1xuICAgICAgZW5jb2RlZDIgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzFdKTtcbiAgICAgIGVuY29kZWQzID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSsyXSk7XG4gICAgICBlbmNvZGVkNCA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krM10pO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiKTtcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVtb3ZlIGV2ZW50IHNwZWNpZmljIGFycmF5cyBmb3IgZXZlbnQgdHlwZXMgdGhhdCBub1xyXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cclxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcbmV4cG9ydHMuZGVzdHJveSA9ICgoKSA9PiB7XG5cdGxldCB3YXJuZWQgPSBmYWxzZTtcblxuXHRyZXR1cm4gKCkgPT4ge1xuXHRcdGlmICghd2FybmVkKSB7XG5cdFx0XHR3YXJuZWQgPSB0cnVlO1xuXHRcdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdFx0fVxuXHR9O1xufSkoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG5cdCcjMDAwMENDJyxcblx0JyMwMDAwRkYnLFxuXHQnIzAwMzNDQycsXG5cdCcjMDAzM0ZGJyxcblx0JyMwMDY2Q0MnLFxuXHQnIzAwNjZGRicsXG5cdCcjMDA5OUNDJyxcblx0JyMwMDk5RkYnLFxuXHQnIzAwQ0MwMCcsXG5cdCcjMDBDQzMzJyxcblx0JyMwMENDNjYnLFxuXHQnIzAwQ0M5OScsXG5cdCcjMDBDQ0NDJyxcblx0JyMwMENDRkYnLFxuXHQnIzMzMDBDQycsXG5cdCcjMzMwMEZGJyxcblx0JyMzMzMzQ0MnLFxuXHQnIzMzMzNGRicsXG5cdCcjMzM2NkNDJyxcblx0JyMzMzY2RkYnLFxuXHQnIzMzOTlDQycsXG5cdCcjMzM5OUZGJyxcblx0JyMzM0NDMDAnLFxuXHQnIzMzQ0MzMycsXG5cdCcjMzNDQzY2Jyxcblx0JyMzM0NDOTknLFxuXHQnIzMzQ0NDQycsXG5cdCcjMzNDQ0ZGJyxcblx0JyM2NjAwQ0MnLFxuXHQnIzY2MDBGRicsXG5cdCcjNjYzM0NDJyxcblx0JyM2NjMzRkYnLFxuXHQnIzY2Q0MwMCcsXG5cdCcjNjZDQzMzJyxcblx0JyM5OTAwQ0MnLFxuXHQnIzk5MDBGRicsXG5cdCcjOTkzM0NDJyxcblx0JyM5OTMzRkYnLFxuXHQnIzk5Q0MwMCcsXG5cdCcjOTlDQzMzJyxcblx0JyNDQzAwMDAnLFxuXHQnI0NDMDAzMycsXG5cdCcjQ0MwMDY2Jyxcblx0JyNDQzAwOTknLFxuXHQnI0NDMDBDQycsXG5cdCcjQ0MwMEZGJyxcblx0JyNDQzMzMDAnLFxuXHQnI0NDMzMzMycsXG5cdCcjQ0MzMzY2Jyxcblx0JyNDQzMzOTknLFxuXHQnI0NDMzNDQycsXG5cdCcjQ0MzM0ZGJyxcblx0JyNDQzY2MDAnLFxuXHQnI0NDNjYzMycsXG5cdCcjQ0M5OTAwJyxcblx0JyNDQzk5MzMnLFxuXHQnI0NDQ0MwMCcsXG5cdCcjQ0NDQzMzJyxcblx0JyNGRjAwMDAnLFxuXHQnI0ZGMDAzMycsXG5cdCcjRkYwMDY2Jyxcblx0JyNGRjAwOTknLFxuXHQnI0ZGMDBDQycsXG5cdCcjRkYwMEZGJyxcblx0JyNGRjMzMDAnLFxuXHQnI0ZGMzMzMycsXG5cdCcjRkYzMzY2Jyxcblx0JyNGRjMzOTknLFxuXHQnI0ZGMzNDQycsXG5cdCcjRkYzM0ZGJyxcblx0JyNGRjY2MDAnLFxuXHQnI0ZGNjYzMycsXG5cdCcjRkY5OTAwJyxcblx0JyNGRjk5MzMnLFxuXHQnI0ZGQ0MwMCcsXG5cdCcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHQvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG5cdC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG5cdC8vIGV4cGxpY2l0bHlcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gSXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcblx0Ly8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblx0cmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG5cdFx0Ly8gSXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuXHRcdCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG5cdFx0Ly8gSXMgZmlyZWZveCA+PSB2MzE/XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmRlYnVnKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICogSWYgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2tcbiAqIHRvIGBjb25zb2xlLmxvZ2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0cy5sb2cgPSBjb25zb2xlLmRlYnVnIHx8IGNvbnNvbGUubG9nIHx8ICgoKSA9PiB7fSk7XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxuXG5cdC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0ciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG5cblx0cmV0dXJuIHI7XG59XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHR0cnkge1xuXHRcdC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcblx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcblxuY29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuXHR9XG59O1xuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXHRjcmVhdGVEZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvKipcblx0KiBYWFggRE8gTk9UIFVTRS4gVGhpcyBpcyBhIHRlbXBvcmFyeSBzdHViIGZ1bmN0aW9uLlxuXHQqIFhYWCBJdCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0Ki9cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIm1vZHVsZS5leHBvcnRzID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgfVxufSkoKTtcbiIsImNvbnN0IFNvY2tldCA9IHJlcXVpcmUoXCIuL3NvY2tldFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSAodXJpLCBvcHRzKSA9PiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5Tb2NrZXQgPSBTb2NrZXQ7XG5tb2R1bGUuZXhwb3J0cy5wcm90b2NvbCA9IFNvY2tldC5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcbm1vZHVsZS5leHBvcnRzLlRyYW5zcG9ydCA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydFwiKTtcbm1vZHVsZS5leHBvcnRzLnRyYW5zcG9ydHMgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRzL2luZGV4XCIpO1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG4iLCJjb25zdCB0cmFuc3BvcnRzID0gcmVxdWlyZShcIi4vdHJhbnNwb3J0cy9pbmRleFwiKTtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6c29ja2V0XCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBwYXJzZXVyaSA9IHJlcXVpcmUoXCJwYXJzZXVyaVwiKTtcbmNvbnN0IHBhcnNlcXMgPSByZXF1aXJlKFwicGFyc2Vxc1wiKTtcblxuY2xhc3MgU29ja2V0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHVyaSwgb3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgb3B0cyA9IHVyaTtcbiAgICAgIHVyaSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVyaSkge1xuICAgICAgdXJpID0gcGFyc2V1cmkodXJpKTtcbiAgICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSBcImh0dHBzXCIgfHwgdXJpLnByb3RvY29sID09PSBcIndzc1wiO1xuICAgICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgICBpZiAodXJpLnF1ZXJ5KSBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICAgIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICAgIH1cblxuICAgIHRoaXMuc2VjdXJlID1cbiAgICAgIG51bGwgIT0gb3B0cy5zZWN1cmVcbiAgICAgICAgPyBvcHRzLnNlY3VyZVxuICAgICAgICA6IHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcblxuICAgIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gXCI0NDNcIiA6IFwiODBcIjtcbiAgICB9XG5cbiAgICB0aGlzLmhvc3RuYW1lID1cbiAgICAgIG9wdHMuaG9zdG5hbWUgfHxcbiAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhdGlvbi5ob3N0bmFtZSA6IFwibG9jYWxob3N0XCIpO1xuICAgIHRoaXMucG9ydCA9XG4gICAgICBvcHRzLnBvcnQgfHxcbiAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgICAgOiB0aGlzLnNlY3VyZVxuICAgICAgICA/IDQ0M1xuICAgICAgICA6IDgwKTtcblxuICAgIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbXCJwb2xsaW5nXCIsIFwid2Vic29ja2V0XCJdO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiXCI7XG4gICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG5cbiAgICB0aGlzLm9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBwYXRoOiBcIi9lbmdpbmUuaW9cIixcbiAgICAgICAgYWdlbnQ6IGZhbHNlLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICB1cGdyYWRlOiB0cnVlLFxuICAgICAgICBqc29ucDogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wUGFyYW06IFwidFwiLFxuICAgICAgICByZW1lbWJlclVwZ3JhZGU6IGZhbHNlLFxuICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IHRydWUsXG4gICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB7XG4gICAgICAgICAgdGhyZXNob2xkOiAxMDI0XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zcG9ydE9wdGlvbnM6IHt9LFxuICAgICAgICBjbG9zZU9uQmVmb3JldW5sb2FkOiB0cnVlXG4gICAgICB9LFxuICAgICAgb3B0c1xuICAgICk7XG5cbiAgICB0aGlzLm9wdHMucGF0aCA9IHRoaXMub3B0cy5wYXRoLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSArIFwiL1wiO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMucXVlcnkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRoaXMub3B0cy5xdWVyeSA9IHBhcnNlcXMuZGVjb2RlKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICAgIHRoaXMuaWQgPSBudWxsO1xuICAgIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICAgIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0aGlzLm9wdHMuY2xvc2VPbkJlZm9yZXVubG9hZCkge1xuICAgICAgICAvLyBGaXJlZm94IGNsb3NlcyB0aGUgY29ubmVjdGlvbiB3aGVuIHRoZSBcImJlZm9yZXVubG9hZFwiIGV2ZW50IGlzIGVtaXR0ZWQgYnV0IG5vdCBDaHJvbWUuIFRoaXMgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgLy8gZW5zdXJlcyBldmVyeSBicm93c2VyIGJlaGF2ZXMgdGhlIHNhbWUgKG5vIFwiZGlzY29ubmVjdFwiIGV2ZW50IGF0IHRoZSBTb2NrZXQuSU8gbGV2ZWwgd2hlbiB0aGUgcGFnZSBpc1xuICAgICAgICAvLyBjbG9zZWQvcmVsb2FkZWQpXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgXCJiZWZvcmV1bmxvYWRcIixcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgLy8gc2lsZW50bHkgY2xvc2UgdGhlIHRyYW5zcG9ydFxuICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5ob3N0bmFtZSAhPT0gXCJsb2NhbGhvc3RcIikge1xuICAgICAgICB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBjbG9zZVwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3BlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNyZWF0ZVRyYW5zcG9ydChuYW1lKSB7XG4gICAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgICBjb25zdCBxdWVyeSA9IGNsb25lKHRoaXMub3B0cy5xdWVyeSk7XG5cbiAgICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7XG5cbiAgICAvLyB0cmFuc3BvcnQgbmFtZVxuICAgIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB0aGlzLm9wdHMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSxcbiAgICAgIHRoaXMub3B0cyxcbiAgICAgIHtcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHNvY2tldDogdGhpcyxcbiAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUsXG4gICAgICAgIHNlY3VyZTogdGhpcy5zZWN1cmUsXG4gICAgICAgIHBvcnQ6IHRoaXMucG9ydFxuICAgICAgfVxuICAgICk7XG5cbiAgICBkZWJ1ZyhcIm9wdGlvbnM6ICVqXCIsIG9wdHMpO1xuXG4gICAgcmV0dXJuIG5ldyB0cmFuc3BvcnRzW25hbWVdKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGxldCB0cmFuc3BvcnQ7XG4gICAgaWYgKFxuICAgICAgdGhpcy5vcHRzLnJlbWVtYmVyVXBncmFkZSAmJlxuICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJlxuICAgICAgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoXCJ3ZWJzb2NrZXRcIikgIT09IC0xXG4gICAgKSB7XG4gICAgICB0cmFuc3BvcnQgPSBcIndlYnNvY2tldFwiO1xuICAgIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgXCJObyB0cmFuc3BvcnRzIGF2YWlsYWJsZVwiKTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gICAgfVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuXG4gICAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICAgIHRyeSB7XG4gICAgICB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnKFwiZXJyb3Igd2hpbGUgY3JlYXRpbmcgdHJhbnNwb3J0OiAlc1wiLCBlKTtcbiAgICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNldFRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZyhcInNldHRpbmcgdHJhbnNwb3J0ICVzXCIsIHRyYW5zcG9ydC5uYW1lKTtcblxuICAgIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgZGVidWcoXCJjbGVhcmluZyBleGlzdGluZyB0cmFuc3BvcnQgJXNcIiwgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICAgIHRyYW5zcG9ydFxuICAgICAgLm9uKFwiZHJhaW5cIiwgdGhpcy5vbkRyYWluLmJpbmQodGhpcykpXG4gICAgICAub24oXCJwYWNrZXRcIiwgdGhpcy5vblBhY2tldC5iaW5kKHRoaXMpKVxuICAgICAgLm9uKFwiZXJyb3JcIiwgdGhpcy5vbkVycm9yLmJpbmQodGhpcykpXG4gICAgICAub24oXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBjbG9zZVwiKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgcHJvYmUobmFtZSkge1xuICAgIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgICBsZXQgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQobmFtZSwgeyBwcm9iZTogMSB9KTtcbiAgICBsZXQgZmFpbGVkID0gZmFsc2U7XG5cbiAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgICBjb25zdCBvblRyYW5zcG9ydE9wZW4gPSAoKSA9PiB7XG4gICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogXCJwaW5nXCIsIGRhdGE6IFwicHJvYmVcIiB9XSk7XG4gICAgICB0cmFuc3BvcnQub25jZShcInBhY2tldFwiLCBtc2cgPT4ge1xuICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgIGlmIChcInBvbmdcIiA9PT0gbXNnLnR5cGUgJiYgXCJwcm9iZVwiID09PSBtc2cuZGF0YSkge1xuICAgICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgICB0aGlzLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5lbWl0KFwidXBncmFkaW5nXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCB0aGlzLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5wYXVzZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgICAgICBkZWJ1ZyhcImNoYW5naW5nIHRyYW5zcG9ydCBhbmQgc2VuZGluZyB1cGdyYWRlIHBhY2tldFwiKTtcblxuICAgICAgICAgICAgY2xlYW51cCgpO1xuXG4gICAgICAgICAgICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogXCJ1cGdyYWRlXCIgfV0pO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBncmFkZVwiLCB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwicHJvYmUgZXJyb3JcIik7XG4gICAgICAgICAgZXJyLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICAgIHRoaXMuZW1pdChcInVwZ3JhZGVFcnJvclwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0KCkge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICAgIGZhaWxlZCA9IHRydWU7XG5cbiAgICAgIGNsZWFudXAoKTtcblxuICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgICBjb25zdCBvbmVycm9yID0gZXJyID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwicHJvYmUgZXJyb3I6IFwiICsgZXJyKTtcbiAgICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkIGJlY2F1c2Ugb2YgZXJyb3I6ICVzJywgbmFtZSwgZXJyKTtcblxuICAgICAgdGhpcy5lbWl0KFwidXBncmFkZUVycm9yXCIsIGVycm9yKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSgpIHtcbiAgICAgIG9uZXJyb3IoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgICBvbmVycm9yKFwic29ja2V0IGNsb3NlZFwiKTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgIGZ1bmN0aW9uIG9udXBncmFkZSh0bykge1xuICAgICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgICBkZWJ1ZygnXCIlc1wiIHdvcmtzIC0gYWJvcnRpbmcgXCIlc1wiJywgdG8ubmFtZSwgdHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gICAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcIm9wZW5cIiwgb25UcmFuc3BvcnRPcGVuKTtcbiAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25UcmFuc3BvcnRDbG9zZSk7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwidXBncmFkaW5nXCIsIG9udXBncmFkZSk7XG4gICAgfTtcblxuICAgIHRyYW5zcG9ydC5vbmNlKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgIHRyYW5zcG9ydC5vbmNlKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0Lm9uY2UoXCJjbG9zZVwiLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICAgIHRoaXMub25jZShcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIHRoaXMub25jZShcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuXG4gICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgb25PcGVuKCkge1xuICAgIGRlYnVnKFwic29ja2V0IG9wZW5cIik7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT09IHRoaXMudHJhbnNwb3J0Lm5hbWU7XG4gICAgdGhpcy5lbWl0KFwib3BlblwiKTtcbiAgICB0aGlzLmZsdXNoKCk7XG5cbiAgICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gICAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICAgIGlmIChcbiAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgIHRoaXMub3B0cy51cGdyYWRlICYmXG4gICAgICB0aGlzLnRyYW5zcG9ydC5wYXVzZVxuICAgICkge1xuICAgICAgZGVidWcoXCJzdGFydGluZyB1cGdyYWRlIHByb2Jlc1wiKTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGNvbnN0IGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDtcbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25QYWNrZXQocGFja2V0KSB7XG4gICAgaWYgKFxuICAgICAgXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZVxuICAgICkge1xuICAgICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgICB0aGlzLmVtaXQoXCJwYWNrZXRcIiwgcGFja2V0KTtcblxuICAgICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgICAgdGhpcy5lbWl0KFwiaGVhcnRiZWF0XCIpO1xuXG4gICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJwb25nXCIpO1xuICAgICAgICAgIHRoaXMuZW1pdChcInBpbmdcIik7XG4gICAgICAgICAgdGhpcy5lbWl0KFwicG9uZ1wiKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJzZXJ2ZXIgZXJyb3JcIik7XG4gICAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgICB0aGlzLm9uRXJyb3IoZXJyKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgIHRoaXMuZW1pdChcIm1lc3NhZ2VcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kc2hha2Ugb2JqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25IYW5kc2hha2UoZGF0YSkge1xuICAgIHRoaXMuZW1pdChcImhhbmRzaGFrZVwiLCBkYXRhKTtcbiAgICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gICAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gICAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7XG4gICAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgICB0aGlzLm9uT3BlbigpO1xuICAgIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgICBpZiAoXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbmQgcmVzZXRzIHBpbmcgdGltZW91dCB0aW1lciBiYXNlZCBvbiBzZXJ2ZXIgcGluZ3MuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgcmVzZXRQaW5nVGltZW91dCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMub25DbG9zZShcInBpbmcgdGltZW91dFwiKTtcbiAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCArIHRoaXMucGluZ1RpbWVvdXQpO1xuICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIudW5yZWYoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkRyYWluKCkge1xuICAgIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gICAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsXG4gICAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gICAgaWYgKDAgPT09IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkcmFpblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGbHVzaCB3cml0ZSBidWZmZXJzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGZsdXNoKCkge1xuICAgIGlmIChcbiAgICAgIFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAgICF0aGlzLnVwZ3JhZGluZyAmJlxuICAgICAgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGhcbiAgICApIHtcbiAgICAgIGRlYnVnKFwiZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXRcIiwgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpO1xuICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYFxuICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgICB0aGlzLmVtaXQoXCJmbHVzaFwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIHdyaXRlKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2VuZChtc2csIG9wdGlvbnMsIGZuKSB7XG4gICAgdGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNlbmRQYWNrZXQodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGF0YSkge1xuICAgICAgZm4gPSBkYXRhO1xuICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgICAgZm4gPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gICAgY29uc3QgcGFja2V0ID0ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbiAgICB0aGlzLmVtaXQoXCJwYWNrZXRDcmVhdGVcIiwgcGFja2V0KTtcbiAgICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICBpZiAoZm4pIHRoaXMub25jZShcImZsdXNoXCIsIGZuKTtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5vbkNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xuICAgICAgZGVidWcoXCJzb2NrZXQgY2xvc2luZyAtIHRlbGxpbmcgdHJhbnNwb3J0IHRvIGNsb3NlXCIpO1xuICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2xlYW51cEFuZENsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRlRXJyb3JcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIGNsb3NlKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHdhaXRGb3JVcGdyYWRlID0gKCkgPT4ge1xuICAgICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICAgIHRoaXMub25jZShcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIHRoaXMub25jZShcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIH07XG5cbiAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NpbmdcIjtcblxuICAgICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMub25jZShcImRyYWluXCIsICgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGVycm9yXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25FcnJvcihlcnIpIHtcbiAgICBkZWJ1ZyhcInNvY2tldCBlcnJvciAlalwiLCBlcnIpO1xuICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCBlcnIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkNsb3NlKHJlYXNvbiwgZGVzYykge1xuICAgIGlmIChcbiAgICAgIFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGVcbiAgICApIHtcbiAgICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG5cbiAgICAgIC8vIGNsZWFyIHRpbWVyc1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAgIC8vIHN0b3AgZXZlbnQgZnJvbSBmaXJpbmcgYWdhaW4gZm9yIHRyYW5zcG9ydFxuICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKFwiY2xvc2VcIik7XG5cbiAgICAgIC8vIGVuc3VyZSB0cmFuc3BvcnQgd29uJ3Qgc3RheSBvcGVuXG4gICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuXG4gICAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgICB0aGlzLmlkID0gbnVsbDtcblxuICAgICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgICAgdGhpcy5lbWl0KFwiY2xvc2VcIiwgcmVhc29uLCBkZXNjKTtcblxuICAgICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdXBncmFkZXMsIHJldHVybmluZyBvbmx5IHRob3NlIG1hdGNoaW5nIGNsaWVudCB0cmFuc3BvcnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAgICogQGFwaSBwcml2YXRlXG4gICAqXG4gICAqL1xuICBmaWx0ZXJVcGdyYWRlcyh1cGdyYWRlcykge1xuICAgIGNvbnN0IGZpbHRlcmVkVXBncmFkZXMgPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgaiA9IHVwZ3JhZGVzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGo7IGkrKykge1xuICAgICAgaWYgKH50aGlzLnRyYW5zcG9ydHMuaW5kZXhPZih1cGdyYWRlc1tpXSkpXG4gICAgICAgIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzO1xuICB9XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sOyAvLyB0aGlzIGlzIGFuIGludFxuXG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgY29uc3QgbyA9IHt9O1xuICBmb3IgKGxldCBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcbiIsImNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgRW1pdHRlciA9IHJlcXVpcmUoXCJjb21wb25lbnQtZW1pdHRlclwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDp0cmFuc3BvcnRcIik7XG5cbmNsYXNzIFRyYW5zcG9ydCBleHRlbmRzIEVtaXR0ZXIge1xuICAvKipcbiAgICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJcIjtcbiAgICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEByZXR1cm4ge1RyYW5zcG9ydH0gZm9yIGNoYWluaW5nXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBvbkVycm9yKG1zZywgZGVzYykge1xuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICAgIGVyci50eXBlID0gXCJUcmFuc3BvcnRFcnJvclwiO1xuICAgIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgb3BlbigpIHtcbiAgICBpZiAoXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwiXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICB0aGlzLmRvT3BlbigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgdHJhbnNwb3J0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNlbmQocGFja2V0cykge1xuICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIG1pZ2h0IGhhcHBlbiBpZiB0aGUgdHJhbnNwb3J0IHdhcyBzaWxlbnRseSBjbG9zZWQgaW4gdGhlIGJlZm9yZXVubG9hZCBldmVudCBoYW5kbGVyXG4gICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBpcyBub3Qgb3BlbiwgZGlzY2FyZGluZyBwYWNrZXRzXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBvcGVuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25PcGVuKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMuZW1pdChcIm9wZW5cIik7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdpdGggZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkRhdGEoZGF0YSkge1xuICAgIGNvbnN0IHBhY2tldCA9IHBhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gICAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gICAqL1xuICBvblBhY2tldChwYWNrZXQpIHtcbiAgICB0aGlzLmVtaXQoXCJwYWNrZXRcIiwgcGFja2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkNsb3NlKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgdGhpcy5lbWl0KFwiY2xvc2VcIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG4iLCJjb25zdCBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoXCIuLi8uLi9jb250cmliL3htbGh0dHByZXF1ZXN0LXNzbC9YTUxIdHRwUmVxdWVzdFwiKTtcbmNvbnN0IFhIUiA9IHJlcXVpcmUoXCIuL3BvbGxpbmcteGhyXCIpO1xuY29uc3QgSlNPTlAgPSByZXF1aXJlKFwiLi9wb2xsaW5nLWpzb25wXCIpO1xuY29uc3Qgd2Vic29ja2V0ID0gcmVxdWlyZShcIi4vd2Vic29ja2V0XCIpO1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nKG9wdHMpIHtcbiAgbGV0IHhocjtcbiAgbGV0IHhkID0gZmFsc2U7XG4gIGxldCB4cyA9IGZhbHNlO1xuICBjb25zdCBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjb25zdCBpc1NTTCA9IFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIGxldCBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKFwib3BlblwiIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKFwiSlNPTlAgZGlzYWJsZWRcIik7XG4gICAgcmV0dXJuIG5ldyBKU09OUChvcHRzKTtcbiAgfVxufVxuIiwiY29uc3QgUG9sbGluZyA9IHJlcXVpcmUoXCIuL3BvbGxpbmdcIik7XG5jb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4uL2dsb2JhbFRoaXNcIik7XG5cbmNvbnN0IHJOZXdsaW5lID0gL1xcbi9nO1xuY29uc3QgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG5sZXQgY2FsbGJhY2tzO1xuXG5jbGFzcyBKU09OUFBvbGxpbmcgZXh0ZW5kcyBQb2xsaW5nIHtcbiAgLyoqXG4gICAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAgIC8vIHdlIGRvIHRoaXMgaGVyZSAobGF6aWx5KSB0byBhdm9pZCB1bm5lZWRlZCBnbG9iYWwgcG9sbHV0aW9uXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgICBjYWxsYmFja3MgPSBnbG9iYWxUaGlzLl9fX2VpbyA9IGdsb2JhbFRoaXMuX19fZWlvIHx8IFtdO1xuICAgIH1cblxuICAgIC8vIGNhbGxiYWNrIGlkZW50aWZpZXJcbiAgICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgICBjYWxsYmFja3MucHVzaCh0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEpTT05QIG9ubHkgc3VwcG9ydHMgYmluYXJ5IGFzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbiAgICovXG4gIGdldCBzdXBwb3J0c0JpbmFyeSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBzb2NrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9DbG9zZSgpIHtcbiAgICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICAgIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgICAgIHRoaXMuc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7fTtcbiAgICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvcm0pIHtcbiAgICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICAgIH1cblxuICAgIHN1cGVyLmRvQ2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvUG9sbCgpIHtcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXG4gICAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICAgIHNjcmlwdC5vbmVycm9yID0gZSA9PiB7XG4gICAgICB0aGlzLm9uRXJyb3IoXCJqc29ucCBwb2xsIGVycm9yXCIsIGUpO1xuICAgIH07XG5cbiAgICBjb25zdCBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO1xuICAgIGlmIChpbnNlcnRBdCkge1xuICAgICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfVxuICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gICAgY29uc3QgaXNVQWdlY2tvID1cbiAgICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICAgIGlmIChpc1VBZ2Vja28pIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIHdpdGggYSBoaWRkZW4gaWZyYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvV3JpdGUoZGF0YSwgZm4pIHtcbiAgICBsZXQgaWZyYW1lO1xuXG4gICAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgIGNvbnN0IGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG4gICAgICBjb25zdCBpZCA9ICh0aGlzLmlmcmFtZUlkID0gXCJlaW9faWZyYW1lX1wiICsgdGhpcy5pbmRleCk7XG5cbiAgICAgIGZvcm0uY2xhc3NOYW1lID0gXCJzb2NrZXRpb1wiO1xuICAgICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgIGZvcm0uc3R5bGUudG9wID0gXCItMTAwMHB4XCI7XG4gICAgICBmb3JtLnN0eWxlLmxlZnQgPSBcIi0xMDAwcHhcIjtcbiAgICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgICBmb3JtLm1ldGhvZCA9IFwiUE9TVFwiO1xuICAgICAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJhY2NlcHQtY2hhcnNldFwiLCBcInV0Zi04XCIpO1xuICAgICAgYXJlYS5uYW1lID0gXCJkXCI7XG4gICAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtLmFjdGlvbiA9IHRoaXMudXJpKCk7XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGluaXRJZnJhbWUoKTtcbiAgICAgIGZuKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5pdElmcmFtZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlmcmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuZm9ybS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yXCIsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgICBjb25zdCBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyB0aGlzLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgIGlmcmFtZS5uYW1lID0gdGhpcy5pZnJhbWVJZDtcbiAgICAgICAgaWZyYW1lLnNyYyA9IFwiamF2YXNjcmlwdDowXCI7XG4gICAgICB9XG5cbiAgICAgIGlmcmFtZS5pZCA9IHRoaXMuaWZyYW1lSWQ7XG5cbiAgICAgIHRoaXMuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gICAgfTtcblxuICAgIGluaXRJZnJhbWUoKTtcblxuICAgIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAgIC8vIGRvdWJsZSBlc2NhcGluZyBpcyByZXF1aXJlZCBmb3IgZXNjYXBlZCBuZXcgbGluZXMgYmVjYXVzZSB1bmVzY2FwaW5nIG9mIG5ldyBsaW5lcyBjYW4gYmUgZG9uZSBzYWZlbHkgb24gc2VydmVyLXNpZGVcbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgXCJcXFxcXFxuXCIpO1xuICAgIHRoaXMuYXJlYS52YWx1ZSA9IGRhdGEucmVwbGFjZShyTmV3bGluZSwgXCJcXFxcblwiKTtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmZvcm0uc3VibWl0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgICAgdGhpcy5pZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuIiwiLyogZ2xvYmFsIGF0dGFjaEV2ZW50ICovXG5cbmNvbnN0IFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZShcIi4uLy4uL2NvbnRyaWIveG1saHR0cHJlcXVlc3Qtc3NsL1hNTEh0dHBSZXF1ZXN0XCIpO1xuY29uc3QgUG9sbGluZyA9IHJlcXVpcmUoXCIuL3BvbGxpbmdcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgeyBwaWNrIH0gPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi4vZ2xvYmFsVGhpc1wiKTtcblxuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcteGhyXCIpO1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkoKSB7fVxuXG5jb25zdCBoYXNYSFIyID0gKGZ1bmN0aW9uKCkge1xuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbmNsYXNzIFhIUiBleHRlbmRzIFBvbGxpbmcge1xuICAvKipcbiAgICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb25zdCBpc1NTTCA9IFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgbGV0IHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMueGQgPVxuICAgICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUpIHx8XG4gICAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICAgIHRoaXMueHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFhIUiBzdXBwb3J0cyBiaW5hcnlcbiAgICAgKi9cbiAgICBjb25zdCBmb3JjZUJhc2U2NCA9IG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NDtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gaGFzWEhSMiAmJiAhZm9yY2VCYXNlNjQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICByZXF1ZXN0KG9wdHMgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24ob3B0cywgeyB4ZDogdGhpcy54ZCwgeHM6IHRoaXMueHMgfSwgdGhpcy5vcHRzKTtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcy51cmkoKSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9Xcml0ZShkYXRhLCBmbikge1xuICAgIGNvbnN0IHJlcSA9IHRoaXMucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICAgIHJlcS5vbihcInN1Y2Nlc3NcIiwgZm4pO1xuICAgIHJlcS5vbihcImVycm9yXCIsIGVyciA9PiB7XG4gICAgICB0aGlzLm9uRXJyb3IoXCJ4aHIgcG9zdCBlcnJvclwiLCBlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9Qb2xsKCkge1xuICAgIGRlYnVnKFwieGhyIHBvbGxcIik7XG4gICAgY29uc3QgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gICAgcmVxLm9uKFwiZGF0YVwiLCB0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcbiAgICByZXEub24oXCJlcnJvclwiLCBlcnIgPT4ge1xuICAgICAgdGhpcy5vbkVycm9yKFwieGhyIHBvbGwgZXJyb3JcIiwgZXJyKTtcbiAgICB9KTtcbiAgICB0aGlzLnBvbGxYaHIgPSByZXE7XG4gIH1cbn1cblxuY2xhc3MgUmVxdWVzdCBleHRlbmRzIEVtaXR0ZXIge1xuICAvKipcbiAgICogUmVxdWVzdCBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3IodXJpLCBvcHRzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuXG4gICAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCBcIkdFVFwiO1xuICAgIHRoaXMudXJpID0gdXJpO1xuICAgIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG5cbiAgICB0aGlzLmNyZWF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBvcHRzID0gcGljayhcbiAgICAgIHRoaXMub3B0cyxcbiAgICAgIFwiYWdlbnRcIixcbiAgICAgIFwiZW5hYmxlc1hEUlwiLFxuICAgICAgXCJwZnhcIixcbiAgICAgIFwia2V5XCIsXG4gICAgICBcInBhc3NwaHJhc2VcIixcbiAgICAgIFwiY2VydFwiLFxuICAgICAgXCJjYVwiLFxuICAgICAgXCJjaXBoZXJzXCIsXG4gICAgICBcInJlamVjdFVuYXV0aG9yaXplZFwiLFxuICAgICAgXCJhdXRvVW5yZWZcIlxuICAgICk7XG4gICAgb3B0cy54ZG9tYWluID0gISF0aGlzLm9wdHMueGQ7XG4gICAgb3B0cy54c2NoZW1lID0gISF0aGlzLm9wdHMueHM7XG5cbiAgICBjb25zdCB4aHIgPSAodGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cykpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGRlYnVnKFwieGhyIG9wZW4gJXM6ICVzXCIsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIGlmIChcIlBPU1RcIiA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICAvLyBpZTYgY2hlY2tcbiAgICAgIGlmIChcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocikge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdGhpcy5vcHRzLndpdGhDcmVkZW50aWFscztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0cy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgICB4aHIudGltZW91dCA9IHRoaXMub3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgICB9O1xuICAgICAgICB4aHIub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5vbkxvYWQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSBcIm51bWJlclwiID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZyhcInhociBkYXRhICVzXCIsIHRoaXMuZGF0YSk7XG4gICAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmcm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm9uRXJyb3IoZSk7XG4gICAgICB9LCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZXNwb25zZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvblN1Y2Nlc3MoKSB7XG4gICAgdGhpcy5lbWl0KFwic3VjY2Vzc1wiKTtcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRGF0YShkYXRhKSB7XG4gICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBkYXRhKTtcbiAgICB0aGlzLm9uU3VjY2VzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGVycm9yLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRXJyb3IoZXJyKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICB0aGlzLmNsZWFudXAodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW5zIHVwIGhvdXNlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNsZWFudXAoZnJvbUVycm9yKSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB0aGlzLnhociB8fCBudWxsID09PSB0aGlzLnhocikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB4bWxodHRwcmVxdWVzdFxuICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5O1xuICAgIH1cblxuICAgIGlmIChmcm9tRXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICAgIH1cblxuICAgIHRoaXMueGhyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBsb2FkLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uTG9hZCgpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgaXQgaGFzIFhEb21haW5SZXF1ZXN0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGhhc1hEUigpIHtcbiAgICByZXR1cm4gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBhYm9ydCgpIHtcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxufVxuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAodHlwZW9mIGF0dGFjaEV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBhdHRhY2hFdmVudChcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjb25zdCB0ZXJtaW5hdGlvbkV2ZW50ID0gXCJvbnBhZ2VoaWRlXCIgaW4gZ2xvYmFsVGhpcyA/IFwicGFnZWhpZGVcIiA6IFwidW5sb2FkXCI7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0ZXJtaW5hdGlvbkV2ZW50LCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlcigpIHtcbiAgZm9yIChsZXQgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBYSFI7XG5tb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcbiIsImNvbnN0IFRyYW5zcG9ydCA9IHJlcXVpcmUoXCIuLi90cmFuc3BvcnRcIik7XG5jb25zdCBwYXJzZXFzID0gcmVxdWlyZShcInBhcnNlcXNcIik7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKFwiZW5naW5lLmlvLXBhcnNlclwiKTtcbmNvbnN0IHllYXN0ID0gcmVxdWlyZShcInllYXN0XCIpO1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6cG9sbGluZ1wiKTtcblxuY2xhc3MgUG9sbGluZyBleHRlbmRzIFRyYW5zcG9ydCB7XG4gIC8qKlxuICAgKiBUcmFuc3BvcnQgbmFtZS5cbiAgICovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBcInBvbGxpbmdcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gICAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvT3BlbigpIHtcbiAgICB0aGlzLnBvbGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXVzZXMgcG9sbGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdXBvbiBidWZmZXJzIGFyZSBmbHVzaGVkIGFuZCB0cmFuc3BvcnQgaXMgcGF1c2VkXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgcGF1c2Uob25QYXVzZSkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwicGF1c2luZ1wiO1xuXG4gICAgY29uc3QgcGF1c2UgPSAoKSA9PiB7XG4gICAgICBkZWJ1ZyhcInBhdXNlZFwiKTtcbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwicGF1c2VkXCI7XG4gICAgICBvblBhdXNlKCk7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIGxldCB0b3RhbCA9IDA7XG5cbiAgICAgIGlmICh0aGlzLnBvbGxpbmcpIHtcbiAgICAgICAgZGVidWcoXCJ3ZSBhcmUgY3VycmVudGx5IHBvbGxpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXCIpO1xuICAgICAgICB0b3RhbCsrO1xuICAgICAgICB0aGlzLm9uY2UoXCJwb2xsQ29tcGxldGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVidWcoXCJwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZVwiKTtcbiAgICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgZGVidWcoXCJ3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXCIpO1xuICAgICAgICB0b3RhbCsrO1xuICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWJ1ZyhcInByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlXCIpO1xuICAgICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBwb2xsaW5nIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgcG9sbCgpIHtcbiAgICBkZWJ1ZyhcInBvbGxpbmdcIik7XG4gICAgdGhpcy5wb2xsaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmRvUG9sbCgpO1xuICAgIHRoaXMuZW1pdChcInBvbGxcIik7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25EYXRhKGRhdGEpIHtcbiAgICBkZWJ1ZyhcInBvbGxpbmcgZ290IGRhdGEgJXNcIiwgZGF0YSk7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBwYWNrZXQgPT4ge1xuICAgICAgLy8gaWYgaXRzIHRoZSBmaXJzdCBtZXNzYWdlIHdlIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgb3BlblxuICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgcGFja2V0LnR5cGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgIHRoaXMub25PcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICAgIGlmIChcImNsb3NlXCIgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICAgIHRoaXMub25QYWNrZXQocGFja2V0KTtcbiAgICB9O1xuXG4gICAgLy8gZGVjb2RlIHBheWxvYWRcbiAgICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKS5mb3JFYWNoKGNhbGxiYWNrKTtcblxuICAgIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gICAgaWYgKFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICAgIHRoaXMucG9sbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5lbWl0KFwicG9sbENvbXBsZXRlXCIpO1xuXG4gICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdpZ25vcmluZyBwb2xsIC0gdHJhbnNwb3J0IHN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvQ2xvc2UoKSB7XG4gICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICBkZWJ1ZyhcIndyaXRpbmcgY2xvc2UgcGFja2V0XCIpO1xuICAgICAgdGhpcy53cml0ZShbeyB0eXBlOiBcImNsb3NlXCIgfV0pO1xuICAgIH07XG5cbiAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgb3BlbiAtIGNsb3NpbmdcIik7XG4gICAgICBjbG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiBjYXNlIHdlJ3JlIHRyeWluZyB0byBjbG9zZSB3aGlsZVxuICAgICAgLy8gaGFuZHNoYWtpbmcgaXMgaW4gcHJvZ3Jlc3MgKEdILTE2NClcbiAgICAgIGRlYnVnKFwidHJhbnNwb3J0IG5vdCBvcGVuIC0gZGVmZXJyaW5nIGNsb3NlXCIpO1xuICAgICAgdGhpcy5vbmNlKFwib3BlblwiLCBjbG9zZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyBhIHBhY2tldHMgcGF5bG9hZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBwYWNrZXRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWluIGNhbGxiYWNrXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgd3JpdGUocGFja2V0cykge1xuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAgIHBhcnNlci5lbmNvZGVQYXlsb2FkKHBhY2tldHMsIGRhdGEgPT4ge1xuICAgICAgdGhpcy5kb1dyaXRlKGRhdGEsICgpID0+IHtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB1cmkoKSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJodHRwc1wiIDogXCJodHRwXCI7XG4gICAgbGV0IHBvcnQgPSBcIlwiO1xuXG4gICAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgICBpZiAoZmFsc2UgIT09IHRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgICAgcXVlcnlbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgfVxuXG4gICAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICAgIGlmIChcbiAgICAgIHRoaXMub3B0cy5wb3J0ICYmXG4gICAgICAoKFwiaHR0cHNcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgICAgKFwiaHR0cFwiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKVxuICAgICkge1xuICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgfVxuXG4gICAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gICAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgcXVlcnkgPSBcIj9cIiArIHF1ZXJ5O1xuICAgIH1cblxuICAgIGNvbnN0IGlwdjYgPSB0aGlzLm9wdHMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgIHJldHVybiAoXG4gICAgICBzY2hlbWEgK1xuICAgICAgXCI6Ly9cIiArXG4gICAgICAoaXB2NiA/IFwiW1wiICsgdGhpcy5vcHRzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLm9wdHMuaG9zdG5hbWUpICtcbiAgICAgIHBvcnQgK1xuICAgICAgdGhpcy5vcHRzLnBhdGggK1xuICAgICAgcXVlcnlcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9sbGluZztcbiIsImNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi4vZ2xvYmFsVGhpc1wiKTtcbmNvbnN0IG5leHRUaWNrID0gKCgpID0+IHtcbiAgY29uc3QgaXNQcm9taXNlQXZhaWxhYmxlID1cbiAgICB0eXBlb2YgUHJvbWlzZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBQcm9taXNlLnJlc29sdmUgPT09IFwiZnVuY3Rpb25cIjtcbiAgaWYgKGlzUHJvbWlzZUF2YWlsYWJsZSkge1xuICAgIHJldHVybiBjYiA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGNiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2IgPT4gc2V0VGltZW91dChjYiwgMCk7XG4gIH1cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXZWJTb2NrZXQ6IGdsb2JhbFRoaXMuV2ViU29ja2V0IHx8IGdsb2JhbFRoaXMuTW96V2ViU29ja2V0LFxuICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQ6IHRydWUsXG4gIGRlZmF1bHRCaW5hcnlUeXBlOiBcImFycmF5YnVmZmVyXCIsXG4gIG5leHRUaWNrXG59O1xuIiwiY29uc3QgVHJhbnNwb3J0ID0gcmVxdWlyZShcIi4uL3RyYW5zcG9ydFwiKTtcbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgcGFyc2VxcyA9IHJlcXVpcmUoXCJwYXJzZXFzXCIpO1xuY29uc3QgeWVhc3QgPSByZXF1aXJlKFwieWVhc3RcIik7XG5jb25zdCB7IHBpY2sgfSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuY29uc3Qge1xuICBXZWJTb2NrZXQsXG4gIHVzaW5nQnJvd3NlcldlYlNvY2tldCxcbiAgZGVmYXVsdEJpbmFyeVR5cGUsXG4gIG5leHRUaWNrXG59ID0gcmVxdWlyZShcIi4vd2Vic29ja2V0LWNvbnN0cnVjdG9yXCIpO1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0XCIpO1xuXG4vLyBkZXRlY3QgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnRcbmNvbnN0IGlzUmVhY3ROYXRpdmUgPVxuICB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJzdHJpbmdcIiAmJlxuICBuYXZpZ2F0b3IucHJvZHVjdC50b0xvd2VyQ2FzZSgpID09PSBcInJlYWN0bmF0aXZlXCI7XG5cbmNsYXNzIFdTIGV4dGVuZHMgVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNwb3J0IG5hbWUuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gXCJ3ZWJzb2NrZXRcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBzb2NrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9PcGVuKCkge1xuICAgIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVyaSA9IHRoaXMudXJpKCk7XG4gICAgY29uc3QgcHJvdG9jb2xzID0gdGhpcy5vcHRzLnByb3RvY29scztcblxuICAgIC8vIFJlYWN0IE5hdGl2ZSBvbmx5IHN1cHBvcnRzIHRoZSAnaGVhZGVycycgb3B0aW9uLCBhbmQgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgYW55dGhpbmcgZWxzZSBpcyBwYXNzZWRcbiAgICBjb25zdCBvcHRzID0gaXNSZWFjdE5hdGl2ZVxuICAgICAgPyB7fVxuICAgICAgOiBwaWNrKFxuICAgICAgICAgIHRoaXMub3B0cyxcbiAgICAgICAgICBcImFnZW50XCIsXG4gICAgICAgICAgXCJwZXJNZXNzYWdlRGVmbGF0ZVwiLFxuICAgICAgICAgIFwicGZ4XCIsXG4gICAgICAgICAgXCJrZXlcIixcbiAgICAgICAgICBcInBhc3NwaHJhc2VcIixcbiAgICAgICAgICBcImNlcnRcIixcbiAgICAgICAgICBcImNhXCIsXG4gICAgICAgICAgXCJjaXBoZXJzXCIsXG4gICAgICAgICAgXCJyZWplY3RVbmF1dGhvcml6ZWRcIixcbiAgICAgICAgICBcImxvY2FsQWRkcmVzc1wiLFxuICAgICAgICAgIFwicHJvdG9jb2xWZXJzaW9uXCIsXG4gICAgICAgICAgXCJvcmlnaW5cIixcbiAgICAgICAgICBcIm1heFBheWxvYWRcIixcbiAgICAgICAgICBcImZhbWlseVwiLFxuICAgICAgICAgIFwiY2hlY2tTZXJ2ZXJJZGVudGl0eVwiXG4gICAgICAgICk7XG5cbiAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgb3B0cy5oZWFkZXJzID0gdGhpcy5vcHRzLmV4dHJhSGVhZGVycztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy53cyA9XG4gICAgICAgIHVzaW5nQnJvd3NlcldlYlNvY2tldCAmJiAhaXNSZWFjdE5hdGl2ZVxuICAgICAgICAgID8gcHJvdG9jb2xzXG4gICAgICAgICAgICA/IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMpXG4gICAgICAgICAgICA6IG5ldyBXZWJTb2NrZXQodXJpKVxuICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICB9XG5cbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSB0aGlzLnNvY2tldC5iaW5hcnlUeXBlIHx8IGRlZmF1bHRCaW5hcnlUeXBlO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLndzLm9ub3BlbiA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgIHRoaXMud3MuX3NvY2tldC51bnJlZigpO1xuICAgICAgfVxuICAgICAgdGhpcy5vbk9wZW4oKTtcbiAgICB9O1xuICAgIHRoaXMud3Mub25jbG9zZSA9IHRoaXMub25DbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMud3Mub25tZXNzYWdlID0gZXYgPT4gdGhpcy5vbkRhdGEoZXYuZGF0YSk7XG4gICAgdGhpcy53cy5vbmVycm9yID0gZSA9PiB0aGlzLm9uRXJyb3IoXCJ3ZWJzb2NrZXQgZXJyb3JcIiwgZSk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHdyaXRlKHBhY2tldHMpIHtcbiAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAgIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBhY2tldCA9IHBhY2tldHNbaV07XG4gICAgICBjb25zdCBsYXN0UGFja2V0ID0gaSA9PT0gcGFja2V0cy5sZW5ndGggLSAxO1xuXG4gICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgdGhpcy5zdXBwb3J0c0JpbmFyeSwgZGF0YSA9PiB7XG4gICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7fTtcbiAgICAgICAgaWYgKCF1c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPVxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZGF0YSA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuIDwgdGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoXCJ3ZWJzb2NrZXQgY2xvc2VkIGJlZm9yZSBvbmNsb3NlIGV2ZW50XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhc3RQYWNrZXQpIHtcbiAgICAgICAgICAvLyBmYWtlIGRyYWluXG4gICAgICAgICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlclxuICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZHJhaW5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBjbG9zZVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uQ2xvc2UoKSB7XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHNvY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb0Nsb3NlKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgICAgdGhpcy53cyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgdXJpKCkge1xuICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwid3NzXCIgOiBcIndzXCI7XG4gICAgbGV0IHBvcnQgPSBcIlwiO1xuXG4gICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgKChcIndzc1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAgICAoXCJ3c1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKVxuICAgICkge1xuICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgfVxuXG4gICAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgICBpZiAodGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgICBxdWVyeVt0aGlzLm9wdHMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgICB9XG5cbiAgICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgfVxuXG4gICAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgICBxdWVyeSA9IFwiP1wiICsgcXVlcnk7XG4gICAgfVxuXG4gICAgY29uc3QgaXB2NiA9IHRoaXMub3B0cy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgcmV0dXJuIChcbiAgICAgIHNjaGVtYSArXG4gICAgICBcIjovL1wiICtcbiAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgcG9ydCArXG4gICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICBxdWVyeVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjaGVjaygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgISFXZWJTb2NrZXQgJiZcbiAgICAgICEoXCJfX2luaXRpYWxpemVcIiBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSlcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG4iLCJtb2R1bGUuZXhwb3J0cy5waWNrID0gKG9iaiwgLi4uYXR0cikgPT4ge1xuICByZXR1cm4gYXR0ci5yZWR1Y2UoKGFjYywgaykgPT4ge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGFjY1trXSA9IG9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbmNvbnN0IGhhc0NPUlMgPSByZXF1aXJlKFwiaGFzLWNvcnNcIik7XG5jb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4vZ2xvYmFsVGhpc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRzKSB7XG4gIGNvbnN0IHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgY29uc3QgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgY29uc3QgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFRoaXNbW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKV0oXG4gICAgICAgIFwiTWljcm9zb2Z0LlhNTEhUVFBcIlxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59O1xuIiwiY29uc3QgUEFDS0VUX1RZUEVTID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gbm8gTWFwID0gbm8gcG9seWZpbGxcblBBQ0tFVF9UWVBFU1tcIm9wZW5cIl0gPSBcIjBcIjtcblBBQ0tFVF9UWVBFU1tcImNsb3NlXCJdID0gXCIxXCI7XG5QQUNLRVRfVFlQRVNbXCJwaW5nXCJdID0gXCIyXCI7XG5QQUNLRVRfVFlQRVNbXCJwb25nXCJdID0gXCIzXCI7XG5QQUNLRVRfVFlQRVNbXCJtZXNzYWdlXCJdID0gXCI0XCI7XG5QQUNLRVRfVFlQRVNbXCJ1cGdyYWRlXCJdID0gXCI1XCI7XG5QQUNLRVRfVFlQRVNbXCJub29wXCJdID0gXCI2XCI7XG5cbmNvbnN0IFBBQ0tFVF9UWVBFU19SRVZFUlNFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbk9iamVjdC5rZXlzKFBBQ0tFVF9UWVBFUykuZm9yRWFjaChrZXkgPT4ge1xuICBQQUNLRVRfVFlQRVNfUkVWRVJTRVtQQUNLRVRfVFlQRVNba2V5XV0gPSBrZXk7XG59KTtcblxuY29uc3QgRVJST1JfUEFDS0VUID0geyB0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwicGFyc2VyIGVycm9yXCIgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBBQ0tFVF9UWVBFUyxcbiAgUEFDS0VUX1RZUEVTX1JFVkVSU0UsXG4gIEVSUk9SX1BBQ0tFVFxufTtcbiIsImNvbnN0IHsgUEFDS0VUX1RZUEVTX1JFVkVSU0UsIEVSUk9SX1BBQ0tFVCB9ID0gcmVxdWlyZShcIi4vY29tbW9uc1wiKTtcblxuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5cbmxldCBiYXNlNjRkZWNvZGVyO1xuaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlcikge1xuICBiYXNlNjRkZWNvZGVyID0gcmVxdWlyZShcImJhc2U2NC1hcnJheWJ1ZmZlclwiKTtcbn1cblxuY29uc3QgZGVjb2RlUGFja2V0ID0gKGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpID0+IHtcbiAgaWYgKHR5cGVvZiBlbmNvZGVkUGFja2V0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgZGF0YTogbWFwQmluYXJ5KGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpXG4gICAgfTtcbiAgfVxuICBjb25zdCB0eXBlID0gZW5jb2RlZFBhY2tldC5jaGFyQXQoMCk7XG4gIGlmICh0eXBlID09PSBcImJcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1lc3NhZ2VcIixcbiAgICAgIGRhdGE6IGRlY29kZUJhc2U2NFBhY2tldChlbmNvZGVkUGFja2V0LnN1YnN0cmluZygxKSwgYmluYXJ5VHlwZSlcbiAgICB9O1xuICB9XG4gIGNvbnN0IHBhY2tldFR5cGUgPSBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXTtcbiAgaWYgKCFwYWNrZXRUeXBlKSB7XG4gICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgfVxuICByZXR1cm4gZW5jb2RlZFBhY2tldC5sZW5ndGggPiAxXG4gICAgPyB7XG4gICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdLFxuICAgICAgICBkYXRhOiBlbmNvZGVkUGFja2V0LnN1YnN0cmluZygxKVxuICAgICAgfVxuICAgIDoge1xuICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXVxuICAgICAgfTtcbn07XG5cbmNvbnN0IGRlY29kZUJhc2U2NFBhY2tldCA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gIGlmIChiYXNlNjRkZWNvZGVyKSB7XG4gICAgY29uc3QgZGVjb2RlZCA9IGJhc2U2NGRlY29kZXIuZGVjb2RlKGRhdGEpO1xuICAgIHJldHVybiBtYXBCaW5hcnkoZGVjb2RlZCwgYmluYXJ5VHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgYmFzZTY0OiB0cnVlLCBkYXRhIH07IC8vIGZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnNcbiAgfVxufTtcblxuY29uc3QgbWFwQmluYXJ5ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgc3dpdGNoIChiaW5hcnlUeXBlKSB7XG4gICAgY2FzZSBcImJsb2JcIjpcbiAgICAgIHJldHVybiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgQmxvYihbZGF0YV0pIDogZGF0YTtcbiAgICBjYXNlIFwiYXJyYXlidWZmZXJcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGRhdGE7IC8vIGFzc3VtaW5nIHRoZSBkYXRhIGlzIGFscmVhZHkgYW4gQXJyYXlCdWZmZXJcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVQYWNrZXQ7XG4iLCJjb25zdCB7IFBBQ0tFVF9UWVBFUyB9ID0gcmVxdWlyZShcIi4vY29tbW9uc1wiKTtcblxuY29uc3Qgd2l0aE5hdGl2ZUJsb2IgPVxuICB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcblxuLy8gQXJyYXlCdWZmZXIuaXNWaWV3IG1ldGhvZCBpcyBub3QgZGVmaW5lZCBpbiBJRTEwXG5jb25zdCBpc1ZpZXcgPSBvYmogPT4ge1xuICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gXCJmdW5jdGlvblwiXG4gICAgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxuICAgIDogb2JqICYmIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5cbmNvbnN0IGVuY29kZVBhY2tldCA9ICh7IHR5cGUsIGRhdGEgfSwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSA9PiB7XG4gIGlmICh3aXRoTmF0aXZlQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIGlmIChzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5jb2RlQmxvYkFzQmFzZTY0KGRhdGEsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgd2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmXG4gICAgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcoZGF0YSkpXG4gICkge1xuICAgIGlmIChzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGRhdGEgOiBkYXRhLmJ1ZmZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQobmV3IEJsb2IoW2RhdGFdKSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuICAvLyBwbGFpbiBzdHJpbmdcbiAgcmV0dXJuIGNhbGxiYWNrKFBBQ0tFVF9UWVBFU1t0eXBlXSArIChkYXRhIHx8IFwiXCIpKTtcbn07XG5cbmNvbnN0IGVuY29kZUJsb2JBc0Jhc2U2NCA9IChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjb250ZW50ID0gZmlsZVJlYWRlci5yZXN1bHQuc3BsaXQoXCIsXCIpWzFdO1xuICAgIGNhbGxiYWNrKFwiYlwiICsgY29udGVudCk7XG4gIH07XG4gIHJldHVybiBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZGF0YSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZVBhY2tldDtcbiIsImNvbnN0IGVuY29kZVBhY2tldCA9IHJlcXVpcmUoXCIuL2VuY29kZVBhY2tldFwiKTtcbmNvbnN0IGRlY29kZVBhY2tldCA9IHJlcXVpcmUoXCIuL2RlY29kZVBhY2tldFwiKTtcblxuY29uc3QgU0VQQVJBVE9SID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMCk7IC8vIHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZWxpbWl0ZXIjQVNDSUlfZGVsaW1pdGVkX3RleHRcblxuY29uc3QgZW5jb2RlUGF5bG9hZCA9IChwYWNrZXRzLCBjYWxsYmFjaykgPT4ge1xuICAvLyBzb21lIHBhY2tldHMgbWF5IGJlIGFkZGVkIHRvIHRoZSBhcnJheSB3aGlsZSBlbmNvZGluZywgc28gdGhlIGluaXRpYWwgbGVuZ3RoIG11c3QgYmUgc2F2ZWRcbiAgY29uc3QgbGVuZ3RoID0gcGFja2V0cy5sZW5ndGg7XG4gIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gIGxldCBjb3VudCA9IDA7XG5cbiAgcGFja2V0cy5mb3JFYWNoKChwYWNrZXQsIGkpID0+IHtcbiAgICAvLyBmb3JjZSBiYXNlNjQgZW5jb2RpbmcgZm9yIGJpbmFyeSBwYWNrZXRzXG4gICAgZW5jb2RlUGFja2V0KHBhY2tldCwgZmFsc2UsIGVuY29kZWRQYWNrZXQgPT4ge1xuICAgICAgZW5jb2RlZFBhY2tldHNbaV0gPSBlbmNvZGVkUGFja2V0O1xuICAgICAgaWYgKCsrY291bnQgPT09IGxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhlbmNvZGVkUGFja2V0cy5qb2luKFNFUEFSQVRPUikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IGRlY29kZVBheWxvYWQgPSAoZW5jb2RlZFBheWxvYWQsIGJpbmFyeVR5cGUpID0+IHtcbiAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBlbmNvZGVkUGF5bG9hZC5zcGxpdChTRVBBUkFUT1IpO1xuICBjb25zdCBwYWNrZXRzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZWNvZGVkUGFja2V0ID0gZGVjb2RlUGFja2V0KGVuY29kZWRQYWNrZXRzW2ldLCBiaW5hcnlUeXBlKTtcbiAgICBwYWNrZXRzLnB1c2goZGVjb2RlZFBhY2tldCk7XG4gICAgaWYgKGRlY29kZWRQYWNrZXQudHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhY2tldHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcHJvdG9jb2w6IDQsXG4gIGVuY29kZVBhY2tldCxcbiAgZW5jb2RlUGF5bG9hZCxcbiAgZGVjb2RlUGFja2V0LFxuICBkZWNvZGVQYXlsb2FkXG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iLCIvKipcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICB2YXIgc3RyID0gJyc7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xuICB2YXIgcXJ5ID0ge307XG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICB9XG4gIHJldHVybiBxcnk7XG59O1xuIiwiLyoqXG4gKiBQYXJzZXMgYW4gVVJJXG4gKlxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XG5cbnZhciBwYXJ0cyA9IFtcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XG4gICAgdmFyIHNyYyA9IHN0cixcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxuICAgICAgICB1cmkgPSB7fSxcbiAgICAgICAgaSA9IDE0O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcbiAgICB9XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xuICAgIH1cblxuICAgIHVyaS5wYXRoTmFtZXMgPSBwYXRoTmFtZXModXJpLCB1cmlbJ3BhdGgnXSk7XG4gICAgdXJpLnF1ZXJ5S2V5ID0gcXVlcnlLZXkodXJpLCB1cmlbJ3F1ZXJ5J10pO1xuXG4gICAgcmV0dXJuIHVyaTtcbn07XG5cbmZ1bmN0aW9uIHBhdGhOYW1lcyhvYmosIHBhdGgpIHtcbiAgICB2YXIgcmVneCA9IC9cXC97Miw5fS9nLFxuICAgICAgICBuYW1lcyA9IHBhdGgucmVwbGFjZShyZWd4LCBcIi9cIikuc3BsaXQoXCIvXCIpO1xuXG4gICAgaWYgKHBhdGguc3Vic3RyKDAsIDEpID09ICcvJyB8fCBwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuYW1lcy5zcGxpY2UoMCwgMSk7XG4gICAgfVxuICAgIGlmIChwYXRoLnN1YnN0cihwYXRoLmxlbmd0aCAtIDEsIDEpID09ICcvJykge1xuICAgICAgICBuYW1lcy5zcGxpY2UobmFtZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVzO1xufVxuXG5mdW5jdGlvbiBxdWVyeUtleSh1cmksIHF1ZXJ5KSB7XG4gICAgdmFyIGRhdGEgPSB7fTtcblxuICAgIHF1ZXJ5LnJlcGxhY2UoLyg/Ol58JikoW14mPV0qKT0/KFteJl0qKS9nLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuICAgICAgICBpZiAoJDEpIHtcbiAgICAgICAgICAgIGRhdGFbJDFdID0gJDI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8vIElubGluZWQgLyBzaG9ydGVuZWQgdmVyc2lvbiBvZiBga2luZE9mYCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2tpbmQtb2ZcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiAnYXJyYXknO1xuICBpZiAoaXNEYXRlKHZhbCkpIHJldHVybiAnZGF0ZSc7XG4gIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICB2YXIgY29uc3RydWN0b3JOYW1lID0gY3Rvck5hbWUodmFsKTtcblxuICBzd2l0Y2ggKGNvbnN0cnVjdG9yTmFtZSkge1xuICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnTWFwJzpcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgfSAvLyBvdGhlclxuXG5cbiAgcmV0dXJuIHR5cGUuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKTtcbn1cblxuZnVuY3Rpb24gY3Rvck5hbWUodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nID8gdmFsLmNvbnN0cnVjdG9yLm5hbWUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHZhbC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0eXBlT2ZWYWwgPSBtaW5pS2luZE9mKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdHlwZU9mVmFsO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsga2luZE9mKGlucHV0U3RhdGUpICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTIpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgJ1wiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiJyBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNCkgOiBcIldoZW4gY2FsbGVkIHdpdGggYW4gYWN0aW9uIG9mIHR5cGUgXCIgKyAoYWN0aW9uVHlwZSA/IFwiXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgOiAnKHVua25vd24gdHlwZSknKSArIFwiLCB0aGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIF9rZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYpIDogXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGJ1dCBpbnN0ZWFkIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YoYWN0aW9uQ3JlYXRvcnMpICsgXCInLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6ICdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSksIHt9LCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSB2b2lkIDA7XG5jb25zdCBpc19iaW5hcnlfMSA9IHJlcXVpcmUoXCIuL2lzLWJpbmFyeVwiKTtcbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgfCBCbG9iIHwgRmlsZSBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvbnN0cnVjdFBhY2tldChwYWNrZXQpIHtcbiAgICBjb25zdCBidWZmZXJzID0gW107XG4gICAgY29uc3QgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICAgIGNvbnN0IHBhY2sgPSBwYWNrZXQ7XG4gICAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICAgIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gICAgcmV0dXJuIHsgcGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzIH07XG59XG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZGVjb25zdHJ1Y3RQYWNrZXQ7XG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICAgIGlmICghZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgaWYgKGlzX2JpbmFyeV8xLmlzQmluYXJ5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHJlY29uc3RydWN0UGFja2V0KHBhY2tldCwgYnVmZmVycykge1xuICAgIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgICByZXR1cm4gcGFja2V0O1xufVxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IHJlY29uc3RydWN0UGFja2V0O1xuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZWNvZGVyID0gZXhwb3J0cy5FbmNvZGVyID0gZXhwb3J0cy5QYWNrZXRUeXBlID0gZXhwb3J0cy5wcm90b2NvbCA9IHZvaWQgMDtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBiaW5hcnlfMSA9IHJlcXVpcmUoXCIuL2JpbmFyeVwiKTtcbmNvbnN0IGlzX2JpbmFyeV8xID0gcmVxdWlyZShcIi4vaXMtYmluYXJ5XCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tcGFyc2VyXCIpO1xuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5wcm90b2NvbCA9IDU7XG52YXIgUGFja2V0VHlwZTtcbihmdW5jdGlvbiAoUGFja2V0VHlwZSkge1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkNPTk5FQ1RcIl0gPSAwXSA9IFwiQ09OTkVDVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkRJU0NPTk5FQ1RcIl0gPSAxXSA9IFwiRElTQ09OTkVDVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkVWRU5UXCJdID0gMl0gPSBcIkVWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQUNLXCJdID0gM10gPSBcIkFDS1wiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkNPTk5FQ1RfRVJST1JcIl0gPSA0XSA9IFwiQ09OTkVDVF9FUlJPUlwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkJJTkFSWV9FVkVOVFwiXSA9IDVdID0gXCJCSU5BUllfRVZFTlRcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfQUNLXCJdID0gNl0gPSBcIkJJTkFSWV9BQ0tcIjtcbn0pKFBhY2tldFR5cGUgPSBleHBvcnRzLlBhY2tldFR5cGUgfHwgKGV4cG9ydHMuUGFja2V0VHlwZSA9IHt9KSk7XG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqL1xuY2xhc3MgRW5jb2RlciB7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gICAgICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICAgICAqL1xuICAgIGVuY29kZShvYmopIHtcbiAgICAgICAgZGVidWcoXCJlbmNvZGluZyBwYWNrZXQgJWpcIiwgb2JqKTtcbiAgICAgICAgaWYgKG9iai50eXBlID09PSBQYWNrZXRUeXBlLkVWRU5UIHx8IG9iai50eXBlID09PSBQYWNrZXRUeXBlLkFDSykge1xuICAgICAgICAgICAgaWYgKGlzX2JpbmFyeV8xLmhhc0JpbmFyeShvYmopKSB7XG4gICAgICAgICAgICAgICAgb2JqLnR5cGUgPVxuICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5FVkVOVFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlQXNCaW5hcnkob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RoaXMuZW5jb2RlQXNTdHJpbmcob2JqKV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICAgICAqL1xuICAgIGVuY29kZUFzU3RyaW5nKG9iaikge1xuICAgICAgICAvLyBmaXJzdCBpcyB0eXBlXG4gICAgICAgIGxldCBzdHIgPSBcIlwiICsgb2JqLnR5cGU7XG4gICAgICAgIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfQUNLKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgXCItXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAgICAgICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgICAgICAgaWYgKG9iai5uc3AgJiYgXCIvXCIgIT09IG9iai5uc3ApIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmoubnNwICsgXCIsXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gICAgICAgIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgICAgICAgICAgc3RyICs9IG9iai5pZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBqc29uIGRhdGFcbiAgICAgICAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICAgICAgICAgIHN0ciArPSBKU09OLnN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoXCJlbmNvZGVkICVqIGFzICVzXCIsIG9iaiwgc3RyKTtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gICAgICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICAgICAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICAgICAqL1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaikge1xuICAgICAgICBjb25zdCBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeV8xLmRlY29uc3RydWN0UGFja2V0KG9iaik7XG4gICAgICAgIGNvbnN0IHBhY2sgPSB0aGlzLmVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuICAgICAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgICAgIHJldHVybiBidWZmZXJzOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgICB9XG59XG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKi9cbmNsYXNzIERlY29kZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICAgICAqL1xuICAgIGFkZChvYmopIHtcbiAgICAgICAgbGV0IHBhY2tldDtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhY2tldCA9IHRoaXMuZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgICAgICAgICBpZiAocGFja2V0LnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICAgICAgcGFja2V0LnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgICAgIC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcbiAgICAgICAgICAgICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc19iaW5hcnlfMS5pc0JpbmFyeShvYmopIHx8IG9iai5iYXNlNjQpIHtcbiAgICAgICAgICAgIC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgICAgICAgICAgICBpZiAocGFja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5lbWl0KFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZTogXCIgKyBvYmopO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICAgICAqL1xuICAgIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAvLyBsb29rIHVwIHR5cGVcbiAgICAgICAgY29uc3QgcCA9IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFBhY2tldFR5cGVbcC50eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHBhY2tldCB0eXBlIFwiICsgcC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gICAgICAgIGlmIChwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09IFwiLVwiICYmIGkgIT0gc3RyLmxlbmd0aCkgeyB9XG4gICAgICAgICAgICBjb25zdCBidWYgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGF0dGFjaG1lbnRzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gICAgICAgIGlmIChcIi9cIiA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKFwiLFwiID09PSBjKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLm5zcCA9IHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcC5uc3AgPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGlkXG4gICAgICAgIGNvbnN0IG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgICAgICAgaWYgKFwiXCIgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLmlkID0gTnVtYmVyKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgICAgICAgICAgaWYgKERlY29kZXIuaXNQYXlsb2FkVmFsaWQocC50eXBlLCBwYXlsb2FkKSkge1xuICAgICAgICAgICAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBheWxvYWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoXCJkZWNvZGVkICVzIGFzICVqXCIsIHN0ciwgcCk7XG4gICAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBzdGF0aWMgaXNQYXlsb2FkVmFsaWQodHlwZSwgcGF5bG9hZCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIjtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVF9FUlJPUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRVZFTlQ6XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHBheWxvYWQpICYmIHBheWxvYWQubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBCaW5hcnlSZWNvbnN0cnVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgICAgICAgdGhpcy5wYWNrZXQgPSBwYWNrZXQ7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICAgICAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gICAgICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAgICAgKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAgICAgKi9cbiAgICB0YWtlQmluYXJ5RGF0YShiaW5EYXRhKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICAgICAgICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHtcbiAgICAgICAgICAgIC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gYmluYXJ5XzEucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBwYWNrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAgICAgKi9cbiAgICBmaW5pc2hlZFJlY29uc3RydWN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNCaW5hcnkgPSBleHBvcnRzLmlzQmluYXJ5ID0gdm9pZCAwO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBpc1ZpZXcgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEJsb2IpID09PSBcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVwiKTtcbmNvbnN0IHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgRmlsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEZpbGUpID09PSBcIltvYmplY3QgRmlsZUNvbnN0cnVjdG9yXVwiKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIEJ1ZmZlciwgYW4gQXJyYXlCdWZmZXIsIGEgQmxvYiBvciBhIEZpbGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gICAgcmV0dXJuICgod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpO1xufVxuZXhwb3J0cy5pc0JpbmFyeSA9IGlzQmluYXJ5O1xuZnVuY3Rpb24gaGFzQmluYXJ5KG9iaiwgdG9KU09OKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0JpbmFyeShvYmopKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAob2JqLnRvSlNPTiAmJlxuICAgICAgICB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5oYXNCaW5hcnkgPSBoYXNCaW5hcnk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdvcycpXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IGlvLCB7IFNvY2tldCB9IGZyb20gJ3NvY2tldC5pby1jbGllbnQnO1xuXG5pbXBvcnQgQm9vdE9wdGlvbiBmcm9tICdjb21tb24vQm9vdE9wdGlvbic7XG5pbXBvcnQgU2VxdWVuY2UgZnJvbSAnY29tbW9uL1NlcXVlbmNlJztcbmltcG9ydCBjb25mIGZyb20gJ2NvbW1vbi9jb25mJztcbmltcG9ydCBkZWZpbmUgZnJvbSAnY29tbW9uL2RlZmluZSc7XG5cbmltcG9ydCBXc0NsaWVudFRvQXBpUmVxdWVzdEFjdGlvbnMgZnJvbSAnYXBpL2FjdGlvbnMvd3MvYXBpVG9TZXJ2ZXJSZXF1ZXN0JztcbmltcG9ydCBXc1NlcnZlclRvQXBpQnJvYWRjYXN0QWN0aW9uIGZyb20gJ2FwaS9hY3Rpb25zL3dzL3NlcnZlclRvQXBpQnJhZGNhc3QnO1xuaW1wb3J0IFdzU2VydmVyVG9BcGlFbWl0QWN0aW9uIGZyb20gJ2FwaS9hY3Rpb25zL3dzL3NlcnZlclRvQXBpRW1pdCc7XG5pbXBvcnQgQXBpU3RhdGUgZnJvbSAnYXBpL3N0b3JlJztcbmltcG9ydCBXc0FwaVdvcmtlciBmcm9tICdhcGkvd3MuYXBpLndvcmtlcic7XG5cbmltcG9ydCBhcGlTdG9yZSBmcm9tICcuL2FwaVN0b3JlJztcblxudHlwZSBTdG9yZSA9IGFueTtcblxuLy8gVE9ETzog44Ov44O844Kr44O844Gv5a2Q44Ov44O844Kr44O844KS55Sf5oiQ44Gn44GN44KLKOODkeODleOCqeODvOODnuODs+OCueWQkeS4iilcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdzIHtcbiAgaWQ6IHN0cmluZztcbiAgd2ViV29ya2VyOiBXc0FwaVdvcmtlcjtcbiAgc3RvcmVzOiB7IFtzOiBzdHJpbmddOiBTdG9yZSB9IHwge30gPSB7fTtcbiAgaW9zOiB7IFtzOiBzdHJpbmddOiBTb2NrZXQgfSB8IHt9ID0ge307XG4gIG1ldGhvZHM6IHsgW3M6IHN0cmluZ106IEZ1bmN0aW9uIH0gfCB7fSA9IHt9O1xuICBwdWJsaWNDYWxsYmFja3M6IHsgW3M6IHN0cmluZ106IEZ1bmN0aW9uIH0gfCB7fSA9IHt9O1xuICBzdGF0aWMgZ2V0IHNlcnZlcigpIHtcbiAgICByZXR1cm4gY29uZi5lbnYgPT09IGRlZmluZS5ERVZFTE9QTUVOVCB8fCBjb25mLmVudiA9PT0gZGVmaW5lLkxPQ0FMSE9TVCA/IGRlZmluZS5ERVZFTE9QTUVOVF9ET01BSU4gOiBkZWZpbmUuUFJPRFVDVElPTl9ET01BSU47XG4gIH1cbiAgc3RhdGljIGdldCBvcHRpb24oKSB7XG4gICAgcmV0dXJuIHsgZm9yY2VOZXc6IHRydWUgfTtcbiAgfVxuICBjb25zdHJ1Y3Rvcih3ZWJXb3JrZXI6IFdzQXBpV29ya2VyKSB7XG4gICAgdGhpcy51c2UgPSB0aGlzLnVzZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMudHVuZSA9IHRoaXMudHVuZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMudHVuZWQgPSB0aGlzLnR1bmVkLmJpbmQodGhpcyk7XG4gICAgdGhpcy51bnR1bmUgPSB0aGlzLnVudHVuZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZXhlID0gdGhpcy5leGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUmVzcG9uc2VNZUFQSSA9IHRoaXMub25SZXNwb25zZU1lQVBJLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vZmZSZXNwb25zZUNoQVBJID0gdGhpcy5vZmZSZXNwb25zZUNoQVBJLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdWJzY3JpYmUgPSB0aGlzLnN1YnNjcmliZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZXhlQ2FsbGJhY2sgPSB0aGlzLmV4ZUNhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbiA9IHRoaXMub24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9mZiA9IHRoaXMub2ZmLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLndlYldvcmtlciA9IHdlYldvcmtlcjtcbiAgICB0aGlzLndlYldvcmtlci5wb3N0TWVzc2FnZSgnV1NfQ09OU1RSVUNURUQnLCB7IGlvVHlwZTogU2VxdWVuY2UuQVBJX1NFVFVQIH0pO1xuICB9XG5cbiAgLy8gY2hhbmdlIGlvIGNvbm5lY3Rpb24uXG4gIHB1YmxpYyB1c2UoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLnN0b3Jlc1tpZF0gJiYgdGhpcy5pb3NbdGhpcy5pZF0pIHtcbiAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZXhlKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IFN0b3JlKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXNbbWV0aG9kXSAmJiB0eXBlb2YgdGhpc1ttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW21ldGhvZF0ocGFyYW1zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5tZXRob2RzW21ldGhvZF0gJiYgdHlwZW9mIHRoaXMubWV0aG9kc1ttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLm1ldGhvZHNbbWV0aG9kXShwYXJhbXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIG9uUmVzcG9uc2VDaEFQSShjaCkge1xuICAgIGNvbnN0IGdldFJlc3BvbnNlQ2hBUEkgPSAoYWN0aW9uTWV0aG9kKSA9PiB7XG4gICAgICByZXR1cm4gKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdGlvblN0YXRlID0gYWN0aW9uTWV0aG9kKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5zdG9yZXNbdGhpcy5pZF0gJiYgdGhpcy5zdG9yZXNbdGhpcy5pZF0uZGlzcGF0Y2goYWN0aW9uU3RhdGUpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2FsbGJhY2s6IGFueSA9IGdldFJlc3BvbnNlQ2hBUEkoV3NTZXJ2ZXJUb0FwaUJyb2FkY2FzdEFjdGlvbik7XG4gICAgdGhpcy5vbihjaCwgY2FsbGJhY2spO1xuICB9XG5cbiAgcHVibGljIG9mZlJlc3BvbnNlQ2hBUEkoY2gpIHtcbiAgICB0aGlzLm9mZihjaCk7XG4gIH1cblxuICBwcml2YXRlIGdldElvUGFyYW1zKGJvb3RPcHRpb246IEJvb3RPcHRpb24pOiBzdHJpbmcge1xuICAgIGxldCBwYXJhbXMgPSAnJztcbiAgICBPYmplY3Qua2V5cyhib290T3B0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICdpZCcpIHJldHVybjtcbiAgICAgIGlmIChrZXkgPT09ICdkZWZhdWx0UHJvcHMnKSByZXR1cm47XG4gICAgICBjb25zdCB2YWx1ZSA9IGJvb3RPcHRpb25ba2V5XTtcbiAgICAgIHBhcmFtcyArPSBgJHtrZXl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX0mYDtcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyYW1zLnJlcGxhY2UoLyYkLywgJycpO1xuICB9XG5cbiAgcHJpdmF0ZSB0dW5lKGJvb3RPcHRpb246IEJvb3RPcHRpb24pIHtcbiAgICBpZiAoIXRoaXMudXNlKGJvb3RPcHRpb24uaWQpKSB7XG4gICAgICAvLyBpZFxuICAgICAgdGhpcy5pZCA9IGJvb3RPcHRpb24uaWQ7XG5cbiAgICAgIC8vIHN0b3JlLlxuICAgICAgdGhpcy5zdG9yZXNbdGhpcy5pZF0gPSBhcGlTdG9yZSgpO1xuICAgICAgdGhpcy5zdG9yZXNbdGhpcy5pZF0uc3Vic2NyaWJlKHRoaXMuc3Vic2NyaWJlKTtcblxuICAgICAgY29uc3QgYXBpU3RhdGUgPSBuZXcgQXBpU3RhdGUoYm9vdE9wdGlvbik7XG5cbiAgICAgIHRoaXMuc3RvcmVzW3RoaXMuaWRdLmRpc3BhdGNoKHsgLi4uYXBpU3RhdGUsIHR5cGU6ICdTRVRVUEVEX0FQSV9TVE9SRScgfSk7XG5cbiAgICAgIC8vIHdzIHNlcnZlci5cbiAgICAgIGNvbnN0IGlvUGFyYW1zID0gdGhpcy5nZXRJb1BhcmFtcyhib290T3B0aW9uKTtcbiAgICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7U2VxdWVuY2UuSFRUUFNfUFJPVE9DT0x9Ly8ke1dzLnNlcnZlcn06JHtkZWZpbmUuUE9SVFMuU09DS0VUX0lPfT8ke2lvUGFyYW1zfWA7XG4gICAgICB0aGlzLmlvc1t0aGlzLmlkXSA9IGlvKGVuZHBvaW50LCBXcy5vcHRpb24pO1xuICAgICAgdGhpcy5pb3NbdGhpcy5pZF0ub24oJ2Nvbm5lY3QnLCB0aGlzLnR1bmVkKTtcblxuICAgICAgdGhpcy5vblJlc3BvbnNlQ2hBUEkoYm9vdE9wdGlvbi5jaCk7XG4gICAgICB0aGlzLm9uUmVxdWVzdEFQSSgpO1xuICAgICAgdGhpcy5vblJlc3BvbnNlTWVBUEkoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVudHVuZShib290T3B0aW9uOiBCb290T3B0aW9uKSB7XG4gICAgY29uc3QgaWQgPSBib290T3B0aW9uICYmIGJvb3RPcHRpb24uaWQgPyBib290T3B0aW9uLmlkIDogdGhpcy5pZDtcbiAgICBpZiAodGhpcy5pb3NbaWRdKSB7XG4gICAgICB0aGlzLmlvc1tpZF1bJ2Rpc2Nvbm5lY3QnXSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaW9zW2lkXTtcbiAgICAgIGRlbGV0ZSB0aGlzLnN0b3Jlc1tpZF07XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5pb3MpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5pZCA9IE9iamVjdC5rZXlzKHRoaXMuaW9zKVswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHR1bmVkKCkge1xuICAgIHRoaXMud2ViV29ya2VyLnBvc3RNZXNzYWdlKCdUVU5FRCcsIHsgaWQ6IHRoaXMuaWQsIGlvVHlwZTogU2VxdWVuY2UuQVBJX1NFVFVQIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBvblJlcXVlc3RBUEkoKSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IFdzQ2xpZW50VG9BcGlSZXF1ZXN0QWN0aW9ucztcbiAgICBjb25zdCBhY3Rpb25LZXlzID0gT2JqZWN0LmtleXMoYWN0aW9ucyk7XG4gICAgY29uc3QgYWN0aW9uTGVuZ3RoID0gYWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgY29uc3QgZ2V0Q29yZUFQSSA9IChhY3Rpb25OYW1lLCBiZWZvcmVGdW5jdGlvbikgPT4ge1xuICAgICAgcmV0dXJuIChyZXF1ZXN0UGFyYW1zLCBjYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZHV4U3RhdGUgPSB0aGlzLnN0b3Jlc1t0aGlzLmlkXS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBfcmVxdWVzdFN0YXRlID0gU2VxdWVuY2UuZ2V0UmVxdWVzdFN0YXRlKGFjdGlvbk5hbWUsIHJlZHV4U3RhdGUsIHJlcXVlc3RQYXJhbXMpO1xuICAgICAgICBjb25zdCBfYWN0aW9uU3RhdGUgPSBTZXF1ZW5jZS5nZXRSZXF1ZXN0QWN0aW9uU3RhdGUoYWN0aW9uTmFtZSwgcmVxdWVzdFBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHsgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSB9ID0gYmVmb3JlRnVuY3Rpb24ocmVkdXhTdGF0ZSwgX3JlcXVlc3RTdGF0ZSwgX2FjdGlvblN0YXRlKTtcbiAgICAgICAgdGhpcy5wdWJsaWNDYWxsYmFja3NbcmVxdWVzdFN0YXRlLnR5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuaW9zW3RoaXMuaWRdLmVtaXQocmVxdWVzdFN0YXRlLnR5cGUsIHJlcXVlc3RTdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3Jlc1t0aGlzLmlkXS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBmb3IgKGxldCBhY3Rpb25Ob2RlQ250ID0gMDsgYWN0aW9uTm9kZUNudCA8IGFjdGlvbkxlbmd0aDsgYWN0aW9uTm9kZUNudCsrKSB7XG4gICAgICBjb25zdCBhY3Rpb25OYW1lID0gYWN0aW9uS2V5c1thY3Rpb25Ob2RlQ250XTtcbiAgICAgIGNvbnN0IGFjdGlvblBsYWluTmFtZSA9IGFjdGlvbk5hbWUucmVwbGFjZShTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QsICcnKTtcbiAgICAgIGNvbnN0IGJlZm9yZUZ1bmN0aW9uID0gYWN0aW9uc1thY3Rpb25OYW1lXTtcbiAgICAgIHRoaXMubWV0aG9kc1thY3Rpb25QbGFpbk5hbWVdID0gZ2V0Q29yZUFQSShhY3Rpb25OYW1lLCBiZWZvcmVGdW5jdGlvbik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblJlc3BvbnNlTWVBUEkoKSB7XG4gICAgY29uc3QgZ2V0VG9NZUFQSSA9IChhY3Rpb24pID0+IHtcbiAgICAgIHJldHVybiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uU3RhdGUgPSBhY3Rpb24ocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnN0b3Jlc1t0aGlzLmlkXS5kaXNwYXRjaChhY3Rpb25TdGF0ZSk7XG4gICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgY2FsbGJhY2s6IGFueSA9IGdldFRvTWVBUEkoV3NTZXJ2ZXJUb0FwaUVtaXRBY3Rpb24pO1xuICAgIHRoaXMub24oU2VxdWVuY2UuQ0FUQ0hfTUVfS0VZLCBjYWxsYmFjayk7XG4gIH1cblxuICBwcml2YXRlIG9uKG9uS2V5LCBjYWxsYmFjayA9ICgpID0+IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlvc1t0aGlzLmlkXS5fY2FsbGJhY2tzW2AkJHtvbktleX1gXSkge1xuICAgICAgdGhpcy5pb3NbdGhpcy5pZF0ub24ob25LZXksIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9mZihvZmZLZXkpIHtcbiAgICBpZiAodGhpcy5pb3NbdGhpcy5pZF0uX2NhbGxiYWNrc1tgJCR7b2ZmS2V5fWBdKSB7XG4gICAgICB0aGlzLmlvc1t0aGlzLmlkXS5vZmYob2ZmS2V5KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZShzdGF0ZSkge1xuICAgIGNvbnN0IGFwaVN0YXRlID0gdGhpcy5zdG9yZXNbdGhpcy5pZF0uZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBpb1R5cGUgPSBTZXF1ZW5jZS5jb252ZXJ0U2VydmVyVG9BcGlJb1R5cGUodGhpcy5pZCwgYXBpU3RhdGUuYXBwLmFjdGlvbmVkKTtcbiAgICB0aGlzLmV4ZUNhbGxiYWNrKGFwaVN0YXRlLmFwcC5hY3Rpb25lZCwgYXBpU3RhdGUpO1xuICAgIHRoaXMud2ViV29ya2VyLnBvc3RNZXNzYWdlKGFwaVN0YXRlLmFwcC5hY3Rpb25lZCwgeyAuLi5hcGlTdGF0ZSwgaW9UeXBlIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBleGVDYWxsYmFjayhtZXRob2QsIGFwaVN0YXRlKSB7XG4gICAgY29uc3QgeyBhY3Rpb25UeXBlLCBhY3Rpb25OYW1lIH0gPSBTZXF1ZW5jZS5nZXRTZXF1ZW5jZUFjdGlvbk1hcChtZXRob2QpO1xuICAgIGlmIChhY3Rpb25OYW1lICE9PSBTZXF1ZW5jZS5BUElfQlJPQURDQVNUX0NBTExCQUNLKSB7XG4gICAgICBpZiAoYWN0aW9uVHlwZSA9PT0gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCkge1xuICAgICAgICBpZiAodGhpcy5wdWJsaWNDYWxsYmFja3NbYWN0aW9uTmFtZV0pIHtcbiAgICAgICAgICBjb25zdCB7IHBvc3RzLCB0aHJlYWQsIHVzZXIgfSA9IGFwaVN0YXRlO1xuICAgICAgICAgIHRoaXMucHVibGljQ2FsbGJhY2tzW2FjdGlvbk5hbWVdKGFwaVN0YXRlLCB7IHBvc3RzLCB0aHJlYWQsIHVpZDogdXNlci51aWQgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWN0aW9uVHlwZSA9PT0gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUKSB7XG4gICAgICBpZiAodGhpcy5wdWJsaWNDYWxsYmFja3NbU2VxdWVuY2UuQVBJX0JST0FEQ0FTVF9DQUxMQkFDS10pIHtcbiAgICAgICAgY29uc3QgeyBwb3N0cywgdGhyZWFkLCB1c2VyIH0gPSBhcGlTdGF0ZTtcbiAgICAgICAgdGhpcy5wdWJsaWNDYWxsYmFja3NbU2VxdWVuY2UuQVBJX0JST0FEQ0FTVF9DQUxMQkFDS10oYWN0aW9uTmFtZSwgeyBwb3N0cywgdGhyZWFkLCB1aWQ6IHVzZXIudWlkIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFNlcXVlbmNlIGZyb20gJ2NvbW1vbi9TZXF1ZW5jZSc7XG5pbXBvcnQgRW1vdGlvbnMgZnJvbSAnY29tbW9uL2Vtb3Rpb25zL2luZGV4JztcblxuY29uc3QgZW1vdGlvbnMgPSBuZXcgRW1vdGlvbnMoKTtcbmxldCBhY3Rpb25zID0ge307XG5cbk9iamVjdC5rZXlzKFNlcXVlbmNlLm1hcCkuZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgY29uc3QgdHlwZSA9IGAke1NlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVH0ke2VuZHBvaW50fWA7XG4gIGFjdGlvbnNbdHlwZV0gPSAocmVkdXhTdGF0ZSwgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSkgPT4ge1xuICAgIGlmIChiZWZvcmVGdW5jdGlvbnNbcmVxdWVzdFN0YXRlLnR5cGVdKSB7XG4gICAgICByZXR1cm4gYmVmb3JlRnVuY3Rpb25zW3JlcXVlc3RTdGF0ZS50eXBlXShyZWR1eFN0YXRlLCByZXF1ZXN0U3RhdGUsIGFjdGlvblN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSB9O1xuICB9O1xufSk7XG5cbmNvbnN0IGJlZm9yZUZ1bmN0aW9ucyA9IHtcbiAgcG9zdDogKHJlZHV4U3RhdGUsIHJlcXVlc3RTdGF0ZSwgYWN0aW9uU3RhdGUpID0+IHtcbiAgICBjb25zdCB7IGFwcCB9ID0gcmVxdWVzdFN0YXRlO1xuXG4gICAgaWYgKGFwcC5pc01lZGlhQ2gpIHtcbiAgICAgIC8vICAgICAgaWYgKHdpbmRvdy50YWxrbk1lZGlhICYmIHdpbmRvdy50YWxrbk1lZGlhLmN1cnJlbnRUaW1lKSB7XG4gICAgICBpZiAoYXBwLmN1cnJlbnRUaW1lKSB7XG4gICAgICAgIHJlcXVlc3RTdGF0ZS5hcHAuaW5wdXRDdXJyZW50VGltZSA9IHdpbmRvdy50YWxrbk1lZGlhLmN1cnJlbnRUaW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdFN0YXRlLmFwcC5pbnB1dEN1cnJlbnRUaW1lID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zID0ge307XG5cbiAgICBpZiAoYXBwLmlucHV0U3RhbXBJZCkge1xuICAgICAgT2JqZWN0LmtleXMoZW1vdGlvbnMuYmFsYW5jZXMpLmZvckVhY2goKGJhbGFuY2VLZXkpID0+IHtcbiAgICAgICAgaWYgKGVtb3Rpb25zLmJhbGFuY2VzW2JhbGFuY2VLZXldICYmIHJlZHV4U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldKSB7XG4gICAgICAgICAgY29uc3QgYmFsYW5jZSA9IGVtb3Rpb25zLmJhbGFuY2VzW2JhbGFuY2VLZXldKGFwcC5pbnB1dFN0YW1wSWQpO1xuXG4gICAgICAgICAgaWYgKGJhbGFuY2UpIHtcbiAgICAgICAgICAgIGJhbGFuY2UuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlSWQgPSBPYmplY3Qua2V5cyhiKVswXTtcbiAgICAgICAgICAgICAgY29uc3QgdHlwZUxhYmVsID0gZW1vdGlvbnMuaWRLZXlUeXBlc1t0eXBlSWRdO1xuXG4gICAgICAgICAgICAgIGlmICghcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XSkgcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XSA9IHt9O1xuICAgICAgICAgICAgICBpZiAoIXJlcXVlc3RTdGF0ZS50aHJlYWQuZW1vdGlvbnNbYmFsYW5jZUtleV1bdHlwZUxhYmVsXSkgcmVxdWVzdFN0YXRlLnRocmVhZC5lbW90aW9uc1tiYWxhbmNlS2V5XVt0eXBlTGFiZWxdID0gMDtcblxuICAgICAgICAgICAgICByZXF1ZXN0U3RhdGUudGhyZWFkLmVtb3Rpb25zW2JhbGFuY2VLZXldW3R5cGVMYWJlbF0gPSBiW3R5cGVJZF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3Rpb25TdGF0ZS5hcHAgPSB7IC4uLmFwcCB9O1xuICAgICAgYWN0aW9uU3RhdGUuYXBwLmlucHV0U3RhbXBJZCA9IDA7XG4gICAgICByZXF1ZXN0U3RhdGUuYXBwLmlucHV0U3RhbXBJZCA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVxdWVzdFN0YXRlLCBhY3Rpb25TdGF0ZSB9O1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWN0aW9ucztcbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tICdjb21tb24vU2VxdWVuY2UnO1xuXG5leHBvcnQgZGVmYXVsdCAocmVzcG9uc2UpID0+IHtcbiAgY29uc3QgdHlwZSA9IGAke1NlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUfSR7cmVzcG9uc2UudHlwZX1gO1xuICByZXR1cm4geyAuLi5yZXNwb25zZSwgdHlwZSB9O1xufTtcbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tICdjb21tb24vU2VxdWVuY2UnO1xuXG5leHBvcnQgZGVmYXVsdCAocmVzcG9uc2UpID0+IHtcbiAgY29uc3QgdHlwZSA9IGAke1NlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVH0ke3Jlc3BvbnNlLnR5cGV9YDtcbiAgcmV0dXJuIHsgLi4ucmVzcG9uc2UsIHR5cGUgfTtcbn07XG4iLCJpbXBvcnQgeyBhcHBseU1pZGRsZXdhcmUsIGNyZWF0ZVN0b3JlIH0gZnJvbSAncmVkdXgnO1xuXG5pbXBvcnQgbWlkZGxld2FyZSBmcm9tICdhcGkvbWlkZGxld2FyZS8nO1xuaW1wb3J0IGFwaVJlZHVjZXJzIGZyb20gJ2FwaS9yZWR1Y2Vycyc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIE1vZHVsZSB7XG4gICAgaG90OiBhbnk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBpU3RvcmUoaW5pdGlhbFN0YXRlID0ge30pIHtcbiAgbGV0IGNvbXBvc2VFbmhhbmNlcnMgPSBudWxsO1xuICBsZXQgbWlkZGxld2FyZXMgPSBbbWlkZGxld2FyZS51cGRhdGVBY3Rpb25dO1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKGFwaVJlZHVjZXJzLCBpbml0aWFsU3RhdGUsIGNvbXBvc2VFbmhhbmNlcnMgPyBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykpIDogYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKSk7XG5cbiAgaWYgKG1vZHVsZS5ob3QpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi9yZWR1Y2VycycsICgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRSZWR1Y2VyID0gcmVxdWlyZSgnLi9yZWR1Y2VycycpO1xuICAgICAgc3RvcmUucmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0b3JlO1xufVxuIiwiaW1wb3J0IGRlZmluZSBmcm9tICdjb21tb24vZGVmaW5lJztcblxuaW1wb3J0IEFwcCBmcm9tICdhcGkvc3RvcmUvQXBwJztcblxuLy9pbXBvcnQgVGFsa25TZXNzaW9uIGZyb20gXCJjbGllbnQvb3BlcmF0aW9ucy9UYWxrblNlc3Npb25cIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOiBzZXRTdG9yYWdlSHRtbFBvc3RzLFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlJzogc2V0U3RvcmFnZUh0bWxQb3N0cyxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cyc6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICAvL3NldFN0b3JhZ2VQb3N0cyggc3RhdGUsIHByb3BzICk7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0sXG4gICdTRVJWRVJfVE9fQVBJW0VNSVRdOmNoYW5nZVRocmVhZCc6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGFwcCB9ID0gc3RhdGU7XG4gICAgY29uc3QgeyByb290Q2ggfSA9IGFwcDtcbiAgICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgICBjb25zdCBwb3N0S2V5ID0gYXBwLmRpc3BUaHJlYWRUeXBlID09PSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aSA/IHN0b3JhZ2VLZXkucG9zdFNpbmdsZSA6IHN0b3JhZ2VLZXkucG9zdE11bHRpO1xuICAgIC8vVGFsa25TZXNzaW9uLnNldFN0b3JhZ2Uocm9vdENoLCBkZWZpbmUuc3RvcmFnZUtleVtwb3N0S2V5XSwgW10pO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICAvLyAgXCJPTl9fQ0xJQ0tfTVVMVElTVFJFQU1cIjogc2V0U3RvcmFnZVBvc3RzLFxuICAnT05fQ0xJQ0tfTUVOVSc6IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHJvb3RDaCB9ID0gc3RhdGUuYXBwO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHJvb3RDaCwgZGVmaW5lLnN0b3JhZ2VLZXkuYXBwLCBzdGF0ZS5hcHApO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICAnUkVTSVpFX0VORF9XSU5ET1cnOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG4gIH0sXG4gIHNldFN0b3JhZ2VQb3N0cyxcbiAgc2V0U3RvcmFnZUh0bWxQb3N0cyxcbiAgc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUsXG4gIC8vICBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZSxcbiAgLy8gIGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lWmVybyxcbn07XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VQb3N0cyhzdGF0ZSwgcHJvcHMpIHtcbiAgY29uc3QgeyBhcHAgfSA9IHN0YXRlO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIHN0YXRlID0gc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUoc3RhdGUpO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzZXRTdG9yYWdlSHRtbFBvc3RzKHN0YXRlLCBwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0U3RvcmFnZUh0bWxQb3N0cyhzdGF0ZSwgcHJvcHMpIHtcbiAgY29uc3QgeyBhcHAgfSA9IHN0YXRlO1xuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcbiAgaWYgKGFwcC5pc1Jvb3RDaCkge1xuICAgIGNvbnN0IHsgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUgfSA9IHN0YXRlO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKGFwcC5yb290Q2gsIHN0b3JhZ2VLZXkucG9zdHNNdWx0aSwgcG9zdHNNdWx0aSk7XG4gICAgLy8gICAgVGFsa25TZXNzaW9uLnNldFN0b3JhZ2UoYXBwLnJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c1NpbmdsZSwgcG9zdHNTaW5nbGUpO1xuICB9XG5cbiAgcmV0dXJuIHsgc3RhdGUsIHByb3BzIH07XG59XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFjdGlvbikge1xuICBjb25zdCB7IGFwcCwgdGhyZWFkLCBwb3N0c1RpbWVsaW5lOiBwb3N0c1RpbWVsaW5lQWxsIH0gPSBhY3Rpb247XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIGNvbnN0IHBvc3RzVGltZWxpbmVBbGxMZW5ndGggPSBwb3N0c1RpbWVsaW5lQWxsICYmIHBvc3RzVGltZWxpbmVBbGwubGVuZ3RoID8gcG9zdHNUaW1lbGluZUFsbC5sZW5ndGggOiAwO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVyb1NlY29uZCA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzVGltZWxpbmVBbGxMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvc3RzVGltZWxpbmVBbGxbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQucHVzaChwb3N0c1RpbWVsaW5lQWxsW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc3RzVGltZWxpbmUucHVzaChwb3N0c1RpbWVsaW5lQWxsW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IHBvc3RzVGltZWxpbmVaZXJvU2Vjb25kO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHRocmVhZC5jaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lWmVybywgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQpO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHRocmVhZC5jaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lLCBwb3N0c1RpbWVsaW5lKTtcbiAgfVxuICByZXR1cm4gYWN0aW9uO1xufVxuLypcbmZ1bmN0aW9uIGFkZFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFjdGlvbikge1xuICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSB9ID0gYWN0aW9uO1xuXG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIGNvbnN0IGFkZFBvc3RzVGltZWxpbmUgPSBwb3N0c1RpbWVsaW5lWzBdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVybyA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lID0gW107XG4gICAgbGV0IHBvc3RzVGltZWxpbmVaZXJvTGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zdHNUaW1lbGluZUxlbmd0aCA9IDA7XG5cbiAgICBpZiAoYWRkUG9zdHNUaW1lbGluZS5jdXJyZW50VGltZSA9PT0gMCkge1xuICAgICAgcG9zdHNUaW1lbGluZVplcm8gPSBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8oYXBwLnJvb3RDaCk7XG4gICAgICBwb3N0c1RpbWVsaW5lWmVyb0xlbmd0aCA9IHBvc3RzVGltZWxpbmVaZXJvLmxlbmd0aDtcblxuICAgICAgLy8gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZVplcm9MZW5ndGg7IGkrKyl7XG4gICAgICAvLyAgICAgIH1cbiAgICAgIC8vICAgICAgcC5zcGxpY2UoNCwwLHAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdHNUaW1lbGluZSA9IGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFwcC5yb290Q2gpO1xuICAgICAgcG9zdHNUaW1lbGluZUxlbmd0aCA9IHBvc3RzVGltZWxpbmUubGVuZ3RoO1xuICAgICAgaWYgKHBvc3RzVGltZWxpbmVMZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZUxlbmd0aDsgaSsrKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuKi9cbi8qXG5mdW5jdGlvbiBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8ocm9vdENoKSB7XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBjb25zdCByZXNwb25zZSA9IFRhbGtuU2Vzc2lvbi5nZXRTdG9yYWdlKHJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lWmVybyk7XG4gIHJldHVybiByZXNwb25zZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFycmF5XCIgPyByZXNwb25zZSA6IFtdO1xufVxuXG5mdW5jdGlvbiBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZShyb290Q2gpIHtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGNvbnN0IHJlc3BvbnNlID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzVGltZWxpbmUpO1xuICByZXR1cm4gcmVzcG9uc2UuY29uc3RydWN0b3IubmFtZSA9PT0gXCJBcnJheVwiID8gcmVzcG9uc2UgOiBbXTtcbn1cbiovXG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5pbXBvcnQgc3RvcmFnZSBmcm9tICdhcGkvbWFwVG9TdGF0ZVRvUHJvcHMvc3RvcmFnZSc7XG5pbXBvcnQgQXBwIGZyb20gJ2FwaS9zdG9yZS9BcHAnO1xuaW1wb3J0IFBvc3RzIGZyb20gJ2FwaS9zdG9yZS9Qb3N0cyc7XG5pbXBvcnQgVGhyZWFkIGZyb20gJ2FwaS9zdG9yZS9UaHJlYWQnO1xuaW1wb3J0IFRocmVhZHMgZnJvbSAnYXBpL3N0b3JlL1RocmVhZHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZUFjdGlvbjogKHN0b3JlKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBpZiAoYWN0aW9uKSB7XG4gICAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgICBhY3Rpb24uYXBwLmFjdGlvbmVkID0gYWN0aW9uLnR5cGU7XG4gICAgfVxuICAgIGlmIChmdW5jdGlvbnNbYWN0aW9uLnR5cGVdKSB7XG4gICAgICBhY3Rpb24gPSBmdW5jdGlvbnNbYWN0aW9uLnR5cGVdKHN0YXRlLCBhY3Rpb24pO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uKSB7XG4gICAgICBuZXh0KGFjdGlvbik7XG4gICAgfVxuICB9LFxufTtcblxuY29uc3QgZnVuY3Rpb25zID0ge1xuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTp0dW5lJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwW2BvZmZzZXQke2FjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGV9RmluZElkYF0gPSBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLnR1bmVkID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24uYXBwLmRldGFpbENoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24uYXBwLmlzUm9vdENoID0gYWN0aW9uLmFwcC5yb290Q2ggPT09IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC5pc01lZGlhQ2ggPSBBcHAuZ2V0SXNNZWRpYUNoKGFjdGlvbi50aHJlYWQuY2gpO1xuICAgIGFjdGlvbi5hcHAuaXNUb2dnbGVNdWx0aXN0cmVhbSA9IGZhbHNlO1xuICAgIGFjdGlvbi50aHJlYWQudGl0bGUgPSBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzWyd0aXRsZSddO1xuICAgIGFjdGlvbi50aHJlYWQuaGFzU2xhc2ggPSBTY2hlbWEuZ2V0Qm9vbChhY3Rpb24udGhyZWFkLmhhc1NsYXNoKTtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgaWYgKGFjdGlvbi5hcHAuaXNSb290Q2gpIHtcbiAgICAgIGFjdGlvbi5hcHAucm9vdFRpdGxlID0gYWN0aW9uLnRocmVhZC50aXRsZTtcbiAgICB9XG4gICAgaWYgKGFjdGlvbi5hcHAuaXNNZWRpYUNoKSB7XG4gICAgICBjb25zdCBzcmMgPSBBcHAuZ2V0TWVkaWFTcmMoYWN0aW9uLnRocmVhZC5wcm90b2NvbCwgYWN0aW9uLnRocmVhZC5jaCk7XG4gICAgICBhY3Rpb24uYXBwLmNoVHlwZSA9IEFwcC5nZXRNZWRpYVR5cGVGcm9tU3JjKHNyYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvbi5hcHAuY2hUeXBlID0gQXBwLm1lZGlhVGFnVHlwZU5vO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24gPSB7IC4uLlBvc3RzLmdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIH07XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHM6IGFjdGlvbi5wb3N0cyB9KTtcbiAgICBhY3Rpb24uYXBwW2BvZmZzZXQke2FjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGV9RmluZElkYF0gPSBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZDtcbiAgICBpZiAoYWN0aW9uLmFwcC5pc01lZGlhQ2gpIHtcbiAgICAgIGFjdGlvbiA9IHN0b3JhZ2Uuc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUoYWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ0FQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldFRpbWVsaW5lRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRNdWx0aUZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0U2luZ2xlRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRDaGlsZEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0TG9nc0ZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb24udGhyZWFkID8geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfSA6IHN0YXRlLnRocmVhZDtcbiAgICBhY3Rpb24ucG9zdHMgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0cygpO1xuICAgIGFjdGlvbi5wb3N0c0NoaWxkID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHMoKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTpjaGFuZ2VUaHJlYWQnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAudHVuZWQgPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi50aHJlYWQudGl0bGUgPSBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzWyd0aXRsZSddO1xuICAgIGFjdGlvbi50aHJlYWRzID0gVGhyZWFkcy5nZXRNZXJnZWRUaHJlYWRzKHN0YXRlLnRocmVhZHMsIGFjdGlvbi50aHJlYWQpO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTp1cGRhdGVUaHJlYWQnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWRzID0gVGhyZWFkcy5nZXRNZXJnZWRUaHJlYWRzKHN0YXRlLnRocmVhZHMsIGFjdGlvbi50aHJlYWQpO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTp1cGRhdGVUaHJlYWRTZXJ2ZXJNZXRhcyc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZHMgPSBUaHJlYWRzLmdldE1lcmdlZFRocmVhZHMoc3RhdGUudGhyZWFkcywgYWN0aW9uLnRocmVhZCk7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdTRVJWRVJfVE9fQVBJW1JFUVVFU1RdOnBvc3QnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuaW5wdXRTdGFtcElkID0gMDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIC8vIOODpuODvOOCtuODvOOBjOS7iuePvuWcqOOAgemWsuimp+OBl+OBpuOBhOOCi3RocmVhZOOBruWgtOWQiFxuICAgIGlmIChzdGF0ZS50aHJlYWQuY2ggPT09IGFjdGlvbi50aHJlYWQuY2gpIHtcbiAgICAgIGlmIChhY3Rpb24udGhyZWFkLmVtb3Rpb25zKSB7XG4gICAgICAgIGNvbnN0IGVtb3Rpb25LZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uLnRocmVhZC5lbW90aW9ucyk7XG4gICAgICAgIGlmIChlbW90aW9uS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgYWN0aW9uRW1vdGlvbnMgPSB7IC4uLmFjdGlvbi50aHJlYWQuZW1vdGlvbnMgfTtcbiAgICAgICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zID0geyAuLi5zdGF0ZS50aHJlYWQuZW1vdGlvbnMgfTtcblxuICAgICAgICAgIE9iamVjdC5rZXlzKGFjdGlvbkVtb3Rpb25zKS5mb3JFYWNoKChlbW90aW9uTW9kZWxLZXkpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGFjdGlvbkVtb3Rpb25zW2Vtb3Rpb25Nb2RlbEtleV0pLmZvckVhY2goKGVtb3Rpb25LZXkpID0+IHtcbiAgICAgICAgICAgICAgYWN0aW9uLnRocmVhZC5lbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldID1cbiAgICAgICAgICAgICAgICBhY3Rpb24udGhyZWFkLmVtb3Rpb25zW2Vtb3Rpb25Nb2RlbEtleV1bZW1vdGlvbktleV0gKyBhY3Rpb25FbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWN0aW9uLnRocmVhZC5jaCA9IHN0YXRlLnRocmVhZC5jaDtcbiAgICBhY3Rpb24gPSBQb3N0cy5nZXRBbnlBY3Rpb25Qb3N0cyhhY3Rpb24sIHN0YXRlKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5nZXRPZmZzZXRGaW5kSWQoeyBwb3N0czogYWN0aW9uLnBvc3RzIH0pO1xuICAgIGFjdGlvbi5hcHBbYG9mZnNldCR7YWN0aW9uLmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXSA9IGFjdGlvbi5hcHAub2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbiA9IFBvc3RzLmdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZERldGFpbCc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgZGVsZXRlIGFjdGlvbi50aHJlYWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkRGV0YWlsJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmRldGFpbENoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLnRocmVhZERldGFpbC50aXRsZSA9IGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMudGl0bGU7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbC5lbW90aW9ucyA9IHsgLi4uc3RhdGUudGhyZWFkc1thY3Rpb24uYXBwLmRldGFpbENoXS5lbW90aW9ucyB9O1xuXG4gICAgLy8gVE9ETyDlj6TjgYTku5Xmp5jjgaDjgahoYXNTbGFzaOOBjOagvOe0jeOBleOCjOOBpuOBhOOBquOBhGNvbGxlY3Rpb27jgYzlrZjlnKjjgZnjgotcbiAgICAvLyBoYXNTbGFzaOOBr2xvY2F0aW9u44GM5Y+C54Wn44Gn44GN44Gq44GEUE9SVEFM44Gg44Go5q2j44GX44GE5YCk44KS5Y+W5b6X5Ye65p2l44Gq44GE44Gf44KB44CBXG4gICAgLy8g5ouh5by15qmf6IO944Gn44GvR0VUX0NMSUVOVF9NRVRBU+OCkuWun+ihjOOBl+OBpuato+OBl+OBhOWApOOCkuOCteODvOODkOODvOOBq+a4oeOBl+OBpuabtOaWsOOBl+OBpuOChOOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2ggPSBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID09PSBudWxsID8gdHJ1ZSA6IFNjaGVtYS5nZXRCb29sKGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2gpO1xuICAgIGRlbGV0ZSBhY3Rpb24udGhyZWFkO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb247XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ0NMT1NFX0xJTktTJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgYWN0aW9uLnRocmVhZCA9IGFjdGlvbi50aHJlYWQgPyB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9IDogc3RhdGUudGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdPTl9DTElDS19UT19NVUxUSV9USFJFQUQnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuaXNMaW5rQ2ggPSBmYWxzZTtcbiAgICBhY3Rpb24uYXBwLmlzUm9vdENoID0gYWN0aW9uLnRocmVhZC5jaCA9PT0gc3RhdGUuYXBwLnJvb3RDaDtcblxuICAgIGlmIChzdGF0ZS50aHJlYWRzW2FjdGlvbi50aHJlYWQuY2hdKSB7XG4gICAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkc1thY3Rpb24udGhyZWFkLmNoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ09OX0NMSUNLX1RPX1RJTUVMSU5FX1RIUkVBRCc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgY29uc3QgY2ggPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi50aHJlYWQuY2ggPSBjaDtcbiAgICBjb25zdCBzcmMgPSBBcHAuZ2V0TWVkaWFTcmMoYWN0aW9uLnRocmVhZC5wcm90b2NvbCwgYWN0aW9uLnRocmVhZC5jaCk7XG4gICAgYWN0aW9uLnRocmVhZC5maW5kVHlwZSA9IFRocmVhZC5nZXRGaW5kVHlwZUZyb21TcmMoc3JjKTtcbiAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IFtdO1xuICAgIGFjdGlvbi5hcHAuaXNNZWRpYUNoID0gdHJ1ZTtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnT05fQ0xJQ0tfVE9fU0lOR0xFX1RIUkVBRCc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLmFwcCA9IHN0YXRlLmFwcDtcbiAgICBhY3Rpb24uYXBwLmlzTGlua0NoID0gZmFsc2U7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ09OX0NMSUNLX1RPX0NISUxEX1RIUkVBRCc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBbXTtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnT05fQ0xJQ0tfTUVOVSc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5kZXNjID0gYWN0aW9uLnVpLm1lbnVDb21wb25lbnQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1JFU0laRV9FTkRfV0lORE9XJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdPTl9DTElDS19UT0dHTEVfRElTUF9ERVRBSUwnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIC8vIFRPRE8g5Y+k44GE5LuV5qeY44Gg44GoaGFzU2xhc2jjgYzmoLzntI3jgZXjgozjgabjgYTjgarjgYRjb2xsZWN0aW9u44GM5a2Y5Zyo44GZ44KLXG4gICAgLy8gaGFzU2xhc2jjga9sb2NhdGlvbuOBjOWPgueFp+OBp+OBjeOBquOBhFBPUlRBTOOBoOOBqOato+OBl+OBhOWApOOCkuWPluW+l+WHuuadpeOBquOBhOOBn+OCgeOAgVxuICAgIC8vIOaLoeW8teapn+iDveOBp+OBr0dFVF9DTElFTlRfTUVUQVPjgpLlrp/ooYzjgZfjgabmraPjgZfjgYTlgKTjgpLjgrXjg7zjg5Djg7zjgavmuKHjgZfjgabmm7TmlrDjgZfjgabjgoTjgovlv4XopoHjgYzjgYLjgovjgIJcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID0gYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9PT0gbnVsbCA/IHRydWUgOiBTY2hlbWEuZ2V0Qm9vbChhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnVE9HR0xFX0JVQkJMRV9QT1NUJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkID0gc3RhdGUudGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdTVEFSVF9MSU5LX01FRElBJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlzTGlua0NoID0gdHJ1ZTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnR0VUX0NMSUVOVF9NRVRBUyc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgbGV0IHVwZGF0ZUZsZyA9IGZhbHNlO1xuICAgIGxldCB7IGNsaWVudE1ldGFzIH0gPSBhY3Rpb247XG4gICAgbGV0IHsgc2VydmVyTWV0YXMgfSA9IHN0YXRlLnRocmVhZDtcbiAgICBhY3Rpb24udGhyZWFkID0ge307XG5cbiAgICAvLyBNZXRhc1xuICAgIE9iamVjdC5rZXlzKGNsaWVudE1ldGFzKS5mb3JFYWNoKChrZXksIGkpID0+IHtcbiAgICAgIGlmIChjbGllbnRNZXRhc1trZXldICYmIGNsaWVudE1ldGFzW2tleV0gIT09ICcnICYmIHNlcnZlck1ldGFzW2tleV0gIT09IGNsaWVudE1ldGFzW2tleV0pIHtcbiAgICAgICAgaWYgKCFhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzKSB7XG4gICAgICAgICAgYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUZsZyA9IHRydWU7XG4gICAgICAgIGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXNba2V5XSA9IGNsaWVudE1ldGFzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodXBkYXRlRmxnKSB7XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5zdGF0ZS50aHJlYWREZXRhaWwgfTtcbiAgICAgIGFjdGlvbi50aHJlYWREZXRhaWwuc2VydmVyTWV0YXMgPSB7XG4gICAgICAgIC4uLmFjdGlvbi50aHJlYWREZXRhaWwuc2VydmVyTWV0YXMsXG4gICAgICAgIC4uLmFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG4gIH0sXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gW10sIGFjdGlvbikgPT4gW2FjdGlvbi50eXBlLCAuLi5zdGF0ZV07XG4iLCJpbXBvcnQgQW5hbHl6ZSBmcm9tICdhcGkvc3RvcmUvQW5hbHl6ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBBbmFseXplKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmFuYWx5emUgPyBzdGF0ZS5tZXJnZShhY3Rpb24uYW5hbHl6ZSkgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgQXBwIGZyb20gJ2FwaS9zdG9yZS9BcHAnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgQXBwKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmFwcCA/IG5ldyBBcHAoYWN0aW9uLmFwcCkgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgQm9vdE9wdGlvbiBmcm9tICdhcGkvc3RvcmUvQm9vdE9wdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBCb290T3B0aW9uKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLmJvb3RPcHRpb24gPyBzdGF0ZS5tZXJnZShhY3Rpb24uYm9vdE9wdGlvbikgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5cbmltcG9ydCBhY3Rpb25lZCBmcm9tICcuL2FjdGlvbmVkJztcbmltcG9ydCBhbmFseXplIGZyb20gJy4vYW5hbHl6ZSc7XG5pbXBvcnQgYXBwIGZyb20gJy4vYXBwJztcbmltcG9ydCBib290T3B0aW9uIGZyb20gJy4vYm9vdE9wdGlvbic7XG5pbXBvcnQgcG9zdHMgZnJvbSAnLi9wb3N0cyc7XG5pbXBvcnQgcG9zdHNDaGlsZCBmcm9tICcuL3Bvc3RzQ2hpbGQnO1xuaW1wb3J0IHBvc3RzTXVsdGkgZnJvbSAnLi9wb3N0c011bHRpJztcbmltcG9ydCBwb3N0c1NpbmdsZSBmcm9tICcuL3Bvc3RzU2luZ2xlJztcbmltcG9ydCBwb3N0c1RpbWVsaW5lIGZyb20gJy4vcG9zdHNUaW1lbGluZSc7XG5pbXBvcnQgcG9zdHNUaW1lbGluZVN0b2NrIGZyb20gJy4vcG9zdHNUaW1lbGluZVN0b2NrJztcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVybyBmcm9tICcuL3Bvc3RzVGltZWxpbmVaZXJvJztcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIGZyb20gJy4vcG9zdHNUaW1lbGluZVplcm9BZnRlcic7XG5pbXBvcnQgcmFua3MgZnJvbSAnLi9yYW5rcyc7XG5pbXBvcnQgc2V0dGluZyBmcm9tICcuL3NldHRpbmcnO1xuaW1wb3J0IHRocmVhZCBmcm9tICcuL3RocmVhZCc7XG5pbXBvcnQgdGhyZWFkRGV0YWlsIGZyb20gJy4vdGhyZWFkRGV0YWlsJztcbmltcG9ydCB0aHJlYWRzIGZyb20gJy4vdGhyZWFkcyc7XG5pbXBvcnQgdHVuZUNoIGZyb20gJy4vdHVuZUNoJztcbmltcG9ydCB1c2VyIGZyb20gJy4vdXNlcic7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyRmlsZXMgPSB7XG4gIGFwcCxcbiAgdXNlcixcbiAgdHVuZUNoLFxuICByYW5rcyxcbiAgdGhyZWFkLFxuICB0aHJlYWRzLFxuICB0aHJlYWREZXRhaWwsXG4gIGFuYWx5emUsXG4gIGJvb3RPcHRpb24sXG4gIHNldHRpbmcsXG4gIHBvc3RzLFxuICBwb3N0c1RpbWVsaW5lLFxuICBwb3N0c1RpbWVsaW5lU3RvY2ssXG4gIHBvc3RzVGltZWxpbmVaZXJvLFxuICBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyLFxuICBwb3N0c011bHRpLFxuICBwb3N0c1NpbmdsZSxcbiAgcG9zdHNDaGlsZCxcbiAgYWN0aW9uZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMocmVkdWNlckZpbGVzKTtcbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0cyBmcm9tICdhcGkvc3RvcmUvUG9zdHMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5wb3N0cyA/IG5ldyBQb3N0cyhhY3Rpb24ucG9zdHMpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RzIGZyb20gJ2FwaS9zdG9yZS9Qb3N0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogUG9zdFtdID0gW10sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWQnOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0cygpO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cyc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c0NoaWxkICYmIGFjdGlvbi5wb3N0c0NoaWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IGFjdGlvbi5wb3N0c0NoaWxkWzBdLmNoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzQ2hpbGRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmUnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c0NoaWxkICYmIGFjdGlvbi5wb3N0c0NoaWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNDaGlsZCwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBjb25mIGZyb20gJ2NvbW1vbi9jb25mJztcblxuaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RzIGZyb20gJ2FwaS9zdG9yZS9Qb3N0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogUG9zdFtdID0gW10sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnT05fQ0xJQ0tfTVVMVElTVFJFQU0nOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c011bHRpO1xuICAgIGNhc2UgJ0NMSUVOVF9UT19TRVJWRVJbRU1JVF06Y2hhbmdlVGhyZWFkJzpcbiAgICAgIHJldHVybiBuZXcgUG9zdHMoKTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHMnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c011bHRpICYmIGFjdGlvbi5wb3N0c011bHRpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFjdGlvbi5hcHAuaXNSb290Q2gpIHtcbiAgICAgICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c011bHRpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgLy8gcG9zdE11bHRp44Gv5a2Q5L6b44Gu5oqV56i/44KS5YWo44Gm6KGo56S644GZ44KL5LuV5qeYXG4gICAgICBpZiAoYWN0aW9uLnBvc3RzTXVsdGkgJiYgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoYWN0aW9uLmFwcC5yb290Q2ggPT09IGFjdGlvbi5wb3N0c011bHRpWzBdLmNoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzTXVsdGldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmUnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c011bHRpICYmIGFjdGlvbi5wb3N0c011bHRpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1vcmVQb3N0TXVsaXQgPSBbXTtcblxuICAgICAgICBpZiAoc3RhdGUubGVuZ3RoICsgYWN0aW9uLnBvc3RzTXVsdGkubGVuZ3RoID4gY29uZi5maW5kT25lTGltaXRDbnQpIHtcbiAgICAgICAgICBtb3JlUG9zdE11bGl0ID0gWy4uLmFjdGlvbi5wb3N0c011bHRpLCAuLi5zdGF0ZV07XG4gICAgICAgICAgcmV0dXJuIG1vcmVQb3N0TXVsaXQuc2xpY2UoMCwgY29uZi5maW5kT25lTGltaXRDbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzTXVsdGksIC4uLnN0YXRlXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0c1NpbmdsZSBmcm9tICdhcGkvc3RvcmUvUG9zdHNTaW5nbGUnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ09OX0NMSUNLX01VTFRJU1RSRUFNJzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNTaW5nbGU7XG4gICAgY2FzZSAnQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWQnOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0c1NpbmdsZSgpO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cyc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1NpbmdsZSAmJiBhY3Rpb24ucG9zdHNTaW5nbGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNTaW5nbGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNTaW5nbGUgJiYgYWN0aW9uLnBvc3RzU2luZ2xlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNTaW5nbGUsIC4uLnN0YXRlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5pbXBvcnQgUG9zdHNUaW1lbGluZSBmcm9tICdhcGkvc3RvcmUvUG9zdHNUaW1lbGluZSc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogUG9zdFtdID0gW10sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWQnOlxuICAgICAgcmV0dXJuIG5ldyBQb3N0c1RpbWVsaW5lKCk7XG4gICAgY2FzZSAnVU5NT1VOVF9QT1NUU19USU1FTElORSc6XG4gICAgICByZXR1cm4gc3RhdGUubWFwKChwdCkgPT4ge1xuICAgICAgICBwdC5kaXNwRmxnID0gcHQuY3VycmVudFRpbWUgPD0gYWN0aW9uLm1lZGlhQ3VycmVudFRpbWU7XG4gICAgICAgIHJldHVybiBwdDtcbiAgICAgIH0pO1xuICAgIGNhc2UgJ0NMRUFSX1BPU1RTX1RJTUVMSU5FJzpcbiAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cyc6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzVGltZWxpbmUgJiYgYWN0aW9uLnBvc3RzVGltZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdORVhUX1BPU1RTX1RJTUVMSU5FJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNUaW1lbGluZSAmJiBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BSRVZfUE9TVFNfVElNRUxJTkUnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCc6XG4gICAgICBpZiAoXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmVbMF0udWlkID09PSBhY3Rpb24udXNlci51aWQgJiZcbiAgICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmVbMF0uY2ggPT09IGFjdGlvbi50aHJlYWQuY2hcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmUnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNUaW1lbGluZSwgLi4uc3RhdGVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0c1RpbWVsaW5lU3RvY2sgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVTdG9jayc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogUG9zdFtdID0gW10sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2tdIDogc3RhdGU7XG4gICAgY2FzZSAnQ0xFQVJfUE9TVFNfVElNRUxJTkUnOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2tdIDogc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrID8gbmV3IFBvc3RzVGltZWxpbmVTdG9jayhhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RUaW1lbGluZVplcm8gZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVaZXJvJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBQb3N0W10gPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCc6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9dIDogc3RhdGU7XG4gICAgY2FzZSAnQ0xFQVJfUE9TVFNfVElNRUxJTkUnOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybyA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvXSA6IHN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvID8gbmV3IFBvc3RUaW1lbGluZVplcm8oYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmVaZXJvQWZ0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0JzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXJdIDogc3RhdGU7XG4gICAgY2FzZSAnQ0xFQVJfUE9TVFNfVElNRUxJTkUnOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlcl0gOiBzdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyID8gbmV3IFBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIoYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIpIDogc3RhdGU7XG4gIH1cbn07XG4iLCJpbXBvcnQgUG9zdHMgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gW10sIGFjdGlvbikgPT4ge1xuICBsZXQgcG9zdHMgPSBbXTtcbiAgbGV0IHBvc3RMZW5ndGggPSAwO1xuICBjb25zdCBzb3J0V2F0Y2hDbnQgPSAoYSwgYikgPT4ge1xuICAgIGlmIChhLmNoID09PSBhY3Rpb24uYXBwLnJvb3RDaCB8fCBiLmNoID09PSBhY3Rpb24uYXBwLnJvb3RDaCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChhLmxpdmVDbnQgPCBiLmxpdmVDbnQpIHJldHVybiAxO1xuICAgIGlmIChhLmxpdmVDbnQgPiBiLmxpdmVDbnQpIHJldHVybiAtMTtcbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzJzpcbiAgICAgIGlmIChhY3Rpb24uYXBwLmlzTGlua0NoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgcG9zdHMgPSBQb3N0cy5nZXREaXNwUG9zdHMoYWN0aW9uKTtcbiAgICAgIHBvc3RMZW5ndGggPSBwb3N0cyAmJiBwb3N0cy5sZW5ndGggPyBwb3N0cy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAocG9zdExlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZS5tYXAoKHJhbmspID0+IHtcbiAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IHJhbmsuY2gpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmFuayxcbiAgICAgICAgICAgIGZhdmljb246IHBvc3RzW3Bvc3RMZW5ndGggLSAxXS5mYXZpY29uLFxuICAgICAgICAgICAgc3RhbXBJZDogcG9zdHNbcG9zdExlbmd0aCAtIDFdLnN0YW1wSWQsXG4gICAgICAgICAgICBwb3N0OiBwb3N0c1twb3N0TGVuZ3RoIC0gMV0ucG9zdCxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByYW5rO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06dHVuZSc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmNoYW5nZVRocmVhZCc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmRpc2Nvbm5lY3QnOlxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICAgIC5tYXAoKHJhbmspID0+IHtcbiAgICAgICAgICBpZiAoYWN0aW9uLnRocmVhZC5jaCA9PT0gcmFuay5jaCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4ucmFuaywgbGl2ZUNudDogYWN0aW9uLnRocmVhZC5saXZlQ250IH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByYW5rO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnNvcnQoc29ydFdhdGNoQ250KTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCc6XG4gICAgICByZXR1cm4gc3RhdGUubWFwKChyYW5rKSA9PiB7XG4gICAgICAgIGlmIChhY3Rpb24ucG9zdHNbMF0uY2ggPT09IHJhbmsuY2gpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmFuayxcbiAgICAgICAgICAgIHRpdGxlOiBhY3Rpb24ucG9zdHNbMF0udGl0bGUsXG4gICAgICAgICAgICBzdGFtcElkOiBhY3Rpb24ucG9zdHNbMF0uc3RhbXBJZCxcbiAgICAgICAgICAgIGZhdmljb246IGFjdGlvbi5wb3N0c1swXS5mYXZpY29uLFxuICAgICAgICAgICAgcG9zdDogYWN0aW9uLnBvc3RzWzBdLnBvc3QsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuaztcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06cmFuayc6XG4gICAgICAvLyBzdGF0ZeOBqGFjdGlvbi5yYW5r44Gu5Lih5pa55a2Y5Zyo44GZ44KL5aC05ZCIXG4gICAgICBpZiAoc3RhdGUgJiYgc3RhdGUubGVuZ3RoID4gMCAmJiBhY3Rpb24ucmFuayAmJiBhY3Rpb24ucmFuay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5ld1JhbmtzID0gW107XG4gICAgICAgIGNvbnN0IHJhbmtDbnQgPSBhY3Rpb24ucmFuay5sZW5ndGg7XG4gICAgICAgIGxldCBsYXN0UG9zdCA9IGFjdGlvbi5yYW5rWzBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmtDbnQ7IGkrKykge1xuICAgICAgICAgIGxldCBuZXdSYW5rID0gYWN0aW9uLnJhbmtbaV07XG4gICAgICAgICAgbGFzdFBvc3QgPSBuZXdSYW5rLnVwZGF0ZVRpbWUgPiBsYXN0UG9zdC51cGRhdGVUaW1lID8gbmV3UmFuayA6IGxhc3RQb3N0O1xuXG4gICAgICAgICAgaWYgKG5ld1JhbmsuY2ggPT09IHN0YXRlWzBdLmNoKSB7XG4gICAgICAgICAgICBuZXdSYW5rID0ge1xuICAgICAgICAgICAgICAuLi5uZXdSYW5rLFxuICAgICAgICAgICAgICBsaXZlQ250OiBzdGF0ZVswXS5saXZlQ250LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3UmFua3MucHVzaChuZXdSYW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1JhbmtzLnNvcnQoc29ydFdhdGNoQ250KTtcbiAgICAgICAgbmV3UmFua3NbMF0uZmFpY29uID0gbGFzdFBvc3QuZmF2aWNvbjtcbiAgICAgICAgbmV3UmFua3NbMF0ucG9zdCA9IGxhc3RQb3N0LnBvc3Q7XG4gICAgICAgIG5ld1JhbmtzWzBdLnN0YW1wSWQgPSBsYXN0UG9zdC5zdGFtcElkO1xuICAgICAgICByZXR1cm4gbmV3UmFua3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYWN0aW9uLnJhbmsgPyBhY3Rpb24ucmFuayA6IHN0YXRlO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnJhbmsgPyBhY3Rpb24ucmFuayA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFNldHRpbmcgZnJvbSAnYXBpL3N0b3JlL1NldHRpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgU2V0dGluZygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5zZXR0aW5nID8gc3RhdGUubWVyZ2UoYWN0aW9uLnNldHRpbmcpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFRocmVhZCBmcm9tICdhcGkvc3RvcmUvVGhyZWFkJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFRocmVhZCh7fSwge30pLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ1NFVFVQRURfQVBJX1NUT1JFJzpcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOnR1bmUnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkJzpcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHMnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06dXBkYXRlVGhyZWFkU2VydmVyTWV0YXMnOlxuICAgICAgcmV0dXJuIG5ldyBUaHJlYWQoYWN0aW9uLnRocmVhZCk7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnR1bmUnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWQnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpkaXNjb25uZWN0JzpcbiAgICAgIC8vIOODpuODvOOCtuODvOOBjOS7iuePvuWcqOOAgemWsuimp+OBl+OBpuOBhOOCi3RocmVhZOOBruWgtOWQiFxuICAgICAgaWYgKHN0YXRlLmNoID09PSBhY3Rpb24udGhyZWFkLmNoKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24udGhyZWFkID8gc3RhdGUubWVyZ2UoYWN0aW9uLnRocmVhZCkgOiBzdGF0ZTtcbiAgICAgIH1cbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCc6XG4gICAgICAvLyDjg6bjg7zjgrbjg7zjgYzku4rnj77lnKjjgIHplrLopqfjgZfjgabjgYTjgot0aHJlYWTjga7loLTlkIhcbiAgICAgIGlmIChzdGF0ZS5jaCA9PT0gYWN0aW9uLnRocmVhZC5jaCkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLnRocmVhZCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWQpIDogc3RhdGU7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBUaHJlYWQgZnJvbSAnYXBpL3N0b3JlL1RocmVhZCc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBUaHJlYWQoe30sIHt9KSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24udGhyZWFkRGV0YWlsID8gc3RhdGUubWVyZ2UoYWN0aW9uLnRocmVhZERldGFpbCkgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgVGhyZWFkcyBmcm9tICdhcGkvc3RvcmUvVGhyZWFkcyc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBUaHJlYWRzKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnRocmVhZHMgPyBzdGF0ZS5tZXJnZShhY3Rpb24udGhyZWFkcykgOiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogUG9zdCA9IG5ldyBQb3N0KCksIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTp0dW5lJzpcbiAgICAgIHJldHVybiBuZXcgUG9zdChhY3Rpb24udGhyZWFkLmxhc3RQb3N0KTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06dHVuZSc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmNoYW5nZVRocmVhZCc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmRpc2Nvbm5lY3QnOlxuICAgICAgY29uc3QgeyB0aHJlYWQgfSA9IGFjdGlvbjtcbiAgICAgIGlmICh0aHJlYWQuY2ggPT09IHN0YXRlLmNoKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsaXZlQ250OiB0aHJlYWQubGl2ZUNudCB9O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgY29uc3QgcG9zdCA9IGFjdGlvbi5wb3N0c1swXTtcbiAgICAgIGlmIChwb3N0LmNoID09PSBzdGF0ZS5jaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRpdGxlOiBwb3N0LnRpdGxlLFxuICAgICAgICAgIHN0YW1wSWQ6IHBvc3Quc3RhbXBJZCxcbiAgICAgICAgICBmYXZpY29uOiBwb3N0LmZhdmljb24sXG4gICAgICAgICAgcG9zdDogcG9zdC5wb3N0LFxuICAgICAgICB9O1xuICAgICAgfVxuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgVXNlciBmcm9tICdhcGkvc3RvcmUvVXNlcic7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBVc2VyKCksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnVzZXIgPyBzdGF0ZS5tZXJnZShhY3Rpb24udXNlcikgOiBzdGF0ZTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Mb2dzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmFseXplIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgbGl2ZUNudCA9IDA7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHsgbGl2ZUNudCB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcblxuaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFRocmVhZCBmcm9tICdhcGkvc3RvcmUvVGhyZWFkJztcblxuZXhwb3J0IHR5cGUgRnJvbVR5cGUgPSAnQ2gnIHwgJ0JhY2tUb1Jvb3RDaCcgfCAnVG9NZWRpYScgfCAnTGlua3MnIHwgJ2ZpbmRNZWRpYUNoJyB8ICcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPZmZzZXRGaW5kSWQoKSB7XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlVGltZWxpbmUoKTogJ1RpbWVsaW5lJyB7XG4gICAgcmV0dXJuICdUaW1lbGluZSc7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZVNpbmdsZSgpOiAnU2luZ2xlJyB7XG4gICAgcmV0dXJuICdTaW5nbGUnO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVNdWx0aSgpOiAnTXVsdGknIHtcbiAgICByZXR1cm4gJ011bHRpJztcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlQ2hpbGQoKTogJ0NoaWxkJyB7XG4gICAgcmV0dXJuICdDaGlsZCc7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZUxvZ3MoKTogJ0xvZ3MnIHtcbiAgICByZXR1cm4gJ0xvZ3MnO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlTm8oKSB7XG4gICAgcmV0dXJuICdodG1sJztcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVGFnVHlwZUF1ZGlvKCkge1xuICAgIHJldHVybiAnYXVkaW8nO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlVmlkZW8oKSB7XG4gICAgcmV0dXJuICd2aWRlbyc7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVR5cGVNcDMoKSB7XG4gICAgcmV0dXJuICdtcDMnO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUeXBlTXA0KCkge1xuICAgIHJldHVybiAnbXA0JztcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVHlwZU00YSgpIHtcbiAgICByZXR1cm4gJ200YSc7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYUNocygpIHtcbiAgICByZXR1cm4gW0FwcC5tZWRpYVR5cGVNcDMsIEFwcC5tZWRpYVR5cGVNcDQsIEFwcC5tZWRpYVR5cGVNNGFdO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFDaFRhZ1R5cGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbQXBwLm1lZGlhVHlwZU1wM106IEFwcC5tZWRpYVRhZ1R5cGVBdWRpbyxcbiAgICAgIFtBcHAubWVkaWFUeXBlTXA0XTogQXBwLm1lZGlhVGFnVHlwZVZpZGVvLFxuICAgICAgW0FwcC5tZWRpYVR5cGVNNGFdOiBBcHAubWVkaWFUYWdUeXBlQXVkaW8sXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0TWVkaWFUeXBlKHNyYywgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuY2hUeXBlKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmNoVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIEFwcC5nZXRNZWRpYVR5cGVGcm9tU3JjKHNyYyk7XG4gIH1cbiAgc3RhdGljIGdldE1lZGlhVHlwZUZyb21TcmMoc3JjKSB7XG4gICAgY29uc3QgbWVkaWFDaFRhZ1R5cGVLZXlzID0gT2JqZWN0LmtleXMoQXBwLm1lZGlhQ2hUYWdUeXBlcyk7XG4gICAgY29uc3QgbWVkaWFDaFRhZ1R5cGVMZW5ndGggPSBtZWRpYUNoVGFnVHlwZUtleXMubGVuZ3RoO1xuICAgIGxldCBtZWRpYVR5cGUgPSAnaHRtbCc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWRpYUNoVGFnVHlwZUxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZWdFeHAgPSBuZXcgUmVnRXhwKGAuJHttZWRpYUNoVGFnVHlwZUtleXNbaV19JGApO1xuICAgICAgaWYgKHNyYy5tYXRjaChyZWdFeHApKSB7XG4gICAgICAgIG1lZGlhVHlwZSA9IEFwcC5tZWRpYUNoVGFnVHlwZXNbbWVkaWFDaFRhZ1R5cGVLZXlzW2ldXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZWRpYVR5cGU7XG4gIH1cbiAgc3RhdGljIHZhbGlkSW5wdXRQb3N0KHZhbHVlKSB7XG4gICAgaWYgKC9cXHJcXG4kfFxcbiR8XFxyJC9naW0udGVzdCh2YWx1ZSkpIHJldHVybiAnTEFTVCBUWVBFIEJSRUFLIExJTkUuJztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgdmFsaWRQb3N0KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykgcmV0dXJuICdOTyBJTlBVVCBQT1NUJztcbiAgICBpZiAoL15cXHJcXG4rJHxcXG4rJHxcXHIrJC9nLnRlc3QodmFsdWUpKSByZXR1cm4gJ09OTFkgTkVXIExJTkUnO1xuICAgIGlmICgvXlxccyskL2cudGVzdCh2YWx1ZSkpIHJldHVybiAnb25seSBzcGFjZSc7XG4gICAgaWYgKC9eXFxyXFxuKyhcXHN8XFxTKSskfF5cXG4rKFxcc3xcXFMpKyR8XlxccisoXFxzfFxcUykrJC8udGVzdCh2YWx1ZSkpIHJldHVybiAnRU1QVFkgUE9TVCc7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGdldFdpZHRoKHBhcmFtcykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuaW5uZXJXaWR0aCkgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGlmIChwYXJhbXMud2lkdGgpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLndpZHRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAocGFyYW1zLndpZHRoLmluZGV4T2YoJ3B4JykgPj0gMCkge1xuICAgICAgICAgIHJldHVybiBOdW1iZXIocGFyYW1zLndpZHRoLnJlcGxhY2UoJ3B4JywgJycpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtcy53aWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBzdGF0aWMgZ2V0SGVpZ2h0KHBhcmFtcyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5pbm5lckhlaWdodCkgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlkOiBzdHJpbmc7XG5cbiAgLy8g44K544Os44OD44OJ5Z+65pys6Zai6YCjXG4gIGlzUm9vdENoOiBib29sZWFuO1xuICBpc0xpbmtDaDogYm9vbGVhbjtcbiAgaXNNZWRpYUNoOiBib29sZWFuO1xuICByb290Q2g6IHN0cmluZztcbiAgcm9vdFRpdGxlOiBzdHJpbmc7XG4gIGNoVHlwZTogJ3ZpZGVvJyB8ICdhdWRpbycgfCAnaHRtbCc7XG4gIGRpc3BUaHJlYWRUeXBlOiAnTXVsdGknIHwgJ1NpbmdsZScgfCAnQ2hpbGQnIHwgJ1RpbWVsaW5lJyB8ICdMb2dzJztcbiAgdHVuZWQ6IHN0cmluZztcbiAgbXVsdGlzdHJlYW06IGJvb2xlYW47XG5cbiAgLy8g5oqV56i/5oOF5aCxXG4gIGZpbmRUeXBlOiAnaHRtbCcgfCAnbXAzJyB8ICdtcDQnIHwgJ200YScgfCAnYXVkaW8nIHwgJ3ZpZGVvJztcbiAgb2Zmc2V0RmluZElkOiBzdHJpbmc7XG4gIG9mZnNldFRpbWVsaW5lRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldFNpbmdsZUZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRNdWx0aUZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRDaGlsZEZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRMb2dzRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG5cbiAgLy8g5YWl5Yqb54q25oWLXG4gIGlucHV0UG9zdDogc3RyaW5nO1xuICBpbnB1dFN0YW1wSWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgaW5wdXRDdXJyZW50VGltZTogbnVtYmVyO1xuICBpbnB1dFNlYXJjaDogc3RyaW5nO1xuXG4gIC8vIOOBneOBruS7llxuICBpc1RvZ2dsZU11bHRpc3RyZWFtOiBib29sZWFuO1xuICBhY3Rpb25lZDogc3RyaW5nO1xuICBkZWJ1Zzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30sIGNhbGwgPSAnJykge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyDmupblgplcbiAgICBjb25zdCBjaCA9IHBhcmFtcy5jaCA/IHBhcmFtcy5jaCA6ICcvJztcblxuICAgIC8vIElEXG4gICAgY29uc3QgaWQgPSBwYXJhbXMuaWQgPyBwYXJhbXMuaWQgOiAnJztcblxuICAgIC8vIOOCueODrOODg+ODieWfuuacrOmWoumAo1xuICAgIGNvbnN0IGlzTWVkaWFDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNNZWRpYUNoKSA/IHBhcmFtcy5pc01lZGlhQ2ggOiBBcHAuZ2V0SXNNZWRpYUNoKGNoKTtcbiAgICBjb25zdCBpc0xpbmtDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNMaW5rQ2gpID8gcGFyYW1zLmlzTGlua0NoIDogZmFsc2U7XG4gICAgY29uc3Qgcm9vdENoID0gcGFyYW1zLnJvb3RDaCA/IHBhcmFtcy5yb290Q2ggOiBjaDtcbiAgICBjb25zdCBpc1Jvb3RDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNSb290Q2gpID8gcGFyYW1zLmlzUm9vdENoIDogcm9vdENoID09PSBjaDtcbiAgICBjb25zdCByb290VGl0bGUgPSBwYXJhbXMucm9vdFRpdGxlID8gcGFyYW1zLnJvb3RUaXRsZSA6ICd0YWxrbic7XG4gICAgY29uc3Qgc3JjID0gQXBwLmdldE1lZGlhU3JjKHBhcmFtcy5wcm90b2NvbCwgY2gpO1xuICAgIGNvbnN0IGNoVHlwZSA9IEFwcC5nZXRNZWRpYVR5cGUoc3JjLCBwYXJhbXMpO1xuICAgIGNvbnN0IHR1bmVkID0gcGFyYW1zICYmIHBhcmFtcy50dW5lZCA/IHBhcmFtcy50dW5lZCA6ICcnO1xuICAgIGNvbnN0IGRpc3BUaHJlYWRUeXBlID0gQXBwLmdldERpc3BUaHJlYWRUeXBlKHBhcmFtcywgaXNNZWRpYUNoKTtcbiAgICBjb25zdCBtdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMubXVsdGlzdHJlYW0pID8gcGFyYW1zLm11bHRpc3RyZWFtIDogdHJ1ZTtcblxuICAgIC8vIOaKleeov+aDheWgsVxuICAgIGNvbnN0IGZpbmRUeXBlID0gcGFyYW1zICYmIHBhcmFtcy5maW5kVHlwZSA/IHBhcmFtcy5maW5kVHlwZSA6IFRocmVhZC5maW5kVHlwZUFsbDtcbiAgICBjb25zdCBvZmZzZXRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRUaW1lbGluZUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0VGltZWxpbmVGaW5kSWQgPyBwYXJhbXMub2Zmc2V0VGltZWxpbmVGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRTaW5nbGVGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRTaW5nbGVGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRNdWx0aUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRDaGlsZEZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRMb2dzRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRMb2dzRmluZElkID8gcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIC8vIOWFpeWKm+eKtuaFi1xuICAgIGNvbnN0IGlucHV0UG9zdCA9IHBhcmFtcy5pbnB1dFBvc3QgPyBwYXJhbXMuaW5wdXRQb3N0IDogJyc7XG4gICAgY29uc3QgaW5wdXRTdGFtcElkID0gcGFyYW1zLmlucHV0U3RhbXBJZCA/IHBhcmFtcy5pbnB1dFN0YW1wSWQgOiBmYWxzZTtcbiAgICBjb25zdCBpbnB1dEN1cnJlbnRUaW1lID0gcGFyYW1zLmlucHV0Q3VycmVudFRpbWUgPyBwYXJhbXMuaW5wdXRDdXJyZW50VGltZSA6IDAuMDtcbiAgICBjb25zdCBpbnB1dFNlYXJjaCA9IHBhcmFtcy5pbnB1dFNlYXJjaCA/IHBhcmFtcy5pbnB1dFNlYXJjaCA6ICcnO1xuXG4gICAgLy8g44Gd44Gu5LuWXG4gICAgY29uc3QgaXNUb2dnbGVNdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSkgPyBwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSA6IGZhbHNlO1xuICAgIGNvbnN0IGFjdGlvbmVkID0gcGFyYW1zICYmIHBhcmFtcy5hY3Rpb25lZCA/IHBhcmFtcy5hY3Rpb25lZCA6ICcnO1xuICAgIGNvbnN0IGRlYnVnID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5kZWJ1ZykgPyBwYXJhbXMuZGVidWcgOiAnJztcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xuICAgICAgLy8gSURcbiAgICAgIGlkLFxuXG4gICAgICAvLyDjgrnjg6zjg4Pjg4nln7rmnKzplqLpgKNcbiAgICAgIGlzUm9vdENoLFxuICAgICAgaXNMaW5rQ2gsXG4gICAgICBpc01lZGlhQ2gsXG4gICAgICByb290Q2gsXG4gICAgICByb290VGl0bGUsXG4gICAgICBjaFR5cGUsXG4gICAgICBkaXNwVGhyZWFkVHlwZSxcbiAgICAgIHR1bmVkLFxuICAgICAgbXVsdGlzdHJlYW0sIC8vIGRpc3BUaHJlYWRUeXBl44GMQ2hpbGQsIFRpbWVsaW5l44Gr44Gq44Gj44Gm44KCbXVsdGlzdHJlYW3nirbmhYvjgpLntq3mjIHjgZnjgotcblxuICAgICAgLy8gICAgICB0aHJlYWRTY3JvbGxZLFxuXG4gICAgICAvLyDmipXnqL/mg4XloLFcbiAgICAgIGZpbmRUeXBlLFxuICAgICAgb2Zmc2V0RmluZElkLFxuICAgICAgb2Zmc2V0VGltZWxpbmVGaW5kSWQsXG4gICAgICBvZmZzZXRTaW5nbGVGaW5kSWQsXG4gICAgICBvZmZzZXRNdWx0aUZpbmRJZCxcbiAgICAgIG9mZnNldENoaWxkRmluZElkLFxuICAgICAgb2Zmc2V0TG9nc0ZpbmRJZCxcblxuICAgICAgLy8gZGV0YWls5oOF5aCxXG5cbiAgICAgIC8vIOWFpeWKm+eKtuaFi1xuICAgICAgaW5wdXRQb3N0LFxuICAgICAgaW5wdXRTdGFtcElkLFxuICAgICAgaW5wdXRDdXJyZW50VGltZSxcbiAgICAgIGlucHV0U2VhcmNoLFxuXG4gICAgICAvLyDjgZ3jga7ku5ZcbiAgICAgIGlzVG9nZ2xlTXVsdGlzdHJlYW0sXG4gICAgICBhY3Rpb25lZCxcbiAgICAgIGRlYnVnLFxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGlzTWVkaWFDb250ZW50VHlwZShjb250ZW50VHlwZSkge1xuICAgIHJldHVybiBBcHAuaXNBdWRpb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB8fCBBcHAuaXNWaWRlb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICByZXR1cm4gY29udGVudFR5cGUuaW5kZXhPZihBcHAubWVkaWFUYWdUeXBlQXVkaW8pID49IDA7XG4gIH1cblxuICBzdGF0aWMgaXNWaWRlb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlLmluZGV4T2YoQXBwLm1lZGlhVGFnVHlwZVZpZGVvKSA+PSAwO1xuICB9XG5cbiAgc3RhdGljIGdldE1lZGlhU3JjKHByb3RvY29sLCBjaCkge1xuICAgIHJldHVybiBwcm90b2NvbCArICcvJyArIGNoLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0SXNNZWRpYUNoKGNoKSB7XG4gICAgcmV0dXJuIEFwcC5tZWRpYUNocy5zb21lKChleHQpID0+IHtcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoYC4ke2V4dH1cXC8kfC4ke2V4dH0kYCk7XG4gICAgICByZXR1cm4gY2gubWF0Y2gocmVnZXhwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwVGhyZWFkVHlwZShwYXJhbXMsIGlzTWVkaWFDaCkge1xuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmRpc3BUaHJlYWRUeXBlKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmRpc3BUaHJlYWRUeXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNNZWRpYUNoKSB7XG4gICAgICAgIHJldHVybiBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHMgfSkge1xuICAgIGlmIChwb3N0cyAmJiBwb3N0c1swXSAmJiBwb3N0c1swXS5faWQpIHtcbiAgICAgIHJldHVybiBwb3N0c1swXS5faWQ7XG4gICAgfVxuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RlcFRvRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmtzIH06IGFueSwgdGhyZWFkU3RhdHVzOiBhbnksIHRvQ2g6IHN0cmluZywgY2xpY2tlZDogRnJvbVR5cGUgPSAnJykge1xuICAgIGxldCBhZnRlckRpc3BUaHJlYWRUeXBlID0gJyc7XG4gICAgY29uc3QgYmVmb3JlRGlzcFRocmVhZFR5cGUgPSBhcHAgJiYgYXBwLmRpc3BUaHJlYWRUeXBlID8gYXBwLmRpc3BUaHJlYWRUeXBlIDogQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGk7XG4gICAgYXBwID0gQXBwLmdldFN0ZXBEaXNwVGhyZWFkVHlwZSh7IGFwcCwgcmFua3MgfSwgdGhyZWFkU3RhdHVzLCB0b0NoLCBjbGlja2VkKTtcbiAgICBhZnRlckRpc3BUaHJlYWRUeXBlID0gYXBwLmRpc3BUaHJlYWRUeXBlO1xuICAgIHJldHVybiB7IGFwcCwgc3RlcFRvOiBgJHtiZWZvcmVEaXNwVGhyZWFkVHlwZX0gdG8gJHthZnRlckRpc3BUaHJlYWRUeXBlfWAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGVwRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmtzIH0sIHRocmVhZFN0YXR1czogYW55ID0ge30sIHRvQ2gsIGNsaWNrZWQpIHtcbiAgICBjb25zdCBsb2cgPSBmYWxzZTtcbiAgICBjb25zdCB1cGRhdGVkQXBwID0gYXBwID8gYXBwIDoge307XG4gICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKHJhbmtzKTtcbiAgICBpZiAobG9nKSBjb25zb2xlLmxvZyh0aHJlYWRTdGF0dXMpO1xuXG4gICAgaWYgKHRocmVhZFN0YXR1cy5pc01lZGlhQ2gpIHtcbiAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKCdCJyk7XG4gICAgICB1cGRhdGVkQXBwLmRpc3BUaHJlYWRUeXBlID0gQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU7XG4gICAgICB1cGRhdGVkQXBwLm9mZnNldEZpbmRJZCA9IHVwZGF0ZWRBcHAub2Zmc2V0VGltZWxpbmVGaW5kSWQgPyB1cGRhdGVkQXBwLm9mZnNldFRpbWVsaW5lRmluZElkIDogQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgICB1cGRhdGVkQXBwLmlzTGlua0NoID0gY2xpY2tlZCA9PT0gJ0xpbmtzJyB8fCBjbGlja2VkID09PSAnZmluZE1lZGlhQ2gnIHx8IGNsaWNrZWQgPT09ICdUb01lZGlhJyA/IHRydWUgOiBmYWxzZTtcbiAgICAgIHVwZGF0ZWRBcHAuaXNNZWRpYUNoID0gdHJ1ZTtcbiAgICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICAgIH1cblxuICAgIGlmIChjbGlja2VkID09PSAnQmFja1RvUm9vdENoJykge1xuICAgICAgdXBkYXRlZEFwcC5pc0xpbmtDaCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChjbGlja2VkID09PSAnTGlua3MnICYmIHJhbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGhhdmVNZW51SW5kZXggPSByYW5rcy5zb21lKChtaSkgPT4ge1xuICAgICAgICByZXR1cm4gbWkuY2ggPT09IHRvQ2ggfHwgbWkuY2ggPT09IHRvQ2ggKyAnLyc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0MgJyArIGhhdmVNZW51SW5kZXggKyAnJyk7XG5cbiAgICAgIGlmICghaGF2ZU1lbnVJbmRleCkge1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLmxvZygnRCcpO1xuXG4gICAgICAgIHVwZGF0ZWRBcHAub2Zmc2V0RmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDtcbiAgICAgICAgdXBkYXRlZEFwcC5pc0xpbmtDaCA9IHRydWU7XG4gICAgICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1cGRhdGVkQXBwLnJvb3RDaCA9PT0gdG9DaCkge1xuICAgICAgaWYgKHVwZGF0ZWRBcHAubXVsdGlzdHJlYW0pIHtcbiAgICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0UnKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0YnKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0cnKTtcbiAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDtcbiAgICB9XG4gICAgaWYgKGxvZykgY29uc29sZS5sb2coYXBwKTtcbiAgICByZXR1cm4gdXBkYXRlZEFwcDtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vdE9wdGlvbiBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKGJvb3RPcHRpb246IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoeyAuLi5ib290T3B0aW9uIH0pO1xuICB9XG5cbiAgc3RhdGljIHJlYnVpbGRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICBsZXQgcmVidWlsZEF0dHJpYnV0ZXNPYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKGkpID0+IHtcbiAgICAgIHJlYnVpbGRBdHRyaWJ1dGVzT2JqW2F0dHJpYnV0ZXNbaV0ubmFtZV0gPSBhdHRyaWJ1dGVzW2ldLnZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZWJ1aWxkQXR0cmlidXRlc09iajtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudUxvZ3MgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMgPyBwYXJhbXMgOiBbXTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUocGFyYW1zKTtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcbmltcG9ydCBjb25mIGZyb20gJ2NvbW1vbi9jb25mJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdEZpbmRJZCgpIHtcbiAgICByZXR1cm4gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0VmFsdWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaDogJy8nLFxuICAgICAgY2hzOiBbJy8nXSxcbiAgICAgIGZhdmljb246IGNvbmYuZGVmYXVsdEZhdmljb24sXG4gICAgICBmaW5kVHlwZTogJ0h0bWwnLFxuICAgICAgbGF5ZXI6IDEsXG4gICAgICBwb3N0OiAnJyxcbiAgICAgIHByb3RvY29sOiAnaHR0cHM6JyxcbiAgICAgIHN0YW1wSWQ6IDAsXG4gICAgICB0aXRsZTogJ3RhbGtuJyxcbiAgICAgIGxpdmVDbnQ6IDAsXG4gICAgICB1aWQ6ICcnLFxuICAgICAgdXR5cGU6ICcnLFxuICAgICAgZGlzcEZsZzogdHJ1ZSxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBjcmVhdGVUaW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgY3VycmVudFRpbWU6IG5ldyBEYXRlKCksXG4gICAgICB1cGRhdGVUaW1lOiBuZXcgRGF0ZSgpLFxuICAgIH07XG4gIH1cbiAgY2g6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5jaDtcbiAgY2hzOiBzdHJpbmdbXSA9IFBvc3QuZGVmYXVsdFZhbHVlcy5jaHM7XG4gIGZhdmljb246IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5mYXZpY29uO1xuICBmaW5kVHlwZTogc3RyaW5nID0gUG9zdC5kZWZhdWx0VmFsdWVzLmZpbmRUeXBlO1xuICBsYXllcjogbnVtYmVyID0gUG9zdC5kZWZhdWx0VmFsdWVzLmxheWVyO1xuICBwb3N0OiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMucG9zdDtcbiAgcHJvdG9jb2w6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5wcm90b2NvbDtcbiAgc3RhbXBJZDogbnVtYmVyID0gUG9zdC5kZWZhdWx0VmFsdWVzLnN0YW1wSWQ7XG4gIHRpdGxlOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudGl0bGU7XG4gIGxpdmVDbnQ6IG51bWJlciA9IFBvc3QuZGVmYXVsdFZhbHVlcy5saXZlQ250O1xuICB1aWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy51aWQ7XG4gIHV0eXBlOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudXR5cGU7XG4gIGRpc3BGbGc6IGJvb2xlYW4gPSBQb3N0LmRlZmF1bHRWYWx1ZXMuZGlzcEZsZztcbiAgZGF0YTogYW55ID0gUG9zdC5kZWZhdWx0VmFsdWVzLmRhdGE7XG4gIGNyZWF0ZVRpbWU6IERhdGUgPSBQb3N0LmRlZmF1bHRWYWx1ZXMuY3JlYXRlVGltZTtcbiAgY3VycmVudFRpbWU6IERhdGUgPSBQb3N0LmRlZmF1bHRWYWx1ZXMuY3VycmVudFRpbWU7XG4gIHVwZGF0ZVRpbWU6IERhdGUgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudXBkYXRlVGltZTtcbiAgY29uc3RydWN0b3IocGFyYW1zPzogUG9zdCkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdmFsdWVzID0gcGFyYW1zID8geyAuLi5Qb3N0LmRlZmF1bHRWYWx1ZXMsIC4uLnBhcmFtcyB9IDogUG9zdC5kZWZhdWx0VmFsdWVzO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh2YWx1ZXMpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RNdWx0aSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgQXBwIGZyb20gJ2FwaS9zdG9yZS9BcHAnO1xuaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RNdWx0aSBmcm9tICdhcGkvc3RvcmUvUG9zdE11bHRpJztcbmltcG9ydCBQb3N0c1NpbmdsZSBmcm9tICdhcGkvc3RvcmUvUG9zdHNTaW5nbGUnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmUnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmVTdG9jayBmcm9tICdhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdHMge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwUG9zdHMoc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSwgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUsIHBvc3RzQ2hpbGQsIHBvc3RzTG9ncyB9ID0gc3RhdGU7XG4gICAgc3dpdGNoIChhcHAuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6XG4gICAgICAgIHJldHVybiBwb3N0c1RpbWVsaW5lO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgcmV0dXJuIHBvc3RzTXVsdGk7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgcmV0dXJuIHBvc3RzU2luZ2xlO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgcmV0dXJuIHBvc3RzQ2hpbGQ7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIHJldHVybiBwb3N0c0xvZ3M7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHMgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBleGlzdFBvc3RzID0gcG9zdHMgJiYgcG9zdHMubGVuZ3RoID4gMDtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0TXVsdGkoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IFtdO1xuICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBbXTtcbiAgICBzd2l0Y2ggKGFwcC5kaXNwVGhyZWFkVHlwZSkge1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTpcbiAgICAgICAgYWN0aW9uID0gUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZShhY3Rpb24sIHBvc3RzLCBzdGF0ZSwgZXhpc3RQb3N0cyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgYWN0aW9uLnBvc3RzTXVsdGkgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgYWN0aW9uLnBvc3RzU2luZ2xlID0gZXhpc3RQb3N0cyA/IHBvc3RzIDogW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgYWN0aW9uLnBvc3RzQ2hpbGQgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzVGltZWxpbmUoYWN0aW9uLCBwb3N0cywgc3RhdGUsIGV4aXN0UG9zdHMpIHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCcpIHtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLnB1c2goYWN0aW9uLnBvc3RzWzBdKTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzJykge1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jayA9IG5ldyBQb3N0c1RpbWVsaW5lU3RvY2soKTtcblxuICAgICAgaWYgKGV4aXN0UG9zdHMpIHtcbiAgICAgICAgY29uc3QgcG9zdHNMZW5ndGggPSBwb3N0cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdHNMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChwb3N0c1tpXS5jdXJyZW50VGltZSA9PT0gMCkge1xuICAgICAgICAgICAgYWN0aW9uLnBvc3RzVGltZWxpbmUucHVzaChwb3N0c1tpXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sucHVzaChwb3N0c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFNpbmdsZSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RzVGltZWxpbmUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0VGltZWxpbmVTdG9jayB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RUaW1lbGluZVplcm8ge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0VGltZWxpbmVPdGhlclRoYW5aZXJvIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBQb3N0W10gPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFua3Mge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dGluZyBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IGNsaWVudCA9IHBhcmFtcyAmJiBwYXJhbXMuY2xpZW50ID8gcGFyYW1zLmNsaWVudCA6IHt9O1xuICAgIGNvbnN0IGNvbW1vbiA9IHBhcmFtcyAmJiBwYXJhbXMuY29tbW9uID8gcGFyYW1zLmNvbW1vbiA6IHt9O1xuICAgIGNvbnN0IHNlcnZlciA9IHBhcmFtcyAmJiBwYXJhbXMuc2VydmVyID8gcGFyYW1zLnNlcnZlciA6IHt9O1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICBjbGllbnQsXG4gICAgICBjb21tb24sXG4gICAgICBzZXJ2ZXIsXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSAnY29tbW9uL1NjaGVtYSc7XG5pbXBvcnQgU2VxdWVuY2UgZnJvbSAnY29tbW9uL1NlcXVlbmNlJztcbmltcG9ydCBjb25mIGZyb20gJ2NvbW1vbi9jb25mJztcblxuaW1wb3J0IEFwcCBmcm9tICdhcGkvc3RvcmUvQXBwJztcbmltcG9ydCBCb290T3B0aW9uIGZyb20gJ2FwaS9zdG9yZS9Cb290T3B0aW9uJztcblxuZXhwb3J0IHR5cGUgVGhyZWFkU3RhdHVzVHlwZSA9IHtcbiAgZGlzcFR5cGU6IHN0cmluZztcbiAgaXNDcmVhdGU6IGJvb2xlYW47XG4gIGlzUmVxdWlyZVVwc2VydDogYm9vbGVhbjtcbiAgaXNNdWx0aXN0cmVhbTogYm9vbGVhbjtcbiAgaXNNZWRpYUNoOiBib29sZWFuO1xuICBpc1RvZ2dsZU11bHRpc3RyZWFtOiBib29sZWFuO1xuICBnZXRNb3JlOiBib29sZWFuO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWFkIGV4dGVuZHMgU2NoZW1hIHtcbiAgc3RhdGljIGdldCBmaW5kVHlwZUFsbCgpOiAnQWxsJyB7XG4gICAgcmV0dXJuICdBbGwnO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVIdG1sKCk6ICdIdG1sJyB7XG4gICAgcmV0dXJuICdIdG1sJztcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlTXVzaWMoKTogJ011c2ljJyB7XG4gICAgcmV0dXJuICdNdXNpYyc7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZVZpZGVvKCk6ICdWaWRlbycge1xuICAgIHJldHVybiAnVmlkZW8nO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVPdGhlcigpOiAnT3RoZXInIHtcbiAgICByZXR1cm4gJ090aGVyJztcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW1RocmVhZC5maW5kVHlwZUh0bWxdOiBbJ3RleHQvaHRtbCddLFxuICAgICAgW1RocmVhZC5maW5kVHlwZU11c2ljXTogWydhdWRpbycsICdhdWRpby9tcGVnJywgJ2F1ZGlvL21wNCcsICdhdWRpby94LXdhdicsICdhdWRpby9taWRpJywgJ2FwcGxpY2F0aW9uL3gtc21hZiddLFxuICAgICAgW1RocmVhZC5maW5kVHlwZVZpZGVvXTogWyd2aWRlbycsICd2aWRlby9tcGVnJywgJ3ZpZGVvL21wNCcsICd2aWRlby9xdWlja3RpbWUnLCAndmlkZW8veC1tcy13bXYnLCAnYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnLCAndmlkZW8vM2dwcDInXSxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZWZhdWx0VGl0bGUoKSB7XG4gICAgcmV0dXJuICd0YWxrbic7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVmYXVsdEZhdmljb24oKSB7XG4gICAgcmV0dXJuICd1c2VyLnBuZyc7XG4gIH1cblxuICBzdGF0aWMgaXNXaW5kb3dPYmoocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtcy5hbGVydCA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIGhyZWY6IHN0cmluZztcbiAgY2g6IHN0cmluZztcbiAgY2hzOiBbc3RyaW5nXSA9IFsnLyddO1xuICBoYXNTbGFzaDogYm9vbGVhbjtcbiAgcHJvdG9jb2w6IHN0cmluZyA9IFNlcXVlbmNlLlRBTEtOX1BST1RPQ09MO1xuICBjb250ZW50VHlwZTogc3RyaW5nO1xuICBjaGFyc2V0OiBzdHJpbmcgPSAnVVRGLTgnO1xuICBob3N0OiBzdHJpbmcgPSAnJztcbiAgZmF2aWNvbjogc3RyaW5nID0gVGhyZWFkLmdldERlZmF1bHRGYXZpY29uKCk7XG4gIGZpbmRUeXBlOiAnQWxsJyB8ICdIdG1sJyB8ICdNdXNpYycgfCAnVmlkZW8nID0gVGhyZWFkLmZpbmRUeXBlQWxsO1xuICB0aXRsZTogc3RyaW5nID0gVGhyZWFkLmdldERlZmF1bHRUaXRsZSgpO1xuICBtZXRhczogYW55ID0gW107XG4gIGVtb3Rpb25zOiBhbnkgPSB7fTtcbiAgc2VydmVyTWV0YXM6IGFueSA9IHt9O1xuICBjbGllbnRNZXRhczogYW55ID0ge307XG4gIGxpbmtzOiBhbnkgPSBbXTtcbiAgaDFzOiBhbnkgPSBbXTtcbiAgYXVkaW9zOiBhbnkgPSBbXTtcbiAgdmlkZW9zOiBhbnkgPSBbXTtcbiAgbGF5ZXI6IG51bWJlciA9IFRocmVhZC5nZXRMYXllcigpO1xuICBtZWRpYUluZGV4OiBhbnkgPSBbXTtcbiAgcG9zdENudDogbnVtYmVyID0gMDtcbiAgbXVsdGlQb3N0Q250OiBudW1iZXIgPSAwO1xuICBpc1NlbGZDaDogYm9vbGVhbiA9IGZhbHNlO1xuICBjcmVhdGVUaW1lOiBzdHJpbmcgPSAnJztcbiAgdXBkYXRlVGltZTogc3RyaW5nID0gJyc7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30sIGJvb3RPcHRpb24/OiBCb290T3B0aW9uIHwge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHRocmVhZCA9IFRocmVhZC5pc1dpbmRvd09iaihwYXJhbXMpID8gVGhyZWFkLmNvbnN0cnVjdG9yRnJvbVdpbmRvdyhwYXJhbXMsIGJvb3RPcHRpb24pIDogcGFyYW1zO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh0aHJlYWQpO1xuICB9XG5cbiAgc3RhdGljIGNvbnN0cnVjdG9yRnJvbVdpbmRvdyhwYXJhbXMsIGJvb3RPcHRpb24pIHtcbiAgICBjb25zdCBib290Q2ggPSBib290T3B0aW9uLmNoID8gYm9vdE9wdGlvbi5jaCA6IGZhbHNlO1xuICAgIGNvbnN0IGNoID0gVGhyZWFkLmdldENoKGJvb3RPcHRpb24sIGJvb3RDaCk7XG5cbiAgICBsZXQgdGhyZWFkOiBhbnkgPSB7fTtcbiAgICBsZXQgaHJlZiA9ICcnO1xuICAgIHRocmVhZC5jaCA9IGNoO1xuICAgIHRocmVhZC5jaHMgPSBbJy8nXTtcbiAgICB0aHJlYWQuaGFzU2xhc2ggPSBib290T3B0aW9uLmhhc3NsYXNoID8gU2NoZW1hLmdldEJvb2woYm9vdE9wdGlvbi5oYXNzbGFzaCkgOiBmYWxzZTtcbiAgICB0aHJlYWQucHJvdG9jb2wgPSAndGFsa246JztcbiAgICB0aHJlYWQuY29udGVudFR5cGUgPSAnJztcbiAgICB0aHJlYWQuY2hhcnNldCA9ICdVVEYtOCc7XG4gICAgdGhyZWFkLmhvc3QgPSAnJztcbiAgICB0aHJlYWQuZmF2aWNvbiA9IFRocmVhZC5nZXREZWZhdWx0RmF2aWNvbigpO1xuICAgIHRocmVhZC5maW5kVHlwZSA9IFRocmVhZC5maW5kVHlwZUFsbDtcblxuICAgIGlmIChib290Q2gpIHtcbiAgICAgIC8vIFVSTOOBruOCs+ODjeOCr+OCt+ODp+ODs+aWh+Wtl+WIl+OBi+OCieOBp+OBr1BST1RPQ09M44Gv5Yik5Yil44Gn44GN44Gq44GE44CCXG4gICAgICB0aHJlYWQucHJvdG9jb2wgPSBUaHJlYWQuZ2V0UHJvdG9jb2woYm9vdENoKTtcbiAgICAgIHRocmVhZC5ob3N0ID0gVGhyZWFkLmdldEhvc3QoYm9vdENoKTtcbiAgICAgIHRocmVhZC5jaHMgPSBib290Q2guY2hzICYmIGJvb3RDaC5jaHMubGVuZ3RoID4gMCA/IGJvb3RDaC5jaHMgOiBUaHJlYWQuZ2V0Q2hzKGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyZWFkLnByb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2wgPyBsb2NhdGlvbi5wcm90b2NvbCA6ICc/Pz8/Oic7XG4gICAgICB0aHJlYWQuY2hzID0gcGFyYW1zLmNocyAmJiBwYXJhbXMuY2hzLmxlbmd0aCA+IDAgPyBwYXJhbXMuY2hzIDogVGhyZWFkLmdldENocyhjaCk7XG4gICAgICB0aHJlYWQuY29udGVudFR5cGUgPSBkb2N1bWVudC5jb250ZW50VHlwZSA/IGRvY3VtZW50LmNvbnRlbnRUeXBlIDogJyc7XG4gICAgICB0aHJlYWQuY2hhcnNldCA9IGRvY3VtZW50LmNoYXJzZXQgPyBkb2N1bWVudC5jaGFyc2V0IDogJyc7XG5cbiAgICAgIHRocmVhZC5ob3N0ID0gbG9jYXRpb24uaG9zdCA/IGxvY2F0aW9uLmhvc3QgOiAnJztcbiAgICAgIHRocmVhZC5mYXZpY29uID0gVGhyZWFkLmdldEZhdmljb25Gcm9tV2luZG93KHdpbmRvdyk7XG4gICAgfVxuXG4gICAgdGhyZWFkLnRpdGxlID0gVGhyZWFkLmdldERlZmF1bHRUaXRsZSgpO1xuICAgIHRocmVhZC5tZXRhcyA9IFtdO1xuICAgIHRocmVhZC5zZXJ2ZXJNZXRhcyA9IHt9O1xuICAgIHRocmVhZC5jbGllbnRNZXRhcyA9IHt9O1xuICAgIHRocmVhZC5lbW90aW9ucyA9IHt9O1xuICAgIHRocmVhZC5saW5rcyA9IFtdO1xuICAgIHRocmVhZC5oMXMgPSBbXTtcbiAgICB0aHJlYWQuYXVkaW9zID0gW107XG4gICAgdGhyZWFkLnZpZGVvcyA9IFtdO1xuICAgIHRocmVhZC5sYXllciA9IFRocmVhZC5nZXRMYXllcih0aHJlYWQuY2gpO1xuICAgIHRocmVhZC5tZWRpYUluZGV4ID0gW107XG4gICAgdGhyZWFkLnBvc3RDbnQgPSAwO1xuICAgIHRocmVhZC5tdWx0aVBvc3RDbnQgPSAwO1xuICAgIHRocmVhZC5pc1NlbGZDaCA9IFRocmVhZC5nZXRJc1NlbGZDaChocmVmLCB0aHJlYWQuY2gpO1xuICAgIHRocmVhZC5jcmVhdGVUaW1lID0gJyc7XG4gICAgdGhyZWFkLnVwZGF0ZVRpbWUgPSAnJztcbiAgICByZXR1cm4gdGhyZWFkO1xuICB9XG5cbiAgc3RhdGljIGdldENoKGJvb3RPcHRpb246IGFueSwgYm9vdENoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYm9vdE9wdGlvbiAmJiBib290T3B0aW9uLmNoICYmIGJvb3RPcHRpb24uY2ggIT09ICcnID8gYm9vdE9wdGlvbi5jaCA6ICcvJztcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaFRvcChjaCkge1xuICAgIGlmIChjaCAhPT0gJycpIHtcbiAgICAgIHJldHVybiAnLycgKyBjaC5zcGxpdCgnLycpWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldENocyhfY2gpIHtcbiAgICBsZXQgY2hzID0gWycvJ107XG5cbiAgICBpZiAoX2NoICE9PSAnJykge1xuICAgICAgLy9jaCA9IGNoLnJlcGxhY2UoL1xcdTAwMmYkL2csICcnKTtcbiAgICAgIGNvbnN0IGNoID0gX2NoLnNsaWNlKC0xKSA9PT0gJy8nID8gX2NoIDogX2NoICsgJy8nO1xuXG4gICAgICBpZiAoY2ggIT09ICcvJykge1xuICAgICAgICBjb25zdCBjaEFyciA9IGNoLnNwbGl0KCcvJyk7XG4gICAgICAgIGNvbnN0IGNoTGVuZ3RoID0gY2hBcnIubGVuZ3RoO1xuICAgICAgICBsZXQgbmV3Q2ggPSAnJztcbiAgICAgICAgbGV0IG5vU2xhc2hDaCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNoTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoY2hBcnJbaV0gIT09ICcnKSB7XG4gICAgICAgICAgICBuZXdDaCArPSBjaEFycltpXTtcblxuICAgICAgICAgICAgLy8g5LiA55Wq5pyA5b6M44GML+OBruWgtOWQiFxuICAgICAgICAgICAgbmV3Q2ggPSBuZXdDaC5zbGljZSgtMSkgPT09ICcvJyA/IG5ld0NoIDogbmV3Q2ggKyAnLyc7XG5cbiAgICAgICAgICAgIC8vIOS4gOeVquacgOWIneOBjC/jga7loLTlkIhcbiAgICAgICAgICAgIG5ld0NoID0gbmV3Q2guc2xpY2UoMCwgMSkgPT09ICcvJyA/IG5ld0NoIDogJy8nICsgbmV3Q2g7XG5cbiAgICAgICAgICAgIC8vIOacgOW+jOOBjC/nhKHjgZfjga7jgrPjg43jgq/jgrfjg6fjg7PjgpLnlJ/miJBcbiAgICAgICAgICAgIC8vbm9TbGFzaENoID0gbmV3Q2guc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgICAgICAvL2Nocy5wdXNoKCBub1NsYXNoQ2ggKTtcbiAgICAgICAgICAgIGNocy5wdXNoKG5ld0NoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNocztcbiAgfVxuXG4gIHN0YXRpYyBnZXRIb3N0KGNoKSB7XG4gICAgaWYgKGNoLmluZGV4T2YoJy4nKSA+PSAwKSB7XG4gICAgICBjaCA9IGNoLnJlcGxhY2UoJ2h0dHBzOi8vJywgJycpLnJlcGxhY2UoJ2h0dHA6Ly8nLCAnJyk7XG4gICAgICByZXR1cm4gY2gucmVwbGFjZSgvXlxcLy8sICcnKS5yZXBsYWNlKC9cXC8uKiQvLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb25mLmRvbWFpbjtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvdG9jb2woaHJlZikge1xuICAgIGlmIChocmVmLmluZGV4T2YoJ2h0dHA6JykgPj0gMCkgcmV0dXJuICdodHRwOic7XG4gICAgaWYgKGhyZWYuaW5kZXhPZignaHR0cHM6JykgPj0gMCkgcmV0dXJuICdodHRwczonO1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCkgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHJldHVybiAnPz8/PzonO1xuICB9XG5cbiAgc3RhdGljIGdldElzU2VsZkNoKGhyZWYsIGNoKSB7XG4gICAgY29uc3QgcmVwbGFjZWRIcmVmID0gaHJlZlxuICAgICAgLnJlcGxhY2UoJ2h0dHA6LycsICcnKVxuICAgICAgLnJlcGxhY2UoJ2h0dHBzOi8nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHUwMDJmJC8sICcnKTtcbiAgICByZXR1cm4gcmVwbGFjZWRIcmVmID09PSBjaDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRMYXllcihjaCA9ICcvJykge1xuICAgIHJldHVybiBjaC5zcGxpdCgnLycpLmxlbmd0aCAtIDE7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVkaWFTcmModGhyZWFkKSB7XG4gICAgcmV0dXJuIEFwcC5nZXRNZWRpYVNyYyh0aHJlYWQucHJvdG9jb2wsIHRocmVhZC5jaCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVkaWFUYWdUeXBlKHRocmVhZCkge1xuICAgIGNvbnN0IHNyYyA9IFRocmVhZC5nZXRNZWRpYVNyYyh0aHJlYWQpO1xuICAgIHJldHVybiBBcHAuZ2V0TWVkaWFUeXBlKHNyYywgbnVsbCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0RmF2aWNvbkZyb21XaW5kb3cod2luZG93KSB7XG4gICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgIGNvbnN0IHUgPSB3aW5kb3cuZG9jdW1lbnQuZXZhbHVhdGUoXCIvL2xpbmtbY29udGFpbnMoQHJlbCwnaWNvbicpb3IoY29udGFpbnMoQHJlbCwnSUNPTicpKV1bMV0vQGhyZWZcIiwgd2luZG93LmRvY3VtZW50LCBudWxsLCAyLCBudWxsKS5zdHJpbmdWYWx1ZTtcbiAgICAgIGNvbnN0IGggPSAnaHR0cDovLyc7XG4gICAgICBjb25zdCBocyA9ICdodHRwczovLyc7XG4gICAgICBjb25zdCBsID0gbG9jYXRpb24uaG9zdDtcbiAgICAgIGlmICh1LmluZGV4T2YoaCkgfHwgdS5pbmRleE9mKGhzKSkge1xuICAgICAgICBjb25zdCB1cmwgPSBoICsgbCArICh1IHx8ICcvZmF2aWNvbi5pY28nKTtcbiAgICAgICAgY29uc3Qgc3RyQ250ID0gdXJsLnNwbGl0KCcvLycpLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChzdHJDbnQgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXModGhyZWFkLCBhcHAsIGlzRXhpc3QsIHNldHRpbmcgPSB7fSk6IFRocmVhZFN0YXR1c1R5cGUge1xuICAgIGxldCBzdGF0dXMgPSB7XG4gICAgICBkaXNwVHlwZTogJycsIC8vIFRJTUVMSU5FLCBNVUxUSSwgU0lOR0xFLCBDSElMRCwgTE9HU1xuICAgICAgaXNDcmVhdGU6IGZhbHNlLFxuICAgICAgaXNSZXF1aXJlVXBzZXJ0OiBmYWxzZSxcbiAgICAgIGlzTXVsdGlzdHJlYW06IGZhbHNlLFxuICAgICAgaXNNZWRpYUNoOiBmYWxzZSxcbiAgICAgIGlzVG9nZ2xlTXVsdGlzdHJlYW06IGZhbHNlLFxuICAgICAgZ2V0TW9yZTogZmFsc2UsXG4gICAgfTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIHRocmVhZOOBjOepuuOBrlNjaGVtYeOBi+OBqeOBhuOBiyhEQuOBq+ODh+ODvOOCv+OBjOWtmOWcqOOBl+OBquOBhCkgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNDcmVhdGUgPSBUaHJlYWQuZ2V0U3RhdHVzQ3JlYXRlKGlzRXhpc3QpO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyog5pu05paw44GM5b+F6KaB44GqdGhyZWFk44GL44Gp44GG44GLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzUmVxdWlyZVVwc2VydCA9IFRocmVhZC5nZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQodGhyZWFkLCBzZXR0aW5nLCBzdGF0dXMuaXNDcmVhdGUpO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogTXVsdGlzdHJlYW3lvaLlvI/jgYvjganjgYbjgYsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc011bHRpc3RyZWFtID0gVGhyZWFkLmdldFN0YXR1c0lzTXVsdGlzdHJlYW0oYXBwKTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIE11bHRpc3RyZWFt44Gu44Oc44K/44Oz44KS5oq844GX44Gf44GLICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzVG9nZ2xlTXVsdGlzdHJlYW0gPSBUaHJlYWQuZ2V0U3RhdHVzSXNUb2dnbGVNdWx0aXN0cmVhbShhcHApO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogdGhyZWFk44GM56m644GuU2NoZW1h44GL44Gp44GG44GLKERC44Gr44OH44O844K/44GM5a2Y5Zyo44GX44Gq44GEKSAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc01lZGlhQ2ggPSBUaHJlYWQuZ2V0U3RhdHVzSXNNZWRpYUNoKHRocmVhZC5jaCk7XG4gICAgcmV0dXJuIHN0YXR1cztcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNDcmVhdGUoaXNFeGlzdCkge1xuICAgIHJldHVybiAhaXNFeGlzdDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQodGhyZWFkLCBzZXR0aW5nLCBpc0NyZWF0ZSA9IGZhbHNlKSB7XG4gICAgaWYgKCFpc0NyZWF0ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aHJlYWQudXBkYXRlVGltZSkge1xuICAgICAgY29uc3QgdGhyZWFkVXBkYXRlVGltZSA9IHRocmVhZC51cGRhdGVUaW1lLmdldFRpbWUgPyB0aHJlYWQudXBkYXRlVGltZS5nZXRUaW1lKCkgOiB0aHJlYWQudXBkYXRlVGltZTtcblxuICAgICAgLy8g54++5Zyo5pmC5Yi744KS5Y+W5b6XXG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgY29uc3Qgbm93WWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xuICAgICAgY29uc3Qgbm93TW9udGggPSBub3cuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IG5vd0RheSA9IG5vdy5nZXREYXRlKCk7XG4gICAgICBjb25zdCBub3dIb3VyID0gbm93LmdldEhvdXJzKCk7XG4gICAgICBjb25zdCBub3dNaW51dGVzID0gbm93LmdldE1pbnV0ZXMoKTtcbiAgICAgIGNvbnN0IGFjdGl2ZURhdGUgPSBuZXcgRGF0ZShub3dZZWFyLCBub3dNb250aCwgbm93RGF5LCBub3dIb3VyIC0gY29uZi5maW5kT25lVGhyZWFkQWN0aXZlSG91cik7XG4gICAgICBjb25zdCBhY3RpdmVUaW1lID0gYWN0aXZlRGF0ZS5nZXRUaW1lKCk7XG5cbiAgICAgIC8vIOOCueODrOODg+ODieOBruabtOaWsOaZgumWk+OBqOOAgeePvuWcqOaZgumWkyAtIG4g44KS5q+U6LyD44GX44Gm44CB44K544Os44OD44OJ44Gu5pu05paw5pmC6ZaT44GM5Y+k44GL44Gj44Gf44KJdHJ1ZeOCkui/lOOBmVxuICAgICAgcmV0dXJuIHRocmVhZFVwZGF0ZVRpbWUgPCBhY3RpdmVUaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzTXVsdGlzdHJlYW0oYXBwKTogYm9vbGVhbiB7XG4gICAgaWYgKGFwcCA9PT0gdW5kZWZpbmVkIHx8IGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gYXBwLmRpc3BUaHJlYWRUeXBlID09PSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aSAmJiBhcHAubXVsdGlzdHJlYW07XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RhdHVzSXNNZWRpYUNoKGNoKSB7XG4gICAgcmV0dXJuIEFwcC5nZXRJc01lZGlhQ2goY2gpO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzVG9nZ2xlTXVsdGlzdHJlYW0oYXBwKTogYm9vbGVhbiB7XG4gICAgLy8gVE9ETzogSnVkZ2UgZml4IGFjdGlvbmVkLlxuICAgIGlmIChhcHAgPT09IHVuZGVmaW5lZCB8fCBhcHAuYWN0aW9uZWQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBhcHAuaXNUb2dnbGVNdWx0aXN0cmVhbTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDb250ZW50VHlwZUZyb21GaW5kVHlwZShjb250ZW50VHlwZSkge1xuICAgIGNvbnN0IGZpbmRUeXBlSHRtbCA9IFRocmVhZC5maW5kVHlwZXNbVGhyZWFkLmZpbmRUeXBlSHRtbF07XG4gICAgY29uc3QgZmluZFR5cGVNdXNpYyA9IFRocmVhZC5maW5kVHlwZXNbVGhyZWFkLmZpbmRUeXBlTXVzaWNdO1xuICAgIGNvbnN0IGZpbmRUeXBlVmlkZW8gPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZVZpZGVvXTtcblxuICAgIGxldCBmaW5kVHlwZTogdHlwZW9mIFRocmVhZC5maW5kVHlwZUh0bWwgfCB0eXBlb2YgVGhyZWFkLmZpbmRUeXBlTXVzaWMgfCB0eXBlb2YgVGhyZWFkLmZpbmRUeXBlVmlkZW8gfCB0eXBlb2YgVGhyZWFkLmZpbmRUeXBlT3RoZXI7XG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlICE9PSAnJykge1xuICAgICAgbGV0IHNwbGl0ZWRDb250ZW50VHlwZSA9ICcnO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJzsnKSA+IDApIHtcbiAgICAgICAgc3BsaXRlZENvbnRlbnRUeXBlID0gY29udGVudFR5cGUuc3BsaXQoJzsnKVswXTtcbiAgICAgIH1cbiAgICAgIGlmIChmaW5kVHlwZUh0bWwuaW5jbHVkZXMoY29udGVudFR5cGUpIHx8IGZpbmRUeXBlSHRtbC5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlSHRtbDtcbiAgICAgIH1cbiAgICAgIGlmIChmaW5kVHlwZU11c2ljLmluY2x1ZGVzKGNvbnRlbnRUeXBlKSB8fCBmaW5kVHlwZU11c2ljLmluY2x1ZGVzKHNwbGl0ZWRDb250ZW50VHlwZSkpIHtcbiAgICAgICAgZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVNdXNpYztcbiAgICAgIH1cbiAgICAgIGlmIChmaW5kVHlwZVZpZGVvLmluY2x1ZGVzKGNvbnRlbnRUeXBlKSB8fCBmaW5kVHlwZVZpZGVvLmluY2x1ZGVzKHNwbGl0ZWRDb250ZW50VHlwZSkpIHtcbiAgICAgICAgZmluZFR5cGUgPSBUaHJlYWQuZmluZFR5cGVWaWRlbztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbmRUeXBlO1xuICB9XG5cbiAgc3RhdGljIGdldEZpbmRUeXBlRnJvbVNyYyhzcmMpIHtcbiAgICBjb25zdCBzdHIgPSBBcHAuZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpO1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSAnY29tbW9uL1NjaGVtYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVhZHMgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUocGFyYW1zKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRNZXJnZWRUaHJlYWRzKGJhc2VUaHJlYWRzLCBtZXJnZVRocmVhZCkge1xuICAgIGJhc2VUaHJlYWRzW21lcmdlVGhyZWFkLmNoXSA9IHsgLi4ubWVyZ2VUaHJlYWQgfTtcbiAgICByZXR1cm4gYmFzZVRocmVhZHM7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSAnY29tbW9uL1NjaGVtYSc7XG5cbmltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlciBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9mZnNldEZpbmRJZCgpIHtcbiAgICByZXR1cm4gUG9zdC5kZWZhdWx0RmluZElkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdWlkID0gcGFyYW1zICYmIHBhcmFtcy51aWQgPyBwYXJhbXMudWlkIDogJyc7XG4gICAgY29uc3QgdXR5cGUgPSBwYXJhbXMgJiYgcGFyYW1zLnV0eXBlID8gcGFyYW1zLnV0eXBlIDogJyc7XG5cbiAgICAvLyDliYrpmaTkuojlrppcbiAgICBjb25zdCB0dW5lZCA9IHBhcmFtcyAmJiBwYXJhbXMudHVuZWQgPyBwYXJhbXMudHVuZWQgOiAnJztcbiAgICBjb25zdCBtdWx0aXN0cmVhbWVkID0gcGFyYW1zICYmIHBhcmFtcy5tdWx0aXN0cmVhbWVkID8gcGFyYW1zLm11bHRpc3RyZWFtZWQgOiBmYWxzZTtcbiAgICBjb25zdCBhY3Rpb25lZCA9IHBhcmFtcyAmJiBwYXJhbXMuYWN0aW9uZWQgPyBwYXJhbXMuYWN0aW9uZWQgOiAnJztcbiAgICBjb25zdCBvZmZzZXRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0U2luZ2xlRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRTaW5nbGVGaW5kSWQgPyBwYXJhbXMub2Zmc2V0U2luZ2xlRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldE11bHRpRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRNdWx0aUZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRDaGlsZEZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0TG9nc0ZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TG9nc0ZpbmRJZCA/IHBhcmFtcy5vZmZzZXRMb2dzRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuXG4gICAgY29uc3QgcmVxdWVzdExvZ2luVHlwZSA9IHBhcmFtcy5yZXF1ZXN0TG9naW5UeXBlID8gcGFyYW1zLnJlcXVlc3RMb2dpblR5cGUgOiAnJztcbiAgICBjb25zdCBmcmllbmRzID0gW107XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHtcbiAgICAgIHVpZCxcbiAgICAgIHV0eXBlLFxuICAgICAgdHVuZWQsXG4gICAgICBtdWx0aXN0cmVhbWVkLFxuICAgICAgYWN0aW9uZWQsXG4gICAgICBvZmZzZXRGaW5kSWQsXG4gICAgICBvZmZzZXRTaW5nbGVGaW5kSWQsXG4gICAgICBvZmZzZXRNdWx0aUZpbmRJZCxcbiAgICAgIG9mZnNldENoaWxkRmluZElkLFxuICAgICAgb2Zmc2V0TG9nc0ZpbmRJZCxcbiAgICAgIGZyaWVuZHMsXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHMgfSkge1xuICAgIGlmIChwb3N0cyAmJiBwb3N0c1swXSAmJiBwb3N0c1swXS5faWQpIHtcbiAgICAgIHJldHVybiBwb3N0c1swXS5faWQ7XG4gICAgfVxuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0SHJlZihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZikge1xuICAgICAgLy8gcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmhyZWYpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuICcvJztcbiAgfVxufVxuIiwiaW1wb3J0IEJvb3RPcHRpb24gZnJvbSAnY29tbW9uL0Jvb3RPcHRpb24nO1xuXG5pbXBvcnQgQWN0aW9uTG9nIGZyb20gJ2FwaS9zdG9yZS9BY3Rpb25Mb2dzJztcbmltcG9ydCBBbmFseXplIGZyb20gJ2FwaS9zdG9yZS9BbmFseXplJztcbmltcG9ydCBBcHAgZnJvbSAnYXBpL3N0b3JlL0FwcCc7XG5pbXBvcnQgTWVudUxvZ3MgZnJvbSAnYXBpL3N0b3JlL01lbnVMb2dzJztcbmltcG9ydCBQb3N0cyBmcm9tICdhcGkvc3RvcmUvUG9zdHMnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmUnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmVTdG9jayBmcm9tICdhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrJztcbmltcG9ydCBSYW5rcyBmcm9tICdhcGkvc3RvcmUvUmFua3MnO1xuaW1wb3J0IFRocmVhZCBmcm9tICdhcGkvc3RvcmUvVGhyZWFkJztcbmltcG9ydCBVc2VyIGZyb20gJ2FwaS9zdG9yZS9Vc2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpU3RhdGUge1xuICByYW5rczogUmFua3M7XG4gIG1lbnVMb2dzOiBNZW51TG9ncztcbiAgcG9zdHM6IFBvc3RzO1xuICBwb3N0c011bHRpOiBQb3N0cztcbiAgcG9zdHNTaW5nbGU6IFBvc3RzO1xuICBwb3N0c0NoaWxkOiBQb3N0cztcbiAgcG9zdHNUaW1lbGluZTogUG9zdHNUaW1lbGluZTtcbiAgcG9zdHNUaW1lbGluZVN0b2NrOiBQb3N0c1RpbWVsaW5lU3RvY2s7XG4gIHBvc3RzTG9nczogUG9zdHM7XG4gIGFuYWx5emU6IEFuYWx5emU7XG4gIGJvb3RPcHRpb246IEJvb3RPcHRpb247XG4gIHRocmVhZHM6IFtUaHJlYWRdO1xuICB0aHJlYWQ6IFRocmVhZDtcbiAgdGhyZWFkRGV0YWlsOiBUaHJlYWQ7XG4gIGFwcDogQXBwO1xuICB1c2VyOiBVc2VyO1xuICBhY3Rpb25Mb2c6IEFjdGlvbkxvZztcbiAgY29uc3RydWN0b3IoYm9vdE9wdGlvbjogQm9vdE9wdGlvbiwgY2FjaGVzOiBhbnkgPSB7fSkge1xuICAgIHRoaXMuYm9vdE9wdGlvbiA9IGJvb3RPcHRpb247XG4gICAgdGhpcy5yYW5rcyA9IG5ldyBSYW5rcygpO1xuICAgIHRoaXMubWVudUxvZ3MgPSBuZXcgTWVudUxvZ3MoY2FjaGVzLm1lbnVMb2dzKTtcbiAgICB0aGlzLnBvc3RzID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c011bHRpID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5wb3N0c1NpbmdsZSA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMucG9zdHNDaGlsZCA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMucG9zdHNUaW1lbGluZSA9IG5ldyBQb3N0c1RpbWVsaW5lKCk7XG4gICAgdGhpcy5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG4gICAgdGhpcy5wb3N0c0xvZ3MgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLmFuYWx5emUgPSBuZXcgQW5hbHl6ZSgpO1xuICAgIHRoaXMudGhyZWFkID0gbmV3IFRocmVhZCh0aGlzLmJvb3RPcHRpb24sIGNhY2hlcy50aHJlYWQpO1xuICAgIHRoaXMudGhyZWFkRGV0YWlsID0gbmV3IFRocmVhZCh0aGlzLmJvb3RPcHRpb24sIGNhY2hlcy50aHJlYWQpO1xuICAgIHRoaXMuYXBwID0gbmV3IEFwcChBcGlTdGF0ZS5nZXRBcHBQYXJhbXModGhpcy50aHJlYWQsIHRoaXMuYm9vdE9wdGlvbiwgY2FjaGVzKSk7XG4gICAgdGhpcy51c2VyID0gbmV3IFVzZXIoQXBpU3RhdGUuZ2V0VXNlclBhcmFtcyh0aGlzLCBjYWNoZXMpKTtcbiAgICB0aGlzLmFjdGlvbkxvZyA9IG5ldyBBY3Rpb25Mb2coKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBcHBQYXJhbXModGhyZWFkLCBib290T3B0aW9uLCBjYWNoZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgcm9vdFRpdGxlOiB0aHJlYWQudGl0bGUsXG4gICAgICAuLi5ib290T3B0aW9uLFxuICAgICAgLi4udGhyZWFkLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0VXNlclBhcmFtcyhzZWxmLCBjYWNoZXMpIHtcbiAgICBpZiAoY2FjaGVzICYmIGNhY2hlcy51c2VyICYmIGNhY2hlcy51c2VyLnVpZCkge1xuICAgICAgcmV0dXJuIHsgLi4uY2FjaGVzLnVzZXIgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlzcFRocmVhZFR5cGUgPSBzZWxmLnRocmVhZC5jaCA9PT0gc2VsZi5hcHAucm9vdENoID8gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgOiBBcHAuZGlzcFRocmVhZFR5cGVTaW5nbGU7XG4gICAgICByZXR1cm4geyBkaXNwVGhyZWFkVHlwZSB9O1xuICAgIH1cbiAgfVxuXG4gIGdldCBjaCgpIHtcbiAgICByZXR1cm4gdGhpcy50aHJlYWQuY2g7XG4gIH1cbn1cbiIsImltcG9ydCBCb290T3B0aW9uIGZyb20gJ2NvbW1vbi9Cb290T3B0aW9uJztcbmltcG9ydCBQb3N0TWVzc2FnZSwgeyBNZXNzYWdlQ2xpZW50QW5kV3NBcGlUeXBlLCBNZXNzYWdlUGFyYW1zIH0gZnJvbSAnY29tbW9uL1Bvc3RNZXNzYWdlJztcbmltcG9ydCBTZXF1ZW5jZSBmcm9tICdjb21tb24vU2VxdWVuY2UnO1xuXG5pbXBvcnQgV3MgZnJvbSAnYXBpL1dzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV3NBcGlXb3JrZXIge1xuICBpZD86IHN0cmluZztcbiAgYm9vdE9wdGlvbjogQm9vdE9wdGlvbjtcbiAgd3M6IFdzO1xuICB3b3JrZXI6IFdvcmtlcjtcbiAgY29uc3RydWN0b3Iod29ya2VyOiBXb3JrZXIpIHtcbiAgICAvLyB3ZWIgc29ja2V0IHNlcnZlci5cbiAgICB0aGlzLm9uTWVzc2FnZSA9IHRoaXMub25NZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1lc3NhZ2VFcnJvciA9IHRoaXMub25NZXNzYWdlRXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlID0gdGhpcy5wb3N0TWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMud29ya2VyID0gd29ya2VyO1xuICAgIHRoaXMud29ya2VyLm9uZXJyb3IgPSB0aGlzLm9uTWVzc2FnZUVycm9yO1xuICAgIHRoaXMud29ya2VyLm9ubWVzc2FnZSA9IHRoaXMub25NZXNzYWdlO1xuICAgIHRoaXMud3MgPSBuZXcgV3ModGhpcyk7XG4gIH1cblxuICBwdWJsaWMgcG9zdE1lc3NhZ2UobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogTWVzc2FnZVBhcmFtcyA9IHt9LCBtZXRob2RCYWNrPyk6IHZvaWQge1xuICAgIGNvbnN0IG1lc3NhZ2U6IE1lc3NhZ2VDbGllbnRBbmRXc0FwaVR5cGUgPSB7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIHR5cGU6IFBvc3RNZXNzYWdlLldTQVBJX1RPX0NMSUVOVF9UWVBFLFxuICAgICAgaW9UeXBlOiBTZXF1ZW5jZS5BUElfU0VUVVAsXG4gICAgICBtZXRob2QsXG4gICAgICBwYXJhbXMsXG4gICAgICBtZXRob2RCYWNrLFxuICAgIH07XG4gICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cbiAgcHJpdmF0ZSBvbk1lc3NhZ2UoZTogTWVzc2FnZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBpZCwgdHlwZSwgaW9UeXBlLCBtZXRob2QsIHBhcmFtcyB9OiBNZXNzYWdlQ2xpZW50QW5kV3NBcGlUeXBlID0gZS5kYXRhO1xuICAgIGlmICh0eXBlID09PSBQb3N0TWVzc2FnZS5DTElFTlRfVE9fV1NBUElfVFlQRSkge1xuICAgICAgdGhpcy53cy5leGUobWV0aG9kLCBwYXJhbXMpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIG9uTWVzc2FnZUVycm9yKGU6IEVycm9yRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zb2xlLndhcm4oZSk7XG4gIH1cbn1cblxubmV3IFdzQXBpV29ya2VyKHNlbGYgYXMgYW55KTtcbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tICdjb21tb24vU2VxdWVuY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0TWVzc2FnZSB7XG4gIC8vIEhBTkRMRSBDTElFTlQgQU5EIFdTQVBJXG4gIHN0YXRpYyBnZXQgSEFORExFX0NMSUVOVF9BTkRfV1NBUEkoKSB7XG4gICAgcmV0dXJuICdIQU5ETEVfQ0xJRU5UX0FORF9XU0FQSSc7XG4gIH1cbiAgc3RhdGljIGdldCBXU0FQSV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gJ1dTQVBJX1RPX0NMSUVOVF9UWVBFJztcbiAgfVxuICBzdGF0aWMgZ2V0IENMSUVOVF9UT19XU0FQSV9UWVBFKCkge1xuICAgIHJldHVybiAnQ0xJRU5UX1RPX1dTQVBJX1RZUEUnO1xuICB9XG5cbiAgLy8gSEFORExFX0FQSV9BTkRfQ0xJRU5UXG4gIHN0YXRpYyBnZXQgSEFORExFX0FQSV9BTkRfQ0xJRU5UKCkge1xuICAgIHJldHVybiAnSEFORExFX0FQSV9BTkRfQ0xJRU5UJztcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gJ0FQSV9UT19DTElFTlRfVFlQRSc7XG4gIH1cbiAgc3RhdGljIGdldCBDTElFTlRfVE9fQVBJX1RZUEUoKSB7XG4gICAgcmV0dXJuICdDTElFTlRfVE9fQVBJX1RZUEUnO1xuICB9XG5cbiAgLy8gSEFORExFX0FQSV9BTkRfRVhUXG4gIHN0YXRpYyBnZXQgSEFORExFX0VYVF9BTkRfQVBJKCkge1xuICAgIHJldHVybiAnSEFORExFX0VYVF9BTkRfQVBJJztcbiAgfVxuICBzdGF0aWMgZ2V0IE1FRElBX1RPX0NMSUVOVF9UWVBFKCkge1xuICAgIHJldHVybiAnTUVESUFfVE9fQ0xJRU5UX1RZUEUnO1xuICB9XG4gIHN0YXRpYyBnZXQgRVhUX1RPX0FQSV9UWVBFKCkge1xuICAgIHJldHVybiAnRVhUX1RPX0FQSV9UWVBFJztcbiAgfVxuXG4gIC8vIEhBTkRMRV9DTElFTlRfQU5EX0VYVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9FWFRfQU5EX0NMSUVOVCgpIHtcbiAgICByZXR1cm4gJ2hhbmRsZUV4dEFuZENsaWVudCc7XG4gIH1cbiAgc3RhdGljIGdldCBDTElFTlRfVE9fRVhUX1RZUEUoKSB7XG4gICAgcmV0dXJuICdDTElFTlRfVE9fRVhUX1RZUEUnO1xuICB9XG4gIHN0YXRpYyBnZXQgRVhUX1RPX0NMSUVOVF9UWVBFKCkge1xuICAgIHJldHVybiAnRVhUX1RPX0NMSUVOVF9UWVBFJztcbiAgfVxuICBzdGF0aWMgZ2V0IEhBTkRMRV9NRURJQV9TRVJWRVJfQU5EX01FRElBX0NMSUVOVCgpIHtcbiAgICByZXR1cm4gJ2hhbmRsZU1lZGlhU2VydmVyQW5kTWVkaWFDbGllbnQnO1xuICB9XG4gIHN0YXRpYyBnZXQgTUVESUFfU0VSVkVSX1RPX01FRElBX0NMSUVOVF9UWVBFKCkge1xuICAgIHJldHVybiAnTUVESUFfU0VSVkVSX1RPX01FRElBX0NMSUVOVF9UWVBFJztcbiAgfVxuICBzdGF0aWMgZ2V0IE1FRElBX0NMSUVOVF9UT19NRURJQV9TRVJWRVJfVFlQRSgpIHtcbiAgICByZXR1cm4gJ01FRElBX0NMSUVOVF9UT19NRURJQV9TRVJWRVJfVFlQRSc7XG4gIH1cbiAgc3RhdGljIGNvbnZlcnRBcGlUb0NsaWVudEFjdGlvblR5cGUoYWN0aW9uVHlwZSkge1xuICAgIGlmIChhY3Rpb25UeXBlLmluZGV4T2YoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QsIFNlcXVlbmNlLkFQSV9UT19DTElFTlRfUkVRVUVTVCk7XG4gICAgfVxuICAgIGlmIChhY3Rpb25UeXBlLmluZGV4T2YoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0VNSVQsIFNlcXVlbmNlLkFQSV9UT19DTElFTlRfRU1JVCk7XG4gICAgfVxuICAgIGlmIChhY3Rpb25UeXBlLmluZGV4T2YoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QpID09PSAwKSB7XG4gICAgICByZXR1cm4gYWN0aW9uVHlwZS5yZXBsYWNlKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX0JST0FEQ0FTVCk7XG4gICAgfVxuICAgIHJldHVybiBgQVBJX1RPX0NMSUVOVFtBQ1RJT05dOiR7YWN0aW9uVHlwZX1gO1xuICB9XG4gIHN0YXRpYyBnZXRNZXNzYWdlVHlwZXMoYWN0aW9uVHlwZSkge1xuICAgIGNvbnN0IHNwbGl0ZWQxID0gYWN0aW9uVHlwZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IHNwbGl0ZWQyID0gc3BsaXRlZDFbMF0uc3BsaXQoJ1snKTtcbiAgICBjb25zdCBpb1R5cGUgPSBzcGxpdGVkMlsxXS5yZXBsYWNlKCddJywgJycpO1xuICAgIGNvbnN0IGV4ZU1ldGhvZCA9IHNwbGl0ZWQxWzFdO1xuICAgIHJldHVybiB7IGlvVHlwZSwgZXhlTWV0aG9kIH07XG4gIH1cbiAgc3RhdGljIGNvbnZlcnRFeHRUb0NsaWVudEFjdGlvblR5cGUoYWN0aW9uVHlwZSkge1xuICAgIHJldHVybiBgRVhUX1RPX0NMSUVOVFtBQ1RJT05dOiR7YWN0aW9uVHlwZX1gO1xuICB9XG59XG5cbi8vIGNvbW1vbi5cbmV4cG9ydCBjb25zdCBIYW5kbGVNZXNzYWdlTWV0aG9kID0gJ2hhbmRsZSc7XG5leHBvcnQgY29uc3QgSGFuZGxlUmVxdWVzdE1ldGhvZCA9ICdoYW5kbGUnO1xuZXhwb3J0IHR5cGUgSW9UeXBlVmFsdWVzID1cbiAgfCB0eXBlb2YgU2VxdWVuY2UuQVBJX1NFVFVQXG4gIHwgdHlwZW9mIFNlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEVcbiAgfCB0eXBlb2YgU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVFxuICB8IHR5cGVvZiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1RcbiAgfCB0eXBlb2YgU2VxdWVuY2UuVU5LTk9XTjtcbmV4cG9ydCB0eXBlIElvVHlwZSA9IHtcbiAgaW9UeXBlOiBJb1R5cGU7XG59O1xuZXhwb3J0IHR5cGUgTWVzc2FnZVBhcmFtc0ZyZWUgPSB7IGtleTogc3RyaW5nOyB2YWx1ZTogYW55IH0gfCB7fTtcbmV4cG9ydCB0eXBlIE1lc3NhZ2VQYXJhbXMgPSB7IGtleTogc3RyaW5nOyB2YWx1ZTogYW55IH0gfCB7fTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZUNsaWVudEFuZFdzQXBpVHlwZSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogdHlwZW9mIFBvc3RNZXNzYWdlLldTQVBJX1RPX0NMSUVOVF9UWVBFIHwgdHlwZW9mIFBvc3RNZXNzYWdlLkNMSUVOVF9UT19XU0FQSV9UWVBFO1xuICBpb1R5cGU6IElvVHlwZVZhbHVlcztcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIHBhcmFtcz86IE1lc3NhZ2VQYXJhbXM7XG4gIG1ldGhvZEJhY2s/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlQ2xpZW50QW5kRXh0VHlwZSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogdHlwZW9mIFBvc3RNZXNzYWdlLkVYVF9UT19DTElFTlRfVFlQRSB8IHR5cGVvZiBQb3N0TWVzc2FnZS5DTElFTlRfVE9fRVhUX1RZUEU7XG4gIGlvVHlwZTogSW9UeXBlVmFsdWVzO1xuICBtZXRob2Q6IHN0cmluZztcbiAgaHJlZjogc3RyaW5nO1xuICBwYXJhbXM/OiBNZXNzYWdlUGFyYW1zO1xuICBtZXRob2RCYWNrPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZU1lZGlhQ2xpZW50QW5kTWVkaWFTZXJ2ZXJUeXBlID0ge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiB0eXBlb2YgUG9zdE1lc3NhZ2UuTUVESUFfQ0xJRU5UX1RPX01FRElBX1NFUlZFUl9UWVBFIHwgdHlwZW9mIFBvc3RNZXNzYWdlLk1FRElBX1NFUlZFUl9UT19NRURJQV9DTElFTlRfVFlQRTtcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIHBhcmFtcz86IE1lc3NhZ2VQYXJhbXM7XG4gIG1ldGhvZEJhY2s/OiBzdHJpbmc7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZW1hIHtcbiAgZXJyb3JUaHJvdzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbjogYW55ID0ge30pIHtcbiAgICAvKlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHRoaXMsXG4gICAgICAnX1NFVF9DT0xVTU5TJyxcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH1cbiAgICApO1xuKi9cbiAgfVxuXG4gIHN0YXRpYyBnZXRUeXBlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIk51bGxcIjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBcIlVuZGVmaW5lZFwiO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIHN0YXRpYyBpc1NldCh2YWw6IGFueSkge1xuICAgIHJldHVybiBTY2hlbWEuZ2V0VHlwZSh2YWwpID09PSBcIlVuZGVmaW5lZFwiIHx8IFNjaGVtYS5nZXRUeXBlKHZhbCkgPT09IFwiTnVsbFwiID8gZmFsc2UgOiB0cnVlO1xuICB9XG5cbiAgc3RhdGljIGdldEJvb2wodmFsOiBhbnkpIHtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJib29sZWFuXCIpIHJldHVybiB2YWw7XG4gICAgcmV0dXJuIHZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgaXNBbm9ueW1vdXNGdW5jKGZuKSB7XG4gICAgY29uc3QgZm5TdHJpbmcgPSBmbi50b1N0cmluZygpO1xuXG4gICAgaWYgKGZuU3RyaW5nID09PSBcImZ1bmN0aW9uKCl7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24oKSB7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24gKCl7fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZm5TdHJpbmcgPT09IFwiZnVuY3Rpb24gKCkge31cIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGZuU3RyaW5nID09PSBcIigpPT57fVwiKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjcmVhdGUoc3RhdGU6IGFueSkge1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICBjb25zdCBzdGF0ZVR5cGUgPSBTY2hlbWEuZ2V0VHlwZShzdGF0ZSk7XG4gICAgbGV0IHZhbGlkTWV0aG9kcyA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc3RhdGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgLy8gUHJvcGVydGllcyAuXG4gICAgICBsZXQgdmFsdWVzO1xuICAgICAgbGV0IGRlZiA9IG51bGw7XG4gICAgICBsZXQgdHlwZTogYW55O1xuICAgICAgbGV0IGlzQWNjZXB0TnVsbCA9IGZhbHNlO1xuICAgICAgbGV0IGlzQWNjZXB0QmxhbmsgPSBmYWxzZTtcbiAgICAgIGxldCB2YWxpZDogYW55ID0gKCkgPT4ge307XG4gICAgICBsZXQgdmFsdWU6IGFueSA9IG51bGw7XG5cbiAgICAgIC8vIEFzc2lnbiBQcm9wZXJ0aWVzIC5cbiAgICAgIGlmIChTY2hlbWEuZ2V0VHlwZShzdGF0ZVtrZXldKSA9PT0gXCJPYmplY3RcIikge1xuICAgICAgICB2YWx1ZXMgPSBzdGF0ZVtrZXldO1xuICAgICAgICBsZXQgaXNFbXB0eU9iamVjdCA9IE9iamVjdC5rZXlzKHZhbHVlcykubGVuZ3RoID09PSAwO1xuICAgICAgICBpc0FjY2VwdE51bGwgPSB2YWx1ZXMuaXNBY2NlcHROdWxsID8gdmFsdWVzLmlzQWNjZXB0TnVsbCA6IGlzQWNjZXB0TnVsbDtcbiAgICAgICAgaXNBY2NlcHRCbGFuayA9IHZhbHVlcy5pc0FjY2VwdEJsYW5rID8gdmFsdWVzLmlzQWNjZXB0QmxhbmsgOiBpc0FjY2VwdEJsYW5rO1xuICAgICAgICBkZWYgPSAhaXNFbXB0eU9iamVjdCAmJiB2YWx1ZXMuZGVmID8gdmFsdWVzLmRlZiA6IGRlZjtcbiAgICAgICAgdmFsdWUgPSAhaXNFbXB0eU9iamVjdCAmJiAodmFsdWVzLnZhbHVlIHx8IHZhbHVlcy52YWx1ZSA9PT0gXCJcIikgPyB2YWx1ZXMudmFsdWUgOiB2YWx1ZXM7XG4gICAgICAgIHZhbHVlID0gaXNFbXB0eU9iamVjdCAmJiBkZWYgPyBkZWYgOiB2YWx1ZTtcbiAgICAgICAgdHlwZSA9IFNjaGVtYS5nZXRUeXBlKHZhbHVlKTtcbiAgICAgICAgdmFsaWQgPSB2YWx1ZXMudmFsaWQgPyB2YWx1ZXMudmFsaWQgOiB2YWxpZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gc3RhdGVba2V5XTtcbiAgICAgICAgZGVmID0gdmFsdWU7XG4gICAgICAgIGlzQWNjZXB0TnVsbCA9IGlzQWNjZXB0TnVsbDtcbiAgICAgICAgaXNBY2NlcHRCbGFuayA9IGlzQWNjZXB0Qmxhbms7XG4gICAgICAgIHR5cGUgPSBTY2hlbWEuZ2V0VHlwZSh2YWx1ZSk7XG4gICAgICAgIHZhbGlkID0gdmFsaWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIEZ1bmN0aW9ucyAuXG4gICAgICBjb25zdCB2YWxpZEZ1bmMgPSAoX3ZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IGVycm9yID0gbnVsbDtcbiAgICAgICAgY29uc3QgcG9pbnRlciA9IGAke2NsYXNzTmFtZX0uJHtrZXl9YDtcbiAgICAgICAgY29uc3QgdmFsaWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBjb25zdCB2YWxpZFR5cGUgPSB0eXBlO1xuICAgICAgICBjb25zdCBwYXJhbXNWYWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgY29uc3QgcGFyYW1zVHlwZSA9IFNjaGVtYS5nZXRUeXBlKF92YWx1ZSk7XG5cbiAgICAgICAgaWYgKHBhcmFtc1R5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfVFlQRSA6ICR7cG9pbnRlcn0gW3ZhbGlkVHlwZTogJHt0eXBlfV1bcGFyYW1zVHlwZTogJHtwYXJhbXNUeXBlfV1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FjY2VwdE51bGwgJiYgX3ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgZXJyb3IgPSBgU0NIRU1BX0lTX0FDQ0VQVF9OVUxMIDogICR7cG9pbnRlcn1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FjY2VwdEJsYW5rICYmIF92YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgIGVycm9yID0gYFNDSEVNQV9JU19BQ0NFUFRfQkxBTksgOiAgJHtwb2ludGVyfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFNjaGVtYS5nZXRUeXBlKHZhbGlkKSA9PT0gXCJGdW5jdGlvblwiKSB7XG4gICAgICAgICAgaWYgKHZhbGlkKF92YWx1ZSkpIHtcbiAgICAgICAgICAgIGVycm9yID0gYFNDSEVNQV9ZT1VSX1ZBTElEX01FVEhPRCA6ICAke3BvaW50ZXJ9YDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwb2ludGVyLFxuICAgICAgICAgIHZhbGlkVmFsdWUsXG4gICAgICAgICAgdmFsaWRUeXBlLFxuICAgICAgICAgIHBhcmFtc1ZhbHVlLFxuICAgICAgICAgIHBhcmFtc1R5cGUsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IHBvaW50ZXIsIHZhbGlkVmFsdWUsIHZhbGlkVHlwZSwgcGFyYW1zVmFsdWUsIHBhcmFtc1R5cGUsIGVycm9yIH0gPSB2YWxpZEZ1bmModmFsdWUpO1xuXG4gICAgICBpZiAoZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiAoX3ZhbHVlKSA9PiB7XG4gICAgICAgICAgICAvLyBwb2ludGVyLCB2YWxpZFZhbHVlLCB2YWxpZFR5cGUsIHBhcmFtc1ZhbHVlLCBwYXJhbXNUeXBlLCBlcnJvclxuICAgICAgICAgICAgY29uc3QgdmFsaWRSZXN1bHQgPSB2YWxpZEZ1bmModmFsdWUpO1xuICAgICAgICAgICAgaWYgKGVycm9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gX3ZhbHVlO1xuICAgICAgICAgICAgICByZXR1cm4geyAuLi50aGlzLCBba2V5XTogdmFsdWUgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudmFsaWRXYXJuKHZhbGlkUmVzdWx0KTtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5lcnJvclRocm93KSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2FuU2V0KGtleTogYW55LCB2YWxpZFZhbHVlOiBhbnkpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpc1trZXldO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsaWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsaWRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBlcnJvciB9ID0gKHRoaXNba2V5XSA9IHZhbGlkVmFsdWUpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNba2V5XSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiQkFEIENBTiBTRVQgS0VZOiBcIiArIHRoaXMuY29uc3RydWN0b3IubmFtZSArIFwiIFwiICsga2V5KTtcbiAgICAgIGNvbnNvbGUud2FybihcIkJFRk9FUiBWQUxVRVwiKTtcbiAgICAgIGNvbnNvbGUud2Fybih0eXBlb2YgdGhpc1trZXldKTtcbiAgICAgIGNvbnNvbGUud2Fybih0aGlzW2tleV0pO1xuICAgICAgY29uc29sZS53YXJuKFwiQUZURVIgVkFMVUVcIik7XG4gICAgICBjb25zb2xlLndhcm4odHlwZW9mIHZhbGlkVmFsdWUpO1xuICAgICAgY29uc29sZS53YXJuKHZhbGlkVmFsdWUpO1xuICAgICAgdGhyb3cgYEJBRCBDQU4gU0VUOiAke2V9YDtcbiAgICB9XG4gIH1cblxuICBtZXJnZShwYXJhbXMgPSB7fSwgaW1tdXRhYmxlID0gdHJ1ZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJhbXNUeXBlID0gU2NoZW1hLmdldFR5cGUocGFyYW1zKTtcbiAgICAgIGNvbnN0IG9iaktleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpO1xuXG4gICAgICBpZiAob2JqS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBtZXJnZWRPYmo6IGFueSA9IHsgLi4udGhpcyB9O1xuICAgICAgICBvYmpLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzW2tleV0gIT09IHBhcmFtc1trZXldKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYW5TZXQoa2V5LCBwYXJhbXNba2V5XSkpIHtcbiAgICAgICAgICAgICAgbWVyZ2VkT2JqW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkJBRCBNRVJHRSBBIDogXCIgKyBrZXkgKyBcIiBcIiArIHBhcmFtc1trZXldICsgXCIgXCIgKyB0eXBlb2YgcGFyYW1zW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHBhcmFtc1R5cGUgPT09IFwiQXJyYXlcIikge1xuICAgICAgICAgIG1lcmdlZE9iaiA9IE9iamVjdC52YWx1ZXMobWVyZ2VkT2JqKTtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgICBjbGFzcyBBIHtcbiAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7ICB9XG4gICAgICAgICAgICAgIHJlZnJlc2goKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBBPnRoaXMuY29uc3RydWN0b3IpOyBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICovXG4gICAgICAgICAgcmV0dXJuIGltbXV0YWJsZSA/IG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikobWVyZ2VkT2JqKSA6IG1lcmdlZE9iajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW1tdXRhYmxlKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBtZXJnZWRPYmogKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKG1lcmdlZE9iaik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZWRPYmo7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICh0aGlzLmVycm9yVGhyb3cpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHBhcmFtcyk7XG4gICAgICAgIGNvbnNvbGUud2FybihlKTtcbiAgICAgICAgdGhyb3cgYEJBRCBNRVJHRSBCIDogJHtTY2hlbWEuZ2V0VHlwZShwYXJhbXMpfSAke2V9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihwYXJhbXMpO1xuICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihgQkFEIE1FUkdFIEMgOiAke1NjaGVtYS5nZXRUeXBlKHBhcmFtcyl9ICR7ZX1gKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0b0pTT04ob2JqOiBhbnkgPSB0aGlzKSB7XG4gICAgbGV0IGpzb25PYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBsZXQgdmFsdWVzOiBhbnkgPSBvYmpba2V5XTtcbiAgICAgIGlmICh2YWx1ZXMuY29uc3RydWN0b3IubmFtZSA9PT0gXCJPYmplY3RcIikge1xuICAgICAgICBpZiAoIXZhbHVlcy50eXBlICYmICF2YWx1ZXMuZGVmYXVsdCkge1xuICAgICAgICAgIHZhbHVlcyA9IHRoaXMudG9KU09OKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlcy5kZWZhdWx0IHx8IHZhbHVlcy5kZWZhdWx0ID09PSBcIlwiIHx8IHZhbHVlcy5kZWZhdWx0ID09PSAwKSB7XG4gICAgICAgIGpzb25PYmpba2V5XSA9IHZhbHVlcy5kZWZhdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAganNvbk9ialtrZXldID0gdmFsdWVzO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uT2JqO1xuICB9XG5cbiAgZm9yRWFjaChmdW5jKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuZm9yRWFjaChmdW5jKTtcbiAgfVxuXG4gIGNvbmNhdChmdW5jKSB7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKE9iamVjdC52YWx1ZXModGhpcykuY29uY2F0KGZ1bmMpLCBmdW5jKTtcbiAgfVxuXG4gIG1hcChmdW5jKSB7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKE9iamVjdC52YWx1ZXModGhpcykubWFwKGZ1bmMpLCBmdW5jKTtcbiAgfVxuXG4gIGZpbHRlcihmdW5jKSB7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKE9iamVjdC52YWx1ZXModGhpcykuZmlsdGVyKGZ1bmMpLCBmdW5jKTtcbiAgfVxuXG4gIHJlZHVjZShmdW5jKSB7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKE9iamVjdC52YWx1ZXModGhpcykucmVkdWNlKGZ1bmMpLCBmdW5jKTtcbiAgfVxuXG4gIGZpbmQoZnVuYykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMpLmZpbmQoZnVuYyk7XG4gIH1cblxuICBzb3J0KGZ1bmMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzKS5zb3J0KGZ1bmMpO1xuICB9XG5cbiAgcHVzaCh2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcyk7XG4gICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZSh2YWx1ZXMpO1xuICB9XG5cbiAgdW5zaGlmdCh2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcyk7XG4gICAgdmFsdWVzLnVuc2hpZnQodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZSh2YWx1ZXMpO1xuICB9XG5cbiAgZ2V0U2hpZnQoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0aGlzKTtcbiAgICBjb25zdCByZXN1bHRzID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKHJlc3VsdHMpO1xuICB9XG5cbiAgcG9wKHZhbHVlKSB7XG4gICAgY29uc3QgdmFsdWVzOiBhbnkgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy5wb3AodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZSh2YWx1ZXMpO1xuICB9XG5cbiAgcmV0dXJuSW1tdXRhYmxlKHZhbHVlcywgZnVuYyA9ICgpID0+IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKCk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKHRoaXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKFN0cmluZyhmdW5jKS5pbmRleE9mKFwiY3JlYXRlRWxlbWVudFwiKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikodmFsdWVzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlc1swXSAmJiB2YWx1ZXNbMF1bXCIkJHR5cGVvZlwiXSAmJiB2YWx1ZXNbMF1bXCIkJHR5cGVvZlwiXS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIlN5bWJvbFwiKSB7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSh2YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkV2Fybih2YWxpZFJlc3VsdCkge1xuICAgIGNvbnNvbGUud2FybihcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCIpO1xuICAgIGNvbnNvbGUud2FybihcIiNcIiArIHZhbGlkUmVzdWx0LnBvaW50ZXIpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCIpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyBpbml0aWFsaXplZFZhbGlkVHlwZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQudmFsaWRUeXBlKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMgaW5pdGlhbGl6ZWRWYWxpZFZhbHVlXCIpO1xuICAgIGNvbnNvbGUud2Fybih2YWxpZFJlc3VsdC52YWxpZFZhbHVlKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMgcGFyYW1zVHlwZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQucGFyYW1zVHlwZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIHBhcmFtc1ZhbHVlXCIpO1xuICAgIGNvbnNvbGUud2Fybih2YWxpZFJlc3VsdC5wYXJhbXNWYWx1ZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcIik7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSAnY29tbW9uL1NjaGVtYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlcXVlbmNlIHtcbiAgc3RhdGljIGdldCBUQUxLTl9QUk9UT0NPTCgpIHtcbiAgICByZXR1cm4gJ3RhbGtuOic7XG4gIH1cbiAgc3RhdGljIGdldCBIVFRQX1BST1RPQ09MKCkge1xuICAgIHJldHVybiAnaHR0cDonO1xuICB9XG4gIHN0YXRpYyBnZXQgSFRUUFNfUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuICdodHRwczonO1xuICB9XG4gIHN0YXRpYyBnZXQgVU5LTk9XTl9QUk9UT0NPTCgpIHtcbiAgICByZXR1cm4gJz8/Pz86JztcbiAgfVxuICBzdGF0aWMgZ2V0IENBVENIX01FX0tFWSgpIHtcbiAgICByZXR1cm4gJ0BDQVRDSF9NRSc7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVCgpIHtcbiAgICByZXR1cm4gJ1snO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1NFUEFSQVRFX0lPX1RZUEVfRU5EKCkge1xuICAgIHJldHVybiAnXSc7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfUkVRVUVTVF9UWVBFKCkge1xuICAgIHJldHVybiAnUkVRVUVTVCc7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfUkVTUE9OU0VfVFlQRV9FTUlUKCkge1xuICAgIHJldHVybiAnRU1JVCc7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuICdCUk9BRENBU1QnO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1NFVFVQKCkge1xuICAgIHJldHVybiAnQVBJX1NFVFVQJztcbiAgfVxuICBzdGF0aWMgZ2V0IFVOS05PV04oKSB7XG4gICAgcmV0dXJuICdVTktOT1dOJztcbiAgfVxuICBzdGF0aWMgZ2V0IENPTk5FQ1RJT05fU0VSVkVSX0tFWSgpIHtcbiAgICByZXR1cm4gJ0NPTk5FQ1RJT05fU0VSVkVSJztcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19TRVJWRVJfUkVRVUVTVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19TRVJWRVJbJHtTZXF1ZW5jZS5BUElfUkVRVUVTVF9UWVBFfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgU0VSVkVSX1RPX0FQSV9FTUlUKCkge1xuICAgIHJldHVybiBgU0VSVkVSX1RPX0FQSVske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBTRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCgpIHtcbiAgICByZXR1cm4gYFNFUlZFUl9UT19BUElbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1R9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX1JFUVVFU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfRU1JVCgpIHtcbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX0JST0FEQ0FTVF9DQUxMQkFDSygpIHtcbiAgICByZXR1cm4gJ3R1bmUnO1xuICB9XG4gIHN0YXRpYyBnZXQgUkVEVVhfQUNUSU9OX0tFWSgpIHtcbiAgICByZXR1cm4gJ3R5cGUnO1xuICB9XG4gIHN0YXRpYyBnZXQgTUVUSE9EX0NPTE9OKCkge1xuICAgIHJldHVybiAnOic7XG4gIH1cbiAgc3RhdGljIGdldCBBRERfQ0xJRU5UX0FDVElPTl9QUkVGSVgoKSB7XG4gICAgcmV0dXJuICdBUElfVE9fQ0xJRU5UJztcbiAgfVxuICBzdGF0aWMgZ2V0IG1hcCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHVuZToge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbJ2NoJywgJ2hhc1NsYXNoJywgJ3Byb3RvY29sJ10sXG4gICAgICAgICAgYXBwOiBbJ211bHRpc3RyZWFtJywgJ3Jvb3RDaCcsICdkaXNwVGhyZWFkVHlwZScsICdhY3Rpb25lZCcsICdvZmZzZXRGaW5kSWQnLCAnaXNUb2dnbGVNdWx0aXN0cmVhbSddLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB1c2VyOiBbJ3VpZCddLCBzZXR0aW5nOiAnKicsIHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbJ2xpdmVDbnQnLCAnY2gnXSB9LFxuICAgICAgfSxcbiAgICAgIGZldGNoUG9zdHM6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogWydjaCcsICdwcm90b2NvbCcsICdob3N0JywgJ2hhc1NsYXNoJ10sXG4gICAgICAgICAgYXBwOiBbJ211bHRpc3RyZWFtJywgJ3Jvb3RDaCcsICdkaXNwVGhyZWFkVHlwZScsICdhY3Rpb25lZCcsICdvZmZzZXRGaW5kSWQnLCAnaXNUb2dnbGVNdWx0aXN0cmVhbSddLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyBwb3N0czogJyonLCB0aHJlYWQ6ICcqJyB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBnZXRNb3JlOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFsnY2gnXSxcbiAgICAgICAgICBhcHA6IFsnbXVsdGlzdHJlYW0nLCAnZGlzcFRocmVhZFR5cGUnLCAnb2Zmc2V0RmluZElkJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7XG4gICAgICAgICAgYXBwOiBbJ2Rpc3BUaHJlYWRUeXBlJywgJ29mZnNldEZpbmRJZCddLFxuICAgICAgICAgIHBvc3RzOiAnKicsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHVwZGF0ZVRocmVhZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbJ2NoJywgJ3Byb3RvY29sJywgJ2hvc3QnLCAnaGFzU2xhc2gnXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6ICcqJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgY2hhbmdlVGhyZWFkOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFsnY2gnLCAnaGFzU2xhc2gnLCAncHJvdG9jb2wnXSxcbiAgICAgICAgICBhcHA6IFsndHVuZWQnLCAnbXVsdGlzdHJlYW0nLCAncm9vdENoJywgJ2Rpc3BUaHJlYWRUeXBlJywgJ2FjdGlvbmVkJywgJ29mZnNldEZpbmRJZCcsICdpc1RvZ2dsZU11bHRpc3RyZWFtJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbJ2xpdmVDbnQnLCAnY2gnXSB9LFxuICAgICAgfSxcbiAgICAgIGNoYW5nZVRocmVhZERldGFpbDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7IHRocmVhZDogWydjaCddIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGFkZEZpbmRDaGlsZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7IHRocmVhZDogWydjaCddIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHJhbms6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIGFwcDogWydmaW5kVHlwZScsICdyb290Q2gnXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHsgcmFuazogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHBvc3Q6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHVzZXI6IFsndWlkJywgJ3V0eXBlJ10sXG4gICAgICAgICAgYXBwOiBbJ2lucHV0UG9zdCcsICdpbnB1dFN0YW1wSWQnLCAnaW5wdXRDdXJyZW50VGltZScsICdkaXNwVGhyZWFkVHlwZSddLFxuICAgICAgICAgIHRocmVhZDogWydmaW5kVHlwZScsICd0aXRsZScsICdwcm90b2NvbCcsICdjaCcsICdjaHMnLCAnZW1vdGlvbnMnLCAnZmF2aWNvbicsICdjb250ZW50VHlwZSddLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge30sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgcG9zdHM6ICcqJywgdGhyZWFkOiBbJ2NoJywgJ2Vtb3Rpb25zJywgJ3Bvc3RDbnQnXSwgdXNlcjogWyd1aWQnXSB9LFxuICAgICAgfSxcbiAgICAgIHVwZGF0ZVRocmVhZFNlcnZlck1ldGFzOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZTogeyB0aHJlYWQ6IFsnc2VydmVyTWV0YXMnXSB9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbJ2hvc3QnLCAncHJvdG9jb2wnLCAnY2gnXSxcbiAgICAgICAgICB1c2VyOiBbJ3VpZCddLCAvLyDmh7jlv7UgLmZvckVhY2jjgZXjgozjgarjgYTjga7jgafkuIDml6bjgZPjga7lvaLjgavkv67mraNcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHsgdGhyZWFkOiAnKicgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgZGlzY29ubmVjdDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7fSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHt9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7IHRocmVhZDogWydsaXZlQ250JywgJ2NoJ10gfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTZXF1ZW5jZUFjdGlvbk1hcChtZXRob2QpOiB7IHNlcXVlbmNlOiBzdHJpbmc7IGFjdGlvblR5cGU6IHN0cmluZzsgYWN0aW9uTmFtZTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IHNwbGl0ZWQgPSBtZXRob2Quc3BsaXQoU2VxdWVuY2UuTUVUSE9EX0NPTE9OKTtcbiAgICBjb25zdCBzZXF1ZW5jZSA9IHNwbGl0ZWRbMF0uc3BsaXQoJ1snKVswXTtcbiAgICBsZXQgYWN0aW9uVHlwZTtcblxuICAgIGlmIChzcGxpdGVkWzBdLmluZGV4T2YoYFske1NlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEV9XWApID4gMCkge1xuICAgICAgYWN0aW9uVHlwZSA9IFNlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvblR5cGUgPSBzcGxpdGVkWzBdLmluZGV4T2YoYFske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9XWApID4gMCA/IFNlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVQgOiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1Q7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IHNwbGl0ZWRbMV07XG4gICAgcmV0dXJuIHsgc2VxdWVuY2UsIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUgfTtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVDYWxsYmFja0V4ZUNvbmRpdGlvbk1hcChhY3Rpb25OYW1lKTogeyBlbWl0OiBib29sZWFuOyBicm9hZGNhc3Q6IGJvb2xlYW4gfSB7XG4gICAgbGV0IGFjdGl2ZVJlc3BvbnNlTWFwID0geyBlbWl0OiB0cnVlLCBicm9hZGNhc3Q6IHRydWUgfTtcbiAgICBpZiAoU2VxdWVuY2UubWFwW2FjdGlvbk5hbWVdKSB7XG4gICAgICBhY3RpdmVSZXNwb25zZU1hcC5lbWl0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VFbWl0U3RhdGUpLmxlbmd0aCA+IDApO1xuICAgICAgYWN0aXZlUmVzcG9uc2VNYXAuYnJvYWRjYXN0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSkubGVuZ3RoID4gMCk7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVSZXNwb25zZU1hcDtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0U2VydmVyVG9BcGlJb1R5cGUoaUZyYW1lSWQsIGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKGAke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX1NUQVJUfSR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX0ke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX0VORH1gKSA+PSAwKSB7XG4gICAgICByZXR1cm4gU2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRTtcbiAgICB9XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihgJHtTZXF1ZW5jZS5BUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVH0ke1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVH0ke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX0VORH1gKSA+PSAwKSB7XG4gICAgICByZXR1cm4gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKGAke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX1NUQVJUfSR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH0ke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX0VORH1gKSA+PSAwKSB7XG4gICAgICByZXR1cm4gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVDtcbiAgICB9XG4gICAgcmV0dXJuIFNlcXVlbmNlLkFQSV9TRVRVUDtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0RXh0VG9DbGllbnRBY3Rpb25UeXBlKGlGcmFtZUlkLCBhY3Rpb25UeXBlKSB7XG4gICAgYWN0aW9uVHlwZSA9IFNlcXVlbmNlLmNvbnZlcnRBcGlUb0NsaWVudEFjdGlvblR5cGUoYWN0aW9uVHlwZSk7XG4gICAgcmV0dXJuIGFjdGlvblR5cGU7XG4gIH1cblxuICBzdGF0aWMgY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZShhY3Rpb25UeXBlKSB7XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QpID09PSAwKSB7XG4gICAgICByZXR1cm4gYWN0aW9uVHlwZS5yZXBsYWNlKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9SRVFVRVNUKTtcbiAgICB9XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0VNSVQpID09PSAwKSB7XG4gICAgICByZXR1cm4gYWN0aW9uVHlwZS5yZXBsYWNlKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9FTUlUKTtcbiAgICB9XG4gICAgaWYgKGFjdGlvblR5cGUuaW5kZXhPZihTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QsIFNlcXVlbmNlLkFQSV9UT19DTElFTlRfQlJPQURDQVNUKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvblR5cGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0UmVxdWVzdFN0YXRlKGFjdGlvbk5hbWUsIHJlZHV4U3RhdGUsIHJlcXVlc3RQYXJhbXMpIHtcbiAgICBjb25zdCBlbmRwb2ludEtleSA9IGFjdGlvbk5hbWUucmVwbGFjZShTZXF1ZW5jZS5BUElfVE9fU0VSVkVSX1JFUVVFU1QsICcnKTtcbiAgICBjb25zdCB7IHJlcXVlc3RQdWJsaWNTdGF0ZSwgcmVxdWVzdFByaXZhdGVTdGF0ZSB9ID0gU2VxdWVuY2UubWFwW2VuZHBvaW50S2V5XTtcbiAgICBsZXQgcmVxdWVzdFN0YXRlID0geyBbU2VxdWVuY2UuUkVEVVhfQUNUSU9OX0tFWV06IGVuZHBvaW50S2V5IH07XG5cbiAgICBPYmplY3Qua2V5cyhyZXF1ZXN0UHJpdmF0ZVN0YXRlKS5mb3JFYWNoKChzdGF0ZUtleSkgPT4ge1xuICAgICAgaWYgKCFyZXF1ZXN0U3RhdGVbc3RhdGVLZXldKSByZXF1ZXN0U3RhdGVbc3RhdGVLZXldID0ge307XG4gICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlW3N0YXRlS2V5XS5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHJlZHV4U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdO1xuICAgICAgICAgIGlmIChyZXF1ZXN0UGFyYW1zICYmIHJlcXVlc3RQYXJhbXNbc3RhdGVLZXldICYmIFNjaGVtYS5pc1NldChyZXF1ZXN0UGFyYW1zW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVxdWVzdFBhcmFtc1tzdGF0ZUtleV1bY29sdW1uTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhyZXF1ZXN0UHVibGljU3RhdGUpLmZvckVhY2goKHN0YXRlS2V5KSA9PiB7XG4gICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0pIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0gPSB7fTtcblxuICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlW3N0YXRlS2V5XS5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSkge1xuICAgICAgICAgIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV0gPSByZXF1ZXN0UGFyYW1zO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVxdWVzdFN0YXRlO1xuICB9XG5cbiAgc3RhdGljIGdldFJlc3BvbnNlU3RhdGUocmVzcG9uc2VUeXBlLCByZXF1ZXN0U3RhdGUsIHVwZGF0ZVN0YXRlKSB7XG4gICAgY29uc3QgZW5kcG9pbnRLZXkgPSByZXF1ZXN0U3RhdGUudHlwZTtcbiAgICBjb25zdCByZXNwb25zZVNjaGVtYSA9IFNlcXVlbmNlLm1hcFtlbmRwb2ludEtleV1bYHJlc3BvbnNlJHtyZXNwb25zZVR5cGV9U3RhdGVgXTtcbiAgICBsZXQgcmVzcG9uc2VTdGF0ZSA9IHsgW1NlcXVlbmNlLlJFRFVYX0FDVElPTl9LRVldOiBlbmRwb2ludEtleSB9O1xuICAgIE9iamVjdC5rZXlzKHJlc3BvbnNlU2NoZW1hKS5mb3JFYWNoKCh1cGRhdGVTdGF0ZUtleSkgPT4ge1xuICAgICAgaWYgKHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XSkge1xuICAgICAgICBjb25zdCBjb2x1bW5OYW1lcyA9IHJlc3BvbnNlU2NoZW1hW3VwZGF0ZVN0YXRlS2V5XTtcbiAgICAgICAgbGV0IHVwZGF0ZVN0YXRlVmFsdWUgPSB1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV07XG5cbiAgICAgICAgc3dpdGNoICh1cGRhdGVTdGF0ZVZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgICBjYXNlICdtb2RlbCc6XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZVZhbHVlID0gdXBkYXRlU3RhdGVWYWx1ZS50b0pTT04oKTtcbiAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVTdGF0ZVZhbHVlLl9pZDtcbiAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVTdGF0ZVZhbHVlLl9fdjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbk5hbWVzID09PSAnKicpIHtcbiAgICAgICAgICByZXNwb25zZVN0YXRlID0ge1xuICAgICAgICAgICAgLi4ucmVzcG9uc2VTdGF0ZSxcbiAgICAgICAgICAgIFt1cGRhdGVTdGF0ZUtleV06IHVwZGF0ZVN0YXRlVmFsdWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2x1bW5OYW1lcy5mb3JFYWNoKChjb2x1bW5OYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAodXBkYXRlU3RhdGVbdXBkYXRlU3RhdGVLZXldW2NvbHVtbk5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmVzcG9uc2VTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZVN0YXRlLFxuICAgICAgICAgICAgICAgIFt1cGRhdGVTdGF0ZUtleV06IHtcbiAgICAgICAgICAgICAgICAgIC4uLnJlc3BvbnNlU3RhdGVbdXBkYXRlU3RhdGVLZXldLFxuICAgICAgICAgICAgICAgICAgW2NvbHVtbk5hbWVdOiB1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV1bY29sdW1uTmFtZV0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IGBTRVFVRU5DRSBFUlJPUjogTk9fVVBEQVRFX1NUQVRFX0NPTFVNTl9OQU1FOiAke3JlcXVlc3RTdGF0ZS50eXBlfTogJHt1cGRhdGVTdGF0ZUtleX0uJHtjb2x1bW5OYW1lfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGBTRVFVRU5DRSBFUlJPUjogTk9fVVBEQVRFX1NUQVRFX0tFWTogJHtyZXF1ZXN0U3RhdGUudHlwZX06ICR7dXBkYXRlU3RhdGVLZXl9YDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2VTdGF0ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZXF1ZXN0QWN0aW9uU3RhdGUoYWN0aW9uTmFtZSwgcmVxdWVzdFBhcmFtczEgPSBudWxsLCByZXF1ZXN0UGFyYW1zMiA9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RQYXJhbXMxID09PSAnc3RyaW5nJyAmJiByZXF1ZXN0UGFyYW1zMiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVlc3RQYXJhbXMxID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcmVxdWVzdFBhcmFtczIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMSwgLi4ucmVxdWVzdFBhcmFtczIsIHR5cGU6IGFjdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0UGFyYW1zMSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHJlcXVlc3RQYXJhbXMyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHsgLi4ucmVxdWVzdFBhcmFtczIsIHR5cGU6IGFjdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgLi4ucmVxdWVzdFBhcmFtczEsIHR5cGU6IGFjdGlvbk5hbWUgfTtcbiAgfVxufVxuIiwiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG5pbXBvcnQgZGVmaW5lIGZyb20gJy4vZGVmaW5lJztcblxuY29uc3QgeyBQUk9EVUNUSU9OLCBERVZFTE9QTUVOVCwgUFJPRFVDVElPTl9ET01BSU4sIERFVkVMT1BNRU5UX0RPTUFJTiwgU1VCX0RPTUFJTlMsIFBPUlRTIH0gPSBkZWZpbmU7XG5jb25zdCBhcGlWZXIgPSAxO1xuY29uc3QgaG9zdE5hbWUgPSBvcy5oYXNPd25Qcm9wZXJ0eSgnaG9zdG5hbWUnKSA/IG9zLmhvc3RuYW1lKCkgOiAnbG9jYWxob3N0JztcbmNvbnN0IGVudiA9IGdldEVudihob3N0TmFtZSk7XG5jb25zdCBmaWxlcyA9IHtcbiAgY2xpZW50OiAndGFsa24uY2xpZW50LmpzJyxcbiAgYXBpOiAndGFsa24uYXBpLmpzJyxcbiAgd3NXb3JrZXI6ICd3cy5hcGkud29ya2VyLmpzJyxcbiAgZXh0OiAndGFsa24uZXh0LmpzJyxcbn07XG5jb25zdCBpc0RldiA9IGVudiA9PT0gREVWRUxPUE1FTlQ7XG5jb25zdCBkb21haW4gPSBlbnYgPT09IFBST0RVQ1RJT04gPyBQUk9EVUNUSU9OX0RPTUFJTiA6IERFVkVMT1BNRU5UX0RPTUFJTjtcbmNvbnN0IHd3d1VSTCA9IGAke1NVQl9ET01BSU5TLldXV30uJHtkb21haW59YDtcbmNvbnN0IGFwaVVSTCA9IGAke1NVQl9ET01BSU5TLkFQSX0uJHtkb21haW59YDtcbmNvbnN0IGFwaUFjY2Vzc1VSTCA9IGlzRGV2ID8gYCR7ZG9tYWlufToke1BPUlRTLkRFVkVMT1BNRU5UX0FQSX0vJHtmaWxlcy5hcGl9YCA6IGAke2FwaVVSTH0vdiR7YXBpVmVyfWA7XG5jb25zdCBjbGllbnRVUkwgPSBpc0RldiA/IGAke2RvbWFpbn06JHtQT1JUUy5ERVZFTE9QTUVOVH0vJHtmaWxlcy5jbGllbnR9YCA6IGAke1NVQl9ET01BSU5TLkNMSUVOVH0uJHtkb21haW59YDtcbmNvbnN0IGRlc2NVUkwgPSBgJHtTVUJfRE9NQUlOUy5ERVNDfS4ke2RvbWFpbn1gO1xuY29uc3QgcG9ydGFsVVJMID0gYCR7U1VCX0RPTUFJTlMuUE9SVEFMfS4ke2RvbWFpbn1gO1xuY29uc3QgYXNzZXRzVVJMID0gYCR7U1VCX0RPTUFJTlMuQVNTRVRTfS4ke2RvbWFpbn1gO1xuY29uc3QgYXV0b1VSTCA9IGAke1NVQl9ET01BSU5TLkFVVE99LiR7ZG9tYWlufWA7XG5jb25zdCBleHRVUkwgPSBgJHtTVUJfRE9NQUlOUy5FWFR9LiR7ZG9tYWlufWA7XG5jb25zdCBvd25VUkwgPSBgJHtTVUJfRE9NQUlOUy5PV059LiR7ZG9tYWlufWA7XG5jb25zdCBuZXdzVVJMID0gYCR7U1VCX0RPTUFJTlMuTkVXU30uJHtkb21haW59YDtcbmNvbnN0IGJhbm5lclVSTCA9IGAke1NVQl9ET01BSU5TLkJBTk5FUn0uJHtkb21haW59YDtcbmNvbnN0IHRyYW5zYWN0aW9uVVJMID0gYCR7U1VCX0RPTUFJTlMuVFJBTlNBQ1RJT059LiR7ZG9tYWlufWA7XG5jb25zdCBhc3NldHNJbWdQYXRoID0gYCR7YXNzZXRzVVJMfS9pbWcvYDtcbmNvbnN0IGFzc2V0c0ljb25QYXRoID0gYCR7YXNzZXRzVVJMfS9pY29uL2A7XG5jb25zdCBhc3NldHNKc1BhdGggPSBgJHthc3NldHNVUkx9L2pzL2A7XG5jb25zdCBzZXNzaW9uVVJMID0gYCR7U1VCX0RPTUFJTlMuU0VTU0lPTn0uJHtkb21haW59YDtcbmNvbnN0IGRlc2NyaXB0aW9uID0gJ3RhbGtuIGNhbiBzaGFyZSBjb21tZW50cyB3aXRoIHVzZXJzIHdhdGNoaW5nIHRoZSBzYW1lIFdFQiBwYWdlLiBQbGVhc2UgZW5qb3kgdGhlIHdvcmxkIG9mIHRhbGtuLic7XG5jb25zdCBscExhbmd1YWdlcyA9IFtcbiAgJ2VuJyxcbiAgJ3poJyxcbiAgJ2phJyxcbiAgJ2RlJyxcbiAgJ2ZyJyxcbiAgJ2hpJyxcbiAgJ3B0JyxcbiAgJ2l0JyxcbiAgJ3J1JyxcbiAgJ2tvJyxcbiAgJ2VzJyxcbiAgJ2lkJyxcbiAgJ3RyJyxcbiAgJ25sJyxcbiAgJ2FyJyxcbiAgJ3poLVRXJyxcbiAgJ3BsJyxcbiAgJ3N2JyxcbiAgJ3RoJyxcbiAgJ2ZhJyxcbiAgJ25uJyxcbiAgJ2dhJyxcbiAgJ2hlJyxcbiAgJ21yJyxcbl07XG5cbmNvbnN0IGZpbmRPbmVUaHJlYWRBY3RpdmVIb3VyID0gMTtcbmNvbnN0IGZpbmRPbmVQb3N0Q250ID0gMzA7XG5jb25zdCBmaW5kT25lTGltaXRDbnQgPSAzMDA7XG5jb25zdCBvZ3BJbWFnZXMgPSB7XG4gIEh0bWw6IGAvLyR7YXNzZXRzSW1nUGF0aH10YWxrbl9sb2dvX2h0bWwucG5nYCxcbiAgTXVzaWM6IGAvLyR7YXNzZXRzSW1nUGF0aH10YWxrbl9sb2dvX211c2ljLnBuZ2AsXG4gIFZpZGVvOiBgLy8ke2Fzc2V0c0ltZ1BhdGh9dGFsa25fbG9nb192aWRlby5wbmdgLFxufTtcbmNvbnN0IGRlZmF1bHRGYXZpY29uID0gYC8vJHtTVUJfRE9NQUlOUy5BU1NFVFN9LiR7ZG9tYWlufS9mYXZpY29uLmljb2A7XG5cbmNvbnN0IGNvbmY6IGFueSA9IHtcbiAgZG9tYWluLFxuICBlbnYsXG4gIGZpbGVzLFxuICBob3N0TmFtZSxcbiAgYXBpVVJMLFxuICBhcGlBY2Nlc3NVUkwsXG4gIHd3d1VSTCxcbiAgZGVzY1VSTCxcbiAgcG9ydGFsVVJMLFxuICBjbGllbnRVUkwsXG4gIGFzc2V0c1VSTCxcbiAgYXV0b1VSTCxcbiAgZXh0VVJMLFxuICBvd25VUkwsXG4gIG5ld3NVUkwsXG4gIGJhbm5lclVSTCxcbiAgdHJhbnNhY3Rpb25VUkwsXG4gIGFzc2V0c0ltZ1BhdGgsXG4gIGFzc2V0c0ljb25QYXRoLFxuICBhc3NldHNKc1BhdGgsXG4gIHNlc3Npb25VUkwsXG4gIGRlc2NyaXB0aW9uLFxuICBhcGlWZXIsXG4gIGxwTGFuZ3VhZ2VzLFxuICBmaW5kT25lVGhyZWFkQWN0aXZlSG91cixcbiAgZmluZE9uZVBvc3RDbnQsXG4gIGZpbmRPbmVMaW1pdENudCxcbiAgb2dwSW1hZ2VzLFxuICBkZWZhdWx0RmF2aWNvbixcbn07XG5leHBvcnQgZGVmYXVsdCB7IC4uLmNvbmYgfTtcblxuLy8gVE9ETzogTW92ZSB0byBzZXJ2ZXIgY29uZiggbm90IHVzZSBmcm9tIGNsaWVudCApLlxuZnVuY3Rpb24gZ2V0RW52KGhvc3ROYW1lKSB7XG4gIC8vIGZyb20gY2xpZW50LlxuICBpZiAocHJvY2Vzcy50aXRsZSA9PT0gJ2Jyb3dzZXInKSB7XG4gICAgaWYgKGxvY2F0aW9uLmhyZWYuaW5kZXhPZihkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOKSA+PSAwKSB7XG4gICAgICBjb25zdCBwb3J0ID0gTnVtYmVyKGxvY2F0aW9uLnBvcnQpO1xuICAgICAgcmV0dXJuIHBvcnQgPT09IGRlZmluZS5QT1JUUy5ERVZFTE9QTUVOVF9DTElFTlQgfHwgcG9ydCA9PT0gZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0FQSSB8fCBwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlRfVE9QXG4gICAgICAgID8gZGVmaW5lLkRFVkVMT1BNRU5UXG4gICAgICAgIDogZGVmaW5lLkxPQ0FMSE9TVDtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmluZS5QUk9EVUNUSU9OO1xuICAgIC8vIGZyb20gc2VydmVyLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBob3N0TmFtZS5pbmRleE9mKGRlZmluZS5BV1NfSE9TVF9LRVkpID49IDAgPyBkZWZpbmUuUFJPRFVDVElPTiA6IGRlZmluZS5ERVZFTE9QTUVOVDtcbiAgfVxufVxuIiwiaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5cbmNvbnN0IGhvc3ROYW1lID0gcHJvY2Vzcy5lbnYuSE9TVE5BTUUgPyBwcm9jZXNzLmVudi5IT1NUTkFNRSA6ICdsb2NhbGhvc3QnO1xuY29uc3QgZGVmaW5lOiBhbnkgPSB7XG4gIEFQUF9OQU1FOiAndGFsa24nLFxuICBQUk9EVUNUSU9OOiAnUFJPRFVDVElPTicsXG4gIExPQ0FMSE9TVDogJ0xPQ0FMSE9TVCcsXG4gIERFVkVMT1BNRU5UOiAnREVWRUxPUE1FTlQnLFxuICBQUk9EVUNUSU9OX0lQOiBob3N0TmFtZSxcbiAgUFJPRFVDVElPTl9ET01BSU46ICd0YWxrbi5pbycsXG4gIERFVkVMT1BNRU5UX0RPTUFJTjogJ2xvY2FsaG9zdCcsXG4gIEFXU19IT1NUX0tFWTogJ2VjMi5pbnRlcm5hbCcsXG4gIFBPUlRTOiB7XG4gICAgSFRUUDogODAsXG4gICAgSFRUUFM6IDQ0MyxcbiAgICBERVZFTE9QTUVOVF9DTElFTlQ6IDgwODAsXG4gICAgREVWRUxPUE1FTlRfQVBJOiA4MDAxLFxuICAgIERFVkVMT1BNRU5UX1RPUDogODAwMCxcbiAgICBSRURJUzogNjM3OSxcbiAgICBNT05HTzogMjcwMTcsXG4gICAgU09DS0VUX0lPOiAxMDQ0MyxcbiAgfSxcbiAgU1VCX0RPTUFJTlM6IHtcbiAgICBXV1c6ICd3d3cnLFxuICAgIEFQSTogJ2FwaScsXG4gICAgREVTQzogJ2Rlc2MnLFxuICAgIFBPUlRBTDogJ3BvcnRhbCcsXG4gICAgQ0xJRU5UOiAnY2xpZW50JyxcbiAgICBBU1NFVFM6ICdhc3NldHMnLFxuICAgIFNFU1NJT046ICdzZXNzaW9uJyxcbiAgICBBVVRPOiAnYXV0bycsXG4gICAgT1dOOiAnb3duJyxcbiAgICBORVdTOiAnbmV3cycsXG4gICAgQkFOTkVSOiAnYmFubmVyJyxcbiAgICBFWFQ6ICdleHQnLFxuICAgIFRSQU5TQUNUSU9OOiAndHJhbnNhY3Rpb24nLFxuICB9LFxuICBBUFBfVFlQRVM6IHtcbiAgICBQT1JUQUw6ICdQT1JUQUwnLFxuICAgIEVYVEVOU0lPTjogJ0VYVEVOU0lPTicsXG4gICAgQVBJOiAnQVBJJyxcbiAgICBUT1A6ICdUT1AnLFxuICB9LFxuICBVUkw6IHtcbiAgICB0d2l0dGVyOiAnaHR0cHM6Ly90d2l0dGVyLmNvbS8nLFxuICAgIGZhY2Vib29rOiAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLycsXG4gICAgYXBwc3RvcmU6ICdodHRwczovL2l0dW5lcy5hcHBsZS5jb20vYXBwL2lkJyxcbiAgICBwbGF5c3RvcmU6ICdodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9JyxcbiAgICBjaHJvbWVFeHRlbnNpb246ICdodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC90YWxrbi1mb3ItY2hyb21lL2RrbmdubWRsY29mYW1icGZhY2NlcGJuamdmaG9sZ2JvP2hsPWVuJyxcbiAgfSxcbiAgdGFsa25DbGllbnRKczogJ3RhbGtuLmNsaWVudC5qcycsXG4gIHRhbGtuQXBpSnM6ICd0YWxrbi5hcGkuanMnLFxuICBub0lubmVyTm90aWY6ICdTb3JyeSwgTm8gRnVuY3Rpb24uJyxcbiAgYmFubmVyQ2xhc3M6ICd0YWxrbl9iYW5uZXInLFxuICBzdG9yYWdlS2V5OiB7XG4gICAgYmFzZUtleTogJ0B0YWxrbkAnLFxuICAgIHBvc3RzVGltZWxpbmVaZXJvOiAncG9zdHNUaW1lbGluZVplcm8nLFxuICAgIHBvc3RzVGltZWxpbmU6ICdwb3N0c1RpbWVsaW5lJyxcbiAgICBwb3N0c1NpbmdsZTogJ3Bvc3RzU2luZ2xlJyxcbiAgICBwb3N0c011bHRpOiAncG9zdHNNdWx0aScsXG4gICAgcG9zdHNDaGlsZDogJ3Bvc3RzQ2hpbGQnLFxuICAgIHBvc3RzTG9nczogJ3Bvc3RzTG9ncycsXG4gICAgdGhyZWFkczogJ3RocmVhZHMnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lO1xuIiwiaW1wb3J0IEVtb3Rpb25Nb2RlbCBmcm9tICdjb21tb24vZW1vdGlvbnMvbW9kZWwvaW5kZXgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbW90aW9ucyB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE1vZGVsS2V5KCkge1xuICAgIHJldHVybiAncnVzc2VsbFNpbXBsZSc7XG4gIH1cbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTElLRTogeyBJRDogMSwgTEFCRUw6ICdMaWtlJyB9LFxuICAgICAgSU5URVJFU1Q6IHsgSUQ6IDEwMDIsIExBQkVMOiAnSW50ZXJlc3QnIH0sXG4gICAgICBESVNDT1ZFUlk6IHsgSUQ6IDEwMDMsIExBQkVMOiAnRGlzY292ZXJ5JyB9LFxuICAgICAgU1VOTlk6IHsgSUQ6IDEwMDQsIExBQkVMOiAnU3VubnknIH0sXG4gICAgICBQRUFDRTogeyBJRDogMTAwNSwgTEFCRUw6ICdQZWFjZScgfSxcbiAgICAgIENIRUVSOiB7IElEOiAxMDA2LCBMQUJFTDogJ0NoZWVyJyB9LFxuICAgICAgTU9ORVk6IHsgSUQ6IDEwMDcsIExBQkVMOiAnTW9uZXknIH0sXG4gICAgICBVTkxJS0U6IHsgSUQ6IDIwMDEsIExBQkVMOiAnVW5saWtlJyB9LFxuICAgICAgTE9WRTogeyBJRDogMzAwMCwgTEFCRUw6ICdMb3ZlJyB9LFxuICAgICAgU1VQUklTRTogeyBJRDogMTAwMDEsIExBQkVMOiAnU3VycHJpc2UnIH0sXG4gICAgICBFWENJVEU6IHsgSUQ6IDEwMDAyLCBMQUJFTDogJ0V4Y2l0ZScgfSxcbiAgICAgIEhBUFBZOiB7IElEOiAxMDAwMywgTEFCRUw6ICdIYXBweScgfSxcbiAgICAgIEpPWTogeyBJRDogMTAwMDQsIExBQkVMOiAnSm95JyB9LFxuICAgICAgR0xBRDogeyBJRDogMjAwMDEsIExBQkVMOiAnR2xhZCcgfSxcbiAgICAgIFNBVElTRkFDVElPTjogeyBJRDogMjAwMDIsIExBQkVMOiAnU2F0aXNmYWN0aW9uJyB9LFxuICAgICAgQ09NRk9SVDogeyBJRDogMzAwMDEsIExBQkVMOiAnQ29tZm9ydCcgfSxcbiAgICAgIFJFTEFYOiB7IElEOiAzMDAwMiwgTEFCRUw6ICdSZWxheCcgfSxcbiAgICAgIFRJUkVEOiB7IElEOiAzMDAwMywgTEFCRUw6ICdUaXJlZCcgfSxcbiAgICAgIFNMRUVQWTogeyBJRDogNTAwMDEsIExBQkVMOiAnU2xlZXB5JyB9LFxuICAgICAgU0xBQ0s6IHsgSUQ6IDYwMDAxLCBMQUJFTDogJ1NsYWNrJyB9LFxuICAgICAgQk9SSU5HOiB7IElEOiA2MDAwMiwgTEFCRUw6ICdCb3JpbmcnIH0sXG4gICAgICBNRUxBTkNIT0xZOiB7IElEOiA3MDAwMSwgTEFCRUw6ICdNZWxhbmNob2x5JyB9LFxuICAgICAgU0FEOiB7IElEOiA3MDAwMiwgTEFCRUw6ICdTYWQnIH0sXG4gICAgICBVTlBMRUFTQU5UOiB7IElEOiA3MDAwMywgTEFCRUw6ICdVbnBsZWFzYW50JyB9LFxuICAgICAgRlJVU1RSQVRFRDogeyBJRDogNzAwMDQsIExBQkVMOiAnRnJ1c3RyYXRlZCcgfSxcbiAgICAgIERJU1NBVElTRklFRDogeyBJRDogODAwMDEsIExBQkVMOiAnRGlzc2F0aXNmaWVkJyB9LFxuICAgICAgQU5HRVI6IHsgSUQ6IDgwMDAyLCBMQUJFTDogJ0FuZ2VyJyB9LFxuICAgICAgV09SUlk6IHsgSUQ6IDgwMDAzLCBMQUJFTDogJ1dvcnJ5JyB9LFxuICAgICAgRkVBUjogeyBJRDogODAwMDQsIExBQkVMOiAnRmVhcicgfSxcbiAgICAgIFdPUlJZX0ZFQVI6IHsgSUQ6IDgwMDA1LCBMQUJFTDogJ1dvcnJ5JkZlYXInIH0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRHcmFwaE1heE51bShtb2RlbEtleSA9IEVtb3Rpb25zLmRlZmF1bHRNb2RlbEtleSwgdG90YWxOdW0gPSAwLCBhZGRaZXJvID0gdHJ1ZSkge1xuICAgIGxldCBncmFwaE1heE51bSA9IDA7XG4gICAgbGV0IGxpbWl0cyA9IHt9O1xuICAgIHN3aXRjaCAobW9kZWxLZXkpIHtcbiAgICAgIGNhc2UgJ3BsYWluJzpcbiAgICAgICAgbGltaXRzID0ge1xuICAgICAgICAgIDE6IDEsXG4gICAgICAgICAgNTogMixcbiAgICAgICAgICAxMDogMyxcbiAgICAgICAgICAzMDogNCxcbiAgICAgICAgICA3MDogNSxcbiAgICAgICAgICAxMDA6IDYsXG4gICAgICAgICAgMjUwOiA3LFxuICAgICAgICAgIDUwMDogOCxcbiAgICAgICAgICA3NTA6IDksXG4gICAgICAgICAgMTAwMDogMTAsXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncnVzc2VsbFNpbXBsZSc6XG4gICAgICAgIGxpbWl0cyA9IHtcbiAgICAgICAgICA2OiA1LFxuICAgICAgICAgIDEwOiA1LFxuICAgICAgICAgIDIwOiA1LFxuICAgICAgICAgIDMwOiA1LFxuICAgICAgICAgIDUwOiA1LFxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3J1c3NlbGwnOlxuICAgICAgICBsaW1pdHMgPSB7XG4gICAgICAgICAgMTogMSxcbiAgICAgICAgICA1OiAyLFxuICAgICAgICAgIDEwOiAzLFxuICAgICAgICAgIDMwOiA0LFxuICAgICAgICAgIDcwOiA1LFxuICAgICAgICAgIDEwMDogNixcbiAgICAgICAgICAyNTA6IDcsXG4gICAgICAgICAgNTAwOiA4LFxuICAgICAgICAgIDc1MDogOSxcbiAgICAgICAgICAxMDAwOiAxMCxcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgbGltaXRLZXlzID0gT2JqZWN0LmtleXMobGltaXRzKTtcbiAgICBjb25zdCBsaW1pdExlbmd0aCA9IGxpbWl0S2V5cy5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGltaXRMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5TnVtOiBhbnkgPSBsaW1pdEtleXNbaV07XG4gICAgICBjb25zdCBlbW90aW9uTGltaXROdW0gPSBsaW1pdHNba2V5TnVtXTtcbiAgICAgIGlmIChrZXlOdW0gPiB0b3RhbE51bSkgYnJlYWs7XG4gICAgICBncmFwaE1heE51bSA9IGVtb3Rpb25MaW1pdE51bTtcbiAgICB9XG5cbiAgICAvLyBhZGQgemVybyBncmFwaCBzcGFjZVxuICAgIHJldHVybiBhZGRaZXJvID8gZ3JhcGhNYXhOdW0gKyAxIDogZ3JhcGhNYXhOdW07XG4gIH1cblxuICBiZWxvbmdDb3ZlclR5cGVzOiBhbnk7XG4gIGlkS2V5VHlwZXM6IGFueTtcbiAgdHlwZXNBcnJheTogYW55O1xuICBtb2RlbDogYW55O1xuICBiYWxhbmNlczogYW55O1xuICBjb25zdHJ1Y3Rvcih0eXBlID0gJycpIHtcbiAgICB0aGlzLmJlbG9uZ0NvdmVyVHlwZXMgPSB7fTtcbiAgICB0aGlzLmlkS2V5VHlwZXMgPSB7fTtcbiAgICB0aGlzLnR5cGVzQXJyYXkgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKEVtb3Rpb25zLmlucHV0cykuZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICAgIEVtb3Rpb25zLmlucHV0c1tsYWJlbF0uZm9yRWFjaCgoc3RhbXBJZCkgPT4ge1xuICAgICAgICB0aGlzLmJlbG9uZ0NvdmVyVHlwZXNbc3RhbXBJZF0gPSBsYWJlbDtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMoRW1vdGlvbnMuVFlQRVMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdGhpcy50eXBlc0FycmF5LnB1c2goa2V5KTtcbiAgICAgIGNvbnN0IG9iaiA9IEVtb3Rpb25zLlRZUEVTW2tleV07XG4gICAgICB0aGlzLmlkS2V5VHlwZXNbb2JqLklEXSA9IG9iai5MQUJFTDtcbiAgICB9KTtcblxuICAgIHRoaXMubW9kZWwgPSBFbW90aW9uTW9kZWw7XG5cbiAgICB0aGlzLmJhbGFuY2VzID0ge1xuICAgICAgcGxhaW46IEVtb3Rpb25Nb2RlbC5QbGFpbi5nZXRTYXZlQmFsYW5jZSxcbiAgICAgIHJ1c3NlbGw6IEVtb3Rpb25Nb2RlbC5SdXNzZWxsLmdldFNhdmVCYWxhbmNlLFxuICAgICAgcnVzc2VsbFNpbXBsZTogRW1vdGlvbk1vZGVsLlJ1c3NlbGxTaW1wbGUuZ2V0U2F2ZUJhbGFuY2UsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaW5wdXRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbRW1vdGlvbnMuVFlQRVMuTElLRS5MQUJFTF06IFsxLCAyLCAzLCA0LCA1XSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5NT05FWS5MQUJFTF06IFsxMDBdLFxuXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLkxBQkVMXTogWzExMDEsIDExMDIsIDExMDMsIDEwMDEsIDEwMDJdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLkxBQkVMXTogWzEyMDEsIDEyMDIsIDEyMDMsIDEyMDQsIDEzMDEsIDEzMDIsIDEzMDMsIDEzMDQsIDEzMDUsIDEzMDYsIDEzMDddLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLkpPWS5MQUJFTF06IFsxNDAxLCAxNDAyLCAxNTAxLCAxNTAyLCAxNTAzLCAxNTA0XSxcbiAgICAgIFtFbW90aW9ucy5UWVBFUy5SRUxBWC5MQUJFTF06IFsxNjAxLCAxNjAyLCAxNjAzLCAxNzAxLCAxNzAyLCAxNzAzLCAxODAxLCAxODAyLCAxODAzXSxcblxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLkxBQkVMXTogWzIwMDEsIDIwMDIsIDIwMDMsIDIwMDQsIDIwMDUsIDIxMDEsIDIxMDIsIDIxMDNdLFxuICAgICAgW0Vtb3Rpb25zLlRZUEVTLk1FTEFOQ0hPTFkuTEFCRUxdOiBbMjMwMSwgMjMwMiwgMjMwMywgMjIwMSwgMjIwMiwgMjIwMywgMjIwNCwgMjIwNSwgMjQwMSwgMjQwMiwgMjQwMywgMjQwNCwgMjUwMSwgMjUwMiwgMjUwM10sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuTEFCRUxdOiBbMjcwMSwgMjcwMiwgMjcwMywgMjcwNCwgMjcwNSwgMjcwNiwgMjYwMSwgMjYwMl0sXG4gICAgICBbRW1vdGlvbnMuVFlQRVMuV09SUllfRkVBUi5MQUJFTF06IFsyOTA0LCAyOTA1LCAyOTA2LCAyODAxLCAyODAyLCAyODAzLCAyODA0LCAyODA1LCAyODA2LCAyOTAxLCAyOTAzXSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldCBtYXAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEZsYXQgbGlrZVxuICAgICAgMTogJ/CfkY0nLFxuICAgICAgMjogJ+KcjO+4jycsXG4gICAgICAzOiAn8J+RgCcsXG4gICAgICA0OiAn8J+SoScsXG4gICAgICA1OiAn8J+SqicsXG4gICAgICAxMDogJycsXG4gICAgICAxMDA6ICfwn5K1JyxcblxuICAgICAgLy8gU3VwcmlzZShQb3NpMSlcbiAgICAgIDEwMDE6ICfwn5izJyxcbiAgICAgIDEwMDI6ICfwn5i1JyxcblxuICAgICAgLy8gRXhjaXRlKFBvc2kxKVxuICAgICAgMTEwMTogJ/CfpKMnLFxuICAgICAgMTEwMjogJ/CfmIYnLFxuICAgICAgMTEwMzogJ/CfpKknLFxuXG4gICAgICAvLyBIYXBweShQb3NpMilcbiAgICAgIDEyMDE6ICfwn5KTJyxcbiAgICAgIDEyMDI6ICfwn6WwJyxcbiAgICAgIDEyMDM6ICfwn5iNJyxcbiAgICAgIDEyMDQ6ICfwn5i7JyxcblxuICAgICAgLy8gSm95KFBvc2kyKVxuICAgICAgMTMwMTogJ/CfmIQnLFxuICAgICAgMTMwMjogJ+KcqCcsXG4gICAgICAxMzAzOiAn8J+YgScsXG4gICAgICAxMzA0OiAn8J+NuicsXG4gICAgICAxMzA1OiAn8J+YiicsXG4gICAgICAxMzA2OiAn8J+YmCcsXG4gICAgICAxMzA3OiAn8J+MnycsXG5cbiAgICAgIC8vIEdsYWQoUG9zaTMpXG4gICAgICAxNDAxOiAn8J+lsycsXG4gICAgICAxNDAyOiAn8J+YgycsXG5cbiAgICAgIC8vIFNhdGlzZmFjdGlvbihQb3NpMylcbiAgICAgIDE1MDE6ICfwn5iLJyxcbiAgICAgIDE1MDI6ICfwn46CJyxcbiAgICAgIDE1MDM6ICfwn42wJyxcbiAgICAgIDE1MDQ6ICfwn6eBJyxcblxuICAgICAgLy8gQ29tZm9ydChQb3NpNClcbiAgICAgIDE2MDE6ICfwn5iMJyxcbiAgICAgIDE2MDI6ICfwn6SkJyxcbiAgICAgIDE2MDM6ICfwn5iJJyxcblxuICAgICAgLy8gUmVsYXgoUG9zaTQpXG4gICAgICAxNzAxOiAn8J+ZgicsXG4gICAgICAxNzAyOiAn4piV77iPJyxcbiAgICAgIDE3MDM6ICfwn421JyxcblxuICAgICAgLy8gVGlyZWQoUG9zaTQpXG4gICAgICAxODAxOiAn8J+YkCcsXG4gICAgICAxODAyOiAn8J+YricsXG4gICAgICAxODAzOiAn8J+YrycsXG5cbiAgICAgIC8vIFNsYWNrKE5lZ2E0KVxuICAgICAgMjAwMTogJ/CfmIUnLFxuICAgICAgMjAwMjogJ/CfkqYnLFxuICAgICAgMjAwMzogJ/CfpbonLFxuICAgICAgMjAwNDogJ/CfmLInLFxuICAgICAgMjAwNTogJ/CfmYQnLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiAn8J+YkicsXG4gICAgICAyMTAyOiAn8J+YkScsXG4gICAgICAyMTAzOiAn8J+YlScsXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiAn8J+YqScsXG4gICAgICAyMjAyOiAn8J+YnicsXG4gICAgICAyMjAzOiAn8J+YlCcsXG4gICAgICAyMjA0OiAn8J+YnycsXG4gICAgICAyMjA1OiAn8J+koicsXG5cbiAgICAgIC8vIFNhZChOZWdhMylcbiAgICAgIDIzMDE6ICfwn5itJyxcbiAgICAgIDIzMDI6ICfwn5ilJyxcbiAgICAgIDIzMDM6ICfwn5i/JyxcblxuICAgICAgLy8gVW5wbGVhc2FudChOZWdhMylcbiAgICAgIDI0MDE6ICfwn6SVJyxcbiAgICAgIDI0MDI6ICfwn6SSJyxcbiAgICAgIDI0MDM6ICfwn5i3JyxcbiAgICAgIDI0MDQ6ICfwn6SnJyxcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6ICfwn6eQJyxcbiAgICAgIDI1MDI6ICfwn6SUJyxcbiAgICAgIDI1MDM6ICfwn6SoJyxcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogJ/CfmKAnLFxuICAgICAgMjYwMjogJ/CfmL4nLFxuXG4gICAgICAvLyBBbmdlcihOZWdhMilcbiAgICAgIDI3MDE6ICfwn5ihJyxcbiAgICAgIDI3MDI6ICfwn6SsJyxcbiAgICAgIDI3MDM6ICfwn5KUJyxcbiAgICAgIDI3MDQ6ICfwn5KiJyxcbiAgICAgIDI3MDU6ICfwn5ikJyxcbiAgICAgIDI3MDY6ICfwn5G/JyxcblxuICAgICAgLy8gV29ycnkoTmVnYTEpXG4gICAgICAyODAxOiAn8J+YoycsXG4gICAgICAyODAyOiAn8J+YqycsXG4gICAgICAyODAzOiAn8J+YkycsXG4gICAgICAyODA0OiAn8J+YlicsXG4gICAgICAyODA1OiAn8J+YqCcsXG4gICAgICAyODA2OiAn8J+YsCcsXG5cbiAgICAgIC8vIEZlYXIoTmVnYTEpXG4gICAgICAyOTAxOiAn8J+lticsXG4gICAgICAyOTAyOiAn8J+kricsXG4gICAgICAyOTAzOiAn8J+ltScsXG4gICAgICAyOTA0OiAn8J+YsScsXG4gICAgICAyOTA1OiAn8J+ZgCcsXG4gICAgICAyOTA2OiAn8J+SgCcsXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IEVtb3Rpb25zIGZyb20gJ2NvbW1vbi9lbW90aW9ucy9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYWluIHtcbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4gW0Vtb3Rpb25zLlRZUEVTLkxJS0VdO1xuICB9XG5cbiAgc3RhdGljIGdldFNhdmVCYWxhbmNlKHN0YW1wSWQpIHtcbiAgICBjb25zdCBiYWxhbmNlID0ge1xuICAgICAgMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkxJS0UuSURdOiAxIH1dLFxuICAgIH07XG4gICAgcmV0dXJuIGJhbGFuY2Vbc3RhbXBJZF0gPyBiYWxhbmNlW3N0YW1wSWRdIDogbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTY2hlbWFzKCkge1xuICAgIGxldCBzY2hlbWFzID0ge307XG4gICAgUGxhaW4uVFlQRVMuZm9yRWFjaCgob2JqLCBpKSA9PiB7XG4gICAgICBzY2hlbWFzW29iai5MQUJFTF0gPSB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCwgbWluOiAwIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYXM7XG4gIH1cbn1cbiIsImltcG9ydCBFbW90aW9ucyBmcm9tICdjb21tb24vZW1vdGlvbnMvaW5kZXgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdXNzZWxsIHtcbiAgc3RhdGljIGdldCBUWVBFUygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgRW1vdGlvbnMuVFlQRVMuU1VQUklTRSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkVYQ0lURSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkhBUFBZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuSk9ZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuR0xBRCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTixcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkNPTUZPUlQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5SRUxBWCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlRJUkVELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0xFRVBZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0xBQ0ssXG4gICAgICBFbW90aW9ucy5UWVBFUy5CT1JJTkcsXG4gICAgICBFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0FELFxuICAgICAgRW1vdGlvbnMuVFlQRVMuVU5QTEVBU0FOVCxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkZSVVNUUkFURUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5ESVNTQVRJU0ZJRUQsXG4gICAgICBFbW90aW9ucy5UWVBFUy5BTkdFUixcbiAgICAgIEVtb3Rpb25zLlRZUEVTLldPUlJZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuRkVBUixcbiAgICBdO1xuICB9XG5cbiAgdHlwZXNBcnJheTogYW55O1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgdGhpcy50eXBlc0FycmF5ID0gW107XG4gICAgT2JqZWN0LmtleXMoUnVzc2VsbC5UWVBFUykuZm9yRWFjaCgoaW5kZXgpID0+IHtcbiAgICAgIHRoaXMudHlwZXNBcnJheS5wdXNoKFJ1c3NlbGwuVFlQRVNbaW5kZXhdLkxBQkVMKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTYXZlQmFsYW5jZShzdGFtcElkKSB7XG4gICAgY29uc3QgYmFsYW5jZSA9IHtcbiAgICAgIC8vIFN1cHJpc2UoUG9zaTEpXG4gICAgICAxMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU1VQUklTRS5JRF06IDEgfV0sXG4gICAgICAxMDAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU1VQUklTRS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEV4Y2l0ZShQb3NpMSlcbiAgICAgIDExMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcblxuICAgICAgLy8gSGFwcHkoUG9zaTIpXG4gICAgICAxMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBKb3koUG9zaTIpXG4gICAgICAxMzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDU6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA3OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcblxuICAgICAgLy8gR2xhZChQb3NpMylcbiAgICAgIDE0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5HTEFELklEXTogMSB9XSxcbiAgICAgIDE0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5HTEFELklEXTogMSB9XSxcblxuICAgICAgLy8gU2F0aXNmYWN0aW9uKFBvc2kzKVxuICAgICAgMTUwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTi5JRF06IDEgfV0sXG4gICAgICAxNTAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FUSVNGQUNUSU9OLklEXTogMSB9XSxcbiAgICAgIDE1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TQVRJU0ZBQ1RJT04uSURdOiAxIH1dLFxuICAgICAgMTUwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBVElTRkFDVElPTi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIENvbWZvcnQoUG9zaTQpXG4gICAgICAxNjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQ09NRk9SVC5JRF06IDEgfV0sXG4gICAgICAxNjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuQ09NRk9SVC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFJlbGF4KFBvc2k0KVxuICAgICAgMTcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuXG4gICAgICAvLyBUaXJlZChQb3NpNClcbiAgICAgIDE4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG4gICAgICAxODAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuICAgICAgMTgwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcblxuICAgICAgLy8gU2xhY2soTmVnYTQpXG4gICAgICAyMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQk9SSU5HLklEXTogMSB9XSxcbiAgICAgIDIxMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5CT1JJTkcuSURdOiAxIH1dLFxuICAgICAgMjEwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkJPUklORy5JRF06IDEgfV0sXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhZChOZWdhMylcbiAgICAgIDIzMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5TQUQuSURdOiAxIH1dLFxuICAgICAgMjMwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNBRC5JRF06IDEgfV0sXG4gICAgICAyMzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0FELklEXTogMSB9XSxcblxuICAgICAgLy8gVW5wbGVhc2FudChOZWdhMylcbiAgICAgIDI0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcbiAgICAgIDI0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcbiAgICAgIDI0MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcbiAgICAgIDI0MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5VTlBMRUFTQU5ULklEXTogMSB9XSxcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELklEXTogMSB9XSxcbiAgICAgIDI1MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELklEXTogMSB9XSxcbiAgICAgIDI1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5GUlVTVFJBVEVELklEXTogMSB9XSxcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkRJU1NBVElTRklFRC5JRF06IDEgfV0sXG4gICAgICAyNjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuRElTU0FUSVNGSUVELklEXTogMSB9XSxcblxuICAgICAgLy8gQW5nZXIoTmVnYTIpXG4gICAgICAyNzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFdvcnJ5KE5lZ2ExKVxuICAgICAgMjgwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcbiAgICAgIDI4MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWS5JRF06IDEgfV0sXG4gICAgICAyODA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuV09SUlkuSURdOiAxIH1dLFxuICAgICAgMjgwNzogW3sgW0Vtb3Rpb25zLlRZUEVTLldPUlJZLklEXTogMSB9XSxcblxuICAgICAgLy8gRmVhcihOZWdhMSlcbiAgICAgIDI5MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5GRUFSLklEXTogMSB9XSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGJhbGFuY2Vbc3RhbXBJZF0gPyBiYWxhbmNlW3N0YW1wSWRdIDogbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTY2hlbWFzKCkge1xuICAgIGxldCBzY2hlbWFzID0ge307XG4gICAgUnVzc2VsbC5UWVBFUy5mb3JFYWNoKChvYmosIGkpID0+IHtcbiAgICAgIHNjaGVtYXNbb2JqLkxBQkVMXSA9IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiAwLCBtaW46IDAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NoZW1hcztcbiAgfVxufVxuIiwiaW1wb3J0IEVtb3Rpb25zIGZyb20gJ2NvbW1vbi9lbW90aW9ucy9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJ1c3NlbGxTaW1wbGUge1xuICBzdGF0aWMgZ2V0IFRZUEVTKCkge1xuICAgIHJldHVybiBbXG4gICAgICBFbW90aW9ucy5UWVBFUy5FWENJVEUsXG4gICAgICBFbW90aW9ucy5UWVBFUy5IQVBQWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLkpPWSxcbiAgICAgIEVtb3Rpb25zLlRZUEVTLlJFTEFYLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuU0xBQ0ssXG4gICAgICBFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLFxuICAgICAgRW1vdGlvbnMuVFlQRVMuQU5HRVIsXG4gICAgICBFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLFxuICAgIF07XG4gIH1cblxuICB0eXBlc0FycmF5OiBhbnk7XG4gIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICB0aGlzLnR5cGVzQXJyYXkgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhSdXNzZWxsU2ltcGxlLlRZUEVTKS5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgdGhpcy50eXBlc0FycmF5LnB1c2goUnVzc2VsbFNpbXBsZS5UWVBFU1tpbmRleF0uTEFCRUwpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldFNhdmVCYWxhbmNlKHN0YW1wSWQpIHtcbiAgICBjb25zdCBiYWxhbmNlID0ge1xuICAgICAgLy8gU3VwcmlzZShQb3NpMSlcbiAgICAgIDEwMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEV4Y2l0ZShQb3NpMSlcbiAgICAgIDExMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5FWENJVEUuSURdOiAxIH1dLFxuICAgICAgMTEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkVYQ0lURS5JRF06IDEgfV0sXG4gICAgICAxMTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuRVhDSVRFLklEXTogMSB9XSxcblxuICAgICAgLy8gSGFwcHkoUG9zaTIpXG4gICAgICAxMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuICAgICAgMTIwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkhBUFBZLklEXTogMSB9XSxcbiAgICAgIDEyMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5IQVBQWS5JRF06IDEgfV0sXG4gICAgICAxMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSEFQUFkuSURdOiAxIH1dLFxuXG4gICAgICAvLyBKb3koUG9zaTIpXG4gICAgICAxMzAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDEzMDU6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTMwNjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxMzA3OiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcblxuICAgICAgLy8gR2xhZChQb3NpMylcbiAgICAgIDE0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTQwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhdGlzZmFjdGlvbihQb3NpMylcbiAgICAgIDE1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuICAgICAgMTUwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLkpPWS5JRF06IDEgfV0sXG4gICAgICAxNTAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuSk9ZLklEXTogMSB9XSxcbiAgICAgIDE1MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5KT1kuSURdOiAxIH1dLFxuXG4gICAgICAvLyBDb21mb3J0KFBvc2k0KVxuICAgICAgMTYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE2MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFJlbGF4KFBvc2k0KVxuICAgICAgMTcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLlJFTEFYLklEXTogMSB9XSxcbiAgICAgIDE3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5SRUxBWC5JRF06IDEgfV0sXG4gICAgICAxNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuUkVMQVguSURdOiAxIH1dLFxuXG4gICAgICAvLyBUaXJlZChQb3NpNClcbiAgICAgIDE4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5USVJFRC5JRF06IDEgfV0sXG4gICAgICAxODAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuVElSRUQuSURdOiAxIH1dLFxuICAgICAgMTgwMzogW3sgW0Vtb3Rpb25zLlRZUEVTLlRJUkVELklEXTogMSB9XSxcblxuICAgICAgLy8gU2xhY2soTmVnYTQpXG4gICAgICAyMDAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjAwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIwMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG4gICAgICAyMDA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuXG4gICAgICAvLyBCb3JpbmcoTmVnYTQpXG4gICAgICAyMTAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuU0xBQ0suSURdOiAxIH1dLFxuICAgICAgMjEwMjogW3sgW0Vtb3Rpb25zLlRZUEVTLlNMQUNLLklEXTogMSB9XSxcbiAgICAgIDIxMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5TTEFDSy5JRF06IDEgfV0sXG5cbiAgICAgIC8vIE1lbGFuY2hvbHkoTmVnYTQpXG4gICAgICAyMjAxOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAyOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA0OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG4gICAgICAyMjA1OiBbeyBbRW1vdGlvbnMuVFlQRVMuTUVMQU5DSE9MWS5JRF06IDEgfV0sXG5cbiAgICAgIC8vIFNhZChOZWdhMylcbiAgICAgIDIzMDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIzMDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDIzMDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gVW5wbGVhc2FudChOZWdhMylcbiAgICAgIDI0MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI0MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI0MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI0MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gZnJ1c3RyYXRlZChOZWdhMylcbiAgICAgIDI1MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI1MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcbiAgICAgIDI1MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5NRUxBTkNIT0xZLklEXTogMSB9XSxcblxuICAgICAgLy8gZGlzc2F0aXNmaWVkKE5lZ2EyKVxuICAgICAgMjYwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI2MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG5cbiAgICAgIC8vIEFuZ2VyKE5lZ2EyKVxuICAgICAgMjcwMTogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzAzOiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuICAgICAgMjcwNDogW3sgW0Vtb3Rpb25zLlRZUEVTLkFOR0VSLklEXTogMSB9XSxcbiAgICAgIDI3MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5BTkdFUi5JRF06IDEgfV0sXG4gICAgICAyNzA2OiBbeyBbRW1vdGlvbnMuVFlQRVMuQU5HRVIuSURdOiAxIH1dLFxuXG4gICAgICAvLyBXb3JyeShOZWdhMSlcbiAgICAgIDI4MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI4MDc6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcblxuICAgICAgLy8gRmVhcihOZWdhMSlcbiAgICAgIDI5MDE6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDI6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDM6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDQ6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDU6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICAgIDI5MDY6IFt7IFtFbW90aW9ucy5UWVBFUy5XT1JSWV9GRUFSLklEXTogMSB9XSxcbiAgICB9O1xuICAgIHJldHVybiBiYWxhbmNlW3N0YW1wSWRdID8gYmFsYW5jZVtzdGFtcElkXSA6IG51bGw7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2NoZW1hcygpIHtcbiAgICBsZXQgc2NoZW1hcyA9IHt9O1xuICAgIFJ1c3NlbGxTaW1wbGUuVFlQRVMuZm9yRWFjaCgob2JqLCBpKSA9PiB7XG4gICAgICBzY2hlbWFzW29iai5MQUJFTF0gPSB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCwgbWluOiAwIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYXM7XG4gIH1cbn1cbiIsImltcG9ydCBQbGFpbiBmcm9tICcuL1BsYWluJztcbmltcG9ydCBSdXNzZWxsIGZyb20gJy4vUnVzc2VsbCc7XG5pbXBvcnQgUnVzc2VsbFNpbXBsZSBmcm9tICcuL1J1c3NlbGxTaW1wbGUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFBsYWluLFxuICBSdXNzZWxsLFxuICBSdXNzZWxsU2ltcGxlLFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbyA9IGV4cG9ydHMuU29ja2V0ID0gZXhwb3J0cy5NYW5hZ2VyID0gZXhwb3J0cy5wcm90b2NvbCA9IHZvaWQgMDtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcIi4vdXJsXCIpO1xuY29uc3QgbWFuYWdlcl8xID0gcmVxdWlyZShcIi4vbWFuYWdlclwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudFwiKTtcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cbmNvbnN0IGNhY2hlID0gKGV4cG9ydHMubWFuYWdlcnMgPSB7fSk7XG5mdW5jdGlvbiBsb29rdXAodXJpLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBwYXJzZWQgPSB1cmxfMS51cmwodXJpLCBvcHRzLnBhdGggfHwgXCIvc29ja2V0LmlvXCIpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gICAgY29uc3QgaWQgPSBwYXJzZWQuaWQ7XG4gICAgY29uc3QgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF1bXCJuc3BzXCJdO1xuICAgIGNvbnN0IG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8XG4gICAgICAgIG9wdHNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSB8fFxuICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHxcbiAgICAgICAgc2FtZU5hbWVzcGFjZTtcbiAgICBsZXQgaW87XG4gICAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgZGVidWcoXCJpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzXCIsIHNvdXJjZSk7XG4gICAgICAgIGlvID0gbmV3IG1hbmFnZXJfMS5NYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgICAgZGVidWcoXCJuZXcgaW8gaW5zdGFuY2UgZm9yICVzXCIsIHNvdXJjZSk7XG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBuZXcgbWFuYWdlcl8xLk1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpbyA9IGNhY2hlW2lkXTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgICAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5S2V5O1xuICAgIH1cbiAgICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cbmV4cG9ydHMuaW8gPSBsb29rdXA7XG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwcm90b2NvbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc29ja2V0X2lvX3BhcnNlcl8xLnByb3RvY29sOyB9IH0pO1xuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbWFuYWdlcl8yID0gcmVxdWlyZShcIi4vbWFuYWdlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hbmFnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hbmFnZXJfMi5NYW5hZ2VyOyB9IH0pO1xudmFyIHNvY2tldF8xID0gcmVxdWlyZShcIi4vc29ja2V0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU29ja2V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2NrZXRfMS5Tb2NrZXQ7IH0gfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBsb29rdXA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGVpbyA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tY2xpZW50XCIpO1xuY29uc3Qgc29ja2V0XzEgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbmNvbnN0IG9uXzEgPSByZXF1aXJlKFwiLi9vblwiKTtcbmNvbnN0IEJhY2tvZmYgPSByZXF1aXJlKFwiYmFja28yXCIpO1xuY29uc3QgdHlwZWRfZXZlbnRzXzEgPSByZXF1aXJlKFwiLi90eXBlZC1ldmVudHNcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6bWFuYWdlclwiKTtcbmNsYXNzIE1hbmFnZXIgZXh0ZW5kcyB0eXBlZF9ldmVudHNfMS5TdHJpY3RFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHVyaSwgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5zcHMgPSB7fTtcbiAgICAgICAgdGhpcy5zdWJzID0gW107XG4gICAgICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgICAgICAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICAgICAgICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgICAgICAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxcbiAgICAgICAgICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgICAgICAgICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICBjb25zdCBfcGFyc2VyID0gb3B0cy5wYXJzZXIgfHwgcGFyc2VyO1xuICAgICAgICB0aGlzLmVuY29kZXIgPSBuZXcgX3BhcnNlci5FbmNvZGVyKCk7XG4gICAgICAgIHRoaXMuZGVjb2RlciA9IG5ldyBfcGFyc2VyLkRlY29kZXIoKTtcbiAgICAgICAgdGhpcy5fYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbih2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkF0dGVtcHRzKHYpIHtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cztcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uRGVsYXkodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TWluKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmFuZG9taXphdGlvbkZhY3Rvcih2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yO1xuICAgICAgICB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Sml0dGVyKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uRGVsYXlNYXgodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TWF4KHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGltZW91dCh2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICAgICAgICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICAgICAqIHN0YXJ0ZWQgcmVjb25uZWN0aW5nIHlldFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBtYXliZVJlY29ubmVjdE9uT3BlbigpIHtcbiAgICAgICAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICAgICAgICBpZiAoIXRoaXMuX3JlY29ubmVjdGluZyAmJlxuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uICYmXG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGtlZXBzIHJlY29ubmVjdGlvbiBmcm9tIGZpcmluZyB0d2ljZSBmb3IgdGhlIHNhbWUgcmVjb25uZWN0aW9uIGxvb3BcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIG9wdGlvbmFsLCBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBvcGVuKGZuKSB7XG4gICAgICAgIGRlYnVnKFwicmVhZHlTdGF0ZSAlc1wiLCB0aGlzLl9yZWFkeVN0YXRlKTtcbiAgICAgICAgaWYgKH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGRlYnVnKFwib3BlbmluZyAlc1wiLCB0aGlzLnVyaSk7XG4gICAgICAgIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXG4gICAgICAgIGNvbnN0IG9wZW5TdWJEZXN0cm95ID0gb25fMS5vbihzb2NrZXQsIFwib3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9ub3BlbigpO1xuICAgICAgICAgICAgZm4gJiYgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVtaXQgYGVycm9yYFxuICAgICAgICBjb25zdCBlcnJvclN1YiA9IG9uXzEub24oc29ja2V0LCBcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGRlYnVnKFwiZXJyb3JcIik7XG4gICAgICAgICAgICBzZWxmLmNsZWFudXAoKTtcbiAgICAgICAgICAgIHNlbGYuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICAgICAgICAgIGRlYnVnKFwiY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZFwiLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTsgLy8gcHJldmVudHMgYSByYWNlIGNvbmRpdGlvbiB3aXRoIHRoZSAnb3BlbicgZXZlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNldCB0aW1lclxuICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdChcImVycm9yXCIsIG5ldyBFcnJvcihcInRpbWVvdXRcIikpO1xuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnMucHVzaChvcGVuU3ViRGVzdHJveSk7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBvcGVuKClcbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW4oZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBkZWJ1ZyhcIm9wZW5cIik7XG4gICAgICAgIC8vIGNsZWFyIG9sZCBzdWJzXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAvLyBtYXJrIGFzIG9wZW5cbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm9wZW5cIik7XG4gICAgICAgIC8vIGFkZCBuZXcgc3Vic1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2gob25fMS5vbihzb2NrZXQsIFwicGluZ1wiLCB0aGlzLm9ucGluZy5iaW5kKHRoaXMpKSwgb25fMS5vbihzb2NrZXQsIFwiZGF0YVwiLCB0aGlzLm9uZGF0YS5iaW5kKHRoaXMpKSwgb25fMS5vbihzb2NrZXQsIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLCBvbl8xLm9uKHNvY2tldCwgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksIG9uXzEub24odGhpcy5kZWNvZGVyLCBcImRlY29kZWRcIiwgdGhpcy5vbmRlY29kZWQuYmluZCh0aGlzKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGluZygpIHtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kZWNvZGVkKHBhY2tldCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIGRlYnVnKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHNvY2tldCBmb3IgdGhlIGdpdmVuIGBuc3BgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U29ja2V0fVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzb2NrZXQobnNwLCBvcHRzKSB7XG4gICAgICAgIGxldCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgICAgICAgIHNvY2tldCA9IG5ldyBzb2NrZXRfMS5Tb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICAgICAgICAgIHRoaXMubnNwc1tuc3BdID0gc29ja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Rlc3Ryb3koc29ja2V0KSB7XG4gICAgICAgIGNvbnN0IG5zcHMgPSBPYmplY3Qua2V5cyh0aGlzLm5zcHMpO1xuICAgICAgICBmb3IgKGNvbnN0IG5zcCBvZiBuc3BzKSB7XG4gICAgICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgICAgIGlmIChzb2NrZXQuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJzb2NrZXQgJXMgaXMgc3RpbGwgYWN0aXZlLCBza2lwcGluZyBjbG9zZVwiLCBuc3ApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFja2V0KHBhY2tldCkge1xuICAgICAgICBkZWJ1ZyhcIndyaXRpbmcgcGFja2V0ICVqXCIsIHBhY2tldCk7XG4gICAgICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICBkZWJ1ZyhcImNsZWFudXBcIik7XG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICB0aGlzLnN1YnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2xvc2UoKSB7XG4gICAgICAgIGRlYnVnKFwiZGlzY29ubmVjdFwiKTtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5fcmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgICAgICAgICAgLy8gYW4gb3BlbiBldmVudCBuZXZlciBoYXBwZW5lZFxuICAgICAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICBpZiAodGhpcy5lbmdpbmUpXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2xvc2UoKVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbikge1xuICAgICAgICBkZWJ1ZyhcIm9uY2xvc2VcIik7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY2xvc2VcIiwgcmVhc29uKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IGZhaWxlZFwiKTtcbiAgICAgICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZmFpbGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgICAgICAgICAgZGVidWcoXCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRcIiwgZGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiYXR0ZW1wdGluZyByZWNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZWxmLm9wZW4oKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBhdHRlbXB0IGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IHN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbnJlY29ubmVjdCgpIHtcbiAgICAgICAgY29uc3QgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdFwiLCBhdHRlbXB0KTtcbiAgICB9XG59XG5leHBvcnRzLk1hbmFnZXIgPSBNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9uID0gdm9pZCAwO1xuZnVuY3Rpb24gb24ob2JqLCBldiwgZm4pIHtcbiAgICBvYmoub24oZXYsIGZuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgb2JqLm9mZihldiwgZm4pO1xuICAgIH07XG59XG5leHBvcnRzLm9uID0gb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU29ja2V0ID0gdm9pZCAwO1xuY29uc3Qgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5jb25zdCBvbl8xID0gcmVxdWlyZShcIi4vb25cIik7XG5jb25zdCB0eXBlZF9ldmVudHNfMSA9IHJlcXVpcmUoXCIuL3R5cGVkLWV2ZW50c1wiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudDpzb2NrZXRcIik7XG4vKipcbiAqIEludGVybmFsIGV2ZW50cy5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICovXG5jb25zdCBSRVNFUlZFRF9FVkVOVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBjb25uZWN0OiAxLFxuICAgIGNvbm5lY3RfZXJyb3I6IDEsXG4gICAgZGlzY29ubmVjdDogMSxcbiAgICBkaXNjb25uZWN0aW5nOiAxLFxuICAgIC8vIEV2ZW50RW1pdHRlciByZXNlcnZlZCBldmVudHM6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvZXZlbnRzLmh0bWwjZXZlbnRzX2V2ZW50X25ld2xpc3RlbmVyXG4gICAgbmV3TGlzdGVuZXI6IDEsXG4gICAgcmVtb3ZlTGlzdGVuZXI6IDEsXG59KTtcbmNsYXNzIFNvY2tldCBleHRlbmRzIHR5cGVkX2V2ZW50c18xLlN0cmljdEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW8sIG5zcCwgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuaWRzID0gMDtcbiAgICAgICAgdGhpcy5hY2tzID0ge307XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5pbyA9IGlvO1xuICAgICAgICB0aGlzLm5zcCA9IG5zcDtcbiAgICAgICAgdGhpcy5pZHMgPSAwO1xuICAgICAgICB0aGlzLmFja3MgPSB7fTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5hdXRoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGggPSBvcHRzLmF1dGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW8uX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdWJFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlvID0gdGhpcy5pbztcbiAgICAgICAgdGhpcy5zdWJzID0gW1xuICAgICAgICAgICAgb25fMS5vbihpbywgXCJvcGVuXCIsIHRoaXMub25vcGVuLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJwYWNrZXRcIiwgdGhpcy5vbnBhY2tldC5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uXzEub24oaW8sIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIFNvY2tldCB3aWxsIHRyeSB0byByZWNvbm5lY3Qgd2hlbiBpdHMgTWFuYWdlciBjb25uZWN0cyBvciByZWNvbm5lY3RzXG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdWJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5zdWJFdmVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlvW1wiX3JlY29ubmVjdGluZ1wiXSlcbiAgICAgICAgICAgIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMuaW8uX3JlYWR5U3RhdGUpXG4gICAgICAgICAgICB0aGlzLm9ub3BlbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNvbm5lY3QoKVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VuZCguLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdChcIm1lc3NhZ2VcIik7XG4gICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGBlbWl0YC5cbiAgICAgKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBlbWl0KGV2LCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChSRVNFUlZFRF9FVkVOVFMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGV2ICsgJ1wiIGlzIGEgcmVzZXJ2ZWQgZXZlbnQgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MudW5zaGlmdChldik7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkVWRU5ULFxuICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSB0aGlzLmZsYWdzLmNvbXByZXNzICE9PSBmYWxzZTtcbiAgICAgICAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGRlYnVnKFwiZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkXCIsIHRoaXMuaWRzKTtcbiAgICAgICAgICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1RyYW5zcG9ydFdyaXRhYmxlID0gdGhpcy5pby5lbmdpbmUgJiZcbiAgICAgICAgICAgIHRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydCAmJlxuICAgICAgICAgICAgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0LndyaXRhYmxlO1xuICAgICAgICBjb25zdCBkaXNjYXJkUGFja2V0ID0gdGhpcy5mbGFncy52b2xhdGlsZSAmJiAoIWlzVHJhbnNwb3J0V3JpdGFibGUgfHwgIXRoaXMuY29ubmVjdGVkKTtcbiAgICAgICAgaWYgKGRpc2NhcmRQYWNrZXQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiZGlzY2FyZCBwYWNrZXQgYXMgdGhlIHRyYW5zcG9ydCBpcyBub3QgY3VycmVudGx5IHdyaXRhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZsYWdzID0ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICAgICAgICB0aGlzLmlvLl9wYWNrZXQocGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZ1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmF1dGggPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGgoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGEgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQ09OTkVDVCwgZGF0YTogdGhpcy5hdXRoIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBvciBtYW5hZ2VyIGBlcnJvcmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXJyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmVycm9yKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFzb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwiY2xvc2UgKCVzKVwiLCByZWFzb24pO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRpc2Nvbm5lY3RcIiwgcmVhc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGFja2V0KHBhY2tldCkge1xuICAgICAgICBjb25zdCBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gICAgICAgIGlmICghc2FtZU5hbWVzcGFjZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuZGF0YSAmJiBwYWNrZXQuZGF0YS5zaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYWNrZXQuZGF0YS5zaWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25jb25uZWN0KGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBuZXcgRXJyb3IoXCJJdCBzZWVtcyB5b3UgYXJlIHRyeWluZyB0byByZWFjaCBhIFNvY2tldC5JTyBzZXJ2ZXIgaW4gdjIueCB3aXRoIGEgdjMueCBjbGllbnQsIGJ1dCB0aGV5IGFyZSBub3QgY29tcGF0aWJsZSAobW9yZSBpbmZvcm1hdGlvbiBoZXJlOiBodHRwczovL3NvY2tldC5pby9kb2NzL3YzL21pZ3JhdGluZy1mcm9tLTIteC10by0zLTAvKVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5FVkVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5CSU5BUllfQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOlxuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihwYWNrZXQuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZXJyLmRhdGEgPSBwYWNrZXQuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICAgICAgICBkZWJ1ZyhcImVtaXR0aW5nIGV2ZW50ICVqXCIsIGFyZ3MpO1xuICAgICAgICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudFwiKTtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goT2JqZWN0LmZyZWV6ZShhcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEV2ZW50KGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueUxpc3RlbmVycyAmJiB0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWNrKGlkKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgc2VudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHNlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VudCA9IHRydWU7XG4gICAgICAgICAgICBkZWJ1ZyhcInNlbmRpbmcgYWNrICVqXCIsIGFyZ3MpO1xuICAgICAgICAgICAgc2VsZi5wYWNrZXQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkFDSyxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uYWNrKHBhY2tldCkge1xuICAgICAgICBjb25zdCBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjaykge1xuICAgICAgICAgICAgZGVidWcoXCJjYWxsaW5nIGFjayAlcyB3aXRoICVqXCIsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYmFkIGFjayAlc1wiLCBwYWNrZXQuaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNvbm5lY3QoaWQpIHtcbiAgICAgICAgZGVidWcoXCJzb2NrZXQgY29ubmVjdGVkIHdpdGggaWQgJXNcIiwgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbWl0QnVmZmVyZWQoKSB7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5mb3JFYWNoKChhcmdzKSA9PiB0aGlzLmVtaXRFdmVudChhcmdzKSk7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaCgocGFja2V0KSA9PiB0aGlzLnBhY2tldChwYWNrZXQpKTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGRlYnVnKFwic2VydmVyIGRpc2Nvbm5lY3QgKCVzKVwiLCB0aGlzLm5zcCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBzZXJ2ZXIgZGlzY29ubmVjdFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAgICAgKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICAgICAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzKSB7XG4gICAgICAgICAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICAgICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICAgICAgdGhpcy5zdWJzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW9bXCJfZGVzdHJveVwiXSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicGVyZm9ybWluZyBkaXNjb25uZWN0ICglcylcIiwgdGhpcy5uc3ApO1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBjbGllbnQgZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGRpc2Nvbm5lY3QoKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcHJlc3MgLSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb21wcmVzcyhjb21wcmVzcykge1xuICAgICAgICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBldmVudCBtZXNzYWdlIHdpbGwgYmUgZHJvcHBlZCB3aGVuIHRoaXMgc29ja2V0IGlzIG5vdFxuICAgICAqIHJlYWR5IHRvIHNlbmQgbWVzc2FnZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCB2b2xhdGlsZSgpIHtcbiAgICAgICAgdGhpcy5mbGFncy52b2xhdGlsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb25BbnkobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suIFRoZSBsaXN0ZW5lciBpcyBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHJlcGVuZEFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG9mZkFueShsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2FueUxpc3RlbmVycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciA9PT0gbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0aGF0IGFyZSBsaXN0ZW5pbmcgZm9yIGFueSBldmVudCB0aGF0IGlzIHNwZWNpZmllZC4gVGhpcyBhcnJheSBjYW4gYmUgbWFuaXB1bGF0ZWQsXG4gICAgICogZS5nLiB0byByZW1vdmUgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGxpc3RlbmVyc0FueSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICB9XG59XG5leHBvcnRzLlNvY2tldCA9IFNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJpY3RFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuLyoqXG4gKiBTdHJpY3RseSB0eXBlZCB2ZXJzaW9uIG9mIGFuIGBFdmVudEVtaXR0ZXJgLiBBIGBUeXBlZEV2ZW50RW1pdHRlcmAgdGFrZXMgdHlwZVxuICogcGFyYW1ldGVycyBmb3IgbWFwcGluZ3Mgb2YgZXZlbnQgbmFtZXMgdG8gZXZlbnQgZGF0YSB0eXBlcywgYW5kIHN0cmljdGx5XG4gKiB0eXBlcyBtZXRob2QgY2FsbHMgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGFjY29yZGluZyB0byB0aGVzZSBldmVudCBtYXBzLlxuICpcbiAqIEB0eXBlUGFyYW0gTGlzdGVuRXZlbnRzIC0gYEV2ZW50c01hcGAgb2YgdXNlci1kZWZpbmVkIGV2ZW50cyB0aGF0IGNhbiBiZVxuICogbGlzdGVuZWQgdG8gd2l0aCBgb25gIG9yIGBvbmNlYFxuICogQHR5cGVQYXJhbSBFbWl0RXZlbnRzIC0gYEV2ZW50c01hcGAgb2YgdXNlci1kZWZpbmVkIGV2ZW50cyB0aGF0IGNhbiBiZVxuICogZW1pdHRlZCB3aXRoIGBlbWl0YFxuICogQHR5cGVQYXJhbSBSZXNlcnZlZEV2ZW50cyAtIGBFdmVudHNNYXBgIG9mIHJlc2VydmVkIGV2ZW50cywgdGhhdCBjYW4gYmVcbiAqIGVtaXR0ZWQgYnkgc29ja2V0LmlvIHdpdGggYGVtaXRSZXNlcnZlZGAsIGFuZCBjYW4gYmUgbGlzdGVuZWQgdG8gd2l0aFxuICogYGxpc3RlbmAuXG4gKi9cbmNsYXNzIFN0cmljdEV2ZW50RW1pdHRlciBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGBsaXN0ZW5lcmAgZnVuY3Rpb24gYXMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGBldmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXYgTmFtZSBvZiB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvbihldiwgbGlzdGVuZXIpIHtcbiAgICAgICAgc3VwZXIub24oZXYsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBvbmUtdGltZSBgbGlzdGVuZXJgIGZ1bmN0aW9uIGFzIGFuIGV2ZW50IGxpc3RlbmVyIGZvciBgZXZgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2IE5hbWUgb2YgdGhlIGV2ZW50XG4gICAgICogQHBhcmFtIGxpc3RlbmVyIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICovXG4gICAgb25jZShldiwgbGlzdGVuZXIpIHtcbiAgICAgICAgc3VwZXIub25jZShldiwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXYgTmFtZSBvZiB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gYXJncyBWYWx1ZXMgdG8gc2VuZCB0byBsaXN0ZW5lcnMgb2YgdGhpcyBldmVudFxuICAgICAqL1xuICAgIGVtaXQoZXYsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIuZW1pdChldiwgLi4uYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhIHJlc2VydmVkIGV2ZW50LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgYHByb3RlY3RlZGAsIHNvIHRoYXQgb25seSBhIGNsYXNzIGV4dGVuZGluZ1xuICAgICAqIGBTdHJpY3RFdmVudEVtaXR0ZXJgIGNhbiBlbWl0IGl0cyBvd24gcmVzZXJ2ZWQgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2IFJlc2VydmVkIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgdG8gZW1pdCBhbG9uZyB3aXRoIHRoZSBldmVudFxuICAgICAqL1xuICAgIGVtaXRSZXNlcnZlZChldiwgLi4uYXJncykge1xuICAgICAgICBzdXBlci5lbWl0KGV2LCAuLi5hcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYW4gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgRXZlbnQgbmFtZVxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGxpc3RlbmVycyBzdWJzY3JpYmVkIHRvIGBldmVudGBcbiAgICAgKi9cbiAgICBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxpc3RlbmVycyhldmVudCk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJpY3RFdmVudEVtaXR0ZXIgPSBTdHJpY3RFdmVudEVtaXR0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXJsID0gdm9pZCAwO1xuY29uc3QgcGFyc2V1cmkgPSByZXF1aXJlKFwicGFyc2V1cmlcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6dXJsXCIpO1xuLyoqXG4gKiBVUkwgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB1cmkgLSB1cmxcbiAqIEBwYXJhbSBwYXRoIC0gdGhlIHJlcXVlc3QgcGF0aCBvZiB0aGUgY29ubmVjdGlvblxuICogQHBhcmFtIGxvYyAtIEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1cmwodXJpLCBwYXRoID0gXCJcIiwgbG9jKSB7XG4gICAgbGV0IG9iaiA9IHVyaTtcbiAgICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICAgIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uKTtcbiAgICBpZiAobnVsbCA9PSB1cmkpXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0O1xuICAgIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgdXJpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicHJvdG9jb2wtbGVzcyB1cmwgJXNcIiwgdXJpKTtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gXCJodHRwczovL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlXG4gICAgICAgIGRlYnVnKFwicGFyc2UgJXNcIiwgdXJpKTtcbiAgICAgICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gICAgaWYgKCFvYmoucG9ydCkge1xuICAgICAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI4MFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjQ0M1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9iai5wYXRoID0gb2JqLnBhdGggfHwgXCIvXCI7XG4gICAgY29uc3QgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICBjb25zdCBob3N0ID0gaXB2NiA/IFwiW1wiICsgb2JqLmhvc3QgKyBcIl1cIiA6IG9iai5ob3N0O1xuICAgIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyBcIjovL1wiICsgaG9zdCArIFwiOlwiICsgb2JqLnBvcnQgKyBwYXRoO1xuICAgIC8vIGRlZmluZSBocmVmXG4gICAgb2JqLmhyZWYgPVxuICAgICAgICBvYmoucHJvdG9jb2wgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICBob3N0ICtcbiAgICAgICAgICAgIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gXCJcIiA6IFwiOlwiICsgb2JqLnBvcnQpO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnRzLnVybCA9IHVybDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwMzkpO1xuIl0sIm5hbWVzIjpbIkJhY2tvZmYiLCJvcHRzIiwidGhpcyIsIm1zIiwibWluIiwibWF4IiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwiZHVyYXRpb24iLCJNYXRoIiwicG93IiwicmFuZCIsInJhbmRvbSIsImRldmlhdGlvbiIsImZsb29yIiwicmVzZXQiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiLCJjaGFycyIsImVuY29kZSIsImFycmF5YnVmZmVyIiwiaSIsImJ5dGVzIiwiVWludDhBcnJheSIsImxlbiIsImxlbmd0aCIsImJhc2U2NCIsInN1YnN0cmluZyIsImRlY29kZSIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwicCIsIkFycmF5QnVmZmVyIiwiaW5kZXhPZiIsIkVtaXR0ZXIiLCJvYmoiLCJrZXkiLCJtaXhpbiIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZm4iLCJfY2FsbGJhY2tzIiwicHVzaCIsIm9uY2UiLCJvZmYiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNiIiwiY2FsbGJhY2tzIiwic3BsaWNlIiwiZW1pdCIsImFyZ3MiLCJBcnJheSIsInNsaWNlIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwicyIsIm0iLCJoIiwiZCIsInBsdXJhbCIsIm1zQWJzIiwibiIsIm5hbWUiLCJpc1BsdXJhbCIsInJvdW5kIiwidmFsIiwib3B0aW9ucyIsInR5cGUiLCJzdHIiLCJTdHJpbmciLCJtYXRjaCIsImV4ZWMiLCJwYXJzZUZsb2F0IiwidG9Mb3dlckNhc2UiLCJwYXJzZSIsImlzRmluaXRlIiwibG9uZyIsImFicyIsImZtdFNob3J0IiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybWF0QXJncyIsInVzZUNvbG9ycyIsIm5hbWVzcGFjZSIsImh1bWFuaXplIiwiZGlmZiIsImMiLCJjb2xvciIsImluZGV4IiwibGFzdEMiLCJyZXBsYWNlIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlcnJvciIsImxvYWQiLCJyIiwiZ2V0SXRlbSIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsIndpbmRvdyIsIl9fbndqcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiY29uc29sZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiUmVnRXhwIiwiJDEiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJkZXN0cm95Iiwid2FybmVkIiwid2FybiIsImNvbG9ycyIsImxvZyIsImRlYnVnIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwibWVzc2FnZSIsImNyZWF0ZURlYnVnIiwicHJldlRpbWUiLCJuYW1lc3BhY2VzQ2FjaGUiLCJlbmFibGVkQ2FjaGUiLCJlbmFibGVPdmVycmlkZSIsImVuYWJsZWQiLCJzZWxmIiwiY3VyciIsIk51bWJlciIsIkRhdGUiLCJwcmV2IiwiY29lcmNlIiwidW5zaGlmdCIsImZvcm1hdCIsImZvcm1hdHRlciIsImNhbGwiLCJzZWxlY3RDb2xvciIsImV4dGVuZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldCIsInNldCIsImluaXQiLCJkZWxpbWl0ZXIiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwicmVnZXhwIiwidG9TdHJpbmciLCJkZWZhdWx0Iiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJtYXAiLCJza2lwcyIsImpvaW4iLCJlbmFibGUiLCJzcGxpdCIsInN1YnN0ciIsInRlc3QiLCJrZXlzIiwiZm9yRWFjaCIsImhhc2giLCJjaGFyQ29kZUF0IiwiRnVuY3Rpb24iLCJTb2NrZXQiLCJ1cmkiLCJwcm90b2NvbCIsIlRyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJwYXJzZXIiLCJwYXJzZXVyaSIsInBhcnNlcXMiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiaG9zdG5hbWUiLCJob3N0Iiwic2VjdXJlIiwicG9ydCIsInF1ZXJ5IiwibG9jYXRpb24iLCJyZWFkeVN0YXRlIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwiYXNzaWduIiwicGF0aCIsImFnZW50Iiwid2l0aENyZWRlbnRpYWxzIiwidXBncmFkZSIsImpzb25wIiwidGltZXN0YW1wUGFyYW0iLCJyZW1lbWJlclVwZ3JhZGUiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInRyYW5zcG9ydE9wdGlvbnMiLCJjbG9zZU9uQmVmb3JldW5sb2FkIiwiaWQiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ1RpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsImNsb3NlIiwib2ZmbGluZUV2ZW50TGlzdGVuZXIiLCJvbkNsb3NlIiwib3BlbiIsImNyZWF0ZVRyYW5zcG9ydCIsIm8iLCJoYXNPd25Qcm9wZXJ0eSIsImNsb25lIiwiRUlPIiwic2lkIiwic29ja2V0IiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwic2V0VGltZW91dCIsImUiLCJzaGlmdCIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJiaW5kIiwib25QYWNrZXQiLCJvbkVycm9yIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJzZW5kIiwiZGF0YSIsIm1zZyIsInVwZ3JhZGluZyIsInBhdXNlIiwiY2xlYW51cCIsImZsdXNoIiwiZXJyIiwiZnJlZXplVHJhbnNwb3J0Iiwib25lcnJvciIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbmNsb3NlIiwib251cGdyYWRlIiwidG8iLCJvbk9wZW4iLCJsIiwicGFja2V0Iiwib25IYW5kc2hha2UiLCJyZXNldFBpbmdUaW1lb3V0Iiwic2VuZFBhY2tldCIsImNvZGUiLCJmaWx0ZXJVcGdyYWRlcyIsImNsZWFyVGltZW91dCIsImF1dG9VbnJlZiIsInVucmVmIiwid3JpdGFibGUiLCJ3cml0ZSIsInVuZGVmaW5lZCIsImNvbXByZXNzIiwiY2xlYW51cEFuZENsb3NlIiwid2FpdEZvclVwZ3JhZGUiLCJyZWFzb24iLCJkZXNjIiwicGluZ0ludGVydmFsVGltZXIiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwiZGVzY3JpcHRpb24iLCJkb09wZW4iLCJkb0Nsb3NlIiwicGFja2V0cyIsIm9uRGF0YSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJYTUxIdHRwUmVxdWVzdCIsIlhIUiIsIkpTT05QIiwid2Vic29ja2V0IiwicG9sbGluZyIsInhociIsInhkIiwieHMiLCJpc1NTTCIsInhkb21haW4iLCJ4c2NoZW1lIiwiZm9yY2VKU09OUCIsIlBvbGxpbmciLCJnbG9iYWxUaGlzIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJfX19laW8iLCJzY3JpcHQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmb3JtIiwiaWZyYW1lIiwiZG9Qb2xsIiwiY3JlYXRlRWxlbWVudCIsImFzeW5jIiwic3JjIiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJkb1dyaXRlIiwiYXJlYSIsImlmcmFtZUlkIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwidGFyZ2V0IiwibWV0aG9kIiwic2V0QXR0cmlidXRlIiwiY29tcGxldGUiLCJpbml0SWZyYW1lIiwiYWN0aW9uIiwiaHRtbCIsInZhbHVlIiwic3VibWl0IiwiYXR0YWNoRXZlbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbmxvYWQiLCJwaWNrIiwiZW1wdHkiLCJoYXNYSFIyIiwicmVzcG9uc2VUeXBlIiwiUmVxdWVzdCIsImNyZWF0ZSIsImV4dHJhSGVhZGVycyIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJyZXF1ZXN0VGltZW91dCIsInRpbWVvdXQiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJvblN1Y2Nlc3MiLCJmcm9tRXJyb3IiLCJhYm9ydCIsIlhEb21haW5SZXF1ZXN0IiwiZW5hYmxlc1hEUiIsInVubG9hZEhhbmRsZXIiLCJmb3JjZUJhc2U2NCIsInN1cHBvcnRzQmluYXJ5IiwicmVxdWVzdCIsInJlcSIsInBvbGxYaHIiLCJ5ZWFzdCIsInBvbGwiLCJvblBhdXNlIiwidG90YWwiLCJkZWNvZGVQYXlsb2FkIiwiZW5jb2RlUGF5bG9hZCIsInNjaGVtYSIsInRpbWVzdGFtcFJlcXVlc3RzIiwiYjY0IiwibmV4dFRpY2siLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJkZWZhdWx0QmluYXJ5VHlwZSIsImlzUmVhY3ROYXRpdmUiLCJwcm9kdWN0IiwiV1MiLCJjaGVjayIsInByb3RvY29scyIsImhlYWRlcnMiLCJ3cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25vcGVuIiwiX3NvY2tldCIsIm9ubWVzc2FnZSIsImV2IiwibGFzdFBhY2tldCIsImVuY29kZVBhY2tldCIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJhdHRyIiwicmVkdWNlIiwiYWNjIiwiayIsImhhc0NPUlMiLCJjb25jYXQiLCJQQUNLRVRfVFlQRVMiLCJQQUNLRVRfVFlQRVNfUkVWRVJTRSIsIkVSUk9SX1BBQ0tFVCIsImJhc2U2NGRlY29kZXIiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJkZWNvZGVkIiwibWFwQmluYXJ5IiwiQmxvYiIsImVuY29kZWRQYWNrZXQiLCJjaGFyQXQiLCJ3aXRoTmF0aXZlQmxvYiIsIndpdGhOYXRpdmVBcnJheUJ1ZmZlciIsImVuY29kZUJsb2JBc0Jhc2U2NCIsImNhbGxiYWNrIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJjb250ZW50IiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsImlzVmlldyIsImJ1ZmZlciIsIlNFUEFSQVRPUiIsImZyb21DaGFyQ29kZSIsImVuY29kZWRQYWNrZXRzIiwiY291bnQiLCJlbmNvZGVkUGF5bG9hZCIsImRlY29kZWRQYWNrZXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlIiwicGFydHMiLCJiIiwic291cmNlIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsInBhdGhOYW1lcyIsInF1ZXJ5S2V5IiwiJDAiLCIkMiIsIl9kZWZpbmVQcm9wZXJ0eSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsIiQkb2JzZXJ2YWJsZSIsIlN5bWJvbCIsIm9ic2VydmFibGUiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJfcmVmMiIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJkaXNwYXRjaCIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCJ1bnN1YnNjcmliZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFyZyIsImEiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsInJlY29uc3RydWN0UGFja2V0IiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJpc19iaW5hcnlfMSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsImJ1ZmZlcnMiLCJpc0JpbmFyeSIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibnVtIiwiaXNBcnJheSIsIm5ld0RhdGEiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrZXREYXRhIiwicGFjayIsImF0dGFjaG1lbnRzIiwiRGVjb2RlciIsIkVuY29kZXIiLCJQYWNrZXRUeXBlIiwiYmluYXJ5XzEiLCJFVkVOVCIsIkFDSyIsImhhc0JpbmFyeSIsImVuY29kZUFzU3RyaW5nIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsImVuY29kZUFzQmluYXJ5IiwibnNwIiwiZGVjb25zdHJ1Y3Rpb24iLCJhZGQiLCJkZWNvZGVTdHJpbmciLCJyZWNvbnN0cnVjdG9yIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInRha2VCaW5hcnlEYXRhIiwic3RhcnQiLCJidWYiLCJwYXlsb2FkIiwidHJ5UGFyc2UiLCJpc1BheWxvYWRWYWxpZCIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiQ09OTkVDVF9FUlJPUiIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJyZWNvblBhY2siLCJiaW5EYXRhIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwidG9KU09OIiwiYWxwaGFiZXQiLCJzZWVkIiwiZW5jb2RlZCIsIm5vdyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiV3MiLCJ3ZWJXb3JrZXIiLCJzdG9yZXMiLCJpb3MiLCJtZXRob2RzIiwicHVibGljQ2FsbGJhY2tzIiwidXNlIiwidHVuZSIsInR1bmVkIiwidW50dW5lIiwiZXhlIiwib25SZXNwb25zZU1lQVBJIiwib2ZmUmVzcG9uc2VDaEFQSSIsImV4ZUNhbGxiYWNrIiwicG9zdE1lc3NhZ2UiLCJpb1R5cGUiLCJBUElfU0VUVVAiLCJERVZFTE9QTUVOVCIsIkxPQ0FMSE9TVCIsIkRFVkVMT1BNRU5UX0RPTUFJTiIsIlBST0RVQ1RJT05fRE9NQUlOIiwiZm9yY2VOZXciLCJwYXJhbXMiLCJvblJlc3BvbnNlQ2hBUEkiLCJjaCIsImFjdGlvbk1ldGhvZCIsInJlc3BvbnNlIiwiYWN0aW9uU3RhdGUiLCJnZXRSZXNwb25zZUNoQVBJIiwiZ2V0SW9QYXJhbXMiLCJib290T3B0aW9uIiwiYXBpU3RhdGUiLCJpb1BhcmFtcyIsImVuZHBvaW50IiwiSFRUUFNfUFJPVE9DT0wiLCJzZXJ2ZXIiLCJQT1JUUyIsIlNPQ0tFVF9JTyIsIm9wdGlvbiIsIm9uUmVxdWVzdEFQSSIsImFjdGlvbnMiLCJhY3Rpb25LZXlzIiwiYWN0aW9uTGVuZ3RoIiwiZ2V0Q29yZUFQSSIsImFjdGlvbk5hbWUiLCJiZWZvcmVGdW5jdGlvbiIsInJlcXVlc3RQYXJhbXMiLCJyZWR1eFN0YXRlIiwiX3JlcXVlc3RTdGF0ZSIsImdldFJlcXVlc3RTdGF0ZSIsIl9hY3Rpb25TdGF0ZSIsImdldFJlcXVlc3RBY3Rpb25TdGF0ZSIsInJlcXVlc3RTdGF0ZSIsImFjdGlvbk5vZGVDbnQiLCJhY3Rpb25QbGFpbk5hbWUiLCJBUElfVE9fU0VSVkVSX1JFUVVFU1QiLCJnZXRUb01lQVBJIiwiQ0FUQ0hfTUVfS0VZIiwib25LZXkiLCJvZmZLZXkiLCJjb252ZXJ0U2VydmVyVG9BcGlJb1R5cGUiLCJhcHAiLCJhY3Rpb25lZCIsImFjdGlvblR5cGUiLCJnZXRTZXF1ZW5jZUFjdGlvbk1hcCIsIkFQSV9CUk9BRENBU1RfQ0FMTEJBQ0siLCJBUElfUkVTUE9OU0VfVFlQRV9FTUlUIiwicG9zdHMiLCJ0aHJlYWQiLCJ1c2VyIiwidWlkIiwiQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUIiwiZW1vdGlvbnMiLCJiZWZvcmVGdW5jdGlvbnMiLCJwb3N0IiwiaXNNZWRpYUNoIiwiY3VycmVudFRpbWUiLCJpbnB1dEN1cnJlbnRUaW1lIiwidGFsa25NZWRpYSIsImlucHV0U3RhbXBJZCIsImJhbGFuY2VzIiwiYmFsYW5jZUtleSIsImJhbGFuY2UiLCJ0eXBlSWQiLCJ0eXBlTGFiZWwiLCJpZEtleVR5cGVzIiwiU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QiLCJTRVJWRVJfVE9fQVBJX0VNSVQiLCJpbml0aWFsU3RhdGUiLCJ1cGRhdGVBY3Rpb24iLCJzZXRTdG9yYWdlSHRtbFBvc3RzIiwicHJvcHMiLCJzdG9yYWdlS2V5IiwiaXNSb290Q2giLCJwb3N0c011bHRpIiwicG9zdHNTaW5nbGUiLCJzZXRTdG9yYWdlUG9zdHNUaW1lbGluZSIsInBvc3RzVGltZWxpbmUiLCJwb3N0c1RpbWVsaW5lQWxsIiwicG9zdHNUaW1lbGluZUFsbExlbmd0aCIsInBvc3RzVGltZWxpbmVaZXJvU2Vjb25kIiwicm9vdENoIiwiZGlzcFRocmVhZFR5cGUiLCJkaXNwVGhyZWFkVHlwZU11bHRpIiwicG9zdFNpbmdsZSIsInBvc3RNdWx0aSIsInNldFN0b3JhZ2VQb3N0cyIsImZ1bmN0aW9ucyIsIm9mZnNldEZpbmRJZCIsImRldGFpbENoIiwiZ2V0SXNNZWRpYUNoIiwiaXNUb2dnbGVNdWx0aXN0cmVhbSIsInNlcnZlck1ldGFzIiwiaGFzU2xhc2giLCJnZXRCb29sIiwidGhyZWFkcyIsImdldE1lcmdlZFRocmVhZHMiLCJ0aHJlYWREZXRhaWwiLCJyb290VGl0bGUiLCJnZXRNZWRpYVNyYyIsImNoVHlwZSIsImdldE1lZGlhVHlwZUZyb21TcmMiLCJtZWRpYVRhZ1R5cGVObyIsImdldEFueUFjdGlvblBvc3RzIiwiZ2V0T2Zmc2V0RmluZElkIiwiZGVmYXVsdE9mZnNldEZpbmRJZCIsIm9mZnNldFRpbWVsaW5lRmluZElkIiwib2Zmc2V0TXVsdGlGaW5kSWQiLCJvZmZzZXRTaW5nbGVGaW5kSWQiLCJvZmZzZXRDaGlsZEZpbmRJZCIsIm9mZnNldExvZ3NGaW5kSWQiLCJwb3N0c0NoaWxkIiwiYWN0aW9uRW1vdGlvbnMiLCJlbW90aW9uTW9kZWxLZXkiLCJlbW90aW9uS2V5IiwiaXNMaW5rQ2giLCJmaW5kVHlwZSIsImdldEZpbmRUeXBlRnJvbVNyYyIsInVpIiwibWVudUNvbXBvbmVudCIsInVwZGF0ZUZsZyIsImNsaWVudE1ldGFzIiwiYW5hbHl6ZSIsIm1lcmdlIiwicmVkdWNlckZpbGVzIiwidHVuZUNoIiwicmFua3MiLCJzZXR0aW5nIiwicG9zdHNUaW1lbGluZVN0b2NrIiwicG9zdHNUaW1lbGluZVplcm8iLCJwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIiwibW9yZVBvc3RNdWxpdCIsImZpbmRPbmVMaW1pdENudCIsInB0IiwiZGlzcEZsZyIsIm1lZGlhQ3VycmVudFRpbWUiLCJwb3N0TGVuZ3RoIiwic29ydFdhdGNoQ250IiwibGl2ZUNudCIsImdldERpc3BQb3N0cyIsInJhbmsiLCJmYXZpY29uIiwic3RhbXBJZCIsInNvcnQiLCJuZXdSYW5rcyIsInJhbmtDbnQiLCJsYXN0UG9zdCIsIm5ld1JhbmsiLCJ1cGRhdGVUaW1lIiwiZmFpY29uIiwiQW5hbHl6ZSIsIkFwcCIsImRlZmF1bHRGaW5kSWQiLCJpc1NldCIsImdldE1lZGlhVHlwZSIsImdldERpc3BUaHJlYWRUeXBlIiwibXVsdGlzdHJlYW0iLCJmaW5kVHlwZUFsbCIsImlucHV0UG9zdCIsImlucHV0U2VhcmNoIiwibWVkaWFUeXBlTXAzIiwibWVkaWFUeXBlTXA0IiwibWVkaWFUeXBlTTRhIiwibWVkaWFUYWdUeXBlQXVkaW8iLCJtZWRpYVRhZ1R5cGVWaWRlbyIsIm1lZGlhQ2hUYWdUeXBlS2V5cyIsIm1lZGlhQ2hUYWdUeXBlcyIsIm1lZGlhQ2hUYWdUeXBlTGVuZ3RoIiwibWVkaWFUeXBlIiwicmVnRXhwIiwiaW5uZXJXaWR0aCIsIndpZHRoIiwiaW5uZXJIZWlnaHQiLCJjb250ZW50VHlwZSIsImlzQXVkaW9Db250ZW50VHlwZSIsImlzVmlkZW9Db250ZW50VHlwZSIsIm1lZGlhQ2hzIiwic29tZSIsImV4dCIsImRpc3BUaHJlYWRUeXBlVGltZWxpbmUiLCJfaWQiLCJ0aHJlYWRTdGF0dXMiLCJ0b0NoIiwiY2xpY2tlZCIsImFmdGVyRGlzcFRocmVhZFR5cGUiLCJiZWZvcmVEaXNwVGhyZWFkVHlwZSIsImdldFN0ZXBEaXNwVGhyZWFkVHlwZSIsInN0ZXBUbyIsInVwZGF0ZWRBcHAiLCJtaSIsImRpc3BUaHJlYWRUeXBlQ2hpbGQiLCJkaXNwVGhyZWFkVHlwZVNpbmdsZSIsIkJvb3RPcHRpb24iLCJhdHRyaWJ1dGVzIiwicmVidWlsZEF0dHJpYnV0ZXNPYmoiLCJNZW51TG9ncyIsIlBvc3QiLCJkZWZhdWx0VmFsdWVzIiwiY2hzIiwibGF5ZXIiLCJ1dHlwZSIsImNyZWF0ZVRpbWUiLCJ2YWx1ZXMiLCJkZWZhdWx0RmF2aWNvbiIsIlBvc3RzIiwicG9zdHNMb2dzIiwiZGlzcFRocmVhZFR5cGVMb2dzIiwiZXhpc3RQb3N0cyIsImdldEFueUFjdGlvblBvc3RzVGltZWxpbmUiLCJwb3N0c0xlbmd0aCIsIlNldHRpbmciLCJjbGllbnQiLCJjb21tb24iLCJUaHJlYWQiLCJUQUxLTl9QUk9UT0NPTCIsImNoYXJzZXQiLCJnZXREZWZhdWx0RmF2aWNvbiIsImdldERlZmF1bHRUaXRsZSIsIm1ldGFzIiwibGlua3MiLCJoMXMiLCJhdWRpb3MiLCJ2aWRlb3MiLCJnZXRMYXllciIsIm1lZGlhSW5kZXgiLCJwb3N0Q250IiwibXVsdGlQb3N0Q250IiwiaXNTZWxmQ2giLCJpc1dpbmRvd09iaiIsImNvbnN0cnVjdG9yRnJvbVdpbmRvdyIsImZpbmRUeXBlSHRtbCIsImZpbmRUeXBlTXVzaWMiLCJmaW5kVHlwZVZpZGVvIiwiYWxlcnQiLCJib290Q2giLCJnZXRDaCIsImhhc3NsYXNoIiwiZ2V0UHJvdG9jb2wiLCJnZXRIb3N0IiwiZ2V0Q2hzIiwiZ2V0RmF2aWNvbkZyb21XaW5kb3ciLCJnZXRJc1NlbGZDaCIsIl9jaCIsImNoQXJyIiwiY2hMZW5ndGgiLCJuZXdDaCIsImRvbWFpbiIsImhyZWYiLCJ1IiwiZXZhbHVhdGUiLCJzdHJpbmdWYWx1ZSIsImhzIiwidXJsIiwiaXNFeGlzdCIsImRpc3BUeXBlIiwiaXNDcmVhdGUiLCJpc1JlcXVpcmVVcHNlcnQiLCJpc011bHRpc3RyZWFtIiwiZ2V0TW9yZSIsImdldFN0YXR1c0NyZWF0ZSIsImdldFN0YXR1c0lzUmVxdWlyZVVwc2VydCIsImdldFN0YXR1c0lzTXVsdGlzdHJlYW0iLCJnZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtIiwiZ2V0U3RhdHVzSXNNZWRpYUNoIiwidGhyZWFkVXBkYXRlVGltZSIsImdldFRpbWUiLCJub3dZZWFyIiwiZ2V0RnVsbFllYXIiLCJub3dNb250aCIsImdldE1vbnRoIiwibm93RGF5IiwiZ2V0RGF0ZSIsIm5vd0hvdXIiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJmaW5kT25lVGhyZWFkQWN0aXZlSG91ciIsImZpbmRUeXBlcyIsInNwbGl0ZWRDb250ZW50VHlwZSIsImluY2x1ZGVzIiwidG9VcHBlckNhc2UiLCJUaHJlYWRzIiwiYmFzZVRocmVhZHMiLCJtZXJnZVRocmVhZCIsIlVzZXIiLCJtdWx0aXN0cmVhbWVkIiwicmVxdWVzdExvZ2luVHlwZSIsImZyaWVuZHMiLCJBcGlTdGF0ZSIsImNhY2hlcyIsIm1lbnVMb2dzIiwiZ2V0QXBwUGFyYW1zIiwiZ2V0VXNlclBhcmFtcyIsImFjdGlvbkxvZyIsImlzVHJhbnNpdGlvbiIsIldzQXBpV29ya2VyIiwid29ya2VyIiwib25NZXNzYWdlIiwib25NZXNzYWdlRXJyb3IiLCJtZXRob2RCYWNrIiwiV1NBUElfVE9fQ0xJRU5UX1RZUEUiLCJDTElFTlRfVE9fV1NBUElfVFlQRSIsIkFQSV9UT19DTElFTlRfUkVRVUVTVCIsIkFQSV9UT19DTElFTlRfRU1JVCIsIkFQSV9UT19DTElFTlRfQlJPQURDQVNUIiwic3BsaXRlZDEiLCJleGVNZXRob2QiLCJIYW5kbGVNZXNzYWdlTWV0aG9kIiwiSGFuZGxlUmVxdWVzdE1ldGhvZCIsIlNjaGVtYSIsImdldFR5cGUiLCJmblN0cmluZyIsImRlZiIsImlzQWNjZXB0TnVsbCIsImlzQWNjZXB0QmxhbmsiLCJ2YWxpZCIsImlzRW1wdHlPYmplY3QiLCJ2YWxpZEZ1bmMiLCJfdmFsdWUiLCJwb2ludGVyIiwidmFsaWRWYWx1ZSIsInZhbGlkVHlwZSIsInBhcmFtc1ZhbHVlIiwicGFyYW1zVHlwZSIsInZhbGlkUmVzdWx0IiwidmFsaWRXYXJuIiwiZXJyb3JUaHJvdyIsImNhblNldCIsImN1cnJlbnRWYWx1ZSIsImltbXV0YWJsZSIsIm9iaktleXMiLCJtZXJnZWRPYmoiLCJqc29uT2JqIiwiZnVuYyIsInJldHVybkltbXV0YWJsZSIsImZpbmQiLCJnZXRTaGlmdCIsInJlc3VsdHMiLCJwb3AiLCJTZXF1ZW5jZSIsIkFQSV9SRVFVRVNUX1RZUEUiLCJNRVRIT0RfQ09MT04iLCJyZXF1ZXN0UHVibGljU3RhdGUiLCJyZXF1ZXN0UHJpdmF0ZVN0YXRlIiwicmVzcG9uc2VFbWl0U3RhdGUiLCJyZXNwb25zZUJyb2FkY2FzdFN0YXRlIiwiZmV0Y2hQb3N0cyIsInVwZGF0ZVRocmVhZCIsImNoYW5nZVRocmVhZCIsImNoYW5nZVRocmVhZERldGFpbCIsImFkZEZpbmRDaGlsZCIsInVwZGF0ZVRocmVhZFNlcnZlck1ldGFzIiwiZGlzY29ubmVjdCIsInNwbGl0ZWQiLCJzZXF1ZW5jZSIsImFjdGl2ZVJlc3BvbnNlTWFwIiwiYnJvYWRjYXN0IiwiaUZyYW1lSWQiLCJBUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVCIsIkFQSV9TRVBBUkFURV9JT19UWVBFX0VORCIsImNvbnZlcnRBcGlUb0NsaWVudEFjdGlvblR5cGUiLCJlbmRwb2ludEtleSIsIlJFRFVYX0FDVElPTl9LRVkiLCJzdGF0ZUtleSIsImNvbHVtbk5hbWUiLCJ1cGRhdGVTdGF0ZSIsInJlc3BvbnNlU2NoZW1hIiwicmVzcG9uc2VTdGF0ZSIsInVwZGF0ZVN0YXRlS2V5IiwiY29sdW1uTmFtZXMiLCJ1cGRhdGVTdGF0ZVZhbHVlIiwiX192IiwicmVxdWVzdFBhcmFtczEiLCJyZXF1ZXN0UGFyYW1zMiIsIlBST0RVQ1RJT04iLCJTVUJfRE9NQUlOUyIsImhvc3ROYW1lIiwiREVWRUxPUE1FTlRfQ0xJRU5UIiwiREVWRUxPUE1FTlRfQVBJIiwiREVWRUxPUE1FTlRfVE9QIiwiQVdTX0hPU1RfS0VZIiwiZ2V0RW52IiwiZmlsZXMiLCJhcGkiLCJ3c1dvcmtlciIsImlzRGV2Iiwid3d3VVJMIiwiV1dXIiwiYXBpVVJMIiwiQVBJIiwiYXBpQWNjZXNzVVJMIiwiY2xpZW50VVJMIiwiQ0xJRU5UIiwiZGVzY1VSTCIsIkRFU0MiLCJwb3J0YWxVUkwiLCJQT1JUQUwiLCJhc3NldHNVUkwiLCJBU1NFVFMiLCJhc3NldHNJbWdQYXRoIiwiY29uZiIsImF1dG9VUkwiLCJBVVRPIiwiZXh0VVJMIiwiRVhUIiwib3duVVJMIiwiT1dOIiwibmV3c1VSTCIsIk5FV1MiLCJiYW5uZXJVUkwiLCJCQU5ORVIiLCJ0cmFuc2FjdGlvblVSTCIsIlRSQU5TQUNUSU9OIiwiYXNzZXRzSWNvblBhdGgiLCJhc3NldHNKc1BhdGgiLCJzZXNzaW9uVVJMIiwiU0VTU0lPTiIsImFwaVZlciIsImxwTGFuZ3VhZ2VzIiwiZmluZE9uZVBvc3RDbnQiLCJvZ3BJbWFnZXMiLCJIdG1sIiwiTXVzaWMiLCJWaWRlbyIsImRlZmluZSIsIkFQUF9OQU1FIiwiUFJPRFVDVElPTl9JUCIsIkhPU1ROQU1FIiwiSFRUUCIsIkhUVFBTIiwiUkVESVMiLCJNT05HTyIsIkFQUF9UWVBFUyIsIkVYVEVOU0lPTiIsIlRPUCIsIlVSTCIsInR3aXR0ZXIiLCJmYWNlYm9vayIsImFwcHN0b3JlIiwicGxheXN0b3JlIiwiY2hyb21lRXh0ZW5zaW9uIiwidGFsa25DbGllbnRKcyIsInRhbGtuQXBpSnMiLCJub0lubmVyTm90aWYiLCJiYW5uZXJDbGFzcyIsImJhc2VLZXkiLCJFbW90aW9ucyIsImJlbG9uZ0NvdmVyVHlwZXMiLCJ0eXBlc0FycmF5IiwiaW5wdXRzIiwibGFiZWwiLCJUWVBFUyIsIklEIiwiTEFCRUwiLCJtb2RlbCIsInBsYWluIiwiUGxhaW4iLCJnZXRTYXZlQmFsYW5jZSIsInJ1c3NlbGwiLCJSdXNzZWxsIiwicnVzc2VsbFNpbXBsZSIsIlJ1c3NlbGxTaW1wbGUiLCJMSUtFIiwiSU5URVJFU1QiLCJESVNDT1ZFUlkiLCJTVU5OWSIsIlBFQUNFIiwiQ0hFRVIiLCJNT05FWSIsIlVOTElLRSIsIkxPVkUiLCJTVVBSSVNFIiwiRVhDSVRFIiwiSEFQUFkiLCJKT1kiLCJHTEFEIiwiU0FUSVNGQUNUSU9OIiwiQ09NRk9SVCIsIlJFTEFYIiwiVElSRUQiLCJTTEVFUFkiLCJTTEFDSyIsIkJPUklORyIsIk1FTEFOQ0hPTFkiLCJTQUQiLCJVTlBMRUFTQU5UIiwiRlJVU1RSQVRFRCIsIkRJU1NBVElTRklFRCIsIkFOR0VSIiwiV09SUlkiLCJGRUFSIiwiV09SUllfRkVBUiIsIm1vZGVsS2V5IiwiZGVmYXVsdE1vZGVsS2V5IiwidG90YWxOdW0iLCJhZGRaZXJvIiwiZ3JhcGhNYXhOdW0iLCJsaW1pdHMiLCJsaW1pdEtleXMiLCJsaW1pdExlbmd0aCIsImtleU51bSIsImVtb3Rpb25MaW1pdE51bSIsInNjaGVtYXMiLCJpbyIsIk1hbmFnZXIiLCJ1cmxfMSIsIm1hbmFnZXJfMSIsImxvb2t1cCIsImNhY2hlIiwibWFuYWdlcnMiLCJwYXJzZWQiLCJzYW1lTmFtZXNwYWNlIiwibXVsdGlwbGV4Iiwic29ja2V0X2lvX3BhcnNlcl8xIiwiY29ubmVjdCIsIm1hbmFnZXJfMiIsInNvY2tldF8xIiwiZWlvIiwib25fMSIsInR5cGVkX2V2ZW50c18xIiwiU3RyaWN0RXZlbnRFbWl0dGVyIiwibnNwcyIsInN1YnMiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsIkluZmluaXR5IiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiX3JlYWR5U3RhdGUiLCJfcGFyc2VyIiwiZW5jb2RlciIsImRlY29kZXIiLCJfYXV0b0Nvbm5lY3QiLCJhdXRvQ29ubmVjdCIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfYSIsIl9yZWNvbm5lY3Rpb25EZWxheSIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsIl9yZWNvbm5lY3RpbmciLCJyZWNvbm5lY3QiLCJlbmdpbmUiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YkRlc3Ryb3kiLCJlcnJvclN1YiIsImVtaXRSZXNlcnZlZCIsInRpbWVyIiwib25waW5nIiwib25kYXRhIiwib25kZWNvZGVkIiwiX2Rlc3Ryb3kiLCJhY3RpdmUiLCJfY2xvc2UiLCJfcGFja2V0Iiwic3ViRGVzdHJveSIsImRlbGF5Iiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiUkVTRVJWRURfRVZFTlRTIiwiZnJlZXplIiwiY29ubmVjdF9lcnJvciIsImRpc2Nvbm5lY3RpbmciLCJuZXdMaXN0ZW5lciIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiaWRzIiwiYWNrcyIsImZsYWdzIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiYXV0aCIsInN1YkV2ZW50cyIsIm9ucGFja2V0IiwiaXNUcmFuc3BvcnRXcml0YWJsZSIsInZvbGF0aWxlIiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwiZW1pdEV2ZW50IiwiX2FueUxpc3RlbmVycyIsInNlbnQiLCJlbWl0QnVmZmVyZWQiLCJvbkFueSIsInByZXBlbmRBbnkiLCJvZmZBbnkiLCJsaXN0ZW5lcnNBbnkiLCJsb2MiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsInByb3AiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=',"Worker",void 0,i.p+"ws.api.worker.js")}},477:t=>{"use strict";t.exports=function(t,e,i,l){var n=self||window;try{try{var s;try{s=new n.Blob([t])}catch(e){(s=new(n.BlobBuilder||n.WebKitBlobBuilder||n.MozBlobBuilder||n.MSBlobBuilder)).append(t),s=s.getBlob()}var a=n.URL||n.webkitURL,c=a.createObjectURL(s),g=new n[e](c,i);return a.revokeObjectURL(c),g}catch(l){return new n[e]("data:application/javascript,".concat(encodeURIComponent(t)),i)}}catch(t){if(!l)throw Error("Inline worker is not supported");return new n[e](l,i)}}}},e={};function i(l){var n=e[l];if(void 0!==n)return n.exports;var s=e[l]={exports:{}};return t[l].call(s.exports,s,s.exports,i),s.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var l in e)i.o(e,l)&&!i.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:e[l]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var l=e.getElementsByTagName("script");l.length&&(t=l[l.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i(2417)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,