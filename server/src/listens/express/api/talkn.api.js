(()=>{var I={5857:(I,g,F)=>{"use strict";function B(I,g,F){return g in I?Object.defineProperty(I,g,{value:F,enumerable:!0,configurable:!0,writable:!0}):I[g]=F,I}function C(I,g){var F=Object.keys(I);if(Object.getOwnPropertySymbols){var B=Object.getOwnPropertySymbols(I);g&&(B=B.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),F.push.apply(F,B)}return F}function c(I){for(var g=1;g<arguments.length;g++){var F=null!=arguments[g]?arguments[g]:{};g%2?C(Object(F),!0).forEach((function(g){B(I,g,F[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(F)):C(Object(F)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(F,g))}))}return I}function U(I){return"Minified Redux error #"+I+"; visit https://redux.js.org/Errors?code="+I+" for the full message or use the non-minified dev environment for full errors. "}F.r(g),F.d(g,{__DO_NOT_USE__ActionTypes:()=>l,applyMiddleware:()=>G,bindActionCreators:()=>b,combineReducers:()=>V,compose:()=>A,createStore:()=>i,legacy_createStore:()=>d});var Q="function"==typeof Symbol&&Symbol.observable||"@@observable",t=function(){return Math.random().toString(36).substring(7).split("").join(".")},l={INIT:"@@redux/INIT"+t(),REPLACE:"@@redux/REPLACE"+t(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+t()}};function s(I){if("object"!=typeof I||null===I)return!1;for(var g=I;null!==Object.getPrototypeOf(g);)g=Object.getPrototypeOf(g);return Object.getPrototypeOf(I)===g}function i(I,g,F){var B;if("function"==typeof g&&"function"==typeof F||"function"==typeof F&&"function"==typeof arguments[3])throw new Error(U(0));if("function"==typeof g&&void 0===F&&(F=g,g=void 0),void 0!==F){if("function"!=typeof F)throw new Error(U(1));return F(i)(I,g)}if("function"!=typeof I)throw new Error(U(2));var C=I,c=g,t=[],d=t,V=!1;function e(){d===t&&(d=t.slice())}function b(){if(V)throw new Error(U(3));return c}function A(I){if("function"!=typeof I)throw new Error(U(4));if(V)throw new Error(U(5));var g=!0;return e(),d.push(I),function(){if(g){if(V)throw new Error(U(6));g=!1,e();var F=d.indexOf(I);d.splice(F,1),t=null}}}function G(I){if(!s(I))throw new Error(U(7));if(void 0===I.type)throw new Error(U(8));if(V)throw new Error(U(9));try{V=!0,c=C(c,I)}finally{V=!1}for(var g=t=d,F=0;F<g.length;F++)(0,g[F])();return I}function R(I){if("function"!=typeof I)throw new Error(U(10));C=I,G({type:l.REPLACE})}function Z(){var I,g=A;return(I={subscribe:function(I){if("object"!=typeof I||null===I)throw new Error(U(11));function F(){I.next&&I.next(b())}return F(),{unsubscribe:g(F)}}})[Q]=function(){return this},I}return G({type:l.INIT}),(B={dispatch:G,subscribe:A,getState:b,replaceReducer:R})[Q]=Z,B}var d=i;function V(I){for(var g=Object.keys(I),F={},B=0;B<g.length;B++){var C=g[B];"function"==typeof I[C]&&(F[C]=I[C])}var c,Q=Object.keys(F);try{!function(I){Object.keys(I).forEach((function(g){var F=I[g];if(void 0===F(void 0,{type:l.INIT}))throw new Error(U(12));if(void 0===F(void 0,{type:l.PROBE_UNKNOWN_ACTION()}))throw new Error(U(13))}))}(F)}catch(I){c=I}return function(I,g){if(void 0===I&&(I={}),c)throw c;for(var B=!1,C={},t=0;t<Q.length;t++){var l=Q[t],s=F[l],i=I[l],d=s(i,g);if(void 0===d)throw g&&g.type,new Error(U(14));C[l]=d,B=B||d!==i}return(B=B||Q.length!==Object.keys(I).length)?C:I}}function e(I,g){return function(){return g(I.apply(this,arguments))}}function b(I,g){if("function"==typeof I)return e(I,g);if("object"!=typeof I||null===I)throw new Error(U(16));var F={};for(var B in I){var C=I[B];"function"==typeof C&&(F[B]=e(C,g))}return F}function A(){for(var I=arguments.length,g=new Array(I),F=0;F<I;F++)g[F]=arguments[F];return 0===g.length?function(I){return I}:1===g.length?g[0]:g.reduce((function(I,g){return function(){return I(g.apply(void 0,arguments))}}))}function G(){for(var I=arguments.length,g=new Array(I),F=0;F<I;F++)g[F]=arguments[F];return function(I){return function(){var F=I.apply(void 0,arguments),B=function(){throw new Error(U(15))},C={getState:F.getState,dispatch:function(){return B.apply(void 0,arguments)}},Q=g.map((function(I){return I(C)}));return B=A.apply(void 0,Q)(F.dispatch),c(c({},F),{},{dispatch:B})}}}},8200:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7771)),c=B(F(300)),U=B(F(1665)),Q="talkn_banner_live_cnt";g.default=I=>{document.querySelectorAll(`.${U.default.bannerClass}`).forEach((g=>{if(!g.querySelector("a img")){const B=g.getAttribute("data-href");if(B){(F=g).style.display="flex",F.style["justify-content"]="flex-start",F.style["align-items"]="flex-start",F.style.width="64px",F.style.height="64px",g=F;const t=(I=>{if(!I||""===I)return"/";const g=I.replace("https:/","").replace("http:/",""),F=g.endsWith("/")?g:g+"/";return F.startsWith("/")?F:"/"+F})(B),l=(I=>{let g=document.createElement("a");return g.href=`//${c.default.domain}${I}`,g.style.display="inline-block",g=(I=>(I.style.display="inline-flex",I.style.width="inherit",I.style.height="inherit",I.style["justify-content"]="center",I.style["align-items"]="center",I))(g),g})(t),s=(()=>{let I=document.createElement("span");return I.innerText="0",I.className=Q,I=(I=>{const g="28px";return I.style.display="flex",I.style["justify-content"]="center",I.style["align-items"]="center",I.style.position="relative",I.style.right="17px",I.style.border="1px solid rgba(255,255,255,1)",I.style["border-radius"]=g,I.style.background="rgba(79, 174, 159, 0.6)",I.style.margin="0",I.style.padding="0",I.style.width=g,I.style.height=g,I.style["min-width"]=g,I.style["min-height"]=g,I.style["max-width"]=g,I.style["max-height"]=g,I.style["text-align"]="center",I.style["font-size"]="13px",I.style["font-weight"]="300",I.style["line-height"]="10px",I.style["letter-spacing"]="0",I.style.color="rgb(255, 255, 255)",I})(I),I})(),i=(()=>{let I=document.createElement("img");return I.src=`//${c.default.assetsImgPath}logo128.png`,I=(I=>(I.style.display="inline-block",I.style.width="58px",I.style.height="58px",I))(I),I})();l.append(i),g.append(l),g.append(s),((I,g,F)=>{const B=`${U.default.bannerClass}: ${g}`;I.tune({ch:g,id:B},((I,g,B)=>{((I,g,F,B,c)=>{F===C.default.API_RESPONSE_TYPE_BROADCAST&&document.querySelectorAll(`.${U.default.bannerClass}[data-href="${g}"]`).forEach((I=>{I.querySelector(`.${Q}`).innerHTML=c.thread.liveCnt}))})(0,F,I,0,B)}))})(I,t,B)}}var F}))}},2874:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7509)),c=B(F(6552)),U=B(F(1223)),Q=B(F(7771)),t=B(F(7156)),l=B(F(1665)),s=B(F(8527)),i=B(F(4546));class d{constructor(I){this.id=l.default.APP_TYPES.API,this.store=(0,i.default)(),this.parentHref=location.href,t.default.setupMath(),this.id=I,this.bootOption=new c.default(this.id);const g={...new s.default(this.bootOption)};this.store.dispatch({...g,type:"INIT_CLIENT"}),this.api=this.api.bind(this),this.injectStateToApp=this.injectStateToApp.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise((I=>{this.conned=I,this.wsApi=new C.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage}))}api(I,g={},F){I===d.SET_CALLBACK_METHOD&&F&&(this.callback=F),this.postMessage(I,g)}injectStateToApp(I){this.api("fetchPosts",I),this.api("rank",I)}postMessage(I,g={}){const F={id:g.id?g.id:this.id,type:U.default.CLIENT_TO_WSAPI_TYPE,ioType:Q.default.API_SETUP,method:I,params:g};this.wsApi.postMessage(F)}onMessage(I){const{currentTarget:g,data:F}=I,{type:B,method:C,ioType:c,params:Q,methodBack:t}=F;if(g instanceof Worker&&B===U.default.WSAPI_TO_CLIENT_TYPE){const I=U.default.convertApiToClientActionType(C),{ioType:g,exeMethod:F}=U.default.getMessageTypes(I),B={...Q,type:I};if(this.exePublicCallback(g,F,B),"WS_CONSTRUCTED"===C&&(this.conned(this),this.id===l.default.APP_TYPES.CLIENT)){const I=Q.ch?{...this.bootOption,ch:Q.ch}:this.bootOption;this.api("tune",I)}this.id!==l.default.APP_TYPES.PORTAL&&this.id!==l.default.APP_TYPES.EXTENSION||"SERVER_TO_API[EMIT]:tune"===C&&this.injectStateToApp(Q)}}onError(I){console.warn(I)}exePublicCallback(I,g,F){this.callback&&(I!==Q.default.API_RESPONSE_TYPE_EMIT&&I!==Q.default.API_RESPONSE_TYPE_BROADCAST||this.callback(I,g,F))}}g.default=d},7536:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1665)),c=B(F(6926));function U(I,g){const{app:F}=I,{storageKey:B}=C.default;if(F.isRootCh){const{postsMulti:g,postsSingle:F}=I}return{state:I,props:g}}function Q(I){const{app:g,thread:F,postsTimeline:B}=I,{storageKey:c}=C.default;if(g.isMediaCh){const g=B&&B.length?B.length:0;let F=[],C=[];for(let I=0;I<g;I++)0===B[I].currentTime?F.push(B[I]):C.push(B[I]);I.postsTimeline=F}return I}g.default={"SERVER_TO_API[BROADCAST]:post":U,"SERVER_TO_API[EMIT]:getMore":U,"SERVER_TO_API[EMIT]:fetchPosts":(I,g)=>({state:I,props:g}),"SERVER_TO_API[EMIT]:changeThread":(I,g)=>{const{app:F}=I,{rootCh:B}=F,{storageKey:U}=C.default;return F.dispThreadType===c.default.dispThreadTypeMulti?U.postSingle:U.postMulti,{state:I,props:g}},ON_CLICK_MENU:(I,g)=>{const{rootCh:F}=I.app;return{state:I,props:g}},RESIZE_END_WINDOW:(I,g)=>({state:I,props:g}),setStoragePosts:function(I,g){const{app:F}=I;return F.isMediaCh?{state:I=Q(I),props:g}:U(I,g)},setStorageHtmlPosts:U,setStoragePostsTimeline:Q}},843:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(7536)),U=B(F(6926)),Q=B(F(9478)),t=B(F(8091)),l=B(F(978));g.default={updateAction:I=>g=>F=>{const B=I.getState();F&&(F.app=F.app?{...B.app,...F.app}:B.app,F.app.actioned=F.type),s[F.type]&&(F=s[F.type](B,F)),F&&g(F)}};const s={"SERVER_TO_API[EMIT]:tune":(I,g)=>{if(g.app[`offset${g.app.dispThreadType}FindId`]=g.app.offsetFindId,g.app.rootCh=g.thread.ch,g.app.tunedCh=g.thread.ch,g.app.detailCh=g.thread.ch,g.app.isTune=!0,g.app.isRootCh=g.app.rootCh===g.thread.ch,g.app.isMediaCh=U.default.getIsMediaCh(g.thread.ch),g.app.dispThreadType=g.app.isMediaCh?U.default.dispThreadTypeTimeline:U.default.dispThreadTypeMulti,g.app.isToggleMultistream=!1,g.thread.title=g.thread.serverMetas.title,g.thread.hasSlash=C.default.getBool(g.thread.hasSlash),g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g.app.isRootCh&&(g.app.rootTitle=g.thread.title),g.app.isMediaCh){const I=U.default.getMediaSrc(g.thread.protocol,g.thread.ch);g.app.chType=U.default.getMediaTypeFromSrc(I)}else g.app.chType=U.default.mediaTagTypeNo;return g},"SERVER_TO_API[EMIT]:fetchPosts":(I,g)=>(g.app.dispThreadType=g.app.isMediaCh?U.default.dispThreadTypeTimeline:U.default.dispThreadTypeMulti,g.app.offsetFindId=U.default.getOffsetFindId({posts:g.posts}),g.app[`offset${g.app.dispThreadType}FindId`]=g.app.offsetFindId,(g={...Q.default.getAnyActionPosts(g,I)}).app.isMediaCh&&(g=c.default.setStoragePostsTimeline(g)),g),"API_TO_SERVER[REQUEST]:changeThread":(I,g)=>(g.app=g.app?{...I.app,...g.app}:I.app,g.app.isMediaCh=U.default.getIsMediaCh(g.thread.ch),g.app.offsetFindId=U.default.defaultOffsetFindId,g.app.offsetTimelineFindId=U.default.defaultOffsetFindId,g.app.offsetMultiFindId=U.default.defaultOffsetFindId,g.app.offsetSingleFindId=U.default.defaultOffsetFindId,g.app.offsetChildFindId=U.default.defaultOffsetFindId,g.app.offsetLogsFindId=U.default.defaultOffsetFindId,g.thread=g.thread?{...I.thread,...g.thread}:I.thread,g.posts=new Q.default,g.postsMulti=new Q.default,g.postsChild=new Q.default,g.postsTimeline=new Q.default,g.postsSingle=new Q.default,g),"SERVER_TO_API[EMIT]:changeThread":(I,g)=>(g.app.isRootCh=g.app.rootCh===g.thread.ch,g.app.tunedCh=g.thread.ch,g.thread.title=g.thread.serverMetas.title,g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g),"SERVER_TO_API[EMIT]:updateThread":(I,g)=>(g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(I,g)=>(g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g),"SERVER_TO_API[REQUEST]:post":(I,g)=>(g.app.inputStampId=0,g),"SERVER_TO_API[BROADCAST]:post":(I,g)=>{if(I.thread.ch===g.thread.ch&&g.thread.emotions&&Object.keys(g.thread.emotions).length>0){const F={...g.thread.emotions};g.thread.emotions={...I.thread.emotions},Object.keys(F).forEach((I=>{Object.keys(F[I]).forEach((B=>{g.thread.emotions[I][B]=g.thread.emotions[I][B]+F[I][B]}))})),g.threadDetail={...g.thread}}return g.thread.ch=I.thread.ch,g=Q.default.getAnyActionPosts(g,I)},"SERVER_TO_API[EMIT]:getMore":(I,g)=>(g.app.offsetFindId=U.default.getOffsetFindId({posts:g.posts}),g.app[`offset${g.app.dispThreadType}FindId`]=g.app.offsetFindId,Q.default.getAnyActionPosts(g,I)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(I,g)=>(delete g.thread,g),"SERVER_TO_API[EMIT]:changeThreadDetail":(I,g)=>(g.app.detailCh=g.thread.ch,g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g.threadDetail.title=g.thread.serverMetas.title,g.threadDetail.emotions={...I.threads[g.app.detailCh].emotions},g.threadDetail.hasSlash=null===g.threadDetail.hasSlash||C.default.getBool(g.threadDetail.hasSlash),delete g.thread,g.thread=g,g),CLOSE_LINKS:(I,g)=>(g.app=g.app?{...I.app,...g.app}:I.app,g.thread=g.thread?{...I.thread,...g.thread}:I.thread,g),ON_CLICK_TO_MULTI_THREAD:(I,g)=>(g.app.isLinkCh=!1,g.app.isRootCh=g.thread.ch===I.app.rootCh,I.threads[g.thread.ch]?g.thread=I.threads[g.thread.ch]:g.thread={...I.thread,...g.thread},g),ON_CLICK_TO_TIMELINE_THREAD:(I,g)=>{const F=g.thread.ch;g.thread={...I.thread,...g.thread},g.thread.ch=F;const B=U.default.getMediaSrc(g.thread.protocol,g.thread.ch);return g.thread.findType=t.default.getFindTypeFromSrc(B),g.postsTimeline=[],g.app.isMediaCh=!0,g.app.offsetFindId=U.default.defaultOffsetFindId,g.app.offsetChildFindId=U.default.defaultOffsetFindId,g},ON_CLICK_TO_SINGLE_THREAD:(I,g)=>(g.thread={...I.thread,...g.thread},g.app=I.app,g.app.isLinkCh=!1,g),ON_CLICK_TO_CHILD_THREAD:(I,g)=>(g.thread={...I.thread,...g.thread},g.postsChild=[],g.app.offsetFindId=U.default.defaultOffsetFindId,g.app.offsetChildFindId=U.default.defaultOffsetFindId,g),ON_CLICK_MENU:(I,g)=>(g.app.desc=g.ui.menuComponent,g),RESIZE_END_WINDOW:(I,g)=>(g.thread=I.thread,g),ON_CLICK_TOGGLE_DISP_DETAIL:(I,g)=>(g.threadDetail.hasSlash=null===g.threadDetail.hasSlash||C.default.getBool(g.threadDetail.hasSlash),g),TOGGLE_BUBBLE_POST:(I,g)=>(g.thread=I.thread,g),START_LINK_MEDIA:(I,g)=>(g.app.isLinkCh=!0,g),GET_CLIENT_METAS:(I,g)=>{let F=!1,{clientMetas:B}=g,{serverMetas:C}=I.thread;if(g.thread={},Object.keys(B).forEach(((I,c)=>{B[I]&&""!==B[I]&&C[I]!==B[I]&&(g.thread.serverMetas||(g.thread.serverMetas={}),F=!0,g.thread.serverMetas[I]=B[I])})),F)return g.threadDetail={...I.threadDetail},g.threadDetail.serverMetas={...g.threadDetail.serverMetas,...g.thread.serverMetas},g}}},1006:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.PublicApi=void 0,g.PublicApi=class{constructor(I){const{api:g,store:F}=I;return{ver:"2021/02/01",on:I=>g("onResponseChAPI",I),useIo:I=>g("use",I),tune:(I,F)=>g("tune",I,F),untune:I=>g("untune",{id:I}),rank:I=>g("rank",{thread:{ch:I}}),fetchPosts:I=>g("fetchPosts",{thread:{ch:I}}),post:(I={})=>g("post",{app:{...I}}),getState:()=>F.getState()}}}},9300:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1534));g.default=(I=new C.default,g)=>g.analyze?I.merge(g.analyze):I},8496:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=(I=[],g)=>[g.type,...I]},3966:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(6926));g.default=(I=new C.default,g)=>g.app?new C.default(g.app):I},7157:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(2169));g.default=(I=new C.default,g)=>g.bootOption?I.merge(g.bootOption):I},8262:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.reducerFiles=void 0;const C=F(5857),c=B(F(9300)),U=B(F(8496)),Q=B(F(3966)),t=B(F(7157)),l=B(F(4326)),s=B(F(1169)),i=B(F(8870)),d=B(F(1731)),V=B(F(7849)),e=B(F(6739)),b=B(F(784)),A=B(F(219)),G=B(F(155)),R=B(F(1895)),Z=B(F(8372)),u=B(F(1422)),x=B(F(7474)),X=B(F(3695)),L=B(F(44));g.reducerFiles={app:Q.default,user:L.default,tuneCh:X.default,ranks:G.default,thread:Z.default,threads:x.default,threadDetail:u.default,analyze:c.default,bootOption:t.default,setting:R.default,posts:l.default,postsTimeline:V.default,postsTimelineStock:e.default,postsTimelineZero:b.default,postsTimelineZeroAfter:A.default,postsMulti:i.default,postsSingle:d.default,postsChild:s.default,apiLog:U.default},g.default=(0,C.combineReducers)(g.reducerFiles)},4326:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(9478));g.default=(I=[],g)=>g.posts?new C.default(g.posts):I},1169:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(9478));g.default=(I=[],g)=>{switch(g.type){case"API_TO_SERVER[REQUEST]:changeThread":return new C.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(g.postsChild&&g.postsChild.length>0&&g.thread.ch===g.postsChild[0].ch)return[...I,...g.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsChild&&g.postsChild.length>0)return[...g.postsChild,...I]}return I}},8870:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(300)),c=B(F(9478));g.default=(I=[],g)=>{switch(g.type){case"ON_CLICK_MULTISTREAM":return g.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new c.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(g.postsMulti&&g.postsMulti.length>0&&g.app.isRootCh)return[...g.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(g.postsMulti&&g.postsMulti.length>0&&g.app.rootCh===g.postsMulti[0].ch)return[...I,...g.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsMulti&&g.postsMulti.length>0){let F=[];return I.length+g.postsMulti.length>C.default.findOneLimitCnt?(F=[...g.postsMulti,...I],F.slice(0,C.default.findOneLimitCnt)):[...g.postsMulti,...I]}}return I}},1731:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(386));g.default=(I=[],g)=>{switch(g.type){case"ON_CLICK_MULTISTREAM":return g.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new C.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(g.postsSingle&&g.postsSingle.length>0)return[...I,...g.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsSingle&&g.postsSingle.length>0)return[...g.postsSingle,...I]}return I}},7849:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(5390));g.default=(I=[],g)=>{switch(g.type){case"API_TO_SERVER[REQUEST]:changeThread":return new C.default;case"UNMOUNT_POSTS_TIMELINE":return I.map((I=>(I.dispFlg=I.currentTime<=g.mediaCurrentTime,I)));case"CLEAR_POSTS_TIMELINE":return[...g.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(g.postsTimeline&&g.postsTimeline.length>0)return[...I,...g.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(g.postsTimeline&&g.postsTimeline.length>0)return[...g.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(g.postsTimeline&&g.postsTimeline.length>0&&g.postsTimeline[0].uid===g.user.uid&&g.postsTimeline[0].ch===g.thread.ch)return[...I,...g.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsTimeline&&g.postsTimeline.length>0)return[...g.postsTimeline,...I]}return I}},6739:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1083));g.default=(I=[],g)=>{switch(g.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return g.postsTimelineStock?[...I,g.postsTimelineStock]:I;default:return g.postsTimelineStock?new C.default(g.postsTimelineStock):I}}},784:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(2342));g.default=(I=[],g)=>{switch(g.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return g.postsTimelineZero?[...I,g.postsTimelineZero]:I;default:return g.postsTimelineZero?new C.default(g.postsTimelineZero):I}}},219:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(3189));g.default=(I=[],g)=>{switch(g.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return g.postsTimelineZeroAfter?[...I,g.postsTimelineZeroAfter]:I;default:return g.postsTimelineZeroAfter?new C.default(g.postsTimelineZeroAfter):I}}},155:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(9478));g.default=(I=[],g)=>{let F=[],B=0;const c=(I,F)=>I.ch===g.app.rootCh||F.ch===g.app.rootCh?0:I.liveCnt<F.liveCnt?1:I.liveCnt>F.liveCnt?-1:0;switch(g.type){case"SERVER_TO_API[EMIT]:fetchPosts":return g.app.isLinkCh?I:(F=C.default.getDispPosts(g),B=F&&F.length?F.length:0,0===B?I:I.map((I=>g.thread.ch===I.ch?{...I,favicon:F[B-1].favicon,stampId:F[B-1].stampId,post:F[B-1].post}:I)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return I.map((I=>g.thread.ch===I.ch?{...I,liveCnt:g.thread.liveCnt}:I)).sort(c);case"SERVER_TO_API[BROADCAST]:post":return I.map((I=>g.posts[0].ch===I.ch?{...I,title:g.posts[0].title,stampId:g.posts[0].stampId,favicon:g.posts[0].favicon,post:g.posts[0].post}:I));case"SERVER_TO_API[EMIT]:rank":if(I&&I.length>0&&g.rank&&g.rank.length>0){const F=[],B=g.rank.length;let C=g.rank[0];for(let c=0;c<B;c++){let B=g.rank[c];C=B.updateTime>C.updateTime?B:C,B.ch===I[0].ch&&(B={...B,liveCnt:I[0].liveCnt}),F.push(B)}return F.sort(c),F[0].faicon=C.favicon,F[0].post=C.post,F[0].stampId=C.stampId,F}return g.rank?g.rank:I;default:return g.rank?g.rank:I}}},1895:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(4919));g.default=(I=new C.default,g)=>g.setting?I.merge(g.setting):I},8372:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8091));g.default=(I=new C.default({},{}),g)=>{switch(g.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new C.default(g.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(I.ch===g.thread.ch)return g.thread?I.merge(g.thread):I;case"SERVER_TO_API[BROADCAST]:post":if(I.ch===g.thread.ch)return g.thread?I.merge(g.thread):I}return I}},1422:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8091));g.default=(I=new C.default({},{}),g)=>g.threadDetail?I.merge(g.threadDetail):I},7474:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(978));g.default=(I=new C.default,g)=>g.threads?I.merge(g.threads):I},3695:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(2749));g.default=(I=new C.default,g)=>{switch(g.type){case"SERVER_TO_API[EMIT]:tune":return""===g.thread.lastPost.ch?new C.default({ch:g.thread.ch,chs:g.thread.chs,title:g.thread.title,favicon:g.thread.favicon}):new C.default(g.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:F}=g;if(F.ch===I.ch){const g={...I,liveCnt:F.liveCnt};return new C.default(g)}break;case"SERVER_TO_API[BROADCAST]:post":const B=g.posts[0];if(B.ch===I.ch)return new C.default({...I,title:B.title,stampId:B.stampId,favicon:B.favicon,post:B.post})}return I}},44:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7444));g.default=(I=new C.default,g)=>g.user?I.merge(g.user):I},8188:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(){return[]}}},1534:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),this.create({liveCnt:0})}}g.default=c},6926:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(2749)),U=B(F(8091));class Q extends C.default{constructor(I={},g=""){super(),this.offsetTimelineFindId=c.default.defaultFindId,this.offsetSingleFindId=c.default.defaultFindId,this.offsetMultiFindId=c.default.defaultFindId,this.offsetChildFindId=c.default.defaultFindId,this.offsetLogsFindId=c.default.defaultFindId;const F=I.ch?I.ch:"",B=I.id?I.id:"",t=!!C.default.isSet(I.isTune)&&I.isTune,l=C.default.isSet(I.isMediaCh)?I.isMediaCh:Q.getIsMediaCh(F),s=!!C.default.isSet(I.isLinkCh)&&I.isLinkCh,i=I.rootCh?I.rootCh:F,d=C.default.isSet(I.isRootCh)?I.isRootCh:i===F,V=I.rootTitle?I.rootTitle:"talkn",e=Q.getMediaSrc(I.protocol,F),b=Q.getMediaType(e,I),A=I&&I.tunedCh?I.tunedCh:"",G=Q.getDispThreadType(I,l),R=!C.default.isSet(I.multistream)||I.multistream,Z=I&&I.findType?I.findType:U.default.findTypeAll,u=I&&I.offsetFindId?I.offsetFindId:Q.defaultOffsetFindId,x=I&&I.offsetTimelineFindId?I.offsetTimelineFindId:Q.defaultOffsetFindId,X=I&&I.offsetSingleFindId?I.offsetSingleFindId:Q.defaultOffsetFindId,L=I&&I.offsetMultiFindId?I.offsetMultiFindId:Q.defaultOffsetFindId,a=I&&I.offsetChildFindId?I.offsetChildFindId:Q.defaultOffsetFindId,n=I&&I.offsetLogsFindId?I.offsetLogsFindId:Q.defaultOffsetFindId,W=I.inputPost?I.inputPost:"",E=!!I.inputStampId&&I.inputStampId,S=I.inputCurrentTime?I.inputCurrentTime:0,N=I.inputSearch?I.inputSearch:"",y=!!C.default.isSet(I.isToggleMultistream)&&I.isToggleMultistream,o=!!C.default.isSet(I.isRankDetailMode)&&I.isRankDetailMode,m=I&&I.actioned?I.actioned:"",h=C.default.isSet(I.debug)?I.debug:"";return this.create({id:B,isTune:t,isRootCh:d,isLinkCh:s,isMediaCh:l,rootCh:i,rootTitle:V,chType:b,dispThreadType:G,tunedCh:A,multistream:R,findType:Z,offsetFindId:u,offsetTimelineFindId:x,offsetSingleFindId:X,offsetMultiFindId:L,offsetChildFindId:a,offsetLogsFindId:n,inputPost:W,inputStampId:E,inputCurrentTime:S,inputSearch:N,isToggleMultistream:y,isRankDetailMode:o,actioned:m,debug:h})}static get defaultOffsetFindId(){return c.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[Q.mediaTypeMp3,Q.mediaTypeMp4,Q.mediaTypeM4a]}static get mediaChTagTypes(){return{[Q.mediaTypeMp3]:Q.mediaTagTypeAudio,[Q.mediaTypeMp4]:Q.mediaTagTypeVideo,[Q.mediaTypeM4a]:Q.mediaTagTypeAudio}}static getMediaType(I,g){return g&&g.chType?g.chType:Q.getMediaTypeFromSrc(I)}static getMediaTypeFromSrc(I){const g=Object.keys(Q.mediaChTagTypes),F=g.length;let B="html";for(let C=0;C<F;C++){const F=new RegExp(`.${g[C]}$`);if(I.match(F)){B=Q.mediaChTagTypes[g[C]];break}}return B}static validInputPost(I){return!!/\r\n$|\n$|\r$/gim.test(I)&&"LAST TYPE BREAK LINE."}static validPost(I){return""===I?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(I)?"ONLY NEW LINE":/^\s+$/g.test(I)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(I)&&"EMPTY POST"}static getWidth(I){return"object"==typeof window&&window.innerWidth?window.innerWidth:I.width?"string"==typeof I.width&&I.width.indexOf("px")>=0?Number(I.width.replace("px","")):I.width:0}static getHeight(I={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(I){return Q.isAudioContentType(I)||Q.isVideoContentType(I)}static isAudioContentType(I){return I.indexOf(Q.mediaTagTypeAudio)>=0}static isVideoContentType(I){return I.indexOf(Q.mediaTagTypeVideo)>=0}static getMediaSrc(I,g){return I+"/"+g.replace(/\/$/,"")}static getIsMediaCh(I){return Q.mediaChs.some((g=>{const F=new RegExp(`.${g}/$|.${g}$`);return I.match(F)}))}static getDispThreadType(I,g){return I&&I.dispThreadType?I.dispThreadType:g?Q.dispThreadTypeTimeline:Q.dispThreadTypeMulti}static getOffsetFindId({posts:I}){return I&&I[0]&&I[0]._id?I[0]._id:c.default.defaultFindId}static getStepToDispThreadType({app:I,ranks:g},F,B,C=""){let c="";const U=I&&I.dispThreadType?I.dispThreadType:Q.dispThreadTypeMulti;return c=(I=Q.getStepDispThreadType({app:I,ranks:g},F,B,C)).dispThreadType,{app:I,stepTo:`${U} to ${c}`}}static getStepDispThreadType({app:I,ranks:g},F={},B,C){const c=I||{};if(c.offsetFindId=Q.defaultOffsetFindId,F.isMediaCh)return c.dispThreadType=Q.dispThreadTypeTimeline,c.offsetFindId=c.offsetTimelineFindId?c.offsetTimelineFindId:Q.defaultOffsetFindId,c.isLinkCh="Links"===C||"findMediaCh"===C||"ToMedia"===C,c.isMediaCh=!0,c;if("BackToRootCh"===C&&(c.isLinkCh=!1),"Links"===C&&g.length>0){if(!g.some((I=>I.ch===B||I.ch===B+"/")))return c.offsetFindId=Q.defaultOffsetFindId,c.dispThreadType=Q.dispThreadTypeChild,c.isLinkCh=!0,c}return c.rootCh===B?c.multistream?c.dispThreadType=Q.dispThreadTypeMulti:c.dispThreadType=Q.dispThreadTypeSingle:c.dispThreadType=Q.dispThreadTypeChild,c}}g.default=Q},2169:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),this.create({...I})}static rebuildAttributes(I){let g={};return Object.keys(I).forEach((F=>{g[I[F].name]=I[F].value})),g}}g.default=c},8455:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I=[]){return super(),I=I||[],this.create(I)}}g.default=c},2749:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(300));class U extends C.default{constructor(I){super(),this._id=U.defaultValues._id,this.ch=U.defaultValues.ch,this.chs=U.defaultValues.chs,this.favicon=U.defaultValues.favicon,this.findType=U.defaultValues.findType,this.layer=U.defaultValues.layer,this.post=U.defaultValues.post,this.protocol=U.defaultValues.protocol,this.stampId=U.defaultValues.stampId,this.title=U.defaultValues.title,this.liveCnt=U.defaultValues.liveCnt,this.uid=U.defaultValues.uid,this.utype=U.defaultValues.utype,this.dispFlg=U.defaultValues.dispFlg,this.data=U.defaultValues.data,this.createTime=U.defaultValues.createTime,this.currentTime=U.defaultValues.currentTime,this.updateTime=U.defaultValues.updateTime;const g=I?{...U.defaultValues,...I}:U.defaultValues;return this.create(g)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{_id:"",ch:"/",chs:["/"],favicon:c.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}g.default=U},5154:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},9478:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(6926)),c=B(F(5154)),U=B(F(386)),Q=B(F(5390)),t=B(F(1083));class l{constructor(I=[]){return I}static getDispPosts(I){const{app:g,postsTimeline:F,postsMulti:B,postsSingle:c,postsChild:U,postsLogs:Q}=I;switch(g.dispThreadType){case C.default.dispThreadTypeTimeline:return F;case C.default.dispThreadTypeMulti:return B;case C.default.dispThreadTypeSingle:return c;case C.default.dispThreadTypeChild:return U;case C.default.dispThreadTypeLogs:return Q}}static getAnyActionPosts(I,g){const{app:F,posts:B}=I,Q=B&&B.length>0;switch(I.postsMulti=new c.default,I.postsSingle=new U.default,I.postsChild=[],I.postsLogs=[],F.dispThreadType){case C.default.dispThreadTypeTimeline:I=l.getAnyActionPostsTimeline(I,B,g,Q);break;case C.default.dispThreadTypeMulti:I.postsMulti=Q?B:[];break;case C.default.dispThreadTypeSingle:I.postsSingle=Q?B:[];break;case C.default.dispThreadTypeChild:I.postsChild=Q?B:[];break;case C.default.dispThreadTypeLogs:I.postsLogs=Q?B:[]}return I}static getAnyActionPostsTimeline(I,g,F,B){if("SERVER_TO_API[BROADCAST]:post"===I.type)I.postsTimeline=new Q.default,I.postsTimeline.push(I.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===I.type&&(I.postsTimeline=new Q.default,I.postsTimelineStock=new t.default,B)){const F=g.length;for(let B=0;B<F;B++)0===g[B].currentTime?I.postsTimeline.push(g[B]):I.postsTimelineStock.push(g[B])}return I}}g.default=l},386:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},5390:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},1083:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},2342:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},3189:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},8207:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},4919:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){super();const g=I&&I.client?I.client:{},F=I&&I.common?I.common:{},B=I&&I.server?I.server:{};return this.create({client:g,common:F,server:B})}}g.default=c},8091:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(7771)),U=B(F(300)),Q=B(F(6926));class t extends C.default{constructor(I={},g){super(),this.chs=["/"],this.protocol=c.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=t.getDefaultFavicon(),this.findType=t.findTypeAll,this.title=t.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=t.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const F=t.isWindowObj(I)?t.constructorFromWindow(I,g):I;return this.create(F)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypePdf(){return"Pdf"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[t.findTypeHtml]:["text/html"],[t.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[t.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return`https://${U.default.assetsURL}/favicon.ico`}static isWindowObj(I){return!!I.alert}static constructorFromWindow(I,g){const F=!!g.ch&&g.ch,B=t.getCh(g);let c={};return c.ch=B,c.chs=["/"],c.hasSlash=!!g.hasslash&&C.default.getBool(g.hasslash),c.protocol="talkn:",c.contentType="",c.charset="UTF-8",c.host="",c.favicon=t.getDefaultFavicon(),c.findType=t.findTypeAll,F?(c.protocol=t.getProtocol(F),c.host=t.getHost(F),c.chs=F.chs&&F.chs.length>0?F.chs:t.getChs(B)):(c.protocol=location.protocol?location.protocol:"????:",c.chs=I.chs&&I.chs.length>0?I.chs:t.getChs(B),c.contentType=document.contentType?document.contentType:"",c.charset=document.charset?document.charset:"",c.host=location.host?location.host:"",c.favicon=t.getFaviconFromWindow(window)),c.title=t.getDefaultTitle(),c.metas=[],c.serverMetas={},c.clientMetas={},c.emotions={},c.links=[],c.h1s=[],c.audios=[],c.videos=[],c.layer=t.getLayer(c.ch),c.mediaIndex=[],c.postCnt=0,c.multiPostCnt=0,c.isSelfCh=t.getIsSelfCh("",c.ch),c.createTime="",c.updateTime="",c}static getCh(I){return I&&I.ch&&""!==I.ch?I.ch:"/"}static getChTop(I){return""!==I?"/"+I.split("/")[1]:""}static getChs(I){let g=["/"];if(""!==I){const B="/"===I.slice(-1)?I:I+"/";if("/"!==B){const I=B.split("/"),C=I.length;let c="";for(var F=1;F<C;F++)""!==I[F]&&(c+=I[F],c="/"===c.slice(-1)?c:c+"/",c="/"===c.slice(0,1)?c:"/"+c,g.push(c))}}return g}static getHost(I){return I.indexOf(".")>=0?(I=I.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):U.default.domain}static getProtocol(I){return I.indexOf("http:")>=0?"http:":I.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(I,g){return I.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===g}static getLayer(I="/"){return I.split("/").length-1}static getMediaSrc(I){return Q.default.getMediaSrc(I.protocol,I.ch)}static getMediaTagType(I){const g=t.getMediaSrc(I);return Q.default.getMediaType(g,null)}static getFaviconFromWindow(I){if(I&&I.document){const g=I.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",I.document,null,2,null).stringValue,F="http://",B="https://",C=location.host;if(g.indexOf(F)||g.indexOf(B)){const I=F+C+(g||"/favicon.ico");return 1==I.split("//").length-1?I:g}return g}return""}static getStatus(I,g,F){let B={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return B.isCreate=t.getStatusCreate(F),B.isRequireUpsert=t.getStatusIsRequireUpsert(I,B.isCreate),B.isMultistream=t.getStatusIsMultistream(g),B.isToggleMultistream=t.getStatusIsToggleMultistream(g),B.isMediaCh=t.getStatusIsMediaCh(I.ch),B}static getStatusCreate(I){return!I}static getStatusIsRequireUpsert(I,g=!1){if(!g)return!0;if(I.updateTime){const g=I.updateTime.getTime?I.updateTime.getTime():I.updateTime,F=new Date,B=F.getFullYear(),C=F.getMonth(),c=F.getDate(),Q=F.getHours();return F.getMinutes(),g<new Date(B,C,c,Q-U.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(I){return void 0===I||void 0===I.dispThreadType||I.dispThreadType===Q.default.dispThreadTypeMulti&&I.multistream}static getStatusIsMediaCh(I){return Q.default.getIsMediaCh(I)}static getStatusIsToggleMultistream(I){return void 0!==I&&void 0!==I.actioned&&I.isToggleMultistream}static getContentTypeFromFindType(I){const g=t.findTypes[t.findTypeHtml],F=t.findTypes[t.findTypeMusic],B=t.findTypes[t.findTypeVideo];let C;if(I&&""!==I){let c="";I.indexOf(";")>0&&(c=I.split(";")[0]),(g.includes(I)||g.includes(c))&&(C=t.findTypeHtml),(F.includes(I)||F.includes(c))&&(C=t.findTypeMusic),(B.includes(I)||B.includes(c))&&(C=t.findTypeVideo)}return C}static getFindTypeFromSrc(I){const g=Q.default.getMediaTypeFromSrc(I);return g.charAt(0).toUpperCase()+g.slice(1)}}g.default=t},978:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),this.create(I)}static getMergedThreads(I,g){return I[g.ch]={...g},I}}g.default=c},7940:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),I}}g.default=c},7444:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(2749));class U extends C.default{static get defaultOffsetFindId(){return c.default.defaultFindId}constructor(I={}){super();const g=I&&I.uid?I.uid:"",F=I&&I.utype?I.utype:"",B=I&&I.tunedCh?I.tunedCh:"",C=!(!I||!I.multistreamed)&&I.multistreamed,c=I&&I.actioned?I.actioned:"",Q=I&&I.offsetFindId?I.offsetFindId:U.defaultOffsetFindId,t=I&&I.offsetSingleFindId?I.offsetSingleFindId:U.defaultOffsetFindId,l=I&&I.offsetMultiFindId?I.offsetMultiFindId:U.defaultOffsetFindId,s=I&&I.offsetChildFindId?I.offsetChildFindId:U.defaultOffsetFindId,i=I&&I.offsetLogsFindId?I.offsetLogsFindId:U.defaultOffsetFindId;return I.requestLoginType&&I.requestLoginType,this.create({uid:g,utype:F,tunedCh:B,multistreamed:C,actioned:c,offsetFindId:Q,offsetSingleFindId:t,offsetMultiFindId:l,offsetChildFindId:s,offsetLogsFindId:i,friends:[]})}static getOffsetFindId({posts:I}){return I&&I[0]&&I[0]._id?I[0]._id:c.default.defaultFindId}static getHref(I={}){return"undefined"!=typeof window&&window.location&&window.location.href,I&&I.href?I.href:"/"}}g.default=U},4546:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=F(5857),c=B(F(843)),U=B(F(8262));g.default=function(I={}){let g=[c.default.updateAction];return(0,C.createStore)(U.default,I,(0,C.applyMiddleware)(...g))}},8527:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8188)),c=B(F(1534)),U=B(F(6926)),Q=B(F(8455)),t=B(F(9478)),l=B(F(5390)),s=B(F(1083)),i=B(F(8207)),d=B(F(8091)),V=B(F(7940)),e=B(F(7444));class b{constructor(I,g={}){this.bootOption=I,this.ranks=new i.default,this.menuLogs=new Q.default(g.menuLogs),this.posts=new t.default,this.postsMulti=new t.default,this.postsSingle=new t.default,this.postsChild=new t.default,this.postsTimeline=new l.default,this.postsTimelineStock=new s.default,this.postsLogs=new t.default,this.analyze=new c.default,this.thread=new d.default(this.bootOption,g.thread),this.threadDetail=new d.default(this.bootOption,g.thread),this.app=new U.default(b.getAppParams(this.thread,this.bootOption,g)),this.tuneCh=new V.default,this.user=new e.default(b.getUserParams(this,g)),this.actionLog=new C.default}static getAppParams(I,g,F){return{isTransition:!0,rootTitle:I.title,...g,...I}}static getUserParams(I,g){return g&&g.user&&g.user.uid?{...g.user}:{dispThreadType:I.thread.ch===I.app.rootCh?U.default.dispThreadTypeMulti:U.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}g.default=b},5719:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1665)),c=B(F(8200)),U=B(F(2874)),Q=F(1006),t=document.currentScript,l=Boolean(-1===t.getAttribute("src").indexOf(C.default.SUB_DOMAINS.BANNER)),s=new U.default(C.default.APP_TYPES.API);window.talknAPI=new Promise((I=>{s.boot().then((g=>{const F=new Q.PublicApi(g);l?window.talknAPI=F:(0,c.default)(F),I(F)}))}))},6552:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7771)),c=B(F(300)),U=B(F(1665));class Q{constructor(I,g){this.env=U.default.PRODUCTION,this.type=U.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=C.default.HTTPS_PROTOCOL,this.host=location.host,this.extensionMode=Q.extensionModeNone,this.isRankDetailMode=!1,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:C.default.HTTPS_PROTOCOL,host:location.host,mode:Q.extensionModeNone,isRankDetailMode:!1}};const F=Q.getInitialRootCh(c.default.env),B=Q.getFirstHasSlach(F);this.env=c.default.env,this.id=I,this.hasSlash=g&&void 0!==g.hasSlash?g.hasSlash:Q.getLastHasSlach(F),this.ch=g&&g.ch?g.ch:Q.getActiveCh(F,B,this.hasSlash),this.protocol=g&&g.protocol?g.protocol:Q.getProtocol(),this.host=g&&g.host?g.host:location.host,this.extensionMode=g&&g.mode?g.mode:Q.extensionModeNone,this.isRankDetailMode=g&&void 0!==g.isRankDetailMode?g.isRankDetailMode:this.defaultProps.params.isRankDetailMode}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static getInitialRootCh(I){let g=location.href;switch(g=g.replace(`${C.default.HTTPS_PROTOCOL}/`,"").replace(`${C.default.HTTP_PROTOCOL}/`,""),I){case U.default.PRODUCTION:g=g.indexOf(c.default.coverURL)>=0?g.replace(`/${c.default.coverURL}/`,"/"):g.replace(`/${U.default.PRODUCTION_DOMAIN}`,"/");break;case U.default.LOCALHOST:g=g.indexOf(c.default.coverURL)>=0?g.replace(`/${c.default.coverURL}/`,"/"):g.replace(`/${U.default.DEVELOPMENT_DOMAIN}`,"/");break;case U.default.DEVELOPMENT:g=g.replace(`:${U.default.PORTS.DEVELOPMENT_CLIENT}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_API}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_COVER}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_TUNE}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_COMPONENTS}`,""),0===g.indexOf(`/${U.default.DEVELOPMENT_DOMAIN}/`)&&(g=g.replace(`/${U.default.DEVELOPMENT_DOMAIN}`,""))}return g}static getType(I,g){let F=U.default.APP_TYPES.API;return I?U.default.APP_TYPES.EXTENSION:g?U.default.APP_TYPES.CLIENT:F}static getProtocol(){return location.protocol===C.default.HTTPS_PROTOCOL?C.default.HTTPS_PROTOCOL:location.protocol===C.default.HTTP_PROTOCOL?C.default.HTTP_PROTOCOL:C.default.TALKN_PROTOCOL}static getFirstHasSlach(I){return I.startsWith("/")}static getLastHasSlach(I){return I.endsWith("/")}static getActiveCh(I,g,F){let B=I;return B=g?B:`/${B}`,B=F?B:`${B}/`,B=B.replace(/^\/\//,"/"),B}static getCh(I){return I&&""!==I?I=(I=(I=I.replace(`${C.default.HTTPS_PROTOCOL}/`,"").replace(`${C.default.HTTP_PROTOCOL}/`,"")).endsWith("/")?I:I+"/").startsWith("/")?I:"/"+I:"/"}}g.default=Q},1223:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.HandleRequestMethod=g.HandleMessageMethod=void 0;const C=B(F(7771));g.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(I){return 0===I.indexOf(C.default.API_TO_SERVER_REQUEST)?I.replace(C.default.API_TO_SERVER_REQUEST,C.default.API_TO_CLIENT_REQUEST):0===I.indexOf(C.default.SERVER_TO_API_EMIT)?I.replace(C.default.SERVER_TO_API_EMIT,C.default.API_TO_CLIENT_EMIT):0===I.indexOf(C.default.SERVER_TO_API_BROADCAST)?I.replace(C.default.SERVER_TO_API_BROADCAST,C.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${I}`}static getMessageTypes(I){const g=I.split(":");return{ioType:g[0].split("[")[1].replace("]",""),exeMethod:g[1]}}static convertExtToClientActionType(I){return`EXT_TO_CLIENT[ACTION]:${I}`}},g.HandleMessageMethod="handle",g.HandleRequestMethod="handle"},1216:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0});class F{constructor(I={}){}static getType(I){return null===I?"Null":void 0===I?"Undefined":I.constructor.name}static isSet(I){return"Undefined"!==F.getType(I)&&"Null"!==F.getType(I)}static getBool(I){return"boolean"==typeof I?I:"true"===I}static isAnonymousFunc(I){const g=I.toString();return"function(){}"===g||"function() {}"===g||"function (){}"===g||"function () {}"===g||"()=>{}"===g}create(I){const g=this.constructor.name;return F.getType(I),Object.keys(I).forEach((B=>{let C,c,U=null,Q=!1,t=!1,l=()=>{},s=null;if("Object"===F.getType(I[B])){C=I[B];let g=0===Object.keys(C).length;Q=C.isAcceptNull?C.isAcceptNull:Q,t=C.isAcceptBlank?C.isAcceptBlank:t,U=!g&&C.def?C.def:U,s=g||!C.value&&""!==C.value?C:C.value,s=g&&U?U:s,c=F.getType(s),l=C.valid?C.valid:l}else s=I[B],U=s,Q=Q,t=t,c=F.getType(s),l=l;const i=I=>{let C=null;const U=`${g}.${B}`,i=s,d=c,V=I,e=F.getType(I);return e!==c&&(C=`SCHEMA_TYPE : ${U} [validType: ${c}][paramsType: ${e}]`),Q&&null===I&&(C=`SCHEMA_IS_ACCEPT_NULL :  ${U}`),t&&""===I&&(C=`SCHEMA_IS_ACCEPT_BLANK :  ${U}`),"Function"===F.getType(l)&&l(I)&&(C=`SCHEMA_YOUR_VALID_METHOD :  ${U}`),{pointer:U,validValue:i,validType:d,paramsValue:V,paramsType:e,error:C}},{pointer:d,validValue:V,validType:e,paramsValue:b,paramsType:A,error:G}=i(s);if(null===G)Object.defineProperty(this,B,{get:()=>s,set:I=>{const g=i(s);if(null===G)return s=I,{...this,[B]:s};throw this.validWarn(g),G},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw G;console.warn(G)}})),this}canSet(I,g){try{const F=this[I];if(void 0===F)return!0;if(null===F)return!0;if(void 0===g)return!0;if(null===g)return!0;const{error:B}=this[I]=g;return!B&&(this[I]=F,!0)}catch(F){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+I),console.warn("BEFOER VALUE"),console.warn(typeof this[I]),console.warn(this[I]),console.warn("AFTER VALUE"),console.warn(typeof g),console.warn(g),`BAD CAN SET: ${F}`}}merge(I={},g=!0){try{const B=F.getType(I),C=Object.keys(I);if(C.length>0){let F={...this};return C.forEach((g=>{this[g]!==I[g]&&(this.canSet(g,I[g])?F[g]=I[g]:console.warn("BAD MERGE A : "+g+" "+I[g]+" "+typeof I[g]))})),"Array"===B?(F=Object.values(F),g?new this.constructor(F):F):g?new this.constructor(F):F}return new this.constructor}catch(g){if(this.errorThrow)throw console.warn(I),console.warn(g),`BAD MERGE B : ${F.getType(I)} ${g}`;return console.warn(I),console.warn(g),console.warn(`BAD MERGE C : ${F.getType(I)} ${g}`),I}}toJSON(I=this){let g={};return Object.keys(I).forEach((F=>{let B=I[F];"Object"===B.constructor.name&&(B.type||B.default||(B=this.toJSON(B))),B.default||""===B.default||0===B.default?g[F]=B.default:g[F]=B})),g}forEach(I){return Object.values(this).forEach(I)}concat(I){return this.returnImmutable(Object.values(this).concat(I),I)}map(I){return this.returnImmutable(Object.values(this).map(I),I)}filter(I){return this.returnImmutable(Object.values(this).filter(I),I)}reduce(I){return this.returnImmutable(Object.values(this).reduce(I),I)}find(I){return Object.values(this).find(I)}sort(I){return Object.values(this).sort(I)}push(I){const g=Object.values(this);return g.push(I),this.returnImmutable(g)}unshift(I){const g=Object.values(this);return g.unshift(I),this.returnImmutable(g)}getShift(){const I=Object.values(this).shift();return this.returnImmutable(I)}pop(I){const g=Object.values(this);return g.pop(I),this.returnImmutable(g)}returnImmutable(I,g=(()=>{})){return void 0===I?new this.constructor:0===I.length&&0===Object.keys(this).length?String(g).indexOf("createElement")>0?[]:new this.constructor(I):I[0]&&I[0].$$typeof&&"Symbol"===I[0].$$typeof.constructor.name?I:new this.constructor(I)}validWarn(I){console.warn("##########################"),console.warn("#"+I.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(I.validType),console.warn("### initializedValidValue"),console.warn(I.validValue),console.warn("### paramsType"),console.warn(I.paramsType),console.warn("### paramsValue"),console.warn(I.paramsValue),console.warn("##########################")}}g.default=F},7771:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${c.API_REQUEST_TYPE}]${c.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${c.API_RESPONSE_TYPE_EMIT}]${c.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${c.API_RESPONSE_TYPE_BROADCAST}]${c.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${c.API_REQUEST_TYPE}]${c.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${c.API_RESPONSE_TYPE_EMIT}]${c.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${c.API_RESPONSE_TYPE_BROADCAST}]${c.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tunedCh","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(I){const g=I.split(c.METHOD_COLON),F=g[0].split("[")[0];let B;return B=g[0].indexOf(`[${c.API_REQUEST_TYPE}]`)>0?c.API_REQUEST_TYPE:g[0].indexOf(`[${c.API_RESPONSE_TYPE_EMIT}]`)>0?c.API_RESPONSE_TYPE_EMIT:c.API_RESPONSE_TYPE_BROADCAST,{sequence:F,actionType:B,actionName:g[1]}}static updateCallbackExeConditionMap(I){let g={emit:!0,broadcast:!0};return c.map[I]&&(g.emit=!(Object.keys(c.map[I].responseEmitState).length>0),g.broadcast=!(Object.keys(c.map[I].responseBroadcastState).length>0)),g}static convertServerToApiIoType(I,g){return g.indexOf(`${c.API_SEPARATE_IO_TYPE_START}${c.API_REQUEST_TYPE}${c.API_SEPARATE_IO_TYPE_END}`)>=0?c.API_REQUEST_TYPE:g.indexOf(`${c.API_SEPARATE_IO_TYPE_START}${c.API_RESPONSE_TYPE_BROADCAST}${c.API_SEPARATE_IO_TYPE_END}`)>=0?c.API_RESPONSE_TYPE_BROADCAST:g.indexOf(`${c.API_SEPARATE_IO_TYPE_START}${c.API_RESPONSE_TYPE_EMIT}${c.API_SEPARATE_IO_TYPE_END}`)>=0?c.API_RESPONSE_TYPE_EMIT:c.API_SETUP}static convertExtToClientActionType(I,g){return c.convertApiToClientActionType(g)}static convertApiToClientActionType(I){return 0===I.indexOf(c.API_TO_SERVER_REQUEST)?I.replace(c.API_TO_SERVER_REQUEST,c.API_TO_CLIENT_REQUEST):0===I.indexOf(c.SERVER_TO_API_EMIT)?I.replace(c.SERVER_TO_API_EMIT,c.API_TO_CLIENT_EMIT):0===I.indexOf(c.SERVER_TO_API_BROADCAST)?I.replace(c.SERVER_TO_API_BROADCAST,c.API_TO_CLIENT_BROADCAST):I}static getRequestState(I,g,F){const B=I.replace(c.API_TO_SERVER_REQUEST,""),{requestPublicState:U,requestPrivateState:Q}=c.map[B];let t={[c.REDUX_ACTION_KEY]:B};return Object.keys(Q).forEach((I=>{t[I]||(t[I]={}),Q[I].forEach((B=>{if(!t[I][B]){let c=g[I][B];F&&F[I]&&C.default.isSet(F[I][B])&&(c=F[I][B]),t[I][B]=c}}))})),Object.keys(U).forEach((I=>{t[I]||(t[I]={}),U[I].forEach((g=>{t[I][g]||(t[I][g]=F)}))})),t}static getResponseState(I,g,F){const B=g.type,C=c.map[B][`response${I}State`];let U={[c.REDUX_ACTION_KEY]:B};return Object.keys(C).forEach((I=>{if(!F[I])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${g.type}: ${I}`;{const B=C[I];let c=F[I];switch(c.constructor.name){case"model":c=c.toJSON(),delete c._id,delete c.__v}"*"===B?U={...U,[I]:c}:B.forEach((B=>{if(void 0===F[I][B])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${g.type}: ${I}.${B}`;U={...U,[I]:{...U[I],[B]:F[I][B]}}}))}})),U}static getRequestActionState(I,g=null,F=null){return"string"==typeof g&&null===F?{type:I}:"object"==typeof g&&"object"==typeof F?{...g,...F,type:I}:"string"==typeof g&&"object"==typeof F?{...F,type:I}:{...g,type:I}}}g.default=c},7156:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0});class F{constructor(){F.setupMath()}static setupMath(){Math.easeInOutQuad=(I,g,F,B)=>(I/=B/2)<1?F/2*I*I+g:-F/2*(--I*(I-2)-1)+g}static setupLog(){}}g.default=F},300:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(6894)),c=B(F(8399)),U=B(F(1665)),{PRODUCTION:Q,DEVELOPMENT:t,PRODUCTION_DOMAIN:l,DEVELOPMENT_DOMAIN:s,SUB_DOMAINS:i,PORTS:d}=U.default,V=C.default.hasOwnProperty("hostname")?C.default.hostname():s,e=function(I){if("browser"===c.default.title){if(location.href.indexOf(U.default.DEVELOPMENT_DOMAIN)>=0){const I=Number(location.port);return I===U.default.PORTS.DEVELOPMENT_CLIENT||I===U.default.PORTS.DEVELOPMENT_API||I===U.default.PORTS.DEVELOPMENT_COVER||I===U.default.PORTS.DEVELOPMENT_COMPONENTS||I===U.default.PORTS.DEVELOPMENT_TUNE?U.default.DEVELOPMENT:U.default.LOCALHOST}return U.default.PRODUCTION}return I.indexOf(U.default.AWS_HOST_KEY)>=0?U.default.PRODUCTION:U.default.DEVELOPMENT}(V),b={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js",cover:"talkn.cover.js",tune:"talkn.tune.js",components:"talkn.components.js"},A=e===t,G=e===Q?l:s,R=`${i.WWW}.${G}`,Z=`${i.COVER}.${G}`,u=`${i.API}.${G}`,x=A?`${G}:${d.DEVELOPMENT_API}/${b.api}`:`${u}/v1`,X=A?`${G}:${d.DEVELOPMENT_CLIENT}/${b.client}`:`${i.CLIENT}.${G}`,L=`${i.DESC}.${G}`,a=`${i.PORTAL}.${G}`,n=`${i.ASSETS}.${G}`,W=`${i.AUTO}.${G}`,E=`${i.EXT}.${G}`,S=`${i.COMP}.${G}`,N=`${i.OWN}.${G}`,y=`${i.NEWS}.${G}`,o=`${i.TUNE}.${G}`,m=`${i.COMPONENTS}.${G}`,h=`${n}/img/`,Y={domain:G,isDev:A,env:e,files:b,hostName:V,apiURL:u,apiAccessURL:x,coverURL:Z,wwwURL:R,descURL:L,portalURL:a,clientURL:X,assetsURL:n,autoURL:W,extURL:E,compURL:S,ownURL:N,newsURL:y,tuneURL:o,bannerURL:`${i.BANNER}.${G}`,componentsURL:m,transactionURL:`${i.TRANSACTION}.${G}`,assetsImgPath:h,assetsCoverPath:`${n}/cover/`,assetsIconPath:`${n}/icon/`,assetsJsPath:`${n}/js/`,sessionURL:`${i.SESSION}.${G}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],defaultBirthdayUnixtime:1e12,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${h}talkn_logo_html.png`,Music:`//${h}talkn_logo_music.png`,Video:`//${h}talkn_logo_video.png`},defaultFavicon:`//${i.ASSETS}.${G}/favicon.ico`};g.default={...Y}},1665:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8399)),c={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:C.default.env.HOSTNAME?C.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_COVER:8e3,DEVELOPMENT_API:8001,DEVELOPMENT_COMPONENTS:8002,DEVELOPMENT_TUNE:8003,DEVELOPMENT_CLIENT:8080,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",COVER:"cover",RANK:"rank",EXT:"ext",COMPONENTS:"components",TUNE:"tune",TRANSACTION:"transaction"},APP_TYPES:{CLIENT:"CLIENT",PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",COVER:"COVER",COMPONENTS:"COMPONENTS",TUNE:"TUNE"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",talknRankJs:"talkn.rank.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};g.default=c},7509:(I,g,F)=>{"use strict";F.r(g),F.d(g,{default:()=>c});var B=F(477),C=F.n(B);function c(){return C()('(()=>{var e={7824:e=>{var t=1e3,s=60*t,r=60*s,n=24*r;function i(e,t,s,r){var n=t>=1.5*s;return Math.round(e/s)+" "+r+(n?"s":"")}e.exports=function(e,o){o=o||{};var a,u,c=typeof e;if("string"===c&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var o=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*n;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===c&&isFinite(e))return o.long?(a=e,(u=Math.abs(a))>=n?i(a,u,n,"day"):u>=r?i(a,u,r,"hour"):u>=s?i(a,u,s,"minute"):u>=t?i(a,u,t,"second"):a+" ms"):function(e){var i=Math.abs(e);return i>=n?Math.round(e/n)+"d":i>=r?Math.round(e/r)+"h":i>=s?Math.round(e/s)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},5857:(e,t,s)=>{"use strict";function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}s.r(t),s.d(t,{__DO_NOT_USE__ActionTypes:()=>c,applyMiddleware:()=>_,bindActionCreators:()=>T,combineReducers:()=>p,compose:()=>E,createStore:()=>l,legacy_createStore:()=>h});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",u=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+u(),REPLACE:"@@redux/REPLACE"+u(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+u()}};function d(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,s){var r;if("function"==typeof t&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof t&&void 0===s&&(s=t,t=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(e,t)}if("function"!=typeof e)throw new Error(o(2));var n=e,i=t,u=[],h=u,p=!1;function f(){h===u&&(h=u.slice())}function T(){if(p)throw new Error(o(3));return i}function E(e){if("function"!=typeof e)throw new Error(o(4));if(p)throw new Error(o(5));var t=!0;return f(),h.push(e),function(){if(t){if(p)throw new Error(o(6));t=!1,f();var s=h.indexOf(e);h.splice(s,1),u=null}}}function _(e){if(!d(e))throw new Error(o(7));if(void 0===e.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,i=n(i,e)}finally{p=!1}for(var t=u=h,s=0;s<t.length;s++)(0,t[s])();return e}function g(e){if("function"!=typeof e)throw new Error(o(10));n=e,_({type:c.REPLACE})}function y(){var e,t=E;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(o(11));function s(){e.next&&e.next(T())}return s(),{unsubscribe:t(s)}}})[a]=function(){return this},e}return _({type:c.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:g})[a]=y,r}var h=l;function p(e){for(var t=Object.keys(e),s={},r=0;r<t.length;r++){var n=t[r];"function"==typeof e[n]&&(s[n]=e[n])}var i,a=Object.keys(s);try{!function(e){Object.keys(e).forEach((function(t){var s=e[t];if(void 0===s(void 0,{type:c.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,n={},u=0;u<a.length;u++){var c=a[u],d=s[c],l=e[c],h=d(l,t);if(void 0===h)throw t&&t.type,new Error(o(14));n[c]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(e).length)?n:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function T(e,t){if("function"==typeof e)return f(e,t);if("object"!=typeof e||null===e)throw new Error(o(16));var s={};for(var r in e){var n=e[r];"function"==typeof n&&(s[r]=f(n,t))}return s}function E(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function _(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return function(e){return function(){var s=e.apply(void 0,arguments),r=function(){throw new Error(o(15))},n={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(n)}));return r=E.apply(void 0,a)(s.dispatch),i(i({},s),{},{dispatch:r})}}}},3669:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(9231)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9231:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},6930:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(9462)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9462:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},1517:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(8929)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},8929:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},198:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7046)),i=r(s(7771)),o=r(s(300)),a=r(s(1665)),u=r(s(1069)),c=r(s(5027)),d=r(s(9093)),l=r(s(8527)),h=r(s(4546));class p{constructor(e){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=e,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:i.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(e){return!(!this.stores[e]||!this.ios[this.id]||(this.id=e,0))}exe(e,t){return this[e]&&"function"==typeof this[e]?(this[e](t),!0):!(!this.methods[e]||"function"!=typeof this.methods[e]||(this.methods[e](t),0))}onResponseChAPI(e){const t=(e=>t=>{const s=e(t);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(c.default);this.on(e,t)}offResponseChAPI(e){this.off(e)}getIoParams(e){let t="";return Object.keys(e).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=e[s];t+=`${s}=${encodeURIComponent(r)}&`})),t.replace(/&$/,"")}tune(e){if(!this.use(e.id)){this.id=e.id,this.stores[this.id]=(0,h.default)(),this.stores[this.id].subscribe(this.subscribe);const t=new l.default(e);this.stores[this.id].dispatch({...t,type:"SETUPED_API_STORE"});const s=this.getIoParams(e),r=`${i.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=(0,n.default)(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(e.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(e){console.log("@@@@ API UNTUNE");const t=e&&e.id?e.id:this.id;return!!this.ios[t]&&(this.ios[t].disconnect(),delete this.ios[t],delete this.stores[t],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:i.default.API_SETUP})}onRequestAPI(){const e=u.default,t=Object.keys(e),s=t.length,r=(e,t)=>(s,r=(()=>{}))=>{const n=this.stores[this.id].getState(),o=i.default.getRequestState(e,n,s),a=i.default.getRequestActionState(e,s),{requestState:u,actionState:c}=t(n,o,a);return this.publicCallbacks[u.type]=r,this.ios[this.id].emit(u.type,u),this.stores[this.id].dispatch(c)};for(let n=0;n<s;n++){const s=t[n],o=s.replace(i.default.API_TO_SERVER_REQUEST,""),a=e[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const e=(e=>t=>{const s=e(t);this.stores[this.id].dispatch(s)})(d.default);this.on(i.default.CATCH_ME_KEY,e)}on(e,t=(()=>{})){this.id&&!this.ios[this.id]._callbacks[`$${e}`]&&this.ios[this.id].on(e,t)}off(e){this.ios[this.id]&&this.ios[this.id]._callbacks[`$${e}`]&&this.ios[this.id].off(e)}subscribe(e){const t=this.stores[this.id].getState(),s=i.default.convertServerToApiIoType(this.id,t.app.actioned);this.exeCallback(t.app.actioned,t),this.webWorker.postMessage(t.app.actioned,{...t,ioType:s})}exeCallback(e,t){const{actionType:s,actionName:r}=i.default.getSequenceActionMap(e);if(r!==i.default.API_BROADCAST_CALLBACK&&s===i.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:e,thread:s,user:n}=t;this.publicCallbacks[r](t,{posts:e,thread:s,uid:n.uid})}if(s===i.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[i.default.API_BROADCAST_CALLBACK]){const{posts:e,thread:s,user:n}=t;this.publicCallbacks[i.default.API_BROADCAST_CALLBACK](r,{posts:e,thread:s,uid:n.uid})}}}t.default=p},1069:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771)),i=new(r(s(3365)).default);let o={};Object.keys(n.default.map).forEach((e=>{const t=`${n.default.API_TO_SERVER_REQUEST}${e}`;o[t]=(e,t,s)=>a[t.type]?a[t.type](e,t,s):{requestState:t,actionState:s}}));const a={post:(e,t,s)=>{const{app:r}=t;return r.isMediaCh&&(r.currentTime?t.app.inputCurrentTime=window.talknMedia.currentTime:t.app.inputCurrentTime=0),t.thread.emotions={},r.inputStampId?Object.keys(i.balances).forEach((s=>{if(i.balances[s]&&e.thread.emotions[s]){const e=i.balances[s](r.inputStampId);e&&e.forEach((e=>{const r=Object.keys(e)[0],n=i.idKeyTypes[r];t.thread.emotions[s]||(t.thread.emotions[s]={}),t.thread.emotions[s][n]||(t.thread.emotions[s][n]=0),t.thread.emotions[s][n]=e[r]}))}})):(s.app={...r},s.app.inputStampId=0,t.app.inputStampId=0),{requestState:t,actionState:s}}};t.default=o},5027:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771));t.default=e=>{const t=`${n.default.SERVER_TO_API_BROADCAST}${e.type}`;return{...e,type:t}}},9093:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771));t.default=e=>{const t=`${n.default.SERVER_TO_API_EMIT}${e.type}`;return{...e,type:t}}},7536:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1665)),i=r(s(6926));function o(e,t){const{app:s}=e,{storageKey:r}=n.default;if(s.isRootCh){const{postsMulti:t,postsSingle:s}=e}return{state:e,props:t}}function a(e){const{app:t,thread:s,postsTimeline:r}=e,{storageKey:i}=n.default;if(t.isMediaCh){const t=r&&r.length?r.length:0;let s=[],n=[];for(let e=0;e<t;e++)0===r[e].currentTime?s.push(r[e]):n.push(r[e]);e.postsTimeline=s}return e}t.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(e,t)=>({state:e,props:t}),"SERVER_TO_API[EMIT]:changeThread":(e,t)=>{const{app:s}=e,{rootCh:r}=s,{storageKey:o}=n.default;return s.dispThreadType===i.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:e,props:t}},ON_CLICK_MENU:(e,t)=>{const{rootCh:s}=e.app;return{state:e,props:t}},RESIZE_END_WINDOW:(e,t)=>({state:e,props:t}),setStoragePosts:function(e,t){const{app:s}=e;return s.isMediaCh?{state:e=a(e),props:t}:o(e,t)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},843:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(7536)),o=r(s(6926)),a=r(s(9478)),u=r(s(8091)),c=r(s(978));t.default={updateAction:e=>t=>s=>{const r=e.getState();s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&t(s)}};const d={"SERVER_TO_API[EMIT]:tune":(e,t)=>{if(t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,t.app.rootCh=t.thread.ch,t.app.tunedCh=t.thread.ch,t.app.detailCh=t.thread.ch,t.app.isTune=!0,t.app.isRootCh=t.app.rootCh===t.thread.ch,t.app.isMediaCh=o.default.getIsMediaCh(t.thread.ch),t.app.dispThreadType=t.app.isMediaCh?o.default.dispThreadTypeTimeline:o.default.dispThreadTypeMulti,t.app.isToggleMultistream=!1,t.thread.title=t.thread.serverMetas.title,t.thread.hasSlash=n.default.getBool(t.thread.hasSlash),t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t.app.isRootCh&&(t.app.rootTitle=t.thread.title),t.app.isMediaCh){const e=o.default.getMediaSrc(t.thread.protocol,t.thread.ch);t.app.chType=o.default.getMediaTypeFromSrc(e)}else t.app.chType=o.default.mediaTagTypeNo;return t},"SERVER_TO_API[EMIT]:fetchPosts":(e,t)=>(t.app.dispThreadType=t.app.isMediaCh?o.default.dispThreadTypeTimeline:o.default.dispThreadTypeMulti,t.app.offsetFindId=o.default.getOffsetFindId({posts:t.posts}),t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,(t={...a.default.getAnyActionPosts(t,e)}).app.isMediaCh&&(t=i.default.setStoragePostsTimeline(t)),t),"API_TO_SERVER[REQUEST]:changeThread":(e,t)=>(t.app=t.app?{...e.app,...t.app}:e.app,t.app.isMediaCh=o.default.getIsMediaCh(t.thread.ch),t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetTimelineFindId=o.default.defaultOffsetFindId,t.app.offsetMultiFindId=o.default.defaultOffsetFindId,t.app.offsetSingleFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t.app.offsetLogsFindId=o.default.defaultOffsetFindId,t.thread=t.thread?{...e.thread,...t.thread}:e.thread,t.posts=new a.default,t.postsMulti=new a.default,t.postsChild=new a.default,t.postsTimeline=new a.default,t.postsSingle=new a.default,t),"SERVER_TO_API[EMIT]:changeThread":(e,t)=>(t.app.isRootCh=t.app.rootCh===t.thread.ch,t.app.tunedCh=t.thread.ch,t.thread.title=t.thread.serverMetas.title,t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[EMIT]:updateThread":(e,t)=>(t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(e,t)=>(t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[REQUEST]:post":(e,t)=>(t.app.inputStampId=0,t),"SERVER_TO_API[BROADCAST]:post":(e,t)=>{if(e.thread.ch===t.thread.ch&&t.thread.emotions&&Object.keys(t.thread.emotions).length>0){const s={...t.thread.emotions};t.thread.emotions={...e.thread.emotions},Object.keys(s).forEach((e=>{Object.keys(s[e]).forEach((r=>{t.thread.emotions[e][r]=t.thread.emotions[e][r]+s[e][r]}))})),t.threadDetail={...t.thread}}return t.thread.ch=e.thread.ch,t=a.default.getAnyActionPosts(t,e)},"SERVER_TO_API[EMIT]:getMore":(e,t)=>(t.app.offsetFindId=o.default.getOffsetFindId({posts:t.posts}),t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,a.default.getAnyActionPosts(t,e)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(e,t)=>(delete t.thread,t),"SERVER_TO_API[EMIT]:changeThreadDetail":(e,t)=>(t.app.detailCh=t.thread.ch,t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t.threadDetail.title=t.thread.serverMetas.title,t.threadDetail.emotions={...e.threads[t.app.detailCh].emotions},t.threadDetail.hasSlash=null===t.threadDetail.hasSlash||n.default.getBool(t.threadDetail.hasSlash),delete t.thread,t.thread=t,t),CLOSE_LINKS:(e,t)=>(t.app=t.app?{...e.app,...t.app}:e.app,t.thread=t.thread?{...e.thread,...t.thread}:e.thread,t),ON_CLICK_TO_MULTI_THREAD:(e,t)=>(t.app.isLinkCh=!1,t.app.isRootCh=t.thread.ch===e.app.rootCh,e.threads[t.thread.ch]?t.thread=e.threads[t.thread.ch]:t.thread={...e.thread,...t.thread},t),ON_CLICK_TO_TIMELINE_THREAD:(e,t)=>{const s=t.thread.ch;t.thread={...e.thread,...t.thread},t.thread.ch=s;const r=o.default.getMediaSrc(t.thread.protocol,t.thread.ch);return t.thread.findType=u.default.getFindTypeFromSrc(r),t.postsTimeline=[],t.app.isMediaCh=!0,t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t},ON_CLICK_TO_SINGLE_THREAD:(e,t)=>(t.thread={...e.thread,...t.thread},t.app=e.app,t.app.isLinkCh=!1,t),ON_CLICK_TO_CHILD_THREAD:(e,t)=>(t.thread={...e.thread,...t.thread},t.postsChild=[],t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t),ON_CLICK_MENU:(e,t)=>(t.app.desc=t.ui.menuComponent,t),RESIZE_END_WINDOW:(e,t)=>(t.thread=e.thread,t),ON_CLICK_TOGGLE_DISP_DETAIL:(e,t)=>(t.threadDetail.hasSlash=null===t.threadDetail.hasSlash||n.default.getBool(t.threadDetail.hasSlash),t),TOGGLE_BUBBLE_POST:(e,t)=>(t.thread=e.thread,t),START_LINK_MEDIA:(e,t)=>(t.app.isLinkCh=!0,t),GET_CLIENT_METAS:(e,t)=>{let s=!1,{clientMetas:r}=t,{serverMetas:n}=e.thread;if(t.thread={},Object.keys(r).forEach(((e,i)=>{r[e]&&""!==r[e]&&n[e]!==r[e]&&(t.thread.serverMetas||(t.thread.serverMetas={}),s=!0,t.thread.serverMetas[e]=r[e])})),s)return t.threadDetail={...e.threadDetail},t.threadDetail.serverMetas={...t.threadDetail.serverMetas,...t.thread.serverMetas},t}}},9300:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1534));t.default=(e=new n.default,t)=>t.analyze?e.merge(t.analyze):e},8496:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e=[],t)=>[t.type,...e]},3966:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6926));t.default=(e=new n.default,t)=>t.app?new n.default(t.app):e},7157:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2169));t.default=(e=new n.default,t)=>t.bootOption?e.merge(t.bootOption):e},8262:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.reducerFiles=void 0;const n=s(5857),i=r(s(9300)),o=r(s(8496)),a=r(s(3966)),u=r(s(7157)),c=r(s(4326)),d=r(s(1169)),l=r(s(8870)),h=r(s(1731)),p=r(s(7849)),f=r(s(6739)),T=r(s(784)),E=r(s(219)),_=r(s(155)),g=r(s(1895)),y=r(s(8372)),m=r(s(1422)),C=r(s(7474)),S=r(s(3695)),P=r(s(44));t.reducerFiles={app:a.default,user:P.default,tuneCh:S.default,ranks:_.default,thread:y.default,threads:C.default,threadDetail:m.default,analyze:i.default,bootOption:u.default,setting:g.default,posts:c.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,apiLog:o.default},t.default=(0,n.combineReducers)(t.reducerFiles)},4326:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(9478));t.default=(e=[],t)=>t.posts?new n.default(t.posts):e},1169:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(9478));t.default=(e=[],t)=>{switch(t.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(t.postsChild&&t.postsChild.length>0&&t.thread.ch===t.postsChild[0].ch)return[...e,...t.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsChild&&t.postsChild.length>0)return[...t.postsChild,...e]}return e}},8870:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(300)),i=r(s(9478));t.default=(e=[],t)=>{switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(t.postsMulti&&t.postsMulti.length>0&&t.app.isRootCh)return[...t.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(t.postsMulti&&t.postsMulti.length>0&&t.app.rootCh===t.postsMulti[0].ch)return[...e,...t.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsMulti&&t.postsMulti.length>0){let s=[];return e.length+t.postsMulti.length>n.default.findOneLimitCnt?(s=[...t.postsMulti,...e],s.slice(0,n.default.findOneLimitCnt)):[...t.postsMulti,...e]}}return e}},1731:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(386));t.default=(e=[],t)=>{switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(t.postsSingle&&t.postsSingle.length>0)return[...e,...t.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsSingle&&t.postsSingle.length>0)return[...t.postsSingle,...e]}return e}},7849:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5390));t.default=(e=[],t)=>{switch(t.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"UNMOUNT_POSTS_TIMELINE":return e.map((e=>(e.dispFlg=e.currentTime<=t.mediaCurrentTime,e)));case"CLEAR_POSTS_TIMELINE":return[...t.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[...e,...t.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[...t.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(t.postsTimeline&&t.postsTimeline.length>0&&t.postsTimeline[0].uid===t.user.uid&&t.postsTimeline[0].ch===t.thread.ch)return[...e,...t.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsTimeline&&t.postsTimeline.length>0)return[...t.postsTimeline,...e]}return e}},6739:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1083));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineStock?[...e,t.postsTimelineStock]:e;default:return t.postsTimelineStock?new n.default(t.postsTimelineStock):e}}},784:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2342));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineZero?[...e,t.postsTimelineZero]:e;default:return t.postsTimelineZero?new n.default(t.postsTimelineZero):e}}},219:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3189));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineZeroAfter?[...e,t.postsTimelineZeroAfter]:e;default:return t.postsTimelineZeroAfter?new n.default(t.postsTimelineZeroAfter):e}}},155:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(9478));t.default=(e=[],t)=>{let s=[],r=0;const i=(e,s)=>e.ch===t.app.rootCh||s.ch===t.app.rootCh?0:e.liveCnt<s.liveCnt?1:e.liveCnt>s.liveCnt?-1:0;switch(t.type){case"SERVER_TO_API[EMIT]:fetchPosts":return t.app.isLinkCh?e:(s=n.default.getDispPosts(t),r=s&&s.length?s.length:0,0===r?e:e.map((e=>t.thread.ch===e.ch?{...e,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:e)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return e.map((e=>t.thread.ch===e.ch?{...e,liveCnt:t.thread.liveCnt}:e)).sort(i);case"SERVER_TO_API[BROADCAST]:post":return e.map((e=>t.posts[0].ch===e.ch?{...e,title:t.posts[0].title,stampId:t.posts[0].stampId,favicon:t.posts[0].favicon,post:t.posts[0].post}:e));case"SERVER_TO_API[EMIT]:rank":if(e&&e.length>0&&t.rank&&t.rank.length>0){const s=[],r=t.rank.length;let n=t.rank[0];for(let i=0;i<r;i++){let r=t.rank[i];n=r.updateTime>n.updateTime?r:n,r.ch===e[0].ch&&(r={...r,liveCnt:e[0].liveCnt}),s.push(r)}return s.sort(i),s[0].faicon=n.favicon,s[0].post=n.post,s[0].stampId=n.stampId,s}return t.rank?t.rank:e;default:return t.rank?t.rank:e}}},1895:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(4919));t.default=(e=new n.default,t)=>t.setting?e.merge(t.setting):e},8372:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8091));t.default=(e=new n.default({},{}),t)=>{switch(t.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new n.default(t.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(e.ch===t.thread.ch)return t.thread?e.merge(t.thread):e;case"SERVER_TO_API[BROADCAST]:post":if(e.ch===t.thread.ch)return t.thread?e.merge(t.thread):e}return e}},1422:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8091));t.default=(e=new n.default({},{}),t)=>t.threadDetail?e.merge(t.threadDetail):e},7474:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(978));t.default=(e=new n.default,t)=>t.threads?e.merge(t.threads):e},3695:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2749));t.default=(e=new n.default,t)=>{switch(t.type){case"SERVER_TO_API[EMIT]:tune":return""===t.thread.lastPost.ch?new n.default({ch:t.thread.ch,chs:t.thread.chs,title:t.thread.title,favicon:t.thread.favicon}):new n.default(t.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=t;if(s.ch===e.ch){const t={...e,liveCnt:s.liveCnt};return new n.default(t)}break;case"SERVER_TO_API[BROADCAST]:post":const r=t.posts[0];if(r.ch===e.ch)return new n.default({...e,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post})}return e}},44:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7444));t.default=(e=new n.default,t)=>t.user?e.merge(t.user):e},8188:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){return[]}}},1534:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create({liveCnt:0})}}t.default=i},6926:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(2749)),o=r(s(8091));class a extends n.default{constructor(e={},t=""){super(),this.offsetTimelineFindId=i.default.defaultFindId,this.offsetSingleFindId=i.default.defaultFindId,this.offsetMultiFindId=i.default.defaultFindId,this.offsetChildFindId=i.default.defaultFindId,this.offsetLogsFindId=i.default.defaultFindId;const s=e.ch?e.ch:"",r=e.id?e.id:"",u=!!n.default.isSet(e.isTune)&&e.isTune,c=n.default.isSet(e.isMediaCh)?e.isMediaCh:a.getIsMediaCh(s),d=!!n.default.isSet(e.isLinkCh)&&e.isLinkCh,l=e.rootCh?e.rootCh:s,h=n.default.isSet(e.isRootCh)?e.isRootCh:l===s,p=e.rootTitle?e.rootTitle:"talkn",f=a.getMediaSrc(e.protocol,s),T=a.getMediaType(f,e),E=e&&e.tunedCh?e.tunedCh:"",_=a.getDispThreadType(e,c),g=!n.default.isSet(e.multistream)||e.multistream,y=e&&e.findType?e.findType:o.default.findTypeAll,m=e&&e.offsetFindId?e.offsetFindId:a.defaultOffsetFindId,C=e&&e.offsetTimelineFindId?e.offsetTimelineFindId:a.defaultOffsetFindId,S=e&&e.offsetSingleFindId?e.offsetSingleFindId:a.defaultOffsetFindId,P=e&&e.offsetMultiFindId?e.offsetMultiFindId:a.defaultOffsetFindId,O=e&&e.offsetChildFindId?e.offsetChildFindId:a.defaultOffsetFindId,I=e&&e.offsetLogsFindId?e.offsetLogsFindId:a.defaultOffsetFindId,A=e.inputPost?e.inputPost:"",b=!!e.inputStampId&&e.inputStampId,R=e.inputCurrentTime?e.inputCurrentTime:0,v=e.inputSearch?e.inputSearch:"",M=!!n.default.isSet(e.isToggleMultistream)&&e.isToggleMultistream,w=!!n.default.isSet(e.isRankDetailMode)&&e.isRankDetailMode,D=e&&e.actioned?e.actioned:"",L=n.default.isSet(e.debug)?e.debug:"";return this.create({id:r,isTune:u,isRootCh:h,isLinkCh:d,isMediaCh:c,rootCh:l,rootTitle:p,chType:T,dispThreadType:_,tunedCh:E,multistream:g,findType:y,offsetFindId:m,offsetTimelineFindId:C,offsetSingleFindId:S,offsetMultiFindId:P,offsetChildFindId:O,offsetLogsFindId:I,inputPost:A,inputStampId:b,inputCurrentTime:R,inputSearch:v,isToggleMultistream:M,isRankDetailMode:w,actioned:D,debug:L})}static get defaultOffsetFindId(){return i.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(e,t){return t&&t.chType?t.chType:a.getMediaTypeFromSrc(e)}static getMediaTypeFromSrc(e){const t=Object.keys(a.mediaChTagTypes),s=t.length;let r="html";for(let n=0;n<s;n++){const s=new RegExp(`.${t[n]}$`);if(e.match(s)){r=a.mediaChTagTypes[t[n]];break}}return r}static validInputPost(e){return!!/\\r\\n$|\\n$|\\r$/gim.test(e)&&"LAST TYPE BREAK LINE."}static validPost(e){return""===e?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(e)?"ONLY NEW LINE":/^\\s+$/g.test(e)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(e)&&"EMPTY POST"}static getWidth(e){return"object"==typeof window&&window.innerWidth?window.innerWidth:e.width?"string"==typeof e.width&&e.width.indexOf("px")>=0?Number(e.width.replace("px","")):e.width:0}static getHeight(e={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(e){return a.isAudioContentType(e)||a.isVideoContentType(e)}static isAudioContentType(e){return e.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(e){return e.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(e,t){return e+"/"+t.replace(/\\/$/,"")}static getIsMediaCh(e){return a.mediaChs.some((t=>{const s=new RegExp(`.${t}/$|.${t}$`);return e.match(s)}))}static getDispThreadType(e,t){return e&&e.dispThreadType?e.dispThreadType:t?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:e}){return e&&e[0]&&e[0]._id?e[0]._id:i.default.defaultFindId}static getStepToDispThreadType({app:e,ranks:t},s,r,n=""){let i="";const o=e&&e.dispThreadType?e.dispThreadType:a.dispThreadTypeMulti;return i=(e=a.getStepDispThreadType({app:e,ranks:t},s,r,n)).dispThreadType,{app:e,stepTo:`${o} to ${i}`}}static getStepDispThreadType({app:e,ranks:t},s={},r,n){const i=e||{};if(i.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return i.dispThreadType=a.dispThreadTypeTimeline,i.offsetFindId=i.offsetTimelineFindId?i.offsetTimelineFindId:a.defaultOffsetFindId,i.isLinkCh="Links"===n||"findMediaCh"===n||"ToMedia"===n,i.isMediaCh=!0,i;if("BackToRootCh"===n&&(i.isLinkCh=!1),"Links"===n&&t.length>0){if(!t.some((e=>e.ch===r||e.ch===r+"/")))return i.offsetFindId=a.defaultOffsetFindId,i.dispThreadType=a.dispThreadTypeChild,i.isLinkCh=!0,i}return i.rootCh===r?i.multistream?i.dispThreadType=a.dispThreadTypeMulti:i.dispThreadType=a.dispThreadTypeSingle:i.dispThreadType=a.dispThreadTypeChild,i}}t.default=a},2169:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create({...e})}static rebuildAttributes(e){let t={};return Object.keys(e).forEach((s=>{t[e[s].name]=e[s].value})),t}}t.default=i},8455:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e=[]){return super(),e=e||[],this.create(e)}}t.default=i},2749:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(300));class o extends n.default{constructor(e){super(),this._id=o.defaultValues._id,this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const t=e?{...o.defaultValues,...e}:o.defaultValues;return this.create(t)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{_id:"",ch:"/",chs:["/"],favicon:i.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}t.default=o},5154:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},9478:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6926)),i=r(s(5154)),o=r(s(386)),a=r(s(5390)),u=r(s(1083));class c{constructor(e=[]){return e}static getDispPosts(e){const{app:t,postsTimeline:s,postsMulti:r,postsSingle:i,postsChild:o,postsLogs:a}=e;switch(t.dispThreadType){case n.default.dispThreadTypeTimeline:return s;case n.default.dispThreadTypeMulti:return r;case n.default.dispThreadTypeSingle:return i;case n.default.dispThreadTypeChild:return o;case n.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(e,t){const{app:s,posts:r}=e,a=r&&r.length>0;switch(e.postsMulti=new i.default,e.postsSingle=new o.default,e.postsChild=[],e.postsLogs=[],s.dispThreadType){case n.default.dispThreadTypeTimeline:e=c.getAnyActionPostsTimeline(e,r,t,a);break;case n.default.dispThreadTypeMulti:e.postsMulti=a?r:[];break;case n.default.dispThreadTypeSingle:e.postsSingle=a?r:[];break;case n.default.dispThreadTypeChild:e.postsChild=a?r:[];break;case n.default.dispThreadTypeLogs:e.postsLogs=a?r:[]}return e}static getAnyActionPostsTimeline(e,t,s,r){if("SERVER_TO_API[BROADCAST]:post"===e.type)e.postsTimeline=new a.default,e.postsTimeline.push(e.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===e.type&&(e.postsTimeline=new a.default,e.postsTimelineStock=new u.default,r)){const s=t.length;for(let r=0;r<s;r++)0===t[r].currentTime?e.postsTimeline.push(t[r]):e.postsTimelineStock.push(t[r])}return e}}t.default=c},386:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},5390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},1083:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},2342:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},3189:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},8207:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},4919:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){super();const t=e&&e.client?e.client:{},s=e&&e.common?e.common:{},r=e&&e.server?e.server:{};return this.create({client:t,common:s,server:r})}}t.default=i},8091:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(7771)),o=r(s(300)),a=r(s(6926));class u extends n.default{constructor(e={},t){super(),this.chs=["/"],this.protocol=i.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=u.isWindowObj(e)?u.constructorFromWindow(e,t):e;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypePdf(){return"Pdf"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return`https://${o.default.assetsURL}/favicon.ico`}static isWindowObj(e){return!!e.alert}static constructorFromWindow(e,t){const s=!!t.ch&&t.ch,r=u.getCh(t);let i={};return i.ch=r,i.chs=["/"],i.hasSlash=!!t.hasslash&&n.default.getBool(t.hasslash),i.protocol="talkn:",i.contentType="",i.charset="UTF-8",i.host="",i.favicon=u.getDefaultFavicon(),i.findType=u.findTypeAll,s?(i.protocol=u.getProtocol(s),i.host=u.getHost(s),i.chs=s.chs&&s.chs.length>0?s.chs:u.getChs(r)):(i.protocol=location.protocol?location.protocol:"????:",i.chs=e.chs&&e.chs.length>0?e.chs:u.getChs(r),i.contentType=document.contentType?document.contentType:"",i.charset=document.charset?document.charset:"",i.host=location.host?location.host:"",i.favicon=u.getFaviconFromWindow(window)),i.title=u.getDefaultTitle(),i.metas=[],i.serverMetas={},i.clientMetas={},i.emotions={},i.links=[],i.h1s=[],i.audios=[],i.videos=[],i.layer=u.getLayer(i.ch),i.mediaIndex=[],i.postCnt=0,i.multiPostCnt=0,i.isSelfCh=u.getIsSelfCh("",i.ch),i.createTime="",i.updateTime="",i}static getCh(e){return e&&e.ch&&""!==e.ch?e.ch:"/"}static getChTop(e){return""!==e?"/"+e.split("/")[1]:""}static getChs(e){let t=["/"];if(""!==e){const r="/"===e.slice(-1)?e:e+"/";if("/"!==r){const e=r.split("/"),n=e.length;let i="";for(var s=1;s<n;s++)""!==e[s]&&(i+=e[s],i="/"===i.slice(-1)?i:i+"/",i="/"===i.slice(0,1)?i:"/"+i,t.push(i))}}return t}static getHost(e){return e.indexOf(".")>=0?(e=e.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):o.default.domain}static getProtocol(e){return e.indexOf("http:")>=0?"http:":e.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(e,t){return e.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===t}static getLayer(e="/"){return e.split("/").length-1}static getMediaSrc(e){return a.default.getMediaSrc(e.protocol,e.ch)}static getMediaTagType(e){const t=u.getMediaSrc(e);return a.default.getMediaType(t,null)}static getFaviconFromWindow(e){if(e&&e.document){const t=e.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",e.document,null,2,null).stringValue,s="http://",r="https://",n=location.host;if(t.indexOf(s)||t.indexOf(r)){const e=s+n+(t||"/favicon.ico");return 1==e.split("//").length-1?e:t}return t}return""}static getStatus(e,t,s){let r={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return r.isCreate=u.getStatusCreate(s),r.isRequireUpsert=u.getStatusIsRequireUpsert(e,r.isCreate),r.isMultistream=u.getStatusIsMultistream(t),r.isToggleMultistream=u.getStatusIsToggleMultistream(t),r.isMediaCh=u.getStatusIsMediaCh(e.ch),r}static getStatusCreate(e){return!e}static getStatusIsRequireUpsert(e,t=!1){if(!t)return!0;if(e.updateTime){const t=e.updateTime.getTime?e.updateTime.getTime():e.updateTime,s=new Date,r=s.getFullYear(),n=s.getMonth(),i=s.getDate(),a=s.getHours();return s.getMinutes(),t<new Date(r,n,i,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(e){return void 0===e||void 0===e.dispThreadType||e.dispThreadType===a.default.dispThreadTypeMulti&&e.multistream}static getStatusIsMediaCh(e){return a.default.getIsMediaCh(e)}static getStatusIsToggleMultistream(e){return void 0!==e&&void 0!==e.actioned&&e.isToggleMultistream}static getContentTypeFromFindType(e){const t=u.findTypes[u.findTypeHtml],s=u.findTypes[u.findTypeMusic],r=u.findTypes[u.findTypeVideo];let n;if(e&&""!==e){let i="";e.indexOf(";")>0&&(i=e.split(";")[0]),(t.includes(e)||t.includes(i))&&(n=u.findTypeHtml),(s.includes(e)||s.includes(i))&&(n=u.findTypeMusic),(r.includes(e)||r.includes(i))&&(n=u.findTypeVideo)}return n}static getFindTypeFromSrc(e){const t=a.default.getMediaTypeFromSrc(e);return t.charAt(0).toUpperCase()+t.slice(1)}}t.default=u},978:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create(e)}static getMergedThreads(e,t){return e[t.ch]={...t},e}}t.default=i},7940:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),e}}t.default=i},7444:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(2749));class o extends n.default{static get defaultOffsetFindId(){return i.default.defaultFindId}constructor(e={}){super();const t=e&&e.uid?e.uid:"",s=e&&e.utype?e.utype:"",r=e&&e.tunedCh?e.tunedCh:"",n=!(!e||!e.multistreamed)&&e.multistreamed,i=e&&e.actioned?e.actioned:"",a=e&&e.offsetFindId?e.offsetFindId:o.defaultOffsetFindId,u=e&&e.offsetSingleFindId?e.offsetSingleFindId:o.defaultOffsetFindId,c=e&&e.offsetMultiFindId?e.offsetMultiFindId:o.defaultOffsetFindId,d=e&&e.offsetChildFindId?e.offsetChildFindId:o.defaultOffsetFindId,l=e&&e.offsetLogsFindId?e.offsetLogsFindId:o.defaultOffsetFindId;return e.requestLoginType&&e.requestLoginType,this.create({uid:t,utype:s,tunedCh:r,multistreamed:n,actioned:i,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:e}){return e&&e[0]&&e[0]._id?e[0]._id:i.default.defaultFindId}static getHref(e={}){return"undefined"!=typeof window&&window.location&&window.location.href,e&&e.href?e.href:"/"}}t.default=o},4546:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(5857),i=r(s(843)),o=r(s(8262));t.default=function(e={}){let t=[i.default.updateAction];return(0,n.createStore)(o.default,e,(0,n.applyMiddleware)(...t))}},8527:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8188)),i=r(s(1534)),o=r(s(6926)),a=r(s(8455)),u=r(s(9478)),c=r(s(5390)),d=r(s(1083)),l=r(s(8207)),h=r(s(8091)),p=r(s(7940)),f=r(s(7444));class T{constructor(e,t={}){this.bootOption=e,this.ranks=new l.default,this.menuLogs=new a.default(t.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new d.default,this.postsLogs=new u.default,this.analyze=new i.default,this.thread=new h.default(this.bootOption,t.thread),this.threadDetail=new h.default(this.bootOption,t.thread),this.app=new o.default(T.getAppParams(this.thread,this.bootOption,t)),this.tuneCh=new p.default,this.user=new f.default(T.getUserParams(this,t)),this.actionLog=new n.default}static getAppParams(e,t,s){return{isTransition:!0,rootTitle:e.title,...t,...e}}static getUserParams(e,t){return t&&t.user&&t.user.uid?{...t.user}:{dispThreadType:e.thread.ch===e.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}t.default=T},8421:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1223)),i=r(s(7771)),o=r(s(198));class a{constructor(e){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=e,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(e,t={},s){const r={id:this.id,type:n.default.WSAPI_TO_CLIENT_TYPE,ioType:i.default.API_SETUP,method:e,params:t,methodBack:s};this.worker.postMessage(r)}onMessage(e){const{id:t,type:s,ioType:r,method:i,params:o}=e.data;s===n.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(i,o)}onMessageError(e){console.warn(e)}}t.default=a,new a(self)},1223:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HandleRequestMethod=t.HandleMessageMethod=void 0;const n=r(s(7771));t.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(e){return 0===e.indexOf(n.default.API_TO_SERVER_REQUEST)?e.replace(n.default.API_TO_SERVER_REQUEST,n.default.API_TO_CLIENT_REQUEST):0===e.indexOf(n.default.SERVER_TO_API_EMIT)?e.replace(n.default.SERVER_TO_API_EMIT,n.default.API_TO_CLIENT_EMIT):0===e.indexOf(n.default.SERVER_TO_API_BROADCAST)?e.replace(n.default.SERVER_TO_API_BROADCAST,n.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${e}`}static getMessageTypes(e){const t=e.split(":");return{ioType:t[0].split("[")[1].replace("]",""),exeMethod:t[1]}}static convertExtToClientActionType(e){return`EXT_TO_CLIENT[ACTION]:${e}`}},t.HandleMessageMethod="handle",t.HandleRequestMethod="handle"},1216:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e={}){}static getType(e){return null===e?"Null":void 0===e?"Undefined":e.constructor.name}static isSet(e){return"Undefined"!==s.getType(e)&&"Null"!==s.getType(e)}static getBool(e){return"boolean"==typeof e?e:"true"===e}static isAnonymousFunc(e){const t=e.toString();return"function(){}"===t||"function() {}"===t||"function (){}"===t||"function () {}"===t||"()=>{}"===t}create(e){const t=this.constructor.name;return s.getType(e),Object.keys(e).forEach((r=>{let n,i,o=null,a=!1,u=!1,c=()=>{},d=null;if("Object"===s.getType(e[r])){n=e[r];let t=0===Object.keys(n).length;a=n.isAcceptNull?n.isAcceptNull:a,u=n.isAcceptBlank?n.isAcceptBlank:u,o=!t&&n.def?n.def:o,d=t||!n.value&&""!==n.value?n:n.value,d=t&&o?o:d,i=s.getType(d),c=n.valid?n.valid:c}else d=e[r],o=d,a=a,u=u,i=s.getType(d),c=c;const l=e=>{let n=null;const o=`${t}.${r}`,l=d,h=i,p=e,f=s.getType(e);return f!==i&&(n=`SCHEMA_TYPE : ${o} [validType: ${i}][paramsType: ${f}]`),a&&null===e&&(n=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),u&&""===e&&(n=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(c)&&c(e)&&(n=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:n}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:e=>{const t=l(d);if(null===_)return d=e,{...this,[r]:d};throw this.validWarn(t),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(e,t){try{const s=this[e];if(void 0===s)return!0;if(null===s)return!0;if(void 0===t)return!0;if(null===t)return!0;const{error:r}=this[e]=t;return!r&&(this[e]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+e),console.warn("BEFOER VALUE"),console.warn(typeof this[e]),console.warn(this[e]),console.warn("AFTER VALUE"),console.warn(typeof t),console.warn(t),`BAD CAN SET: ${s}`}}merge(e={},t=!0){try{const r=s.getType(e),n=Object.keys(e);if(n.length>0){let s={...this};return n.forEach((t=>{this[t]!==e[t]&&(this.canSet(t,e[t])?s[t]=e[t]:console.warn("BAD MERGE A : "+t+" "+e[t]+" "+typeof e[t]))})),"Array"===r?(s=Object.values(s),t?new this.constructor(s):s):t?new this.constructor(s):s}return new this.constructor}catch(t){if(this.errorThrow)throw console.warn(e),console.warn(t),`BAD MERGE B : ${s.getType(e)} ${t}`;return console.warn(e),console.warn(t),console.warn(`BAD MERGE C : ${s.getType(e)} ${t}`),e}}toJSON(e=this){let t={};return Object.keys(e).forEach((s=>{let r=e[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?t[s]=r.default:t[s]=r})),t}forEach(e){return Object.values(this).forEach(e)}concat(e){return this.returnImmutable(Object.values(this).concat(e),e)}map(e){return this.returnImmutable(Object.values(this).map(e),e)}filter(e){return this.returnImmutable(Object.values(this).filter(e),e)}reduce(e){return this.returnImmutable(Object.values(this).reduce(e),e)}find(e){return Object.values(this).find(e)}sort(e){return Object.values(this).sort(e)}push(e){const t=Object.values(this);return t.push(e),this.returnImmutable(t)}unshift(e){const t=Object.values(this);return t.unshift(e),this.returnImmutable(t)}getShift(){const e=Object.values(this).shift();return this.returnImmutable(e)}pop(e){const t=Object.values(this);return t.pop(e),this.returnImmutable(t)}returnImmutable(e,t=(()=>{})){return void 0===e?new this.constructor:0===e.length&&0===Object.keys(this).length?String(t).indexOf("createElement")>0?[]:new this.constructor(e):e[0]&&e[0].$$typeof&&"Symbol"===e[0].$$typeof.constructor.name?e:new this.constructor(e)}validWarn(e){console.warn("##########################"),console.warn("#"+e.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(e.validType),console.warn("### initializedValidValue"),console.warn(e.validValue),console.warn("### paramsType"),console.warn(e.paramsType),console.warn("### paramsValue"),console.warn(e.paramsValue),console.warn("##########################")}}t.default=s},7771:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${i.API_REQUEST_TYPE}]${i.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${i.API_RESPONSE_TYPE_EMIT}]${i.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${i.API_RESPONSE_TYPE_BROADCAST}]${i.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${i.API_REQUEST_TYPE}]${i.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${i.API_RESPONSE_TYPE_EMIT}]${i.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${i.API_RESPONSE_TYPE_BROADCAST}]${i.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tunedCh","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(e){const t=e.split(i.METHOD_COLON),s=t[0].split("[")[0];let r;return r=t[0].indexOf(`[${i.API_REQUEST_TYPE}]`)>0?i.API_REQUEST_TYPE:t[0].indexOf(`[${i.API_RESPONSE_TYPE_EMIT}]`)>0?i.API_RESPONSE_TYPE_EMIT:i.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:t[1]}}static updateCallbackExeConditionMap(e){let t={emit:!0,broadcast:!0};return i.map[e]&&(t.emit=!(Object.keys(i.map[e].responseEmitState).length>0),t.broadcast=!(Object.keys(i.map[e].responseBroadcastState).length>0)),t}static convertServerToApiIoType(e,t){return t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_REQUEST_TYPE}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_REQUEST_TYPE:t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_RESPONSE_TYPE_BROADCAST}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_RESPONSE_TYPE_BROADCAST:t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_RESPONSE_TYPE_EMIT}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_RESPONSE_TYPE_EMIT:i.API_SETUP}static convertExtToClientActionType(e,t){return i.convertApiToClientActionType(t)}static convertApiToClientActionType(e){return 0===e.indexOf(i.API_TO_SERVER_REQUEST)?e.replace(i.API_TO_SERVER_REQUEST,i.API_TO_CLIENT_REQUEST):0===e.indexOf(i.SERVER_TO_API_EMIT)?e.replace(i.SERVER_TO_API_EMIT,i.API_TO_CLIENT_EMIT):0===e.indexOf(i.SERVER_TO_API_BROADCAST)?e.replace(i.SERVER_TO_API_BROADCAST,i.API_TO_CLIENT_BROADCAST):e}static getRequestState(e,t,s){const r=e.replace(i.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=i.map[r];let u={[i.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((e=>{u[e]||(u[e]={}),a[e].forEach((r=>{if(!u[e][r]){let i=t[e][r];s&&s[e]&&n.default.isSet(s[e][r])&&(i=s[e][r]),u[e][r]=i}}))})),Object.keys(o).forEach((e=>{u[e]||(u[e]={}),o[e].forEach((t=>{u[e][t]||(u[e][t]=s)}))})),u}static getResponseState(e,t,s){const r=t.type,n=i.map[r][`response${e}State`];let o={[i.REDUX_ACTION_KEY]:r};return Object.keys(n).forEach((e=>{if(!s[e])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${t.type}: ${e}`;{const r=n[e];let i=s[e];switch(i.constructor.name){case"model":i=i.toJSON(),delete i._id,delete i.__v}"*"===r?o={...o,[e]:i}:r.forEach((r=>{if(void 0===s[e][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${t.type}: ${e}.${r}`;o={...o,[e]:{...o[e],[r]:s[e][r]}}}))}})),o}static getRequestActionState(e,t=null,s=null){return"string"==typeof t&&null===s?{type:e}:"object"==typeof t&&"object"==typeof s?{...t,...s,type:e}:"string"==typeof t&&"object"==typeof s?{...s,type:e}:{...t,type:e}}}t.default=i},300:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6894)),i=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_DOMAIN:c,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=n.default.hasOwnProperty("hostname")?n.default.hostname():d,f=function(e){if("browser"===i.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const e=Number(location.port);return e===o.default.PORTS.DEVELOPMENT_CLIENT||e===o.default.PORTS.DEVELOPMENT_API||e===o.default.PORTS.DEVELOPMENT_COVER||e===o.default.PORTS.DEVELOPMENT_COMPONENTS||e===o.default.PORTS.DEVELOPMENT_TUNE?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return e.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js",cover:"talkn.cover.js",tune:"talkn.tune.js",components:"talkn.components.js"},E=f===u,_=f===a?c:d,g=`${l.WWW}.${_}`,y=`${l.COVER}.${_}`,m=`${l.API}.${_}`,C=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${m}/v1`,S=E?`${_}:${h.DEVELOPMENT_CLIENT}/${T.client}`:`${l.CLIENT}.${_}`,P=`${l.DESC}.${_}`,O=`${l.PORTAL}.${_}`,I=`${l.ASSETS}.${_}`,A=`${l.AUTO}.${_}`,b=`${l.EXT}.${_}`,R=`${l.COMP}.${_}`,v=`${l.OWN}.${_}`,M=`${l.NEWS}.${_}`,w=`${l.TUNE}.${_}`,D=`${l.COMPONENTS}.${_}`,L=`${I}/img/`,N={domain:_,isDev:E,env:f,files:T,hostName:p,apiURL:m,apiAccessURL:C,coverURL:y,wwwURL:g,descURL:P,portalURL:O,clientURL:S,assetsURL:I,autoURL:A,extURL:b,compURL:R,ownURL:v,newsURL:M,tuneURL:w,bannerURL:`${l.BANNER}.${_}`,componentsURL:D,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:L,assetsCoverPath:`${I}/cover/`,assetsIconPath:`${I}/icon/`,assetsJsPath:`${I}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],defaultBirthdayUnixtime:1e12,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${L}talkn_logo_html.png`,Music:`//${L}talkn_logo_music.png`,Video:`//${L}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};t.default={...N}},1665:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8399)),i={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:n.default.env.HOSTNAME?n.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_COVER:8e3,DEVELOPMENT_API:8001,DEVELOPMENT_COMPONENTS:8002,DEVELOPMENT_TUNE:8003,DEVELOPMENT_CLIENT:8080,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",COVER:"cover",RANK:"rank",EXT:"ext",COMPONENTS:"components",TUNE:"tune",TRANSACTION:"transaction"},APP_TYPES:{CLIENT:"CLIENT",PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",COVER:"COVER",COMPONENTS:"COMPONENTS",TUNE:"TUNE"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",talknRankJs:"talkn.rank.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};t.default=i},3365:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1025));class i{constructor(e=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(i.inputs).forEach((e=>{i.inputs[e].forEach((t=>{this.belongCoverTypes[t]=e}))})),Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(e);const t=i.TYPES[e];this.idKeyTypes[t.ID]=t.LABEL})),this.model=n.default,this.balances={plain:n.default.Plain.getSaveBalance,russell:n.default.Russell.getSaveBalance,russellSimple:n.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(e=i.defaultModelKey,t=0,s=!0){let r=0,n={};switch(e){case"plain":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":n={6:5,10:5,20:5,30:5,50:5};break;case"russell":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(n),a=o.length-1;for(let e=0;e<a;e++){const s=o[e],i=n[s];if(s>t)break;r=i}return s?r+1:r}static get inputs(){return{[i.TYPES.LIKE.LABEL]:[1,2,3,4,5],[i.TYPES.MONEY.LABEL]:[100],[i.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[i.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[i.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[i.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[i.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[i.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[i.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[i.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}t.default=i},2703:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{static get TYPES(){return[n.default.TYPES.LIKE]}static getSaveBalance(e){const t={1:[{[n.default.TYPES.LIKE.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},6663:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{constructor(e){this.typesArray=[],Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(i.TYPES[e].LABEL)}))}static get TYPES(){return[n.default.TYPES.SUPRISE,n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.GLAD,n.default.TYPES.SATISFACTION,n.default.TYPES.COMFORT,n.default.TYPES.RELAX,n.default.TYPES.TIRED,n.default.TYPES.SLEEPY,n.default.TYPES.SLACK,n.default.TYPES.BORING,n.default.TYPES.MELANCHOLY,n.default.TYPES.SAD,n.default.TYPES.UNPLEASANT,n.default.TYPES.FRUSTRATED,n.default.TYPES.DISSATISFIED,n.default.TYPES.ANGER,n.default.TYPES.WORRY,n.default.TYPES.FEAR]}static getSaveBalance(e){const t={1001:[{[n.default.TYPES.SUPRISE.ID]:1}],1002:[{[n.default.TYPES.SUPRISE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.GLAD.ID]:1}],1402:[{[n.default.TYPES.GLAD.ID]:1}],1501:[{[n.default.TYPES.SATISFACTION.ID]:1}],1502:[{[n.default.TYPES.SATISFACTION.ID]:1}],1503:[{[n.default.TYPES.SATISFACTION.ID]:1}],1504:[{[n.default.TYPES.SATISFACTION.ID]:1}],1601:[{[n.default.TYPES.COMFORT.ID]:1}],1602:[{[n.default.TYPES.COMFORT.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.BORING.ID]:1}],2102:[{[n.default.TYPES.BORING.ID]:1}],2103:[{[n.default.TYPES.BORING.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.SAD.ID]:1}],2302:[{[n.default.TYPES.SAD.ID]:1}],2303:[{[n.default.TYPES.SAD.ID]:1}],2401:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY.ID]:1}],2802:[{[n.default.TYPES.WORRY.ID]:1}],2803:[{[n.default.TYPES.WORRY.ID]:1}],2804:[{[n.default.TYPES.WORRY.ID]:1}],2805:[{[n.default.TYPES.WORRY.ID]:1}],2806:[{[n.default.TYPES.WORRY.ID]:1}],2807:[{[n.default.TYPES.WORRY.ID]:1}],2901:[{[n.default.TYPES.FEAR.ID]:1}],2902:[{[n.default.TYPES.FEAR.ID]:1}],2903:[{[n.default.TYPES.FEAR.ID]:1}],2904:[{[n.default.TYPES.FEAR.ID]:1}],2905:[{[n.default.TYPES.FEAR.ID]:1}],2906:[{[n.default.TYPES.FEAR.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},3005:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{constructor(e){this.typesArray=[],Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(i.TYPES[e].LABEL)}))}static get TYPES(){return[n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.RELAX,n.default.TYPES.SLACK,n.default.TYPES.MELANCHOLY,n.default.TYPES.ANGER,n.default.TYPES.WORRY_FEAR]}static getSaveBalance(e){const t={1001:[{[n.default.TYPES.EXCITE.ID]:1}],1002:[{[n.default.TYPES.EXCITE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.JOY.ID]:1}],1402:[{[n.default.TYPES.JOY.ID]:1}],1501:[{[n.default.TYPES.JOY.ID]:1}],1502:[{[n.default.TYPES.JOY.ID]:1}],1503:[{[n.default.TYPES.JOY.ID]:1}],1504:[{[n.default.TYPES.JOY.ID]:1}],1601:[{[n.default.TYPES.RELAX.ID]:1}],1602:[{[n.default.TYPES.RELAX.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.SLACK.ID]:1}],2102:[{[n.default.TYPES.SLACK.ID]:1}],2103:[{[n.default.TYPES.SLACK.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[n.default.TYPES.ANGER.ID]:1}],2602:[{[n.default.TYPES.ANGER.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[n.default.TYPES.WORRY_FEAR.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},1025:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2703)),i=r(s(6663)),o=r(s(3005));t.default={Plain:n.default,Russell:i.default,RussellSimple:o.default}},6894:(e,t,s)=>{e.exports=s(6894)},8399:e=>{var t,s,r=e.exports={};function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(e){if(t===setTimeout)return setTimeout(e,0);if((t===n||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(s){try{return t.call(null,e,0)}catch(s){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:n}catch(e){t=n}try{s="function"==typeof clearTimeout?clearTimeout:i}catch(e){s=i}}();var a,u=[],c=!1,d=-1;function l(){c&&a&&(c=!1,a.length?u=a.concat(u):d=-1,u.length&&h())}function h(){if(!c){var e=o(l);c=!0;for(var t=u.length;t;){for(a=u,u=[];++d<t;)a&&a[d].run();d=-1,t=u.length}a=null,c=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===i||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)t[s-1]=arguments[s];u.push(new p(e,t)),1!==u.length||c||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5159:(e,t)=>{"use strict";function s(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Object.defineProperty(t,"__esModule",{value:!0}),t.Backoff=void 0,t.Backoff=s,s.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),s=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-s:e+s}return 0|Math.min(e,this.max)},s.prototype.reset=function(){this.attempts=0},s.prototype.setMin=function(e){this.ms=e},s.prototype.setMax=function(e){this.max=e},s.prototype.setJitter=function(e){this.jitter=e}},7046:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.connect=t.io=t.Socket=t.Manager=t.protocol=void 0;const n=s(3084),i=s(4168);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return i.Manager}});const o=s(8312);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return o.Socket}});const a=r(s(3669)).default("socket.io-client"),u={};function c(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const s=n.url(e,t.path||"/socket.io"),r=s.source,o=s.id,c=s.path,d=u[o]&&c in u[o].nsps;let l;return t.forceNew||t["force new connection"]||!1===t.multiplex||d?(a("ignoring socket cache for %s",r),l=new i.Manager(r,t)):(u[o]||(a("new io instance for %s",r),u[o]=new i.Manager(r,t)),l=u[o]),s.query&&!t.query&&(t.query=s.queryKey),l.socket(s.path,t)}t.io=c,t.connect=c,t.default=c,Object.assign(c,{Manager:i.Manager,Socket:o.Socket,io:c,connect:c});var d=s(7116);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return d.protocol}}),e.exports=c},4168:function(e,t,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return n(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const a=s(9684),u=s(8312),c=i(s(7116)),d=s(7149),l=s(5159),h=s(5260),p=o(s(3669)).default("socket.io-client:manager");class f extends h.Emitter{constructor(e,t){var s;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,a.installTimerFunctions(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=t.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new l.Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||c;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(p("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=new a.Socket(this.uri,this.opts);const t=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const r=d.on(t,"open",(function(){s.onopen(),e&&e()})),n=d.on(t,"error",(t=>{p("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",t),e?e(t):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;p("connect attempt will timeout after %d",e),0===e&&r();const s=this.setTimeoutFn((()=>{p("connect attempt timed out after %d",e),r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(r),this.subs.push(n),this}connect(e){return this.open(e)}onopen(){p("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(d.on(e,"ping",this.onping.bind(this)),d.on(e,"data",this.ondata.bind(this)),d.on(e,"error",this.onerror.bind(this)),d.on(e,"close",this.onclose.bind(this)),d.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){p("error",e),this.emitReserved("error",e)}socket(e,t){let s=this.nsps[e];return s||(s=new u.Socket(this,e,t),this.nsps[e]=s),s}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void p("socket %s is still active, skipping close",e);this._close()}_packet(e){p("writing packet %j",e);const t=this.encoder.encode(e);for(let s=0;s<t.length;s++)this.engine.write(t[s],e.options)}cleanup(){p("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){p("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){p("closed due to %s",e),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();p("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const s=this.setTimeoutFn((()=>{e.skipReconnect||(p("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(p("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(p("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=f},7149:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,s){return e.on(t,s),function(){e.off(t,s)}}},8312:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const n=s(7116),i=s(7149),o=s(5260),a=r(s(3669)).default("socket.io-client:socket"),u=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends o.Emitter{constructor(e,t,s){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",this.onopen.bind(this)),i.on(e,"packet",this.onpacket.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(u.hasOwnProperty(e))throw new Error(\'"\'+e+\'" is a reserved event name\');t.unshift(e);const s={type:n.PacketType.EVENT,data:t,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;a("emitting packet with ack id %d",e);const r=t.pop();this._registerAckCallback(e,r),s.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s):a("discard packet as the transport is not currently writable"),this.flags={},this}_registerAckCallback(e,t){const s=this.flags.timeout;if(void 0===s)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(a("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));a("event with ack id %d has timed out after %d ms",e,s),t.call(this,new Error("operation has timed out"))}),s);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){a("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:n.PacketType.CONNECT,data:e})})):this.packet({type:n.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){a("close (%s)",e),this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case n.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case n.PacketType.EVENT:case n.PacketType.BINARY_EVENT:this.onevent(e);break;case n.PacketType.ACK:case n.PacketType.BINARY_ACK:this.onack(e);break;case n.PacketType.DISCONNECT:this.ondisconnect();break;case n.PacketType.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];a("emitting event %j",t),null!=e.id&&(a("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const s of t)s.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let s=!1;return function(...r){s||(s=!0,a("sending ack %j",r),t.packet({type:n.PacketType.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(a("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):a("bad ack %s",e.id)}onconnect(e){a("socket connected with id %s",e),this.id=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){a("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(a("performing disconnect (%s)",this.nsp),this.packet({type:n.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const s of t)s.apply(this,e.data)}}}t.Socket=c},3084:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const n=s(9684),i=r(s(3669)).default("socket.io-client:url");t.url=function(e,t="",s){let r=e;s=s||"undefined"!=typeof location&&location,null==e&&(e=s.protocol+"//"+s.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?s.protocol+e:s.host+e),/^(https?|wss?):\\/\\//.test(e)||(i("protocol-less url %s",e),e=void 0!==s?s.protocol+"//"+e:"https://"+e),i("parse %s",e),r=n.parse(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const o=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+o+":"+r.port+t,r.href=r.protocol+"://"+o+(s&&s.port===r.port?"":":"+r.port),r}},2319:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasCORS=void 0;let s=!1;try{s="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}t.hasCORS=s},6879:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0,t.encode=function(e){let t="";for(let s in e)e.hasOwnProperty(s)&&(t.length&&(t+="&"),t+=encodeURIComponent(s)+"="+encodeURIComponent(e[s]));return t},t.decode=function(e){let t={},s=e.split("&");for(let e=0,r=s.length;e<r;e++){let r=s[e].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}},5199:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;const s=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.parse=function(e){const t=e,n=e.indexOf("["),i=e.indexOf("]");-1!=n&&-1!=i&&(e=e.substring(0,n)+e.substring(n,i).replace(/:/g,";")+e.substring(i,e.length));let o=s.exec(e||""),a={},u=14;for(;u--;)a[r[u]]=o[u]||"";return-1!=n&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a.pathNames=function(e,t){const s=t.replace(/\\/{2,9}/g,"/").split("/");return"/"!=t.substr(0,1)&&0!==t.length||s.splice(0,1),"/"==t.substr(t.length-1,1)&&s.splice(s.length-1,1),s}(0,a.path),a.queryKey=function(e,t){const s={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(s[t]=r)})),s}(0,a.query),a}},296:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yeast=t.decode=t.encode=void 0;const s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={};let n,i=0,o=0;function a(e){let t="";do{t=s[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}for(t.encode=a,t.decode=function(e){let t=0;for(o=0;o<e.length;o++)t=64*t+r[e.charAt(o)];return t},t.yeast=function(){const e=a(+new Date);return e!==n?(i=0,n=e):e+"."+a(i++)};o<64;o++)r[s[o]]=o},7400:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.globalThisShim=void 0,t.globalThisShim="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},9684:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.installTimerFunctions=t.transports=t.Transport=t.protocol=t.Socket=void 0;const r=s(2350);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return r.Socket}}),t.protocol=r.Socket.protocol;var n=s(4556);Object.defineProperty(t,"Transport",{enumerable:!0,get:function(){return n.Transport}});var i=s(2345);Object.defineProperty(t,"transports",{enumerable:!0,get:function(){return i.transports}});var o=s(8419);Object.defineProperty(t,"installTimerFunctions",{enumerable:!0,get:function(){return o.installTimerFunctions}});var a=s(5199);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return a.parse}})},2350:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const n=s(2345),i=s(8419),o=s(6879),a=s(5199),u=r(s(6930)),c=s(5260),d=s(8075),l=(0,u.default)("engine.io-client:socket");class h extends c.Emitter{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=(0,a.parse)(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=(0,a.parse)(t.host).host),(0,i.installTimerFunctions)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=(0,o.decode)(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){l(\'creating transport "%s"\',e);const t=Object.assign({},this.opts.query);t.EIO=d.protocol,t.transport=e,this.id&&(t.sid=this.id);const s=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return l("options: %j",s),new n.transports[e](s)}open(){let e;if(this.opts.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return l("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){l("setting transport %s",e.name),this.transport&&(l("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(e=>this.onClose("transport close",e)))}probe(e){l(\'probing transport "%s"\',e);let t=this.createTransport(e),s=!1;h.priorWebsocketSuccess=!1;const r=()=>{s||(l(\'probe transport "%s" opened\',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(l(\'probe transport "%s" pong\',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;h.priorWebsocketSuccess="websocket"===t.name,l(\'pausing current transport "%s"\',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(l("changing transport and sending upgrade packet"),c(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{l(\'probe transport "%s" failed\',e);const s=new Error("probe error");s.transport=t.name,this.emitReserved("upgradeError",s)}})))};function n(){s||(s=!0,c(),t.close(),t=null)}const i=s=>{const r=new Error("probe error: "+s);r.transport=t.name,n(),l(\'probe transport "%s" failed because of error: %s\',e,s),this.emitReserved("upgradeError",r)};function o(){i("transport closed")}function a(){i("socket closed")}function u(e){t&&e.name!==t.name&&(l(\'"%s" works - aborting "%s"\',e.name,t.name),n())}const c=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",o),this.off("close",a),this.off("upgrading",u)};t.once("open",r),t.once("error",i),t.once("close",o),this.once("close",a),this.once("upgrading",u),t.open()}onOpen(){if(l("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){l("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(l(\'socket receive: type "%s", data "%s"\',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else l(\'packet received with socket readyState "%s"\',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();l("flushing %d packets in socket",e.length),this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const s=this.writeBuffer[t].data;if(s&&(e+=(0,i.byteLength)(s)),t>0&&e>this.maxPayload)return l("only send %d out of %d packets",t,this.writeBuffer.length),this.writeBuffer.slice(0,t);e+=2}return l("payload size is %d (max: %d)",e,this.maxPayload),this.writeBuffer}write(e,t,s){return this.sendPacket("message",e,t,s),this}send(e,t,s){return this.sendPacket("message",e,t,s),this}sendPacket(e,t,s,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const n={type:e,data:t,options:s};this.emitReserved("packetCreate",n),this.writeBuffer.push(n),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),l("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},s=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():e()})):this.upgrading?s():e()),this}onError(e){l("socket error %j",e),h.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(l(\'socket close with reason: "%s"\',e),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let s=0;const r=e.length;for(;s<r;s++)~this.transports.indexOf(e[s])&&t.push(e[s]);return t}}t.Socket=h,h.protocol=d.protocol},4556:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Transport=void 0;const n=s(8075),i=s(5260),o=s(8419),a=(0,r(s(6930)).default)("engine.io-client:transport");class u extends Error{constructor(e,t,s){super(e),this.description=t,this.context=s,this.type="TransportError"}}class c extends i.Emitter{constructor(e){super(),this.writable=!1,(0,o.installTimerFunctions)(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t,s){return super.emitReserved("error",new u(e,t,s)),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):a("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=(0,n.decodePacket)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}}t.Transport=c},2345:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transports=void 0;const r=s(9044),n=s(8275);t.transports={websocket:n.WS,polling:r.Polling}},9044:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.Polling=void 0;const n=s(4556),i=r(s(6930)),o=s(296),a=s(6879),u=s(8075),c=s(1696),d=s(5260),l=s(8419),h=s(7400),p=(0,i.default)("engine.io-client:polling");function f(){}const T=null!=new c.XHR({xdomain:!1}).responseType;class E extends n.Transport{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let s=location.port;s||(s=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||s!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=T&&!t}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{p("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(p("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){p("pre-pause polling complete"),--e||t()}))),this.writable||(p("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){p("pre-pause writing complete"),--e||t()})))}else t()}poll(){p("polling"),this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){p("polling got data %s",e),(0,u.decodePayload)(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState?this.poll():p(\'ignoring poll - transport state "%s"\',this.readyState))}doClose(){const e=()=>{p("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(p("transport open - closing"),e()):(p("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,(0,u.encodePayload)(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,o.yeast)()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const r=(0,a.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new _(this.uri(),e)}doWrite(e,t){const s=this.request({method:"POST",data:e});s.on("success",t),s.on("error",((e,t)=>{this.onError("xhr post error",e,t)}))}doPoll(){p("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,t)=>{this.onError("xhr poll error",e,t)})),this.pollXhr=e}}t.Polling=E;class _ extends d.Emitter{constructor(e,t){super(),(0,l.installTimerFunctions)(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=(0,l.pick)(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new c.XHR(e);try{p("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},p("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=_.requestsCount++,_.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=f,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete _.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(t.Request=_,_.requestsCount=0,_.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",g);else if("function"==typeof addEventListener){const e="onpagehide"in h.globalThisShim?"pagehide":"unload";addEventListener(e,g,!1)}function g(){for(let e in _.requests)_.requests.hasOwnProperty(e)&&_.requests[e].abort()}},3884:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultBinaryType=t.usingBrowserWebSocket=t.WebSocket=t.nextTick=void 0;const r=s(7400);t.nextTick="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),t.WebSocket=r.globalThisShim.WebSocket||r.globalThisShim.MozWebSocket,t.usingBrowserWebSocket=!0,t.defaultBinaryType="arraybuffer"},8275:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WS=void 0;const n=s(4556),i=s(6879),o=s(296),a=s(8419),u=s(3884),c=r(s(6930)),d=s(8075),l=(0,c.default)("engine.io-client:websocket"),h="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class p extends n.Transport{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,s=h?{}:(0,a.pick)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u.usingBrowserWebSocket&&!h?t?new u.WebSocket(e,t):new u.WebSocket(e):new u.WebSocket(e,t,s)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType||u.defaultBinaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],r=t===e.length-1;(0,d.encodePacket)(s,this.supportsBinary,(e=>{const t={};!u.usingBrowserWebSocket&&(s.options&&(t.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u.usingBrowserWebSocket?this.ws.send(e):this.ws.send(e,t)}catch(e){l("websocket closed before onclose event")}r&&(0,u.nextTick)((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,o.yeast)()),this.supportsBinary||(e.b64=1);const r=(0,i.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}check(){return!!u.WebSocket}}t.WS=p},1696:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHR=void 0;const r=s(2319),n=s(7400);t.XHR=function(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r.hasCORS))return new XMLHttpRequest}catch(e){}if(!t)try{return new(n.globalThisShim[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},8419:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.byteLength=t.installTimerFunctions=t.pick=void 0;const r=s(7400);t.pick=function(e,...t){return t.reduce(((t,s)=>(e.hasOwnProperty(s)&&(t[s]=e[s]),t)),{})};const n=setTimeout,i=clearTimeout;t.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=n.bind(r.globalThisShim),e.clearTimeoutFn=i.bind(r.globalThisShim)):(e.setTimeoutFn=setTimeout.bind(r.globalThisShim),e.clearTimeoutFn=clearTimeout.bind(r.globalThisShim))},t.byteLength=function(e){return"string"==typeof e?function(e){let t=0,s=0;for(let r=0,n=e.length;r<n;r++)t=e.charCodeAt(r),t<128?s+=1:t<2048?s+=2:t<55296||t>=57344?s+=3:(r++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))}},7193:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_PACKET=t.PACKET_TYPES_REVERSE=t.PACKET_TYPES=void 0;const s=Object.create(null);t.PACKET_TYPES=s,s.open="0",s.close="1",s.ping="2",s.pong="3",s.message="4",s.upgrade="5",s.noop="6";const r=Object.create(null);t.PACKET_TYPES_REVERSE=r,Object.keys(s).forEach((e=>{r[s[e]]=e})),t.ERROR_PACKET={type:"error",data:"parser error"}},482:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0;const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<s.length;e++)r[s.charCodeAt(e)]=e;t.encode=e=>{let t,r=new Uint8Array(e),n=r.length,i="";for(t=0;t<n;t+=3)i+=s[r[t]>>2],i+=s[(3&r[t])<<4|r[t+1]>>4],i+=s[(15&r[t+1])<<2|r[t+2]>>6],i+=s[63&r[t+2]];return n%3==2?i=i.substring(0,i.length-1)+"=":n%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=e=>{let t,s,n,i,o,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const d=new ArrayBuffer(a),l=new Uint8Array(d);for(t=0;t<u;t+=4)s=r[e.charCodeAt(t)],n=r[e.charCodeAt(t+1)],i=r[e.charCodeAt(t+2)],o=r[e.charCodeAt(t+3)],l[c++]=s<<2|n>>4,l[c++]=(15&n)<<4|i>>2,l[c++]=(3&i)<<6|63&o;return d}},5822:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(7193),n=s(482),i="function"==typeof ArrayBuffer,o=(e,t)=>{if(i){const s=(0,n.decode)(e);return a(s,t)}return{base64:!0,data:e}},a=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};t.default=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const s=e.charAt(0);return"b"===s?{type:"message",data:o(e.substring(1),t)}:r.PACKET_TYPES_REVERSE[s]?e.length>1?{type:r.PACKET_TYPES_REVERSE[s],data:e.substring(1)}:{type:r.PACKET_TYPES_REVERSE[s]}:r.ERROR_PACKET}},4591:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(7193),n="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,o=(e,t)=>{const s=new FileReader;return s.onload=function(){const e=s.result.split(",")[1];t("b"+e)},s.readAsDataURL(e)};t.default=({type:e,data:t},s,a)=>{return n&&t instanceof Blob?s?a(t):o(t,a):i&&(t instanceof ArrayBuffer||(u=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(u):u&&u.buffer instanceof ArrayBuffer))?s?a(t):o(new Blob([t]),a):a(r.PACKET_TYPES[e]+(t||""));var u}},8075:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePayload=t.decodePacket=t.encodePayload=t.encodePacket=t.protocol=void 0;const r=s(4591);t.encodePacket=r.default;const n=s(5822);t.decodePacket=n.default;const i=String.fromCharCode(30);t.encodePayload=(e,t)=>{const s=e.length,n=new Array(s);let o=0;e.forEach(((e,a)=>{(0,r.default)(e,!1,(e=>{n[a]=e,++o===s&&t(n.join(i))}))}))},t.decodePayload=(e,t)=>{const s=e.split(i),r=[];for(let e=0;e<s.length;e++){const i=(0,n.default)(s[e],t);if(r.push(i),"error"===i.type)break}return r},t.protocol=4},3155:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=s(790);function n(e,t){if(!e)return e;if(r.isBinary(e)){const s={_placeholder:!0,num:t.length};return t.push(e),s}if(Array.isArray(e)){const s=new Array(e.length);for(let r=0;r<e.length;r++)s[r]=n(e[r],t);return s}if("object"==typeof e&&!(e instanceof Date)){const s={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(s[r]=n(e[r],t));return s}return e}function i(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let s=0;s<e.length;s++)e[s]=i(e[s],t);else if("object"==typeof e)for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&(e[s]=i(e[s],t));return e}t.deconstructPacket=function(e){const t=[],s=e.data,r=e;return r.data=n(s,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=i(e.data,t),e.attachments=void 0,e}},7116:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=s(5260),n=s(3155),i=s(790),o=s(1517).default("socket.io-parser");var a;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(a=t.PacketType||(t.PacketType={})),t.Encoder=class{constructor(e){this.replacer=e}encode(e){return o("encoding packet %j",e),e.type!==a.EVENT&&e.type!==a.ACK||!i.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==a.BINARY_EVENT&&e.type!==a.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),o("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=n.deconstructPacket(e),s=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(s),r}};class u extends r.Emitter{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===a.BINARY_EVENT||t.type===a.BINARY_ACK?(this.reconstructor=new c(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!i.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const s={type:Number(e.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const n=e.substring(r,t);if(n!=Number(n)||"-"!==e.charAt(t))throw new Error("Illegal attachments");s.attachments=Number(n)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);s.nsp=e.substring(r,t)}else s.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const s=e.charAt(t);if(null==s||Number(s)!=s){--t;break}if(t===e.length)break}s.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(!u.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",e,s),s}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case a.CONNECT:return"object"==typeof t;case a.DISCONNECT:return void 0===t;case a.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=u;class c{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=n.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},790:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,n="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(e){return s&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||n&&e instanceof Blob||i&&e instanceof File}t.isBinary=o,t.hasBinary=function e(t,s){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let s=0,r=t.length;s<r;s++)if(e(t[s]))return!0;return!1}if(o(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const s in t)if(Object.prototype.hasOwnProperty.call(t,s)&&e(t[s]))return!0;return!1}},5260:(e,t,s)=>{"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}s.r(t),s.d(t,{Emitter:()=>r}),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function s(){this.off(e,s),t.apply(this,arguments)}return s.fn=t,this.on(e,s),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var n=0;n<r.length;n++)if((s=r[n])===t||s.fn===t){r.splice(n,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),s=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(s){r=0;for(var n=(s=s.slice(0)).length;r<n;++r)s[r].apply(this,t)}return this},r.prototype.emitReserved=r.prototype.emit,r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}}},t={};function s(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,s),i.exports}s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(8421)})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,',"Worker",void 0,F.p+"ws.api.worker.js")}},477:I=>{"use strict";I.exports=function(I,g,F,B){var C=self||window;try{try{var c;try{c=new C.Blob([I])}catch(g){(c=new(C.BlobBuilder||C.WebKitBlobBuilder||C.MozBlobBuilder||C.MSBlobBuilder)).append(I),c=c.getBlob()}var U=C.URL||C.webkitURL,Q=U.createObjectURL(c),t=new C[g](Q,F);return U.revokeObjectURL(Q),t}catch(B){return new C[g]("data:application/javascript,".concat(encodeURIComponent(I)),F)}}catch(I){if(!B)throw Error("Inline worker is not supported");return new C[g](B,F)}}},6894:(I,g,F)=>{I.exports=F(6894)},8399:I=>{var g,F,B=I.exports={};function C(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function U(I){if(g===setTimeout)return setTimeout(I,0);if((g===C||!g)&&setTimeout)return g=setTimeout,setTimeout(I,0);try{return g(I,0)}catch(F){try{return g.call(null,I,0)}catch(F){return g.call(this,I,0)}}}!function(){try{g="function"==typeof setTimeout?setTimeout:C}catch(I){g=C}try{F="function"==typeof clearTimeout?clearTimeout:c}catch(I){F=c}}();var Q,t=[],l=!1,s=-1;function i(){l&&Q&&(l=!1,Q.length?t=Q.concat(t):s=-1,t.length&&d())}function d(){if(!l){var I=U(i);l=!0;for(var g=t.length;g;){for(Q=t,t=[];++s<g;)Q&&Q[s].run();s=-1,g=t.length}Q=null,l=!1,function(I){if(F===clearTimeout)return clearTimeout(I);if((F===c||!F)&&clearTimeout)return F=clearTimeout,clearTimeout(I);try{F(I)}catch(g){try{return F.call(null,I)}catch(g){return F.call(this,I)}}}(I)}}function V(I,g){this.fun=I,this.array=g}function e(){}B.nextTick=function(I){var g=new Array(arguments.length-1);if(arguments.length>1)for(var F=1;F<arguments.length;F++)g[F-1]=arguments[F];t.push(new V(I,g)),1!==t.length||l||U(d)},V.prototype.run=function(){this.fun.apply(null,this.array)},B.title="browser",B.browser=!0,B.env={},B.argv=[],B.version="",B.versions={},B.on=e,B.addListener=e,B.once=e,B.off=e,B.removeListener=e,B.removeAllListeners=e,B.emit=e,B.prependListener=e,B.prependOnceListener=e,B.listeners=function(I){return[]},B.binding=function(I){throw new Error("process.binding is not supported")},B.cwd=function(){return"/"},B.chdir=function(I){throw new Error("process.chdir is not supported")},B.umask=function(){return 0}}},g={};function F(B){var C=g[B];if(void 0!==C)return C.exports;var c=g[B]={exports:{}};return I[B].call(c.exports,c,c.exports,F),c.exports}F.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return F.d(g,{a:g}),g},F.d=(I,g)=>{for(var B in g)F.o(g,B)&&!F.o(I,B)&&Object.defineProperty(I,B,{enumerable:!0,get:g[B]})},F.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),F.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),F.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},(()=>{var I;F.g.importScripts&&(I=F.g.location+"");var g=F.g.document;if(!I&&g&&(g.currentScript&&(I=g.currentScript.src),!I)){var B=g.getElementsByTagName("script");B.length&&(I=B[B.length-1].src)}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),F.p=I})(),F(5719)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEJvWixFQUFvQlEsRUFBSSxDQUFDMXZCLEVBQUs4dkIsSUFBVTN2QixPQUFPNnRCLFVBQVV0SCxlQUFlclMsS0FBS3JVLEVBQUs4dkIsR0NDbEZaLEVBQW9CYSxFQUFLMUUsSUFDSCxvQkFBWHRwQixRQUEwQkEsT0FBT2l1QixhQUMxQzd2QixPQUFPQyxlQUFlaXJCLEVBQVN0cEIsT0FBT2l1QixZQUFhLENBQUU5dkIsTUFBTyxXQUU3REMsT0FBT0MsZUFBZWlyQixFQUFTLGFBQWMsQ0FBRW5yQixPQUFPLEssTUNMdkQsSUFBSSt2QixFQUNBZixFQUFvQlMsRUFBRU8sZ0JBQWVELEVBQVlmLEVBQW9CUyxFQUFFMWtCLFNBQVcsSUFDdEYsSUFBSXpELEVBQVcwbkIsRUFBb0JTLEVBQUVub0IsU0FDckMsSUFBS3lvQixHQUFhem9CLElBQ2JBLEVBQVM2VyxnQkFDWjRSLEVBQVl6b0IsRUFBUzZXLGNBQWN2VSxNQUMvQm1tQixHQUFXLENBQ2YsSUFBSUUsRUFBVTNvQixFQUFTNG9CLHFCQUFxQixVQUN6Q0QsRUFBUTV1QixTQUFRMHVCLEVBQVlFLEVBQVFBLEVBQVE1dUIsT0FBUyxHQUFHdUksS0FLN0QsSUFBS21tQixFQUFXLE1BQU0sSUFBSTdzQixNQUFNLHlEQUNoQzZzQixFQUFZQSxFQUFVMW5CLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGMm1CLEVBQW9CbUIsRUFBSUosRyxHQ1pFZixFQUFvQixPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvQmFubmVyLnRzeCIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvV2luZG93LnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9tYXBUb1N0YXRlVG9Qcm9wcy9zdG9yYWdlLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9taWRkbGV3YXJlL2luZGV4LnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9wdWJsaWMuYXBpLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy9hbmFseXplLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy9hcGlMb2cudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3JlZHVjZXJzL2FwcC50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvYm9vdE9wdGlvbi50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3JlZHVjZXJzL3Bvc3RzLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy9wb3N0c0NoaWxkLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy9wb3N0c011bHRpLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy9wb3N0c1NpbmdsZS50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvcG9zdHNUaW1lbGluZS50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvcG9zdHNUaW1lbGluZVN0b2NrLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy9wb3N0c1RpbWVsaW5lWmVyby50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvcG9zdHNUaW1lbGluZVplcm9BZnRlci50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvcmFua3MudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3JlZHVjZXJzL3NldHRpbmcudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3JlZHVjZXJzL3RocmVhZC50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvcmVkdWNlcnMvdGhyZWFkRGV0YWlsLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy90aHJlYWRzLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9yZWR1Y2Vycy90dW5lQ2gudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3JlZHVjZXJzL3VzZXIudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL0FjdGlvbkxvZ3MudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL0FuYWx5emUudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL0FwcC50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvc3RvcmUvQm9vdE9wdGlvbi50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvc3RvcmUvTWVudUxvZ3MudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL1Bvc3QudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL1Bvc3RNdWx0aS50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvc3RvcmUvUG9zdHMudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL1Bvc3RzU2luZ2xlLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9Qb3N0c1RpbWVsaW5lLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2sudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL1Bvc3RzVGltZWxpbmVaZXJvLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyb0FmdGVyLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9SYW5rcy50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvc3RvcmUvU2V0dGluZy50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvc3RvcmUvVGhyZWFkLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9UaHJlYWRzLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9UdW5lQ2gudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL1VzZXIudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4vc3JjL3N0b3JlL2FwaVN0b3JlLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uL3NyYy9zdG9yZS9pbmRleC50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvdGFsa24uYXBpLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uLi9jb21tb24vc3JjL0Jvb3RPcHRpb24udHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4uL2NvbW1vbi9zcmMvUG9zdE1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpLy4uL2NvbW1vbi9zcmMvU2NoZW1hLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uLi9jb21tb24vc3JjL1NlcXVlbmNlLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uLi9jb21tb24vc3JjL2NsaWVudFN0YXRlL29wZXJhdGlvbnMvVGFsa25TZXR1cC50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi4vY29tbW9uL3NyYy9jb25mLnRzIiwid2VicGFjazovL3RhbGtuLWFwaS8uLi9jb21tb24vc3JjL2RlZmluZS50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9zcmMvd3MuYXBpLndvcmtlci50cyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzIiwid2VicGFjazovL3RhbGtuLWFwaS8uLi9jb21tb24vbm9kZV9tb2R1bGVzL29zL2luZGV4LmpzIiwid2VicGFjazovL3RhbGtuLWFwaS8uLi9jb21tb24vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90YWxrbi1hcGkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RhbGtuLWFwaS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGFsa24tYXBpL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RhbGtuLWFwaS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8vIElubGluZWQgLyBzaG9ydGVuZWQgdmVyc2lvbiBvZiBga2luZE9mYCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2tpbmQtb2ZcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiAnYXJyYXknO1xuICBpZiAoaXNEYXRlKHZhbCkpIHJldHVybiAnZGF0ZSc7XG4gIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICB2YXIgY29uc3RydWN0b3JOYW1lID0gY3Rvck5hbWUodmFsKTtcblxuICBzd2l0Y2ggKGNvbnN0cnVjdG9yTmFtZSkge1xuICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnTWFwJzpcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgfSAvLyBvdGhlclxuXG5cbiAgcmV0dXJuIHR5cGUuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKTtcbn1cblxuZnVuY3Rpb24gY3Rvck5hbWUodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nID8gdmFsLmNvbnN0cnVjdG9yLm5hbWUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHZhbC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0eXBlT2ZWYWwgPSBtaW5pS2luZE9mKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdHlwZU9mVmFsO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgdGhlIGBjb25maWd1cmVTdG9yZWAgbWV0aG9kXG4gKiBvZiB0aGUgYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYC5cbiAqXG4gKiBSZWR1eCBUb29sa2l0IGlzIG91ciByZWNvbW1lbmRlZCBhcHByb2FjaCBmb3Igd3JpdGluZyBSZWR1eCBsb2dpYyB0b2RheSxcbiAqIGluY2x1ZGluZyBzdG9yZSBzZXR1cCwgcmVkdWNlcnMsIGRhdGEgZmV0Y2hpbmcsIGFuZCBtb3JlLlxuICpcbiAqICoqRm9yIG1vcmUgZGV0YWlscywgcGxlYXNlIHJlYWQgdGhpcyBSZWR1eCBkb2NzIHBhZ2U6KipcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIGBjb25maWd1cmVTdG9yZWAgZnJvbSBSZWR1eCBUb29sa2l0IGlzIGFuIGltcHJvdmVkIHZlcnNpb24gb2YgYGNyZWF0ZVN0b3JlYCB0aGF0XG4gKiBzaW1wbGlmaWVzIHNldHVwIGFuZCBoZWxwcyBhdm9pZCBjb21tb24gYnVncy5cbiAqXG4gKiBZb3Ugc2hvdWxkIG5vdCBiZSB1c2luZyB0aGUgYHJlZHV4YCBjb3JlIHBhY2thZ2UgYnkgaXRzZWxmIHRvZGF5LCBleGNlcHQgZm9yIGxlYXJuaW5nIHB1cnBvc2VzLlxuICogVGhlIGBjcmVhdGVTdG9yZWAgbWV0aG9kIGZyb20gdGhlIGNvcmUgYHJlZHV4YCBwYWNrYWdlIHdpbGwgbm90IGJlIHJlbW92ZWQsIGJ1dCB3ZSBlbmNvdXJhZ2VcbiAqIGFsbCB1c2VycyB0byBtaWdyYXRlIHRvIHVzaW5nIFJlZHV4IFRvb2xraXQgZm9yIGFsbCBSZWR1eCBjb2RlLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIHVzZSBgY3JlYXRlU3RvcmVgIHdpdGhvdXQgdGhpcyB2aXN1YWwgZGVwcmVjYXRpb24gd2FybmluZywgdXNlXG4gKiB0aGUgYGxlZ2FjeV9jcmVhdGVTdG9yZWAgaW1wb3J0IGluc3RlYWQ6XG4gKlxuICogYGltcG9ydCB7IGxlZ2FjeV9jcmVhdGVTdG9yZSBhcyBjcmVhdGVTdG9yZX0gZnJvbSAncmVkdXgnYFxuICpcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICpcbiAqICoqV2UgcmVjb21tZW5kIHVzaW5nIGBjb25maWd1cmVTdG9yZWAgZnJvbSB0aGVcbiAqIGBAcmVkdXhqcy90b29sa2l0YCBwYWNrYWdlKiosIHdoaWNoIHJlcGxhY2VzIGBjcmVhdGVTdG9yZWA6XG4gKiAqKmh0dHBzOi8vcmVkdXguanMub3JnL2ludHJvZHVjdGlvbi93aHktcnRrLWlzLXJlZHV4LXRvZGF5KipcbiAqXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxudmFyIGxlZ2FjeV9jcmVhdGVTdG9yZSA9IGNyZWF0ZVN0b3JlO1xuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyBraW5kT2YoaW5wdXRTdGF0ZSkgKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMikgOiBcIlRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMykgOiBcIlRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSAnXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCInIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE0KSA6IFwiV2hlbiBjYWxsZWQgd2l0aCBhbiBhY3Rpb24gb2YgdHlwZSBcIiArIChhY3Rpb25UeXBlID8gXCJcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiA6ICcodW5rbm93biB0eXBlKScpICsgXCIsIHRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsgX2tleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgYnV0IGluc3RlYWQgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihhY3Rpb25DcmVhdG9ycykgKyBcIicuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUpIDogJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0b3JlKSwge30sIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSwgbGVnYWN5X2NyZWF0ZVN0b3JlIH07XG4iLCJpbXBvcnQgU2VxdWVuY2UgZnJvbSAnY29tbW9uL1NlcXVlbmNlJztcbmltcG9ydCBjb25mIGZyb20gJ2NvbW1vbi9jb25mJztcbmltcG9ydCBkZWZpbmUgZnJvbSAnY29tbW9uL2RlZmluZSc7XG5cbmltcG9ydCB7IFB1YmxpY0FwaSB9IGZyb20gJ2FwaS9wdWJsaWMuYXBpJztcblxuY29uc3QgbGl2ZUNudENsYXNzTmFtZSA9ICd0YWxrbl9iYW5uZXJfbGl2ZV9jbnQnO1xuXG5jb25zdCBzZXRTdHlsZXMgPSB7XG4gIGJhbm5lcjogKHRhZzogSFRNTERpdkVsZW1lbnQpOiBIVE1MRGl2RWxlbWVudCA9PiB7XG4gICAgdGFnLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgdGFnLnN0eWxlWydqdXN0aWZ5LWNvbnRlbnQnXSA9ICdmbGV4LXN0YXJ0JztcbiAgICB0YWcuc3R5bGVbJ2FsaWduLWl0ZW1zJ10gPSAnZmxleC1zdGFydCc7XG4gICAgdGFnLnN0eWxlLndpZHRoID0gJzY0cHgnO1xuICAgIHRhZy5zdHlsZS5oZWlnaHQgPSAnNjRweCc7XG4gICAgcmV0dXJuIHRhZztcbiAgfSxcbiAgYTogKHRhZzogSFRNTEFuY2hvckVsZW1lbnQpOiBIVE1MQW5jaG9yRWxlbWVudCA9PiB7XG4gICAgdGFnLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWZsZXgnO1xuICAgIHRhZy5zdHlsZS53aWR0aCA9ICdpbmhlcml0JztcbiAgICB0YWcuc3R5bGUuaGVpZ2h0ID0gJ2luaGVyaXQnO1xuICAgIHRhZy5zdHlsZVsnanVzdGlmeS1jb250ZW50J10gPSAnY2VudGVyJztcbiAgICB0YWcuc3R5bGVbJ2FsaWduLWl0ZW1zJ10gPSAnY2VudGVyJztcbiAgICByZXR1cm4gdGFnO1xuICB9LFxuXG4gIGltZzogKHRhZzogSFRNTEltYWdlRWxlbWVudCk6IEhUTUxJbWFnZUVsZW1lbnQgPT4ge1xuICAgIHRhZy5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgdGFnLnN0eWxlLndpZHRoID0gJzU4cHgnO1xuICAgIHRhZy5zdHlsZS5oZWlnaHQgPSAnNThweCc7XG4gICAgcmV0dXJuIHRhZztcbiAgfSxcbiAgbGl2ZTogKHRhZzogSFRNTFNwYW5FbGVtZW50KTogSFRNTFNwYW5FbGVtZW50ID0+IHtcbiAgICBjb25zdCBzaXplID0gJzI4cHgnO1xuICAgIHRhZy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgIHRhZy5zdHlsZVsnanVzdGlmeS1jb250ZW50J10gPSAnY2VudGVyJztcbiAgICB0YWcuc3R5bGVbJ2FsaWduLWl0ZW1zJ10gPSAnY2VudGVyJztcbiAgICB0YWcuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIHRhZy5zdHlsZS5yaWdodCA9ICcxN3B4JztcbiAgICB0YWcuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDEpJztcbiAgICB0YWcuc3R5bGVbJ2JvcmRlci1yYWRpdXMnXSA9IHNpemU7XG4gICAgdGFnLnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSg3OSwgMTc0LCAxNTksIDAuNiknO1xuICAgIHRhZy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgdGFnLnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgdGFnLnN0eWxlLndpZHRoID0gc2l6ZTtcbiAgICB0YWcuc3R5bGUuaGVpZ2h0ID0gc2l6ZTtcbiAgICB0YWcuc3R5bGVbJ21pbi13aWR0aCddID0gc2l6ZTtcbiAgICB0YWcuc3R5bGVbJ21pbi1oZWlnaHQnXSA9IHNpemU7XG4gICAgdGFnLnN0eWxlWydtYXgtd2lkdGgnXSA9IHNpemU7XG4gICAgdGFnLnN0eWxlWydtYXgtaGVpZ2h0J10gPSBzaXplO1xuICAgIHRhZy5zdHlsZVsndGV4dC1hbGlnbiddID0gJ2NlbnRlcic7XG4gICAgdGFnLnN0eWxlWydmb250LXNpemUnXSA9ICcxM3B4JztcbiAgICB0YWcuc3R5bGVbJ2ZvbnQtd2VpZ2h0J10gPSAnMzAwJztcbiAgICB0YWcuc3R5bGVbJ2xpbmUtaGVpZ2h0J10gPSAnMTBweCc7XG4gICAgdGFnLnN0eWxlWydsZXR0ZXItc3BhY2luZyddID0gJzAnO1xuICAgIHRhZy5zdHlsZS5jb2xvciA9ICdyZ2IoMjU1LCAyNTUsIDI1NSknO1xuXG4gICAgcmV0dXJuIHRhZztcbiAgfSxcbn07XG5cbmNvbnN0IGdldENoID0gKF9jaD86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGlmICghX2NoIHx8IF9jaCA9PT0gJycpIHJldHVybiAnLyc7XG4gIGNvbnN0IF9jaDEgPSBfY2gucmVwbGFjZSgnaHR0cHM6LycsICcnKS5yZXBsYWNlKCdodHRwOi8nLCAnJyk7XG4gIGNvbnN0IF9jaDIgPSBfY2gxLmVuZHNXaXRoKCcvJykgPyBfY2gxIDogX2NoMSArICcvJztcbiAgY29uc3QgY2ggPSBfY2gyLnN0YXJ0c1dpdGgoJy8nKSA/IF9jaDIgOiAnLycgKyBfY2gyO1xuICByZXR1cm4gY2g7XG59O1xuXG5jb25zdCBnZXRMaXZlID0gKCk6IEhUTUxTcGFuRWxlbWVudCA9PiB7XG4gIGxldCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBzcGFuLmlubmVyVGV4dCA9ICcwJztcbiAgc3Bhbi5jbGFzc05hbWUgPSBsaXZlQ250Q2xhc3NOYW1lO1xuICBzcGFuID0gc2V0U3R5bGVzLmxpdmUoc3Bhbik7XG4gIHJldHVybiBzcGFuO1xufTtcblxuY29uc3QgZ2V0QSA9IChjaCk6IEhUTUxBbmNob3JFbGVtZW50ID0+IHtcbiAgbGV0IGE6IEhUTUxBbmNob3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBhLmhyZWYgPSBgLy8ke2NvbmYuZG9tYWlufSR7Y2h9YDtcbiAgYS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gIGEgPSBzZXRTdHlsZXMuYShhKTtcbiAgcmV0dXJuIGE7XG59O1xuXG5jb25zdCBnZXRJbWcgPSAoKTogSFRNTEltYWdlRWxlbWVudCA9PiB7XG4gIGxldCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgaW1nLnNyYyA9IGAvLyR7Y29uZi5hc3NldHNJbWdQYXRofWxvZ28xMjgucG5nYDtcbiAgaW1nID0gc2V0U3R5bGVzLmltZyhpbWcpO1xuICByZXR1cm4gaW1nO1xufTtcblxuY29uc3QgYXBpQ2FsbGJhY2sgPSAoY2gsIGhyZWYsIGlvVHlwZSwgbWV0aG9kLCBzdGF0ZSkgPT4ge1xuICBpZiAoaW9UeXBlID09PSBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1QpIHtcbiAgICBjb25zdCBiYW5uZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7ZGVmaW5lLmJhbm5lckNsYXNzfVtkYXRhLWhyZWY9XCIke2hyZWZ9XCJdYCk7XG4gICAgYmFubmVycy5mb3JFYWNoKChiYW5uZXIpID0+IHtcbiAgICAgIGNvbnN0IGxpdmUgPSBiYW5uZXIucXVlcnlTZWxlY3RvcihgLiR7bGl2ZUNudENsYXNzTmFtZX1gKTtcbiAgICAgIGxpdmUuaW5uZXJIVE1MID0gc3RhdGUudGhyZWFkLmxpdmVDbnQ7XG4gICAgfSk7XG4gIH1cbn07XG5cbmNvbnN0IGF0dGFjaEV2ZW50ID0gKHRhbGtuQVBJLCBjaCwgaHJlZikgPT4ge1xuICBjb25zdCBpZCA9IGAke2RlZmluZS5iYW5uZXJDbGFzc306ICR7Y2h9YDtcbiAgdGFsa25BUEkudHVuZSh7IGNoLCBpZCB9LCAoaW9UeXBlLCBtZXRob2QsIHN0YXRlKSA9PiB7XG4gICAgYXBpQ2FsbGJhY2soY2gsIGhyZWYsIGlvVHlwZSwgbWV0aG9kLCBzdGF0ZSk7XG4gIH0pO1xufTtcblxuY29uc3QgQmFubmVyID0gKHRhbGtuQVBJOiBQdWJsaWNBcGkpOiB2b2lkID0+IHtcbiAgY29uc3QgYmFubmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke2RlZmluZS5iYW5uZXJDbGFzc31gKTtcbiAgYmFubmVycy5mb3JFYWNoKChiYW5uZXI6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgY29uc3QgYmFubmVySW1nID0gYmFubmVyLnF1ZXJ5U2VsZWN0b3IoJ2EgaW1nJyk7XG4gICAgaWYgKCFiYW5uZXJJbWcpIHtcbiAgICAgIGNvbnN0IGhyZWYgPSBiYW5uZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnKTtcbiAgICAgIGlmIChocmVmKSB7XG4gICAgICAgIGJhbm5lciA9IHNldFN0eWxlcy5iYW5uZXIoYmFubmVyKTtcbiAgICAgICAgY29uc3QgY2ggPSBnZXRDaChocmVmKTtcbiAgICAgICAgY29uc3QgYSA9IGdldEEoY2gpO1xuICAgICAgICBjb25zdCBsaXZlID0gZ2V0TGl2ZSgpO1xuICAgICAgICBjb25zdCBpbWcgPSBnZXRJbWcoKTtcbiAgICAgICAgYS5hcHBlbmQoaW1nKTtcbiAgICAgICAgYmFubmVyLmFwcGVuZChhKTtcbiAgICAgICAgYmFubmVyLmFwcGVuZChsaXZlKTtcbiAgICAgICAgYXR0YWNoRXZlbnQodGFsa25BUEksIGNoLCBocmVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFubmVyO1xuIiwiaW1wb3J0IFdzQXBpV29ya2VyIGZyb20gJ3dvcmtlci1sb2FkZXI/aW5saW5lPWZhbGxiYWNrJnB1YmxpY1BhdGg9LyZmaWxlbmFtZT13cy5hcGkud29ya2VyLmpzIS4vd3MuYXBpLndvcmtlcic7XG5cbmltcG9ydCBCb290T3B0aW9uIGZyb20gJ2NvbW1vbi9Cb290T3B0aW9uJztcbmltcG9ydCBQb3N0TWVzc2FnZSwgeyBNZXNzYWdlQ2xpZW50QW5kV3NBcGlUeXBlLCBNZXNzYWdlUGFyYW1zIH0gZnJvbSAnY29tbW9uL1Bvc3RNZXNzYWdlJztcbmltcG9ydCBTZXF1ZW5jZSBmcm9tICdjb21tb24vU2VxdWVuY2UnO1xuaW1wb3J0IFRhbGtuU2V0dXAgZnJvbSAnY29tbW9uL2NsaWVudFN0YXRlL29wZXJhdGlvbnMvVGFsa25TZXR1cCc7XG5pbXBvcnQgZGVmaW5lIGZyb20gJ2NvbW1vbi9kZWZpbmUnO1xuXG5pbXBvcnQgQXBpU3RhdGUgZnJvbSAnYXBpL3N0b3JlJztcblxuaW1wb3J0IGFwaVN0b3JlIGZyb20gJy4vc3RvcmUvYXBpU3RvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaW5kb3cge1xuICBpZDogc3RyaW5nID0gZGVmaW5lLkFQUF9UWVBFUy5BUEk7XG4gIGJvb3RPcHRpb246IEJvb3RPcHRpb247XG4gIHdzQXBpOiBXc0FwaVdvcmtlcjtcbiAgc3RvcmU6IGFueSA9IGFwaVN0b3JlKCk7XG4gIHBhcmVudEhyZWY6IHN0cmluZyA9IGxvY2F0aW9uLmhyZWY7XG4gIGNhbGxiYWNrOiBGdW5jdGlvbiB8IHVuZGVmaW5lZDtcbiAgY29ubmVkOiAodmFsdWU/OiBhbnkgfCBQcm9taXNlTGlrZTxhbnk+KSA9PiB2b2lkO1xuICBzdGF0aWMgZ2V0IFNFVF9DQUxMQkFDS19NRVRIT0QoKSB7XG4gICAgcmV0dXJuICd0dW5lJztcbiAgfVxuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIFRhbGtuU2V0dXAuc2V0dXBNYXRoKCk7XG5cbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5ib290T3B0aW9uID0gbmV3IEJvb3RPcHRpb24odGhpcy5pZCk7XG4gICAgY29uc3QgYXBpU3RhdGUgPSBuZXcgQXBpU3RhdGUodGhpcy5ib290T3B0aW9uKTtcbiAgICBjb25zdCBzdGF0ZSA9IHsgLi4uYXBpU3RhdGUgfTtcblxuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goeyAuLi5zdGF0ZSwgdHlwZTogJ0lOSVRfQ0xJRU5UJyB9KTtcblxuICAgIHRoaXMuYXBpID0gdGhpcy5hcGkuYmluZCh0aGlzKTtcbiAgICB0aGlzLmluamVjdFN0YXRlVG9BcHAgPSB0aGlzLmluamVjdFN0YXRlVG9BcHAuYmluZCh0aGlzKTtcbiAgICB0aGlzLnBvc3RNZXNzYWdlID0gdGhpcy5wb3N0TWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25NZXNzYWdlID0gdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmV4ZVB1YmxpY0NhbGxiYWNrID0gdGhpcy5leGVQdWJsaWNDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25FcnJvciA9IHRoaXMub25FcnJvci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGJvb3QoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmNvbm5lZCA9IHJlc29sdmU7XG4gICAgICB0aGlzLndzQXBpID0gbmV3IFdzQXBpV29ya2VyKCk7XG4gICAgICB0aGlzLndzQXBpLm9uZXJyb3IgPSB0aGlzLm9uRXJyb3I7XG4gICAgICB0aGlzLndzQXBpLm9ubWVzc2FnZSA9IHRoaXMub25NZXNzYWdlO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFwaShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBNZXNzYWdlUGFyYW1zID0ge30sIGNhbGxiYWNrPzogRnVuY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAobWV0aG9kID09PSBXaW5kb3cuU0VUX0NBTExCQUNLX01FVEhPRCAmJiBjYWxsYmFjaykgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMucG9zdE1lc3NhZ2UobWV0aG9kLCBwYXJhbXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbmplY3RTdGF0ZVRvQXBwKGFwaVN0YXRlOiBNZXNzYWdlUGFyYW1zKTogdm9pZCB7XG4gICAgdGhpcy5hcGkoJ2ZldGNoUG9zdHMnLCBhcGlTdGF0ZSk7XG4gICAgdGhpcy5hcGkoJ3JhbmsnLCBhcGlTdGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIHBvc3RNZXNzYWdlKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IE1lc3NhZ2VQYXJhbXMgPSB7fSk6IHZvaWQge1xuICAgIGNvbnN0IG1lc3NhZ2U6IE1lc3NhZ2VDbGllbnRBbmRXc0FwaVR5cGUgPSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZDogcGFyYW1zLmlkID8gcGFyYW1zLmlkIDogdGhpcy5pZCxcbiAgICAgIHR5cGU6IFBvc3RNZXNzYWdlLkNMSUVOVF9UT19XU0FQSV9UWVBFLFxuICAgICAgaW9UeXBlOiBTZXF1ZW5jZS5BUElfU0VUVVAsXG4gICAgICBtZXRob2QsXG4gICAgICBwYXJhbXMsXG4gICAgfTtcbiAgICB0aGlzLndzQXBpLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbk1lc3NhZ2UoZTogTWVzc2FnZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgeyBjdXJyZW50VGFyZ2V0LCBkYXRhIH0gPSBlO1xuICAgIGNvbnN0IHsgdHlwZSwgbWV0aG9kLCBpb1R5cGUsIHBhcmFtcywgbWV0aG9kQmFjayB9OiBNZXNzYWdlQ2xpZW50QW5kV3NBcGlUeXBlID0gZGF0YTtcbiAgICBpZiAoY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIFdvcmtlcikge1xuICAgICAgaWYgKHR5cGUgPT09IFBvc3RNZXNzYWdlLldTQVBJX1RPX0NMSUVOVF9UWVBFKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvblR5cGUgPSBQb3N0TWVzc2FnZS5jb252ZXJ0QXBpVG9DbGllbnRBY3Rpb25UeXBlKG1ldGhvZCk7XG4gICAgICAgIGNvbnN0IHsgaW9UeXBlLCBleGVNZXRob2QgfSA9IFBvc3RNZXNzYWdlLmdldE1lc3NhZ2VUeXBlcyhhY3Rpb25UeXBlKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB7IC4uLnBhcmFtcywgdHlwZTogYWN0aW9uVHlwZSB9O1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHRoaXMuZXhlUHVibGljQ2FsbGJhY2soaW9UeXBlLCBleGVNZXRob2QsIHN0YXRlKTtcblxuICAgICAgICBpZiAobWV0aG9kID09PSAnV1NfQ09OU1RSVUNURUQnKSB7XG4gICAgICAgICAgdGhpcy5jb25uZWQodGhpcyk7XG4gICAgICAgICAgaWYgKHRoaXMuaWQgPT09IGRlZmluZS5BUFBfVFlQRVMuQ0xJRU5UKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBiYWNrUGFyYW1zID0gcGFyYW1zLmNoID8geyAuLi50aGlzLmJvb3RPcHRpb24sIGNoOiBwYXJhbXMuY2ggfSA6IHRoaXMuYm9vdE9wdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYXBpKCd0dW5lJywgYmFja1BhcmFtcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGZpbm5pc2ggaGFuZGxlIHdzIGFwaS5cbiAgICAgICAgaWYgKHRoaXMuaWQgPT09IGRlZmluZS5BUFBfVFlQRVMuUE9SVEFMIHx8IHRoaXMuaWQgPT09IGRlZmluZS5BUFBfVFlQRVMuRVhURU5TSU9OKSB7XG4gICAgICAgICAgaWYgKG1ldGhvZCA9PT0gYFNFUlZFUl9UT19BUElbRU1JVF06dHVuZWApIHtcbiAgICAgICAgICAgIHRoaXMuaW5qZWN0U3RhdGVUb0FwcChwYXJhbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25FcnJvcihlOiBFcnJvckV2ZW50KTogdm9pZCB7XG4gICAgY29uc29sZS53YXJuKGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBleGVQdWJsaWNDYWxsYmFjayhpb1R5cGUsIGV4ZU1ldGhvZCwgc3RhdGU6IGFueSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNhbGxiYWNrKSB7XG4gICAgICBpZiAoaW9UeXBlID09PSBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUIHx8IGlvVHlwZSA9PT0gU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2soaW9UeXBlLCBleGVNZXRob2QsIHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBkZWZpbmUgZnJvbSAnY29tbW9uL2RlZmluZSc7XG5cbmltcG9ydCBBcHAgZnJvbSAnYXBpL3N0b3JlL0FwcCc7XG5cbi8vaW1wb3J0IFRhbGtuU2Vzc2lvbiBmcm9tIFwiY2xpZW50L29wZXJhdGlvbnMvVGFsa25TZXNzaW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0Jzogc2V0U3RvcmFnZUh0bWxQb3N0cyxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZSc6IHNldFN0b3JhZ2VIdG1sUG9zdHMsXG4gICdTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHMnOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgLy9zZXRTdG9yYWdlUG9zdHMoIHN0YXRlLCBwcm9wcyApO1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtFTUlUXTpjaGFuZ2VUaHJlYWQnOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHN0YXRlO1xuICAgIGNvbnN0IHsgcm9vdENoIH0gPSBhcHA7XG4gICAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gICAgY29uc3QgcG9zdEtleSA9IGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgPyBzdG9yYWdlS2V5LnBvc3RTaW5nbGUgOiBzdG9yYWdlS2V5LnBvc3RNdWx0aTtcbiAgICAvL1RhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHJvb3RDaCwgZGVmaW5lLnN0b3JhZ2VLZXlbcG9zdEtleV0sIFtdKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSxcbiAgLy8gIFwiT05fX0NMSUNLX01VTFRJU1RSRUFNXCI6IHNldFN0b3JhZ2VQb3N0cyxcbiAgJ09OX0NMSUNLX01FTlUnOiAoc3RhdGUsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyByb290Q2ggfSA9IHN0YXRlLmFwcDtcbiAgICAvLyAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZShyb290Q2gsIGRlZmluZS5zdG9yYWdlS2V5LmFwcCwgc3RhdGUuYXBwKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSxcbiAgJ1JFU0laRV9FTkRfV0lORE9XJzogKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xuICB9LFxuICBzZXRTdG9yYWdlUG9zdHMsXG4gIHNldFN0b3JhZ2VIdG1sUG9zdHMsXG4gIHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lLFxuICAvLyAgZ2V0U3RvcmFnZVBvc3RzVGltZWxpbmUsXG4gIC8vICBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8sXG59O1xuXG5mdW5jdGlvbiBzZXRTdG9yYWdlUG9zdHMoc3RhdGUsIHByb3BzKSB7XG4gIGNvbnN0IHsgYXBwIH0gPSBzdGF0ZTtcbiAgaWYgKGFwcC5pc01lZGlhQ2gpIHtcbiAgICBzdGF0ZSA9IHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKHN0YXRlKTtcbiAgICByZXR1cm4geyBzdGF0ZSwgcHJvcHMgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2V0U3RvcmFnZUh0bWxQb3N0cyhzdGF0ZSwgcHJvcHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VIdG1sUG9zdHMoc3RhdGUsIHByb3BzKSB7XG4gIGNvbnN0IHsgYXBwIH0gPSBzdGF0ZTtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGlmIChhcHAuaXNSb290Q2gpIHtcbiAgICBjb25zdCB7IHBvc3RzTXVsdGksIHBvc3RzU2luZ2xlIH0gPSBzdGF0ZTtcbiAgICAvLyAgICBUYWxrblNlc3Npb24uc2V0U3RvcmFnZShhcHAucm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzTXVsdGksIHBvc3RzTXVsdGkpO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKGFwcC5yb290Q2gsIHN0b3JhZ2VLZXkucG9zdHNTaW5nbGUsIHBvc3RzU2luZ2xlKTtcbiAgfVxuXG4gIHJldHVybiB7IHN0YXRlLCBwcm9wcyB9O1xufVxuXG5mdW5jdGlvbiBzZXRTdG9yYWdlUG9zdHNUaW1lbGluZShhY3Rpb24pIHtcbiAgY29uc3QgeyBhcHAsIHRocmVhZCwgcG9zdHNUaW1lbGluZTogcG9zdHNUaW1lbGluZUFsbCB9ID0gYWN0aW9uO1xuICBjb25zdCB7IHN0b3JhZ2VLZXkgfSA9IGRlZmluZTtcblxuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIGNvbnN0IHBvc3RzVGltZWxpbmVBbGxMZW5ndGggPSBwb3N0c1RpbWVsaW5lQWxsICYmIHBvc3RzVGltZWxpbmVBbGwubGVuZ3RoID8gcG9zdHNUaW1lbGluZUFsbC5sZW5ndGggOiAwO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVyb1NlY29uZCA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzVGltZWxpbmVBbGxMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvc3RzVGltZWxpbmVBbGxbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQucHVzaChwb3N0c1RpbWVsaW5lQWxsW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc3RzVGltZWxpbmUucHVzaChwb3N0c1RpbWVsaW5lQWxsW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IHBvc3RzVGltZWxpbmVaZXJvU2Vjb25kO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHRocmVhZC5jaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lWmVybywgcG9zdHNUaW1lbGluZVplcm9TZWNvbmQpO1xuICAgIC8vICAgIFRhbGtuU2Vzc2lvbi5zZXRTdG9yYWdlKHRocmVhZC5jaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lLCBwb3N0c1RpbWVsaW5lKTtcbiAgfVxuICByZXR1cm4gYWN0aW9uO1xufVxuLypcbmZ1bmN0aW9uIGFkZFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFjdGlvbikge1xuICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSB9ID0gYWN0aW9uO1xuXG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBpZiAoYXBwLmlzTWVkaWFDaCkge1xuICAgIGNvbnN0IGFkZFBvc3RzVGltZWxpbmUgPSBwb3N0c1RpbWVsaW5lWzBdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lWmVybyA9IFtdO1xuICAgIGxldCBwb3N0c1RpbWVsaW5lID0gW107XG4gICAgbGV0IHBvc3RzVGltZWxpbmVaZXJvTGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zdHNUaW1lbGluZUxlbmd0aCA9IDA7XG5cbiAgICBpZiAoYWRkUG9zdHNUaW1lbGluZS5jdXJyZW50VGltZSA9PT0gMCkge1xuICAgICAgcG9zdHNUaW1lbGluZVplcm8gPSBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8oYXBwLnJvb3RDaCk7XG4gICAgICBwb3N0c1RpbWVsaW5lWmVyb0xlbmd0aCA9IHBvc3RzVGltZWxpbmVaZXJvLmxlbmd0aDtcblxuICAgICAgLy8gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZVplcm9MZW5ndGg7IGkrKyl7XG4gICAgICAvLyAgICAgIH1cbiAgICAgIC8vICAgICAgcC5zcGxpY2UoNCwwLHAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdHNUaW1lbGluZSA9IGdldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKGFwcC5yb290Q2gpO1xuICAgICAgcG9zdHNUaW1lbGluZUxlbmd0aCA9IHBvc3RzVGltZWxpbmUubGVuZ3RoO1xuICAgICAgaWYgKHBvc3RzVGltZWxpbmVMZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdHNUaW1lbGluZUxlbmd0aDsgaSsrKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuKi9cbi8qXG5mdW5jdGlvbiBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZVplcm8ocm9vdENoKSB7XG4gIGNvbnN0IHsgc3RvcmFnZUtleSB9ID0gZGVmaW5lO1xuICBjb25zdCByZXNwb25zZSA9IFRhbGtuU2Vzc2lvbi5nZXRTdG9yYWdlKHJvb3RDaCwgc3RvcmFnZUtleS5wb3N0c1RpbWVsaW5lWmVybyk7XG4gIHJldHVybiByZXNwb25zZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFycmF5XCIgPyByZXNwb25zZSA6IFtdO1xufVxuXG5mdW5jdGlvbiBnZXRTdG9yYWdlUG9zdHNUaW1lbGluZShyb290Q2gpIHtcbiAgY29uc3QgeyBzdG9yYWdlS2V5IH0gPSBkZWZpbmU7XG4gIGNvbnN0IHJlc3BvbnNlID0gVGFsa25TZXNzaW9uLmdldFN0b3JhZ2Uocm9vdENoLCBzdG9yYWdlS2V5LnBvc3RzVGltZWxpbmUpO1xuICByZXR1cm4gcmVzcG9uc2UuY29uc3RydWN0b3IubmFtZSA9PT0gXCJBcnJheVwiID8gcmVzcG9uc2UgOiBbXTtcbn1cbiovXG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5pbXBvcnQgc3RvcmFnZSBmcm9tICdhcGkvbWFwVG9TdGF0ZVRvUHJvcHMvc3RvcmFnZSc7XG5pbXBvcnQgQXBwIGZyb20gJ2FwaS9zdG9yZS9BcHAnO1xuaW1wb3J0IFBvc3RzIGZyb20gJ2FwaS9zdG9yZS9Qb3N0cyc7XG5pbXBvcnQgVGhyZWFkIGZyb20gJ2FwaS9zdG9yZS9UaHJlYWQnO1xuaW1wb3J0IFRocmVhZHMgZnJvbSAnYXBpL3N0b3JlL1RocmVhZHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHVwZGF0ZUFjdGlvbjogKHN0b3JlKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBpZiAoYWN0aW9uKSB7XG4gICAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgICBhY3Rpb24uYXBwLmFjdGlvbmVkID0gYWN0aW9uLnR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGZ1bmN0aW9uc1thY3Rpb24udHlwZV0pIHtcbiAgICAgIGFjdGlvbiA9IGZ1bmN0aW9uc1thY3Rpb24udHlwZV0oc3RhdGUsIGFjdGlvbik7XG4gICAgfVxuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIG5leHQoYWN0aW9uKTtcbiAgICB9XG4gIH0sXG59O1xuXG5jb25zdCBmdW5jdGlvbnMgPSB7XG4gICdTRVJWRVJfVE9fQVBJW0VNSVRdOnR1bmUnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHBbYG9mZnNldCR7YWN0aW9uLmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXSA9IGFjdGlvbi5hcHAub2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAucm9vdENoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24uYXBwLnR1bmVkQ2ggPSBhY3Rpb24udGhyZWFkLmNoOyAvLyBjaGFuZ2VUaHJlYWTjga7pmpvjga7mjqXntprjgZfjgabjgYTjgZ/lj6TjgYTjgrnjg6zjg4Pjg4njga5DSChsaXZlQ25044KS44OH44Kv44Oq44Oh44Oz44OI44GZ44KL55So6YCUKeOBqOOBl+OBpuS/neaMgVxuICAgIGFjdGlvbi5hcHAuZGV0YWlsQ2ggPSBhY3Rpb24udGhyZWFkLmNoO1xuICAgIGFjdGlvbi5hcHAuaXNUdW5lID0gdHJ1ZTtcbiAgICBhY3Rpb24uYXBwLmlzUm9vdENoID0gYWN0aW9uLmFwcC5yb290Q2ggPT09IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC5pc01lZGlhQ2ggPSBBcHAuZ2V0SXNNZWRpYUNoKGFjdGlvbi50aHJlYWQuY2gpO1xuICAgIGFjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGUgPSBhY3Rpb24uYXBwLmlzTWVkaWFDaCA/IEFwcC5kaXNwVGhyZWFkVHlwZVRpbWVsaW5lIDogQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGk7XG4gICAgYWN0aW9uLmFwcC5pc1RvZ2dsZU11bHRpc3RyZWFtID0gZmFsc2U7XG4gICAgYWN0aW9uLnRocmVhZC50aXRsZSA9IGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXNbJ3RpdGxlJ107XG4gICAgYWN0aW9uLnRocmVhZC5oYXNTbGFzaCA9IFNjaGVtYS5nZXRCb29sKGFjdGlvbi50aHJlYWQuaGFzU2xhc2gpO1xuICAgIGFjdGlvbi50aHJlYWRzID0gVGhyZWFkcy5nZXRNZXJnZWRUaHJlYWRzKHN0YXRlLnRocmVhZHMsIGFjdGlvbi50aHJlYWQpO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBpZiAoYWN0aW9uLmFwcC5pc1Jvb3RDaCkge1xuICAgICAgYWN0aW9uLmFwcC5yb290VGl0bGUgPSBhY3Rpb24udGhyZWFkLnRpdGxlO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uLmFwcC5pc01lZGlhQ2gpIHtcbiAgICAgIGNvbnN0IHNyYyA9IEFwcC5nZXRNZWRpYVNyYyhhY3Rpb24udGhyZWFkLnByb3RvY29sLCBhY3Rpb24udGhyZWFkLmNoKTtcbiAgICAgIGFjdGlvbi5hcHAuY2hUeXBlID0gQXBwLmdldE1lZGlhVHlwZUZyb21TcmMoc3JjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uLmFwcC5jaFR5cGUgPSBBcHAubWVkaWFUYWdUeXBlTm87XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cyc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5kaXNwVGhyZWFkVHlwZSA9IGFjdGlvbi5hcHAuaXNNZWRpYUNoID8gQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmUgOiBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZCA9IEFwcC5nZXRPZmZzZXRGaW5kSWQoeyBwb3N0czogYWN0aW9uLnBvc3RzIH0pO1xuICAgIGFjdGlvbi5hcHBbYG9mZnNldCR7YWN0aW9uLmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXSA9IGFjdGlvbi5hcHAub2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbiA9IHsgLi4uUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHMoYWN0aW9uLCBzdGF0ZSkgfTtcbiAgICBpZiAoYWN0aW9uLmFwcC5pc01lZGlhQ2gpIHtcbiAgICAgIGFjdGlvbiA9IHN0b3JhZ2Uuc2V0U3RvcmFnZVBvc3RzVGltZWxpbmUoYWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ0FQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwID0gYWN0aW9uLmFwcCA/IHsgLi4uc3RhdGUuYXBwLCAuLi5hY3Rpb24uYXBwIH0gOiBzdGF0ZS5hcHA7XG4gICAgYWN0aW9uLmFwcC5pc01lZGlhQ2ggPSBBcHAuZ2V0SXNNZWRpYUNoKGFjdGlvbi50aHJlYWQuY2gpO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0RmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRUaW1lbGluZUZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0TXVsdGlGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldFNpbmdsZUZpbmRJZCA9IEFwcC5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGFjdGlvbi5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldExvZ3NGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24udGhyZWFkID0gYWN0aW9uLnRocmVhZCA/IHsgLi4uc3RhdGUudGhyZWFkLCAuLi5hY3Rpb24udGhyZWFkIH0gOiBzdGF0ZS50aHJlYWQ7XG4gICAgYWN0aW9uLnBvc3RzID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzTXVsdGkgPSBuZXcgUG9zdHMoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IG5ldyBQb3N0cygpO1xuICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzKCk7XG4gICAgYWN0aW9uLnBvc3RzU2luZ2xlID0gbmV3IFBvc3RzKCk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlzUm9vdENoID0gYWN0aW9uLmFwcC5yb290Q2ggPT09IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLmFwcC50dW5lZENoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24udGhyZWFkLnRpdGxlID0gYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhc1sndGl0bGUnXTtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06dXBkYXRlVGhyZWFkJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24udGhyZWFkcyA9IFRocmVhZHMuZ2V0TWVyZ2VkVGhyZWFkcyhzdGF0ZS50aHJlYWRzLCBhY3Rpb24udGhyZWFkKTtcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsID0geyAuLi5hY3Rpb24udGhyZWFkIH07XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06dXBkYXRlVGhyZWFkU2VydmVyTWV0YXMnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWRzID0gVGhyZWFkcy5nZXRNZXJnZWRUaHJlYWRzKHN0YXRlLnRocmVhZHMsIGFjdGlvbi50aHJlYWQpO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU0VSVkVSX1RPX0FQSVtSRVFVRVNUXTpwb3N0JzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlucHV0U3RhbXBJZCA9IDA7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0JzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAvLyDjg6bjg7zjgrbjg7zjgYzku4rnj77lnKjjgIHplrLopqfjgZfjgabjgYTjgot0aHJlYWTjga7loLTlkIhcbiAgICBpZiAoc3RhdGUudGhyZWFkLmNoID09PSBhY3Rpb24udGhyZWFkLmNoKSB7XG4gICAgICBpZiAoYWN0aW9uLnRocmVhZC5lbW90aW9ucykge1xuICAgICAgICBjb25zdCBlbW90aW9uS2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbi50aHJlYWQuZW1vdGlvbnMpO1xuICAgICAgICBpZiAoZW1vdGlvbktleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGFjdGlvbkVtb3Rpb25zID0geyAuLi5hY3Rpb24udGhyZWFkLmVtb3Rpb25zIH07XG4gICAgICAgICAgYWN0aW9uLnRocmVhZC5lbW90aW9ucyA9IHsgLi4uc3RhdGUudGhyZWFkLmVtb3Rpb25zIH07XG5cbiAgICAgICAgICBPYmplY3Qua2V5cyhhY3Rpb25FbW90aW9ucykuZm9yRWFjaCgoZW1vdGlvbk1vZGVsS2V5KSA9PiB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhhY3Rpb25FbW90aW9uc1tlbW90aW9uTW9kZWxLZXldKS5mb3JFYWNoKChlbW90aW9uS2V5KSA9PiB7XG4gICAgICAgICAgICAgIGFjdGlvbi50aHJlYWQuZW1vdGlvbnNbZW1vdGlvbk1vZGVsS2V5XVtlbW90aW9uS2V5XSA9XG4gICAgICAgICAgICAgICAgYWN0aW9uLnRocmVhZC5lbW90aW9uc1tlbW90aW9uTW9kZWxLZXldW2Vtb3Rpb25LZXldICsgYWN0aW9uRW1vdGlvbnNbZW1vdGlvbk1vZGVsS2V5XVtlbW90aW9uS2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFjdGlvbi50aHJlYWREZXRhaWwgPSB7IC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFjdGlvbi50aHJlYWQuY2ggPSBzdGF0ZS50aHJlYWQuY2g7XG4gICAgYWN0aW9uID0gUG9zdHMuZ2V0QW55QWN0aW9uUG9zdHMoYWN0aW9uLCBzdGF0ZSk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1NFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZSc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHM6IGFjdGlvbi5wb3N0cyB9KTtcbiAgICBhY3Rpb24uYXBwW2BvZmZzZXQke2FjdGlvbi5hcHAuZGlzcFRocmVhZFR5cGV9RmluZElkYF0gPSBhY3Rpb24uYXBwLm9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24gPSBQb3N0cy5nZXRBbnlBY3Rpb25Qb3N0cyhhY3Rpb24sIHN0YXRlKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWREZXRhaWwnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGRlbGV0ZSBhY3Rpb24udGhyZWFkO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdTRVJWRVJfVE9fQVBJW0VNSVRdOmNoYW5nZVRocmVhZERldGFpbCc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5kZXRhaWxDaCA9IGFjdGlvbi50aHJlYWQuY2g7XG4gICAgYWN0aW9uLnRocmVhZHMgPSBUaHJlYWRzLmdldE1lcmdlZFRocmVhZHMoc3RhdGUudGhyZWFkcywgYWN0aW9uLnRocmVhZCk7XG4gICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwudGl0bGUgPSBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzLnRpdGxlO1xuICAgIGFjdGlvbi50aHJlYWREZXRhaWwuZW1vdGlvbnMgPSB7IC4uLnN0YXRlLnRocmVhZHNbYWN0aW9uLmFwcC5kZXRhaWxDaF0uZW1vdGlvbnMgfTtcblxuICAgIC8vIFRPRE8g5Y+k44GE5LuV5qeY44Gg44GoaGFzU2xhc2jjgYzmoLzntI3jgZXjgozjgabjgYTjgarjgYRjb2xsZWN0aW9u44GM5a2Y5Zyo44GZ44KLXG4gICAgLy8gaGFzU2xhc2jjga9sb2NhdGlvbuOBjOWPgueFp+OBp+OBjeOBquOBhENMSUVOVOOBoOOBqOato+OBl+OBhOWApOOCkuWPluW+l+WHuuadpeOBquOBhOOBn+OCgeOAgVxuICAgIC8vIOaLoeW8teapn+iDveOBp+OBr0dFVF9DTElFTlRfTUVUQVPjgpLlrp/ooYzjgZfjgabmraPjgZfjgYTlgKTjgpLjgrXjg7zjg5Djg7zjgavmuKHjgZfjgabmm7TmlrDjgZfjgabjgoTjgovlv4XopoHjgYzjgYLjgovjgIJcbiAgICBhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoID0gYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9PT0gbnVsbCA/IHRydWUgOiBTY2hlbWEuZ2V0Qm9vbChhY3Rpb24udGhyZWFkRGV0YWlsLmhhc1NsYXNoKTtcbiAgICBkZWxldGUgYWN0aW9uLnRocmVhZDtcbiAgICBhY3Rpb24udGhyZWFkID0gYWN0aW9uO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdDTE9TRV9MSU5LUyc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcCA9IGFjdGlvbi5hcHAgPyB7IC4uLnN0YXRlLmFwcCwgLi4uYWN0aW9uLmFwcCB9IDogc3RhdGUuYXBwO1xuICAgIGFjdGlvbi50aHJlYWQgPSBhY3Rpb24udGhyZWFkID8geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfSA6IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnT05fQ0xJQ0tfVE9fTVVMVElfVEhSRUFEJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBhY3Rpb24uYXBwLmlzTGlua0NoID0gZmFsc2U7XG4gICAgYWN0aW9uLmFwcC5pc1Jvb3RDaCA9IGFjdGlvbi50aHJlYWQuY2ggPT09IHN0YXRlLmFwcC5yb290Q2g7XG5cbiAgICBpZiAoc3RhdGUudGhyZWFkc1thY3Rpb24udGhyZWFkLmNoXSkge1xuICAgICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZHNbYWN0aW9uLnRocmVhZC5jaF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdPTl9DTElDS19UT19USU1FTElORV9USFJFQUQnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IGNoID0gYWN0aW9uLnRocmVhZC5jaDtcbiAgICBhY3Rpb24udGhyZWFkID0geyAuLi5zdGF0ZS50aHJlYWQsIC4uLmFjdGlvbi50aHJlYWQgfTtcbiAgICBhY3Rpb24udGhyZWFkLmNoID0gY2g7XG4gICAgY29uc3Qgc3JjID0gQXBwLmdldE1lZGlhU3JjKGFjdGlvbi50aHJlYWQucHJvdG9jb2wsIGFjdGlvbi50aHJlYWQuY2gpO1xuICAgIGFjdGlvbi50aHJlYWQuZmluZFR5cGUgPSBUaHJlYWQuZ2V0RmluZFR5cGVGcm9tU3JjKHNyYyk7XG4gICAgYWN0aW9uLnBvc3RzVGltZWxpbmUgPSBbXTtcbiAgICBhY3Rpb24uYXBwLmlzTWVkaWFDaCA9IHRydWU7XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldENoaWxkRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ09OX0NMSUNLX1RPX1NJTkdMRV9USFJFQUQnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi5hcHAgPSBzdGF0ZS5hcHA7XG4gICAgYWN0aW9uLmFwcC5pc0xpbmtDaCA9IGZhbHNlO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdPTl9DTElDS19UT19DSElMRF9USFJFQUQnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi50aHJlYWQgPSB7IC4uLnN0YXRlLnRocmVhZCwgLi4uYWN0aW9uLnRocmVhZCB9O1xuICAgIGFjdGlvbi5wb3N0c0NoaWxkID0gW107XG4gICAgYWN0aW9uLmFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBhY3Rpb24uYXBwLm9mZnNldENoaWxkRmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ09OX0NMSUNLX01FTlUnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGFjdGlvbi5hcHAuZGVzYyA9IGFjdGlvbi51aS5tZW51Q29tcG9uZW50O1xuICAgIHJldHVybiBhY3Rpb247XG4gIH0sXG4gICdSRVNJWkVfRU5EX1dJTkRPVyc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnT05fQ0xJQ0tfVE9HR0xFX0RJU1BfREVUQUlMJzogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAvLyBUT0RPIOWPpOOBhOS7leanmOOBoOOBqGhhc1NsYXNo44GM5qC857SN44GV44KM44Gm44GE44Gq44GEY29sbGVjdGlvbuOBjOWtmOWcqOOBmeOCi1xuICAgIC8vIGhhc1NsYXNo44GvbG9jYXRpb27jgYzlj4LnhafjgafjgY3jgarjgYRDTElFTlTjgaDjgajmraPjgZfjgYTlgKTjgpLlj5blvpflh7rmnaXjgarjgYTjgZ/jgoHjgIFcbiAgICAvLyDmi6HlvLXmqZ/og73jgafjga9HRVRfQ0xJRU5UX01FVEFT44KS5a6f6KGM44GX44Gm5q2j44GX44GE5YCk44KS44K144O844OQ44O844Gr5rih44GX44Gm5pu05paw44GX44Gm44KE44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCA9IGFjdGlvbi50aHJlYWREZXRhaWwuaGFzU2xhc2ggPT09IG51bGwgPyB0cnVlIDogU2NoZW1hLmdldEJvb2woYWN0aW9uLnRocmVhZERldGFpbC5oYXNTbGFzaCk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ1RPR0dMRV9CVUJCTEVfUE9TVCc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLnRocmVhZCA9IHN0YXRlLnRocmVhZDtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9LFxuICAnU1RBUlRfTElOS19NRURJQSc6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgYWN0aW9uLmFwcC5pc0xpbmtDaCA9IHRydWU7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgJ0dFVF9DTElFTlRfTUVUQVMnOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGxldCB1cGRhdGVGbGcgPSBmYWxzZTtcbiAgICBsZXQgeyBjbGllbnRNZXRhcyB9ID0gYWN0aW9uO1xuICAgIGxldCB7IHNlcnZlck1ldGFzIH0gPSBzdGF0ZS50aHJlYWQ7XG4gICAgYWN0aW9uLnRocmVhZCA9IHt9O1xuXG4gICAgLy8gTWV0YXNcbiAgICBPYmplY3Qua2V5cyhjbGllbnRNZXRhcykuZm9yRWFjaCgoa2V5LCBpKSA9PiB7XG4gICAgICBpZiAoY2xpZW50TWV0YXNba2V5XSAmJiBjbGllbnRNZXRhc1trZXldICE9PSAnJyAmJiBzZXJ2ZXJNZXRhc1trZXldICE9PSBjbGllbnRNZXRhc1trZXldKSB7XG4gICAgICAgIGlmICghYWN0aW9uLnRocmVhZC5zZXJ2ZXJNZXRhcykge1xuICAgICAgICAgIGFjdGlvbi50aHJlYWQuc2VydmVyTWV0YXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVGbGcgPSB0cnVlO1xuICAgICAgICBhY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzW2tleV0gPSBjbGllbnRNZXRhc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHVwZGF0ZUZsZykge1xuICAgICAgYWN0aW9uLnRocmVhZERldGFpbCA9IHsgLi4uc3RhdGUudGhyZWFkRGV0YWlsIH07XG4gICAgICBhY3Rpb24udGhyZWFkRGV0YWlsLnNlcnZlck1ldGFzID0ge1xuICAgICAgICAuLi5hY3Rpb24udGhyZWFkRGV0YWlsLnNlcnZlck1ldGFzLFxuICAgICAgICAuLi5hY3Rpb24udGhyZWFkLnNlcnZlck1ldGFzLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCBCb290T3B0aW9uIGZyb20gJ2NvbW1vbi9Cb290T3B0aW9uJztcblxuZXhwb3J0IHR5cGUgUHVibGljQXBpTWV0aG9kc1R5cGUgPSB7XG4gIFtrZXk6IHN0cmluZ106IEZ1bmN0aW9uIHwgc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIFB1YmxpY0FwaSB7XG4gIGNvbnN0cnVjdG9yKF93aW4pIHtcbiAgICBjb25zdCB7IGFwaSwgc3RvcmUgfSA9IF93aW47XG4gICAgY29uc3QgcHVibGljQXBpTWV0aG9kczogUHVibGljQXBpTWV0aG9kc1R5cGUgPSB7XG4gICAgICB2ZXI6ICcyMDIxLzAyLzAxJyxcbiAgICAgIG9uOiAoY2g6IHN0cmluZykgPT4gYXBpKCdvblJlc3BvbnNlQ2hBUEknLCBjaCksXG4gICAgICB1c2VJbzogKGlkOiBzdHJpbmcpID0+IGFwaSgndXNlJywgaWQpLFxuICAgICAgdHVuZTogKGJvb3RPcHRpb246IEJvb3RPcHRpb24sIGNhbGxiYWNrPzogRnVuY3Rpb24pID0+IGFwaSgndHVuZScsIGJvb3RPcHRpb24sIGNhbGxiYWNrKSxcbiAgICAgIHVudHVuZTogKGlkKSA9PiBhcGkoJ3VudHVuZScsIHsgaWQgfSksXG4gICAgICByYW5rOiAoY2g6IHN0cmluZykgPT4gYXBpKCdyYW5rJywgeyB0aHJlYWQ6IHsgY2ggfSB9KSxcbiAgICAgIGZldGNoUG9zdHM6IChjaDogc3RyaW5nKSA9PiBhcGkoJ2ZldGNoUG9zdHMnLCB7IHRocmVhZDogeyBjaCB9IH0pLFxuICAgICAgcG9zdDogKHBhcmFtcyA9IHt9KSA9PiBhcGkoJ3Bvc3QnLCB7IGFwcDogeyAuLi5wYXJhbXMgfSB9KSxcbiAgICAgIGdldFN0YXRlOiAoKSA9PiBzdG9yZS5nZXRTdGF0ZSgpLFxuICAgIH07XG4gICAgcmV0dXJuIHB1YmxpY0FwaU1ldGhvZHM7XG4gIH1cbn1cbiIsImltcG9ydCBBbmFseXplIGZyb20gJ2FwaS9zdG9yZS9BbmFseXplJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IEFuYWx5emUoKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24uYW5hbHl6ZSA/IHN0YXRlLm1lcmdlKGFjdGlvbi5hbmFseXplKSA6IHN0YXRlO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IFthY3Rpb24udHlwZSwgLi4uc3RhdGVdO1xuIiwiaW1wb3J0IEFwcCBmcm9tICdhcGkvc3RvcmUvQXBwJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IEFwcCgpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5hcHAgPyBuZXcgQXBwKGFjdGlvbi5hcHApIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IEJvb3RPcHRpb24gZnJvbSAnYXBpL3N0b3JlL0Jvb3RPcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgQm9vdE9wdGlvbigpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi5ib290T3B0aW9uID8gc3RhdGUubWVyZ2UoYWN0aW9uLmJvb3RPcHRpb24pIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuXG5pbXBvcnQgYW5hbHl6ZSBmcm9tICcuL2FuYWx5emUnO1xuaW1wb3J0IGFwaUxvZyBmcm9tICcuL2FwaUxvZyc7XG5pbXBvcnQgYXBwIGZyb20gJy4vYXBwJztcbmltcG9ydCBib290T3B0aW9uIGZyb20gJy4vYm9vdE9wdGlvbic7XG5pbXBvcnQgcG9zdHMgZnJvbSAnLi9wb3N0cyc7XG5pbXBvcnQgcG9zdHNDaGlsZCBmcm9tICcuL3Bvc3RzQ2hpbGQnO1xuaW1wb3J0IHBvc3RzTXVsdGkgZnJvbSAnLi9wb3N0c011bHRpJztcbmltcG9ydCBwb3N0c1NpbmdsZSBmcm9tICcuL3Bvc3RzU2luZ2xlJztcbmltcG9ydCBwb3N0c1RpbWVsaW5lIGZyb20gJy4vcG9zdHNUaW1lbGluZSc7XG5pbXBvcnQgcG9zdHNUaW1lbGluZVN0b2NrIGZyb20gJy4vcG9zdHNUaW1lbGluZVN0b2NrJztcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVybyBmcm9tICcuL3Bvc3RzVGltZWxpbmVaZXJvJztcbmltcG9ydCBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIGZyb20gJy4vcG9zdHNUaW1lbGluZVplcm9BZnRlcic7XG5pbXBvcnQgcmFua3MgZnJvbSAnLi9yYW5rcyc7XG5pbXBvcnQgc2V0dGluZyBmcm9tICcuL3NldHRpbmcnO1xuaW1wb3J0IHRocmVhZCBmcm9tICcuL3RocmVhZCc7XG5pbXBvcnQgdGhyZWFkRGV0YWlsIGZyb20gJy4vdGhyZWFkRGV0YWlsJztcbmltcG9ydCB0aHJlYWRzIGZyb20gJy4vdGhyZWFkcyc7XG5pbXBvcnQgdHVuZUNoIGZyb20gJy4vdHVuZUNoJztcbmltcG9ydCB1c2VyIGZyb20gJy4vdXNlcic7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyRmlsZXMgPSB7XG4gIGFwcCxcbiAgdXNlcixcbiAgdHVuZUNoLFxuICByYW5rcyxcbiAgdGhyZWFkLFxuICB0aHJlYWRzLFxuICB0aHJlYWREZXRhaWwsXG4gIGFuYWx5emUsXG4gIGJvb3RPcHRpb24sXG4gIHNldHRpbmcsXG4gIHBvc3RzLFxuICBwb3N0c1RpbWVsaW5lLFxuICBwb3N0c1RpbWVsaW5lU3RvY2ssXG4gIHBvc3RzVGltZWxpbmVaZXJvLFxuICBwb3N0c1RpbWVsaW5lWmVyb0FmdGVyLFxuICBwb3N0c011bHRpLFxuICBwb3N0c1NpbmdsZSxcbiAgcG9zdHNDaGlsZCxcbiAgYXBpTG9nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzKHJlZHVjZXJGaWxlcyk7XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5pbXBvcnQgUG9zdHMgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBQb3N0W10gPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24ucG9zdHMgPyBuZXcgUG9zdHMoYWN0aW9uLnBvc3RzKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0cyBmcm9tICdhcGkvc3RvcmUvUG9zdHMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ0FQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkJzpcbiAgICAgIHJldHVybiBuZXcgUG9zdHMoKTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHMnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0JzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNDaGlsZCAmJiBhY3Rpb24ucG9zdHNDaGlsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24udGhyZWFkLmNoID09PSBhY3Rpb24ucG9zdHNDaGlsZFswXS5jaCkge1xuICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c0NoaWxkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNDaGlsZCAmJiBhY3Rpb24ucG9zdHNDaGlsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzQ2hpbGQsIC4uLnN0YXRlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgY29uZiBmcm9tICdjb21tb24vY29uZic7XG5cbmltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0cyBmcm9tICdhcGkvc3RvcmUvUG9zdHMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ09OX0NMSUNLX01VTFRJU1RSRUFNJzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNNdWx0aTtcbiAgICBjYXNlICdDTElFTlRfVE9fU0VSVkVSW0VNSVRdOmNoYW5nZVRocmVhZCc6XG4gICAgICByZXR1cm4gbmV3IFBvc3RzKCk7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNNdWx0aSAmJiBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhY3Rpb24uYXBwLmlzUm9vdENoKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5hY3Rpb24ucG9zdHNNdWx0aV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0JzpcbiAgICAgIC8vIHBvc3RNdWx0aeOBr+WtkOS+m+OBruaKleeov+OCkuWFqOOBpuihqOekuuOBmeOCi+S7leanmFxuICAgICAgaWYgKGFjdGlvbi5wb3N0c011bHRpICYmIGFjdGlvbi5wb3N0c011bHRpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFjdGlvbi5hcHAucm9vdENoID09PSBhY3Rpb24ucG9zdHNNdWx0aVswXS5jaCkge1xuICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIC4uLmFjdGlvbi5wb3N0c011bHRpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNNdWx0aSAmJiBhY3Rpb24ucG9zdHNNdWx0aS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBtb3JlUG9zdE11bGl0ID0gW107XG5cbiAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCArIGFjdGlvbi5wb3N0c011bHRpLmxlbmd0aCA+IGNvbmYuZmluZE9uZUxpbWl0Q250KSB7XG4gICAgICAgICAgbW9yZVBvc3RNdWxpdCA9IFsuLi5hY3Rpb24ucG9zdHNNdWx0aSwgLi4uc3RhdGVdO1xuICAgICAgICAgIHJldHVybiBtb3JlUG9zdE11bGl0LnNsaWNlKDAsIGNvbmYuZmluZE9uZUxpbWl0Q250KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c011bHRpLCAuLi5zdGF0ZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5pbXBvcnQgUG9zdHNTaW5nbGUgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzU2luZ2xlJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBQb3N0W10gPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdPTl9DTElDS19NVUxUSVNUUkVBTSc6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzU2luZ2xlO1xuICAgIGNhc2UgJ0FQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkJzpcbiAgICAgIHJldHVybiBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHMnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0JzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNTaW5nbGUgJiYgYWN0aW9uLnBvc3RzU2luZ2xlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzU2luZ2xlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZSc6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzU2luZ2xlICYmIGFjdGlvbi5wb3N0c1NpbmdsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzU2luZ2xlLCAuLi5zdGF0ZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmUnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ0FQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkJzpcbiAgICAgIHJldHVybiBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgIGNhc2UgJ1VOTU9VTlRfUE9TVFNfVElNRUxJTkUnOlxuICAgICAgcmV0dXJuIHN0YXRlLm1hcCgocHQpID0+IHtcbiAgICAgICAgcHQuZGlzcEZsZyA9IHB0LmN1cnJlbnRUaW1lIDw9IGFjdGlvbi5tZWRpYUN1cnJlbnRUaW1lO1xuICAgICAgICByZXR1cm4gcHQ7XG4gICAgICB9KTtcbiAgICBjYXNlICdDTEVBUl9QT1NUU19USU1FTElORSc6XG4gICAgICByZXR1cm4gWy4uLmFjdGlvbi5wb3N0c1RpbWVsaW5lXTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHMnOlxuICAgICAgaWYgKGFjdGlvbi5wb3N0c1RpbWVsaW5lICYmIGFjdGlvbi5wb3N0c1RpbWVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTkVYVF9QT1NUU19USU1FTElORSc6XG4gICAgICBpZiAoYWN0aW9uLnBvc3RzVGltZWxpbmUgJiYgYWN0aW9uLnBvc3RzVGltZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5hY3Rpb24ucG9zdHNUaW1lbGluZV07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUkVWX1BPU1RTX1RJTUVMSU5FJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNUaW1lbGluZSAmJiBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgaWYgKFxuICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSAmJlxuICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lWzBdLnVpZCA9PT0gYWN0aW9uLnVzZXIudWlkICYmXG4gICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lWzBdLmNoID09PSBhY3Rpb24udGhyZWFkLmNoXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4uYWN0aW9uLnBvc3RzVGltZWxpbmVdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlJzpcbiAgICAgIGlmIChhY3Rpb24ucG9zdHNUaW1lbGluZSAmJiBhY3Rpb24ucG9zdHNUaW1lbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uYWN0aW9uLnBvc3RzVGltZWxpbmUsIC4uLnN0YXRlXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gJ2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2snO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3RbXSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0JzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrXSA6IHN0YXRlO1xuICAgIGNhc2UgJ0NMRUFSX1BPU1RTX1RJTUVMSU5FJzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrID8gWy4uLnN0YXRlLCBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrXSA6IHN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jayA/IG5ldyBQb3N0c1RpbWVsaW5lU3RvY2soYWN0aW9uLnBvc3RzVGltZWxpbmVTdG9jaykgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0VGltZWxpbmVaZXJvIGZyb20gJ2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVybyc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZTogUG9zdFtdID0gW10sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybyA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvXSA6IHN0YXRlO1xuICAgIGNhc2UgJ0NMRUFSX1BPU1RTX1RJTUVMSU5FJzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm8gPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb10gOiBzdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybyA/IG5ldyBQb3N0VGltZWxpbmVaZXJvKGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVybykgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcbmltcG9ydCBQb3N0c1RpbWVsaW5lWmVyb0FmdGVyIGZyb20gJ2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lWmVyb0FmdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlOiBQb3N0W10gPSBbXSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCc6XG4gICAgICByZXR1cm4gYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIgPyBbLi4uc3RhdGUsIGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyXSA6IHN0YXRlO1xuICAgIGNhc2UgJ0NMRUFSX1BPU1RTX1RJTUVMSU5FJzpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IFsuLi5zdGF0ZSwgYWN0aW9uLnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXJdIDogc3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhY3Rpb24ucG9zdHNUaW1lbGluZVplcm9BZnRlciA/IG5ldyBQb3N0c1RpbWVsaW5lWmVyb0FmdGVyKGFjdGlvbi5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyKSA6IHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IFBvc3RzIGZyb20gJ2FwaS9zdG9yZS9Qb3N0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgbGV0IHBvc3RzID0gW107XG4gIGxldCBwb3N0TGVuZ3RoID0gMDtcbiAgY29uc3Qgc29ydFdhdGNoQ250ID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5jaCA9PT0gYWN0aW9uLmFwcC5yb290Q2ggfHwgYi5jaCA9PT0gYWN0aW9uLmFwcC5yb290Q2gpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoYS5saXZlQ250IDwgYi5saXZlQ250KSByZXR1cm4gMTtcbiAgICBpZiAoYS5saXZlQ250ID4gYi5saXZlQ250KSByZXR1cm4gLTE7XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cyc6XG4gICAgICBpZiAoYWN0aW9uLmFwcC5pc0xpbmtDaCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHBvc3RzID0gUG9zdHMuZ2V0RGlzcFBvc3RzKGFjdGlvbik7XG4gICAgICBwb3N0TGVuZ3RoID0gcG9zdHMgJiYgcG9zdHMubGVuZ3RoID8gcG9zdHMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKHBvc3RMZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhdGUubWFwKChyYW5rKSA9PiB7XG4gICAgICAgIGlmIChhY3Rpb24udGhyZWFkLmNoID09PSByYW5rLmNoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnJhbmssXG4gICAgICAgICAgICBmYXZpY29uOiBwb3N0c1twb3N0TGVuZ3RoIC0gMV0uZmF2aWNvbixcbiAgICAgICAgICAgIHN0YW1wSWQ6IHBvc3RzW3Bvc3RMZW5ndGggLSAxXS5zdGFtcElkLFxuICAgICAgICAgICAgcG9zdDogcG9zdHNbcG9zdExlbmd0aCAtIDFdLnBvc3QsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmFuaztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnR1bmUnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWQnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpkaXNjb25uZWN0JzpcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICAubWFwKChyYW5rKSA9PiB7XG4gICAgICAgICAgaWYgKGFjdGlvbi50aHJlYWQuY2ggPT09IHJhbmsuY2gpIHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnJhbmssIGxpdmVDbnQ6IGFjdGlvbi50aHJlYWQubGl2ZUNudCB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuaztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5zb3J0KHNvcnRXYXRjaENudCk7XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgcmV0dXJuIHN0YXRlLm1hcCgocmFuaykgPT4ge1xuICAgICAgICBpZiAoYWN0aW9uLnBvc3RzWzBdLmNoID09PSByYW5rLmNoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnJhbmssXG4gICAgICAgICAgICB0aXRsZTogYWN0aW9uLnBvc3RzWzBdLnRpdGxlLFxuICAgICAgICAgICAgc3RhbXBJZDogYWN0aW9uLnBvc3RzWzBdLnN0YW1wSWQsXG4gICAgICAgICAgICBmYXZpY29uOiBhY3Rpb24ucG9zdHNbMF0uZmF2aWNvbixcbiAgICAgICAgICAgIHBvc3Q6IGFjdGlvbi5wb3N0c1swXS5wb3N0LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbms7XG4gICAgICB9KTtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOnJhbmsnOlxuICAgICAgLy8gc3RhdGXjgahhY3Rpb24ucmFua+OBruS4oeaWueWtmOWcqOOBmeOCi+WgtOWQiFxuICAgICAgaWYgKHN0YXRlICYmIHN0YXRlLmxlbmd0aCA+IDAgJiYgYWN0aW9uLnJhbmsgJiYgYWN0aW9uLnJhbmsubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXdSYW5rcyA9IFtdO1xuICAgICAgICBjb25zdCByYW5rQ250ID0gYWN0aW9uLnJhbmsubGVuZ3RoO1xuICAgICAgICBsZXQgbGFzdFBvc3QgPSBhY3Rpb24ucmFua1swXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5rQ250OyBpKyspIHtcbiAgICAgICAgICBsZXQgbmV3UmFuayA9IGFjdGlvbi5yYW5rW2ldO1xuICAgICAgICAgIGxhc3RQb3N0ID0gbmV3UmFuay51cGRhdGVUaW1lID4gbGFzdFBvc3QudXBkYXRlVGltZSA/IG5ld1JhbmsgOiBsYXN0UG9zdDtcblxuICAgICAgICAgIGlmIChuZXdSYW5rLmNoID09PSBzdGF0ZVswXS5jaCkge1xuICAgICAgICAgICAgbmV3UmFuayA9IHtcbiAgICAgICAgICAgICAgLi4ubmV3UmFuayxcbiAgICAgICAgICAgICAgbGl2ZUNudDogc3RhdGVbMF0ubGl2ZUNudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1JhbmtzLnB1c2gobmV3UmFuayk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdSYW5rcy5zb3J0KHNvcnRXYXRjaENudCk7XG4gICAgICAgIG5ld1JhbmtzWzBdLmZhaWNvbiA9IGxhc3RQb3N0LmZhdmljb247XG4gICAgICAgIG5ld1JhbmtzWzBdLnBvc3QgPSBsYXN0UG9zdC5wb3N0O1xuICAgICAgICBuZXdSYW5rc1swXS5zdGFtcElkID0gbGFzdFBvc3Quc3RhbXBJZDtcbiAgICAgICAgcmV0dXJuIG5ld1JhbmtzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5yYW5rID8gYWN0aW9uLnJhbmsgOiBzdGF0ZTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFjdGlvbi5yYW5rID8gYWN0aW9uLnJhbmsgOiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBTZXR0aW5nIGZyb20gJ2FwaS9zdG9yZS9TZXR0aW5nJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFNldHRpbmcoKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24uc2V0dGluZyA/IHN0YXRlLm1lcmdlKGFjdGlvbi5zZXR0aW5nKSA6IHN0YXRlO1xufTtcbiIsImltcG9ydCBUaHJlYWQgZnJvbSAnYXBpL3N0b3JlL1RocmVhZCc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IG5ldyBUaHJlYWQoe30sIHt9KSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdTRVRVUEVEX0FQSV9TVE9SRSc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTp0dW5lJzpcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOmNoYW5nZVRocmVhZCc6XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzJzpcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOnVwZGF0ZVRocmVhZFNlcnZlck1ldGFzJzpcbiAgICAgIHJldHVybiBuZXcgVGhyZWFkKGFjdGlvbi50aHJlYWQpO1xuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTp0dW5lJzpcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06Y2hhbmdlVGhyZWFkJzpcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06ZGlzY29ubmVjdCc6XG4gICAgICAvLyDjg6bjg7zjgrbjg7zjgYzku4rnj77lnKjjgIHplrLopqfjgZfjgabjgYTjgot0aHJlYWTjga7loLTlkIhcbiAgICAgIGlmIChzdGF0ZS5jaCA9PT0gYWN0aW9uLnRocmVhZC5jaCkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLnRocmVhZCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWQpIDogc3RhdGU7XG4gICAgICB9XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnOlxuICAgICAgLy8g44Om44O844K244O844GM5LuK54++5Zyo44CB6Zay6Kan44GX44Gm44GE44KLdGhyZWFk44Gu5aC05ZCIXG4gICAgICBpZiAoc3RhdGUuY2ggPT09IGFjdGlvbi50aHJlYWQuY2gpIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi50aHJlYWQgPyBzdGF0ZS5tZXJnZShhY3Rpb24udGhyZWFkKSA6IHN0YXRlO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG4iLCJpbXBvcnQgVGhyZWFkIGZyb20gJ2FwaS9zdG9yZS9UaHJlYWQnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkKHt9LCB7fSksIGFjdGlvbikgPT4ge1xuICByZXR1cm4gYWN0aW9uLnRocmVhZERldGFpbCA/IHN0YXRlLm1lcmdlKGFjdGlvbi50aHJlYWREZXRhaWwpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFRocmVhZHMgZnJvbSAnYXBpL3N0b3JlL1RocmVhZHMnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBuZXcgVGhyZWFkcygpLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIGFjdGlvbi50aHJlYWRzID8gc3RhdGUubWVyZ2UoYWN0aW9uLnRocmVhZHMpIDogc3RhdGU7XG59O1xuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGU6IFBvc3QgPSBuZXcgUG9zdCgpLCBhY3Rpb24pID0+IHtcbiAgLy8gY29uc29sZS5sb2coYWN0aW9uLnR5cGUsIGFjdGlvbik7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0VNSVRdOnR1bmUnOlxuICAgICAgaWYgKGFjdGlvbi50aHJlYWQubGFzdFBvc3QuY2ggPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9zdCh7XG4gICAgICAgICAgY2g6IGFjdGlvbi50aHJlYWQuY2gsXG4gICAgICAgICAgY2hzOiBhY3Rpb24udGhyZWFkLmNocyxcbiAgICAgICAgICB0aXRsZTogYWN0aW9uLnRocmVhZC50aXRsZSxcbiAgICAgICAgICBmYXZpY29uOiBhY3Rpb24udGhyZWFkLmZhdmljb24sXG4gICAgICAgIH0gYXMgUG9zdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IFBvc3QoYWN0aW9uLnRocmVhZC5sYXN0UG9zdCk7XG4gICAgICB9XG4gICAgY2FzZSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnR1bmUnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWQnOlxuICAgIGNhc2UgJ1NFUlZFUl9UT19BUElbQlJPQURDQVNUXTpkaXNjb25uZWN0JzpcbiAgICAgIGNvbnN0IHsgdGhyZWFkIH0gPSBhY3Rpb247XG4gICAgICBpZiAodGhyZWFkLmNoID09PSBzdGF0ZS5jaCkge1xuICAgICAgICBjb25zdCBwb3N0ID0geyAuLi5zdGF0ZSwgbGl2ZUNudDogdGhyZWFkLmxpdmVDbnQgfSBhcyBQb3N0O1xuICAgICAgICByZXR1cm4gbmV3IFBvc3QocG9zdCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdCc6XG4gICAgICBjb25zdCBwb3N0ID0gYWN0aW9uLnBvc3RzWzBdO1xuICAgICAgaWYgKHBvc3QuY2ggPT09IHN0YXRlLmNoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9zdCh7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgdGl0bGU6IHBvc3QudGl0bGUsXG4gICAgICAgICAgc3RhbXBJZDogcG9zdC5zdGFtcElkLFxuICAgICAgICAgIGZhdmljb246IHBvc3QuZmF2aWNvbixcbiAgICAgICAgICBwb3N0OiBwb3N0LnBvc3QsXG4gICAgICAgIH0gYXMgUG9zdCk7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbiIsImltcG9ydCBVc2VyIGZyb20gJ2FwaS9zdG9yZS9Vc2VyJztcblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gbmV3IFVzZXIoKSwgYWN0aW9uKSA9PiB7XG4gIHJldHVybiBhY3Rpb24udXNlciA/IHN0YXRlLm1lcmdlKGFjdGlvbi51c2VyKSA6IHN0YXRlO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbkxvZ3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSAnY29tbW9uL1NjaGVtYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuYWx5emUgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCBsaXZlQ250ID0gMDtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoeyBsaXZlQ250IH0pO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5pbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5pbXBvcnQgVGhyZWFkIGZyb20gJ2FwaS9zdG9yZS9UaHJlYWQnO1xuXG5leHBvcnQgdHlwZSBGcm9tVHlwZSA9ICdDaCcgfCAnQmFja1RvUm9vdENoJyB8ICdUb01lZGlhJyB8ICdMaW5rcycgfCAnZmluZE1lZGlhQ2gnIHwgJyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9mZnNldEZpbmRJZCgpIHtcbiAgICByZXR1cm4gUG9zdC5kZWZhdWx0RmluZElkO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVUaW1lbGluZSgpOiAnVGltZWxpbmUnIHtcbiAgICByZXR1cm4gJ1RpbWVsaW5lJztcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlU2luZ2xlKCk6ICdTaW5nbGUnIHtcbiAgICByZXR1cm4gJ1NpbmdsZSc7XG4gIH1cbiAgc3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZU11bHRpKCk6ICdNdWx0aScge1xuICAgIHJldHVybiAnTXVsdGknO1xuICB9XG4gIHN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVDaGlsZCgpOiAnQ2hpbGQnIHtcbiAgICByZXR1cm4gJ0NoaWxkJztcbiAgfVxuICBzdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlTG9ncygpOiAnTG9ncycge1xuICAgIHJldHVybiAnTG9ncyc7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVRhZ1R5cGVObygpIHtcbiAgICByZXR1cm4gJ2h0bWwnO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlQXVkaW8oKSB7XG4gICAgcmV0dXJuICdhdWRpbyc7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVRhZ1R5cGVWaWRlbygpIHtcbiAgICByZXR1cm4gJ3ZpZGVvJztcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhVHlwZU1wMygpIHtcbiAgICByZXR1cm4gJ21wMyc7XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYVR5cGVNcDQoKSB7XG4gICAgcmV0dXJuICdtcDQnO1xuICB9XG4gIHN0YXRpYyBnZXQgbWVkaWFUeXBlTTRhKCkge1xuICAgIHJldHVybiAnbTRhJztcbiAgfVxuICBzdGF0aWMgZ2V0IG1lZGlhQ2hzKCkge1xuICAgIHJldHVybiBbQXBwLm1lZGlhVHlwZU1wMywgQXBwLm1lZGlhVHlwZU1wNCwgQXBwLm1lZGlhVHlwZU00YV07XG4gIH1cbiAgc3RhdGljIGdldCBtZWRpYUNoVGFnVHlwZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtBcHAubWVkaWFUeXBlTXAzXTogQXBwLm1lZGlhVGFnVHlwZUF1ZGlvLFxuICAgICAgW0FwcC5tZWRpYVR5cGVNcDRdOiBBcHAubWVkaWFUYWdUeXBlVmlkZW8sXG4gICAgICBbQXBwLm1lZGlhVHlwZU00YV06IEFwcC5tZWRpYVRhZ1R5cGVBdWRpbyxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXRNZWRpYVR5cGUoc3JjLCBwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5jaFR5cGUpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuY2hUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gQXBwLmdldE1lZGlhVHlwZUZyb21TcmMoc3JjKTtcbiAgfVxuICBzdGF0aWMgZ2V0TWVkaWFUeXBlRnJvbVNyYyhzcmMpIHtcbiAgICBjb25zdCBtZWRpYUNoVGFnVHlwZUtleXMgPSBPYmplY3Qua2V5cyhBcHAubWVkaWFDaFRhZ1R5cGVzKTtcbiAgICBjb25zdCBtZWRpYUNoVGFnVHlwZUxlbmd0aCA9IG1lZGlhQ2hUYWdUeXBlS2V5cy5sZW5ndGg7XG4gICAgbGV0IG1lZGlhVHlwZSA9ICdodG1sJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lZGlhQ2hUYWdUeXBlTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoYC4ke21lZGlhQ2hUYWdUeXBlS2V5c1tpXX0kYCk7XG4gICAgICBpZiAoc3JjLm1hdGNoKHJlZ0V4cCkpIHtcbiAgICAgICAgbWVkaWFUeXBlID0gQXBwLm1lZGlhQ2hUYWdUeXBlc1ttZWRpYUNoVGFnVHlwZUtleXNbaV1dO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lZGlhVHlwZTtcbiAgfVxuICBzdGF0aWMgdmFsaWRJbnB1dFBvc3QodmFsdWUpIHtcbiAgICBpZiAoL1xcclxcbiR8XFxuJHxcXHIkL2dpbS50ZXN0KHZhbHVlKSkgcmV0dXJuICdMQVNUIFRZUEUgQlJFQUsgTElORS4nO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZFBvc3QodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKSByZXR1cm4gJ05PIElOUFVUIFBPU1QnO1xuICAgIGlmICgvXlxcclxcbiskfFxcbiskfFxcciskL2cudGVzdCh2YWx1ZSkpIHJldHVybiAnT05MWSBORVcgTElORSc7XG4gICAgaWYgKC9eXFxzKyQvZy50ZXN0KHZhbHVlKSkgcmV0dXJuICdvbmx5IHNwYWNlJztcbiAgICBpZiAoL15cXHJcXG4rKFxcc3xcXFMpKyR8XlxcbisoXFxzfFxcUykrJHxeXFxyKyhcXHN8XFxTKSskLy50ZXN0KHZhbHVlKSkgcmV0dXJuICdFTVBUWSBQT1NUJztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0V2lkdGgocGFyYW1zKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5pbm5lcldpZHRoKSByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gICAgaWYgKHBhcmFtcy53aWR0aCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMud2lkdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChwYXJhbXMud2lkdGguaW5kZXhPZigncHgnKSA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIE51bWJlcihwYXJhbXMud2lkdGgucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zLndpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRIZWlnaHQocGFyYW1zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LmlubmVySGVpZ2h0KSByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWQ6IHN0cmluZztcblxuICAvLyDjgrnjg6zjg4Pjg4nln7rmnKzplqLpgKNcbiAgaXNSb290Q2g6IGJvb2xlYW47XG4gIGlzTGlua0NoOiBib29sZWFuO1xuICBpc01lZGlhQ2g6IGJvb2xlYW47XG4gIGlzVHVuZTogYm9vbGVhbjtcbiAgcm9vdENoOiBzdHJpbmc7XG4gIHJvb3RUaXRsZTogc3RyaW5nO1xuICBjaFR5cGU6ICd2aWRlbycgfCAnYXVkaW8nIHwgJ2h0bWwnO1xuICBkaXNwVGhyZWFkVHlwZTogJ011bHRpJyB8ICdTaW5nbGUnIHwgJ0NoaWxkJyB8ICdUaW1lbGluZScgfCAnTG9ncyc7XG4gIHR1bmVkQ2g6IHN0cmluZztcbiAgbXVsdGlzdHJlYW06IGJvb2xlYW47XG5cbiAgLy8g5oqV56i/5oOF5aCxXG4gIGZpbmRUeXBlOiAnaHRtbCcgfCAnbXAzJyB8ICdtcDQnIHwgJ200YScgfCAnYXVkaW8nIHwgJ3ZpZGVvJztcbiAgb2Zmc2V0RmluZElkOiBzdHJpbmc7XG4gIG9mZnNldFRpbWVsaW5lRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIG9mZnNldFNpbmdsZUZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRNdWx0aUZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRDaGlsZEZpbmRJZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0RmluZElkO1xuICBvZmZzZXRMb2dzRmluZElkOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRGaW5kSWQ7XG5cbiAgLy8g5YWl5Yqb54q25oWLXG4gIGlucHV0UG9zdDogc3RyaW5nO1xuICBpbnB1dFN0YW1wSWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgaW5wdXRDdXJyZW50VGltZTogbnVtYmVyO1xuICBpbnB1dFNlYXJjaDogc3RyaW5nO1xuXG4gIC8vIOOBneOBruS7llxuICBpc1RvZ2dsZU11bHRpc3RyZWFtOiBib29sZWFuO1xuICBpc1JhbmtEZXRhaWxNb2RlOiBib29sZWFuO1xuICBhY3Rpb25lZDogc3RyaW5nO1xuICBkZWJ1Zzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30sIGNhbGwgPSAnJykge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyDmupblgplcbiAgICBjb25zdCBjaCA9IHBhcmFtcy5jaCA/IHBhcmFtcy5jaCA6ICcnO1xuXG4gICAgLy8gSURcbiAgICBjb25zdCBpZCA9IHBhcmFtcy5pZCA/IHBhcmFtcy5pZCA6ICcnO1xuXG4gICAgLy8g44K544Os44OD44OJ5Z+65pys6Zai6YCjXG4gICAgY29uc3QgaXNUdW5lID0gU2NoZW1hLmlzU2V0KHBhcmFtcy5pc1R1bmUpID8gcGFyYW1zLmlzVHVuZSA6IGZhbHNlO1xuICAgIGNvbnN0IGlzTWVkaWFDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNNZWRpYUNoKSA/IHBhcmFtcy5pc01lZGlhQ2ggOiBBcHAuZ2V0SXNNZWRpYUNoKGNoKTtcbiAgICBjb25zdCBpc0xpbmtDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNMaW5rQ2gpID8gcGFyYW1zLmlzTGlua0NoIDogZmFsc2U7XG4gICAgY29uc3Qgcm9vdENoID0gcGFyYW1zLnJvb3RDaCA/IHBhcmFtcy5yb290Q2ggOiBjaDtcbiAgICBjb25zdCBpc1Jvb3RDaCA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNSb290Q2gpID8gcGFyYW1zLmlzUm9vdENoIDogcm9vdENoID09PSBjaDtcbiAgICBjb25zdCByb290VGl0bGUgPSBwYXJhbXMucm9vdFRpdGxlID8gcGFyYW1zLnJvb3RUaXRsZSA6ICd0YWxrbic7XG4gICAgY29uc3Qgc3JjID0gQXBwLmdldE1lZGlhU3JjKHBhcmFtcy5wcm90b2NvbCwgY2gpO1xuICAgIGNvbnN0IGNoVHlwZSA9IEFwcC5nZXRNZWRpYVR5cGUoc3JjLCBwYXJhbXMpO1xuICAgIGNvbnN0IHR1bmVkQ2ggPSBwYXJhbXMgJiYgcGFyYW1zLnR1bmVkQ2ggPyBwYXJhbXMudHVuZWRDaCA6ICcnO1xuICAgIGNvbnN0IGRpc3BUaHJlYWRUeXBlID0gQXBwLmdldERpc3BUaHJlYWRUeXBlKHBhcmFtcywgaXNNZWRpYUNoKTtcbiAgICBjb25zdCBtdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMubXVsdGlzdHJlYW0pID8gcGFyYW1zLm11bHRpc3RyZWFtIDogdHJ1ZTtcblxuICAgIC8vIOaKleeov+aDheWgsVxuICAgIGNvbnN0IGZpbmRUeXBlID0gcGFyYW1zICYmIHBhcmFtcy5maW5kVHlwZSA/IHBhcmFtcy5maW5kVHlwZSA6IFRocmVhZC5maW5kVHlwZUFsbDtcbiAgICBjb25zdCBvZmZzZXRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldEZpbmRJZCA/IHBhcmFtcy5vZmZzZXRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRUaW1lbGluZUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0VGltZWxpbmVGaW5kSWQgPyBwYXJhbXMub2Zmc2V0VGltZWxpbmVGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRTaW5nbGVGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA/IHBhcmFtcy5vZmZzZXRTaW5nbGVGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRNdWx0aUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRDaGlsZEZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0Q2hpbGRGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRMb2dzRmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRMb2dzRmluZElkID8gcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgOiBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIC8vIOWFpeWKm+eKtuaFi1xuICAgIGNvbnN0IGlucHV0UG9zdCA9IHBhcmFtcy5pbnB1dFBvc3QgPyBwYXJhbXMuaW5wdXRQb3N0IDogJyc7XG4gICAgY29uc3QgaW5wdXRTdGFtcElkID0gcGFyYW1zLmlucHV0U3RhbXBJZCA/IHBhcmFtcy5pbnB1dFN0YW1wSWQgOiBmYWxzZTtcbiAgICBjb25zdCBpbnB1dEN1cnJlbnRUaW1lID0gcGFyYW1zLmlucHV0Q3VycmVudFRpbWUgPyBwYXJhbXMuaW5wdXRDdXJyZW50VGltZSA6IDAuMDtcbiAgICBjb25zdCBpbnB1dFNlYXJjaCA9IHBhcmFtcy5pbnB1dFNlYXJjaCA/IHBhcmFtcy5pbnB1dFNlYXJjaCA6ICcnO1xuXG4gICAgLy8g44Gd44Gu5LuWXG4gICAgY29uc3QgaXNUb2dnbGVNdWx0aXN0cmVhbSA9IFNjaGVtYS5pc1NldChwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSkgPyBwYXJhbXMuaXNUb2dnbGVNdWx0aXN0cmVhbSA6IGZhbHNlO1xuICAgIGNvbnN0IGlzUmFua0RldGFpbE1vZGUgPSBTY2hlbWEuaXNTZXQocGFyYW1zLmlzUmFua0RldGFpbE1vZGUpID8gcGFyYW1zLmlzUmFua0RldGFpbE1vZGUgOiBmYWxzZTtcbiAgICBjb25zdCBhY3Rpb25lZCA9IHBhcmFtcyAmJiBwYXJhbXMuYWN0aW9uZWQgPyBwYXJhbXMuYWN0aW9uZWQgOiAnJztcbiAgICBjb25zdCBkZWJ1ZyA9IFNjaGVtYS5pc1NldChwYXJhbXMuZGVidWcpID8gcGFyYW1zLmRlYnVnIDogJyc7XG5cbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xuICAgICAgLy8gSURcbiAgICAgIGlkLFxuXG4gICAgICAvLyDjgrnjg6zjg4Pjg4nln7rmnKzplqLpgKNcbiAgICAgIGlzVHVuZSxcbiAgICAgIGlzUm9vdENoLFxuICAgICAgaXNMaW5rQ2gsXG4gICAgICBpc01lZGlhQ2gsXG4gICAgICByb290Q2gsXG4gICAgICByb290VGl0bGUsXG4gICAgICBjaFR5cGUsXG4gICAgICBkaXNwVGhyZWFkVHlwZSxcbiAgICAgIHR1bmVkQ2gsIC8vIGNoYW5nZVRocmVhZOOBrumam+OBruaOpee2muOBl+OBpuOBhOOBn+WPpOOBhOOCueODrOODg+ODieOBrkNIKGxpdmVDbnTjgpLjg4fjgq/jg6rjg6Hjg7Pjg4jjgZnjgovnlKjpgJQp44Go44GX44Gm5L+d5oyBXG4gICAgICBtdWx0aXN0cmVhbSwgLy8gZGlzcFRocmVhZFR5cGXjgYxDaGlsZCwgVGltZWxpbmXjgavjgarjgaPjgabjgoJtdWx0aXN0cmVhbeeKtuaFi+OCkue2reaMgeOBmeOCi1xuXG4gICAgICAvLyAgICAgIHRocmVhZFNjcm9sbFksXG5cbiAgICAgIC8vIOaKleeov+aDheWgsVxuICAgICAgZmluZFR5cGUsXG4gICAgICBvZmZzZXRGaW5kSWQsXG4gICAgICBvZmZzZXRUaW1lbGluZUZpbmRJZCxcbiAgICAgIG9mZnNldFNpbmdsZUZpbmRJZCxcbiAgICAgIG9mZnNldE11bHRpRmluZElkLFxuICAgICAgb2Zmc2V0Q2hpbGRGaW5kSWQsXG4gICAgICBvZmZzZXRMb2dzRmluZElkLFxuXG4gICAgICAvLyBkZXRhaWzmg4XloLFcblxuICAgICAgLy8g5YWl5Yqb54q25oWLXG4gICAgICBpbnB1dFBvc3QsXG4gICAgICBpbnB1dFN0YW1wSWQsXG4gICAgICBpbnB1dEN1cnJlbnRUaW1lLFxuICAgICAgaW5wdXRTZWFyY2gsXG5cbiAgICAgIC8vIOOBneOBruS7llxuICAgICAgaXNUb2dnbGVNdWx0aXN0cmVhbSxcbiAgICAgIGlzUmFua0RldGFpbE1vZGUsXG4gICAgICBhY3Rpb25lZCxcbiAgICAgIGRlYnVnLFxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGlzTWVkaWFDb250ZW50VHlwZShjb250ZW50VHlwZSkge1xuICAgIHJldHVybiBBcHAuaXNBdWRpb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB8fCBBcHAuaXNWaWRlb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKTtcbiAgfVxuXG4gIHN0YXRpYyBpc0F1ZGlvQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICByZXR1cm4gY29udGVudFR5cGUuaW5kZXhPZihBcHAubWVkaWFUYWdUeXBlQXVkaW8pID49IDA7XG4gIH1cblxuICBzdGF0aWMgaXNWaWRlb0NvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlLmluZGV4T2YoQXBwLm1lZGlhVGFnVHlwZVZpZGVvKSA+PSAwO1xuICB9XG5cbiAgc3RhdGljIGdldE1lZGlhU3JjKHByb3RvY29sLCBjaCkge1xuICAgIHJldHVybiBwcm90b2NvbCArICcvJyArIGNoLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0SXNNZWRpYUNoKGNoKSB7XG4gICAgcmV0dXJuIEFwcC5tZWRpYUNocy5zb21lKChleHQpID0+IHtcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoYC4ke2V4dH1cXC8kfC4ke2V4dH0kYCk7XG4gICAgICByZXR1cm4gY2gubWF0Y2gocmVnZXhwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwVGhyZWFkVHlwZShwYXJhbXMsIGlzTWVkaWFDaCkge1xuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmRpc3BUaHJlYWRUeXBlKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLmRpc3BUaHJlYWRUeXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNNZWRpYUNoKSB7XG4gICAgICAgIHJldHVybiBBcHAuZGlzcFRocmVhZFR5cGVUaW1lbGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHMgfSkge1xuICAgIGlmIChwb3N0cyAmJiBwb3N0c1swXSAmJiBwb3N0c1swXS5faWQpIHtcbiAgICAgIHJldHVybiBwb3N0c1swXS5faWQ7XG4gICAgfVxuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RlcFRvRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmtzIH06IGFueSwgdGhyZWFkU3RhdHVzOiBhbnksIHRvQ2g6IHN0cmluZywgY2xpY2tlZDogRnJvbVR5cGUgPSAnJykge1xuICAgIGxldCBhZnRlckRpc3BUaHJlYWRUeXBlID0gJyc7XG4gICAgY29uc3QgYmVmb3JlRGlzcFRocmVhZFR5cGUgPSBhcHAgJiYgYXBwLmRpc3BUaHJlYWRUeXBlID8gYXBwLmRpc3BUaHJlYWRUeXBlIDogQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGk7XG4gICAgYXBwID0gQXBwLmdldFN0ZXBEaXNwVGhyZWFkVHlwZSh7IGFwcCwgcmFua3MgfSwgdGhyZWFkU3RhdHVzLCB0b0NoLCBjbGlja2VkKTtcbiAgICBhZnRlckRpc3BUaHJlYWRUeXBlID0gYXBwLmRpc3BUaHJlYWRUeXBlO1xuICAgIHJldHVybiB7IGFwcCwgc3RlcFRvOiBgJHtiZWZvcmVEaXNwVGhyZWFkVHlwZX0gdG8gJHthZnRlckRpc3BUaHJlYWRUeXBlfWAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGVwRGlzcFRocmVhZFR5cGUoeyBhcHAsIHJhbmtzIH0sIHRocmVhZFN0YXR1czogYW55ID0ge30sIHRvQ2gsIGNsaWNrZWQpIHtcbiAgICBjb25zdCBsb2cgPSBmYWxzZTtcbiAgICBjb25zdCB1cGRhdGVkQXBwID0gYXBwID8gYXBwIDoge307XG4gICAgdXBkYXRlZEFwcC5vZmZzZXRGaW5kSWQgPSBBcHAuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKHJhbmtzKTtcbiAgICBpZiAobG9nKSBjb25zb2xlLmxvZyh0aHJlYWRTdGF0dXMpO1xuXG4gICAgaWYgKHRocmVhZFN0YXR1cy5pc01lZGlhQ2gpIHtcbiAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKCdCJyk7XG4gICAgICB1cGRhdGVkQXBwLmRpc3BUaHJlYWRUeXBlID0gQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU7XG4gICAgICB1cGRhdGVkQXBwLm9mZnNldEZpbmRJZCA9IHVwZGF0ZWRBcHAub2Zmc2V0VGltZWxpbmVGaW5kSWQgPyB1cGRhdGVkQXBwLm9mZnNldFRpbWVsaW5lRmluZElkIDogQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgICB1cGRhdGVkQXBwLmlzTGlua0NoID0gY2xpY2tlZCA9PT0gJ0xpbmtzJyB8fCBjbGlja2VkID09PSAnZmluZE1lZGlhQ2gnIHx8IGNsaWNrZWQgPT09ICdUb01lZGlhJyA/IHRydWUgOiBmYWxzZTtcbiAgICAgIHVwZGF0ZWRBcHAuaXNNZWRpYUNoID0gdHJ1ZTtcbiAgICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICAgIH1cblxuICAgIGlmIChjbGlja2VkID09PSAnQmFja1RvUm9vdENoJykge1xuICAgICAgdXBkYXRlZEFwcC5pc0xpbmtDaCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChjbGlja2VkID09PSAnTGlua3MnICYmIHJhbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGhhdmVNZW51SW5kZXggPSByYW5rcy5zb21lKChtaSkgPT4ge1xuICAgICAgICByZXR1cm4gbWkuY2ggPT09IHRvQ2ggfHwgbWkuY2ggPT09IHRvQ2ggKyAnLyc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0MgJyArIGhhdmVNZW51SW5kZXggKyAnJyk7XG5cbiAgICAgIGlmICghaGF2ZU1lbnVJbmRleCkge1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLmxvZygnRCcpO1xuXG4gICAgICAgIHVwZGF0ZWRBcHAub2Zmc2V0RmluZElkID0gQXBwLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDtcbiAgICAgICAgdXBkYXRlZEFwcC5pc0xpbmtDaCA9IHRydWU7XG4gICAgICAgIHJldHVybiB1cGRhdGVkQXBwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1cGRhdGVkQXBwLnJvb3RDaCA9PT0gdG9DaCkge1xuICAgICAgaWYgKHVwZGF0ZWRBcHAubXVsdGlzdHJlYW0pIHtcbiAgICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0UnKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0YnKTtcbiAgICAgICAgdXBkYXRlZEFwcC5kaXNwVGhyZWFkVHlwZSA9IEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvZykgY29uc29sZS5sb2coJ0cnKTtcbiAgICAgIHVwZGF0ZWRBcHAuZGlzcFRocmVhZFR5cGUgPSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDtcbiAgICB9XG4gICAgaWYgKGxvZykgY29uc29sZS5sb2coYXBwKTtcbiAgICByZXR1cm4gdXBkYXRlZEFwcDtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vdE9wdGlvbiBleHRlbmRzIFNjaGVtYSB7XG4gIGNvbnN0cnVjdG9yKGJvb3RPcHRpb246IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoeyAuLi5ib290T3B0aW9uIH0pO1xuICB9XG5cbiAgc3RhdGljIHJlYnVpbGRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICBsZXQgcmVidWlsZEF0dHJpYnV0ZXNPYmo6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKGkpID0+IHtcbiAgICAgIHJlYnVpbGRBdHRyaWJ1dGVzT2JqW2F0dHJpYnV0ZXNbaV0ubmFtZV0gPSBhdHRyaWJ1dGVzW2ldLnZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZWJ1aWxkQXR0cmlidXRlc09iajtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudUxvZ3MgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICBwYXJhbXMgPSBwYXJhbXMgPyBwYXJhbXMgOiBbXTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUocGFyYW1zKTtcbiAgfVxufVxuIiwiaW1wb3J0IFNjaGVtYSBmcm9tICdjb21tb24vU2NoZW1hJztcbmltcG9ydCBjb25mIGZyb20gJ2NvbW1vbi9jb25mJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdEZpbmRJZCgpIHtcbiAgICByZXR1cm4gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0VmFsdWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfaWQ6ICcnLFxuICAgICAgY2g6ICcvJyxcbiAgICAgIGNoczogWycvJ10sXG4gICAgICBmYXZpY29uOiBjb25mLmRlZmF1bHRGYXZpY29uLFxuICAgICAgZmluZFR5cGU6ICdIdG1sJyxcbiAgICAgIGxheWVyOiAxLFxuICAgICAgcG9zdDogJycsXG4gICAgICBwcm90b2NvbDogJ2h0dHBzOicsXG4gICAgICBzdGFtcElkOiAwLFxuICAgICAgdGl0bGU6ICd0YWxrbicsXG4gICAgICBsaXZlQ250OiAwLFxuICAgICAgdWlkOiAnJyxcbiAgICAgIHV0eXBlOiAnJyxcbiAgICAgIGRpc3BGbGc6IHRydWUsXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgY3JlYXRlVGltZTogbmV3IERhdGUoKSxcbiAgICAgIGN1cnJlbnRUaW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlVGltZTogbmV3IERhdGUoKSxcbiAgICB9O1xuICB9XG4gIF9pZDogc3RyaW5nID0gUG9zdC5kZWZhdWx0VmFsdWVzLl9pZDtcbiAgY2g6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5jaDtcbiAgY2hzOiBzdHJpbmdbXSA9IFBvc3QuZGVmYXVsdFZhbHVlcy5jaHM7XG4gIGZhdmljb246IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5mYXZpY29uO1xuICBmaW5kVHlwZTogc3RyaW5nID0gUG9zdC5kZWZhdWx0VmFsdWVzLmZpbmRUeXBlO1xuICBsYXllcjogbnVtYmVyID0gUG9zdC5kZWZhdWx0VmFsdWVzLmxheWVyO1xuICBwb3N0OiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMucG9zdDtcbiAgcHJvdG9jb2w6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy5wcm90b2NvbDtcbiAgc3RhbXBJZDogbnVtYmVyID0gUG9zdC5kZWZhdWx0VmFsdWVzLnN0YW1wSWQ7XG4gIHRpdGxlOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudGl0bGU7XG4gIGxpdmVDbnQ6IG51bWJlciA9IFBvc3QuZGVmYXVsdFZhbHVlcy5saXZlQ250O1xuICB1aWQ6IHN0cmluZyA9IFBvc3QuZGVmYXVsdFZhbHVlcy51aWQ7XG4gIHV0eXBlOiBzdHJpbmcgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudXR5cGU7XG4gIGRpc3BGbGc6IGJvb2xlYW4gPSBQb3N0LmRlZmF1bHRWYWx1ZXMuZGlzcEZsZztcbiAgZGF0YTogYW55ID0gUG9zdC5kZWZhdWx0VmFsdWVzLmRhdGE7XG4gIGNyZWF0ZVRpbWU6IERhdGUgPSBQb3N0LmRlZmF1bHRWYWx1ZXMuY3JlYXRlVGltZTtcbiAgY3VycmVudFRpbWU6IERhdGUgPSBQb3N0LmRlZmF1bHRWYWx1ZXMuY3VycmVudFRpbWU7XG4gIHVwZGF0ZVRpbWU6IERhdGUgPSBQb3N0LmRlZmF1bHRWYWx1ZXMudXBkYXRlVGltZTtcbiAgY29uc3RydWN0b3IocGFyYW1zPzogUG9zdCkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdmFsdWVzID0gcGFyYW1zID8geyAuLi5Qb3N0LmRlZmF1bHRWYWx1ZXMsIC4uLnBhcmFtcyB9IDogUG9zdC5kZWZhdWx0VmFsdWVzO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh2YWx1ZXMpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RNdWx0aSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgQXBwIGZyb20gJ2FwaS9zdG9yZS9BcHAnO1xuaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuaW1wb3J0IFBvc3RNdWx0aSBmcm9tICdhcGkvc3RvcmUvUG9zdE11bHRpJztcbmltcG9ydCBQb3N0c1NpbmdsZSBmcm9tICdhcGkvc3RvcmUvUG9zdHNTaW5nbGUnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmUgZnJvbSAnYXBpL3N0b3JlL1Bvc3RzVGltZWxpbmUnO1xuaW1wb3J0IFBvc3RzVGltZWxpbmVTdG9jayBmcm9tICdhcGkvc3RvcmUvUG9zdHNUaW1lbGluZVN0b2NrJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdHMge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXNwUG9zdHMoc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHNUaW1lbGluZSwgcG9zdHNNdWx0aSwgcG9zdHNTaW5nbGUsIHBvc3RzQ2hpbGQsIHBvc3RzTG9ncyB9ID0gc3RhdGU7XG4gICAgc3dpdGNoIChhcHAuZGlzcFRocmVhZFR5cGUpIHtcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6XG4gICAgICAgIHJldHVybiBwb3N0c1RpbWVsaW5lO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVNdWx0aTpcbiAgICAgICAgcmV0dXJuIHBvc3RzTXVsdGk7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVNpbmdsZTpcbiAgICAgICAgcmV0dXJuIHBvc3RzU2luZ2xlO1xuICAgICAgY2FzZSBBcHAuZGlzcFRocmVhZFR5cGVDaGlsZDpcbiAgICAgICAgcmV0dXJuIHBvc3RzQ2hpbGQ7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUxvZ3M6XG4gICAgICAgIHJldHVybiBwb3N0c0xvZ3M7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFueUFjdGlvblBvc3RzKGFjdGlvbiwgc3RhdGUpIHtcbiAgICBjb25zdCB7IGFwcCwgcG9zdHMgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBleGlzdFBvc3RzID0gcG9zdHMgJiYgcG9zdHMubGVuZ3RoID4gMDtcbiAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IG5ldyBQb3N0TXVsdGkoKTtcbiAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHNTaW5nbGUoKTtcbiAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IFtdO1xuICAgIGFjdGlvbi5wb3N0c0xvZ3MgPSBbXTtcblxuICAgIHN3aXRjaCAoYXBwLmRpc3BUaHJlYWRUeXBlKSB7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZVRpbWVsaW5lOlxuICAgICAgICBhY3Rpb24gPSBQb3N0cy5nZXRBbnlBY3Rpb25Qb3N0c1RpbWVsaW5lKGFjdGlvbiwgcG9zdHMsIHN0YXRlLCBleGlzdFBvc3RzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpOlxuICAgICAgICBhY3Rpb24ucG9zdHNNdWx0aSA9IGV4aXN0UG9zdHMgPyBwb3N0cyA6IFtdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlU2luZ2xlOlxuICAgICAgICBhY3Rpb24ucG9zdHNTaW5nbGUgPSBleGlzdFBvc3RzID8gcG9zdHMgOiBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEFwcC5kaXNwVGhyZWFkVHlwZUNoaWxkOlxuICAgICAgICBhY3Rpb24ucG9zdHNDaGlsZCA9IGV4aXN0UG9zdHMgPyBwb3N0cyA6IFtdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQXBwLmRpc3BUaHJlYWRUeXBlTG9nczpcbiAgICAgICAgYWN0aW9uLnBvc3RzTG9ncyA9IGV4aXN0UG9zdHMgPyBwb3N0cyA6IFtdO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIHN0YXRpYyBnZXRBbnlBY3Rpb25Qb3N0c1RpbWVsaW5lKGFjdGlvbiwgcG9zdHMsIHN0YXRlLCBleGlzdFBvc3RzKSB7XG4gICAgaWYgKGFjdGlvbi50eXBlID09PSAnU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3QnKSB7XG4gICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZSA9IG5ldyBQb3N0c1RpbWVsaW5lKCk7XG4gICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZS5wdXNoKGFjdGlvbi5wb3N0c1swXSk7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gJ1NFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0cycpIHtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lID0gbmV3IFBvc3RzVGltZWxpbmUoKTtcbiAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lU3RvY2sgPSBuZXcgUG9zdHNUaW1lbGluZVN0b2NrKCk7XG5cbiAgICAgIGlmIChleGlzdFBvc3RzKSB7XG4gICAgICAgIGNvbnN0IHBvc3RzTGVuZ3RoID0gcG9zdHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocG9zdHNbaV0uY3VycmVudFRpbWUgPT09IDApIHtcbiAgICAgICAgICAgIGFjdGlvbi5wb3N0c1RpbWVsaW5lLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24ucG9zdHNUaW1lbGluZVN0b2NrLnB1c2gocG9zdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc3RTaW5nbGUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0c1RpbWVsaW5lIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBQb3N0W10gPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFRpbWVsaW5lU3RvY2sge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFBvc3RbXSA9IFtdKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiaW1wb3J0IFBvc3QgZnJvbSAnYXBpL3N0b3JlL1Bvc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0VGltZWxpbmVaZXJvIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBQb3N0W10gPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBQb3N0IGZyb20gJ2FwaS9zdG9yZS9Qb3N0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdFRpbWVsaW5lT3RoZXJUaGFuWmVybyB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtczogUG9zdFtdID0gW10pIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmtzIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBQb3N0W10gPSBbXSkge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCBTY2hlbWEgZnJvbSAnY29tbW9uL1NjaGVtYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldHRpbmcgZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCBjbGllbnQgPSBwYXJhbXMgJiYgcGFyYW1zLmNsaWVudCA/IHBhcmFtcy5jbGllbnQgOiB7fTtcbiAgICBjb25zdCBjb21tb24gPSBwYXJhbXMgJiYgcGFyYW1zLmNvbW1vbiA/IHBhcmFtcy5jb21tb24gOiB7fTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBwYXJhbXMgJiYgcGFyYW1zLnNlcnZlciA/IHBhcmFtcy5zZXJ2ZXIgOiB7fTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xuICAgICAgY2xpZW50LFxuICAgICAgY29tbW9uLFxuICAgICAgc2VydmVyLFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuaW1wb3J0IFNlcXVlbmNlIGZyb20gJ2NvbW1vbi9TZXF1ZW5jZSc7XG5pbXBvcnQgY29uZiBmcm9tICdjb21tb24vY29uZic7XG5cbmltcG9ydCBBcHAgZnJvbSAnYXBpL3N0b3JlL0FwcCc7XG5pbXBvcnQgQm9vdE9wdGlvbiBmcm9tICdhcGkvc3RvcmUvQm9vdE9wdGlvbic7XG5cbmV4cG9ydCB0eXBlIFRocmVhZFN0YXR1c1R5cGUgPSB7XG4gIGRpc3BUeXBlOiBzdHJpbmc7XG4gIGlzQ3JlYXRlOiBib29sZWFuO1xuICBpc1JlcXVpcmVVcHNlcnQ6IGJvb2xlYW47XG4gIGlzTXVsdGlzdHJlYW06IGJvb2xlYW47XG4gIGlzTWVkaWFDaDogYm9vbGVhbjtcbiAgaXNUb2dnbGVNdWx0aXN0cmVhbTogYm9vbGVhbjtcbiAgZ2V0TW9yZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVhZCBleHRlbmRzIFNjaGVtYSB7XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVBbGwoKTogJ0FsbCcge1xuICAgIHJldHVybiAnQWxsJztcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlSHRtbCgpOiAnSHRtbCcge1xuICAgIHJldHVybiAnSHRtbCc7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZU11c2ljKCk6ICdNdXNpYycge1xuICAgIHJldHVybiAnTXVzaWMnO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVQZGYoKTogJ1BkZicge1xuICAgIHJldHVybiAnUGRmJztcbiAgfVxuICBzdGF0aWMgZ2V0IGZpbmRUeXBlVmlkZW8oKTogJ1ZpZGVvJyB7XG4gICAgcmV0dXJuICdWaWRlbyc7XG4gIH1cbiAgc3RhdGljIGdldCBmaW5kVHlwZU90aGVyKCk6ICdPdGhlcicge1xuICAgIHJldHVybiAnT3RoZXInO1xuICB9XG4gIHN0YXRpYyBnZXQgZmluZFR5cGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbVGhyZWFkLmZpbmRUeXBlSHRtbF06IFsndGV4dC9odG1sJ10sXG4gICAgICBbVGhyZWFkLmZpbmRUeXBlTXVzaWNdOiBbJ2F1ZGlvJywgJ2F1ZGlvL21wZWcnLCAnYXVkaW8vbXA0JywgJ2F1ZGlvL3gtd2F2JywgJ2F1ZGlvL21pZGknLCAnYXBwbGljYXRpb24veC1zbWFmJ10sXG4gICAgICBbVGhyZWFkLmZpbmRUeXBlVmlkZW9dOiBbXG4gICAgICAgICd2aWRlbycsXG4gICAgICAgICd2aWRlby9tcGVnJyxcbiAgICAgICAgJ3ZpZGVvL21wNCcsXG4gICAgICAgICd2aWRlby9xdWlja3RpbWUnLFxuICAgICAgICAndmlkZW8veC1tcy13bXYnLFxuICAgICAgICAnYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnLFxuICAgICAgICAndmlkZW8vM2dwcDInLFxuICAgICAgXSxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZWZhdWx0VGl0bGUoKSB7XG4gICAgcmV0dXJuICd0YWxrbic7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVmYXVsdEZhdmljb24oKSB7XG4gICAgcmV0dXJuIGBodHRwczovLyR7Y29uZi5hc3NldHNVUkx9L2Zhdmljb24uaWNvYDtcbiAgfVxuXG4gIHN0YXRpYyBpc1dpbmRvd09iaihwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zLmFsZXJ0ID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgaHJlZjogc3RyaW5nO1xuICBjaDogc3RyaW5nO1xuICBjaHM6IFtzdHJpbmddID0gWycvJ107XG4gIGhhc1NsYXNoOiBib29sZWFuO1xuICBwcm90b2NvbDogc3RyaW5nID0gU2VxdWVuY2UuVEFMS05fUFJPVE9DT0w7XG4gIGNvbnRlbnRUeXBlOiBzdHJpbmc7XG4gIGNoYXJzZXQ6IHN0cmluZyA9ICdVVEYtOCc7XG4gIGhvc3Q6IHN0cmluZyA9ICcnO1xuICBmYXZpY29uOiBzdHJpbmcgPSBUaHJlYWQuZ2V0RGVmYXVsdEZhdmljb24oKTtcbiAgZmluZFR5cGU6ICdBbGwnIHwgJ0h0bWwnIHwgJ011c2ljJyB8ICdWaWRlbycgPSBUaHJlYWQuZmluZFR5cGVBbGw7XG4gIHRpdGxlOiBzdHJpbmcgPSBUaHJlYWQuZ2V0RGVmYXVsdFRpdGxlKCk7XG4gIG1ldGFzOiBhbnkgPSBbXTtcbiAgZW1vdGlvbnM6IGFueSA9IHt9O1xuICBzZXJ2ZXJNZXRhczogYW55ID0ge307XG4gIGNsaWVudE1ldGFzOiBhbnkgPSB7fTtcbiAgbGlua3M6IGFueSA9IFtdO1xuICBoMXM6IGFueSA9IFtdO1xuICBhdWRpb3M6IGFueSA9IFtdO1xuICB2aWRlb3M6IGFueSA9IFtdO1xuICBsYXllcjogbnVtYmVyID0gVGhyZWFkLmdldExheWVyKCk7XG4gIG1lZGlhSW5kZXg6IGFueSA9IFtdO1xuICBwb3N0Q250OiBudW1iZXIgPSAwO1xuICBtdWx0aVBvc3RDbnQ6IG51bWJlciA9IDA7XG4gIGlzU2VsZkNoOiBib29sZWFuID0gZmFsc2U7XG4gIGNyZWF0ZVRpbWU6IHN0cmluZyA9ICcnO1xuICB1cGRhdGVUaW1lOiBzdHJpbmcgPSAnJztcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSwgYm9vdE9wdGlvbj86IEJvb3RPcHRpb24gfCB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgdGhyZWFkID0gVGhyZWFkLmlzV2luZG93T2JqKHBhcmFtcykgPyBUaHJlYWQuY29uc3RydWN0b3JGcm9tV2luZG93KHBhcmFtcywgYm9vdE9wdGlvbikgOiBwYXJhbXM7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRocmVhZCk7XG4gIH1cblxuICBzdGF0aWMgY29uc3RydWN0b3JGcm9tV2luZG93KHBhcmFtcywgYm9vdE9wdGlvbikge1xuICAgIGNvbnN0IGJvb3RDaCA9IGJvb3RPcHRpb24uY2ggPyBib290T3B0aW9uLmNoIDogZmFsc2U7XG4gICAgY29uc3QgY2ggPSBUaHJlYWQuZ2V0Q2goYm9vdE9wdGlvbik7XG5cbiAgICBsZXQgdGhyZWFkOiBhbnkgPSB7fTtcbiAgICBsZXQgaHJlZiA9ICcnO1xuICAgIHRocmVhZC5jaCA9IGNoO1xuICAgIHRocmVhZC5jaHMgPSBbJy8nXTtcbiAgICB0aHJlYWQuaGFzU2xhc2ggPSBib290T3B0aW9uLmhhc3NsYXNoID8gU2NoZW1hLmdldEJvb2woYm9vdE9wdGlvbi5oYXNzbGFzaCkgOiBmYWxzZTtcbiAgICB0aHJlYWQucHJvdG9jb2wgPSAndGFsa246JztcbiAgICB0aHJlYWQuY29udGVudFR5cGUgPSAnJztcbiAgICB0aHJlYWQuY2hhcnNldCA9ICdVVEYtOCc7XG4gICAgdGhyZWFkLmhvc3QgPSAnJztcbiAgICB0aHJlYWQuZmF2aWNvbiA9IFRocmVhZC5nZXREZWZhdWx0RmF2aWNvbigpO1xuICAgIHRocmVhZC5maW5kVHlwZSA9IFRocmVhZC5maW5kVHlwZUFsbDtcblxuICAgIGlmIChib290Q2gpIHtcbiAgICAgIC8vIFVSTOOBruOCs+ODjeOCr+OCt+ODp+ODs+aWh+Wtl+WIl+OBi+OCieOBp+OBr1BST1RPQ09M44Gv5Yik5Yil44Gn44GN44Gq44GE44CCXG4gICAgICB0aHJlYWQucHJvdG9jb2wgPSBUaHJlYWQuZ2V0UHJvdG9jb2woYm9vdENoKTtcbiAgICAgIHRocmVhZC5ob3N0ID0gVGhyZWFkLmdldEhvc3QoYm9vdENoKTtcbiAgICAgIHRocmVhZC5jaHMgPSBib290Q2guY2hzICYmIGJvb3RDaC5jaHMubGVuZ3RoID4gMCA/IGJvb3RDaC5jaHMgOiBUaHJlYWQuZ2V0Q2hzKGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyZWFkLnByb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2wgPyBsb2NhdGlvbi5wcm90b2NvbCA6ICc/Pz8/Oic7XG4gICAgICB0aHJlYWQuY2hzID0gcGFyYW1zLmNocyAmJiBwYXJhbXMuY2hzLmxlbmd0aCA+IDAgPyBwYXJhbXMuY2hzIDogVGhyZWFkLmdldENocyhjaCk7XG4gICAgICB0aHJlYWQuY29udGVudFR5cGUgPSBkb2N1bWVudC5jb250ZW50VHlwZSA/IGRvY3VtZW50LmNvbnRlbnRUeXBlIDogJyc7XG4gICAgICB0aHJlYWQuY2hhcnNldCA9IGRvY3VtZW50LmNoYXJzZXQgPyBkb2N1bWVudC5jaGFyc2V0IDogJyc7XG5cbiAgICAgIHRocmVhZC5ob3N0ID0gbG9jYXRpb24uaG9zdCA/IGxvY2F0aW9uLmhvc3QgOiAnJztcbiAgICAgIHRocmVhZC5mYXZpY29uID0gVGhyZWFkLmdldEZhdmljb25Gcm9tV2luZG93KHdpbmRvdyk7XG4gICAgfVxuXG4gICAgdGhyZWFkLnRpdGxlID0gVGhyZWFkLmdldERlZmF1bHRUaXRsZSgpO1xuICAgIHRocmVhZC5tZXRhcyA9IFtdO1xuICAgIHRocmVhZC5zZXJ2ZXJNZXRhcyA9IHt9O1xuICAgIHRocmVhZC5jbGllbnRNZXRhcyA9IHt9O1xuICAgIHRocmVhZC5lbW90aW9ucyA9IHt9O1xuICAgIHRocmVhZC5saW5rcyA9IFtdO1xuICAgIHRocmVhZC5oMXMgPSBbXTtcbiAgICB0aHJlYWQuYXVkaW9zID0gW107XG4gICAgdGhyZWFkLnZpZGVvcyA9IFtdO1xuICAgIHRocmVhZC5sYXllciA9IFRocmVhZC5nZXRMYXllcih0aHJlYWQuY2gpO1xuICAgIHRocmVhZC5tZWRpYUluZGV4ID0gW107XG4gICAgdGhyZWFkLnBvc3RDbnQgPSAwO1xuICAgIHRocmVhZC5tdWx0aVBvc3RDbnQgPSAwO1xuICAgIHRocmVhZC5pc1NlbGZDaCA9IFRocmVhZC5nZXRJc1NlbGZDaChocmVmLCB0aHJlYWQuY2gpO1xuICAgIHRocmVhZC5jcmVhdGVUaW1lID0gJyc7XG4gICAgdGhyZWFkLnVwZGF0ZVRpbWUgPSAnJztcbiAgICByZXR1cm4gdGhyZWFkO1xuICB9XG5cbiAgc3RhdGljIGdldENoKGJvb3RPcHRpb246IGFueSkge1xuICAgIHJldHVybiBib290T3B0aW9uICYmIGJvb3RPcHRpb24uY2ggJiYgYm9vdE9wdGlvbi5jaCAhPT0gJycgPyBib290T3B0aW9uLmNoIDogJy8nO1xuICB9XG5cbiAgc3RhdGljIGdldENoVG9wKGNoKSB7XG4gICAgaWYgKGNoICE9PSAnJykge1xuICAgICAgcmV0dXJuICcvJyArIGNoLnNwbGl0KCcvJylbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2hzKF9jaCkge1xuICAgIGxldCBjaHMgPSBbJy8nXTtcblxuICAgIGlmIChfY2ggIT09ICcnKSB7XG4gICAgICAvL2NoID0gY2gucmVwbGFjZSgvXFx1MDAyZiQvZywgJycpO1xuICAgICAgY29uc3QgY2ggPSBfY2guc2xpY2UoLTEpID09PSAnLycgPyBfY2ggOiBfY2ggKyAnLyc7XG5cbiAgICAgIGlmIChjaCAhPT0gJy8nKSB7XG4gICAgICAgIGNvbnN0IGNoQXJyID0gY2guc3BsaXQoJy8nKTtcbiAgICAgICAgY29uc3QgY2hMZW5ndGggPSBjaEFyci5sZW5ndGg7XG4gICAgICAgIGxldCBuZXdDaCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNoTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoY2hBcnJbaV0gIT09ICcnKSB7XG4gICAgICAgICAgICBuZXdDaCArPSBjaEFycltpXTtcblxuICAgICAgICAgICAgLy8g5LiA55Wq5pyA5b6M44GML+OBruWgtOWQiFxuICAgICAgICAgICAgbmV3Q2ggPSBuZXdDaC5zbGljZSgtMSkgPT09ICcvJyA/IG5ld0NoIDogbmV3Q2ggKyAnLyc7XG5cbiAgICAgICAgICAgIC8vIOS4gOeVquacgOWIneOBjC/jga7loLTlkIhcbiAgICAgICAgICAgIG5ld0NoID0gbmV3Q2guc2xpY2UoMCwgMSkgPT09ICcvJyA/IG5ld0NoIDogJy8nICsgbmV3Q2g7XG5cbiAgICAgICAgICAgIC8vIOacgOW+jOOBjC/nhKHjgZfjga7jgrPjg43jgq/jgrfjg6fjg7PjgpLnlJ/miJBcbiAgICAgICAgICAgIC8vbm9TbGFzaENoID0gbmV3Q2guc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgICAgICAvL2Nocy5wdXNoKCBub1NsYXNoQ2ggKTtcbiAgICAgICAgICAgIGNocy5wdXNoKG5ld0NoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNocztcbiAgfVxuXG4gIHN0YXRpYyBnZXRIb3N0KGNoKSB7XG4gICAgaWYgKGNoLmluZGV4T2YoJy4nKSA+PSAwKSB7XG4gICAgICBjaCA9IGNoLnJlcGxhY2UoJ2h0dHBzOi8vJywgJycpLnJlcGxhY2UoJ2h0dHA6Ly8nLCAnJyk7XG4gICAgICByZXR1cm4gY2gucmVwbGFjZSgvXlxcLy8sICcnKS5yZXBsYWNlKC9cXC8uKiQvLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb25mLmRvbWFpbjtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvdG9jb2woaHJlZikge1xuICAgIGlmIChocmVmLmluZGV4T2YoJ2h0dHA6JykgPj0gMCkgcmV0dXJuICdodHRwOic7XG4gICAgaWYgKGhyZWYuaW5kZXhPZignaHR0cHM6JykgPj0gMCkgcmV0dXJuICdodHRwczonO1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCkgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHJldHVybiAnPz8/PzonO1xuICB9XG5cbiAgc3RhdGljIGdldElzU2VsZkNoKGhyZWYsIGNoKSB7XG4gICAgY29uc3QgcmVwbGFjZWRIcmVmID0gaHJlZlxuICAgICAgLnJlcGxhY2UoJ2h0dHA6LycsICcnKVxuICAgICAgLnJlcGxhY2UoJ2h0dHBzOi8nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHUwMDJmJC8sICcnKTtcbiAgICByZXR1cm4gcmVwbGFjZWRIcmVmID09PSBjaDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRMYXllcihjaCA9ICcvJykge1xuICAgIHJldHVybiBjaC5zcGxpdCgnLycpLmxlbmd0aCAtIDE7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVkaWFTcmModGhyZWFkKSB7XG4gICAgcmV0dXJuIEFwcC5nZXRNZWRpYVNyYyh0aHJlYWQucHJvdG9jb2wsIHRocmVhZC5jaCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVkaWFUYWdUeXBlKHRocmVhZCkge1xuICAgIGNvbnN0IHNyYyA9IFRocmVhZC5nZXRNZWRpYVNyYyh0aHJlYWQpO1xuICAgIHJldHVybiBBcHAuZ2V0TWVkaWFUeXBlKHNyYywgbnVsbCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0RmF2aWNvbkZyb21XaW5kb3cod2luZG93KSB7XG4gICAgaWYgKHdpbmRvdyAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgIGNvbnN0IHUgPSB3aW5kb3cuZG9jdW1lbnQuZXZhbHVhdGUoXG4gICAgICAgIFwiLy9saW5rW2NvbnRhaW5zKEByZWwsJ2ljb24nKW9yKGNvbnRhaW5zKEByZWwsJ0lDT04nKSldWzFdL0BocmVmXCIsXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgMixcbiAgICAgICAgbnVsbFxuICAgICAgKS5zdHJpbmdWYWx1ZTtcbiAgICAgIGNvbnN0IGggPSAnaHR0cDovLyc7XG4gICAgICBjb25zdCBocyA9ICdodHRwczovLyc7XG4gICAgICBjb25zdCBsID0gbG9jYXRpb24uaG9zdDtcbiAgICAgIGlmICh1LmluZGV4T2YoaCkgfHwgdS5pbmRleE9mKGhzKSkge1xuICAgICAgICBjb25zdCB1cmwgPSBoICsgbCArICh1IHx8ICcvZmF2aWNvbi5pY28nKTtcbiAgICAgICAgY29uc3Qgc3RyQ250ID0gdXJsLnNwbGl0KCcvLycpLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChzdHJDbnQgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXModGhyZWFkLCBhcHAsIGlzRXhpc3QpOiBUaHJlYWRTdGF0dXNUeXBlIHtcbiAgICBsZXQgc3RhdHVzID0ge1xuICAgICAgZGlzcFR5cGU6ICcnLCAvLyBUSU1FTElORSwgTVVMVEksIFNJTkdMRSwgQ0hJTEQsIExPR1NcbiAgICAgIGlzQ3JlYXRlOiBmYWxzZSxcbiAgICAgIGlzUmVxdWlyZVVwc2VydDogZmFsc2UsXG4gICAgICBpc011bHRpc3RyZWFtOiBmYWxzZSxcbiAgICAgIGlzTWVkaWFDaDogZmFsc2UsXG4gICAgICBpc1RvZ2dsZU11bHRpc3RyZWFtOiBmYWxzZSxcbiAgICAgIGdldE1vcmU6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiB0aHJlYWTjgYznqbrjga5TY2hlbWHjgYvjganjgYbjgYsoRELjgavjg4fjg7zjgr/jgYzlrZjlnKjjgZfjgarjgYQpICAgICAgICAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgc3RhdHVzLmlzQ3JlYXRlID0gVGhyZWFkLmdldFN0YXR1c0NyZWF0ZShpc0V4aXN0KTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIOabtOaWsOOBjOW/heimgeOBqnRocmVhZOOBi+OBqeOBhuOBiyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc1JlcXVpcmVVcHNlcnQgPSBUaHJlYWQuZ2V0U3RhdHVzSXNSZXF1aXJlVXBzZXJ0KHRocmVhZCwgc3RhdHVzLmlzQ3JlYXRlKTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIE11bHRpc3RyZWFt5b2i5byP44GL44Gp44GG44GLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNNdWx0aXN0cmVhbSA9IFRocmVhZC5nZXRTdGF0dXNJc011bHRpc3RyZWFtKGFwcCk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiBNdWx0aXN0cmVhbeOBruODnOOCv+ODs+OCkuaKvOOBl+OBn+OBiyAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHN0YXR1cy5pc1RvZ2dsZU11bHRpc3RyZWFtID0gVGhyZWFkLmdldFN0YXR1c0lzVG9nZ2xlTXVsdGlzdHJlYW0oYXBwKTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIHRocmVhZOOBjOepuuOBrlNjaGVtYeOBi+OBqeOBhuOBiyhEQuOBq+ODh+ODvOOCv+OBjOWtmOWcqOOBl+OBquOBhCkgICAgICAgICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBzdGF0dXMuaXNNZWRpYUNoID0gVGhyZWFkLmdldFN0YXR1c0lzTWVkaWFDaCh0aHJlYWQuY2gpO1xuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RhdHVzQ3JlYXRlKGlzRXhpc3QpIHtcbiAgICByZXR1cm4gIWlzRXhpc3Q7XG4gIH1cblxuICBzdGF0aWMgZ2V0U3RhdHVzSXNSZXF1aXJlVXBzZXJ0KHRocmVhZCwgaXNDcmVhdGUgPSBmYWxzZSkge1xuICAgIGlmICghaXNDcmVhdGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhyZWFkLnVwZGF0ZVRpbWUpIHtcbiAgICAgIGNvbnN0IHRocmVhZFVwZGF0ZVRpbWUgPSB0aHJlYWQudXBkYXRlVGltZS5nZXRUaW1lID8gdGhyZWFkLnVwZGF0ZVRpbWUuZ2V0VGltZSgpIDogdGhyZWFkLnVwZGF0ZVRpbWU7XG5cbiAgICAgIC8vIOePvuWcqOaZguWIu+OCkuWPluW+l1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IG5vd1llYXIgPSBub3cuZ2V0RnVsbFllYXIoKTtcbiAgICAgIGNvbnN0IG5vd01vbnRoID0gbm93LmdldE1vbnRoKCk7XG4gICAgICBjb25zdCBub3dEYXkgPSBub3cuZ2V0RGF0ZSgpO1xuICAgICAgY29uc3Qgbm93SG91ciA9IG5vdy5nZXRIb3VycygpO1xuICAgICAgY29uc3Qgbm93TWludXRlcyA9IG5vdy5nZXRNaW51dGVzKCk7XG4gICAgICBjb25zdCBhY3RpdmVEYXRlID0gbmV3IERhdGUobm93WWVhciwgbm93TW9udGgsIG5vd0RheSwgbm93SG91ciAtIGNvbmYuZmluZE9uZVRocmVhZEFjdGl2ZUhvdXIpO1xuICAgICAgY29uc3QgYWN0aXZlVGltZSA9IGFjdGl2ZURhdGUuZ2V0VGltZSgpO1xuXG4gICAgICAvLyDjgrnjg6zjg4Pjg4njga7mm7TmlrDmmYLplpPjgajjgIHnj77lnKjmmYLplpMgLSBuIOOCkuavlOi8g+OBl+OBpuOAgeOCueODrOODg+ODieOBruabtOaWsOaZgumWk+OBjOWPpOOBi+OBo+OBn+OCiXRydWXjgpLov5TjgZlcbiAgICAgIHJldHVybiB0aHJlYWRVcGRhdGVUaW1lIDwgYWN0aXZlVGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc011bHRpc3RyZWFtKGFwcCk6IGJvb2xlYW4ge1xuICAgIGlmIChhcHAgPT09IHVuZGVmaW5lZCB8fCBhcHAuZGlzcFRocmVhZFR5cGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGFwcC5kaXNwVGhyZWFkVHlwZSA9PT0gQXBwLmRpc3BUaHJlYWRUeXBlTXVsdGkgJiYgYXBwLm11bHRpc3RyZWFtO1xuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0lzTWVkaWFDaChjaCkge1xuICAgIHJldHVybiBBcHAuZ2V0SXNNZWRpYUNoKGNoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtKGFwcCk6IGJvb2xlYW4ge1xuICAgIC8vIFRPRE86IEp1ZGdlIGZpeCBhY3Rpb25lZC5cbiAgICBpZiAoYXBwID09PSB1bmRlZmluZWQgfHwgYXBwLmFjdGlvbmVkID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gYXBwLmlzVG9nZ2xlTXVsdGlzdHJlYW07XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29udGVudFR5cGVGcm9tRmluZFR5cGUoY29udGVudFR5cGUpIHtcbiAgICBjb25zdCBmaW5kVHlwZUh0bWwgPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZUh0bWxdO1xuICAgIGNvbnN0IGZpbmRUeXBlTXVzaWMgPSBUaHJlYWQuZmluZFR5cGVzW1RocmVhZC5maW5kVHlwZU11c2ljXTtcbiAgICBjb25zdCBmaW5kVHlwZVZpZGVvID0gVGhyZWFkLmZpbmRUeXBlc1tUaHJlYWQuZmluZFR5cGVWaWRlb107XG5cbiAgICBsZXQgZmluZFR5cGU6IHR5cGVvZiBUaHJlYWQuZmluZFR5cGVIdG1sIHwgdHlwZW9mIFRocmVhZC5maW5kVHlwZU11c2ljIHwgdHlwZW9mIFRocmVhZC5maW5kVHlwZVZpZGVvIHwgdHlwZW9mIFRocmVhZC5maW5kVHlwZU90aGVyO1xuICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZSAhPT0gJycpIHtcbiAgICAgIGxldCBzcGxpdGVkQ29udGVudFR5cGUgPSAnJztcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCc7JykgPiAwKSB7XG4gICAgICAgIHNwbGl0ZWRDb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnNwbGl0KCc7JylbMF07XG4gICAgICB9XG4gICAgICBpZiAoZmluZFR5cGVIdG1sLmluY2x1ZGVzKGNvbnRlbnRUeXBlKSB8fCBmaW5kVHlwZUh0bWwuaW5jbHVkZXMoc3BsaXRlZENvbnRlbnRUeXBlKSkge1xuICAgICAgICBmaW5kVHlwZSA9IFRocmVhZC5maW5kVHlwZUh0bWw7XG4gICAgICB9XG4gICAgICBpZiAoZmluZFR5cGVNdXNpYy5pbmNsdWRlcyhjb250ZW50VHlwZSkgfHwgZmluZFR5cGVNdXNpYy5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlTXVzaWM7XG4gICAgICB9XG4gICAgICBpZiAoZmluZFR5cGVWaWRlby5pbmNsdWRlcyhjb250ZW50VHlwZSkgfHwgZmluZFR5cGVWaWRlby5pbmNsdWRlcyhzcGxpdGVkQ29udGVudFR5cGUpKSB7XG4gICAgICAgIGZpbmRUeXBlID0gVGhyZWFkLmZpbmRUeXBlVmlkZW87XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaW5kVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGaW5kVHlwZUZyb21TcmMoc3JjKSB7XG4gICAgY29uc3Qgc3RyID0gQXBwLmdldE1lZGlhVHlwZUZyb21TcmMoc3JjKTtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlYWRzIGV4dGVuZHMgU2NoZW1hIHtcbiAgY29uc3RydWN0b3IocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKHBhcmFtcyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TWVyZ2VkVGhyZWFkcyhiYXNlVGhyZWFkcywgbWVyZ2VUaHJlYWQpIHtcbiAgICBiYXNlVGhyZWFkc1ttZXJnZVRocmVhZC5jaF0gPSB7IC4uLm1lcmdlVGhyZWFkIH07XG4gICAgcmV0dXJuIGJhc2VUaHJlYWRzO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUdW5lQ2ggZXh0ZW5kcyBTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5pbXBvcnQgUG9zdCBmcm9tICdhcGkvc3RvcmUvUG9zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXIgZXh0ZW5kcyBTY2hlbWEge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPZmZzZXRGaW5kSWQoKSB7XG4gICAgcmV0dXJuIFBvc3QuZGVmYXVsdEZpbmRJZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogYW55ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHVpZCA9IHBhcmFtcyAmJiBwYXJhbXMudWlkID8gcGFyYW1zLnVpZCA6ICcnO1xuICAgIGNvbnN0IHV0eXBlID0gcGFyYW1zICYmIHBhcmFtcy51dHlwZSA/IHBhcmFtcy51dHlwZSA6ICcnO1xuXG4gICAgLy8g5YmK6Zmk5LqI5a6aXG4gICAgY29uc3QgdHVuZWRDaCA9IHBhcmFtcyAmJiBwYXJhbXMudHVuZWRDaCA/IHBhcmFtcy50dW5lZENoIDogJyc7XG4gICAgY29uc3QgbXVsdGlzdHJlYW1lZCA9IHBhcmFtcyAmJiBwYXJhbXMubXVsdGlzdHJlYW1lZCA/IHBhcmFtcy5tdWx0aXN0cmVhbWVkIDogZmFsc2U7XG4gICAgY29uc3QgYWN0aW9uZWQgPSBwYXJhbXMgJiYgcGFyYW1zLmFjdGlvbmVkID8gcGFyYW1zLmFjdGlvbmVkIDogJyc7XG4gICAgY29uc3Qgb2Zmc2V0RmluZElkID0gcGFyYW1zICYmIHBhcmFtcy5vZmZzZXRGaW5kSWQgPyBwYXJhbXMub2Zmc2V0RmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldFNpbmdsZUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0U2luZ2xlRmluZElkID8gcGFyYW1zLm9mZnNldFNpbmdsZUZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcbiAgICBjb25zdCBvZmZzZXRNdWx0aUZpbmRJZCA9IHBhcmFtcyAmJiBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TXVsdGlGaW5kSWQgOiBVc2VyLmRlZmF1bHRPZmZzZXRGaW5kSWQ7XG4gICAgY29uc3Qgb2Zmc2V0Q2hpbGRGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldENoaWxkRmluZElkID8gcGFyYW1zLm9mZnNldENoaWxkRmluZElkIDogVXNlci5kZWZhdWx0T2Zmc2V0RmluZElkO1xuICAgIGNvbnN0IG9mZnNldExvZ3NGaW5kSWQgPSBwYXJhbXMgJiYgcGFyYW1zLm9mZnNldExvZ3NGaW5kSWQgPyBwYXJhbXMub2Zmc2V0TG9nc0ZpbmRJZCA6IFVzZXIuZGVmYXVsdE9mZnNldEZpbmRJZDtcblxuICAgIGNvbnN0IHJlcXVlc3RMb2dpblR5cGUgPSBwYXJhbXMucmVxdWVzdExvZ2luVHlwZSA/IHBhcmFtcy5yZXF1ZXN0TG9naW5UeXBlIDogJyc7XG4gICAgY29uc3QgZnJpZW5kcyA9IFtdO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICB1aWQsXG4gICAgICB1dHlwZSxcbiAgICAgIHR1bmVkQ2gsXG4gICAgICBtdWx0aXN0cmVhbWVkLFxuICAgICAgYWN0aW9uZWQsXG4gICAgICBvZmZzZXRGaW5kSWQsXG4gICAgICBvZmZzZXRTaW5nbGVGaW5kSWQsXG4gICAgICBvZmZzZXRNdWx0aUZpbmRJZCxcbiAgICAgIG9mZnNldENoaWxkRmluZElkLFxuICAgICAgb2Zmc2V0TG9nc0ZpbmRJZCxcbiAgICAgIGZyaWVuZHMsXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHsgcG9zdHMgfSkge1xuICAgIGlmIChwb3N0cyAmJiBwb3N0c1swXSAmJiBwb3N0c1swXS5faWQpIHtcbiAgICAgIHJldHVybiBwb3N0c1swXS5faWQ7XG4gICAgfVxuICAgIHJldHVybiBQb3N0LmRlZmF1bHRGaW5kSWQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0SHJlZihwYXJhbXM6IGFueSA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZikge1xuICAgICAgLy8gcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmhyZWYpIHtcbiAgICAgIHJldHVybiBwYXJhbXMuaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuICcvJztcbiAgfVxufVxuIiwiaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcblxuaW1wb3J0IG1pZGRsZXdhcmUgZnJvbSAnYXBpL21pZGRsZXdhcmUvJztcbmltcG9ydCBhcGlSZWR1Y2VycyBmcm9tICdhcGkvcmVkdWNlcnMnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBNb2R1bGUge1xuICAgIGhvdDogYW55O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwaVN0b3JlKGluaXRpYWxTdGF0ZSA9IHt9KSB7XG4gIGxldCBjb21wb3NlRW5oYW5jZXJzID0gbnVsbDtcbiAgbGV0IG1pZGRsZXdhcmVzID0gW21pZGRsZXdhcmUudXBkYXRlQWN0aW9uXTtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgICBhcGlSZWR1Y2VycyxcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgY29tcG9zZUVuaGFuY2VycyA/IGNvbXBvc2VFbmhhbmNlcnMoYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKSkgOiBhcHBseU1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpXG4gICk7XG5cbiAgaWYgKG1vZHVsZS5ob3QpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi4vcmVkdWNlcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0UmVkdWNlciA9IHJlcXVpcmUoJy4uL3JlZHVjZXJzJyk7XG4gICAgICBzdG9yZS5yZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcik7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RvcmU7XG59XG4iLCJpbXBvcnQgQm9vdE9wdGlvbiBmcm9tICdjb21tb24vQm9vdE9wdGlvbic7XG5cbmltcG9ydCBBY3Rpb25Mb2cgZnJvbSAnYXBpL3N0b3JlL0FjdGlvbkxvZ3MnO1xuaW1wb3J0IEFuYWx5emUgZnJvbSAnYXBpL3N0b3JlL0FuYWx5emUnO1xuaW1wb3J0IEFwcCBmcm9tICdhcGkvc3RvcmUvQXBwJztcbmltcG9ydCBNZW51TG9ncyBmcm9tICdhcGkvc3RvcmUvTWVudUxvZ3MnO1xuaW1wb3J0IFBvc3RzIGZyb20gJ2FwaS9zdG9yZS9Qb3N0cyc7XG5pbXBvcnQgUG9zdHNUaW1lbGluZSBmcm9tICdhcGkvc3RvcmUvUG9zdHNUaW1lbGluZSc7XG5pbXBvcnQgUG9zdHNUaW1lbGluZVN0b2NrIGZyb20gJ2FwaS9zdG9yZS9Qb3N0c1RpbWVsaW5lU3RvY2snO1xuaW1wb3J0IFJhbmtzIGZyb20gJ2FwaS9zdG9yZS9SYW5rcyc7XG5pbXBvcnQgVGhyZWFkIGZyb20gJ2FwaS9zdG9yZS9UaHJlYWQnO1xuaW1wb3J0IFR1bmVDaCBmcm9tICdhcGkvc3RvcmUvVHVuZUNoJztcbmltcG9ydCBVc2VyIGZyb20gJ2FwaS9zdG9yZS9Vc2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpU3RhdGUge1xuICByYW5rczogUmFua3M7XG4gIG1lbnVMb2dzOiBNZW51TG9ncztcbiAgcG9zdHM6IFBvc3RzO1xuICBwb3N0c011bHRpOiBQb3N0cztcbiAgcG9zdHNTaW5nbGU6IFBvc3RzO1xuICBwb3N0c0NoaWxkOiBQb3N0cztcbiAgcG9zdHNUaW1lbGluZTogUG9zdHNUaW1lbGluZTtcbiAgcG9zdHNUaW1lbGluZVN0b2NrOiBQb3N0c1RpbWVsaW5lU3RvY2s7XG4gIHBvc3RzTG9nczogUG9zdHM7XG4gIGFuYWx5emU6IEFuYWx5emU7XG4gIGJvb3RPcHRpb246IEJvb3RPcHRpb247XG4gIHRocmVhZHM6IFtUaHJlYWRdO1xuICB0aHJlYWQ6IFRocmVhZDtcbiAgdGhyZWFkRGV0YWlsOiBUaHJlYWQ7XG4gIGFwcDogQXBwO1xuICB1c2VyOiBVc2VyO1xuICB0dW5lQ2g6IFR1bmVDaDtcbiAgYWN0aW9uTG9nOiBBY3Rpb25Mb2c7XG4gIGNvbnN0cnVjdG9yKGJvb3RPcHRpb246IEJvb3RPcHRpb24sIGNhY2hlczogYW55ID0ge30pIHtcbiAgICB0aGlzLmJvb3RPcHRpb24gPSBib290T3B0aW9uO1xuICAgIHRoaXMucmFua3MgPSBuZXcgUmFua3MoKTtcbiAgICB0aGlzLm1lbnVMb2dzID0gbmV3IE1lbnVMb2dzKGNhY2hlcy5tZW51TG9ncyk7XG4gICAgdGhpcy5wb3N0cyA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMucG9zdHNNdWx0aSA9IG5ldyBQb3N0cygpO1xuICAgIHRoaXMucG9zdHNTaW5nbGUgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLnBvc3RzQ2hpbGQgPSBuZXcgUG9zdHMoKTtcbiAgICB0aGlzLnBvc3RzVGltZWxpbmUgPSBuZXcgUG9zdHNUaW1lbGluZSgpO1xuICAgIHRoaXMucG9zdHNUaW1lbGluZVN0b2NrID0gbmV3IFBvc3RzVGltZWxpbmVTdG9jaygpO1xuICAgIHRoaXMucG9zdHNMb2dzID0gbmV3IFBvc3RzKCk7XG4gICAgdGhpcy5hbmFseXplID0gbmV3IEFuYWx5emUoKTtcbiAgICB0aGlzLnRocmVhZCA9IG5ldyBUaHJlYWQodGhpcy5ib290T3B0aW9uLCBjYWNoZXMudGhyZWFkKTtcbiAgICB0aGlzLnRocmVhZERldGFpbCA9IG5ldyBUaHJlYWQodGhpcy5ib290T3B0aW9uLCBjYWNoZXMudGhyZWFkKTtcbiAgICB0aGlzLmFwcCA9IG5ldyBBcHAoQXBpU3RhdGUuZ2V0QXBwUGFyYW1zKHRoaXMudGhyZWFkLCB0aGlzLmJvb3RPcHRpb24sIGNhY2hlcykpO1xuICAgIHRoaXMudHVuZUNoID0gbmV3IFR1bmVDaCgpO1xuICAgIHRoaXMudXNlciA9IG5ldyBVc2VyKEFwaVN0YXRlLmdldFVzZXJQYXJhbXModGhpcywgY2FjaGVzKSk7XG4gICAgdGhpcy5hY3Rpb25Mb2cgPSBuZXcgQWN0aW9uTG9nKCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0QXBwUGFyYW1zKHRocmVhZCwgYm9vdE9wdGlvbiwgY2FjaGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIHJvb3RUaXRsZTogdGhyZWFkLnRpdGxlLFxuICAgICAgLi4uYm9vdE9wdGlvbixcbiAgICAgIC4uLnRocmVhZCxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldFVzZXJQYXJhbXMoc2VsZiwgY2FjaGVzKSB7XG4gICAgaWYgKGNhY2hlcyAmJiBjYWNoZXMudXNlciAmJiBjYWNoZXMudXNlci51aWQpIHtcbiAgICAgIHJldHVybiB7IC4uLmNhY2hlcy51c2VyIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpc3BUaHJlYWRUeXBlID0gc2VsZi50aHJlYWQuY2ggPT09IHNlbGYuYXBwLnJvb3RDaCA/IEFwcC5kaXNwVGhyZWFkVHlwZU11bHRpIDogQXBwLmRpc3BUaHJlYWRUeXBlU2luZ2xlO1xuICAgICAgcmV0dXJuIHsgZGlzcFRocmVhZFR5cGUgfTtcbiAgICB9XG4gIH1cblxuICBnZXQgY2goKSB7XG4gICAgcmV0dXJuIHRoaXMudGhyZWFkLmNoO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmaW5lIGZyb20gJ2NvbW1vbi9kZWZpbmUnO1xuXG5pbXBvcnQgQmFubmVyIGZyb20gJ2FwaS9CYW5uZXInO1xuaW1wb3J0IFdpbmRvdyBmcm9tICdhcGkvV2luZG93JztcbmltcG9ydCB7IFB1YmxpY0FwaSB9IGZyb20gJ2FwaS9wdWJsaWMuYXBpJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICB0YWxrbldpbmRvdzogYW55O1xuICAgIHRhbGtuTWVkaWE6IGFueTtcbiAgICB0YWxrbkFQSTogYW55O1xuICAgIFlvdXR1YmU6IGFueTtcbiAgICBsb2c6IGFueTtcbiAgICBfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX186IGFueTtcbiAgfVxuICBpbnRlcmZhY2UgTWF0aCB7XG4gICAgZWFzZUluT3V0UXVhZDogYW55O1xuICB9XG59XG5cbmNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQ7XG5jb25zdCBpc1B1cmVBcGkgPSBCb29sZWFuKHNjcmlwdC5nZXRBdHRyaWJ1dGUoJ3NyYycpLmluZGV4T2YoZGVmaW5lLlNVQl9ET01BSU5TLkJBTk5FUikgPT09IC0xKTtcbmNvbnN0IGFwaVdpbmRvdyA9IG5ldyBXaW5kb3coZGVmaW5lLkFQUF9UWVBFUy5BUEkpO1xuXG53aW5kb3cudGFsa25BUEkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICBhcGlXaW5kb3cuYm9vdCgpLnRoZW4oKF93aW5kb3c6IFdpbmRvdykgPT4ge1xuICAgIGNvbnN0IHRhbGtuQVBJOiBQdWJsaWNBcGkgPSBuZXcgUHVibGljQXBpKF93aW5kb3cpO1xuICAgIGlmIChpc1B1cmVBcGkpIHtcbiAgICAgIHdpbmRvdy50YWxrbkFQSSA9IHRhbGtuQVBJO1xuICAgIH0gZWxzZSB7XG4gICAgICBCYW5uZXIodGFsa25BUEkpO1xuICAgIH1cbiAgICByZXNvbHZlKHRhbGtuQVBJKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCBTZXF1ZW5jZSBmcm9tICdjb21tb24vU2VxdWVuY2UnO1xuaW1wb3J0IGNvbmYgZnJvbSAnY29tbW9uL2NvbmYnO1xuaW1wb3J0IGRlZmluZSBmcm9tICdjb21tb24vZGVmaW5lJztcblxuZXhwb3J0IHR5cGUgRXh0ZW5zaW9uTW9kZVR5cGUgPVxuICB8IHR5cGVvZiBCb290T3B0aW9uLmV4dGVuc2lvbk1vZGVNb2RhbFxuICB8IHR5cGVvZiBCb290T3B0aW9uLmV4dGVuc2lvbk1vZGVCb3R0b21cbiAgfCB0eXBlb2YgQm9vdE9wdGlvbi5leHRlbnNpb25Nb2RlT3V0V2luZG93XG4gIHwgdHlwZW9mIEJvb3RPcHRpb24uZXh0ZW5zaW9uTW9kZUxpdmVNZWRpYTtcblxuZXhwb3J0IHR5cGUgRW52VHlwZSA9IHR5cGVvZiBkZWZpbmUuREVWRUxPUE1FTlQgfCB0eXBlb2YgZGVmaW5lLkxPQ0FMSE9TVCB8IHR5cGVvZiBkZWZpbmUuUFJPRFVDVElPTjtcbmV4cG9ydCB0eXBlIEJvb3RUeXBlID0gdHlwZW9mIGRlZmluZS5BUFBfVFlQRVMuQVBJIHwgdHlwZW9mIGRlZmluZS5BUFBfVFlQRVMuQ0xJRU5UIHwgdHlwZW9mIGRlZmluZS5BUFBfVFlQRVMuRVhURU5TSU9OO1xuZXhwb3J0IHR5cGUgQm9vdFByb3RvY29sVHlwZSA9IHR5cGVvZiBTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTCB8IHR5cGVvZiBTZXF1ZW5jZS5IVFRQX1BST1RPQ09MIHwgdHlwZW9mIFNlcXVlbmNlLlRBTEtOX1BST1RPQ09MO1xuZXhwb3J0IHR5cGUgQm9vdE9wdGlvblBhcmFtc1R5cGUgPSB7XG4gIGNoOiBzdHJpbmc7XG4gIGhhc1NsYXNoPzogYm9vbGVhbjtcbiAgcHJvdG9jb2w/OiBCb290UHJvdG9jb2xUeXBlO1xuICBob3N0Pzogc3RyaW5nO1xuICBtb2RlPzogRXh0ZW5zaW9uTW9kZVR5cGU7XG4gIGlzUmFua0RldGFpbE1vZGU/OiBib29sZWFuO1xufTtcbmV4cG9ydCB0eXBlIEJvb3RPcHRpb25UeXBlID0ge1xuICBpZDogc3RyaW5nO1xuICBwYXJhbXM/OiBCb290T3B0aW9uUGFyYW1zVHlwZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3RPcHRpb24ge1xuICBlbnY6IEVudlR5cGUgPSBkZWZpbmUuUFJPRFVDVElPTjtcbiAgdHlwZTogQm9vdFR5cGUgPSBkZWZpbmUuQVBQX1RZUEVTLlBPUlRBTDtcbiAgaWQ6IHN0cmluZztcbiAgY2g6IHN0cmluZyA9ICcvJztcbiAgaGFzU2xhc2g6IGJvb2xlYW4gPSB0cnVlO1xuICBwcm90b2NvbDogQm9vdFByb3RvY29sVHlwZSA9IFNlcXVlbmNlLkhUVFBTX1BST1RPQ09MO1xuICBob3N0OiBzdHJpbmcgPSBsb2NhdGlvbi5ob3N0O1xuICBleHRlbnNpb25Nb2RlOiBFeHRlbnNpb25Nb2RlVHlwZSA9IEJvb3RPcHRpb24uZXh0ZW5zaW9uTW9kZU5vbmU7XG4gIGlzUmFua0RldGFpbE1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZGVmYXVsdFByb3BzOiBCb290T3B0aW9uVHlwZSA9IHtcbiAgICBpZDogJycsXG4gICAgcGFyYW1zOiB7XG4gICAgICBjaDogJy8nLFxuICAgICAgaGFzU2xhc2g6IHRydWUsXG4gICAgICBwcm90b2NvbDogU2VxdWVuY2UuSFRUUFNfUFJPVE9DT0wsXG4gICAgICBob3N0OiBsb2NhdGlvbi5ob3N0LFxuICAgICAgbW9kZTogQm9vdE9wdGlvbi5leHRlbnNpb25Nb2RlTm9uZSxcbiAgICAgIGlzUmFua0RldGFpbE1vZGU6IGZhbHNlLFxuICAgIH0sXG4gIH07XG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIHBhcmFtcz86IEJvb3RPcHRpb25QYXJhbXNUeXBlKSB7XG4gICAgY29uc3QgaW5pdGlhbFJvb3RDaCA9IEJvb3RPcHRpb24uZ2V0SW5pdGlhbFJvb3RDaChjb25mLmVudik7XG4gICAgY29uc3QgZmlyc3RIYXNTbGFzaCA9IEJvb3RPcHRpb24uZ2V0Rmlyc3RIYXNTbGFjaChpbml0aWFsUm9vdENoKTtcbiAgICB0aGlzLmVudiA9IGNvbmYuZW52O1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmhhc1NsYXNoID0gcGFyYW1zICYmIHBhcmFtcy5oYXNTbGFzaCAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLmhhc1NsYXNoIDogQm9vdE9wdGlvbi5nZXRMYXN0SGFzU2xhY2goaW5pdGlhbFJvb3RDaCk7XG4gICAgdGhpcy5jaCA9IHBhcmFtcyAmJiBwYXJhbXMuY2ggPyBwYXJhbXMuY2ggOiBCb290T3B0aW9uLmdldEFjdGl2ZUNoKGluaXRpYWxSb290Q2gsIGZpcnN0SGFzU2xhc2gsIHRoaXMuaGFzU2xhc2gpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBwYXJhbXMgJiYgcGFyYW1zLnByb3RvY29sID8gcGFyYW1zLnByb3RvY29sIDogQm9vdE9wdGlvbi5nZXRQcm90b2NvbCgpO1xuICAgIHRoaXMuaG9zdCA9IHBhcmFtcyAmJiBwYXJhbXMuaG9zdCA/IHBhcmFtcy5ob3N0IDogbG9jYXRpb24uaG9zdDtcbiAgICB0aGlzLmV4dGVuc2lvbk1vZGUgPSBwYXJhbXMgJiYgcGFyYW1zLm1vZGUgPyBwYXJhbXMubW9kZSA6IEJvb3RPcHRpb24uZXh0ZW5zaW9uTW9kZU5vbmU7XG4gICAgdGhpcy5pc1JhbmtEZXRhaWxNb2RlID1cbiAgICAgIHBhcmFtcyAmJiBwYXJhbXMuaXNSYW5rRGV0YWlsTW9kZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1zLmlzUmFua0RldGFpbE1vZGUgOiB0aGlzLmRlZmF1bHRQcm9wcy5wYXJhbXMuaXNSYW5rRGV0YWlsTW9kZTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuc2lvbk1vZGVNb2RhbCgpIHtcbiAgICByZXR1cm4gJ01vZGFsJztcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuc2lvbk1vZGVCb3R0b20oKSB7XG4gICAgcmV0dXJuICdCb3R0b20nO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5zaW9uTW9kZUVtYmVkKCkge1xuICAgIHJldHVybiAnRW1iZWQnO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5zaW9uTW9kZUxpdmVNZWRpYSgpIHtcbiAgICByZXR1cm4gJ0xpdmVNZWRpYSc7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbnNpb25Nb2RlT3V0V2luZG93KCkge1xuICAgIHJldHVybiAnT3V0V2luZG93JztcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuc2lvbk1vZGVOb25lKCkge1xuICAgIHJldHVybiAnTm9uZSc7XG4gIH1cbiAgc3RhdGljIGdldEluaXRpYWxSb290Q2goZW52OiBFbnZUeXBlKTogc3RyaW5nIHtcbiAgICBsZXQgaW5pdGlhbFJvb3RDaDogc3RyaW5nID0gbG9jYXRpb24uaHJlZjtcbiAgICBpbml0aWFsUm9vdENoID0gaW5pdGlhbFJvb3RDaC5yZXBsYWNlKGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS9gLCAnJykucmVwbGFjZShgJHtTZXF1ZW5jZS5IVFRQX1BST1RPQ09MfS9gLCAnJyk7XG4gICAgc3dpdGNoIChlbnYpIHtcbiAgICAgIGNhc2UgZGVmaW5lLlBST0RVQ1RJT046XG4gICAgICAgIGlmIChpbml0aWFsUm9vdENoLmluZGV4T2YoY29uZi5jb3ZlclVSTCkgPj0gMCkge1xuICAgICAgICAgIGluaXRpYWxSb290Q2ggPSBpbml0aWFsUm9vdENoLnJlcGxhY2UoYC8ke2NvbmYuY292ZXJVUkx9L2AsICcvJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdGlhbFJvb3RDaCA9IGluaXRpYWxSb290Q2gucmVwbGFjZShgLyR7ZGVmaW5lLlBST0RVQ1RJT05fRE9NQUlOfWAsICcvJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRlZmluZS5MT0NBTEhPU1Q6XG4gICAgICAgIGlmIChpbml0aWFsUm9vdENoLmluZGV4T2YoY29uZi5jb3ZlclVSTCkgPj0gMCkge1xuICAgICAgICAgIGluaXRpYWxSb290Q2ggPSBpbml0aWFsUm9vdENoLnJlcGxhY2UoYC8ke2NvbmYuY292ZXJVUkx9L2AsICcvJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdGlhbFJvb3RDaCA9IGluaXRpYWxSb290Q2gucmVwbGFjZShgLyR7ZGVmaW5lLkRFVkVMT1BNRU5UX0RPTUFJTn1gLCAnLycpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGRlZmluZS5ERVZFTE9QTUVOVDpcbiAgICAgICAgaW5pdGlhbFJvb3RDaCA9IGluaXRpYWxSb290Q2hcbiAgICAgICAgICAucmVwbGFjZShgOiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0NMSUVOVH1gLCAnJylcbiAgICAgICAgICAucmVwbGFjZShgOiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0FQSX1gLCAnJylcbiAgICAgICAgICAucmVwbGFjZShgOiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0NPVkVSfWAsICcnKVxuICAgICAgICAgIC5yZXBsYWNlKGA6JHtkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlRfVFVORX1gLCAnJylcbiAgICAgICAgICAucmVwbGFjZShgOiR7ZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0NPTVBPTkVOVFN9YCwgJycpO1xuICAgICAgICBpZiAoaW5pdGlhbFJvb3RDaC5pbmRleE9mKGAvJHtkZWZpbmUuREVWRUxPUE1FTlRfRE9NQUlOfS9gKSA9PT0gMCkge1xuICAgICAgICAgIGluaXRpYWxSb290Q2ggPSBpbml0aWFsUm9vdENoLnJlcGxhY2UoYC8ke2RlZmluZS5ERVZFTE9QTUVOVF9ET01BSU59YCwgJycpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsUm9vdENoO1xuICB9XG5cbiAgc3RhdGljIGdldFR5cGUoZXh0U2NyaXB0LCBjbGllbnRTY3JpcHQpOiBCb290VHlwZSB7XG4gICAgbGV0IHR5cGUgPSBkZWZpbmUuQVBQX1RZUEVTLkFQSTtcbiAgICBpZiAoZXh0U2NyaXB0KSByZXR1cm4gZGVmaW5lLkFQUF9UWVBFUy5FWFRFTlNJT047XG4gICAgaWYgKGNsaWVudFNjcmlwdCkgcmV0dXJuIGRlZmluZS5BUFBfVFlQRVMuQ0xJRU5UO1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3RhdGljIGdldFByb3RvY29sKCk6IEJvb3RQcm90b2NvbFR5cGUge1xuICAgIGlmIChsb2NhdGlvbi5wcm90b2NvbCA9PT0gU2VxdWVuY2UuSFRUUFNfUFJPVE9DT0wpIHJldHVybiBTZXF1ZW5jZS5IVFRQU19QUk9UT0NPTDtcbiAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wgPT09IFNlcXVlbmNlLkhUVFBfUFJPVE9DT0wpIHJldHVybiBTZXF1ZW5jZS5IVFRQX1BST1RPQ09MO1xuICAgIHJldHVybiBTZXF1ZW5jZS5UQUxLTl9QUk9UT0NPTDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGaXJzdEhhc1NsYWNoKGNoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNoLnN0YXJ0c1dpdGgoJy8nKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRMYXN0SGFzU2xhY2goY2gpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY2guZW5kc1dpdGgoJy8nKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBY3RpdmVDaChpbml0aWFsUm9vdENoLCBmaXJzdEhhc1NsYXNoLCBsYXN0SGFzU2xhc2gpOiBzdHJpbmcge1xuICAgIGxldCBjaCA9IGluaXRpYWxSb290Q2g7XG4gICAgY2ggPSBmaXJzdEhhc1NsYXNoID8gY2ggOiBgLyR7Y2h9YDtcbiAgICBjaCA9IGxhc3RIYXNTbGFzaCA/IGNoIDogYCR7Y2h9L2A7XG4gICAgY2ggPSBjaC5yZXBsYWNlKC9eXFwvXFwvLywgJy8nKTtcbiAgICByZXR1cm4gY2g7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2goX2NoPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIV9jaCB8fCBfY2ggPT09ICcnKSByZXR1cm4gJy8nO1xuICAgIF9jaCA9IF9jaC5yZXBsYWNlKGAke1NlcXVlbmNlLkhUVFBTX1BST1RPQ09MfS9gLCAnJykucmVwbGFjZShgJHtTZXF1ZW5jZS5IVFRQX1BST1RPQ09MfS9gLCAnJyk7XG4gICAgX2NoID0gX2NoLmVuZHNXaXRoKCcvJykgPyBfY2ggOiBfY2ggKyAnLyc7XG4gICAgX2NoID0gX2NoLnN0YXJ0c1dpdGgoJy8nKSA/IF9jaCA6ICcvJyArIF9jaDtcbiAgICByZXR1cm4gX2NoO1xuICB9XG59XG4iLCJpbXBvcnQgU2VxdWVuY2UgZnJvbSAnY29tbW9uL1NlcXVlbmNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zdE1lc3NhZ2Uge1xuICAvLyBIQU5ETEUgQ0xJRU5UIEFORCBXU0FQSVxuICBzdGF0aWMgZ2V0IEhBTkRMRV9DTElFTlRfQU5EX1dTQVBJKCkge1xuICAgIHJldHVybiAnSEFORExFX0NMSUVOVF9BTkRfV1NBUEknO1xuICB9XG4gIHN0YXRpYyBnZXQgV1NBUElfVE9fQ0xJRU5UX1RZUEUoKSB7XG4gICAgcmV0dXJuICdXU0FQSV9UT19DTElFTlRfVFlQRSc7XG4gIH1cbiAgc3RhdGljIGdldCBDTElFTlRfVE9fV1NBUElfVFlQRSgpIHtcbiAgICByZXR1cm4gJ0NMSUVOVF9UT19XU0FQSV9UWVBFJztcbiAgfVxuXG4gIC8vIEhBTkRMRV9BUElfQU5EX0NMSUVOVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9BUElfQU5EX0NMSUVOVCgpIHtcbiAgICByZXR1cm4gJ0hBTkRMRV9BUElfQU5EX0NMSUVOVCc7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX1RZUEUoKSB7XG4gICAgcmV0dXJuICdBUElfVE9fQ0xJRU5UX1RZUEUnO1xuICB9XG4gIHN0YXRpYyBnZXQgQ0xJRU5UX1RPX0FQSV9UWVBFKCkge1xuICAgIHJldHVybiAnQ0xJRU5UX1RPX0FQSV9UWVBFJztcbiAgfVxuXG4gIC8vIEhBTkRMRV9BUElfQU5EX0VYVFxuICBzdGF0aWMgZ2V0IEhBTkRMRV9FWFRfQU5EX0FQSSgpIHtcbiAgICByZXR1cm4gJ0hBTkRMRV9FWFRfQU5EX0FQSSc7XG4gIH1cbiAgc3RhdGljIGdldCBNRURJQV9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gJ01FRElBX1RPX0NMSUVOVF9UWVBFJztcbiAgfVxuICBzdGF0aWMgZ2V0IEVYVF9UT19BUElfVFlQRSgpIHtcbiAgICByZXR1cm4gJ0VYVF9UT19BUElfVFlQRSc7XG4gIH1cblxuICAvLyBIQU5ETEVfQ0xJRU5UX0FORF9FWFRcbiAgc3RhdGljIGdldCBIQU5ETEVfRVhUX0FORF9DTElFTlQoKSB7XG4gICAgcmV0dXJuICdoYW5kbGVFeHRBbmRDbGllbnQnO1xuICB9XG4gIHN0YXRpYyBnZXQgQ0xJRU5UX1RPX0VYVF9UWVBFKCkge1xuICAgIHJldHVybiAnQ0xJRU5UX1RPX0VYVF9UWVBFJztcbiAgfVxuICBzdGF0aWMgZ2V0IEVYVF9UT19DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gJ0VYVF9UT19DTElFTlRfVFlQRSc7XG4gIH1cbiAgc3RhdGljIGdldCBIQU5ETEVfTUVESUFfU0VSVkVSX0FORF9NRURJQV9DTElFTlQoKSB7XG4gICAgcmV0dXJuICdoYW5kbGVNZWRpYVNlcnZlckFuZE1lZGlhQ2xpZW50JztcbiAgfVxuICBzdGF0aWMgZ2V0IE1FRElBX1NFUlZFUl9UT19NRURJQV9DTElFTlRfVFlQRSgpIHtcbiAgICByZXR1cm4gJ01FRElBX1NFUlZFUl9UT19NRURJQV9DTElFTlRfVFlQRSc7XG4gIH1cbiAgc3RhdGljIGdldCBNRURJQV9DTElFTlRfVE9fTUVESUFfU0VSVkVSX1RZUEUoKSB7XG4gICAgcmV0dXJuICdNRURJQV9DTElFTlRfVE9fTUVESUFfU0VSVkVSX1RZUEUnO1xuICB9XG4gIHN0YXRpYyBjb252ZXJ0QXBpVG9DbGllbnRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX1JFUVVFU1QpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX0VNSVQpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QpO1xuICAgIH1cbiAgICByZXR1cm4gYEFQSV9UT19DTElFTlRbQUNUSU9OXToke2FjdGlvblR5cGV9YDtcbiAgfVxuICBzdGF0aWMgZ2V0TWVzc2FnZVR5cGVzKGFjdGlvblR5cGUpIHtcbiAgICBjb25zdCBzcGxpdGVkMSA9IGFjdGlvblR5cGUuc3BsaXQoJzonKTtcbiAgICBjb25zdCBzcGxpdGVkMiA9IHNwbGl0ZWQxWzBdLnNwbGl0KCdbJyk7XG4gICAgY29uc3QgaW9UeXBlID0gc3BsaXRlZDJbMV0ucmVwbGFjZSgnXScsICcnKTtcbiAgICBjb25zdCBleGVNZXRob2QgPSBzcGxpdGVkMVsxXTtcbiAgICByZXR1cm4geyBpb1R5cGUsIGV4ZU1ldGhvZCB9O1xuICB9XG4gIHN0YXRpYyBjb252ZXJ0RXh0VG9DbGllbnRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgICByZXR1cm4gYEVYVF9UT19DTElFTlRbQUNUSU9OXToke2FjdGlvblR5cGV9YDtcbiAgfVxufVxuXG4vLyBjb21tb24uXG5leHBvcnQgY29uc3QgSGFuZGxlTWVzc2FnZU1ldGhvZCA9ICdoYW5kbGUnO1xuZXhwb3J0IGNvbnN0IEhhbmRsZVJlcXVlc3RNZXRob2QgPSAnaGFuZGxlJztcbmV4cG9ydCB0eXBlIElvVHlwZVZhbHVlcyA9XG4gIHwgdHlwZW9mIFNlcXVlbmNlLkFQSV9TRVRVUFxuICB8IHR5cGVvZiBTZXF1ZW5jZS5BUElfUkVRVUVTVF9UWVBFXG4gIHwgdHlwZW9mIFNlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVRcbiAgfCB0eXBlb2YgU2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUXG4gIHwgdHlwZW9mIFNlcXVlbmNlLlVOS05PV047XG5leHBvcnQgdHlwZSBJb1R5cGUgPSB7XG4gIGlvVHlwZTogSW9UeXBlO1xufTtcbmV4cG9ydCB0eXBlIE1lc3NhZ2VQYXJhbXNGcmVlID0geyBrZXk6IHN0cmluZzsgdmFsdWU6IGFueSB9IHwge307XG5leHBvcnQgdHlwZSBNZXNzYWdlUGFyYW1zID0geyBrZXk6IHN0cmluZzsgdmFsdWU6IGFueSB9IHwge307XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDbGllbnRBbmRXc0FwaVR5cGUgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHR5cGU6IHR5cGVvZiBQb3N0TWVzc2FnZS5XU0FQSV9UT19DTElFTlRfVFlQRSB8IHR5cGVvZiBQb3N0TWVzc2FnZS5DTElFTlRfVE9fV1NBUElfVFlQRTtcbiAgaW9UeXBlOiBJb1R5cGVWYWx1ZXM7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBwYXJhbXM/OiBNZXNzYWdlUGFyYW1zO1xuICBtZXRob2RCYWNrPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZUNsaWVudEFuZEV4dFR5cGUgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHR5cGU6IHR5cGVvZiBQb3N0TWVzc2FnZS5FWFRfVE9fQ0xJRU5UX1RZUEUgfCB0eXBlb2YgUG9zdE1lc3NhZ2UuQ0xJRU5UX1RPX0VYVF9UWVBFO1xuICBpb1R5cGU6IElvVHlwZVZhbHVlcztcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIGhyZWY6IHN0cmluZztcbiAgcGFyYW1zPzogTWVzc2FnZVBhcmFtcztcbiAgbWV0aG9kQmFjaz86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VNZWRpYUNsaWVudEFuZE1lZGlhU2VydmVyVHlwZSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogdHlwZW9mIFBvc3RNZXNzYWdlLk1FRElBX0NMSUVOVF9UT19NRURJQV9TRVJWRVJfVFlQRSB8IHR5cGVvZiBQb3N0TWVzc2FnZS5NRURJQV9TRVJWRVJfVE9fTUVESUFfQ0xJRU5UX1RZUEU7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBwYXJhbXM/OiBNZXNzYWdlUGFyYW1zO1xuICBtZXRob2RCYWNrPzogc3RyaW5nO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjaGVtYSB7XG4gIGVycm9yVGhyb3c6IGFueTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb246IGFueSA9IHt9KSB7XG4gICAgLypcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICB0aGlzLFxuICAgICAgJ19TRVRfQ09MVU1OUycsXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiBbXSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9XG4gICAgKTtcbiovXG4gIH1cblxuICBzdGF0aWMgZ2V0VHlwZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJOdWxsXCI7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gXCJVbmRlZmluZWRcIjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBzdGF0aWMgaXNTZXQodmFsOiBhbnkpIHtcbiAgICByZXR1cm4gU2NoZW1hLmdldFR5cGUodmFsKSA9PT0gXCJVbmRlZmluZWRcIiB8fCBTY2hlbWEuZ2V0VHlwZSh2YWwpID09PSBcIk51bGxcIiA/IGZhbHNlIDogdHJ1ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRCb29sKHZhbDogYW55KSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwiYm9vbGVhblwiKSByZXR1cm4gdmFsO1xuICAgIHJldHVybiB2YWwgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGlzQW5vbnltb3VzRnVuYyhmbikge1xuICAgIGNvbnN0IGZuU3RyaW5nID0gZm4udG9TdHJpbmcoKTtcblxuICAgIGlmIChmblN0cmluZyA9PT0gXCJmdW5jdGlvbigpe31cIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGZuU3RyaW5nID09PSBcImZ1bmN0aW9uKCkge31cIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGZuU3RyaW5nID09PSBcImZ1bmN0aW9uICgpe31cIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGZuU3RyaW5nID09PSBcImZ1bmN0aW9uICgpIHt9XCIpIHJldHVybiB0cnVlO1xuICAgIGlmIChmblN0cmluZyA9PT0gXCIoKT0+e31cIikgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY3JlYXRlKHN0YXRlOiBhbnkpIHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgY29uc3Qgc3RhdGVUeXBlID0gU2NoZW1hLmdldFR5cGUoc3RhdGUpO1xuICAgIGxldCB2YWxpZE1ldGhvZHMgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHN0YXRlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIC8vIFByb3BlcnRpZXMgLlxuICAgICAgbGV0IHZhbHVlcztcbiAgICAgIGxldCBkZWYgPSBudWxsO1xuICAgICAgbGV0IHR5cGU6IGFueTtcbiAgICAgIGxldCBpc0FjY2VwdE51bGwgPSBmYWxzZTtcbiAgICAgIGxldCBpc0FjY2VwdEJsYW5rID0gZmFsc2U7XG4gICAgICBsZXQgdmFsaWQ6IGFueSA9ICgpID0+IHt9O1xuICAgICAgbGV0IHZhbHVlOiBhbnkgPSBudWxsO1xuXG4gICAgICAvLyBBc3NpZ24gUHJvcGVydGllcyAuXG4gICAgICBpZiAoU2NoZW1hLmdldFR5cGUoc3RhdGVba2V5XSkgPT09IFwiT2JqZWN0XCIpIHtcbiAgICAgICAgdmFsdWVzID0gc3RhdGVba2V5XTtcbiAgICAgICAgbGV0IGlzRW1wdHlPYmplY3QgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgaXNBY2NlcHROdWxsID0gdmFsdWVzLmlzQWNjZXB0TnVsbCA/IHZhbHVlcy5pc0FjY2VwdE51bGwgOiBpc0FjY2VwdE51bGw7XG4gICAgICAgIGlzQWNjZXB0QmxhbmsgPSB2YWx1ZXMuaXNBY2NlcHRCbGFuayA/IHZhbHVlcy5pc0FjY2VwdEJsYW5rIDogaXNBY2NlcHRCbGFuaztcbiAgICAgICAgZGVmID0gIWlzRW1wdHlPYmplY3QgJiYgdmFsdWVzLmRlZiA/IHZhbHVlcy5kZWYgOiBkZWY7XG4gICAgICAgIHZhbHVlID0gIWlzRW1wdHlPYmplY3QgJiYgKHZhbHVlcy52YWx1ZSB8fCB2YWx1ZXMudmFsdWUgPT09IFwiXCIpID8gdmFsdWVzLnZhbHVlIDogdmFsdWVzO1xuICAgICAgICB2YWx1ZSA9IGlzRW1wdHlPYmplY3QgJiYgZGVmID8gZGVmIDogdmFsdWU7XG4gICAgICAgIHR5cGUgPSBTY2hlbWEuZ2V0VHlwZSh2YWx1ZSk7XG4gICAgICAgIHZhbGlkID0gdmFsdWVzLnZhbGlkID8gdmFsdWVzLnZhbGlkIDogdmFsaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHN0YXRlW2tleV07XG4gICAgICAgIGRlZiA9IHZhbHVlO1xuICAgICAgICBpc0FjY2VwdE51bGwgPSBpc0FjY2VwdE51bGw7XG4gICAgICAgIGlzQWNjZXB0QmxhbmsgPSBpc0FjY2VwdEJsYW5rO1xuICAgICAgICB0eXBlID0gU2NoZW1hLmdldFR5cGUodmFsdWUpO1xuICAgICAgICB2YWxpZCA9IHZhbGlkO1xuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSBGdW5jdGlvbnMgLlxuICAgICAgY29uc3QgdmFsaWRGdW5jID0gKF92YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSBgJHtjbGFzc05hbWV9LiR7a2V5fWA7XG4gICAgICAgIGNvbnN0IHZhbGlkVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgdmFsaWRUeXBlID0gdHlwZTtcbiAgICAgICAgY29uc3QgcGFyYW1zVmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIGNvbnN0IHBhcmFtc1R5cGUgPSBTY2hlbWEuZ2V0VHlwZShfdmFsdWUpO1xuXG4gICAgICAgIGlmIChwYXJhbXNUeXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgZXJyb3IgPSBgU0NIRU1BX1RZUEUgOiAke3BvaW50ZXJ9IFt2YWxpZFR5cGU6ICR7dHlwZX1dW3BhcmFtc1R5cGU6ICR7cGFyYW1zVHlwZX1dYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY2NlcHROdWxsICYmIF92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGVycm9yID0gYFNDSEVNQV9JU19BQ0NFUFRfTlVMTCA6ICAke3BvaW50ZXJ9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY2NlcHRCbGFuayAmJiBfdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfSVNfQUNDRVBUX0JMQU5LIDogICR7cG9pbnRlcn1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChTY2hlbWEuZ2V0VHlwZSh2YWxpZCkgPT09IFwiRnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmICh2YWxpZChfdmFsdWUpKSB7XG4gICAgICAgICAgICBlcnJvciA9IGBTQ0hFTUFfWU9VUl9WQUxJRF9NRVRIT0QgOiAgJHtwb2ludGVyfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9pbnRlcixcbiAgICAgICAgICB2YWxpZFZhbHVlLFxuICAgICAgICAgIHZhbGlkVHlwZSxcbiAgICAgICAgICBwYXJhbXNWYWx1ZSxcbiAgICAgICAgICBwYXJhbXNUeXBlLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgY29uc3QgeyBwb2ludGVyLCB2YWxpZFZhbHVlLCB2YWxpZFR5cGUsIHBhcmFtc1ZhbHVlLCBwYXJhbXNUeXBlLCBlcnJvciB9ID0gdmFsaWRGdW5jKHZhbHVlKTtcblxuICAgICAgaWYgKGVycm9yID09PSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogKF92YWx1ZSkgPT4ge1xuICAgICAgICAgICAgLy8gcG9pbnRlciwgdmFsaWRWYWx1ZSwgdmFsaWRUeXBlLCBwYXJhbXNWYWx1ZSwgcGFyYW1zVHlwZSwgZXJyb3JcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkUmVzdWx0ID0gdmFsaWRGdW5jKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4udGhpcywgW2tleV06IHZhbHVlIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnZhbGlkV2Fybih2YWxpZFJlc3VsdCk7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JUaHJvdykge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNhblNldChrZXk6IGFueSwgdmFsaWRWYWx1ZTogYW55KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXNba2V5XTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbGlkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbGlkVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9ICh0aGlzW2tleV0gPSB2YWxpZFZhbHVlKTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2tleV0gPSBjdXJyZW50VmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkJBRCBDQU4gU0VUIEtFWTogXCIgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyBcIiBcIiArIGtleSk7XG4gICAgICBjb25zb2xlLndhcm4oXCJCRUZPRVIgVkFMVUVcIik7XG4gICAgICBjb25zb2xlLndhcm4odHlwZW9mIHRoaXNba2V5XSk7XG4gICAgICBjb25zb2xlLndhcm4odGhpc1trZXldKTtcbiAgICAgIGNvbnNvbGUud2FybihcIkFGVEVSIFZBTFVFXCIpO1xuICAgICAgY29uc29sZS53YXJuKHR5cGVvZiB2YWxpZFZhbHVlKTtcbiAgICAgIGNvbnNvbGUud2Fybih2YWxpZFZhbHVlKTtcbiAgICAgIHRocm93IGBCQUQgQ0FOIFNFVDogJHtlfWA7XG4gICAgfVxuICB9XG5cbiAgbWVyZ2UocGFyYW1zID0ge30sIGltbXV0YWJsZSA9IHRydWUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyYW1zVHlwZSA9IFNjaGVtYS5nZXRUeXBlKHBhcmFtcyk7XG4gICAgICBjb25zdCBvYmpLZXlzID0gT2JqZWN0LmtleXMocGFyYW1zKTtcblxuICAgICAgaWYgKG9iaktleXMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbWVyZ2VkT2JqOiBhbnkgPSB7IC4uLnRoaXMgfTtcbiAgICAgICAgb2JqS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBpZiAodGhpc1trZXldICE9PSBwYXJhbXNba2V5XSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FuU2V0KGtleSwgcGFyYW1zW2tleV0pKSB7XG4gICAgICAgICAgICAgIG1lcmdlZE9ialtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJCQUQgTUVSR0UgQSA6IFwiICsga2V5ICsgXCIgXCIgKyBwYXJhbXNba2V5XSArIFwiIFwiICsgdHlwZW9mIHBhcmFtc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYXJhbXNUeXBlID09PSBcIkFycmF5XCIpIHtcbiAgICAgICAgICBtZXJnZWRPYmogPSBPYmplY3QudmFsdWVzKG1lcmdlZE9iaik7XG5cbiAgICAgICAgICAvKlxuICAgICAgICAgICAgY2xhc3MgQSB7XG4gICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkgeyAgfVxuICAgICAgICAgICAgICByZWZyZXNoKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgQT50aGlzLmNvbnN0cnVjdG9yKTsgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAqL1xuICAgICAgICAgIHJldHVybiBpbW11dGFibGUgPyBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKG1lcmdlZE9iaikgOiBtZXJnZWRPYmo7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGltbXV0YWJsZSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggbWVyZ2VkT2JqICk7XG4gICAgICAgICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKShtZXJnZWRPYmopO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkT2JqO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodGhpcy5lcnJvclRocm93KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihwYXJhbXMpO1xuICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIHRocm93IGBCQUQgTUVSR0UgQiA6ICR7U2NoZW1hLmdldFR5cGUocGFyYW1zKX0gJHtlfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4ocGFyYW1zKTtcbiAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgICAgICBjb25zb2xlLndhcm4oYEJBRCBNRVJHRSBDIDogJHtTY2hlbWEuZ2V0VHlwZShwYXJhbXMpfSAke2V9YCk7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdG9KU09OKG9iajogYW55ID0gdGhpcykge1xuICAgIGxldCBqc29uT2JqOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgbGV0IHZhbHVlczogYW55ID0gb2JqW2tleV07XG4gICAgICBpZiAodmFsdWVzLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKCF2YWx1ZXMudHlwZSAmJiAhdmFsdWVzLmRlZmF1bHQpIHtcbiAgICAgICAgICB2YWx1ZXMgPSB0aGlzLnRvSlNPTih2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZXMuZGVmYXVsdCB8fCB2YWx1ZXMuZGVmYXVsdCA9PT0gXCJcIiB8fCB2YWx1ZXMuZGVmYXVsdCA9PT0gMCkge1xuICAgICAgICBqc29uT2JqW2tleV0gPSB2YWx1ZXMuZGVmYXVsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpzb25PYmpba2V5XSA9IHZhbHVlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ganNvbk9iajtcbiAgfVxuXG4gIGZvckVhY2goZnVuYykge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMpLmZvckVhY2goZnVuYyk7XG4gIH1cblxuICBjb25jYXQoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLmNvbmNhdChmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBtYXAoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLm1hcChmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBmaWx0ZXIoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLmZpbHRlcihmdW5jKSwgZnVuYyk7XG4gIH1cblxuICByZWR1Y2UoZnVuYykge1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLnJlZHVjZShmdW5jKSwgZnVuYyk7XG4gIH1cblxuICBmaW5kKGZ1bmMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzKS5maW5kKGZ1bmMpO1xuICB9XG5cbiAgc29ydChmdW5jKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuc29ydChmdW5jKTtcbiAgfVxuXG4gIHB1c2godmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIHVuc2hpZnQodmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMpO1xuICAgIHZhbHVlcy51bnNoaWZ0KHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIGdldFNoaWZ0KCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcyk7XG4gICAgY29uc3QgcmVzdWx0cyA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIHJldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShyZXN1bHRzKTtcbiAgfVxuXG4gIHBvcCh2YWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlczogYW55ID0gT2JqZWN0LnZhbHVlcyh0aGlzKTtcbiAgICB2YWx1ZXMucG9wKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUodmFsdWVzKTtcbiAgfVxuXG4gIHJldHVybkltbXV0YWJsZSh2YWx1ZXMsIGZ1bmMgPSAoKSA9PiB7fSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gbmV3ICg8dHlwZW9mIFNjaGVtYT50aGlzLmNvbnN0cnVjdG9yKSgpO1xuICAgIH0gZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyh0aGlzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmIChTdHJpbmcoZnVuYykuaW5kZXhPZihcImNyZWF0ZUVsZW1lbnRcIikgPiAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgKDx0eXBlb2YgU2NoZW1hPnRoaXMuY29uc3RydWN0b3IpKHZhbHVlcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZXNbMF0gJiYgdmFsdWVzWzBdW1wiJCR0eXBlb2ZcIl0gJiYgdmFsdWVzWzBdW1wiJCR0eXBlb2ZcIl0uY29uc3RydWN0b3IubmFtZSA9PT0gXCJTeW1ib2xcIikge1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyAoPHR5cGVvZiBTY2hlbWE+dGhpcy5jb25zdHJ1Y3RvcikodmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZFdhcm4odmFsaWRSZXN1bHQpIHtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgICBjb25zb2xlLndhcm4oXCIjXCIgKyB2YWxpZFJlc3VsdC5wb2ludGVyKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1wiKTtcbiAgICBjb25zb2xlLndhcm4oXCIjIyMgaW5pdGlhbGl6ZWRWYWxpZFR5cGVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnZhbGlkVHlwZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIGluaXRpYWxpemVkVmFsaWRWYWx1ZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQudmFsaWRWYWx1ZSk7XG4gICAgY29uc29sZS53YXJuKFwiIyMjIHBhcmFtc1R5cGVcIik7XG4gICAgY29uc29sZS53YXJuKHZhbGlkUmVzdWx0LnBhcmFtc1R5cGUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyBwYXJhbXNWYWx1ZVwiKTtcbiAgICBjb25zb2xlLndhcm4odmFsaWRSZXN1bHQucGFyYW1zVmFsdWUpO1xuICAgIGNvbnNvbGUud2FybihcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgU2NoZW1hIGZyb20gJ2NvbW1vbi9TY2hlbWEnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXF1ZW5jZSB7XG4gIHN0YXRpYyBnZXQgVEFMS05fUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuICd0YWxrbjonO1xuICB9XG4gIHN0YXRpYyBnZXQgSFRUUF9QUk9UT0NPTCgpIHtcbiAgICByZXR1cm4gJ2h0dHA6JztcbiAgfVxuICBzdGF0aWMgZ2V0IEhUVFBTX1BST1RPQ09MKCkge1xuICAgIHJldHVybiAnaHR0cHM6JztcbiAgfVxuICBzdGF0aWMgZ2V0IFVOS05PV05fUFJPVE9DT0woKSB7XG4gICAgcmV0dXJuICc/Pz8/Oic7XG4gIH1cbiAgc3RhdGljIGdldCBDQVRDSF9NRV9LRVkoKSB7XG4gICAgcmV0dXJuICdAQ0FUQ0hfTUUnO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1NFUEFSQVRFX0lPX1RZUEVfU1RBUlQoKSB7XG4gICAgcmV0dXJuICdbJztcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9TRVBBUkFURV9JT19UWVBFX0VORCgpIHtcbiAgICByZXR1cm4gJ10nO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1JFUVVFU1RfVFlQRSgpIHtcbiAgICByZXR1cm4gJ1JFUVVFU1QnO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1JFU1BPTlNFX1RZUEVfRU1JVCgpIHtcbiAgICByZXR1cm4gJ0VNSVQnO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUKCkge1xuICAgIHJldHVybiAnQlJPQURDQVNUJztcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9TRVRVUCgpIHtcbiAgICByZXR1cm4gJ0FQSV9TRVRVUCc7XG4gIH1cbiAgc3RhdGljIGdldCBVTktOT1dOKCkge1xuICAgIHJldHVybiAnVU5LTk9XTic7XG4gIH1cbiAgc3RhdGljIGdldCBDT05ORUNUSU9OX1NFUlZFUl9LRVkoKSB7XG4gICAgcmV0dXJuICdDT05ORUNUSU9OX1NFUlZFUic7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fU0VSVkVSX1JFUVVFU1QoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fU0VSVkVSWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IFNFUlZFUl9UT19BUElfRU1JVCgpIHtcbiAgICByZXR1cm4gYFNFUlZFUl9UT19BUElbJHtTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QoKSB7XG4gICAgcmV0dXJuIGBTRVJWRVJfVE9fQVBJWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUfV0ke1NlcXVlbmNlLk1FVEhPRF9DT0xPTn1gO1xuICB9XG4gIHN0YXRpYyBnZXQgQVBJX1RPX0NMSUVOVF9SRVFVRVNUKCkge1xuICAgIHJldHVybiBgQVBJX1RPX0NMSUVOVFske1NlcXVlbmNlLkFQSV9SRVFVRVNUX1RZUEV9XSR7U2VxdWVuY2UuTUVUSE9EX0NPTE9OfWA7XG4gIH1cbiAgc3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX0VNSVQoKSB7XG4gICAgcmV0dXJuIGBBUElfVE9fQ0xJRU5UWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfQlJPQURDQVNUKCkge1xuICAgIHJldHVybiBgQVBJX1RPX0NMSUVOVFske1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVH1dJHtTZXF1ZW5jZS5NRVRIT0RfQ09MT059YDtcbiAgfVxuICBzdGF0aWMgZ2V0IEFQSV9CUk9BRENBU1RfQ0FMTEJBQ0soKSB7XG4gICAgcmV0dXJuICd0dW5lJztcbiAgfVxuICBzdGF0aWMgZ2V0IFJFRFVYX0FDVElPTl9LRVkoKSB7XG4gICAgcmV0dXJuICd0eXBlJztcbiAgfVxuICBzdGF0aWMgZ2V0IE1FVEhPRF9DT0xPTigpIHtcbiAgICByZXR1cm4gJzonO1xuICB9XG4gIHN0YXRpYyBnZXQgQUREX0NMSUVOVF9BQ1RJT05fUFJFRklYKCkge1xuICAgIHJldHVybiAnQVBJX1RPX0NMSUVOVCc7XG4gIH1cbiAgc3RhdGljIGdldCBtYXAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR1bmU6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogWydjaCcsICdoYXNTbGFzaCcsICdwcm90b2NvbCddLFxuICAgICAgICAgIGFwcDogWydtdWx0aXN0cmVhbScsICdyb290Q2gnLCAnZGlzcFRocmVhZFR5cGUnLCAnYWN0aW9uZWQnLCAnb2Zmc2V0RmluZElkJywgJ2lzVG9nZ2xlTXVsdGlzdHJlYW0nXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHsgdXNlcjogWyd1aWQnXSwgc2V0dGluZzogJyonLCB0aHJlYWQ6ICcqJyB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7IHRocmVhZDogWydsaXZlQ250JywgJ2NoJ10gfSxcbiAgICAgIH0sXG4gICAgICBmZXRjaFBvc3RzOiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFsnY2gnLCAncHJvdG9jb2wnLCAnaG9zdCcsICdoYXNTbGFzaCddLFxuICAgICAgICAgIGFwcDogWydtdWx0aXN0cmVhbScsICdyb290Q2gnLCAnZGlzcFRocmVhZFR5cGUnLCAnYWN0aW9uZWQnLCAnb2Zmc2V0RmluZElkJywgJ2lzVG9nZ2xlTXVsdGlzdHJlYW0nXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VFbWl0U3RhdGU6IHsgcG9zdHM6ICcqJywgdGhyZWFkOiAnKicgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgZ2V0TW9yZToge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbJ2NoJ10sXG4gICAgICAgICAgYXBwOiBbJ211bHRpc3RyZWFtJywgJ2Rpc3BUaHJlYWRUeXBlJywgJ29mZnNldEZpbmRJZCddLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge1xuICAgICAgICAgIGFwcDogWydkaXNwVGhyZWFkVHlwZScsICdvZmZzZXRGaW5kSWQnXSxcbiAgICAgICAgICBwb3N0czogJyonLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICB1cGRhdGVUaHJlYWQ6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIHRocmVhZDogWydjaCcsICdwcm90b2NvbCcsICdob3N0JywgJ2hhc1NsYXNoJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiAnKicsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGNoYW5nZVRocmVhZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdGhyZWFkOiBbJ2NoJywgJ2hhc1NsYXNoJywgJ3Byb3RvY29sJ10sXG4gICAgICAgICAgYXBwOiBbJ3R1bmVkQ2gnLCAnbXVsdGlzdHJlYW0nLCAncm9vdENoJywgJ2Rpc3BUaHJlYWRUeXBlJywgJ2FjdGlvbmVkJywgJ29mZnNldEZpbmRJZCcsICdpc1RvZ2dsZU11bHRpc3RyZWFtJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbJ2xpdmVDbnQnLCAnY2gnXSB9LFxuICAgICAgfSxcbiAgICAgIGNoYW5nZVRocmVhZERldGFpbDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7IHRocmVhZDogWydjaCddIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIGFkZEZpbmRDaGlsZDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7IHRocmVhZDogWydjaCddIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7IHRocmVhZDogJyonIH0sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHt9LFxuICAgICAgfSxcbiAgICAgIHJhbms6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7fSxcbiAgICAgICAgcmVxdWVzdFByaXZhdGVTdGF0ZToge1xuICAgICAgICAgIGFwcDogWydmaW5kVHlwZScsICdyb290Q2gnLCAnaXNSYW5rRGV0YWlsTW9kZSddLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyByYW5rOiAnKicgfSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZToge30sXG4gICAgICB9LFxuICAgICAgcG9zdDoge1xuICAgICAgICByZXF1ZXN0UHVibGljU3RhdGU6IHt9LFxuICAgICAgICByZXF1ZXN0UHJpdmF0ZVN0YXRlOiB7XG4gICAgICAgICAgdXNlcjogWyd1aWQnLCAndXR5cGUnXSxcbiAgICAgICAgICBhcHA6IFsnaW5wdXRQb3N0JywgJ2lucHV0U3RhbXBJZCcsICdpbnB1dEN1cnJlbnRUaW1lJywgJ2Rpc3BUaHJlYWRUeXBlJ10sXG4gICAgICAgICAgdGhyZWFkOiBbJ2ZpbmRUeXBlJywgJ3RpdGxlJywgJ3Byb3RvY29sJywgJ2NoJywgJ2NocycsICdlbW90aW9ucycsICdmYXZpY29uJywgJ2NvbnRlbnRUeXBlJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlRW1pdFN0YXRlOiB7fSxcbiAgICAgICAgcmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTogeyBwb3N0czogJyonLCB0aHJlYWQ6IFsnY2gnLCAnZW1vdGlvbnMnLCAncG9zdENudCddLCB1c2VyOiBbJ3VpZCddIH0sXG4gICAgICB9LFxuICAgICAgdXBkYXRlVGhyZWFkU2VydmVyTWV0YXM6IHtcbiAgICAgICAgcmVxdWVzdFB1YmxpY1N0YXRlOiB7IHRocmVhZDogWydzZXJ2ZXJNZXRhcyddIH0sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHtcbiAgICAgICAgICB0aHJlYWQ6IFsnaG9zdCcsICdwcm90b2NvbCcsICdjaCddLFxuICAgICAgICAgIHVzZXI6IFsndWlkJ10sIC8vIOaHuOW/tSAuZm9yRWFjaOOBleOCjOOBquOBhOOBruOBp+S4gOaXpuOBk+OBruW9ouOBq+S/ruato1xuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZTogeyB0aHJlYWQ6ICcqJyB9LFxuICAgICAgICByZXNwb25zZUJyb2FkY2FzdFN0YXRlOiB7fSxcbiAgICAgIH0sXG4gICAgICBkaXNjb25uZWN0OiB7XG4gICAgICAgIHJlcXVlc3RQdWJsaWNTdGF0ZToge30sXG4gICAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGU6IHt9LFxuICAgICAgICByZXNwb25zZUVtaXRTdGF0ZToge30sXG4gICAgICAgIHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6IHsgdGhyZWFkOiBbJ2xpdmVDbnQnLCAnY2gnXSB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldFNlcXVlbmNlQWN0aW9uTWFwKG1ldGhvZCk6IHsgc2VxdWVuY2U6IHN0cmluZzsgYWN0aW9uVHlwZTogc3RyaW5nOyBhY3Rpb25OYW1lOiBzdHJpbmcgfSB7XG4gICAgY29uc3Qgc3BsaXRlZCA9IG1ldGhvZC5zcGxpdChTZXF1ZW5jZS5NRVRIT0RfQ09MT04pO1xuICAgIGNvbnN0IHNlcXVlbmNlID0gc3BsaXRlZFswXS5zcGxpdCgnWycpWzBdO1xuICAgIGxldCBhY3Rpb25UeXBlO1xuXG4gICAgaWYgKHNwbGl0ZWRbMF0uaW5kZXhPZihgWyR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX1dYCkgPiAwKSB7XG4gICAgICBhY3Rpb25UeXBlID0gU2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uVHlwZSA9XG4gICAgICAgIHNwbGl0ZWRbMF0uaW5kZXhPZihgWyR7U2VxdWVuY2UuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH1dYCkgPiAwXG4gICAgICAgICAgPyBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUXG4gICAgICAgICAgOiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1Q7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IHNwbGl0ZWRbMV07XG4gICAgcmV0dXJuIHsgc2VxdWVuY2UsIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUgfTtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVDYWxsYmFja0V4ZUNvbmRpdGlvbk1hcChhY3Rpb25OYW1lKTogeyBlbWl0OiBib29sZWFuOyBicm9hZGNhc3Q6IGJvb2xlYW4gfSB7XG4gICAgbGV0IGFjdGl2ZVJlc3BvbnNlTWFwID0geyBlbWl0OiB0cnVlLCBicm9hZGNhc3Q6IHRydWUgfTtcbiAgICBpZiAoU2VxdWVuY2UubWFwW2FjdGlvbk5hbWVdKSB7XG4gICAgICBhY3RpdmVSZXNwb25zZU1hcC5lbWl0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VFbWl0U3RhdGUpLmxlbmd0aCA+IDApO1xuICAgICAgYWN0aXZlUmVzcG9uc2VNYXAuYnJvYWRjYXN0ID0gIShPYmplY3Qua2V5cyhTZXF1ZW5jZS5tYXBbYWN0aW9uTmFtZV0ucmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSkubGVuZ3RoID4gMCk7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVSZXNwb25zZU1hcDtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0U2VydmVyVG9BcGlJb1R5cGUoaUZyYW1lSWQsIGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKGAke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX1NUQVJUfSR7U2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRX0ke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX0VORH1gKSA+PSAwKSB7XG4gICAgICByZXR1cm4gU2VxdWVuY2UuQVBJX1JFUVVFU1RfVFlQRTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgYWN0aW9uVHlwZS5pbmRleE9mKFxuICAgICAgICBgJHtTZXF1ZW5jZS5BUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVH0ke1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVH0ke1NlcXVlbmNlLkFQSV9TRVBBUkFURV9JT19UWVBFX0VORH1gXG4gICAgICApID49IDBcbiAgICApIHtcbiAgICAgIHJldHVybiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1Q7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGFjdGlvblR5cGUuaW5kZXhPZihgJHtTZXF1ZW5jZS5BUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVH0ke1NlcXVlbmNlLkFQSV9SRVNQT05TRV9UWVBFX0VNSVR9JHtTZXF1ZW5jZS5BUElfU0VQQVJBVEVfSU9fVFlQRV9FTkR9YCkgPj1cbiAgICAgIDBcbiAgICApIHtcbiAgICAgIHJldHVybiBTZXF1ZW5jZS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUO1xuICAgIH1cbiAgICByZXR1cm4gU2VxdWVuY2UuQVBJX1NFVFVQO1xuICB9XG5cbiAgc3RhdGljIGNvbnZlcnRFeHRUb0NsaWVudEFjdGlvblR5cGUoaUZyYW1lSWQsIGFjdGlvblR5cGUpIHtcbiAgICBhY3Rpb25UeXBlID0gU2VxdWVuY2UuY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZShhY3Rpb25UeXBlKTtcbiAgICByZXR1cm4gYWN0aW9uVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0QXBpVG9DbGllbnRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuQVBJX1RPX1NFUlZFUl9SRVFVRVNULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX1JFUVVFU1QpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfRU1JVCkgPT09IDApIHtcbiAgICAgIHJldHVybiBhY3Rpb25UeXBlLnJlcGxhY2UoU2VxdWVuY2UuU0VSVkVSX1RPX0FQSV9FTUlULCBTZXF1ZW5jZS5BUElfVE9fQ0xJRU5UX0VNSVQpO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZS5pbmRleE9mKFNlcXVlbmNlLlNFUlZFUl9UT19BUElfQlJPQURDQVNUKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGFjdGlvblR5cGUucmVwbGFjZShTZXF1ZW5jZS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCwgU2VxdWVuY2UuQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QpO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZXF1ZXN0U3RhdGUoYWN0aW9uTmFtZSwgcmVkdXhTdGF0ZSwgcmVxdWVzdFBhcmFtcykge1xuICAgIGNvbnN0IGVuZHBvaW50S2V5ID0gYWN0aW9uTmFtZS5yZXBsYWNlKFNlcXVlbmNlLkFQSV9UT19TRVJWRVJfUkVRVUVTVCwgJycpO1xuICAgIGNvbnN0IHsgcmVxdWVzdFB1YmxpY1N0YXRlLCByZXF1ZXN0UHJpdmF0ZVN0YXRlIH0gPSBTZXF1ZW5jZS5tYXBbZW5kcG9pbnRLZXldO1xuICAgIGxldCByZXF1ZXN0U3RhdGUgPSB7IFtTZXF1ZW5jZS5SRURVWF9BQ1RJT05fS0VZXTogZW5kcG9pbnRLZXkgfTtcblxuICAgIE9iamVjdC5rZXlzKHJlcXVlc3RQcml2YXRlU3RhdGUpLmZvckVhY2goKHN0YXRlS2V5KSA9PiB7XG4gICAgICBpZiAoIXJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0pIHJlcXVlc3RTdGF0ZVtzdGF0ZUtleV0gPSB7fTtcbiAgICAgIHJlcXVlc3RQcml2YXRlU3RhdGVbc3RhdGVLZXldLmZvckVhY2goKGNvbHVtbk5hbWUpID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gcmVkdXhTdGF0ZVtzdGF0ZUtleV1bY29sdW1uTmFtZV07XG4gICAgICAgICAgaWYgKHJlcXVlc3RQYXJhbXMgJiYgcmVxdWVzdFBhcmFtc1tzdGF0ZUtleV0gJiYgU2NoZW1hLmlzU2V0KHJlcXVlc3RQYXJhbXNbc3RhdGVLZXldW2NvbHVtbk5hbWVdKSkge1xuICAgICAgICAgICAgdmFsdWUgPSByZXF1ZXN0UGFyYW1zW3N0YXRlS2V5XVtjb2x1bW5OYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHJlcXVlc3RQdWJsaWNTdGF0ZSkuZm9yRWFjaCgoc3RhdGVLZXkpID0+IHtcbiAgICAgIGlmICghcmVxdWVzdFN0YXRlW3N0YXRlS2V5XSkgcmVxdWVzdFN0YXRlW3N0YXRlS2V5XSA9IHt9O1xuXG4gICAgICByZXF1ZXN0UHVibGljU3RhdGVbc3RhdGVLZXldLmZvckVhY2goKGNvbHVtbk5hbWUpID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0U3RhdGVbc3RhdGVLZXldW2NvbHVtbk5hbWVdKSB7XG4gICAgICAgICAgcmVxdWVzdFN0YXRlW3N0YXRlS2V5XVtjb2x1bW5OYW1lXSA9IHJlcXVlc3RQYXJhbXM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXF1ZXN0U3RhdGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0UmVzcG9uc2VTdGF0ZShyZXNwb25zZVR5cGUsIHJlcXVlc3RTdGF0ZSwgdXBkYXRlU3RhdGUpIHtcbiAgICBjb25zdCBlbmRwb2ludEtleSA9IHJlcXVlc3RTdGF0ZS50eXBlO1xuICAgIGNvbnN0IHJlc3BvbnNlU2NoZW1hID0gU2VxdWVuY2UubWFwW2VuZHBvaW50S2V5XVtgcmVzcG9uc2Uke3Jlc3BvbnNlVHlwZX1TdGF0ZWBdO1xuICAgIGxldCByZXNwb25zZVN0YXRlID0geyBbU2VxdWVuY2UuUkVEVVhfQUNUSU9OX0tFWV06IGVuZHBvaW50S2V5IH07XG4gICAgT2JqZWN0LmtleXMocmVzcG9uc2VTY2hlbWEpLmZvckVhY2goKHVwZGF0ZVN0YXRlS2V5KSA9PiB7XG4gICAgICBpZiAodXBkYXRlU3RhdGVbdXBkYXRlU3RhdGVLZXldKSB7XG4gICAgICAgIGNvbnN0IGNvbHVtbk5hbWVzID0gcmVzcG9uc2VTY2hlbWFbdXBkYXRlU3RhdGVLZXldO1xuICAgICAgICBsZXQgdXBkYXRlU3RhdGVWYWx1ZSA9IHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XTtcblxuICAgICAgICBzd2l0Y2ggKHVwZGF0ZVN0YXRlVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgICAgIGNhc2UgJ21vZGVsJzpcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlVmFsdWUgPSB1cGRhdGVTdGF0ZVZhbHVlLnRvSlNPTigpO1xuICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZVN0YXRlVmFsdWUuX2lkO1xuICAgICAgICAgICAgZGVsZXRlIHVwZGF0ZVN0YXRlVmFsdWUuX192O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sdW1uTmFtZXMgPT09ICcqJykge1xuICAgICAgICAgIHJlc3BvbnNlU3RhdGUgPSB7XG4gICAgICAgICAgICAuLi5yZXNwb25zZVN0YXRlLFxuICAgICAgICAgICAgW3VwZGF0ZVN0YXRlS2V5XTogdXBkYXRlU3RhdGVWYWx1ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbHVtbk5hbWVzLmZvckVhY2goKGNvbHVtbk5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVTdGF0ZVt1cGRhdGVTdGF0ZUtleV1bY29sdW1uTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXNwb25zZVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3BvbnNlU3RhdGUsXG4gICAgICAgICAgICAgICAgW3VwZGF0ZVN0YXRlS2V5XToge1xuICAgICAgICAgICAgICAgICAgLi4ucmVzcG9uc2VTdGF0ZVt1cGRhdGVTdGF0ZUtleV0sXG4gICAgICAgICAgICAgICAgICBbY29sdW1uTmFtZV06IHVwZGF0ZVN0YXRlW3VwZGF0ZVN0YXRlS2V5XVtjb2x1bW5OYW1lXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgYFNFUVVFTkNFIEVSUk9SOiBOT19VUERBVEVfU1RBVEVfQ09MVU1OX05BTUU6ICR7cmVxdWVzdFN0YXRlLnR5cGV9OiAke3VwZGF0ZVN0YXRlS2V5fS4ke2NvbHVtbk5hbWV9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgYFNFUVVFTkNFIEVSUk9SOiBOT19VUERBVEVfU1RBVEVfS0VZOiAke3JlcXVlc3RTdGF0ZS50eXBlfTogJHt1cGRhdGVTdGF0ZUtleX1gO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZVN0YXRlO1xuICB9XG5cbiAgc3RhdGljIGdldFJlcXVlc3RBY3Rpb25TdGF0ZShhY3Rpb25OYW1lLCByZXF1ZXN0UGFyYW1zMSA9IG51bGwsIHJlcXVlc3RQYXJhbXMyID0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdFBhcmFtczEgPT09ICdzdHJpbmcnICYmIHJlcXVlc3RQYXJhbXMyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBhY3Rpb25OYW1lIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWVzdFBhcmFtczEgPT09ICdvYmplY3QnICYmIHR5cGVvZiByZXF1ZXN0UGFyYW1zMiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB7IC4uLnJlcXVlc3RQYXJhbXMxLCAuLi5yZXF1ZXN0UGFyYW1zMiwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVlc3RQYXJhbXMxID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmVxdWVzdFBhcmFtczIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMiwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5yZXF1ZXN0UGFyYW1zMSwgdHlwZTogYWN0aW9uTmFtZSB9O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUYWxrblNldHVwSnMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBUYWxrblNldHVwSnMuc2V0dXBNYXRoKCk7XG4gIH1cbiAgc3RhdGljIHNldHVwTWF0aCgpIHtcbiAgICBNYXRoLmVhc2VJbk91dFF1YWQgPSAodCwgYiwgYywgZCkgPT4ge1xuICAgICAgdCAvPSBkIC8gMjtcbiAgICAgIGlmICh0IDwgMSkgcmV0dXJuIChjIC8gMikgKiB0ICogdCArIGI7XG4gICAgICB0LS07XG4gICAgICByZXR1cm4gKC1jIC8gMikgKiAodCAqICh0IC0gMikgLSAxKSArIGI7XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgc2V0dXBMb2coKSB7XG4gICAgLypcbiAgICBpZiAoY29uZi5lbnYgPT09IGRlZmluZS5QUk9EVUNUSU9OICYmIHdpbmRvdy50YWxrbldpbmRvdykge1xuICAgICAgd2luZG93LmxvZyA9IChwYXJhbXMpID0+IHtcbiAgICAgICAgY29uc3QgeyB1aSB9ID0gd2luZG93LnRhbGtuV2luZG93LnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHVpLmlGcmFtZUlkKTtcbiAgICAgIH07XG4gICAgfVxuICAgICovXG4gIH1cbn1cbiIsImltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcblxuaW1wb3J0IGRlZmluZSBmcm9tICcuL2RlZmluZSc7XG5cbmNvbnN0IHsgUFJPRFVDVElPTiwgREVWRUxPUE1FTlQsIFBST0RVQ1RJT05fRE9NQUlOLCBERVZFTE9QTUVOVF9ET01BSU4sIFNVQl9ET01BSU5TLCBQT1JUUyB9ID0gZGVmaW5lO1xuY29uc3QgYXBpVmVyID0gMTtcbmNvbnN0IGhvc3ROYW1lID0gb3MuaGFzT3duUHJvcGVydHkoJ2hvc3RuYW1lJykgPyBvcy5ob3N0bmFtZSgpIDogREVWRUxPUE1FTlRfRE9NQUlOO1xuY29uc3QgZW52ID0gZ2V0RW52KGhvc3ROYW1lKTtcbmNvbnN0IGZpbGVzID0ge1xuICBjbGllbnQ6ICd0YWxrbi5jbGllbnQuanMnLFxuICBhcGk6ICd0YWxrbi5hcGkuanMnLFxuICB3c1dvcmtlcjogJ3dzLmFwaS53b3JrZXIuanMnLFxuICBleHQ6ICd0YWxrbi5leHQuanMnLFxuICBjb3ZlcjogJ3RhbGtuLmNvdmVyLmpzJyxcbiAgdHVuZTogJ3RhbGtuLnR1bmUuanMnLFxuICBjb21wb25lbnRzOiAndGFsa24uY29tcG9uZW50cy5qcycsXG59O1xuY29uc3QgaXNEZXYgPSBlbnYgPT09IERFVkVMT1BNRU5UO1xuY29uc3QgZG9tYWluID0gZW52ID09PSBQUk9EVUNUSU9OID8gUFJPRFVDVElPTl9ET01BSU4gOiBERVZFTE9QTUVOVF9ET01BSU47XG5jb25zdCB3d3dVUkwgPSBgJHtTVUJfRE9NQUlOUy5XV1d9LiR7ZG9tYWlufWA7XG5jb25zdCBjb3ZlclVSTCA9IGAke1NVQl9ET01BSU5TLkNPVkVSfS4ke2RvbWFpbn1gO1xuY29uc3QgYXBpVVJMID0gYCR7U1VCX0RPTUFJTlMuQVBJfS4ke2RvbWFpbn1gO1xuY29uc3QgYXBpQWNjZXNzVVJMID0gaXNEZXYgPyBgJHtkb21haW59OiR7UE9SVFMuREVWRUxPUE1FTlRfQVBJfS8ke2ZpbGVzLmFwaX1gIDogYCR7YXBpVVJMfS92JHthcGlWZXJ9YDtcbmNvbnN0IGNsaWVudFVSTCA9IGlzRGV2ID8gYCR7ZG9tYWlufToke1BPUlRTLkRFVkVMT1BNRU5UX0NMSUVOVH0vJHtmaWxlcy5jbGllbnR9YCA6IGAke1NVQl9ET01BSU5TLkNMSUVOVH0uJHtkb21haW59YDtcbmNvbnN0IGRlc2NVUkwgPSBgJHtTVUJfRE9NQUlOUy5ERVNDfS4ke2RvbWFpbn1gO1xuY29uc3QgcG9ydGFsVVJMID0gYCR7U1VCX0RPTUFJTlMuUE9SVEFMfS4ke2RvbWFpbn1gO1xuY29uc3QgYXNzZXRzVVJMID0gYCR7U1VCX0RPTUFJTlMuQVNTRVRTfS4ke2RvbWFpbn1gO1xuY29uc3QgYXV0b1VSTCA9IGAke1NVQl9ET01BSU5TLkFVVE99LiR7ZG9tYWlufWA7XG5jb25zdCBleHRVUkwgPSBgJHtTVUJfRE9NQUlOUy5FWFR9LiR7ZG9tYWlufWA7XG5jb25zdCBjb21wVVJMID0gYCR7U1VCX0RPTUFJTlMuQ09NUH0uJHtkb21haW59YDtcbmNvbnN0IG93blVSTCA9IGAke1NVQl9ET01BSU5TLk9XTn0uJHtkb21haW59YDtcbmNvbnN0IG5ld3NVUkwgPSBgJHtTVUJfRE9NQUlOUy5ORVdTfS4ke2RvbWFpbn1gO1xuY29uc3QgdHVuZVVSTCA9IGAke1NVQl9ET01BSU5TLlRVTkV9LiR7ZG9tYWlufWA7XG5jb25zdCBjb21wb25lbnRzVVJMID0gYCR7U1VCX0RPTUFJTlMuQ09NUE9ORU5UU30uJHtkb21haW59YDtcbmNvbnN0IGJhbm5lclVSTCA9IGAke1NVQl9ET01BSU5TLkJBTk5FUn0uJHtkb21haW59YDtcbmNvbnN0IHRyYW5zYWN0aW9uVVJMID0gYCR7U1VCX0RPTUFJTlMuVFJBTlNBQ1RJT059LiR7ZG9tYWlufWA7XG5jb25zdCBhc3NldHNJbWdQYXRoID0gYCR7YXNzZXRzVVJMfS9pbWcvYDtcbmNvbnN0IGFzc2V0c0NvdmVyUGF0aCA9IGAke2Fzc2V0c1VSTH0vY292ZXIvYDtcbmNvbnN0IGFzc2V0c0ljb25QYXRoID0gYCR7YXNzZXRzVVJMfS9pY29uL2A7XG5jb25zdCBhc3NldHNKc1BhdGggPSBgJHthc3NldHNVUkx9L2pzL2A7XG5jb25zdCBzZXNzaW9uVVJMID0gYCR7U1VCX0RPTUFJTlMuU0VTU0lPTn0uJHtkb21haW59YDtcbmNvbnN0IGRlc2NyaXB0aW9uID0gJ3RhbGtuIGNhbiBzaGFyZSBjb21tZW50cyB3aXRoIHVzZXJzIHdhdGNoaW5nIHRoZSBzYW1lIFdFQiBwYWdlLiBQbGVhc2UgZW5qb3kgdGhlIHdvcmxkIG9mIHRhbGtuLic7XG5jb25zdCBscExhbmd1YWdlcyA9IFtcbiAgJ2VuJyxcbiAgJ3poJyxcbiAgJ2phJyxcbiAgJ2RlJyxcbiAgJ2ZyJyxcbiAgJ2hpJyxcbiAgJ3B0JyxcbiAgJ2l0JyxcbiAgJ3J1JyxcbiAgJ2tvJyxcbiAgJ2VzJyxcbiAgJ2lkJyxcbiAgJ3RyJyxcbiAgJ25sJyxcbiAgJ2FyJyxcbiAgJ3poLVRXJyxcbiAgJ3BsJyxcbiAgJ3N2JyxcbiAgJ3RoJyxcbiAgJ2ZhJyxcbiAgJ25uJyxcbiAgJ2dhJyxcbiAgJ2hlJyxcbiAgJ21yJyxcbl07XG5cbmNvbnN0IGRlZmF1bHRCaXJ0aGRheVVuaXh0aW1lID0gMTAwMDAwMDAwMDAwMDtcbmNvbnN0IGZpbmRPbmVUaHJlYWRBY3RpdmVIb3VyID0gMTtcbmNvbnN0IGZpbmRPbmVQb3N0Q250ID0gMzA7XG5jb25zdCBmaW5kT25lTGltaXRDbnQgPSAzMDA7XG5jb25zdCBvZ3BJbWFnZXMgPSB7XG4gIEh0bWw6IGAvLyR7YXNzZXRzSW1nUGF0aH10YWxrbl9sb2dvX2h0bWwucG5nYCxcbiAgTXVzaWM6IGAvLyR7YXNzZXRzSW1nUGF0aH10YWxrbl9sb2dvX211c2ljLnBuZ2AsXG4gIFZpZGVvOiBgLy8ke2Fzc2V0c0ltZ1BhdGh9dGFsa25fbG9nb192aWRlby5wbmdgLFxufTtcbmNvbnN0IGRlZmF1bHRGYXZpY29uID0gYC8vJHtTVUJfRE9NQUlOUy5BU1NFVFN9LiR7ZG9tYWlufS9mYXZpY29uLmljb2A7XG5cbmNvbnN0IGNvbmY6IGFueSA9IHtcbiAgZG9tYWluLFxuICBpc0RldixcbiAgZW52LFxuICBmaWxlcyxcbiAgaG9zdE5hbWUsXG4gIGFwaVVSTCxcbiAgYXBpQWNjZXNzVVJMLFxuICBjb3ZlclVSTCxcbiAgd3d3VVJMLFxuICBkZXNjVVJMLFxuICBwb3J0YWxVUkwsXG4gIGNsaWVudFVSTCxcbiAgYXNzZXRzVVJMLFxuICBhdXRvVVJMLFxuICBleHRVUkwsXG4gIGNvbXBVUkwsXG4gIG93blVSTCxcbiAgbmV3c1VSTCxcbiAgdHVuZVVSTCxcbiAgYmFubmVyVVJMLFxuICBjb21wb25lbnRzVVJMLFxuICB0cmFuc2FjdGlvblVSTCxcbiAgYXNzZXRzSW1nUGF0aCxcbiAgYXNzZXRzQ292ZXJQYXRoLFxuICBhc3NldHNJY29uUGF0aCxcbiAgYXNzZXRzSnNQYXRoLFxuICBzZXNzaW9uVVJMLFxuICBkZXNjcmlwdGlvbixcbiAgYXBpVmVyLFxuICBscExhbmd1YWdlcyxcbiAgZGVmYXVsdEJpcnRoZGF5VW5peHRpbWUsXG4gIGZpbmRPbmVUaHJlYWRBY3RpdmVIb3VyLFxuICBmaW5kT25lUG9zdENudCxcbiAgZmluZE9uZUxpbWl0Q250LFxuICBvZ3BJbWFnZXMsXG4gIGRlZmF1bHRGYXZpY29uLFxufTtcbmV4cG9ydCBkZWZhdWx0IHsgLi4uY29uZiB9O1xuXG4vLyBUT0RPOiBNb3ZlIHRvIHNlcnZlciBjb25mKCBub3QgdXNlIGZyb20gY2xpZW50ICkuXG5mdW5jdGlvbiBnZXRFbnYoaG9zdE5hbWUpIHtcbiAgLy8gZnJvbSBjbGllbnQuXG4gIGlmIChwcm9jZXNzLnRpdGxlID09PSAnYnJvd3NlcicpIHtcbiAgICBpZiAobG9jYXRpb24uaHJlZi5pbmRleE9mKGRlZmluZS5ERVZFTE9QTUVOVF9ET01BSU4pID49IDApIHtcbiAgICAgIGNvbnN0IHBvcnQgPSBOdW1iZXIobG9jYXRpb24ucG9ydCk7XG4gICAgICByZXR1cm4gcG9ydCA9PT0gZGVmaW5lLlBPUlRTLkRFVkVMT1BNRU5UX0NMSUVOVCB8fFxuICAgICAgICBwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlRfQVBJIHx8XG4gICAgICAgIHBvcnQgPT09IGRlZmluZS5QT1JUUy5ERVZFTE9QTUVOVF9DT1ZFUiB8fFxuICAgICAgICBwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlRfQ09NUE9ORU5UUyB8fFxuICAgICAgICBwb3J0ID09PSBkZWZpbmUuUE9SVFMuREVWRUxPUE1FTlRfVFVORVxuICAgICAgICA/IGRlZmluZS5ERVZFTE9QTUVOVFxuICAgICAgICA6IGRlZmluZS5MT0NBTEhPU1Q7XG4gICAgfVxuICAgIHJldHVybiBkZWZpbmUuUFJPRFVDVElPTjtcbiAgICAvLyBmcm9tIHNlcnZlci5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaG9zdE5hbWUuaW5kZXhPZihkZWZpbmUuQVdTX0hPU1RfS0VZKSA+PSAwID8gZGVmaW5lLlBST0RVQ1RJT04gOiBkZWZpbmUuREVWRUxPUE1FTlQ7XG4gIH1cbn1cbiIsImltcG9ydCBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG5jb25zdCBob3N0TmFtZSA9IHByb2Nlc3MuZW52LkhPU1ROQU1FID8gcHJvY2Vzcy5lbnYuSE9TVE5BTUUgOiAnbG9jYWxob3N0JztcbmNvbnN0IGRlZmluZTogYW55ID0ge1xuICBBUFBfTkFNRTogJ3RhbGtuJyxcbiAgUFJPRFVDVElPTjogJ1BST0RVQ1RJT04nLFxuICBMT0NBTEhPU1Q6ICdMT0NBTEhPU1QnLFxuICBERVZFTE9QTUVOVDogJ0RFVkVMT1BNRU5UJyxcbiAgUFJPRFVDVElPTl9JUDogaG9zdE5hbWUsXG4gIFBST0RVQ1RJT05fRE9NQUlOOiAndGFsa24uaW8nLFxuICBERVZFTE9QTUVOVF9ET01BSU46ICdsb2NhbGhvc3QnLFxuICBBV1NfSE9TVF9LRVk6ICdlYzIuaW50ZXJuYWwnLFxuICBQT1JUUzoge1xuICAgIEhUVFA6IDgwLFxuICAgIEhUVFBTOiA0NDMsXG4gICAgREVWRUxPUE1FTlRfQ09WRVI6IDgwMDAsXG4gICAgREVWRUxPUE1FTlRfQVBJOiA4MDAxLFxuICAgIERFVkVMT1BNRU5UX0NPTVBPTkVOVFM6IDgwMDIsXG4gICAgREVWRUxPUE1FTlRfVFVORTogODAwMyxcbiAgICBERVZFTE9QTUVOVF9DTElFTlQ6IDgwODAsXG4gICAgUkVESVM6IDYzNzksXG4gICAgTU9OR086IDI3MDE3LFxuICAgIFNPQ0tFVF9JTzogMTA0NDMsXG4gIH0sXG4gIFNVQl9ET01BSU5TOiB7XG4gICAgV1dXOiAnd3d3JyxcbiAgICBBUEk6ICdhcGknLFxuICAgIERFU0M6ICdkZXNjJyxcbiAgICBQT1JUQUw6ICdwb3J0YWwnLFxuICAgIENMSUVOVDogJ2NsaWVudCcsXG4gICAgQVNTRVRTOiAnYXNzZXRzJyxcbiAgICBTRVNTSU9OOiAnc2Vzc2lvbicsXG4gICAgQVVUTzogJ2F1dG8nLFxuICAgIE9XTjogJ293bicsXG4gICAgTkVXUzogJ25ld3MnLFxuICAgIEJBTk5FUjogJ2Jhbm5lcicsXG4gICAgQ09WRVI6ICdjb3ZlcicsXG4gICAgUkFOSzogJ3JhbmsnLFxuICAgIEVYVDogJ2V4dCcsXG4gICAgQ09NUE9ORU5UUzogJ2NvbXBvbmVudHMnLFxuICAgIFRVTkU6ICd0dW5lJyxcbiAgICBUUkFOU0FDVElPTjogJ3RyYW5zYWN0aW9uJyxcbiAgfSxcbiAgQVBQX1RZUEVTOiB7XG4gICAgQ0xJRU5UOiAnQ0xJRU5UJyxcbiAgICBQT1JUQUw6ICdQT1JUQUwnLFxuICAgIEVYVEVOU0lPTjogJ0VYVEVOU0lPTicsXG4gICAgQVBJOiAnQVBJJyxcbiAgICBDT1ZFUjogJ0NPVkVSJyxcbiAgICBDT01QT05FTlRTOiAnQ09NUE9ORU5UUycsXG4gICAgVFVORTogJ1RVTkUnLFxuICB9LFxuICBVUkw6IHtcbiAgICB0d2l0dGVyOiAnaHR0cHM6Ly90d2l0dGVyLmNvbS8nLFxuICAgIGZhY2Vib29rOiAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLycsXG4gICAgYXBwc3RvcmU6ICdodHRwczovL2l0dW5lcy5hcHBsZS5jb20vYXBwL2lkJyxcbiAgICBwbGF5c3RvcmU6ICdodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9JyxcbiAgICBjaHJvbWVFeHRlbnNpb246ICdodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC90YWxrbi1mb3ItY2hyb21lL2RrbmdubWRsY29mYW1icGZhY2NlcGJuamdmaG9sZ2JvP2hsPWVuJyxcbiAgfSxcbiAgdGFsa25DbGllbnRKczogJ3RhbGtuLmNsaWVudC5qcycsXG4gIHRhbGtuQXBpSnM6ICd0YWxrbi5hcGkuanMnLFxuICB0YWxrblJhbmtKczogJ3RhbGtuLnJhbmsuanMnLFxuICBub0lubmVyTm90aWY6ICdTb3JyeSwgTm8gRnVuY3Rpb24uJyxcbiAgYmFubmVyQ2xhc3M6ICd0YWxrbl9iYW5uZXInLFxuICBzdG9yYWdlS2V5OiB7XG4gICAgYmFzZUtleTogJ0B0YWxrbkAnLFxuICAgIHBvc3RzVGltZWxpbmVaZXJvOiAncG9zdHNUaW1lbGluZVplcm8nLFxuICAgIHBvc3RzVGltZWxpbmU6ICdwb3N0c1RpbWVsaW5lJyxcbiAgICBwb3N0c1NpbmdsZTogJ3Bvc3RzU2luZ2xlJyxcbiAgICBwb3N0c011bHRpOiAncG9zdHNNdWx0aScsXG4gICAgcG9zdHNDaGlsZDogJ3Bvc3RzQ2hpbGQnLFxuICAgIHBvc3RzTG9nczogJ3Bvc3RzTG9ncycsXG4gICAgdGhyZWFkczogJ3RocmVhZHMnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lO1xuIiwiXG5pbXBvcnQgd29ya2VyIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV29ya2VyX2ZuKCkge1xuICByZXR1cm4gd29ya2VyKFwiKCgpPT57dmFyIGU9ezc4MjQ6ZT0+e3ZhciB0PTFlMyxzPTYwKnQscj02MCpzLG49MjQqcjtmdW5jdGlvbiBpKGUsdCxzLHIpe3ZhciBuPXQ+PTEuNSpzO3JldHVybiBNYXRoLnJvdW5kKGUvcykrXFxcIiBcXFwiK3IrKG4/XFxcInNcXFwiOlxcXCJcXFwiKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxvKXtvPW98fHt9O3ZhciBhLHUsYz10eXBlb2YgZTtpZihcXFwic3RyaW5nXFxcIj09PWMmJmUubGVuZ3RoPjApcmV0dXJuIGZ1bmN0aW9uKGUpe2lmKCEoKGU9U3RyaW5nKGUpKS5sZW5ndGg+MTAwKSl7dmFyIGk9L14oLT8oPzpcXFxcZCspP1xcXFwuP1xcXFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKGUpO2lmKGkpe3ZhciBvPXBhcnNlRmxvYXQoaVsxXSk7c3dpdGNoKChpWzJdfHxcXFwibXNcXFwiKS50b0xvd2VyQ2FzZSgpKXtjYXNlXFxcInllYXJzXFxcIjpjYXNlXFxcInllYXJcXFwiOmNhc2VcXFwieXJzXFxcIjpjYXNlXFxcInlyXFxcIjpjYXNlXFxcInlcXFwiOnJldHVybiAzMTU1NzZlNSpvO2Nhc2VcXFwid2Vla3NcXFwiOmNhc2VcXFwid2Vla1xcXCI6Y2FzZVxcXCJ3XFxcIjpyZXR1cm4gNjA0OGU1Km87Y2FzZVxcXCJkYXlzXFxcIjpjYXNlXFxcImRheVxcXCI6Y2FzZVxcXCJkXFxcIjpyZXR1cm4gbypuO2Nhc2VcXFwiaG91cnNcXFwiOmNhc2VcXFwiaG91clxcXCI6Y2FzZVxcXCJocnNcXFwiOmNhc2VcXFwiaHJcXFwiOmNhc2VcXFwiaFxcXCI6cmV0dXJuIG8qcjtjYXNlXFxcIm1pbnV0ZXNcXFwiOmNhc2VcXFwibWludXRlXFxcIjpjYXNlXFxcIm1pbnNcXFwiOmNhc2VcXFwibWluXFxcIjpjYXNlXFxcIm1cXFwiOnJldHVybiBvKnM7Y2FzZVxcXCJzZWNvbmRzXFxcIjpjYXNlXFxcInNlY29uZFxcXCI6Y2FzZVxcXCJzZWNzXFxcIjpjYXNlXFxcInNlY1xcXCI6Y2FzZVxcXCJzXFxcIjpyZXR1cm4gbyp0O2Nhc2VcXFwibWlsbGlzZWNvbmRzXFxcIjpjYXNlXFxcIm1pbGxpc2Vjb25kXFxcIjpjYXNlXFxcIm1zZWNzXFxcIjpjYXNlXFxcIm1zZWNcXFwiOmNhc2VcXFwibXNcXFwiOnJldHVybiBvO2RlZmF1bHQ6cmV0dXJufX19fShlKTtpZihcXFwibnVtYmVyXFxcIj09PWMmJmlzRmluaXRlKGUpKXJldHVybiBvLmxvbmc/KGE9ZSwodT1NYXRoLmFicyhhKSk+PW4/aShhLHUsbixcXFwiZGF5XFxcIik6dT49cj9pKGEsdSxyLFxcXCJob3VyXFxcIik6dT49cz9pKGEsdSxzLFxcXCJtaW51dGVcXFwiKTp1Pj10P2koYSx1LHQsXFxcInNlY29uZFxcXCIpOmErXFxcIiBtc1xcXCIpOmZ1bmN0aW9uKGUpe3ZhciBpPU1hdGguYWJzKGUpO3JldHVybiBpPj1uP01hdGgucm91bmQoZS9uKStcXFwiZFxcXCI6aT49cj9NYXRoLnJvdW5kKGUvcikrXFxcImhcXFwiOmk+PXM/TWF0aC5yb3VuZChlL3MpK1xcXCJtXFxcIjppPj10P01hdGgucm91bmQoZS90KStcXFwic1xcXCI6ZStcXFwibXNcXFwifShlKTt0aHJvdyBuZXcgRXJyb3IoXFxcInZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9XFxcIitKU09OLnN0cmluZ2lmeShlKSl9fSw1ODU3OihlLHQscyk9PntcXFwidXNlIHN0cmljdFxcXCI7ZnVuY3Rpb24gcihlLHQscyl7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpzLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1zLGV9ZnVuY3Rpb24gbihlLHQpe3ZhciBzPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKHI9ci5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSkscy5wdXNoLmFwcGx5KHMscil9cmV0dXJuIHN9ZnVuY3Rpb24gaShlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcz1udWxsIT1hcmd1bWVudHNbdF0/YXJndW1lbnRzW3RdOnt9O3QlMj9uKE9iamVjdChzKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cihlLHQsc1t0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzKSk6bihPYmplY3QocykpLmZvckVhY2goKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzLHQpKX0pKX1yZXR1cm4gZX1mdW5jdGlvbiBvKGUpe3JldHVyblxcXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXFxcIitlK1xcXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVxcXCIrZStcXFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuIFxcXCJ9cy5yKHQpLHMuZCh0LHtfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzOigpPT5jLGFwcGx5TWlkZGxld2FyZTooKT0+XyxiaW5kQWN0aW9uQ3JlYXRvcnM6KCk9PlQsY29tYmluZVJlZHVjZXJzOigpPT5wLGNvbXBvc2U6KCk9PkUsY3JlYXRlU3RvcmU6KCk9PmwsbGVnYWN5X2NyZWF0ZVN0b3JlOigpPT5ofSk7dmFyIGE9XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLm9ic2VydmFibGV8fFxcXCJAQG9ic2VydmFibGVcXFwiLHU9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KFxcXCJcXFwiKS5qb2luKFxcXCIuXFxcIil9LGM9e0lOSVQ6XFxcIkBAcmVkdXgvSU5JVFxcXCIrdSgpLFJFUExBQ0U6XFxcIkBAcmVkdXgvUkVQTEFDRVxcXCIrdSgpLFBST0JFX1VOS05PV05fQUNUSU9OOmZ1bmN0aW9uKCl7cmV0dXJuXFxcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cXFwiK3UoKX19O2Z1bmN0aW9uIGQoZSl7aWYoXFxcIm9iamVjdFxcXCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4hMTtmb3IodmFyIHQ9ZTtudWxsIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyl0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09dH1mdW5jdGlvbiBsKGUsdCxzKXt2YXIgcjtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgdCYmXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHN8fFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBzJiZcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYXJndW1lbnRzWzNdKXRocm93IG5ldyBFcnJvcihvKDApKTtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgdCYmdm9pZCAwPT09cyYmKHM9dCx0PXZvaWQgMCksdm9pZCAwIT09cyl7aWYoXFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIHMpdGhyb3cgbmV3IEVycm9yKG8oMSkpO3JldHVybiBzKGwpKGUsdCl9aWYoXFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKG8oMikpO3ZhciBuPWUsaT10LHU9W10saD11LHA9ITE7ZnVuY3Rpb24gZigpe2g9PT11JiYoaD11LnNsaWNlKCkpfWZ1bmN0aW9uIFQoKXtpZihwKXRocm93IG5ldyBFcnJvcihvKDMpKTtyZXR1cm4gaX1mdW5jdGlvbiBFKGUpe2lmKFxcXCJmdW5jdGlvblxcXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihvKDQpKTtpZihwKXRocm93IG5ldyBFcnJvcihvKDUpKTt2YXIgdD0hMDtyZXR1cm4gZigpLGgucHVzaChlKSxmdW5jdGlvbigpe2lmKHQpe2lmKHApdGhyb3cgbmV3IEVycm9yKG8oNikpO3Q9ITEsZigpO3ZhciBzPWguaW5kZXhPZihlKTtoLnNwbGljZShzLDEpLHU9bnVsbH19fWZ1bmN0aW9uIF8oZSl7aWYoIWQoZSkpdGhyb3cgbmV3IEVycm9yKG8oNykpO2lmKHZvaWQgMD09PWUudHlwZSl0aHJvdyBuZXcgRXJyb3Iobyg4KSk7aWYocCl0aHJvdyBuZXcgRXJyb3Iobyg5KSk7dHJ5e3A9ITAsaT1uKGksZSl9ZmluYWxseXtwPSExfWZvcih2YXIgdD11PWgscz0wO3M8dC5sZW5ndGg7cysrKSgwLHRbc10pKCk7cmV0dXJuIGV9ZnVuY3Rpb24gZyhlKXtpZihcXFwiZnVuY3Rpb25cXFwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IobygxMCkpO249ZSxfKHt0eXBlOmMuUkVQTEFDRX0pfWZ1bmN0aW9uIHkoKXt2YXIgZSx0PUU7cmV0dXJuKGU9e3N1YnNjcmliZTpmdW5jdGlvbihlKXtpZihcXFwib2JqZWN0XFxcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXRocm93IG5ldyBFcnJvcihvKDExKSk7ZnVuY3Rpb24gcygpe2UubmV4dCYmZS5uZXh0KFQoKSl9cmV0dXJuIHMoKSx7dW5zdWJzY3JpYmU6dChzKX19fSlbYV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZX1yZXR1cm4gXyh7dHlwZTpjLklOSVR9KSwocj17ZGlzcGF0Y2g6XyxzdWJzY3JpYmU6RSxnZXRTdGF0ZTpULHJlcGxhY2VSZWR1Y2VyOmd9KVthXT15LHJ9dmFyIGg9bDtmdW5jdGlvbiBwKGUpe2Zvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxzPXt9LHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgZVtuXSYmKHNbbl09ZVtuXSl9dmFyIGksYT1PYmplY3Qua2V5cyhzKTt0cnl7IWZ1bmN0aW9uKGUpe09iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBzPWVbdF07aWYodm9pZCAwPT09cyh2b2lkIDAse3R5cGU6Yy5JTklUfSkpdGhyb3cgbmV3IEVycm9yKG8oMTIpKTtpZih2b2lkIDA9PT1zKHZvaWQgMCx7dHlwZTpjLlBST0JFX1VOS05PV05fQUNUSU9OKCl9KSl0aHJvdyBuZXcgRXJyb3IobygxMykpfSkpfShzKX1jYXRjaChlKXtpPWV9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09ZSYmKGU9e30pLGkpdGhyb3cgaTtmb3IodmFyIHI9ITEsbj17fSx1PTA7dTxhLmxlbmd0aDt1Kyspe3ZhciBjPWFbdV0sZD1zW2NdLGw9ZVtjXSxoPWQobCx0KTtpZih2b2lkIDA9PT1oKXRocm93IHQmJnQudHlwZSxuZXcgRXJyb3IobygxNCkpO25bY109aCxyPXJ8fGghPT1sfXJldHVybihyPXJ8fGEubGVuZ3RoIT09T2JqZWN0LmtleXMoZSkubGVuZ3RoKT9uOmV9fWZ1bmN0aW9uIGYoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdChlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9fWZ1bmN0aW9uIFQoZSx0KXtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgZSlyZXR1cm4gZihlLHQpO2lmKFxcXCJvYmplY3RcXFwiIT10eXBlb2YgZXx8bnVsbD09PWUpdGhyb3cgbmV3IEVycm9yKG8oMTYpKTt2YXIgcz17fTtmb3IodmFyIHIgaW4gZSl7dmFyIG49ZVtyXTtcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgbiYmKHNbcl09ZihuLHQpKX1yZXR1cm4gc31mdW5jdGlvbiBFKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscz0wO3M8ZTtzKyspdFtzXT1hcmd1bWVudHNbc107cmV0dXJuIDA9PT10Lmxlbmd0aD9mdW5jdGlvbihlKXtyZXR1cm4gZX06MT09PXQubGVuZ3RoP3RbMF06dC5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodC5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9fSkpfWZ1bmN0aW9uIF8oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxzPTA7czxlO3MrKyl0W3NdPWFyZ3VtZW50c1tzXTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHM9ZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSxyPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKG8oMTUpKX0sbj17Z2V0U3RhdGU6cy5nZXRTdGF0ZSxkaXNwYXRjaDpmdW5jdGlvbigpe3JldHVybiByLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfX0sYT10Lm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUobil9KSk7cmV0dXJuIHI9RS5hcHBseSh2b2lkIDAsYSkocy5kaXNwYXRjaCksaShpKHt9LHMpLHt9LHtkaXNwYXRjaDpyfSl9fX19LDM2Njk6KGUsdCxzKT0+e3QuZm9ybWF0QXJncz1mdW5jdGlvbih0KXtpZih0WzBdPSh0aGlzLnVzZUNvbG9ycz9cXFwiJWNcXFwiOlxcXCJcXFwiKSt0aGlzLm5hbWVzcGFjZSsodGhpcy51c2VDb2xvcnM/XFxcIiAlY1xcXCI6XFxcIiBcXFwiKSt0WzBdKyh0aGlzLnVzZUNvbG9ycz9cXFwiJWMgXFxcIjpcXFwiIFxcXCIpK1xcXCIrXFxcIitlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSwhdGhpcy51c2VDb2xvcnMpcmV0dXJuO2NvbnN0IHM9XFxcImNvbG9yOiBcXFwiK3RoaXMuY29sb3I7dC5zcGxpY2UoMSwwLHMsXFxcImNvbG9yOiBpbmhlcml0XFxcIik7bGV0IHI9MCxuPTA7dFswXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csKGU9PntcXFwiJSVcXFwiIT09ZSYmKHIrKyxcXFwiJWNcXFwiPT09ZSYmKG49cikpfSkpLHQuc3BsaWNlKG4sMCxzKX0sdC5zYXZlPWZ1bmN0aW9uKGUpe3RyeXtlP3Quc3RvcmFnZS5zZXRJdGVtKFxcXCJkZWJ1Z1xcXCIsZSk6dC5zdG9yYWdlLnJlbW92ZUl0ZW0oXFxcImRlYnVnXFxcIil9Y2F0Y2goZSl7fX0sdC5sb2FkPWZ1bmN0aW9uKCl7bGV0IGU7dHJ5e2U9dC5zdG9yYWdlLmdldEl0ZW0oXFxcImRlYnVnXFxcIil9Y2F0Y2goZSl7fXJldHVybiFlJiZcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIHByb2Nlc3MmJlxcXCJlbnZcXFwiaW4gcHJvY2VzcyYmKGU9cHJvY2Vzcy5lbnYuREVCVUcpLGV9LHQudXNlQ29sb3JzPWZ1bmN0aW9uKCl7cmV0dXJuIShcXFwidW5kZWZpbmVkXFxcIj09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5wcm9jZXNzfHxcXFwicmVuZGVyZXJcXFwiIT09d2luZG93LnByb2Nlc3MudHlwZSYmIXdpbmRvdy5wcm9jZXNzLl9fbndqcyl8fChcXFwidW5kZWZpbmVkXFxcIj09dHlwZW9mIG5hdmlnYXRvcnx8IW5hdmlnYXRvci51c2VyQWdlbnR8fCFuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFxcXC8oXFxcXGQrKS8pKSYmKFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlJiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZXx8XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5jb25zb2xlJiYod2luZG93LmNvbnNvbGUuZmlyZWJ1Z3x8d2luZG93LmNvbnNvbGUuZXhjZXB0aW9uJiZ3aW5kb3cuY29uc29sZS50YWJsZSl8fFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IudXNlckFnZW50JiZuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXFxcLyhcXFxcZCspLykmJnBhcnNlSW50KFJlZ0V4cC4kMSwxMCk+PTMxfHxcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcXFwvKFxcXFxkKykvKSl9LHQuc3RvcmFnZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbG9jYWxTdG9yYWdlfWNhdGNoKGUpe319KCksdC5kZXN0cm95PSgoKT0+e2xldCBlPSExO3JldHVybigpPT57ZXx8KGU9ITAsY29uc29sZS53YXJuKFxcXCJJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuXFxcIikpfX0pKCksdC5jb2xvcnM9W1xcXCIjMDAwMENDXFxcIixcXFwiIzAwMDBGRlxcXCIsXFxcIiMwMDMzQ0NcXFwiLFxcXCIjMDAzM0ZGXFxcIixcXFwiIzAwNjZDQ1xcXCIsXFxcIiMwMDY2RkZcXFwiLFxcXCIjMDA5OUNDXFxcIixcXFwiIzAwOTlGRlxcXCIsXFxcIiMwMENDMDBcXFwiLFxcXCIjMDBDQzMzXFxcIixcXFwiIzAwQ0M2NlxcXCIsXFxcIiMwMENDOTlcXFwiLFxcXCIjMDBDQ0NDXFxcIixcXFwiIzAwQ0NGRlxcXCIsXFxcIiMzMzAwQ0NcXFwiLFxcXCIjMzMwMEZGXFxcIixcXFwiIzMzMzNDQ1xcXCIsXFxcIiMzMzMzRkZcXFwiLFxcXCIjMzM2NkNDXFxcIixcXFwiIzMzNjZGRlxcXCIsXFxcIiMzMzk5Q0NcXFwiLFxcXCIjMzM5OUZGXFxcIixcXFwiIzMzQ0MwMFxcXCIsXFxcIiMzM0NDMzNcXFwiLFxcXCIjMzNDQzY2XFxcIixcXFwiIzMzQ0M5OVxcXCIsXFxcIiMzM0NDQ0NcXFwiLFxcXCIjMzNDQ0ZGXFxcIixcXFwiIzY2MDBDQ1xcXCIsXFxcIiM2NjAwRkZcXFwiLFxcXCIjNjYzM0NDXFxcIixcXFwiIzY2MzNGRlxcXCIsXFxcIiM2NkNDMDBcXFwiLFxcXCIjNjZDQzMzXFxcIixcXFwiIzk5MDBDQ1xcXCIsXFxcIiM5OTAwRkZcXFwiLFxcXCIjOTkzM0NDXFxcIixcXFwiIzk5MzNGRlxcXCIsXFxcIiM5OUNDMDBcXFwiLFxcXCIjOTlDQzMzXFxcIixcXFwiI0NDMDAwMFxcXCIsXFxcIiNDQzAwMzNcXFwiLFxcXCIjQ0MwMDY2XFxcIixcXFwiI0NDMDA5OVxcXCIsXFxcIiNDQzAwQ0NcXFwiLFxcXCIjQ0MwMEZGXFxcIixcXFwiI0NDMzMwMFxcXCIsXFxcIiNDQzMzMzNcXFwiLFxcXCIjQ0MzMzY2XFxcIixcXFwiI0NDMzM5OVxcXCIsXFxcIiNDQzMzQ0NcXFwiLFxcXCIjQ0MzM0ZGXFxcIixcXFwiI0NDNjYwMFxcXCIsXFxcIiNDQzY2MzNcXFwiLFxcXCIjQ0M5OTAwXFxcIixcXFwiI0NDOTkzM1xcXCIsXFxcIiNDQ0NDMDBcXFwiLFxcXCIjQ0NDQzMzXFxcIixcXFwiI0ZGMDAwMFxcXCIsXFxcIiNGRjAwMzNcXFwiLFxcXCIjRkYwMDY2XFxcIixcXFwiI0ZGMDA5OVxcXCIsXFxcIiNGRjAwQ0NcXFwiLFxcXCIjRkYwMEZGXFxcIixcXFwiI0ZGMzMwMFxcXCIsXFxcIiNGRjMzMzNcXFwiLFxcXCIjRkYzMzY2XFxcIixcXFwiI0ZGMzM5OVxcXCIsXFxcIiNGRjMzQ0NcXFwiLFxcXCIjRkYzM0ZGXFxcIixcXFwiI0ZGNjYwMFxcXCIsXFxcIiNGRjY2MzNcXFwiLFxcXCIjRkY5OTAwXFxcIixcXFwiI0ZGOTkzM1xcXCIsXFxcIiNGRkNDMDBcXFwiLFxcXCIjRkZDQzMzXFxcIl0sdC5sb2c9Y29uc29sZS5kZWJ1Z3x8Y29uc29sZS5sb2d8fCgoKT0+e30pLGUuZXhwb3J0cz1zKDkyMzEpKHQpO2NvbnN0e2Zvcm1hdHRlcnM6cn09ZS5leHBvcnRzO3Iuaj1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfWNhdGNoKGUpe3JldHVyblxcXCJbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogXFxcIitlLm1lc3NhZ2V9fX0sOTIzMTooZSx0LHMpPT57ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7bGV0IHMsbixpLG89bnVsbDtmdW5jdGlvbiBhKC4uLmUpe2lmKCFhLmVuYWJsZWQpcmV0dXJuO2NvbnN0IHI9YSxuPU51bWJlcihuZXcgRGF0ZSksaT1uLShzfHxuKTtyLmRpZmY9aSxyLnByZXY9cyxyLmN1cnI9bixzPW4sZVswXT10LmNvZXJjZShlWzBdKSxcXFwic3RyaW5nXFxcIiE9dHlwZW9mIGVbMF0mJmUudW5zaGlmdChcXFwiJU9cXFwiKTtsZXQgbz0wO2VbMF09ZVswXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywoKHMsbik9PntpZihcXFwiJSVcXFwiPT09cylyZXR1cm5cXFwiJVxcXCI7bysrO2NvbnN0IGk9dC5mb3JtYXR0ZXJzW25dO2lmKFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBpKXtjb25zdCB0PWVbb107cz1pLmNhbGwocix0KSxlLnNwbGljZShvLDEpLG8tLX1yZXR1cm4gc30pKSx0LmZvcm1hdEFyZ3MuY2FsbChyLGUpLChyLmxvZ3x8dC5sb2cpLmFwcGx5KHIsZSl9cmV0dXJuIGEubmFtZXNwYWNlPWUsYS51c2VDb2xvcnM9dC51c2VDb2xvcnMoKSxhLmNvbG9yPXQuc2VsZWN0Q29sb3IoZSksYS5leHRlbmQ9cixhLmRlc3Ryb3k9dC5kZXN0cm95LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFxcXCJlbmFibGVkXFxcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OigpPT5udWxsIT09bz9vOihuIT09dC5uYW1lc3BhY2VzJiYobj10Lm5hbWVzcGFjZXMsaT10LmVuYWJsZWQoZSkpLGkpLHNldDplPT57bz1lfX0pLFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiB0LmluaXQmJnQuaW5pdChhKSxhfWZ1bmN0aW9uIHIoZSxzKXtjb25zdCByPXQodGhpcy5uYW1lc3BhY2UrKHZvaWQgMD09PXM/XFxcIjpcXFwiOnMpK2UpO3JldHVybiByLmxvZz10aGlzLmxvZyxyfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIGUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMixlLnRvU3RyaW5nKCkubGVuZ3RoLTIpLnJlcGxhY2UoL1xcXFwuXFxcXCpcXFxcPyQvLFxcXCIqXFxcIil9cmV0dXJuIHQuZGVidWc9dCx0LmRlZmF1bHQ9dCx0LmNvZXJjZT1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEVycm9yP2Uuc3RhY2t8fGUubWVzc2FnZTplfSx0LmRpc2FibGU9ZnVuY3Rpb24oKXtjb25zdCBlPVsuLi50Lm5hbWVzLm1hcChuKSwuLi50LnNraXBzLm1hcChuKS5tYXAoKGU9PlxcXCItXFxcIitlKSldLmpvaW4oXFxcIixcXFwiKTtyZXR1cm4gdC5lbmFibGUoXFxcIlxcXCIpLGV9LHQuZW5hYmxlPWZ1bmN0aW9uKGUpe2xldCBzO3Quc2F2ZShlKSx0Lm5hbWVzcGFjZXM9ZSx0Lm5hbWVzPVtdLHQuc2tpcHM9W107Y29uc3Qgcj0oXFxcInN0cmluZ1xcXCI9PXR5cGVvZiBlP2U6XFxcIlxcXCIpLnNwbGl0KC9bXFxcXHMsXSsvKSxuPXIubGVuZ3RoO2ZvcihzPTA7czxuO3MrKylyW3NdJiYoXFxcIi1cXFwiPT09KGU9cltzXS5yZXBsYWNlKC9cXFxcKi9nLFxcXCIuKj9cXFwiKSlbMF0/dC5za2lwcy5wdXNoKG5ldyBSZWdFeHAoXFxcIl5cXFwiK2Uuc2xpY2UoMSkrXFxcIiRcXFwiKSk6dC5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoXFxcIl5cXFwiK2UrXFxcIiRcXFwiKSkpfSx0LmVuYWJsZWQ9ZnVuY3Rpb24oZSl7aWYoXFxcIipcXFwiPT09ZVtlLmxlbmd0aC0xXSlyZXR1cm4hMDtsZXQgcyxyO2ZvcihzPTAscj10LnNraXBzLmxlbmd0aDtzPHI7cysrKWlmKHQuc2tpcHNbc10udGVzdChlKSlyZXR1cm4hMTtmb3Iocz0wLHI9dC5uYW1lcy5sZW5ndGg7czxyO3MrKylpZih0Lm5hbWVzW3NdLnRlc3QoZSkpcmV0dXJuITA7cmV0dXJuITF9LHQuaHVtYW5pemU9cyg3ODI0KSx0LmRlc3Ryb3k9ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXFxcIkluc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC5cXFwiKX0sT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgocz0+e3Rbc109ZVtzXX0pKSx0Lm5hbWVzPVtdLHQuc2tpcHM9W10sdC5mb3JtYXR0ZXJzPXt9LHQuc2VsZWN0Q29sb3I9ZnVuY3Rpb24oZSl7bGV0IHM9MDtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKylzPShzPDw1KS1zK2UuY2hhckNvZGVBdCh0KSxzfD0wO3JldHVybiB0LmNvbG9yc1tNYXRoLmFicyhzKSV0LmNvbG9ycy5sZW5ndGhdfSx0LmVuYWJsZSh0LmxvYWQoKSksdH19LDY5MzA6KGUsdCxzKT0+e3QuZm9ybWF0QXJncz1mdW5jdGlvbih0KXtpZih0WzBdPSh0aGlzLnVzZUNvbG9ycz9cXFwiJWNcXFwiOlxcXCJcXFwiKSt0aGlzLm5hbWVzcGFjZSsodGhpcy51c2VDb2xvcnM/XFxcIiAlY1xcXCI6XFxcIiBcXFwiKSt0WzBdKyh0aGlzLnVzZUNvbG9ycz9cXFwiJWMgXFxcIjpcXFwiIFxcXCIpK1xcXCIrXFxcIitlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSwhdGhpcy51c2VDb2xvcnMpcmV0dXJuO2NvbnN0IHM9XFxcImNvbG9yOiBcXFwiK3RoaXMuY29sb3I7dC5zcGxpY2UoMSwwLHMsXFxcImNvbG9yOiBpbmhlcml0XFxcIik7bGV0IHI9MCxuPTA7dFswXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csKGU9PntcXFwiJSVcXFwiIT09ZSYmKHIrKyxcXFwiJWNcXFwiPT09ZSYmKG49cikpfSkpLHQuc3BsaWNlKG4sMCxzKX0sdC5zYXZlPWZ1bmN0aW9uKGUpe3RyeXtlP3Quc3RvcmFnZS5zZXRJdGVtKFxcXCJkZWJ1Z1xcXCIsZSk6dC5zdG9yYWdlLnJlbW92ZUl0ZW0oXFxcImRlYnVnXFxcIil9Y2F0Y2goZSl7fX0sdC5sb2FkPWZ1bmN0aW9uKCl7bGV0IGU7dHJ5e2U9dC5zdG9yYWdlLmdldEl0ZW0oXFxcImRlYnVnXFxcIil9Y2F0Y2goZSl7fXJldHVybiFlJiZcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIHByb2Nlc3MmJlxcXCJlbnZcXFwiaW4gcHJvY2VzcyYmKGU9cHJvY2Vzcy5lbnYuREVCVUcpLGV9LHQudXNlQ29sb3JzPWZ1bmN0aW9uKCl7cmV0dXJuIShcXFwidW5kZWZpbmVkXFxcIj09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5wcm9jZXNzfHxcXFwicmVuZGVyZXJcXFwiIT09d2luZG93LnByb2Nlc3MudHlwZSYmIXdpbmRvdy5wcm9jZXNzLl9fbndqcyl8fChcXFwidW5kZWZpbmVkXFxcIj09dHlwZW9mIG5hdmlnYXRvcnx8IW5hdmlnYXRvci51c2VyQWdlbnR8fCFuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFxcXC8oXFxcXGQrKS8pKSYmKFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlJiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZXx8XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5jb25zb2xlJiYod2luZG93LmNvbnNvbGUuZmlyZWJ1Z3x8d2luZG93LmNvbnNvbGUuZXhjZXB0aW9uJiZ3aW5kb3cuY29uc29sZS50YWJsZSl8fFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IudXNlckFnZW50JiZuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXFxcLyhcXFxcZCspLykmJnBhcnNlSW50KFJlZ0V4cC4kMSwxMCk+PTMxfHxcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcXFwvKFxcXFxkKykvKSl9LHQuc3RvcmFnZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbG9jYWxTdG9yYWdlfWNhdGNoKGUpe319KCksdC5kZXN0cm95PSgoKT0+e2xldCBlPSExO3JldHVybigpPT57ZXx8KGU9ITAsY29uc29sZS53YXJuKFxcXCJJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuXFxcIikpfX0pKCksdC5jb2xvcnM9W1xcXCIjMDAwMENDXFxcIixcXFwiIzAwMDBGRlxcXCIsXFxcIiMwMDMzQ0NcXFwiLFxcXCIjMDAzM0ZGXFxcIixcXFwiIzAwNjZDQ1xcXCIsXFxcIiMwMDY2RkZcXFwiLFxcXCIjMDA5OUNDXFxcIixcXFwiIzAwOTlGRlxcXCIsXFxcIiMwMENDMDBcXFwiLFxcXCIjMDBDQzMzXFxcIixcXFwiIzAwQ0M2NlxcXCIsXFxcIiMwMENDOTlcXFwiLFxcXCIjMDBDQ0NDXFxcIixcXFwiIzAwQ0NGRlxcXCIsXFxcIiMzMzAwQ0NcXFwiLFxcXCIjMzMwMEZGXFxcIixcXFwiIzMzMzNDQ1xcXCIsXFxcIiMzMzMzRkZcXFwiLFxcXCIjMzM2NkNDXFxcIixcXFwiIzMzNjZGRlxcXCIsXFxcIiMzMzk5Q0NcXFwiLFxcXCIjMzM5OUZGXFxcIixcXFwiIzMzQ0MwMFxcXCIsXFxcIiMzM0NDMzNcXFwiLFxcXCIjMzNDQzY2XFxcIixcXFwiIzMzQ0M5OVxcXCIsXFxcIiMzM0NDQ0NcXFwiLFxcXCIjMzNDQ0ZGXFxcIixcXFwiIzY2MDBDQ1xcXCIsXFxcIiM2NjAwRkZcXFwiLFxcXCIjNjYzM0NDXFxcIixcXFwiIzY2MzNGRlxcXCIsXFxcIiM2NkNDMDBcXFwiLFxcXCIjNjZDQzMzXFxcIixcXFwiIzk5MDBDQ1xcXCIsXFxcIiM5OTAwRkZcXFwiLFxcXCIjOTkzM0NDXFxcIixcXFwiIzk5MzNGRlxcXCIsXFxcIiM5OUNDMDBcXFwiLFxcXCIjOTlDQzMzXFxcIixcXFwiI0NDMDAwMFxcXCIsXFxcIiNDQzAwMzNcXFwiLFxcXCIjQ0MwMDY2XFxcIixcXFwiI0NDMDA5OVxcXCIsXFxcIiNDQzAwQ0NcXFwiLFxcXCIjQ0MwMEZGXFxcIixcXFwiI0NDMzMwMFxcXCIsXFxcIiNDQzMzMzNcXFwiLFxcXCIjQ0MzMzY2XFxcIixcXFwiI0NDMzM5OVxcXCIsXFxcIiNDQzMzQ0NcXFwiLFxcXCIjQ0MzM0ZGXFxcIixcXFwiI0NDNjYwMFxcXCIsXFxcIiNDQzY2MzNcXFwiLFxcXCIjQ0M5OTAwXFxcIixcXFwiI0NDOTkzM1xcXCIsXFxcIiNDQ0NDMDBcXFwiLFxcXCIjQ0NDQzMzXFxcIixcXFwiI0ZGMDAwMFxcXCIsXFxcIiNGRjAwMzNcXFwiLFxcXCIjRkYwMDY2XFxcIixcXFwiI0ZGMDA5OVxcXCIsXFxcIiNGRjAwQ0NcXFwiLFxcXCIjRkYwMEZGXFxcIixcXFwiI0ZGMzMwMFxcXCIsXFxcIiNGRjMzMzNcXFwiLFxcXCIjRkYzMzY2XFxcIixcXFwiI0ZGMzM5OVxcXCIsXFxcIiNGRjMzQ0NcXFwiLFxcXCIjRkYzM0ZGXFxcIixcXFwiI0ZGNjYwMFxcXCIsXFxcIiNGRjY2MzNcXFwiLFxcXCIjRkY5OTAwXFxcIixcXFwiI0ZGOTkzM1xcXCIsXFxcIiNGRkNDMDBcXFwiLFxcXCIjRkZDQzMzXFxcIl0sdC5sb2c9Y29uc29sZS5kZWJ1Z3x8Y29uc29sZS5sb2d8fCgoKT0+e30pLGUuZXhwb3J0cz1zKDk0NjIpKHQpO2NvbnN0e2Zvcm1hdHRlcnM6cn09ZS5leHBvcnRzO3Iuaj1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfWNhdGNoKGUpe3JldHVyblxcXCJbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogXFxcIitlLm1lc3NhZ2V9fX0sOTQ2MjooZSx0LHMpPT57ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7bGV0IHMsbixpLG89bnVsbDtmdW5jdGlvbiBhKC4uLmUpe2lmKCFhLmVuYWJsZWQpcmV0dXJuO2NvbnN0IHI9YSxuPU51bWJlcihuZXcgRGF0ZSksaT1uLShzfHxuKTtyLmRpZmY9aSxyLnByZXY9cyxyLmN1cnI9bixzPW4sZVswXT10LmNvZXJjZShlWzBdKSxcXFwic3RyaW5nXFxcIiE9dHlwZW9mIGVbMF0mJmUudW5zaGlmdChcXFwiJU9cXFwiKTtsZXQgbz0wO2VbMF09ZVswXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywoKHMsbik9PntpZihcXFwiJSVcXFwiPT09cylyZXR1cm5cXFwiJVxcXCI7bysrO2NvbnN0IGk9dC5mb3JtYXR0ZXJzW25dO2lmKFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBpKXtjb25zdCB0PWVbb107cz1pLmNhbGwocix0KSxlLnNwbGljZShvLDEpLG8tLX1yZXR1cm4gc30pKSx0LmZvcm1hdEFyZ3MuY2FsbChyLGUpLChyLmxvZ3x8dC5sb2cpLmFwcGx5KHIsZSl9cmV0dXJuIGEubmFtZXNwYWNlPWUsYS51c2VDb2xvcnM9dC51c2VDb2xvcnMoKSxhLmNvbG9yPXQuc2VsZWN0Q29sb3IoZSksYS5leHRlbmQ9cixhLmRlc3Ryb3k9dC5kZXN0cm95LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFxcXCJlbmFibGVkXFxcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OigpPT5udWxsIT09bz9vOihuIT09dC5uYW1lc3BhY2VzJiYobj10Lm5hbWVzcGFjZXMsaT10LmVuYWJsZWQoZSkpLGkpLHNldDplPT57bz1lfX0pLFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiB0LmluaXQmJnQuaW5pdChhKSxhfWZ1bmN0aW9uIHIoZSxzKXtjb25zdCByPXQodGhpcy5uYW1lc3BhY2UrKHZvaWQgMD09PXM/XFxcIjpcXFwiOnMpK2UpO3JldHVybiByLmxvZz10aGlzLmxvZyxyfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIGUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMixlLnRvU3RyaW5nKCkubGVuZ3RoLTIpLnJlcGxhY2UoL1xcXFwuXFxcXCpcXFxcPyQvLFxcXCIqXFxcIil9cmV0dXJuIHQuZGVidWc9dCx0LmRlZmF1bHQ9dCx0LmNvZXJjZT1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEVycm9yP2Uuc3RhY2t8fGUubWVzc2FnZTplfSx0LmRpc2FibGU9ZnVuY3Rpb24oKXtjb25zdCBlPVsuLi50Lm5hbWVzLm1hcChuKSwuLi50LnNraXBzLm1hcChuKS5tYXAoKGU9PlxcXCItXFxcIitlKSldLmpvaW4oXFxcIixcXFwiKTtyZXR1cm4gdC5lbmFibGUoXFxcIlxcXCIpLGV9LHQuZW5hYmxlPWZ1bmN0aW9uKGUpe2xldCBzO3Quc2F2ZShlKSx0Lm5hbWVzcGFjZXM9ZSx0Lm5hbWVzPVtdLHQuc2tpcHM9W107Y29uc3Qgcj0oXFxcInN0cmluZ1xcXCI9PXR5cGVvZiBlP2U6XFxcIlxcXCIpLnNwbGl0KC9bXFxcXHMsXSsvKSxuPXIubGVuZ3RoO2ZvcihzPTA7czxuO3MrKylyW3NdJiYoXFxcIi1cXFwiPT09KGU9cltzXS5yZXBsYWNlKC9cXFxcKi9nLFxcXCIuKj9cXFwiKSlbMF0/dC5za2lwcy5wdXNoKG5ldyBSZWdFeHAoXFxcIl5cXFwiK2Uuc3Vic3RyKDEpK1xcXCIkXFxcIikpOnQubmFtZXMucHVzaChuZXcgUmVnRXhwKFxcXCJeXFxcIitlK1xcXCIkXFxcIikpKX0sdC5lbmFibGVkPWZ1bmN0aW9uKGUpe2lmKFxcXCIqXFxcIj09PWVbZS5sZW5ndGgtMV0pcmV0dXJuITA7bGV0IHMscjtmb3Iocz0wLHI9dC5za2lwcy5sZW5ndGg7czxyO3MrKylpZih0LnNraXBzW3NdLnRlc3QoZSkpcmV0dXJuITE7Zm9yKHM9MCxyPXQubmFtZXMubGVuZ3RoO3M8cjtzKyspaWYodC5uYW1lc1tzXS50ZXN0KGUpKXJldHVybiEwO3JldHVybiExfSx0Lmh1bWFuaXplPXMoNzgyNCksdC5kZXN0cm95PWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFxcXCJJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuXFxcIil9LE9iamVjdC5rZXlzKGUpLmZvckVhY2goKHM9Pnt0W3NdPWVbc119KSksdC5uYW1lcz1bXSx0LnNraXBzPVtdLHQuZm9ybWF0dGVycz17fSx0LnNlbGVjdENvbG9yPWZ1bmN0aW9uKGUpe2xldCBzPTA7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspcz0oczw8NSktcytlLmNoYXJDb2RlQXQodCksc3w9MDtyZXR1cm4gdC5jb2xvcnNbTWF0aC5hYnMocykldC5jb2xvcnMubGVuZ3RoXX0sdC5lbmFibGUodC5sb2FkKCkpLHR9fSwxNTE3OihlLHQscyk9Pnt0LmZvcm1hdEFyZ3M9ZnVuY3Rpb24odCl7aWYodFswXT0odGhpcy51c2VDb2xvcnM/XFxcIiVjXFxcIjpcXFwiXFxcIikrdGhpcy5uYW1lc3BhY2UrKHRoaXMudXNlQ29sb3JzP1xcXCIgJWNcXFwiOlxcXCIgXFxcIikrdFswXSsodGhpcy51c2VDb2xvcnM/XFxcIiVjIFxcXCI6XFxcIiBcXFwiKStcXFwiK1xcXCIrZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZiksIXRoaXMudXNlQ29sb3JzKXJldHVybjtjb25zdCBzPVxcXCJjb2xvcjogXFxcIit0aGlzLmNvbG9yO3Quc3BsaWNlKDEsMCxzLFxcXCJjb2xvcjogaW5oZXJpdFxcXCIpO2xldCByPTAsbj0wO3RbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLChlPT57XFxcIiUlXFxcIiE9PWUmJihyKyssXFxcIiVjXFxcIj09PWUmJihuPXIpKX0pKSx0LnNwbGljZShuLDAscyl9LHQuc2F2ZT1mdW5jdGlvbihlKXt0cnl7ZT90LnN0b3JhZ2Uuc2V0SXRlbShcXFwiZGVidWdcXFwiLGUpOnQuc3RvcmFnZS5yZW1vdmVJdGVtKFxcXCJkZWJ1Z1xcXCIpfWNhdGNoKGUpe319LHQubG9hZD1mdW5jdGlvbigpe2xldCBlO3RyeXtlPXQuc3RvcmFnZS5nZXRJdGVtKFxcXCJkZWJ1Z1xcXCIpfWNhdGNoKGUpe31yZXR1cm4hZSYmXFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBwcm9jZXNzJiZcXFwiZW52XFxcImluIHByb2Nlc3MmJihlPXByb2Nlc3MuZW52LkRFQlVHKSxlfSx0LnVzZUNvbG9ycz1mdW5jdGlvbigpe3JldHVybiEoXFxcInVuZGVmaW5lZFxcXCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cucHJvY2Vzc3x8XFxcInJlbmRlcmVyXFxcIiE9PXdpbmRvdy5wcm9jZXNzLnR5cGUmJiF3aW5kb3cucHJvY2Vzcy5fX253anMpfHwoXFxcInVuZGVmaW5lZFxcXCI9PXR5cGVvZiBuYXZpZ2F0b3J8fCFuYXZpZ2F0b3IudXNlckFnZW50fHwhbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcXFwvKFxcXFxkKykvKSkmJihcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2V8fFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuY29uc29sZSYmKHdpbmRvdy5jb25zb2xlLmZpcmVidWd8fHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiYmd2luZG93LmNvbnNvbGUudGFibGUpfHxcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFxcXC8oXFxcXGQrKS8pJiZwYXJzZUludChSZWdFeHAuJDEsMTApPj0zMXx8XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci51c2VyQWdlbnQmJm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXFxcLyhcXFxcZCspLykpfSx0LnN0b3JhZ2U9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGxvY2FsU3RvcmFnZX1jYXRjaChlKXt9fSgpLHQuZGVzdHJveT0oKCk9PntsZXQgZT0hMTtyZXR1cm4oKT0+e2V8fChlPSEwLGNvbnNvbGUud2FybihcXFwiSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLlxcXCIpKX19KSgpLHQuY29sb3JzPVtcXFwiIzAwMDBDQ1xcXCIsXFxcIiMwMDAwRkZcXFwiLFxcXCIjMDAzM0NDXFxcIixcXFwiIzAwMzNGRlxcXCIsXFxcIiMwMDY2Q0NcXFwiLFxcXCIjMDA2NkZGXFxcIixcXFwiIzAwOTlDQ1xcXCIsXFxcIiMwMDk5RkZcXFwiLFxcXCIjMDBDQzAwXFxcIixcXFwiIzAwQ0MzM1xcXCIsXFxcIiMwMENDNjZcXFwiLFxcXCIjMDBDQzk5XFxcIixcXFwiIzAwQ0NDQ1xcXCIsXFxcIiMwMENDRkZcXFwiLFxcXCIjMzMwMENDXFxcIixcXFwiIzMzMDBGRlxcXCIsXFxcIiMzMzMzQ0NcXFwiLFxcXCIjMzMzM0ZGXFxcIixcXFwiIzMzNjZDQ1xcXCIsXFxcIiMzMzY2RkZcXFwiLFxcXCIjMzM5OUNDXFxcIixcXFwiIzMzOTlGRlxcXCIsXFxcIiMzM0NDMDBcXFwiLFxcXCIjMzNDQzMzXFxcIixcXFwiIzMzQ0M2NlxcXCIsXFxcIiMzM0NDOTlcXFwiLFxcXCIjMzNDQ0NDXFxcIixcXFwiIzMzQ0NGRlxcXCIsXFxcIiM2NjAwQ0NcXFwiLFxcXCIjNjYwMEZGXFxcIixcXFwiIzY2MzNDQ1xcXCIsXFxcIiM2NjMzRkZcXFwiLFxcXCIjNjZDQzAwXFxcIixcXFwiIzY2Q0MzM1xcXCIsXFxcIiM5OTAwQ0NcXFwiLFxcXCIjOTkwMEZGXFxcIixcXFwiIzk5MzNDQ1xcXCIsXFxcIiM5OTMzRkZcXFwiLFxcXCIjOTlDQzAwXFxcIixcXFwiIzk5Q0MzM1xcXCIsXFxcIiNDQzAwMDBcXFwiLFxcXCIjQ0MwMDMzXFxcIixcXFwiI0NDMDA2NlxcXCIsXFxcIiNDQzAwOTlcXFwiLFxcXCIjQ0MwMENDXFxcIixcXFwiI0NDMDBGRlxcXCIsXFxcIiNDQzMzMDBcXFwiLFxcXCIjQ0MzMzMzXFxcIixcXFwiI0NDMzM2NlxcXCIsXFxcIiNDQzMzOTlcXFwiLFxcXCIjQ0MzM0NDXFxcIixcXFwiI0NDMzNGRlxcXCIsXFxcIiNDQzY2MDBcXFwiLFxcXCIjQ0M2NjMzXFxcIixcXFwiI0NDOTkwMFxcXCIsXFxcIiNDQzk5MzNcXFwiLFxcXCIjQ0NDQzAwXFxcIixcXFwiI0NDQ0MzM1xcXCIsXFxcIiNGRjAwMDBcXFwiLFxcXCIjRkYwMDMzXFxcIixcXFwiI0ZGMDA2NlxcXCIsXFxcIiNGRjAwOTlcXFwiLFxcXCIjRkYwMENDXFxcIixcXFwiI0ZGMDBGRlxcXCIsXFxcIiNGRjMzMDBcXFwiLFxcXCIjRkYzMzMzXFxcIixcXFwiI0ZGMzM2NlxcXCIsXFxcIiNGRjMzOTlcXFwiLFxcXCIjRkYzM0NDXFxcIixcXFwiI0ZGMzNGRlxcXCIsXFxcIiNGRjY2MDBcXFwiLFxcXCIjRkY2NjMzXFxcIixcXFwiI0ZGOTkwMFxcXCIsXFxcIiNGRjk5MzNcXFwiLFxcXCIjRkZDQzAwXFxcIixcXFwiI0ZGQ0MzM1xcXCJdLHQubG9nPWNvbnNvbGUuZGVidWd8fGNvbnNvbGUubG9nfHwoKCk9Pnt9KSxlLmV4cG9ydHM9cyg4OTI5KSh0KTtjb25zdHtmb3JtYXR0ZXJzOnJ9PWUuZXhwb3J0cztyLmo9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeShlKX1jYXRjaChlKXtyZXR1cm5cXFwiW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06IFxcXCIrZS5tZXNzYWdlfX19LDg5Mjk6KGUsdCxzKT0+e2UuZXhwb3J0cz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe2xldCBzLG4saSxvPW51bGw7ZnVuY3Rpb24gYSguLi5lKXtpZighYS5lbmFibGVkKXJldHVybjtjb25zdCByPWEsbj1OdW1iZXIobmV3IERhdGUpLGk9bi0oc3x8bik7ci5kaWZmPWksci5wcmV2PXMsci5jdXJyPW4scz1uLGVbMF09dC5jb2VyY2UoZVswXSksXFxcInN0cmluZ1xcXCIhPXR5cGVvZiBlWzBdJiZlLnVuc2hpZnQoXFxcIiVPXFxcIik7bGV0IG89MDtlWzBdPWVbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csKChzLG4pPT57aWYoXFxcIiUlXFxcIj09PXMpcmV0dXJuXFxcIiVcXFwiO28rKztjb25zdCBpPXQuZm9ybWF0dGVyc1tuXTtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgaSl7Y29uc3QgdD1lW29dO3M9aS5jYWxsKHIsdCksZS5zcGxpY2UobywxKSxvLS19cmV0dXJuIHN9KSksdC5mb3JtYXRBcmdzLmNhbGwocixlKSwoci5sb2d8fHQubG9nKS5hcHBseShyLGUpfXJldHVybiBhLm5hbWVzcGFjZT1lLGEudXNlQ29sb3JzPXQudXNlQ29sb3JzKCksYS5jb2xvcj10LnNlbGVjdENvbG9yKGUpLGEuZXh0ZW5kPXIsYS5kZXN0cm95PXQuZGVzdHJveSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcXFwiZW5hYmxlZFxcXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDooKT0+bnVsbCE9PW8/bzoobiE9PXQubmFtZXNwYWNlcyYmKG49dC5uYW1lc3BhY2VzLGk9dC5lbmFibGVkKGUpKSxpKSxzZXQ6ZT0+e289ZX19KSxcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgdC5pbml0JiZ0LmluaXQoYSksYX1mdW5jdGlvbiByKGUscyl7Y29uc3Qgcj10KHRoaXMubmFtZXNwYWNlKyh2b2lkIDA9PT1zP1xcXCI6XFxcIjpzKStlKTtyZXR1cm4gci5sb2c9dGhpcy5sb2cscn1mdW5jdGlvbiBuKGUpe3JldHVybiBlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIsZS50b1N0cmluZygpLmxlbmd0aC0yKS5yZXBsYWNlKC9cXFxcLlxcXFwqXFxcXD8kLyxcXFwiKlxcXCIpfXJldHVybiB0LmRlYnVnPXQsdC5kZWZhdWx0PXQsdC5jb2VyY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBFcnJvcj9lLnN0YWNrfHxlLm1lc3NhZ2U6ZX0sdC5kaXNhYmxlPWZ1bmN0aW9uKCl7Y29uc3QgZT1bLi4udC5uYW1lcy5tYXAobiksLi4udC5za2lwcy5tYXAobikubWFwKChlPT5cXFwiLVxcXCIrZSkpXS5qb2luKFxcXCIsXFxcIik7cmV0dXJuIHQuZW5hYmxlKFxcXCJcXFwiKSxlfSx0LmVuYWJsZT1mdW5jdGlvbihlKXtsZXQgczt0LnNhdmUoZSksdC5uYW1lc3BhY2VzPWUsdC5uYW1lcz1bXSx0LnNraXBzPVtdO2NvbnN0IHI9KFxcXCJzdHJpbmdcXFwiPT10eXBlb2YgZT9lOlxcXCJcXFwiKS5zcGxpdCgvW1xcXFxzLF0rLyksbj1yLmxlbmd0aDtmb3Iocz0wO3M8bjtzKyspcltzXSYmKFxcXCItXFxcIj09PShlPXJbc10ucmVwbGFjZSgvXFxcXCovZyxcXFwiLio/XFxcIikpWzBdP3Quc2tpcHMucHVzaChuZXcgUmVnRXhwKFxcXCJeXFxcIitlLnN1YnN0cigxKStcXFwiJFxcXCIpKTp0Lm5hbWVzLnB1c2gobmV3IFJlZ0V4cChcXFwiXlxcXCIrZStcXFwiJFxcXCIpKSl9LHQuZW5hYmxlZD1mdW5jdGlvbihlKXtpZihcXFwiKlxcXCI9PT1lW2UubGVuZ3RoLTFdKXJldHVybiEwO2xldCBzLHI7Zm9yKHM9MCxyPXQuc2tpcHMubGVuZ3RoO3M8cjtzKyspaWYodC5za2lwc1tzXS50ZXN0KGUpKXJldHVybiExO2ZvcihzPTAscj10Lm5hbWVzLmxlbmd0aDtzPHI7cysrKWlmKHQubmFtZXNbc10udGVzdChlKSlyZXR1cm4hMDtyZXR1cm4hMX0sdC5odW1hbml6ZT1zKDc4MjQpLHQuZGVzdHJveT1mdW5jdGlvbigpe2NvbnNvbGUud2FybihcXFwiSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLlxcXCIpfSxPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChzPT57dFtzXT1lW3NdfSkpLHQubmFtZXM9W10sdC5za2lwcz1bXSx0LmZvcm1hdHRlcnM9e30sdC5zZWxlY3RDb2xvcj1mdW5jdGlvbihlKXtsZXQgcz0wO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXM9KHM8PDUpLXMrZS5jaGFyQ29kZUF0KHQpLHN8PTA7cmV0dXJuIHQuY29sb3JzW01hdGguYWJzKHMpJXQuY29sb3JzLmxlbmd0aF19LHQuZW5hYmxlKHQubG9hZCgpKSx0fX0sMTk4OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDcwNDYpKSxpPXIocyg3NzcxKSksbz1yKHMoMzAwKSksYT1yKHMoMTY2NSkpLHU9cihzKDEwNjkpKSxjPXIocyg1MDI3KSksZD1yKHMoOTA5MykpLGw9cihzKDg1MjcpKSxoPXIocyg0NTQ2KSk7Y2xhc3MgcHtjb25zdHJ1Y3RvcihlKXt0aGlzLnN0b3Jlcz17fSx0aGlzLmlvcz17fSx0aGlzLm1ldGhvZHM9e30sdGhpcy5wdWJsaWNDYWxsYmFja3M9e30sdGhpcy51c2U9dGhpcy51c2UuYmluZCh0aGlzKSx0aGlzLnR1bmU9dGhpcy50dW5lLmJpbmQodGhpcyksdGhpcy50dW5lZD10aGlzLnR1bmVkLmJpbmQodGhpcyksdGhpcy51bnR1bmU9dGhpcy51bnR1bmUuYmluZCh0aGlzKSx0aGlzLmV4ZT10aGlzLmV4ZS5iaW5kKHRoaXMpLHRoaXMub25SZXNwb25zZU1lQVBJPXRoaXMub25SZXNwb25zZU1lQVBJLmJpbmQodGhpcyksdGhpcy5vZmZSZXNwb25zZUNoQVBJPXRoaXMub2ZmUmVzcG9uc2VDaEFQSS5iaW5kKHRoaXMpLHRoaXMuc3Vic2NyaWJlPXRoaXMuc3Vic2NyaWJlLmJpbmQodGhpcyksdGhpcy5leGVDYWxsYmFjaz10aGlzLmV4ZUNhbGxiYWNrLmJpbmQodGhpcyksdGhpcy5vbj10aGlzLm9uLmJpbmQodGhpcyksdGhpcy5vZmY9dGhpcy5vZmYuYmluZCh0aGlzKSx0aGlzLndlYldvcmtlcj1lLHRoaXMud2ViV29ya2VyLnBvc3RNZXNzYWdlKFxcXCJXU19DT05TVFJVQ1RFRFxcXCIse2lvVHlwZTppLmRlZmF1bHQuQVBJX1NFVFVQfSl9c3RhdGljIGdldCBzZXJ2ZXIoKXtyZXR1cm4gby5kZWZhdWx0LmVudj09PWEuZGVmYXVsdC5ERVZFTE9QTUVOVHx8by5kZWZhdWx0LmVudj09PWEuZGVmYXVsdC5MT0NBTEhPU1Q/YS5kZWZhdWx0LkRFVkVMT1BNRU5UX0RPTUFJTjphLmRlZmF1bHQuUFJPRFVDVElPTl9ET01BSU59c3RhdGljIGdldCBvcHRpb24oKXtyZXR1cm57Zm9yY2VOZXc6ITB9fXVzZShlKXtyZXR1cm4hKCF0aGlzLnN0b3Jlc1tlXXx8IXRoaXMuaW9zW3RoaXMuaWRdfHwodGhpcy5pZD1lLDApKX1leGUoZSx0KXtyZXR1cm4gdGhpc1tlXSYmXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHRoaXNbZV0/KHRoaXNbZV0odCksITApOiEoIXRoaXMubWV0aG9kc1tlXXx8XFxcImZ1bmN0aW9uXFxcIiE9dHlwZW9mIHRoaXMubWV0aG9kc1tlXXx8KHRoaXMubWV0aG9kc1tlXSh0KSwwKSl9b25SZXNwb25zZUNoQVBJKGUpe2NvbnN0IHQ9KGU9PnQ9Pntjb25zdCBzPWUodCk7dGhpcy5zdG9yZXNbdGhpcy5pZF0mJnRoaXMuc3RvcmVzW3RoaXMuaWRdLmRpc3BhdGNoKHMpfSkoYy5kZWZhdWx0KTt0aGlzLm9uKGUsdCl9b2ZmUmVzcG9uc2VDaEFQSShlKXt0aGlzLm9mZihlKX1nZXRJb1BhcmFtcyhlKXtsZXQgdD1cXFwiXFxcIjtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgocz0+e2lmKFxcXCJpZFxcXCI9PT1zKXJldHVybjtpZihcXFwiZGVmYXVsdFByb3BzXFxcIj09PXMpcmV0dXJuO2NvbnN0IHI9ZVtzXTt0Kz1gJHtzfT0ke2VuY29kZVVSSUNvbXBvbmVudChyKX0mYH0pKSx0LnJlcGxhY2UoLyYkLyxcXFwiXFxcIil9dHVuZShlKXtpZighdGhpcy51c2UoZS5pZCkpe3RoaXMuaWQ9ZS5pZCx0aGlzLnN0b3Jlc1t0aGlzLmlkXT0oMCxoLmRlZmF1bHQpKCksdGhpcy5zdG9yZXNbdGhpcy5pZF0uc3Vic2NyaWJlKHRoaXMuc3Vic2NyaWJlKTtjb25zdCB0PW5ldyBsLmRlZmF1bHQoZSk7dGhpcy5zdG9yZXNbdGhpcy5pZF0uZGlzcGF0Y2goey4uLnQsdHlwZTpcXFwiU0VUVVBFRF9BUElfU1RPUkVcXFwifSk7Y29uc3Qgcz10aGlzLmdldElvUGFyYW1zKGUpLHI9YCR7aS5kZWZhdWx0LkhUVFBTX1BST1RPQ09MfS8vJHtwLnNlcnZlcn06JHthLmRlZmF1bHQuUE9SVFMuU09DS0VUX0lPfT8ke3N9YDt0aGlzLmlvc1t0aGlzLmlkXT0oMCxuLmRlZmF1bHQpKHIscC5vcHRpb24pLHRoaXMuaW9zW3RoaXMuaWRdLm9uKFxcXCJjb25uZWN0XFxcIix0aGlzLnR1bmVkKSx0aGlzLm9uUmVzcG9uc2VDaEFQSShlLmNoKSx0aGlzLm9uUmVxdWVzdEFQSSgpLHRoaXMub25SZXNwb25zZU1lQVBJKCl9fXVudHVuZShlKXtjb25zb2xlLmxvZyhcXFwiQEBAQCBBUEkgVU5UVU5FXFxcIik7Y29uc3QgdD1lJiZlLmlkP2UuaWQ6dGhpcy5pZDtyZXR1cm4hIXRoaXMuaW9zW3RdJiYodGhpcy5pb3NbdF0uZGlzY29ubmVjdCgpLGRlbGV0ZSB0aGlzLmlvc1t0XSxkZWxldGUgdGhpcy5zdG9yZXNbdF0sT2JqZWN0LmtleXModGhpcy5pb3MpLmxlbmd0aD4wJiYodGhpcy5pZD1PYmplY3Qua2V5cyh0aGlzLmlvcylbMF0pLCEwKX10dW5lZCgpe3RoaXMud2ViV29ya2VyLnBvc3RNZXNzYWdlKFxcXCJUVU5FRFxcXCIse2lkOnRoaXMuaWQsaW9UeXBlOmkuZGVmYXVsdC5BUElfU0VUVVB9KX1vblJlcXVlc3RBUEkoKXtjb25zdCBlPXUuZGVmYXVsdCx0PU9iamVjdC5rZXlzKGUpLHM9dC5sZW5ndGgscj0oZSx0KT0+KHMscj0oKCk9Pnt9KSk9Pntjb25zdCBuPXRoaXMuc3RvcmVzW3RoaXMuaWRdLmdldFN0YXRlKCksbz1pLmRlZmF1bHQuZ2V0UmVxdWVzdFN0YXRlKGUsbixzKSxhPWkuZGVmYXVsdC5nZXRSZXF1ZXN0QWN0aW9uU3RhdGUoZSxzKSx7cmVxdWVzdFN0YXRlOnUsYWN0aW9uU3RhdGU6Y309dChuLG8sYSk7cmV0dXJuIHRoaXMucHVibGljQ2FsbGJhY2tzW3UudHlwZV09cix0aGlzLmlvc1t0aGlzLmlkXS5lbWl0KHUudHlwZSx1KSx0aGlzLnN0b3Jlc1t0aGlzLmlkXS5kaXNwYXRjaChjKX07Zm9yKGxldCBuPTA7bjxzO24rKyl7Y29uc3Qgcz10W25dLG89cy5yZXBsYWNlKGkuZGVmYXVsdC5BUElfVE9fU0VSVkVSX1JFUVVFU1QsXFxcIlxcXCIpLGE9ZVtzXTt0aGlzLm1ldGhvZHNbb109cihzLGEpfX1vblJlc3BvbnNlTWVBUEkoKXtjb25zdCBlPShlPT50PT57Y29uc3Qgcz1lKHQpO3RoaXMuc3RvcmVzW3RoaXMuaWRdLmRpc3BhdGNoKHMpfSkoZC5kZWZhdWx0KTt0aGlzLm9uKGkuZGVmYXVsdC5DQVRDSF9NRV9LRVksZSl9b24oZSx0PSgoKT0+e30pKXt0aGlzLmlkJiYhdGhpcy5pb3NbdGhpcy5pZF0uX2NhbGxiYWNrc1tgJCR7ZX1gXSYmdGhpcy5pb3NbdGhpcy5pZF0ub24oZSx0KX1vZmYoZSl7dGhpcy5pb3NbdGhpcy5pZF0mJnRoaXMuaW9zW3RoaXMuaWRdLl9jYWxsYmFja3NbYCQke2V9YF0mJnRoaXMuaW9zW3RoaXMuaWRdLm9mZihlKX1zdWJzY3JpYmUoZSl7Y29uc3QgdD10aGlzLnN0b3Jlc1t0aGlzLmlkXS5nZXRTdGF0ZSgpLHM9aS5kZWZhdWx0LmNvbnZlcnRTZXJ2ZXJUb0FwaUlvVHlwZSh0aGlzLmlkLHQuYXBwLmFjdGlvbmVkKTt0aGlzLmV4ZUNhbGxiYWNrKHQuYXBwLmFjdGlvbmVkLHQpLHRoaXMud2ViV29ya2VyLnBvc3RNZXNzYWdlKHQuYXBwLmFjdGlvbmVkLHsuLi50LGlvVHlwZTpzfSl9ZXhlQ2FsbGJhY2soZSx0KXtjb25zdHthY3Rpb25UeXBlOnMsYWN0aW9uTmFtZTpyfT1pLmRlZmF1bHQuZ2V0U2VxdWVuY2VBY3Rpb25NYXAoZSk7aWYociE9PWkuZGVmYXVsdC5BUElfQlJPQURDQVNUX0NBTExCQUNLJiZzPT09aS5kZWZhdWx0LkFQSV9SRVNQT05TRV9UWVBFX0VNSVQmJnRoaXMucHVibGljQ2FsbGJhY2tzW3JdKXtjb25zdHtwb3N0czplLHRocmVhZDpzLHVzZXI6bn09dDt0aGlzLnB1YmxpY0NhbGxiYWNrc1tyXSh0LHtwb3N0czplLHRocmVhZDpzLHVpZDpuLnVpZH0pfWlmKHM9PT1pLmRlZmF1bHQuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUJiZ0aGlzLnB1YmxpY0NhbGxiYWNrc1tpLmRlZmF1bHQuQVBJX0JST0FEQ0FTVF9DQUxMQkFDS10pe2NvbnN0e3Bvc3RzOmUsdGhyZWFkOnMsdXNlcjpufT10O3RoaXMucHVibGljQ2FsbGJhY2tzW2kuZGVmYXVsdC5BUElfQlJPQURDQVNUX0NBTExCQUNLXShyLHtwb3N0czplLHRocmVhZDpzLHVpZDpuLnVpZH0pfX19dC5kZWZhdWx0PXB9LDEwNjk6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoNzc3MSkpLGk9bmV3KHIocygzMzY1KSkuZGVmYXVsdCk7bGV0IG89e307T2JqZWN0LmtleXMobi5kZWZhdWx0Lm1hcCkuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9YCR7bi5kZWZhdWx0LkFQSV9UT19TRVJWRVJfUkVRVUVTVH0ke2V9YDtvW3RdPShlLHQscyk9PmFbdC50eXBlXT9hW3QudHlwZV0oZSx0LHMpOntyZXF1ZXN0U3RhdGU6dCxhY3Rpb25TdGF0ZTpzfX0pKTtjb25zdCBhPXtwb3N0OihlLHQscyk9Pntjb25zdHthcHA6cn09dDtyZXR1cm4gci5pc01lZGlhQ2gmJihyLmN1cnJlbnRUaW1lP3QuYXBwLmlucHV0Q3VycmVudFRpbWU9d2luZG93LnRhbGtuTWVkaWEuY3VycmVudFRpbWU6dC5hcHAuaW5wdXRDdXJyZW50VGltZT0wKSx0LnRocmVhZC5lbW90aW9ucz17fSxyLmlucHV0U3RhbXBJZD9PYmplY3Qua2V5cyhpLmJhbGFuY2VzKS5mb3JFYWNoKChzPT57aWYoaS5iYWxhbmNlc1tzXSYmZS50aHJlYWQuZW1vdGlvbnNbc10pe2NvbnN0IGU9aS5iYWxhbmNlc1tzXShyLmlucHV0U3RhbXBJZCk7ZSYmZS5mb3JFYWNoKChlPT57Y29uc3Qgcj1PYmplY3Qua2V5cyhlKVswXSxuPWkuaWRLZXlUeXBlc1tyXTt0LnRocmVhZC5lbW90aW9uc1tzXXx8KHQudGhyZWFkLmVtb3Rpb25zW3NdPXt9KSx0LnRocmVhZC5lbW90aW9uc1tzXVtuXXx8KHQudGhyZWFkLmVtb3Rpb25zW3NdW25dPTApLHQudGhyZWFkLmVtb3Rpb25zW3NdW25dPWVbcl19KSl9fSkpOihzLmFwcD17Li4ucn0scy5hcHAuaW5wdXRTdGFtcElkPTAsdC5hcHAuaW5wdXRTdGFtcElkPTApLHtyZXF1ZXN0U3RhdGU6dCxhY3Rpb25TdGF0ZTpzfX19O3QuZGVmYXVsdD1vfSw1MDI3OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDc3NzEpKTt0LmRlZmF1bHQ9ZT0+e2NvbnN0IHQ9YCR7bi5kZWZhdWx0LlNFUlZFUl9UT19BUElfQlJPQURDQVNUfSR7ZS50eXBlfWA7cmV0dXJuey4uLmUsdHlwZTp0fX19LDkwOTM6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoNzc3MSkpO3QuZGVmYXVsdD1lPT57Y29uc3QgdD1gJHtuLmRlZmF1bHQuU0VSVkVSX1RPX0FQSV9FTUlUfSR7ZS50eXBlfWA7cmV0dXJuey4uLmUsdHlwZTp0fX19LDc1MzY6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTY2NSkpLGk9cihzKDY5MjYpKTtmdW5jdGlvbiBvKGUsdCl7Y29uc3R7YXBwOnN9PWUse3N0b3JhZ2VLZXk6cn09bi5kZWZhdWx0O2lmKHMuaXNSb290Q2gpe2NvbnN0e3Bvc3RzTXVsdGk6dCxwb3N0c1NpbmdsZTpzfT1lfXJldHVybntzdGF0ZTplLHByb3BzOnR9fWZ1bmN0aW9uIGEoZSl7Y29uc3R7YXBwOnQsdGhyZWFkOnMscG9zdHNUaW1lbGluZTpyfT1lLHtzdG9yYWdlS2V5Oml9PW4uZGVmYXVsdDtpZih0LmlzTWVkaWFDaCl7Y29uc3QgdD1yJiZyLmxlbmd0aD9yLmxlbmd0aDowO2xldCBzPVtdLG49W107Zm9yKGxldCBlPTA7ZTx0O2UrKykwPT09cltlXS5jdXJyZW50VGltZT9zLnB1c2gocltlXSk6bi5wdXNoKHJbZV0pO2UucG9zdHNUaW1lbGluZT1zfXJldHVybiBlfXQuZGVmYXVsdD17XFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XFxcIjpvLFxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmVcXFwiOm8sXFxcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1xcXCI6KGUsdCk9Pih7c3RhdGU6ZSxwcm9wczp0fSksXFxcIlNFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkXFxcIjooZSx0KT0+e2NvbnN0e2FwcDpzfT1lLHtyb290Q2g6cn09cyx7c3RvcmFnZUtleTpvfT1uLmRlZmF1bHQ7cmV0dXJuIHMuZGlzcFRocmVhZFR5cGU9PT1pLmRlZmF1bHQuZGlzcFRocmVhZFR5cGVNdWx0aT9vLnBvc3RTaW5nbGU6by5wb3N0TXVsdGkse3N0YXRlOmUscHJvcHM6dH19LE9OX0NMSUNLX01FTlU6KGUsdCk9Pntjb25zdHtyb290Q2g6c309ZS5hcHA7cmV0dXJue3N0YXRlOmUscHJvcHM6dH19LFJFU0laRV9FTkRfV0lORE9XOihlLHQpPT4oe3N0YXRlOmUscHJvcHM6dH0pLHNldFN0b3JhZ2VQb3N0czpmdW5jdGlvbihlLHQpe2NvbnN0e2FwcDpzfT1lO3JldHVybiBzLmlzTWVkaWFDaD97c3RhdGU6ZT1hKGUpLHByb3BzOnR9Om8oZSx0KX0sc2V0U3RvcmFnZUh0bWxQb3N0czpvLHNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lOmF9fSw4NDM6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTIxNikpLGk9cihzKDc1MzYpKSxvPXIocyg2OTI2KSksYT1yKHMoOTQ3OCkpLHU9cihzKDgwOTEpKSxjPXIocyg5NzgpKTt0LmRlZmF1bHQ9e3VwZGF0ZUFjdGlvbjplPT50PT5zPT57Y29uc3Qgcj1lLmdldFN0YXRlKCk7cyYmKHMuYXBwPXMuYXBwP3suLi5yLmFwcCwuLi5zLmFwcH06ci5hcHAscy5hcHAuYWN0aW9uZWQ9cy50eXBlKSxkW3MudHlwZV0mJihzPWRbcy50eXBlXShyLHMpKSxzJiZ0KHMpfX07Y29uc3QgZD17XFxcIlNFUlZFUl9UT19BUElbRU1JVF06dHVuZVxcXCI6KGUsdCk9PntpZih0LmFwcFtgb2Zmc2V0JHt0LmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXT10LmFwcC5vZmZzZXRGaW5kSWQsdC5hcHAucm9vdENoPXQudGhyZWFkLmNoLHQuYXBwLnR1bmVkQ2g9dC50aHJlYWQuY2gsdC5hcHAuZGV0YWlsQ2g9dC50aHJlYWQuY2gsdC5hcHAuaXNUdW5lPSEwLHQuYXBwLmlzUm9vdENoPXQuYXBwLnJvb3RDaD09PXQudGhyZWFkLmNoLHQuYXBwLmlzTWVkaWFDaD1vLmRlZmF1bHQuZ2V0SXNNZWRpYUNoKHQudGhyZWFkLmNoKSx0LmFwcC5kaXNwVGhyZWFkVHlwZT10LmFwcC5pc01lZGlhQ2g/by5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6by5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlTXVsdGksdC5hcHAuaXNUb2dnbGVNdWx0aXN0cmVhbT0hMSx0LnRocmVhZC50aXRsZT10LnRocmVhZC5zZXJ2ZXJNZXRhcy50aXRsZSx0LnRocmVhZC5oYXNTbGFzaD1uLmRlZmF1bHQuZ2V0Qm9vbCh0LnRocmVhZC5oYXNTbGFzaCksdC50aHJlYWRzPWMuZGVmYXVsdC5nZXRNZXJnZWRUaHJlYWRzKGUudGhyZWFkcyx0LnRocmVhZCksdC50aHJlYWREZXRhaWw9ey4uLnQudGhyZWFkfSx0LmFwcC5pc1Jvb3RDaCYmKHQuYXBwLnJvb3RUaXRsZT10LnRocmVhZC50aXRsZSksdC5hcHAuaXNNZWRpYUNoKXtjb25zdCBlPW8uZGVmYXVsdC5nZXRNZWRpYVNyYyh0LnRocmVhZC5wcm90b2NvbCx0LnRocmVhZC5jaCk7dC5hcHAuY2hUeXBlPW8uZGVmYXVsdC5nZXRNZWRpYVR5cGVGcm9tU3JjKGUpfWVsc2UgdC5hcHAuY2hUeXBlPW8uZGVmYXVsdC5tZWRpYVRhZ1R5cGVObztyZXR1cm4gdH0sXFxcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1xcXCI6KGUsdCk9Pih0LmFwcC5kaXNwVGhyZWFkVHlwZT10LmFwcC5pc01lZGlhQ2g/by5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6by5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlTXVsdGksdC5hcHAub2Zmc2V0RmluZElkPW8uZGVmYXVsdC5nZXRPZmZzZXRGaW5kSWQoe3Bvc3RzOnQucG9zdHN9KSx0LmFwcFtgb2Zmc2V0JHt0LmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXT10LmFwcC5vZmZzZXRGaW5kSWQsKHQ9ey4uLmEuZGVmYXVsdC5nZXRBbnlBY3Rpb25Qb3N0cyh0LGUpfSkuYXBwLmlzTWVkaWFDaCYmKHQ9aS5kZWZhdWx0LnNldFN0b3JhZ2VQb3N0c1RpbWVsaW5lKHQpKSx0KSxcXFwiQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWRcXFwiOihlLHQpPT4odC5hcHA9dC5hcHA/ey4uLmUuYXBwLC4uLnQuYXBwfTplLmFwcCx0LmFwcC5pc01lZGlhQ2g9by5kZWZhdWx0LmdldElzTWVkaWFDaCh0LnRocmVhZC5jaCksdC5hcHAub2Zmc2V0RmluZElkPW8uZGVmYXVsdC5kZWZhdWx0T2Zmc2V0RmluZElkLHQuYXBwLm9mZnNldFRpbWVsaW5lRmluZElkPW8uZGVmYXVsdC5kZWZhdWx0T2Zmc2V0RmluZElkLHQuYXBwLm9mZnNldE11bHRpRmluZElkPW8uZGVmYXVsdC5kZWZhdWx0T2Zmc2V0RmluZElkLHQuYXBwLm9mZnNldFNpbmdsZUZpbmRJZD1vLmRlZmF1bHQuZGVmYXVsdE9mZnNldEZpbmRJZCx0LmFwcC5vZmZzZXRDaGlsZEZpbmRJZD1vLmRlZmF1bHQuZGVmYXVsdE9mZnNldEZpbmRJZCx0LmFwcC5vZmZzZXRMb2dzRmluZElkPW8uZGVmYXVsdC5kZWZhdWx0T2Zmc2V0RmluZElkLHQudGhyZWFkPXQudGhyZWFkP3suLi5lLnRocmVhZCwuLi50LnRocmVhZH06ZS50aHJlYWQsdC5wb3N0cz1uZXcgYS5kZWZhdWx0LHQucG9zdHNNdWx0aT1uZXcgYS5kZWZhdWx0LHQucG9zdHNDaGlsZD1uZXcgYS5kZWZhdWx0LHQucG9zdHNUaW1lbGluZT1uZXcgYS5kZWZhdWx0LHQucG9zdHNTaW5nbGU9bmV3IGEuZGVmYXVsdCx0KSxcXFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpjaGFuZ2VUaHJlYWRcXFwiOihlLHQpPT4odC5hcHAuaXNSb290Q2g9dC5hcHAucm9vdENoPT09dC50aHJlYWQuY2gsdC5hcHAudHVuZWRDaD10LnRocmVhZC5jaCx0LnRocmVhZC50aXRsZT10LnRocmVhZC5zZXJ2ZXJNZXRhcy50aXRsZSx0LnRocmVhZHM9Yy5kZWZhdWx0LmdldE1lcmdlZFRocmVhZHMoZS50aHJlYWRzLHQudGhyZWFkKSx0LnRocmVhZERldGFpbD17Li4udC50aHJlYWR9LHQpLFxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnVwZGF0ZVRocmVhZFxcXCI6KGUsdCk9Pih0LnRocmVhZHM9Yy5kZWZhdWx0LmdldE1lcmdlZFRocmVhZHMoZS50aHJlYWRzLHQudGhyZWFkKSx0LnRocmVhZERldGFpbD17Li4udC50aHJlYWR9LHQpLFxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnVwZGF0ZVRocmVhZFNlcnZlck1ldGFzXFxcIjooZSx0KT0+KHQudGhyZWFkcz1jLmRlZmF1bHQuZ2V0TWVyZ2VkVGhyZWFkcyhlLnRocmVhZHMsdC50aHJlYWQpLHQudGhyZWFkRGV0YWlsPXsuLi50LnRocmVhZH0sdCksXFxcIlNFUlZFUl9UT19BUElbUkVRVUVTVF06cG9zdFxcXCI6KGUsdCk9Pih0LmFwcC5pbnB1dFN0YW1wSWQ9MCx0KSxcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcXFwiOihlLHQpPT57aWYoZS50aHJlYWQuY2g9PT10LnRocmVhZC5jaCYmdC50aHJlYWQuZW1vdGlvbnMmJk9iamVjdC5rZXlzKHQudGhyZWFkLmVtb3Rpb25zKS5sZW5ndGg+MCl7Y29uc3Qgcz17Li4udC50aHJlYWQuZW1vdGlvbnN9O3QudGhyZWFkLmVtb3Rpb25zPXsuLi5lLnRocmVhZC5lbW90aW9uc30sT2JqZWN0LmtleXMocykuZm9yRWFjaCgoZT0+e09iamVjdC5rZXlzKHNbZV0pLmZvckVhY2goKHI9Pnt0LnRocmVhZC5lbW90aW9uc1tlXVtyXT10LnRocmVhZC5lbW90aW9uc1tlXVtyXStzW2VdW3JdfSkpfSkpLHQudGhyZWFkRGV0YWlsPXsuLi50LnRocmVhZH19cmV0dXJuIHQudGhyZWFkLmNoPWUudGhyZWFkLmNoLHQ9YS5kZWZhdWx0LmdldEFueUFjdGlvblBvc3RzKHQsZSl9LFxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmVcXFwiOihlLHQpPT4odC5hcHAub2Zmc2V0RmluZElkPW8uZGVmYXVsdC5nZXRPZmZzZXRGaW5kSWQoe3Bvc3RzOnQucG9zdHN9KSx0LmFwcFtgb2Zmc2V0JHt0LmFwcC5kaXNwVGhyZWFkVHlwZX1GaW5kSWRgXT10LmFwcC5vZmZzZXRGaW5kSWQsYS5kZWZhdWx0LmdldEFueUFjdGlvblBvc3RzKHQsZSkpLFxcXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZERldGFpbFxcXCI6KGUsdCk9PihkZWxldGUgdC50aHJlYWQsdCksXFxcIlNFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkRGV0YWlsXFxcIjooZSx0KT0+KHQuYXBwLmRldGFpbENoPXQudGhyZWFkLmNoLHQudGhyZWFkcz1jLmRlZmF1bHQuZ2V0TWVyZ2VkVGhyZWFkcyhlLnRocmVhZHMsdC50aHJlYWQpLHQudGhyZWFkRGV0YWlsPXsuLi50LnRocmVhZH0sdC50aHJlYWREZXRhaWwudGl0bGU9dC50aHJlYWQuc2VydmVyTWV0YXMudGl0bGUsdC50aHJlYWREZXRhaWwuZW1vdGlvbnM9ey4uLmUudGhyZWFkc1t0LmFwcC5kZXRhaWxDaF0uZW1vdGlvbnN9LHQudGhyZWFkRGV0YWlsLmhhc1NsYXNoPW51bGw9PT10LnRocmVhZERldGFpbC5oYXNTbGFzaHx8bi5kZWZhdWx0LmdldEJvb2wodC50aHJlYWREZXRhaWwuaGFzU2xhc2gpLGRlbGV0ZSB0LnRocmVhZCx0LnRocmVhZD10LHQpLENMT1NFX0xJTktTOihlLHQpPT4odC5hcHA9dC5hcHA/ey4uLmUuYXBwLC4uLnQuYXBwfTplLmFwcCx0LnRocmVhZD10LnRocmVhZD97Li4uZS50aHJlYWQsLi4udC50aHJlYWR9OmUudGhyZWFkLHQpLE9OX0NMSUNLX1RPX01VTFRJX1RIUkVBRDooZSx0KT0+KHQuYXBwLmlzTGlua0NoPSExLHQuYXBwLmlzUm9vdENoPXQudGhyZWFkLmNoPT09ZS5hcHAucm9vdENoLGUudGhyZWFkc1t0LnRocmVhZC5jaF0/dC50aHJlYWQ9ZS50aHJlYWRzW3QudGhyZWFkLmNoXTp0LnRocmVhZD17Li4uZS50aHJlYWQsLi4udC50aHJlYWR9LHQpLE9OX0NMSUNLX1RPX1RJTUVMSU5FX1RIUkVBRDooZSx0KT0+e2NvbnN0IHM9dC50aHJlYWQuY2g7dC50aHJlYWQ9ey4uLmUudGhyZWFkLC4uLnQudGhyZWFkfSx0LnRocmVhZC5jaD1zO2NvbnN0IHI9by5kZWZhdWx0LmdldE1lZGlhU3JjKHQudGhyZWFkLnByb3RvY29sLHQudGhyZWFkLmNoKTtyZXR1cm4gdC50aHJlYWQuZmluZFR5cGU9dS5kZWZhdWx0LmdldEZpbmRUeXBlRnJvbVNyYyhyKSx0LnBvc3RzVGltZWxpbmU9W10sdC5hcHAuaXNNZWRpYUNoPSEwLHQuYXBwLm9mZnNldEZpbmRJZD1vLmRlZmF1bHQuZGVmYXVsdE9mZnNldEZpbmRJZCx0LmFwcC5vZmZzZXRDaGlsZEZpbmRJZD1vLmRlZmF1bHQuZGVmYXVsdE9mZnNldEZpbmRJZCx0fSxPTl9DTElDS19UT19TSU5HTEVfVEhSRUFEOihlLHQpPT4odC50aHJlYWQ9ey4uLmUudGhyZWFkLC4uLnQudGhyZWFkfSx0LmFwcD1lLmFwcCx0LmFwcC5pc0xpbmtDaD0hMSx0KSxPTl9DTElDS19UT19DSElMRF9USFJFQUQ6KGUsdCk9Pih0LnRocmVhZD17Li4uZS50aHJlYWQsLi4udC50aHJlYWR9LHQucG9zdHNDaGlsZD1bXSx0LmFwcC5vZmZzZXRGaW5kSWQ9by5kZWZhdWx0LmRlZmF1bHRPZmZzZXRGaW5kSWQsdC5hcHAub2Zmc2V0Q2hpbGRGaW5kSWQ9by5kZWZhdWx0LmRlZmF1bHRPZmZzZXRGaW5kSWQsdCksT05fQ0xJQ0tfTUVOVTooZSx0KT0+KHQuYXBwLmRlc2M9dC51aS5tZW51Q29tcG9uZW50LHQpLFJFU0laRV9FTkRfV0lORE9XOihlLHQpPT4odC50aHJlYWQ9ZS50aHJlYWQsdCksT05fQ0xJQ0tfVE9HR0xFX0RJU1BfREVUQUlMOihlLHQpPT4odC50aHJlYWREZXRhaWwuaGFzU2xhc2g9bnVsbD09PXQudGhyZWFkRGV0YWlsLmhhc1NsYXNofHxuLmRlZmF1bHQuZ2V0Qm9vbCh0LnRocmVhZERldGFpbC5oYXNTbGFzaCksdCksVE9HR0xFX0JVQkJMRV9QT1NUOihlLHQpPT4odC50aHJlYWQ9ZS50aHJlYWQsdCksU1RBUlRfTElOS19NRURJQTooZSx0KT0+KHQuYXBwLmlzTGlua0NoPSEwLHQpLEdFVF9DTElFTlRfTUVUQVM6KGUsdCk9PntsZXQgcz0hMSx7Y2xpZW50TWV0YXM6cn09dCx7c2VydmVyTWV0YXM6bn09ZS50aHJlYWQ7aWYodC50aHJlYWQ9e30sT2JqZWN0LmtleXMocikuZm9yRWFjaCgoKGUsaSk9PntyW2VdJiZcXFwiXFxcIiE9PXJbZV0mJm5bZV0hPT1yW2VdJiYodC50aHJlYWQuc2VydmVyTWV0YXN8fCh0LnRocmVhZC5zZXJ2ZXJNZXRhcz17fSkscz0hMCx0LnRocmVhZC5zZXJ2ZXJNZXRhc1tlXT1yW2VdKX0pKSxzKXJldHVybiB0LnRocmVhZERldGFpbD17Li4uZS50aHJlYWREZXRhaWx9LHQudGhyZWFkRGV0YWlsLnNlcnZlck1ldGFzPXsuLi50LnRocmVhZERldGFpbC5zZXJ2ZXJNZXRhcywuLi50LnRocmVhZC5zZXJ2ZXJNZXRhc30sdH19fSw5MzAwOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDE1MzQpKTt0LmRlZmF1bHQ9KGU9bmV3IG4uZGVmYXVsdCx0KT0+dC5hbmFseXplP2UubWVyZ2UodC5hbmFseXplKTplfSw4NDk2OihlLHQpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9KGU9W10sdCk9Plt0LnR5cGUsLi4uZV19LDM5NjY6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoNjkyNikpO3QuZGVmYXVsdD0oZT1uZXcgbi5kZWZhdWx0LHQpPT50LmFwcD9uZXcgbi5kZWZhdWx0KHQuYXBwKTplfSw3MTU3OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDIxNjkpKTt0LmRlZmF1bHQ9KGU9bmV3IG4uZGVmYXVsdCx0KT0+dC5ib290T3B0aW9uP2UubWVyZ2UodC5ib290T3B0aW9uKTplfSw4MjYyOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQucmVkdWNlckZpbGVzPXZvaWQgMDtjb25zdCBuPXMoNTg1NyksaT1yKHMoOTMwMCkpLG89cihzKDg0OTYpKSxhPXIocygzOTY2KSksdT1yKHMoNzE1NykpLGM9cihzKDQzMjYpKSxkPXIocygxMTY5KSksbD1yKHMoODg3MCkpLGg9cihzKDE3MzEpKSxwPXIocyg3ODQ5KSksZj1yKHMoNjczOSkpLFQ9cihzKDc4NCkpLEU9cihzKDIxOSkpLF89cihzKDE1NSkpLGc9cihzKDE4OTUpKSx5PXIocyg4MzcyKSksbT1yKHMoMTQyMikpLEM9cihzKDc0NzQpKSxTPXIocygzNjk1KSksUD1yKHMoNDQpKTt0LnJlZHVjZXJGaWxlcz17YXBwOmEuZGVmYXVsdCx1c2VyOlAuZGVmYXVsdCx0dW5lQ2g6Uy5kZWZhdWx0LHJhbmtzOl8uZGVmYXVsdCx0aHJlYWQ6eS5kZWZhdWx0LHRocmVhZHM6Qy5kZWZhdWx0LHRocmVhZERldGFpbDptLmRlZmF1bHQsYW5hbHl6ZTppLmRlZmF1bHQsYm9vdE9wdGlvbjp1LmRlZmF1bHQsc2V0dGluZzpnLmRlZmF1bHQscG9zdHM6Yy5kZWZhdWx0LHBvc3RzVGltZWxpbmU6cC5kZWZhdWx0LHBvc3RzVGltZWxpbmVTdG9jazpmLmRlZmF1bHQscG9zdHNUaW1lbGluZVplcm86VC5kZWZhdWx0LHBvc3RzVGltZWxpbmVaZXJvQWZ0ZXI6RS5kZWZhdWx0LHBvc3RzTXVsdGk6bC5kZWZhdWx0LHBvc3RzU2luZ2xlOmguZGVmYXVsdCxwb3N0c0NoaWxkOmQuZGVmYXVsdCxhcGlMb2c6by5kZWZhdWx0fSx0LmRlZmF1bHQ9KDAsbi5jb21iaW5lUmVkdWNlcnMpKHQucmVkdWNlckZpbGVzKX0sNDMyNjpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocyg5NDc4KSk7dC5kZWZhdWx0PShlPVtdLHQpPT50LnBvc3RzP25ldyBuLmRlZmF1bHQodC5wb3N0cyk6ZX0sMTE2OTpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocyg5NDc4KSk7dC5kZWZhdWx0PShlPVtdLHQpPT57c3dpdGNoKHQudHlwZSl7Y2FzZVxcXCJBUElfVE9fU0VSVkVSW1JFUVVFU1RdOmNoYW5nZVRocmVhZFxcXCI6cmV0dXJuIG5ldyBuLmRlZmF1bHQ7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcXFwiOmNhc2VcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcXFwiOmlmKHQucG9zdHNDaGlsZCYmdC5wb3N0c0NoaWxkLmxlbmd0aD4wJiZ0LnRocmVhZC5jaD09PXQucG9zdHNDaGlsZFswXS5jaClyZXR1cm5bLi4uZSwuLi50LnBvc3RzQ2hpbGRdO2JyZWFrO2Nhc2VcXFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpnZXRNb3JlXFxcIjppZih0LnBvc3RzQ2hpbGQmJnQucG9zdHNDaGlsZC5sZW5ndGg+MClyZXR1cm5bLi4udC5wb3N0c0NoaWxkLC4uLmVdfXJldHVybiBlfX0sODg3MDpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygzMDApKSxpPXIocyg5NDc4KSk7dC5kZWZhdWx0PShlPVtdLHQpPT57c3dpdGNoKHQudHlwZSl7Y2FzZVxcXCJPTl9DTElDS19NVUxUSVNUUkVBTVxcXCI6cmV0dXJuIHQucG9zdHNNdWx0aTtjYXNlXFxcIkNMSUVOVF9UT19TRVJWRVJbRU1JVF06Y2hhbmdlVGhyZWFkXFxcIjpyZXR1cm4gbmV3IGkuZGVmYXVsdDtjYXNlXFxcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1xcXCI6aWYodC5wb3N0c011bHRpJiZ0LnBvc3RzTXVsdGkubGVuZ3RoPjAmJnQuYXBwLmlzUm9vdENoKXJldHVyblsuLi50LnBvc3RzTXVsdGldO2JyZWFrO2Nhc2VcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcXFwiOmlmKHQucG9zdHNNdWx0aSYmdC5wb3N0c011bHRpLmxlbmd0aD4wJiZ0LmFwcC5yb290Q2g9PT10LnBvc3RzTXVsdGlbMF0uY2gpcmV0dXJuWy4uLmUsLi4udC5wb3N0c011bHRpXTticmVhaztjYXNlXFxcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVxcXCI6aWYodC5wb3N0c011bHRpJiZ0LnBvc3RzTXVsdGkubGVuZ3RoPjApe2xldCBzPVtdO3JldHVybiBlLmxlbmd0aCt0LnBvc3RzTXVsdGkubGVuZ3RoPm4uZGVmYXVsdC5maW5kT25lTGltaXRDbnQ/KHM9Wy4uLnQucG9zdHNNdWx0aSwuLi5lXSxzLnNsaWNlKDAsbi5kZWZhdWx0LmZpbmRPbmVMaW1pdENudCkpOlsuLi50LnBvc3RzTXVsdGksLi4uZV19fXJldHVybiBlfX0sMTczMTpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygzODYpKTt0LmRlZmF1bHQ9KGU9W10sdCk9Pntzd2l0Y2godC50eXBlKXtjYXNlXFxcIk9OX0NMSUNLX01VTFRJU1RSRUFNXFxcIjpyZXR1cm4gdC5wb3N0c1NpbmdsZTtjYXNlXFxcIkFQSV9UT19TRVJWRVJbUkVRVUVTVF06Y2hhbmdlVGhyZWFkXFxcIjpyZXR1cm4gbmV3IG4uZGVmYXVsdDtjYXNlXFxcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1xcXCI6Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFxcXCI6aWYodC5wb3N0c1NpbmdsZSYmdC5wb3N0c1NpbmdsZS5sZW5ndGg+MClyZXR1cm5bLi4uZSwuLi50LnBvc3RzU2luZ2xlXTticmVhaztjYXNlXFxcIlNFUlZFUl9UT19BUElbRU1JVF06Z2V0TW9yZVxcXCI6aWYodC5wb3N0c1NpbmdsZSYmdC5wb3N0c1NpbmdsZS5sZW5ndGg+MClyZXR1cm5bLi4udC5wb3N0c1NpbmdsZSwuLi5lXX1yZXR1cm4gZX19LDc4NDk6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoNTM5MCkpO3QuZGVmYXVsdD0oZT1bXSx0KT0+e3N3aXRjaCh0LnR5cGUpe2Nhc2VcXFwiQVBJX1RPX1NFUlZFUltSRVFVRVNUXTpjaGFuZ2VUaHJlYWRcXFwiOnJldHVybiBuZXcgbi5kZWZhdWx0O2Nhc2VcXFwiVU5NT1VOVF9QT1NUU19USU1FTElORVxcXCI6cmV0dXJuIGUubWFwKChlPT4oZS5kaXNwRmxnPWUuY3VycmVudFRpbWU8PXQubWVkaWFDdXJyZW50VGltZSxlKSkpO2Nhc2VcXFwiQ0xFQVJfUE9TVFNfVElNRUxJTkVcXFwiOnJldHVyblsuLi50LnBvc3RzVGltZWxpbmVdO2Nhc2VcXFwiU0VSVkVSX1RPX0FQSVtFTUlUXTpmZXRjaFBvc3RzXFxcIjpjYXNlXFxcIk5FWFRfUE9TVFNfVElNRUxJTkVcXFwiOmlmKHQucG9zdHNUaW1lbGluZSYmdC5wb3N0c1RpbWVsaW5lLmxlbmd0aD4wKXJldHVyblsuLi5lLC4uLnQucG9zdHNUaW1lbGluZV07YnJlYWs7Y2FzZVxcXCJQUkVWX1BPU1RTX1RJTUVMSU5FXFxcIjppZih0LnBvc3RzVGltZWxpbmUmJnQucG9zdHNUaW1lbGluZS5sZW5ndGg+MClyZXR1cm5bLi4udC5wb3N0c1RpbWVsaW5lXTticmVhaztjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XFxcIjppZih0LnBvc3RzVGltZWxpbmUmJnQucG9zdHNUaW1lbGluZS5sZW5ndGg+MCYmdC5wb3N0c1RpbWVsaW5lWzBdLnVpZD09PXQudXNlci51aWQmJnQucG9zdHNUaW1lbGluZVswXS5jaD09PXQudGhyZWFkLmNoKXJldHVyblsuLi5lLC4uLnQucG9zdHNUaW1lbGluZV07YnJlYWs7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmdldE1vcmVcXFwiOmlmKHQucG9zdHNUaW1lbGluZSYmdC5wb3N0c1RpbWVsaW5lLmxlbmd0aD4wKXJldHVyblsuLi50LnBvc3RzVGltZWxpbmUsLi4uZV19cmV0dXJuIGV9fSw2NzM5OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDEwODMpKTt0LmRlZmF1bHQ9KGU9W10sdCk9Pntzd2l0Y2godC50eXBlKXtjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XFxcIjpjYXNlXFxcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXFxcIjpyZXR1cm4gdC5wb3N0c1RpbWVsaW5lU3RvY2s/Wy4uLmUsdC5wb3N0c1RpbWVsaW5lU3RvY2tdOmU7ZGVmYXVsdDpyZXR1cm4gdC5wb3N0c1RpbWVsaW5lU3RvY2s/bmV3IG4uZGVmYXVsdCh0LnBvc3RzVGltZWxpbmVTdG9jayk6ZX19fSw3ODQ6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMjM0MikpO3QuZGVmYXVsdD0oZT1bXSx0KT0+e3N3aXRjaCh0LnR5cGUpe2Nhc2VcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcXFwiOmNhc2VcXFwiQ0xFQVJfUE9TVFNfVElNRUxJTkVcXFwiOnJldHVybiB0LnBvc3RzVGltZWxpbmVaZXJvP1suLi5lLHQucG9zdHNUaW1lbGluZVplcm9dOmU7ZGVmYXVsdDpyZXR1cm4gdC5wb3N0c1RpbWVsaW5lWmVybz9uZXcgbi5kZWZhdWx0KHQucG9zdHNUaW1lbGluZVplcm8pOmV9fX0sMjE5OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDMxODkpKTt0LmRlZmF1bHQ9KGU9W10sdCk9Pntzd2l0Y2godC50eXBlKXtjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XFxcIjpjYXNlXFxcIkNMRUFSX1BPU1RTX1RJTUVMSU5FXFxcIjpyZXR1cm4gdC5wb3N0c1RpbWVsaW5lWmVyb0FmdGVyP1suLi5lLHQucG9zdHNUaW1lbGluZVplcm9BZnRlcl06ZTtkZWZhdWx0OnJldHVybiB0LnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXI/bmV3IG4uZGVmYXVsdCh0LnBvc3RzVGltZWxpbmVaZXJvQWZ0ZXIpOmV9fX0sMTU1OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDk0NzgpKTt0LmRlZmF1bHQ9KGU9W10sdCk9PntsZXQgcz1bXSxyPTA7Y29uc3QgaT0oZSxzKT0+ZS5jaD09PXQuYXBwLnJvb3RDaHx8cy5jaD09PXQuYXBwLnJvb3RDaD8wOmUubGl2ZUNudDxzLmxpdmVDbnQ/MTplLmxpdmVDbnQ+cy5saXZlQ250Py0xOjA7c3dpdGNoKHQudHlwZSl7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOmZldGNoUG9zdHNcXFwiOnJldHVybiB0LmFwcC5pc0xpbmtDaD9lOihzPW4uZGVmYXVsdC5nZXREaXNwUG9zdHModCkscj1zJiZzLmxlbmd0aD9zLmxlbmd0aDowLDA9PT1yP2U6ZS5tYXAoKGU9PnQudGhyZWFkLmNoPT09ZS5jaD97Li4uZSxmYXZpY29uOnNbci0xXS5mYXZpY29uLHN0YW1wSWQ6c1tyLTFdLnN0YW1wSWQscG9zdDpzW3ItMV0ucG9zdH06ZSkpKTtjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTp0dW5lXFxcIjpjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWRcXFwiOmNhc2VcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmRpc2Nvbm5lY3RcXFwiOnJldHVybiBlLm1hcCgoZT0+dC50aHJlYWQuY2g9PT1lLmNoP3suLi5lLGxpdmVDbnQ6dC50aHJlYWQubGl2ZUNudH06ZSkpLnNvcnQoaSk7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFxcXCI6cmV0dXJuIGUubWFwKChlPT50LnBvc3RzWzBdLmNoPT09ZS5jaD97Li4uZSx0aXRsZTp0LnBvc3RzWzBdLnRpdGxlLHN0YW1wSWQ6dC5wb3N0c1swXS5zdGFtcElkLGZhdmljb246dC5wb3N0c1swXS5mYXZpY29uLHBvc3Q6dC5wb3N0c1swXS5wb3N0fTplKSk7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnJhbmtcXFwiOmlmKGUmJmUubGVuZ3RoPjAmJnQucmFuayYmdC5yYW5rLmxlbmd0aD4wKXtjb25zdCBzPVtdLHI9dC5yYW5rLmxlbmd0aDtsZXQgbj10LnJhbmtbMF07Zm9yKGxldCBpPTA7aTxyO2krKyl7bGV0IHI9dC5yYW5rW2ldO249ci51cGRhdGVUaW1lPm4udXBkYXRlVGltZT9yOm4sci5jaD09PWVbMF0uY2gmJihyPXsuLi5yLGxpdmVDbnQ6ZVswXS5saXZlQ250fSkscy5wdXNoKHIpfXJldHVybiBzLnNvcnQoaSksc1swXS5mYWljb249bi5mYXZpY29uLHNbMF0ucG9zdD1uLnBvc3Qsc1swXS5zdGFtcElkPW4uc3RhbXBJZCxzfXJldHVybiB0LnJhbms/dC5yYW5rOmU7ZGVmYXVsdDpyZXR1cm4gdC5yYW5rP3QucmFuazplfX19LDE4OTU6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoNDkxOSkpO3QuZGVmYXVsdD0oZT1uZXcgbi5kZWZhdWx0LHQpPT50LnNldHRpbmc/ZS5tZXJnZSh0LnNldHRpbmcpOmV9LDgzNzI6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoODA5MSkpO3QuZGVmYXVsdD0oZT1uZXcgbi5kZWZhdWx0KHt9LHt9KSx0KT0+e3N3aXRjaCh0LnR5cGUpe2Nhc2VcXFwiU0VUVVBFRF9BUElfU1RPUkVcXFwiOmNhc2VcXFwiU0VSVkVSX1RPX0FQSVtFTUlUXTp0dW5lXFxcIjpjYXNlXFxcIlNFUlZFUl9UT19BUElbRU1JVF06Y2hhbmdlVGhyZWFkXFxcIjpjYXNlXFxcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1xcXCI6Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnVwZGF0ZVRocmVhZFNlcnZlck1ldGFzXFxcIjpyZXR1cm4gbmV3IG4uZGVmYXVsdCh0LnRocmVhZCk7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06dHVuZVxcXCI6Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06Y2hhbmdlVGhyZWFkXFxcIjpjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpkaXNjb25uZWN0XFxcIjppZihlLmNoPT09dC50aHJlYWQuY2gpcmV0dXJuIHQudGhyZWFkP2UubWVyZ2UodC50aHJlYWQpOmU7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0JST0FEQ0FTVF06cG9zdFxcXCI6aWYoZS5jaD09PXQudGhyZWFkLmNoKXJldHVybiB0LnRocmVhZD9lLm1lcmdlKHQudGhyZWFkKTplfXJldHVybiBlfX0sMTQyMjpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocyg4MDkxKSk7dC5kZWZhdWx0PShlPW5ldyBuLmRlZmF1bHQoe30se30pLHQpPT50LnRocmVhZERldGFpbD9lLm1lcmdlKHQudGhyZWFkRGV0YWlsKTplfSw3NDc0OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDk3OCkpO3QuZGVmYXVsdD0oZT1uZXcgbi5kZWZhdWx0LHQpPT50LnRocmVhZHM/ZS5tZXJnZSh0LnRocmVhZHMpOmV9LDM2OTU6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMjc0OSkpO3QuZGVmYXVsdD0oZT1uZXcgbi5kZWZhdWx0LHQpPT57c3dpdGNoKHQudHlwZSl7Y2FzZVxcXCJTRVJWRVJfVE9fQVBJW0VNSVRdOnR1bmVcXFwiOnJldHVyblxcXCJcXFwiPT09dC50aHJlYWQubGFzdFBvc3QuY2g/bmV3IG4uZGVmYXVsdCh7Y2g6dC50aHJlYWQuY2gsY2hzOnQudGhyZWFkLmNocyx0aXRsZTp0LnRocmVhZC50aXRsZSxmYXZpY29uOnQudGhyZWFkLmZhdmljb259KTpuZXcgbi5kZWZhdWx0KHQudGhyZWFkLmxhc3RQb3N0KTtjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTp0dW5lXFxcIjpjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpjaGFuZ2VUaHJlYWRcXFwiOmNhc2VcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOmRpc2Nvbm5lY3RcXFwiOmNvbnN0e3RocmVhZDpzfT10O2lmKHMuY2g9PT1lLmNoKXtjb25zdCB0PXsuLi5lLGxpdmVDbnQ6cy5saXZlQ250fTtyZXR1cm4gbmV3IG4uZGVmYXVsdCh0KX1icmVhaztjYXNlXFxcIlNFUlZFUl9UT19BUElbQlJPQURDQVNUXTpwb3N0XFxcIjpjb25zdCByPXQucG9zdHNbMF07aWYoci5jaD09PWUuY2gpcmV0dXJuIG5ldyBuLmRlZmF1bHQoey4uLmUsdGl0bGU6ci50aXRsZSxzdGFtcElkOnIuc3RhbXBJZCxmYXZpY29uOnIuZmF2aWNvbixwb3N0OnIucG9zdH0pfXJldHVybiBlfX0sNDQ6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoNzQ0NCkpO3QuZGVmYXVsdD0oZT1uZXcgbi5kZWZhdWx0LHQpPT50LnVzZXI/ZS5tZXJnZSh0LnVzZXIpOmV9LDgxODg6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe3JldHVybltdfX19LDE1MzQ6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTIxNikpO2NsYXNzIGkgZXh0ZW5kcyBuLmRlZmF1bHR7Y29uc3RydWN0b3IoZT17fSl7cmV0dXJuIHN1cGVyKCksdGhpcy5jcmVhdGUoe2xpdmVDbnQ6MH0pfX10LmRlZmF1bHQ9aX0sNjkyNjpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygxMjE2KSksaT1yKHMoMjc0OSkpLG89cihzKDgwOTEpKTtjbGFzcyBhIGV4dGVuZHMgbi5kZWZhdWx0e2NvbnN0cnVjdG9yKGU9e30sdD1cXFwiXFxcIil7c3VwZXIoKSx0aGlzLm9mZnNldFRpbWVsaW5lRmluZElkPWkuZGVmYXVsdC5kZWZhdWx0RmluZElkLHRoaXMub2Zmc2V0U2luZ2xlRmluZElkPWkuZGVmYXVsdC5kZWZhdWx0RmluZElkLHRoaXMub2Zmc2V0TXVsdGlGaW5kSWQ9aS5kZWZhdWx0LmRlZmF1bHRGaW5kSWQsdGhpcy5vZmZzZXRDaGlsZEZpbmRJZD1pLmRlZmF1bHQuZGVmYXVsdEZpbmRJZCx0aGlzLm9mZnNldExvZ3NGaW5kSWQ9aS5kZWZhdWx0LmRlZmF1bHRGaW5kSWQ7Y29uc3Qgcz1lLmNoP2UuY2g6XFxcIlxcXCIscj1lLmlkP2UuaWQ6XFxcIlxcXCIsdT0hIW4uZGVmYXVsdC5pc1NldChlLmlzVHVuZSkmJmUuaXNUdW5lLGM9bi5kZWZhdWx0LmlzU2V0KGUuaXNNZWRpYUNoKT9lLmlzTWVkaWFDaDphLmdldElzTWVkaWFDaChzKSxkPSEhbi5kZWZhdWx0LmlzU2V0KGUuaXNMaW5rQ2gpJiZlLmlzTGlua0NoLGw9ZS5yb290Q2g/ZS5yb290Q2g6cyxoPW4uZGVmYXVsdC5pc1NldChlLmlzUm9vdENoKT9lLmlzUm9vdENoOmw9PT1zLHA9ZS5yb290VGl0bGU/ZS5yb290VGl0bGU6XFxcInRhbGtuXFxcIixmPWEuZ2V0TWVkaWFTcmMoZS5wcm90b2NvbCxzKSxUPWEuZ2V0TWVkaWFUeXBlKGYsZSksRT1lJiZlLnR1bmVkQ2g/ZS50dW5lZENoOlxcXCJcXFwiLF89YS5nZXREaXNwVGhyZWFkVHlwZShlLGMpLGc9IW4uZGVmYXVsdC5pc1NldChlLm11bHRpc3RyZWFtKXx8ZS5tdWx0aXN0cmVhbSx5PWUmJmUuZmluZFR5cGU/ZS5maW5kVHlwZTpvLmRlZmF1bHQuZmluZFR5cGVBbGwsbT1lJiZlLm9mZnNldEZpbmRJZD9lLm9mZnNldEZpbmRJZDphLmRlZmF1bHRPZmZzZXRGaW5kSWQsQz1lJiZlLm9mZnNldFRpbWVsaW5lRmluZElkP2Uub2Zmc2V0VGltZWxpbmVGaW5kSWQ6YS5kZWZhdWx0T2Zmc2V0RmluZElkLFM9ZSYmZS5vZmZzZXRTaW5nbGVGaW5kSWQ/ZS5vZmZzZXRTaW5nbGVGaW5kSWQ6YS5kZWZhdWx0T2Zmc2V0RmluZElkLFA9ZSYmZS5vZmZzZXRNdWx0aUZpbmRJZD9lLm9mZnNldE11bHRpRmluZElkOmEuZGVmYXVsdE9mZnNldEZpbmRJZCxPPWUmJmUub2Zmc2V0Q2hpbGRGaW5kSWQ/ZS5vZmZzZXRDaGlsZEZpbmRJZDphLmRlZmF1bHRPZmZzZXRGaW5kSWQsST1lJiZlLm9mZnNldExvZ3NGaW5kSWQ/ZS5vZmZzZXRMb2dzRmluZElkOmEuZGVmYXVsdE9mZnNldEZpbmRJZCxBPWUuaW5wdXRQb3N0P2UuaW5wdXRQb3N0OlxcXCJcXFwiLGI9ISFlLmlucHV0U3RhbXBJZCYmZS5pbnB1dFN0YW1wSWQsUj1lLmlucHV0Q3VycmVudFRpbWU/ZS5pbnB1dEN1cnJlbnRUaW1lOjAsdj1lLmlucHV0U2VhcmNoP2UuaW5wdXRTZWFyY2g6XFxcIlxcXCIsTT0hIW4uZGVmYXVsdC5pc1NldChlLmlzVG9nZ2xlTXVsdGlzdHJlYW0pJiZlLmlzVG9nZ2xlTXVsdGlzdHJlYW0sdz0hIW4uZGVmYXVsdC5pc1NldChlLmlzUmFua0RldGFpbE1vZGUpJiZlLmlzUmFua0RldGFpbE1vZGUsRD1lJiZlLmFjdGlvbmVkP2UuYWN0aW9uZWQ6XFxcIlxcXCIsTD1uLmRlZmF1bHQuaXNTZXQoZS5kZWJ1Zyk/ZS5kZWJ1ZzpcXFwiXFxcIjtyZXR1cm4gdGhpcy5jcmVhdGUoe2lkOnIsaXNUdW5lOnUsaXNSb290Q2g6aCxpc0xpbmtDaDpkLGlzTWVkaWFDaDpjLHJvb3RDaDpsLHJvb3RUaXRsZTpwLGNoVHlwZTpULGRpc3BUaHJlYWRUeXBlOl8sdHVuZWRDaDpFLG11bHRpc3RyZWFtOmcsZmluZFR5cGU6eSxvZmZzZXRGaW5kSWQ6bSxvZmZzZXRUaW1lbGluZUZpbmRJZDpDLG9mZnNldFNpbmdsZUZpbmRJZDpTLG9mZnNldE11bHRpRmluZElkOlAsb2Zmc2V0Q2hpbGRGaW5kSWQ6TyxvZmZzZXRMb2dzRmluZElkOkksaW5wdXRQb3N0OkEsaW5wdXRTdGFtcElkOmIsaW5wdXRDdXJyZW50VGltZTpSLGlucHV0U2VhcmNoOnYsaXNUb2dnbGVNdWx0aXN0cmVhbTpNLGlzUmFua0RldGFpbE1vZGU6dyxhY3Rpb25lZDpELGRlYnVnOkx9KX1zdGF0aWMgZ2V0IGRlZmF1bHRPZmZzZXRGaW5kSWQoKXtyZXR1cm4gaS5kZWZhdWx0LmRlZmF1bHRGaW5kSWR9c3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZVRpbWVsaW5lKCl7cmV0dXJuXFxcIlRpbWVsaW5lXFxcIn1zdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlU2luZ2xlKCl7cmV0dXJuXFxcIlNpbmdsZVxcXCJ9c3RhdGljIGdldCBkaXNwVGhyZWFkVHlwZU11bHRpKCl7cmV0dXJuXFxcIk11bHRpXFxcIn1zdGF0aWMgZ2V0IGRpc3BUaHJlYWRUeXBlQ2hpbGQoKXtyZXR1cm5cXFwiQ2hpbGRcXFwifXN0YXRpYyBnZXQgZGlzcFRocmVhZFR5cGVMb2dzKCl7cmV0dXJuXFxcIkxvZ3NcXFwifXN0YXRpYyBnZXQgbWVkaWFUYWdUeXBlTm8oKXtyZXR1cm5cXFwiaHRtbFxcXCJ9c3RhdGljIGdldCBtZWRpYVRhZ1R5cGVBdWRpbygpe3JldHVyblxcXCJhdWRpb1xcXCJ9c3RhdGljIGdldCBtZWRpYVRhZ1R5cGVWaWRlbygpe3JldHVyblxcXCJ2aWRlb1xcXCJ9c3RhdGljIGdldCBtZWRpYVR5cGVNcDMoKXtyZXR1cm5cXFwibXAzXFxcIn1zdGF0aWMgZ2V0IG1lZGlhVHlwZU1wNCgpe3JldHVyblxcXCJtcDRcXFwifXN0YXRpYyBnZXQgbWVkaWFUeXBlTTRhKCl7cmV0dXJuXFxcIm00YVxcXCJ9c3RhdGljIGdldCBtZWRpYUNocygpe3JldHVyblthLm1lZGlhVHlwZU1wMyxhLm1lZGlhVHlwZU1wNCxhLm1lZGlhVHlwZU00YV19c3RhdGljIGdldCBtZWRpYUNoVGFnVHlwZXMoKXtyZXR1cm57W2EubWVkaWFUeXBlTXAzXTphLm1lZGlhVGFnVHlwZUF1ZGlvLFthLm1lZGlhVHlwZU1wNF06YS5tZWRpYVRhZ1R5cGVWaWRlbyxbYS5tZWRpYVR5cGVNNGFdOmEubWVkaWFUYWdUeXBlQXVkaW99fXN0YXRpYyBnZXRNZWRpYVR5cGUoZSx0KXtyZXR1cm4gdCYmdC5jaFR5cGU/dC5jaFR5cGU6YS5nZXRNZWRpYVR5cGVGcm9tU3JjKGUpfXN0YXRpYyBnZXRNZWRpYVR5cGVGcm9tU3JjKGUpe2NvbnN0IHQ9T2JqZWN0LmtleXMoYS5tZWRpYUNoVGFnVHlwZXMpLHM9dC5sZW5ndGg7bGV0IHI9XFxcImh0bWxcXFwiO2ZvcihsZXQgbj0wO248cztuKyspe2NvbnN0IHM9bmV3IFJlZ0V4cChgLiR7dFtuXX0kYCk7aWYoZS5tYXRjaChzKSl7cj1hLm1lZGlhQ2hUYWdUeXBlc1t0W25dXTticmVha319cmV0dXJuIHJ9c3RhdGljIHZhbGlkSW5wdXRQb3N0KGUpe3JldHVybiEhL1xcXFxyXFxcXG4kfFxcXFxuJHxcXFxcciQvZ2ltLnRlc3QoZSkmJlxcXCJMQVNUIFRZUEUgQlJFQUsgTElORS5cXFwifXN0YXRpYyB2YWxpZFBvc3QoZSl7cmV0dXJuXFxcIlxcXCI9PT1lP1xcXCJOTyBJTlBVVCBQT1NUXFxcIjovXlxcXFxyXFxcXG4rJHxcXFxcbiskfFxcXFxyKyQvZy50ZXN0KGUpP1xcXCJPTkxZIE5FVyBMSU5FXFxcIjovXlxcXFxzKyQvZy50ZXN0KGUpP1xcXCJvbmx5IHNwYWNlXFxcIjohIS9eXFxcXHJcXFxcbisoXFxcXHN8XFxcXFMpKyR8XlxcXFxuKyhcXFxcc3xcXFxcUykrJHxeXFxcXHIrKFxcXFxzfFxcXFxTKSskLy50ZXN0KGUpJiZcXFwiRU1QVFkgUE9TVFxcXCJ9c3RhdGljIGdldFdpZHRoKGUpe3JldHVyblxcXCJvYmplY3RcXFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuaW5uZXJXaWR0aD93aW5kb3cuaW5uZXJXaWR0aDplLndpZHRoP1xcXCJzdHJpbmdcXFwiPT10eXBlb2YgZS53aWR0aCYmZS53aWR0aC5pbmRleE9mKFxcXCJweFxcXCIpPj0wP051bWJlcihlLndpZHRoLnJlcGxhY2UoXFxcInB4XFxcIixcXFwiXFxcIikpOmUud2lkdGg6MH1zdGF0aWMgZ2V0SGVpZ2h0KGU9e30pe3JldHVyblxcXCJvYmplY3RcXFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuaW5uZXJIZWlnaHQ/d2luZG93LmlubmVySGVpZ2h0OjB9c3RhdGljIGlzTWVkaWFDb250ZW50VHlwZShlKXtyZXR1cm4gYS5pc0F1ZGlvQ29udGVudFR5cGUoZSl8fGEuaXNWaWRlb0NvbnRlbnRUeXBlKGUpfXN0YXRpYyBpc0F1ZGlvQ29udGVudFR5cGUoZSl7cmV0dXJuIGUuaW5kZXhPZihhLm1lZGlhVGFnVHlwZUF1ZGlvKT49MH1zdGF0aWMgaXNWaWRlb0NvbnRlbnRUeXBlKGUpe3JldHVybiBlLmluZGV4T2YoYS5tZWRpYVRhZ1R5cGVWaWRlbyk+PTB9c3RhdGljIGdldE1lZGlhU3JjKGUsdCl7cmV0dXJuIGUrXFxcIi9cXFwiK3QucmVwbGFjZSgvXFxcXC8kLyxcXFwiXFxcIil9c3RhdGljIGdldElzTWVkaWFDaChlKXtyZXR1cm4gYS5tZWRpYUNocy5zb21lKCh0PT57Y29uc3Qgcz1uZXcgUmVnRXhwKGAuJHt0fS8kfC4ke3R9JGApO3JldHVybiBlLm1hdGNoKHMpfSkpfXN0YXRpYyBnZXREaXNwVGhyZWFkVHlwZShlLHQpe3JldHVybiBlJiZlLmRpc3BUaHJlYWRUeXBlP2UuZGlzcFRocmVhZFR5cGU6dD9hLmRpc3BUaHJlYWRUeXBlVGltZWxpbmU6YS5kaXNwVGhyZWFkVHlwZU11bHRpfXN0YXRpYyBnZXRPZmZzZXRGaW5kSWQoe3Bvc3RzOmV9KXtyZXR1cm4gZSYmZVswXSYmZVswXS5faWQ/ZVswXS5faWQ6aS5kZWZhdWx0LmRlZmF1bHRGaW5kSWR9c3RhdGljIGdldFN0ZXBUb0Rpc3BUaHJlYWRUeXBlKHthcHA6ZSxyYW5rczp0fSxzLHIsbj1cXFwiXFxcIil7bGV0IGk9XFxcIlxcXCI7Y29uc3Qgbz1lJiZlLmRpc3BUaHJlYWRUeXBlP2UuZGlzcFRocmVhZFR5cGU6YS5kaXNwVGhyZWFkVHlwZU11bHRpO3JldHVybiBpPShlPWEuZ2V0U3RlcERpc3BUaHJlYWRUeXBlKHthcHA6ZSxyYW5rczp0fSxzLHIsbikpLmRpc3BUaHJlYWRUeXBlLHthcHA6ZSxzdGVwVG86YCR7b30gdG8gJHtpfWB9fXN0YXRpYyBnZXRTdGVwRGlzcFRocmVhZFR5cGUoe2FwcDplLHJhbmtzOnR9LHM9e30scixuKXtjb25zdCBpPWV8fHt9O2lmKGkub2Zmc2V0RmluZElkPWEuZGVmYXVsdE9mZnNldEZpbmRJZCxzLmlzTWVkaWFDaClyZXR1cm4gaS5kaXNwVGhyZWFkVHlwZT1hLmRpc3BUaHJlYWRUeXBlVGltZWxpbmUsaS5vZmZzZXRGaW5kSWQ9aS5vZmZzZXRUaW1lbGluZUZpbmRJZD9pLm9mZnNldFRpbWVsaW5lRmluZElkOmEuZGVmYXVsdE9mZnNldEZpbmRJZCxpLmlzTGlua0NoPVxcXCJMaW5rc1xcXCI9PT1ufHxcXFwiZmluZE1lZGlhQ2hcXFwiPT09bnx8XFxcIlRvTWVkaWFcXFwiPT09bixpLmlzTWVkaWFDaD0hMCxpO2lmKFxcXCJCYWNrVG9Sb290Q2hcXFwiPT09biYmKGkuaXNMaW5rQ2g9ITEpLFxcXCJMaW5rc1xcXCI9PT1uJiZ0Lmxlbmd0aD4wKXtpZighdC5zb21lKChlPT5lLmNoPT09cnx8ZS5jaD09PXIrXFxcIi9cXFwiKSkpcmV0dXJuIGkub2Zmc2V0RmluZElkPWEuZGVmYXVsdE9mZnNldEZpbmRJZCxpLmRpc3BUaHJlYWRUeXBlPWEuZGlzcFRocmVhZFR5cGVDaGlsZCxpLmlzTGlua0NoPSEwLGl9cmV0dXJuIGkucm9vdENoPT09cj9pLm11bHRpc3RyZWFtP2kuZGlzcFRocmVhZFR5cGU9YS5kaXNwVGhyZWFkVHlwZU11bHRpOmkuZGlzcFRocmVhZFR5cGU9YS5kaXNwVGhyZWFkVHlwZVNpbmdsZTppLmRpc3BUaHJlYWRUeXBlPWEuZGlzcFRocmVhZFR5cGVDaGlsZCxpfX10LmRlZmF1bHQ9YX0sMjE2OTpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygxMjE2KSk7Y2xhc3MgaSBleHRlbmRzIG4uZGVmYXVsdHtjb25zdHJ1Y3RvcihlPXt9KXtyZXR1cm4gc3VwZXIoKSx0aGlzLmNyZWF0ZSh7Li4uZX0pfXN0YXRpYyByZWJ1aWxkQXR0cmlidXRlcyhlKXtsZXQgdD17fTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgocz0+e3RbZVtzXS5uYW1lXT1lW3NdLnZhbHVlfSkpLHR9fXQuZGVmYXVsdD1pfSw4NDU1OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDEyMTYpKTtjbGFzcyBpIGV4dGVuZHMgbi5kZWZhdWx0e2NvbnN0cnVjdG9yKGU9W10pe3JldHVybiBzdXBlcigpLGU9ZXx8W10sdGhpcy5jcmVhdGUoZSl9fXQuZGVmYXVsdD1pfSwyNzQ5OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDEyMTYpKSxpPXIocygzMDApKTtjbGFzcyBvIGV4dGVuZHMgbi5kZWZhdWx0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKCksdGhpcy5faWQ9by5kZWZhdWx0VmFsdWVzLl9pZCx0aGlzLmNoPW8uZGVmYXVsdFZhbHVlcy5jaCx0aGlzLmNocz1vLmRlZmF1bHRWYWx1ZXMuY2hzLHRoaXMuZmF2aWNvbj1vLmRlZmF1bHRWYWx1ZXMuZmF2aWNvbix0aGlzLmZpbmRUeXBlPW8uZGVmYXVsdFZhbHVlcy5maW5kVHlwZSx0aGlzLmxheWVyPW8uZGVmYXVsdFZhbHVlcy5sYXllcix0aGlzLnBvc3Q9by5kZWZhdWx0VmFsdWVzLnBvc3QsdGhpcy5wcm90b2NvbD1vLmRlZmF1bHRWYWx1ZXMucHJvdG9jb2wsdGhpcy5zdGFtcElkPW8uZGVmYXVsdFZhbHVlcy5zdGFtcElkLHRoaXMudGl0bGU9by5kZWZhdWx0VmFsdWVzLnRpdGxlLHRoaXMubGl2ZUNudD1vLmRlZmF1bHRWYWx1ZXMubGl2ZUNudCx0aGlzLnVpZD1vLmRlZmF1bHRWYWx1ZXMudWlkLHRoaXMudXR5cGU9by5kZWZhdWx0VmFsdWVzLnV0eXBlLHRoaXMuZGlzcEZsZz1vLmRlZmF1bHRWYWx1ZXMuZGlzcEZsZyx0aGlzLmRhdGE9by5kZWZhdWx0VmFsdWVzLmRhdGEsdGhpcy5jcmVhdGVUaW1lPW8uZGVmYXVsdFZhbHVlcy5jcmVhdGVUaW1lLHRoaXMuY3VycmVudFRpbWU9by5kZWZhdWx0VmFsdWVzLmN1cnJlbnRUaW1lLHRoaXMudXBkYXRlVGltZT1vLmRlZmF1bHRWYWx1ZXMudXBkYXRlVGltZTtjb25zdCB0PWU/ey4uLm8uZGVmYXVsdFZhbHVlcywuLi5lfTpvLmRlZmF1bHRWYWx1ZXM7cmV0dXJuIHRoaXMuY3JlYXRlKHQpfXN0YXRpYyBnZXQgZGVmYXVsdEZpbmRJZCgpe3JldHVyblxcXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcXFwifXN0YXRpYyBnZXQgZGVmYXVsdFZhbHVlcygpe3JldHVybntfaWQ6XFxcIlxcXCIsY2g6XFxcIi9cXFwiLGNoczpbXFxcIi9cXFwiXSxmYXZpY29uOmkuZGVmYXVsdC5kZWZhdWx0RmF2aWNvbixmaW5kVHlwZTpcXFwiSHRtbFxcXCIsbGF5ZXI6MSxwb3N0OlxcXCJcXFwiLHByb3RvY29sOlxcXCJodHRwczpcXFwiLHN0YW1wSWQ6MCx0aXRsZTpcXFwidGFsa25cXFwiLGxpdmVDbnQ6MCx1aWQ6XFxcIlxcXCIsdXR5cGU6XFxcIlxcXCIsZGlzcEZsZzohMCxkYXRhOm51bGwsY3JlYXRlVGltZTpuZXcgRGF0ZSxjdXJyZW50VGltZTpuZXcgRGF0ZSx1cGRhdGVUaW1lOm5ldyBEYXRlfX19dC5kZWZhdWx0PW99LDUxNTQ6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlPVtdKXtyZXR1cm4gZX19fSw5NDc4OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDY5MjYpKSxpPXIocyg1MTU0KSksbz1yKHMoMzg2KSksYT1yKHMoNTM5MCkpLHU9cihzKDEwODMpKTtjbGFzcyBje2NvbnN0cnVjdG9yKGU9W10pe3JldHVybiBlfXN0YXRpYyBnZXREaXNwUG9zdHMoZSl7Y29uc3R7YXBwOnQscG9zdHNUaW1lbGluZTpzLHBvc3RzTXVsdGk6cixwb3N0c1NpbmdsZTppLHBvc3RzQ2hpbGQ6byxwb3N0c0xvZ3M6YX09ZTtzd2l0Y2godC5kaXNwVGhyZWFkVHlwZSl7Y2FzZSBuLmRlZmF1bHQuZGlzcFRocmVhZFR5cGVUaW1lbGluZTpyZXR1cm4gcztjYXNlIG4uZGVmYXVsdC5kaXNwVGhyZWFkVHlwZU11bHRpOnJldHVybiByO2Nhc2Ugbi5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlU2luZ2xlOnJldHVybiBpO2Nhc2Ugbi5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlQ2hpbGQ6cmV0dXJuIG87Y2FzZSBuLmRlZmF1bHQuZGlzcFRocmVhZFR5cGVMb2dzOnJldHVybiBhfX1zdGF0aWMgZ2V0QW55QWN0aW9uUG9zdHMoZSx0KXtjb25zdHthcHA6cyxwb3N0czpyfT1lLGE9ciYmci5sZW5ndGg+MDtzd2l0Y2goZS5wb3N0c011bHRpPW5ldyBpLmRlZmF1bHQsZS5wb3N0c1NpbmdsZT1uZXcgby5kZWZhdWx0LGUucG9zdHNDaGlsZD1bXSxlLnBvc3RzTG9ncz1bXSxzLmRpc3BUaHJlYWRUeXBlKXtjYXNlIG4uZGVmYXVsdC5kaXNwVGhyZWFkVHlwZVRpbWVsaW5lOmU9Yy5nZXRBbnlBY3Rpb25Qb3N0c1RpbWVsaW5lKGUscix0LGEpO2JyZWFrO2Nhc2Ugbi5kZWZhdWx0LmRpc3BUaHJlYWRUeXBlTXVsdGk6ZS5wb3N0c011bHRpPWE/cjpbXTticmVhaztjYXNlIG4uZGVmYXVsdC5kaXNwVGhyZWFkVHlwZVNpbmdsZTplLnBvc3RzU2luZ2xlPWE/cjpbXTticmVhaztjYXNlIG4uZGVmYXVsdC5kaXNwVGhyZWFkVHlwZUNoaWxkOmUucG9zdHNDaGlsZD1hP3I6W107YnJlYWs7Y2FzZSBuLmRlZmF1bHQuZGlzcFRocmVhZFR5cGVMb2dzOmUucG9zdHNMb2dzPWE/cjpbXX1yZXR1cm4gZX1zdGF0aWMgZ2V0QW55QWN0aW9uUG9zdHNUaW1lbGluZShlLHQscyxyKXtpZihcXFwiU0VSVkVSX1RPX0FQSVtCUk9BRENBU1RdOnBvc3RcXFwiPT09ZS50eXBlKWUucG9zdHNUaW1lbGluZT1uZXcgYS5kZWZhdWx0LGUucG9zdHNUaW1lbGluZS5wdXNoKGUucG9zdHNbMF0pO2Vsc2UgaWYoXFxcIlNFUlZFUl9UT19BUElbRU1JVF06ZmV0Y2hQb3N0c1xcXCI9PT1lLnR5cGUmJihlLnBvc3RzVGltZWxpbmU9bmV3IGEuZGVmYXVsdCxlLnBvc3RzVGltZWxpbmVTdG9jaz1uZXcgdS5kZWZhdWx0LHIpKXtjb25zdCBzPXQubGVuZ3RoO2ZvcihsZXQgcj0wO3I8cztyKyspMD09PXRbcl0uY3VycmVudFRpbWU/ZS5wb3N0c1RpbWVsaW5lLnB1c2godFtyXSk6ZS5wb3N0c1RpbWVsaW5lU3RvY2sucHVzaCh0W3JdKX1yZXR1cm4gZX19dC5kZWZhdWx0PWN9LDM4NjooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGU9W10pe3JldHVybiBlfX19LDUzOTA6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlPVtdKXtyZXR1cm4gZX19fSwxMDgzOihlLHQpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZT1bXSl7cmV0dXJuIGV9fX0sMjM0MjooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PWNsYXNze2NvbnN0cnVjdG9yKGU9W10pe3JldHVybiBlfX19LDMxODk6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3RvcihlPVtdKXtyZXR1cm4gZX19fSw4MjA3OihlLHQpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZT1bXSl7cmV0dXJuIGV9fX0sNDkxOTpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygxMjE2KSk7Y2xhc3MgaSBleHRlbmRzIG4uZGVmYXVsdHtjb25zdHJ1Y3RvcihlPXt9KXtzdXBlcigpO2NvbnN0IHQ9ZSYmZS5jbGllbnQ/ZS5jbGllbnQ6e30scz1lJiZlLmNvbW1vbj9lLmNvbW1vbjp7fSxyPWUmJmUuc2VydmVyP2Uuc2VydmVyOnt9O3JldHVybiB0aGlzLmNyZWF0ZSh7Y2xpZW50OnQsY29tbW9uOnMsc2VydmVyOnJ9KX19dC5kZWZhdWx0PWl9LDgwOTE6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTIxNikpLGk9cihzKDc3NzEpKSxvPXIocygzMDApKSxhPXIocyg2OTI2KSk7Y2xhc3MgdSBleHRlbmRzIG4uZGVmYXVsdHtjb25zdHJ1Y3RvcihlPXt9LHQpe3N1cGVyKCksdGhpcy5jaHM9W1xcXCIvXFxcIl0sdGhpcy5wcm90b2NvbD1pLmRlZmF1bHQuVEFMS05fUFJPVE9DT0wsdGhpcy5jaGFyc2V0PVxcXCJVVEYtOFxcXCIsdGhpcy5ob3N0PVxcXCJcXFwiLHRoaXMuZmF2aWNvbj11LmdldERlZmF1bHRGYXZpY29uKCksdGhpcy5maW5kVHlwZT11LmZpbmRUeXBlQWxsLHRoaXMudGl0bGU9dS5nZXREZWZhdWx0VGl0bGUoKSx0aGlzLm1ldGFzPVtdLHRoaXMuZW1vdGlvbnM9e30sdGhpcy5zZXJ2ZXJNZXRhcz17fSx0aGlzLmNsaWVudE1ldGFzPXt9LHRoaXMubGlua3M9W10sdGhpcy5oMXM9W10sdGhpcy5hdWRpb3M9W10sdGhpcy52aWRlb3M9W10sdGhpcy5sYXllcj11LmdldExheWVyKCksdGhpcy5tZWRpYUluZGV4PVtdLHRoaXMucG9zdENudD0wLHRoaXMubXVsdGlQb3N0Q250PTAsdGhpcy5pc1NlbGZDaD0hMSx0aGlzLmNyZWF0ZVRpbWU9XFxcIlxcXCIsdGhpcy51cGRhdGVUaW1lPVxcXCJcXFwiO2NvbnN0IHM9dS5pc1dpbmRvd09iaihlKT91LmNvbnN0cnVjdG9yRnJvbVdpbmRvdyhlLHQpOmU7cmV0dXJuIHRoaXMuY3JlYXRlKHMpfXN0YXRpYyBnZXQgZmluZFR5cGVBbGwoKXtyZXR1cm5cXFwiQWxsXFxcIn1zdGF0aWMgZ2V0IGZpbmRUeXBlSHRtbCgpe3JldHVyblxcXCJIdG1sXFxcIn1zdGF0aWMgZ2V0IGZpbmRUeXBlTXVzaWMoKXtyZXR1cm5cXFwiTXVzaWNcXFwifXN0YXRpYyBnZXQgZmluZFR5cGVQZGYoKXtyZXR1cm5cXFwiUGRmXFxcIn1zdGF0aWMgZ2V0IGZpbmRUeXBlVmlkZW8oKXtyZXR1cm5cXFwiVmlkZW9cXFwifXN0YXRpYyBnZXQgZmluZFR5cGVPdGhlcigpe3JldHVyblxcXCJPdGhlclxcXCJ9c3RhdGljIGdldCBmaW5kVHlwZXMoKXtyZXR1cm57W3UuZmluZFR5cGVIdG1sXTpbXFxcInRleHQvaHRtbFxcXCJdLFt1LmZpbmRUeXBlTXVzaWNdOltcXFwiYXVkaW9cXFwiLFxcXCJhdWRpby9tcGVnXFxcIixcXFwiYXVkaW8vbXA0XFxcIixcXFwiYXVkaW8veC13YXZcXFwiLFxcXCJhdWRpby9taWRpXFxcIixcXFwiYXBwbGljYXRpb24veC1zbWFmXFxcIl0sW3UuZmluZFR5cGVWaWRlb106W1xcXCJ2aWRlb1xcXCIsXFxcInZpZGVvL21wZWdcXFwiLFxcXCJ2aWRlby9tcDRcXFwiLFxcXCJ2aWRlby9xdWlja3RpbWVcXFwiLFxcXCJ2aWRlby94LW1zLXdtdlxcXCIsXFxcImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXFxcIixcXFwidmlkZW8vM2dwcDJcXFwiXX19c3RhdGljIGdldERlZmF1bHRUaXRsZSgpe3JldHVyblxcXCJ0YWxrblxcXCJ9c3RhdGljIGdldERlZmF1bHRGYXZpY29uKCl7cmV0dXJuYGh0dHBzOi8vJHtvLmRlZmF1bHQuYXNzZXRzVVJMfS9mYXZpY29uLmljb2B9c3RhdGljIGlzV2luZG93T2JqKGUpe3JldHVybiEhZS5hbGVydH1zdGF0aWMgY29uc3RydWN0b3JGcm9tV2luZG93KGUsdCl7Y29uc3Qgcz0hIXQuY2gmJnQuY2gscj11LmdldENoKHQpO2xldCBpPXt9O3JldHVybiBpLmNoPXIsaS5jaHM9W1xcXCIvXFxcIl0saS5oYXNTbGFzaD0hIXQuaGFzc2xhc2gmJm4uZGVmYXVsdC5nZXRCb29sKHQuaGFzc2xhc2gpLGkucHJvdG9jb2w9XFxcInRhbGtuOlxcXCIsaS5jb250ZW50VHlwZT1cXFwiXFxcIixpLmNoYXJzZXQ9XFxcIlVURi04XFxcIixpLmhvc3Q9XFxcIlxcXCIsaS5mYXZpY29uPXUuZ2V0RGVmYXVsdEZhdmljb24oKSxpLmZpbmRUeXBlPXUuZmluZFR5cGVBbGwscz8oaS5wcm90b2NvbD11LmdldFByb3RvY29sKHMpLGkuaG9zdD11LmdldEhvc3QocyksaS5jaHM9cy5jaHMmJnMuY2hzLmxlbmd0aD4wP3MuY2hzOnUuZ2V0Q2hzKHIpKTooaS5wcm90b2NvbD1sb2NhdGlvbi5wcm90b2NvbD9sb2NhdGlvbi5wcm90b2NvbDpcXFwiPz8/PzpcXFwiLGkuY2hzPWUuY2hzJiZlLmNocy5sZW5ndGg+MD9lLmNoczp1LmdldENocyhyKSxpLmNvbnRlbnRUeXBlPWRvY3VtZW50LmNvbnRlbnRUeXBlP2RvY3VtZW50LmNvbnRlbnRUeXBlOlxcXCJcXFwiLGkuY2hhcnNldD1kb2N1bWVudC5jaGFyc2V0P2RvY3VtZW50LmNoYXJzZXQ6XFxcIlxcXCIsaS5ob3N0PWxvY2F0aW9uLmhvc3Q/bG9jYXRpb24uaG9zdDpcXFwiXFxcIixpLmZhdmljb249dS5nZXRGYXZpY29uRnJvbVdpbmRvdyh3aW5kb3cpKSxpLnRpdGxlPXUuZ2V0RGVmYXVsdFRpdGxlKCksaS5tZXRhcz1bXSxpLnNlcnZlck1ldGFzPXt9LGkuY2xpZW50TWV0YXM9e30saS5lbW90aW9ucz17fSxpLmxpbmtzPVtdLGkuaDFzPVtdLGkuYXVkaW9zPVtdLGkudmlkZW9zPVtdLGkubGF5ZXI9dS5nZXRMYXllcihpLmNoKSxpLm1lZGlhSW5kZXg9W10saS5wb3N0Q250PTAsaS5tdWx0aVBvc3RDbnQ9MCxpLmlzU2VsZkNoPXUuZ2V0SXNTZWxmQ2goXFxcIlxcXCIsaS5jaCksaS5jcmVhdGVUaW1lPVxcXCJcXFwiLGkudXBkYXRlVGltZT1cXFwiXFxcIixpfXN0YXRpYyBnZXRDaChlKXtyZXR1cm4gZSYmZS5jaCYmXFxcIlxcXCIhPT1lLmNoP2UuY2g6XFxcIi9cXFwifXN0YXRpYyBnZXRDaFRvcChlKXtyZXR1cm5cXFwiXFxcIiE9PWU/XFxcIi9cXFwiK2Uuc3BsaXQoXFxcIi9cXFwiKVsxXTpcXFwiXFxcIn1zdGF0aWMgZ2V0Q2hzKGUpe2xldCB0PVtcXFwiL1xcXCJdO2lmKFxcXCJcXFwiIT09ZSl7Y29uc3Qgcj1cXFwiL1xcXCI9PT1lLnNsaWNlKC0xKT9lOmUrXFxcIi9cXFwiO2lmKFxcXCIvXFxcIiE9PXIpe2NvbnN0IGU9ci5zcGxpdChcXFwiL1xcXCIpLG49ZS5sZW5ndGg7bGV0IGk9XFxcIlxcXCI7Zm9yKHZhciBzPTE7czxuO3MrKylcXFwiXFxcIiE9PWVbc10mJihpKz1lW3NdLGk9XFxcIi9cXFwiPT09aS5zbGljZSgtMSk/aTppK1xcXCIvXFxcIixpPVxcXCIvXFxcIj09PWkuc2xpY2UoMCwxKT9pOlxcXCIvXFxcIitpLHQucHVzaChpKSl9fXJldHVybiB0fXN0YXRpYyBnZXRIb3N0KGUpe3JldHVybiBlLmluZGV4T2YoXFxcIi5cXFwiKT49MD8oZT1lLnJlcGxhY2UoXFxcImh0dHBzOi8vXFxcIixcXFwiXFxcIikucmVwbGFjZShcXFwiaHR0cDovL1xcXCIsXFxcIlxcXCIpKS5yZXBsYWNlKC9eXFxcXC8vLFxcXCJcXFwiKS5yZXBsYWNlKC9cXFxcLy4qJC8sXFxcIlxcXCIpOm8uZGVmYXVsdC5kb21haW59c3RhdGljIGdldFByb3RvY29sKGUpe3JldHVybiBlLmluZGV4T2YoXFxcImh0dHA6XFxcIik+PTA/XFxcImh0dHA6XFxcIjplLmluZGV4T2YoXFxcImh0dHBzOlxcXCIpPj0wP1xcXCJodHRwczpcXFwiOmxvY2F0aW9uJiZsb2NhdGlvbi5wcm90b2NvbD9sb2NhdGlvbi5wcm90b2NvbDpcXFwiPz8/PzpcXFwifXN0YXRpYyBnZXRJc1NlbGZDaChlLHQpe3JldHVybiBlLnJlcGxhY2UoXFxcImh0dHA6L1xcXCIsXFxcIlxcXCIpLnJlcGxhY2UoXFxcImh0dHBzOi9cXFwiLFxcXCJcXFwiKS5yZXBsYWNlKC9cXFxcdTAwMmYkLyxcXFwiXFxcIik9PT10fXN0YXRpYyBnZXRMYXllcihlPVxcXCIvXFxcIil7cmV0dXJuIGUuc3BsaXQoXFxcIi9cXFwiKS5sZW5ndGgtMX1zdGF0aWMgZ2V0TWVkaWFTcmMoZSl7cmV0dXJuIGEuZGVmYXVsdC5nZXRNZWRpYVNyYyhlLnByb3RvY29sLGUuY2gpfXN0YXRpYyBnZXRNZWRpYVRhZ1R5cGUoZSl7Y29uc3QgdD11LmdldE1lZGlhU3JjKGUpO3JldHVybiBhLmRlZmF1bHQuZ2V0TWVkaWFUeXBlKHQsbnVsbCl9c3RhdGljIGdldEZhdmljb25Gcm9tV2luZG93KGUpe2lmKGUmJmUuZG9jdW1lbnQpe2NvbnN0IHQ9ZS5kb2N1bWVudC5ldmFsdWF0ZShcXFwiLy9saW5rW2NvbnRhaW5zKEByZWwsJ2ljb24nKW9yKGNvbnRhaW5zKEByZWwsJ0lDT04nKSldWzFdL0BocmVmXFxcIixlLmRvY3VtZW50LG51bGwsMixudWxsKS5zdHJpbmdWYWx1ZSxzPVxcXCJodHRwOi8vXFxcIixyPVxcXCJodHRwczovL1xcXCIsbj1sb2NhdGlvbi5ob3N0O2lmKHQuaW5kZXhPZihzKXx8dC5pbmRleE9mKHIpKXtjb25zdCBlPXMrbisodHx8XFxcIi9mYXZpY29uLmljb1xcXCIpO3JldHVybiAxPT1lLnNwbGl0KFxcXCIvL1xcXCIpLmxlbmd0aC0xP2U6dH1yZXR1cm4gdH1yZXR1cm5cXFwiXFxcIn1zdGF0aWMgZ2V0U3RhdHVzKGUsdCxzKXtsZXQgcj17ZGlzcFR5cGU6XFxcIlxcXCIsaXNDcmVhdGU6ITEsaXNSZXF1aXJlVXBzZXJ0OiExLGlzTXVsdGlzdHJlYW06ITEsaXNNZWRpYUNoOiExLGlzVG9nZ2xlTXVsdGlzdHJlYW06ITEsZ2V0TW9yZTohMX07cmV0dXJuIHIuaXNDcmVhdGU9dS5nZXRTdGF0dXNDcmVhdGUocyksci5pc1JlcXVpcmVVcHNlcnQ9dS5nZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQoZSxyLmlzQ3JlYXRlKSxyLmlzTXVsdGlzdHJlYW09dS5nZXRTdGF0dXNJc011bHRpc3RyZWFtKHQpLHIuaXNUb2dnbGVNdWx0aXN0cmVhbT11LmdldFN0YXR1c0lzVG9nZ2xlTXVsdGlzdHJlYW0odCksci5pc01lZGlhQ2g9dS5nZXRTdGF0dXNJc01lZGlhQ2goZS5jaCkscn1zdGF0aWMgZ2V0U3RhdHVzQ3JlYXRlKGUpe3JldHVybiFlfXN0YXRpYyBnZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQoZSx0PSExKXtpZighdClyZXR1cm4hMDtpZihlLnVwZGF0ZVRpbWUpe2NvbnN0IHQ9ZS51cGRhdGVUaW1lLmdldFRpbWU/ZS51cGRhdGVUaW1lLmdldFRpbWUoKTplLnVwZGF0ZVRpbWUscz1uZXcgRGF0ZSxyPXMuZ2V0RnVsbFllYXIoKSxuPXMuZ2V0TW9udGgoKSxpPXMuZ2V0RGF0ZSgpLGE9cy5nZXRIb3VycygpO3JldHVybiBzLmdldE1pbnV0ZXMoKSx0PG5ldyBEYXRlKHIsbixpLGEtby5kZWZhdWx0LmZpbmRPbmVUaHJlYWRBY3RpdmVIb3VyKS5nZXRUaW1lKCl9cmV0dXJuITF9c3RhdGljIGdldFN0YXR1c0lzTXVsdGlzdHJlYW0oZSl7cmV0dXJuIHZvaWQgMD09PWV8fHZvaWQgMD09PWUuZGlzcFRocmVhZFR5cGV8fGUuZGlzcFRocmVhZFR5cGU9PT1hLmRlZmF1bHQuZGlzcFRocmVhZFR5cGVNdWx0aSYmZS5tdWx0aXN0cmVhbX1zdGF0aWMgZ2V0U3RhdHVzSXNNZWRpYUNoKGUpe3JldHVybiBhLmRlZmF1bHQuZ2V0SXNNZWRpYUNoKGUpfXN0YXRpYyBnZXRTdGF0dXNJc1RvZ2dsZU11bHRpc3RyZWFtKGUpe3JldHVybiB2b2lkIDAhPT1lJiZ2b2lkIDAhPT1lLmFjdGlvbmVkJiZlLmlzVG9nZ2xlTXVsdGlzdHJlYW19c3RhdGljIGdldENvbnRlbnRUeXBlRnJvbUZpbmRUeXBlKGUpe2NvbnN0IHQ9dS5maW5kVHlwZXNbdS5maW5kVHlwZUh0bWxdLHM9dS5maW5kVHlwZXNbdS5maW5kVHlwZU11c2ljXSxyPXUuZmluZFR5cGVzW3UuZmluZFR5cGVWaWRlb107bGV0IG47aWYoZSYmXFxcIlxcXCIhPT1lKXtsZXQgaT1cXFwiXFxcIjtlLmluZGV4T2YoXFxcIjtcXFwiKT4wJiYoaT1lLnNwbGl0KFxcXCI7XFxcIilbMF0pLCh0LmluY2x1ZGVzKGUpfHx0LmluY2x1ZGVzKGkpKSYmKG49dS5maW5kVHlwZUh0bWwpLChzLmluY2x1ZGVzKGUpfHxzLmluY2x1ZGVzKGkpKSYmKG49dS5maW5kVHlwZU11c2ljKSwoci5pbmNsdWRlcyhlKXx8ci5pbmNsdWRlcyhpKSkmJihuPXUuZmluZFR5cGVWaWRlbyl9cmV0dXJuIG59c3RhdGljIGdldEZpbmRUeXBlRnJvbVNyYyhlKXtjb25zdCB0PWEuZGVmYXVsdC5nZXRNZWRpYVR5cGVGcm9tU3JjKGUpO3JldHVybiB0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSl9fXQuZGVmYXVsdD11fSw5Nzg6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTIxNikpO2NsYXNzIGkgZXh0ZW5kcyBuLmRlZmF1bHR7Y29uc3RydWN0b3IoZT17fSl7cmV0dXJuIHN1cGVyKCksdGhpcy5jcmVhdGUoZSl9c3RhdGljIGdldE1lcmdlZFRocmVhZHMoZSx0KXtyZXR1cm4gZVt0LmNoXT17Li4udH0sZX19dC5kZWZhdWx0PWl9LDc5NDA6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTIxNikpO2NsYXNzIGkgZXh0ZW5kcyBuLmRlZmF1bHR7Y29uc3RydWN0b3IoZT17fSl7cmV0dXJuIHN1cGVyKCksZX19dC5kZWZhdWx0PWl9LDc0NDQ6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTIxNikpLGk9cihzKDI3NDkpKTtjbGFzcyBvIGV4dGVuZHMgbi5kZWZhdWx0e3N0YXRpYyBnZXQgZGVmYXVsdE9mZnNldEZpbmRJZCgpe3JldHVybiBpLmRlZmF1bHQuZGVmYXVsdEZpbmRJZH1jb25zdHJ1Y3RvcihlPXt9KXtzdXBlcigpO2NvbnN0IHQ9ZSYmZS51aWQ/ZS51aWQ6XFxcIlxcXCIscz1lJiZlLnV0eXBlP2UudXR5cGU6XFxcIlxcXCIscj1lJiZlLnR1bmVkQ2g/ZS50dW5lZENoOlxcXCJcXFwiLG49ISghZXx8IWUubXVsdGlzdHJlYW1lZCkmJmUubXVsdGlzdHJlYW1lZCxpPWUmJmUuYWN0aW9uZWQ/ZS5hY3Rpb25lZDpcXFwiXFxcIixhPWUmJmUub2Zmc2V0RmluZElkP2Uub2Zmc2V0RmluZElkOm8uZGVmYXVsdE9mZnNldEZpbmRJZCx1PWUmJmUub2Zmc2V0U2luZ2xlRmluZElkP2Uub2Zmc2V0U2luZ2xlRmluZElkOm8uZGVmYXVsdE9mZnNldEZpbmRJZCxjPWUmJmUub2Zmc2V0TXVsdGlGaW5kSWQ/ZS5vZmZzZXRNdWx0aUZpbmRJZDpvLmRlZmF1bHRPZmZzZXRGaW5kSWQsZD1lJiZlLm9mZnNldENoaWxkRmluZElkP2Uub2Zmc2V0Q2hpbGRGaW5kSWQ6by5kZWZhdWx0T2Zmc2V0RmluZElkLGw9ZSYmZS5vZmZzZXRMb2dzRmluZElkP2Uub2Zmc2V0TG9nc0ZpbmRJZDpvLmRlZmF1bHRPZmZzZXRGaW5kSWQ7cmV0dXJuIGUucmVxdWVzdExvZ2luVHlwZSYmZS5yZXF1ZXN0TG9naW5UeXBlLHRoaXMuY3JlYXRlKHt1aWQ6dCx1dHlwZTpzLHR1bmVkQ2g6cixtdWx0aXN0cmVhbWVkOm4sYWN0aW9uZWQ6aSxvZmZzZXRGaW5kSWQ6YSxvZmZzZXRTaW5nbGVGaW5kSWQ6dSxvZmZzZXRNdWx0aUZpbmRJZDpjLG9mZnNldENoaWxkRmluZElkOmQsb2Zmc2V0TG9nc0ZpbmRJZDpsLGZyaWVuZHM6W119KX1zdGF0aWMgZ2V0T2Zmc2V0RmluZElkKHtwb3N0czplfSl7cmV0dXJuIGUmJmVbMF0mJmVbMF0uX2lkP2VbMF0uX2lkOmkuZGVmYXVsdC5kZWZhdWx0RmluZElkfXN0YXRpYyBnZXRIcmVmKGU9e30pe3JldHVyblxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb24mJndpbmRvdy5sb2NhdGlvbi5ocmVmLGUmJmUuaHJlZj9lLmhyZWY6XFxcIi9cXFwifX10LmRlZmF1bHQ9b30sNDU0NjpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXMoNTg1NyksaT1yKHMoODQzKSksbz1yKHMoODI2MikpO3QuZGVmYXVsdD1mdW5jdGlvbihlPXt9KXtsZXQgdD1baS5kZWZhdWx0LnVwZGF0ZUFjdGlvbl07cmV0dXJuKDAsbi5jcmVhdGVTdG9yZSkoby5kZWZhdWx0LGUsKDAsbi5hcHBseU1pZGRsZXdhcmUpKC4uLnQpKX19LDg1Mjc6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoODE4OCkpLGk9cihzKDE1MzQpKSxvPXIocyg2OTI2KSksYT1yKHMoODQ1NSkpLHU9cihzKDk0NzgpKSxjPXIocyg1MzkwKSksZD1yKHMoMTA4MykpLGw9cihzKDgyMDcpKSxoPXIocyg4MDkxKSkscD1yKHMoNzk0MCkpLGY9cihzKDc0NDQpKTtjbGFzcyBUe2NvbnN0cnVjdG9yKGUsdD17fSl7dGhpcy5ib290T3B0aW9uPWUsdGhpcy5yYW5rcz1uZXcgbC5kZWZhdWx0LHRoaXMubWVudUxvZ3M9bmV3IGEuZGVmYXVsdCh0Lm1lbnVMb2dzKSx0aGlzLnBvc3RzPW5ldyB1LmRlZmF1bHQsdGhpcy5wb3N0c011bHRpPW5ldyB1LmRlZmF1bHQsdGhpcy5wb3N0c1NpbmdsZT1uZXcgdS5kZWZhdWx0LHRoaXMucG9zdHNDaGlsZD1uZXcgdS5kZWZhdWx0LHRoaXMucG9zdHNUaW1lbGluZT1uZXcgYy5kZWZhdWx0LHRoaXMucG9zdHNUaW1lbGluZVN0b2NrPW5ldyBkLmRlZmF1bHQsdGhpcy5wb3N0c0xvZ3M9bmV3IHUuZGVmYXVsdCx0aGlzLmFuYWx5emU9bmV3IGkuZGVmYXVsdCx0aGlzLnRocmVhZD1uZXcgaC5kZWZhdWx0KHRoaXMuYm9vdE9wdGlvbix0LnRocmVhZCksdGhpcy50aHJlYWREZXRhaWw9bmV3IGguZGVmYXVsdCh0aGlzLmJvb3RPcHRpb24sdC50aHJlYWQpLHRoaXMuYXBwPW5ldyBvLmRlZmF1bHQoVC5nZXRBcHBQYXJhbXModGhpcy50aHJlYWQsdGhpcy5ib290T3B0aW9uLHQpKSx0aGlzLnR1bmVDaD1uZXcgcC5kZWZhdWx0LHRoaXMudXNlcj1uZXcgZi5kZWZhdWx0KFQuZ2V0VXNlclBhcmFtcyh0aGlzLHQpKSx0aGlzLmFjdGlvbkxvZz1uZXcgbi5kZWZhdWx0fXN0YXRpYyBnZXRBcHBQYXJhbXMoZSx0LHMpe3JldHVybntpc1RyYW5zaXRpb246ITAscm9vdFRpdGxlOmUudGl0bGUsLi4udCwuLi5lfX1zdGF0aWMgZ2V0VXNlclBhcmFtcyhlLHQpe3JldHVybiB0JiZ0LnVzZXImJnQudXNlci51aWQ/ey4uLnQudXNlcn06e2Rpc3BUaHJlYWRUeXBlOmUudGhyZWFkLmNoPT09ZS5hcHAucm9vdENoP28uZGVmYXVsdC5kaXNwVGhyZWFkVHlwZU11bHRpOm8uZGVmYXVsdC5kaXNwVGhyZWFkVHlwZVNpbmdsZX19Z2V0IGNoKCl7cmV0dXJuIHRoaXMudGhyZWFkLmNofX10LmRlZmF1bHQ9VH0sODQyMTpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygxMjIzKSksaT1yKHMoNzc3MSkpLG89cihzKDE5OCkpO2NsYXNzIGF7Y29uc3RydWN0b3IoZSl7dGhpcy5vbk1lc3NhZ2U9dGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKSx0aGlzLm9uTWVzc2FnZUVycm9yPXRoaXMub25NZXNzYWdlRXJyb3IuYmluZCh0aGlzKSx0aGlzLnBvc3RNZXNzYWdlPXRoaXMucG9zdE1lc3NhZ2UuYmluZCh0aGlzKSx0aGlzLndvcmtlcj1lLHRoaXMud29ya2VyLm9uZXJyb3I9dGhpcy5vbk1lc3NhZ2VFcnJvcix0aGlzLndvcmtlci5vbm1lc3NhZ2U9dGhpcy5vbk1lc3NhZ2UsdGhpcy53cz1uZXcgby5kZWZhdWx0KHRoaXMpfXBvc3RNZXNzYWdlKGUsdD17fSxzKXtjb25zdCByPXtpZDp0aGlzLmlkLHR5cGU6bi5kZWZhdWx0LldTQVBJX1RPX0NMSUVOVF9UWVBFLGlvVHlwZTppLmRlZmF1bHQuQVBJX1NFVFVQLG1ldGhvZDplLHBhcmFtczp0LG1ldGhvZEJhY2s6c307dGhpcy53b3JrZXIucG9zdE1lc3NhZ2Uocil9b25NZXNzYWdlKGUpe2NvbnN0e2lkOnQsdHlwZTpzLGlvVHlwZTpyLG1ldGhvZDppLHBhcmFtczpvfT1lLmRhdGE7cz09PW4uZGVmYXVsdC5DTElFTlRfVE9fV1NBUElfVFlQRSYmdGhpcy53cy5leGUoaSxvKX1vbk1lc3NhZ2VFcnJvcihlKXtjb25zb2xlLndhcm4oZSl9fXQuZGVmYXVsdD1hLG5ldyBhKHNlbGYpfSwxMjIzOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuSGFuZGxlUmVxdWVzdE1ldGhvZD10LkhhbmRsZU1lc3NhZ2VNZXRob2Q9dm9pZCAwO2NvbnN0IG49cihzKDc3NzEpKTt0LmRlZmF1bHQ9Y2xhc3N7c3RhdGljIGdldCBIQU5ETEVfQ0xJRU5UX0FORF9XU0FQSSgpe3JldHVyblxcXCJIQU5ETEVfQ0xJRU5UX0FORF9XU0FQSVxcXCJ9c3RhdGljIGdldCBXU0FQSV9UT19DTElFTlRfVFlQRSgpe3JldHVyblxcXCJXU0FQSV9UT19DTElFTlRfVFlQRVxcXCJ9c3RhdGljIGdldCBDTElFTlRfVE9fV1NBUElfVFlQRSgpe3JldHVyblxcXCJDTElFTlRfVE9fV1NBUElfVFlQRVxcXCJ9c3RhdGljIGdldCBIQU5ETEVfQVBJX0FORF9DTElFTlQoKXtyZXR1cm5cXFwiSEFORExFX0FQSV9BTkRfQ0xJRU5UXFxcIn1zdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfVFlQRSgpe3JldHVyblxcXCJBUElfVE9fQ0xJRU5UX1RZUEVcXFwifXN0YXRpYyBnZXQgQ0xJRU5UX1RPX0FQSV9UWVBFKCl7cmV0dXJuXFxcIkNMSUVOVF9UT19BUElfVFlQRVxcXCJ9c3RhdGljIGdldCBIQU5ETEVfRVhUX0FORF9BUEkoKXtyZXR1cm5cXFwiSEFORExFX0VYVF9BTkRfQVBJXFxcIn1zdGF0aWMgZ2V0IE1FRElBX1RPX0NMSUVOVF9UWVBFKCl7cmV0dXJuXFxcIk1FRElBX1RPX0NMSUVOVF9UWVBFXFxcIn1zdGF0aWMgZ2V0IEVYVF9UT19BUElfVFlQRSgpe3JldHVyblxcXCJFWFRfVE9fQVBJX1RZUEVcXFwifXN0YXRpYyBnZXQgSEFORExFX0VYVF9BTkRfQ0xJRU5UKCl7cmV0dXJuXFxcImhhbmRsZUV4dEFuZENsaWVudFxcXCJ9c3RhdGljIGdldCBDTElFTlRfVE9fRVhUX1RZUEUoKXtyZXR1cm5cXFwiQ0xJRU5UX1RPX0VYVF9UWVBFXFxcIn1zdGF0aWMgZ2V0IEVYVF9UT19DTElFTlRfVFlQRSgpe3JldHVyblxcXCJFWFRfVE9fQ0xJRU5UX1RZUEVcXFwifXN0YXRpYyBnZXQgSEFORExFX01FRElBX1NFUlZFUl9BTkRfTUVESUFfQ0xJRU5UKCl7cmV0dXJuXFxcImhhbmRsZU1lZGlhU2VydmVyQW5kTWVkaWFDbGllbnRcXFwifXN0YXRpYyBnZXQgTUVESUFfU0VSVkVSX1RPX01FRElBX0NMSUVOVF9UWVBFKCl7cmV0dXJuXFxcIk1FRElBX1NFUlZFUl9UT19NRURJQV9DTElFTlRfVFlQRVxcXCJ9c3RhdGljIGdldCBNRURJQV9DTElFTlRfVE9fTUVESUFfU0VSVkVSX1RZUEUoKXtyZXR1cm5cXFwiTUVESUFfQ0xJRU5UX1RPX01FRElBX1NFUlZFUl9UWVBFXFxcIn1zdGF0aWMgY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZShlKXtyZXR1cm4gMD09PWUuaW5kZXhPZihuLmRlZmF1bHQuQVBJX1RPX1NFUlZFUl9SRVFVRVNUKT9lLnJlcGxhY2Uobi5kZWZhdWx0LkFQSV9UT19TRVJWRVJfUkVRVUVTVCxuLmRlZmF1bHQuQVBJX1RPX0NMSUVOVF9SRVFVRVNUKTowPT09ZS5pbmRleE9mKG4uZGVmYXVsdC5TRVJWRVJfVE9fQVBJX0VNSVQpP2UucmVwbGFjZShuLmRlZmF1bHQuU0VSVkVSX1RPX0FQSV9FTUlULG4uZGVmYXVsdC5BUElfVE9fQ0xJRU5UX0VNSVQpOjA9PT1lLmluZGV4T2Yobi5kZWZhdWx0LlNFUlZFUl9UT19BUElfQlJPQURDQVNUKT9lLnJlcGxhY2Uobi5kZWZhdWx0LlNFUlZFUl9UT19BUElfQlJPQURDQVNULG4uZGVmYXVsdC5BUElfVE9fQ0xJRU5UX0JST0FEQ0FTVCk6YEFQSV9UT19DTElFTlRbQUNUSU9OXToke2V9YH1zdGF0aWMgZ2V0TWVzc2FnZVR5cGVzKGUpe2NvbnN0IHQ9ZS5zcGxpdChcXFwiOlxcXCIpO3JldHVybntpb1R5cGU6dFswXS5zcGxpdChcXFwiW1xcXCIpWzFdLnJlcGxhY2UoXFxcIl1cXFwiLFxcXCJcXFwiKSxleGVNZXRob2Q6dFsxXX19c3RhdGljIGNvbnZlcnRFeHRUb0NsaWVudEFjdGlvblR5cGUoZSl7cmV0dXJuYEVYVF9UT19DTElFTlRbQUNUSU9OXToke2V9YH19LHQuSGFuZGxlTWVzc2FnZU1ldGhvZD1cXFwiaGFuZGxlXFxcIix0LkhhbmRsZVJlcXVlc3RNZXRob2Q9XFxcImhhbmRsZVxcXCJ9LDEyMTY6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NsYXNzIHN7Y29uc3RydWN0b3IoZT17fSl7fXN0YXRpYyBnZXRUeXBlKGUpe3JldHVybiBudWxsPT09ZT9cXFwiTnVsbFxcXCI6dm9pZCAwPT09ZT9cXFwiVW5kZWZpbmVkXFxcIjplLmNvbnN0cnVjdG9yLm5hbWV9c3RhdGljIGlzU2V0KGUpe3JldHVyblxcXCJVbmRlZmluZWRcXFwiIT09cy5nZXRUeXBlKGUpJiZcXFwiTnVsbFxcXCIhPT1zLmdldFR5cGUoZSl9c3RhdGljIGdldEJvb2woZSl7cmV0dXJuXFxcImJvb2xlYW5cXFwiPT10eXBlb2YgZT9lOlxcXCJ0cnVlXFxcIj09PWV9c3RhdGljIGlzQW5vbnltb3VzRnVuYyhlKXtjb25zdCB0PWUudG9TdHJpbmcoKTtyZXR1cm5cXFwiZnVuY3Rpb24oKXt9XFxcIj09PXR8fFxcXCJmdW5jdGlvbigpIHt9XFxcIj09PXR8fFxcXCJmdW5jdGlvbiAoKXt9XFxcIj09PXR8fFxcXCJmdW5jdGlvbiAoKSB7fVxcXCI9PT10fHxcXFwiKCk9Pnt9XFxcIj09PXR9Y3JlYXRlKGUpe2NvbnN0IHQ9dGhpcy5jb25zdHJ1Y3Rvci5uYW1lO3JldHVybiBzLmdldFR5cGUoZSksT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgocj0+e2xldCBuLGksbz1udWxsLGE9ITEsdT0hMSxjPSgpPT57fSxkPW51bGw7aWYoXFxcIk9iamVjdFxcXCI9PT1zLmdldFR5cGUoZVtyXSkpe249ZVtyXTtsZXQgdD0wPT09T2JqZWN0LmtleXMobikubGVuZ3RoO2E9bi5pc0FjY2VwdE51bGw/bi5pc0FjY2VwdE51bGw6YSx1PW4uaXNBY2NlcHRCbGFuaz9uLmlzQWNjZXB0Qmxhbms6dSxvPSF0JiZuLmRlZj9uLmRlZjpvLGQ9dHx8IW4udmFsdWUmJlxcXCJcXFwiIT09bi52YWx1ZT9uOm4udmFsdWUsZD10JiZvP286ZCxpPXMuZ2V0VHlwZShkKSxjPW4udmFsaWQ/bi52YWxpZDpjfWVsc2UgZD1lW3JdLG89ZCxhPWEsdT11LGk9cy5nZXRUeXBlKGQpLGM9Yztjb25zdCBsPWU9PntsZXQgbj1udWxsO2NvbnN0IG89YCR7dH0uJHtyfWAsbD1kLGg9aSxwPWUsZj1zLmdldFR5cGUoZSk7cmV0dXJuIGYhPT1pJiYobj1gU0NIRU1BX1RZUEUgOiAke299IFt2YWxpZFR5cGU6ICR7aX1dW3BhcmFtc1R5cGU6ICR7Zn1dYCksYSYmbnVsbD09PWUmJihuPWBTQ0hFTUFfSVNfQUNDRVBUX05VTEwgOiAgJHtvfWApLHUmJlxcXCJcXFwiPT09ZSYmKG49YFNDSEVNQV9JU19BQ0NFUFRfQkxBTksgOiAgJHtvfWApLFxcXCJGdW5jdGlvblxcXCI9PT1zLmdldFR5cGUoYykmJmMoZSkmJihuPWBTQ0hFTUFfWU9VUl9WQUxJRF9NRVRIT0QgOiAgJHtvfWApLHtwb2ludGVyOm8sdmFsaWRWYWx1ZTpsLHZhbGlkVHlwZTpoLHBhcmFtc1ZhbHVlOnAscGFyYW1zVHlwZTpmLGVycm9yOm59fSx7cG9pbnRlcjpoLHZhbGlkVmFsdWU6cCx2YWxpZFR5cGU6ZixwYXJhbXNWYWx1ZTpULHBhcmFtc1R5cGU6RSxlcnJvcjpffT1sKGQpO2lmKG51bGw9PT1fKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHIse2dldDooKT0+ZCxzZXQ6ZT0+e2NvbnN0IHQ9bChkKTtpZihudWxsPT09XylyZXR1cm4gZD1lLHsuLi50aGlzLFtyXTpkfTt0aHJvdyB0aGlzLnZhbGlkV2Fybih0KSxffSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pO2Vsc2V7aWYodGhpcy5lcnJvclRocm93KXRocm93IF87Y29uc29sZS53YXJuKF8pfX0pKSx0aGlzfWNhblNldChlLHQpe3RyeXtjb25zdCBzPXRoaXNbZV07aWYodm9pZCAwPT09cylyZXR1cm4hMDtpZihudWxsPT09cylyZXR1cm4hMDtpZih2b2lkIDA9PT10KXJldHVybiEwO2lmKG51bGw9PT10KXJldHVybiEwO2NvbnN0e2Vycm9yOnJ9PXRoaXNbZV09dDtyZXR1cm4hciYmKHRoaXNbZV09cywhMCl9Y2F0Y2gocyl7dGhyb3cgY29uc29sZS53YXJuKFxcXCJCQUQgQ0FOIFNFVCBLRVk6IFxcXCIrdGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1xcXCIgXFxcIitlKSxjb25zb2xlLndhcm4oXFxcIkJFRk9FUiBWQUxVRVxcXCIpLGNvbnNvbGUud2Fybih0eXBlb2YgdGhpc1tlXSksY29uc29sZS53YXJuKHRoaXNbZV0pLGNvbnNvbGUud2FybihcXFwiQUZURVIgVkFMVUVcXFwiKSxjb25zb2xlLndhcm4odHlwZW9mIHQpLGNvbnNvbGUud2Fybih0KSxgQkFEIENBTiBTRVQ6ICR7c31gfX1tZXJnZShlPXt9LHQ9ITApe3RyeXtjb25zdCByPXMuZ2V0VHlwZShlKSxuPU9iamVjdC5rZXlzKGUpO2lmKG4ubGVuZ3RoPjApe2xldCBzPXsuLi50aGlzfTtyZXR1cm4gbi5mb3JFYWNoKCh0PT57dGhpc1t0XSE9PWVbdF0mJih0aGlzLmNhblNldCh0LGVbdF0pP3NbdF09ZVt0XTpjb25zb2xlLndhcm4oXFxcIkJBRCBNRVJHRSBBIDogXFxcIit0K1xcXCIgXFxcIitlW3RdK1xcXCIgXFxcIit0eXBlb2YgZVt0XSkpfSkpLFxcXCJBcnJheVxcXCI9PT1yPyhzPU9iamVjdC52YWx1ZXMocyksdD9uZXcgdGhpcy5jb25zdHJ1Y3RvcihzKTpzKTp0P25ldyB0aGlzLmNvbnN0cnVjdG9yKHMpOnN9cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yfWNhdGNoKHQpe2lmKHRoaXMuZXJyb3JUaHJvdyl0aHJvdyBjb25zb2xlLndhcm4oZSksY29uc29sZS53YXJuKHQpLGBCQUQgTUVSR0UgQiA6ICR7cy5nZXRUeXBlKGUpfSAke3R9YDtyZXR1cm4gY29uc29sZS53YXJuKGUpLGNvbnNvbGUud2Fybih0KSxjb25zb2xlLndhcm4oYEJBRCBNRVJHRSBDIDogJHtzLmdldFR5cGUoZSl9ICR7dH1gKSxlfX10b0pTT04oZT10aGlzKXtsZXQgdD17fTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaCgocz0+e2xldCByPWVbc107XFxcIk9iamVjdFxcXCI9PT1yLmNvbnN0cnVjdG9yLm5hbWUmJihyLnR5cGV8fHIuZGVmYXVsdHx8KHI9dGhpcy50b0pTT04ocikpKSxyLmRlZmF1bHR8fFxcXCJcXFwiPT09ci5kZWZhdWx0fHwwPT09ci5kZWZhdWx0P3Rbc109ci5kZWZhdWx0OnRbc109cn0pKSx0fWZvckVhY2goZSl7cmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuZm9yRWFjaChlKX1jb25jYXQoZSl7cmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKE9iamVjdC52YWx1ZXModGhpcykuY29uY2F0KGUpLGUpfW1hcChlKXtyZXR1cm4gdGhpcy5yZXR1cm5JbW11dGFibGUoT2JqZWN0LnZhbHVlcyh0aGlzKS5tYXAoZSksZSl9ZmlsdGVyKGUpe3JldHVybiB0aGlzLnJldHVybkltbXV0YWJsZShPYmplY3QudmFsdWVzKHRoaXMpLmZpbHRlcihlKSxlKX1yZWR1Y2UoZSl7cmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKE9iamVjdC52YWx1ZXModGhpcykucmVkdWNlKGUpLGUpfWZpbmQoZSl7cmV0dXJuIE9iamVjdC52YWx1ZXModGhpcykuZmluZChlKX1zb3J0KGUpe3JldHVybiBPYmplY3QudmFsdWVzKHRoaXMpLnNvcnQoZSl9cHVzaChlKXtjb25zdCB0PU9iamVjdC52YWx1ZXModGhpcyk7cmV0dXJuIHQucHVzaChlKSx0aGlzLnJldHVybkltbXV0YWJsZSh0KX11bnNoaWZ0KGUpe2NvbnN0IHQ9T2JqZWN0LnZhbHVlcyh0aGlzKTtyZXR1cm4gdC51bnNoaWZ0KGUpLHRoaXMucmV0dXJuSW1tdXRhYmxlKHQpfWdldFNoaWZ0KCl7Y29uc3QgZT1PYmplY3QudmFsdWVzKHRoaXMpLnNoaWZ0KCk7cmV0dXJuIHRoaXMucmV0dXJuSW1tdXRhYmxlKGUpfXBvcChlKXtjb25zdCB0PU9iamVjdC52YWx1ZXModGhpcyk7cmV0dXJuIHQucG9wKGUpLHRoaXMucmV0dXJuSW1tdXRhYmxlKHQpfXJldHVybkltbXV0YWJsZShlLHQ9KCgpPT57fSkpe3JldHVybiB2b2lkIDA9PT1lP25ldyB0aGlzLmNvbnN0cnVjdG9yOjA9PT1lLmxlbmd0aCYmMD09PU9iamVjdC5rZXlzKHRoaXMpLmxlbmd0aD9TdHJpbmcodCkuaW5kZXhPZihcXFwiY3JlYXRlRWxlbWVudFxcXCIpPjA/W106bmV3IHRoaXMuY29uc3RydWN0b3IoZSk6ZVswXSYmZVswXS4kJHR5cGVvZiYmXFxcIlN5bWJvbFxcXCI9PT1lWzBdLiQkdHlwZW9mLmNvbnN0cnVjdG9yLm5hbWU/ZTpuZXcgdGhpcy5jb25zdHJ1Y3RvcihlKX12YWxpZFdhcm4oZSl7Y29uc29sZS53YXJuKFxcXCIjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcXCIpLGNvbnNvbGUud2FybihcXFwiI1xcXCIrZS5wb2ludGVyKSxjb25zb2xlLndhcm4oXFxcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXFxcIiksY29uc29sZS53YXJuKFxcXCIjIyMgaW5pdGlhbGl6ZWRWYWxpZFR5cGVcXFwiKSxjb25zb2xlLndhcm4oZS52YWxpZFR5cGUpLGNvbnNvbGUud2FybihcXFwiIyMjIGluaXRpYWxpemVkVmFsaWRWYWx1ZVxcXCIpLGNvbnNvbGUud2FybihlLnZhbGlkVmFsdWUpLGNvbnNvbGUud2FybihcXFwiIyMjIHBhcmFtc1R5cGVcXFwiKSxjb25zb2xlLndhcm4oZS5wYXJhbXNUeXBlKSxjb25zb2xlLndhcm4oXFxcIiMjIyBwYXJhbXNWYWx1ZVxcXCIpLGNvbnNvbGUud2FybihlLnBhcmFtc1ZhbHVlKSxjb25zb2xlLndhcm4oXFxcIiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXFxcIil9fXQuZGVmYXVsdD1zfSw3NzcxOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDEyMTYpKTtjbGFzcyBpe3N0YXRpYyBnZXQgVEFMS05fUFJPVE9DT0woKXtyZXR1cm5cXFwidGFsa246XFxcIn1zdGF0aWMgZ2V0IEhUVFBfUFJPVE9DT0woKXtyZXR1cm5cXFwiaHR0cDpcXFwifXN0YXRpYyBnZXQgSFRUUFNfUFJPVE9DT0woKXtyZXR1cm5cXFwiaHR0cHM6XFxcIn1zdGF0aWMgZ2V0IFVOS05PV05fUFJPVE9DT0woKXtyZXR1cm5cXFwiPz8/PzpcXFwifXN0YXRpYyBnZXQgQ0FUQ0hfTUVfS0VZKCl7cmV0dXJuXFxcIkBDQVRDSF9NRVxcXCJ9c3RhdGljIGdldCBBUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVCgpe3JldHVyblxcXCJbXFxcIn1zdGF0aWMgZ2V0IEFQSV9TRVBBUkFURV9JT19UWVBFX0VORCgpe3JldHVyblxcXCJdXFxcIn1zdGF0aWMgZ2V0IEFQSV9SRVFVRVNUX1RZUEUoKXtyZXR1cm5cXFwiUkVRVUVTVFxcXCJ9c3RhdGljIGdldCBBUElfUkVTUE9OU0VfVFlQRV9FTUlUKCl7cmV0dXJuXFxcIkVNSVRcXFwifXN0YXRpYyBnZXQgQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUKCl7cmV0dXJuXFxcIkJST0FEQ0FTVFxcXCJ9c3RhdGljIGdldCBBUElfU0VUVVAoKXtyZXR1cm5cXFwiQVBJX1NFVFVQXFxcIn1zdGF0aWMgZ2V0IFVOS05PV04oKXtyZXR1cm5cXFwiVU5LTk9XTlxcXCJ9c3RhdGljIGdldCBDT05ORUNUSU9OX1NFUlZFUl9LRVkoKXtyZXR1cm5cXFwiQ09OTkVDVElPTl9TRVJWRVJcXFwifXN0YXRpYyBnZXQgQVBJX1RPX1NFUlZFUl9SRVFVRVNUKCl7cmV0dXJuYEFQSV9UT19TRVJWRVJbJHtpLkFQSV9SRVFVRVNUX1RZUEV9XSR7aS5NRVRIT0RfQ09MT059YH1zdGF0aWMgZ2V0IFNFUlZFUl9UT19BUElfRU1JVCgpe3JldHVybmBTRVJWRVJfVE9fQVBJWyR7aS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfV0ke2kuTUVUSE9EX0NPTE9OfWB9c3RhdGljIGdldCBTRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCgpe3JldHVybmBTRVJWRVJfVE9fQVBJWyR7aS5BUElfUkVTUE9OU0VfVFlQRV9CUk9BRENBU1R9XSR7aS5NRVRIT0RfQ09MT059YH1zdGF0aWMgZ2V0IEFQSV9UT19DTElFTlRfUkVRVUVTVCgpe3JldHVybmBBUElfVE9fQ0xJRU5UWyR7aS5BUElfUkVRVUVTVF9UWVBFfV0ke2kuTUVUSE9EX0NPTE9OfWB9c3RhdGljIGdldCBBUElfVE9fQ0xJRU5UX0VNSVQoKXtyZXR1cm5gQVBJX1RPX0NMSUVOVFske2kuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVH1dJHtpLk1FVEhPRF9DT0xPTn1gfXN0YXRpYyBnZXQgQVBJX1RPX0NMSUVOVF9CUk9BRENBU1QoKXtyZXR1cm5gQVBJX1RPX0NMSUVOVFske2kuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUfV0ke2kuTUVUSE9EX0NPTE9OfWB9c3RhdGljIGdldCBBUElfQlJPQURDQVNUX0NBTExCQUNLKCl7cmV0dXJuXFxcInR1bmVcXFwifXN0YXRpYyBnZXQgUkVEVVhfQUNUSU9OX0tFWSgpe3JldHVyblxcXCJ0eXBlXFxcIn1zdGF0aWMgZ2V0IE1FVEhPRF9DT0xPTigpe3JldHVyblxcXCI6XFxcIn1zdGF0aWMgZ2V0IEFERF9DTElFTlRfQUNUSU9OX1BSRUZJWCgpe3JldHVyblxcXCJBUElfVE9fQ0xJRU5UXFxcIn1zdGF0aWMgZ2V0IG1hcCgpe3JldHVybnt0dW5lOntyZXF1ZXN0UHVibGljU3RhdGU6e30scmVxdWVzdFByaXZhdGVTdGF0ZTp7dGhyZWFkOltcXFwiY2hcXFwiLFxcXCJoYXNTbGFzaFxcXCIsXFxcInByb3RvY29sXFxcIl0sYXBwOltcXFwibXVsdGlzdHJlYW1cXFwiLFxcXCJyb290Q2hcXFwiLFxcXCJkaXNwVGhyZWFkVHlwZVxcXCIsXFxcImFjdGlvbmVkXFxcIixcXFwib2Zmc2V0RmluZElkXFxcIixcXFwiaXNUb2dnbGVNdWx0aXN0cmVhbVxcXCJdfSxyZXNwb25zZUVtaXRTdGF0ZTp7dXNlcjpbXFxcInVpZFxcXCJdLHNldHRpbmc6XFxcIipcXFwiLHRocmVhZDpcXFwiKlxcXCJ9LHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6e3RocmVhZDpbXFxcImxpdmVDbnRcXFwiLFxcXCJjaFxcXCJdfX0sZmV0Y2hQb3N0czp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e3RocmVhZDpbXFxcImNoXFxcIixcXFwicHJvdG9jb2xcXFwiLFxcXCJob3N0XFxcIixcXFwiaGFzU2xhc2hcXFwiXSxhcHA6W1xcXCJtdWx0aXN0cmVhbVxcXCIsXFxcInJvb3RDaFxcXCIsXFxcImRpc3BUaHJlYWRUeXBlXFxcIixcXFwiYWN0aW9uZWRcXFwiLFxcXCJvZmZzZXRGaW5kSWRcXFwiLFxcXCJpc1RvZ2dsZU11bHRpc3RyZWFtXFxcIl19LHJlc3BvbnNlRW1pdFN0YXRlOntwb3N0czpcXFwiKlxcXCIsdGhyZWFkOlxcXCIqXFxcIn0scmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTp7fX0sZ2V0TW9yZTp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e3RocmVhZDpbXFxcImNoXFxcIl0sYXBwOltcXFwibXVsdGlzdHJlYW1cXFwiLFxcXCJkaXNwVGhyZWFkVHlwZVxcXCIsXFxcIm9mZnNldEZpbmRJZFxcXCJdfSxyZXNwb25zZUVtaXRTdGF0ZTp7YXBwOltcXFwiZGlzcFRocmVhZFR5cGVcXFwiLFxcXCJvZmZzZXRGaW5kSWRcXFwiXSxwb3N0czpcXFwiKlxcXCJ9LHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6e319LHVwZGF0ZVRocmVhZDp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e3RocmVhZDpbXFxcImNoXFxcIixcXFwicHJvdG9jb2xcXFwiLFxcXCJob3N0XFxcIixcXFwiaGFzU2xhc2hcXFwiXX0scmVzcG9uc2VFbWl0U3RhdGU6e3RocmVhZDpcXFwiKlxcXCJ9LHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6e319LGNoYW5nZVRocmVhZDp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e3RocmVhZDpbXFxcImNoXFxcIixcXFwiaGFzU2xhc2hcXFwiLFxcXCJwcm90b2NvbFxcXCJdLGFwcDpbXFxcInR1bmVkQ2hcXFwiLFxcXCJtdWx0aXN0cmVhbVxcXCIsXFxcInJvb3RDaFxcXCIsXFxcImRpc3BUaHJlYWRUeXBlXFxcIixcXFwiYWN0aW9uZWRcXFwiLFxcXCJvZmZzZXRGaW5kSWRcXFwiLFxcXCJpc1RvZ2dsZU11bHRpc3RyZWFtXFxcIl19LHJlc3BvbnNlRW1pdFN0YXRlOnt0aHJlYWQ6XFxcIipcXFwifSxyZXNwb25zZUJyb2FkY2FzdFN0YXRlOnt0aHJlYWQ6W1xcXCJsaXZlQ250XFxcIixcXFwiY2hcXFwiXX19LGNoYW5nZVRocmVhZERldGFpbDp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e3RocmVhZDpbXFxcImNoXFxcIl19LHJlc3BvbnNlRW1pdFN0YXRlOnt0aHJlYWQ6XFxcIipcXFwifSxyZXNwb25zZUJyb2FkY2FzdFN0YXRlOnt9fSxhZGRGaW5kQ2hpbGQ6e3JlcXVlc3RQdWJsaWNTdGF0ZTp7fSxyZXF1ZXN0UHJpdmF0ZVN0YXRlOnt0aHJlYWQ6W1xcXCJjaFxcXCJdfSxyZXNwb25zZUVtaXRTdGF0ZTp7dGhyZWFkOlxcXCIqXFxcIn0scmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTp7fX0scmFuazp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e2FwcDpbXFxcImZpbmRUeXBlXFxcIixcXFwicm9vdENoXFxcIixcXFwiaXNSYW5rRGV0YWlsTW9kZVxcXCJdfSxyZXNwb25zZUVtaXRTdGF0ZTp7cmFuazpcXFwiKlxcXCJ9LHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6e319LHBvc3Q6e3JlcXVlc3RQdWJsaWNTdGF0ZTp7fSxyZXF1ZXN0UHJpdmF0ZVN0YXRlOnt1c2VyOltcXFwidWlkXFxcIixcXFwidXR5cGVcXFwiXSxhcHA6W1xcXCJpbnB1dFBvc3RcXFwiLFxcXCJpbnB1dFN0YW1wSWRcXFwiLFxcXCJpbnB1dEN1cnJlbnRUaW1lXFxcIixcXFwiZGlzcFRocmVhZFR5cGVcXFwiXSx0aHJlYWQ6W1xcXCJmaW5kVHlwZVxcXCIsXFxcInRpdGxlXFxcIixcXFwicHJvdG9jb2xcXFwiLFxcXCJjaFxcXCIsXFxcImNoc1xcXCIsXFxcImVtb3Rpb25zXFxcIixcXFwiZmF2aWNvblxcXCIsXFxcImNvbnRlbnRUeXBlXFxcIl19LHJlc3BvbnNlRW1pdFN0YXRlOnt9LHJlc3BvbnNlQnJvYWRjYXN0U3RhdGU6e3Bvc3RzOlxcXCIqXFxcIix0aHJlYWQ6W1xcXCJjaFxcXCIsXFxcImVtb3Rpb25zXFxcIixcXFwicG9zdENudFxcXCJdLHVzZXI6W1xcXCJ1aWRcXFwiXX19LHVwZGF0ZVRocmVhZFNlcnZlck1ldGFzOntyZXF1ZXN0UHVibGljU3RhdGU6e3RocmVhZDpbXFxcInNlcnZlck1ldGFzXFxcIl19LHJlcXVlc3RQcml2YXRlU3RhdGU6e3RocmVhZDpbXFxcImhvc3RcXFwiLFxcXCJwcm90b2NvbFxcXCIsXFxcImNoXFxcIl0sdXNlcjpbXFxcInVpZFxcXCJdfSxyZXNwb25zZUVtaXRTdGF0ZTp7dGhyZWFkOlxcXCIqXFxcIn0scmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTp7fX0sZGlzY29ubmVjdDp7cmVxdWVzdFB1YmxpY1N0YXRlOnt9LHJlcXVlc3RQcml2YXRlU3RhdGU6e30scmVzcG9uc2VFbWl0U3RhdGU6e30scmVzcG9uc2VCcm9hZGNhc3RTdGF0ZTp7dGhyZWFkOltcXFwibGl2ZUNudFxcXCIsXFxcImNoXFxcIl19fX19c3RhdGljIGdldFNlcXVlbmNlQWN0aW9uTWFwKGUpe2NvbnN0IHQ9ZS5zcGxpdChpLk1FVEhPRF9DT0xPTikscz10WzBdLnNwbGl0KFxcXCJbXFxcIilbMF07bGV0IHI7cmV0dXJuIHI9dFswXS5pbmRleE9mKGBbJHtpLkFQSV9SRVFVRVNUX1RZUEV9XWApPjA/aS5BUElfUkVRVUVTVF9UWVBFOnRbMF0uaW5kZXhPZihgWyR7aS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfV1gKT4wP2kuQVBJX1JFU1BPTlNFX1RZUEVfRU1JVDppLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVCx7c2VxdWVuY2U6cyxhY3Rpb25UeXBlOnIsYWN0aW9uTmFtZTp0WzFdfX1zdGF0aWMgdXBkYXRlQ2FsbGJhY2tFeGVDb25kaXRpb25NYXAoZSl7bGV0IHQ9e2VtaXQ6ITAsYnJvYWRjYXN0OiEwfTtyZXR1cm4gaS5tYXBbZV0mJih0LmVtaXQ9IShPYmplY3Qua2V5cyhpLm1hcFtlXS5yZXNwb25zZUVtaXRTdGF0ZSkubGVuZ3RoPjApLHQuYnJvYWRjYXN0PSEoT2JqZWN0LmtleXMoaS5tYXBbZV0ucmVzcG9uc2VCcm9hZGNhc3RTdGF0ZSkubGVuZ3RoPjApKSx0fXN0YXRpYyBjb252ZXJ0U2VydmVyVG9BcGlJb1R5cGUoZSx0KXtyZXR1cm4gdC5pbmRleE9mKGAke2kuQVBJX1NFUEFSQVRFX0lPX1RZUEVfU1RBUlR9JHtpLkFQSV9SRVFVRVNUX1RZUEV9JHtpLkFQSV9TRVBBUkFURV9JT19UWVBFX0VORH1gKT49MD9pLkFQSV9SRVFVRVNUX1RZUEU6dC5pbmRleE9mKGAke2kuQVBJX1NFUEFSQVRFX0lPX1RZUEVfU1RBUlR9JHtpLkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVH0ke2kuQVBJX1NFUEFSQVRFX0lPX1RZUEVfRU5EfWApPj0wP2kuQVBJX1JFU1BPTlNFX1RZUEVfQlJPQURDQVNUOnQuaW5kZXhPZihgJHtpLkFQSV9TRVBBUkFURV9JT19UWVBFX1NUQVJUfSR7aS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUfSR7aS5BUElfU0VQQVJBVEVfSU9fVFlQRV9FTkR9YCk+PTA/aS5BUElfUkVTUE9OU0VfVFlQRV9FTUlUOmkuQVBJX1NFVFVQfXN0YXRpYyBjb252ZXJ0RXh0VG9DbGllbnRBY3Rpb25UeXBlKGUsdCl7cmV0dXJuIGkuY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZSh0KX1zdGF0aWMgY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZShlKXtyZXR1cm4gMD09PWUuaW5kZXhPZihpLkFQSV9UT19TRVJWRVJfUkVRVUVTVCk/ZS5yZXBsYWNlKGkuQVBJX1RPX1NFUlZFUl9SRVFVRVNULGkuQVBJX1RPX0NMSUVOVF9SRVFVRVNUKTowPT09ZS5pbmRleE9mKGkuU0VSVkVSX1RPX0FQSV9FTUlUKT9lLnJlcGxhY2UoaS5TRVJWRVJfVE9fQVBJX0VNSVQsaS5BUElfVE9fQ0xJRU5UX0VNSVQpOjA9PT1lLmluZGV4T2YoaS5TRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCk/ZS5yZXBsYWNlKGkuU0VSVkVSX1RPX0FQSV9CUk9BRENBU1QsaS5BUElfVE9fQ0xJRU5UX0JST0FEQ0FTVCk6ZX1zdGF0aWMgZ2V0UmVxdWVzdFN0YXRlKGUsdCxzKXtjb25zdCByPWUucmVwbGFjZShpLkFQSV9UT19TRVJWRVJfUkVRVUVTVCxcXFwiXFxcIikse3JlcXVlc3RQdWJsaWNTdGF0ZTpvLHJlcXVlc3RQcml2YXRlU3RhdGU6YX09aS5tYXBbcl07bGV0IHU9e1tpLlJFRFVYX0FDVElPTl9LRVldOnJ9O3JldHVybiBPYmplY3Qua2V5cyhhKS5mb3JFYWNoKChlPT57dVtlXXx8KHVbZV09e30pLGFbZV0uZm9yRWFjaCgocj0+e2lmKCF1W2VdW3JdKXtsZXQgaT10W2VdW3JdO3MmJnNbZV0mJm4uZGVmYXVsdC5pc1NldChzW2VdW3JdKSYmKGk9c1tlXVtyXSksdVtlXVtyXT1pfX0pKX0pKSxPYmplY3Qua2V5cyhvKS5mb3JFYWNoKChlPT57dVtlXXx8KHVbZV09e30pLG9bZV0uZm9yRWFjaCgodD0+e3VbZV1bdF18fCh1W2VdW3RdPXMpfSkpfSkpLHV9c3RhdGljIGdldFJlc3BvbnNlU3RhdGUoZSx0LHMpe2NvbnN0IHI9dC50eXBlLG49aS5tYXBbcl1bYHJlc3BvbnNlJHtlfVN0YXRlYF07bGV0IG89e1tpLlJFRFVYX0FDVElPTl9LRVldOnJ9O3JldHVybiBPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChlPT57aWYoIXNbZV0pdGhyb3dgU0VRVUVOQ0UgRVJST1I6IE5PX1VQREFURV9TVEFURV9LRVk6ICR7dC50eXBlfTogJHtlfWA7e2NvbnN0IHI9bltlXTtsZXQgaT1zW2VdO3N3aXRjaChpLmNvbnN0cnVjdG9yLm5hbWUpe2Nhc2VcXFwibW9kZWxcXFwiOmk9aS50b0pTT04oKSxkZWxldGUgaS5faWQsZGVsZXRlIGkuX192fVxcXCIqXFxcIj09PXI/bz17Li4ubyxbZV06aX06ci5mb3JFYWNoKChyPT57aWYodm9pZCAwPT09c1tlXVtyXSl0aHJvd2BTRVFVRU5DRSBFUlJPUjogTk9fVVBEQVRFX1NUQVRFX0NPTFVNTl9OQU1FOiAke3QudHlwZX06ICR7ZX0uJHtyfWA7bz17Li4ubyxbZV06ey4uLm9bZV0sW3JdOnNbZV1bcl19fX0pKX19KSksb31zdGF0aWMgZ2V0UmVxdWVzdEFjdGlvblN0YXRlKGUsdD1udWxsLHM9bnVsbCl7cmV0dXJuXFxcInN0cmluZ1xcXCI9PXR5cGVvZiB0JiZudWxsPT09cz97dHlwZTplfTpcXFwib2JqZWN0XFxcIj09dHlwZW9mIHQmJlxcXCJvYmplY3RcXFwiPT10eXBlb2Ygcz97Li4udCwuLi5zLHR5cGU6ZX06XFxcInN0cmluZ1xcXCI9PXR5cGVvZiB0JiZcXFwib2JqZWN0XFxcIj09dHlwZW9mIHM/ey4uLnMsdHlwZTplfTp7Li4udCx0eXBlOmV9fX10LmRlZmF1bHQ9aX0sMzAwOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDY4OTQpKSxpPXIocyg4Mzk5KSksbz1yKHMoMTY2NSkpLHtQUk9EVUNUSU9OOmEsREVWRUxPUE1FTlQ6dSxQUk9EVUNUSU9OX0RPTUFJTjpjLERFVkVMT1BNRU5UX0RPTUFJTjpkLFNVQl9ET01BSU5TOmwsUE9SVFM6aH09by5kZWZhdWx0LHA9bi5kZWZhdWx0Lmhhc093blByb3BlcnR5KFxcXCJob3N0bmFtZVxcXCIpP24uZGVmYXVsdC5ob3N0bmFtZSgpOmQsZj1mdW5jdGlvbihlKXtpZihcXFwiYnJvd3NlclxcXCI9PT1pLmRlZmF1bHQudGl0bGUpe2lmKGxvY2F0aW9uLmhyZWYuaW5kZXhPZihvLmRlZmF1bHQuREVWRUxPUE1FTlRfRE9NQUlOKT49MCl7Y29uc3QgZT1OdW1iZXIobG9jYXRpb24ucG9ydCk7cmV0dXJuIGU9PT1vLmRlZmF1bHQuUE9SVFMuREVWRUxPUE1FTlRfQ0xJRU5UfHxlPT09by5kZWZhdWx0LlBPUlRTLkRFVkVMT1BNRU5UX0FQSXx8ZT09PW8uZGVmYXVsdC5QT1JUUy5ERVZFTE9QTUVOVF9DT1ZFUnx8ZT09PW8uZGVmYXVsdC5QT1JUUy5ERVZFTE9QTUVOVF9DT01QT05FTlRTfHxlPT09by5kZWZhdWx0LlBPUlRTLkRFVkVMT1BNRU5UX1RVTkU/by5kZWZhdWx0LkRFVkVMT1BNRU5UOm8uZGVmYXVsdC5MT0NBTEhPU1R9cmV0dXJuIG8uZGVmYXVsdC5QUk9EVUNUSU9OfXJldHVybiBlLmluZGV4T2Yoby5kZWZhdWx0LkFXU19IT1NUX0tFWSk+PTA/by5kZWZhdWx0LlBST0RVQ1RJT046by5kZWZhdWx0LkRFVkVMT1BNRU5UfShwKSxUPXtjbGllbnQ6XFxcInRhbGtuLmNsaWVudC5qc1xcXCIsYXBpOlxcXCJ0YWxrbi5hcGkuanNcXFwiLHdzV29ya2VyOlxcXCJ3cy5hcGkud29ya2VyLmpzXFxcIixleHQ6XFxcInRhbGtuLmV4dC5qc1xcXCIsY292ZXI6XFxcInRhbGtuLmNvdmVyLmpzXFxcIix0dW5lOlxcXCJ0YWxrbi50dW5lLmpzXFxcIixjb21wb25lbnRzOlxcXCJ0YWxrbi5jb21wb25lbnRzLmpzXFxcIn0sRT1mPT09dSxfPWY9PT1hP2M6ZCxnPWAke2wuV1dXfS4ke199YCx5PWAke2wuQ09WRVJ9LiR7X31gLG09YCR7bC5BUEl9LiR7X31gLEM9RT9gJHtffToke2guREVWRUxPUE1FTlRfQVBJfS8ke1QuYXBpfWA6YCR7bX0vdjFgLFM9RT9gJHtffToke2guREVWRUxPUE1FTlRfQ0xJRU5UfS8ke1QuY2xpZW50fWA6YCR7bC5DTElFTlR9LiR7X31gLFA9YCR7bC5ERVNDfS4ke199YCxPPWAke2wuUE9SVEFMfS4ke199YCxJPWAke2wuQVNTRVRTfS4ke199YCxBPWAke2wuQVVUT30uJHtffWAsYj1gJHtsLkVYVH0uJHtffWAsUj1gJHtsLkNPTVB9LiR7X31gLHY9YCR7bC5PV059LiR7X31gLE09YCR7bC5ORVdTfS4ke199YCx3PWAke2wuVFVORX0uJHtffWAsRD1gJHtsLkNPTVBPTkVOVFN9LiR7X31gLEw9YCR7SX0vaW1nL2AsTj17ZG9tYWluOl8saXNEZXY6RSxlbnY6ZixmaWxlczpULGhvc3ROYW1lOnAsYXBpVVJMOm0sYXBpQWNjZXNzVVJMOkMsY292ZXJVUkw6eSx3d3dVUkw6ZyxkZXNjVVJMOlAscG9ydGFsVVJMOk8sY2xpZW50VVJMOlMsYXNzZXRzVVJMOkksYXV0b1VSTDpBLGV4dFVSTDpiLGNvbXBVUkw6Uixvd25VUkw6dixuZXdzVVJMOk0sdHVuZVVSTDp3LGJhbm5lclVSTDpgJHtsLkJBTk5FUn0uJHtffWAsY29tcG9uZW50c1VSTDpELHRyYW5zYWN0aW9uVVJMOmAke2wuVFJBTlNBQ1RJT059LiR7X31gLGFzc2V0c0ltZ1BhdGg6TCxhc3NldHNDb3ZlclBhdGg6YCR7SX0vY292ZXIvYCxhc3NldHNJY29uUGF0aDpgJHtJfS9pY29uL2AsYXNzZXRzSnNQYXRoOmAke0l9L2pzL2Asc2Vzc2lvblVSTDpgJHtsLlNFU1NJT059LiR7X31gLGRlc2NyaXB0aW9uOlxcXCJ0YWxrbiBjYW4gc2hhcmUgY29tbWVudHMgd2l0aCB1c2VycyB3YXRjaGluZyB0aGUgc2FtZSBXRUIgcGFnZS4gUGxlYXNlIGVuam95IHRoZSB3b3JsZCBvZiB0YWxrbi5cXFwiLGFwaVZlcjoxLGxwTGFuZ3VhZ2VzOltcXFwiZW5cXFwiLFxcXCJ6aFxcXCIsXFxcImphXFxcIixcXFwiZGVcXFwiLFxcXCJmclxcXCIsXFxcImhpXFxcIixcXFwicHRcXFwiLFxcXCJpdFxcXCIsXFxcInJ1XFxcIixcXFwia29cXFwiLFxcXCJlc1xcXCIsXFxcImlkXFxcIixcXFwidHJcXFwiLFxcXCJubFxcXCIsXFxcImFyXFxcIixcXFwiemgtVFdcXFwiLFxcXCJwbFxcXCIsXFxcInN2XFxcIixcXFwidGhcXFwiLFxcXCJmYVxcXCIsXFxcIm5uXFxcIixcXFwiZ2FcXFwiLFxcXCJoZVxcXCIsXFxcIm1yXFxcIl0sZGVmYXVsdEJpcnRoZGF5VW5peHRpbWU6MWUxMixmaW5kT25lVGhyZWFkQWN0aXZlSG91cjoxLGZpbmRPbmVQb3N0Q250OjMwLGZpbmRPbmVMaW1pdENudDozMDAsb2dwSW1hZ2VzOntIdG1sOmAvLyR7TH10YWxrbl9sb2dvX2h0bWwucG5nYCxNdXNpYzpgLy8ke0x9dGFsa25fbG9nb19tdXNpYy5wbmdgLFZpZGVvOmAvLyR7TH10YWxrbl9sb2dvX3ZpZGVvLnBuZ2B9LGRlZmF1bHRGYXZpY29uOmAvLyR7bC5BU1NFVFN9LiR7X30vZmF2aWNvbi5pY29gfTt0LmRlZmF1bHQ9ey4uLk59fSwxNjY1OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDgzOTkpKSxpPXtBUFBfTkFNRTpcXFwidGFsa25cXFwiLFBST0RVQ1RJT046XFxcIlBST0RVQ1RJT05cXFwiLExPQ0FMSE9TVDpcXFwiTE9DQUxIT1NUXFxcIixERVZFTE9QTUVOVDpcXFwiREVWRUxPUE1FTlRcXFwiLFBST0RVQ1RJT05fSVA6bi5kZWZhdWx0LmVudi5IT1NUTkFNRT9uLmRlZmF1bHQuZW52LkhPU1ROQU1FOlxcXCJsb2NhbGhvc3RcXFwiLFBST0RVQ1RJT05fRE9NQUlOOlxcXCJ0YWxrbi5pb1xcXCIsREVWRUxPUE1FTlRfRE9NQUlOOlxcXCJsb2NhbGhvc3RcXFwiLEFXU19IT1NUX0tFWTpcXFwiZWMyLmludGVybmFsXFxcIixQT1JUUzp7SFRUUDo4MCxIVFRQUzo0NDMsREVWRUxPUE1FTlRfQ09WRVI6OGUzLERFVkVMT1BNRU5UX0FQSTo4MDAxLERFVkVMT1BNRU5UX0NPTVBPTkVOVFM6ODAwMixERVZFTE9QTUVOVF9UVU5FOjgwMDMsREVWRUxPUE1FTlRfQ0xJRU5UOjgwODAsUkVESVM6NjM3OSxNT05HTzoyNzAxNyxTT0NLRVRfSU86MTA0NDN9LFNVQl9ET01BSU5TOntXV1c6XFxcInd3d1xcXCIsQVBJOlxcXCJhcGlcXFwiLERFU0M6XFxcImRlc2NcXFwiLFBPUlRBTDpcXFwicG9ydGFsXFxcIixDTElFTlQ6XFxcImNsaWVudFxcXCIsQVNTRVRTOlxcXCJhc3NldHNcXFwiLFNFU1NJT046XFxcInNlc3Npb25cXFwiLEFVVE86XFxcImF1dG9cXFwiLE9XTjpcXFwib3duXFxcIixORVdTOlxcXCJuZXdzXFxcIixCQU5ORVI6XFxcImJhbm5lclxcXCIsQ09WRVI6XFxcImNvdmVyXFxcIixSQU5LOlxcXCJyYW5rXFxcIixFWFQ6XFxcImV4dFxcXCIsQ09NUE9ORU5UUzpcXFwiY29tcG9uZW50c1xcXCIsVFVORTpcXFwidHVuZVxcXCIsVFJBTlNBQ1RJT046XFxcInRyYW5zYWN0aW9uXFxcIn0sQVBQX1RZUEVTOntDTElFTlQ6XFxcIkNMSUVOVFxcXCIsUE9SVEFMOlxcXCJQT1JUQUxcXFwiLEVYVEVOU0lPTjpcXFwiRVhURU5TSU9OXFxcIixBUEk6XFxcIkFQSVxcXCIsQ09WRVI6XFxcIkNPVkVSXFxcIixDT01QT05FTlRTOlxcXCJDT01QT05FTlRTXFxcIixUVU5FOlxcXCJUVU5FXFxcIn0sVVJMOnt0d2l0dGVyOlxcXCJodHRwczovL3R3aXR0ZXIuY29tL1xcXCIsZmFjZWJvb2s6XFxcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9cXFwiLGFwcHN0b3JlOlxcXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vYXBwL2lkXFxcIixwbGF5c3RvcmU6XFxcImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD1cXFwiLGNocm9tZUV4dGVuc2lvbjpcXFwiaHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdGFsa24tZm9yLWNocm9tZS9ka25nbm1kbGNvZmFtYnBmYWNjZXBibmpnZmhvbGdibz9obD1lblxcXCJ9LHRhbGtuQ2xpZW50SnM6XFxcInRhbGtuLmNsaWVudC5qc1xcXCIsdGFsa25BcGlKczpcXFwidGFsa24uYXBpLmpzXFxcIix0YWxrblJhbmtKczpcXFwidGFsa24ucmFuay5qc1xcXCIsbm9Jbm5lck5vdGlmOlxcXCJTb3JyeSwgTm8gRnVuY3Rpb24uXFxcIixiYW5uZXJDbGFzczpcXFwidGFsa25fYmFubmVyXFxcIixzdG9yYWdlS2V5OntiYXNlS2V5OlxcXCJAdGFsa25AXFxcIixwb3N0c1RpbWVsaW5lWmVybzpcXFwicG9zdHNUaW1lbGluZVplcm9cXFwiLHBvc3RzVGltZWxpbmU6XFxcInBvc3RzVGltZWxpbmVcXFwiLHBvc3RzU2luZ2xlOlxcXCJwb3N0c1NpbmdsZVxcXCIscG9zdHNNdWx0aTpcXFwicG9zdHNNdWx0aVxcXCIscG9zdHNDaGlsZDpcXFwicG9zdHNDaGlsZFxcXCIscG9zdHNMb2dzOlxcXCJwb3N0c0xvZ3NcXFwiLHRocmVhZHM6XFxcInRocmVhZHNcXFwifX07dC5kZWZhdWx0PWl9LDMzNjU6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMTAyNSkpO2NsYXNzIGl7Y29uc3RydWN0b3IoZT1cXFwiXFxcIil7dGhpcy5iZWxvbmdDb3ZlclR5cGVzPXt9LHRoaXMuaWRLZXlUeXBlcz17fSx0aGlzLnR5cGVzQXJyYXk9W10sT2JqZWN0LmtleXMoaS5pbnB1dHMpLmZvckVhY2goKGU9PntpLmlucHV0c1tlXS5mb3JFYWNoKCh0PT57dGhpcy5iZWxvbmdDb3ZlclR5cGVzW3RdPWV9KSl9KSksT2JqZWN0LmtleXMoaS5UWVBFUykuZm9yRWFjaCgoZT0+e3RoaXMudHlwZXNBcnJheS5wdXNoKGUpO2NvbnN0IHQ9aS5UWVBFU1tlXTt0aGlzLmlkS2V5VHlwZXNbdC5JRF09dC5MQUJFTH0pKSx0aGlzLm1vZGVsPW4uZGVmYXVsdCx0aGlzLmJhbGFuY2VzPXtwbGFpbjpuLmRlZmF1bHQuUGxhaW4uZ2V0U2F2ZUJhbGFuY2UscnVzc2VsbDpuLmRlZmF1bHQuUnVzc2VsbC5nZXRTYXZlQmFsYW5jZSxydXNzZWxsU2ltcGxlOm4uZGVmYXVsdC5SdXNzZWxsU2ltcGxlLmdldFNhdmVCYWxhbmNlfX1zdGF0aWMgZ2V0IGRlZmF1bHRNb2RlbEtleSgpe3JldHVyblxcXCJydXNzZWxsU2ltcGxlXFxcIn1zdGF0aWMgZ2V0IFRZUEVTKCl7cmV0dXJue0xJS0U6e0lEOjEsTEFCRUw6XFxcIkxpa2VcXFwifSxJTlRFUkVTVDp7SUQ6MTAwMixMQUJFTDpcXFwiSW50ZXJlc3RcXFwifSxESVNDT1ZFUlk6e0lEOjEwMDMsTEFCRUw6XFxcIkRpc2NvdmVyeVxcXCJ9LFNVTk5ZOntJRDoxMDA0LExBQkVMOlxcXCJTdW5ueVxcXCJ9LFBFQUNFOntJRDoxMDA1LExBQkVMOlxcXCJQZWFjZVxcXCJ9LENIRUVSOntJRDoxMDA2LExBQkVMOlxcXCJDaGVlclxcXCJ9LE1PTkVZOntJRDoxMDA3LExBQkVMOlxcXCJNb25leVxcXCJ9LFVOTElLRTp7SUQ6MjAwMSxMQUJFTDpcXFwiVW5saWtlXFxcIn0sTE9WRTp7SUQ6M2UzLExBQkVMOlxcXCJMb3ZlXFxcIn0sU1VQUklTRTp7SUQ6MTAwMDEsTEFCRUw6XFxcIlN1cnByaXNlXFxcIn0sRVhDSVRFOntJRDoxMDAwMixMQUJFTDpcXFwiRXhjaXRlXFxcIn0sSEFQUFk6e0lEOjEwMDAzLExBQkVMOlxcXCJIYXBweVxcXCJ9LEpPWTp7SUQ6MTAwMDQsTEFCRUw6XFxcIkpveVxcXCJ9LEdMQUQ6e0lEOjIwMDAxLExBQkVMOlxcXCJHbGFkXFxcIn0sU0FUSVNGQUNUSU9OOntJRDoyMDAwMixMQUJFTDpcXFwiU2F0aXNmYWN0aW9uXFxcIn0sQ09NRk9SVDp7SUQ6MzAwMDEsTEFCRUw6XFxcIkNvbWZvcnRcXFwifSxSRUxBWDp7SUQ6MzAwMDIsTEFCRUw6XFxcIlJlbGF4XFxcIn0sVElSRUQ6e0lEOjMwMDAzLExBQkVMOlxcXCJUaXJlZFxcXCJ9LFNMRUVQWTp7SUQ6NTAwMDEsTEFCRUw6XFxcIlNsZWVweVxcXCJ9LFNMQUNLOntJRDo2MDAwMSxMQUJFTDpcXFwiU2xhY2tcXFwifSxCT1JJTkc6e0lEOjYwMDAyLExBQkVMOlxcXCJCb3JpbmdcXFwifSxNRUxBTkNIT0xZOntJRDo3MDAwMSxMQUJFTDpcXFwiTWVsYW5jaG9seVxcXCJ9LFNBRDp7SUQ6NzAwMDIsTEFCRUw6XFxcIlNhZFxcXCJ9LFVOUExFQVNBTlQ6e0lEOjcwMDAzLExBQkVMOlxcXCJVbnBsZWFzYW50XFxcIn0sRlJVU1RSQVRFRDp7SUQ6NzAwMDQsTEFCRUw6XFxcIkZydXN0cmF0ZWRcXFwifSxESVNTQVRJU0ZJRUQ6e0lEOjgwMDAxLExBQkVMOlxcXCJEaXNzYXRpc2ZpZWRcXFwifSxBTkdFUjp7SUQ6ODAwMDIsTEFCRUw6XFxcIkFuZ2VyXFxcIn0sV09SUlk6e0lEOjgwMDAzLExBQkVMOlxcXCJXb3JyeVxcXCJ9LEZFQVI6e0lEOjgwMDA0LExBQkVMOlxcXCJGZWFyXFxcIn0sV09SUllfRkVBUjp7SUQ6ODAwMDUsTEFCRUw6XFxcIldvcnJ5JkZlYXJcXFwifX19c3RhdGljIGdldEdyYXBoTWF4TnVtKGU9aS5kZWZhdWx0TW9kZWxLZXksdD0wLHM9ITApe2xldCByPTAsbj17fTtzd2l0Y2goZSl7Y2FzZVxcXCJwbGFpblxcXCI6bj17MToxLDU6MiwxMDozLDMwOjQsNzA6NSwxMDA6NiwyNTA6Nyw1MDA6OCw3NTA6OSwxZTM6MTB9O2JyZWFrO2Nhc2VcXFwicnVzc2VsbFNpbXBsZVxcXCI6bj17Njo1LDEwOjUsMjA6NSwzMDo1LDUwOjV9O2JyZWFrO2Nhc2VcXFwicnVzc2VsbFxcXCI6bj17MToxLDU6MiwxMDozLDMwOjQsNzA6NSwxMDA6NiwyNTA6Nyw1MDA6OCw3NTA6OSwxZTM6MTB9fWNvbnN0IG89T2JqZWN0LmtleXMobiksYT1vLmxlbmd0aC0xO2ZvcihsZXQgZT0wO2U8YTtlKyspe2NvbnN0IHM9b1tlXSxpPW5bc107aWYocz50KWJyZWFrO3I9aX1yZXR1cm4gcz9yKzE6cn1zdGF0aWMgZ2V0IGlucHV0cygpe3JldHVybntbaS5UWVBFUy5MSUtFLkxBQkVMXTpbMSwyLDMsNCw1XSxbaS5UWVBFUy5NT05FWS5MQUJFTF06WzEwMF0sW2kuVFlQRVMuRVhDSVRFLkxBQkVMXTpbMTEwMSwxMTAyLDExMDMsMTAwMSwxMDAyXSxbaS5UWVBFUy5IQVBQWS5MQUJFTF06WzEyMDEsMTIwMiwxMjAzLDEyMDQsMTMwMSwxMzAyLDEzMDMsMTMwNCwxMzA1LDEzMDYsMTMwN10sW2kuVFlQRVMuSk9ZLkxBQkVMXTpbMTQwMSwxNDAyLDE1MDEsMTUwMiwxNTAzLDE1MDRdLFtpLlRZUEVTLlJFTEFYLkxBQkVMXTpbMTYwMSwxNjAyLDE2MDMsMTcwMSwxNzAyLDE3MDMsMTgwMSwxODAyLDE4MDNdLFtpLlRZUEVTLlNMQUNLLkxBQkVMXTpbMjAwMSwyMDAyLDIwMDMsMjAwNCwyMDA1LDIxMDEsMjEwMiwyMTAzXSxbaS5UWVBFUy5NRUxBTkNIT0xZLkxBQkVMXTpbMjMwMSwyMzAyLDIzMDMsMjIwMSwyMjAyLDIyMDMsMjIwNCwyMjA1LDI0MDEsMjQwMiwyNDAzLDI0MDQsMjUwMSwyNTAyLDI1MDNdLFtpLlRZUEVTLkFOR0VSLkxBQkVMXTpbMjcwMSwyNzAyLDI3MDMsMjcwNCwyNzA1LDI3MDYsMjYwMSwyNjAyXSxbaS5UWVBFUy5XT1JSWV9GRUFSLkxBQkVMXTpbMjkwNCwyOTA1LDI5MDYsMjgwMSwyODAyLDI4MDMsMjgwNCwyODA1LDI4MDYsMjkwMSwyOTAzXX19c3RhdGljIGdldCBtYXAoKXtyZXR1cm57MTpcXFwi8J+RjVxcXCIsMjpcXFwi4pyM77iPXFxcIiwzOlxcXCLwn5GAXFxcIiw0OlxcXCLwn5KhXFxcIiw1OlxcXCLwn5KqXFxcIiwxMDpcXFwiXFxcIiwxMDA6XFxcIvCfkrVcXFwiLDEwMDE6XFxcIvCfmLNcXFwiLDEwMDI6XFxcIvCfmLVcXFwiLDExMDE6XFxcIvCfpKNcXFwiLDExMDI6XFxcIvCfmIZcXFwiLDExMDM6XFxcIvCfpKlcXFwiLDEyMDE6XFxcIvCfkpNcXFwiLDEyMDI6XFxcIvCfpbBcXFwiLDEyMDM6XFxcIvCfmI1cXFwiLDEyMDQ6XFxcIvCfmLtcXFwiLDEzMDE6XFxcIvCfmIRcXFwiLDEzMDI6XFxcIuKcqFxcXCIsMTMwMzpcXFwi8J+YgVxcXCIsMTMwNDpcXFwi8J+NulxcXCIsMTMwNTpcXFwi8J+YilxcXCIsMTMwNjpcXFwi8J+YmFxcXCIsMTMwNzpcXFwi8J+Mn1xcXCIsMTQwMTpcXFwi8J+ls1xcXCIsMTQwMjpcXFwi8J+Yg1xcXCIsMTUwMTpcXFwi8J+Yi1xcXCIsMTUwMjpcXFwi8J+OglxcXCIsMTUwMzpcXFwi8J+NsFxcXCIsMTUwNDpcXFwi8J+ngVxcXCIsMTYwMTpcXFwi8J+YjFxcXCIsMTYwMjpcXFwi8J+kpFxcXCIsMTYwMzpcXFwi8J+YiVxcXCIsMTcwMTpcXFwi8J+ZglxcXCIsMTcwMjpcXFwi4piV77iPXFxcIiwxNzAzOlxcXCLwn421XFxcIiwxODAxOlxcXCLwn5iQXFxcIiwxODAyOlxcXCLwn5iuXFxcIiwxODAzOlxcXCLwn5ivXFxcIiwyMDAxOlxcXCLwn5iFXFxcIiwyMDAyOlxcXCLwn5KmXFxcIiwyMDAzOlxcXCLwn6W6XFxcIiwyMDA0OlxcXCLwn5iyXFxcIiwyMDA1OlxcXCLwn5mEXFxcIiwyMTAxOlxcXCLwn5iSXFxcIiwyMTAyOlxcXCLwn5iRXFxcIiwyMTAzOlxcXCLwn5iVXFxcIiwyMjAxOlxcXCLwn5ipXFxcIiwyMjAyOlxcXCLwn5ieXFxcIiwyMjAzOlxcXCLwn5iUXFxcIiwyMjA0OlxcXCLwn5ifXFxcIiwyMjA1OlxcXCLwn6SiXFxcIiwyMzAxOlxcXCLwn5itXFxcIiwyMzAyOlxcXCLwn5ilXFxcIiwyMzAzOlxcXCLwn5i/XFxcIiwyNDAxOlxcXCLwn6SVXFxcIiwyNDAyOlxcXCLwn6SSXFxcIiwyNDAzOlxcXCLwn5i3XFxcIiwyNDA0OlxcXCLwn6SnXFxcIiwyNTAxOlxcXCLwn6eQXFxcIiwyNTAyOlxcXCLwn6SUXFxcIiwyNTAzOlxcXCLwn6SoXFxcIiwyNjAxOlxcXCLwn5igXFxcIiwyNjAyOlxcXCLwn5i+XFxcIiwyNzAxOlxcXCLwn5ihXFxcIiwyNzAyOlxcXCLwn6SsXFxcIiwyNzAzOlxcXCLwn5KUXFxcIiwyNzA0OlxcXCLwn5KiXFxcIiwyNzA1OlxcXCLwn5ikXFxcIiwyNzA2OlxcXCLwn5G/XFxcIiwyODAxOlxcXCLwn5ijXFxcIiwyODAyOlxcXCLwn5irXFxcIiwyODAzOlxcXCLwn5iTXFxcIiwyODA0OlxcXCLwn5iWXFxcIiwyODA1OlxcXCLwn5ioXFxcIiwyODA2OlxcXCLwn5iwXFxcIiwyOTAxOlxcXCLwn6W2XFxcIiwyOTAyOlxcXCLwn6SuXFxcIiwyOTAzOlxcXCLwn6W1XFxcIiwyOTA0OlxcXCLwn5ixXFxcIiwyOTA1OlxcXCLwn5mAXFxcIiwyOTA2OlxcXCLwn5KAXFxcIn19fXQuZGVmYXVsdD1pfSwyNzAzOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IG49cihzKDMzNjUpKTtjbGFzcyBpe3N0YXRpYyBnZXQgVFlQRVMoKXtyZXR1cm5bbi5kZWZhdWx0LlRZUEVTLkxJS0VdfXN0YXRpYyBnZXRTYXZlQmFsYW5jZShlKXtjb25zdCB0PXsxOlt7W24uZGVmYXVsdC5UWVBFUy5MSUtFLklEXToxfV19O3JldHVybiB0W2VdP3RbZV06bnVsbH1zdGF0aWMgZ2V0U2NoZW1hcygpe2xldCBlPXt9O3JldHVybiBpLlRZUEVTLmZvckVhY2goKCh0LHMpPT57ZVt0LkxBQkVMXT17dHlwZTpOdW1iZXIsZGVmYXVsdDowLG1pbjowfX0pKSxlfX10LmRlZmF1bHQ9aX0sNjY2MzpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygzMzY1KSk7Y2xhc3MgaXtjb25zdHJ1Y3RvcihlKXt0aGlzLnR5cGVzQXJyYXk9W10sT2JqZWN0LmtleXMoaS5UWVBFUykuZm9yRWFjaCgoZT0+e3RoaXMudHlwZXNBcnJheS5wdXNoKGkuVFlQRVNbZV0uTEFCRUwpfSkpfXN0YXRpYyBnZXQgVFlQRVMoKXtyZXR1cm5bbi5kZWZhdWx0LlRZUEVTLlNVUFJJU0Usbi5kZWZhdWx0LlRZUEVTLkVYQ0lURSxuLmRlZmF1bHQuVFlQRVMuSEFQUFksbi5kZWZhdWx0LlRZUEVTLkpPWSxuLmRlZmF1bHQuVFlQRVMuR0xBRCxuLmRlZmF1bHQuVFlQRVMuU0FUSVNGQUNUSU9OLG4uZGVmYXVsdC5UWVBFUy5DT01GT1JULG4uZGVmYXVsdC5UWVBFUy5SRUxBWCxuLmRlZmF1bHQuVFlQRVMuVElSRUQsbi5kZWZhdWx0LlRZUEVTLlNMRUVQWSxuLmRlZmF1bHQuVFlQRVMuU0xBQ0ssbi5kZWZhdWx0LlRZUEVTLkJPUklORyxuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWSxuLmRlZmF1bHQuVFlQRVMuU0FELG4uZGVmYXVsdC5UWVBFUy5VTlBMRUFTQU5ULG4uZGVmYXVsdC5UWVBFUy5GUlVTVFJBVEVELG4uZGVmYXVsdC5UWVBFUy5ESVNTQVRJU0ZJRUQsbi5kZWZhdWx0LlRZUEVTLkFOR0VSLG4uZGVmYXVsdC5UWVBFUy5XT1JSWSxuLmRlZmF1bHQuVFlQRVMuRkVBUl19c3RhdGljIGdldFNhdmVCYWxhbmNlKGUpe2NvbnN0IHQ9ezEwMDE6W3tbbi5kZWZhdWx0LlRZUEVTLlNVUFJJU0UuSURdOjF9XSwxMDAyOlt7W24uZGVmYXVsdC5UWVBFUy5TVVBSSVNFLklEXToxfV0sMTEwMTpbe1tuLmRlZmF1bHQuVFlQRVMuRVhDSVRFLklEXToxfV0sMTEwMjpbe1tuLmRlZmF1bHQuVFlQRVMuRVhDSVRFLklEXToxfV0sMTEwMzpbe1tuLmRlZmF1bHQuVFlQRVMuRVhDSVRFLklEXToxfV0sMTIwMTpbe1tuLmRlZmF1bHQuVFlQRVMuSEFQUFkuSURdOjF9XSwxMjAyOlt7W24uZGVmYXVsdC5UWVBFUy5IQVBQWS5JRF06MX1dLDEyMDM6W3tbbi5kZWZhdWx0LlRZUEVTLkhBUFBZLklEXToxfV0sMTIwNDpbe1tuLmRlZmF1bHQuVFlQRVMuSEFQUFkuSURdOjF9XSwxMzAxOlt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxMzAyOlt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxMzAzOlt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxMzA0Olt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxMzA1Olt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxMzA2Olt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxMzA3Olt7W24uZGVmYXVsdC5UWVBFUy5KT1kuSURdOjF9XSwxNDAxOlt7W24uZGVmYXVsdC5UWVBFUy5HTEFELklEXToxfV0sMTQwMjpbe1tuLmRlZmF1bHQuVFlQRVMuR0xBRC5JRF06MX1dLDE1MDE6W3tbbi5kZWZhdWx0LlRZUEVTLlNBVElTRkFDVElPTi5JRF06MX1dLDE1MDI6W3tbbi5kZWZhdWx0LlRZUEVTLlNBVElTRkFDVElPTi5JRF06MX1dLDE1MDM6W3tbbi5kZWZhdWx0LlRZUEVTLlNBVElTRkFDVElPTi5JRF06MX1dLDE1MDQ6W3tbbi5kZWZhdWx0LlRZUEVTLlNBVElTRkFDVElPTi5JRF06MX1dLDE2MDE6W3tbbi5kZWZhdWx0LlRZUEVTLkNPTUZPUlQuSURdOjF9XSwxNjAyOlt7W24uZGVmYXVsdC5UWVBFUy5DT01GT1JULklEXToxfV0sMTcwMTpbe1tuLmRlZmF1bHQuVFlQRVMuUkVMQVguSURdOjF9XSwxNzAyOlt7W24uZGVmYXVsdC5UWVBFUy5SRUxBWC5JRF06MX1dLDE3MDM6W3tbbi5kZWZhdWx0LlRZUEVTLlJFTEFYLklEXToxfV0sMTgwMTpbe1tuLmRlZmF1bHQuVFlQRVMuVElSRUQuSURdOjF9XSwxODAyOlt7W24uZGVmYXVsdC5UWVBFUy5USVJFRC5JRF06MX1dLDE4MDM6W3tbbi5kZWZhdWx0LlRZUEVTLlRJUkVELklEXToxfV0sMjAwMTpbe1tuLmRlZmF1bHQuVFlQRVMuU0xBQ0suSURdOjF9XSwyMDAyOlt7W24uZGVmYXVsdC5UWVBFUy5TTEFDSy5JRF06MX1dLDIwMDM6W3tbbi5kZWZhdWx0LlRZUEVTLlNMQUNLLklEXToxfV0sMjAwNDpbe1tuLmRlZmF1bHQuVFlQRVMuU0xBQ0suSURdOjF9XSwyMTAxOlt7W24uZGVmYXVsdC5UWVBFUy5CT1JJTkcuSURdOjF9XSwyMTAyOlt7W24uZGVmYXVsdC5UWVBFUy5CT1JJTkcuSURdOjF9XSwyMTAzOlt7W24uZGVmYXVsdC5UWVBFUy5CT1JJTkcuSURdOjF9XSwyMjAxOlt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjIwMjpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDIyMDM6W3tbbi5kZWZhdWx0LlRZUEVTLk1FTEFOQ0hPTFkuSURdOjF9XSwyMjA0Olt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjIwNTpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDIzMDE6W3tbbi5kZWZhdWx0LlRZUEVTLlNBRC5JRF06MX1dLDIzMDI6W3tbbi5kZWZhdWx0LlRZUEVTLlNBRC5JRF06MX1dLDIzMDM6W3tbbi5kZWZhdWx0LlRZUEVTLlNBRC5JRF06MX1dLDI0MDE6W3tbbi5kZWZhdWx0LlRZUEVTLlVOUExFQVNBTlQuSURdOjF9XSwyNDAyOlt7W24uZGVmYXVsdC5UWVBFUy5VTlBMRUFTQU5ULklEXToxfV0sMjQwMzpbe1tuLmRlZmF1bHQuVFlQRVMuVU5QTEVBU0FOVC5JRF06MX1dLDI0MDQ6W3tbbi5kZWZhdWx0LlRZUEVTLlVOUExFQVNBTlQuSURdOjF9XSwyNTAxOlt7W24uZGVmYXVsdC5UWVBFUy5GUlVTVFJBVEVELklEXToxfV0sMjUwMjpbe1tuLmRlZmF1bHQuVFlQRVMuRlJVU1RSQVRFRC5JRF06MX1dLDI1MDM6W3tbbi5kZWZhdWx0LlRZUEVTLkZSVVNUUkFURUQuSURdOjF9XSwyNjAxOlt7W24uZGVmYXVsdC5UWVBFUy5ESVNTQVRJU0ZJRUQuSURdOjF9XSwyNjAyOlt7W24uZGVmYXVsdC5UWVBFUy5ESVNTQVRJU0ZJRUQuSURdOjF9XSwyNzAxOlt7W24uZGVmYXVsdC5UWVBFUy5BTkdFUi5JRF06MX1dLDI3MDI6W3tbbi5kZWZhdWx0LlRZUEVTLkFOR0VSLklEXToxfV0sMjcwMzpbe1tuLmRlZmF1bHQuVFlQRVMuQU5HRVIuSURdOjF9XSwyNzA0Olt7W24uZGVmYXVsdC5UWVBFUy5BTkdFUi5JRF06MX1dLDI3MDU6W3tbbi5kZWZhdWx0LlRZUEVTLkFOR0VSLklEXToxfV0sMjcwNjpbe1tuLmRlZmF1bHQuVFlQRVMuQU5HRVIuSURdOjF9XSwyODAxOlt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWS5JRF06MX1dLDI4MDI6W3tbbi5kZWZhdWx0LlRZUEVTLldPUlJZLklEXToxfV0sMjgwMzpbe1tuLmRlZmF1bHQuVFlQRVMuV09SUlkuSURdOjF9XSwyODA0Olt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWS5JRF06MX1dLDI4MDU6W3tbbi5kZWZhdWx0LlRZUEVTLldPUlJZLklEXToxfV0sMjgwNjpbe1tuLmRlZmF1bHQuVFlQRVMuV09SUlkuSURdOjF9XSwyODA3Olt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWS5JRF06MX1dLDI5MDE6W3tbbi5kZWZhdWx0LlRZUEVTLkZFQVIuSURdOjF9XSwyOTAyOlt7W24uZGVmYXVsdC5UWVBFUy5GRUFSLklEXToxfV0sMjkwMzpbe1tuLmRlZmF1bHQuVFlQRVMuRkVBUi5JRF06MX1dLDI5MDQ6W3tbbi5kZWZhdWx0LlRZUEVTLkZFQVIuSURdOjF9XSwyOTA1Olt7W24uZGVmYXVsdC5UWVBFUy5GRUFSLklEXToxfV0sMjkwNjpbe1tuLmRlZmF1bHQuVFlQRVMuRkVBUi5JRF06MX1dfTtyZXR1cm4gdFtlXT90W2VdOm51bGx9c3RhdGljIGdldFNjaGVtYXMoKXtsZXQgZT17fTtyZXR1cm4gaS5UWVBFUy5mb3JFYWNoKCgodCxzKT0+e2VbdC5MQUJFTF09e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MCxtaW46MH19KSksZX19dC5kZWZhdWx0PWl9LDMwMDU6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbj1yKHMoMzM2NSkpO2NsYXNzIGl7Y29uc3RydWN0b3IoZSl7dGhpcy50eXBlc0FycmF5PVtdLE9iamVjdC5rZXlzKGkuVFlQRVMpLmZvckVhY2goKGU9Pnt0aGlzLnR5cGVzQXJyYXkucHVzaChpLlRZUEVTW2VdLkxBQkVMKX0pKX1zdGF0aWMgZ2V0IFRZUEVTKCl7cmV0dXJuW24uZGVmYXVsdC5UWVBFUy5FWENJVEUsbi5kZWZhdWx0LlRZUEVTLkhBUFBZLG4uZGVmYXVsdC5UWVBFUy5KT1ksbi5kZWZhdWx0LlRZUEVTLlJFTEFYLG4uZGVmYXVsdC5UWVBFUy5TTEFDSyxuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWSxuLmRlZmF1bHQuVFlQRVMuQU5HRVIsbi5kZWZhdWx0LlRZUEVTLldPUlJZX0ZFQVJdfXN0YXRpYyBnZXRTYXZlQmFsYW5jZShlKXtjb25zdCB0PXsxMDAxOlt7W24uZGVmYXVsdC5UWVBFUy5FWENJVEUuSURdOjF9XSwxMDAyOlt7W24uZGVmYXVsdC5UWVBFUy5FWENJVEUuSURdOjF9XSwxMTAxOlt7W24uZGVmYXVsdC5UWVBFUy5FWENJVEUuSURdOjF9XSwxMTAyOlt7W24uZGVmYXVsdC5UWVBFUy5FWENJVEUuSURdOjF9XSwxMTAzOlt7W24uZGVmYXVsdC5UWVBFUy5FWENJVEUuSURdOjF9XSwxMjAxOlt7W24uZGVmYXVsdC5UWVBFUy5IQVBQWS5JRF06MX1dLDEyMDI6W3tbbi5kZWZhdWx0LlRZUEVTLkhBUFBZLklEXToxfV0sMTIwMzpbe1tuLmRlZmF1bHQuVFlQRVMuSEFQUFkuSURdOjF9XSwxMjA0Olt7W24uZGVmYXVsdC5UWVBFUy5IQVBQWS5JRF06MX1dLDEzMDE6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDEzMDI6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDEzMDM6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDEzMDQ6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDEzMDU6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDEzMDY6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDEzMDc6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE0MDE6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE0MDI6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE1MDE6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE1MDI6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE1MDM6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE1MDQ6W3tbbi5kZWZhdWx0LlRZUEVTLkpPWS5JRF06MX1dLDE2MDE6W3tbbi5kZWZhdWx0LlRZUEVTLlJFTEFYLklEXToxfV0sMTYwMjpbe1tuLmRlZmF1bHQuVFlQRVMuUkVMQVguSURdOjF9XSwxNzAxOlt7W24uZGVmYXVsdC5UWVBFUy5SRUxBWC5JRF06MX1dLDE3MDI6W3tbbi5kZWZhdWx0LlRZUEVTLlJFTEFYLklEXToxfV0sMTcwMzpbe1tuLmRlZmF1bHQuVFlQRVMuUkVMQVguSURdOjF9XSwxODAxOlt7W24uZGVmYXVsdC5UWVBFUy5USVJFRC5JRF06MX1dLDE4MDI6W3tbbi5kZWZhdWx0LlRZUEVTLlRJUkVELklEXToxfV0sMTgwMzpbe1tuLmRlZmF1bHQuVFlQRVMuVElSRUQuSURdOjF9XSwyMDAxOlt7W24uZGVmYXVsdC5UWVBFUy5TTEFDSy5JRF06MX1dLDIwMDI6W3tbbi5kZWZhdWx0LlRZUEVTLlNMQUNLLklEXToxfV0sMjAwMzpbe1tuLmRlZmF1bHQuVFlQRVMuU0xBQ0suSURdOjF9XSwyMDA0Olt7W24uZGVmYXVsdC5UWVBFUy5TTEFDSy5JRF06MX1dLDIxMDE6W3tbbi5kZWZhdWx0LlRZUEVTLlNMQUNLLklEXToxfV0sMjEwMjpbe1tuLmRlZmF1bHQuVFlQRVMuU0xBQ0suSURdOjF9XSwyMTAzOlt7W24uZGVmYXVsdC5UWVBFUy5TTEFDSy5JRF06MX1dLDIyMDE6W3tbbi5kZWZhdWx0LlRZUEVTLk1FTEFOQ0hPTFkuSURdOjF9XSwyMjAyOlt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjIwMzpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDIyMDQ6W3tbbi5kZWZhdWx0LlRZUEVTLk1FTEFOQ0hPTFkuSURdOjF9XSwyMjA1Olt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjMwMTpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDIzMDI6W3tbbi5kZWZhdWx0LlRZUEVTLk1FTEFOQ0hPTFkuSURdOjF9XSwyMzAzOlt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjQwMTpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDI0MDI6W3tbbi5kZWZhdWx0LlRZUEVTLk1FTEFOQ0hPTFkuSURdOjF9XSwyNDAzOlt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjQwNDpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDI1MDE6W3tbbi5kZWZhdWx0LlRZUEVTLk1FTEFOQ0hPTFkuSURdOjF9XSwyNTAyOlt7W24uZGVmYXVsdC5UWVBFUy5NRUxBTkNIT0xZLklEXToxfV0sMjUwMzpbe1tuLmRlZmF1bHQuVFlQRVMuTUVMQU5DSE9MWS5JRF06MX1dLDI2MDE6W3tbbi5kZWZhdWx0LlRZUEVTLkFOR0VSLklEXToxfV0sMjYwMjpbe1tuLmRlZmF1bHQuVFlQRVMuQU5HRVIuSURdOjF9XSwyNzAxOlt7W24uZGVmYXVsdC5UWVBFUy5BTkdFUi5JRF06MX1dLDI3MDI6W3tbbi5kZWZhdWx0LlRZUEVTLkFOR0VSLklEXToxfV0sMjcwMzpbe1tuLmRlZmF1bHQuVFlQRVMuQU5HRVIuSURdOjF9XSwyNzA0Olt7W24uZGVmYXVsdC5UWVBFUy5BTkdFUi5JRF06MX1dLDI3MDU6W3tbbi5kZWZhdWx0LlRZUEVTLkFOR0VSLklEXToxfV0sMjcwNjpbe1tuLmRlZmF1bHQuVFlQRVMuQU5HRVIuSURdOjF9XSwyODAxOlt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWV9GRUFSLklEXToxfV0sMjgwMjpbe1tuLmRlZmF1bHQuVFlQRVMuV09SUllfRkVBUi5JRF06MX1dLDI4MDM6W3tbbi5kZWZhdWx0LlRZUEVTLldPUlJZX0ZFQVIuSURdOjF9XSwyODA0Olt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWV9GRUFSLklEXToxfV0sMjgwNTpbe1tuLmRlZmF1bHQuVFlQRVMuV09SUllfRkVBUi5JRF06MX1dLDI4MDY6W3tbbi5kZWZhdWx0LlRZUEVTLldPUlJZX0ZFQVIuSURdOjF9XSwyODA3Olt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWV9GRUFSLklEXToxfV0sMjkwMTpbe1tuLmRlZmF1bHQuVFlQRVMuV09SUllfRkVBUi5JRF06MX1dLDI5MDI6W3tbbi5kZWZhdWx0LlRZUEVTLldPUlJZX0ZFQVIuSURdOjF9XSwyOTAzOlt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWV9GRUFSLklEXToxfV0sMjkwNDpbe1tuLmRlZmF1bHQuVFlQRVMuV09SUllfRkVBUi5JRF06MX1dLDI5MDU6W3tbbi5kZWZhdWx0LlRZUEVTLldPUlJZX0ZFQVIuSURdOjF9XSwyOTA2Olt7W24uZGVmYXVsdC5UWVBFUy5XT1JSWV9GRUFSLklEXToxfV19O3JldHVybiB0W2VdP3RbZV06bnVsbH1zdGF0aWMgZ2V0U2NoZW1hcygpe2xldCBlPXt9O3JldHVybiBpLlRZUEVTLmZvckVhY2goKCh0LHMpPT57ZVt0LkxBQkVMXT17dHlwZTpOdW1iZXIsZGVmYXVsdDowLG1pbjowfX0pKSxlfX10LmRlZmF1bHQ9aX0sMTAyNTpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCBuPXIocygyNzAzKSksaT1yKHMoNjY2MykpLG89cihzKDMwMDUpKTt0LmRlZmF1bHQ9e1BsYWluOm4uZGVmYXVsdCxSdXNzZWxsOmkuZGVmYXVsdCxSdXNzZWxsU2ltcGxlOm8uZGVmYXVsdH19LDY4OTQ6KGUsdCxzKT0+e2UuZXhwb3J0cz1zKDY4OTQpfSw4Mzk5OmU9Pnt2YXIgdCxzLHI9ZS5leHBvcnRzPXt9O2Z1bmN0aW9uIG4oKXt0aHJvdyBuZXcgRXJyb3IoXFxcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcXFwiKX1mdW5jdGlvbiBpKCl7dGhyb3cgbmV3IEVycm9yKFxcXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcXFwiKX1mdW5jdGlvbiBvKGUpe2lmKHQ9PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KGUsMCk7aWYoKHQ9PT1ufHwhdCkmJnNldFRpbWVvdXQpcmV0dXJuIHQ9c2V0VGltZW91dCxzZXRUaW1lb3V0KGUsMCk7dHJ5e3JldHVybiB0KGUsMCl9Y2F0Y2gocyl7dHJ5e3JldHVybiB0LmNhbGwobnVsbCxlLDApfWNhdGNoKHMpe3JldHVybiB0LmNhbGwodGhpcyxlLDApfX19IWZ1bmN0aW9uKCl7dHJ5e3Q9XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpufWNhdGNoKGUpe3Q9bn10cnl7cz1cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDppfWNhdGNoKGUpe3M9aX19KCk7dmFyIGEsdT1bXSxjPSExLGQ9LTE7ZnVuY3Rpb24gbCgpe2MmJmEmJihjPSExLGEubGVuZ3RoP3U9YS5jb25jYXQodSk6ZD0tMSx1Lmxlbmd0aCYmaCgpKX1mdW5jdGlvbiBoKCl7aWYoIWMpe3ZhciBlPW8obCk7Yz0hMDtmb3IodmFyIHQ9dS5sZW5ndGg7dDspe2ZvcihhPXUsdT1bXTsrK2Q8dDspYSYmYVtkXS5ydW4oKTtkPS0xLHQ9dS5sZW5ndGh9YT1udWxsLGM9ITEsZnVuY3Rpb24oZSl7aWYocz09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KGUpO2lmKChzPT09aXx8IXMpJiZjbGVhclRpbWVvdXQpcmV0dXJuIHM9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dChlKTt0cnl7cyhlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHMuY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBzLmNhbGwodGhpcyxlKX19fShlKX19ZnVuY3Rpb24gcChlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGYoKXt9ci5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciBzPTE7czxhcmd1bWVudHMubGVuZ3RoO3MrKyl0W3MtMV09YXJndW1lbnRzW3NdO3UucHVzaChuZXcgcChlLHQpKSwxIT09dS5sZW5ndGh8fGN8fG8oaCl9LHAucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LHIudGl0bGU9XFxcImJyb3dzZXJcXFwiLHIuYnJvd3Nlcj0hMCxyLmVudj17fSxyLmFyZ3Y9W10sci52ZXJzaW9uPVxcXCJcXFwiLHIudmVyc2lvbnM9e30sci5vbj1mLHIuYWRkTGlzdGVuZXI9ZixyLm9uY2U9ZixyLm9mZj1mLHIucmVtb3ZlTGlzdGVuZXI9ZixyLnJlbW92ZUFsbExpc3RlbmVycz1mLHIuZW1pdD1mLHIucHJlcGVuZExpc3RlbmVyPWYsci5wcmVwZW5kT25jZUxpc3RlbmVyPWYsci5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119LHIuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXFxcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXFxcIil9LHIuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXFxcIi9cXFwifSxyLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcXFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXFxcIil9LHIudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LDUxNTk6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7ZnVuY3Rpb24gcyhlKXtlPWV8fHt9LHRoaXMubXM9ZS5taW58fDEwMCx0aGlzLm1heD1lLm1heHx8MWU0LHRoaXMuZmFjdG9yPWUuZmFjdG9yfHwyLHRoaXMuaml0dGVyPWUuaml0dGVyPjAmJmUuaml0dGVyPD0xP2Uuaml0dGVyOjAsdGhpcy5hdHRlbXB0cz0wfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LkJhY2tvZmY9dm9pZCAwLHQuQmFja29mZj1zLHMucHJvdG90eXBlLmR1cmF0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5tcypNYXRoLnBvdyh0aGlzLmZhY3Rvcix0aGlzLmF0dGVtcHRzKyspO2lmKHRoaXMuaml0dGVyKXt2YXIgdD1NYXRoLnJhbmRvbSgpLHM9TWF0aC5mbG9vcih0KnRoaXMuaml0dGVyKmUpO2U9MD09KDEmTWF0aC5mbG9vcigxMCp0KSk/ZS1zOmUrc31yZXR1cm4gMHxNYXRoLm1pbihlLHRoaXMubWF4KX0scy5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmF0dGVtcHRzPTB9LHMucHJvdG90eXBlLnNldE1pbj1mdW5jdGlvbihlKXt0aGlzLm1zPWV9LHMucHJvdG90eXBlLnNldE1heD1mdW5jdGlvbihlKXt0aGlzLm1heD1lfSxzLnByb3RvdHlwZS5zZXRKaXR0ZXI9ZnVuY3Rpb24oZSl7dGhpcy5qaXR0ZXI9ZX19LDcwNDY6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PXQuY29ubmVjdD10LmlvPXQuU29ja2V0PXQuTWFuYWdlcj10LnByb3RvY29sPXZvaWQgMDtjb25zdCBuPXMoMzA4NCksaT1zKDQxNjgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJNYW5hZ2VyXFxcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5NYW5hZ2VyfX0pO2NvbnN0IG89cyg4MzEyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiU29ja2V0XFxcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5Tb2NrZXR9fSk7Y29uc3QgYT1yKHMoMzY2OSkpLmRlZmF1bHQoXFxcInNvY2tldC5pby1jbGllbnRcXFwiKSx1PXt9O2Z1bmN0aW9uIGMoZSx0KXtcXFwib2JqZWN0XFxcIj09dHlwZW9mIGUmJih0PWUsZT12b2lkIDApLHQ9dHx8e307Y29uc3Qgcz1uLnVybChlLHQucGF0aHx8XFxcIi9zb2NrZXQuaW9cXFwiKSxyPXMuc291cmNlLG89cy5pZCxjPXMucGF0aCxkPXVbb10mJmMgaW4gdVtvXS5uc3BzO2xldCBsO3JldHVybiB0LmZvcmNlTmV3fHx0W1xcXCJmb3JjZSBuZXcgY29ubmVjdGlvblxcXCJdfHwhMT09PXQubXVsdGlwbGV4fHxkPyhhKFxcXCJpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzXFxcIixyKSxsPW5ldyBpLk1hbmFnZXIocix0KSk6KHVbb118fChhKFxcXCJuZXcgaW8gaW5zdGFuY2UgZm9yICVzXFxcIixyKSx1W29dPW5ldyBpLk1hbmFnZXIocix0KSksbD11W29dKSxzLnF1ZXJ5JiYhdC5xdWVyeSYmKHQucXVlcnk9cy5xdWVyeUtleSksbC5zb2NrZXQocy5wYXRoLHQpfXQuaW89Yyx0LmNvbm5lY3Q9Yyx0LmRlZmF1bHQ9YyxPYmplY3QuYXNzaWduKGMse01hbmFnZXI6aS5NYW5hZ2VyLFNvY2tldDpvLlNvY2tldCxpbzpjLGNvbm5lY3Q6Y30pO3ZhciBkPXMoNzExNik7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcInByb3RvY29sXFxcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC5wcm90b2NvbH19KSxlLmV4cG9ydHM9Y30sNDE2ODpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQscyxyKXt2b2lkIDA9PT1yJiYocj1zKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0W3NdfX0pfTpmdW5jdGlvbihlLHQscyxyKXt2b2lkIDA9PT1yJiYocj1zKSxlW3JdPXRbc119KSxuPXRoaXMmJnRoaXMuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFxcXCJkZWZhdWx0XFxcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSl9OmZ1bmN0aW9uKGUsdCl7ZS5kZWZhdWx0PXR9KSxpPXRoaXMmJnRoaXMuX19pbXBvcnRTdGFyfHxmdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHMgaW4gZSlcXFwiZGVmYXVsdFxcXCIhPT1zJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxzKSYmcih0LGUscyk7cmV0dXJuIG4odCxlKSx0fSxvPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0Lk1hbmFnZXI9dm9pZCAwO2NvbnN0IGE9cyg5Njg0KSx1PXMoODMxMiksYz1pKHMoNzExNikpLGQ9cyg3MTQ5KSxsPXMoNTE1OSksaD1zKDUyNjApLHA9byhzKDM2NjkpKS5kZWZhdWx0KFxcXCJzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXJcXFwiKTtjbGFzcyBmIGV4dGVuZHMgaC5FbWl0dGVye2NvbnN0cnVjdG9yKGUsdCl7dmFyIHM7c3VwZXIoKSx0aGlzLm5zcHM9e30sdGhpcy5zdWJzPVtdLGUmJlxcXCJvYmplY3RcXFwiPT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksKHQ9dHx8e30pLnBhdGg9dC5wYXRofHxcXFwiL3NvY2tldC5pb1xcXCIsdGhpcy5vcHRzPXQsYS5pbnN0YWxsVGltZXJGdW5jdGlvbnModGhpcyx0KSx0aGlzLnJlY29ubmVjdGlvbighMSE9PXQucmVjb25uZWN0aW9uKSx0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKHQucmVjb25uZWN0aW9uQXR0ZW1wdHN8fDEvMCksdGhpcy5yZWNvbm5lY3Rpb25EZWxheSh0LnJlY29ubmVjdGlvbkRlbGF5fHwxZTMpLHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgodC5yZWNvbm5lY3Rpb25EZWxheU1heHx8NWUzKSx0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IobnVsbCE9PShzPXQucmFuZG9taXphdGlvbkZhY3RvcikmJnZvaWQgMCE9PXM/czouNSksdGhpcy5iYWNrb2ZmPW5ldyBsLkJhY2tvZmYoe21pbjp0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksbWF4OnRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxqaXR0ZXI6dGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCl9KSx0aGlzLnRpbWVvdXQobnVsbD09dC50aW1lb3V0PzJlNDp0LnRpbWVvdXQpLHRoaXMuX3JlYWR5U3RhdGU9XFxcImNsb3NlZFxcXCIsdGhpcy51cmk9ZTtjb25zdCByPXQucGFyc2VyfHxjO3RoaXMuZW5jb2Rlcj1uZXcgci5FbmNvZGVyLHRoaXMuZGVjb2Rlcj1uZXcgci5EZWNvZGVyLHRoaXMuX2F1dG9Db25uZWN0PSExIT09dC5hdXRvQ29ubmVjdCx0aGlzLl9hdXRvQ29ubmVjdCYmdGhpcy5vcGVuKCl9cmVjb25uZWN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9yZWNvbm5lY3Rpb249ISFlLHRoaXMpOnRoaXMuX3JlY29ubmVjdGlvbn1yZWNvbm5lY3Rpb25BdHRlbXB0cyhlKXtyZXR1cm4gdm9pZCAwPT09ZT90aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0czoodGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM9ZSx0aGlzKX1yZWNvbm5lY3Rpb25EZWxheShlKXt2YXIgdDtyZXR1cm4gdm9pZCAwPT09ZT90aGlzLl9yZWNvbm5lY3Rpb25EZWxheToodGhpcy5fcmVjb25uZWN0aW9uRGVsYXk9ZSxudWxsPT09KHQ9dGhpcy5iYWNrb2ZmKXx8dm9pZCAwPT09dHx8dC5zZXRNaW4oZSksdGhpcyl9cmFuZG9taXphdGlvbkZhY3RvcihlKXt2YXIgdDtyZXR1cm4gdm9pZCAwPT09ZT90aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yOih0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yPWUsbnVsbD09PSh0PXRoaXMuYmFja29mZil8fHZvaWQgMD09PXR8fHQuc2V0Sml0dGVyKGUpLHRoaXMpfXJlY29ubmVjdGlvbkRlbGF5TWF4KGUpe3ZhciB0O3JldHVybiB2b2lkIDA9PT1lP3RoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4Oih0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heD1lLG51bGw9PT0odD10aGlzLmJhY2tvZmYpfHx2b2lkIDA9PT10fHx0LnNldE1heChlKSx0aGlzKX10aW1lb3V0KGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl90aW1lb3V0PWUsdGhpcyk6dGhpcy5fdGltZW91dH1tYXliZVJlY29ubmVjdE9uT3BlbigpeyF0aGlzLl9yZWNvbm5lY3RpbmcmJnRoaXMuX3JlY29ubmVjdGlvbiYmMD09PXRoaXMuYmFja29mZi5hdHRlbXB0cyYmdGhpcy5yZWNvbm5lY3QoKX1vcGVuKGUpe2lmKHAoXFxcInJlYWR5U3RhdGUgJXNcXFwiLHRoaXMuX3JlYWR5U3RhdGUpLH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXFxcIm9wZW5cXFwiKSlyZXR1cm4gdGhpcztwKFxcXCJvcGVuaW5nICVzXFxcIix0aGlzLnVyaSksdGhpcy5lbmdpbmU9bmV3IGEuU29ja2V0KHRoaXMudXJpLHRoaXMub3B0cyk7Y29uc3QgdD10aGlzLmVuZ2luZSxzPXRoaXM7dGhpcy5fcmVhZHlTdGF0ZT1cXFwib3BlbmluZ1xcXCIsdGhpcy5za2lwUmVjb25uZWN0PSExO2NvbnN0IHI9ZC5vbih0LFxcXCJvcGVuXFxcIiwoZnVuY3Rpb24oKXtzLm9ub3BlbigpLGUmJmUoKX0pKSxuPWQub24odCxcXFwiZXJyb3JcXFwiLCh0PT57cChcXFwiZXJyb3JcXFwiKSxzLmNsZWFudXAoKSxzLl9yZWFkeVN0YXRlPVxcXCJjbG9zZWRcXFwiLHRoaXMuZW1pdFJlc2VydmVkKFxcXCJlcnJvclxcXCIsdCksZT9lKHQpOnMubWF5YmVSZWNvbm5lY3RPbk9wZW4oKX0pKTtpZighMSE9PXRoaXMuX3RpbWVvdXQpe2NvbnN0IGU9dGhpcy5fdGltZW91dDtwKFxcXCJjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkXFxcIixlKSwwPT09ZSYmcigpO2NvbnN0IHM9dGhpcy5zZXRUaW1lb3V0Rm4oKCgpPT57cChcXFwiY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZFxcXCIsZSkscigpLHQuY2xvc2UoKSx0LmVtaXQoXFxcImVycm9yXFxcIixuZXcgRXJyb3IoXFxcInRpbWVvdXRcXFwiKSl9KSxlKTt0aGlzLm9wdHMuYXV0b1VucmVmJiZzLnVucmVmKCksdGhpcy5zdWJzLnB1c2goKGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHMpfSkpfXJldHVybiB0aGlzLnN1YnMucHVzaChyKSx0aGlzLnN1YnMucHVzaChuKSx0aGlzfWNvbm5lY3QoZSl7cmV0dXJuIHRoaXMub3BlbihlKX1vbm9wZW4oKXtwKFxcXCJvcGVuXFxcIiksdGhpcy5jbGVhbnVwKCksdGhpcy5fcmVhZHlTdGF0ZT1cXFwib3BlblxcXCIsdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcIm9wZW5cXFwiKTtjb25zdCBlPXRoaXMuZW5naW5lO3RoaXMuc3Vicy5wdXNoKGQub24oZSxcXFwicGluZ1xcXCIsdGhpcy5vbnBpbmcuYmluZCh0aGlzKSksZC5vbihlLFxcXCJkYXRhXFxcIix0aGlzLm9uZGF0YS5iaW5kKHRoaXMpKSxkLm9uKGUsXFxcImVycm9yXFxcIix0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksZC5vbihlLFxcXCJjbG9zZVxcXCIsdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLGQub24odGhpcy5kZWNvZGVyLFxcXCJkZWNvZGVkXFxcIix0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSl9b25waW5nKCl7dGhpcy5lbWl0UmVzZXJ2ZWQoXFxcInBpbmdcXFwiKX1vbmRhdGEoZSl7dGhpcy5kZWNvZGVyLmFkZChlKX1vbmRlY29kZWQoZSl7dGhpcy5lbWl0UmVzZXJ2ZWQoXFxcInBhY2tldFxcXCIsZSl9b25lcnJvcihlKXtwKFxcXCJlcnJvclxcXCIsZSksdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImVycm9yXFxcIixlKX1zb2NrZXQoZSx0KXtsZXQgcz10aGlzLm5zcHNbZV07cmV0dXJuIHN8fChzPW5ldyB1LlNvY2tldCh0aGlzLGUsdCksdGhpcy5uc3BzW2VdPXMpLHN9X2Rlc3Ryb3koZSl7Y29uc3QgdD1PYmplY3Qua2V5cyh0aGlzLm5zcHMpO2Zvcihjb25zdCBlIG9mIHQpaWYodGhpcy5uc3BzW2VdLmFjdGl2ZSlyZXR1cm4gdm9pZCBwKFxcXCJzb2NrZXQgJXMgaXMgc3RpbGwgYWN0aXZlLCBza2lwcGluZyBjbG9zZVxcXCIsZSk7dGhpcy5fY2xvc2UoKX1fcGFja2V0KGUpe3AoXFxcIndyaXRpbmcgcGFja2V0ICVqXFxcIixlKTtjb25zdCB0PXRoaXMuZW5jb2Rlci5lbmNvZGUoZSk7Zm9yKGxldCBzPTA7czx0Lmxlbmd0aDtzKyspdGhpcy5lbmdpbmUud3JpdGUodFtzXSxlLm9wdGlvbnMpfWNsZWFudXAoKXtwKFxcXCJjbGVhbnVwXFxcIiksdGhpcy5zdWJzLmZvckVhY2goKGU9PmUoKSkpLHRoaXMuc3Vicy5sZW5ndGg9MCx0aGlzLmRlY29kZXIuZGVzdHJveSgpfV9jbG9zZSgpe3AoXFxcImRpc2Nvbm5lY3RcXFwiKSx0aGlzLnNraXBSZWNvbm5lY3Q9ITAsdGhpcy5fcmVjb25uZWN0aW5nPSExLHRoaXMub25jbG9zZShcXFwiZm9yY2VkIGNsb3NlXFxcIiksdGhpcy5lbmdpbmUmJnRoaXMuZW5naW5lLmNsb3NlKCl9ZGlzY29ubmVjdCgpe3JldHVybiB0aGlzLl9jbG9zZSgpfW9uY2xvc2UoZSx0KXtwKFxcXCJjbG9zZWQgZHVlIHRvICVzXFxcIixlKSx0aGlzLmNsZWFudXAoKSx0aGlzLmJhY2tvZmYucmVzZXQoKSx0aGlzLl9yZWFkeVN0YXRlPVxcXCJjbG9zZWRcXFwiLHRoaXMuZW1pdFJlc2VydmVkKFxcXCJjbG9zZVxcXCIsZSx0KSx0aGlzLl9yZWNvbm5lY3Rpb24mJiF0aGlzLnNraXBSZWNvbm5lY3QmJnRoaXMucmVjb25uZWN0KCl9cmVjb25uZWN0KCl7aWYodGhpcy5fcmVjb25uZWN0aW5nfHx0aGlzLnNraXBSZWNvbm5lY3QpcmV0dXJuIHRoaXM7Y29uc3QgZT10aGlzO2lmKHRoaXMuYmFja29mZi5hdHRlbXB0cz49dGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpcChcXFwicmVjb25uZWN0IGZhaWxlZFxcXCIpLHRoaXMuYmFja29mZi5yZXNldCgpLHRoaXMuZW1pdFJlc2VydmVkKFxcXCJyZWNvbm5lY3RfZmFpbGVkXFxcIiksdGhpcy5fcmVjb25uZWN0aW5nPSExO2Vsc2V7Y29uc3QgdD10aGlzLmJhY2tvZmYuZHVyYXRpb24oKTtwKFxcXCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRcXFwiLHQpLHRoaXMuX3JlY29ubmVjdGluZz0hMDtjb25zdCBzPXRoaXMuc2V0VGltZW91dEZuKCgoKT0+e2Uuc2tpcFJlY29ubmVjdHx8KHAoXFxcImF0dGVtcHRpbmcgcmVjb25uZWN0XFxcIiksdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcInJlY29ubmVjdF9hdHRlbXB0XFxcIixlLmJhY2tvZmYuYXR0ZW1wdHMpLGUuc2tpcFJlY29ubmVjdHx8ZS5vcGVuKCh0PT57dD8ocChcXFwicmVjb25uZWN0IGF0dGVtcHQgZXJyb3JcXFwiKSxlLl9yZWNvbm5lY3Rpbmc9ITEsZS5yZWNvbm5lY3QoKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwicmVjb25uZWN0X2Vycm9yXFxcIix0KSk6KHAoXFxcInJlY29ubmVjdCBzdWNjZXNzXFxcIiksZS5vbnJlY29ubmVjdCgpKX0pKSl9KSx0KTt0aGlzLm9wdHMuYXV0b1VucmVmJiZzLnVucmVmKCksdGhpcy5zdWJzLnB1c2goKGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHMpfSkpfX1vbnJlY29ubmVjdCgpe2NvbnN0IGU9dGhpcy5iYWNrb2ZmLmF0dGVtcHRzO3RoaXMuX3JlY29ubmVjdGluZz0hMSx0aGlzLmJhY2tvZmYucmVzZXQoKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwicmVjb25uZWN0XFxcIixlKX19dC5NYW5hZ2VyPWZ9LDcxNDk6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQub249dm9pZCAwLHQub249ZnVuY3Rpb24oZSx0LHMpe3JldHVybiBlLm9uKHQscyksZnVuY3Rpb24oKXtlLm9mZih0LHMpfX19LDgzMTI6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5Tb2NrZXQ9dm9pZCAwO2NvbnN0IG49cyg3MTE2KSxpPXMoNzE0OSksbz1zKDUyNjApLGE9cihzKDM2NjkpKS5kZWZhdWx0KFxcXCJzb2NrZXQuaW8tY2xpZW50OnNvY2tldFxcXCIpLHU9T2JqZWN0LmZyZWV6ZSh7Y29ubmVjdDoxLGNvbm5lY3RfZXJyb3I6MSxkaXNjb25uZWN0OjEsZGlzY29ubmVjdGluZzoxLG5ld0xpc3RlbmVyOjEscmVtb3ZlTGlzdGVuZXI6MX0pO2NsYXNzIGMgZXh0ZW5kcyBvLkVtaXR0ZXJ7Y29uc3RydWN0b3IoZSx0LHMpe3N1cGVyKCksdGhpcy5jb25uZWN0ZWQ9ITEsdGhpcy5yZWNlaXZlQnVmZmVyPVtdLHRoaXMuc2VuZEJ1ZmZlcj1bXSx0aGlzLmlkcz0wLHRoaXMuYWNrcz17fSx0aGlzLmZsYWdzPXt9LHRoaXMuaW89ZSx0aGlzLm5zcD10LHMmJnMuYXV0aCYmKHRoaXMuYXV0aD1zLmF1dGgpLHRoaXMuaW8uX2F1dG9Db25uZWN0JiZ0aGlzLm9wZW4oKX1nZXQgZGlzY29ubmVjdGVkKCl7cmV0dXJuIXRoaXMuY29ubmVjdGVkfXN1YkV2ZW50cygpe2lmKHRoaXMuc3VicylyZXR1cm47Y29uc3QgZT10aGlzLmlvO3RoaXMuc3Vicz1baS5vbihlLFxcXCJvcGVuXFxcIix0aGlzLm9ub3Blbi5iaW5kKHRoaXMpKSxpLm9uKGUsXFxcInBhY2tldFxcXCIsdGhpcy5vbnBhY2tldC5iaW5kKHRoaXMpKSxpLm9uKGUsXFxcImVycm9yXFxcIix0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksaS5vbihlLFxcXCJjbG9zZVxcXCIsdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpXX1nZXQgYWN0aXZlKCl7cmV0dXJuISF0aGlzLnN1YnN9Y29ubmVjdCgpe3JldHVybiB0aGlzLmNvbm5lY3RlZHx8KHRoaXMuc3ViRXZlbnRzKCksdGhpcy5pby5fcmVjb25uZWN0aW5nfHx0aGlzLmlvLm9wZW4oKSxcXFwib3BlblxcXCI9PT10aGlzLmlvLl9yZWFkeVN0YXRlJiZ0aGlzLm9ub3BlbigpKSx0aGlzfW9wZW4oKXtyZXR1cm4gdGhpcy5jb25uZWN0KCl9c2VuZCguLi5lKXtyZXR1cm4gZS51bnNoaWZ0KFxcXCJtZXNzYWdlXFxcIiksdGhpcy5lbWl0LmFwcGx5KHRoaXMsZSksdGhpc31lbWl0KGUsLi4udCl7aWYodS5oYXNPd25Qcm9wZXJ0eShlKSl0aHJvdyBuZXcgRXJyb3IoJ1xcXCInK2UrJ1xcXCIgaXMgYSByZXNlcnZlZCBldmVudCBuYW1lJyk7dC51bnNoaWZ0KGUpO2NvbnN0IHM9e3R5cGU6bi5QYWNrZXRUeXBlLkVWRU5ULGRhdGE6dCxvcHRpb25zOnt9fTtpZihzLm9wdGlvbnMuY29tcHJlc3M9ITEhPT10aGlzLmZsYWdzLmNvbXByZXNzLFxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiB0W3QubGVuZ3RoLTFdKXtjb25zdCBlPXRoaXMuaWRzKys7YShcXFwiZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkXFxcIixlKTtjb25zdCByPXQucG9wKCk7dGhpcy5fcmVnaXN0ZXJBY2tDYWxsYmFjayhlLHIpLHMuaWQ9ZX1jb25zdCByPXRoaXMuaW8uZW5naW5lJiZ0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQmJnRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydC53cml0YWJsZTtyZXR1cm4hdGhpcy5mbGFncy52b2xhdGlsZXx8ciYmdGhpcy5jb25uZWN0ZWQ/dGhpcy5jb25uZWN0ZWQ/KHRoaXMubm90aWZ5T3V0Z29pbmdMaXN0ZW5lcnMocyksdGhpcy5wYWNrZXQocykpOnRoaXMuc2VuZEJ1ZmZlci5wdXNoKHMpOmEoXFxcImRpc2NhcmQgcGFja2V0IGFzIHRoZSB0cmFuc3BvcnQgaXMgbm90IGN1cnJlbnRseSB3cml0YWJsZVxcXCIpLHRoaXMuZmxhZ3M9e30sdGhpc31fcmVnaXN0ZXJBY2tDYWxsYmFjayhlLHQpe2NvbnN0IHM9dGhpcy5mbGFncy50aW1lb3V0O2lmKHZvaWQgMD09PXMpcmV0dXJuIHZvaWQodGhpcy5hY2tzW2VdPXQpO2NvbnN0IHI9dGhpcy5pby5zZXRUaW1lb3V0Rm4oKCgpPT57ZGVsZXRlIHRoaXMuYWNrc1tlXTtmb3IobGV0IHQ9MDt0PHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7dCsrKXRoaXMuc2VuZEJ1ZmZlclt0XS5pZD09PWUmJihhKFxcXCJyZW1vdmluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQgZnJvbSB0aGUgYnVmZmVyXFxcIixlKSx0aGlzLnNlbmRCdWZmZXIuc3BsaWNlKHQsMSkpO2EoXFxcImV2ZW50IHdpdGggYWNrIGlkICVkIGhhcyB0aW1lZCBvdXQgYWZ0ZXIgJWQgbXNcXFwiLGUscyksdC5jYWxsKHRoaXMsbmV3IEVycm9yKFxcXCJvcGVyYXRpb24gaGFzIHRpbWVkIG91dFxcXCIpKX0pLHMpO3RoaXMuYWNrc1tlXT0oLi4uZSk9Pnt0aGlzLmlvLmNsZWFyVGltZW91dEZuKHIpLHQuYXBwbHkodGhpcyxbbnVsbCwuLi5lXSl9fXBhY2tldChlKXtlLm5zcD10aGlzLm5zcCx0aGlzLmlvLl9wYWNrZXQoZSl9b25vcGVuKCl7YShcXFwidHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nXFxcIiksXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHRoaXMuYXV0aD90aGlzLmF1dGgoKGU9Pnt0aGlzLnBhY2tldCh7dHlwZTpuLlBhY2tldFR5cGUuQ09OTkVDVCxkYXRhOmV9KX0pKTp0aGlzLnBhY2tldCh7dHlwZTpuLlBhY2tldFR5cGUuQ09OTkVDVCxkYXRhOnRoaXMuYXV0aH0pfW9uZXJyb3IoZSl7dGhpcy5jb25uZWN0ZWR8fHRoaXMuZW1pdFJlc2VydmVkKFxcXCJjb25uZWN0X2Vycm9yXFxcIixlKX1vbmNsb3NlKGUsdCl7YShcXFwiY2xvc2UgKCVzKVxcXCIsZSksdGhpcy5jb25uZWN0ZWQ9ITEsZGVsZXRlIHRoaXMuaWQsdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImRpc2Nvbm5lY3RcXFwiLGUsdCl9b25wYWNrZXQoZSl7aWYoZS5uc3A9PT10aGlzLm5zcClzd2l0Y2goZS50eXBlKXtjYXNlIG4uUGFja2V0VHlwZS5DT05ORUNUOmlmKGUuZGF0YSYmZS5kYXRhLnNpZCl7Y29uc3QgdD1lLmRhdGEuc2lkO3RoaXMub25jb25uZWN0KHQpfWVsc2UgdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImNvbm5lY3RfZXJyb3JcXFwiLG5ldyBFcnJvcihcXFwiSXQgc2VlbXMgeW91IGFyZSB0cnlpbmcgdG8gcmVhY2ggYSBTb2NrZXQuSU8gc2VydmVyIGluIHYyLnggd2l0aCBhIHYzLnggY2xpZW50LCBidXQgdGhleSBhcmUgbm90IGNvbXBhdGlibGUgKG1vcmUgaW5mb3JtYXRpb24gaGVyZTogaHR0cHM6Ly9zb2NrZXQuaW8vZG9jcy92My9taWdyYXRpbmctZnJvbS0yLXgtdG8tMy0wLylcXFwiKSk7YnJlYWs7Y2FzZSBuLlBhY2tldFR5cGUuRVZFTlQ6Y2FzZSBuLlBhY2tldFR5cGUuQklOQVJZX0VWRU5UOnRoaXMub25ldmVudChlKTticmVhaztjYXNlIG4uUGFja2V0VHlwZS5BQ0s6Y2FzZSBuLlBhY2tldFR5cGUuQklOQVJZX0FDSzp0aGlzLm9uYWNrKGUpO2JyZWFrO2Nhc2Ugbi5QYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6dGhpcy5vbmRpc2Nvbm5lY3QoKTticmVhaztjYXNlIG4uUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOnRoaXMuZGVzdHJveSgpO2NvbnN0IHQ9bmV3IEVycm9yKGUuZGF0YS5tZXNzYWdlKTt0LmRhdGE9ZS5kYXRhLmRhdGEsdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImNvbm5lY3RfZXJyb3JcXFwiLHQpfX1vbmV2ZW50KGUpe2NvbnN0IHQ9ZS5kYXRhfHxbXTthKFxcXCJlbWl0dGluZyBldmVudCAlalxcXCIsdCksbnVsbCE9ZS5pZCYmKGEoXFxcImF0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnRcXFwiKSx0LnB1c2godGhpcy5hY2soZS5pZCkpKSx0aGlzLmNvbm5lY3RlZD90aGlzLmVtaXRFdmVudCh0KTp0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChPYmplY3QuZnJlZXplKHQpKX1lbWl0RXZlbnQoZSl7aWYodGhpcy5fYW55TGlzdGVuZXJzJiZ0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKXtjb25zdCB0PXRoaXMuX2FueUxpc3RlbmVycy5zbGljZSgpO2Zvcihjb25zdCBzIG9mIHQpcy5hcHBseSh0aGlzLGUpfXN1cGVyLmVtaXQuYXBwbHkodGhpcyxlKX1hY2soZSl7Y29uc3QgdD10aGlzO2xldCBzPSExO3JldHVybiBmdW5jdGlvbiguLi5yKXtzfHwocz0hMCxhKFxcXCJzZW5kaW5nIGFjayAlalxcXCIsciksdC5wYWNrZXQoe3R5cGU6bi5QYWNrZXRUeXBlLkFDSyxpZDplLGRhdGE6cn0pKX19b25hY2soZSl7Y29uc3QgdD10aGlzLmFja3NbZS5pZF07XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHQ/KGEoXFxcImNhbGxpbmcgYWNrICVzIHdpdGggJWpcXFwiLGUuaWQsZS5kYXRhKSx0LmFwcGx5KHRoaXMsZS5kYXRhKSxkZWxldGUgdGhpcy5hY2tzW2UuaWRdKTphKFxcXCJiYWQgYWNrICVzXFxcIixlLmlkKX1vbmNvbm5lY3QoZSl7YShcXFwic29ja2V0IGNvbm5lY3RlZCB3aXRoIGlkICVzXFxcIixlKSx0aGlzLmlkPWUsdGhpcy5jb25uZWN0ZWQ9ITAsdGhpcy5lbWl0QnVmZmVyZWQoKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwiY29ubmVjdFxcXCIpfWVtaXRCdWZmZXJlZCgpe3RoaXMucmVjZWl2ZUJ1ZmZlci5mb3JFYWNoKChlPT50aGlzLmVtaXRFdmVudChlKSkpLHRoaXMucmVjZWl2ZUJ1ZmZlcj1bXSx0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaCgoZT0+e3RoaXMubm90aWZ5T3V0Z29pbmdMaXN0ZW5lcnMoZSksdGhpcy5wYWNrZXQoZSl9KSksdGhpcy5zZW5kQnVmZmVyPVtdfW9uZGlzY29ubmVjdCgpe2EoXFxcInNlcnZlciBkaXNjb25uZWN0ICglcylcXFwiLHRoaXMubnNwKSx0aGlzLmRlc3Ryb3koKSx0aGlzLm9uY2xvc2UoXFxcImlvIHNlcnZlciBkaXNjb25uZWN0XFxcIil9ZGVzdHJveSgpe3RoaXMuc3VicyYmKHRoaXMuc3Vicy5mb3JFYWNoKChlPT5lKCkpKSx0aGlzLnN1YnM9dm9pZCAwKSx0aGlzLmlvLl9kZXN0cm95KHRoaXMpfWRpc2Nvbm5lY3QoKXtyZXR1cm4gdGhpcy5jb25uZWN0ZWQmJihhKFxcXCJwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKVxcXCIsdGhpcy5uc3ApLHRoaXMucGFja2V0KHt0eXBlOm4uUGFja2V0VHlwZS5ESVNDT05ORUNUfSkpLHRoaXMuZGVzdHJveSgpLHRoaXMuY29ubmVjdGVkJiZ0aGlzLm9uY2xvc2UoXFxcImlvIGNsaWVudCBkaXNjb25uZWN0XFxcIiksdGhpc31jbG9zZSgpe3JldHVybiB0aGlzLmRpc2Nvbm5lY3QoKX1jb21wcmVzcyhlKXtyZXR1cm4gdGhpcy5mbGFncy5jb21wcmVzcz1lLHRoaXN9Z2V0IHZvbGF0aWxlKCl7cmV0dXJuIHRoaXMuZmxhZ3Mudm9sYXRpbGU9ITAsdGhpc310aW1lb3V0KGUpe3JldHVybiB0aGlzLmZsYWdzLnRpbWVvdXQ9ZSx0aGlzfW9uQW55KGUpe3JldHVybiB0aGlzLl9hbnlMaXN0ZW5lcnM9dGhpcy5fYW55TGlzdGVuZXJzfHxbXSx0aGlzLl9hbnlMaXN0ZW5lcnMucHVzaChlKSx0aGlzfXByZXBlbmRBbnkoZSl7cmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycz10aGlzLl9hbnlMaXN0ZW5lcnN8fFtdLHRoaXMuX2FueUxpc3RlbmVycy51bnNoaWZ0KGUpLHRoaXN9b2ZmQW55KGUpe2lmKCF0aGlzLl9hbnlMaXN0ZW5lcnMpcmV0dXJuIHRoaXM7aWYoZSl7Y29uc3QgdD10aGlzLl9hbnlMaXN0ZW5lcnM7Zm9yKGxldCBzPTA7czx0Lmxlbmd0aDtzKyspaWYoZT09PXRbc10pcmV0dXJuIHQuc3BsaWNlKHMsMSksdGhpc31lbHNlIHRoaXMuX2FueUxpc3RlbmVycz1bXTtyZXR1cm4gdGhpc31saXN0ZW5lcnNBbnkoKXtyZXR1cm4gdGhpcy5fYW55TGlzdGVuZXJzfHxbXX1vbkFueU91dGdvaW5nKGUpe3JldHVybiB0aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVycz10aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVyc3x8W10sdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMucHVzaChlKSx0aGlzfXByZXBlbmRBbnlPdXRnb2luZyhlKXtyZXR1cm4gdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnM9dGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnN8fFtdLHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzLnVuc2hpZnQoZSksdGhpc31vZmZBbnlPdXRnb2luZyhlKXtpZighdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMpcmV0dXJuIHRoaXM7aWYoZSl7Y29uc3QgdD10aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVycztmb3IobGV0IHM9MDtzPHQubGVuZ3RoO3MrKylpZihlPT09dFtzXSlyZXR1cm4gdC5zcGxpY2UocywxKSx0aGlzfWVsc2UgdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnM9W107cmV0dXJuIHRoaXN9bGlzdGVuZXJzQW55T3V0Z29pbmcoKXtyZXR1cm4gdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnN8fFtdfW5vdGlmeU91dGdvaW5nTGlzdGVuZXJzKGUpe2lmKHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzJiZ0aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVycy5sZW5ndGgpe2NvbnN0IHQ9dGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMuc2xpY2UoKTtmb3IoY29uc3QgcyBvZiB0KXMuYXBwbHkodGhpcyxlLmRhdGEpfX19dC5Tb2NrZXQ9Y30sMzA4NDpmdW5jdGlvbihlLHQscyl7XFxcInVzZSBzdHJpY3RcXFwiO3ZhciByPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LnVybD12b2lkIDA7Y29uc3Qgbj1zKDk2ODQpLGk9cihzKDM2NjkpKS5kZWZhdWx0KFxcXCJzb2NrZXQuaW8tY2xpZW50OnVybFxcXCIpO3QudXJsPWZ1bmN0aW9uKGUsdD1cXFwiXFxcIixzKXtsZXQgcj1lO3M9c3x8XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBsb2NhdGlvbiYmbG9jYXRpb24sbnVsbD09ZSYmKGU9cy5wcm90b2NvbCtcXFwiLy9cXFwiK3MuaG9zdCksXFxcInN0cmluZ1xcXCI9PXR5cGVvZiBlJiYoXFxcIi9cXFwiPT09ZS5jaGFyQXQoMCkmJihlPVxcXCIvXFxcIj09PWUuY2hhckF0KDEpP3MucHJvdG9jb2wrZTpzLmhvc3QrZSksL14oaHR0cHM/fHdzcz8pOlxcXFwvXFxcXC8vLnRlc3QoZSl8fChpKFxcXCJwcm90b2NvbC1sZXNzIHVybCAlc1xcXCIsZSksZT12b2lkIDAhPT1zP3MucHJvdG9jb2wrXFxcIi8vXFxcIitlOlxcXCJodHRwczovL1xcXCIrZSksaShcXFwicGFyc2UgJXNcXFwiLGUpLHI9bi5wYXJzZShlKSksci5wb3J0fHwoL14oaHR0cHx3cykkLy50ZXN0KHIucHJvdG9jb2wpP3IucG9ydD1cXFwiODBcXFwiOi9eKGh0dHB8d3MpcyQvLnRlc3Qoci5wcm90b2NvbCkmJihyLnBvcnQ9XFxcIjQ0M1xcXCIpKSxyLnBhdGg9ci5wYXRofHxcXFwiL1xcXCI7Y29uc3Qgbz0tMSE9PXIuaG9zdC5pbmRleE9mKFxcXCI6XFxcIik/XFxcIltcXFwiK3IuaG9zdCtcXFwiXVxcXCI6ci5ob3N0O3JldHVybiByLmlkPXIucHJvdG9jb2wrXFxcIjovL1xcXCIrbytcXFwiOlxcXCIrci5wb3J0K3Qsci5ocmVmPXIucHJvdG9jb2wrXFxcIjovL1xcXCIrbysocyYmcy5wb3J0PT09ci5wb3J0P1xcXCJcXFwiOlxcXCI6XFxcIityLnBvcnQpLHJ9fSwyMzE5OihlLHQpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0Lmhhc0NPUlM9dm9pZCAwO2xldCBzPSExO3RyeXtzPVxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgWE1MSHR0cFJlcXVlc3QmJlxcXCJ3aXRoQ3JlZGVudGlhbHNcXFwiaW4gbmV3IFhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe310Lmhhc0NPUlM9c30sNjg3OTooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5kZWNvZGU9dC5lbmNvZGU9dm9pZCAwLHQuZW5jb2RlPWZ1bmN0aW9uKGUpe2xldCB0PVxcXCJcXFwiO2ZvcihsZXQgcyBpbiBlKWUuaGFzT3duUHJvcGVydHkocykmJih0Lmxlbmd0aCYmKHQrPVxcXCImXFxcIiksdCs9ZW5jb2RlVVJJQ29tcG9uZW50KHMpK1xcXCI9XFxcIitlbmNvZGVVUklDb21wb25lbnQoZVtzXSkpO3JldHVybiB0fSx0LmRlY29kZT1mdW5jdGlvbihlKXtsZXQgdD17fSxzPWUuc3BsaXQoXFxcIiZcXFwiKTtmb3IobGV0IGU9MCxyPXMubGVuZ3RoO2U8cjtlKyspe2xldCByPXNbZV0uc3BsaXQoXFxcIj1cXFwiKTt0W2RlY29kZVVSSUNvbXBvbmVudChyWzBdKV09ZGVjb2RlVVJJQ29tcG9uZW50KHJbMV0pfXJldHVybiB0fX0sNTE5OTooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5wYXJzZT12b2lkIDA7Y29uc3Qgcz0vXig/Oig/IVteOkBdKzpbXjpAXFxcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXFxcL1xcXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFxcXC8/I10qKSg/OjooXFxcXGQqKSk/KSgoKFxcXFwvKD86W14/I10oPyFbXj8jXFxcXC9dKlxcXFwuW14/I1xcXFwvLl0rKD86Wz8jXXwkKSkpKlxcXFwvPyk/KFtePyNcXFxcL10qKSkoPzpcXFxcPyhbXiNdKikpPyg/OiMoLiopKT8pLyxyPVtcXFwic291cmNlXFxcIixcXFwicHJvdG9jb2xcXFwiLFxcXCJhdXRob3JpdHlcXFwiLFxcXCJ1c2VySW5mb1xcXCIsXFxcInVzZXJcXFwiLFxcXCJwYXNzd29yZFxcXCIsXFxcImhvc3RcXFwiLFxcXCJwb3J0XFxcIixcXFwicmVsYXRpdmVcXFwiLFxcXCJwYXRoXFxcIixcXFwiZGlyZWN0b3J5XFxcIixcXFwiZmlsZVxcXCIsXFxcInF1ZXJ5XFxcIixcXFwiYW5jaG9yXFxcIl07dC5wYXJzZT1mdW5jdGlvbihlKXtjb25zdCB0PWUsbj1lLmluZGV4T2YoXFxcIltcXFwiKSxpPWUuaW5kZXhPZihcXFwiXVxcXCIpOy0xIT1uJiYtMSE9aSYmKGU9ZS5zdWJzdHJpbmcoMCxuKStlLnN1YnN0cmluZyhuLGkpLnJlcGxhY2UoLzovZyxcXFwiO1xcXCIpK2Uuc3Vic3RyaW5nKGksZS5sZW5ndGgpKTtsZXQgbz1zLmV4ZWMoZXx8XFxcIlxcXCIpLGE9e30sdT0xNDtmb3IoO3UtLTspYVtyW3VdXT1vW3VdfHxcXFwiXFxcIjtyZXR1cm4tMSE9biYmLTEhPWkmJihhLnNvdXJjZT10LGEuaG9zdD1hLmhvc3Quc3Vic3RyaW5nKDEsYS5ob3N0Lmxlbmd0aC0xKS5yZXBsYWNlKC87L2csXFxcIjpcXFwiKSxhLmF1dGhvcml0eT1hLmF1dGhvcml0eS5yZXBsYWNlKFxcXCJbXFxcIixcXFwiXFxcIikucmVwbGFjZShcXFwiXVxcXCIsXFxcIlxcXCIpLnJlcGxhY2UoLzsvZyxcXFwiOlxcXCIpLGEuaXB2NnVyaT0hMCksYS5wYXRoTmFtZXM9ZnVuY3Rpb24oZSx0KXtjb25zdCBzPXQucmVwbGFjZSgvXFxcXC97Miw5fS9nLFxcXCIvXFxcIikuc3BsaXQoXFxcIi9cXFwiKTtyZXR1cm5cXFwiL1xcXCIhPXQuc3Vic3RyKDAsMSkmJjAhPT10Lmxlbmd0aHx8cy5zcGxpY2UoMCwxKSxcXFwiL1xcXCI9PXQuc3Vic3RyKHQubGVuZ3RoLTEsMSkmJnMuc3BsaWNlKHMubGVuZ3RoLTEsMSksc30oMCxhLnBhdGgpLGEucXVlcnlLZXk9ZnVuY3Rpb24oZSx0KXtjb25zdCBzPXt9O3JldHVybiB0LnJlcGxhY2UoLyg/Ol58JikoW14mPV0qKT0/KFteJl0qKS9nLChmdW5jdGlvbihlLHQscil7dCYmKHNbdF09cil9KSksc30oMCxhLnF1ZXJ5KSxhfX0sMjk2OihlLHQpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LnllYXN0PXQuZGVjb2RlPXQuZW5jb2RlPXZvaWQgMDtjb25zdCBzPVxcXCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fXFxcIi5zcGxpdChcXFwiXFxcIikscj17fTtsZXQgbixpPTAsbz0wO2Z1bmN0aW9uIGEoZSl7bGV0IHQ9XFxcIlxcXCI7ZG97dD1zW2UlNjRdK3QsZT1NYXRoLmZsb29yKGUvNjQpfXdoaWxlKGU+MCk7cmV0dXJuIHR9Zm9yKHQuZW5jb2RlPWEsdC5kZWNvZGU9ZnVuY3Rpb24oZSl7bGV0IHQ9MDtmb3Iobz0wO288ZS5sZW5ndGg7bysrKXQ9NjQqdCtyW2UuY2hhckF0KG8pXTtyZXR1cm4gdH0sdC55ZWFzdD1mdW5jdGlvbigpe2NvbnN0IGU9YSgrbmV3IERhdGUpO3JldHVybiBlIT09bj8oaT0wLG49ZSk6ZStcXFwiLlxcXCIrYShpKyspfTtvPDY0O28rKylyW3Nbb11dPW99LDc0MDA6KGUsdCk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuZ2xvYmFsVGhpc1NoaW09dm9pZCAwLHQuZ2xvYmFsVGhpc1NoaW09XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBzZWxmP3NlbGY6XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OkZ1bmN0aW9uKFxcXCJyZXR1cm4gdGhpc1xcXCIpKCl9LDk2ODQ6KGUsdCxzKT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5wYXJzZT10Lmluc3RhbGxUaW1lckZ1bmN0aW9ucz10LnRyYW5zcG9ydHM9dC5UcmFuc3BvcnQ9dC5wcm90b2NvbD10LlNvY2tldD12b2lkIDA7Y29uc3Qgcj1zKDIzNTApO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJTb2NrZXRcXFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByLlNvY2tldH19KSx0LnByb3RvY29sPXIuU29ja2V0LnByb3RvY29sO3ZhciBuPXMoNDU1Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIlRyYW5zcG9ydFxcXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uVHJhbnNwb3J0fX0pO3ZhciBpPXMoMjM0NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcInRyYW5zcG9ydHNcXFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLnRyYW5zcG9ydHN9fSk7dmFyIG89cyg4NDE5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiaW5zdGFsbFRpbWVyRnVuY3Rpb25zXFxcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5pbnN0YWxsVGltZXJGdW5jdGlvbnN9fSk7dmFyIGE9cyg1MTk5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwicGFyc2VcXFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhLnBhcnNlfX0pfSwyMzUwOmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuU29ja2V0PXZvaWQgMDtjb25zdCBuPXMoMjM0NSksaT1zKDg0MTkpLG89cyg2ODc5KSxhPXMoNTE5OSksdT1yKHMoNjkzMCkpLGM9cyg1MjYwKSxkPXMoODA3NSksbD0oMCx1LmRlZmF1bHQpKFxcXCJlbmdpbmUuaW8tY2xpZW50OnNvY2tldFxcXCIpO2NsYXNzIGggZXh0ZW5kcyBjLkVtaXR0ZXJ7Y29uc3RydWN0b3IoZSx0PXt9KXtzdXBlcigpLGUmJlxcXCJvYmplY3RcXFwiPT10eXBlb2YgZSYmKHQ9ZSxlPW51bGwpLGU/KGU9KDAsYS5wYXJzZSkoZSksdC5ob3N0bmFtZT1lLmhvc3QsdC5zZWN1cmU9XFxcImh0dHBzXFxcIj09PWUucHJvdG9jb2x8fFxcXCJ3c3NcXFwiPT09ZS5wcm90b2NvbCx0LnBvcnQ9ZS5wb3J0LGUucXVlcnkmJih0LnF1ZXJ5PWUucXVlcnkpKTp0Lmhvc3QmJih0Lmhvc3RuYW1lPSgwLGEucGFyc2UpKHQuaG9zdCkuaG9zdCksKDAsaS5pbnN0YWxsVGltZXJGdW5jdGlvbnMpKHRoaXMsdCksdGhpcy5zZWN1cmU9bnVsbCE9dC5zZWN1cmU/dC5zZWN1cmU6XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBsb2NhdGlvbiYmXFxcImh0dHBzOlxcXCI9PT1sb2NhdGlvbi5wcm90b2NvbCx0Lmhvc3RuYW1lJiYhdC5wb3J0JiYodC5wb3J0PXRoaXMuc2VjdXJlP1xcXCI0NDNcXFwiOlxcXCI4MFxcXCIpLHRoaXMuaG9zdG5hbWU9dC5ob3N0bmFtZXx8KFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgbG9jYXRpb24/bG9jYXRpb24uaG9zdG5hbWU6XFxcImxvY2FsaG9zdFxcXCIpLHRoaXMucG9ydD10LnBvcnR8fChcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIGxvY2F0aW9uJiZsb2NhdGlvbi5wb3J0P2xvY2F0aW9uLnBvcnQ6dGhpcy5zZWN1cmU/XFxcIjQ0M1xcXCI6XFxcIjgwXFxcIiksdGhpcy50cmFuc3BvcnRzPXQudHJhbnNwb3J0c3x8W1xcXCJwb2xsaW5nXFxcIixcXFwid2Vic29ja2V0XFxcIl0sdGhpcy5yZWFkeVN0YXRlPVxcXCJcXFwiLHRoaXMud3JpdGVCdWZmZXI9W10sdGhpcy5wcmV2QnVmZmVyTGVuPTAsdGhpcy5vcHRzPU9iamVjdC5hc3NpZ24oe3BhdGg6XFxcIi9lbmdpbmUuaW9cXFwiLGFnZW50OiExLHdpdGhDcmVkZW50aWFsczohMSx1cGdyYWRlOiEwLHRpbWVzdGFtcFBhcmFtOlxcXCJ0XFxcIixyZW1lbWJlclVwZ3JhZGU6ITEscmVqZWN0VW5hdXRob3JpemVkOiEwLHBlck1lc3NhZ2VEZWZsYXRlOnt0aHJlc2hvbGQ6MTAyNH0sdHJhbnNwb3J0T3B0aW9uczp7fSxjbG9zZU9uQmVmb3JldW5sb2FkOiEwfSx0KSx0aGlzLm9wdHMucGF0aD10aGlzLm9wdHMucGF0aC5yZXBsYWNlKC9cXFxcLyQvLFxcXCJcXFwiKStcXFwiL1xcXCIsXFxcInN0cmluZ1xcXCI9PXR5cGVvZiB0aGlzLm9wdHMucXVlcnkmJih0aGlzLm9wdHMucXVlcnk9KDAsby5kZWNvZGUpKHRoaXMub3B0cy5xdWVyeSkpLHRoaXMuaWQ9bnVsbCx0aGlzLnVwZ3JhZGVzPW51bGwsdGhpcy5waW5nSW50ZXJ2YWw9bnVsbCx0aGlzLnBpbmdUaW1lb3V0PW51bGwsdGhpcy5waW5nVGltZW91dFRpbWVyPW51bGwsXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGFkZEV2ZW50TGlzdGVuZXImJih0aGlzLm9wdHMuY2xvc2VPbkJlZm9yZXVubG9hZCYmYWRkRXZlbnRMaXN0ZW5lcihcXFwiYmVmb3JldW5sb2FkXFxcIiwoKCk9Pnt0aGlzLnRyYW5zcG9ydCYmKHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpLHRoaXMudHJhbnNwb3J0LmNsb3NlKCkpfSksITEpLFxcXCJsb2NhbGhvc3RcXFwiIT09dGhpcy5ob3N0bmFtZSYmKHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXI9KCk9Pnt0aGlzLm9uQ2xvc2UoXFxcInRyYW5zcG9ydCBjbG9zZVxcXCIse2Rlc2NyaXB0aW9uOlxcXCJuZXR3b3JrIGNvbm5lY3Rpb24gbG9zdFxcXCJ9KX0sYWRkRXZlbnRMaXN0ZW5lcihcXFwib2ZmbGluZVxcXCIsdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwhMSkpKSx0aGlzLm9wZW4oKX1jcmVhdGVUcmFuc3BvcnQoZSl7bCgnY3JlYXRpbmcgdHJhbnNwb3J0IFxcXCIlc1xcXCInLGUpO2NvbnN0IHQ9T2JqZWN0LmFzc2lnbih7fSx0aGlzLm9wdHMucXVlcnkpO3QuRUlPPWQucHJvdG9jb2wsdC50cmFuc3BvcnQ9ZSx0aGlzLmlkJiYodC5zaWQ9dGhpcy5pZCk7Y29uc3Qgcz1PYmplY3QuYXNzaWduKHt9LHRoaXMub3B0cy50cmFuc3BvcnRPcHRpb25zW2VdLHRoaXMub3B0cyx7cXVlcnk6dCxzb2NrZXQ6dGhpcyxob3N0bmFtZTp0aGlzLmhvc3RuYW1lLHNlY3VyZTp0aGlzLnNlY3VyZSxwb3J0OnRoaXMucG9ydH0pO3JldHVybiBsKFxcXCJvcHRpb25zOiAlalxcXCIscyksbmV3IG4udHJhbnNwb3J0c1tlXShzKX1vcGVuKCl7bGV0IGU7aWYodGhpcy5vcHRzLnJlbWVtYmVyVXBncmFkZSYmaC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MmJi0xIT09dGhpcy50cmFuc3BvcnRzLmluZGV4T2YoXFxcIndlYnNvY2tldFxcXCIpKWU9XFxcIndlYnNvY2tldFxcXCI7ZWxzZXtpZigwPT09dGhpcy50cmFuc3BvcnRzLmxlbmd0aClyZXR1cm4gdm9pZCB0aGlzLnNldFRpbWVvdXRGbigoKCk9Pnt0aGlzLmVtaXRSZXNlcnZlZChcXFwiZXJyb3JcXFwiLFxcXCJObyB0cmFuc3BvcnRzIGF2YWlsYWJsZVxcXCIpfSksMCk7ZT10aGlzLnRyYW5zcG9ydHNbMF19dGhpcy5yZWFkeVN0YXRlPVxcXCJvcGVuaW5nXFxcIjt0cnl7ZT10aGlzLmNyZWF0ZVRyYW5zcG9ydChlKX1jYXRjaChlKXtyZXR1cm4gbChcXFwiZXJyb3Igd2hpbGUgY3JlYXRpbmcgdHJhbnNwb3J0OiAlc1xcXCIsZSksdGhpcy50cmFuc3BvcnRzLnNoaWZ0KCksdm9pZCB0aGlzLm9wZW4oKX1lLm9wZW4oKSx0aGlzLnNldFRyYW5zcG9ydChlKX1zZXRUcmFuc3BvcnQoZSl7bChcXFwic2V0dGluZyB0cmFuc3BvcnQgJXNcXFwiLGUubmFtZSksdGhpcy50cmFuc3BvcnQmJihsKFxcXCJjbGVhcmluZyBleGlzdGluZyB0cmFuc3BvcnQgJXNcXFwiLHRoaXMudHJhbnNwb3J0Lm5hbWUpLHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpKSx0aGlzLnRyYW5zcG9ydD1lLGUub24oXFxcImRyYWluXFxcIix0aGlzLm9uRHJhaW4uYmluZCh0aGlzKSkub24oXFxcInBhY2tldFxcXCIsdGhpcy5vblBhY2tldC5iaW5kKHRoaXMpKS5vbihcXFwiZXJyb3JcXFwiLHRoaXMub25FcnJvci5iaW5kKHRoaXMpKS5vbihcXFwiY2xvc2VcXFwiLChlPT50aGlzLm9uQ2xvc2UoXFxcInRyYW5zcG9ydCBjbG9zZVxcXCIsZSkpKX1wcm9iZShlKXtsKCdwcm9iaW5nIHRyYW5zcG9ydCBcXFwiJXNcXFwiJyxlKTtsZXQgdD10aGlzLmNyZWF0ZVRyYW5zcG9ydChlKSxzPSExO2gucHJpb3JXZWJzb2NrZXRTdWNjZXNzPSExO2NvbnN0IHI9KCk9PntzfHwobCgncHJvYmUgdHJhbnNwb3J0IFxcXCIlc1xcXCIgb3BlbmVkJyxlKSx0LnNlbmQoW3t0eXBlOlxcXCJwaW5nXFxcIixkYXRhOlxcXCJwcm9iZVxcXCJ9XSksdC5vbmNlKFxcXCJwYWNrZXRcXFwiLChyPT57aWYoIXMpaWYoXFxcInBvbmdcXFwiPT09ci50eXBlJiZcXFwicHJvYmVcXFwiPT09ci5kYXRhKXtpZihsKCdwcm9iZSB0cmFuc3BvcnQgXFxcIiVzXFxcIiBwb25nJyxlKSx0aGlzLnVwZ3JhZGluZz0hMCx0aGlzLmVtaXRSZXNlcnZlZChcXFwidXBncmFkaW5nXFxcIix0KSwhdClyZXR1cm47aC5wcmlvcldlYnNvY2tldFN1Y2Nlc3M9XFxcIndlYnNvY2tldFxcXCI9PT10Lm5hbWUsbCgncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcXFwiJXNcXFwiJyx0aGlzLnRyYW5zcG9ydC5uYW1lKSx0aGlzLnRyYW5zcG9ydC5wYXVzZSgoKCk9PntzfHxcXFwiY2xvc2VkXFxcIiE9PXRoaXMucmVhZHlTdGF0ZSYmKGwoXFxcImNoYW5naW5nIHRyYW5zcG9ydCBhbmQgc2VuZGluZyB1cGdyYWRlIHBhY2tldFxcXCIpLGMoKSx0aGlzLnNldFRyYW5zcG9ydCh0KSx0LnNlbmQoW3t0eXBlOlxcXCJ1cGdyYWRlXFxcIn1dKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwidXBncmFkZVxcXCIsdCksdD1udWxsLHRoaXMudXBncmFkaW5nPSExLHRoaXMuZmx1c2goKSl9KSl9ZWxzZXtsKCdwcm9iZSB0cmFuc3BvcnQgXFxcIiVzXFxcIiBmYWlsZWQnLGUpO2NvbnN0IHM9bmV3IEVycm9yKFxcXCJwcm9iZSBlcnJvclxcXCIpO3MudHJhbnNwb3J0PXQubmFtZSx0aGlzLmVtaXRSZXNlcnZlZChcXFwidXBncmFkZUVycm9yXFxcIixzKX19KSkpfTtmdW5jdGlvbiBuKCl7c3x8KHM9ITAsYygpLHQuY2xvc2UoKSx0PW51bGwpfWNvbnN0IGk9cz0+e2NvbnN0IHI9bmV3IEVycm9yKFxcXCJwcm9iZSBlcnJvcjogXFxcIitzKTtyLnRyYW5zcG9ydD10Lm5hbWUsbigpLGwoJ3Byb2JlIHRyYW5zcG9ydCBcXFwiJXNcXFwiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsZSxzKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwidXBncmFkZUVycm9yXFxcIixyKX07ZnVuY3Rpb24gbygpe2koXFxcInRyYW5zcG9ydCBjbG9zZWRcXFwiKX1mdW5jdGlvbiBhKCl7aShcXFwic29ja2V0IGNsb3NlZFxcXCIpfWZ1bmN0aW9uIHUoZSl7dCYmZS5uYW1lIT09dC5uYW1lJiYobCgnXFxcIiVzXFxcIiB3b3JrcyAtIGFib3J0aW5nIFxcXCIlc1xcXCInLGUubmFtZSx0Lm5hbWUpLG4oKSl9Y29uc3QgYz0oKT0+e3QucmVtb3ZlTGlzdGVuZXIoXFxcIm9wZW5cXFwiLHIpLHQucmVtb3ZlTGlzdGVuZXIoXFxcImVycm9yXFxcIixpKSx0LnJlbW92ZUxpc3RlbmVyKFxcXCJjbG9zZVxcXCIsbyksdGhpcy5vZmYoXFxcImNsb3NlXFxcIixhKSx0aGlzLm9mZihcXFwidXBncmFkaW5nXFxcIix1KX07dC5vbmNlKFxcXCJvcGVuXFxcIixyKSx0Lm9uY2UoXFxcImVycm9yXFxcIixpKSx0Lm9uY2UoXFxcImNsb3NlXFxcIixvKSx0aGlzLm9uY2UoXFxcImNsb3NlXFxcIixhKSx0aGlzLm9uY2UoXFxcInVwZ3JhZGluZ1xcXCIsdSksdC5vcGVuKCl9b25PcGVuKCl7aWYobChcXFwic29ja2V0IG9wZW5cXFwiKSx0aGlzLnJlYWR5U3RhdGU9XFxcIm9wZW5cXFwiLGgucHJpb3JXZWJzb2NrZXRTdWNjZXNzPVxcXCJ3ZWJzb2NrZXRcXFwiPT09dGhpcy50cmFuc3BvcnQubmFtZSx0aGlzLmVtaXRSZXNlcnZlZChcXFwib3BlblxcXCIpLHRoaXMuZmx1c2goKSxcXFwib3BlblxcXCI9PT10aGlzLnJlYWR5U3RhdGUmJnRoaXMub3B0cy51cGdyYWRlJiZ0aGlzLnRyYW5zcG9ydC5wYXVzZSl7bChcXFwic3RhcnRpbmcgdXBncmFkZSBwcm9iZXNcXFwiKTtsZXQgZT0wO2NvbnN0IHQ9dGhpcy51cGdyYWRlcy5sZW5ndGg7Zm9yKDtlPHQ7ZSsrKXRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tlXSl9fW9uUGFja2V0KGUpe2lmKFxcXCJvcGVuaW5nXFxcIj09PXRoaXMucmVhZHlTdGF0ZXx8XFxcIm9wZW5cXFwiPT09dGhpcy5yZWFkeVN0YXRlfHxcXFwiY2xvc2luZ1xcXCI9PT10aGlzLnJlYWR5U3RhdGUpc3dpdGNoKGwoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFxcXCIlc1xcXCIsIGRhdGEgXFxcIiVzXFxcIicsZS50eXBlLGUuZGF0YSksdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcInBhY2tldFxcXCIsZSksdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImhlYXJ0YmVhdFxcXCIpLGUudHlwZSl7Y2FzZVxcXCJvcGVuXFxcIjp0aGlzLm9uSGFuZHNoYWtlKEpTT04ucGFyc2UoZS5kYXRhKSk7YnJlYWs7Y2FzZVxcXCJwaW5nXFxcIjp0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKSx0aGlzLnNlbmRQYWNrZXQoXFxcInBvbmdcXFwiKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwicGluZ1xcXCIpLHRoaXMuZW1pdFJlc2VydmVkKFxcXCJwb25nXFxcIik7YnJlYWs7Y2FzZVxcXCJlcnJvclxcXCI6Y29uc3QgdD1uZXcgRXJyb3IoXFxcInNlcnZlciBlcnJvclxcXCIpO3QuY29kZT1lLmRhdGEsdGhpcy5vbkVycm9yKHQpO2JyZWFrO2Nhc2VcXFwibWVzc2FnZVxcXCI6dGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImRhdGFcXFwiLGUuZGF0YSksdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcIm1lc3NhZ2VcXFwiLGUuZGF0YSl9ZWxzZSBsKCdwYWNrZXQgcmVjZWl2ZWQgd2l0aCBzb2NrZXQgcmVhZHlTdGF0ZSBcXFwiJXNcXFwiJyx0aGlzLnJlYWR5U3RhdGUpfW9uSGFuZHNoYWtlKGUpe3RoaXMuZW1pdFJlc2VydmVkKFxcXCJoYW5kc2hha2VcXFwiLGUpLHRoaXMuaWQ9ZS5zaWQsdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkPWUuc2lkLHRoaXMudXBncmFkZXM9dGhpcy5maWx0ZXJVcGdyYWRlcyhlLnVwZ3JhZGVzKSx0aGlzLnBpbmdJbnRlcnZhbD1lLnBpbmdJbnRlcnZhbCx0aGlzLnBpbmdUaW1lb3V0PWUucGluZ1RpbWVvdXQsdGhpcy5tYXhQYXlsb2FkPWUubWF4UGF5bG9hZCx0aGlzLm9uT3BlbigpLFxcXCJjbG9zZWRcXFwiIT09dGhpcy5yZWFkeVN0YXRlJiZ0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKX1yZXNldFBpbmdUaW1lb3V0KCl7dGhpcy5jbGVhclRpbWVvdXRGbih0aGlzLnBpbmdUaW1lb3V0VGltZXIpLHRoaXMucGluZ1RpbWVvdXRUaW1lcj10aGlzLnNldFRpbWVvdXRGbigoKCk9Pnt0aGlzLm9uQ2xvc2UoXFxcInBpbmcgdGltZW91dFxcXCIpfSksdGhpcy5waW5nSW50ZXJ2YWwrdGhpcy5waW5nVGltZW91dCksdGhpcy5vcHRzLmF1dG9VbnJlZiYmdGhpcy5waW5nVGltZW91dFRpbWVyLnVucmVmKCl9b25EcmFpbigpe3RoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsdGhpcy5wcmV2QnVmZmVyTGVuKSx0aGlzLnByZXZCdWZmZXJMZW49MCwwPT09dGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg/dGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImRyYWluXFxcIik6dGhpcy5mbHVzaCgpfWZsdXNoKCl7aWYoXFxcImNsb3NlZFxcXCIhPT10aGlzLnJlYWR5U3RhdGUmJnRoaXMudHJhbnNwb3J0LndyaXRhYmxlJiYhdGhpcy51cGdyYWRpbmcmJnRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKXtjb25zdCBlPXRoaXMuZ2V0V3JpdGFibGVQYWNrZXRzKCk7bChcXFwiZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXRcXFwiLGUubGVuZ3RoKSx0aGlzLnRyYW5zcG9ydC5zZW5kKGUpLHRoaXMucHJldkJ1ZmZlckxlbj1lLmxlbmd0aCx0aGlzLmVtaXRSZXNlcnZlZChcXFwiZmx1c2hcXFwiKX19Z2V0V3JpdGFibGVQYWNrZXRzKCl7aWYoISh0aGlzLm1heFBheWxvYWQmJlxcXCJwb2xsaW5nXFxcIj09PXRoaXMudHJhbnNwb3J0Lm5hbWUmJnRoaXMud3JpdGVCdWZmZXIubGVuZ3RoPjEpKXJldHVybiB0aGlzLndyaXRlQnVmZmVyO2xldCBlPTE7Zm9yKGxldCB0PTA7dDx0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDt0Kyspe2NvbnN0IHM9dGhpcy53cml0ZUJ1ZmZlclt0XS5kYXRhO2lmKHMmJihlKz0oMCxpLmJ5dGVMZW5ndGgpKHMpKSx0PjAmJmU+dGhpcy5tYXhQYXlsb2FkKXJldHVybiBsKFxcXCJvbmx5IHNlbmQgJWQgb3V0IG9mICVkIHBhY2tldHNcXFwiLHQsdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpLHRoaXMud3JpdGVCdWZmZXIuc2xpY2UoMCx0KTtlKz0yfXJldHVybiBsKFxcXCJwYXlsb2FkIHNpemUgaXMgJWQgKG1heDogJWQpXFxcIixlLHRoaXMubWF4UGF5bG9hZCksdGhpcy53cml0ZUJ1ZmZlcn13cml0ZShlLHQscyl7cmV0dXJuIHRoaXMuc2VuZFBhY2tldChcXFwibWVzc2FnZVxcXCIsZSx0LHMpLHRoaXN9c2VuZChlLHQscyl7cmV0dXJuIHRoaXMuc2VuZFBhY2tldChcXFwibWVzc2FnZVxcXCIsZSx0LHMpLHRoaXN9c2VuZFBhY2tldChlLHQscyxyKXtpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgdCYmKHI9dCx0PXZvaWQgMCksXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHMmJihyPXMscz1udWxsKSxcXFwiY2xvc2luZ1xcXCI9PT10aGlzLnJlYWR5U3RhdGV8fFxcXCJjbG9zZWRcXFwiPT09dGhpcy5yZWFkeVN0YXRlKXJldHVybjsocz1zfHx7fSkuY29tcHJlc3M9ITEhPT1zLmNvbXByZXNzO2NvbnN0IG49e3R5cGU6ZSxkYXRhOnQsb3B0aW9uczpzfTt0aGlzLmVtaXRSZXNlcnZlZChcXFwicGFja2V0Q3JlYXRlXFxcIixuKSx0aGlzLndyaXRlQnVmZmVyLnB1c2gobiksciYmdGhpcy5vbmNlKFxcXCJmbHVzaFxcXCIsciksdGhpcy5mbHVzaCgpfWNsb3NlKCl7Y29uc3QgZT0oKT0+e3RoaXMub25DbG9zZShcXFwiZm9yY2VkIGNsb3NlXFxcIiksbChcXFwic29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZVxcXCIpLHRoaXMudHJhbnNwb3J0LmNsb3NlKCl9LHQ9KCk9Pnt0aGlzLm9mZihcXFwidXBncmFkZVxcXCIsdCksdGhpcy5vZmYoXFxcInVwZ3JhZGVFcnJvclxcXCIsdCksZSgpfSxzPSgpPT57dGhpcy5vbmNlKFxcXCJ1cGdyYWRlXFxcIix0KSx0aGlzLm9uY2UoXFxcInVwZ3JhZGVFcnJvclxcXCIsdCl9O3JldHVyblxcXCJvcGVuaW5nXFxcIiE9PXRoaXMucmVhZHlTdGF0ZSYmXFxcIm9wZW5cXFwiIT09dGhpcy5yZWFkeVN0YXRlfHwodGhpcy5yZWFkeVN0YXRlPVxcXCJjbG9zaW5nXFxcIix0aGlzLndyaXRlQnVmZmVyLmxlbmd0aD90aGlzLm9uY2UoXFxcImRyYWluXFxcIiwoKCk9Pnt0aGlzLnVwZ3JhZGluZz9zKCk6ZSgpfSkpOnRoaXMudXBncmFkaW5nP3MoKTplKCkpLHRoaXN9b25FcnJvcihlKXtsKFxcXCJzb2NrZXQgZXJyb3IgJWpcXFwiLGUpLGgucHJpb3JXZWJzb2NrZXRTdWNjZXNzPSExLHRoaXMuZW1pdFJlc2VydmVkKFxcXCJlcnJvclxcXCIsZSksdGhpcy5vbkNsb3NlKFxcXCJ0cmFuc3BvcnQgZXJyb3JcXFwiLGUpfW9uQ2xvc2UoZSx0KXtcXFwib3BlbmluZ1xcXCIhPT10aGlzLnJlYWR5U3RhdGUmJlxcXCJvcGVuXFxcIiE9PXRoaXMucmVhZHlTdGF0ZSYmXFxcImNsb3NpbmdcXFwiIT09dGhpcy5yZWFkeVN0YXRlfHwobCgnc29ja2V0IGNsb3NlIHdpdGggcmVhc29uOiBcXFwiJXNcXFwiJyxlKSx0aGlzLmNsZWFyVGltZW91dEZuKHRoaXMucGluZ1RpbWVvdXRUaW1lciksdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKFxcXCJjbG9zZVxcXCIpLHRoaXMudHJhbnNwb3J0LmNsb3NlKCksdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCksXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHJlbW92ZUV2ZW50TGlzdGVuZXImJnJlbW92ZUV2ZW50TGlzdGVuZXIoXFxcIm9mZmxpbmVcXFwiLHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXIsITEpLHRoaXMucmVhZHlTdGF0ZT1cXFwiY2xvc2VkXFxcIix0aGlzLmlkPW51bGwsdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImNsb3NlXFxcIixlLHQpLHRoaXMud3JpdGVCdWZmZXI9W10sdGhpcy5wcmV2QnVmZmVyTGVuPTApfWZpbHRlclVwZ3JhZGVzKGUpe2NvbnN0IHQ9W107bGV0IHM9MDtjb25zdCByPWUubGVuZ3RoO2Zvcig7czxyO3MrKyl+dGhpcy50cmFuc3BvcnRzLmluZGV4T2YoZVtzXSkmJnQucHVzaChlW3NdKTtyZXR1cm4gdH19dC5Tb2NrZXQ9aCxoLnByb3RvY29sPWQucHJvdG9jb2x9LDQ1NTY6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5UcmFuc3BvcnQ9dm9pZCAwO2NvbnN0IG49cyg4MDc1KSxpPXMoNTI2MCksbz1zKDg0MTkpLGE9KDAscihzKDY5MzApKS5kZWZhdWx0KShcXFwiZW5naW5lLmlvLWNsaWVudDp0cmFuc3BvcnRcXFwiKTtjbGFzcyB1IGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZSx0LHMpe3N1cGVyKGUpLHRoaXMuZGVzY3JpcHRpb249dCx0aGlzLmNvbnRleHQ9cyx0aGlzLnR5cGU9XFxcIlRyYW5zcG9ydEVycm9yXFxcIn19Y2xhc3MgYyBleHRlbmRzIGkuRW1pdHRlcntjb25zdHJ1Y3RvcihlKXtzdXBlcigpLHRoaXMud3JpdGFibGU9ITEsKDAsby5pbnN0YWxsVGltZXJGdW5jdGlvbnMpKHRoaXMsZSksdGhpcy5vcHRzPWUsdGhpcy5xdWVyeT1lLnF1ZXJ5LHRoaXMucmVhZHlTdGF0ZT1cXFwiXFxcIix0aGlzLnNvY2tldD1lLnNvY2tldH1vbkVycm9yKGUsdCxzKXtyZXR1cm4gc3VwZXIuZW1pdFJlc2VydmVkKFxcXCJlcnJvclxcXCIsbmV3IHUoZSx0LHMpKSx0aGlzfW9wZW4oKXtyZXR1cm5cXFwiY2xvc2VkXFxcIiE9PXRoaXMucmVhZHlTdGF0ZSYmXFxcIlxcXCIhPT10aGlzLnJlYWR5U3RhdGV8fCh0aGlzLnJlYWR5U3RhdGU9XFxcIm9wZW5pbmdcXFwiLHRoaXMuZG9PcGVuKCkpLHRoaXN9Y2xvc2UoKXtyZXR1cm5cXFwib3BlbmluZ1xcXCIhPT10aGlzLnJlYWR5U3RhdGUmJlxcXCJvcGVuXFxcIiE9PXRoaXMucmVhZHlTdGF0ZXx8KHRoaXMuZG9DbG9zZSgpLHRoaXMub25DbG9zZSgpKSx0aGlzfXNlbmQoZSl7XFxcIm9wZW5cXFwiPT09dGhpcy5yZWFkeVN0YXRlP3RoaXMud3JpdGUoZSk6YShcXFwidHJhbnNwb3J0IGlzIG5vdCBvcGVuLCBkaXNjYXJkaW5nIHBhY2tldHNcXFwiKX1vbk9wZW4oKXt0aGlzLnJlYWR5U3RhdGU9XFxcIm9wZW5cXFwiLHRoaXMud3JpdGFibGU9ITAsc3VwZXIuZW1pdFJlc2VydmVkKFxcXCJvcGVuXFxcIil9b25EYXRhKGUpe2NvbnN0IHQ9KDAsbi5kZWNvZGVQYWNrZXQpKGUsdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7dGhpcy5vblBhY2tldCh0KX1vblBhY2tldChlKXtzdXBlci5lbWl0UmVzZXJ2ZWQoXFxcInBhY2tldFxcXCIsZSl9b25DbG9zZShlKXt0aGlzLnJlYWR5U3RhdGU9XFxcImNsb3NlZFxcXCIsc3VwZXIuZW1pdFJlc2VydmVkKFxcXCJjbG9zZVxcXCIsZSl9fXQuVHJhbnNwb3J0PWN9LDIzNDU6KGUsdCxzKT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC50cmFuc3BvcnRzPXZvaWQgMDtjb25zdCByPXMoOTA0NCksbj1zKDgyNzUpO3QudHJhbnNwb3J0cz17d2Vic29ja2V0Om4uV1MscG9sbGluZzpyLlBvbGxpbmd9fSw5MDQ0OmZ1bmN0aW9uKGUsdCxzKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuUmVxdWVzdD10LlBvbGxpbmc9dm9pZCAwO2NvbnN0IG49cyg0NTU2KSxpPXIocyg2OTMwKSksbz1zKDI5NiksYT1zKDY4NzkpLHU9cyg4MDc1KSxjPXMoMTY5NiksZD1zKDUyNjApLGw9cyg4NDE5KSxoPXMoNzQwMCkscD0oMCxpLmRlZmF1bHQpKFxcXCJlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmdcXFwiKTtmdW5jdGlvbiBmKCl7fWNvbnN0IFQ9bnVsbCE9bmV3IGMuWEhSKHt4ZG9tYWluOiExfSkucmVzcG9uc2VUeXBlO2NsYXNzIEUgZXh0ZW5kcyBuLlRyYW5zcG9ydHtjb25zdHJ1Y3RvcihlKXtpZihzdXBlcihlKSx0aGlzLnBvbGxpbmc9ITEsXFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBsb2NhdGlvbil7Y29uc3QgdD1cXFwiaHR0cHM6XFxcIj09PWxvY2F0aW9uLnByb3RvY29sO2xldCBzPWxvY2F0aW9uLnBvcnQ7c3x8KHM9dD9cXFwiNDQzXFxcIjpcXFwiODBcXFwiKSx0aGlzLnhkPVxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgbG9jYXRpb24mJmUuaG9zdG5hbWUhPT1sb2NhdGlvbi5ob3N0bmFtZXx8cyE9PWUucG9ydCx0aGlzLnhzPWUuc2VjdXJlIT09dH1jb25zdCB0PWUmJmUuZm9yY2VCYXNlNjQ7dGhpcy5zdXBwb3J0c0JpbmFyeT1UJiYhdH1nZXQgbmFtZSgpe3JldHVyblxcXCJwb2xsaW5nXFxcIn1kb09wZW4oKXt0aGlzLnBvbGwoKX1wYXVzZShlKXt0aGlzLnJlYWR5U3RhdGU9XFxcInBhdXNpbmdcXFwiO2NvbnN0IHQ9KCk9PntwKFxcXCJwYXVzZWRcXFwiKSx0aGlzLnJlYWR5U3RhdGU9XFxcInBhdXNlZFxcXCIsZSgpfTtpZih0aGlzLnBvbGxpbmd8fCF0aGlzLndyaXRhYmxlKXtsZXQgZT0wO3RoaXMucG9sbGluZyYmKHAoXFxcIndlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2VcXFwiKSxlKyssdGhpcy5vbmNlKFxcXCJwb2xsQ29tcGxldGVcXFwiLChmdW5jdGlvbigpe3AoXFxcInByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlXFxcIiksLS1lfHx0KCl9KSkpLHRoaXMud3JpdGFibGV8fChwKFxcXCJ3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXFxcIiksZSsrLHRoaXMub25jZShcXFwiZHJhaW5cXFwiLChmdW5jdGlvbigpe3AoXFxcInByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlXFxcIiksLS1lfHx0KCl9KSkpfWVsc2UgdCgpfXBvbGwoKXtwKFxcXCJwb2xsaW5nXFxcIiksdGhpcy5wb2xsaW5nPSEwLHRoaXMuZG9Qb2xsKCksdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcInBvbGxcXFwiKX1vbkRhdGEoZSl7cChcXFwicG9sbGluZyBnb3QgZGF0YSAlc1xcXCIsZSksKDAsdS5kZWNvZGVQYXlsb2FkKShlLHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpLmZvckVhY2goKGU9PntpZihcXFwib3BlbmluZ1xcXCI9PT10aGlzLnJlYWR5U3RhdGUmJlxcXCJvcGVuXFxcIj09PWUudHlwZSYmdGhpcy5vbk9wZW4oKSxcXFwiY2xvc2VcXFwiPT09ZS50eXBlKXJldHVybiB0aGlzLm9uQ2xvc2Uoe2Rlc2NyaXB0aW9uOlxcXCJ0cmFuc3BvcnQgY2xvc2VkIGJ5IHRoZSBzZXJ2ZXJcXFwifSksITE7dGhpcy5vblBhY2tldChlKX0pKSxcXFwiY2xvc2VkXFxcIiE9PXRoaXMucmVhZHlTdGF0ZSYmKHRoaXMucG9sbGluZz0hMSx0aGlzLmVtaXRSZXNlcnZlZChcXFwicG9sbENvbXBsZXRlXFxcIiksXFxcIm9wZW5cXFwiPT09dGhpcy5yZWFkeVN0YXRlP3RoaXMucG9sbCgpOnAoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXFxcIiVzXFxcIicsdGhpcy5yZWFkeVN0YXRlKSl9ZG9DbG9zZSgpe2NvbnN0IGU9KCk9PntwKFxcXCJ3cml0aW5nIGNsb3NlIHBhY2tldFxcXCIpLHRoaXMud3JpdGUoW3t0eXBlOlxcXCJjbG9zZVxcXCJ9XSl9O1xcXCJvcGVuXFxcIj09PXRoaXMucmVhZHlTdGF0ZT8ocChcXFwidHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nXFxcIiksZSgpKToocChcXFwidHJhbnNwb3J0IG5vdCBvcGVuIC0gZGVmZXJyaW5nIGNsb3NlXFxcIiksdGhpcy5vbmNlKFxcXCJvcGVuXFxcIixlKSl9d3JpdGUoZSl7dGhpcy53cml0YWJsZT0hMSwoMCx1LmVuY29kZVBheWxvYWQpKGUsKGU9Pnt0aGlzLmRvV3JpdGUoZSwoKCk9Pnt0aGlzLndyaXRhYmxlPSEwLHRoaXMuZW1pdFJlc2VydmVkKFxcXCJkcmFpblxcXCIpfSkpfSkpfXVyaSgpe2xldCBlPXRoaXMucXVlcnl8fHt9O2NvbnN0IHQ9dGhpcy5vcHRzLnNlY3VyZT9cXFwiaHR0cHNcXFwiOlxcXCJodHRwXFxcIjtsZXQgcz1cXFwiXFxcIjshMSE9PXRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cyYmKGVbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXT0oMCxvLnllYXN0KSgpKSx0aGlzLnN1cHBvcnRzQmluYXJ5fHxlLnNpZHx8KGUuYjY0PTEpLHRoaXMub3B0cy5wb3J0JiYoXFxcImh0dHBzXFxcIj09PXQmJjQ0MyE9PU51bWJlcih0aGlzLm9wdHMucG9ydCl8fFxcXCJodHRwXFxcIj09PXQmJjgwIT09TnVtYmVyKHRoaXMub3B0cy5wb3J0KSkmJihzPVxcXCI6XFxcIit0aGlzLm9wdHMucG9ydCk7Y29uc3Qgcj0oMCxhLmVuY29kZSkoZSk7cmV0dXJuIHQrXFxcIjovL1xcXCIrKC0xIT09dGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXFxcIjpcXFwiKT9cXFwiW1xcXCIrdGhpcy5vcHRzLmhvc3RuYW1lK1xcXCJdXFxcIjp0aGlzLm9wdHMuaG9zdG5hbWUpK3MrdGhpcy5vcHRzLnBhdGgrKHIubGVuZ3RoP1xcXCI/XFxcIityOlxcXCJcXFwiKX1yZXF1ZXN0KGU9e30pe3JldHVybiBPYmplY3QuYXNzaWduKGUse3hkOnRoaXMueGQseHM6dGhpcy54c30sdGhpcy5vcHRzKSxuZXcgXyh0aGlzLnVyaSgpLGUpfWRvV3JpdGUoZSx0KXtjb25zdCBzPXRoaXMucmVxdWVzdCh7bWV0aG9kOlxcXCJQT1NUXFxcIixkYXRhOmV9KTtzLm9uKFxcXCJzdWNjZXNzXFxcIix0KSxzLm9uKFxcXCJlcnJvclxcXCIsKChlLHQpPT57dGhpcy5vbkVycm9yKFxcXCJ4aHIgcG9zdCBlcnJvclxcXCIsZSx0KX0pKX1kb1BvbGwoKXtwKFxcXCJ4aHIgcG9sbFxcXCIpO2NvbnN0IGU9dGhpcy5yZXF1ZXN0KCk7ZS5vbihcXFwiZGF0YVxcXCIsdGhpcy5vbkRhdGEuYmluZCh0aGlzKSksZS5vbihcXFwiZXJyb3JcXFwiLCgoZSx0KT0+e3RoaXMub25FcnJvcihcXFwieGhyIHBvbGwgZXJyb3JcXFwiLGUsdCl9KSksdGhpcy5wb2xsWGhyPWV9fXQuUG9sbGluZz1FO2NsYXNzIF8gZXh0ZW5kcyBkLkVtaXR0ZXJ7Y29uc3RydWN0b3IoZSx0KXtzdXBlcigpLCgwLGwuaW5zdGFsbFRpbWVyRnVuY3Rpb25zKSh0aGlzLHQpLHRoaXMub3B0cz10LHRoaXMubWV0aG9kPXQubWV0aG9kfHxcXFwiR0VUXFxcIix0aGlzLnVyaT1lLHRoaXMuYXN5bmM9ITEhPT10LmFzeW5jLHRoaXMuZGF0YT12b2lkIDAhPT10LmRhdGE/dC5kYXRhOm51bGwsdGhpcy5jcmVhdGUoKX1jcmVhdGUoKXtjb25zdCBlPSgwLGwucGljaykodGhpcy5vcHRzLFxcXCJhZ2VudFxcXCIsXFxcInBmeFxcXCIsXFxcImtleVxcXCIsXFxcInBhc3NwaHJhc2VcXFwiLFxcXCJjZXJ0XFxcIixcXFwiY2FcXFwiLFxcXCJjaXBoZXJzXFxcIixcXFwicmVqZWN0VW5hdXRob3JpemVkXFxcIixcXFwiYXV0b1VucmVmXFxcIik7ZS54ZG9tYWluPSEhdGhpcy5vcHRzLnhkLGUueHNjaGVtZT0hIXRoaXMub3B0cy54cztjb25zdCB0PXRoaXMueGhyPW5ldyBjLlhIUihlKTt0cnl7cChcXFwieGhyIG9wZW4gJXM6ICVzXFxcIix0aGlzLm1ldGhvZCx0aGlzLnVyaSksdC5vcGVuKHRoaXMubWV0aG9kLHRoaXMudXJpLHRoaXMuYXN5bmMpO3RyeXtpZih0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKXt0LnNldERpc2FibGVIZWFkZXJDaGVjayYmdC5zZXREaXNhYmxlSGVhZGVyQ2hlY2soITApO2ZvcihsZXQgZSBpbiB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKXRoaXMub3B0cy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoZSkmJnQuc2V0UmVxdWVzdEhlYWRlcihlLHRoaXMub3B0cy5leHRyYUhlYWRlcnNbZV0pfX1jYXRjaChlKXt9aWYoXFxcIlBPU1RcXFwiPT09dGhpcy5tZXRob2QpdHJ5e3Quc2V0UmVxdWVzdEhlYWRlcihcXFwiQ29udGVudC10eXBlXFxcIixcXFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XFxcIil9Y2F0Y2goZSl7fXRyeXt0LnNldFJlcXVlc3RIZWFkZXIoXFxcIkFjY2VwdFxcXCIsXFxcIiovKlxcXCIpfWNhdGNoKGUpe31cXFwid2l0aENyZWRlbnRpYWxzXFxcImluIHQmJih0LndpdGhDcmVkZW50aWFscz10aGlzLm9wdHMud2l0aENyZWRlbnRpYWxzKSx0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQmJih0LnRpbWVvdXQ9dGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0KSx0Lm9ucmVhZHlzdGF0ZWNoYW5nZT0oKT0+ezQ9PT10LnJlYWR5U3RhdGUmJigyMDA9PT10LnN0YXR1c3x8MTIyMz09PXQuc3RhdHVzP3RoaXMub25Mb2FkKCk6dGhpcy5zZXRUaW1lb3V0Rm4oKCgpPT57dGhpcy5vbkVycm9yKFxcXCJudW1iZXJcXFwiPT10eXBlb2YgdC5zdGF0dXM/dC5zdGF0dXM6MCl9KSwwKSl9LHAoXFxcInhociBkYXRhICVzXFxcIix0aGlzLmRhdGEpLHQuc2VuZCh0aGlzLmRhdGEpfWNhdGNoKGUpe3JldHVybiB2b2lkIHRoaXMuc2V0VGltZW91dEZuKCgoKT0+e3RoaXMub25FcnJvcihlKX0pLDApfVxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgZG9jdW1lbnQmJih0aGlzLmluZGV4PV8ucmVxdWVzdHNDb3VudCsrLF8ucmVxdWVzdHNbdGhpcy5pbmRleF09dGhpcyl9b25FcnJvcihlKXt0aGlzLmVtaXRSZXNlcnZlZChcXFwiZXJyb3JcXFwiLGUsdGhpcy54aHIpLHRoaXMuY2xlYW51cCghMCl9Y2xlYW51cChlKXtpZih2b2lkIDAhPT10aGlzLnhociYmbnVsbCE9PXRoaXMueGhyKXtpZih0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2U9ZixlKXRyeXt0aGlzLnhoci5hYm9ydCgpfWNhdGNoKGUpe31cXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIGRvY3VtZW50JiZkZWxldGUgXy5yZXF1ZXN0c1t0aGlzLmluZGV4XSx0aGlzLnhocj1udWxsfX1vbkxvYWQoKXtjb25zdCBlPXRoaXMueGhyLnJlc3BvbnNlVGV4dDtudWxsIT09ZSYmKHRoaXMuZW1pdFJlc2VydmVkKFxcXCJkYXRhXFxcIixlKSx0aGlzLmVtaXRSZXNlcnZlZChcXFwic3VjY2Vzc1xcXCIpLHRoaXMuY2xlYW51cCgpKX1hYm9ydCgpe3RoaXMuY2xlYW51cCgpfX1pZih0LlJlcXVlc3Q9XyxfLnJlcXVlc3RzQ291bnQ9MCxfLnJlcXVlc3RzPXt9LFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgZG9jdW1lbnQpaWYoXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIGF0dGFjaEV2ZW50KWF0dGFjaEV2ZW50KFxcXCJvbnVubG9hZFxcXCIsZyk7ZWxzZSBpZihcXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgYWRkRXZlbnRMaXN0ZW5lcil7Y29uc3QgZT1cXFwib25wYWdlaGlkZVxcXCJpbiBoLmdsb2JhbFRoaXNTaGltP1xcXCJwYWdlaGlkZVxcXCI6XFxcInVubG9hZFxcXCI7YWRkRXZlbnRMaXN0ZW5lcihlLGcsITEpfWZ1bmN0aW9uIGcoKXtmb3IobGV0IGUgaW4gXy5yZXF1ZXN0cylfLnJlcXVlc3RzLmhhc093blByb3BlcnR5KGUpJiZfLnJlcXVlc3RzW2VdLmFib3J0KCl9fSwzODg0OihlLHQscyk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdEJpbmFyeVR5cGU9dC51c2luZ0Jyb3dzZXJXZWJTb2NrZXQ9dC5XZWJTb2NrZXQ9dC5uZXh0VGljaz12b2lkIDA7Y29uc3Qgcj1zKDc0MDApO3QubmV4dFRpY2s9XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIFByb21pc2UmJlxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBQcm9taXNlLnJlc29sdmU/ZT0+UHJvbWlzZS5yZXNvbHZlKCkudGhlbihlKTooZSx0KT0+dChlLDApLHQuV2ViU29ja2V0PXIuZ2xvYmFsVGhpc1NoaW0uV2ViU29ja2V0fHxyLmdsb2JhbFRoaXNTaGltLk1veldlYlNvY2tldCx0LnVzaW5nQnJvd3NlcldlYlNvY2tldD0hMCx0LmRlZmF1bHRCaW5hcnlUeXBlPVxcXCJhcnJheWJ1ZmZlclxcXCJ9LDgyNzU6ZnVuY3Rpb24oZSx0LHMpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgcj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5XUz12b2lkIDA7Y29uc3Qgbj1zKDQ1NTYpLGk9cyg2ODc5KSxvPXMoMjk2KSxhPXMoODQxOSksdT1zKDM4ODQpLGM9cihzKDY5MzApKSxkPXMoODA3NSksbD0oMCxjLmRlZmF1bHQpKFxcXCJlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldFxcXCIpLGg9XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlxcXCJzdHJpbmdcXFwiPT10eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QmJlxcXCJyZWFjdG5hdGl2ZVxcXCI9PT1uYXZpZ2F0b3IucHJvZHVjdC50b0xvd2VyQ2FzZSgpO2NsYXNzIHAgZXh0ZW5kcyBuLlRyYW5zcG9ydHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlKSx0aGlzLnN1cHBvcnRzQmluYXJ5PSFlLmZvcmNlQmFzZTY0fWdldCBuYW1lKCl7cmV0dXJuXFxcIndlYnNvY2tldFxcXCJ9ZG9PcGVuKCl7aWYoIXRoaXMuY2hlY2soKSlyZXR1cm47Y29uc3QgZT10aGlzLnVyaSgpLHQ9dGhpcy5vcHRzLnByb3RvY29scyxzPWg/e306KDAsYS5waWNrKSh0aGlzLm9wdHMsXFxcImFnZW50XFxcIixcXFwicGVyTWVzc2FnZURlZmxhdGVcXFwiLFxcXCJwZnhcXFwiLFxcXCJrZXlcXFwiLFxcXCJwYXNzcGhyYXNlXFxcIixcXFwiY2VydFxcXCIsXFxcImNhXFxcIixcXFwiY2lwaGVyc1xcXCIsXFxcInJlamVjdFVuYXV0aG9yaXplZFxcXCIsXFxcImxvY2FsQWRkcmVzc1xcXCIsXFxcInByb3RvY29sVmVyc2lvblxcXCIsXFxcIm9yaWdpblxcXCIsXFxcIm1heFBheWxvYWRcXFwiLFxcXCJmYW1pbHlcXFwiLFxcXCJjaGVja1NlcnZlcklkZW50aXR5XFxcIik7dGhpcy5vcHRzLmV4dHJhSGVhZGVycyYmKHMuaGVhZGVycz10aGlzLm9wdHMuZXh0cmFIZWFkZXJzKTt0cnl7dGhpcy53cz11LnVzaW5nQnJvd3NlcldlYlNvY2tldCYmIWg/dD9uZXcgdS5XZWJTb2NrZXQoZSx0KTpuZXcgdS5XZWJTb2NrZXQoZSk6bmV3IHUuV2ViU29ja2V0KGUsdCxzKX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImVycm9yXFxcIixlKX10aGlzLndzLmJpbmFyeVR5cGU9dGhpcy5zb2NrZXQuYmluYXJ5VHlwZXx8dS5kZWZhdWx0QmluYXJ5VHlwZSx0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCl9YWRkRXZlbnRMaXN0ZW5lcnMoKXt0aGlzLndzLm9ub3Blbj0oKT0+e3RoaXMub3B0cy5hdXRvVW5yZWYmJnRoaXMud3MuX3NvY2tldC51bnJlZigpLHRoaXMub25PcGVuKCl9LHRoaXMud3Mub25jbG9zZT1lPT50aGlzLm9uQ2xvc2Uoe2Rlc2NyaXB0aW9uOlxcXCJ3ZWJzb2NrZXQgY29ubmVjdGlvbiBjbG9zZWRcXFwiLGNvbnRleHQ6ZX0pLHRoaXMud3Mub25tZXNzYWdlPWU9PnRoaXMub25EYXRhKGUuZGF0YSksdGhpcy53cy5vbmVycm9yPWU9PnRoaXMub25FcnJvcihcXFwid2Vic29ja2V0IGVycm9yXFxcIixlKX13cml0ZShlKXt0aGlzLndyaXRhYmxlPSExO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCBzPWVbdF0scj10PT09ZS5sZW5ndGgtMTsoMCxkLmVuY29kZVBhY2tldCkocyx0aGlzLnN1cHBvcnRzQmluYXJ5LChlPT57Y29uc3QgdD17fTshdS51c2luZ0Jyb3dzZXJXZWJTb2NrZXQmJihzLm9wdGlvbnMmJih0LmNvbXByZXNzPXMub3B0aW9ucy5jb21wcmVzcyksdGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlKSYmKFxcXCJzdHJpbmdcXFwiPT10eXBlb2YgZT9CdWZmZXIuYnl0ZUxlbmd0aChlKTplLmxlbmd0aCk8dGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCYmKHQuY29tcHJlc3M9ITEpO3RyeXt1LnVzaW5nQnJvd3NlcldlYlNvY2tldD90aGlzLndzLnNlbmQoZSk6dGhpcy53cy5zZW5kKGUsdCl9Y2F0Y2goZSl7bChcXFwid2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudFxcXCIpfXImJigwLHUubmV4dFRpY2spKCgoKT0+e3RoaXMud3JpdGFibGU9ITAsdGhpcy5lbWl0UmVzZXJ2ZWQoXFxcImRyYWluXFxcIil9KSx0aGlzLnNldFRpbWVvdXRGbil9KSl9fWRvQ2xvc2UoKXt2b2lkIDAhPT10aGlzLndzJiYodGhpcy53cy5jbG9zZSgpLHRoaXMud3M9bnVsbCl9dXJpKCl7bGV0IGU9dGhpcy5xdWVyeXx8e307Y29uc3QgdD10aGlzLm9wdHMuc2VjdXJlP1xcXCJ3c3NcXFwiOlxcXCJ3c1xcXCI7bGV0IHM9XFxcIlxcXCI7dGhpcy5vcHRzLnBvcnQmJihcXFwid3NzXFxcIj09PXQmJjQ0MyE9PU51bWJlcih0aGlzLm9wdHMucG9ydCl8fFxcXCJ3c1xcXCI9PT10JiY4MCE9PU51bWJlcih0aGlzLm9wdHMucG9ydCkpJiYocz1cXFwiOlxcXCIrdGhpcy5vcHRzLnBvcnQpLHRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cyYmKGVbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXT0oMCxvLnllYXN0KSgpKSx0aGlzLnN1cHBvcnRzQmluYXJ5fHwoZS5iNjQ9MSk7Y29uc3Qgcj0oMCxpLmVuY29kZSkoZSk7cmV0dXJuIHQrXFxcIjovL1xcXCIrKC0xIT09dGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXFxcIjpcXFwiKT9cXFwiW1xcXCIrdGhpcy5vcHRzLmhvc3RuYW1lK1xcXCJdXFxcIjp0aGlzLm9wdHMuaG9zdG5hbWUpK3MrdGhpcy5vcHRzLnBhdGgrKHIubGVuZ3RoP1xcXCI/XFxcIityOlxcXCJcXFwiKX1jaGVjaygpe3JldHVybiEhdS5XZWJTb2NrZXR9fXQuV1M9cH0sMTY5NjooZSx0LHMpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KSx0LlhIUj12b2lkIDA7Y29uc3Qgcj1zKDIzMTkpLG49cyg3NDAwKTt0LlhIUj1mdW5jdGlvbihlKXtjb25zdCB0PWUueGRvbWFpbjt0cnl7aWYoXFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBYTUxIdHRwUmVxdWVzdCYmKCF0fHxyLmhhc0NPUlMpKXJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3R9Y2F0Y2goZSl7fWlmKCF0KXRyeXtyZXR1cm4gbmV3KG4uZ2xvYmFsVGhpc1NoaW1bW1xcXCJBY3RpdmVcXFwiXS5jb25jYXQoXFxcIk9iamVjdFxcXCIpLmpvaW4oXFxcIlhcXFwiKV0pKFxcXCJNaWNyb3NvZnQuWE1MSFRUUFxcXCIpfWNhdGNoKGUpe319fSw4NDE5OihlLHQscyk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQuYnl0ZUxlbmd0aD10Lmluc3RhbGxUaW1lckZ1bmN0aW9ucz10LnBpY2s9dm9pZCAwO2NvbnN0IHI9cyg3NDAwKTt0LnBpY2s9ZnVuY3Rpb24oZSwuLi50KXtyZXR1cm4gdC5yZWR1Y2UoKCh0LHMpPT4oZS5oYXNPd25Qcm9wZXJ0eShzKSYmKHRbc109ZVtzXSksdCkpLHt9KX07Y29uc3Qgbj1zZXRUaW1lb3V0LGk9Y2xlYXJUaW1lb3V0O3QuaW5zdGFsbFRpbWVyRnVuY3Rpb25zPWZ1bmN0aW9uKGUsdCl7dC51c2VOYXRpdmVUaW1lcnM/KGUuc2V0VGltZW91dEZuPW4uYmluZChyLmdsb2JhbFRoaXNTaGltKSxlLmNsZWFyVGltZW91dEZuPWkuYmluZChyLmdsb2JhbFRoaXNTaGltKSk6KGUuc2V0VGltZW91dEZuPXNldFRpbWVvdXQuYmluZChyLmdsb2JhbFRoaXNTaGltKSxlLmNsZWFyVGltZW91dEZuPWNsZWFyVGltZW91dC5iaW5kKHIuZ2xvYmFsVGhpc1NoaW0pKX0sdC5ieXRlTGVuZ3RoPWZ1bmN0aW9uKGUpe3JldHVyblxcXCJzdHJpbmdcXFwiPT10eXBlb2YgZT9mdW5jdGlvbihlKXtsZXQgdD0wLHM9MDtmb3IobGV0IHI9MCxuPWUubGVuZ3RoO3I8bjtyKyspdD1lLmNoYXJDb2RlQXQociksdDwxMjg/cys9MTp0PDIwNDg/cys9Mjp0PDU1Mjk2fHx0Pj01NzM0ND9zKz0zOihyKysscys9NCk7cmV0dXJuIHN9KGUpOk1hdGguY2VpbCgxLjMzKihlLmJ5dGVMZW5ndGh8fGUuc2l6ZSkpfX0sNzE5MzooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5FUlJPUl9QQUNLRVQ9dC5QQUNLRVRfVFlQRVNfUkVWRVJTRT10LlBBQ0tFVF9UWVBFUz12b2lkIDA7Y29uc3Qgcz1PYmplY3QuY3JlYXRlKG51bGwpO3QuUEFDS0VUX1RZUEVTPXMscy5vcGVuPVxcXCIwXFxcIixzLmNsb3NlPVxcXCIxXFxcIixzLnBpbmc9XFxcIjJcXFwiLHMucG9uZz1cXFwiM1xcXCIscy5tZXNzYWdlPVxcXCI0XFxcIixzLnVwZ3JhZGU9XFxcIjVcXFwiLHMubm9vcD1cXFwiNlxcXCI7Y29uc3Qgcj1PYmplY3QuY3JlYXRlKG51bGwpO3QuUEFDS0VUX1RZUEVTX1JFVkVSU0U9cixPYmplY3Qua2V5cyhzKS5mb3JFYWNoKChlPT57cltzW2VdXT1lfSkpLHQuRVJST1JfUEFDS0VUPXt0eXBlOlxcXCJlcnJvclxcXCIsZGF0YTpcXFwicGFyc2VyIGVycm9yXFxcIn19LDQ4MjooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5kZWNvZGU9dC5lbmNvZGU9dm9pZCAwO2NvbnN0IHM9XFxcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cXFwiLHI9XFxcInVuZGVmaW5lZFxcXCI9PXR5cGVvZiBVaW50OEFycmF5P1tdOm5ldyBVaW50OEFycmF5KDI1Nik7Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKyspcltzLmNoYXJDb2RlQXQoZSldPWU7dC5lbmNvZGU9ZT0+e2xldCB0LHI9bmV3IFVpbnQ4QXJyYXkoZSksbj1yLmxlbmd0aCxpPVxcXCJcXFwiO2Zvcih0PTA7dDxuO3QrPTMpaSs9c1tyW3RdPj4yXSxpKz1zWygzJnJbdF0pPDw0fHJbdCsxXT4+NF0saSs9c1soMTUmclt0KzFdKTw8MnxyW3QrMl0+PjZdLGkrPXNbNjMmclt0KzJdXTtyZXR1cm4gbiUzPT0yP2k9aS5zdWJzdHJpbmcoMCxpLmxlbmd0aC0xKStcXFwiPVxcXCI6biUzPT0xJiYoaT1pLnN1YnN0cmluZygwLGkubGVuZ3RoLTIpK1xcXCI9PVxcXCIpLGl9LHQuZGVjb2RlPWU9PntsZXQgdCxzLG4saSxvLGE9Ljc1KmUubGVuZ3RoLHU9ZS5sZW5ndGgsYz0wO1xcXCI9XFxcIj09PWVbZS5sZW5ndGgtMV0mJihhLS0sXFxcIj1cXFwiPT09ZVtlLmxlbmd0aC0yXSYmYS0tKTtjb25zdCBkPW5ldyBBcnJheUJ1ZmZlcihhKSxsPW5ldyBVaW50OEFycmF5KGQpO2Zvcih0PTA7dDx1O3QrPTQpcz1yW2UuY2hhckNvZGVBdCh0KV0sbj1yW2UuY2hhckNvZGVBdCh0KzEpXSxpPXJbZS5jaGFyQ29kZUF0KHQrMildLG89cltlLmNoYXJDb2RlQXQodCszKV0sbFtjKytdPXM8PDJ8bj4+NCxsW2MrK109KDE1Jm4pPDw0fGk+PjIsbFtjKytdPSgzJmkpPDw2fDYzJm87cmV0dXJuIGR9fSw1ODIyOihlLHQscyk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pO2NvbnN0IHI9cyg3MTkzKSxuPXMoNDgyKSxpPVxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcixvPShlLHQpPT57aWYoaSl7Y29uc3Qgcz0oMCxuLmRlY29kZSkoZSk7cmV0dXJuIGEocyx0KX1yZXR1cm57YmFzZTY0OiEwLGRhdGE6ZX19LGE9KGUsdCk9Pntzd2l0Y2godCl7Y2FzZVxcXCJibG9iXFxcIjpyZXR1cm4gZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP25ldyBCbG9iKFtlXSk6ZTtjYXNlXFxcImFycmF5YnVmZmVyXFxcIjpkZWZhdWx0OnJldHVybiBlfX07dC5kZWZhdWx0PShlLHQpPT57aWYoXFxcInN0cmluZ1xcXCIhPXR5cGVvZiBlKXJldHVybnt0eXBlOlxcXCJtZXNzYWdlXFxcIixkYXRhOmEoZSx0KX07Y29uc3Qgcz1lLmNoYXJBdCgwKTtyZXR1cm5cXFwiYlxcXCI9PT1zP3t0eXBlOlxcXCJtZXNzYWdlXFxcIixkYXRhOm8oZS5zdWJzdHJpbmcoMSksdCl9OnIuUEFDS0VUX1RZUEVTX1JFVkVSU0Vbc10/ZS5sZW5ndGg+MT97dHlwZTpyLlBBQ0tFVF9UWVBFU19SRVZFUlNFW3NdLGRhdGE6ZS5zdWJzdHJpbmcoMSl9Ont0eXBlOnIuUEFDS0VUX1RZUEVTX1JFVkVSU0Vbc119OnIuRVJST1JfUEFDS0VUfX0sNDU5MTooZSx0LHMpPT57XFxcInVzZSBzdHJpY3RcXFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KTtjb25zdCByPXMoNzE5Myksbj1cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgQmxvYnx8XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBCbG9iJiZcXFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXFxcIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChCbG9iKSxpPVxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcixvPShlLHQpPT57Y29uc3Qgcz1uZXcgRmlsZVJlYWRlcjtyZXR1cm4gcy5vbmxvYWQ9ZnVuY3Rpb24oKXtjb25zdCBlPXMucmVzdWx0LnNwbGl0KFxcXCIsXFxcIilbMV07dChcXFwiYlxcXCIrZSl9LHMucmVhZEFzRGF0YVVSTChlKX07dC5kZWZhdWx0PSh7dHlwZTplLGRhdGE6dH0scyxhKT0+e3JldHVybiBuJiZ0IGluc3RhbmNlb2YgQmxvYj9zP2EodCk6byh0LGEpOmkmJih0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fCh1PXQsXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldz9BcnJheUJ1ZmZlci5pc1ZpZXcodSk6dSYmdS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpP3M/YSh0KTpvKG5ldyBCbG9iKFt0XSksYSk6YShyLlBBQ0tFVF9UWVBFU1tlXSsodHx8XFxcIlxcXCIpKTt2YXIgdX19LDgwNzU6KGUsdCxzKT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5kZWNvZGVQYXlsb2FkPXQuZGVjb2RlUGFja2V0PXQuZW5jb2RlUGF5bG9hZD10LmVuY29kZVBhY2tldD10LnByb3RvY29sPXZvaWQgMDtjb25zdCByPXMoNDU5MSk7dC5lbmNvZGVQYWNrZXQ9ci5kZWZhdWx0O2NvbnN0IG49cyg1ODIyKTt0LmRlY29kZVBhY2tldD1uLmRlZmF1bHQ7Y29uc3QgaT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMwKTt0LmVuY29kZVBheWxvYWQ9KGUsdCk9Pntjb25zdCBzPWUubGVuZ3RoLG49bmV3IEFycmF5KHMpO2xldCBvPTA7ZS5mb3JFYWNoKCgoZSxhKT0+eygwLHIuZGVmYXVsdCkoZSwhMSwoZT0+e25bYV09ZSwrK289PT1zJiZ0KG4uam9pbihpKSl9KSl9KSl9LHQuZGVjb2RlUGF5bG9hZD0oZSx0KT0+e2NvbnN0IHM9ZS5zcGxpdChpKSxyPVtdO2ZvcihsZXQgZT0wO2U8cy5sZW5ndGg7ZSsrKXtjb25zdCBpPSgwLG4uZGVmYXVsdCkoc1tlXSx0KTtpZihyLnB1c2goaSksXFxcImVycm9yXFxcIj09PWkudHlwZSlicmVha31yZXR1cm4gcn0sdC5wcm90b2NvbD00fSwzMTU1OihlLHQscyk9PntcXFwidXNlIHN0cmljdFxcXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pLHQucmVjb25zdHJ1Y3RQYWNrZXQ9dC5kZWNvbnN0cnVjdFBhY2tldD12b2lkIDA7Y29uc3Qgcj1zKDc5MCk7ZnVuY3Rpb24gbihlLHQpe2lmKCFlKXJldHVybiBlO2lmKHIuaXNCaW5hcnkoZSkpe2NvbnN0IHM9e19wbGFjZWhvbGRlcjohMCxudW06dC5sZW5ndGh9O3JldHVybiB0LnB1c2goZSksc31pZihBcnJheS5pc0FycmF5KGUpKXtjb25zdCBzPW5ldyBBcnJheShlLmxlbmd0aCk7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspc1tyXT1uKGVbcl0sdCk7cmV0dXJuIHN9aWYoXFxcIm9iamVjdFxcXCI9PXR5cGVvZiBlJiYhKGUgaW5zdGFuY2VvZiBEYXRlKSl7Y29uc3Qgcz17fTtmb3IoY29uc3QgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYoc1tyXT1uKGVbcl0sdCkpO3JldHVybiBzfXJldHVybiBlfWZ1bmN0aW9uIGkoZSx0KXtpZighZSlyZXR1cm4gZTtpZihlJiZlLl9wbGFjZWhvbGRlcilyZXR1cm4gdFtlLm51bV07aWYoQXJyYXkuaXNBcnJheShlKSlmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKyllW3NdPWkoZVtzXSx0KTtlbHNlIGlmKFxcXCJvYmplY3RcXFwiPT10eXBlb2YgZSlmb3IoY29uc3QgcyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHMpJiYoZVtzXT1pKGVbc10sdCkpO3JldHVybiBlfXQuZGVjb25zdHJ1Y3RQYWNrZXQ9ZnVuY3Rpb24oZSl7Y29uc3QgdD1bXSxzPWUuZGF0YSxyPWU7cmV0dXJuIHIuZGF0YT1uKHMsdCksci5hdHRhY2htZW50cz10Lmxlbmd0aCx7cGFja2V0OnIsYnVmZmVyczp0fX0sdC5yZWNvbnN0cnVjdFBhY2tldD1mdW5jdGlvbihlLHQpe3JldHVybiBlLmRhdGE9aShlLmRhdGEsdCksZS5hdHRhY2htZW50cz12b2lkIDAsZX19LDcxMTY6KGUsdCxzKT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5EZWNvZGVyPXQuRW5jb2Rlcj10LlBhY2tldFR5cGU9dC5wcm90b2NvbD12b2lkIDA7Y29uc3Qgcj1zKDUyNjApLG49cygzMTU1KSxpPXMoNzkwKSxvPXMoMTUxNykuZGVmYXVsdChcXFwic29ja2V0LmlvLXBhcnNlclxcXCIpO3ZhciBhO3QucHJvdG9jb2w9NSxmdW5jdGlvbihlKXtlW2UuQ09OTkVDVD0wXT1cXFwiQ09OTkVDVFxcXCIsZVtlLkRJU0NPTk5FQ1Q9MV09XFxcIkRJU0NPTk5FQ1RcXFwiLGVbZS5FVkVOVD0yXT1cXFwiRVZFTlRcXFwiLGVbZS5BQ0s9M109XFxcIkFDS1xcXCIsZVtlLkNPTk5FQ1RfRVJST1I9NF09XFxcIkNPTk5FQ1RfRVJST1JcXFwiLGVbZS5CSU5BUllfRVZFTlQ9NV09XFxcIkJJTkFSWV9FVkVOVFxcXCIsZVtlLkJJTkFSWV9BQ0s9Nl09XFxcIkJJTkFSWV9BQ0tcXFwifShhPXQuUGFja2V0VHlwZXx8KHQuUGFja2V0VHlwZT17fSkpLHQuRW5jb2Rlcj1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLnJlcGxhY2VyPWV9ZW5jb2RlKGUpe3JldHVybiBvKFxcXCJlbmNvZGluZyBwYWNrZXQgJWpcXFwiLGUpLGUudHlwZSE9PWEuRVZFTlQmJmUudHlwZSE9PWEuQUNLfHwhaS5oYXNCaW5hcnkoZSk/W3RoaXMuZW5jb2RlQXNTdHJpbmcoZSldOihlLnR5cGU9ZS50eXBlPT09YS5FVkVOVD9hLkJJTkFSWV9FVkVOVDphLkJJTkFSWV9BQ0ssdGhpcy5lbmNvZGVBc0JpbmFyeShlKSl9ZW5jb2RlQXNTdHJpbmcoZSl7bGV0IHQ9XFxcIlxcXCIrZS50eXBlO3JldHVybiBlLnR5cGUhPT1hLkJJTkFSWV9FVkVOVCYmZS50eXBlIT09YS5CSU5BUllfQUNLfHwodCs9ZS5hdHRhY2htZW50cytcXFwiLVxcXCIpLGUubnNwJiZcXFwiL1xcXCIhPT1lLm5zcCYmKHQrPWUubnNwK1xcXCIsXFxcIiksbnVsbCE9ZS5pZCYmKHQrPWUuaWQpLG51bGwhPWUuZGF0YSYmKHQrPUpTT04uc3RyaW5naWZ5KGUuZGF0YSx0aGlzLnJlcGxhY2VyKSksbyhcXFwiZW5jb2RlZCAlaiBhcyAlc1xcXCIsZSx0KSx0fWVuY29kZUFzQmluYXJ5KGUpe2NvbnN0IHQ9bi5kZWNvbnN0cnVjdFBhY2tldChlKSxzPXRoaXMuZW5jb2RlQXNTdHJpbmcodC5wYWNrZXQpLHI9dC5idWZmZXJzO3JldHVybiByLnVuc2hpZnQocykscn19O2NsYXNzIHUgZXh0ZW5kcyByLkVtaXR0ZXJ7Y29uc3RydWN0b3IoZSl7c3VwZXIoKSx0aGlzLnJldml2ZXI9ZX1hZGQoZSl7bGV0IHQ7aWYoXFxcInN0cmluZ1xcXCI9PXR5cGVvZiBlKXQ9dGhpcy5kZWNvZGVTdHJpbmcoZSksdC50eXBlPT09YS5CSU5BUllfRVZFTlR8fHQudHlwZT09PWEuQklOQVJZX0FDSz8odGhpcy5yZWNvbnN0cnVjdG9yPW5ldyBjKHQpLDA9PT10LmF0dGFjaG1lbnRzJiZzdXBlci5lbWl0UmVzZXJ2ZWQoXFxcImRlY29kZWRcXFwiLHQpKTpzdXBlci5lbWl0UmVzZXJ2ZWQoXFxcImRlY29kZWRcXFwiLHQpO2Vsc2V7aWYoIWkuaXNCaW5hcnkoZSkmJiFlLmJhc2U2NCl0aHJvdyBuZXcgRXJyb3IoXFxcIlVua25vd24gdHlwZTogXFxcIitlKTtpZighdGhpcy5yZWNvbnN0cnVjdG9yKXRocm93IG5ldyBFcnJvcihcXFwiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0XFxcIik7dD10aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEoZSksdCYmKHRoaXMucmVjb25zdHJ1Y3Rvcj1udWxsLHN1cGVyLmVtaXRSZXNlcnZlZChcXFwiZGVjb2RlZFxcXCIsdCkpfX1kZWNvZGVTdHJpbmcoZSl7bGV0IHQ9MDtjb25zdCBzPXt0eXBlOk51bWJlcihlLmNoYXJBdCgwKSl9O2lmKHZvaWQgMD09PWFbcy50eXBlXSl0aHJvdyBuZXcgRXJyb3IoXFxcInVua25vd24gcGFja2V0IHR5cGUgXFxcIitzLnR5cGUpO2lmKHMudHlwZT09PWEuQklOQVJZX0VWRU5UfHxzLnR5cGU9PT1hLkJJTkFSWV9BQ0spe2NvbnN0IHI9dCsxO2Zvcig7XFxcIi1cXFwiIT09ZS5jaGFyQXQoKyt0KSYmdCE9ZS5sZW5ndGg7KTtjb25zdCBuPWUuc3Vic3RyaW5nKHIsdCk7aWYobiE9TnVtYmVyKG4pfHxcXFwiLVxcXCIhPT1lLmNoYXJBdCh0KSl0aHJvdyBuZXcgRXJyb3IoXFxcIklsbGVnYWwgYXR0YWNobWVudHNcXFwiKTtzLmF0dGFjaG1lbnRzPU51bWJlcihuKX1pZihcXFwiL1xcXCI9PT1lLmNoYXJBdCh0KzEpKXtjb25zdCByPXQrMTtmb3IoOysrdCYmXFxcIixcXFwiIT09ZS5jaGFyQXQodCkmJnQhPT1lLmxlbmd0aDspO3MubnNwPWUuc3Vic3RyaW5nKHIsdCl9ZWxzZSBzLm5zcD1cXFwiL1xcXCI7Y29uc3Qgcj1lLmNoYXJBdCh0KzEpO2lmKFxcXCJcXFwiIT09ciYmTnVtYmVyKHIpPT1yKXtjb25zdCByPXQrMTtmb3IoOysrdDspe2NvbnN0IHM9ZS5jaGFyQXQodCk7aWYobnVsbD09c3x8TnVtYmVyKHMpIT1zKXstLXQ7YnJlYWt9aWYodD09PWUubGVuZ3RoKWJyZWFrfXMuaWQ9TnVtYmVyKGUuc3Vic3RyaW5nKHIsdCsxKSl9aWYoZS5jaGFyQXQoKyt0KSl7Y29uc3Qgcj10aGlzLnRyeVBhcnNlKGUuc3Vic3RyKHQpKTtpZighdS5pc1BheWxvYWRWYWxpZChzLnR5cGUscikpdGhyb3cgbmV3IEVycm9yKFxcXCJpbnZhbGlkIHBheWxvYWRcXFwiKTtzLmRhdGE9cn1yZXR1cm4gbyhcXFwiZGVjb2RlZCAlcyBhcyAlalxcXCIsZSxzKSxzfXRyeVBhcnNlKGUpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShlLHRoaXMucmV2aXZlcil9Y2F0Y2goZSl7cmV0dXJuITF9fXN0YXRpYyBpc1BheWxvYWRWYWxpZChlLHQpe3N3aXRjaChlKXtjYXNlIGEuQ09OTkVDVDpyZXR1cm5cXFwib2JqZWN0XFxcIj09dHlwZW9mIHQ7Y2FzZSBhLkRJU0NPTk5FQ1Q6cmV0dXJuIHZvaWQgMD09PXQ7Y2FzZSBhLkNPTk5FQ1RfRVJST1I6cmV0dXJuXFxcInN0cmluZ1xcXCI9PXR5cGVvZiB0fHxcXFwib2JqZWN0XFxcIj09dHlwZW9mIHQ7Y2FzZSBhLkVWRU5UOmNhc2UgYS5CSU5BUllfRVZFTlQ6cmV0dXJuIEFycmF5LmlzQXJyYXkodCkmJnQubGVuZ3RoPjA7Y2FzZSBhLkFDSzpjYXNlIGEuQklOQVJZX0FDSzpyZXR1cm4gQXJyYXkuaXNBcnJheSh0KX19ZGVzdHJveSgpe3RoaXMucmVjb25zdHJ1Y3RvciYmdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKX19dC5EZWNvZGVyPXU7Y2xhc3MgY3tjb25zdHJ1Y3RvcihlKXt0aGlzLnBhY2tldD1lLHRoaXMuYnVmZmVycz1bXSx0aGlzLnJlY29uUGFjaz1lfXRha2VCaW5hcnlEYXRhKGUpe2lmKHRoaXMuYnVmZmVycy5wdXNoKGUpLHRoaXMuYnVmZmVycy5sZW5ndGg9PT10aGlzLnJlY29uUGFjay5hdHRhY2htZW50cyl7Y29uc3QgZT1uLnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLHRoaXMuYnVmZmVycyk7cmV0dXJuIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpLGV9cmV0dXJuIG51bGx9ZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpe3RoaXMucmVjb25QYWNrPW51bGwsdGhpcy5idWZmZXJzPVtdfX19LDc5MDooZSx0KT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcXFwiX19lc01vZHVsZVxcXCIse3ZhbHVlOiEwfSksdC5oYXNCaW5hcnk9dC5pc0JpbmFyeT12b2lkIDA7Y29uc3Qgcz1cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgQXJyYXlCdWZmZXIscj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLG49XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIEJsb2J8fFxcXCJ1bmRlZmluZWRcXFwiIT10eXBlb2YgQmxvYiYmXFxcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVxcXCI9PT1yLmNhbGwoQmxvYiksaT1cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgRmlsZXx8XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBGaWxlJiZcXFwiW29iamVjdCBGaWxlQ29uc3RydWN0b3JdXFxcIj09PXIuY2FsbChGaWxlKTtmdW5jdGlvbiBvKGUpe3JldHVybiBzJiYoZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHwoZT0+XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldz9BcnJheUJ1ZmZlci5pc1ZpZXcoZSk6ZS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikoZSkpfHxuJiZlIGluc3RhbmNlb2YgQmxvYnx8aSYmZSBpbnN0YW5jZW9mIEZpbGV9dC5pc0JpbmFyeT1vLHQuaGFzQmluYXJ5PWZ1bmN0aW9uIGUodCxzKXtpZighdHx8XFxcIm9iamVjdFxcXCIhPXR5cGVvZiB0KXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkodCkpe2ZvcihsZXQgcz0wLHI9dC5sZW5ndGg7czxyO3MrKylpZihlKHRbc10pKXJldHVybiEwO3JldHVybiExfWlmKG8odCkpcmV0dXJuITA7aWYodC50b0pTT04mJlxcXCJmdW5jdGlvblxcXCI9PXR5cGVvZiB0LnRvSlNPTiYmMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGUodC50b0pTT04oKSwhMCk7Zm9yKGNvbnN0IHMgaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxzKSYmZSh0W3NdKSlyZXR1cm4hMDtyZXR1cm4hMX19LDUyNjA6KGUsdCxzKT0+e1xcXCJ1c2Ugc3RyaWN0XFxcIjtmdW5jdGlvbiByKGUpe2lmKGUpcmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiByLnByb3RvdHlwZSllW3RdPXIucHJvdG90eXBlW3RdO3JldHVybiBlfShlKX1zLnIodCkscy5kKHQse0VtaXR0ZXI6KCk9PnJ9KSxyLnByb3RvdHlwZS5vbj1yLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9LCh0aGlzLl9jYWxsYmFja3NbXFxcIiRcXFwiK2VdPXRoaXMuX2NhbGxiYWNrc1tcXFwiJFxcXCIrZV18fFtdKS5wdXNoKHQpLHRoaXN9LHIucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBzKCl7dGhpcy5vZmYoZSxzKSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gcy5mbj10LHRoaXMub24oZSxzKSx0aGlzfSxyLnByb3RvdHlwZS5vZmY9ci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHx7fSwwPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLl9jYWxsYmFja3M9e30sdGhpczt2YXIgcyxyPXRoaXMuX2NhbGxiYWNrc1tcXFwiJFxcXCIrZV07aWYoIXIpcmV0dXJuIHRoaXM7aWYoMT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tcXFwiJFxcXCIrZV0sdGhpcztmb3IodmFyIG49MDtuPHIubGVuZ3RoO24rKylpZigocz1yW25dKT09PXR8fHMuZm49PT10KXtyLnNwbGljZShuLDEpO2JyZWFrfXJldHVybiAwPT09ci5sZW5ndGgmJmRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbXFxcIiRcXFwiK2VdLHRoaXN9LHIucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZSl7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e307Zm9yKHZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpLHM9dGhpcy5fY2FsbGJhY2tzW1xcXCIkXFxcIitlXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO2lmKHMpe3I9MDtmb3IodmFyIG49KHM9cy5zbGljZSgwKSkubGVuZ3RoO3I8bjsrK3Ipc1tyXS5hcHBseSh0aGlzLHQpfXJldHVybiB0aGlzfSxyLnByb3RvdHlwZS5lbWl0UmVzZXJ2ZWQ9ci5wcm90b3R5cGUuZW1pdCxyLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9LHRoaXMuX2NhbGxiYWNrc1tcXFwiJFxcXCIrZV18fFtdfSxyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuISF0aGlzLmxpc3RlbmVycyhlKS5sZW5ndGh9fX0sdD17fTtmdW5jdGlvbiBzKHIpe3ZhciBuPXRbcl07aWYodm9pZCAwIT09bilyZXR1cm4gbi5leHBvcnRzO3ZhciBpPXRbcl09e2V4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLHMpLGkuZXhwb3J0c31zLmQ9KGUsdCk9Pntmb3IodmFyIHIgaW4gdClzLm8odCxyKSYmIXMubyhlLHIpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9LHMubz0oZSx0KT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkscy5yPWU9PntcXFwidW5kZWZpbmVkXFxcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlxcXCJNb2R1bGVcXFwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXFxcIl9fZXNNb2R1bGVcXFwiLHt2YWx1ZTohMH0pfSxzKDg0MjEpfSkoKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWQzTXVZWEJwTG5kdmNtdGxjaTVxY3lJc0ltMWhjSEJwYm1keklqb2ljMEpCU1VFc1NVRkJTVUVzUlVGQlNTeEpRVU5LUXl4RlFVRlJMRWRCUVVwRUxFVkJRMHBGTEVWQlFWRXNSMEZCU2tRc1JVRkRTa1VzUlVGQlVTeEhRVUZLUkN4RlFYVktVaXhUUVVGVFJTeEZRVUZQUXl4RlFVRkpReXhGUVVGUFF5eEZRVUZIUXl4SFFVTTFRaXhKUVVGSlF5eEZRVUZYU0N4SFFVRmhMRWxCUVVwRExFVkJRM2hDTEU5QlFVOUhMRXRCUVV0RExFMUJRVTFPTEVWQlFVdEZMRWRCUVVzc1NVRkJUVU1zUjBGQlVVTXNSVUZCVnl4SlFVRk5MRWxCZGtrM1JFY3NSVUZCVDBNc1VVRkJWU3hUUVVGVFF5eEZRVUZMUXl4SFFVTTNRa0VzUlVGQlZVRXNSMEZCVnl4SFFVTnlRaXhKUVRoSFpWWXNSVUZEV0VNc1JVRXZSMEZWTEZOQlFXTkdMRVZCUTJ4Q0xFZEJRV0VzVjBGQlZFVXNSMEZCY1VKR0xFVkJRVWxITEU5QlFWTXNSVUZEY0VNc1QwRnJRa29zVTBGQlpVTXNSMEZGWWl4TlFVUkJRU3hGUVVGTlF5eFBRVUZQUkN4SlFVTk1SQ3hQUVVGVExFdEJRV3BDTEVOQlIwRXNTVUZCU1Vjc1JVRkJVU3h0U1VGQmJVbERMRXRCUXpkSlNDeEhRVVZHTEVkQlFVdEZMRVZCUVV3c1EwRkhRU3hKUVVGSllpeEZRVUZKWlN4WFFVRlhSaXhGUVVGTkxFbEJSWHBDTEZGQlJGbEJMRVZCUVUwc1NVRkJUU3hOUVVGTlJ5eGxRVVUxUWl4SlFVRkxMRkZCUTB3c1NVRkJTeXhQUVVOTUxFbEJRVXNzVFVGRFRDeEpRVUZMTEV0QlEwd3NTVUZCU3l4SlFVTklMRTlCZWtSRmNFSXNVMEY1UkV0SkxFVkJRMVFzU1VGQlN5eFJRVU5NTEVsQlFVc3NUMEZEVEN4SlFVRkxMRWxCUTBnc1QwRTVSRVZLTEU5Qk9FUkxTU3hGUVVOVUxFbEJRVXNzVDBGRFRDeEpRVUZMTEUxQlEwd3NTVUZCU3l4SlFVTklMRTlCUVU5QkxFVkJRVWxLTEVWQlEySXNTVUZCU3l4UlFVTk1MRWxCUVVzc1QwRkRUQ3hKUVVGTExFMUJRMHdzU1VGQlN5eExRVU5NTEVsQlFVc3NTVUZEU0N4UFFVRlBTU3hGUVVGSlRDeEZRVU5pTEVsQlFVc3NWVUZEVEN4SlFVRkxMRk5CUTB3c1NVRkJTeXhQUVVOTUxFbEJRVXNzVFVGRFRDeEpRVUZMTEVsQlEwZ3NUMEZCVDBzc1JVRkJTVTRzUlVGRFlpeEpRVUZMTEZWQlEwd3NTVUZCU3l4VFFVTk1MRWxCUVVzc1QwRkRUQ3hKUVVGTExFMUJRMHdzU1VGQlN5eEpRVU5JTEU5QlFVOU5MRVZCUVVsUUxFVkJRMklzU1VGQlN5eGxRVU5NTEVsQlFVc3NZMEZEVEN4SlFVRkxMRkZCUTB3c1NVRkJTeXhQUVVOTUxFbEJRVXNzUzBGRFNDeFBRVUZQVHl4RlFVTlVMRkZCUTBVc1ZVRjJSVXRwUWl4RFFVRk5WaXhIUVVOU0xFZEJRV0VzVjBGQlZFVXNSMEZCY1VKVExGTkJRVk5ZTEVkQlEzWkRMRTlCUVU5RExFVkJRVkZYTEUxQk1FZEdja0lzUlVFeFIybENVeXhIUVRKSE5VSlNMRVZCUVZGSkxFdEJRVXRwUWl4SlFVRkpkRUlzUzBGRFVrWXNSVUZEU2tNc1JVRkJUME1zUlVGQlNVTXNSVUZCVDBnc1JVRkJSeXhQUVVVeFFrY3NSMEZCVTBvc1JVRkRTa1VzUlVGQlQwTXNSVUZCU1VNc1JVRkJUMG9zUlVGQlJ5eFJRVVV4UWtrc1IwRkJVMHdzUlVGRFNrY3NSVUZCVDBNc1JVRkJTVU1zUlVGQlQwd3NSVUZCUnl4VlFVVXhRa3NzUjBGQlUwNHNSVUZEU2trc1JVRkJUME1zUlVGQlNVTXNSVUZCVDA0c1JVRkJSeXhWUVVWMlFrc3NSVUZCU3l4UFFYWkRaQ3hUUVVGclFrRXNSMEZEYUVJc1NVRkJTVU1zUlVGQlVVa3NTMEZCUzJsQ0xFbEJRVWwwUWl4SFFVTnlRaXhQUVVGSlF5eEhRVUZUU0N4RlFVTktUeXhMUVVGTFF5eE5RVUZOVGl4RlFVRkxSaXhIUVVGTExFbEJSVEZDUnl4SFFVRlRTaXhGUVVOS1VTeExRVUZMUXl4TlFVRk5UaXhGUVVGTFNDeEhRVUZMTEVsQlJURkNTU3hIUVVGVFRDeEZRVU5LVXl4TFFVRkxReXhOUVVGTlRpeEZRVUZMU2l4SFFVRkxMRWxCUlRGQ1N5eEhRVUZUVGl4RlFVTktWU3hMUVVGTFF5eE5RVUZOVGl4RlFVRkxUQ3hIUVVGTExFbEJSWFpDU3l4RlFVRkxMRXRCTDBZeVFuVkNMRU5CUVZOa0xFZEJSV2hFTEUxQlFVMHNTVUZCU1dVc1RVRkRVaXgzUkVGRFJVTXNTMEZCUzBNc1ZVRkJWV3BDTEUwc05FSkRia05PTEZOQlFWTnJRaXhGUVVGblFrTXNSVUZCUzBNc1JVRkJTME1zUjBGWmFFUXNUMEZZU1VRc1MwRkJUMFFzUlVGRFZFY3NUMEZCVDBNc1pVRkJaVW9zUlVGQlMwTXNSVUZCU3l4RFFVTTVRa01zVFVGQlQwRXNSVUZEVUVjc1dVRkJXU3hGUVVOYVF5eGpRVUZqTEVWQlEyUkRMRlZCUVZVc1NVRkhXbEFzUlVGQlNVTXNSMEZCVDBNc1JVRkhUa1lzUlVOV1ZDeFRRVUZUVVN4RlFVRlJReXhGUVVGUlF5eEhRVU4yUWl4SlFVRkpReXhGUVVGUFVpeFBRVUZQVVN4TFFVRkxSaXhIUVVWMlFpeEhRVUZKVGl4UFFVRlBVeXh6UWtGQmRVSXNRMEZEYUVNc1NVRkJTVU1zUlVGQlZWWXNUMEZCVDFNc2MwSkJRWE5DU0N4SFFVVjJRME1zU1VGRFJrY3NSVUZCVlVFc1JVRkJVVU1zVVVGQlR5eFRRVUZWUXl4SFFVTnFReXhQUVVGUFdpeFBRVUZQWVN4NVFrRkJlVUpRTEVWQlFWRk5MRWRCUVV0V0xHVkJTWGhFVFN4RlFVRkxUU3hMUVVGTFF5eE5RVUZOVUN4RlFVRk5SU3hIUVVkNFFpeFBRVUZQUml4RlFVZE5MRk5CUVZOUkxFVkJRV1ZETEVkQlEzSkRMRWxCUVVzc1NVRkJTVU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpReXhWUVVGVmRFTXNUMEZCVVhGRExFbEJRVXNzUTBGRGVrTXNTVUZCU1VVc1JVRkJlVUlzVFVGQmFFSkVMRlZCUVZWRUxFZEJRV0ZETEZWQlFWVkVMRWRCUVVzc1IwRkZMME5CTEVWQlFVa3NSVUZEVG1Jc1JVRkJVVXdzVDBGQlQyOUNMRWxCUVZNc1IwRkJUVU1zVTBGQlVTeFRRVUZWZGtJc1IwRkRPVU1zUlVGQlpXMUNMRVZCUVZGdVFpeEZRVUZMYzBJc1JVRkJUM1JDTEU5QlJUVkNSU3hQUVVGUGMwSXNNRUpCUTJoQ2RFSXNUMEZCVDNWQ0xHbENRVUZwUWs0c1JVRkJVV3BDTEU5QlFVOXpRaXd3UWtGQk1FSkdMRWxCUldwRlppeEZRVUZSVEN4UFFVRlBiMElzU1VGQlUwTXNVMEZCVVN4VFFVRlZka0lzUjBGRGVFTkZMRTlCUVU5RExHVkJRV1ZuUWl4RlFVRlJia0lzUlVGQlMwVXNUMEZCVDJFc2VVSkJRWGxDVHl4RlFVRlJkRUlzVDBGTGFrWXNUMEZCVDIxQ0xFVkROVUpVTEZOQlFWTlBMRVZCUVhWQ1F5eEhRVU01UWl4TlFVRlBMSGxDUVVFeVFrRXNSVUZCVHl3MFEwRkJPRU5CTEVWQlFXaEdMR3RHTERoTFFVbFVMRWxCUVVsRExFVkJRM1ZDTEcxQ1FVRllReXhSUVVGNVFrRXNUMEZCVDBNc1dVRkJZeXhsUVZNeFJFTXNSVUZCWlN4WFFVTnFRaXhQUVVGUGRrUXNTMEZCUzNkRUxGTkJRVk5ETEZOQlFWTXNTVUZCU1VNc1ZVRkJWU3hIUVVGSFF5eE5RVUZOTEVsQlFVbERMRXRCUVVzc1RVRkhOVVJETEVWQlFXTXNRMEZEYUVKRExFdEJRVTBzWlVGQmFVSlFMRWxCUTNaQ1VTeFJRVUZUTEd0Q1FVRnZRbElzU1VGRE4wSlRMSEZDUVVGelFpeFhRVU53UWl4TlFVRlBMQ3RDUVVGcFExUXNUVUZSTlVNc1UwRkJVMVVzUlVGQll6RkRMRWRCUTNKQ0xFZEJRVzFDTEdsQ1FVRlNRU3hIUVVFMFFpeFBRVUZTUVN4RlFVRmpMRTlCUVU4c1JVRkhjRVFzU1VGR1FTeEpRVUZKTWtNc1JVRkJVVE5ETEVWQlJUUkNMRTlCUVdwRFJ5eFBRVUZQZVVNc1pVRkJaVVFzU1VGRE0wSkJMRVZCUVZGNFF5eFBRVUZQZVVNc1pVRkJaVVFzUjBGSGFFTXNUMEZCVDNoRExFOUJRVTk1UXl4bFFVRmxOVU1zUzBGQlV6SkRMRVZCZDBaNFF5eFRRVUZUUlN4RlFVRlpReXhGUVVGVFF5eEZRVUZuUWtNc1IwRkROVU1zU1VGQlNVTXNSVUZGU2l4SFFVRTRRaXh0UWtGQmJrSkdMRWRCUVhGRUxHMUNRVUZpUXl4SFFVRXJReXh0UWtGQllrRXNSMEZCYlVRc2JVSkJRV3BDTVVJc1ZVRkJWU3hIUVVNdlNDeE5RVUZOTEVsQlFVa3hRaXhOUVVFNFF5dENMRVZCUVhWQ0xFbEJVV3BHTEVkQlREaENMRzFDUVVGdVFtOUNMRkZCUVhGRUxFbEJRV0pETEVsQlEycEVRU3hGUVVGWFJDeEZRVU5ZUVN4UFFVRnBRa2NzVVVGSFN5eEpRVUZpUml4RlFVRXdRaXhEUVVOdVF5eEhRVUYzUWl4dFFrRkJZa0VzUlVGRFZDeE5RVUZOTEVsQlFVbHdSQ3hOUVVFNFF5dENMRVZCUVhWQ0xFbEJSMnBHTEU5QlFVOXhRaXhGUVVGVFNDeEZRVUZVUnl4RFFVRnpRa1lzUlVGQlUwTXNSMEZIZUVNc1IwRkJkVUlzYlVKQlFWcEVMRVZCUTFRc1RVRkJUU3hKUVVGSmJFUXNUVUZCT0VNclFpeEZRVUYxUWl4SlFVZHFSaXhKUVVGSmQwSXNSVUZCYVVKTUxFVkJRMnBDVFN4RlFVRmxUQ3hGUVVObVRTeEZRVUZ0UWl4SFFVTnVRa01zUlVGQlowSkVMRVZCUTJoQ1JTeEhRVUZuUWl4RlFWTndRaXhUUVVGVFF5eEpRVU5JUml4SlFVRnJRa1FzU1VGRGNFSkRMRVZCUVdkQ1JDeEZRVUZwUWtrc1UwRlZja01zVTBGQlUwTXNTVUZEVUN4SFFVRkpTQ3hGUVVOR0xFMUJRVTBzU1VGQlNUTkVMRTFCUVRoREswSXNSVUZCZFVJc1NVRkhha1lzVDBGQlQzbENMRVZCTWtKVUxGTkJRVk5QTEVWQlFWVkRMRWRCUTJwQ0xFZEJRWGRDTEcxQ1FVRmlRU3hGUVVOVUxFMUJRVTBzU1VGQlNXaEZMRTFCUVRoREswSXNSVUZCZFVJc1NVRkhha1lzUjBGQlNUUkNMRVZCUTBZc1RVRkJUU3hKUVVGSk0wUXNUVUZCT0VNclFpeEZRVUYxUWl4SlFVZHFSaXhKUVVGSmEwTXNSMEZCWlN4RlFVZHVRaXhQUVVaQlRDeEpRVU5CUml4RlFVRmpja01zUzBGQlN6SkRMRWRCUTFvc1YwRkRUQ3hIUVVGTFF5eEZRVUZNTEVOQlNVRXNSMEZCU1U0c1JVRkRSaXhOUVVGTkxFbEJRVWt6UkN4TlFVRTRReXRDTEVWQlFYVkNMRWxCUjJwR2EwTXNSMEZCWlN4RlFVTm1UQ3hKUVVOQkxFbEJRVWxOTEVWQlFWRlNMRVZCUVdOVExGRkJRVkZJTEVkQlEyeERUaXhGUVVGalZTeFBRVUZQUml4RlFVRlBMRWRCUXpWQ1ZDeEZRVUZ0UWl4UFFUaENka0lzVTBGQlUxa3NSVUZCVTBNc1IwRkRhRUlzU1VGQlMzaENMRVZCUVdOM1FpeEhRVU5xUWl4TlFVRk5MRWxCUVVsMFJTeE5RVUU0UXl0Q0xFVkJRWFZDTEVsQlIycEdMRkZCUVRKQ0xFbEJRV2hDZFVNc1JVRkJUMjVHTEV0QlEyaENMRTFCUVUwc1NVRkJTV0VzVFVGQk9FTXJRaXhGUVVGMVFpeEpRVWRxUml4SFFVRkpORUlzUlVGRFJpeE5RVUZOTEVsQlFVa3pSQ3hOUVVFNFF5dENMRVZCUVhWQ0xFbEJSMnBHTEVsQlEwVTBRaXhIUVVGblFpeEZRVU5vUWtnc1JVRkJaVVFzUlVGQlpVTXNSVUZCWTJNc1IwRkROVU1zVVVGRFFWZ3NSMEZCWjBJc1JVRkxiRUlzU1VGR1FTeEpRVUZKV1N4RlFVRlpaQ3hGUVVGdFFrTXNSVUZGTVVKcVF5eEZRVUZKTEVWQlFVZEJMRVZCUVVrNFF5eEZRVUZWYmtZc1QwRkJVWEZETEV0QlJYQkRkVU1zUlVGRVpVOHNSVUZCVlRsRExFMUJTVE5DTEU5QlFVODJReXhGUVdOVUxGTkJRVk5GTEVWQlFXVkRMRWRCUTNSQ0xFZEJRVEpDTEcxQ1FVRm9Ra0VzUlVGRFZDeE5RVUZOTEVsQlFVbDZSU3hOUVVFNFF5dENMRVZCUVhWQ0xFdEJSMnBHZDBJc1JVRkJhVUpyUWl4RlFVdHFRa29zUlVGQlV5eERRVU5RYkVZc1MwRkJUWFZFTEVWQlFWbEZMRlZCVjNSQ0xGTkJRVk5VTEVsQlExQXNTVUZCU1hWRExFVkJSVUZETEVWQlFXbENXaXhGUVVOeVFpeFBRVUZQVnl4RlFVRlBMRU5CVTFwWUxGVkJRVmNzVTBGQmJVSmhMRWRCUXpWQ0xFZEJRWGRDTEdsQ1FVRmlRU3hIUVVGelF5eFBRVUZpUVN4RlFVTnNReXhOUVVGTkxFbEJRVWsxUlN4TlFVRTRReXRDTEVWQlFYVkNMRXRCUjJwR0xGTkJRVk00UXl4SlFVTklSQ3hGUVVGVFJTeE5RVU5ZUml4RlFVRlRSU3hMUVVGTGFFSXNTMEZOYkVJc1QwRkdRV1VzU1VGRlR5eERRVU5NUlN4WlFVWm5Ra29zUlVGQlpVVXNUMEZMTjBJMVF5eEhRVUZuUWl4WFFVTjBRaXhQUVVGUEswTXNUVUZEVGs0c1JVRlRUQ3hQUVVoQlRDeEZRVUZUTEVOQlExQnNSaXhMUVVGTmRVUXNSVUZCV1VNc1VVRkZZbFVzUlVGQlVTeERRVU5pWjBJc1UwRkJWVUVzUlVGRFZrNHNWVUZCVjBFc1JVRkRXRVFzVTBGQlZVRXNSVUZEVmxVc1pVRkJaMEpCTEVsQlExUjJReXhIUVVGblFrVXNSVUZCV1d0Q0xFVkJhVU4yUXl4SlFVRkpORUlzUlVGQmNVSm9ReXhGUVhOR2VrSXNVMEZCVTJsRExFVkJRV2RDUXl4SFFVbDJRaXhKUVVoQkxFbEJRVWxETEVWQlFXTTNSU3hQUVVGUFVTeExRVUZMYjBVc1IwRkRNVUpGTEVWQlFXZENMRWRCUlZnMVJDeEZRVUZKTEVWQlFVZEJMRVZCUVVreVJDeEZRVUZaYUVjc1QwRkJVWEZETEVsQlFVc3NRMEZETTBNc1NVRkJTWEJDTEVWQlFVMHJSU3hGUVVGWk0wUXNSMEZSVHl4dFFrRkJiRUl3UkN4RlFVRlRPVVVzUzBGRGJFSm5SaXhGUVVGamFFWXNSMEZCVHpoRkxFVkJRVk01UlN4SlFVbHNReXhKUVZOSmFVWXNSVUZVUVVNc1JVRkJiVUpvUml4UFFVRlBVU3hMUVVGTGMwVXNSMEZYYmtNc1MwRnFSVVlzVTBGQk5FSkdMRWRCUXpGQ05VVXNUMEZCVDFFc1MwRkJTMjlGTEVkQlFWVjJSQ3hUUVVGUkxGTkJRVlYyUWl4SFFVTjBReXhKUVVGSk5rTXNSVUZCVldsRExFVkJRVk01UlN4SFFVdDJRaXhSUVVFMFFpeEpRVXBVTmtNc1QwRkJVVWtzUlVGQlZ5eERRVU53UTI1RkxFdEJRVTExUkN4RlFVRlpReXhQUVVsc1FpeE5RVUZOTEVsQlFVa3pReXhOUVVFNFF5dENMRVZCUVhWQ0xFdEJSMnBHTEZGQlJVOHNTVUZHU1cxQ0xFOUJRVkZKTEVWQlFWY3NRMEZETlVKdVJTeExRVUZOZFVRc1JVRkJXVWNzZVVKQlJXeENMRTFCUVUwc1NVRkJTVGRETEUxQlFUaERLMElzUlVGQmRVSXNVVUZ2UkdwR2VVUXNRMEZCYlVKSUxFZEJRMjVDTEUxQlFVOUpMRWRCUTFCSUxFVkJRWE5DUnl4RlFVZDRRaXhQUVVGUExGTkJRWEZDUXl4RlFVRlBjRUlzUjBGTGFrTXNVVUZLWXl4SlFVRldiMElzU1VGRFJrRXNSVUZCVVN4SlFVZE9TaXhGUVVOR0xFMUJRVTFCTEVWQlkxSXNTVUZZTWtNc1NVRlJka05MTEVkQlFXRXNSVUZEWWtNc1JVRkJXU3hIUVVWUVF5eEZRVUZMTEVWQlFVZEJMRVZCUVV0T0xFVkJRV2xDYmtjc1QwRkJVWGxITEVsQlFVMHNRMEZEYmtRc1NVRkJTVU1zUlVGQlQxQXNSVUZCYVVKTkxFZEJRM2hDTTBNc1JVRkJWVzFETEVWQlFXTlRMRWRCUTNoQ1F5eEZRVUZ6UWt3c1JVRkJUVWtzUjBGRE5VSkZMRVZCUVd0Q09VTXNSVUZCVVRaRExFVkJRWEZDZWtJc1IwRkZia1FzVVVGQkswSXNTVUZCY0VJd1FpeEZRVVZVTEUxQlJHbENNVUlzUjBGQlZVRXNSVUZCVDI1R0xFdEJRelZDTEVsQlFVbGhMRTFCUVRoREswSXNSVUZCZFVJc1MwRkhha1kyUkN4RlFVRlZSU3hIUVVGUlJTeEZRVU5zUWt3c1JVRkJZVUVzUjBGQlkwc3NTVUZCYjBKRUxFVkJTV3BFTEU5QlJFRktMRVZCUVdGQkxFZEJRV05LTEVWQlFXbENia2NzVTBGQlYyMUNMRTlCUVU5UkxFdEJRVXN5UlN4SFFVRlBkRWNzVVVGRGRFUjNSeXhGUVVGWlJpeEhRVWx3UXl4VFFVRlRUeXhGUVVGclFrTXNSVUZCWlRkQ0xFZEJRM2hETEU5QlFVOHNWMEZEVEN4UFFVRlBRU3hGUVVGVE5rSXNSVUZCWXpWRkxFMUJRVTB3UkN4TFFVRk5kRVFzWVVFd1FqbERMRk5CUVZONVJTeEZRVUZ0UWtNc1JVRkJaMEl2UWl4SFFVTXhReXhIUVVFNFFpeHRRa0ZCYmtJclFpeEZRVU5VTEU5QlFVOUlMRVZCUVd0Q1J5eEZRVUZuUWk5Q0xFZEJSek5ETEVkQlFUaENMR2xDUVVGdVFpdENMRWRCUVd0RUxFOUJRVzVDUVN4RlFVTjRReXhOUVVGTkxFbEJRVWx3Unl4TlFVRTRReXRDTEVWQlFYVkNMRXRCUjJwR0xFbEJRVWx6UlN4RlFVRnpRaXhIUVVVeFFpeEpRVUZMTEVsQlFVbG9SeXhMUVVGUEswWXNSVUZCWjBJc1EwRkRPVUlzU1VGQlNVWXNSVUZCWjBKRkxFVkJRV1V2Uml4SFFVVk9MRzFDUVVGc1FqWkdMRWxCUTFSSExFVkJRVzlDYUVjc1IwRkJUelJHTEVWQlFXdENReXhGUVVGbE4wSXNTVUZKYUVVc1QwRkJUMmRETEVWQllWUXNVMEZCVTBNc1NVRkRVQ3hKUVVGTExFbEJRVWxETEVWQlFVODNSU3hWUVVGVmRFTXNUMEZCVVc5SUxFVkJRVkVzU1VGQlNVTXNUVUZCVFVZc1IwRkJUMVFzUlVGQlR5eEZRVUZIUVN4RlFVRlBVeXhGUVVGTlZDeEpRVU5vUmxVc1JVRkJUVllzUjBGQlVYQkZMRlZCUVZWdlJTeEhRVWN4UWl4UFFVRnhRaXhKUVVGcVFsVXNSVUZCVFhCSUxFOUJRMFFzVTBGQlZYTklMRWRCUTJZc1QwRkJUMEVzUjBGSlZTeEpRVUZxUWtZc1JVRkJUWEJJTEU5QlEwUnZTQ3hGUVVGTkxFZEJSMUpCTEVWQlFVMUhMRkZCUVU4c1UwRkJWVU1zUlVGQlIwTXNSMEZETDBJc1QwRkJUeXhYUVVOTUxFOUJRVTlFTEVWQlFVVkRMRVZCUVVWMlJpeFhRVUZOTEVWQlFWRkpMR2RDUVhOQ0wwSXNVMEZCVTI5R0xFbEJRMUFzU1VGQlN5eEpRVUZKVUN4RlFVRlBOMFVzVlVGQlZYUkRMRTlCUVZFeVNDeEZRVUZqTEVsQlFVbE9MRTFCUVUxR0xFZEJRVTlVTEVWQlFVOHNSVUZCUjBFc1JVRkJUMU1zUlVGQlRWUXNTVUZEZEVacFFpeEZRVUZaYWtJc1IwRkJVWEJGTEZWQlFWVnZSU3hIUVVkb1F5eFBRVUZQTEZOQlFWVTNReXhIUVVObUxFOUJRVThzVjBGRFRDeEpRVUZKSzBRc1JVRkJVUzlFTEVWQlFWa3pRaXhYUVVGTkxFVkJRVkZKTEZkQlJXeERkVVlzUlVGQldTeFhRVU5rTEUxQlFVMHNTVUZCU1dwSUxFMUJRVGhESzBJc1JVRkJkVUlzVFVGSE4wVnRSaXhGUVVGblFpeERRVU5zUW5CRUxGTkJRVlZyUkN4RlFVRk5iRVFzVTBGRGFFSlBMRk5CUVZVc1YwRkRVaXhQUVVGUE5FTXNSVUZCVlROR0xGZEJRVTBzUlVGQlVVa3NZVUZITDBKNVJpeEZRVUZSU2l4RlFVRlpTeXhMUVVGSkxGTkJRVlZETEVkQlEzQkRMRTlCUVU5QkxFVkJRVmRJTEUxQlIzQkNMRTlCUkVGRUxFVkJRVmxZTEVWQlFWRm9SaXhYUVVGTkxFVkJRVkUyUml4RlFVRjBRbUlzUTBGQk5rSlZMRVZCUVUwelF5eFZRVU40UXl4RlFVRmpMRVZCUVdNc1IwRkJTVEpETEVkQlFWRXNSMEZCU1N4RFFVTnFSRE5ETEZOQlFWVTBReXhSTEdWRGNISkNiRUpxU1N4RlFVRlJjMGtzVjBFeVNWSXNVMEZCYjBKRExFZEJVVzVDTEVkQlVFRkJMRVZCUVVzc1NVRkJUWFpETEV0QlFVdDNReXhWUVVGWkxFdEJRVThzU1VGRGJFTjRReXhMUVVGTGVVTXNWMEZEU25wRExFdEJRVXQzUXl4VlFVRlpMRTFCUVZFc1MwRkRNVUpFTEVWQlFVc3NTVUZEU25aRExFdEJRVXQzUXl4VlFVRlpMRTFCUVZFc1MwRkRNVUlzU1VGQlRYcEpMRVZCUVU5RExGRkJRVkV3U1N4VFFVRlRNVU1zUzBGQlN6SkRMRTlCUlM5Q00wTXNTMEZCUzNkRExGVkJRMVFzVDBGSFJDeE5RVUZOU1N4RlFVRkpMRlZCUVZrMVF5eExRVUZMTmtNc1RVRkRNMEpPTEVWQlFVdHVSQ3hQUVVGUExFVkJRVWNzUlVGQlIzZEVMRVZCUVVjc2EwSkJTM0pDTEVsQlFVa3hSQ3hGUVVGUkxFVkJRMUkwUkN4RlFVRlJMRVZCUTFwUUxFVkJRVXNzUjBGQlIxRXNVVUZCVVN4bFFVRmxlRWtzU1VGRGFFSXNUMEZCVmtFc1NVRkhTakpGTEVsQlEyTXNUMEZCVmpORkxFbEJSMGgxU1N4RlFVRlJOVVFzVDBGSlZuRkVMRVZCUVV0dVJDeFBRVUZQTUVRc1JVRkJUeXhGUVVGSFJpeEpRVEZMZGtJMVNTeEZRVUZSWjBvc1MwRTJURklzVTBGQlkwTXNSMEZEWWl4SlFVTkxRU3hGUVVOSWFrb3NSVUZCVVd0S0xGRkJRVkZETEZGQlFWRXNVVUZCVTBZc1IwRkZha05xU2l4RlFVRlJhMG9zVVVGQlVVVXNWMEZCVnl4VFFVVXpRaXhOUVVGUFF5eE5RVzVOVm5KS0xFVkJRVkZ6U2l4TFFTdE5VaXhYUVVORExFbEJRVWxETEVWQlEwb3NTVUZEUTBFc1JVRkJTWFpLTEVWQlFWRnJTaXhSUVVGUlRTeFJRVUZSTEZOQlF6TkNMRTFCUVU5SUxFbEJWVlFzVDBGS1MwVXNSMEZCZDBJc2IwSkJRVnBGTEZOQlFUSkNMRkZCUVZOQkxGVkJRM0JFUml4RlFVRkpSU3hSUVVGUlF5eEpRVUZKUXl4UFFVZFdTaXhIUVRWT1VuWktMRVZCUVZGM1NTeFZRWGxIVWl4WFFVbERMRkZCUVhOQ0xHOUNRVUZZYjBJc1UwRkJNRUpCTEU5QlFVOUlMRk5CUVc5RExHRkJRWGhDUnl4UFFVRlBTQ3hSUVVGUmRFb3NUMEZCZFVKNVNpeFBRVUZQU0N4UlFVRlJTU3hWUVV0d1JpeHZRa0ZCWkVNc1dVRkJOa0pCTEZWQlFWVkRMRmxCUVdGRUxGVkJRVlZETEZWQlFWVnlTaXhqUVVGalNDeE5RVUZOTERSQ1FVMHpSU3h2UWtGQllubEtMRlZCUVRSQ1FTeFRRVUZUUXl4cFFrRkJiVUpFTEZOQlFWTkRMR2RDUVVGblFrTXNUMEZCVTBZc1UwRkJVME1zWjBKQlFXZENReXhOUVVGTlF5eHJRa0ZGY0Vnc2IwSkJRVmhRTEZGQlFUQkNRU3hQUVVGUFVTeFZRVUZaVWl4UFFVRlBVU3hSUVVGUlF5eFRRVUZaVkN4UFFVRlBVU3hSUVVGUlJTeFhRVUZoVml4UFFVRlBVU3hSUVVGUlJ5eFJRVWR5Unl4dlFrRkJaRlFzVjBGQk5rSkJMRlZCUVZWRExGZEJRV0ZFTEZWQlFWVkRMRlZCUVZWeVNpeGpRVUZqU0N4TlFVRk5MRzFDUVVGeFFtbExMRk5CUVZORExFOUJRVTlETEVkQlFVa3NTMEZCVHl4SlFVVTVTQ3h2UWtGQlpGb3NWMEZCTmtKQkxGVkJRVlZETEZkQlFXRkVMRlZCUVZWRExGVkJRVlZ5U2l4alFVRmpTQ3hOUVVGTkxIZENRVGxJZEVkUUxFVkJRVkZyU2l4UlFYbFBVaXhYUVVORExFbEJSME1zVDBGQlQzbENMR0ZCUTA0c1RVRkJUM1JDTEV0Qk9VOVJkVUlzUjBGRGJFSTFTeXhGUVVGUk5rc3NVVUZCVlN4TlFVTnFRaXhKUVVGSlF5eEhRVUZUTEVWQlJXSXNUVUZCVHl4TFFVTkVRU3hKUVVOS1FTeEhRVUZUTEVWQlExUldMRkZCUVZGWExFdEJRVXNzTkVsQlRrVXNSMEZsYkVJdlN5eEZRVUZSWjB3c1QwRkJVeXhEUVVOb1FpeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4WFFYTkdSR2hNTEVWQlFWRnBUQ3hKUVVGTllpeFJRVUZSWXl4UFFVRlRaQ3hSUVVGUllTeExRVUZQTEZOQmEwVTVRMnhNTEVWQlFVOURMRkZCUVZVc1JVRkJVU3hMUVVGU0xFTkJRVzlDUVN4SFFVVnlReXhOUVVGTkxGZEJRVU50VEN4SFFVRmpjRXdzUlVGQlQwTXNVVUZOTlVKdFRDeEZRVUZYUXl4RlFVRkpMRk5CUVZWRExFZEJRM2hDTEVsQlEwTXNUMEZCVDNCTExFdEJRVXRETEZWQlFWVnRTeXhIUVVOeVFpeE5RVUZQYUVNc1IwRkRVaXhOUVVGUExDdENRVUZwUTBFc1JVRkJUV2xETEZjc1pVTlBhRVIyVEN4RlFVRlBReXhSUVROUlVDeFRRVUZsTUVvc1IwRnhSR1FzVTBGQlV6WkNMRVZCUVZrNVF5eEhRVU53UWl4SlFVRkpLME1zUlVGRlFVTXNSVUZEUVVNc1JVRkdRVU1zUlVGQmFVSXNTMEZKY2tJc1UwRkJVMVFzUzBGQlV6TkRMRWRCUldwQ0xFbEJRVXN5UXl4RlFVRk5WU3hSUVVOV0xFOUJSMFFzVFVGQlRVTXNSVUZCVDFnc1JVRkhVRmtzUlVGQlQwTXNUMEZCVHl4SlFVRkpReXhOUVVOc1FuaE5MRVZCUVV0elRTeEhRVUZSVGl4SFFVRlpUU3hIUVVNdlFrUXNSVUZCUzJ4RUxFdEJRVTl1U2l4RlFVTmFjVTBzUlVGQlMwa3NTMEZCVDFRc1JVRkRXa3NzUlVGQlMwTXNTMEZCVDBFc1JVRkRXazRzUlVGQlYwMHNSVUZGV0haRUxFVkJRVXNzUjBGQlMyZEVMRVZCUVZsWExFOUJRVTh6UkN4RlFVRkxMRWxCUlZnc2FVSkJRVnBCTEVWQlFVc3NTVUZGWmtFc1JVRkJTelJFTEZGQlFWRXNUVUZKWkN4SlFVRkpha2dzUlVGQlVTeEZRVU5hY1VRc1JVRkJTeXhIUVVGTFFTeEZRVUZMTEVkQlFVZFJMRkZCUVZFc2FVSkJRV2xDTEVOQlFVTjRTU3hGUVVGUE5rd3NTMEZGYkVRc1IwRkJZeXhQUVVGV04wd3NSVUZEU0N4TlFVRlBMRWxCUlZJeVJTeEpRVU5CTEUxQlFVMXRTQ3hGUVVGWlpDeEZRVUZaU2l4WFFVRlhhVUlzUjBGRGVrTXNSMEZCZVVJc2JVSkJRV1JETEVWQlFUQkNMRU5CUTNCRExFMUJRVTF3VFN4RlFVRk5jMGtzUlVGQlMzSkVMRWRCUTJwQ00wVXNSVUZCVVRoTUxFVkJRVlZETEV0QlFVdFVMRVZCUVUwMVRDeEhRVWMzUW5OSkxFVkJRVXR1UkN4UFFVRlBSaXhGUVVGUExFZEJRMjVDUVN4SlFVVkVMRTlCUVU4elJTeExRVWxTWjB3c1JVRkJXV3BFTEZkQlFWZG5SU3hMUVVGTFZDeEZRVUZOZEVRc1NVRkZjRUp6UkN4RlFVRkxXaXhMUVVGUFRTeEZRVUZaVGl4TFFVTm9Rek5KTEUxQlFVMTFTaXhGUVVGTmRFUXNSMEZwUTI1Q0xFOUJPVUpCTWtNc1JVRkJUWHBETEZWQlFWbEJMRVZCUTJ4Q2VVTXNSVUZCVFRGRExGVkJRVmtyUXl4RlFVRlpMME1zV1VGRE9VSXdReXhGUVVGTmNrTXNUVUZCVVRCRExFVkJRVmxuUWl4WlFVRlpPVVFzUjBGRGRFTjVReXhGUVVGTmMwSXNUMEZCVTBFc1JVRkRablJDTEVWQlFVMU1MRkZCUVZWVkxFVkJRVmxXTEZGQlJUVkNkRW9zVDBGQlQwTXNaVUZCWlRCS0xFVkJRVThzVlVGQlZ5eERRVU4yUTNwS0xGbEJRVmtzUlVGRFdrTXNZMEZCWXl4RlFVTmtLMHNzU1VGQlN5eEpRVU50UWl4UFFVRnVRbVFzUlVGRFNVRXNSMEZGU2tZc1NVRkJiMEpHTEVWQlFWbDBReXhoUVVOdVEzZERMRVZCUVd0Q1JpeEZRVUZaZEVNc1YwRkRPVUo1UXl4RlFVRmxTQ3hGUVVGWlN5eFJRVUZSYmtRc1NVRkhOMEpwUkN4SFFVVlNaMElzU1VGQlMzSkNMRWxCUTBwTkxFVkJRV2xDVGl4TFFVdGhMRzFDUVVGeVFrVXNSVUZCV1c5Q0xFMUJRM1JDY0VJc1JVRkJXVzlDTEV0QlFVdDZRaXhIUVVkWVFTeEZRVWRTTEZOQlFWTnpRaXhGUVVGUEwwUXNSVUZCVjIxRkxFZEJRekZDTEUxQlFVMURMRVZCUVZkMFFpeEZRVUZaZGtZc1MwRkJTM2xETEdkQ1FVRnJReXhKUVVGa2JVVXNSVUZCTkVJc1NVRkJUVUVzUjBGQllXNUZMRWRCUlhKSExFOUJSRUZ2UlN4RlFVRlROVUlzU1VGQlRXcEdMRXRCUVV0cFJpeEpRVU5pTkVJc1JVRjVSbElzVTBGQlUwTXNSVUZCV1VNc1IwRkRjRUlzVDBGQlQwRXNSVUZCVDNwS0xGZEJRMXBETEZWQlFWVXNSVUZCUjNkS0xFVkJRVTk2U2l4WFFVRlhiRVFzVDBGQlV5eEhRVU40UXpKSkxGRkJRVkVzVlVGQlZ5eExRVEpDZEVJc1QwRjJVVUYzUXl4RlFVRlpUQ3hOUVVGUlN5eEZRVU53UWtFc1JVRkJXWGxDTEZGQlFWVjZRaXhGUVVOMFFrRXNSVUZCV1Zjc1QwRnZVRm9zVTBGQlowSnFUU3hIUVVObUxFOUJRVWxCTEdGQlFXVmxMRTFCUTFobUxFVkJRVWxuVGl4UFFVRlRhRTRzUlVGQlNYRk1MRkZCUld4Q2Nrd3NSMEYyVUZKelRDeEZRVUZaTWtJc1VVRjNURm9zVjBGRFF5eE5RVUZOYWtVc1JVRkJZU3hKUVVObWMwTXNSVUZCV1RSQ0xFMUJRVTB2UlN4SlFVRkpNRVVzVFVGRGRFSjJRaXhGUVVGWk5rSXNUVUZCVFdoR0xFbEJRVWt3UlN4SFFVRmhNVVVzUzBGQlNVc3NSMEZCWVN4SlFVRk5RU3hMUVVNMVJHaEdMRXRCUVVzc1MwRkZVQ3hQUVVSQk9FZ3NSVUZCV1RoQ0xFOUJRVThzU1VGRFduQkZMRWRCTjB4U2MwTXNSVUZCV1RoQ0xFOUJjMHBhTEZOQlFXZENjRVVzUjBGUFppeEpRVUZKZUVjc1JVRk9TamhKTEVWQlFWbDJReXhMUVVGTFF5eEhRVU5xUW5ORExFVkJRVmwwUXl4WFFVRmhRU3hGUVVWNlFuTkRMRVZCUVZrMFFpeE5RVUZSTEVkQlEzQkNOVUlzUlVGQldUWkNMRTFCUVZFc1IwRkhjRUlzVFVGQlRUVktMRWRCUVN0Q0xHbENRVUZtZVVZc1JVRkJNRUpCTEVWQlFXRXNTVUZCU1hwR0xFMUJRVTBzVlVGRGFrVTRTaXhGUVVGTk9Vb3NSVUZCVFhCRUxFOUJSV3hDTEVsQlFVdHhReXhGUVVGSkxFVkJRVWRCTEVWQlFVazJTeXhGUVVGTE4wc3NTVUZEWm1Vc1JVRkJUV1lzUzBGUFZ5eFBRVVowUW5kSExFVkJRV0Y2Uml4RlFVRk5aaXhIUVVGSGMwY3NVVUZCVVN4TlFVRlBMRkZCUlhSQ0xFZEJRMlIzUXl4RlFVRlpOa0lzVFVGQlRTOUxMRXRCUVVzc1NVRkJTVzlKTEU5QlFVOHNTVUZCVFhoQ0xFVkJRVmR3UlN4TlFVRk5MRWRCUVVzc1RVRkZPVVF3Unl4RlFVRlpORUlzVFVGQlRUbExMRXRCUVVzc1NVRkJTVzlKTEU5QlFVOHNTVUZCVFhoQ0xFVkJRV0VzVVVFelMzaEVjME1zUlVGQldVc3NVVUZ6VFZvc1UwRkJhVUpxVFN4SFFVTm9RaXhIUVVFNFFpeE5RVUV4UWtFc1JVRkJTMEVzUlVGQlMxTXNUMEZCVXl4SFFVTjBRaXhQUVVGUExFVkJSMUlzU1VGQlNYRkRMRVZCUTBFMlN5eEZRVVZLTEVsQlFVczNTeXhGUVVGSkxFVkJRVWMyU3l4RlFVRk5MMElzUlVGQldUWkNMRTFCUVUxb1RpeFBRVUZSY1VNc1JVRkJTVFpMTEVWQlFVczNTeXhKUVVOd1JDeEhRVUZKT0Vrc1JVRkJXVFpDTEUxQlFVMHpTeXhIUVVGSE9Fc3NTMEZCU3pWT0xFZEJRemRDTEU5QlFVOHNSVUZKVkN4SlFVRkxPRU1zUlVGQlNTeEZRVUZITmtzc1JVRkJUUzlDTEVWQlFWazBRaXhOUVVGTkwwMHNUMEZCVVhGRExFVkJRVWsyU3l4RlFVRkxOMHNzU1VGRGNFUXNSMEZCU1RoSkxFVkJRVmswUWl4TlFVRk5NVXNzUjBGQlJ6aExMRXRCUVVzMVRpeEhRVU0zUWl4UFFVRlBMRVZCU1ZRc1QwRkJUeXhIUVhwT1VqUk1MRVZCUVZrM1F5eFRRVUZYTEVWQlFWRXNUVUZETDBJMlF5eEZRVUZaVml4UlFUQlFXaXhYUVVORFZDeFJRVUZSVnl4TFFVRkxMREJKUVhwUVpIaEtMRTlCUVU5UkxFdEJRVXN5U0N4SFFVRkxPVWNzVTBGQlVYWkNMRWxCUTNoQ2Ewc3NSVUZCV1d4TExFZEJRVTl4U1N4RlFVRkpja2tzVFVGUGVFSnJTeXhGUVVGWk5FSXNUVUZCVVN4SFFVTndRalZDTEVWQlFWazJRaXhOUVVGUkxFZEJUM0JDTjBJc1JVRkJXVW9zVjBGQllTeEhRV3RDZWtKSkxFVkJRVmxuUWl4WlFWWmFMRk5CUVhGQ09VUXNSMEZEY0VJc1NVRkJTU3RGTEVWQlFVOHNSVUZGV0N4SlFVRkxMRWxCUVVrdlN5eEZRVUZKTEVWQlFVZEJMRVZCUVVsblJ5eEZRVUZWY2trc1QwRkJVWEZETEVsQlEzSkRLMHNzUjBGQlUwRXNSMEZCVVN4SFFVRkxRU3hGUVVGUkwwVXNSVUZCVldkR0xGZEJRVmRvVEN4SFFVTnVSQ3RMTEVkQlFWRXNSVUZIVkN4UFFVRlBha01zUlVGQldWQXNUMEZCVDI1TUxFdEJRVXRwUWl4SlFVRkpNRTBzUjBGQlVXcERMRVZCUVZsUUxFOUJRVTgxU3l4VFFUUk9MMFJ0VEN4RlFVRlpPRUlzVDBGQlR6bENMRVZCUVZscVF5eFJRVVY0UW1sRExFa3NaVU40VVZKMlRDeEZRVUZSYzBrc1YwRXlTVklzVTBGQmIwSkRMRWRCVVc1Q0xFZEJVRUZCTEVWQlFVc3NTVUZCVFhaRExFdEJRVXQzUXl4VlFVRlpMRXRCUVU4c1NVRkRiRU40UXl4TFFVRkxlVU1zVjBGRFNucERMRXRCUVV0M1F5eFZRVUZaTEUxQlFWRXNTMEZETVVKRUxFVkJRVXNzU1VGRFNuWkRMRXRCUVV0M1F5eFZRVUZaTEUxQlFWRXNTMEZETVVJc1NVRkJUWHBKTEVWQlFVOURMRkZCUVZFd1NTeFRRVUZUTVVNc1MwRkJTekpETEU5QlJTOUNNME1zUzBGQlMzZERMRlZCUTFRc1QwRkhSQ3hOUVVGTlNTeEZRVUZKTEZWQlFWazFReXhMUVVGTE5rTXNUVUZETTBKT0xFVkJRVXR1UkN4UFFVRlBMRVZCUVVjc1JVRkJSM2RFTEVWQlFVY3NhMEpCUzNKQ0xFbEJRVWt4UkN4RlFVRlJMRVZCUTFJMFJDeEZRVUZSTEVWQlExcFFMRVZCUVVzc1IwRkJSMUVzVVVGQlVTeGxRVUZsZUVrc1NVRkRhRUlzVDBGQlZrRXNTVUZIU2pKRkxFbEJRMk1zVDBGQlZqTkZMRWxCUjBoMVNTeEZRVUZSTlVRc1QwRkpWbkZFTEVWQlFVdHVSQ3hQUVVGUE1FUXNSVUZCVHl4RlFVRkhSaXhKUVRGTGRrSTFTU3hGUVVGUlowb3NTMEUyVEZJc1UwRkJZME1zUjBGRFlpeEpRVU5MUVN4RlFVTklha29zUlVGQlVXdEtMRkZCUVZGRExGRkJRVkVzVVVGQlUwWXNSMEZGYWtOcVNpeEZRVUZSYTBvc1VVRkJVVVVzVjBGQlZ5eFRRVVV6UWl4TlFVRlBReXhOUVc1TlZuSktMRVZCUVZGelNpeExRU3ROVWl4WFFVTkRMRWxCUVVsRExFVkJRMG9zU1VGRFEwRXNSVUZCU1haS0xFVkJRVkZyU2l4UlFVRlJUU3hSUVVGUkxGTkJRek5DTEUxQlFVOUlMRWxCVlZRc1QwRktTMFVzUjBGQmQwSXNiMEpCUVZwRkxGTkJRVEpDTEZGQlFWTkJMRlZCUTNCRVJpeEZRVUZKUlN4UlFVRlJReXhKUVVGSlF5eFBRVWRXU2l4SFFUVk9VblpLTEVWQlFWRjNTU3hWUVhsSFVpeFhRVWxETEZGQlFYTkNMRzlDUVVGWWIwSXNVMEZCTUVKQkxFOUJRVTlJTEZOQlFXOURMR0ZCUVhoQ1J5eFBRVUZQU0N4UlFVRlJkRW9zVDBGQmRVSjVTaXhQUVVGUFNDeFJRVUZSU1N4VlFVdHdSaXh2UWtGQlpFTXNXVUZCTmtKQkxGVkJRVlZETEZsQlFXRkVMRlZCUVZWRExGVkJRVlZ5U2l4alFVRmpTQ3hOUVVGTkxEUkNRVTB6UlN4dlFrRkJZbmxLTEZWQlFUUkNRU3hUUVVGVFF5eHBRa0ZCYlVKRUxGTkJRVk5ETEdkQ1FVRm5Ra01zVDBGQlUwWXNVMEZCVTBNc1owSkJRV2RDUXl4TlFVRk5ReXhyUWtGRmNFZ3NiMEpCUVZoUUxGRkJRVEJDUVN4UFFVRlBVU3hWUVVGWlVpeFBRVUZQVVN4UlFVRlJReXhUUVVGWlZDeFBRVUZQVVN4UlFVRlJSU3hYUVVGaFZpeFBRVUZQVVN4UlFVRlJSeXhSUVVkeVJ5eHZRa0ZCWkZRc1YwRkJOa0pCTEZWQlFWVkRMRmRCUVdGRUxGVkJRVlZETEZWQlFWVnlTaXhqUVVGalNDeE5RVUZOTEcxQ1FVRnhRbWxMTEZOQlFWTkRMRTlCUVU5RExFZEJRVWtzUzBGQlR5eEpRVVU1U0N4dlFrRkJaRm9zVjBGQk5rSkJMRlZCUVZWRExGZEJRV0ZFTEZWQlFWVkRMRlZCUVZWeVNpeGpRVUZqU0N4TlFVRk5MSGRDUVRsSWRFZFFMRVZCUVZGclNpeFJRWGxQVWl4WFFVTkRMRWxCUjBNc1QwRkJUM2xDTEdGQlEwNHNUVUZCVDNSQ0xFdEJPVTlSZFVJc1IwRkRiRUkxU3l4RlFVRlJOa3NzVVVGQlZTeE5RVU5xUWl4SlFVRkpReXhIUVVGVExFVkJSV0lzVFVGQlR5eExRVU5FUVN4SlFVTktRU3hIUVVGVExFVkJRMVJXTEZGQlFWRlhMRXRCUVVzc05FbEJUa1VzUjBGbGJFSXZTeXhGUVVGUlowd3NUMEZCVXl4RFFVTm9RaXhWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFhRWE5HUkdoTUxFVkJRVkZwVEN4SlFVRk5ZaXhSUVVGUll5eFBRVUZUWkN4UlFVRlJZU3hMUVVGUExGTkJhMFU1UTJ4TUxFVkJRVTlETEZGQlFWVXNSVUZCVVN4TFFVRlNMRU5CUVc5Q1FTeEhRVVZ5UXl4TlFVRk5MRmRCUVVOdFRDeEhRVUZqY0V3c1JVRkJUME1zVVVGTk5VSnRUQ3hGUVVGWFF5eEZRVUZKTEZOQlFWVkRMRWRCUTNoQ0xFbEJRME1zVDBGQlQzQkxMRXRCUVV0RExGVkJRVlZ0U3l4SFFVTnlRaXhOUVVGUGFFTXNSMEZEVWl4TlFVRlBMQ3RDUVVGcFEwRXNSVUZCVFdsRExGY3NaVU5QYUVSMlRDeEZRVUZQUXl4UlFUTlJVQ3hUUVVGbE1Fb3NSMEZ4UkdRc1UwRkJVelpDTEVWQlFWazVReXhIUVVOd1FpeEpRVUZKSzBNc1JVRkZRVU1zUlVGRFFVTXNSVUZHUVVNc1JVRkJhVUlzUzBGSmNrSXNVMEZCVTFRc1MwRkJVek5ETEVkQlJXcENMRWxCUVVzeVF5eEZRVUZOVlN4UlFVTldMRTlCUjBRc1RVRkJUVU1zUlVGQlQxZ3NSVUZIVUZrc1JVRkJUME1zVDBGQlR5eEpRVUZKUXl4TlFVTnNRbmhOTEVWQlFVdHpUU3hIUVVGUlRpeEhRVUZaVFN4SFFVTXZRa1FzUlVGQlMyeEVMRXRCUVU5dVNpeEZRVU5hY1Uwc1JVRkJTMGtzUzBGQlQxUXNSVUZEV2tzc1JVRkJTME1zUzBGQlQwRXNSVUZEV2s0c1JVRkJWMDBzUlVGRldIWkVMRVZCUVVzc1IwRkJTMmRFTEVWQlFWbFhMRTlCUVU4elJDeEZRVUZMTEVsQlJWZ3NhVUpCUVZwQkxFVkJRVXNzU1VGRlprRXNSVUZCU3pSRUxGRkJRVkVzVFVGSlpDeEpRVUZKYWtnc1JVRkJVU3hGUVVOYWNVUXNSVUZCU3l4SFFVRkxRU3hGUVVGTExFZEJRVWRSTEZGQlFWRXNhVUpCUVdsQ0xFTkJRVU40U1N4RlFVRlBOa3dzUzBGRmJFUXNSMEZCWXl4UFFVRldOMHdzUlVGRFNDeE5RVUZQTEVsQlJWSXlSU3hKUVVOQkxFMUJRVTF0U0N4RlFVRlpaQ3hGUVVGWlNpeFhRVUZYYVVJc1IwRkRla01zUjBGQmVVSXNiVUpCUVdSRExFVkJRVEJDTEVOQlEzQkRMRTFCUVUxd1RTeEZRVUZOYzBrc1JVRkJTM0pFTEVkQlEycENNMFVzUlVGQlVUaE1MRVZCUVZWRExFdEJRVXRVTEVWQlFVMDFUQ3hIUVVjM1FuTkpMRVZCUVV0dVJDeFBRVUZQUml4RlFVRlBMRWRCUTI1Q1FTeEpRVVZFTEU5QlFVOHpSU3hMUVVsU1owd3NSVUZCV1dwRUxGZEJRVmRuUlN4TFFVRkxWQ3hGUVVGTmRFUXNTVUZGY0VKelJDeEZRVUZMV2l4TFFVRlBUU3hGUVVGWlRpeExRVU5vUXpOSkxFMUJRVTExU2l4RlFVRk5kRVFzUjBGcFEyNUNMRTlCT1VKQk1rTXNSVUZCVFhwRExGVkJRVmxCTEVWQlEyeENlVU1zUlVGQlRURkRMRlZCUVZrclF5eEZRVUZaTDBNc1dVRkRPVUl3UXl4RlFVRk5ja01zVFVGQlVUQkRMRVZCUVZsblFpeFpRVUZaT1VRc1IwRkRkRU41UXl4RlFVRk5jMElzVDBGQlUwRXNSVUZEWm5SQ0xFVkJRVTFNTEZGQlFWVlZMRVZCUVZsV0xGRkJSVFZDZEVvc1QwRkJUME1zWlVGQlpUQktMRVZCUVU4c1ZVRkJWeXhEUVVOMlEzcEtMRmxCUVZrc1JVRkRXa01zWTBGQll5eEZRVU5rSzBzc1NVRkJTeXhKUVVOdFFpeFBRVUZ1UW1Rc1JVRkRTVUVzUjBGRlNrWXNTVUZCYjBKR0xFVkJRVmwwUXl4aFFVTnVRM2RETEVWQlFXdENSaXhGUVVGWmRFTXNWMEZET1VKNVF5eEZRVUZsU0N4RlFVRlpTeXhSUVVGUmJrUXNTVUZITjBKcFJDeEhRVVZTWjBJc1NVRkJTM0pDTEVsQlEwcE5MRVZCUVdsQ1RpeExRVXRoTEcxQ1FVRnlRa1VzUlVGQldXOUNMRTFCUTNSQ2NFSXNSVUZCV1c5Q0xFdEJRVXQ2UWl4SFFVZFlRU3hGUVVkU0xGTkJRVk56UWl4RlFVRlBMMFFzUlVGQlYyMUZMRWRCUXpGQ0xFMUJRVTFETEVWQlFWZDBRaXhGUVVGWmRrWXNTMEZCUzNsRExHZENRVUZyUXl4SlFVRmtiVVVzUlVGQk5FSXNTVUZCVFVFc1IwRkJZVzVGTEVkQlJYSkhMRTlCUkVGdlJTeEZRVUZUTlVJc1NVRkJUV3BHTEV0QlFVdHBSaXhKUVVOaU5FSXNSVUY1UmxJc1UwRkJVME1zUlVGQldVTXNSMEZEY0VJc1QwRkJUMEVzUlVGQlQzcEtMRmRCUTFwRExGVkJRVlVzUlVGQlIzZEtMRVZCUVU5NlNpeFhRVUZYYkVRc1QwRkJVeXhIUVVONFF6SkpMRkZCUVZFc1ZVRkJWeXhMUVRKQ2RFSXNUMEYyVVVGM1F5eEZRVUZaVEN4TlFVRlJTeXhGUVVOd1FrRXNSVUZCV1hsQ0xGRkJRVlY2UWl4RlFVTjBRa0VzUlVGQldWY3NUMEZ2VUZvc1UwRkJaMEpxVFN4SFFVTm1MRTlCUVVsQkxHRkJRV1ZsTEUxQlExaG1MRVZCUVVsblRpeFBRVUZUYUU0c1JVRkJTWEZNTEZGQlJXeENja3dzUjBGMlVGSnpUQ3hGUVVGWk1rSXNVVUYzVEZvc1YwRkRReXhOUVVGTmFrVXNSVUZCWVN4SlFVTm1jME1zUlVGQldUUkNMRTFCUVUwdlJTeEpRVUZKTUVVc1RVRkRkRUoyUWl4RlFVRlpOa0lzVFVGQlRXaEdMRWxCUVVrd1JTeEhRVUZoTVVVc1MwRkJTVXNzUjBGQllTeEpRVUZOUVN4TFFVTTFSR2hHTEV0QlFVc3NTMEZGVUN4UFFVUkJPRWdzUlVGQldUaENMRTlCUVU4c1NVRkRXbkJGTEVkQk4weFNjME1zUlVGQldUaENMRTlCYzBwYUxGTkJRV2RDY0VVc1IwRlBaaXhKUVVGSmVFY3NSVUZPU2poSkxFVkJRVmwyUXl4TFFVRkxReXhIUVVOcVFuTkRMRVZCUVZsMFF5eFhRVUZoUVN4RlFVVjZRbk5ETEVWQlFWazBRaXhOUVVGUkxFZEJRM0JDTlVJc1JVRkJXVFpDTEUxQlFWRXNSMEZIY0VJc1RVRkJUVFZLTEVkQlFTdENMR2xDUVVGbWVVWXNSVUZCTUVKQkxFVkJRV0VzU1VGQlNYcEdMRTFCUVUwc1ZVRkRha1U0U2l4RlFVRk5PVW9zUlVGQlRYQkVMRTlCUld4Q0xFbEJRVXR4UXl4RlFVRkpMRVZCUVVkQkxFVkJRVWsyU3l4RlFVRkxOMHNzU1VGRFptVXNSVUZCVFdZc1MwRlBWeXhQUVVaMFFuZEhMRVZCUVdGNlJpeEZRVUZOWml4SFFVRkhjMGNzVVVGQlVTeE5RVUZQTEZGQlJYUkNMRWRCUTJSM1F5eEZRVUZaTmtJc1RVRkJUUzlMTEV0QlFVc3NTVUZCU1c5SkxFOUJRVThzU1VGQlRYaENMRVZCUVZkNVJTeFBRVUZQTEVkQlFVc3NUVUZGTDBSdVF5eEZRVUZaTkVJc1RVRkJUVGxMTEV0QlFVc3NTVUZCU1c5SkxFOUJRVThzU1VGQlRYaENMRVZCUVdFc1VVRXpTM2hFYzBNc1JVRkJXVXNzVVVGelRWb3NVMEZCYVVKcVRTeEhRVU5vUWl4SFFVRTRRaXhOUVVFeFFrRXNSVUZCUzBFc1JVRkJTMU1zVDBGQlV5eEhRVU4wUWl4UFFVRlBMRVZCUjFJc1NVRkJTWEZETEVWQlEwRTJTeXhGUVVWS0xFbEJRVXMzU3l4RlFVRkpMRVZCUVVjMlN5eEZRVUZOTDBJc1JVRkJXVFpDTEUxQlFVMW9UaXhQUVVGUmNVTXNSVUZCU1RaTExFVkJRVXMzU3l4SlFVTndSQ3hIUVVGSk9Fa3NSVUZCV1RaQ0xFMUJRVTB6U3l4SFFVRkhPRXNzUzBGQlN6Vk9MRWRCUXpkQ0xFOUJRVThzUlVGSlZDeEpRVUZMT0VNc1JVRkJTU3hGUVVGSE5rc3NSVUZCVFM5Q0xFVkJRVmswUWl4TlFVRk5MMDBzVDBGQlVYRkRMRVZCUVVrMlN5eEZRVUZMTjBzc1NVRkRjRVFzUjBGQlNUaEpMRVZCUVZrMFFpeE5RVUZOTVVzc1IwRkJSemhMTEV0QlFVczFUaXhIUVVNM1FpeFBRVUZQTEVWQlNWUXNUMEZCVHl4SFFYcE9ValJNTEVWQlFWazNReXhUUVVGWExFVkJRVkVzVFVGREwwSTJReXhGUVVGWlZpeFJRVEJRV2l4WFFVTkRWQ3hSUVVGUlZ5eExRVUZMTERCSlFYcFFaSGhLTEU5QlFVOVJMRXRCUVVzeVNDeEhRVUZMT1Vjc1UwRkJVWFpDTEVsQlEzaENhMHNzUlVGQldXeExMRWRCUVU5eFNTeEZRVUZKY2trc1RVRlBlRUpyU3l4RlFVRlpORUlzVFVGQlVTeEhRVU53UWpWQ0xFVkJRVmsyUWl4TlFVRlJMRWRCVDNCQ04wSXNSVUZCV1Vvc1YwRkJZU3hIUVd0Q2VrSkpMRVZCUVZsblFpeFpRVlphTEZOQlFYRkNPVVFzUjBGRGNFSXNTVUZCU1N0RkxFVkJRVThzUlVGRldDeEpRVUZMTEVsQlFVa3ZTeXhGUVVGSkxFVkJRVWRCTEVWQlFVbG5SeXhGUVVGVmNra3NUMEZCVVhGRExFbEJRM0pESzBzc1IwRkJVMEVzUjBGQlVTeEhRVUZMUVN4RlFVRlJMMFVzUlVGQlZXZEdMRmRCUVZkb1RDeEhRVU51UkN0TExFZEJRVkVzUlVGSFZDeFBRVUZQYWtNc1JVRkJXVkFzVDBGQlQyNU1MRXRCUVV0cFFpeEpRVUZKTUUwc1IwRkJVV3BETEVWQlFWbFFMRTlCUVU4MVN5eFRRVFJPTDBSdFRDeEZRVUZaT0VJc1QwRkJUemxDTEVWQlFWbHFReXhSUVVWNFFtbERMRWtzWlVONFVWSjJUQ3hGUVVGUmMwa3NWMEV5U1ZJc1UwRkJiMEpETEVkQlVXNUNMRWRCVUVGQkxFVkJRVXNzU1VGQlRYWkRMRXRCUVV0M1F5eFZRVUZaTEV0QlFVOHNTVUZEYkVONFF5eExRVUZMZVVNc1YwRkRTbnBETEV0QlFVdDNReXhWUVVGWkxFMUJRVkVzUzBGRE1VSkVMRVZCUVVzc1NVRkRTblpETEV0QlFVdDNReXhWUVVGWkxFMUJRVkVzUzBGRE1VSXNTVUZCVFhwSkxFVkJRVTlETEZGQlFWRXdTU3hUUVVGVE1VTXNTMEZCU3pKRExFOUJSUzlDTTBNc1MwRkJTM2RETEZWQlExUXNUMEZIUkN4TlFVRk5TU3hGUVVGSkxGVkJRVmsxUXl4TFFVRkxOa01zVFVGRE0wSk9MRVZCUVV0dVJDeFBRVUZQTEVWQlFVY3NSVUZCUjNkRUxFVkJRVWNzYTBKQlMzSkNMRWxCUVVreFJDeEZRVUZSTEVWQlExSTBSQ3hGUVVGUkxFVkJRMXBRTEVWQlFVc3NSMEZCUjFFc1VVRkJVU3hsUVVGbGVFa3NTVUZEYUVJc1QwRkJWa0VzU1VGSFNqSkZMRWxCUTJNc1QwRkJWak5GTEVsQlIwaDFTU3hGUVVGUk5VUXNUMEZKVm5GRUxFVkJRVXR1UkN4UFFVRlBNRVFzUlVGQlR5eEZRVUZIUml4SlFURkxka0kxU1N4RlFVRlJaMG9zUzBFMlRGSXNVMEZCWTBNc1IwRkRZaXhKUVVOTFFTeEZRVU5JYWtvc1JVRkJVV3RLTEZGQlFWRkRMRkZCUVZFc1VVRkJVMFlzUjBGRmFrTnFTaXhGUVVGUmEwb3NVVUZCVVVVc1YwRkJWeXhUUVVVelFpeE5RVUZQUXl4TlFXNU5WbkpLTEVWQlFWRnpTaXhMUVN0TlVpeFhRVU5ETEVsQlFVbERMRVZCUTBvc1NVRkRRMEVzUlVGQlNYWktMRVZCUVZGclNpeFJRVUZSVFN4UlFVRlJMRk5CUXpOQ0xFMUJRVTlJTEVsQlZWUXNUMEZLUzBVc1IwRkJkMElzYjBKQlFWcEZMRk5CUVRKQ0xGRkJRVk5CTEZWQlEzQkVSaXhGUVVGSlJTeFJRVUZSUXl4SlFVRkpReXhQUVVkV1NpeEhRVFZPVW5aS0xFVkJRVkYzU1N4VlFYbEhVaXhYUVVsRExGRkJRWE5DTEc5Q1FVRlliMElzVTBGQk1FSkJMRTlCUVU5SUxGTkJRVzlETEdGQlFYaENSeXhQUVVGUFNDeFJRVUZSZEVvc1QwRkJkVUo1U2l4UFFVRlBTQ3hSUVVGUlNTeFZRVXR3Uml4dlFrRkJaRU1zV1VGQk5rSkJMRlZCUVZWRExGbEJRV0ZFTEZWQlFWVkRMRlZCUVZWeVNpeGpRVUZqU0N4TlFVRk5MRFJDUVUwelJTeHZRa0ZCWW5sS0xGVkJRVFJDUVN4VFFVRlRReXhwUWtGQmJVSkVMRk5CUVZORExHZENRVUZuUWtNc1QwRkJVMFlzVTBGQlUwTXNaMEpCUVdkQ1F5eE5RVUZOUXl4clFrRkZjRWdzYjBKQlFWaFFMRkZCUVRCQ1FTeFBRVUZQVVN4VlFVRlpVaXhQUVVGUFVTeFJRVUZSUXl4VFFVRlpWQ3hQUVVGUFVTeFJRVUZSUlN4WFFVRmhWaXhQUVVGUFVTeFJRVUZSUnl4UlFVZHlSeXh2UWtGQlpGUXNWMEZCTmtKQkxGVkJRVlZETEZkQlFXRkVMRlZCUVZWRExGVkJRVlZ5U2l4alFVRmpTQ3hOUVVGTkxHMUNRVUZ4UW1sTExGTkJRVk5ETEU5QlFVOURMRWRCUVVrc1MwRkJUeXhKUVVVNVNDeHZRa0ZCWkZvc1YwRkJOa0pCTEZWQlFWVkRMRmRCUVdGRUxGVkJRVlZETEZWQlFWVnlTaXhqUVVGalNDeE5RVUZOTEhkQ1FUbElkRWRRTEVWQlFWRnJTaXhSUVhsUFVpeFhRVU5ETEVsQlIwTXNUMEZCVDNsQ0xHRkJRMDRzVFVGQlQzUkNMRXRCT1U5UmRVSXNSMEZEYkVJMVN5eEZRVUZSTmtzc1VVRkJWU3hOUVVOcVFpeEpRVUZKUXl4SFFVRlRMRVZCUldJc1RVRkJUeXhMUVVORVFTeEpRVU5LUVN4SFFVRlRMRVZCUTFSV0xGRkJRVkZYTEV0QlFVc3NORWxCVGtVc1IwRmxiRUl2U3l4RlFVRlJaMHdzVDBGQlV5eERRVU5vUWl4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hWUVVOQkxGVkJRMEVzVlVGRFFTeFZRVU5CTEZWQlEwRXNWVUZEUVN4VlFVTkJMRlZCUTBFc1ZVRkRRU3hYUVhOR1JHaE1MRVZCUVZGcFRDeEpRVUZOWWl4UlFVRlJZeXhQUVVGVFpDeFJRVUZSWVN4TFFVRlBMRk5CYTBVNVEyeE1MRVZCUVU5RExGRkJRVlVzUlVGQlVTeExRVUZTTEVOQlFXOUNRU3hIUVVWeVF5eE5RVUZOTEZkQlFVTnRUQ3hIUVVGamNFd3NSVUZCVDBNc1VVRk5OVUp0VEN4RlFVRlhReXhGUVVGSkxGTkJRVlZETEVkQlEzaENMRWxCUTBNc1QwRkJUM0JMTEV0QlFVdERMRlZCUVZWdFN5eEhRVU55UWl4TlFVRlBhRU1zUjBGRFVpeE5RVUZQTEN0Q1FVRnBRMEVzUlVGQlRXbERMRmNzWlVOUGFFUjJUQ3hGUVVGUFF5eFJRVE5SVUN4VFFVRmxNRW9zUjBGeFJHUXNVMEZCVXpaQ0xFVkJRVms1UXl4SFFVTndRaXhKUVVGSkswTXNSVUZGUVVNc1JVRkRRVU1zUlVGR1FVTXNSVUZCYVVJc1MwRkpja0lzVTBGQlUxUXNTMEZCVXpORExFZEJSV3BDTEVsQlFVc3lReXhGUVVGTlZTeFJRVU5XTEU5QlIwUXNUVUZCVFVNc1JVRkJUMWdzUlVGSFVGa3NSVUZCVDBNc1QwRkJUeXhKUVVGSlF5eE5RVU5zUW5oTkxFVkJRVXR6VFN4SFFVRlJUaXhIUVVGWlRTeEhRVU12UWtRc1JVRkJTMnhFTEV0QlFVOXVTaXhGUVVOYWNVMHNSVUZCUzBrc1MwRkJUMVFzUlVGRFdrc3NSVUZCUzBNc1MwRkJUMEVzUlVGRFdrNHNSVUZCVjAwc1JVRkZXSFpFTEVWQlFVc3NSMEZCUzJkRUxFVkJRVmxYTEU5QlFVOHpSQ3hGUVVGTExFbEJSVmdzYVVKQlFWcEJMRVZCUVVzc1NVRkZaa0VzUlVGQlN6UkVMRkZCUVZFc1RVRkpaQ3hKUVVGSmFrZ3NSVUZCVVN4RlFVTmFjVVFzUlVGQlN5eEhRVUZMUVN4RlFVRkxMRWRCUVVkUkxGRkJRVkVzYVVKQlFXbENMRU5CUVVONFNTeEZRVUZQTmt3c1MwRkZiRVFzUjBGQll5eFBRVUZXTjB3c1JVRkRTQ3hOUVVGUExFbEJSVkl5UlN4SlFVTkJMRTFCUVUxdFNDeEZRVUZaWkN4RlFVRlpTaXhYUVVGWGFVSXNSMEZEZWtNc1IwRkJlVUlzYlVKQlFXUkRMRVZCUVRCQ0xFTkJRM0JETEUxQlFVMXdUU3hGUVVGTmMwa3NSVUZCUzNKRUxFZEJRMnBDTTBVc1JVRkJVVGhNTEVWQlFWVkRMRXRCUVV0VUxFVkJRVTAxVEN4SFFVYzNRbk5KTEVWQlFVdHVSQ3hQUVVGUFJpeEZRVUZQTEVkQlEyNUNRU3hKUVVWRUxFOUJRVTh6UlN4TFFVbFNaMHdzUlVGQldXcEVMRmRCUVZkblJTeExRVUZMVkN4RlFVRk5kRVFzU1VGRmNFSnpSQ3hGUVVGTFdpeExRVUZQVFN4RlFVRlpUaXhMUVVOb1F6TkpMRTFCUVUxMVNpeEZRVUZOZEVRc1IwRnBRMjVDTEU5Qk9VSkJNa01zUlVGQlRYcERMRlZCUVZsQkxFVkJRMnhDZVVNc1JVRkJUVEZETEZWQlFWa3JReXhGUVVGWkwwTXNXVUZET1VJd1F5eEZRVUZOY2tNc1RVRkJVVEJETEVWQlFWbG5RaXhaUVVGWk9VUXNSMEZEZEVONVF5eEZRVUZOYzBJc1QwRkJVMEVzUlVGRFpuUkNMRVZCUVUxTUxGRkJRVlZWTEVWQlFWbFdMRkZCUlRWQ2RFb3NUMEZCVDBNc1pVRkJaVEJLTEVWQlFVOHNWVUZCVnl4RFFVTjJRM3BLTEZsQlFWa3NSVUZEV2tNc1kwRkJZeXhGUVVOa0swc3NTVUZCU3l4SlFVTnRRaXhQUVVGdVFtUXNSVUZEU1VFc1IwRkZTa1lzU1VGQmIwSkdMRVZCUVZsMFF5eGhRVU51UTNkRExFVkJRV3RDUml4RlFVRlpkRU1zVjBGRE9VSjVReXhGUVVGbFNDeEZRVUZaU3l4UlFVRlJia1FzU1VGSE4wSnBSQ3hIUVVWU1owSXNTVUZCUzNKQ0xFbEJRMHBOTEVWQlFXbENUaXhMUVV0aExHMUNRVUZ5UWtVc1JVRkJXVzlDTEUxQlEzUkNjRUlzUlVGQldXOUNMRXRCUVV0NlFpeEhRVWRZUVN4RlFVZFNMRk5CUVZOelFpeEZRVUZQTDBRc1JVRkJWMjFGTEVkQlF6RkNMRTFCUVUxRExFVkJRVmQwUWl4RlFVRlpka1lzUzBGQlMzbERMR2RDUVVGclF5eEpRVUZrYlVVc1JVRkJORUlzU1VGQlRVRXNSMEZCWVc1RkxFZEJSWEpITEU5QlJFRnZSU3hGUVVGVE5VSXNTVUZCVFdwR0xFdEJRVXRwUml4SlFVTmlORUlzUlVGNVJsSXNVMEZCVTBNc1JVRkJXVU1zUjBGRGNFSXNUMEZCVDBFc1JVRkJUM3BLTEZkQlExcERMRlZCUVZVc1JVRkJSM2RLTEVWQlFVOTZTaXhYUVVGWGJFUXNUMEZCVXl4SFFVTjRRekpKTEZGQlFWRXNWVUZCVnl4TFFUSkNkRUlzVDBGMlVVRjNReXhGUVVGWlRDeE5RVUZSU3l4RlFVTndRa0VzUlVGQldYbENMRkZCUVZWNlFpeEZRVU4wUWtFc1JVRkJXVmNzVDBGdlVGb3NVMEZCWjBKcVRTeEhRVU5tTEU5QlFVbEJMR0ZCUVdWbExFMUJRMWhtTEVWQlFVbG5UaXhQUVVGVGFFNHNSVUZCU1hGTUxGRkJSV3hDY2t3c1IwRjJVRkp6VEN4RlFVRlpNa0lzVVVGM1RGb3NWMEZEUXl4TlFVRk5ha1VzUlVGQllTeEpRVU5tYzBNc1JVRkJXVFJDTEUxQlFVMHZSU3hKUVVGSk1FVXNUVUZEZEVKMlFpeEZRVUZaTmtJc1RVRkJUV2hHTEVsQlFVa3dSU3hIUVVGaE1VVXNTMEZCU1Vzc1IwRkJZU3hKUVVGTlFTeExRVU0xUkdoR0xFdEJRVXNzUzBGRlVDeFBRVVJCT0Vnc1JVRkJXVGhDTEU5QlFVOHNTVUZEV25CRkxFZEJOMHhTYzBNc1JVRkJXVGhDTEU5QmMwcGFMRk5CUVdkQ2NFVXNSMEZQWml4SlFVRkplRWNzUlVGT1NqaEpMRVZCUVZsMlF5eExRVUZMUXl4SFFVTnFRbk5ETEVWQlFWbDBReXhYUVVGaFFTeEZRVVY2UW5ORExFVkJRVmswUWl4TlFVRlJMRWRCUTNCQ05VSXNSVUZCV1RaQ0xFMUJRVkVzUjBGSGNFSXNUVUZCVFRWS0xFZEJRU3RDTEdsQ1FVRm1lVVlzUlVGQk1FSkJMRVZCUVdFc1NVRkJTWHBHTEUxQlFVMHNWVUZEYWtVNFNpeEZRVUZOT1Vvc1JVRkJUWEJFTEU5QlJXeENMRWxCUVV0eFF5eEZRVUZKTEVWQlFVZEJMRVZCUVVrMlN5eEZRVUZMTjBzc1NVRkRabVVzUlVGQlRXWXNTMEZQVnl4UFFVWjBRbmRITEVWQlFXRjZSaXhGUVVGTlppeEhRVUZIYzBjc1VVRkJVU3hOUVVGUExGRkJSWFJDTEVkQlEyUjNReXhGUVVGWk5rSXNUVUZCVFM5TExFdEJRVXNzU1VGQlNXOUpMRTlCUVU4c1NVRkJUWGhDTEVWQlFWZDVSU3hQUVVGUExFZEJRVXNzVFVGRkwwUnVReXhGUVVGWk5FSXNUVUZCVFRsTExFdEJRVXNzU1VGQlNXOUpMRTlCUVU4c1NVRkJUWGhDTEVWQlFXRXNVVUV6UzNoRWMwTXNSVUZCV1Vzc1VVRnpUVm9zVTBGQmFVSnFUU3hIUVVOb1FpeEhRVUU0UWl4TlFVRXhRa0VzUlVGQlMwRXNSVUZCUzFNc1QwRkJVeXhIUVVOMFFpeFBRVUZQTEVWQlIxSXNTVUZCU1hGRExFVkJRMEUyU3l4RlFVVktMRWxCUVVzM1N5eEZRVUZKTEVWQlFVYzJTeXhGUVVGTkwwSXNSVUZCV1RaQ0xFMUJRVTFvVGl4UFFVRlJjVU1zUlVGQlNUWkxMRVZCUVVzM1N5eEpRVU53UkN4SFFVRkpPRWtzUlVGQldUWkNMRTFCUVUwelN5eEhRVUZIT0Vzc1MwRkJTelZPTEVkQlF6ZENMRTlCUVU4c1JVRkpWQ3hKUVVGTE9FTXNSVUZCU1N4RlFVRkhOa3NzUlVGQlRTOUNMRVZCUVZrMFFpeE5RVUZOTDAwc1QwRkJVWEZETEVWQlFVazJTeXhGUVVGTE4wc3NTVUZEY0VRc1IwRkJTVGhKTEVWQlFWazBRaXhOUVVGTk1Vc3NSMEZCUnpoTExFdEJRVXMxVGl4SFFVTTNRaXhQUVVGUExFVkJTVlFzVDBGQlR5eEhRWHBPVWpSTUxFVkJRVmszUXl4VFFVRlhMRVZCUVZFc1RVRkRMMEkyUXl4RlFVRlpWaXhSUVRCUVdpeFhRVU5EVkN4UlFVRlJWeXhMUVVGTExEQkpRWHBRWkhoS0xFOUJRVTlSTEV0QlFVc3lTQ3hIUVVGTE9VY3NVMEZCVVhaQ0xFbEJRM2hDYTBzc1JVRkJXV3hMTEVkQlFVOXhTU3hGUVVGSmNra3NUVUZQZUVKclN5eEZRVUZaTkVJc1RVRkJVU3hIUVVOd1FqVkNMRVZCUVZrMlFpeE5RVUZSTEVkQlQzQkNOMElzUlVGQldVb3NWMEZCWVN4SFFXdENla0pKTEVWQlFWbG5RaXhaUVZaYUxGTkJRWEZDT1VRc1IwRkRjRUlzU1VGQlNTdEZMRVZCUVU4c1JVRkZXQ3hKUVVGTExFbEJRVWt2U3l4RlFVRkpMRVZCUVVkQkxFVkJRVWxuUnl4RlFVRlZja2tzVDBGQlVYRkRMRWxCUTNKREswc3NSMEZCVTBFc1IwRkJVU3hIUVVGTFFTeEZRVUZSTDBVc1JVRkJWV2RHTEZkQlFWZG9UQ3hIUVVOdVJDdExMRWRCUVZFc1JVRkhWQ3hQUVVGUGFrTXNSVUZCV1ZBc1QwRkJUMjVNTEV0QlFVdHBRaXhKUVVGSk1FMHNSMEZCVVdwRExFVkJRVmxRTEU5QlFVODFTeXhUUVRST0wwUnRUQ3hGUVVGWk9FSXNUMEZCVHpsQ0xFVkJRVmxxUXl4UlFVVjRRbWxETEVrc2MwdERPVkZTTEcxQ1FVZEJMR0ZCUTBFc1dVRkRRU3hoUVVWQkxHRkJRMEVzWVVGRFFTeGhRVU5CTEdGQlIwRXNZVUZMUVN4TlFVRnhRbTlETEVWQllXNUNReXhaUVVGWlF5eEhRVlphTEV0QlFVRkRMRTlCUVhORExFZEJRM1JETEV0QlFVRkRMRWxCUVc5RExFZEJRM0JETEV0QlFVRkRMRkZCUVRCRExFZEJRekZETEV0QlFVRkRMR2RDUVVGclJDeEhRVkZvUkdwSkxFdEJRVXRyU1N4SlFVRk5iRWtzUzBGQlMydEpMRWxCUVVsRExFdEJRVXR1U1N4TlFVTjZRa0VzUzBGQlMyOUpMRXRCUVU5d1NTeExRVUZMYjBrc1MwRkJTMFFzUzBGQlMyNUpMRTFCUXpOQ1FTeExRVUZMY1Vrc1RVRkJVWEpKTEV0QlFVdHhTU3hOUVVGTlJpeExRVUZMYmtrc1RVRkROMEpCTEV0QlFVdHpTU3hQUVVGVGRFa3NTMEZCUzNOSkxFOUJRVTlJTEV0QlFVdHVTU3hOUVVNdlFrRXNTMEZCUzNWSkxFbEJRVTEyU1N4TFFVRkxkVWtzU1VGQlNVb3NTMEZCUzI1SkxFMUJRM3BDUVN4TFFVRkxkMGtzWjBKQlFXdENlRWtzUzBGQlMzZEpMR2RDUVVGblFrd3NTMEZCUzI1SkxFMUJRMnBFUVN4TFFVRkxlVWtzYVVKQlFXMUNla2tzUzBGQlMzbEpMR2xDUVVGcFFrNHNTMEZCUzI1SkxFMUJRMjVFUVN4TFFVRkxha0lzVlVGQldXbENMRXRCUVV0cVFpeFZRVUZWYjBvc1MwRkJTMjVKTEUxQlEzSkRRU3hMUVVGTE1Fa3NXVUZCWXpGSkxFdEJRVXN3U1N4WlFVRlpVQ3hMUVVGTGJra3NUVUZEZWtOQkxFdEJRVXN5U1N4SFFVRkxNMGtzUzBGQlN6SkpMRWRCUVVkU0xFdEJRVXR1U1N4TlFVTjJRa0VzUzBGQlN6UkpMRWxCUVUwMVNTeExRVUZMTkVrc1NVRkJTVlFzUzBGQlMyNUpMRTFCUlhwQ1FTeExRVUZMTmtnc1ZVRkJXVUVzUlVGRGFrSTNTQ3hMUVVGTE5rZ3NWVUZCVldkQ0xGbEJRVmtzYVVKQlFXdENMRU5CUVVWRExFOUJRVkVzVlVGQlUwTXNXVUZ3UW14RkxHOUNRVU5GTEU5QlFVOHNWVUZCUzNKR0xFMUJRVkVzVlVGQlQzTkdMR0ZCUVdVc1ZVRkJTM1JHTEUxQlFWRXNWVUZCVDNWR0xGVkJRVmtzVlVGQlQwTXNiVUpCUVhGQ0xGVkJRVTlETEd0Q1FVVXZSeXh2UWtGRFJTeE5RVUZQTEVOQlFVVkRMRlZCUVZVc1IwRnZRbVJzUWl4SlFVRkpiVUlzUjBGRFZDeFRRVUZKY2tvc1MwRkJTemhJTEU5QlFVOTFRaXhMUVVGUGNrb3NTMEZCU3l0SUxFbEJRVWt2U0N4TFFVRkxjVW9zVFVGRGJrTnlTaXhMUVVGTGNVb3NSMEZCUzBFc1JVRkRTQ3hKUVV0S1pDeEpRVUZKWlN4RlFVRm5Ra01zUjBGRGVrSXNUMEZCU1haS0xFdEJRVXR6U2l4SlFVRnRReXh0UWtGQmFrSjBTaXhMUVVGTGMwb3NTVUZET1VKMFNpeExRVUZMYzBvc1IwRkJVVU1zU1VGRFRpeE5RVVZNZGtvc1MwRkJTMmRKTEZGQlFWRnpRaXhKUVVFeVF5eHRRa0ZCZWtKMFNpeExRVUZMWjBrc1VVRkJVWE5DTEV0QlF6bERkRW9zUzBGQlMyZEpMRkZCUVZGelFpeEhRVUZSUXl4SFFVTmtMRWxCVFVwRExHZENRVUZuUWtNc1IwRkRja0lzVFVGUFRVTXNSVUZRYlVJc1EwRkJRME1zUjBGRGFFSkRMRWxCUTA0c1RVRkJUVU1zUlVGQlkwWXNSVUZCWVVNc1IwRkRha00xU2l4TFFVRkxPRWdzVDBGQlR6bElMRXRCUVV0eFNpeExRVUZQY2tvc1MwRkJTemhJTEU5QlFVODVTQ3hMUVVGTGNVb3NTVUZCU1doTExGTkJRVk4zU3l4SlFVbHdRME1zUTBGQmFVSXNWMEZEZGtNNVNpeExRVUZMTWtrc1IwRkJSMk1zUlVGQlNVTXNSMEZIVUdwQ0xHbENRVUZwUW1kQ0xFZEJRM1JDZWtvc1MwRkJTelJKTEVsQlFVbGhMRWRCUjBoTkxGbEJRVmxETEVkQlEyeENMRWxCUVVsVUxFVkJRVk1zUjBGUFlpeFBRVTVCYUU4c1QwRkJUMUVzUzBGQlMybFBMRWRCUVZsd1RpeFRRVUZUZGtJc1NVRkRMMElzUjBGQldTeFBRVUZTUVN4RlFVRmpMRTlCUTJ4Q0xFZEJRVmtzYVVKQlFWSkJMRVZCUVhkQ0xFOUJRelZDTEUxQlFVMURMRVZCUVZFd1R5eEZRVUZYTTA4c1IwRkRla0pyVHl4SFFVRlZMRWRCUVVkc1R5eExRVUZQTkU4c2JVSkJRVzFDTTA4c1UwRkZiRU5wVHl4RlFVRlBlRWNzVVVGQlVTeExRVUZOTEVsQlIzUkNjVVlzUzBGQlN6UkNMRWRCUTFnc1NVRkJTMmhMTEV0QlFVdHJTU3hKUVVGSk9FSXNSVUZCVjFnc1NVRkJTeXhEUVVVMVFuSktMRXRCUVV0eFNpeEhRVUZMVnl4RlFVRlhXQ3hIUVVkeVFuSktMRXRCUVVzNFNDeFBRVUZQT1Vnc1MwRkJTM0ZLTEV0QlFVMHNaVUZEZGtKeVNpeExRVUZMT0Vnc1QwRkJUemxJTEV0QlFVdHhTaXhKUVVGSmRFc3NWVUZCVldsQ0xFdEJRVXRxUWl4WFFVVndReXhOUVVGTmJVd3NSVUZCVnl4SlFVRkpMRlZCUVZOR0xFZEJSVGxDYUVzc1MwRkJTemhJTEU5QlFVODVTQ3hMUVVGTGNVb3NTVUZCU1doTExGTkJRVk1zU1VGQlN6WkxMRVZCUVZVdlVDeExRVUZOTEhOQ1FVZHVSQ3hOUVVGTloxRXNSVUZCVjI1TExFdEJRVXNyU2l4WlFVRlpReXhIUVVNMVFra3NSVUZCVnl4SFFVRkhMRlZCUVZORExHMUNRVUZ0UWpGRExFVkJRVWN5UXl4VlFVRlZMRlZCUVU5RExFMUJRVTFETEdGQlFXRk1MRWxCUTNaR2Jrc3NTMEZCU3l0SUxFbEJRVWt2U0N4TFFVRkxjVW9zUzBGQlRTeGhRVUZIWlN4RlFVRlZla01zUlVGQlJ6aERMRkZCUTNCRGVrc3NTMEZCU3l0SUxFbEJRVWt2U0N4TFFVRkxjVW9zU1VGQlNWWXNSMEZCUnl4VlFVRlhNMGtzUzBGQlMzRkpMRTlCUlhKRGNra3NTMEZCUzNkS0xHZENRVUZuUWxFc1JVRkJWMUFzU1VGRGFFTjZTaXhMUVVGTE1Fc3NaVUZEVERGTExFdEJRVXQzU1N4dFFrRkpSRVlzVDBGQlR6QkNMRWRCUTJJMVJpeFJRVUZSWVN4SlFVRkpMRzFDUVVOYUxFMUJRVTF2UlN4RlFVRkxWeXhIUVVGalFTeEZRVUZYV0N4SFFVRkxWeXhGUVVGWFdDeEhRVUZMY2tvc1MwRkJTM0ZLTEVkQlF6bEVMRkZCUVVseVNpeExRVUZMSzBnc1NVRkJTWE5DTEV0QlExaHlTaXhMUVVGTEswZ3NTVUZCU1hOQ0xFZEJRV2RDTEc5Q1FVTnNRbkpLTEV0QlFVc3JTQ3hKUVVGSmMwSXNWVUZEVkhKS0xFdEJRVXM0U0N4UFFVRlBkVUlzUjBGRFpqbE9MRTlCUVU5UkxFdEJRVXRwUlN4TFFVRkxLMGdzUzBGQlN6Tk9MRTlCUVZNc1NVRkRha00wUml4TFFVRkxjVW9zUjBGQlN6bE9MRTlCUVU5UkxFdEJRVXRwUlN4TFFVRkxLMGdzUzBGQlN5eExRVVV6UWl4SFFVdElUU3hSUVVOT2Nra3NTMEZCU3paSUxGVkJRVlZuUWl4WlFVRlpMRkZCUVZNc1EwRkJSVkVzUjBGQlNYSktMRXRCUVV0eFNpeEhRVUZKVUN4UFFVRlJMRlZCUVZORExGbEJSemxFTWtJc1pVRkRUaXhOUVVGTlF5eEZRVUZWTEZWQlExWkRMRVZCUVdGeVVDeFBRVUZQVVN4TFFVRkxORThzUjBGRGVrSkZMRVZCUVdWRUxFVkJRVmQ0VVN4UFFVTXhRakJSTEVWQlFXRXNRMEZCUTBNc1JVRkJXVU1zU1VGRGRrSXNRMEZCUTBNc1JVRkJaWFpDTEVWQlFWY3NXVUZEYUVNc1RVRkJUWGRDTEVWQlFXRnNUQ3hMUVVGTE9FZ3NUMEZCVHpsSUxFdEJRVXR4U2l4SlFVRkpka3NzVjBGRGJFTnhUU3hGUVVGblFpeFZRVUZUUXl4blFrRkJaMEpNTEVWQlFWbEhMRVZCUVZsRUxFZEJRMnBGU1N4RlFVRmxMRlZCUVZORExITkNRVUZ6UWxBc1JVRkJXVVVzU1VGRE1VUXNZVUZCUlUwc1JVRkJXU3haUVVGRk1VSXNSMEZCWjBKdFFpeEZRVUZsUlN4RlFVRlpReXhGUVVGbFJTeEhRVWxvUml4UFFVaEJja3dzUzBGQlMybEpMR2RDUVVGblFuTkVMRVZCUVdGd1VpeE5RVUZSZFZBc1JVRkZNVU14U2l4TFFVRkxLMGdzU1VGQlNTOUlMRXRCUVV0eFNpeEpRVUZKYlVNc1MwRkJTMFFzUlVGQllYQlNMRXRCUVUxdlVpeEhRVU51UTNaTUxFdEJRVXM0U0N4UFFVRlBPVWdzUzBGQlMzRktMRWxCUVVsb1N5eFRRVUZUZDBzc1NVRkpla01zU1VGQlN5eEpRVUZKTkVJc1JVRkJaMElzUlVGQlIwRXNSVUZCWjBKYUxFVkJRV05aTEVsQlFXbENMRU5CUTNwRkxFMUJRVTFXTEVWQlFXRklMRVZCUVZkaExFZEJRM2hDUXl4RlFVRnJRbGdzUlVGQlYyaEpMRkZCUVZFc1ZVRkJVelJKTEhOQ1FVRjFRaXhKUVVOeVJWZ3NSVUZCYVVKTUxFVkJRVkZKTEVkQlF5OUNMMHNzUzBGQlMyZEpMRkZCUVZFd1JDeEhRVUZ0UWxvc1JVRkJWME1zUlVGQldVTXNTVUZKYmtSNFF5eHJRa0ZEVGl4TlFVMU5hMElzUlVGT1lTeERRVUZEY0Vzc1IwRkRWbk5MTEVsQlEwNHNUVUZCVFVNc1JVRkJZM1pMTEVWQlFVOXpTeXhIUVVNelFqVktMRXRCUVVzNFNDeFBRVUZQT1Vnc1MwRkJTM0ZLTEVsQlFVbG9TeXhUUVVGVGQwc3NTVUZIV2l0Q0xFTkJRVmNzVjBGRGFrTTFUQ3hMUVVGTE1ra3NSMEZCUnl4VlFVRlRhMFFzWVVGQlkyNURMRWRCUjNwQ1ppeEhRVUZIYlVRc1JVRkJUM0JETEVWQlFWY3NWVUZEZGtJeFNpeExRVUZMY1Vvc1MwRkJUM0pLTEV0QlFVc3JTQ3hKUVVGSkwwZ3NTMEZCUzNGS0xFbEJRVWt3UXl4WFFVRlhMRWxCUVVsRUxFMUJReTlET1V3c1MwRkJTeXRJTEVsQlFVa3ZTQ3hMUVVGTGNVb3NTVUZCU1ZZc1IwRkJSMjFFTEVWQlFVOXdReXhIUVVsNFFtUXNTVUZCU1c5RUxFZEJSVTVvVFN4TFFVRkxLMGdzU1VGQlNTOUlMRXRCUVV0eFNpeExRVUZQY2tvc1MwRkJTeXRJTEVsQlFVa3ZTQ3hMUVVGTGNVb3NTVUZCU1RCRExGZEJRVmNzU1VGQlNVTXNUVUZEZUVSb1RTeExRVUZMSzBnc1NVRkJTUzlJTEV0QlFVdHhTaXhKUVVGSlZDeEpRVUZKYjBRc1IwRkpiRUpxVGl4VlFVRlZNa0lzUjBGRGFFSXNUVUZCVFhkS0xFVkJRVmRzU3l4TFFVRkxPRWdzVDBGQlR6bElMRXRCUVV0eFNpeEpRVUZKZGtzc1YwRkRhRU5uU3l4RlFVRlRMRlZCUVZOdFJDeDVRa0ZCZVVKcVRTeExRVUZMY1Vvc1IwRkJTV0VzUlVGQlUyZERMRWxCUVVsRExGVkJRM1pGYmswc1MwRkJTekJKTEZsQlFWbDNRaXhGUVVGVFowTXNTVUZCU1VNc1UwRkJWV3BETEVkQlEzaERiRXNzUzBGQlN6WklMRlZCUVZWblFpeFpRVUZaY1VJc1JVRkJVMmRETEVsQlFVbERMRk5CUVZVc1NVRkJTMnBETEVWQlFWVndRaXhQUVVGQlFTeEpRVWN6UkVvc1dVRkJXVmtzUlVGQlVWa3NSMEZETVVJc1RVRkJUU3hYUVVGRmEwTXNSVUZCVlN4WFFVRkZja0lzUjBGQlpTeFZRVUZUYzBJc2NVSkJRWEZDTDBNc1IwRkRha1VzUjBGQlNYbENMRWxCUVdVc1ZVRkJVM1ZDTEhkQ1FVTjBRa1lzU1VGQlpTeFZRVUZUUnl4M1FrRkRkRUoyVFN4TFFVRkxhVWtzWjBKQlFXZENPRU1zUjBGQllTeERRVU53UXl4TlFVRk5MRTFCUVVWNVFpeEZRVUZMTEU5QlFVVkRMRVZCUVUwc1MwRkJSVU1zUjBGQlUzaERMRVZCUTJoRGJFc3NTMEZCUzJsSkxHZENRVUZuUWpoRExFZEJRVmxpTEVWQlFWVXNRMEZCUlhORExFMUJRVUZCTEVWQlFVOURMRTlCUVVGQkxFVkJRVkZGTEVsQlFVdEVMRVZCUVV0RExFMUJTelZGTEVkQlFVbFFMRWxCUVdVc1ZVRkJVMUVzTmtKQlEzUkNOVTBzUzBGQlMybEpMR2RDUVVGblFpeFZRVUZUY1VVc2QwSkJRWGxDTEVOQlEzcEVMRTFCUVUwc1RVRkJSVVVzUlVGQlN5eFBRVUZGUXl4RlFVRk5MRXRCUVVWRExFZEJRVk40UXl4RlFVTm9RMnhMTEV0QlFVdHBTU3huUWtGQlowSXNWVUZCVTNGRkxIZENRVUYzUW5aQ0xFVkJRVmtzUTBGQlJYbENMRTFCUVVGQkxFVkJRVTlETEU5QlFVRkJMRVZCUVZGRkxFbEJRVXRFTEVWQlFVdERMRkZCYWsxeVJ5eGhMSFZMUTJ4Q1FTeHRRa0ZIVFVVc1JVRkJWeXhKUVVacVFpeFhRVVZ4UWl4VFFVTnlRaXhKUVVGSmJFTXNSVUZCVlN4SFFVVmtjRkFzVDBGQlQxRXNTMEZCU3l4VlFVRlRjVWNzUzBGQlMzaEdMRk5CUVZOM1RpeEpRVU5xUXl4TlFVRk5hbEVzUlVGQlR5eEhRVUZITEZWQlFWTjNVaXgzUWtGQmQwSjJRaXhKUVVOcVJFOHNSVUZCVVhoUkxFZEJRVkVzUTBGQlF5dFJMRVZCUVZsTExFVkJRV014UWl4SlFVTnlRMmxFTEVWQlFXZENka0lzUlVGQllYQlNMRTFCUTNoQ01sTXNSVUZCWjBKMlFpeEZRVUZoY0ZJc1RVRkJUU3RSTEVWQlFWbExMRVZCUVdNeFFpeEhRVVV2UkN4RFFVRkZNRUlzWVVGQlFVRXNSVUZCWXpGQ0xGbEJRVUZCTEUxQlNUTkNMRTFCUVUxcFJDeEZRVUZyUWl4RFFVTjBRa01zUzBGQlRTeERRVUZETjBJc1JVRkJXVXNzUlVGQll6RkNMRXRCUXk5Q0xFMUJRVTBzU1VGQlJYRkRMRWRCUVZGWUxFVkJjVU5vUWl4UFFXNURTVmNzUlVGQlNXTXNXVUZGUm1Rc1JVRkJTV1VzV1VGRFRqRkNMRVZCUVdGWExFbEJRVWxuUWl4cFFrRkJiVUowU2l4UFFVRlBkVW9zVjBGQlYwWXNXVUZGZEVReFFpeEZRVUZoVnl4SlFVRkpaMElzYVVKQlFXMUNMRWRCU1hoRE0wSXNSVUZCWVd0Q0xFOUJRVTlKTEZOQlFWY3NSMEZGTTBKWUxFVkJRVWxyUWl4aFFVTk9OMUlzVDBGQlQxRXNTMEZCU3poUkxFVkJRVk5STEZWQlFWVjZVU3hUUVVGVE1GRXNTVUZEZEVNc1IwRkJTVlFzUlVGQlUxRXNVMEZCVTBNc1NVRkJaWEJETEVWQlFWZDFRaXhQUVVGUFNTeFRRVUZUVXl4SFFVRmhMRU5CUXpORkxFMUJRVTFETEVWQlFWVldMRVZCUVZOUkxGTkJRVk5ETEVkQlFWbHdRaXhGUVVGSmEwSXNZMEZGT1VOSExFZEJRMFpCTEVWQlFWRXpVU3hUUVVGVGFVWXNTVUZEWml4TlFVRk5Na3dzUlVGQlUycFRMRTlCUVU5UkxFdEJRVXM0Uml4SFFVRkhMRWRCUTNoQ05Fd3NSVUZCV1Zvc1JVRkJVMkVzVjBGQlYwWXNSMEZGYWtOcVF5eEZRVUZoYTBJc1QwRkJUMGtzVTBGQlUxTXNTMEZCWVM5Q0xFVkJRV0ZyUWl4UFFVRlBTU3hUUVVGVFV5eEhRVUZqTEVsQlEzSkdMMElzUlVGQllXdENMRTlCUVU5SkxGTkJRVk5UTEVkQlFWbEhMRXRCUVZsc1F5eEZRVUZoYTBJc1QwRkJUMGtzVTBGQlUxTXNSMEZCV1Vjc1IwRkJZU3hIUVVWb1NHeERMRVZCUVdGclFpeFBRVUZQU1N4VFFVRlRVeXhIUVVGWlJ5eEhRVUZoTlV3c1JVRkJSVEpNTEZkQlRXaEZNMFFzUlVGQldYRkRMRWxCUVUwc1NVRkJTMEVzUjBGRGRrSnlReXhGUVVGWmNVTXNTVUZCU1d0Q0xHRkJRV1VzUlVGREwwSTNRaXhGUVVGaFZ5eEpRVUZKYTBJc1lVRkJaU3hIUVVjelFpeERRVUZGTjBJc1lVRkJRVUVzUlVGQll6RkNMRmxCUVVGQkxFdEJTVE5DTEZWQlFXVmpMRWNzZFV0RE0wUm1MRzFDUVVWQkxGVkJRV2RDWml4SlFVTmtMRTFCUVUxNlVDeEZRVUZQTEVkQlFVY3NWVUZCVTNkVUxEQkNRVUV3UWk5RUxFVkJRVk42VUN4UFFVTTFSQ3hOUVVGUExFbEJRVXQ1VUN4RlFVRlZlbEFzUzBGQlFVRXNTeXgxUzBOS2VFSXNiVUpCUlVFc1ZVRkJaMEo1VUN4SlFVTmtMRTFCUVUxNlVDeEZRVUZQTEVkQlFVY3NWVUZCVTNsVUxIRkNRVUZ4UW1oRkxFVkJRVk42VUN4UFFVTjJSQ3hOUVVGUExFbEJRVXQ1VUN4RlFVRlZlbEFzUzBGQlFVRXNTeXgxUzBOS2VFSXNiVUpCUlVFc1lVRTJRMEVzVTBGQlV6QlVMRVZCUVc5Q2JrNHNSVUZCVDI5T0xFZEJRMnhETEUxQlFVMHNTVUZCUlRWQ0xFZEJRVkY0VEN4SFFVTldMRmRCUVVWeFRpeEhRVUZsTEZWQlEzWkNMRWRCUVVrM1FpeEZRVUZKT0VJc1UwRkJWU3hEUVVOb1FpeE5RVUZOTEZkQlFVVkRMRVZCUVZVc1dVRkJSVU1zUjBGQlowSjRUaXhGUVV0MFF5eE5RVUZQTEVOQlFVVkJMRTFCUVVGQkxFVkJRVTl2VGl4TlFVRkJRU3hIUVVkc1FpeFRRVUZUU3l4RlFVRjNRamRQTEVkQlF5OUNMRTFCUVUwc1NVRkJSVFJOTEVWQlFVY3NUMEZCUlU4c1JVRkJVVEpDTEdOQlFXVkRMRWRCUVhGQ0wwOHNSMEZEYmtRc1YwRkJSWGxQTEVkQlFXVXNWVUZGZGtJc1IwRkJTVGRDTEVWQlFVbGpMRlZCUVZjc1EwRkRha0lzVFVGQlRYTkNMRVZCUVhsQ1JDeEhRVUZ2UWtFc1JVRkJhVUpxVlN4UFFVRlRhVlVzUlVGQmFVSnFWU3hQUVVGVExFVkJRM1pITEVsQlFVbHRWU3hGUVVFd1FpeEhRVU14UWtnc1JVRkJaMElzUjBGRmNFSXNTVUZCU3l4SlFVRkpNMUlzUlVGQlNTeEZRVUZIUVN4RlFVRkpObElzUlVGQmQwSTNVaXhKUVVOR0xFbEJRWEJETkZJc1JVRkJhVUkxVWl4SFFVRkhkMUVzV1VGRGRFSnpRaXhGUVVGM1FteFRMRXRCUVV0blV5eEZRVUZwUWpWU0xFbEJSVGxETWxJc1JVRkJZeTlTTEV0QlFVdG5VeXhGUVVGcFFqVlNMRWxCU1hoRE5rTXNSVUZCVHpoUExHTkJRV2RDUnl4RlFVbDZRaXhQUVVGUGFsQXNSVUV4UlZRc1ZVRkJaU3hEUVVOaUxHZERRVUZwUTNWUExFVkJRMnBETERoQ1FVRXJRa0VzUlVGREwwSXNhVU5CUVd0RExFTkJRVU51VGl4RlFVRlBiMDRzUzBGRmFrTXNRMEZCUlhCT0xFMUJRVUZCTEVWQlFVOXZUaXhOUVVGQlFTeEpRVVZzUWl4dFEwRkJiME1zUTBGQlEzQk9MRVZCUVU5dlRpeExRVU14UXl4TlFVRk5MRWxCUVVVMVFpeEhRVUZSZUV3c1IwRkRWaXhQUVVGRk9FNHNSMEZCVjNSRExFZEJRMklzVjBGQlJUWkNMRWRCUVdVc1ZVRkhka0lzVDBGR1owSTNRaXhGUVVGSmRVTXNhVUpCUVcxQ0xGVkJRVWxETEc5Q1FVRnpRbGdzUlVGQlYxa3NWMEZCWVZvc1JVRkJWMkVzVlVGRk4wWXNRMEZCUld4UExFMUJRVUZCTEVWQlFVOXZUaXhOUVVGQlFTeEpRVWRzUWl4alFVRnBRaXhEUVVGRGNFNHNSVUZCVDI5T0xFdEJRM1pDTEUxQlFVMHNUMEZCUlZVc1IwRkJWemxPTEVWQlFVMTNUQ3hKUVVWNlFpeE5RVUZQTEVOQlFVVjRUQ3hOUVVGQlFTeEZRVUZQYjA0c1RVRkJRVUVzU1VGRmJFSXNhMEpCUVhGQ0xFTkJRVU53VGl4RlFVRlBiMDRzUzBGRGNFSXNRMEZCUlhCT0xFMUJRVUZCTEVWQlFVOXZUaXhOUVVGQlFTeEpRVVZzUW1Vc1owSkJUMFlzVTBGQmVVSnVUeXhGUVVGUGIwNHNSMEZET1VJc1RVRkJUU3hKUVVGRk5VSXNSMEZCVVhoTUxFVkJRMmhDTEU5QlFVbDNUQ3hGUVVGSll5eFZRVVZETEVOQlFVVjBUU3hOUVVSVVFTeEZRVUZSZVU0c1JVRkJkMEo2VGl4SFFVTm9RbTlPTEUxQlFVRkJMRWRCUlZSRUxFVkJRVzlDYms0c1JVRkJUMjlPTEVsQlduQkRSQ3h2UWtGQlFVRXNSVUZEUVUwc2QwSkJRVUZCTEVrc2MwdERhRU5HTEcxQ1FVVkJMR0ZCUTBFc1lVRkRRU3hoUVVOQkxHRkJRMEVzV1VGRlFTeFZRVUZsTEVOQlEySlhMR0ZCUVdVNVRTeEhRVUZYYkVNc1IwRkJWVklzU1VGRGJFTXNUVUZCVFc5Q0xFVkJRVkZ6UWl4RlFVRk5iRVFzVjBGRGFFSlJMRWxCUTBaQkxFVkJRVTgwVFN4SlFVRk5OVTBzUlVGQlR6Uk5MRWxCUVUwc1NVRkJTM2hNTEVWQlFVMTNUQ3hQUVVGUk5VMHNSVUZCVHpSTkxFdEJRVkY0VEN4RlFVRk5kMHdzU1VGRGJFVTFUU3hGUVVGUE5FMHNTVUZCU1VNc1UwRkJWemROTEVWQlFVOXVSaXhOUVVjelFqUlZMRVZCUVZWNlVDeEZRVUZQYmtZc1VVRkRia0p0Uml4RlFVRlRlVkFzUlVGQlZYcFFMRVZCUVU5dVJpeE5RVUZOZFVjc1JVRkJUM0JDTEVsQlJYSkRRU3hIUVVOR1VTeEZRVUZMVWl4TFFVdFlMRTFCUVUxNVVDeEZRVUZaTEVOQlEyaENMREpDUVVFMFFpeERRVUZEY2s4c1JVRkJUM0JDTEV0QmFVSnNReXhIUVdoQ1FVRXNSVUZCVHpSTkxFbEJRVWtzVTBGQlV6Vk5MRVZCUVU4MFRTeEpRVUZKZFVNc2QwSkJRVEJDYmxBc1JVRkJUelJOTEVsQlFVazRReXhoUVVOd1JURlFMRVZCUVU4MFRTeEpRVUZKYzBNc1QwRkJVMnhRTEVWQlFVOXRUaXhQUVVGUGFFUXNSMEZEYkVOdVN5eEZRVUZQTkUwc1NVRkJTU3RETEZGQlFWVXpVQ3hGUVVGUGJVNHNUMEZCVDJoRUxFZEJRMjVEYmtzc1JVRkJUelJOTEVsQlFVbG5SQ3hUUVVGWE5WQXNSVUZCVDIxT0xFOUJRVTlvUkN4SFFVTndRMjVMTEVWQlFVODBUU3hKUVVGSmFVUXNVVUZCVXl4RlFVTndRamRRTEVWQlFVODBUU3hKUVVGSk9FSXNVMEZCVnpGUExFVkJRVTgwVFN4SlFVRkpjME1zVTBGQlYyeFFMRVZCUVU5dFRpeFBRVUZQYUVRc1IwRkRNVVJ1U3l4RlFVRlBORTBzU1VGQlNXTXNWVUZCV1N4VlFVRkpiME1zWVVGQllUbFFMRVZCUVU5dFRpeFBRVUZQYUVRc1NVRkRkRVJ1U3l4RlFVRlBORTBzU1VGQlNYVkRMR1ZCUVdsQ2JsQXNSVUZCVHpSTkxFbEJRVWxqTEZWQlFWa3NWVUZCU1hGRExIVkNRVUY1UWl4VlFVRkpXQ3h2UWtGRGNFWndVQ3hGUVVGUE5FMHNTVUZCU1c5RUxIRkNRVUZ6UWl4RlFVTnFRMmhSTEVWQlFVOXRUaXhQUVVGUE9FTXNUVUZCVVdwUkxFVkJRVTl0VGl4UFFVRlBLME1zV1VGQmJVSXNUVUZEZGtSc1VTeEZRVUZQYlU0c1QwRkJUMmRFTEZOQlFWY3NWVUZCVDBNc1VVRkJVWEJSTEVWQlFVOXRUaXhQUVVGUFowUXNWVUZEZEVSdVVTeEZRVUZQY1ZFc1VVRkJWU3hWUVVGUlF5eHBRa0ZCYVVKc1VDeEZRVUZOYVZBc1VVRkJVM0pSTEVWQlFVOXRUaXhSUVVOb1JXNU9MRVZCUVU5MVVTeGhRVUZsTEVsQlFVdDJVU3hGUVVGUGJVNHNVVUZET1VKdVRpeEZRVUZQTkUwc1NVRkJTVGhDTEZkQlEySXhUeXhGUVVGUE5FMHNTVUZCU1RSRUxGVkJRVmw0VVN4RlFVRlBiVTRzVDBGQlR6aERMRTlCUlc1RGFsRXNSVUZCVHpSTkxFbEJRVWxqTEZWQlFWY3NRMEZEZUVJc1RVRkJUU3RETEVWQlFVMHNWVUZCU1VNc1dVRkJXVEZSTEVWQlFVOXRUaXhQUVVGUGQwUXNVMEZCVlROUkxFVkJRVTl0VGl4UFFVRlBhRVFzU1VGRGJFVnVTeXhGUVVGUE5FMHNTVUZCU1dkRkxFOUJRVk1zVlVGQlNVTXNiMEpCUVc5Q1NpeFJRVVUxUTNwUkxFVkJRVTgwVFN4SlFVRkpaMFVzVDBGQlV5eFZRVUZKUlN4bFFVY3hRaXhQUVVGUE9WRXNSMEZGVkN4cFEwRkJhME1zUTBGQlEyOUNMRVZCUVU5d1FpeExRVU40UTBFc1JVRkJUelJOTEVsQlFVbDFReXhsUVVGcFFtNVFMRVZCUVU4MFRTeEpRVUZKWXl4VlFVRlpMRlZCUVVseFF5eDFRa0ZCZVVJc1ZVRkJTVmdzYjBKQlEzQkdjRkFzUlVGQlR6Uk5MRWxCUVVrNFF5eGhRVUZsTEZWQlFVbHhRaXhuUWtGQlowSXNRMEZCUlRkRUxFMUJRVTlzVGl4RlFVRlBhMDRzVVVGRE9VUnNUaXhGUVVGUE5FMHNTVUZCU1N4VFFVRlROVTBzUlVGQlR6Uk5MRWxCUVVsMVF5eDNRa0ZCTUVKdVVDeEZRVUZQTkUwc1NVRkJTVGhETEdOQlEzQkZNVkFzUlVGQlV5eEpRVUZMTEZWQlFVMW5VaXhyUWtGQmEwSm9VaXhGUVVGUmIwSXNTMEZEYmtOM1RDeEpRVUZKWXl4WlFVTmlNVTRzUlVGQlV5eFZRVUZSTms4c2QwSkJRWGRDTjA4c1NVRkZjRU5CTEVkQlJWUXNjME5CUVhWRExFTkJRVU52UWl4RlFVRlBjRUlzUzBGRE4wTkJMRVZCUVU4MFRTeEpRVUZOTlUwc1JVRkJUelJOTEVsQlFVMHNTVUZCUzNoTUxFVkJRVTEzVEN4UFFVRlJOVTBzUlVGQlR6Uk5MRXRCUVZGNFRDeEZRVUZOZDB3c1NVRkRiRVUxVFN4RlFVRlBORTBzU1VGQlNXTXNWVUZCV1N4VlFVRkpiME1zWVVGQllUbFFMRVZCUVU5dFRpeFBRVUZQYUVRc1NVRkRkRVJ1U3l4RlFVRlBORTBzU1VGQlNUaERMR0ZCUVdVc1ZVRkJTWFZDTEc5Q1FVTTVRbXBTTEVWQlFVODBUU3hKUVVGSmMwVXNjVUpCUVhWQ0xGVkJRVWxFTEc5Q1FVTjBRMnBTTEVWQlFVODBUU3hKUVVGSmRVVXNhMEpCUVc5Q0xGVkJRVWxHTEc5Q1FVTnVRMnBTTEVWQlFVODBUU3hKUVVGSmQwVXNiVUpCUVhGQ0xGVkJRVWxJTEc5Q1FVTndRMnBTTEVWQlFVODBUU3hKUVVGSmVVVXNhMEpCUVc5Q0xGVkJRVWxLTEc5Q1FVTnVRMnBTTEVWQlFVODBUU3hKUVVGSk1FVXNhVUpCUVcxQ0xGVkJRVWxNTEc5Q1FVTnNRMnBTTEVWQlFVOXRUaXhQUVVGVGJrNHNSVUZCVDIxT0xFOUJRVk1zU1VGQlN5OU1MRVZCUVUwclRDeFZRVUZYYms0c1JVRkJUMjFPTEZGQlFWY3ZUQ3hGUVVGTkswd3NUMEZET1VWdVRpeEZRVUZQYTA0c1RVRkJVU3hKUVVGSkxGVkJRMjVDYkU0c1JVRkJUekpQTEZkQlFXRXNTVUZCU1N4VlFVTjRRak5QTEVWQlFVOTFVaXhYUVVGaExFbEJRVWtzVlVGRGVFSjJVaXhGUVVGUE9FOHNZMEZCWjBJc1NVRkJTU3hWUVVNelFqbFBMRVZCUVU4MFR5eFpRVUZqTEVsQlFVa3NWVUZEYkVJMVR5eEhRVVZVTEcxRFFVRnZReXhEUVVGRGIwSXNSVUZCVDNCQ0xFdEJRekZEUVN4RlFVRlBORTBzU1VGQlNUaENMRk5CUVZjeFR5eEZRVUZQTkUwc1NVRkJTWE5ETEZOQlFWZHNVQ3hGUVVGUGJVNHNUMEZCVDJoRUxFZEJRekZFYmtzc1JVRkJUelJOTEVsQlFVa3JReXhSUVVGVk0xQXNSVUZCVDIxT0xFOUJRVTlvUkN4SFFVTnVRMjVMTEVWQlFVOXRUaXhQUVVGUE9FTXNUVUZCVVdwUkxFVkJRVTl0VGl4UFFVRlBLME1zV1VGQmJVSXNUVUZEZGtSc1VTeEZRVUZQY1ZFc1VVRkJWU3hWUVVGUlF5eHBRa0ZCYVVKc1VDeEZRVUZOYVZBc1VVRkJVM0pSTEVWQlFVOXRUaXhSUVVOb1JXNU9MRVZCUVU5MVVTeGhRVUZsTEVsQlFVdDJVU3hGUVVGUGJVNHNVVUZETTBKdVRpeEhRVVZVTEcxRFFVRnZReXhEUVVGRGIwSXNSVUZCVDNCQ0xFdEJRekZEUVN4RlFVRlBjVkVzVVVGQlZTeFZRVUZSUXl4cFFrRkJhVUpzVUN4RlFVRk5hVkFzVVVGQlUzSlJMRVZCUVU5dFRpeFJRVU5vUlc1T0xFVkJRVTkxVVN4aFFVRmxMRWxCUVV0MlVTeEZRVUZQYlU0c1VVRkRNMEp1VGl4SFFVVlVMRGhEUVVFclF5eERRVUZEYjBJc1JVRkJUM0JDTEV0QlEzSkVRU3hGUVVGUGNWRXNVVUZCVlN4VlFVRlJReXhwUWtGQmFVSnNVQ3hGUVVGTmFWQXNVVUZCVTNKUkxFVkJRVTl0VGl4UlFVTm9SVzVPTEVWQlFVOTFVU3hoUVVGbExFbEJRVXQyVVN4RlFVRlBiVTRzVVVGRE0wSnVUaXhIUVVWVUxEaENRVUVyUWl4RFFVRkRiMElzUlVGQlQzQkNMRXRCUTNKRFFTeEZRVUZQTkUwc1NVRkJTV3RDTEdGQlFXVXNSVUZEYmtJNVRpeEhRVVZVTEdkRFFVRnBReXhEUVVGRGIwSXNSVUZCVDNCQ0xFdEJSWFpETEVkQlFVbHZRaXhGUVVGTkswd3NUMEZCVDJoRUxFdEJRVTl1U3l4RlFVRlBiVTRzVDBGQlQyaEVMRWxCUTJoRGJrc3NSVUZCVDIxT0xFOUJRVTlKTEZWQlEwbDBVaXhQUVVGUFVTeExRVUZMZFVRc1JVRkJUMjFPTEU5QlFVOUpMRlZCUXpsQ2VsTXNUMEZCVXl4RlFVRkhMRU5CUXpGQ0xFMUJRVTB3Vnl4RlFVRnBRaXhKUVVGTGVGSXNSVUZCVDIxT0xFOUJRVTlKTEZWQlF6RkRkazRzUlVGQlQyMU9MRTlCUVU5SkxGTkJRVmNzU1VGQlMyNU5MRVZCUVUwclRDeFBRVUZQU1N4VlFVVXpRM1JTTEU5QlFVOVJMRXRCUVVzclZTeEhRVUZuUW14VkxGTkJRVk50VlN4SlFVTnVRM2hXTEU5QlFVOVJMRXRCUVVzclZTeEZRVUZsUXl4SlFVRnJRbTVWTEZOQlFWTnZWU3hKUVVOd1JERlNMRVZCUVU5dFRpeFBRVUZQU1N4VFFVRlRhMFVzUjBGQmFVSkRMRWRCUTNSRE1WSXNSVUZCVDIxT0xFOUJRVTlKTEZOQlFWTnJSU3hIUVVGcFFrTXNSMEZCWTBZc1JVRkJaVU1zUjBGQmFVSkRMRk5CUnpWR01WSXNSVUZCVDNWUkxHRkJRV1VzU1VGQlMzWlJMRVZCUVU5dFRpeFJRVTk0UXl4UFFVWkJiazRzUlVGQlQyMU9MRTlCUVU5b1JDeEhRVUZMTDBrc1JVRkJUU3RNTEU5QlFVOW9SQ3hIUVVOb1EyNUxMRVZCUVZNc1ZVRkJUV2RTTEd0Q1FVRnJRbWhTTEVWQlFWRnZRaXhKUVVjelF5dzRRa0ZCSzBJc1EwRkJRMEVzUlVGQlQzQkNMRXRCUTNKRFFTeEZRVUZQTkUwc1NVRkJTVGhETEdGQlFXVXNWVUZCU1hGQ0xHZENRVUZuUWl4RFFVRkZOMFFzVFVGQlQyeE9MRVZCUVU5clRpeFJRVU01Ukd4T0xFVkJRVTgwVFN4SlFVRkpMRk5CUVZNMVRTeEZRVUZQTkUwc1NVRkJTWFZETEhkQ1FVRXdRbTVRTEVWQlFVODBUU3hKUVVGSk9FTXNZVUZETTBRc1ZVRkJUWE5DTEd0Q1FVRnJRbWhTTEVWQlFWRnZRaXhKUVVjelF5dzBRMEZCTmtNc1EwRkJRMEVzUlVGQlQzQkNMRmxCUXpWRFFTeEZRVUZQYlU0c1QwRkRVRzVPTEVkQlJWUXNlVU5CUVRCRExFTkJRVU52UWl4RlFVRlBjRUlzUzBGRGFFUkJMRVZCUVU4MFRTeEpRVUZKWjBRc1UwRkJWelZRTEVWQlFVOXRUaXhQUVVGUGFFUXNSMEZEY0VOdVN5eEZRVUZQY1ZFc1VVRkJWU3hWUVVGUlF5eHBRa0ZCYVVKc1VDeEZRVUZOYVZBc1VVRkJVM0pSTEVWQlFVOXRUaXhSUVVOb1JXNU9MRVZCUVU5MVVTeGhRVUZsTEVsQlFVdDJVU3hGUVVGUGJVNHNVVUZEYkVOdVRpeEZRVUZQZFZFc1lVRkJZVTRzVFVGQlVXcFJMRVZCUVU5dFRpeFBRVUZQSzBNc1dVRkJXVVFzVFVGRGRFUnFVU3hGUVVGUGRWRXNZVUZCWVdoRUxGTkJRVmNzU1VGQlMyNU5MRVZCUVUxcFVDeFJRVUZSY2xFc1JVRkJUelJOTEVsQlFVbG5SQ3hWUVVGVmNrTXNWVUZMZGtWMlRpeEZRVUZQZFZFc1lVRkJZVW9zVTBGQk5FTXNUMEZCYWtOdVVTeEZRVUZQZFZFc1lVRkJZVW9zVlVGQk1rSXNWVUZCVDBNc1VVRkJVWEJSTEVWQlFVOTFVU3hoUVVGaFNpeHBRa0ZETVVkdVVTeEZRVUZQYlU0c1QwRkRaRzVPTEVWQlFVOXRUaXhQUVVGVGJrNHNSVUZEVkVFc1IwRkZWQ3haUVVGbExFTkJRVU52UWl4RlFVRlBjRUlzUzBGRGNrSkJMRVZCUVU4MFRTeEpRVUZOTlUwc1JVRkJUelJOTEVsQlFVMHNTVUZCUzNoTUxFVkJRVTEzVEN4UFFVRlJOVTBzUlVGQlR6Uk5MRXRCUVZGNFRDeEZRVUZOZDB3c1NVRkRiRVUxVFN4RlFVRlBiVTRzVDBGQlUyNU9MRVZCUVU5dFRpeFBRVUZUTEVsQlFVc3ZUQ3hGUVVGTkswd3NWVUZCVjI1T0xFVkJRVTl0VGl4UlFVRlhMMHdzUlVGQlRTdE1MRTlCUTNaRmJrNHNSMEZGVkN4NVFrRkJORUlzUTBGQlEyOUNMRVZCUVU5d1FpeExRVU5zUTBFc1JVRkJUelJOTEVsQlFVa3JSU3hWUVVGWExFVkJRM1JDTTFJc1JVRkJUelJOTEVsQlFVazRRaXhUUVVGWE1VOHNSVUZCVDIxT0xFOUJRVTlvUkN4TFFVRlBMMGtzUlVGQlRYZE1MRWxCUVVselF5eFBRVVZxUkRsT0xFVkJRVTFwVUN4UlFVRlJjbEVzUlVGQlQyMU9MRTlCUVU5b1JDeEpRVU01UW01TExFVkJRVTl0VGl4UFFVRlRMMHdzUlVGQlRXbFFMRkZCUVZGeVVTeEZRVUZQYlU0c1QwRkJUMmhFTEVsQlJUVkRia3NzUlVGQlQyMU9MRTlCUVZNc1NVRkJTeTlNTEVWQlFVMHJUQ3hWUVVGWGJrNHNSVUZCVDIxT0xGRkJSM2hEYms0c1IwRkZWQ3cwUWtGQkswSXNRMEZCUTI5Q0xFVkJRVTl3UWl4TFFVTnlReXhOUVVGTmJVc3NSVUZCUzI1TExFVkJRVTl0VGl4UFFVRlBhRVFzUjBGRGVrSnVTeXhGUVVGUGJVNHNUMEZCVXl4SlFVRkxMMHdzUlVGQlRTdE1MRlZCUVZkdVRpeEZRVUZQYlU0c1VVRkROME51VGl4RlFVRlBiVTRzVDBGQlQyaEVMRWRCUVV0QkxFVkJRMjVDTEUxQlFVMXpSeXhGUVVGTkxGVkJRVWxETEZsQlFWa3hVU3hGUVVGUGJVNHNUMEZCVDNkRUxGTkJRVlV6VVN4RlFVRlBiVTRzVDBGQlQyaEVMRWxCVFd4RkxFOUJURUZ1U3l4RlFVRlBiVTRzVDBGQlQzbEZMRk5CUVZjc1ZVRkJUME1zYlVKQlFXMUNjRUlzUjBGRGJrUjZVU3hGUVVGUE9FOHNZMEZCWjBJc1IwRkRka0k1VHl4RlFVRlBORTBzU1VGQlNXTXNWMEZCV1N4RlFVTjJRakZPTEVWQlFVODBUU3hKUVVGSk9FTXNZVUZCWlN4VlFVRkpkVUlzYjBKQlF6bENhbElzUlVGQlR6Uk5MRWxCUVVsNVJTeHJRa0ZCYjBJc1ZVRkJTVW9zYjBKQlF6VkNhbElzUjBGRlZDd3dRa0ZCTmtJc1EwRkJRMjlDTEVWQlFVOXdRaXhMUVVOdVEwRXNSVUZCVDIxT0xFOUJRVk1zU1VGQlN5OU1MRVZCUVUwclRDeFZRVUZYYms0c1JVRkJUMjFPTEZGQlF6ZERiazRzUlVGQlR6Uk5MRWxCUVUxNFRDeEZRVUZOZDB3c1NVRkRia0kxVFN4RlFVRlBORTBzU1VGQlNTdEZMRlZCUVZjc1JVRkRaak5TTEVkQlJWUXNlVUpCUVRSQ0xFTkJRVU52UWl4RlFVRlBjRUlzUzBGRGJFTkJMRVZCUVU5dFRpeFBRVUZUTEVsQlFVc3ZUQ3hGUVVGTkswd3NWVUZCVjI1T0xFVkJRVTl0VGl4UlFVTTNRMjVPTEVWQlFVOTFVaXhYUVVGaExFZEJRM0JDZGxJc1JVRkJUelJOTEVsQlFVazRReXhoUVVGbExGVkJRVWwxUWl4dlFrRkRPVUpxVWl4RlFVRlBORTBzU1VGQlNYbEZMR3RDUVVGdlFpeFZRVUZKU2l4dlFrRkROVUpxVWl4SFFVVlVMR05CUVdsQ0xFTkJRVU52UWl4RlFVRlBjRUlzUzBGRGRrSkJMRVZCUVU4MFRTeEpRVUZKYTBZc1MwRkJUemxTTEVWQlFVOHJVaXhIUVVGSFF5eGpRVU55UW1oVExFZEJSVlFzYTBKQlFYRkNMRU5CUVVOdlFpeEZRVUZQY0VJc1MwRkRNMEpCTEVWQlFVOXRUaXhQUVVGVEwwd3NSVUZCVFN0TUxFOUJRMlp1VGl4SFFVVlVMRFJDUVVFclFpeERRVUZEYjBJc1JVRkJUM0JDTEV0QlNYSkRRU3hGUVVGUGRWRXNZVUZCWVVvc1UwRkJORU1zVDBGQmFrTnVVU3hGUVVGUGRWRXNZVUZCWVVvc1ZVRkJNa0lzVlVGQlQwTXNVVUZCVVhCUkxFVkJRVTkxVVN4aFFVRmhTaXhWUVVNeFIyNVJMRWRCUlZRc2JVSkJRWE5DTEVOQlFVTnZRaXhGUVVGUGNFSXNTMEZETlVKQkxFVkJRVTl0VGl4UFFVRlRMMHdzUlVGQlRTdE1MRTlCUTJadVRpeEhRVVZVTEdsQ1FVRnZRaXhEUVVGRGIwSXNSVUZCVDNCQ0xFdEJRekZDUVN4RlFVRlBORTBzU1VGQlNTdEZMRlZCUVZjc1JVRkRaak5TTEVkQlJWUXNhVUpCUVc5Q0xFTkJRVU52UWl4RlFVRlBjRUlzUzBGRE1VSXNTVUZCU1dsVExFZEJRVmtzUjBGRFdpeFpRVUZGUXl4SFFVRm5RbXhUTEVkQlEyeENMRmxCUVVWclVTeEhRVUZuUWpsUExFVkJRVTByVEN4UFFXTTFRaXhIUVdKQmJrNHNSVUZCVDIxT0xFOUJRVk1zUjBGSGFFSnNVaXhQUVVGUFVTeExRVUZMZVZZc1IwRkJZVFZWTEZOQlFWRXNRMEZCUTNaQ0xFVkJRVXR2UWl4TFFVTnFReXRWTEVWQlFWbHVWeXhKUVVFMlFpeExRVUZ5UW0xWExFVkJRVmx1Vnl4SlFVRmxiVlVzUlVGQldXNVZMRXRCUVZOdFZ5eEZRVUZaYmxjc1MwRkROMFZwUlN4RlFVRlBiVTRzVDBGQlR5dERMR05CUTJwQ2JGRXNSVUZCVDIxT0xFOUJRVThyUXl4WlFVRmpMRWxCUlRsQ0swSXNSMEZCV1N4RlFVTmFhbE1zUlVGQlQyMU9MRTlCUVU4clF5eFpRVUZaYmxVc1IwRkJUMjFYTEVWQlFWbHVWeXhQUVVrM1EydFhMRVZCVFVZc1QwRk1RV3BUTEVWQlFVOTFVU3hoUVVGbExFbEJRVXR1VUN4RlFVRk5iVkFzWTBGRGFrTjJVU3hGUVVGUGRWRXNZVUZCWVV3c1dVRkJZeXhKUVVNM1FteFJMRVZCUVU5MVVTeGhRVUZoVEN4bFFVTndRbXhSTEVWQlFVOXRUaXhQUVVGUEswTXNZVUZGV214UkxFc3NkVXRET1U5aUxHMUNRVVZCTEZWQlFXVXNRMEZCUTI5Q0xFVkJRVkVzU1VGQlNTeFZRVUZYY0VJc1NVRkRPVUpCTEVWQlFVOXRVeXhSUVVGVkwxRXNSVUZCVFdkU0xFMUJRVTF3VXl4RlFVRlBiVk1zVTBGQlZ5OVJMRWNzTWtWRFNIaEVMRlZCUVdVc1EwRkJRMEVzUlVGQlVTeEhRVUZKY0VJc1NVRkJWeXhEUVVGRFFTeEZRVUZQYmtZc1VVRkJVM1ZITEVrc2RVdERRWGhFTEcxQ1FVVkJMRlZCUVdVc1EwRkJRMEVzUlVGQlVTeEpRVUZKTEZWQlFVOXdRaXhKUVVNeFFrRXNSVUZCVHpSTkxFbEJRVTBzU1VGQlNTeFZRVUZKTlUwc1JVRkJUelJOTEV0QlFVOTRUQ3hITEhWTFEwZzFReXh0UWtGRlFTeFZRVUZsTEVOQlFVTkJMRVZCUVZFc1NVRkJTU3hWUVVGamNFSXNTVUZEYWtOQkxFVkJRVTh3U3l4WFFVRmhkRW9zUlVGQlRXZFNMRTFCUVUxd1V5eEZRVUZQTUVzc1dVRkJZM1JLTEVjc05reERTRGxFTEdkQ1FVVkJMR0ZCUTBFc1lVRkRRU3hoUVVOQkxHRkJRMEVzWVVGRFFTeGhRVU5CTEdGQlEwRXNZVUZEUVN4aFFVTkJMR0ZCUTBFc1dVRkRRU3haUVVOQkxGbEJRMEVzWVVGRFFTeGhRVU5CTEdGQlEwRXNZVUZEUVN4aFFVTkJMRmRCUldFc1JVRkJRV2xTTEdGQlFXVXNRMEZETVVKNlJpeEpRVUZCTEZWQlEwRlJMRXRCUVVFc1ZVRkRRV3RHTEU5QlFVRXNWVUZEUVVNc1RVRkJRU3hWUVVOQmNFWXNUMEZCUVN4VlFVTkJhMFFzVVVGQlFTeFZRVU5CUlN4aFFVRkJMRlZCUTBFMFFpeFJRVUZCTEZWQlEwRjZTQ3hYUVVGQkxGVkJRMEU0U0N4UlFVRkJMRlZCUTBGMFJpeE5RVUZCTEZWQlEwRTBRaXhqUVVGQkxGVkJRMEV5UkN4dFFrRkJRU3hWUVVOQlF5eHJRa0ZCUVN4VlFVTkJReXgxUWtGQlFTeFZRVU5CYUVVc1YwRkJRU3hWUVVOQlF5eFpRVUZCTEZWQlEwRXlReXhYUVVGQkxGVkJRMEZ4UWl4UFFVRkJMRmRCUjBZc1YwRkJaU3hKUVVGQmFGTXNhVUpCUVdkQ0xFVkJRVUY1VWl4bExIVkxRek5ETDBJc2JVSkJSVUVzVlVGQlpTeERRVUZEYWxJc1JVRkJaMElzUjBGQlNYQkNMRWxCUXpOQ1FTeEZRVUZQYTA0c1RVRkJVU3hKUVVGSkxGVkJRVTFzVGl4RlFVRlBhMDRzVDBGQlV6bE1MRWNzZFV0RFNHeEVMRzFDUVVWQkxGVkJRV1VzUTBGQlEwRXNSVUZCWjBJc1IwRkJTWEJDTEV0QlEyeERMRTlCUVZGQkxFVkJRVTl1Uml4TlFVTmlMRWxCUVVzc2MwTkJRMGdzVDBGQlR5eEpRVUZKTEZWQlEySXNTVUZCU3l4cFEwRkRUQ3hKUVVGTExHZERRVU5JTEVkQlFVbHRSaXhGUVVGUGRWSXNXVUZCWTNaU0xFVkJRVTkxVWl4WFFVRlhlbGNzVDBGQlV5eEhRVU01UTJ0R0xFVkJRVTl0VGl4UFFVRlBhRVFzUzBGQlQyNUxMRVZCUVU5MVVpeFhRVUZYTEVkQlFVZHdTQ3hIUVVNMVF5eE5RVUZQTEVsQlFVa3ZTU3hMUVVGVmNFSXNSVUZCVDNWU0xGbEJSMmhETEUxQlEwWXNTVUZCU3l3NFFrRkRTQ3hIUVVGSmRsSXNSVUZCVDNWU0xGbEJRV04yVWl4RlFVRlBkVklzVjBGQlYzcFhMRTlCUVZNc1JVRkRiRVFzVFVGQlR5eEpRVUZKYTBZc1JVRkJUM1ZTTEdOQlFXVnVVU3hIUVVsMlF5eFBRVUZQUVN4SkxIVkxRM0pDVkN4clFrRkhRU3hoUVVWQkxGVkJRV1VzUTBGQlEwRXNSVUZCWjBJc1IwRkJTWEJDTEV0QlEyeERMRTlCUVZGQkxFVkJRVTl1Uml4TlFVTmlMRWxCUVVzc2RVSkJRMGdzVDBGQlQyMUdMRVZCUVU4eVR5eFhRVU5vUWl4SlFVRkxMSE5EUVVOSUxFOUJRVThzU1VGQlNTeFZRVU5pTEVsQlFVc3NhVU5CUTBnc1IwRkJTVE5QTEVWQlFVOHlUeXhaUVVGak0wOHNSVUZCVHpKUExGZEJRVmMzVkN4UFFVRlRMRWRCUXpsRGEwWXNSVUZCVHpSTkxFbEJRVWs0UWl4VFFVTmlMRTFCUVU4c1NVRkJTVEZQTEVWQlFVOHlUeXhaUVVkMFFpeE5RVU5HTEVsQlFVc3NaME5CUlVnc1IwRkJTVE5QTEVWQlFVOHlUeXhaUVVGak0wOHNSVUZCVHpKUExGZEJRVmMzVkN4UFFVRlRMRWRCUXpsRGEwWXNSVUZCVHpSTkxFbEJRVWx6UXl4VFFVRlhiRkFzUlVGQlR6SlBMRmRCUVZjc1IwRkJSM2hGTEVkQlF6ZERMRTFCUVU4c1NVRkJTUzlKTEV0QlFWVndRaXhGUVVGUE1rOHNXVUZIYUVNc1RVRkRSaXhKUVVGTExEaENRVU5JTEVkQlFVa3pUeXhGUVVGUE1rOHNXVUZCWXpOUExFVkJRVTh5VHl4WFFVRlhOMVFzVDBGQlV5eEZRVUZITEVOQlEzSkVMRWxCUVVrcldDeEZRVUZuUWl4SFFVVndRaXhQUVVGSmVsSXNSVUZCVFhSSExFOUJRVk5yUml4RlFVRlBNazhzVjBGQlZ6ZFVMRTlCUVZNc1ZVRkJTMmRaTEdsQ1FVTnFSRVFzUlVGQlowSXNTVUZCU1RkVExFVkJRVTh5VHl4alFVRmxkazRzUjBGRGJrTjVVaXhGUVVGamRGUXNUVUZCVFN4RlFVRkhMRlZCUVV0MVZDeHJRa0ZGTlVJc1NVRkJTVGxUTEVWQlFVOHlUeXhqUVVGbGRrNHNTVUZMZWtNc1QwRkJUMEVzU1N4MVMwTjBRMVFzYTBKQlJVRXNWVUZCWlN4RFFVRkRRU3hGUVVGblFpeEhRVUZKY0VJc1MwRkRiRU1zVDBGQlVVRXNSVUZCVDI1R0xFMUJRMklzU1VGQlN5eDFRa0ZEU0N4UFFVRlBiVVlzUlVGQlR6UlBMRmxCUTJoQ0xFbEJRVXNzYzBOQlEwZ3NUMEZCVHl4SlFVRkpMRlZCUTJJc1NVRkJTeXhwUTBGRFRDeEpRVUZMTEdkRFFVTklMRWRCUVVrMVR5eEZRVUZQTkU4c1lVRkJaVFZQTEVWQlFVODBUeXhaUVVGWk9WUXNUMEZCVXl4RlFVTndSQ3hOUVVGUExFbEJRVWx6Unl4TFFVRlZjRUlzUlVGQlR6UlBMR0ZCUlRsQ0xFMUJRMFlzU1VGQlN5dzRRa0ZEU0N4SFFVRkpOVThzUlVGQlR6UlBMR0ZCUVdVMVR5eEZRVUZQTkU4c1dVRkJXVGxVTEU5QlFWTXNSVUZEY0VRc1RVRkJUeXhKUVVGSmEwWXNSVUZCVHpSUExHVkJRV2RDZUU0c1IwRkplRU1zVDBGQlQwRXNTU3gxUzBOd1FsUXNiVUpCUlVFc1ZVRkJaU3hEUVVGRFFTeEZRVUZuUWl4SFFVRkpjRUlzUzBGRGJFTXNUMEZCVVVFc1JVRkJUMjVHTEUxQlEySXNTVUZCU3l4elEwRkRTQ3hQUVVGUExFbEJRVWtzVlVGRFlpeEpRVUZMTEhsQ1FVTklMRTlCUVU5MVJ5eEZRVUZOTUVJc1MwRkJTMmxSTEVsQlEyaENRU3hGUVVGSFF5eFJRVUZWUkN4RlFVRkhjRVlzWVVGQlpUTk9MRVZCUVU5cFZDeHBRa0ZETDBKR0xFdEJSVmdzU1VGQlN5eDFRa0ZEU0N4TlFVRlBMRWxCUVVrdlV5eEZRVUZQT0U4c1pVRkRjRUlzU1VGQlN5eHBRMEZMVEN4SlFVRkxMSE5DUVVOSUxFZEJRVWs1VHl4RlFVRlBPRThzWlVGQmFVSTVUeXhGUVVGUE9FOHNZMEZCWTJoVkxFOUJRVk1zUlVGRGVFUXNUVUZCVHl4SlFVRkpjMGNzUzBGQlZYQkNMRVZCUVU4NFR5eGxRVVU1UWl4TlFVTkdMRWxCUVVzc2MwSkJRMGdzUjBGQlNUbFBMRVZCUVU4NFR5eGxRVUZwUWpsUExFVkJRVTg0VHl4alFVRmphRlVzVDBGQlV5eEZRVU40UkN4TlFVRlBMRWxCUVVsclJpeEZRVUZQT0U4c1pVRkZjRUlzVFVGRFJpeEpRVUZMTEdkRFFVTklMRWRCUTBVNVR5eEZRVUZQT0U4c1pVRkRVRGxQTEVWQlFVODRUeXhqUVVGamFGVXNUMEZCVXl4SFFVTTVRbXRHTEVWQlFVODRUeXhqUVVGakxFZEJRVWQ2UWl4TlFVRlJjazRzUlVGQlQyOU9MRXRCUVV0RExFdEJRelZEY2s0c1JVRkJUemhQTEdOQlFXTXNSMEZCUnpORkxFdEJRVTl1U3l4RlFVRlBiVTRzVDBGQlQyaEVMRWRCUlRkRExFMUJRVThzU1VGQlNTOUpMRXRCUVZWd1FpeEZRVUZQT0U4c1pVRkZPVUlzVFVGRFJpeEpRVUZMTERoQ1FVTklMRWRCUVVrNVR5eEZRVUZQT0U4c1pVRkJhVUk1VHl4RlFVRlBPRThzWTBGQlkyaFZMRTlCUVZNc1JVRkRlRVFzVFVGQlR5eEpRVUZKYTBZc1JVRkJUemhQTEdsQ1FVRnJRakZPTEVkQlNURkRMRTlCUVU5QkxFa3NkVXRETlVOVUxHMUNRVVZCTEZWQlFXVXNRMEZCUTBFc1JVRkJaMElzUjBGQlNYQkNMRXRCUTJ4RExFOUJRVkZCTEVWQlFVOXVSaXhOUVVOaUxFbEJRVXNzWjBOQlJVd3NTVUZCU3l4MVFrRkRTQ3hQUVVGUGJVWXNSVUZCVDNsVExHMUNRVUZ4UWl4SlFVRkpjbElzUlVGQlQzQkNMRVZCUVU5NVV5eHZRa0ZCYzBKeVVpeEZRVU0zUlN4UlFVTkZMRTlCUVU5d1FpeEZRVUZQZVZNc2JVSkJRWEZDTEVsQlFVa3NWVUZCYlVKNlV5eEZRVUZQZVZNc2IwSkJRWE5DY2xJc1N5eHpTME5VTjBZc2JVSkJSVUVzVlVGQlpTeERRVUZEUVN4RlFVRm5RaXhIUVVGSmNFSXNTMEZEYkVNc1QwRkJVVUVzUlVGQlQyNUdMRTFCUTJJc1NVRkJTeXhuUTBGRlRDeEpRVUZMTEhWQ1FVTklMRTlCUVU5dFJpeEZRVUZQTUZNc2EwSkJRVzlDTEVsQlFVbDBVaXhGUVVGUGNFSXNSVUZCVHpCVExHMUNRVUZ4UW5SU0xFVkJRek5GTEZGQlEwVXNUMEZCVDNCQ0xFVkJRVTh3VXl4clFrRkJiMElzU1VGQlNTeFZRVUZwUWpGVExFVkJRVTh3VXl4dFFrRkJjVUowVWl4TExITkxRMVI2Uml4dFFrRkZRU3hWUVVGbExFTkJRVU5CTEVWQlFXZENMRWRCUVVsd1FpeExRVU5zUXl4UFFVRlJRU3hGUVVGUGJrWXNUVUZEWWl4SlFVRkxMR2REUVVWTUxFbEJRVXNzZFVKQlEwZ3NUMEZCVDIxR0xFVkJRVTh5VXl4MVFrRkJlVUlzU1VGQlNYWlNMRVZCUVU5d1FpeEZRVUZQTWxNc2QwSkJRVEJDZGxJc1JVRkRja1lzVVVGRFJTeFBRVUZQY0VJc1JVRkJUekpUTEhWQ1FVRjVRaXhKUVVGSkxGVkJRWFZDTTFNc1JVRkJUekpUTEhkQ1FVRXdRblpTTEVzc2MwdERWbnBITEcxQ1FVVkJMRlZCUVdVc1EwRkJRMEVzUlVGQlVTeEhRVUZKY0VJc1MwRkRNVUlzU1VGQlNXdE9MRVZCUVZFc1IwRkRVbWRITEVWQlFXRXNSVUZEYWtJc1RVRkJUVU1zUlVGQlpTeERRVUZETjFFc1JVRkJSME1zU1VGRGJrSkVMRVZCUVVVMlNDeExRVUZQYmtzc1JVRkJUelJOTEVsQlFVbHpReXhSUVVGVk0wMHNSVUZCUlRSSUxFdEJRVTl1U3l4RlFVRlBORTBzU1VGQlNYTkRMRTlCUXpkRExFVkJSVXcxVFN4RlFVRkZPRkVzVVVGQlZUZFJMRVZCUVVVMlVTeFJRVUZuUWl4RlFVTTVRamxSTEVWQlFVVTRVU3hSUVVGVk4xRXNSVUZCUlRaUkxGTkJRV2xDTEVWQlF6VkNMRVZCUjFRc1QwRkJVWEJVTEVWQlFVOXVSaXhOUVVOaUxFbEJRVXNzYVVOQlEwZ3NUMEZCU1cxR0xFVkJRVTgwVFN4SlFVRkpLMFVzVTBGRFRuWlJMRWRCUjFRNFRDeEZRVUZSTEZWQlFVMXRSeXhoUVVGaGNsUXNSMEZETTBKclZDeEZRVUZoYUVjc1IwRkJVMEVzUlVGQlRYQlRMRTlCUVZOdlV5eEZRVUZOY0ZNc1QwRkJVeXhGUVVWcVF5eEpRVUZtYjFrc1JVRkRTemxTTEVWQlIwWkJMRVZCUVUwd1FpeExRVUZMZDFFc1IwRkRXblJVTEVWQlFVOXRUaXhQUVVGUGFFUXNTMEZCVDIxS0xFVkJRVXR1U2l4SFFVTnlRaXhKUVVOR2JVb3NSVUZEU0VNc1VVRkJVM0pITEVWQlFVMW5SeXhGUVVGaExFZEJRVWRMTEZGQlF5OUNReXhSUVVGVGRFY3NSVUZCVFdkSExFVkJRV0VzUjBGQlIwMHNVVUZETDBJdlJpeExRVUZOVUN4RlFVRk5aMGNzUlVGQllTeEhRVUZIZWtZc1RVRkhka0kyUml4TFFVZGlMRWxCUVVzc1owTkJRMHdzU1VGQlN5eDNRMEZEVEN4SlFVRkxMSE5EUVVOSUxFOUJRVTlzVXl4RlFVTktNRUlzUzBGQlMzZFJMRWRCUTBGMFZDeEZRVUZQYlU0c1QwRkJUMmhFTEV0QlFVOXRTaXhGUVVGTGJrb3NSMEZEY2tJc1NVRkJTMjFLTEVWQlFVMUdMRkZCUVZOd1ZDeEZRVUZQYlU0c1QwRkJUMmxITEZOQlJXeERSU3hKUVVkV1J5eExRVUZMVGl4SFFVTldMRWxCUVVzc1owTkJRMGdzVDBGQlR5OVNMRVZCUVUwd1FpeExRVUZMZDFFc1IwRkRXblJVTEVWQlFVOXJUaXhOUVVGTkxFZEJRVWN2UXl4TFFVRlBiVW9zUlVGQlMyNUtMRWRCUTNaQ0xFbEJRMFp0U2l4RlFVTklja1FzVFVGQlQycFJMRVZCUVU5clRpeE5RVUZOTEVkQlFVY3JReXhOUVVOMlFuVkVMRkZCUVZONFZDeEZRVUZQYTA0c1RVRkJUU3hIUVVGSGMwY3NVVUZEZWtKRUxGRkJRVk4yVkN4RlFVRlBhMDRzVFVGQlRTeEhRVUZIY1Vjc1VVRkRla0k1Uml4TFFVRk5lazRzUlVGQlQydE9MRTFCUVUwc1IwRkJSMDhzVFVGSGJrSTJSaXhKUVVWWUxFbEJRVXNzTWtKQlJVZ3NSMEZCU1d4VExFZEJRVk5CTEVWQlFVMTBSeXhQUVVGVExFZEJRVXRyUml4RlFVRlBjMVFzVFVGQlVYUlVMRVZCUVU5elZDeExRVUZMZUZrc1QwRkJVeXhGUVVGSExFTkJRM1JGTEUxQlFVMDBXU3hGUVVGWExFZEJRMWhETEVWQlFWVXpWQ3hGUVVGUGMxUXNTMEZCUzNoWkxFOUJRelZDTEVsQlFVazRXU3hGUVVGWE5WUXNSVUZCVDNOVUxFdEJRVXNzUjBGRE0wSXNTVUZCU3l4SlFVRkpibGNzUlVGQlNTeEZRVUZIUVN4RlFVRkpkMWNzUlVGQlUzaFhMRWxCUVVzc1EwRkRhRU1zU1VGQlNUQlhMRVZCUVZVM1ZDeEZRVUZQYzFRc1MwRkJTMjVYTEVkQlF6RkNlVmNzUlVGQlYwTXNSVUZCVVVNc1YwRkJZVVlzUlVGQlUwVXNWMEZCWVVRc1JVRkJWVVFzUlVGRk5VUkRMRVZCUVZFeFNpeExRVUZQTDBrc1JVRkJUU3hIUVVGSEswa3NTMEZETVVJd1NpeEZRVUZWTEVsQlEweEJMRVZCUTBoVUxGRkJRVk5vVXl4RlFVRk5MRWRCUVVkblV5eFZRVWQwUWswc1JVRkJVek5YTEV0QlFVczRWeXhIUVU5b1FpeFBRVXBCU0N4RlFVRlRSQ3hMUVVGTFRpeEhRVU5rVHl4RlFVRlRMRWRCUVVkTExFOUJRVk5JTEVWQlFWTk1MRkZCUXpsQ1J5eEZRVUZUTEVkQlFVZHFSeXhMUVVGUGJVY3NSVUZCVTI1SExFdEJRelZDYVVjc1JVRkJVeXhIUVVGSFJpeFJRVUZWU1N4RlFVRlRTaXhSUVVONFFrVXNSVUZGVUN4UFFVRlBNVlFzUlVGQlQzTlVMRXRCUVU5MFZDeEZRVUZQYzFRc1MwRkJUMnhUTEVWQlJYWkRMRkZCUTBVc1QwRkJUM0JDTEVWQlFVOXpWQ3hMUVVGUGRGUXNSVUZCVDNOVUxFdEJRVTlzVXl4TExIVkxRelZHZWtNc2JVSkJSVUVzVlVGQlpTeERRVUZEUVN4RlFVRlJMRWxCUVVrc1ZVRkJWM0JDTEVsQlF6bENRU3hGUVVGUGQxTXNVVUZCVlhCU0xFVkJRVTFuVWl4TlFVRk5jRk1zUlVGQlQzZFRMRk5CUVZkd1VpeEhMSFZMUTBoNFJDeHRRa0ZGUVN4VlFVRmxMRU5CUVVOQkxFVkJRVkVzU1VGQlNTeFZRVUZQTEVkQlFVa3NTVUZCUzNCQ0xFdEJRekZETEU5QlFWRkJMRVZCUVU5dVJpeE5RVU5pTEVsQlFVc3NiMEpCUTB3c1NVRkJTeXd5UWtGRFRDeEpRVUZMTEcxRFFVTk1MRWxCUVVzc2FVTkJRMHdzU1VGQlN5dzRRMEZEU0N4UFFVRlBMRWxCUVVrc1ZVRkJUMjFHTEVWQlFVOXRUaXhSUVVNelFpeEpRVUZMTEdkRFFVTk1MRWxCUVVzc2QwTkJRMHdzU1VGQlN5eHpRMEZGU0N4SFFVRkpMMHdzUlVGQlRTdEpMRXRCUVU5dVN5eEZRVUZQYlU0c1QwRkJUMmhFTEVkQlF6ZENMRTlCUVU5dVN5eEZRVUZQYlU0c1QwRkJVeTlNTEVWQlFVMW5VaXhOUVVGTmNGTXNSVUZCVDIxT0xGRkJRVlV2VEN4RlFVVjRSQ3hKUVVGTExHZERRVVZJTEVkQlFVbEJMRVZCUVUwclNTeExRVUZQYmtzc1JVRkJUMjFPTEU5QlFVOW9SQ3hIUVVNM1FpeFBRVUZQYmtzc1JVRkJUMjFPTEU5QlFWTXZUQ3hGUVVGTloxSXNUVUZCVFhCVExFVkJRVTl0VGl4UlFVRlZMMHdzUlVGSE1VUXNUMEZCVDBFc1NTeDFTME4yUWxRc2JVSkJSVUVzVlVGQlpTeERRVUZEUVN4RlFVRlJMRWxCUVVrc1ZVRkJUeXhIUVVGSkxFbEJRVXR3UWl4SlFVTnVRMEVzUlVGQlQzVlJMR0ZCUVdWdVVDeEZRVUZOWjFJc1RVRkJUWEJUTEVWQlFVOTFVU3hqUVVGblFtNVFMRWNzZFV0RFNHeEZMR3RDUVVWQkxGVkJRV1VzUTBGQlEwRXNSVUZCVVN4SlFVRkpMRlZCUVZkd1FpeEpRVU01UWtFc1JVRkJUM0ZSTEZGQlFWVnFVQ3hGUVVGTloxSXNUVUZCVFhCVExFVkJRVTl4VVN4VFFVRlhhbEFzUnl4MVMwTkllRVFzYlVKQlJVRXNWVUZCWlN4RFFVRkRRU3hGUVVGakxFbEJRVWtzVlVGQlVYQkNMRXRCUlhoRExFOUJRVkZCTEVWQlFVOXVSaXhOUVVOaUxFbEJRVXNzTWtKQlEwZ3NUVUZCYTBNc1MwRkJPVUp0Uml4RlFVRlBiVTRzVDBGQlQzbEhMRk5CUVZONlNpeEhRVU5zUWl4SlFVRkpMRlZCUVVzc1EwRkRaRUVzUjBGQlNXNUxMRVZCUVU5dFRpeFBRVUZQYUVRc1IwRkRiRUkyU2l4SlFVRkxhRlVzUlVGQlQyMU9MRTlCUVU4MlJ5eEpRVU51UWk5RUxFMUJRVTlxVVN4RlFVRlBiVTRzVDBGQlR6aERMRTFCUTNKQ2MwUXNVVUZCVTNaVUxFVkJRVTl0VGl4UFFVRlBiMGNzVlVGSGJFSXNTVUZCU1N4VlFVRkxkbFFzUlVGQlQyMU9MRTlCUVU5NVJ5eFZRVVZzUXl4SlFVRkxMR2REUVVOTUxFbEJRVXNzZDBOQlEwd3NTVUZCU3l4elEwRkRTQ3hOUVVGTkxFOUJRVVY2Unl4SFFVRlhiazRzUlVGRGJrSXNSMEZCU1cxT0xFVkJRVTlvUkN4TFFVRlBMMGtzUlVGQlRTdEpMRWRCUVVrc1EwRkRNVUlzVFVGQlRYTkVMRVZCUVU4c1NVRkJTM0pOTEVWQlFVOW5VeXhSUVVGVGFrY3NSVUZCVDJsSExGTkJRM3BETEU5QlFVOHNTVUZCU1N4VlFVRkxNMFlzUjBGRmJFSXNUVUZEUml4SlFVRkxMR2REUVVOSUxFMUJRVTFCTEVWQlFVOTZUaXhGUVVGUGEwNHNUVUZCVFN4SFFVTXhRaXhIUVVGSlR5eEZRVUZMZEVRc1MwRkJUeTlKTEVWQlFVMHJTU3hIUVVOd1FpeFBRVUZQTEVsQlFVa3NWVUZCU3l4SlFVTllMMGtzUlVGRFNEWlBMRTFCUVU5NFF5eEZRVUZMZDBNc1RVRkRXblZFTEZGQlFWTXZSaXhGUVVGTEswWXNVVUZEWkVRc1VVRkJVemxHTEVWQlFVczRSaXhSUVVOa09VWXNTMEZCVFVFc1JVRkJTMEVzVDBGSmJrSXNUMEZCVDNKTkxFa3NjVXREY2tOVUxHMUNRVVZCTEZWQlFXVXNRMEZCUTBFc1JVRkJVU3hKUVVGSkxGVkJRVkZ3UWl4SlFVTXpRa0VzUlVGQlQyOU9MRXRCUVU5b1RTeEZRVUZOWjFJc1RVRkJUWEJUTEVWQlFVOXZUaXhOUVVGUmFFMHNSeXd5UlVOSWJFUXNaMEpCUTBWclNDeGpRVU5GTEUxQlFVOHNUU3gxUzBOR1dDeHRRa0ZGUVN4TlFVRnhRakpNTEZWQlFXZENMRlZCUTI1RE0wd3NXVUZCV1RKQ0xFVkJRV01zU1VGSGVFSXNUMEZHUVdsTExGRkJSVTk0VkN4TFFVRkxlVlFzVDBGQlR5eERRVUZGWml4UlFVUk1MRXRCU0hCQ0xHRXNkVXREUmtFc2JVSkJSVUVzWVVGRFFTeGhRVWxCTEUxQlFYRkNaMElzVlVGQldTeFZRVzlKTDBJNVRDeFpRVUZaTWtJc1JVRkJZeXhIUVVGSmFrUXNSVUZCVHl4SlFVTnVRMnRPTEZGQmJrSkdMRXRCUVVGb1JDeHhRa0ZCSzBJc1ZVRkJTMjFFTEdOQlEzQkRMRXRCUVVGcVJDeHRRa0ZCTmtJc1ZVRkJTMmxFTEdOQlEyeERMRXRCUVVGc1JDeHJRa0ZCTkVJc1ZVRkJTMnRFTEdOQlEycERMRXRCUVVGb1JDeHJRa0ZCTkVJc1ZVRkJTMmRFTEdOQlEycERMRXRCUVVFdlF5eHBRa0ZCTWtJc1ZVRkJTeXRETEdOQmEwSTVRaXhOUVVGTmJFc3NSVUZCUzBZc1JVRkJUMFVzUjBGQlMwWXNSVUZCVDBVc1IwRkJTeXhIUVVjM1Frb3NSVUZCUzBVc1JVRkJUMFlzUjBGQlMwVXNSVUZCVDBZc1IwRkJTeXhIUVVjM1FqaEdMRWxCUVZNc1ZVRkJUM2xGTEUxQlFVMXlTeXhGUVVGUE5FWXNVMEZCVlRWR0xFVkJRVTgwUml4UFFVTTVRMjVETEVWQlFWa3NWVUZCVHpSSExFMUJRVTF5U3l4RlFVRlBlVVFzVjBGQllYcEVMRVZCUVU5NVJDeFZRVUZaTUVjc1JVRkJTWFJGTEdGQlFXRXpSaXhIUVVOcVJuZElMRWxCUVZjc1ZVRkJUekpETEUxQlFVMXlTeXhGUVVGUE1FZ3NWMEZCV1RGSUxFVkJRVTh3U0N4VFFVTnNSSHBETEVWQlFWTnFSaXhGUVVGUGFVWXNUMEZCVTJwR0xFVkJRVTlwUml4UFFVRlRMMFVzUlVGRGVrTjFSU3hGUVVGWExGVkJRVTgwUml4TlFVRk5ja3NzUlVGQlQzbEZMRlZCUVZsNlJTeEZRVUZQZVVVc1UwRkJWMUVzU1VGQlZ5OUZMRVZCUTNoRmNVY3NSVUZCV1haSExFVkJRVTkxUnl4VlFVRlpka2NzUlVGQlQzVkhMRlZCUVZrc1VVRkRiRVJETEVWQlFVMHlSQ3hGUVVGSk1VUXNXVUZCV1hwSExFVkJRVTh3Unl4VFFVRlZlRWNzUjBGRGRrTjVSeXhGUVVGVGQwUXNSVUZCU1Vjc1lVRkJZVGxFTEVWQlFVdDRSeXhIUVVNdlFqQkdMRVZCUVZVeFJpeEhRVUZWUVN4RlFVRlBNRVlzVVVGQlZURkdMRVZCUVU4d1JpeFJRVUZWTEVkQlEzUkVVaXhGUVVGcFFtbEdMRVZCUVVsSkxHdENRVUZyUW5aTExFVkJRVkY1UkN4SFFVTXZReXRITEVkQlFXTXNWVUZCVDBnc1RVRkJUWEpMTEVWQlFVOTNTeXhqUVVGbGVFc3NSVUZCVDNkTExGbEJSM2hFTjBNc1JVRkJWek5JTEVkQlFWVkJMRVZCUVU4eVNDeFRRVUZYTTBnc1JVRkJUekpJTEZOQlFWY3NWVUZCVHpoRExGbEJRMmhGYUVZc1JVRkJaWHBHTEVkQlFWVkJMRVZCUVU5NVJpeGhRVUZsZWtZc1JVRkJUM2xHTEdGQlFXVXdSU3hGUVVGSmJrUXNiMEpCUTNwRlF5eEZRVUYxUW1wSUxFZEJRVlZCTEVWQlFVOXBTQ3h4UWtGQmRVSnFTQ3hGUVVGUGFVZ3NjVUpCUVhWQ2EwUXNSVUZCU1c1RUxHOUNRVU5xUjBjc1JVRkJjVUp1U0N4SFFVRlZRU3hGUVVGUGJVZ3NiVUpCUVhGQ2JrZ3NSVUZCVDIxSUxHMUNRVUZ4UW1kRUxFVkJRVWx1UkN4dlFrRkRNMFpGTEVWQlFXOUNiRWdzUjBGQlZVRXNSVUZCVDJ0SUxHdENRVUZ2UW14SUxFVkJRVTlyU0N4clFrRkJiMEpwUkN4RlFVRkpia1FzYjBKQlEzaEdTU3hGUVVGdlFuQklMRWRCUVZWQkxFVkJRVTl2U0N4clFrRkJiMEp3U0N4RlFVRlBiMGdzYTBKQlFXOUNLME1zUlVGQlNXNUVMRzlDUVVONFJrc3NSVUZCYlVKeVNDeEhRVUZWUVN4RlFVRlBjVWdzYVVKQlFXMUNja2dzUlVGQlQzRklMR2xDUVVGdFFqaERMRVZCUVVsdVJDeHZRa0ZIY2tZd1JDeEZRVUZaTVVzc1JVRkJUekJMTEZWQlFWa3hTeXhGUVVGUE1Fc3NWVUZCV1N4SFFVTnNSRGRITEVsQlFXVTNSQ3hGUVVGUE5rUXNZMEZCWlRkRUxFVkJRVTgyUkN4aFFVTTFRMFlzUlVGQmJVSXpSQ3hGUVVGUE1rUXNhVUpCUVcxQ00wUXNSVUZCVHpKRUxHbENRVUZ0UWl4RlFVTjJSV2RJTEVWQlFXTXpTeXhGUVVGUE1rc3NXVUZCWXpOTExFVkJRVTh5U3l4WlFVRmpMRWRCUjNoRU5VVXNTVUZCYzBJc1ZVRkJUM05GTEUxQlFVMXlTeXhGUVVGUEswWXNjMEpCUVhWQ0wwWXNSVUZCVHl0R0xHOUNRVU40UlRaRkxFbEJRVzFDTEZWQlFVOVFMRTFCUVUxeVN5eEZRVUZQTkVzc2JVSkJRVzlDTlVzc1JVRkJUelJMTEdsQ1FVTnNSV2hKTEVWQlFWYzFReXhIUVVGVlFTeEZRVUZQTkVNc1UwRkJWelZETEVWQlFVODBReXhUUVVGWExFZEJRM3BFYWtnc1JVRkJVU3hWUVVGUE1FOHNUVUZCVFhKTExFVkJRVTl5UlN4UFFVRlRjVVVzUlVGQlQzSkZMRTFCUVZFc1IwRkZNVVFzVDBGQlQyeEdMRXRCUVV0NVZDeFBRVUZQTEVOQlJXcENjRXNzUjBGQlFVRXNSVUZIUVRoR0xFOUJRVUZCTEVWQlEwRnVRaXhUUVVGQlFTeEZRVU5CYVVRc1UwRkJRVUVzUlVGRFFXcEZMRlZCUVVGQkxFVkJRMEYzUWl4UFFVRkJRU3hGUVVOQmMwSXNWVUZCUVVFc1JVRkRRVWtzVDBGQlFVRXNSVUZEUVhwQ0xHVkJRVUZCTEVWQlEwRlJMRkZCUVVGQkxFVkJRMEU0UlN4WlFVRkJRU3hGUVV0Qk4wTXNVMEZCUVVFc1JVRkRRV3hETEdGQlFVRkJMRVZCUTBGM1FpeHhRa0ZCUVVFc1JVRkRRVVVzYlVKQlFVRkJMRVZCUTBGRUxHdENRVUZCUVN4RlFVTkJSU3hyUWtGQlFVRXNSVUZEUVVNc2FVSkJRVUZCTEVWQlMwRnhSQ3hWUVVGQlFTeEZRVU5CTjBjc1lVRkJRVUVzUlVGRFFVWXNhVUpCUVVGQkxFVkJRMEZuU0N4WlFVRkJRU3hGUVVkQk5VVXNiMEpCUVVGQkxFVkJRMEUyUlN4cFFrRkJRVUVzUlVGRFFXaEpMRk5CUVVGQkxFVkJRMEZxU0N4TlFVRkJRU3hKUVhKT1NpeHBRMEZEUlN4UFFVRlBMRlZCUVV0NVR5eGpRVVZrTEc5RFFVTkZMRTFCUVU4c1YwRkZWQ3hyUTBGRFJTeE5RVUZQTEZOQlJWUXNhVU5CUTBVc1RVRkJUeXhSUVVWVUxHbERRVU5GTEUxQlFVOHNVVUZGVkN4blEwRkRSU3hOUVVGUExFOUJSVlFzTkVKQlEwVXNUVUZCVHl4UFFVVlVMQ3RDUVVORkxFMUJRVThzVVVGRlZDd3JRa0ZEUlN4TlFVRlBMRkZCUlZRc01FSkJRMFVzVFVGQlR5eE5RVVZVTERCQ1FVTkZMRTFCUVU4c1RVRkZWQ3d3UWtGRFJTeE5RVUZQTEUxQlJWUXNjMEpCUTBVc1RVRkJUeXhEUVVGRFJDeEZRVUZKVlN4aFFVRmpWaXhGUVVGSlZ5eGhRVUZqV0N4RlFVRkpXU3hqUVVWc1JDdzJRa0ZEUlN4TlFVRlBMRU5CUTB3c1EwRkJRMW9zUlVGQlNWVXNZMEZCWlZZc1JVRkJTV0VzYTBKQlEzaENMRU5CUVVOaUxFVkJRVWxYTEdOQlFXVllMRVZCUVVsakxHdENRVU40UWl4RFFVRkRaQ3hGUVVGSldTeGpRVUZsV2l4RlFVRkpZU3h0UWtGSE5VSXNiMEpCUVc5Q2VFVXNSVUZCUzNoSExFZEJRM1pDTEU5QlFVbEJMRWRCUVZWQkxFVkJRVTh5Unl4UFFVTmFNMGNzUlVGQlR6SkhMRTlCUlZSM1JDeEZRVUZKZGtRc2IwSkJRVzlDU2l4SFFVVnFReXd5UWtGQk1rSkJMRWRCUTNwQ0xFMUJRVTB3UlN4RlFVRnhRbXhhTEU5QlFVOVJMRXRCUVVzeVdDeEZRVUZKWjBJc2FVSkJRM0pEUXl4RlFVRjFRa1lzUlVGQmJVSnlZU3hQUVVOb1JDeEpRVUZKZDJFc1JVRkJXU3hQUVVOb1FpeEpRVUZMTEVsQlFVbHVXU3hGUVVGSkxFVkJRVWRCTEVWQlFVbHJXU3hGUVVGelFteFpMRWxCUVVzc1EwRkROME1zVFVGQlRXOVpMRVZCUVZNc1NVRkJTWEJSTEU5QlFVOHNTVUZCU1dkUkxFVkJRVzFDYUZrc1QwRkRha1FzUjBGQlNYTlVMRVZCUVVsNFZpeE5RVUZOYzJFc1IwRkJVeXhEUVVOeVFrUXNSVUZCV1d4Q0xFVkJRVWxuUWl4blFrRkJaMEpFTEVWQlFXMUNhRmtzU1VGRGJrUXNUMEZIU2l4UFFVRlBiVmtzUlVGRlZDeHpRa0ZCYzBKMFdpeEhRVU53UWl4UlFVRkpMRzFDUVVGdFFtbE5MRXRCUVV0cVRTeEpRVUZsTEhkQ1FVazNReXhwUWtGQmFVSkJMRWRCUTJZc1RVRkJZeXhMUVVGV1FTeEZRVUZ4UWl4blFrRkRja0lzY1VKQlFYRkNhVTBzUzBGQlMycE5MRWRCUVdVc1owSkJRM3BETEZOQlFWTnBUU3hMUVVGTGFrMHNSMEZCWlN4bFFVTTNRaXc0UTBGQk9FTnBUU3hMUVVGTGFrMHNTVUZCWlN4aFFVbDRSU3huUWtGQlowSnBUeXhIUVVOa0xFMUJRWE5DTEdsQ1FVRllNMFlzVVVGQmRVSkJMRTlCUVU5clVpeFhRVUZ0UW14U0xFOUJRVTlyVWl4WFFVTXZSSFpNTEVWQlFVOTNUQ3hOUVVOdFFpeHBRa0ZCYWtKNFRDeEZRVUZQZDB3c1QwRkRXbmhNTEVWQlFVOTNUQ3hOUVVGTk5WWXNVVUZCVVN4UFFVRlRMRVZCUTNwQ05FY3NUMEZCVDNkRUxFVkJRVTkzVEN4TlFVRk5hRk1zVVVGQlVTeExRVUZOTEV0QlIzUkRkMGNzUlVGQlQzZE1MRTFCUlZRc1JVRkhWQ3hwUWtGQmFVSjRUQ3hGUVVGVExFbEJRM2hDTEUxQlFYTkNMR2xDUVVGWU0wWXNVVUZCZFVKQkxFOUJRVTl2VWl4WlFVRnZRbkJTTEU5QlFVOXZVaXhaUVVNM1JDeEZRVFJJVkN3d1FrRkJNRUpETEVkQlEzaENMRTlCUVU5MlFpeEZRVUZKZDBJc2JVSkJRVzFDUkN4SlFVRm5RblpDTEVWQlFVbDVRaXh0UWtGQmJVSkdMRWRCUjNaRkxEQkNRVUV3UWtFc1IwRkRlRUlzVDBGQlQwRXNSVUZCV1RsV0xGRkJRVkYxVlN4RlFVRkpZU3h2UWtGQmMwSXNSVUZIZGtRc01FSkJRVEJDVlN4SFFVTjRRaXhQUVVGUFFTeEZRVUZaT1ZZc1VVRkJVWFZWTEVWQlFVbGpMRzlDUVVGelFpeEZRVWQyUkN4dFFrRkJiVUoyUlN4RlFVRlZlRWNzUjBGRE0wSXNUMEZCVDNkSExFVkJRVmNzU1VGQlRYaEhMRVZCUVVjeFJ5eFJRVUZSTEUxQlFVOHNTVUZITlVNc2IwSkJRVzlDTUVjc1IwRkRiRUlzVDBGQlQybExMRVZCUVVrd1FpeFRRVUZUUXl4TlFVRk5ReXhKUVVONFFpeE5RVUZOZGs4c1JVRkJVeXhKUVVGSmRFTXNUMEZCVHl4SlFVRkpObEVzVVVGQlYwRXNUVUZEZWtNc1QwRkJUemRNTEVWQlFVZHNVQ3hOUVVGTmQwMHNUVUZKY0VJc2VVSkJRWGxDZDBNc1JVRkJVWGxFTEVkQlF5OUNMRTlCUVVsNlJDeEhRVUZWUVN4RlFVRlBhMFlzWlVGRFdteEdMRVZCUVU5clJpeGxRVVZXZWtJc1JVRkRTekJITEVWQlFVbHlSU3gxUWtGRlNuRkZMRVZCUVVsb1JpeHZRa0ZMYWtJc2QwSkJRWFZDTEUxQlFVVnNReXhKUVVOMlFpeFBRVUZKUVN4SFFVRlRRU3hGUVVGTkxFbEJRVTFCTEVWQlFVMHNSMEZCUnl0SkxFbEJRM3BDTDBrc1JVRkJUU3hIUVVGSEswa3NTVUZGV0N4VlFVRkxOVUlzWTBGSFpDeG5RMEZCSzBJc1NVRkJSWHBJTEVWQlFVY3NUVUZCUlRKR0xFZEJRV015UkN4RlFVRnRRa01zUlVGQlkwTXNSVUZCYjBJc1NVRkRka2NzU1VGQlNVTXNSVUZCYzBJc1IwRkRNVUlzVFVGQlRVTXNSVUZCZFVJeFNpeEhRVUZQUVN4RlFVRkpkVU1zWlVGQmFVSjJReXhGUVVGSmRVTXNaVUZCYVVKcFJpeEZRVUZKYUVZc2IwSkJSMnhHTEU5QlJFRnBTQ3hIUVVSQmVrb3NSVUZCVFhkSUxFVkJRVWx0UXl4elFrRkJjMElzUTBGQlJUTktMRWxCUVVGQkxFVkJRVXN5Uml4TlFVRkJRU3hIUVVGVE1rUXNSVUZCWTBNc1JVRkJUVU1zU1VGRE1VTnFTQ3hsUVVOdVFpeERRVUZGZGtNc1NVRkJRVUVzUlVGQlN6UktMRTlCUVZFc1IwRkJSMFlzVVVGQk1rSkVMRXRCUjNSRUxEaENRVUUyUWl4SlFVRkZla29zUlVGQlJ5eE5RVUZGTWtZc1IwRkJVekpFTEVWQlFXOUNMRWRCUVVsRExFVkJRVTFETEVkQlEzcEZMRTFCUTAxTExFVkJRV0UzU2l4SFFVRlpMRWRCVFM5Q0xFZEJURUUyU2l4RlFVRlhMMGNzWVVGQlpUQkZMRVZCUVVsdVJDeHZRa0ZMTVVKcFJpeEZRVUZoZUVrc1ZVRk5aaXhQUVVwQkswa3NSVUZCVjNSSUxHVkJRV2xDYVVZc1JVRkJTWEpGTEhWQ1FVTm9RekJITEVWQlFWY3ZSeXhoUVVGbEswY3NSVUZCVjNaR0xIRkNRVUYxUW5WR0xFVkJRVmQyUml4eFFrRkJkVUpyUkN4RlFVRkpia1FzYjBKQlEyeEhkMFlzUlVGQlZ6bEZMRk5CUVhWQ0xGVkJRVnA1UlN4SFFVRnRReXhuUWtGQldrRXNSMEZCZVVNc1dVRkJXa0VzUlVGRE1VVkxMRVZCUVZjdlNTeFhRVUZaTEVWQlEyaENLMGtzUlVGUFZDeEhRVXBuUWl4cFFrRkJXa3dzU1VGRFJrc3NSVUZCVnpsRkxGVkJRVmNzUjBGSFVpeFZRVUZhZVVVc1IwRkJkVUkzUkN4RlFVRk5lbGdzVDBGQlV5eEZRVUZITEVOQlR6TkRMRWxCVG5OQ2VWZ3NSVUZCVFhkRUxFMUJRVTFYTEVkQlEzcENRU3hGUVVGSGRrMHNTMEZCVDJkTkxFZEJRVkZQTEVWQlFVZDJUU3hMUVVGUFowMHNSVUZCVHl4TlFWY3hReXhQUVVoQlRTeEZRVUZYTDBjc1lVRkJaVEJGTEVWQlFVbHVSQ3h2UWtGRE9VSjNSaXhGUVVGWGRFZ3NaVUZCYVVKcFJpeEZRVUZKZFVNc2IwSkJRMmhEUml4RlFVRlhPVVVzVlVGQlZ5eEZRVU5tT0VVc1JVRnBRbGdzVDBGaVNVRXNSVUZCVjNaSUxGTkJRVmRwU0N4RlFVTndRazBzUlVGQlYyaERMRmxCUldKblF5eEZRVUZYZEVnc1pVRkJhVUpwUml4RlFVRkphRVlzYjBKQlIyaERjVWdzUlVGQlYzUklMR1ZCUVdsQ2FVWXNSVUZCU1hkRExIRkNRVWxzUTBnc1JVRkJWM1JJTEdWQlFXbENhVVlzUlVGQlNYVkRMRzlDUVVjelFrWXNSMEV2VkZnc1lTeDFTME5RUVN4dFFrRkZRU3hOUVVGeFFra3NWVUZCYlVJc1ZVRkRkRU4yVHl4WlFVRlpiME1zUlVGQmEwSXNTVUZGTlVJc1QwRkVRWGRLTEZGQlEwOTRWQ3hMUVVGTGVWUXNUMEZCVHl4SlFVRkxla29zU1VGSE1VSXNlVUpCUVhsQ2IwMHNSMEZEZGtJc1NVRkJTVU1zUlVGQk5FSXNSMEZKYUVNc1QwRklRVGxoTEU5QlFVOVJMRXRCUVV0eFlTeEhRVUZaZUZvc1UwRkJVMGdzU1VGREwwSTBXaXhGUVVGeFFrUXNSVUZCVnpOYUxFZEJRVWM1UXl4TlFVRlJlV01zUlVGQlZ6TmFMRWRCUVVkdVFpeFRRVVZ3UkN0aExFZEJXRmdzWVN4MVMwTkdRU3h0UWtGRlFTeE5RVUZ4UWtNc1ZVRkJhVUlzVlVGRGNFTXhUeXhaUVVGWk1rSXNSVUZCWXl4SlFVZDRRaXhQUVVaQmFVc3NVVUZEUVdwTExFVkJRVk5CTEVkQlFXdENMRWRCUTNCQ2Rrb3NTMEZCUzNsVUxFOUJRVTlzU3l4SlFVcDJRaXhoTEhWTFEwWkJMRzFDUVVOQkxGbEJSVUVzVFVGQmNVSm5UaXhWUVVGaExGVkJORU5vUXpOUExGbEJRVmt5UWl4SFFVTldhVXNzVVVGdVFrWXNTMEZCUVN0Q0xFbEJRV05uUWl4RlFVRkxReXhqUVVGamFrSXNTVUZEYWtNc1MwRkJRVGxNTEVkQlFXRTRUU3hGUVVGTFF5eGpRVUZqTDAwc1IwRkRhRU1zUzBGQlFUWktMRWxCUVdkQ2FVUXNSVUZCUzBNc1kwRkJZMnhFTEVsQlEyNURMRXRCUVVGVUxGRkJRV3RDTUVRc1JVRkJTME1zWTBGQll6TkVMRkZCUTNKRExFdEJRVUV6UWl4VFFVRnRRbkZHTEVWQlFVdERMR05CUVdOMFJpeFRRVU4wUXl4TFFVRkJkVVlzVFVGQlowSkdMRVZCUVV0RExHTkJRV05ETEUxQlEyNURMRXRCUVVFeFNpeExRVUZsZDBvc1JVRkJTME1zWTBGQlkzcEtMRXRCUTJ4RExFdEJRVUZyUkN4VFFVRnRRbk5ITEVWQlFVdERMR05CUVdOMlJ5eFRRVU4wUXl4TFFVRkJOa01zVVVGQmEwSjVSQ3hGUVVGTFF5eGpRVUZqTVVRc1VVRkRja01zUzBGQlFYWkVMRTFCUVdkQ1owZ3NSVUZCUzBNc1kwRkJZMnBJTEUxQlEyNURMRXRCUVVGdFJDeFJRVUZyUWpaRUxFVkJRVXRETEdOQlFXTTVSQ3hSUVVOeVF5eExRVUZCTDBZc1NVRkJZelJLTEVWQlFVdERMR05CUVdNM1NpeEpRVU5xUXl4TFFVRkJLMG9zVFVGQlowSklMRVZCUVV0RExHTkJRV05GTEUxQlEyNURMRXRCUVVGd1JTeFJRVUZ0UW1sRkxFVkJRVXRETEdOQlFXTnNSU3hSUVVOMFF5eExRVUZCY1VVc1MwRkJXVW9zUlVGQlMwTXNZMEZCWTBjc1MwRkRMMElzUzBGQlFVTXNWMEZCYlVKTUxFVkJRVXRETEdOQlFXTkpMRmRCUTNSRExFdEJRVUV6U2l4WlFVRnZRbk5LTEVWQlFVdERMR05CUVdOMlNpeFpRVU4yUXl4TFFVRkJiVWNzVjBGQmJVSnRSQ3hGUVVGTFF5eGpRVUZqY0VRc1YwRkhjRU1zVFVGQlRYbEVMRVZCUVZOMFRpeEZRVUZUTEVsQlFVdG5UaXhGUVVGTFF5eHBRa0ZCYTBKcVRpeEhRVUZYWjA0c1JVRkJTME1zWTBGRGNFVXNUMEZCVDNoWExFdEJRVXQ1VkN4UFFVRlBiMFFzUjBFNVEzSkNMREpDUVVORkxFMUJRVThzTWtKQlJWUXNNa0pCUTBVc1RVRkJUeXhEUVVOTWRFSXNTVUZCU3l4SFFVTk1PVXdzUjBGQlNTeEpRVU5LTmtvc1NVRkJTeXhEUVVGRExFdEJRMDVVTEZGQlFWTXNWVUZCUzJsRkxHVkJRMlExUml4VFFVRlZMRTlCUTFaMVJpeE5RVUZQTEVWQlExQXhTaXhMUVVGTkxFZEJRMDVyUkN4VFFVRlZMRk5CUTFZMlF5eFJRVUZUTEVWQlExUjJSQ3hOUVVGUExGRkJRMUJ0UkN4UlFVRlRMRVZCUTFRdlJpeEpRVUZMTEVkQlEwd3JTaXhOUVVGUExFZEJRMUJ3UlN4VFFVRlRMRVZCUTFSeFJTeExRVUZOTEV0QlEwNURMRmRCUVZrc1NVRkJTVFZSTEV0QlEyaENhVWdzV1VGQllTeEpRVUZKYWtnc1MwRkRha0p2VGl4WFFVRlpMRWxCUVVsd1RpeFBRWFpDZEVJc1lTd3lSVU5FUVN4blFrRkRSVFJDTEZsQlFWa3lRaXhGUVVGcFFpeEpRVU16UWl4UFFVRlBRU3hMTEhWTFEwcFlMRzFDUVVWQkxHRkJRMEVzV1VGRFFTeGhRVU5CTEdGQlJVRXNUVUZCY1VKM1RpeEZRVU51UW01UUxGbEJRVmt5UWl4RlFVRnBRaXhKUVVNelFpeFBRVUZQUVN4RlFVZFVMRzlDUVVGdlFqZEpMRWRCUTJ4Q0xFMUJRVTBzU1VGQlJYZE1MRVZCUVVjc1kwRkJSV3RETEVWQlFXRXNWMEZCUlVnc1JVRkJWU3haUVVGRlF5eEZRVUZYTEZkQlFVVXlReXhGUVVGVkxGVkJRVVZ0Unl4SFFVRmpkRmNzUlVGREwwVXNUMEZCVVhkTUxFVkJRVWwxUXl4blFrRkRWaXhMUVVGTExGVkJRVWxaTEhWQ1FVTlFMRTlCUVU5cVFpeEZRVU5VTEV0QlFVc3NWVUZCU1Uwc2IwSkJRMUFzVDBGQlQxUXNSVUZEVkN4TFFVRkxMRlZCUVVscFNTeHhRa0ZEVUN4UFFVRlBhRWtzUlVGRFZDeExRVUZMTEZWQlFVa3JTQ3h2UWtGRFVDeFBRVUZQY0VZc1JVRkRWQ3hMUVVGTExGVkJRVWx2Unl4dFFrRkRVQ3hQUVVGUFJDeEhRVWxpTEhsQ1FVRjVRakZZTEVWQlFWRnZRaXhIUVVNdlFpeE5RVUZOTEVsQlFVVjNUQ3hGUVVGSExFMUJRVVZOTEVkQlFWVnNUaXhGUVVOcVFqUllMRVZCUVdFeFN5eEhRVUZUUVN4RlFVRk5jRk1zVDBGQlV5eEZRVTB6UXl4UFFVeEJhMFlzUlVGQlR6SlBMRmRCUVdFc1NVRkJTU3hWUVVONFFqTlBMRVZCUVU4MFR5eFpRVUZqTEVsQlFVa3NWVUZEZWtJMVR5eEZRVUZQZFZJc1YwRkJZU3hIUVVOd1FuWlNMRVZCUVU4d1dDeFZRVUZaTEVkQlJWZzVTeXhGUVVGSmRVTXNaMEpCUTFZc1MwRkJTeXhWUVVGSldTeDFRa0ZEVUM5UUxFVkJRVk41V0N4RlFVRk5TU3d3UWtGQk1FSTNXQ3hGUVVGUmEwNHNSVUZCVHpsTUxFVkJRVTkzVnl4SFFVTXZSQ3hOUVVOR0xFdEJRVXNzVlVGQlNYaEpMRzlDUVVOUWNGQXNSVUZCVHpKUExGZEJRV0ZwU2l4RlFVRmhNVXNzUlVGQlVTeEhRVU42UXl4TlFVTkdMRXRCUVVzc1ZVRkJTVEJLTEhGQ1FVTlFOVmNzUlVGQlR6UlBMRmxCUVdOblNpeEZRVUZoTVVzc1JVRkJVU3hIUVVNeFF5eE5RVU5HTEV0QlFVc3NWVUZCU1hsS0xHOUNRVU5RTTFjc1JVRkJUM1ZTTEZkQlFXRnhSeXhGUVVGaE1Vc3NSVUZCVVN4SFFVTjZReXhOUVVOR0xFdEJRVXNzVlVGQlNYbExMRzFDUVVOUU0xZ3NSVUZCVHpCWUxGVkJRVmxGTEVWQlFXRXhTeXhGUVVGUkxFZEJTVFZETEU5QlFVOXNUaXhGUVVWVUxHbERRVUZwUTBFc1JVRkJVV3RPTEVWQlFVODVUQ3hGUVVGUGQxY3NSMEZEY2tRc1IwRkJiMElzYTBOQlFXaENOVmdzUlVGQlQyNUdMRXRCUTFSdFJpeEZRVUZQT0U4c1kwRkJaMElzU1VGQlNTeFZRVU16UWpsUExFVkJRVTg0VHl4alFVRmpMMUlzUzBGQlMybEVMRVZCUVU5clRpeE5RVUZOTEZOQlEyeERMRWRCUVc5Q0xHMURRVUZvUW14T0xFVkJRVTl1Uml4UFFVTm9RbTFHTEVWQlFVODRUeXhqUVVGblFpeEpRVUZKTEZWQlF6TkNPVThzUlVGQlQzbFRMRzFDUVVGeFFpeEpRVUZKTEZWQlJUVkNiVVlzUjBGQldTeERRVU5rTEUxQlFVMUZMRVZCUVdNMVN5eEZRVUZOY0ZNc1QwRkRNVUlzU1VGQlN5eEpRVUZKY1VNc1JVRkJTU3hGUVVGSFFTeEZRVUZKTW1Fc1JVRkJZVE5oTEVsQlEwWXNTVUZCZWtJclVDeEZRVUZOTDFBc1IwRkJSM2RSTEZsQlExZ3pUaXhGUVVGUE9FOHNZMEZCWXk5U0xFdEJRVXR0VVN4RlFVRk5MMUFzU1VGRmFFTTJReXhGUVVGUGVWTXNiVUpCUVcxQ01WWXNTMEZCUzIxUkxFVkJRVTB2VUN4SlFVczNReXhQUVVGUE5rTXNSMEZ3UlZnc1lTd3dSVU5NUVN4blFrRkRSWE5KTEZsQlFWa3lRaXhGUVVGcFFpeEpRVU16UWl4UFFVRlBRU3hMTERKRlEwWllMR2RDUVVORk0wSXNXVUZCV1RKQ0xFVkJRV2xDTEVsQlF6TkNMRTlCUVU5QkxFc3NNa1ZEUmxnc1owSkJRMFV6UWl4WlFVRlpNa0lzUlVGQmFVSXNTVUZETTBJc1QwRkJUMEVzU3l3eVJVTkdXQ3huUWtGRFJUTkNMRmxCUVZreVFpeEZRVUZwUWl4SlFVTXpRaXhQUVVGUFFTeExMREpGUTBaWUxHZENRVU5GTTBJc1dVRkJXVEpDTEVWQlFXbENMRWxCUXpOQ0xFOUJRVTlCTEVzc01rVkRSbGdzWjBKQlEwVXpRaXhaUVVGWk1rSXNSVUZCYVVJc1NVRkRNMElzVDBGQlQwRXNTeXgxUzBOS1dDeHRRa0ZGUVN4TlFVRnhRamhPTEZWQlFXZENMRlZCUTI1RGVsQXNXVUZCV1RKQ0xFVkJRV01zU1VGRGVFSnBTeXhSUVVOQkxFMUJRVTA0UkN4RlFVRlRMMDRzUjBGQlZVRXNSVUZCVHl0T0xFOUJRVk12VGl4RlFVRlBLMDRzVDBGQlV5eEhRVU51UkVNc1JVRkJVMmhQTEVkQlFWVkJMRVZCUVU5blR5eFBRVUZUYUU4c1JVRkJUMmRQTEU5QlFWTXNSMEZEYmtScVRpeEZRVUZUWml4SFFVRlZRU3hGUVVGUFpTeFBRVUZUWml4RlFVRlBaU3hQUVVGVExFZEJRM3BFTEU5QlFVOTBTeXhMUVVGTGVWUXNUMEZCVHl4RFFVTnFRalpFTEU5QlFVRkJMRVZCUTBGRExFOUJRVUZCTEVWQlEwRnFUaXhQUVVGQlFTeExRVlJPTEdFc2RVdERSa0VzYlVKQlEwRXNZVUZEUVN4WlFVVkJMR0ZCWVVFc1RVRkJjVUpyVGl4VlFVRmxMRlZCZDBWc1F6VlFMRmxCUVZreVFpeEZRVUZqTEVkQlFVbFRMRWRCUXpWQ2Qwb3NVVUY2UWtZc1MwRkJRVVlzU1VGQlowSXNRMEZCUXl4TFFVVnFRaXhMUVVGQmNrUXNVMEZCYlVJc1ZVRkJVM2RJTEdWQlJUVkNMRXRCUVVGRExGRkJRV3RDTEZGQlEyeENMRXRCUVVGRExFdEJRV1VzUjBGRFppeExRVUZCT1VVc1VVRkJhMEl5UlN4RlFVRlBTU3h2UWtGRGVrSXNTMEZCUVRGSExGTkJRU3REYzBjc1JVRkJUM2hFTEZsQlEzUkVMRXRCUVVGNlJTeE5RVUZuUW1sSkxFVkJRVTlMTEd0Q1FVTjJRaXhMUVVGQlF5eE5RVUZoTEVkQlEySXNTMEZCUVdwTUxGTkJRV2RDTEVkQlEyaENMRXRCUVVFeVF5eFpRVUZ0UWl4SFFVTnVRaXhMUVVGQlowTXNXVUZCYlVJc1IwRkRia0lzUzBGQlFYVkhMRTFCUVdFc1IwRkRZaXhMUVVGQlF5eEpRVUZYTEVkQlExZ3NTMEZCUVVNc1QwRkJZeXhIUVVOa0xFdEJRVUZETEU5QlFXTXNSMEZEWkN4TFFVRkJla0lzVFVGQlowSmxMRVZCUVU5WExGZEJRM1pDTEV0QlFVRkRMRmRCUVd0Q0xFZEJRMnhDTEV0QlFVRkRMRkZCUVd0Q0xFVkJRMnhDTEV0QlFVRkRMR0ZCUVhWQ0xFVkJRM1pDTEV0QlFVRkRMRlZCUVc5Q0xFVkJRM0JDTEV0QlFVRXpRaXhYUVVGeFFpeEhRVU55UWl4TFFVRkJlRVFzVjBGQmNVSXNSMEZIYmtJc1RVRkJUVE5ITEVWQlFWTXJTeXhGUVVGUFowSXNXVUZCV1dwUUxFZEJRVlZwVHl4RlFVRlBhVUlzYzBKQlFYTkNiRkFzUlVGQlVWTXNSMEZCWTFRc1JVRkRMMFlzVDBGQlQzWktMRXRCUVV0NVZDeFBRVUZQYUVnc1IwRXhSWEpDTEhsQ1FVTkZMRTFCUVU4c1RVRkZWQ3d3UWtGRFJTeE5RVUZQTEU5QlJWUXNNa0pCUTBVc1RVRkJUeXhSUVVWVUxIbENRVU5GTEUxQlFVOHNUVUZGVkN3eVFrRkRSU3hOUVVGUExGRkJSVlFzTWtKQlEwVXNUVUZCVHl4UlFVVlVMSFZDUVVORkxFMUJRVThzUTBGRFRDeERRVUZESzBzc1JVRkJUMnRDTEdOQlFXVXNRMEZCUXl4aFFVTjRRaXhEUVVGRGJFSXNSVUZCVDIxQ0xHVkJRV2RDTEVOQlFVTXNVVUZCVXl4aFFVRmpMRmxCUVdFc1kwRkJaU3hoUVVGakxITkNRVU14Uml4RFFVRkRia0lzUlVGQlQyOUNMR1ZCUVdkQ0xFTkJRM1JDTEZGQlEwRXNZVUZEUVN4WlFVTkJMR3RDUVVOQkxHbENRVU5CTEdkRFFVTkJMR2RDUVVsT0xIbENRVU5GTEUxQlFVOHNVVUZIVkN3eVFrRkRSU3hOUVVGUExGZEJRVmNzVlVGQlMwTXNkMEpCUjNwQ0xHMUNRVUZ0UW5SUUxFZEJRMnBDTEZGQlFVOUJMRVZCUVU5MVVDeE5RVzFEYUVJc05rSkJRVFpDZGxBc1JVRkJVVk1zUjBGRGJrTXNUVUZCVFN0UExFbEJRVk12VHl4RlFVRlhVQ3hKUVVGTFR5eEZRVUZYVUN4SFFVTndRMEVzUlVGQlN5dE9MRVZCUVU5M1FpeE5RVUZOYUZBc1IwRkZlRUlzU1VGQlNYbERMRVZCUVdNc1IwRXlRMnhDTEU5QmVrTkJRU3hGUVVGUGFFUXNSMEZCUzBFc1JVRkRXbWRFTEVWQlFVODJSeXhKUVVGTkxFTkJRVU1zUzBGRFpEZEhMRVZCUVU5blJDeFhRVUZYZWtZc1JVRkJWMmxRTEZWQlFWY3NWVUZCVDNaS0xGRkJRVkV4Uml4RlFVRlhhVkFzVlVGRGJFVjRUU3hGUVVGUGQwUXNVMEZCVnl4VFFVTnNRbmhFTEVWQlFVOTNTU3haUVVGakxFZEJRM0pDZUVrc1JVRkJUMmxNTEZGQlFWVXNVVUZEYWtKcVRDeEZRVUZQYTB3c1MwRkJUeXhIUVVOa2JFd3NSVUZCVDI5SExGRkJRVlV5UlN4RlFVRlBTU3h2UWtGRGVFSnVUQ3hGUVVGUGVVVXNVMEZCVjNOSExFVkJRVTk0UkN4WlFVVnlRaXRGTEVkQlJVWjBUU3hGUVVGUGQwUXNVMEZCVjNWSUxFVkJRVTh3UWl4WlFVRlpTQ3hIUVVOeVEzUk5MRVZCUVU5clRDeExRVUZQU0N4RlFVRlBNa0lzVVVGQlVVb3NSMEZETjBKMFRTeEZRVUZQTmtjc1NVRkJUWGxHTEVWQlFVOTZSaXhMUVVGUGVVWXNSVUZCVDNwR0xFbEJRVWxzV2l4UFFVRlRMRVZCUVVreVpTeEZRVUZQZWtZc1NVRkJUV3RGTEVWQlFVODBRaXhQUVVGUE0xQXNTMEZGT1VWblJDeEZRVUZQZDBRc1UwRkJWMjlLTEZOQlFWTndTaXhUUVVGWGIwb3NVMEZCVTNCS0xGTkJRVmNzVVVGRE1VUjRSQ3hGUVVGUE5rY3NTVUZCVFM5S0xFVkJRVThyU2l4TFFVRlBMMG9zUlVGQlR5dEtMRWxCUVVsc1dpeFBRVUZUTEVWQlFVbHRVQ3hGUVVGUEswb3NTVUZCVFd0RkxFVkJRVTgwUWl4UFFVRlBNMUFzUjBGRE9VVm5SQ3hGUVVGUGQwa3NXVUZCWTJwU0xGTkJRVk5wVWl4WlFVRmphbElzVTBGQlUybFNMRmxCUVdNc1IwRkRia1Y0U1N4RlFVRlBhVXdzVVVGQlZURlVMRk5CUVZNd1ZDeFJRVUZWTVZRc1UwRkJVekJVTEZGQlFWVXNSMEZGZGtScVRDeEZRVUZQYTB3c1MwRkJUekJDTEZOQlFWTXhRaXhMUVVGUE1FSXNVMEZCVXpGQ0xFdEJRVThzUjBGRE9VTnNUQ3hGUVVGUGIwY3NVVUZCVlRKRkxFVkJRVTg0UWl4eFFrRkJjVUl4Vml4VFFVY3ZRelpKTEVWQlFVODRReXhOUVVGUmFVa3NSVUZCVDBzc2EwSkJRM1JDY0V3c1JVRkJUM0ZNTEUxQlFWRXNSMEZEWm5KTUxFVkJRVThyUXl4WlFVRmpMRWRCUTNKQ0wwTXNSVUZCVHl0RkxGbEJRV01zUjBGRGNrSXZSU3hGUVVGUFNTeFRRVUZYTEVkQlEyeENTaXhGUVVGUGMwd3NUVUZCVVN4SFFVTm1kRXdzUlVGQlQzVk1MRWxCUVUwc1IwRkRZblpNTEVWQlFVOTNUQ3hQUVVGVExFZEJRMmhDZUV3c1JVRkJUM2xNTEU5QlFWTXNSMEZEYUVKNlRDeEZRVUZQWjBzc1RVRkJVV1VzUlVGQlQxY3NVMEZCVXpGTUxFVkJRVTlvUkN4SlFVTjBRMmRFTEVWQlFVOHlUQ3hYUVVGaExFZEJRM0JDTTB3c1JVRkJUelJNTEZGQlFWVXNSVUZEYWtJMVRDeEZRVUZQTmt3c1lVRkJaU3hGUVVOMFFqZE1MRVZCUVU4NFRDeFRRVUZYWml4RlFVRlBLMElzV1VGMlEyUXNSMEYxUTJkRE9VMHNSVUZCVDJoRUxFbEJRMnhFWjBRc1JVRkJUMjFMTEZkQlFXRXNSMEZEY0VKdVN5eEZRVUZQTWtjc1YwRkJZU3hIUVVOaU0wY3NSVUZIVkN4aFFVRmhla01zUjBGRFdDeFBRVUZQUVN4SFFVRmpRU3hGUVVGWFVDeEpRVUYzUWl4TFFVRnNRazhzUlVGQlYxQXNSMEZCV1U4c1JVRkJWMUFzUjBGQlN5eEpRVWN2UlN4blFrRkJaMEpCTEVkQlEyUXNUVUZCVnl4TFFVRlFRU3hGUVVOTExFbEJRVTFCTEVWQlFVZHFUU3hOUVVGTkxFdEJRVXNzUjBGRmNFSXNSMEZKV0N4alFVRmpaMk1zUjBGRFdpeEpRVUZKYkVjc1JVRkJUU3hEUVVGRExFdEJSVmdzUjBGQldTeExRVUZTYTBjc1JVRkJXU3hEUVVWa0xFMUJRVTB2VUN4RlFVRjFRaXhOUVVGc1FpdFFMRVZCUVVrellTeFBRVUZQTEVkQlFXRXlZU3hGUVVGTlFTeEZRVUZOTEVsQlJTOURMRWRCUVZjc1RVRkJVQzlRTEVWQlFWa3NRMEZEWkN4TlFVRk5aMUVzUlVGQlVXaFJMRVZCUVVkcVRTeE5RVUZOTEV0QlEycENhMk1zUlVGQlYwUXNSVUZCVFhKbUxFOUJRM1pDTEVsQlFVbDFaaXhGUVVGUkxFZEJRMW9zU1VGQlN5eEpRVUZKYkdRc1JVRkJTU3hGUVVGSFFTeEZRVUZKYVdRc1JVRkJWV3BrTEVsQlExZ3NTMEZCWW1ka0xFVkJRVTFvWkN4TFFVTlNhMlFzUjBGQlUwWXNSVUZCVFdoa0xFZEJSMlpyWkN4RlFVRTBRaXhOUVVGd1FrRXNSVUZCVFRsaExFOUJRVThzUjBGQllUaGhMRVZCUVZGQkxFVkJRVkVzU1VGSGJFUkJMRVZCUVRoQ0xFMUJRWFJDUVN4RlFVRk5PV0VzVFVGQlRTeEZRVUZITEVkQlFXRTRZU3hGUVVGUkxFbEJRVTFCTEVWQlRXeEVja2NzUlVGQlNXcFlMRXRCUVV0elpDeExRVXRxUWl4UFFVRlBja2NzUlVGSFZDeGxRVUZsTjBvc1IwRkRZaXhQUVVGSlFTeEZRVUZIZEVzc1VVRkJVU3hOUVVGUkxFZEJRM0pDYzBzc1JVRkJTMEVzUlVGQlJ6RkhMRkZCUVZFc1YwRkJXU3hKUVVGSlFTeFJRVUZSTEZWQlFWY3NTMEZEZWtOQkxGRkJRVkVzVFVGQlR5eEpRVUZKUVN4UlFVRlJMRkZCUVZNc1NVRkZka01zVlVGQlN6WlhMRTlCU1doQ0xHMUNRVUZ0UWtNc1IwRkRha0lzVDBGQlNVRXNSVUZCU3pGaExGRkJRVkVzVlVGQldTeEZRVUZWTEZGQlEyNURNR0VzUlVGQlN6RmhMRkZCUVZFc1YwRkJZU3hGUVVGVkxGTkJRM0JEYTJFc1ZVRkJXVUVzVTBGQlUzQktMRk5CUVdsQ2Iwb3NVMEZCVTNCS0xGTkJRelZETEZGQlIxUXNiVUpCUVcxQ05Fb3NSVUZCVFhCUkxFZEJTM1pDTEU5QlNuRkNiMUVzUlVGRGJFSTVWeXhSUVVGUkxGTkJRVlVzU1VGRGJFSkJMRkZCUVZFc1ZVRkJWeXhKUVVOdVFrRXNVVUZCVVN4VlFVRlhMRTFCUTBVd1J5eEZRVWN4UWl4blFrRkJaMEpCTEVWQlFVc3NTMEZEYmtJc1QwRkJUMEVzUlVGQlIycE5MRTFCUVUwc1MwRkJTM0JFTEU5QlFWTXNSVUZIYUVNc2JVSkJRVzFDY1ZNc1IwRkRha0lzVDBGQlR5eFZRVUZKZFVRc1dVRkJXWFpFTEVWQlFVOTNSQ3hUUVVGVmVFUXNSVUZCVDJoRUxFbEJSMnBFTEhWQ1FVRjFRbWRFTEVkQlEzSkNMRTFCUVUxelJDeEZRVUZOZVVnc1JVRkJUM2hJTEZsQlFWbDJSQ3hIUVVNdlFpeFBRVUZQTEZWQlFVbHZTQ3hoUVVGaE9VUXNSVUZCU3l4TlFVY3ZRaXcwUWtGQk5FSnVUU3hIUVVNeFFpeEhRVUZKUVN4SFFVRlZRU3hGUVVGUFNTeFRRVUZWTEVOQlF6ZENMRTFCUVUwNFZpeEZRVUZKYkZjc1JVRkJUMGtzVTBGQlV5dFdMRk5CUTNoQ0xHdEZRVU5CYmxjc1JVRkJUMGtzVTBGRFVDeExRVU5CTEVWQlEwRXNUVUZEUVdkWExGbEJRMGt6WjBJc1JVRkJTU3hWUVVOS05HZENMRVZCUVVzc1YwRkRURU1zUlVGQlNXSXNVMEZCVXpGQ0xFdEJRMjVDTEVkQlFVbHRReXhGUVVGRk0yRXNVVUZCVVRsR0xFbEJRVTE1WjBJc1JVRkJSVE5oTEZGQlFWRTRZU3hIUVVGTExFTkJRMnBETEUxQlFVMUZMRVZCUVUwNVowSXNSVUZCU1RablFpeEhRVUZMU2l4SFFVRkxMR2RDUVVVeFFpeFBRVUZsTEVkQlJFRkxMRVZCUVVrell5eE5RVUZOTEUxQlFVMXdSQ3hQUVVGVExFVkJSUzlDSzJZc1JVRkZRVXdzUlVGSFZDeFBRVUZQUVN4RlFVZFVMRTFCUVU4c1IwRkpXQ3hwUWtGQmFVSnlUaXhGUVVGUlVDeEZRVUZMYTA4c1IwRkROVUlzU1VGQlNVTXNSVUZCVXl4RFFVTllReXhUUVVGVkxFZEJRMVpETEZWQlFWVXNSVUZEVmtNc2FVSkJRV2xDTEVWQlEycENReXhsUVVGbExFVkJRMlo2VGl4WFFVRlhMRVZCUTFoelF5eHhRa0ZCY1VJc1JVRkRja0p2VEN4VFFVRlRMRWRCWjBOWUxFOUJla0pCVEN4RlFVRlBSU3hUUVVGWEwwTXNSVUZCVDIxRUxHZENRVUZuUWxBc1IwRk5la05ETEVWQlFVOUhMR2RDUVVGclFtaEVMRVZCUVU5dlJDeDVRa0ZCZVVKdVR5eEZRVUZSTkU0c1JVRkJUMFVzVlVGTmVFVkdMRVZCUVU5SkxHTkJRV2RDYWtRc1JVRkJUM0ZFTEhWQ1FVRjFRak5QTEVkQlRYSkViVThzUlVGQlR5OUxMRzlDUVVGelFtdEpMRVZCUVU5elJDdzJRa0ZCTmtJMVR5eEhRVTFxUlcxUExFVkJRVTl5VGl4VlFVRlpkMHNzUlVGQlQzVkVMRzFDUVVGdFFuUlBMRVZCUVU5b1JDeEpRVU0zUXpSUkxFVkJSMVFzZFVKQlFYVkNSQ3hIUVVOeVFpeFBRVUZSUVN4RlFVZFdMR2REUVVGblF6Tk9MRVZCUVZFNFRpeEhRVUZYTEVkQlEycEVMRWxCUVV0QkxFVkJRMGdzVDBGQlR5eEZRVVZVTEVkQlFVazVUaXhGUVVGUE1rY3NWMEZCV1N4RFFVTnlRaXhOUVVGTk5FZ3NSVUZCYlVKMlR5eEZRVUZQTWtjc1YwRkJWelpJTEZGQlFWVjRUeXhGUVVGUE1rY3NWMEZCVnpaSUxGVkJRVmw0VHl4RlFVRlBNa2NzVjBGSGNFWTRTQ3hGUVVGTkxFbEJRVWxzVml4TFFVTldiVllzUlVGQlZVUXNSVUZCU1VVc1kwRkRaRU1zUlVGQlYwZ3NSVUZCU1Vrc1YwRkRaa01zUlVGQlUwd3NSVUZCU1Uwc1ZVRkRZa01zUlVGQlZWQXNSVUZCU1ZFc1YwRk5jRUlzVDBGTWJVSlNMRVZCUVVsVExHRkJTMmhDV0N4RlFVcFpMRWxCUVVsb1ZpeExRVUZMYlZZc1JVRkJVMFVzUlVGQlZVVXNSVUZCVVVVc1JVRkJWU3hWUVVGTFJ5eDVRa0ZEZUVOWUxGVkJTemxDTEU5QlFVOHNSVUZKV0N3NFFrRkJPRUl2VHl4SFFVTTFRaXhaUVVGWk5VNHNTVUZCVWpST0xGRkJRVFJETlU0c1NVRkJka0kwVGl4RlFVRkpkVU1zWjBKQlEzUkNka01zUlVGQlNYVkRMR2xDUVVGdFFpeFZRVUZKUXl4eFFrRkJkVUo0UXl4RlFVRkpOa2dzV1VGSEwwUXNNRUpCUVRCQ2RFc3NSMEZEZUVJc1QwRkJUeXhWUVVGSk1rWXNZVUZCWVROR0xFZEJSekZDTEc5RFFVRnZRM2xETEVkQlJXeERMRmxCUVZrMVRpeEpRVUZTTkU0c1VVRkJjME0xVGl4SlFVRnFRalJPTEVWQlFVbERMRlZCUTNSQ1JDeEZRVUZKYjBRc2IwSkJSMklzYTBOQlFXdERNa1lzUjBGRGFFTXNUVUZCVFhsRUxFVkJRV1ZzUWl4RlFVRlBjVVVzVlVGQlZYSkZMRVZCUVU5clFpeGpRVU4yUTBNc1JVRkJaMEp1UWl4RlFVRlBjVVVzVlVGQlZYSkZMRVZCUVU5dFFpeGxRVU40UTBNc1JVRkJaMEp3UWl4RlFVRlBjVVVzVlVGQlZYSkZMRVZCUVU5dlFpeGxRVVU1UXl4SlFVRkpNVWdzUlVGRFNpeEhRVUZKSzBRc1IwRkJLMElzUzBGQmFFSkJMRVZCUVc5Q0xFTkJRM0pETEVsQlFVazJSeXhGUVVGeFFpeEhRVU55UWpkSExFVkJRVms1Vml4UlFVRlJMRXRCUVU4c1NVRkROMEl5WXl4RlFVRnhRamRITEVWQlFWbDZXQ3hOUVVGTkxFdEJRVXNzUzBGRk1VTnJZaXhGUVVGaGNVUXNVMEZCVXpsSExFbEJRV2RDZVVRc1JVRkJZWEZFTEZOQlFWTkVMRTFCUXpsRU5Vc3NSVUZCVjNOSExFVkJRVTlyUWl4bFFVVm9Ra01zUlVGQlkyOUVMRk5CUVZNNVJ5eEpRVUZuUWpCRUxFVkJRV052UkN4VFFVRlRSQ3hOUVVOb1JUVkxMRVZCUVZkelJ5eEZRVUZQYlVJc1owSkJSV2hDUXl4RlFVRmpiVVFzVTBGQlV6bEhMRWxCUVdkQ01rUXNSVUZCWTIxRUxGTkJRVk5FTEUxQlEyaEZOVXNzUlVGQlYzTkhMRVZCUVU5dlFpeGxRVWQwUWl4UFFVRlBNVWdzUlVGSFZDd3dRa0ZCTUVKdVFpeEhRVU40UWl4TlFVRk5NVllzUlVGQlRTeFZRVUZKT0ZZc2IwSkJRVzlDU2l4SFFVTndReXhQUVVGUE1WWXNSVUZCU1RKb1FpeFBRVUZQTEVkQlFVZERMR05CUVdkQ05XaENMRVZCUVVsM1JTeE5RVUZOTEVsQk9WWnVSQ3hoTEhOTFEycENRU3h0UWtGRlFTeE5RVUZ4UW5Ga0xGVkJRV2RDTEZWQlEyNURkRlVzV1VGQldUSkNMRVZCUVdNc1NVRkZlRUlzVDBGRVFXbExMRkZCUTA5NFZDeExRVUZMZVZRc1QwRkJUMnhMTEVkQlIzSkNMSGRDUVVGM1FqUlRMRVZCUVdGRExFZEJSVzVETEU5QlJFRkVMRVZCUVZsRExFVkJRVmt6VXl4SlFVRk5MRWxCUVVzeVV5eEhRVU0xUWtRc1IwRlNXQ3hoTEhWTFEwWkJMRzFDUVVWQkxFMUJRWEZDUlN4VlFVRmxMRlZCUTJ4RGVsVXNXVUZCV1RKQ0xFVkJRV01zU1VGRmVFSXNUMEZFUVdsTExGRkJRMDlxU3l4SFFVaFlMR0VzZFV0RFJrRXNiVUpCUlVFc1lVRkZRU3hOUVVGeFFpdFRMRlZCUVdFc1ZVRkRhRU1zYVVOQlEwVXNUMEZCVHl4VlFVRkxNMGtzWTBGSFpDOU1MRmxCUVZreVFpeEZRVUZqTEVsQlEzaENhVXNzVVVGRFFTeE5RVUZOTjBjc1JVRkJUWEJFTEVkQlFWVkJMRVZCUVU5dlJDeEpRVUZOY0VRc1JVRkJUMjlFTEVsQlFVMHNSMEZETVVNclNpeEZRVUZSYms0c1IwRkJWVUVzUlVGQlQyMU9MRTFCUVZGdVRpeEZRVUZQYlU0c1RVRkJVU3hIUVVkb1JIcElMRVZCUVZVeFJpeEhRVUZWUVN4RlFVRlBNRVlzVVVGQlZURkdMRVZCUVU4d1JpeFJRVUZWTEVkQlEzUkVjMDRzUzBGQlowSm9WQ3hKUVVGVlFTeEZRVUZQWjFRc1owSkJRV2RDYUZRc1JVRkJUMmRVTEdOQlEzaEVjRkVzUlVGQlZ6VkRMRWRCUVZWQkxFVkJRVTgwUXl4VFFVRlhOVU1zUlVGQlR6UkRMRk5CUVZjc1IwRkRla1EyUXl4RlFVRmxla1lzUjBGQlZVRXNSVUZCVDNsR0xHRkJRV1Y2Uml4RlFVRlBlVVlzWVVGQlpYTk9MRVZCUVVzdlRDeHZRa0ZETVVWSExFVkJRWEZDYmtnc1IwRkJWVUVzUlVGQlQyMUlMRzFDUVVGeFFtNUlMRVZCUVU5dFNDeHRRa0ZCY1VJMFRDeEZRVUZMTDB3c2IwSkJRelZHUlN4RlFVRnZRbXhJTEVkQlFWVkJMRVZCUVU5clNDeHJRa0ZCYjBKc1NDeEZRVUZQYTBnc2EwSkJRVzlDTmt3c1JVRkJTeTlNTEc5Q1FVTjZSa2tzUlVGQmIwSndTQ3hIUVVGVlFTeEZRVUZQYjBnc2EwSkJRVzlDY0Vnc1JVRkJUMjlJTEd0Q1FVRnZRakpNTEVWQlFVc3ZUQ3h2UWtGRGVrWkxMRVZCUVcxQ2NrZ3NSMEZCVlVFc1JVRkJUM0ZJTEdsQ1FVRnRRbkpJTEVWQlFVOXhTQ3hwUWtGQmJVSXdUQ3hGUVVGTEwwd3NiMEpCU1RWR0xFOUJSbmxDYUVnc1JVRkJUMmxVTEd0Q1FVRnRRbXBVTEVWQlFVOXBWQ3hwUWtGRmJrUjRZeXhMUVVGTGVWUXNUMEZCVHl4RFFVTnFRamxITEVsQlFVRkJMRVZCUTBFclNpeE5RVUZCUVN4RlFVTkJla2dzVVVGQlFVRXNSVUZEUVhOT0xHTkJRVUZCTEVWQlEwRndVU3hUUVVGQlFTeEZRVU5CTmtNc1lVRkJRVUVzUlVGRFFUQkNMRzFDUVVGQlFTeEZRVU5CUkN4clFrRkJRVUVzUlVGRFFVVXNhMEpCUVVGQkxFVkJRMEZETEdsQ1FVRkJRU3hGUVVOQk5rd3NVVUZhWXl4TFFXZENiRUlzZDBKQlFYVkNMRTFCUVVWcVVTeEpRVU4yUWl4UFFVRkpRU3hIUVVGVFFTeEZRVUZOTEVsQlFVMUJMRVZCUVUwc1IwRkJSeXRKTEVsQlEzcENMMGtzUlVGQlRTeEhRVUZISzBrc1NVRkZXQ3hWUVVGTE5VSXNZMEZIWkN4bFFVRmxjRXNzUlVGQll5eEpRVXN6UWl4TlFVcHpRaXh2UWtGQldETkdMRkZCUVRCQ1FTeFBRVUZQZVZZc1ZVRkJXWHBXTEU5QlFVOTVWaXhUUVVGVFVTeExRVWx3UlhSUkxFZEJRVlZCTEVWQlFVOXpVU3hMUVVOYWRGRXNSVUZCVDNOUkxFdEJSVlFzUzBGd1JGZ3NZU3gxUzBOS1FTeG5Ra0ZGUVN4WlFVTkJMR0ZCVVVFc2JVSkJRV2xETmtNc1JVRkJaU3hKUVVNNVF5eEpRVU5KTTJFc1JVRkJZeXhEUVVGRExGVkJRVmNyVFN4alFXTTVRaXhQUVdKakxFbEJRVUUzVVN4aFFVTmFMRlZCUTBGNVpTeEhRVU4xUlN4SlFVRkJOV0VzYjBKQlFXMUNReXhOTEhWTFEyWTVSaXh0UWtGRFFTeGhRVU5CTEdGQlEwRXNZVUZEUVN4aFFVTkJMR0ZCUTBFc1lVRkRRU3hoUVVOQkxHRkJRMEVzWVVGRFFTeGhRVVZCTEUxQlFYRkNOR0VzUlVGdFFtNUNMMVVzV1VGQldXOURMRVZCUVhkQ05GTXNSVUZCWXl4SlFVTm9SRFZqTEV0QlFVdG5TeXhYUVVGaFFTeEZRVU5zUW1oTExFdEJRVXMyVWl4TlFVRlJMRWxCUVVrc1ZVRkRha0kzVWl4TFFVRkxObU1zVTBGQlZ5eEpRVUZKTEZWQlFWTkVMRVZCUVU5RExGVkJRM0JETjJNc1MwRkJTM2ROTEUxQlFWRXNTVUZCU1N4VlFVTnFRbmhOTEV0QlFVdHBUeXhYUVVGaExFbEJRVWtzVlVGRGRFSnFUeXhMUVVGTGEwOHNXVUZCWXl4SlFVRkpMRlZCUTNaQ2JFOHNTMEZCU3paUkxGZEJRV0VzU1VGQlNTeFZRVU4wUWpkUkxFdEJRVXR2VHl4alFVRm5RaXhKUVVGSkxGVkJRM3BDY0U4c1MwRkJTeXRTTEcxQ1FVRnhRaXhKUVVGSkxGVkJRemxDTDFJc1MwRkJTMmRZTEZWQlFWa3NTVUZCU1N4VlFVTnlRbWhZTEV0QlFVdDVVaXhSUVVGVkxFbEJRVWtzVlVGRGJrSjZVaXhMUVVGTGVVMHNUMEZCVXl4SlFVRkpMRlZCUVU5NlRTeExRVUZMWjBzc1YwRkJXVFJUTEVWQlFVOXVVU3hSUVVOcVJIcE5MRXRCUVVzMlVDeGhRVUZsTEVsQlFVa3NWVUZCVHpkUUxFdEJRVXRuU3l4WFFVRlpORk1zUlVGQlQyNVJMRkZCUTNaRWVrMHNTMEZCUzJ0TkxFbEJRVTBzU1VGQlNTeFZRVUZKZVZFc1JVRkJVMGNzWVVGQllUbGpMRXRCUVV0NVRTeFBRVUZSZWswc1MwRkJTMmRMTEZkQlFWazBVeXhKUVVOMlJUVmpMRXRCUVVzMFVpeFBRVUZUTEVsQlFVa3NWVUZEYkVJMVVpeExRVUZMTUUwc1MwRkJUeXhKUVVGSkxGVkJRVXRwVVN4RlFVRlRTU3hqUVVGakwyTXNTMEZCVFRSakxFbEJRMnhFTldNc1MwRkJTMmRrTEZWQlFWa3NTVUZCU1N4VlFVZDJRaXh2UWtGQmIwSjJVU3hGUVVGUmVrTXNSVUZCV1RSVExFZEJRM1JETEUxQlFVOHNRMEZEVEVzc1kwRkJZeXhGUVVOa2JrNHNWVUZCVjNKRUxFVkJRVTg0UXl4VFFVTm1ka1lzUzBGRFFYbERMRWRCU1ZBc2NVSkJRWEZDTlVjc1JVRkJUU3RYTEVkQlEzcENMRTlCUVVsQkxFZEJRVlZCTEVWQlFVOXNVU3hOUVVGUmExRXNSVUZCVDJ4UkxFdEJRVXRETEVsQlEyaERMRWxCUVV0cFVTeEZRVUZQYkZFc1RVRkhXaXhEUVVGRkswSXNaVUZFWXpWSkxFVkJRVXMwUnl4UFFVRlBhRVFzUzBGQlR6VkVMRVZCUVV0eFJ5eEpRVUZKYzBNc1QwRkJVeXhWUVVGSlJTeHZRa0ZCYzBJc1ZVRkJTWGRJTEhOQ1FVczVSaXhUUVVORkxFOUJRVTlzVnl4TFFVRkxlVTBzVDBGQlQyaEVMRWxCTVVSMlFpeGhMSFZMUTJKQkxHMUNRVU5CTEdGQlJVRXNXVUZGUVN4TlFVRnhRbmxVTEVWQlMyNUNkRllzV1VGQldYVldMRWRCUlZadVpDeExRVUZMYjJRc1ZVRkJXWEJrTEV0QlFVdHZaQ3hWUVVGVmFsWXNTMEZCUzI1SkxFMUJRM0pEUVN4TFFVRkxjV1FzWlVGQmFVSnlaQ3hMUVVGTGNXUXNaVUZCWld4V0xFdEJRVXR1U1N4TlFVTXZRMEVzUzBGQlN6WkpMRmxCUVdNM1NTeExRVUZMTmtrc1dVRkJXVllzUzBGQlMyNUpMRTFCUTNwRFFTeExRVUZMYldRc1QwRkJVMEVzUlVGRFpHNWtMRXRCUVV0dFpDeFBRVUZQUnl4UlFVRlZkR1FzUzBGQlMzRmtMR1ZCUXpOQ2NtUXNTMEZCUzIxa0xFOUJRVTlKTEZWQlFWbDJaQ3hMUVVGTGIyUXNWVUZETjBKd1pDeExRVUZMZDJRc1IwRkJTeXhKUVVGSkxGVkJRVWQ0WkN4TlFVZGFOa2tzV1VGQldWTXNSVUZCWjBKRExFVkJRWGRDTEVkQlFVbHJWU3hIUVVNM1JDeE5RVUZOYmxrc1JVRkJjVU1zUTBGRGVrTXJSQ3hIUVVGSmNrb3NTMEZCUzNGS0xFZEJRMVJzVUN4TFFVRk5MRlZCUVZsMWFrSXNjVUpCUTJ4Q05WVXNUMEZCVVN4VlFVRlRReXhWUVVOcVFrOHNUMEZCUVVFc1JVRkRRVU1zVDBGQlFVRXNSVUZEUVd0VkxGZEJRVUZCTEVkQlJVWjZaQ3hMUVVGTGJXUXNUMEZCVDNSVkxGbEJRVmwyUkN4SFFVVnNRamhZTEZWQlFWVXpZeXhIUVVOb1FpeE5RVUZOTEVkQlFVVTBTU3hGUVVGRkxFdEJRVVZzVUN4RlFVRkpMRTlCUVVVeVR5eEZRVUZOTEU5QlFVVlJMRVZCUVUwc1QwRkJSVU1zUjBGQmMwTTVTU3hGUVVGRmExY3NTMEZGZEVWNFl5eEpRVUZUTEZWQlFWbDNha0lzYzBKQlEzWkNNMlFzUzBGQlMzZGtMRWRCUVVkcVZpeEpRVUZKWlN4RlFVRlJReXhIUVVkb1FqaFVMR1ZCUVdVMVl5eEhRVU55UWpKRUxGRkJRVkZYTEV0QlFVdDBSU3hKUVc1RGFrSXNXVUYxUTBFc1NVRkJTWGxqTEVWQlFWbHlXQ3hQTERCT1F6ZERhRUlzYlVKQlJVRXNaMEpCUlVVc2NVTkJRMFVzVFVGQlR5d3dRa0ZGVkN4clEwRkRSU3hOUVVGUExIVkNRVVZVTEd0RFFVTkZMRTFCUVU4c2RVSkJTVlFzYlVOQlEwVXNUVUZCVHl4M1FrRkZWQ3huUTBGRFJTeE5RVUZQTEhGQ1FVVlVMR2REUVVORkxFMUJRVThzY1VKQlNWUXNaME5CUTBVc1RVRkJUeXh4UWtGRlZDeHJRMEZEUlN4TlFVRlBMSFZDUVVWVUxEWkNRVU5GTEUxQlFVOHNhMEpCU1ZRc2JVTkJRMFVzVFVGQlR5eHhRa0ZGVkN4blEwRkRSU3hOUVVGUExIRkNRVVZVTEdkRFFVTkZMRTFCUVU4c2NVSkJSVlFzYTBSQlEwVXNUVUZCVHl4clEwRkZWQ3dyUTBGRFJTeE5RVUZQTEc5RFFVVlVMQ3REUVVORkxFMUJRVThzYjBOQlJWUXNiME5CUVc5RGRVY3NSMEZEYkVNc1QwRkJNa1FzU1VGQmRrUkJMRVZCUVZkcVRpeFJRVUZSTEZWQlFWTjNUU3gxUWtGRGRrSlRMRVZCUVZkeVNpeFJRVUZSTEZWQlFWTTBTU3h6UWtGQmRVSXNWVUZCVTJsVExIVkNRVVZpTEVsQlFYQkVlRklzUlVGQlYycE9MRkZCUVZFc1ZVRkJVM2xQTEc5Q1FVTjJRbmhDTEVWQlFWZHlTaXhSUVVGUkxGVkJRVk0yU3l4dFFrRkJiMElzVlVGQlUybFJMRzlDUVVWTUxFbEJRWHBFZWxJc1JVRkJWMnBPTEZGQlFWRXNWVUZCVTNkUExIbENRVU4yUW5aQ0xFVkJRVmR5U2l4UlFVRlJMRlZCUVZNMFN5eDNRa0ZCZVVJc1ZVRkJVMjFSTEhsQ1FVVm9SU3g1UWtGQmVVSXhVaXhKUVVWc1F5eDFRa0ZCZFVKQkxFZEJRM0pDTEUxQlFVMHlVaXhGUVVGWE0xSXNSVUZCVnpWUExFMUJRVTBzUzBGSmJFTXNUVUZCVHl4RFFVRkZjMHdzVDBGSVVXbFdMRVZCUVZNc1IwRkJSM1puUWl4TlFVRk5MRXRCUTFnc1IwRkJSM1ZHTEZGQlFWRXNTVUZCU3l4SlFVVjJRbWxpTEZWQlJFTkVMRVZCUVZNc1NVRkhOMElzYjBOQlFXOURNMUlzUjBGRGJFTXNUVUZCVHl4NVFrRkJlVUpCTEUxQlMzWkNMRVZCUVVFMlVpeHZRa0ZCYzBJc1UwRkRkRUlzUlVGQlFVTXNiMEpCUVhOQ0xGVXNNa1ZEYWtadVF5eE5RVUZ4UWtNc1JVRkhia0oyVnl4WlFVRlpOa01zUlVGQll5eExRV1V4UWl4bFFVRmxibEFzUjBGRFlpeFBRVUZqTEU5QlFWWkJMRVZCUTBzc1dVRkZTMmRFTEVsQlFWWm9SQ3hGUVVOTExGbEJSVVpCTEVWQlFVMXpUU3haUVVGWmFrOHNTMEZITTBJc1lVRkJZVTBzUjBGRFdDeE5RVUVyUWl4alFVRjRRbXRyUWl4RlFVRlBReXhSUVVGUmJtdENMRWxCUVdkRUxGTkJRWGhDYTJ0Q0xFVkJRVTlETEZGQlFWRnVhMElzUjBGSEwwUXNaVUZCWlVFc1IwRkRZaXhOUVVGdFFpeHJRa0ZCVWtFc1JVRkJNRUpCTEVWQlEzUkNMRk5CUVZKQkxFVkJSMVFzZFVKQlFYVkNiMnRDTEVkQlEzSkNMRTFCUVUxRExFVkJRVmRFTEVWQlFVY3ZaMElzVjBGRmNFSXNUVUZCYVVJc2FVSkJRV0puYUVJc1IwRkRZU3hyUWtGQllrRXNSMEZEWVN4clFrRkJZa0VzUjBGRFlTeHRRa0ZCWWtFc1IwRkRZU3hYUVVGaVFTeEZRVWxPTjBzc1QwRkJUeTlUTEVkQlEwd3NUVUZCVFRaa0xFVkJRVmwyWlN4TFFVRkxORWdzV1VGQldXcFBMRXRCWjBkdVF5eFBRUzlHYTBKM2EwSXNSVUZCVDBNc1VVRkJVVEZrTEVkQlIycERia1lzVDBGQlQxRXNTMEZCU3pKRkxFZEJRVTg1UkN4VFFVRlRka0lzU1VGRk1VSXNTVUZCU1hkaUxFVkJSVUV4WXl4RlFVUkJjV3RDTEVWQlFVMHNTMEZGVGtNc1IwRkJaU3hGUVVObVF5eEhRVUZuUWl4RlFVTm9Ra01zUlVGQllTeFBRVU5pY21wQ0xFVkJRV0VzUzBGSGFrSXNSMEZCYlVNc1YwRkJMMEkyYVVJc1JVRkJUME1zVVVGQlVURmtMRVZCUVUxeVJpeEpRVUZ2UWl4RFFVTXpRM2RpTEVWQlFWTnVWeXhGUVVGTmNrWXNSMEZEWml4SlFVRkpkV3BDTEVWQlFTdERMRWxCUVM5Q2NtcENMRTlCUVU5UkxFdEJRVXM0WVN4SFFVRlJlbU1zVDBGRGVFTnhhMElzUlVGQlpUVklMRVZCUVU4MFNDeGhRVUZsTlVnc1JVRkJUelJJTEdGQlFXVkJMRVZCUXpORVF5eEZRVUZuUWpkSUxFVkJRVTgyU0N4alFVRm5RamRJTEVWQlFVODJTQ3hqUVVGblFrRXNSVUZET1VSR0xFZEJRVTlKTEVkQlFXbENMMGdzUlVGQlR6SklMRWxCUVUwelNDeEZRVUZQTWtnc1NVRkJUVUVzUlVGRGJFUnNha0lzUlVGQlUzTnFRaXhKUVVGclFpOUlMRVZCUVU5MllpeFBRVUV3UWl4TFFVRnFRblZpTEVWQlFVOTJZaXhOUVVFclFuVmlMRVZCUVdaQkxFVkJRVTkyWWl4TlFVTjZSVUVzUlVGQlVYTnFRaXhIUVVGcFFrb3NSVUZCVFVFc1JVRkJUV3hxUWl4RlFVTnlRMjVDTEVWQlFVOW5hMElzUlVGQlQwTXNVVUZCVVRscFFpeEhRVU4wUW5GcVFpeEZRVUZST1Vnc1JVRkJUemhJTEUxQlFWRTVTQ3hGUVVGUE9FZ3NUVUZCVVVFc1QwRkZkRU55YWtJc1JVRkJVVzlHTEVWQlFVMXlSaXhIUVVOa2JXcENMRVZCUVUxc2FrSXNSVUZEVG0xcVFpeEZRVUZsUVN4RlFVTm1ReXhGUVVGblFrRXNSVUZEYUVKMmEwSXNSVUZCVDJkclFpeEZRVUZQUXl4UlFVRlJPV2xDTEVkQlEzUkNjV3BDTEVWQlFWRkJMRVZCU1ZZc1RVRkJUVVVzUlVGQllVTXNTVUZEYWtJc1NVRkJTWHBpTEVWQlFWRXNTMEZEV2l4TlFVRk5NR0lzUlVGQlZTeEhRVUZIVWl4TFFVRmhiR3BDTEVsQlF6RkNNbXBDTEVWQlFXRXhha0lzUlVGRFlqSnFRaXhGUVVGWk9XdENMRVZCUTFvcmEwSXNSVUZCWTBvc1JVRkRaRXNzUlVGQllXaENMRVZCUVU5RExGRkJRVkZWTEVkQlowSnNReXhQUVdSSlN5eEpRVUZsYUd4Q0xFbEJRMnBDYTBvc1JVRkJVU3hwUWtGQmFVSXdZaXhwUWtGQmRVSTFhMElzYTBKQlFYRkNaMnhDTEUxQlJXNUZWaXhIUVVFeVFpeFBRVUZZU3l4SlFVTnNRbnBpTEVWQlFWRXNORUpCUVRSQ01HSXNTMEZGYkVOTUxFZEJRVFJDTEV0QlFWaEpMRWxCUTI1Q2VtSXNSVUZCVVN3MlFrRkJOa0l3WWl4TFFVVlVMR0ZCUVRGQ1dpeEZRVUZQUXl4UlFVRlJUeXhKUVVOaVFTeEZRVUZOUnl4TFFVTlNlbUlzUlVGQlVTd3JRa0ZCSzBJd1lpeExRVWR3UXl4RFFVTk1RU3hSUVVGQlFTeEZRVU5CUXl4WFFVRkJRU3hGUVVOQlF5eFZRVUZCUVN4RlFVTkJReXhaUVVGQlFTeEZRVU5CUXl4WFFVRkJRU3hGUVVOQk9XSXNUVUZCUVVFc1MwRkpSU3hSUVVGRk1HSXNSVUZCVHl4WFFVRkZReXhGUVVGVkxGVkJRVVZETEVWQlFWTXNXVUZCUlVNc1JVRkJWeXhYUVVGRlF5eEZRVUZWTEUxQlFVVTVZaXhIUVVGVmQySXNSVUZCVlhacVFpeEhRVVZ5Uml4SFFVRmpMRTlCUVZZclNDeEZRVU5HT1Vnc1QwRkJUME1zWlVGQlpYZEZMRXRCUVUwelJTeEZRVUZMTEVOQlF5OUNiMHdzU1VGQlN5eEpRVU5KYmt3c1JVRkZWRzlNTEVsQlFVMXZXU3hKUVVWS0xFMUJRVTFOTEVWQlFXTlFMRVZCUVZWMmFrSXNSMEZET1VJc1IwRkJZeXhQUVVGV0swZ3NSVUZGUml4UFFVUkJMMGdzUlVGQlVYZHFRaXhGUVVORUxFbEJRVXM1WlN4TFFVRk5MRU5CUVVNelJTeEhRVUZOUXl4SFFVZDZRaXhOUVVSQk1FVXNTMEZCUzNGbUxGVkJRVlZFTEVkQlExUXZZaXhIUVVkV05VZ3NXVUZCV1N4RlFVTmFReXhqUVVGakxGRkJSVmdzUTBGRFRDeEhRVUZKYzBVc1MwRkJTM05tTEZkQlExQXNUVUZCVFdwakxFVkJSVTVsTEZGQlFWRlhMRXRCUVVzeFFpeFBRVWxhY2tRc1MwRkhWSFZtTEU5QlFVOXNhMElzUlVGQlZUSnFRaXhIUVVObUxFbEJRMFVzVFVGQlRWRXNSVUZCWlhobUxFdEJRVXN6UlN4SFFVTXhRaXhSUVVGeFFtbEVMRWxCUVdwQ2EyaENMRVZCUTBZc1QwRkJUeXhGUVVkVUxFZEJRWEZDTEU5QlFXcENRU3hGUVVOR0xFOUJRVThzUlVGSFZDeFJRVUZ0UW14b1FpeEpRVUZtTUdkQ0xFVkJRMFlzVDBGQlR5eEZRVWRVTEVkQlFXMUNMRTlCUVdaQkxFVkJRMFlzVDBGQlR5eEZRVWRVTEUxQlFVMHNUVUZCUlROaUxFZEJRVmR5UkN4TFFVRkxNMFVzUjBGQlR6SnFRaXhGUVVNdlFpeFBRVUZKTTJJc1NVRkhSbkpFTEV0QlFVc3pSU3hIUVVGUGJXdENMRWRCUTB3c1IwRkZWQ3hOUVVGUEwyVXNSMEZSVUN4TlFWQkJNa1FzVVVGQlVWY3NTMEZCU3l4dlFrRkJjMEl2UlN4TFFVRkxORWdzV1VGQldXcFBMRXRCUVU4c1NVRkJUVEJDTEVkQlEycEZLMGtzVVVGQlVWY3NTMEZCU3l4blFrRkRZbGdzVVVGQlVWY3NXVUZCV1M5RkxFdEJRVXN6UlN4SlFVTjZRaXRKTEZGQlFWRlhMRXRCUVVzdlJTeExRVUZMTTBVc1NVRkRiRUlyU1N4UlFVRlJWeXhMUVVGTExHVkJRMkpZTEZGQlFWRlhMRmxCUVZscFlTeEhRVU53UWpWaExGRkJRVkZYTEV0QlFVdHBZU3hIUVVOUUxHZENRVUZuUW5abExFdEJTVEZDYVZJc1RVRkJUVzVKTEVWQlFWTXNSMEZCU1d0WExFZEJRVmtzUjBGRE4wSXNTVUZEUlN4TlFVRk5UaXhGUVVGaGFFSXNSVUZCVDBNc1VVRkJVVGRWTEVkQlF6VkNiVmNzUlVGQlZXNXJRaXhQUVVGUFVTeExRVUZMZDA0c1IwRkZOVUlzUjBGQlNXMVhMRVZCUVZGMGJFSXNUMEZCVXl4RlFVRkhMRU5CUTNSQ0xFbEJRVWwxYkVJc1JVRkJhVUlzU1VGQlN6Tm1MRTFCVnpGQ0xFOUJWa0V3Wml4RlFVRlJPV2xDTEZOQlFWTjJRaXhKUVVOWU1rVXNTMEZCU3pORkxFdEJRVk5yVHl4RlFVRlBiRThzUzBGRGJrSXlSU3hMUVVGTGRXWXNUMEZCVDJ4clFpeEZRVUZMYTA4c1JVRkJUMnhQTEVsQlF6RkNjMnRDTEVWQlFWVjBhMElzUjBGQlQydFBMRVZCUVU5c1R5eEhRVVY0UWl0SkxGRkJRVkZYTEV0QlFVc3NhVUpCUVcxQ01Vb3NSVUZCVFN4SlFVRk5hMDhzUlVGQlQyeFBMRWRCUVU4c1YwRkJZV3RQTEVWQlFVOXNUeXhSUVV0cVJTeFZRVUZtT0dwQ0xFZEJRMFpSTEVWQlFWbHdhMElzVDBGQlQzTmlMRTlCUVU4NFNTeEhRVlZ1UWtZc1JVRkJXU3hKUVVGdlFucG1MRXRCUVVzMFNDeFpRVUZoSzFnc1IwRkJZVUVzUjBGRmJFVkdMRVZCUlVzc1NVRkJiMEo2Wml4TFFVRkxORWdzV1VGQllTdFlMRWRCUlhSRFFTeEZRVWxZTEU5QlFVOHNTVUZCYjBJelppeExRVUZMTkVnc1dVRkZiRU1zVFVGQlQyNUlMRWRCUTFBc1IwRkJTVlFzUzBGQlMzTm1MRmRCUjFBc1RVRkdRV3hpTEZGQlFWRlhMRXRCUVV0M1JTeEhRVU5pYmtZc1VVRkJVVmNzUzBGQlMzUkZMRWRCUTFBc2FVSkJRV2xDTUdRc1JVRkJUME1zVVVGQlVUZFZMRTFCUVZjNVNTeEpRVXRxUkN4UFFVaEJNa1FzVVVGQlVWY3NTMEZCUzNkRkxFZEJRMkp1Uml4UlFVRlJWeXhMUVVGTGRFVXNSMEZEWWpKRUxGRkJRVkZYTEV0QlFVc3NhVUpCUVdsQ2Ixb3NSVUZCVDBNc1VVRkJVVGRWTEUxQlFWYzVTU3hMUVVOcVJEaEpMRWRCUzJKeFZ5eFBRVUZQZUd0Q0xFVkJRVmMwUlN4TlFVTm9RaXhKUVVGSk5tWXNSVUZCWlN4SFFXVnVRaXhQUVdSQmRHdENMRTlCUVU5UkxFdEJRVXRZTEVkQlFVdDNRaXhUUVVGVGRrSXNTVUZEZUVJc1NVRkJTWGRpTEVWQlFXTjZZaXhGUVVGSlF5eEhRVU5WTEZkQlFUVkNkMklzUlVGQlQycFFMRmxCUVZscVR5eFBRVU5vUW10a0xFVkJRVTh4WXl4TlFVRlRNR01zUlVGQlR6ZFFMRlZCUXpGQ05sQXNSVUZCVXpkWExFdEJRVXMwWml4UFFVRlBMMGtzUzBGSmNrSkJMRVZCUVU4M1VDeFRRVUU0UWl4TFFVRnVRalpRTEVWQlFVODNVQ3hUUVVGeFF5eEpRVUZ1UWpaUUxFVkJRVTgzVUN4UlFVTndSRFpaTEVWQlFWRjRhMElzUjBGQlQzZGlMRVZCUVU4M1VDeFJRVVYwUWpaWkxFVkJRVkY0YTBJc1IwRkJUM2RpTEV0QlIxcG5TaXhGUVVkVWFtcENMRkZCUVZGcmFrSXNSMEZEVGl4UFFVRlBkbXRDTEU5QlFVOXpZaXhQUVVGUE4xY3NUVUZCVFhCRUxGRkJRVkZyYWtJc1IwRkhja05ETEU5QlFVOUVMRWRCUTB3c1QwRkJUemxtTEV0QlFVdG5aMElzWjBKQlFXZENlbXRDTEU5QlFVOXpZaXhQUVVGUE4xY3NUVUZCVFN0bUxFOUJRVTlFTEVkQlFVOUJMRWRCUjJoRk1XUXNTVUZCU1RCa0xFZEJRMFlzVDBGQlR6bG1MRXRCUVV0blowSXNaMEpCUVdkQ2VtdENMRTlCUVU5ellpeFBRVUZQTjFjc1RVRkJUVzlETEVsQlFVa3daQ3hIUVVGUFFTeEhRVWMzUkRWcVFpeFBRVUZQTkdwQ0xFZEJRMHdzVDBGQlR6bG1MRXRCUVV0blowSXNaMEpCUVdkQ2VtdENMRTlCUVU5ellpeFBRVUZQTjFjc1RVRkJUVGxFTEU5QlFVODBha0lzUjBGQlQwRXNSMEZIYUVWdVpTeFBRVUZQYldVc1IwRkRUQ3hQUVVGUE9XWXNTMEZCUzJkblFpeG5Ra0ZCWjBKNmEwSXNUMEZCVDNOaUxFOUJRVTgzVnl4TlFVRk5Na0lzVDBGQlQyMWxMRWRCUVU5QkxFZEJSMmhGUnl4TFFVRkxTQ3hIUVVOSUxFOUJRVTkyYTBJc1QwRkJUM05pTEU5QlFVODNWeXhOUVVGTmFXZENMRXRCUVV0SUxFZEJSMnhETDAwc1MwRkJTeXROTEVkQlEwZ3NUMEZCVDNaclFpeFBRVUZQYzJJc1QwRkJUemRYTEUxQlFVMHJVeXhMUVVGTEswMHNSMEZIYkVONmFrSXNTMEZCUzJZc1IwRkRTQ3hOUVVGTmRXSXNSVUZCVTNSaUxFOUJRVTl6WWl4UFFVRlBOMWNzVFVGRk4wSXNUMEZFUVRaWExFVkJRVTk0WVN4TFFVRkxaaXhIUVVOTU1FVXNTMEZCUzJkblFpeG5Ra0ZCWjBKdVNpeEhRVWM1UWpGUkxGRkJRVkUzU3l4SFFVTk9MRTFCUVUxMVlpeEZRVUZUZEdJc1QwRkJUM05pTEU5QlFVODNWeXhOUVVVM1FpeFBRVVJCTmxjc1JVRkJUekZSTEZGQlFWRTNTeXhIUVVOU01FVXNTMEZCUzJkblFpeG5Ra0ZCWjBKdVNpeEhRVWM1UW5GS0xGZEJRMFVzVFVGRFRVTXNSVUZFVXpWclFpeFBRVUZQYzJJc1QwRkJUemRYTEUxQlEwNXZaMElzVVVGRGRrSXNUMEZCVDNCblFpeExRVUZMWjJkQ0xHZENRVUZuUWtjc1IwRkhPVUpGTEVsQlFVa3ZhMElzUjBGRFJpeE5RVUZOZFdJc1JVRkJZM1JpTEU5QlFVOXpZaXhQUVVGUE4xY3NUVUZGYkVNc1QwRkVRVFpYTEVWQlFVOTNTaXhKUVVGSkwydENMRWRCUTBvd1JTeExRVUZMWjJkQ0xHZENRVUZuUW01S0xFZEJSemxDYlVvc1owSkJRV2RDYmtvc1JVRkJVV2xLTEVWQlFVOHNWVUZETjBJc1dVRkJjMElzU1VGQldHcEtMRVZCUTBZc1NVRkJiMEkzVnl4TFFVRkxORWdzV1VGRFRDeEpRVUZzUW1sUUxFVkJRVTk2WXl4UlFVRTJReXhKUVVFM1FtMUNMRTlCUVU5UkxFdEJRVXRwUlN4TlFVRk5OVVlzVDBGRE9VTkZMRTlCUVU5M2JFSXNSMEZCVFROblFpeFJRVUZSTEdsQ1FVRnRRaXhGUVVOdVF5eEhRVVZCTEVsQlFXOUNZU3hMUVVGTE5FZ3NXVUZCWVdsUUxFZEJSWFJEUVN4RlFVRlBMRWxCUVUxQkxFVkJRVThzUjBGQllTeFZRVUZuUkN4WFFVRXpRMEVzUlVGQlR5eEhRVUZoTEZOQlFVVnFVQ3haUVVGWmFrOHNTMEZETVVWclpDeEZRVVZCTEVsQlFXOUNOMWNzUzBGQlN6UklMRmxCUVdGcFVDeEhRVWxxUkhkSkxGVkJRVlZFTEVkQlExSm9ZaXhSUVVGUlZ5eExRVUZMTERoQ1FVTmlXQ3hSUVVGUlZ5eExRVUZMTEVsQlFVMXhZU3hGUVVGWlRDeFRRVU12UWpOaExGRkJRVkZYTEV0QlFVc3NPRUpCUTJKWUxGRkJRVkZYTEV0QlFVc3NORUpCUTJKWUxGRkJRVkZYTEV0QlFVdHhZU3hGUVVGWlNDeFhRVU42UWpkaExGRkJRVkZYTEV0QlFVc3NOa0pCUTJKWUxGRkJRVkZYTEV0QlFVdHhZU3hGUVVGWlNpeFpRVU42UWpWaExGRkJRVkZYTEV0QlFVc3NhMEpCUTJKWUxGRkJRVkZYTEV0QlFVdHhZU3hGUVVGWlJDeFpRVU42UWk5aExGRkJRVkZYTEV0QlFVc3NiVUpCUTJKWUxGRkJRVkZYTEV0QlFVdHhZU3hGUVVGWlJpeGhRVU42UWpsaExGRkJRVkZYTEV0QlFVc3NLMEpCYmxacVFpeGhMSFZMUTBGQkxHMUNRVVZCTEUxQlFYRkNkV0lzUlVGRGJrSXNORUpCUTBVc1RVRkJUeXhUUVVWVUxESkNRVU5GTEUxQlFVOHNVVUZGVkN3MFFrRkRSU3hOUVVGUExGTkJSVlFzT0VKQlEwVXNUVUZCVHl4UlFVVlVMREJDUVVORkxFMUJRVThzV1VGRlZDeDNRMEZEUlN4TlFVRlBMRWxCUlZRc2MwTkJRMFVzVFVGQlR5eEpRVVZVTERoQ1FVTkZMRTFCUVU4c1ZVRkZWQ3h2UTBGRFJTeE5RVUZQTEU5QlJWUXNlVU5CUTBVc1RVRkJUeXhaUVVWVUxIVkNRVU5GTEUxQlFVOHNXVUZGVkN4eFFrRkRSU3hOUVVGUExGVkJSVlFzYlVOQlEwVXNUVUZCVHl4dlFrRkZWQ3h0UTBGRFJTeE5RVUZQTEdsQ1FVRnBRa0VzUlVGQlUwTXNiMEpCUVc5Q1JDeEZRVUZUUlN4bFFVVm9SU3huUTBGRFJTeE5RVUZQTEdsQ1FVRnBRa1lzUlVGQlV5OVVMREJDUVVFd1FpdFVMRVZCUVZORkxHVkJSWFJGTEhGRFFVTkZMRTFCUVU4c2FVSkJRV2xDUml4RlFVRlRNVlFzSzBKQlFTdENNRlFzUlVGQlUwVXNaVUZGTTBVc2JVTkJRMFVzVFVGQlR5eHBRa0ZCYVVKR0xFVkJRVk5ETEc5Q1FVRnZRa1FzUlVGQlUwVXNaVUZGYUVVc1owTkJRMFVzVFVGQlR5eHBRa0ZCYVVKR0xFVkJRVk12VkN3d1FrRkJNRUlyVkN4RlFVRlRSU3hsUVVWMFJTeHhRMEZEUlN4TlFVRlBMR2xDUVVGcFFrWXNSVUZCVXpGVUxDdENRVUVyUWpCVUxFVkJRVk5GTEdWQlJUTkZMRzlEUVVORkxFMUJRVThzVDBGRlZDdzRRa0ZEUlN4TlFVRlBMRTlCUlZRc01FSkJRMFVzVFVGQlR5eEpRVVZVTEhORFFVTkZMRTFCUVU4c1owSkJSVlFzYVVKQlEwVXNUVUZCVHl4RFFVTk1jRmtzUzBGQlRTeERRVU5LY1Zrc2JVSkJRVzlDTEVkQlEzQkNReXh2UWtGQmNVSXNRMEZEYmtKcVZTeFBRVUZSTEVOQlFVTXNTMEZCVFN4WFFVRlpMRmxCUXpOQ1VDeEpRVUZMTEVOQlFVTXNZMEZCWlN4VFFVRlZMR2xDUVVGclFpeFhRVUZaTEdWQlFXZENMSGRDUVVVdlJYbFZMR3RDUVVGdFFpeERRVUZGYWxVc1MwRkJUU3hEUVVGRExFOUJRVkZ2Uml4UlFVRlRMRWxCUVV0eVJpeFBRVUZSTEV0QlF6RkViVlVzZFVKQlFYZENMRU5CUVVWdVZTeFBRVUZSTEVOQlFVTXNWVUZCVnl4UlFVVm9SRzlWTEZkQlFWa3NRMEZEVmtvc2JVSkJRVzlDTEVkQlEzQkNReXh2UWtGQmNVSXNRMEZEYmtKcVZTeFBRVUZSTEVOQlFVTXNTMEZCVFN4WFFVRlpMRTlCUVZFc1dVRkRia05RTEVsQlFVc3NRMEZCUXl4alFVRmxMRk5CUVZVc2FVSkJRV3RDTEZkQlFWa3NaVUZCWjBJc2QwSkJSUzlGZVZVc2EwSkJRVzFDTEVOQlFVVnVWU3hOUVVGUExFbEJRVXRETEU5QlFWRXNTMEZEZWtOdFZTeDFRa0ZCZDBJc1NVRkZNVUpzUnl4UlFVRlRMRU5CUTFBclJpeHRRa0ZCYjBJc1IwRkRjRUpETEc5Q1FVRnhRaXhEUVVOdVFtcFZMRTlCUVZFc1EwRkJReXhOUVVOVVVDeEpRVUZMTEVOQlFVTXNZMEZCWlN4cFFrRkJhMElzYVVKQlJYcERlVlVzYTBKQlFXMUNMRU5CUTJwQ2VsVXNTVUZCU3l4RFFVRkRMR2xDUVVGclFpeG5Ra0ZEZUVKTkxFMUJRVThzUzBGRlZHOVZMSFZDUVVGM1FpeEpRVVV4UWtVc1lVRkJZeXhEUVVOYVRDeHRRa0ZCYjBJc1IwRkRjRUpETEc5Q1FVRnhRaXhEUVVOdVFtcFZMRTlCUVZFc1EwRkJReXhMUVVGTkxGZEJRVmtzVDBGQlVTeGhRVVZ5UTJ0VkxHdENRVUZ0UWl4RFFVTnFRbXhWTEU5QlFWRXNTMEZGVm0xVkxIVkNRVUYzUWl4SlFVVXhRa2NzWVVGQll5eERRVU5hVGl4dFFrRkJiMElzUjBGRGNFSkRMRzlDUVVGeFFpeERRVU51UW1wVkxFOUJRVkVzUTBGQlF5eExRVUZOTEZkQlFWa3NXVUZETTBKUUxFbEJRVXNzUTBGQlF5eFZRVUZYTEdOQlFXVXNVMEZCVlN4cFFrRkJhMElzVjBGQldTeGxRVUZuUWl4M1FrRkZNVVo1VlN4clFrRkJiVUlzUTBGQlJXeFZMRTlCUVZFc1MwRkROMEp0VlN4MVFrRkJkMElzUTBGQlJXNVZMRTlCUVZFc1EwRkJReXhWUVVGWExGRkJSV2hFZFZVc2JVSkJRVzlDTEVOQlEyeENVQ3h0UWtGQmIwSXNSMEZEY0VKRExHOUNRVUZ4UWl4RFFVRkZhbFVzVDBGQlVTeERRVUZETEU5QlEyaERhMVVzYTBKQlFXMUNMRU5CUVVWc1ZTeFBRVUZSTEV0QlF6ZENiVlVzZFVKQlFYZENMRWxCUlRGQ1N5eGhRVUZqTEVOQlExcFNMRzFDUVVGdlFpeEhRVU53UWtNc2IwSkJRWEZDTEVOQlFVVnFWU3hQUVVGUkxFTkJRVU1zVDBGRGFFTnJWU3hyUWtGQmJVSXNRMEZCUld4VkxFOUJRVkVzUzBGRE4wSnRWU3gxUWtGQmQwSXNTVUZGTVVKb1R5eExRVUZOTEVOQlEwbzJUaXh0UWtGQmIwSXNSMEZEY0VKRExHOUNRVUZ4UWl4RFFVTnVRbmhWTEVsQlFVc3NRMEZCUXl4WFFVRlpMRk5CUVZVc2NVSkJSVGxDZVZVc2EwSkJRVzFDTEVOQlFVVXZUaXhMUVVGTkxFdEJRek5DWjA4c2RVSkJRWGRDTEVsQlJURkNOMVFzUzBGQlRTeERRVU5LTUZRc2JVSkJRVzlDTEVkQlEzQkNReXh2UWtGQmNVSXNRMEZEYmtKb1ZTeExRVUZOTEVOQlFVTXNUVUZCVHl4VFFVTmtVaXhKUVVGTExFTkJRVU1zV1VGQllTeGxRVUZuUWl4dFFrRkJiMElzYTBKQlEzWkVUeXhQUVVGUkxFTkJRVU1zVjBGQldTeFJRVUZUTEZkQlFWa3NTMEZCVFN4TlFVRlBMRmRCUVZrc1ZVRkJWeXhuUWtGRmFFWnJWU3hyUWtGQmJVSXNSMEZEYmtKRExIVkNRVUYzUWl4RFFVRkZjRlVzVFVGQlR5eEpRVUZMUXl4UFFVRlJMRU5CUVVNc1MwRkJUU3hYUVVGWkxGZEJRVmxETEV0QlFVMHNRMEZCUXl4VFFVVjBSbmRWTEhkQ1FVRjVRaXhEUVVOMlFsUXNiVUpCUVc5Q0xFTkJRVVZvVlN4UFFVRlJMRU5CUVVNc1owSkJReTlDYVZVc2IwSkJRWEZDTEVOQlEyNUNhbFVzVDBGQlVTeERRVUZETEU5QlFWRXNWMEZCV1N4TlFVTTNRa01zUzBGQlRTeERRVUZETEZGQlJWUnBWU3hyUWtGQmJVSXNRMEZCUld4VkxFOUJRVkVzUzBGRE4wSnRWU3gxUWtGQmQwSXNTVUZGTVVKUExGZEJRVmtzUTBGRFZsWXNiVUpCUVc5Q0xFZEJRM0JDUXl4dlFrRkJjVUlzUjBGRGNrSkRMR3RDUVVGdFFpeEhRVU51UWtNc2RVSkJRWGRDTEVOQlFVVnVWU3hQUVVGUkxFTkJRVU1zVlVGQlZ5eFRRVXR3UkN3MFFrRkJORUp1UkN4SFFVTXhRaXhOUVVGTk9GZ3NSVUZCVlRsWUxFVkJRVTg1VEN4TlFVRk5PR2xDTEVWQlFWTkZMR05CUTJoRFlTeEZRVUZYUkN4RlFVRlJMRWRCUVVjMWFrSXNUVUZCVFN4TFFVRkxMRWRCUTNaRExFbEJRVWswVHl4RlFWbEtMRTlCVkVWQkxFVkJSRVZuVml4RlFVRlJMRWRCUVVkcWFVSXNVVUZCVVN4SlFVRkpiV2hDTEVWQlFWTkRMSEZDUVVGMVFpeEZRVU0xUTBRc1JVRkJVME1zYVVKQlIzQkNZU3hGUVVGUkxFZEJRVWRxYVVJc1VVRkJVU3hKUVVGSmJXaENMRVZCUVZNdlZDd3lRa0ZCTmtJc1JVRkRla1FyVkN4RlFVRlRMMVFzZFVKQlExUXJWQ3hGUVVGVE1WUXNORUpCU1ZZc1EwRkJSWGxWTEZOQlFVRkJMRVZCUVZWcVZpeFhRVUZCUVN4RlFVRlpja0lzVjBGRVduRlhMRVZCUVZFc1NVRkpOMElzY1VOQlFYRkRjbGNzUjBGRGJrTXNTVUZCU1hWWExFVkJRVzlDTEVOQlFVVTVWaXhOUVVGTkxFVkJRVTByVml4WFFVRlhMRWRCUzJwRUxFOUJTa2xxUWl4RlFVRlRiR1VzU1VGQlNUSkpMRXRCUTJaMVZ5eEZRVUZyUWpsV0xFOUJRVk5xVVN4UFFVRlBVU3hMUVVGTGRXdENMRVZCUVZOc1pTeEpRVUZKTWtrc1IwRkJXVFJXTEcxQ1FVRnRRblp0UWl4UFFVRlRMRWRCUXpWR2EyNUNMRVZCUVd0Q1F5eFpRVUZqYUcxQ0xFOUJRVTlSTEV0QlFVdDFhMElzUlVGQlUyeGxMRWxCUVVreVNTeEhRVUZaTmxZc2QwSkJRWGRDZUcxQ0xFOUJRVk1zU1VGRmFrZHJia0lzUlVGSFZDeG5RMEZCWjBORkxFVkJRVlZ3Vml4SFFVTjRReXhQUVVGSlFTeEZRVUZYYWs0c1VVRkJVU3hIUVVGSGJXaENMRVZCUVZOdFFpdzJRa0ZCTmtKdVFpeEZRVUZUUXl4dFFrRkJiVUpFTEVWQlFWTnZRaXcyUWtGQkswSXNSVUZETTBod1FpeEZRVUZUUXl4cFFrRkhhRUp1VlN4RlFVRlhhazRzVVVGRFZDeEhRVUZIYldoQ0xFVkJRVk50UWl3MlFrRkJOa0p1UWl4RlFVRlRNVlFzT0VKQlFUaENNRlFzUlVGQlUyOUNMRFpDUVVOMFJpeEZRVVZGY0VJc1JVRkJVekZVTERSQ1FVZG9RbElzUlVGQlYycE9MRkZCUVZFc1IwRkJSMjFvUWl4RlFVRlRiVUlzTmtKQlFUWkNia0lzUlVGQlV5OVVMSGxDUVVGNVFpdFVMRVZCUVZOdlFpdzJRa0ZEZGtjc1JVRkZUM0JDTEVWQlFWTXZWQ3gxUWtGRldDdFVMRVZCUVZOMldDeFZRVWRzUWl4dlEwRkJiME41V1N4RlFVRlZjRllzUjBGRk5VTXNUMEZFWVd0VkxFVkJRVk54UWl3MlFrRkJOa0oyVml4SFFVbHlSQ3h2UTBGQmIwTkJMRWRCUTJ4RExFOUJRVEpFTEVsQlFYWkVRU3hGUVVGWGFrNHNVVUZCVVcxb1FpeEZRVUZUTTFVc2RVSkJRM1pDVXl4RlFVRlhja29zVVVGQlVYVmtMRVZCUVZNelZTeHpRa0ZCZFVJeVZTeEZRVUZUTVVNc2RVSkJSV0lzU1VGQmNFUjRVaXhGUVVGWGFrNHNVVUZCVVcxb1FpeEZRVUZUTVZNc2IwSkJRM1pDZUVJc1JVRkJWM0pLTEZGQlFWRjFaQ3hGUVVGVE1WTXNiVUpCUVc5Q01GTXNSVUZCVTNwRExHOUNRVVZNTEVsQlFYcEVlbElzUlVGQlYycE9MRkZCUVZGdGFFSXNSVUZCVXpOVExIbENRVU4yUW5aQ0xFVkJRVmR5U2l4UlFVRlJkV1FzUlVGQlV6TlRMSGRDUVVGNVFqSlRMRVZCUVZONFF5eDVRa0ZGYUVVeFVpeEZRVWRVTEhWQ1FVRjFRbkpDTEVWQlFWbEhMRVZCUVZsRUxFZEJRemRETEUxQlFVMHlWeXhGUVVGak4xY3NSVUZCVjJoSkxGRkJRVkYxWkN4RlFVRlRNMVVzYzBKQlFYVkNMRXRCUTJwRkxHMUNRVUZGT0ZVc1JVRkJhMElzYjBKQlFVVkRMRWRCUVhkQ1NpeEZRVUZUYkdVc1NVRkJTWGRtTEVkQlEycEZMRWxCUVVseVZ5eEZRVUZsTEVOQlFVVXNRMEZCUXl0VkxFVkJRVk4xUWl4clFrRkJiVUpFTEVkQmQwSnNSQ3hQUVhSQ1FYSnRRaXhQUVVGUFVTeExRVUZMTW10Q0xFZEJRWEZDT1dwQ0xGTkJRVk5yYkVJc1NVRkRia04yVnl4RlFVRmhkVmNzUzBGQlYzWlhMRVZCUVdGMVZ5eEhRVUZaTEVsQlEzUkVjRUlzUlVGQmIwSnZRaXhIUVVGVmJHeENMRk5CUVZOdGJFSXNTVUZEY2tNc1NVRkJTM2hYTEVWQlFXRjFWeXhIUVVGVlF5eEhRVUZoTEVOQlEzWkRMRWxCUVVsNmJVSXNSVUZCVVRSUUxFVkJRVmMwVnl4SFFVRlZReXhIUVVNM1FqbFhMRWRCUVdsQ1FTeEZRVUZqTmxjc1NVRkJZU3hWUVVGUGJFOHNUVUZCVFROSkxFVkJRV00yVnl4SFFVRlZReXhOUVVOdVJucHRRaXhGUVVGUk1sQXNSVUZCWXpaWExFZEJRVlZETEVsQlJXeERlRmNzUlVGQllYVlhMRWRCUVZWRExFZEJRV042YlVJc1UwRkxNME5ETEU5QlFVOVJMRXRCUVVzd2EwSXNSMEZCYjBJM2FrSXNVMEZCVTJ0c1FpeEpRVU5zUTNaWExFVkJRV0YxVnl4TFFVRlhkbGNzUlVGQllYVlhMRWRCUVZrc1NVRkZkRVJ5UWl4RlFVRnRRbkZDTEVkQlFWVnNiRUlzVTBGQlUyMXNRaXhKUVVNdlFuaFhMRVZCUVdGMVZ5eEhRVUZWUXl4TFFVTXhRbmhYTEVWQlFXRjFWeXhIUVVGVlF5eEhRVUZqT1Zjc1UwRkpjRU5OTEVWQlIxUXNkMEpCUVhkQ2VWY3NSVUZCWTNwWExFVkJRV013Vnl4SFFVTnNSQ3hOUVVGTlRDeEZRVUZqY2xjc1JVRkJZWEJTTEV0QlF6TkNLMjVDTEVWQlFXbENOVUlzUlVGQlUyeGxMRWxCUVVsM1ppeEhRVUZoTEZkQlFWZEpMRlZCUXpWRUxFbEJRVWxITEVWQlFXZENMRU5CUVVVc1EwRkJRemRDTEVWQlFWTjFRaXhyUWtGQmJVSkVMRWRCYzBOdVJDeFBRWEpEUVhKdFFpeFBRVUZQVVN4TFFVRkxiVzFDTEVkQlFXZENkR3hDTEZOQlFWTjNiRUlzU1VGRGJrTXNTVUZCU1Vnc1JVRkJXVWNzUjBGcFEyUXNTMEZCVFN4M1EwRkJkME0zVnl4RlFVRmhjRklzVTBGQlUybHZRaXhKUVdwRGNrTXNRMEZETDBJc1RVRkJUVU1zUlVGQlkwZ3NSVUZCWlVVc1IwRkRia01zU1VGQlNVVXNSVUZCYlVKTUxFVkJRVmxITEVkQlJXNURMRTlCUVZGRkxFVkJRV2xDTVdFc1dVRkJXV3BQTEUxQlEyNURMRWxCUVVzc1VVRkRTREp2UWl4RlFVRnRRa0VzUlVGQmFVSXhReXhuUWtGRE4wSXdReXhGUVVGcFFpOU5MRmRCUTJwQ0swMHNSVUZCYVVKRExFbEJTVklzVFVGQmFFSkdMRVZCUTBaR0xFVkJRV2RDTEVsQlExaEJMRVZCUTBnc1EwRkJRME1zUjBGQmFVSkZMRWRCUjNCQ1JDeEZRVUZaZW14Q0xGTkJRVk50YkVJc1NVRkRia0lzVVVGQlowUjZha0lzU1VGQk5VTXlha0lzUlVGQldVY3NSMEZCWjBKTUxFZEJVemxDTEV0QlFVMHNaMFJCUVdkRWVGY3NSVUZCWVhCU0xGTkJRVk5wYjBJc1MwRkJhMEpNTEVsQlVqbEdTU3hGUVVGblFpeEpRVU5ZUVN4RlFVTklMRU5CUVVORExFZEJRV2xDTEVsQlEySkVMRVZCUVdORExFZEJRMnBDTEVOQlFVTk1MRWRCUVdGRkxFVkJRVmxITEVkQlFXZENUQ3haUVZscVJFa3NSVUZIVkN3MlFrRkJOa0p3V0N4RlFVRlplVmdzUlVGQmFVSXNTMEZCVFVNc1JVRkJhVUlzVFVGREwwVXNUVUZCT0VJc2FVSkJRVzVDUkN4SFFVRnJSQ3hQUVVGdVFrTXNSVUZEYWtNc1EwRkJSWFJ2UWl4TFFVRk5ORkVzUjBGRllTeHBRa0ZCYmtKNVdDeEhRVUY1UkN4cFFrRkJia0pETEVWQlEzaERMRWxCUVV0RUxFdEJRVzFDUXl4RlFVRm5RblJ2UWl4TFFVRk5ORkVzUjBGRmVrSXNhVUpCUVc1Q2VWZ3NSMEZCZVVRc2FVSkJRVzVDUXl4RlFVTjRReXhKUVVGTFFTeEZRVUZuUW5SdlFpeExRVUZOTkZFc1IwRkZOMElzU1VGQlMzbFlMRVZCUVdkQ2NtOUNMRXRCUVUwMFVTeEpRVGxVZEVNc1lTeHpTME5HUVN4dFFrRkRRU3hoUVVWQkxHTkJSVTBzVjBGQlJUSllMRVZCUVZVc1dVRkJSVEZhTEVWQlFWY3NhMEpCUVVWSExFVkJRV2xDTEcxQ1FVRkZSQ3hGUVVGclFpeFpRVUZGZVZvc1JVRkJWeXhOUVVGRmNGa3NSMEZCVlN4VlFVVjZSbkZaTEVWQlFWY3NWVUZCUjBNc1pVRkJaU3haUVVGakxGVkJRVWRETEZkQlFXRTFXaXhGUVVNelJIaEdMRVZCYTBoT0xGTkJRV2RDYTJZc1IwRkZaQ3hIUVVGelFpeFpRVUZzUWl4VlFVRlJjbFFzVFVGQmNVSXNRMEZETDBJc1IwRkJTVGhLTEZOQlFWTlJMRXRCUVVzeFlTeFJRVUZSTEZWQlFVOHJTaXh4UWtGQmRVSXNSVUZCUnl4RFFVTjZSQ3hOUVVGTk5sb3NSVUZCVDJoa0xFOUJRVTl6VkN4VFFVRlRNRW9zVFVGRE4wSXNUMEZCVDBFc1NVRkJVeXhWUVVGUGVGa3NUVUZCVFhsWkxHOUNRVU16UWtRc1NVRkJVeXhWUVVGUGVGa3NUVUZCVFRCWkxHbENRVU4wUWtZc1NVRkJVeXhWUVVGUGVGa3NUVUZCVFRKWkxHMUNRVU4wUWtnc1NVRkJVeXhWUVVGUGVGa3NUVUZCVFRSWkxIZENRVU4wUWtvc1NVRkJVeXhWUVVGUGVGa3NUVUZCVFRaWkxHbENRVU53UWl4VlFVRlBjR0VzV1VGRFVDeFZRVUZQUXl4VlFVVmlMRTlCUVU4c1ZVRkJUM2xhTEZkQlIyUXNUMEZCVDBVc1JVRkJVM3BxUWl4UlFVRlJMRlZCUVU5cmEwSXNaVUZCYVVJc1JVRkJTU3hWUVVGUFdDeFhRVUZoTEZWQlFVOHhXaXhaUVd4SmRrVnpZU3hEUVVGUFZpeEhRVU5pVnl4RlFVRlJMRU5CUTFwcVRTeFBRVUZSTEd0Q1FVTlNhMDBzU1VGQlN5eGxRVU5NUXl4VFFVRlZMRzFDUVVOV2JrOHNTVUZCU3l4bFFVTk1iMDhzVFVGQlR5eHBRa0ZEVUhSaUxFdEJRVTBzWjBKQlEwNTFZaXhYUVVGWkxIVkNRVVZTUXl4RlFVRlJiR2RDTEVsQlFWRnpSaXhGUVVOb1FqUlJMRVZCUVZOc1Z5eEpRVUZSWjJZc1JVRkJZWFphTEVWQlFXOUNSQ3hGUVVOc1JESmhMRVZCUVZNc1IwRkJSMnhDTEVWQlFWbHRRaXhQUVVGUGJFc3NTVUZETDBKdFN5eEZRVUZYTEVkQlFVZHdRaXhGUVVGWmNVSXNVMEZCVTNCTExFbEJRMjVEY1Vzc1JVRkJVeXhIUVVGSGRFSXNSVUZCV1hWQ0xFOUJRVTkwU3l4SlFVTXZRblZMTEVWQlFXVlFMRVZCUVZFc1IwRkJSMmhMTEV0QlFWVnlVQ3hGUVVGTk1Ga3NiVUpCUVcxQ1RTeEZRVUZOUXl4TlFVRlJMRWRCUVVkVExFOUJRemxGUnl4RlFVRlpVaXhGUVVGUkxFZEJRVWRvU3l4TFFVRlZjbEFzUlVGQlRYbFpMSE5DUVVGelFrOHNSVUZCVFdwTkxGTkJRVmNzUjBGQlIzRk1MRVZCUVZrd1FpeFZRVUZWZWtzc1NVRkRka2N3U3l4RlFVRlZMRWRCUVVjelFpeEZRVUZaTkVJc1VVRkJVVE5MTEVsQlEycERORXNzUlVGQldTeEhRVUZITjBJc1JVRkJXVGhDTEZWQlFWVTNTeXhKUVVOeVEyWXNSVUZCV1N4SFFVRkhPRW9zUlVGQldTdENMRlZCUVZVNVN5eEpRVU55UXl0TExFVkJRVlVzUjBGQlIyaERMRVZCUVZscFF5eFJRVUZSYUV3c1NVRkRha05wVEN4RlFVRlRMRWRCUVVkc1F5eEZRVUZaYlVNc1QwRkJUMnhNTEVsQlF5OUNiVXdzUlVGQlZTeEhRVUZIY0VNc1JVRkJXWEZETEZGQlFWRndUQ3hKUVVOcVEzRk1MRVZCUVZNc1IwRkJSM1JETEVWQlFWbDFReXhQUVVGUGRFd3NTVUZETDBKMVRDeEZRVUZWTEVkQlFVZDRReXhGUVVGWmVVTXNVVUZCVVhoTUxFbEJRMnBEZVV3c1JVRkJWU3hIUVVGSE1VTXNSVUZCV1RKRExGRkJRVkV4VEN4SlFVTnFRekpNTEVWQlFXZENMRWRCUVVjMVF5eEZRVUZaTmtNc1kwRkJZelZNTEVsQlJ6ZEROa3dzUlVGQlowSXNSMEZCUnpWTkxGTkJORU51UWpaTkxFVkJRVmtzUTBGRGFFSTVUQ3hQUVVGQlFTeEZRVU5CWjBzc1RVRkJRVUVzUlVGRFFXeG5RaXhKUVVGQlFTeEZRVU5CTm1Zc1RVRkJRVUVzUlVGRFFWZ3NVMEZCUVVFc1JVRkRRWEZDTEU5QlFVRkJMRVZCUTBGRkxHRkJRVUZCTEVWQlEwRktMRk5CUVVGQkxFVkJRMEZHTEU5QlFVRkJMRVZCUTBGVExGRkJRVUZCTEVWQlEwRkZMRlZCUVVGQkxFVkJRMEZLTEZWQlFVRkJMRVZCUTBGMlRDeFZRVUZCUVN4RlFVTkJPRXdzVVVGQlFVRXNSVUZEUVVVc1QwRkJRVUVzUlVGRFFVVXNVVUZCUVVFc1JVRkRRVVVzVDBGQlFVRXNSVUZEUVVVc1VVRkJRVUVzUlVGRFFVVXNVVUZCUVVFc1JVRkRRVTBzVlVGc1JXZENMRWRCUVVkb1JDeEZRVUZaYVVRc1ZVRkJWV2hOTEVsQmJVVjZRekpNTEdOQlFVRkJMRVZCUTBGTkxHVkJia1Z4UWl4SFFVRkhiRVFzUlVGQldXMUVMR1ZCUVdWc1RTeEpRVzlGYmtRMlRDeGpRVUZCUVN4RlFVTkJUU3huUWtGdVJYTkNMRWRCUVVkc1RpeFhRVzlGZWtKdFRpeGxRVzVGY1VJc1IwRkJSMjVPTEZWQmIwVjRRbTlPTEdGQmJrVnRRaXhIUVVGSGNFNHNVVUZ2UlhSQ2NVNHNWMEZ1UldsQ0xFZEJRVWQyUkN4RlFVRlpkMFFzVjBGQlYzWk5MRWxCYjBVelEzZE5MRmxCYmtWclFpeHRSMEZ2Uld4Q1F5eFBRWGhIWVN4RlFYbEhZa01zV1VGd1JXdENMRU5CUTJ4Q0xFdEJRMEVzUzBGRFFTeExRVU5CTEV0QlEwRXNTMEZEUVN4TFFVTkJMRXRCUTBFc1MwRkRRU3hMUVVOQkxFdEJRMEVzUzBGRFFTeExRVU5CTEV0QlEwRXNTMEZEUVN4TFFVTkJMRkZCUTBFc1MwRkRRU3hMUVVOQkxFdEJRMEVzUzBGRFFTeExRVU5CTEV0QlEwRXNTMEZEUVN4TlFUWkRRVU1zZDBKQk1VTTRRaXhMUVRKRE9VSXpTeXgzUWtFeFF6aENMRVZCTWtNNVFqUkxMR1ZCTVVOeFFpeEhRVEpEY2tKd1ZTeG5Ra0V4UTNOQ0xFbEJNa04wUW5GVkxGVkJNVU5uUWl4RFFVTm9Ra01zUzBGQlRTeExRVUZMYWtJc2RVSkJRMWhyUWl4TlFVRlBMRXRCUVV0c1FpeDNRa0ZEV20xQ0xFMUJRVThzUzBGQlMyNUNMSGxDUVhkRFdqTlBMR1ZCZEVOeFFpeExRVUZMTmt3c1JVRkJXU3RDTEZWQlFWVTVTeXhwUWtGM1EyeEVMRlZCUVdVc1NVRkJTemhNTEVrc2RVdERka2h3UWl4dFFrRkhUVzFDTEVWQlFXTXNRMEZEYkVKRExGTkJRVlVzVVVGRFZuQkZMRmRCUVZrc1lVRkRXbnBhTEZWQlFWY3NXVUZEV0VRc1dVRkJZU3hqUVVOaUsyUXNZMEZPWlN4VlFVRlJjbXBDTEVsQlFVbHpha0lzVTBGQlZ5eFZRVUZSZEdwQ0xFbEJRVWx6YWtJc1UwRkJWeXhaUVU4M1JEZGtMR3RDUVVGdFFpeFhRVU51UWtRc2JVSkJRVzlDTEZsQlEzQkNiV0VzWVVGQll5eGxRVU5rT1Zrc1RVRkJUeXhEUVVOTU1HTXNTMEZCVFN4SFFVTk9ReXhOUVVGUExFbEJRMUJvUlN4clFrRkJiVUlzU1VGRGJrSkVMR2RDUVVGcFFpeExRVU5xUWtVc2RVSkJRWGRDTEV0QlEzaENReXhwUWtGQmEwSXNTMEZEYkVKS0xHMUNRVUZ2UWl4TFFVTndRbTFGTEUxQlFVOHNTMEZEVUVNc1RVRkJUeXhOUVVOUU5XTXNWVUZCVnl4UFFVVmliVmtzV1VGQllTeERRVU5ZYlVJc1NVRkJTeXhOUVVOTVNTeEpRVUZMTEUxQlEweExMRXRCUVUwc1QwRkRUa1VzVDBGQlVTeFRRVU5TU2l4UFFVRlJMRk5CUTFKTExFOUJRVkVzVTBGRFVubENMRkZCUVZNc1ZVRkRWSFpDTEV0QlFVMHNUMEZEVGswc1NVRkJTeXhOUVVOTVJTeExRVUZOTEU5QlEwNVJMRTlCUVZFc1UwRkRValZDTEUxQlFVOHNVVUZEVUhGRUxFdEJRVTBzVDBGRFRuWkRMRWxCUVVzc1RVRkRURlVzVjBGQldTeGhRVU5hUml4TFFVRk5MRTlCUTA1UkxGbEJRV0VzWlVGRlpuZENMRlZCUVZjc1EwRkRWR3BFTEU5QlFWRXNVMEZEVWtrc1QwRkJVU3hUUVVOU09FTXNWVUZCVnl4WlFVTllja1FzU1VGQlN5eE5RVU5NUml4TlFVRlBMRkZCUTFCM1FpeFhRVUZaTEdGQlExcEdMRXRCUVUwc1VVRkZVbXRETEVsQlFVc3NRMEZEU0VNc1VVRkJVeXgxUWtGRFZFTXNVMEZCVlN3MFFrRkRWa01zVTBGQlZTeHJRMEZEVmtNc1ZVRkJWeXhwUkVGRFdFTXNaMEpCUVdsQ0xIRkhRVVZ1UWtNc1kwRkJaU3hyUWtGRFprTXNWMEZCV1N4bFFVTmFReXhaUVVGaExHZENRVU5pUXl4aFFVRmpMSE5DUVVOa1F5eFpRVUZoTEdWQlEySnVZU3hYUVVGWkxFTkJRMVp2WVN4UlFVRlRMRlZCUTFSdVZ5eHJRa0ZCYlVJc2IwSkJRMjVDTlVRc1kwRkJaU3huUWtGRFprWXNXVUZCWVN4alFVTmlSQ3hYUVVGWkxHRkJRMW8wUXl4WFFVRlpMR0ZCUTFwdFJ5eFZRVUZYTEZsQlExaHlTQ3hSUVVGVExGbEJTV0lzVlVGQlpXdFlMRWNzZFV0RE5VVm1MRzFDUVVWQkxFMUJRWEZDZFVJc1JVRnZSMjVDZUdkQ0xGbEJRVmw2VGl4RlFVRlBMRWxCUTJwQ05rWXNTMEZCUzNGdlFpeHBRa0ZCYlVJc1IwRkRlRUp5YjBJc1MwRkJTekJPTEZkQlFXRXNSMEZEYkVJeFRpeExRVUZMYzI5Q0xGZEJRV0VzUjBGRmJFSXZjMElzVDBGQlQxRXNTMEZCUzNGelFpeEZRVUZUUnl4UlFVRlJNM0pDTEZOQlFWTTBja0lzU1VGRGNFTktMRVZCUVZOSExFOUJRVTlETEVkQlFVODFja0lzVTBGQlUydFhMRWxCUXpsQ09WTXNTMEZCUzNGdlFpeHBRa0ZCYVVKMlZpeEhRVUZYTUZZc1VVRkpja05xZEVJc1QwRkJUMUVzUzBGQlMzRnpRaXhGUVVGVFN5eFBRVUZQTjNKQ0xGTkJRVk4yUWl4SlFVTnVRekpGTEV0QlFVdHpiMElzVjBGQlYycHpRaXhMUVVGTGFFSXNSMEZEY2tJc1RVRkJUVVFzUlVGQlRXZDBRaXhGUVVGVFN5eE5RVUZOY0hSQ0xFZEJRek5DTWtVc1MwRkJTekJPTEZkQlFWZDBVeXhGUVVGSmMzUkNMRWxCUVUxMGRFSXNSVUZCU1hWMFFpeFRRVWRvUXpOdlFpeExRVUZMTkc5Q0xFMUJRVkVzVlVGRllqVnZRaXhMUVVGTGNVNHNVMEZCVnl4RFFVTmtkMklzVFVGQlR5eFZRVUZoUXl4TlFVRk5ReXhsUVVNeFFrTXNVVUZCVXl4VlFVRmhReXhSUVVGUlJpeGxRVU01UWtjc1kwRkJaU3hWUVVGaFF5eGpRVUZqU2l4blFrRjZTRGxETERaQ1FVTkZMRTFCUVU4c1owSkJSVlFzYlVKQlEwVXNUVUZCVHl4RFFVTk1TeXhMUVVGTkxFTkJRVVZXTEVkQlFVa3NSVUZCUjBNc1RVRkJUeXhSUVVOMFFsVXNVMEZCVlN4RFFVRkZXQ3hIUVVGSkxFdEJRVTFETEUxQlFVOHNXVUZETjBKWExGVkJRVmNzUTBGQlJWb3NSMEZCU1N4TFFVRk5ReXhOUVVGUExHRkJRemxDV1N4TlFVRlBMRU5CUVVWaUxFZEJRVWtzUzBGQlRVTXNUVUZCVHl4VFFVTXhRbUVzVFVGQlR5eERRVUZGWkN4SFFVRkpMRXRCUVUxRExFMUJRVThzVTBGRE1VSmpMRTFCUVU4c1EwRkJSV1lzUjBGQlNTeExRVUZOUXl4TlFVRlBMRk5CUXpGQ1pTeE5RVUZQTEVOQlFVVm9RaXhIUVVGSkxFdEJRVTFETEUxQlFVOHNVMEZETVVKblFpeFBRVUZSTEVOQlFVVnFRaXhIUVVGSkxFdEJRVTFETEUxQlFVOHNWVUZETTBKcFFpeExRVUZOTEVOQlFVVnNRaXhIUVVGSkxFbEJRVTFETEUxQlFVOHNVVUZEZWtKclFpeFJRVUZUTEVOQlFVVnVRaXhIUVVGSkxFMUJRVTlETEUxQlFVOHNXVUZETjBKdFFpeFBRVUZSTEVOQlFVVndRaXhIUVVGSkxFMUJRVTlETEUxQlFVOHNWVUZETlVKdlFpeE5RVUZQTEVOQlFVVnlRaXhIUVVGSkxFMUJRVTlETEUxQlFVOHNVMEZETTBKeFFpeEpRVUZMTEVOQlFVVjBRaXhIUVVGSkxFMUJRVTlETEUxQlFVOHNUMEZEZWtKelFpeExRVUZOTEVOQlFVVjJRaXhIUVVGSkxFMUJRVTlETEUxQlFVOHNVVUZETVVKMVFpeGhRVUZqTEVOQlFVVjRRaXhIUVVGSkxFMUJRVTlETEUxQlFVOHNaMEpCUTJ4RGQwSXNVVUZCVXl4RFFVRkZla0lzUjBGQlNTeE5RVUZQUXl4TlFVRlBMRmRCUXpkQ2VVSXNUVUZCVHl4RFFVRkZNVUlzUjBGQlNTeE5RVUZQUXl4TlFVRlBMRk5CUXpOQ01FSXNUVUZCVHl4RFFVRkZNMElzUjBGQlNTeE5RVUZQUXl4TlFVRlBMRk5CUXpOQ01rSXNUMEZCVVN4RFFVRkZOVUlzUjBGQlNTeE5RVUZQUXl4TlFVRlBMRlZCUXpWQ05FSXNUVUZCVHl4RFFVRkZOMElzUjBGQlNTeE5RVUZQUXl4TlFVRlBMRk5CUXpOQ05rSXNUMEZCVVN4RFFVRkZPVUlzUjBGQlNTeE5RVUZQUXl4TlFVRlBMRlZCUXpWQ09FSXNWMEZCV1N4RFFVRkZMMElzUjBGQlNTeE5RVUZQUXl4TlFVRlBMR05CUTJoREswSXNTVUZCU3l4RFFVRkZhRU1zUjBGQlNTeE5RVUZQUXl4TlFVRlBMRTlCUTNwQ1owTXNWMEZCV1N4RFFVRkZha01zUjBGQlNTeE5RVUZQUXl4TlFVRlBMR05CUTJoRGFVTXNWMEZCV1N4RFFVRkZiRU1zUjBGQlNTeE5RVUZQUXl4TlFVRlBMR05CUTJoRGEwTXNZVUZCWXl4RFFVRkZia01zUjBGQlNTeE5RVUZQUXl4TlFVRlBMR2RDUVVOc1EyMURMRTFCUVU4c1EwRkJSWEJETEVkQlFVa3NUVUZCVDBNc1RVRkJUeXhUUVVNelFtOURMRTFCUVU4c1EwRkJSWEpETEVkQlFVa3NUVUZCVDBNc1RVRkJUeXhUUVVNelFuRkRMRXRCUVUwc1EwRkJSWFJETEVkQlFVa3NUVUZCVDBNc1RVRkJUeXhSUVVNeFFuTkRMRmRCUVZrc1EwRkJSWFpETEVkQlFVa3NUVUZCVDBNc1RVRkJUeXhsUVVsd1F5eHpRa0ZCYzBKMVF5eEZRVUZYT1VNc1JVRkJVeXRETEdkQ1FVRnBRa01zUlVGQlZ5eEZRVUZIUXl4SFFVRlZMRWRCUTJwR0xFbEJRVWxETEVWQlFXTXNSVUZEWkVNc1JVRkJVeXhIUVVOaUxFOUJRVkZNTEVkQlEwNHNTVUZCU3l4UlFVTklTeXhGUVVGVExFTkJRMUFzUlVGQlJ5eEZRVU5JTEVWQlFVY3NSVUZEU0N4SFFVRkpMRVZCUTBvc1IwRkJTU3hGUVVOS0xFZEJRVWtzUlVGRFNpeEpRVUZMTEVWQlEwd3NTVUZCU3l4RlFVTk1MRWxCUVVzc1JVRkRUQ3hKUVVGTExFVkJRMHdzU1VGQlRTeEpRVVZTTEUxQlEwWXNTVUZCU3l4blFrRkRTRUVzUlVGQlV5eERRVU5RTEVWQlFVY3NSVUZEU0N4SFFVRkpMRVZCUTBvc1IwRkJTU3hGUVVOS0xFZEJRVWtzUlVGRFNpeEhRVUZKTEVkQlJVNHNUVUZEUml4SlFVRkxMRlZCUTBoQkxFVkJRVk1zUTBGRFVDeEZRVUZITEVWQlEwZ3NSVUZCUnl4RlFVTklMRWRCUVVrc1JVRkRTaXhIUVVGSkxFVkJRMG9zUjBGQlNTeEZRVU5LTEVsQlFVc3NSVUZEVEN4SlFVRkxMRVZCUTB3c1NVRkJTeXhGUVVOTUxFbEJRVXNzUlVGRFRDeEpRVUZOTEVsQlMxb3NUVUZCVFVNc1JVRkJXV3AzUWl4UFFVRlBVU3hMUVVGTGQzWkNMRWRCUTNoQ1JTeEZRVUZqUkN4RlFVRlZjSGhDTEU5QlFWTXNSVUZEZGtNc1NVRkJTeXhKUVVGSmNVTXNSVUZCU1N4RlFVRkhRU3hGUVVGSlozWkNMRVZCUVdGb2RrSXNTVUZCU3l4RFFVTndReXhOUVVGTmFYWkNMRVZCUVdOR0xFVkJRVlV2ZFVJc1IwRkRlRUpyZGtJc1JVRkJhMEpLTEVWQlFVOUhMRWRCUXk5Q0xFZEJRVWxCTEVWQlFWTk9MRVZCUVZVc1RVRkRka0pGTEVWQlFXTkxMRVZCU1doQ0xFOUJRVTlPTEVWQlFWVkRMRVZCUVdNc1JVRkJTVUVzUlVGclEzSkRMRzlDUVVORkxFMUJRVThzUTBGRFRDeERRVUZEYkVRc1JVRkJVMHNzVFVGQlRWY3NTMEZCUzFRc1QwRkJVU3hEUVVGRExFVkJRVWNzUlVGQlJ5eEZRVUZITEVWQlFVY3NSMEZETVVNc1EwRkJRMUFzUlVGQlUwc3NUVUZCVFdsQ0xFMUJRVTFtTEU5QlFWRXNRMEZCUXl4TFFVVXZRaXhEUVVGRFVDeEZRVUZUU3l4TlFVRk5jVUlzVDBGQlQyNUNMRTlCUVZFc1EwRkJReXhMUVVGTkxFdEJRVTBzUzBGQlRTeExRVUZOTEUxQlEzaEVMRU5CUVVOUUxFVkJRVk5MTEUxQlFVMXpRaXhOUVVGTmNFSXNUMEZCVVN4RFFVRkRMRXRCUVUwc1MwRkJUU3hMUVVGTkxFdEJRVTBzUzBGQlRTeExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1RVRkRNMFlzUTBGQlExQXNSVUZCVTBzc1RVRkJUWFZDTEVsQlFVbHlRaXhQUVVGUkxFTkJRVU1zUzBGQlRTeExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRTFCUXpORUxFTkJRVU5RTEVWQlFWTkxMRTFCUVUweVFpeE5RVUZOZWtJc1QwRkJVU3hEUVVGRExFdEJRVTBzUzBGQlRTeExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hOUVVVdlJTeERRVUZEVUN4RlFVRlRTeXhOUVVGTk9FSXNUVUZCVFRWQ0xFOUJRVkVzUTBGQlF5eExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hMUVVGTkxFMUJRM3BGTEVOQlFVTlFMRVZCUVZOTExFMUJRVTFuUXl4WFFVRlhPVUlzVDBGQlVTeERRVUZETEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hMUVVGTkxFdEJRVTBzUzBGQlRTeExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hOUVVONFNDeERRVUZEVUN4RlFVRlRTeXhOUVVGTmNVTXNUVUZCVFc1RExFOUJRVkVzUTBGQlF5eExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hMUVVGTkxFMUJRM3BGTEVOQlFVTlFMRVZCUVZOTExFMUJRVTEzUXl4WFFVRlhkRU1zVDBGQlVTeERRVUZETEV0QlFVMHNTMEZCVFN4TFFVRk5MRXRCUVUwc1MwRkJUU3hMUVVGTkxFdEJRVTBzUzBGQlRTeExRVUZOTEV0QlFVMHNUMEZKY0Vjc2FVSkJRMFVzVFVGQlR5eERRVVZNTEVWQlFVY3NTMEZEU0N4RlFVRkhMRXRCUTBnc1JVRkJSeXhMUVVOSUxFVkJRVWNzUzBGRFNDeEZRVUZITEV0QlEwZ3NSMEZCU1N4SFFVTktMRWxCUVVzc1MwRkhUQ3hMUVVGTkxFdEJRMDRzUzBGQlRTeExRVWRPTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUTA0c1MwRkJUU3hMUVVkT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlEwNHNTMEZCVFN4TFFVTk9MRXRCUVUwc1MwRkhUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeEpRVU5PTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUTA0c1MwRkJUU3hMUVVOT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlIwNHNTMEZCVFN4TFFVTk9MRXRCUVUwc1MwRkhUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeExRVU5PTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUjA0c1MwRkJUU3hMUVVOT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlIwNHNTMEZCVFN4TFFVTk9MRXRCUVUwc1MwRkRUaXhMUVVGTkxFdEJSMDRzUzBGQlRTeExRVU5PTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUjA0c1MwRkJUU3hMUVVOT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlEwNHNTMEZCVFN4TFFVTk9MRXRCUVUwc1MwRkhUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeExRVU5PTEV0QlFVMHNTMEZIVGl4TFFVRk5MRXRCUTA0c1MwRkJUU3hMUVVOT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlEwNHNTMEZCVFN4TFFVZE9MRXRCUVUwc1MwRkRUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeExRVWRPTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUTA0c1MwRkJUU3hMUVVOT0xFdEJRVTBzUzBGSFRpeExRVUZOTEV0QlEwNHNTMEZCVFN4TFFVTk9MRXRCUVUwc1MwRkhUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeExRVWRPTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUTA0c1MwRkJUU3hMUVVOT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlEwNHNTMEZCVFN4TFFVZE9MRXRCUVUwc1MwRkRUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeExRVU5PTEV0QlFVMHNTMEZEVGl4TFFVRk5MRXRCUTA0c1MwRkJUU3hMUVVkT0xFdEJRVTBzUzBGRFRpeExRVUZOTEV0QlEwNHNTMEZCVFN4TFFVTk9MRXRCUVUwc1MwRkRUaXhMUVVGTkxFdEJRMDRzUzBGQlRTeFBRWGhSV2l4aExIVkxRMFpCTEcxQ1FVVkJMRTFCUVhGQ1J5eEZRVU51UWl4dFFrRkRSU3hOUVVGUExFTkJRVU1zVlVGQlUwd3NUVUZCVFZjc1RVRkhla0lzYzBKQlFYTkNkRmNzUjBGRGNFSXNUVUZCVFhaR0xFVkJRVlVzUTBGRFpDeEZRVUZITEVOQlFVTXNRMEZCUlN4RFFVRkRMRlZCUVZOcllpeE5RVUZOVnl4TFFVRkxWaXhKUVVGTExFdEJSV3hETEU5QlFVOXVZaXhGUVVGUmRVWXNSMEZCVjNaR0xFVkJRVkYxUml4SFFVRlhMRXRCUnk5RExHOUNRVU5GTEVsQlFVazRXU3hGUVVGVkxFZEJTV1FzVDBGSVFUbERMRVZCUVUxTUxFMUJRVTAzY2tJc1UwRkJVU3hEUVVGRGVFSXNSVUZCUzNGQ0xFdEJRM2hDYlhaQ0xFVkJRVkY0ZDBJc1JVRkJTWFYwUWl4UFFVRlRMRU5CUVVWNGRVSXNTMEZCVFRSTUxFOUJRVkZwUWl4UlFVRlRMRVZCUVVjMmEwSXNTVUZCU3l4TlFVVnFSRVFzUjBGcVFsZ3NZU3gxUzBOR1FTeHRRa0ZGUVN4TlFVRnhRak5ETEVWQk1rSnVRbkpvUWl4WlFVRlplazRzUjBGRFZqWkdMRXRCUVV0emIwSXNWMEZCWVN4SFFVTnNRaTl6UWl4UFFVRlBVU3hMUVVGTGEzUkNMRVZCUVZGU0xFOUJRVTgzY2tJc1UwRkJVM05ETEVsQlEyeERZeXhMUVVGTGMyOUNMRmRCUVZkcWMwSXNTMEZCU3pSelFpeEZRVUZSVWl4TlFVRk5kbkJDTEVkQlFVOTVjRUlzVlVFM1FqbERMRzFDUVVORkxFMUJRVThzUTBGRFRDeFZRVUZUUml4TlFVRk5iMElzVVVGRFppeFZRVUZUY0VJc1RVRkJUWEZDTEU5QlEyWXNWVUZCVTNKQ0xFMUJRVTF6UWl4TlFVTm1MRlZCUVZOMFFpeE5RVUZOZFVJc1NVRkRaaXhWUVVGVGRrSXNUVUZCVFhkQ0xFdEJRMllzVlVGQlUzaENMRTFCUVUxNVFpeGhRVU5tTEZWQlFWTjZRaXhOUVVGTk1FSXNVVUZEWml4VlFVRlRNVUlzVFVGQlRUSkNMRTFCUTJZc1ZVRkJVek5DTEUxQlFVMDBRaXhOUVVObUxGVkJRVk0xUWl4TlFVRk5Oa0lzVDBGRFppeFZRVUZUTjBJc1RVRkJUVGhDTEUxQlEyWXNWVUZCVXpsQ0xFMUJRVTByUWl4UFFVTm1MRlZCUVZNdlFpeE5RVUZOWjBNc1YwRkRaaXhWUVVGVGFFTXNUVUZCVFdsRExFbEJRMllzVlVGQlUycERMRTFCUVUxclF5eFhRVU5tTEZWQlFWTnNReXhOUVVGTmJVTXNWMEZEWml4VlFVRlRia01zVFVGQlRXOURMR0ZCUTJZc1ZVRkJVM0JETEUxQlFVMXhReXhOUVVObUxGVkJRVk55UXl4TlFVRk5jME1zVFVGRFppeFZRVUZUZEVNc1RVRkJUWFZETEUxQldXNUNMSE5DUVVGelFteFpMRWRCUTNCQ0xFMUJRVTEyUml4RlFVRlZMRU5CUldRc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUYTJJc1RVRkJUVzlDTEZGQlFWRnVRaXhKUVVGTExFbEJRM1JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXOUNMRkZCUVZGdVFpeEpRVUZMTEVsQlIzUkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhGQ0xFOUJRVTl3UWl4SlFVRkxMRWxCUTNKRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWEZDTEU5QlFVOXdRaXhKUVVGTExFbEJRM0pETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYRkNMRTlCUVU5d1FpeEpRVUZMTEVsQlIzSkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhOQ0xFMUJRVTF5UWl4SlFVRkxMRWxCUTNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWE5DTEUxQlFVMXlRaXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYTkNMRTFCUVUxeVFpeEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhOQ0xFMUJRVTF5UWl4SlFVRkxMRWxCUjNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWFZDTEVsQlFVbDBRaXhKUVVGTExFbEJRMnhETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYVkNMRWxCUVVsMFFpeEpRVUZMTEVsQlEyeERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhWQ0xFbEJRVWwwUWl4SlFVRkxMRWxCUTJ4RExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWFZDTEVsQlFVbDBRaXhKUVVGTExFbEJRMnhETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYVkNMRWxCUVVsMFFpeEpRVUZMTEVsQlEyeERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhWQ0xFbEJRVWwwUWl4SlFVRkxMRWxCUTJ4RExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWFZDTEVsQlFVbDBRaXhKUVVGTExFbEJSMnhETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYZENMRXRCUVV0MlFpeEpRVUZMTEVsQlEyNURMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhkQ0xFdEJRVXQyUWl4SlFVRkxMRWxCUjI1RExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWGxDTEdGQlFXRjRRaXhKUVVGTExFbEJRek5ETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYbENMR0ZCUVdGNFFpeEpRVUZMTEVsQlF6TkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhsQ0xHRkJRV0Y0UWl4SlFVRkxMRWxCUXpORExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWGxDTEdGQlFXRjRRaXhKUVVGTExFbEJSek5ETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRUQkNMRkZCUVZGNlFpeEpRVUZMTEVsQlEzUkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFRCQ0xGRkJRVkY2UWl4SlFVRkxMRWxCUjNSRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUVEpDTEUxQlFVMHhRaXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRUSkNMRTFCUVUweFFpeEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFRKQ0xFMUJRVTB4UWl4SlFVRkxMRWxCUjNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUVFJDTEUxQlFVMHpRaXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRUUkNMRTFCUVUwelFpeEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFRSQ0xFMUJRVTB6UWl4SlFVRkxMRWxCUjNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUVGhDTEUxQlFVMDNRaXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRUaENMRTFCUVUwM1FpeEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFRoQ0xFMUJRVTAzUWl4SlFVRkxMRWxCUTNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUVGhDTEUxQlFVMDNRaXhKUVVGTExFbEJSM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRTdENMRTlCUVU4NVFpeEpRVUZMTEVsQlEzSkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFN0Q0xFOUJRVTg1UWl4SlFVRkxMRWxCUTNKRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUU3RDTEU5QlFVODVRaXhKUVVGTExFbEJSM0pETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXZERMRmRCUVZjdlFpeEpRVUZMTEVsQlEzcERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFdkRExGZEJRVmN2UWl4SlFVRkxMRWxCUTNwRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUV2RETEZkQlFWY3ZRaXhKUVVGTExFbEJRM3BETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXZERMRmRCUVZjdlFpeEpRVUZMTEVsQlEzcERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFdkRExGZEJRVmN2UWl4SlFVRkxMRWxCUjNwRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUV2xETEVsQlFVbG9ReXhKUVVGTExFbEJRMnhETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXbERMRWxCUVVsb1F5eEpRVUZMTEVsQlEyeERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFdsRExFbEJRVWxvUXl4SlFVRkxMRWxCUjJ4RExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUV3RETEZkQlFWZHFReXhKUVVGTExFbEJRM3BETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXdERMRmRCUVZkcVF5eEpRVUZMTEVsQlEzcERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFd0RExGZEJRVmRxUXl4SlFVRkxMRWxCUTNwRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUV3RETEZkQlFWZHFReXhKUVVGTExFbEJSM3BETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXMURMRmRCUVZkc1F5eEpRVUZMTEVsQlEzcERMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFcxRExGZEJRVmRzUXl4SlFVRkxMRWxCUTNwRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUVzFETEZkQlFWZHNReXhKUVVGTExFbEJSM3BETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRXOURMR0ZCUVdGdVF5eEpRVUZMTEVsQlF6TkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFc5RExHRkJRV0Z1UXl4SlFVRkxMRWxCUnpORExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWEZETEUxQlFVMXdReXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYRkRMRTFCUVUxd1F5eEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhGRExFMUJRVTF3UXl4SlFVRkxMRWxCUTNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWEZETEUxQlFVMXdReXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYRkRMRTFCUVUxd1F5eEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhGRExFMUJRVTF3UXl4SlFVRkxMRWxCUjNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWE5ETEUxQlFVMXlReXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYTkRMRTFCUVUxeVF5eEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhORExFMUJRVTF5UXl4SlFVRkxMRWxCUTNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWE5ETEUxQlFVMXlReXhKUVVGTExFbEJRM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYTkRMRTFCUVUxeVF5eEpRVUZMTEVsQlEzQkRMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhORExFMUJRVTF5UXl4SlFVRkxMRWxCUTNCRExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWE5ETEUxQlFVMXlReXhKUVVGTExFbEJSM0JETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYVkRMRXRCUVV0MFF5eEpRVUZMTEVsQlEyNURMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhWRExFdEJRVXQwUXl4SlFVRkxMRWxCUTI1RExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWFZETEV0QlFVdDBReXhKUVVGTExFbEJRMjVETEV0QlFVMHNRMEZCUXl4RFFVRkZMRU5CUVVNc1ZVRkJVMFFzVFVGQlRYVkRMRXRCUVV0MFF5eEpRVUZMTEVsQlEyNURMRXRCUVUwc1EwRkJReXhEUVVGRkxFTkJRVU1zVlVGQlUwUXNUVUZCVFhWRExFdEJRVXQwUXl4SlFVRkxMRWxCUTI1RExFdEJRVTBzUTBGQlF5eERRVUZGTEVOQlFVTXNWVUZCVTBRc1RVRkJUWFZETEV0QlFVdDBReXhKUVVGTExFdEJSM0pETEU5QlFVOXVZaXhGUVVGUmRVWXNSMEZCVjNaR0xFVkJRVkYxUml4SFFVRlhMRXRCUnk5RExHOUNRVU5GTEVsQlFVazRXU3hGUVVGVkxFZEJTV1FzVDBGSVFUTkRMRVZCUVZGU0xFMUJRVTAzY2tJc1UwRkJVU3hEUVVGRGVFSXNSVUZCUzNGQ0xFdEJRekZDYlhaQ0xFVkJRVkY0ZDBJc1JVRkJTWFYwUWl4UFFVRlRMRU5CUVVWNGRVSXNTMEZCVFRSTUxFOUJRVkZwUWl4UlFVRlRMRVZCUVVjMmEwSXNTVUZCU3l4TlFVVnFSRVFzUjBFMVNsZ3NZU3gxUzBOR1FTeHRRa0ZGUVN4TlFVRnhRbnBETEVWQlpXNUNkbWhDTEZsQlFWbDZUaXhIUVVOV05rWXNTMEZCUzNOdlFpeFhRVUZoTEVkQlEyeENMM05DTEU5QlFVOVJMRXRCUVV0dmRFSXNSVUZCWTFZc1QwRkJUemR5UWl4VFFVRlRjME1zU1VGRGVFTmpMRXRCUVV0emIwSXNWMEZCVjJwelFpeExRVUZMT0hOQ0xFVkJRV05XTEUxQlFVMTJjRUlzUjBGQlQzbHdRaXhWUVdwQ2NFUXNiVUpCUTBVc1RVRkJUeXhEUVVOTUxGVkJRVk5HTEUxQlFVMXhRaXhQUVVObUxGVkJRVk55UWl4TlFVRk5jMElzVFVGRFppeFZRVUZUZEVJc1RVRkJUWFZDTEVsQlEyWXNWVUZCVTNaQ0xFMUJRVTB5UWl4TlFVTm1MRlZCUVZNelFpeE5RVUZOT0VJc1RVRkRaaXhWUVVGVE9VSXNUVUZCVFdkRExGZEJRMllzVlVGQlUyaERMRTFCUVUxeFF5eE5RVU5tTEZWQlFWTnlReXhOUVVGTmQwTXNXVUZaYmtJc2MwSkJRWE5DYmxrc1IwRkRjRUlzVFVGQlRYWkdMRVZCUVZVc1EwRkZaQ3hMUVVGTkxFTkJRVU1zUTBGQlJTeERRVUZETEZWQlFWTnJZaXhOUVVGTmNVSXNUMEZCVDNCQ0xFbEJRVXNzU1VGRGNrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOY1VJc1QwRkJUM0JDTEVsQlFVc3NTVUZIY2tNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5jVUlzVDBGQlQzQkNMRWxCUVVzc1NVRkRja01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmNVSXNUMEZCVDNCQ0xFbEJRVXNzU1VGRGNrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOY1VJc1QwRkJUM0JDTEVsQlFVc3NTVUZIY2tNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5jMElzVFVGQlRYSkNMRWxCUVVzc1NVRkRjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmMwSXNUVUZCVFhKQ0xFbEJRVXNzU1VGRGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOYzBJc1RVRkJUWEpDTEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5jMElzVFVGQlRYSkNMRWxCUVVzc1NVRkhjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmRVSXNTVUZCU1hSQ0xFbEJRVXNzU1VGRGJFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZFVJc1NVRkJTWFJDTEVsQlFVc3NTVUZEYkVNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kVUlzU1VGQlNYUkNMRWxCUVVzc1NVRkRiRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmRVSXNTVUZCU1hSQ0xFbEJRVXNzU1VGRGJFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZFVJc1NVRkJTWFJDTEVsQlFVc3NTVUZEYkVNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kVUlzU1VGQlNYUkNMRWxCUVVzc1NVRkRiRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmRVSXNTVUZCU1hSQ0xFbEJRVXNzU1VGSGJFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZFVJc1NVRkJTWFJDTEVsQlFVc3NTVUZEYkVNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kVUlzU1VGQlNYUkNMRWxCUVVzc1NVRkhiRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmRVSXNTVUZCU1hSQ0xFbEJRVXNzU1VGRGJFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZFVJc1NVRkJTWFJDTEVsQlFVc3NTVUZEYkVNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kVUlzU1VGQlNYUkNMRWxCUVVzc1NVRkRiRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmRVSXNTVUZCU1hSQ0xFbEJRVXNzU1VGSGJFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOTWtJc1RVRkJUVEZDTEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5Na0lzVFVGQlRURkNMRWxCUVVzc1NVRkhjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTk1rSXNUVUZCVFRGQ0xFbEJRVXNzU1VGRGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOTWtJc1RVRkJUVEZDTEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5Na0lzVFVGQlRURkNMRWxCUVVzc1NVRkhjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTk5FSXNUVUZCVFROQ0xFbEJRVXNzU1VGRGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOTkVJc1RVRkJUVE5DTEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5ORUlzVFVGQlRUTkNMRWxCUVVzc1NVRkhjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTk9FSXNUVUZCVFRkQ0xFbEJRVXNzU1VGRGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOT0VJc1RVRkJUVGRDTEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5PRUlzVFVGQlRUZENMRWxCUVVzc1NVRkRjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTk9FSXNUVUZCVFRkQ0xFbEJRVXNzU1VGSGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOT0VJc1RVRkJUVGRDTEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5PRUlzVFVGQlRUZENMRWxCUVVzc1NVRkRjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTk9FSXNUVUZCVFRkQ0xFbEJRVXNzU1VGSGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOWjBNc1YwRkJWeTlDTEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5aME1zVjBGQlZ5OUNMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTlowTXNWMEZCVnk5Q0xFbEJRVXNzU1VGRGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOWjBNc1YwRkJWeTlDTEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5aME1zVjBGQlZ5OUNMRWxCUVVzc1NVRkhla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTlowTXNWMEZCVnk5Q0xFbEJRVXNzU1VGRGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOWjBNc1YwRkJWeTlDTEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5aME1zVjBGQlZ5OUNMRWxCUVVzc1NVRkhla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTlowTXNWMEZCVnk5Q0xFbEJRVXNzU1VGRGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOWjBNc1YwRkJWeTlDTEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5aME1zVjBGQlZ5OUNMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTlowTXNWMEZCVnk5Q0xFbEJRVXNzU1VGSGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOWjBNc1YwRkJWeTlDTEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5aME1zVjBGQlZ5OUNMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTlowTXNWMEZCVnk5Q0xFbEJRVXNzU1VGSGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOY1VNc1RVRkJUWEJETEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5jVU1zVFVGQlRYQkRMRWxCUVVzc1NVRkhjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmNVTXNUVUZCVFhCRExFbEJRVXNzU1VGRGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOY1VNc1RVRkJUWEJETEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5jVU1zVFVGQlRYQkRMRWxCUVVzc1NVRkRjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmNVTXNUVUZCVFhCRExFbEJRVXNzU1VGRGNFTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOY1VNc1RVRkJUWEJETEVsQlFVc3NTVUZEY0VNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5jVU1zVFVGQlRYQkRMRWxCUVVzc1NVRkhjRU1zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmQwTXNWMEZCVjNaRExFbEJRVXNzU1VGRGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZDBNc1YwRkJWM1pETEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kME1zVjBGQlYzWkRMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmQwTXNWMEZCVjNaRExFbEJRVXNzU1VGRGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZDBNc1YwRkJWM1pETEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kME1zVjBGQlYzWkRMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmQwTXNWMEZCVjNaRExFbEJRVXNzU1VGSGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZDBNc1YwRkJWM1pETEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kME1zVjBGQlYzWkRMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmQwTXNWMEZCVjNaRExFbEJRVXNzU1VGRGVrTXNTMEZCVFN4RFFVRkRMRU5CUVVVc1EwRkJReXhWUVVGVFJDeE5RVUZOZDBNc1YwRkJWM1pETEVsQlFVc3NTVUZEZWtNc1MwRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eFZRVUZUUkN4TlFVRk5kME1zVjBGQlYzWkRMRWxCUVVzc1NVRkRla01zUzBGQlRTeERRVUZETEVOQlFVVXNRMEZCUXl4VlFVRlRSQ3hOUVVGTmQwTXNWMEZCVjNaRExFbEJRVXNzUzBGRk0wTXNUMEZCVDI1aUxFVkJRVkYxUml4SFFVRlhka1lzUlVGQlVYVkdMRWRCUVZjc1MwRkhMME1zYjBKQlEwVXNTVUZCU1RoWkxFVkJRVlVzUjBGSlpDeFBRVWhCZWtNc1JVRkJZMVlzVFVGQlRUZHlRaXhUUVVGUkxFTkJRVU40UWl4RlFVRkxjVUlzUzBGRGFFTnRka0lzUlVGQlVYaDNRaXhGUVVGSmRYUkNMRTlCUVZNc1EwRkJSWGgxUWl4TFFVRk5ORXdzVDBGQlVXbENMRkZCUVZNc1JVRkJSelpyUWl4SlFVRkxMRTFCUldwRVJDeEhRUzlKV0N4aExIVkxRMFpCTEcxQ1FVTkJMR0ZCUTBFc1lVRkZRU3hWUVVGbExFTkJRMkk1UXl4TlFVRkJMRlZCUTBGSExGRkJRVUVzVlVGRFFVVXNZMEZCUVN4WkxHVkRVRVp3ZGtJc1JVRkJUME1zVVVGQlZTeEZRVUZxUWl4UExGTkRRMEVzU1VGUFNUaDRRaXhGUVVOQlF5eEZRVkpCZEc5Q0xFVkJRVlV4U2l4RlFVRlBReXhSUVVGVkxFZEJWUzlDTEZOQlFWTm5lVUlzU1VGRFRDeE5RVUZOTEVsQlFVbG9lRUlzVFVGQlRTeHRRMEZGY0VJc1UwRkJVMmw0UWl4SlFVTk1MRTFCUVUwc1NVRkJTV3A0UWl4TlFVRk5MSEZEUVhOQ2NFSXNVMEZCVTJ0NFFpeEZRVUZYUXl4SFFVTm9RaXhIUVVGSlRDeEpRVUZ4UWswc1YwRkZja0lzVDBGQlQwRXNWMEZCVjBRc1JVRkJTeXhIUVVjelFpeEpRVUZMVEN4SlFVRnhRa1VzU1VGQmNVSkdMRWxCUVhGQ1RTeFhRVVZvUlN4UFFVUkJUaXhGUVVGdFFrMHNWMEZEV2tFc1YwRkJWMFFzUlVGQlN5eEhRVVV6UWl4SlFVVkpMRTlCUVU5TUxFVkJRV2xDU3l4RlFVRkxMRWRCUXk5Q0xFMUJRVTB4Y2tJc1IwRkRTaXhKUVVWSkxFOUJRVTl4Y2tJc1JVRkJhVUo0YkVJc1MwRkJTeXhMUVVGTk5teENMRVZCUVVzc1IwRkRNVU1zVFVGQlRURnlRaXhIUVVWS0xFOUJRVTl4Y2tJc1JVRkJhVUo0YkVJc1MwRkJTM1JITEV0QlFVMXRjMElzUlVGQlN5eE5RWFpEYmtRc1YwRkRSeXhKUVVWUlRDeEZRVVJ6UWl4dFFrRkJaazBzVjBGRFdVRXNWMEZGUVVvc1JVRkZla0lzVFVGQlQzWnlRaXhIUVVOTWNYSkNMRVZCUVcxQ1JTeEZRVVYyUWl4SlFVVlJSQ3hGUVVSM1FpeHRRa0ZCYWtKTkxHRkJRMk5CTEdGQlJVRktMRVZCUlROQ0xFMUJRVTk0Y2tJc1IwRkRUSE55UWl4RlFVRnhRa1VzUjBGcVFqZENMRWRCZDBWQkxFbEJSVWxMTEVWQlJrRkRMRVZCUVZFc1IwRkRVa01zUjBGQlZ5eEZRVVZZUXl4SFFVRmpMRVZCUld4Q0xGTkJRVk5ETEVsQlEwRkdMRWRCUVdGR0xFbEJSMnhDUlN4SFFVRlhMRVZCUTFCR0xFVkJRV0ZzZVVJc1QwRkRZbTE1UWl4RlFVRlJSQ3hGUVVGaGRrMHNUMEZCVDNkTkxFZEJSVFZDUlN4SFFVRmpMRVZCUldSR0xFVkJRVTF1ZVVJc1VVRkRUblY1UWl4TFFVbFNMRk5CUVZOQkxFbEJRMHdzU1VGQlNVZ3NSVUZCU2l4RFFVZEJMRWxCUVVsSkxFVkJRVlZXTEVWQlFWZFJMRWRCUTNwQ1JpeEhRVUZYTEVWQlIxZ3NTVUZFUVN4SlFVRkpiR3hDTEVWQlFVMXBiRUlzUlVGQlRXNTVRaXhQUVVOV2EwNHNSMEZCU3l4RFFVZFFMRWxCUmtGbmJFSXNSVUZCWlVNc1JVRkRaa0VzUlVGQlVTeExRVU5EUlN4RlFVRmhibXhDTEVkQlEyUm5iRUlzUjBGRFFVRXNSVUZCWVVjc1IwRkJXVWtzVFVGSGFrTktMRWRCUVdNc1JVRkRaRzVzUWl4RlFVRk5hV3hDTEVWQlFVMXVlVUlzVDBGRmFFSnJlVUlzUlVGQlpTeExRVU5tUlN4SFFVRlhMRVZCYmtWbUxGTkJRWGxDVFN4SFFVTnlRaXhIUVVGSlppeEpRVUYxUWswc1lVRkZka0lzVDBGQlQwRXNZVUZCWVZNc1IwRkhlRUlzU1VGQlMyWXNTVUZCZFVKRkxFbEJRWGRDUml4SlFVRjFRazBzWVVGRmRrVXNUMEZFUVU0c1JVRkJjVUpOTEdGQlEyUkJMR0ZCUVdGVExFZEJSWGhDTEVsQlJWZG1MRVZCUVcxQ1pTeEhRVU0xUWl4TlFVRlBjbk5DTEVkQlEwd3NTVUZGU1N4UFFVRlBjM0pDTEVWQlFXMUNlbXhDTEV0QlFVc3NTMEZCVFhkdFFpeEhRVU4yUXl4TlFVRlBjbk5DTEVkQlIwd3NUMEZCVDNOeVFpeEZRVUZ0UW5wc1FpeExRVUZMZEVjc1MwRkJUVGh6UWl4TFFXZEVOME5ETEVOQlFXZENTQ3hKUVdsQ2NFSXNVMEZCVTBrc1JVRkJTMklzUlVGQlMyTXNSMEZEWm1wMFFpeExRVUZMYlhOQ0xFbEJRVTFCTEVWQlExaHVjMElzUzBGQlMybDBRaXhOUVVGUlFTeEZRVmxxUWl4VFFVRlRReXhMUVRWQ1ZIcHdRaXhGUVVGUk1IQkNMRk5CUVZjc1UwRkJWV2hDTEVkQlEzcENMRWxCUVVrMWNFSXNSVUZCVHl4SlFVRkpaQ3hOUVVGTkwwVXNWVUZCVlhSRExFOUJRVk1zUjBGRGVFTXNSMEZCU1hORExGVkJRVlYwUXl4UFFVRlRMRVZCUTI1Q0xFbEJRVXNzU1VGQlNYRkRMRVZCUVVrc1JVRkJSMEVzUlVGQlNVTXNWVUZCVlhSRExFOUJRVkZ4UXl4SlFVTnNRemhHTEVWQlFVczVSaXhGUVVGSkxFZEJRVXRETEZWQlFWVkVMRWRCUjJoRE9IWkNMRVZCUVUxc2QwSXNTMEZCU3l4SlFVRkpNbmRDTEVWQlFVdGlMRVZCUVVzMWNFSXNTVUZEU2l4SlFVRnFRbWR4UWl4RlFVRk5ibmxDTEZGQlFXbENiM2xDTEVkQlEzWkNUaXhGUVVGWFV5eEpRVk51UWtzc1JVRkJTMGtzVlVGQlZWQXNTVUZCVFN4WFFVTnFRamR6UWl4TFFVRkxiWE5DTEVsQlFVazNka0lzVFVGQlRTeExRVUZOTUVRc1MwRkJTMmwwUWl4UlFVVTVRbmh3UWl4RlFVRlJPRXdzVFVGQlVTeFZRVU5vUWpsTUxFVkJRVkUwY0VJc1UwRkJWU3hGUVVOc1FqVndRaXhGUVVGUlF5eEpRVUZOTEVkQlEyUkVMRVZCUVZFMmNFSXNTMEZCVHl4SFFVTm1OM0JDTEVWQlFWRTRjRUlzVVVGQlZTeEhRVU5zUWpsd1FpeEZRVUZSSzNCQ0xGTkJRVmNzUjBGSmJrSXZjRUlzUlVGQlVXdEdMRWRCUVV0MWEwSXNSVUZEWW5wd1FpeEZRVUZSWjNGQ0xGbEJRV05RTEVWQlEzUkNlbkJDTEVWQlFWRnBjVUlzUzBGQlQxSXNSVUZEWm5wd1FpeEZRVUZSYlVZc1NVRkJUWE5yUWl4RlFVTmtlbkJDTEVWQlFWRnJjVUlzWlVGQmFVSlVMRVZCUTNwQ2VuQkNMRVZCUVZGdGNVSXNiVUpCUVhGQ1ZpeEZRVU0zUW5wd1FpeEZRVUZSSzBnc1MwRkJUekJvUWl4RlFVTm1lbkJDTEVWQlFWRnZjVUlzWjBKQlFXdENXQ3hGUVVNeFFucHdRaXhGUVVGUmNYRkNMRzlDUVVGelFsb3NSVUZGT1VKNmNFSXNSVUZCVVd4RkxGVkJRVmtzVTBGQlZUVkdMRWRCUVZFc1RVRkJUeXhKUVVVM1F6aEtMRVZCUVZGemNVSXNVVUZCVlN4VFFVRlZjREJDTEVkQlEzaENMRTFCUVUwc1NVRkJTWEZDTEUxQlFVMHNjVU5CUjNCQ2VVa3NSVUZCVVhWeFFpeEpRVUZOTEZkQlFXTXNUVUZCVHl4TFFVTnVRM1p4UWl4RlFVRlJkM0ZDTEUxQlFWRXNVMEZCVlVNc1IwRkRkRUlzVFVGQlRTeEpRVUZKYkhwQ0xFMUJRVTBzYlVOQlJYQkNlVWtzUlVGQlVUQnhRaXhOUVVGUkxGZEJRV0VzVDBGQlR5eEpMREJDUTNwTGNFTXNVMEZCVTBNc1JVRkJVVU1zUjBGRFlrRXNSVUZCVDBFc1IwRkJVU3hIUVVObWNuVkNMRXRCUVV0NFJ5eEhRVUZMTmpCQ0xFVkJRVXQ0UXl4TFFVRlBMRWxCUTNSQ04zSkNMRXRCUVV0emRVSXNTVUZCVFVRc1JVRkJTME1zUzBGQlR5eEpRVU4yUW5SMVFpeExRVUZMZFhWQ0xFOUJRVk5HTEVWQlFVdEZMRkZCUVZVc1JVRkROMEoyZFVJc1MwRkJTM2QxUWl4UFFVRlRTQ3hGUVVGTFJ5eFBRVUZUTEVkQlFVdElMRVZCUVV0SExGRkJRVlVzUlVGQlNVZ3NSVUZCUzBjc1QwRkJVeXhGUVVOc1JYaDFRaXhMUVVGTGVYVkNMRk5CUVZjc1JVRlNjRUpzZWtJc1QwRkJUME1zWlVGQlpYaENMRVZCUVZNc1lVRkJZeXhEUVVGRmMwSXNUMEZCVHl4SlFVTjBSSFJDTEVWQlFWRnZNRUlzWVVGQlZTeEZRVk5zUW5Bd1FpeEZRVUZSYnpCQ0xGRkJRVlZCTEVWQlQyeENRU3hGUVVGUmFFSXNWVUZCVlhOQ0xGTkJRVmNzVjBGRGVrSXNTVUZCU1d3eFFpeEZRVUZMZDBjc1MwRkJTM2hITEVkQlFVdExMRXRCUVVzNE1FSXNTVUZCU1ROMVFpeExRVUZMZFhWQ0xFOUJRVkYyZFVJc1MwRkJTM2wxUWl4WlFVTTVReXhIUVVGSmVuVkNMRXRCUVV0M2RVSXNUMEZCVVN4RFFVTmlMRWxCUVVsSkxFVkJRVTh2TUVJc1MwRkJTM2RFTEZOQlExcDNlRUlzUlVGQldXZ3hRaXhMUVVGTGFURkNMRTFCUVUxR0xFVkJRVTgxZFVJc1MwRkJTM2QxUWl4UFFVRlRhREZDTEVkQlEyaEVRU3hGUVVGdlF5eEpRVUZPTEVWQlFYaENTeXhMUVVGTGFURkNMRTFCUVdFc1IwRkJVRVlzU1VGQmRVSndNVUlzUlVGQlMzRXhRaXhGUVVGWmNqRkNMRVZCUVV0eE1VSXNSVUZGYkVVc1QwRkJaME1zUlVGQmVrSm9NVUlzUzBGQlMyZDVRaXhKUVVGSmNubENMRVZCUVVsM1J5eExRVUZMYzNWQ0xFMUJUemRDUml4RlFVRlJhRUlzVlVGQlZUSkNMRTFCUVZFc1YwRkRkRUl2ZFVJc1MwRkJTM2wxUWl4VFFVRlhMRWRCVDNCQ1RDeEZRVUZSYUVJc1ZVRkJWVFJDTEU5QlFWTXNVMEZCVlc1RUxFZEJRMnBETjNKQ0xFdEJRVXQ0Unl4SFFVRkxjWGxDTEVkQlQyUjFReXhGUVVGUmFFSXNWVUZCVlRaQ0xFOUJRVk1zVTBGQlZWZ3NSMEZEYWtOMGRVSXNTMEZCUzNOMVFpeEpRVUZOUVN4SFFVOW1SaXhGUVVGUmFFSXNWVUZCVlRoQ0xGVkJRVmtzVTBGQlZWWXNSMEZEY0VONGRVSXNTMEZCUzNkMVFpeFBRVUZUUVN4SkxHdERRMjVGYkVJc1NVRkJTVmNzUlVGQmJVSnVka0lzVFVGQlVVRXNTMEZCUzIxMlFpeHBRa0ZCYjBJc1UwRkJWVU1zUjBGRE9VUXNUMEZCVVVFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWTBRc1JVRkJUU3hEUVVGRkxGRkJRVmRCTEVsQlJYaEVOM3BDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGQkxGRkJRV3RDUVN4RlFVRlJjekZDTEZGQlFWVjBNVUlzUlVGQlVYVXhRaXhIUVVGTGRqRkNMRVZCUVZGM01VSXNUMEZCVTNneFFpeEZRVUZSZVRGQ0xGRkJRVlY2TVVJc1JVRkJVV2xYTEdOQlFWY3NSVUZEZGtjc1RVRkJUWGxtTEVWQlFWY3NSVUZCVVN4TlFVTnVRa01zUlVGQlpTeEZRVUZSTEUxQlF6ZENjREJDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEZWQlFWY3NRMEZCUlhsQ0xGbEJRVmtzUlVGQlRXZE1MRWxCUVVzc1YwRkJZeXhQUVVGUGEzQkNMRVZCUVdGR0xGZEJRM0pITEUxQlFVMUhMRVZCUVdNc1JVRkJVU3hOUVVNMVFuSXdRaXhQUVVGUFF5eGxRVUZsZUVJc1JVRkJVeXhUUVVGVkxFTkJRVVY1UWl4WlFVRlpMRVZCUVUxblRDeEpRVUZMTEZkQlFXTXNUMEZCVDIxd1FpeEZRVUZaU2l4VlFVTnVSeXhOUVVOTmRIRkNMRVZCUkZWcGNVSXNSVUZCWjBJc1JVRkJVU3hQUVVOc1FtNXZRaXhSUVVGUkxHOUNRVWw0UWpadlFpeEZRVUZSTEVkQlEyUXNVMEZCVTBNc1JVRkJUME1zUlVGQlN6RkNMRWRCUTBVc2FVSkJRVkl3UWl4SlFVTlFNVUlzUlVGQlR6QkNMRVZCUTFCQkxFOUJRVTE2ZUVJc1IwRkZWaXQyUWl4RlFVRlBRU3hIUVVGUkxFZEJRMllzVFVGQlRUSkNMRVZCUVZOT0xFVkJRVk4yVml4SlFVRkpORllzUlVGQlN6RkNMRVZCUVVzMFFpeE5RVUZSTEdOQlEzaERkSHBDTEVWQlFWTnhla0lzUlVGQlQzSjZRaXhQUVVOb1FqQk5MRVZCUVVzeWJVSXNSVUZCVHpOdFFpeEhRVU5hTkcxQ0xFVkJRVTlFTEVWQlFVOURMRXRCUTJSRExFVkJRV2RDVEN4RlFVRk5lRzFDTEVsQlFVODBiVUlzUzBGQlVVb3NSVUZCVFhodFFpeEhRVUZWTEV0QlN6TkVMRWxCUVVscmJVSXNSVUZsU2l4UFFXNUNjMEpzUWl4RlFVRkxhbXhDTEZWQlEzWkNhV3hDTEVWQlFVc3NNRUpCUTB3c1NVRkJWVUVzUlVGQlN6aENMRmRCUTJaRUxFZEJSMEZvY2tJc1JVRkJUU3dyUWtGQlowTjJTU3hIUVVOMFF6UjVRaXhGUVVGTExFbEJRVWxKTEVWQlFXRkdMRkZCUVZFNWVVSXNSVUZCVVRCNFFpeExRVWRxUTNkQ0xFVkJRVTE0YlVJc1MwRkRVRzVGTEVWQlFVMHNlVUpCUVRCQ2Rra3NSMEZEYUVOcmVrSXNSVUZCVFhodFFpeEhRVUZOTEVsQlFVbHpiVUlzUlVGQllVWXNVVUZCVVRsNVFpeEZRVUZSTUhoQ0xFbEJSV3BFYTBJc1JVRkJTMDBzUlVGQlRYaHRRaXhKUVVWWU1tMUNMRVZCUVU5SkxGRkJRVlV2UWl4RlFVRkxLMElzVVVGRGRFSXZRaXhGUVVGTEswSXNUVUZCVVVvc1JVRkJUMHNzVlVGRmFrSmtMRVZCUVVkbExFOUJRVTlPTEVWQlFVOURMRXRCUVUwMVFpeEhRVVZzUTNJd1FpeEZRVUZSZFRGQ0xFZEJRVXRQTEVWQlEySTVNVUlzUlVGQlVYTXhRaXhSUVVGVlVTeEZRVU5zUWpreFFpeEZRVUZCTEZGQlFXdENPREZDTEVWQlIyeENkakJDTEU5QlFVOW5NVUlzVDBGQlQxUXNSVUZCVVN4RFFVTnNRa3dzVVVGQlUwVXNSVUZCWVVZc1VVRkRkRUpFTEU5QlFWRkpMRVZCUVZsS0xFOUJRM0JDUkN4SFFVRkpUeXhGUVVOS1VpeFJRVUZUVVN4SlFVOWlMRWxCUVVsVkxFVkJRWEZDTEVWQlFWRXNUVUZEYWtOcU1VSXNUMEZCVDBNc1pVRkJaWGhDTEVWQlFWTXNWMEZCV1N4RFFVRkZlVUlzV1VGQldTeEZRVUZOWjB3c1NVRkJTeXhYUVVGakxFOUJRVThyY0VJc1JVRkJiVUoyWjBJc1dVRkZOVWRzVnl4RlFVRlBReXhSUVVGVk9ERkNMRWNzYTBORGJrVnFRaXhKUVVGSlZ5eEZRVUZ0UW5wM1FpeE5RVUZSUVN4TFFVRkxlWGRDTEd0Q1FVRnhRbXd4UWl4UFFVRlBhMWtzVDBGQlV5eFRRVUZWYVdRc1JVRkJSM1F6UWl4RlFVRkhkVE5DTEVWQlFVZERMRkZCUXpkRmRIbENMRWxCUVZCemVVSXNTVUZCYTBKQkxFVkJRVXRFTEVkQlF6TkNjREZDTEU5QlFVOURMR1ZCUVdWck1VSXNSVUZCUjBVc1JVRkJTU3hEUVVGRmJqRkNMRmxCUVZrc1JVRkJUV2RNTEVsQlFVc3NWMEZCWVN4UFFVRlBjazRzUlVGQlJYVXpRaXhQUVVNelJTeFRRVUZWUkN4RlFVRkhkRE5DTEVWQlFVZDFNMElzUlVGQlIwTXNVVUZEVkhSNVFpeEpRVUZRYzNsQ0xFbEJRV3RDUVN4RlFVRkxSQ3hIUVVNelFrUXNSVUZCUlVVc1IwRkJUWGd6UWl4RlFVRkZkVE5DTEV0QlJWWkZMRVZCUVhOQ04zZENMRTFCUVZGQkxFdEJRVXMyZDBJc2NVSkJRWGRDZERGQ0xFOUJRVTlyV1N4UFFVRlRMRk5CUVZWcFpDeEZRVUZIY25KQ0xFZEJRM2hHT1Vvc1QwRkJUME1zWlVGQlpXc3hRaXhGUVVGSExGVkJRVmNzUTBGQlJXb3hRaXhaUVVGWkxFVkJRVTFJTEUxQlFVOHJTaXhMUVVNNVJDeFRRVUZUY1hKQ0xFVkJRVWR5Y2tJc1IwRkRZbkZ5UWl4RlFVRlhMRkZCUVVseWNrSXNTVUZGWm5seVFpeEZRVUZuUWpsM1FpeE5RVUZSUVN4TFFVRkxPSGRDTEdOQlFXbENMRk5CUVZVeFFpeEhRVU40UkN4SFFVRkpRU3hIUVVGUFFTeEZRVUZKUXl4WFFVRlpMRTlCUVU5RUxFVkJRMnhETEVsQlFVa3lRaXhGUVVGVExFZEJRMklzUjBGQlZ5eE5RVUZRTTBJc1JVRkJZU3hKUVVGTExFbEJRVWwxUWl4TFFVRkxka0lzUlVGQlpTeFpRVUZPZFVJc1IwRkJiVUp3TVVJc1QwRkJUelo0UWl4VlFVRlZka3NzWlVGQlpYWmpMRXRCUVVzNGIwSXNSVUZCUzNWQ0xFbEJRVWxHTEVWQlFXZENUU3hGUVVGUk0wSXNSVUZCUzNWQ0xFZEJSWFJKTEU5QlJFRkZMRVZCUVcxQ1JTeEZRVUZSTTBJc1IwRkRjRUl5UWl4SFFVVlFOVUlzUlVGQmJVSnVka0lzVFVGQlVVRXNTMEZCUzIxMlFpeHBRa0ZCYjBJc1UwRkJWVU1zUjBGRE9VUXNUMEZCVVVFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWTBRc1JVRkJUU3hEUVVGRkxGRkJRVmRCTEVsQlJYaEVOM3BDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGUmVURkNMR0ZCUVZVc1JVRkRiRUlzVFVGQlRYVkNMRVZCUVhGQ0xFVkJRVkVzVFVGRE4wSndRaXhGUVVGakxFVkJRVkVzVFVGRGRFSnhRaXhGUVVGVFNDeEZRVUZoTEVWQlFWRXNUMEZET1VKSkxFVkJRVlVzUlVGQlVTeE5RVU5zUWtNc1JVRkJZeXhGUVVGUkxFMUJRM1JDUXl4RlFVRnpRaXhGUVVGUkxFMUJSVGxDYkhOQ0xFVkJSRlZwY1VJc1JVRkJaMElzUlVGQlVTeFBRVU5zUW01dlFpeFJRVUZSTERSQ1FVTTVRaXhOUVVGTmVXOUNMRlZCUVdkQ01rSXNSVUZCYjBKRExGRkJRM1JEZW5CQ0xGbEJRVmx0YjBJc1JVRkJTekZDTEVkQlEySXNTVUZCU1dsRUxFVkJRMG81WkN4UlFVTkJlRlFzUzBGQlMzVjRRaXhMUVVGUExFZEJRMXAyZUVJc1MwRkJTM2Q0UWl4TFFVRlBMRWRCUTFKNlFpeEhRVUZQTEdsQ1FVRnZRa0VzU1VGRE0wSXhRaXhGUVVGUE1FSXNSVUZEVUVFc1QwRkJUWHA0UWl4SlFVVldLM1pDTEVWQlFVOUJMRWRCUVZFc1NVRkRWalJDTEV0QlFVODFRaXhGUVVGTE5FSXNUVUZCVVN4aFFVTjZRbXAzUWl4TFFVRkxjWFZDTEV0QlFVOUJMRVZCUTFveVF5eEZRVUZ0UWxNc2MwSkJRWE5DZW5oQ0xFdEJRVTF4ZFVJc1IwRkRMME55ZFVJc1MwRkJTekI0UWl4alFVRnRReXhKUVVGMFFuSkVMRVZCUVV0eFJDeGpRVU4yUWpGNFFpeExRVUZMTW5oQ0xIRkNRVUZ4UW5SRUxFVkJRVXR6UkN4elFrRkJkMEpETEVWQlFVRkJMRWRCUTNaRU5YaENMRXRCUVVzMmVFSXNhMEpCUVd0Q2VFUXNSVUZCUzNkRUxHMUNRVUZ4UWl4TFFVTnFSRGQ0UWl4TFFVRkxPSGhDTEhGQ1FVRnhRbnBFTEVWQlFVdDVSQ3h6UWtGQmQwSXNTMEZEZGtRNWVFSXNTMEZCU3l0NFFpeHZRa0ZCZDBRc1VVRkJia05VTEVWQlFVdHFSQ3hGUVVGTE1FUXNNa0pCUVhkRExFbEJRVkJVTEVWQlFXZENRU3hGUVVGTExFbEJRekZHZEhoQ0xFdEJRVXRuZVVJc1VVRkJWU3hKUVVGSllpeEZRVUZaTDBNc1VVRkJVU3hEUVVOdVEzWkRMRWxCUVVzM2NrSXNTMEZCU3paNFFpeHZRa0ZEVm5aRUxFbEJRVXQwZFVJc1MwRkJTemg0UWl4MVFrRkRWblJFTEU5QlFWRjRkVUlzUzBGQlN5dDRRaXgzUWtGRmFrSXZlRUlzUzBGQlN6UnpRaXhSUVVGUkxFMUJRVkY1UWl4RlFVRkxla0lzVVVGQlZTeEpRVUZSZVVJc1JVRkJTM3BDTEZOQlEycEVOWE5DTEV0QlFVdHBlVUlzV1VGQll5eFRRVU51UW1wNVFpeExRVUZMSzNaQ0xFbEJRVTFCTEVWQlExZ3NUVUZCVFcxRExFVkJRVlUzUkN4RlFVRkxORU1zVVVGQlZVRXNSVUZETDBKcWVFSXNTMEZCUzIxNVFpeFJRVUZWTEVsQlFVbEVMRVZCUVZGRkxGRkJRek5DY0hsQ0xFdEJRVXR4ZVVJc1VVRkJWU3hKUVVGSlNDeEZRVUZSU1N4UlFVTXpRblI1UWl4TFFVRkxkWGxDTEdOQlFXOURMRWxCUVhKQ2JFVXNSVUZCUzIxRkxGbEJRM0pDZUhsQ0xFdEJRVXQxZVVJc1kwRkRUSFo1UWl4TFFVRkxlWGxDTEU5QlJXSm1MR0ZCUVdGeWMwSXNSMEZEVkN4UFFVRkxNMGtzVlVGQlZYUkRMRkZCUldZMFJpeExRVUZMTUhsQ0xHZENRVUZyUW5KMFFpeEZRVU5vUW5KR0xFMUJSa2xCTEV0QlFVc3dlVUlzWTBGSmNFSm1MSEZDUVVGeFFuUnpRaXhIUVVOcVFpeFpRVUZWTDBjc1NVRkJUaXRITEVWQlEwOXlSaXhMUVVGTE1ubENMSFZDUVVOb1FqTjVRaXhMUVVGTE1ubENMSE5DUVVGM1FuUjBRaXhGUVVOMFFuSkdMRTFCUlZnMmVFSXNhMEpCUVd0Q2VITkNMRWRCUTJRc1NVRkJTV2x6UWl4RlFVTktMRmxCUVZWb2VrSXNTVUZCVGl0SExFVkJRMDl5Uml4TFFVRkxOSGxDTEc5Q1FVTm9RalY1UWl4TFFVRkxOSGxDTEcxQ1FVRnhRblowUWl4RlFVTkdMRkZCUVhaQ2FYTkNMRVZCUVV0MGVFSXNTMEZCUzJkNVFpeGxRVUUwUWl4SlFVRlFWaXhIUVVGNVFrRXNSVUZCUjNSRExFOUJRVTh6Y0VJc1IwRkROVVJ5Uml4TlFVVllLM2hDTEc5Q1FVRnZRakZ6UWl4SFFVTm9RaXhKUVVGSmFYTkNMRVZCUTBvc1dVRkJWV2g2UWl4SlFVRk9LMGNzUlVGRFQzSkdMRXRCUVVzMmVVSXNjMEpCUTJoQ04zbENMRXRCUVVzMmVVSXNjVUpCUVhWQ2VIUkNMRVZCUTBvc1VVRkJka0pwYzBJc1JVRkJTM1I0UWl4TFFVRkxaM2xDTEdWQlFUUkNMRWxCUVZCV0xFZEJRWGxDUVN4RlFVRkhjRU1zVlVGQlZUZHdRaXhIUVVNdlJISkdMRTFCUlZnNGVFSXNjVUpCUVhGQ2VuTkNMRWRCUTJwQ0xFbEJRVWxwYzBJc1JVRkRTaXhaUVVGVmFIcENMRWxCUVU0clJ5eEZRVU5QY2tZc1MwRkJTemg1UWl4MVFrRkRhRUk1ZVVJc1MwRkJTemg1UWl4elFrRkJkMEo2ZEVJc1JVRkRUQ3hSUVVGMlFtbHpRaXhGUVVGTGRIaENMRXRCUVV0bmVVSXNaVUZCTkVJc1NVRkJVRllzUjBGQmVVSkJMRVZCUVVkeVF5eFBRVUZQTlhCQ0xFZEJRelZFY2tZc1RVRkZXRFJ6UWl4UlFVRlJkbTVDTEVkQlEwb3NUMEZCU3pOSkxGVkJRVlYwUXl4UlFVVm1ORVlzUzBGQlN5dDVRaXhUUVVGWE1YUkNMRVZCUTFSeVJpeE5RVVpKUVN4TFFVRkxLM2xDTEZOQlZYQkNReXgzUWtGRlUyaDZRaXhMUVVGTGFYcENMR1ZCUTA1cWVrSXNTMEZCU3pCNVFpeGxRVU54UWl4SlFVRXhRakY1UWl4TFFVRkxaM2xDTEZGQlFWRjJSQ3hWUVVWaWVuVkNMRXRCUVV0cmVrSXNXVUZWWWxRc1MwRkJTM0JWTEVkQlJVUXNSMEZFUVc1YUxFVkJRVTBzWjBKQlFXbENiRVlzUzBGQlMybDVRaXhqUVVOMlFtcDVRaXhMUVVGTGFYbENMRmxCUVZrNWVVSXNVVUZCVVN4UlFVTXhRaXhQUVVGUFlTeExRVU5ZYTBZc1JVRkJUU3hoUVVGamJFWXNTMEZCU3l0MlFpeExRVU42UWk5MlFpeExRVUZMYlhwQ0xFOUJRVk1zU1VGQlNXNURMRVZCUVcxQ2VFSXNUMEZCVDNoMlFpeExRVUZMSzNaQ0xFbEJRVXN2ZGtJc1MwRkJTM0YxUWl4TlFVTXpSQ3hOUVVGTmFVTXNSVUZCVTNSM1FpeExRVUZMYlhwQ0xFOUJRMlIwZEVJc1JVRkJUemRHTEV0QlEySkJMRXRCUVV0cGVVSXNXVUZCWXl4VlFVTnVRbXA1UWl4TFFVRkxiM3BDTEdWQlFXZENMRVZCUlhKQ0xFMUJRVTFETEVWQlFXbENia01zUlVGQlVYWnZRaXhIUVVGSE1tNUNMRVZCUVZFc1VVRkJVU3hYUVVNNVEzcHhRaXhGUVVGTGVYUkNMRk5CUTB4cVZpeEhRVUZOUVN4UFFVZEthMVlzUlVGQlYzSkRMRVZCUVZGMmIwSXNSMEZCUnpKdVFpeEZRVUZSTEZOQlFWVnJSQ3hKUVVNeFEzUjFRaXhGUVVGTkxGTkJRMDVYTEVWQlFVczBkRUlzVlVGRFREVjBRaXhGUVVGTGIzTkNMRmxCUVdNc1UwRkRia0pxZVVJc1MwRkJTekI2UWl4aFFVRmhMRkZCUVZOR0xFZEJRM1pDYmxZc1JVRkRRVUVzUlVGQlIyMVdMRWRCU1VnemRFSXNSVUZCUzIxMFFpd3dRa0ZIWWl4SlFVRkpMRWxCUVZWb2VrSXNTMEZCU3l0NVFpeFRRVUZWTEVOQlEzcENMRTFCUVUxdVJ5eEZRVUZWTlhOQ0xFdEJRVXNyZVVJc1UwRkRja0kzZEVJc1JVRkJUU3gzUTBGQmVVTXdia0lzUjBGREwwSXNTVUZCV2tFc1IwRkRRWGxITEVsQlIwb3NUVUZCVFUwc1JVRkJVVE42UWl4TFFVRkxOSHBDTEdOQlFXRXNTMEZETlVJeGRVSXNSVUZCVFN4eFEwRkJjME13YmtJc1IwRkROVU41Unl4SlFVTkJMME1zUlVGQlQzVkVMRkZCUlZCMlJDeEZRVUZQT1d0Q0xFdEJRVXNzVVVGQlV5eEpRVUZKZUZFc1RVRkJUU3hqUVVOb1F6UjRRaXhIUVVORE5YTkNMRXRCUVV0eGRVSXNTMEZCUzNsR0xGZEJRMVpJTEVWQlFVMUpMRkZCUlZZdmVrSXNTMEZCUzNkNFFpeExRVUZMYmpGQ0xFMUJRVXNzVjBGRFdHZDNRaXhoUVVGaGMwZ3NUVUZMY2tJc1QwRkdRVE42UWl4TFFVRkxkM2hDTEV0QlFVdHVNVUlzUzBGQlMyY3pRaXhIUVVObWNucENMRXRCUVV0M2VFSXNTMEZCUzI0eFFpeExRVUZMYXpOQ0xFZEJRMUoyZWtJc1MwRlJXSE4yUWl4UlFVRlJhbElzUjBGRFNpeFBRVUZQY21Vc1MwRkJTM2w1UWl4TFFVRkxjRlVzUjBGUGNrSnBWaXhUUVVOSmNIVkNMRVZCUVUwc1VVRkZUbXhHTEV0QlFVdDVla0lzVlVGRlRIcDZRaXhMUVVGTGFYbENMRmxCUVdNc1QwRkRia0pxZVVJc1MwRkJTekI2UWl4aFFVRmhMRkZCUld4Q0xFMUJRVTF3UkN4RlFVRlRkSGRDTEV0QlFVdHRla0lzVDBGRGNFSnVla0lzUzBGQlMzZDRRaXhMUVVGTGJqRkNMRXRCUVVzMk1FSXNSVUZCVVhadlFpeEhRVUZITW01Q0xFVkJRVkVzVDBGQlVYUjNRaXhMUVVGTFp6QkNMRTlCUVU4M2NrSXNTMEZCUzI1SkxFOUJRVkZyZUVJc1JVRkJVWFp2UWl4SFFVRkhNbTVDTEVWQlFWRXNUMEZCVVhSM1FpeExRVUZMYVRCQ0xFOUJRVTg1Y2tJc1MwRkJTMjVKTEU5QlFWRnJlRUlzUlVGQlVYWnZRaXhIUVVGSE1tNUNMRVZCUVZFc1VVRkJVM1IzUWl4TFFVRkxjMlFzVVVGQlVXNVdMRXRCUVV0dVNTeFBRVUZSYTNoQ0xFVkJRVkYyYjBJc1IwRkJSekp1UWl4RlFVRlJMRkZCUVZOMGQwSXNTMEZCUzJzd1FpeFJRVUZSTDNKQ0xFdEJRVXR1U1N4UFFVRlJhM2hDTEVWQlFWRjJiMElzUjBGQlJ6TkpMRXRCUVV0eGVVSXNVVUZCVXl4VlFVRlhjbmxDTEV0QlFVdHRNRUlzVlVGQlZXaHpRaXhMUVVGTGJra3NVVUZQTDFKbk1FSXNVMEZEU1dnd1FpeExRVUZMTUhwQ0xHRkJRV0VzVVVGUGRFSlBMRTlCUVU5MFpDeEhRVU5JTTFjc1MwRkJTM0Y1UWl4UlFVRlJLMElzU1VGQlNYcGtMRWRCVDNKQ2QyUXNWVUZCVlVVc1IwRkRUbkl3UWl4TFFVRkxNSHBDTEdGQlFXRXNVMEZCVlZjc1IwRlBhRU12Vnl4UlFVRlJhMWNzUjBGRFNuUjFRaXhGUVVGTkxGRkJRVk56ZFVJc1IwRkRabmg2UWl4TFFVRkxNSHBDTEdGQlFXRXNVVUZCVTBZc1IwRlJMMEpzUkN4UFFVRlBaMFVzUlVGQlMycEhMRWRCUTFJc1NVRkJTV2xETEVWQlFWTjBkMElzUzBGQlMzVjRRaXhMUVVGTEswTXNSMEZMZGtJc1QwRktTMmhGTEVsQlEwUkJMRVZCUVZNc1NVRkJTVllzUlVGQldVb3NUMEZCVDNoMlFpeExRVUZOY3pCQ0xFVkJRVXRxUnl4SFFVTXpRM0oxUWl4TFFVRkxkWGhDTEV0QlFVc3JReXhIUVVGUGFFVXNSMEZGWkVFc1JVRlJXR2xGTEZOQlFWTnFSU3hIUVVOTUxFMUJRVTFwUWl4RlFVRlBhREpDTEU5QlFVOVJMRXRCUVV0cFJTeExRVUZMZFhoQ0xFMUJRemxDTEVsQlFVc3NUVUZCVFN0RExFdEJRVTh2UXl4RlFVVmtMRWRCUkdWMmVFSXNTMEZCUzNWNFFpeExRVUZMSzBNc1IwRkRaRVVzVDBGRlVDeFpRVVJCZEhaQ0xFVkJRVTBzTkVOQlFUWkRiM1pDTEVkQlNUTkVkREJDTEV0QlFVdDVNRUlzVTBGUlZFTXNVVUZCVVV3c1IwRkRTbTUyUWl4RlFVRk5MRzlDUVVGeFFtMTJRaXhIUVVNelFpeE5RVUZOVFN4RlFVRnBRak13UWl4TFFVRkxiWGxDTEZGQlFWRjVReXhQUVVGUFVDeEhRVU16UXl4SlFVRkxMRWxCUVVrMU0wSXNSVUZCU1N4RlFVRkhRU3hGUVVGSmF6UkNMRVZCUVdWMk5rSXNUMEZCVVhGRExFbEJRM1pEZFVRc1MwRkJTMjE2UWl4UFFVRlBNRUlzVFVGQlRVWXNSVUZCWld3MFFpeEhRVUZKTkROQ0xFVkJRVTl1TmtJc1UwRlJjRVIxTlVJc1ZVRkRTWFoxUWl4RlFVRk5MRmRCUTA1c1JpeExRVUZMZDNoQ0xFdEJRVXMxTUVJc1UwRkJVMnMwUWl4SFFVRmxRU3hOUVVOc1F6a3dRaXhMUVVGTGQzaENMRXRCUVV0d00wSXNUMEZCVXl4RlFVTnVRalJHTEV0QlFVdHhlVUlzVVVGQlVYaDBRaXhWUVU5cVFqUjJRaXhUUVVOSmRuWkNMRVZCUVUwc1kwRkRUbXhHTEV0QlFVdHZla0lzWlVGQlowSXNSVUZEY2tKd2VrSXNTMEZCUzJsNlFpeGxRVUZuUWl4RlFVTnlRbXA2UWl4TFFVRkxhekJDTEZGQlFWRXNaMEpCUTFSc01FSXNTMEZCUzIxNlFpeFJRVU5NYm5wQ0xFdEJRVXR0ZWtJc1QwRkJUMVVzVVVGUGNFSXhVeXhoUVVOSkxFOUJRVTl1YUVJc1MwRkJTM2t3UWl4VFFVOW9RbEFzVVVGQlVXRXNSVUZCVVROUExFZEJRMXBzYUVJc1JVRkJUU3h0UWtGQmIwSTJka0lzUjBGRE1VSXZNRUlzUzBGQlMzbDZRaXhWUVVOTWVucENMRXRCUVV0bmVVSXNVVUZCVVdwRUxGRkJRMkl2ZFVJc1MwRkJTMmw1UWl4WlFVRmpMRk5CUTI1Q2FubENMRXRCUVVzd2VrSXNZVUZCWVN4UlFVRlRjVUlzUlVGQlVUTlBMRWRCUXk5Q2NHMUNMRXRCUVVzd2VVSXNaMEpCUVd0Q01YbENMRXRCUVV0dmVrSXNaVUZETlVKd2VrSXNTMEZCUzJ0NlFpeFpRVkZpUVN4WlFVTkpMRWRCUVVsc2VrSXNTMEZCUzJsNlFpeGxRVUZwUW1wNlFpeExRVUZMYjNwQ0xHTkJRek5DTEU5QlFVOXdla0lzUzBGRFdDeE5RVUZOTmtZc1JVRkJUemRHTEV0QlEySXNSMEZCU1VFc1MwRkJTMmQ1UWl4UlFVRlJka1FzVlVGQldYcDFRaXhMUVVGTE1ubENMSE5DUVVNNVFucDBRaXhGUVVGTkxHOUNRVU5PYkVZc1MwRkJTMmQ1UWl4UlFVRlJha1FzVVVGRFlpOTFRaXhMUVVGTE1IcENMR0ZCUVdFc2IwSkJRMnhDTVhwQ0xFdEJRVXRwZWtJc1pVRkJaMElzVFVGRmNFSXNRMEZEUkN4TlFVRk5LMElzUlVGQlVXZ3hRaXhMUVVGTFozbENMRkZCUVZGMFJDeFhRVU16UW5od1FpeEZRVUZOTERCRFFVRXlRemgyUWl4SFFVTnFSR2d4UWl4TFFVRkxhWHBDTEdWQlFXZENMRVZCUTNKQ0xFMUJRVTFWTEVWQlFWRXpla0lzUzBGQlN6UjZRaXhqUVVGaExFdEJRM2hDTDNSQ0xFVkJRVXQxZEVJc1owSkJSVlJzZFVJc1JVRkJUU3gzUWtGRFRteEdMRXRCUVVzd2VrSXNZVUZCWVN4dlFrRkJjVUkzZEVJc1JVRkJTMjF6UWl4UlFVRlJka1FzVlVGRmFFUTFiMElzUlVGQlMzVjBRaXhsUVVWVWRuUkNMRVZCUVVzMGMwSXNUVUZCVFdVc1NVRkRTRUVzUjBGRFFYUjFRaXhGUVVGTkxESkNRVU5PVnl4RlFVRkxiM1JDTEdWQlFXZENMRVZCUTNKQ2NIUkNMRVZCUVV0eGRFSXNXVUZEVEd4NlFpeExRVUZMTUhwQ0xHRkJRV0VzYTBKQlFXMUNSaXhMUVVkeVEzUjFRaXhGUVVGTkxIRkNRVU5PVnl4RlFVRkxiM1pDTEhGQ1FVZGtSQ3hIUVVORGFERkNMRXRCUVV0eGRVSXNTMEZCUzNsR0xGZEJRMVpJTEVWQlFVMUpMRkZCUlZZdmVrSXNTMEZCUzNkNFFpeExRVUZMYmpGQ0xFMUJRVXNzVjBGRFdHZDNRaXhoUVVGaGMwZ3NUMEZUZWtKelFpeGpRVU5KTEUxQlFVMURMRVZCUVZWc01VSXNTMEZCUzJkNVFpeFJRVUZSZGtRc1UwRkROMEo2ZFVJc1MwRkJTMmw2UWl4bFFVRm5RaXhGUVVOeVFtcDZRaXhMUVVGTFozbENMRkZCUVZGcVJDeFJRVU5pTDNWQ0xFdEJRVXN3ZWtJc1lVRkJZU3haUVVGaGQwSXNTVUZIZGtOc04wSXNSVUZCVVhreFFpeFJRVUZWUVN4SExEQkNRM3BaYkVKc01FSXNUMEZCVDBNc1pVRkJaWGhDTEVWQlFWTXNZVUZCWXl4RFFVRkZjMElzVDBGQlR5eEpRVU4wUkhSQ0xFVkJRVkV5VHl4UlFVRkxMRVZCVDJJelR5eEZRVUZSTWs4c1IwRk9VaXhUUVVGWmRrNHNSVUZCU3lzMVFpeEZRVUZKT1Zjc1IwRkZha0lzVDBGRVFXcHFRaXhGUVVGSmRVNHNSMEZCUjNkelFpeEZRVUZKT1Zjc1IwRkRTaXhYUVVOSWFtcENMRVZCUVVsM1RpeEpRVUZKZFhOQ0xFVkJRVWs1Vnl4TkxHdERRMHh3UWl4SlFVRkpPRkVzUlVGQmJVSnVka0lzVFVGQlVVRXNTMEZCUzIxMlFpeHBRa0ZCYjBJc1UwRkJWVU1zUjBGRE9VUXNUMEZCVVVFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWTBRc1JVRkJUU3hEUVVGRkxGRkJRVmRCTEVsQlJYaEVOM3BDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGUmR6RkNMRmxCUVZNc1JVRkRha0lzVFVGQlRXZENMRVZCUVhGQ0xFVkJRVkVzVFVGRE4wSlZMRVZCUVZVc1JVRkJVU3hOUVVOc1FrVXNSVUZCYzBJc1JVRkJVU3hOUVVVNVFteHpRaXhGUVVSVmFYRkNMRVZCUVdkQ0xFVkJRVkVzVDBGRGJFSnViMElzVVVGQlVTd3lRa0ZMZUVKdmRVSXNSVUZCYTBJM05VSXNUMEZCVHpnMVFpeFBRVUZQTEVOQlEyeERMMFlzVVVGQlV5eEZRVU5VWjBjc1kwRkJaU3hGUVVObWJsVXNWMEZCV1N4RlFVTmFiMVVzWTBGQlpTeEZRVVZtUXl4WlFVRmhMRVZCUTJJM1NDeGxRVUZuUWl4SlFVVndRaXhOUVVGTk5rSXNWVUZCWlRSQ0xFVkJRVzlDUXl4UlFVMXlRM3B3UWl4WlFVRlpNbTVDTEVWQlFVa3JSU3hGUVVGTGFrY3NSMEZEYWtJM1lTeFJRVU5CZUZRc1MwRkJTM2t4UWl4WFFVRlpMRVZCUTJwQ2VqRkNMRXRCUVVzd01VSXNZMEZCWjBJc1IwRkRja0l4TVVJc1MwRkJTekl4UWl4WFFVRmhMRWRCUTJ4Q016RkNMRXRCUVVzME1VSXNTVUZCVFN4RlFVTllOVEZDTEV0QlFVczJNVUlzUzBGQlR5eEhRVU5hTnpGQ0xFdEJRVXM0TVVJc1RVRkJVU3hIUVVOaU9URkNMRXRCUVV0MWRrSXNSMEZCUzBFc1JVRkRWbloyUWl4TFFVRkxjekJDTEVsQlFVMUJMRVZCUTFCcVJ5eEhRVUZSUVN4RlFVRkxNRWdzVDBGRFlpOHhRaXhMUVVGTEt6RkNMRXRCUVU4eFNDeEZRVUZMTUVnc1RVRkZha0l2TVVJc1MwRkJTM1YyUWl4SFFVRkhaMFFzWTBGRFVuWjVRaXhMUVVGTGVYbENMRTlCUzJJc2JVSkJRMGtzVDBGQlVYcDVRaXhMUVVGTGVURkNMRlZCVDJwQ1R5eFpRVU5KTEVkQlFVbG9Na0lzUzBGQlMzZDRRaXhMUVVOTUxFOUJRMG9zVFVGQlRXcERMRVZCUVV0MmRrSXNTMEZCUzNWMlFpeEhRVU5vUW5aMlFpeExRVUZMZDNoQ0xFdEJRVThzUTBGRFVrNHNSVUZCVVhadlFpeEhRVUZITkcxQ0xFVkJRVWtzVDBGQlVYWjJRaXhMUVVGTGMzcENMRTlCUVU5dWNrSXNTMEZCUzI1SkxFOUJRM2hEYTNoQ0xFVkJRVkYyYjBJc1IwRkJSelJ0UWl4RlFVRkpMRk5CUVZWMmRrSXNTMEZCUzJreVFpeFRRVUZUT1hSQ0xFdEJRVXR1U1N4UFFVTTFRMnQ0UWl4RlFVRlJkbTlDTEVkQlFVYzBiVUlzUlVGQlNTeFJRVUZUZG5aQ0xFdEJRVXR6WkN4UlFVRlJibFlzUzBGQlMyNUpMRTlCUXpGRGEzaENMRVZCUVZGMmIwSXNSMEZCUnpSdFFpeEZRVUZKTEZGQlFWTjJka0lzUzBGQlMyc3dRaXhSUVVGUkwzSkNMRXRCUVV0dVNTeFJRVTFzUkN4aFFVTkpMRkZCUVZOQkxFdEJRVXQzZUVJc1MwRlBiRUpzUXl4VlFVTkpMRTlCUVVsMGRrSXNTMEZCUzNreFFpeFpRVVZVZWpGQ0xFdEJRVXRuTWtJc1dVRkRRV2d5UWl4TFFVRkxkWFpDTEVkQlFXdENMR1ZCUTNoQ2RuWkNMRXRCUVV0MWRrSXNSMEZCUjJ0RUxFOUJRMUlzVTBGQlYzcDVRaXhMUVVGTGRYWkNMRWRCUVVjd1F5eGhRVU51UW1wNVFpeExRVUZMYzNwQ0xGVkJURVYwZWtJc1MwRlhabmw1UWl4UFFVTkpMRTlCUVU5NmVVSXNTMEZCUzNOMlFpeFZRVkZvUWpSSExGRkJRVkV6ZWtJc1IwRkhTaXhQUVVaQlFTeEZRVUZMTkVRc1VVRkJVU3hYUVVOaWJrY3NTMEZCUzNkTUxFdEJRVXRzVUN4TlFVRk5NRVFzUzBGQlRYVkRMRWRCUTJaMlF5eExRVk5ZZDB3c1MwRkJTekp3UWl4TFFVRlBOWGxDTEVkQlExSXNSMEZCU1RaNVFpeEZRVUZuUW5aVExHVkJRV1Z6VXl4SFFVTXZRaXhOUVVGTkxFbEJRVWx1TmtJc1RVRkJUU3hKUVVGTmJUWkNMRVZCUVVzc09FSkJSUzlDTlhsQ0xFVkJRVXMwUkN4UlFVRlJaM1pDTEVkQlEySXNUVUZCVFdRc1JVRkJVeXhEUVVOWWJEWkNMRXRCUVUxeE1rSXNSVUZCYlVJeVJpeFhRVUZYUXl4TlFVTndRM3BtTEV0QlFVMXdWU3hGUVVWV0xGRkJRV2xDTEVsQlIycENMRWRCUmtFNGVFSXNSVUZCVDI0MlFpeFJRVUZSYlRoQ0xGVkJRVzFETEVsQlFYaENjakpDTEV0QlFVczRNVUlzVFVGQlRVOHNVMEZGYWtNc2JVSkJRWE5DT1hwQ0xFVkJRVXRCTEVWQlFVdHVTU3hQUVVGVExFZEJRVWtzUTBGRE4wTXNUVUZCVFdsUUxFVkJRVXR5U2l4TFFVRkxOREZDTEUxQlEyaENNWGRDTEVWQlFVMHNhVU5CUVd0RGJVVXNSMEZEZUVNc1RVRkJUV2wwUWl4RlFVRk5MM3BDTEVWQlFVczRaQ3hOUVVOcVFuSm5RaXhMUVVGTGRUSkNMSEZDUVVGeFFteDBRaXhGUVVGSmFYUkNMRWRCUXpsQ2FrTXNSVUZCVDJoeVFpeEhRVUZMUVN4RlFVVm9RaXhOUVVGTmJYUkNMRVZCUVhOQ2VESkNMRXRCUVV0MWRrSXNSMEZCUnpSRUxGRkJRMmhEYm5wQ0xFdEJRVXQxZGtJc1IwRkJSelJFTEU5QlFVOXpSQ3hYUVVObWVqSkNMRXRCUVV0MWRrSXNSMEZCUnpSRUxFOUJRVTl6UkN4VlFVRlZPVFpDTEZOQllUZENMRTlCV25OQ2NVVXNTMEZCU3pneFFpeE5RVUZOV1N4VlFVRmpSaXhIUVVGM1FuZ3lRaXhMUVVGTGVURkNMRlZCU1c1RmVqRkNMRXRCUVV0NU1VSXNWMEZEVm5veFFpeExRVUZMTWpKQ0xIZENRVUYzUW5SRExFZEJRemRDY2pCQ0xFdEJRVXR4TUVJc1QwRkJUMEVzU1VGSFduSXdRaXhMUVVGTE1qRkNMRmRCUVZkME5VSXNTMEZCUzJjMFFpeEhRVkJ5UW01MlFpeEZRVUZOTERaRVFWTldiRVlzUzBGQlN6Z3hRaXhOUVVGUkxFZEJRMDQ1TVVJc1MwRkxXSFV5UWl4eFFrRkJjVUpzZEVJc1JVRkJTV2wwUWl4SFFVTnlRaXhOUVVGTk1Vb3NSVUZCVlRWelFpeExRVUZMT0RGQ0xFMUJRVTFzU2l4UlFVTXpRaXhSUVVGblFuUjFRaXhKUVVGYWMzVkNMRVZCUlVFc1dVRkVRVFZ6UWl4TFFVRkxOakZDTEV0QlFVdDRjMElzUjBGQlRXbDBRaXhIUVVsd1FpeE5RVUZOTTBNc1JVRkJVVE42UWl4TFFVRkxkWFpDTEVkQlFVZHhSU3hqUVVGaExGbEJRM2hDTlhwQ0xFdEJRVXMyTVVJc1MwRkJTM2h6UWl4SFFVTnFRaXhKUVVGTExFbEJRVWsxVFN4RlFVRkpMRVZCUVVkQkxFVkJRVWwxUkN4TFFVRkxNakZDTEZkQlFWZDJOMElzVDBGQlVYRkRMRWxCUTNCRGRVUXNTMEZCU3pJeFFpeFhRVUZYYkRWQ0xFZEJRVWMwVFN4TFFVRlBRU3hKUVVNeFFtNUZMRVZCUVUwc2FVUkJRV3RFYlVVc1IwRkRlRVJ5U2l4TFFVRkxNakZDTEZkQlFWZDJNa0lzVDBGQlR6TkRMRVZCUVVjc1NVRkhiRU41U1N4RlFVRk5MR2xFUVVGclJHMUZMRVZCUVVsMWFrSXNSMEZETlVRd1NpeEZRVUZKYUhkQ0xFdEJRVXQwUnl4TFFVRk5MRWxCUVVsb1JpeE5RVUZOTERoQ1FVTXhRalI0UWl4SFFVTklOWE5DTEV0QlFVczJNVUlzUzBGQlMzaHpRaXhIUVVGTkxFbEJRVWs1Unl4TFFVVm9RblpETEV0QlFVdDFka0lzUjBGQlIzRklMR1ZCUVdWcVJDeEhRVU4yUWpKRExFVkJRVWxvTmtJc1RVRkJUVEJFTEV0QlFVMHNRMEZCUXl4UlFVRlRkVU1zUzBGVGJFTTRlRUlzVDBGQlQwRXNSMEZEU0VFc1JVRkJUME1zU1VGQlRYUXdRaXhMUVVGTGN6QkNMRWxCUTJ4Q2REQkNMRXRCUVV0MWRrSXNSMEZCUjIxR0xGRkJRVkZNTEVkQlQzQkNaaXhUUVVOSmNIVkNMRVZCUVUwc2EwTkJRMnRDTEcxQ1FVRmliRVlzUzBGQlN5c3hRaXhMUVVOYUx6RkNMRXRCUVVzck1VSXNUVUZCVFhCbUxFbEJRMUF6Vnl4TFFVRkxjVEJDTEU5QlFVOHNRMEZCUld3MlFpeExRVUZOY1RKQ0xFVkJRVzFDTWtZc1YwRkJWMVVzVVVGQlUyeG5RaXhMUVVGQlFTeFBRVWt2UkROWExFdEJRVXR4TUVJc1QwRkJUeXhEUVVGRmJEWkNMRXRCUVUxeE1rSXNSVUZCYlVJeVJpeFhRVUZYVlN4UlFVRlRiR2RDTEV0QlFVMHpWeXhMUVVGTEt6RkNMRTlCVXpsRmVsa3NVVUZCVVd0WExFZEJRME40ZWtJc1MwRkJTM2t4UWl4WFFVTk9lakZDTEV0QlFVc3dla0lzWVVGQllTeG5Ra0ZCYVVKR0xFZEJWVE5EVlN4UlFVRlJZU3hGUVVGUk0wOHNSMEZEV214b1FpeEZRVUZOTEdGQlFXTTJka0lzUjBGRGNFSXZNRUlzUzBGQlMza3hRaXhYUVVGWkxGTkJRMVo2TVVJc1MwRkJTM0ZLTEVkQlExcHlTaXhMUVVGTE1IcENMR0ZCUVdFc1lVRkJZM0ZDTEVWQlFWRXpUeXhIUVZFMVF6WlFMRk5CUVZNMVFpeEhRVVZNTEVkQlJITkNRU3hGUVVGUFF5eE5RVUZSZERCQ0xFdEJRVXR6TUVJc1NVRkhNVU1zVDBGQlVVUXNSVUZCVDJ3MlFpeE5RVU5ZTEV0QlFVdHhNa0lzUlVGQmJVSXlSaXhYUVVGWFZTeFJRVU12UWl4SFFVRkplRU1zUlVGQlR6RmtMRTFCUVZFd1pDeEZRVUZQTVdRc1MwRkJTMjFuUWl4SlFVRkxMRU5CUTJoRExFMUJRVTE2ZEVJc1JVRkJTMmR5UWl4RlFVRlBNV1FzUzBGQlMyMW5RaXhKUVVOMlFqa3lRaXhMUVVGTEt6SkNMRlZCUVZVeGRFSXNVVUZIWm5KS0xFdEJRVXN3ZWtJc1lVRkJZU3huUWtGQmFVSXNTVUZCU1RFMFFpeE5RVUZOTERoTVFVVnFSQ3hOUVVOS0xFdEJRVXQzTVVJc1JVRkJiVUl5Uml4WFFVRlhReXhOUVVOdVF5eExRVUZMTlVZc1JVRkJiVUl5Uml4WFFVRlhZU3hoUVVNdlFtZ3pRaXhMUVVGTGFUTkNMRkZCUVZFMVF5eEhRVU5pTEUxQlEwb3NTMEZCU3pkRUxFVkJRVzFDTWtZc1YwRkJWMlVzU1VGRGJrTXNTMEZCU3pGSExFVkJRVzFDTWtZc1YwRkJWMmRDTEZkQlF5OUNiak5DTEV0QlFVdHZNMElzVFVGQlRTOURMRWRCUTFnc1RVRkRTaXhMUVVGTE4wUXNSVUZCYlVJeVJpeFhRVUZYYTBJc1YwRkRMMEp5TTBJc1MwRkJTM016UWl4bFFVTk1MRTFCUTBvc1MwRkJTemxITEVWQlFXMUNNa1lzVjBGQlYyOUNMR05CUXk5Q2RqTkNMRXRCUVVzMlJTeFZRVU5NTEUxQlFVMHlkVUlzUlVGQlRTeEpRVUZKZURSQ0xFMUJRVTF4TlVJc1JVRkJUekZrTEV0QlFVdHlVaXhUUVVWc1EydDFRaXhGUVVGSk4yTXNTMEZCVHpCa0xFVkJRVTh4WkN4TFFVRkxRU3hMUVVOMlFqTlhMRXRCUVVzd2VrSXNZVUZCWVN4blFrRkJhVUpHTEVsQlZTOURlVVFzVVVGQlVUVkRMRWRCUTBvc1RVRkJUVGw0UWl4RlFVRlBPSGhDTEVWQlFVOHhaQ3hOUVVGUkxFZEJRelZDZWxJc1JVRkJUU3h2UWtGQmNVSXpReXhIUVVOMlFpeE5RVUZST0hoQ0xFVkJRVTlvY2tJc1MwRkRabTVGTEVWQlFVMHNiVU5CUTA0elF5eEZRVUZMYkVjc1MwRkJTekpFTEV0QlFVdHpNa0lzU1VGQlNXcERMRVZCUVU5b2NrSXNUVUZGTVVKeVNpeExRVUZMZVRGQ0xGVkJRMHg2TVVJc1MwRkJTM2N6UWl4VlFVRlZhakZDTEVkQlIyWjJReXhMUVVGTE1ERkNMR05CUVdOeU5VSXNTMEZCUzJRc1QwRkJUemcxUWl4UFFVRlBPWGxDTEVsQlJ6bERhVEZDTEZWQlFWVnFNVUlzUjBGRFRpeEhRVUZKZGtNc1MwRkJTM2t6UWl4bFFVRnBRbm96UWl4TFFVRkxlVE5DTEdOQlFXTnlPVUlzVDBGQlVTeERRVU5xUkN4TlFVRk5iVVlzUlVGQldWTXNTMEZCUzNrelFpeGpRVUZqTlRSQ0xGRkJRM0pETEVsQlFVc3NUVUZCVFVjc1MwRkJXVThzUlVGRGJrSlFMRVZCUVZNeFF5eE5RVUZOTUVRc1MwRkJUWFZETEVkQlJ6ZENhVklzVFVGQlRXaEpMRXRCUVV0c1VDeE5RVUZOTUVRc1MwRkJUWFZETEVkQlR6TkNLM3BDTEVsQlFVbHFkRUlzUjBGRFFTeE5RVUZOZUVRc1JVRkJUemRHTEV0QlEySXNTVUZCU1RBelFpeEhRVUZQTEVWQlExZ3NUMEZCVHl4WlFVRmhiakZDTEVkQlJWcHRNVUlzU1VGRlNrRXNSMEZCVHl4RlFVTlFlSGxDTEVWQlFVMHNhVUpCUVd0Q00wTXNSMEZEZUVKelJDeEZRVUZMZDNWQ0xFOUJRVThzUTBGRFVtdzJRaXhMUVVGTmNUSkNMRVZCUVcxQ01rWXNWMEZCVjJVc1NVRkRjRU0zZEVJc1IwRkJTVUVzUlVGRFNuTk9MRXRCUVUxd1ZTeE5RVlZzUWpZd1FpeE5RVUZOTDBNc1IwRkRSaXhOUVVGTmFVTXNSVUZCVFhReVFpeExRVUZMTmpGQ0xFdEJRVXQ0UWl4RlFVRlBhSEpDTEVsQlEzcENMRzFDUVVGelFtbDBRaXhIUVVOMFFuQjRRaXhGUVVGTkxIbENRVUV3UW0xMlFpeEZRVUZQYUhKQ0xFZEJRVWxuY2tJc1JVRkJUekZrTEUxQlEyeEVNbVlzUlVGQlNXZzJRaXhOUVVGTk1FUXNTMEZCVFhFd1FpeEZRVUZQTVdRc1lVRkRhRUl6Vnl4TFFVRkxOakZDTEV0QlFVdDRRaXhGUVVGUGFISkNMRXRCUjNoQ2JrVXNSVUZCVFN4aFFVRmpiWFpDTEVWQlFVOW9ja0lzU1VGUmJrTXdkRUlzVlVGQlZURjBRaXhIUVVOT2JrVXNSVUZCVFN3NFFrRkJLMEp0UlN4SFFVTnlRM0pLTEV0QlFVdHhTaXhIUVVGTFFTeEZRVU5XY2tvc1MwRkJTM2t4UWl4WFFVRlpMRVZCUTJwQ2VqRkNMRXRCUVVzeU0wSXNaVUZEVERNelFpeExRVUZMTUhwQ0xHRkJRV0VzVjBGUGRFSnBSU3hsUVVOSk16TkNMRXRCUVVzd01VSXNZMEZCWXprMFFpeFRRVUZUTWtZc1IwRkJVM1pETEV0QlFVdDNNMElzVlVGQlZXb3hRaXhMUVVOd1JIWkRMRXRCUVVzd01VSXNZMEZCWjBJc1IwRkRja0l4TVVJc1MwRkJTekl4UWl4WFFVRlhMelJDTEZOQlFWTjVNMElzU1VGRGNrSnlNRUlzUzBGQlN6SXlRaXgzUWtGQmQwSjBReXhIUVVNM1FuSXdRaXhMUVVGTGNUQkNMRTlCUVU5QkxFMUJSV2hDY2pCQ0xFdEJRVXN5TVVJc1YwRkJZU3hIUVU5MFFqSkNMR1ZCUTBsd2VVSXNSVUZCVFN4NVFrRkJNRUpzUml4TFFVRkxjekJDTEV0QlEzSkRkREJDTEV0QlFVczJSU3hWUVVOTU4wVXNTMEZCUzJzd1FpeFJRVUZSTEhkQ1FWTnFRbkoyUWl4VlFVTlJOMFVzUzBGQlMzZDRRaXhQUVVWTWVIaENMRXRCUVV0M2VFSXNTMEZCU3pVd1FpeFRRVUZUYXpSQ0xFZEJRV1ZCTEUxQlEyeERPVEJDTEV0QlFVdDNlRUlzVlVGQlQyeDZRaXhIUVVWb1FqQkNMRXRCUVV0MWRrSXNSMEZCWVN4VFFVRkZkblpDTEUxQlVYaENiV2hDTEdGQlYwa3NUMEZXU1c1b1FpeExRVUZMZVRGQ0xGbEJRMHgyZDBJc1JVRkJUU3cyUWtGQk9FSnNSaXhMUVVGTGN6QkNMRXRCUTNwRGREQkNMRXRCUVV0eE1FSXNUMEZCVHl4RFFVRkZiRFpDTEV0QlFVMXhNa0lzUlVGQmJVSXlSaXhYUVVGWGEwSXNZMEZIZEVSeU0wSXNTMEZCU3paRkxGVkJRMFEzUlN4TFFVRkxlVEZDTEZkQlJVeDZNVUlzUzBGQlMyc3dRaXhSUVVGUkxIZENRVVZXYkRCQ0xFdEJVVmcyZWtJc1VVRkRTU3hQUVVGUE4zcENMRXRCUVV0dGFFSXNZVUZUYUVKclZpeFRRVUZUUVN4SFFVVk1MRTlCUkVGeU1rSXNTMEZCU3pneFFpeE5RVUZOVHl4VFFVRlhRU3hGUVVObWNqSkNMRXRCVTFnc1pVRkZTU3hQUVVSQlFTeExRVUZMT0RGQ0xFMUJRVTFaTEZWQlFWY3NSVUZEWmpFeVFpeExRV2xDV0RSelFpeFJRVUZSUVN4SFFVVktMRTlCUkVFMWMwSXNTMEZCU3pneFFpeE5RVUZOYkVvc1VVRkJWVUVzUlVGRFpEVnpRaXhMUVZOWU5ETkNMRTFCUVUwMU5FSXNSMEZIUml4UFFVWkJaMElzUzBGQlMza3pRaXhqUVVGblFub3pRaXhMUVVGTGVUTkNMR1ZCUVdsQ0xFZEJRek5EZWpOQ0xFdEJRVXQ1TTBJc1kwRkJZM0EzUWl4TFFVRkxNa01zUjBGRGFrSm5RaXhMUVZOWU5qTkNMRmRCUVZjM05FSXNSMEZIVUN4UFFVWkJaMElzUzBGQlMza3pRaXhqUVVGblFub3pRaXhMUVVGTGVUTkNMR1ZCUVdsQ0xFZEJRek5EZWpOQ0xFdEJRVXQ1TTBJc1kwRkJZM1I0UWl4UlFVRlJia2dzUjBGRGNFSm5RaXhMUVZGWU9ETkNMRTlCUVU4NU5FSXNSMEZEU0N4SlFVRkxaMElzUzBGQlMza3pRaXhqUVVOT0xFOUJRVTk2TTBJc1MwRkZXQ3hIUVVGSmFFSXNSVUZCVlN4RFFVTldMRTFCUVUxUExFVkJRVmxUTEV0QlFVdDVNMElzWTBGRGRrSXNTVUZCU3l4SlFVRkphRGRDTEVWQlFVa3NSVUZCUjBFc1JVRkJTVGhETEVWQlFWVnVSaXhQUVVGUmNVTXNTVUZEYkVNc1IwRkJTWFZETEVsQlFXRlBMRVZCUVZVNVF5eEhRVVYyUWl4UFFVUkJPRU1zUlVGQlZVZ3NUMEZCVHpORExFVkJRVWNzUjBGRFluVkVMRlZCUzJaQkxFdEJRVXQ1TTBJc1kwRkJaMElzUjBGRmVrSXNUMEZCVDNvelFpeExRVkZZS3pOQ0xHVkJRMGtzVDBGQlR5OHpRaXhMUVVGTGVUTkNMR1ZCUVdsQ0xFZEJhMEpxUTA4c1kwRkJZMmcxUWl4SFFVZFdMRTlCUmtGblFpeExRVUZMYVRSQ0xITkNRVUYzUW1vMFFpeExRVUZMYVRSQ0xIVkNRVUY1UWl4SFFVTXpSR28wUWl4TFFVRkxhVFJDTEhOQ1FVRnpRalUzUWl4TFFVRkxNa01zUjBGRGVrSm5RaXhMUVd0Q1dHczBRaXh0UWtGQmJVSnNOVUlzUjBGSFppeFBRVVpCWjBJc1MwRkJTMmswUWl4elFrRkJkMEpxTkVJc1MwRkJTMmswUWl4MVFrRkJlVUlzUjBGRE0wUnFORUlzUzBGQlMyazBRaXh6UWtGQmMwSTVlRUlzVVVGQlVXNUlMRWRCUXpWQ1owSXNTMEZ6UWxodE5FSXNaVUZCWlc0MVFpeEhRVU5ZTEVsQlFVdG5RaXhMUVVGTGFUUkNMSE5DUVVOT0xFOUJRVTlxTkVJc1MwRkZXQ3hIUVVGSmFFSXNSVUZCVlN4RFFVTldMRTFCUVUxUExFVkJRVmxUTEV0QlFVdHBORUlzYzBKQlEzWkNMRWxCUVVzc1NVRkJTWGczUWl4RlFVRkpMRVZCUVVkQkxFVkJRVWs0UXl4RlFVRlZia1lzVDBGQlVYRkRMRWxCUTJ4RExFZEJRVWwxUXl4SlFVRmhUeXhGUVVGVk9VTXNSMEZGZGtJc1QwRkVRVGhETEVWQlFWVklMRTlCUVU4elF5eEZRVUZITEVkQlEySjFSQ3hWUVV0bVFTeExRVUZMYVRSQ0xITkNRVUYzUWl4SFFVVnFReXhQUVVGUGFqUkNMRXRCVVZodk5FSXNkVUpCUTBrc1QwRkJUM0EwUWl4TFFVRkxhVFJDTEhWQ1FVRjVRaXhIUVZONlEzUkNMSGRDUVVGM1FuUkRMRWRCUTNCQ0xFZEJRVWx5TUVJc1MwRkJTMmswUWl4MVFrRkJlVUpxTkVJc1MwRkJTMmswUWl4elFrRkJjMEkzT1VJc1QwRkJVU3hEUVVOcVJTeE5RVUZOYlVZc1JVRkJXVk1zUzBGQlMyazBRaXh6UWtGQmMwSndOVUlzVVVGRE4wTXNTVUZCU3l4TlFVRk5SeXhMUVVGWlR5eEZRVU51UWxBc1JVRkJVekZETEUxQlFVMHdSQ3hMUVVGTmNUQkNMRVZCUVU4eFpDeFJRVXMxUXpOakxFVkJRVkYzTVVJc1QwRkJVMEVzUnl4clEwTjBiVUpxUWl4SlFVRkpUQ3hGUVVGdFFtNTJRaXhOUVVGUlFTeExRVUZMYlhaQ0xHbENRVUZ2UWl4VFFVRlZReXhIUVVNNVJDeFBRVUZSUVN4SFFVRlBRU3hGUVVGSlF5eFhRVUZqUkN4RlFVRk5MRU5CUVVVc1VVRkJWMEVzU1VGRmVFUTNla0lzVDBGQlQwTXNaVUZCWlhoQ0xFVkJRVk1zWVVGQll5eERRVUZGYzBJc1QwRkJUeXhKUVVOMFJIUkNMRVZCUVZGdFowSXNVMEZCVFN4RlFVTmtMRTFCUVUwMlZ5eEZRVUZ4UWl4RlFVRlJMRTFCUlRkQ09YSkNMRVZCUkZWcGNVSXNSVUZCWjBJc1JVRkJVU3hQUVVOc1FtNXZRaXhSUVVGUkxIZENRVFpFT1VKb1RpeEZRVUZSYldkQ0xFbEJia1JTTEZOQlFXRTBWaXhGUVVGTFJTeEZRVUZQTEVkQlFVbHZTU3hIUVVONlFpeEpRVUZKYWpsQ0xFVkJRVTB5TUVJc1JVRkZWbk5KTEVWQlFVMUJMRWRCUVRSQ0xHOUNRVUZpYUdZc1ZVRkJORUpCTEZOQlF6ZERMRTFCUVZFd1Z5eEpRVU5TUVN4RlFVRk5jMGtzUlVGQlNYQnZRaXhUUVVGWExFdEJRVTl2YjBJc1JVRkJTVEZuUWl4TlFVVnFRaXhwUWtGQlVtOVpMRWxCUTBnc1RVRkJVVUVzUlVGQlNTOVVMRTlCUVU4c1MwRkZaaXRVTEVWQlJFRXNUVUZCVVVFc1JVRkJTUzlVTEU5QlFVOHNSMEZEWW5GakxFVkJRVWx3YjBJc1UwRkJWemhtTEVWQlIyWnpTU3hGUVVGSk1XZENMRXRCUVU5dldTeEhRVWR3UWl4elFrRkJjMEo0YjBJc1MwRkJTM2R2UWl4TFFVTTFRamR4UWl4RlFVRk5MSFZDUVVGM1FqWnhRaXhIUVVVeFFrRXNUMEZFUVN4SlFVRjFRbk5KTEVWQlEycENRU3hGUVVGSmNHOUNMRk5CUVZjc1MwRkJUemhtTEVWQlIzUkNMRmRCUVdGQkxFZEJTVE5DTjNGQ0xFVkJRVTBzVjBGQldUWnhRaXhIUVVOc1FqTXdRaXhGUVVGTk5ERkNMRVZCUVcxQ2NqSkNMRTFCUVUxdk1VSXNTVUZIT1VJek1FSXNSVUZCU1RKdVFpeFBRVU5FTEdOQlFXTjRZaXhMUVVGTGJrMHNSVUZCU1RaVkxGVkJRM1pDTjFVc1JVRkJTVEp1UWl4TFFVRlBMRXRCUlU0c1pVRkJaWGhpTEV0QlFVdHVUU3hGUVVGSk5sVXNXVUZETjBJM1ZTeEZRVUZKTW01Q0xFdEJRVThzVVVGSGJrSXpia0lzUlVGQlNUWXdRaXhMUVVGUE56QkNMRVZCUVVrMk1FSXNUVUZCVVN4SlFVTjJRaXhOUVVOTmRGa3NSMEZFYTBNc1NVRkJNMEoyWXl4RlFVRkpkV01zUzBGQlMzaFpMRkZCUVZFc1MwRkRWaXhKUVVGTkwwUXNSVUZCU1hWakxFdEJRVThzU1VGQlRYWmpMRVZCUVVsMVl5eExRVk12UXl4UFFWQkJkbU1zUlVGQlNXbFBMRWRCUVV0cVR5eEZRVUZKTmxVc1UwRkJWeXhOUVVGUk1FZ3NSVUZCVHl4SlFVRk5kbU1zUlVGQlNUSnVRaXhMUVVGUGEwNHNSVUZGZUVRM01FSXNSVUZCU1hsbExFdEJRMEY2WlN4RlFVRkpObFVzVTBGRFFTeE5RVU5CTUVnc1IwRkRRekJuUWl4SFFVRlBRU3hGUVVGSmRGWXNUMEZCVXpOdVFpeEZRVUZKTW01Q0xFdEJRVThzUjBGQlN5eEpRVUZOTTI1Q0xFVkJRVWt5YmtJc1RVRkRhRVF6YmtJc1NTd3dRa05zUlZoSExFOUJRVTlETEdWQlFXVjRRaXhGUVVGVExHRkJRV01zUTBGQlJYTkNMRTlCUVU4c1NVRkRkRVIwUWl4RlFVRlJjeXRDTEdGQlFWVXNSVUZGYkVJc1NVRkJTV2c1UWl4SFFVRlJMRVZCUTFvc1NVRkRTVUVzUlVGQmEwTXNiMEpCUVc1Q2FUbENMR2RDUVVOWUxHOUNRVUZ4UWl4SlFVRkpRU3hsUVVWcVF5eE5RVUZQTDBVc1NVRkpVSGcxUWl4RlFVRlJjeXRDTEZGQlFWVm9PVUlzUnl3d1FrTktiRUpETEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGUmR5dENMRTlCUVZONEswSXNSVUZCVVRRMlFpeFpRVUZUTEVWQldXeEROVFpDTEVWQlFWRTBOa0lzVDBGWVVpeFRRVUZuUW5nMVFpeEhRVU5hTEVsQlFVbG1MRVZCUVUwc1IwRkRWaXhKUVVGTExFbEJRVWx2UXl4TFFVRkxja0lzUlVGRFRrRXNSVUZCU1hsdVFpeGxRVUZsY0cxQ0xFdEJRMlp3UXl4RlFVRkpSQ3hUUVVOS1F5eEhRVUZQTEV0QlExaEJMRWRCUVU4MFVDeHRRa0ZCYlVKNFRpeEhRVUZMTEVsQlFVMTNUaXh0UWtGQmJVSTNUeXhGUVVGSmNVSXNTMEZIY0VVc1QwRkJUM0JETEVkQmEwSllUQ3hGUVVGUmR5dENMRTlCVkZJc1UwRkJaMEpETEVkQlExb3NTVUZCU1VNc1JVRkJUU3hIUVVOT1F5eEZRVUZSUml4RlFVRkhhamRDTEUxQlFVMHNTMEZEY2tJc1NVRkJTeXhKUVVGSlppeEZRVUZKTEVWQlFVZDVaQ3hGUVVGSmVXVXNSVUZCVFhZclFpeFBRVUZSY1VNc1JVRkJTWGxrTEVWQlFVZDZaQ3hKUVVGTExFTkJRekZETEVsQlFVbHRPRUlzUlVGQlQwUXNSVUZCVFd3NFFpeEhRVUZIWlN4TlFVRk5MRXRCUXpGQ2F6ZENMRVZCUVVsSExHMUNRVUZ0UWtRc1JVRkJTeXhMUVVGUFF5eHRRa0ZCYlVKRUxFVkJRVXNzU1VGRkwwUXNUMEZCVDBZc1NTd3dRa051UTFodU9VSXNUMEZCVDBNc1pVRkJaWGhDTEVWQlFWTXNZVUZCWXl4RFFVRkZjMElzVDBGQlR5eEpRVU4wUkhSQ0xFVkJRVkZYTEZkQlFWRXNSVUZSYUVJc1RVRkJUVzByUWl4RlFVRkxMREJQUVVOTVF5eEZRVUZSTEVOQlExWXNVMEZCVlN4WFFVRlpMRmxCUVdFc1YwRkJXU3hQUVVGUkxGZEJRVmtzVDBGQlVTeFBRVUZSTEZkQlFWa3NUMEZCVVN4WlFVRmhMRTlCUVZFc1VVRkJVeXhWUVhGQ2Vra3ZLMElzUlVGQlVWY3NUVUZ1UWxJc1UwRkJaVTRzUjBGRFdDeE5RVUZOTUZZc1JVRkJUVEZXTEVWQlFVdDNTQ3hGUVVGSmVFZ3NSVUZCU1RoRkxGRkJRVkVzUzBGQlRYTkNMRVZCUVVsd1J5eEZRVUZKT0VVc1VVRkJVU3hOUVVNM1F5eEhRVUZPTUVNc1NVRkJhVUlzUjBGQlRuQkNMRWxCUTFod1J5eEZRVUZOUVN4RlFVRkphMFFzVlVGQlZTeEZRVUZIYzBVc1IwRkJTM2hJTEVWQlFVbHJSQ3hWUVVGVmMwVXNSVUZCUjNCQ0xFZEJRVWR6UXl4UlFVRlJMRXRCUVUwc1MwRkJUekZKTEVWQlFVbHJSQ3hWUVVGVmEwUXNSVUZCUjNCSExFVkJRVWxFTEZOQlJUbEdMRWxCUVVsb1FpeEZRVUZKTUM5Q0xFVkJRVWQwSzBJc1MwRkJTMGdzUjBGQlR5eEpRVUZMTURGQ0xFVkJRVTBzUjBGQlNYUjZRaXhGUVVGSkxFZEJRekZETEV0QlFVOUJMRXRCUTBoemVrSXNSVUZCU1dkS0xFVkJRVTEwT0VJc1NVRkJUWEpFTEVWQlFVVnhSQ3hKUVVGTkxFZEJWVFZDTEU5QlVsVXNSMEZCVG05R0xFbEJRV2xDTEVkQlFVNXdRaXhKUVVOWWMzWkNMRVZCUVVsd2VrSXNUMEZCVTI5VUxFVkJRMkpuWjBJc1JVRkJTWEJaTEV0QlFVOXZXU3hGUVVGSmNGa3NTMEZCUzNCaExGVkJRVlVzUlVGQlIzZDVRaXhGUVVGSmNGa3NTMEZCUzNaa0xFOUJRVk1zUjBGQlJ6SkpMRkZCUVZFc1MwRkJUU3hMUVVOd1JXZDBRaXhGUVVGSmFVb3NWVUZCV1dwS0xFVkJRVWxwU2l4VlFVRlZhakpDTEZGQlFWRXNTVUZCU3l4SlFVRkpRU3hSUVVGUkxFbEJRVXNzU1VGQlNVRXNVVUZCVVN4TFFVRk5MRXRCUXpsRlozUkNMRVZCUVVsclNpeFRRVUZWTEVkQlJXeENiRW9zUlVGQlNXMUtMRlZCUzFJc1UwRkJiVUk1T1VJc1JVRkJTell3UWl4SFFVTndRaXhOUVVGNVFqbHZRaXhGUVVGUk9HOUNMRVZCUVV0c2RFSXNVVUZCZWtJc1YwRkJkVU1zUzBGQlMzWkdMRTFCUVUwc1MwRlBMMFFzVFVGT2VVSXNTMEZCY2tKNWVVSXNSVUZCUzNadlFpeFBRVUZQTEVWQlFVY3NTVUZCTmtJc1NVRkJhRUoxYjBJc1JVRkJTemN4UWl4UlFVTnFReXROTEVWQlFVMHZTQ3hQUVVGUExFVkJRVWNzUjBGRmJVSXNTMEZCYmtNMmQwSXNSVUZCUzNadlFpeFBRVUZQZFc5Q0xFVkJRVXMzTVVJc1QwRkJVeXhGUVVGSExFbEJRemRDSzAwc1JVRkJUUzlJTEU5QlFVOHJTQ3hGUVVGTkwwMHNUMEZCVXl4RlFVRkhMRWRCUlRWQ0swMHNSVUZpVXl0NFFpeERRVUZWYmtvc1JVRkJTMEVzUlVGQlZTeE5RVU42UTBFc1JVRkJTVTBzVTBGalVpeFRRVUZyUWs0c1JVRkJTMHNzUjBGRGJrSXNUVUZCVFhwYUxFVkJRVThzUjBGTllpeFBRVXhCZVZvc1JVRkJUWEowUWl4UlFVRlJMRFpDUVVFMlFpeFRRVUZWYnpKQ0xFVkJRVWw2TUVJc1JVRkJTVEF3UWl4SFFVTnlSREV3UWl4SlFVTkJhVk1zUlVGQlMycFRMRWRCUVUwd01FSXNUVUZIV25wcFFpeEZRWEpDVVRCYUxFTkJRVk5PTEVWQlFVdEJMRVZCUVZjc1QwRkRha05CTEVrc2VVSkROMEpZZURCQ0xFOUJRVTlETEdWQlFXVjRRaXhGUVVGVExHRkJRV01zUTBGQlJYTkNMRTlCUVU4c1NVRkRkRVIwUWl4RlFVRlJjUzlDTEUxQlFWRnlMMElzUlVGQlVYY3JRaXhQUVVGVGVDdENMRVZCUVZFME5rSXNXVUZCVXl4RlFVTnNSQ3hOUVVGTk1FVXNSVUZCVnl4dFJVRkJiVVU1TjBJc1RVRkJUU3hKUVVGclFqUkZMRVZCUVUwc1IwRkRiRWdzU1VGQmNVSTJSQ3hGUVVGcVFuTjZRaXhGUVVGUExFVkJRVWM1T0VJc1JVRkJTU3hGUVZGc1FpeFRRVUZUYlRSQ0xFVkJRVTgwUlN4SFFVTmFMRWxCUVVsRExFVkJRVlVzUjBGRFpDeEhRVU5KUVN4RlFVRlZTQ3hGUVVGVFJTeEZRVm8yUlN4SlFWazNSRU1zUlVGRGJrTkVMRVZCUVUwekwwSXNTMEZCUzJreFFpeE5RVUZOTUVzc1JVRmlLMFVzVlVGak0wWkJMRVZCUVUwc1IwRkRaaXhQUVVGUFF5eEZRV3REV0N4SlFXaERRWG92UWl4RlFVRlJORFpDTEU5QlFWTkJMRVZCWldwQ05UWkNMRVZCUVZGM0swSXNUMEZRVWl4VFFVRm5RbTRyUWl4SFFVTmFMRWxCUVVseEwwSXNSVUZCVlN4RlFVTmtMRWxCUVV0cU9VSXNSVUZCU1N4RlFVRkhRU3hGUVVGSmNFTXNSVUZCU1VRc1QwRkJVWEZETEVsQlEzaENhVGxDTEVWQk5VSm5SeXhIUVRSQ2RFWkJMRVZCUVcxQ2RETkNMRVZCUVVrdlNDeEZRVUZKTW1oQ0xFOUJRVTkyWml4SlFVVm9SQ3hQUVVGUGFUbENMRWRCWlZneEwwSXNSVUZCVVhFdlFpeE5RVTVTTEZkQlEwa3NUVUZCVFc1bExFVkJRVTB3V2l4SFFVRlJMRWxCUVVrMWRVSXNUVUZEZUVJc1QwRkJTV3RXTEVsQlFWRnFWaXhIUVVORWMzcENMRVZCUVU4c1JVRkJSM1I2UWl4RlFVRlBhVllzUjBGRGNrSkJMRVZCUVUwc1NVRkJUVEJhTEVWQlFVOHlSU3hOUVUxMlFqazRRaXhGUVdwRWFVY3NSMEZwUkhKR1FTeEpRVU5tTWtZc1JVRkJTV3N6UWl4RlFVRlROemhDTEVsQlFVMUJMRWNzTUVKRGNrUjJRbXhDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGUk1pOUNMRzlDUVVGcFFpeEZRVU42UWpNdlFpeEZRVUZSTWk5Q0xHVkJRMmRDTEc5Q1FVRlVPWHBDTEV0QlEwRkJMRXRCUldkQ0xHOUNRVUZZYWtNc1QwRkRURUVzVDBGSFFXY3lRaXhUUVVGVExHTkJRVlJCTEVrc05FSkRWbVp5SzBJc1QwRkJUME1zWlVGQlpYaENMRVZCUVZNc1lVRkJZeXhEUVVGRmMwSXNUMEZCVHl4SlFVTjBSSFJDTEVWQlFWRlhMRTFCUVZGWUxFVkJRVkY1TTBJc2MwSkJRWGRDZWpOQ0xFVkJRVkUyTDBJc1YwRkJZVGN2UWl4RlFVRlJPQzlDTEZWQlFWazVMMElzUlVGQlVXbFhMRk5CUVZkcVZ5eEZRVUZSZHpGQ0xGbEJRVk1zUlVGRE4wZ3NUVUZCVFVrc1JVRkJZeXhGUVVGUkxFMUJRelZDY2pCQ0xFOUJRVTlETEdWQlFXVjRRaXhGUVVGVExGTkJRVlVzUTBGQlJYbENMRmxCUVZrc1JVRkJUV2RNTEVsQlFVc3NWMEZCWXl4UFFVRlBiWEJDTEVWQlFWbEtMRlZCUTI1SGVERkNMRVZCUVZGcFZ5eFRRVUZYTW1Zc1JVRkJXVW9zVDBGQlQzWm1MRk5CUTNSRExFbEJRVWs0Y0VJc1JVRkJhVUlzUlVGQlVTeE5RVU0zUW5nclFpeFBRVUZQUXl4bFFVRmxlRUlzUlVGQlV5eFpRVUZoTEVOQlFVVjVRaXhaUVVGWkxFVkJRVTFuVEN4SlFVRkxMRmRCUVdNc1QwRkJUM042UWl4RlFVRmxSQ3hoUVVONlJ5eEpRVUZKUlN4RlFVRmhMRVZCUVZFc1RVRkRla0o2SzBJc1QwRkJUME1zWlVGQlpYaENMRVZCUVZNc1lVRkJZeXhEUVVGRmVVSXNXVUZCV1N4RlFVRk5aMHdzU1VGQlN5eFhRVUZqTEU5QlFVOTFla0lzUlVGQlYwZ3NZMEZEZEVjc1NVRkJTVWtzUlVGQldTeEZRVUZSTEUxQlEzaENNU3RDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEhkQ1FVRjVRaXhEUVVGRmVVSXNXVUZCV1N4RlFVRk5aMHdzU1VGQlN5eFhRVUZqTEU5QlFVOTNla0lzUlVGQlZYaEpMSGxDUVVOb1NDeEpRVUZKZVVrc1JVRkJaMElzUlVGQlVTeE5RVU0xUWpNclFpeFBRVUZQUXl4bFFVRmxlRUlzUlVGQlV5eFJRVUZUTEVOQlFVVjVRaXhaUVVGWkxFVkJRVTFuVEN4SlFVRkxMRmRCUVdNc1QwRkJUM2w2UWl4RlFVRmpkaTlDTEZVc2EwTkRXbkJITEVsQlFVbDNNRUlzUlVGQmJVSnVka0lzVFVGQlVVRXNTMEZCUzIxMlFpeHBRa0ZCYjBJc1UwRkJWVU1zUjBGRE9VUXNUMEZCVVVFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWTBRc1JVRkJUU3hEUVVGRkxGRkJRVmRCTEVsQlJYaEVOM3BDTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGUmR6RkNMRmxCUVZNc1JVRkRha0lzVFVGQlRYZExMRVZCUVdFc1JVRkJVU3hOUVVOeVFrTXNSVUZCV1N4RlFVRlJMRTFCUTNCQ1JTeEZRVUZsTEVWQlFWRXNUVUZEZGtKRUxFVkJRV2RDTEVWQlFWRXNUVUZEZUVKRkxFVkJRVlZxVEN4RlFVRm5RaXhGUVVGUkxFOUJRMnhEYVVNc1JVRkJjMElzUlVGQlVTeE5RVU01UW1sS0xFVkJRWEZDTEVWQlFWRXNUVUZETjBKdU1VSXNSMEZCVVN4RlFVRkphekZDTEVWQlFWRndla0lzVTBGQlV5d3lRa0ZEYmtNc1RVRkJUWGR2UWl4VlFVRmxORUlzUlVGQmIwSkRMRkZCVVhKRGVuQkNMRmxCUVZsdGIwSXNSVUZCU3pGQ0xFVkJRVThzU1VGRGNFSTNZU3hSUVVOSmRXTXNSMEZCVHl4cFFrRkJiMEpCTEVsQlF6TkNNVUlzUlVGQlR6QkNMRVZCUTFCQkxFVkJRVTBzVFVGRlRrRXNSMEZEUVVFc1IwRkJUU3hGUVVGSmJVc3NSVUZCWTNZdlFpeFBRVUZQYnpGQ0xFZEJReTlDTVVJc1JVRkJTM1pNTEZOQlFWZHBUaXhGUVVGSmNGa3NTMEZEY0VJd1Z5eEZRVUZMYVUwc1QwRkJNRUlzVlVGQmFrSjJTeXhGUVVGSk9XWXNWVUZCZVVNc1VVRkJha0k0Wml4RlFVRkpPV1lzVTBGRE9VTnZaU3hGUVVGTGRFd3NTMEZCVDJkT0xFVkJRVWxvVGl4TFFVTmFaMDRzUlVGQlNVc3NVVUZEU2k5Q0xFVkJRVXNyUWl4TlFVRlJUQ3hGUVVGSlN5eFJRVVZvUWk5Q0xFVkJRVXN4Vnl4UFFVTldNRmNzUlVGQlMzWk1MRlZCUVZjc1JVRkJTVzlZTEVWQlFXTjJMMElzVDBGQlR6QjZRaXhGUVVGTE1WY3NUVUZCVFVFc1QwRkZlRVFzUlVGQlNYTnBRaXhGUVVGVmVFa3NkVUpCUVhWQ2VuaENMRXRCUVUxeGRVSXNSMEZETTBOeWRVSXNTMEZCUzNNMlFpeFBRVU5FTEUxQlFWRnFUU3hGUVVGTGFVMHNUMEZEVUdwTkxFVkJRVXRwVFN4UFFVTmxMRzlDUVVGaWFtaENMRlZCUVRSQ0xGZEJRV0ZCTEZOQlFWTndTaXhUUVVNdlJHOWxMRVZCUVV0MlRDeFhRVUZoZFV3c1JVRkJTM1JNTEU5QlJYWkNjMHdzUlVGQlMzUk1MRXRCUVU4dmFVSXNTMEZCUzNNMlFpeFBRVUZUTEUxQlFWRXNUVUZGZEVOME5rSXNTMEZCU3pocFFpeFRRVU5FZFV3c1JVRkJTM1pNTEZkQlEyOUNMRzlDUVVGaWVrb3NVMEZCTWtKQkxGTkJRVk41U2l4VFFVRlhMR0ZCUXk5RU9XbENMRXRCUVVzcmFVSXNTMEZEUkhOTUxFVkJRVXQwVEN4UFFVTnZRaXh2UWtGQllqRktMRlZCUVRSQ1FTeFRRVUZUTUVvc1MwRkRka014U2l4VFFVRlRNRW9zUzBGRFZDOXBRaXhMUVVGTGN6WkNMRTlCUTBRc1RVRkRRU3hOUVVOc1FuUTJRaXhMUVVGTE5qVkNMRmRCUVdGNFRDeEZRVUZMZDB3c1dVRkJZeXhEUVVGRExGVkJRVmNzWVVGRGFrUTNOVUlzUzBGQlMzVTJRaXhYUVVGaExFZEJRMnhDZGpaQ0xFdEJRVXQzTmtJc1dVRkJZeXhIUVVOdVFuZzJRaXhMUVVGTGVUWkNMR05CUVdkQ0xFVkJRM0pDZWpaQ0xFdEJRVXR4ZFVJc1MwRkJUemw1UWl4UFFVRlBaekZDTEU5QlFVOHNRMEZEZEVKT0xFdEJRVTBzWVVGRFRubExMRTlCUVU4c1JVRkRVRU1zYVVKQlFXbENMRVZCUTJwQ1F5eFRRVUZUTEVWQlExUkRMR1ZCUVdkQ0xFbEJRMmhDUXl4cFFrRkJhVUlzUlVGRGFrSkRMRzlDUVVGdlFpeEZRVU53UWtNc2EwSkJRVzFDTEVOQlEyWkRMRlZCUVZjc1RVRkZaa01zYVVKQlFXdENMRWRCUTJ4Q1F5eHhRa0ZCY1VJc1IwRkRkRUk1VFN4SFFVTkljblZDTEV0QlFVdHhkVUlzUzBGQlN6UkNMRXRCUVU5cWQwSXNTMEZCUzNGMVFpeExRVUZMTkVJc1MwRkJTMngwUWl4UlFVRlJMRTFCUVU4c1NVRkJUU3hKUVVOMFFpeHBRa0ZCY0VJdlF5eExRVUZMY1hWQ0xFdEJRVXNyUWl4UlFVTnFRbkIzUWl4TFFVRkxjWFZDTEV0QlFVc3JRaXhQUVVGUkxFVkJRVWtyU2l4RlFVRmhNMElzVVVGQlVYZzBRaXhMUVVGTGNYVkNMRXRCUVVzclFpeFJRVWQ2UkhCM1FpeExRVUZMY1Vvc1IwRkJTeXhMUVVOV2Nrb3NTMEZCUzI4M1FpeFRRVUZYTEV0QlEyaENjRGRDTEV0QlFVdHhOMElzWVVGQlpTeExRVU53UW5JM1FpeExRVUZMY3pkQ0xGbEJRV01zUzBGRmJrSjBOMElzUzBGQlMzVTNRaXhwUWtGQmJVSXNTMEZEVVN4dFFrRkJja0pETEcxQ1FVTkllRGRDTEV0QlFVdHhkVUlzUzBGQlN6aE5MSEZDUVVsV1N5eHBRa0ZCYVVJc1owSkJRV2RDTEV0QlEzcENlRGRDTEV0QlFVdDVNa0lzV1VGRlRIb3lRaXhMUVVGTGVUSkNMRlZCUVZVM1NTeHhRa0ZEWmpWMFFpeExRVUZMZVRKQ0xGVkJRVlUxUXl4WlFVVndRaXhIUVVWbExHTkJRV3hDTjNwQ0xFdEJRVXM0YVVJc1YwRkRURGxwUWl4TFFVRkxlVGRDTEhGQ1FVRjFRaXhMUVVONFFubzNRaXhMUVVGTE1EZENMRkZCUVZFc2EwSkJRVzFDTEVOQlF6VkNkRllzV1VGQllTdzJRa0ZIY2tKdlZpeHBRa0ZCYVVJc1ZVRkJWM2czUWl4TFFVRkxlVGRDTEhOQ1FVRnpRaXhMUVVjdlJIbzNRaXhMUVVGTGVYbENMRTlCVTFSclNpeG5Ra0ZCWjBKb2FVTXNSMEZEV25WTUxFVkJRVTBzTUVKQlFUSkNka3dzUjBGRGFrTXNUVUZCVFhreVFpeEZRVUZSTnpCQ0xFOUJRVTluTVVJc1QwRkJUeXhIUVVGSmRuZENMRXRCUVV0eGRVSXNTMEZCU3l0Q0xFOUJSVEZEUVN4RlFVRk5kMHdzU1VGQlRYWkNMRVZCUVcxQ2NIRkNMRk5CUlM5Q2JXZENMRVZCUVUxeFJ5eFZRVUZaT1RoQ0xFVkJSV1J4Unl4TFFVRkxjVW9zUzBGRFRDdHRRaXhGUVVGTk1FY3NTVUZCVFRreVFpeExRVUZMY1Vvc1NVRkRja0lzVFVGQlRXZHNRaXhGUVVGUE9YbENMRTlCUVU5bk1VSXNUMEZCVHl4SFFVRkpkbmRDTEV0QlFVdHhkVUlzUzBGQlN6Wk5MR2xDUVVGcFFuWm9ReXhIUVVGUGNVY3NTMEZCUzNGMVFpeExRVUZOTEVOQlEzaEZLMElzVFVGQlFVRXNSVUZEUVVVc1QwRkJVWFIzUWl4TFFVTlNPR2xDTEZOQlFWVTVhVUlzUzBGQlN6aHBRaXhUUVVObWQxZ3NUMEZCVVhRMlFpeExRVUZMY3paQ0xFOUJRMkoyV0N4TFFVRk5MMmxDTEV0QlFVc3JhVUlzVDBGSFppeFBRVVJCTjJRc1JVRkJUU3hqUVVGbGJYQkNMRWRCUTJRc1NVRkJTVEpNTEVWQlFWZElMRmRCUVZkc1owTXNSMEZCVFRBd1FpeEhRVTh6UTI5RkxFOUJRMGtzU1VGQlNXZEZMRVZCUTBvc1IwRkJTWG95UWl4TFFVRkxjWFZDTEV0QlFVdDVUU3hwUWtGRFZuUk1MRVZCUVU5eFRTeDNRa0ZEYlVNc1NVRkJNVU0zTjBJc1MwRkJTelkxUWl4WFFVRlhNVFpDTEZGQlFWRXNZVUZEZUVKek0wSXNSVUZCV1N4blFrRkZXQ3hKUVVGSkxFbEJRVTE2TWtJc1MwRkJTelkxUWl4WFFVRlhlaTlDTEU5QlN6TkNMRmxCU0VFMFJpeExRVUZMTkhwQ0xHTkJRV0VzUzBGRFpEVjZRaXhMUVVGTE1IcENMR0ZCUVdFc1VVRkJVeXcyUWtGRE5VSXNSMEZKU0N0RExFVkJRVmw2TWtJc1MwRkJTelkxUWl4WFFVRlhMRWRCUldoRE56VkNMRXRCUVV0MU5rSXNWMEZCWVN4VlFVVnNRaXhKUVVOSk9VUXNSVUZCV1hveVFpeExRVUZMTWpkQ0xHZENRVUZuUW14R0xFZEJSWEpETEUxQlFVOW9Na0lzUjBGSlNDeFBRVWhCZVVVc1JVRkJUU3h4UTBGQmMwTjZSU3hIUVVNMVExUXNTMEZCU3pZMVFpeFhRVUZYZWxvc1lVRkRhRUp3WjBJc1MwRkJTM2w1UWl4UFFVZFVaMFVzUlVGQlZXaEZMRTlCUTFaNmVVSXNTMEZCU3pnM1FpeGhRVUZoY2tZc1IwRlBkRUp4Uml4aFFVRmhja1lzUjBGRFZIWjRRaXhGUVVGTkxIVkNRVUYzUW5WNFFpeEZRVUZWT1RoQ0xFMUJRM0JEY1Vjc1MwRkJTM2t5UWl4WlFVTk1kbmhDTEVWQlFVMHNhVU5CUVd0RGJFWXNTMEZCUzNreVFpeFZRVUZWT1RoQ0xFMUJRM1pFY1Vjc1MwRkJTM2t5UWl4VlFVRlZOMGtzYzBKQlIyNUNOWFJDTEV0QlFVdDVNa0lzVlVGQldVRXNSVUZGYWtKQkxFVkJRMHM1ZEVJc1IwRkJSeXhSUVVGVE0wa3NTMEZCU3lzM1FpeFJRVUZSTlhwQ0xFdEJRVXR1U1N4UFFVTTVRakpKTEVkQlFVY3NVMEZCVlROSkxFdEJRVXRuT0VJc1UwRkJVemQ2UWl4TFFVRkxia2tzVDBGRGFFTXlTU3hIUVVGSExGRkJRVk16U1N4TFFVRkxhVGhDTEZGQlFWRTVla0lzUzBGQlMyNUpMRTlCUXpsQ01ra3NSMEZCUnl4VFFVRlRiM05DTEVkQlFWVXZNRUlzUzBGQlN6QTNRaXhSUVVGUkxHdENRVUZ0UWpOSExFdEJVUzlFYlVnc1RVRkJUWFpwUXl4SFFVTkdkVXdzUlVGQlRTeDVRa0ZCTUVKMlRDeEhRVU5vUXl4SlFVRkpPRGhDTEVWQlFWbDZNa0lzUzBGQlN6STNRaXhuUWtGQlowSm9hVU1zUjBGRGFrTjNhVU1zUjBGQlV5eEZRVU5pTTAwc1JVRkJUM0ZOTEhWQ1FVRjNRaXhGUVVNdlFpeE5RVUZOVHl4RlFVRnJRaXhMUVVOb1FrUXNTVUZGU21velFpeEZRVUZOTERoQ1FVRXJRblpNTEVkQlEzSkRPRGhDTEVWQlFWVlFMRXRCUVVzc1EwRkJReXhEUVVGRkx6ZENMRXRCUVUwc1QwRkJVWGRqTEV0QlFVMHNWMEZEZEVNNFppeEZRVUZWTDBrc1MwRkJTeXhWUVVGVk1rOHNTVUZEY2tJc1NVRkJTVVlzUlVGRlNpeEhRVUZKTEZOQlFWZEZMRVZCUVVsc2FVTXNUVUZCVVN4VlFVRlphMmxETEVWQlFVa3hiRUlzUzBGQlRTeERRVWszUXl4SFFVaEJlbElzUlVGQlRTdzBRa0ZCTmtKMlRDeEhRVU51UTNGSExFdEJRVXR6T0VJc1YwRkJXU3hGUVVOcVFuUTRRaXhMUVVGTE1IcENMR0ZCUVdFc1dVRkJZU3RETEVsQlF6RkNRU3hGUVVORUxFOUJRMHBxU0N4RlFVRlBjVTBzYzBKQlFYZENMR05CUVdkQ2NFWXNSVUZCVlRrNFFpeExRVU42UkhWTUxFVkJRVTBzYVVOQlFXdERiRVlzUzBGQlMza3lRaXhWUVVGVk9UaENMRTFCUTNaRWNVY3NTMEZCUzNreVFpeFZRVUZWT0VZc1QwRkJUU3hMUVVOaVNpeEhRVVZCTEZkQlFXRnVPRUlzUzBGQlMzVTJRaXhoUVVWMFFuSXhRaXhGUVVGTkxHbEVRVU5PZFhWQ0xFbEJRMEY2ZWtJc1MwRkJTemczUWl4aFFVRmhja1lzUjBGRGJFSkJMRVZCUVZWUUxFdEJRVXNzUTBGQlF5eERRVUZGTHpkQ0xFdEJRVTBzWVVGRGVFSTJSaXhMUVVGTE1IcENMR0ZCUVdFc1ZVRkJWeXRETEVkQlF6ZENRU3hGUVVGWkxFdEJRMXA2TWtJc1MwRkJTM000UWl4WFFVRlpMRVZCUTJwQ2REaENMRXRCUVV0M09FSXNaMEpCUjFJc1EwRkRSSFF6UWl4RlFVRk5MRGhDUVVFclFuWk1MRWRCUTNKRExFMUJRVTAyTlVJc1JVRkJUU3hKUVVGSmVEUkNMRTFCUVUwc1pVRkZkRUozTkVJc1JVRkJTV2xFTEZWQlFWbEJMRVZCUVZVNU9FSXNTMEZETVVKeFJ5eExRVUZMTUhwQ0xHRkJRV0VzWlVGQlowSkdMRk5CU1RsRExGTkJRVk5wU2l4SlFVTkVUaXhKUVVkS1FTeEhRVUZUTEVWQlExUXhTU3hKUVVOQlowUXNSVUZCVlRWRExGRkJRMVkwUXl4RlFVRlpMRTFCUjJoQ0xFMUJRVTF1V2l4RlFVRlZhMWNzU1VGRFdpeE5RVUZOYm5kQ0xFVkJRVkVzU1VGQlNYSkpMRTFCUVUwc1owSkJRV3RDZHpSQ0xFZEJSVEZEYm5kQ0xFVkJRVTF2ZWtJc1ZVRkJXVUVzUlVGQlZUazRRaXhMUVVNMVFqaHBReXhKUVVOQmRqTkNMRVZCUVUwc2JVUkJRVzlFZGt3c1JVRkJUVFkxUWl4SFFVTm9SWGg2UWl4TFFVRkxNSHBDTEdGQlFXRXNaVUZCWjBKeWQwSXNTVUZGZEVNc1UwRkJVM0UxUWl4SlFVTk1jR1lzUlVGQlVTeHZRa0ZIV2l4VFFVRlRORmNzU1VGRFREVlhMRVZCUVZFc2FVSkJSMW9zVTBGQlUzRm1MRVZCUVZWRExFZEJRMWh1Unl4SFFVRmhiVWNzUlVGQlIycHFReXhQUVVGVE9EaENMRVZCUVZVNU9FSXNUMEZEYmtOMVRDeEZRVUZOTERaQ1FVRTRRakF6UWl4RlFVRkhhbXBETEV0QlFVMDRPRUlzUlVGQlZUazRRaXhOUVVOMlJEaHBReXhMUVVsU0xFMUJRVTFvU2l4RlFVRlZMRXRCUTFwblJDeEZRVUZWT1Vrc1pVRkJaU3hQUVVGUmVVOHNSMEZEYWtNelJpeEZRVUZWT1Vrc1pVRkJaU3hSUVVGVGNsRXNSMEZEYkVOdFdpeEZRVUZWT1Vrc1pVRkJaU3hSUVVGVEswOHNSMEZEYkVNeE9FSXNTMEZCU3pSSkxFbEJRVWtzVVVGQlUzTnlRaXhIUVVOc1Ftd3dRaXhMUVVGTE5Fa3NTVUZCU1N4WlFVRmhLM3BDTEVsQlJURkNiRWNzUlVGQlZTOUpMRXRCUVVzc1QwRkJVVEJQTEVkQlEzWkNNMFlzUlVGQlZTOUpMRXRCUVVzc1VVRkJVM0JSTEVkQlEzaENiVm9zUlVGQlZTOUpMRXRCUVVzc1VVRkJVMmRRTEVkQlEzaENNVGhDTEV0QlFVc3dkRUlzUzBGQlN5eFJRVUZUZDBjc1IwRkRia0pzTUVJc1MwRkJTekIwUWl4TFFVRkxMRmxCUVdGcFVDeEhRVU4yUW14SExFVkJRVlZvUlN4UFFVOWtiMHNzVTBGUlNTeEhRVkJCTXpOQ0xFVkJRVTBzWlVGRFRteEdMRXRCUVV0MU5rSXNWMEZCWVN4UFFVTnNRaTlMTEVWQlFVOXhUU3h6UWtGQmQwSXNZMEZCWjBJM04wSXNTMEZCUzNreVFpeFZRVUZWT1RoQ0xFdEJRemxFY1Vjc1MwRkJTekI2UWl4aFFVRmhMRkZCUTJ4Q01YcENMRXRCUVV0M09FSXNVVUZIUkN4VFFVRlhlRGhDTEV0QlFVdDFOa0lzV1VGRGFFSjJOa0lzUzBGQlMzRjFRaXhMUVVGTGRVMHNVMEZEVmpVMlFpeExRVUZMZVRKQ0xGVkJRVlU0Uml4TlFVRlBMRU5CUTNSQ2NqTkNMRVZCUVUwc01rSkJRMDRzU1VGQlNYcEpMRVZCUVVrc1JVRkRVaXhOUVVGTmVXUXNSVUZCU1d4aExFdEJRVXR2TjBJc1UwRkJVMmhvUXl4UFFVTjRRaXhMUVVGUGNVTXNSVUZCU1hsa0xFVkJRVWQ2WkN4SlFVTldkVVFzUzBGQlMyczRRaXhOUVVGTmJEaENMRXRCUVV0dk4wSXNVMEZCVXpNclFpeExRVk55UTNVdlFpeFRRVUZUTTBnc1IwRkRUQ3hIUVVGSkxGbEJRV055TUVJc1MwRkJTM1UyUWl4WlFVTnVRaXhUUVVGWGRqWkNMRXRCUVV0MU5rSXNXVUZEYUVJc1dVRkJZM1kyUWl4TFFVRkxkVFpDTEZkQlMyNUNMRTlCU2tGeU1VSXNSVUZCVFN4MVEwRkJkME50ZGtJc1JVRkJUMncyUWl4TFFVRk5helpDTEVWQlFVOHhaQ3hOUVVOc1JUTlhMRXRCUVVzd2VrSXNZVUZCWVN4VFFVRlZWeXhIUVVVMVFuSXdRaXhMUVVGTE1IcENMR0ZCUVdFc1lVRkRWbGNzUlVGQlQydzJRaXhOUVVOWUxFbEJRVXNzVDBGRFJEWkdMRXRCUVVzNE9FSXNXVUZCV1Rkb1F5eExRVUZMVGl4TlFVRk5NRFZDTEVWQlFVOHhaQ3hQUVVOdVF5eE5RVU5LTEVsQlFVc3NUMEZEUkROWExFdEJRVXNyT0VJc2JVSkJRMHd2T0VJc1MwRkJTMmM1UWl4WFFVRlhMRkZCUTJoQ2FEbENMRXRCUVVzd2VrSXNZVUZCWVN4UlFVTnNRakY2UWl4TFFVRkxNSHBDTEdGQlFXRXNVVUZEYkVJc1RVRkRTaXhKUVVGTExGRkJRMFFzVFVGQlRVWXNSVUZCVFN4SlFVRkplRFJDTEUxQlFVMHNaMEpCUlhSQ2R6UkNMRVZCUVVsNE1rSXNTMEZCVDNFelFpeEZRVUZQTVdRc1MwRkRiRUl6Vnl4TFFVRkxhVGhDTEZGQlFWRjZTU3hIUVVOaUxFMUJRMG9zU1VGQlN5eFZRVU5FZUhwQ0xFdEJRVXN3ZWtJc1lVRkJZU3hQUVVGUlZ5eEZRVUZQTVdRc1RVRkRha016Vnl4TFFVRkxNSHBDTEdGQlFXRXNWVUZCVjFjc1JVRkJUekZrTEZkQlN6VkRlbElzUlVGQlRTdzRRMEZCSzBOc1JpeExRVUZMZFRaQ0xGbEJVMnhGZFVNc1dVRkJXVzV0UWl4SFFVTlNNMWNzUzBGQlN6QjZRaXhoUVVGaExGbEJRV0V2WXl4SFFVTXZRak5YTEV0QlFVdHhTaXhIUVVGTGMwNHNSVUZCUzIxblFpeEpRVU5tT1RKQ0xFdEJRVXQ1TWtJc1ZVRkJWWEpITEUxQlFVMHdSeXhKUVVGTmJtZENMRVZCUVV0dFowSXNTVUZEYUVNNU1rSXNTMEZCUzI4M1FpeFRRVUZYY0RkQ0xFdEJRVXRwT1VJc1pVRkJaWFJ0UWl4RlFVRkxlV3RDTEZWQlEzcERjRGRDTEV0QlFVdHhOMElzWVVGQlpURnJRaXhGUVVGTE1HdENMR0ZCUTNwQ2NqZENMRXRCUVV0ek4wSXNXVUZCWXpOclFpeEZRVUZMTW10Q0xGbEJRM2hDZERkQ0xFdEJRVXRyT1VJc1YwRkJZWFp0UWl4RlFVRkxkVzFDTEZkQlEzWkNiRGxDTEV0QlFVczJPRUlzVTBGRlJDeFhRVUZoTnpoQ0xFdEJRVXQxTmtJc1dVRkZkRUoyTmtJc1MwRkJTeXM0UWl4dFFrRlBWRUVzYlVKQlEwa3ZPRUlzUzBGQlN6UXlRaXhsUVVGbE5USkNMRXRCUVV0MU4wSXNhMEpCUTNwQ2RqZENMRXRCUVV0MU4wSXNhVUpCUVcxQ2RqZENMRXRCUVVzMGVrSXNZMEZCWVN4TFFVTjBRelY2UWl4TFFVRkxNRGRDTEZGQlFWRXNhMEpCUTJReE4wSXNTMEZCUzNFM1FpeGhRVUZsY2pkQ0xFdEJRVXR6TjBJc1lVRkRlRUowTjBJc1MwRkJTM0YxUWl4TFFVRkxlVVlzVjBGRFZqbDZRaXhMUVVGTGRUZENMR2xDUVVGcFFuaElMRkZCVVRsQ1owa3NWVUZEU1M4M1FpeExRVUZMZHpaQ0xGbEJRVmx3TjBJc1QwRkJUeXhGUVVGSFdTeExRVUZMZVRaQ0xHVkJTV2hEZWpaQ0xFdEJRVXQ1TmtJc1kwRkJaMElzUlVGRGFrSXNTVUZCVFhvMlFpeExRVUZMZHpaQ0xGbEJRVmx3WjBNc1QwRkRka0kwUml4TFFVRkxNSHBDTEdGQlFXRXNVMEZIYkVJeGVrSXNTMEZCUzNjNFFpeFJRVkZpUVN4UlFVTkpMRWRCUVVrc1YwRkJZWGc0UWl4TFFVRkxkVFpDTEZsQlEyeENkalpDTEV0QlFVdDVNa0lzVlVGQlZUazJRaXhYUVVOa2NVVXNTMEZCUzNNNFFpeFhRVU5PZERoQ0xFdEJRVXQzTmtJc1dVRkJXWEJuUXl4UFFVRlJMRU5CUTNwQ0xFMUJRVTByYVVNc1JVRkJWVzQ1UWl4TFFVRkxiemxDTEhGQ1FVTnlRbXcwUWl4RlFVRk5MR2REUVVGcFEyazBRaXhGUVVGUkwybERMRkZCUXk5RE5FWXNTMEZCUzNreVFpeFZRVUZWVUN4TFFVRkxhVWdzUjBGSGNFSnVPVUlzUzBGQlMzazJRaXhqUVVGblFqQkRMRVZCUVZFdmFVTXNUMEZETjBJMFJpeExRVUZMTUhwQ0xHRkJRV0VzVlVGVE1VSXdTaXh4UWtGSlNTeExRVWdyUW5BNVFpeExRVUZMYXpsQ0xGbEJRMUlzV1VGQmVFSnNPVUlzUzBGQlMza3lRaXhWUVVGVk9UaENMRTFCUTJaeFJ5eExRVUZMZHpaQ0xGbEJRVmx3WjBNc1QwRkJVeXhIUVVVeFFpeFBRVUZQTkVZc1MwRkJTM2MyUWl4WlFVVm9RaXhKUVVGSk5rTXNSVUZCWXl4RlFVTnNRaXhKUVVGTExFbEJRVWsxWjBNc1JVRkJTU3hGUVVGSFFTeEZRVUZKZFVRc1MwRkJTM2MyUWl4WlFVRlpjR2RETEU5QlFWRnhReXhKUVVGTExFTkJRemxETEUxQlFVMXJZU3hGUVVGUE0xY3NTMEZCUzNjMlFpeFpRVUZaTHpsQ0xFZEJRVWRyWVN4TFFVbHFReXhIUVVoSlFTeEpRVU5CTUcxQ0xFbEJRV1VzUlVGQlNYQkVMRVZCUVZWeFJDeFpRVUZaTTIxQ0xFbEJSWHBEYkdFc1JVRkJTU3hIUVVGTE5HZERMRVZCUVdOeU9VSXNTMEZCUzJzNVFpeFhRVVUxUWl4UFFVUkJhRFJDTEVWQlFVMHNhVU5CUVd0RGVra3NSVUZCUjNWRUxFdEJRVXQzTmtJc1dVRkJXWEJuUXl4UlFVTnlSRFJHTEV0QlFVdDNOa0lzV1VGQldUTTNRaXhOUVVGTkxFVkJRVWR3UXl4SFFVVnlRelJuUXl4SFFVRmxMRVZCUjI1Q0xFOUJSRUZ1TkVJc1JVRkJUU3dyUWtGQlowTnRORUlzUlVGQllYSTVRaXhMUVVGTGF6bENMRmxCUTJwRWJEbENMRXRCUVV0M05rSXNXVUZYYUVJelJpeE5RVUZOZDBnc1JVRkJTMjVwUXl4RlFVRlRiV3RDTEVkQlJXaENMRTlCUkVGeVpTeExRVUZMWnpsQ0xGZEJRVmNzVlVGQlYxZ3NSVUZCUzI1cFF5eEZRVUZUYld0Q0xFZEJRMnhEY21Vc1MwRkZXR3N5UWl4TFFVRkxiVWNzUlVGQlMyNXBReXhGUVVGVGJXdENMRWRCUldZc1QwRkVRWEpsTEV0QlFVdG5PVUlzVjBGQlZ5eFZRVUZYV0N4RlFVRkxibWxETEVWQlFWTnRhMElzUjBGRGJFTnlaU3hMUVZkWVp6bENMRmRCUVZjM2FVTXNSVUZCVFhkakxFVkJRVTE2WXl4RlFVRlRiV3RDTEVkQlV6VkNMRWRCVWtrc2JVSkJRWE5DTVVnc1NVRkRkRUl3U0N4RlFVRkxNVWdzUlVGRFRFRXNUMEZCVDNKWkxFZEJSVkFzYlVKQlFYTkNjRVVzU1VGRGRFSnRhMElzUlVGQlMyNXJRaXhGUVVOTVFTeEZRVUZWTEUxQlJWWXNXVUZCWXpoR0xFdEJRVXQxTmtJc1dVRkJZeXhYUVVGaGRqWkNMRXRCUVV0MU5rSXNWMEZEYmtRc1VVRkZTbkpuUXl4RlFVRlZRU3hIUVVGWExFbEJRMkp0T0VJc1ZVRkJWeXhKUVVGVmJqaENMRVZCUVZGdE9FSXNVMEZEY2tNc1RVRkJUV2hETEVWQlFWTXNRMEZEV0d3MlFpeExRVUZOUVN4RlFVTk9kMk1zUzBGQlRVRXNSVUZEVG5wakxGRkJRVk5CTEVkQlJXSTRSaXhMUVVGTE1IcENMR0ZCUVdFc1pVRkJaMEpYTEVkQlEyeERjakJDTEV0QlFVdDNOa0lzV1VGQldXNHJRaXhMUVVGTFp6UkNMRWRCUTJ4Q2FGY3NSMEZEUVhKbExFdEJRVXN3ZEVJc1MwRkJTeXhSUVVGVGNsQXNSMEZEZGtKeVpTeExRVUZMZHpoQ0xGRkJUMVF6U1N4UlFVTkpMRTFCUVUxQkxFVkJRVkVzUzBGRFZqZDZRaXhMUVVGTE1EZENMRkZCUVZFc1owSkJRMko0TWtJc1JVRkJUU3dyUTBGRFRteEdMRXRCUVV0NU1rSXNWVUZCVlRWRExGTkJSV0l3U2l4RlFVRnJRaXhMUVVOd1FuWTVRaXhMUVVGTE5Fa3NTVUZCU1N4VlFVRlhNakJDTEVkQlEzQkNkamxDTEV0QlFVczBTU3hKUVVGSkxHVkJRV2RDTWpCQ0xFZEJRM3BDTVVvc1MwRkZSVEpLTEVWQlFXbENMRXRCUlc1Q2VEbENMRXRCUVVzd2RFSXNTMEZCU3l4VlFVRlhObEFzUjBGRGNrSjJPVUlzUzBGQlN6QjBRaXhMUVVGTExHVkJRV2RDTmxBc1NVRnhRamxDTEUxQmJrSkpMRmxCUVdOMk9VSXNTMEZCUzNVMlFpeFpRVUZqTEZOQlFWZDJOa0lzUzBGQlMzVTJRaXhoUVVOcVJIWTJRaXhMUVVGTGRUWkNMRmRCUVdFc1ZVRkRaSFkyUWl4TFFVRkxkelpDTEZsQlFWbHdaME1zVDBGRGFrSTBSaXhMUVVGTE1IUkNMRXRCUVVzc1UwRkJVeXhMUVVOWU1YUkNMRXRCUVV0ek9FSXNWVUZEVEd0Q0xFbEJSMEV6U2l4UFFVbElOM3BDTEV0QlFVdHpPRUlzVlVGRFZtdENMRWxCUjBFelNpeExRVWRFTjNwQ0xFdEJUMWhwT0VJc1VVRkJVWHBKTEVkQlEwcDBkVUlzUlVGQlRTeHJRa0ZCYlVKemRVSXNSMEZEZWtKb1JTeEZRVUZQY1Uwc2RVSkJRWGRDTEVWQlF5OUNOemRDTEV0QlFVc3dla0lzWVVGQllTeFJRVUZUUml4SFFVTXpRbmg2UWl4TFFVRkxNRGRDTEZGQlFWRXNhMEpCUVcxQ2JFa3NSMEZQY0VOclNTeFJRVUZSTTBjc1JVRkJVVE5QTEVkQlExSXNXVUZCWTNCdFFpeExRVUZMZFRaQ0xGbEJRMjVDTEZOQlFWZDJOa0lzUzBGQlMzVTJRaXhaUVVOb1FpeFpRVUZqZGpaQ0xFdEJRVXQxTmtJc1lVRkRia0p5TVVJc1JVRkJUU3hwUTBGQmEwTTJka0lzUjBGRmVFTXZNRUlzUzBGQlN6UXlRaXhsUVVGbE5USkNMRXRCUVV0MU4wSXNhMEpCUlhwQ2RqZENMRXRCUVV0NU1rSXNWVUZCVlRkSkxHMUNRVUZ0UWl4VFFVVnNRelYwUWl4TFFVRkxlVEpDTEZWQlFWVTFReXhSUVVWbU4zcENMRXRCUVV0NU1rSXNWVUZCVlRkSkxIRkNRVU52UWl4dFFrRkJlRUkyVUN4eFFrRkRVRUVzYjBKQlFXOUNMRlZCUVZkNk9VSXNTMEZCUzNrM1FpeHpRa0ZCYzBJc1IwRkhPVVI2TjBJc1MwRkJTM1UyUWl4WFFVRmhMRk5CUld4Q2RqWkNMRXRCUVV0eFNpeEhRVUZMTEV0QlJWWnlTaXhMUVVGTE1IcENMR0ZCUVdFc1VVRkJVM0ZDTEVWQlFWRXpUeXhIUVVkdVEzQnRRaXhMUVVGTGR6WkNMRmxCUVdNc1IwRkRia0o0TmtJc1MwRkJTM2syUWl4alFVRm5RaXhIUVZVM1FuZERMR1ZCUVdVM1FpeEhRVU5ZTEUxQlFVMXpReXhGUVVGdFFpeEhRVU42UWl4SlFVRkphbWhETEVWQlFVa3NSVUZEVWl4TlFVRk5Na2tzUlVGQlNXY3lRaXhGUVVGVGFHaERMRTlCUTI1Q0xFdEJRVTl4UXl4RlFVRkpNa2tzUlVGQlJ6TkpMRXRCUTB4MVJDeExRVUZMTmpWQ0xGZEJRVmN4TmtJc1VVRkJVV2s0UWl4RlFVRlRNeXRDTEV0QlEyeERhV2hETEVWQlFXbENjbWhETEV0QlFVc3JLMElzUlVGQlV6TXJRaXhKUVVWMlF5eFBRVUZQYVdoRExFZEJSMll4YWtNc1JVRkJVWGN4UWl4UFFVRlRRU3hGUVVOcVFrRXNSVUZCVDNabUxGTkJRVmR2Y1VJc1JVRkJiVUp3Y1VJc1ZTeHJRME5xYlVKeVF5eEpRVUZKYTJZc1JVRkJiVUp1ZGtJc1RVRkJVVUVzUzBGQlMyMTJRaXhwUWtGQmIwSXNVMEZCVlVNc1IwRkRPVVFzVDBGQlVVRXNSMEZCVDBFc1JVRkJTVU1zVjBGQlkwUXNSVUZCVFN4RFFVRkZMRkZCUVZkQkxFbEJSWGhFTjNwQ0xFOUJRVTlETEdWQlFXVjRRaXhGUVVGVExHRkJRV01zUTBGQlJYTkNMRTlCUVU4c1NVRkRkRVIwUWl4RlFVRlJPQzlDTEdWQlFWa3NSVUZEY0VJc1RVRkJUVThzUlVGQmNVSXNSVUZCVVN4TlFVTTNRbXBLTEVWQlFYTkNMRVZCUVZFc1RVRkRPVUkyU1N4RlFVRlpMRVZCUVZFc1RVRkZjRUl2TUVJc1IwRkJVU3hGUVVSRmFYRkNMRVZCUVdkQ0xFVkJRVkVzVDBGRFpHNXZRaXhUUVVGVExEaENRVU51UXl4TlFVRk5NakpDTEZWQlFYVkNNMmxETEUxQlEzcENORTBzV1VGQldXMTBRaXhGUVVGUk0wOHNSVUZCWVhkWUxFZEJRemRDY0hGQ0xFMUJRVTExYUVJc1IwRkRUaTh3UWl4TFFVRkxiMjFDTEZsQlFXTkJMRVZCUTI1Q2NHMUNMRXRCUVVzME9VSXNVVUZCVlVFc1JVRkRaalU1UWl4TFFVRkxOMFlzUzBGQlR5eHJRa0ZIY0VJc1RVRkJUVEl2UWl4VlFVRnJRakZKTEVWQlFXOUNReXhSUVU5NFEzcHdRaXhaUVVGWmVXMUNMRWRCUTFJM1lTeFJRVU5CZUZRc1MwRkJTM0pGTEZWQlFWY3NSMEZEYUVJc1JVRkJTWE1yUWl4RlFVRlZlRWtzZFVKQlFYVkNlbmhDTEV0QlFVMXhkVUlzUjBGRE0wTnlkVUlzUzBGQlMzRjFRaXhMUVVGUFFTeEZRVU5hY25WQ0xFdEJRVXR2ZDBJc1RVRkJVUzlDTEVWQlFVc3JRaXhOUVVOc1FuQjNRaXhMUVVGTGRUWkNMRmRCUVdFc1IwRkRiRUoyTmtJc1MwRkJTM04zUWl4UFFVRlRha01zUlVGQlMybERMRTlCVjNaQ01rd3NVVUZCVVd4SUxFVkJRVkV6VHl4RlFVRmhkMWdzUjBGRmVrSXNUMEZFUVhCeFFpeE5RVUZOYTJkQ0xHRkJRV0VzVVVGQlV5eEpRVUZKYVVzc1JVRkJaVFZKTEVWQlFWRXpUeXhGUVVGaGQxZ3NTVUZETjBRMU9VSXNTMEZQV0hsNVFpeFBRVXRKTEUxQlNra3NWMEZCWVhwNVFpeExRVUZMZFRaQ0xGbEJRV01zUzBGQlQzWTJRaXhMUVVGTGRUWkNMR0ZCUXpWRGRqWkNMRXRCUVV0MU5rSXNWMEZCWVN4VlFVTnNRblkyUWl4TFFVRkxOamxDTEZWQlJVWTNPVUlzUzBGUFdEWjZRaXhSUVV0SkxFMUJTa2tzV1VGQll6ZDZRaXhMUVVGTGRUWkNMRmxCUVdNc1UwRkJWM1kyUWl4TFFVRkxkVFpDTEdGQlEycEVkalpDTEV0QlFVczRPVUlzVlVGRFREazVRaXhMUVVGTE1EZENMRmRCUlVZeE4wSXNTMEZSV0dzeVFpeExRVUZMYVVnc1IwRkRSeXhUUVVGWGJqbENMRXRCUVV0MU5rSXNWMEZEYUVKMk5rSXNTMEZCU3pZd1FpeE5RVUZOYzBrc1IwRkpXR28wUWl4RlFVRk5MRFpEUVZGa01qTkNMRk5CUTBrM09FSXNTMEZCUzNVMlFpeFhRVUZoTEU5QlEyeENkalpDTEV0QlFVdHlSU3hWUVVGWExFVkJRMmhDTmxnc1RVRkJUV3RuUWl4aFFVRmhMRkZCVVhaQ2NVc3NUMEZCVDNCdVFpeEhRVU5JTEUxQlFVMHdaQ3hIUVVGVExFVkJRVWxuUnl4RlFVRnRRakpFTEdOQlFXTnlia0lzUlVGQlRUTlhMRXRCUVV0emQwSXNUMEZCVHpKT0xGbEJRM1JGYWl0Q0xFdEJRVXRuT0VJc1UwRkJVek5JTEVkQlQyeENNa2dzVTBGQlV6TklMRWRCUTB3M1owSXNUVUZCVFd0blFpeGhRVUZoTEZOQlFWVlhMRWRCVDJwRGNVZ3NVVUZCVVhkRExFZEJRMHBzSzBJc1MwRkJTM1UyUWl4WFFVRmhMRk5CUTJ4Q0wyMUNMRTFCUVUxclowSXNZVUZCWVN4UlFVRlRkMHNzU1VGSGNFTnNhME1zUlVGQlVUZ3ZRaXhWUVVGWlFTeEhMRFJDUXpWSWNFSjJLMElzVDBGQlQwTXNaVUZCWlhoQ0xFVkJRVk1zWVVGQll5eERRVUZGYzBJc1QwRkJUeXhKUVVOMFJIUkNMRVZCUVZFMkwwSXNaMEpCUVdFc1JVRkRja0lzVFVGQlRYTkZMRVZCUVdVc1JVRkJVU3hOUVVOMlFrTXNSVUZCYVVJc1JVRkJVU3hOUVVNdlFuQnJReXhGUVVGUk5pOUNMRmRCUVdFc1EwRkRha0ozUlN4VlFVRlhSQ3hGUVVGbFJTeEhRVU14UWtNc1VVRkJVMG9zUlVGQllVc3NWU3hyUTBOT01VSXNTVUZCU1hKUUxFVkJRVzFDYm5aQ0xFMUJRVkZCTEV0QlFVdHRka0lzYVVKQlFXOUNMRk5CUVZWRExFZEJRemxFTEU5QlFWRkJMRWRCUVU5QkxFVkJRVWxETEZkQlFXTkVMRVZCUVUwc1EwRkJSU3hSUVVGWFFTeEpRVVY0UkRkNlFpeFBRVUZQUXl4bFFVRmxlRUlzUlVGQlV5eGhRVUZqTEVOQlFVVnpRaXhQUVVGUExFbEJRM1JFZEVJc1JVRkJVWGxyUXl4UlFVRlZlbXRETEVWQlFWRjNhME1zWVVGQlZTeEZRVU53UXl4TlFVRk5la1VzUlVGQmFVSXNSVUZCVVN4TlFVTjZRa3NzUlVGQlZXcE1MRVZCUVdkQ0xFVkJRVkVzVDBGRGJFTjFVQ3hGUVVGaExFVkJRVkVzUzBGRGNrSjJSU3hGUVVGbExFVkJRVkVzVFVGRGRrSkZMRVZCUVhGQ0xFVkJRVkVzVFVGRE4wSnpSU3hGUVVGelFpeEZRVUZSTEUxQlF6bENkazRzUlVGQmMwSXNSVUZCVVN4TlFVTTVRalpKTEVWQlFWa3NSVUZCVVN4TlFVTndRakpGTEVWQlFXdENMRVZCUVZFc1RVRkRNVUl4TlVJc1IwRkJVU3hGUVVGSmF6RkNMRVZCUVZGd2VrSXNVMEZCVXl3MFFrRkRia01zVTBGQlV6WXpRaXhMUVVOVUxFMUJRVTFETEVWQlNVc3NUVUZJU3l4SlFVRkpTQ3hGUVVGdlFra3NTVUZCU1N4RFFVTndRME1zVTBGQlV5eEpRVVZOYUdRc1lVRkZka0lzVFVGQlRYZGpMRlZCUVdkQ2VrVXNSVUZCWlVRc1ZVRlBha05zZVVJc1dVRkJXWGx0UWl4SFFVZFNMRWRCUmtFM1lTeE5RVUZOTm1Fc1IwRkRUbkoxUWl4TFFVRkxkU3RDTEZOQlFWVXNSVUZEVXl4dlFrRkJZbXhzUWl4VFFVRXdRaXhEUVVOcVF5eE5RVUZOTkd4Q0xFVkJRVkVzVjBGQllUVnNRaXhUUVVGVGNFb3NVMEZEY0VNc1NVRkJTVGhUTEVWQlFVOHhTaXhUUVVGVE1Fb3NTMEZGWmtFc1NVRkRSRUVzUlVGQlQydGpMRVZCUVZFc1RVRkJVU3hOUVVVelFtb3ZRaXhMUVVGTGF5OUNMRWRCUTI5Q0xHOUNRVUZpTjJ4Q0xGVkJRMHBuVml4RlFVRkxka3dzVjBGQllYcEtMRk5CUVZONVNpeFZRVU16UWtNc1NVRkJVM05NTEVWQlFVdDBUQ3hMUVVOMFFpOXBRaXhMUVVGTGJTOUNMRWRCUVVzNVVTeEZRVUZMYVUwc1UwRkJWekpGTEVWQlN6bENMRTFCUVUxSExFVkJRV012VVN4SFFVRlJRU3hGUVVGTEsxRXNXVUZEYWtOd0wwSXNTMEZCUzNFdlFpeGxRVUZwUWxBc1NVRkJXVTBzUlVGTGRFTXNWMEZEU1N4TlFVRlBMRlZCVVZoMlFpeFRRVU5KTnpsQ0xFdEJRVXR6TDBJc1QwRlJWQzlETEUxQlFVMW5SQ3hIUVVOR2RpOUNMRXRCUVV0MU5rSXNWMEZCWVN4VlFVTnNRaXhOUVVGTlowTXNSVUZCVVN4TFFVTldjak5DTEVWQlFVMHNWVUZEVG14R0xFdEJRVXQxTmtJc1YwRkJZU3hUUVVOc1FtZEdMRXRCUlVvc1IwRkJTWFl2UWl4TFFVRkxkU3RDTEZWQlFWbDJLMElzUzBGQlMzSkZMRk5CUVZVc1EwRkRhRU1zU1VGQlNUWnFReXhGUVVGUkxFVkJRMUo0TDBJc1MwRkJTM1VyUWl4VlFVTk1jalZDTEVWQlFVMHNLME5CUTA1ek5rSXNTVUZEUVhndlFpeExRVUZMTUhSQ0xFdEJRVXNzWjBKQlFXZENMRmRCUTNSQ2VHOUNMRVZCUVUwc1owTkJRMHB6TmtJc1IwRkJVMnBFTEZGQlIyUjJPRUlzUzBGQlMzSkZMRmRCUTA1MVNpeEZRVUZOTEN0RFFVTk9jelpDTEVsQlEwRjRMMElzUzBGQlN6QjBRaXhMUVVGTExGTkJRVk1zVjBGRFpuaHZRaXhGUVVGTkxHZERRVU5LY3paQ0xFZEJRVk5xUkN4aFFVdHVRa0VzU1VGUlVpdERMRTlCUTBsd05rSXNSVUZCVFN4WFFVTk9iRVlzUzBGQlMzVXJRaXhUUVVGVkxFVkJRMloySzBJc1MwRkJTM2t2UWl4VFFVTk1laTlDTEV0QlFVc3dla0lzWVVGQllTeFJRVTkwUW5GTExFOUJRVTl3YmtJc1IwRkRTSHBTTEVWQlFVMHNjMEpCUVhWQ2VWSXNTVUZsTjBJc1JVRkJTVEJxUWl4RlFVRnRRbkZHTEdWQlFXVXZiMElzUlVGQlRUTlhMRXRCUVV0emQwSXNUMEZCVHpKT0xGbEJRVmx5YUVNc1UwRmtia1I1TTBJc1NVRk5ZaXhIUVVwSkxGbEJRV055TUVJc1MwRkJTM1UyUWl4WlFVRTRRaXhUUVVGb1FteEhMRVZCUVU5c05rSXNUVUZEZUVNMlJpeExRVUZMTmpoQ0xGTkJSMHdzVlVGQldYaEpMRVZCUVU5c05rSXNTMEZGYmtJc1QwRkVRVFpHTEV0QlFVc3dOMElzVVVGQlVTeERRVUZGZEZZc1dVRkJZU3h2UTBGRGNrSXNSVUZIV0hCdFFpeExRVUZMWnpoQ0xGTkJRVk16U0N4TlFVdGtMRmRCUVdGeU1FSXNTMEZCUzNVMlFpeGhRVVZzUW5ZMlFpeExRVUZMZFN0Q0xGTkJRVlVzUlVGRFpuWXJRaXhMUVVGTE1IcENMR0ZCUVdFc1owSkJRMlFzVTBGQlZ6RjZRaXhMUVVGTGRUWkNMRmRCUTJoQ2RqWkNMRXRCUVV0ekwwSXNUMEZIVEhBMlFpeEZRVUZOTEhWRFFVRjNRMnhHTEV0QlFVdDFOa0lzWVVGVEwwUjFSQ3hWUVVOSkxFMUJRVTFxU3l4RlFVRlJMRXRCUTFZemRVSXNSVUZCVFN4M1FrRkRUbXhHTEV0QlFVczJNRUlzVFVGQlRTeERRVUZETEVOQlFVVXhOa0lzUzBGQlRTeFpRVVZ3UWl4VFFVRlhOa1lzUzBGQlMzVTJRaXhaUVVOb1FuSXhRaXhGUVVGTkxEUkNRVU5PTW5WQ0xFMUJTMEV6ZFVJc1JVRkJUU3gzUTBGRFRteEdMRXRCUVVzd2RFSXNTMEZCU3l4UFFVRlJiVWNzU1VGVk1VSm5RaXhOUVVGTmMwa3NSMEZEUm00NVFpeExRVUZMY2tVc1ZVRkJWeXhIUVVOb1FpeEZRVUZKTUN0Q0xFVkJRVzFDYzBZc1pVRkJaWGhETEVkQlFWTjRiVUlzU1VGRE0wTXpWeXhMUVVGTE5DOUNMRkZCUVZGcWNFSXNSMEZCVFN4TFFVTm1NMWNzUzBGQlMzSkZMRlZCUVZjc1JVRkRhRUp4UlN4TFFVRkxNSHBDTEdGQlFXRXNaVUZUT1VJelJDeE5RVU5KTEVsQlFVbExMRVZCUVZGd2QwSXNTMEZCUzI5M1FpeFBRVUZUTEVkQlF6RkNMRTFCUVUxNVVDeEZRVUZUTnk5Q0xFdEJRVXR4ZFVJc1MwRkJTMmxOTEU5QlFWTXNVVUZCVlN4UFFVTTFReXhKUVVGSmRsZ3NSVUZCVHl4SlFVVlFMRWxCUVZVdmFVSXNTMEZCUzNGMVFpeExRVUZMZVZJc2IwSkJRM0JDTVZBc1JVRkJUWEIzUWl4TFFVRkxjWFZDTEV0QlFVdDNUU3hwUWtGQmEwSXNSVUZCU1RaRUxFVkJRVmR5Uml4VlFVVm9SSEkxUWl4TFFVRkxjUzlDTEdkQ1FVRnRRbXBRTEVWQlFVMHdSeXhOUVVNdlFqRkhMRVZCUVUweVVDeEpRVUZOTEVkQlIxb3ZMMElzUzBGQlMzRjFRaXhMUVVGTGRFd3NUMEZEVWl4VlFVRlpPR01zUjBGQmNVTXNUVUZCTTBJNU5VSXNUMEZCVHk5R0xFdEJRVXR4ZFVJc1MwRkJTM1JNTEU5QlEzQkRMRk5CUVZjNFl5eEhRVUZ4UXl4TFFVRXpRamsxUWl4UFFVRlBMMFlzUzBGQlMzRjFRaXhMUVVGTGRFd3NVMEZETTBOQkxFVkJRVThzU1VGQlRTOXBRaXhMUVVGTGNYVkNMRXRCUVV0MFRDeE5RVVV6UWl4TlFVRk5hV1FzUjBGQlpTeEZRVUZKTjBZc1JVRkJZWFpHTEZGQlFWRjRSU3hIUVVVNVF5eFBRVUZSZVZBc1JVRkRTaXhSUVVZNFF5eEpRVUZ5UXpjdlFpeExRVUZMY1hWQ0xFdEJRVXQyVEN4VFFVRlRNMnBDTEZGQlFWRXNTMEZITlVJc1NVRkJUV0VzUzBGQlMzRjFRaXhMUVVGTGRrd3NVMEZCVnl4SlFVRk5PV2xDTEV0QlFVdHhkVUlzUzBGQlMzWk1MRlZCUTI1RVF5eEZRVU5CTDJsQ0xFdEJRVXR4ZFVJc1MwRkJTelJDTEUxQlExUXJVQ3hGUVVGaE5XeERMRTlCUVZNc1NVRkJUVFJzUXl4RlFVRmxMRWxCVVhCRVF5eFJRVUZSTlZJc1JVRkJUeXhKUVVWWUxFOUJSRUU1ZVVJc1QwRkJUMmN4UWl4UFFVRlBiRU1zUlVGQlRTeERRVUZGTmxFc1IwRkJTV3d2UWl4TFFVRkxheTlDTEVkQlFVbERMRWRCUVVsdUwwSXNTMEZCUzIwdlFpeEpRVUZOYmk5Q0xFdEJRVXR4ZFVJc1RVRkRhRVFzU1VGQlNXOVJMRVZCUVZGNkswSXNTMEZCU3l0MlFpeE5RVUZQTVVJc1IwRlRia04xVWl4UlFVRlJhbkJDTEVWQlFVMHdTQ3hIUVVOV0xFMUJRVTAyYUVJc1JVRkJUV3huUXl4TFFVRkxhV2RETEZGQlFWRXNRMEZEY2tJek1rSXNUMEZCVVN4UFFVTlNjVTRzUzBGQlRVRXNTVUZGVm5Wd1FpeEZRVUZKZGpOQ0xFZEJRVWNzVlVGQlZ6QldMRWRCUTJ4Q05taENMRVZCUVVsMk0wSXNSMEZCUnl4VFFVRlRMRU5CUVVOM00wSXNSVUZCVjNaRExFdEJRM2hDTlRsQ0xFdEJRVXRwT0VJc1VVRkJVU3hwUWtGQmEwSnJSU3hGUVVGWGRrTXNUVUZSYkVRMlFpeFRRVU5KZGpaQ0xFVkJRVTBzV1VGRFRpeE5RVUZOWnpkQ0xFVkJRVTFzWjBNc1MwRkJTMmxuUXl4VlFVTnFRa01zUlVGQlNYWXpRaXhIUVVGSExFOUJRVkV6U1N4TFFVRkxLemxDTEU5QlFVODFNVUlzUzBGQlMyNUpMRTlCUTJoRGEyZERMRVZCUVVsMk0wSXNSMEZCUnl4VFFVRlRMRU5CUVVOM00wSXNSVUZCVjNaRExFdEJRM2hDTlRsQ0xFdEJRVXRwT0VJc1VVRkJVU3hwUWtGQmEwSnJSU3hGUVVGWGRrTXNUVUZGT1VNMU9VSXNTMEZCUzI5blF5eFJRVUZWUml4SFFVZDJRbXh0UXl4RlFVRlJkMnRETEZGQlFWVkJMRVZCUTJ4Q0xFMUJRVTFETEZWQlFXZENjazRzUlVGQmIwSkRMRkZCVDNSRGVuQkNMRmxCUVZsdGIwSXNSVUZCU3pGQ0xFZEJRMkkzWVN4VFFVTkJMRVZCUVVsNWJVSXNSVUZCVlhoSkxIVkNRVUYxUW5wNFFpeExRVUZOY1hWQ0xFZEJRek5EY25WQ0xFdEJRVXR4ZFVJc1MwRkJUMEVzUlVGRFduSjFRaXhMUVVGTGMwb3NUMEZCVXl0clFpeEZRVUZMTDJ0Q0xGRkJRVlVzVFVGRE4wSjBTaXhMUVVGTEszWkNMRWxCUVUxQkxFVkJRMWd2ZGtJc1MwRkJTM0ZuUXl4UFFVRlJMRWxCUVZWb1V5eEZRVUZMWjFNc1RVRkROVUp5WjBNc1MwRkJTekpYTEZWQlFVOXlXU3hKUVVGakszWkNMRVZCUVVzeFdDeExRVUZQTUZnc1JVRkJTekZZTEV0QlFVOHNTMEZEYkVRelZ5eExRVUZMZVZRc1UwRlBWRUVzVTBGRFNTeE5RVUZOTkdFc1IwRkJUeXhGUVVGSk5Fd3NSVUZCVlhGSExFMUJRVTEwWjBNc1MwRkJTM0YxUWl4TFFVRk5MRkZCUVZNc1RVRkJUeXhOUVVGUExHRkJRV01zVDBGQlVTeExRVUZOTEZWQlFWY3NjVUpCUVhOQ0xHRkJRMmhKUVN4RlFVRkxNbEVzVlVGQldXZ3ZRaXhMUVVGTGNYVkNMRXRCUVVzMlVTeEhRVU16UWpkUkxFVkJRVXRyVXl4VlFVRlpkbWRETEV0QlFVdHhkVUlzUzBGQlN6aFJMRWRCUXpOQ0xFMUJRVTF4UWl4RlFVRlBlR2RETEV0QlFVdDNaME1zU1VGQlRTeEpRVUZKTjBJc1JVRkJiMEpKTEVsQlFVa3hVU3hIUVVOd1JDeEpRVU5KYm5CQ0xFVkJRVTBzYTBKQlFXMUNiRVlzUzBGQlMzTktMRTlCUVZGMFNpeExRVUZMSzNaQ0xFdEJRek5EZVZFc1JVRkJTUzlPTEV0QlFVdDZlVUlzUzBGQlMzTktMRTlCUVZGMFNpeExRVUZMSzNaQ0xFbEJRVXN2ZGtJc1MwRkJTM0ZuUXl4UFFVTnlReXhKUVVOSkxFZEJRVWx5WjBNc1MwRkJTM0YxUWl4TFFVRkxiMU1zWVVGQll5eERRVU40UWtRc1JVRkJTVVVzZFVKQlFYbENSaXhGUVVGSlJTeDFRa0ZCYzBJc1IwRkRka1FzU1VGQlN5eEpRVUZKYW10RExFdEJRVXQxUkN4TFFVRkxjWFZDTEV0QlFVdHZVeXhoUVVOb1FucG5ReXhMUVVGTGNYVkNMRXRCUVV0dlV5eGhRVUZoTldRc1pVRkJaWEJ0UWl4SlFVTjBReXRxUXl4RlFVRkpSeXhwUWtGQmFVSnNhME1zUlVGQlIzVkVMRXRCUVV0eGRVSXNTMEZCUzI5VExHRkJRV0ZvYTBNc1MwRkxMMFFzVFVGQlQyZEZMRWxCUTFBc1IwRkJTU3hUUVVGWFZDeExRVUZMYzBvc1QwRkRhRUlzU1VGRFNXc3pRaXhGUVVGSlJ5eHBRa0ZCYVVJc1pVRkJaMElzTkVKQlJYcERMRTFCUVU5c1owTXNTVUZGV0N4SlFVTkpLeTlDTEVWQlFVbEhMR2xDUVVGcFFpeFRRVUZWTEU5QlJXNURMRTFCUVU5c1owTXNTVUZGU0N4dlFrRkJjVUlyTDBJc1NVRkRja0pCTEVWQlFVazNSaXhuUWtGQmEwSXpOa0lzUzBGQlMzRjFRaXhMUVVGTGMwMHNhVUpCUldoRE16WkNMRXRCUVV0eGRVSXNTMEZCUzNWVExHbENRVU5XU2l4RlFVRkpOVlFzVVVGQlZUVnpRaXhMUVVGTGNYVkNMRXRCUVV0MVV5eG5Ra0ZGTlVKS0xFVkJRVWxMTEcxQ1FVRnhRaXhMUVVOcVFpeEpRVUZOVEN4RlFVRkpha2NzWVVGRlZpeE5RVUZSYVVjc1JVRkJTVzV0UWl4UlFVRlZMRTlCUVZOdGJVSXNSVUZCU1c1dFFpeFBRVU51UTNKaExFdEJRVXM0WjBNc1UwRkxURGxuUXl4TFFVRkxOSHBDTEdOQlFXRXNTMEZEWkRWNlFpeExRVUZMYVRoQ0xGRkJRVGhDTEdsQ1FVRm1kVVVzUlVGQlNXNXRRaXhQUVVGelFtMXRRaXhGUVVGSmJtMUNMRTlCUVZNc1MwRkROVVFzUzBGSFdHNVdMRVZCUVUwc1kwRkJaV3hHTEV0QlFVc3lWeXhOUVVNeFFqWndRaXhGUVVGSmRFc3NTMEZCUzJ3eVFpeExRVUZMTWxjc1RVRkZiRUlzVFVGQlQyeFhMRWRCVDBnc1dVRklRVlFzUzBGQlN6UjZRaXhqUVVGaExFdEJRMlExZWtJc1MwRkJTMms0UWl4UlFVRlJlRGRDTEV0QlEyUXNSMEZIYVVJc2IwSkJRV0oxUkN4WFFVTlFhRVVzUzBGQlMyUXNUVUZCVVhVdlFpeEZRVUZSYzBNc1owSkJRM0pDZEVNc1JVRkJVWFZETEZOQlFWTm9hRU1zUzBGQlMyUXNUMEZCVTJNc1RVRlJka05wT0VJc1VVRkJVWHBKTEVkQlEwcDRla0lzUzBGQlN6QjZRaXhoUVVGaExGRkJRVk5HTEVWQlFVdDRla0lzUzBGQlMzZG5ReXhMUVVOeVEzaG5ReXhMUVVGTGVYcENMRk5CUVZFc1IwRlBha0pCTEZGQlFWRjNUaXhIUVVOS0xGRkJRVWtzU1VGQmRVSnFhRU1zUzBGQlMzZG5ReXhMUVVGUExFOUJRVk40WjBNc1MwRkJTM2RuUXl4SlFVRnlSQ3hEUVVsQkxFZEJSRUY0WjBNc1MwRkJTM2RuUXl4SlFVRkpTeXh0UWtGQmNVSm9ReXhGUVVNeFFtOURMRVZCUTBFc1NVRkRTV3BvUXl4TFFVRkxkMmRETEVsQlFVbFZMRkZCUldJc1RVRkJUM3BuUXl4SlFVVmhMRzlDUVVGaWRVUXNhVUpCUTBGNU5rSXNSVUZCVVhWRExGTkJRVk5vYUVNc1MwRkJTMlFzVDBGRmFrTmpMRXRCUVV0M1owTXNTVUZCVFN4TlFVOW1UU3hUUVVOSkxFMUJRVTF1Y1VJc1JVRkJUek5YTEV0QlFVdDNaME1zU1VGQlNWY3NZVUZEVkN4UFFVRlVlSEZDTEVsQlEwRXpWeXhMUVVGTE1IcENMR0ZCUVdFc1QwRkJVUzlqTEVkQlF6RkNNMWNzUzBGQlN6QjZRaXhoUVVGaExGZEJRMnhDTVhwQ0xFdEJRVXQ1ZWtJc1YwRlJZbmxPTEZGQlEwbHNhRU1zUzBGQlMzbDZRaXhYUVZkaUxFZEJVa0Y2TlVJc1JVRkJVWGxyUXl4UlFVRlZRU3hGUVVOc1FrRXNSVUZCVVhORExHTkJRV2RDTEVWQlEzaENkRU1zUlVGQlVYVkRMRk5CUVZjc1IwRk5TeXh2UWtGQlltZzVRaXhUUVVWUUxFZEJRVEpDTEcxQ1FVRm9RbTg1UWl4WlFVVlFRU3haUVVGWkxGZEJRVmxETEZGQlJYWkNMRWRCUVdkRExHMUNRVUZ5UWpkR0xHbENRVUZwUXl4RFFVTTNReXhOUVVGTk9FWXNSVUZCYlVJc1pVRkJaMEl4UXl4RlFVRm5RbXBHTEdWQlFXbENMRmRCUVdFc1UwRkRka1kyUWl4cFFrRkJhVUk0Uml4RlFVRnJRa1FzUjBGQlpTeEhRVWN4UkN4VFFVRlRRU3hKUVVOTUxFbEJRVXNzU1VGQlNUVnJReXhMUVVGTFoybERMRVZCUVZGMVF5eFRRVU5rZGtNc1JVRkJVWFZETEZOQlFWTnVaU3hsUVVGbGNHMUNMRWxCUTJoRFoybERMRVZCUVZGMVF5eFRRVUZUZG10RExFZEJRVWQ1YTBNc1ZTdzBRa04wWVdoRE0yeERMRTlCUVU5RExHVkJRV1Y0UWl4RlFVRlRMR0ZCUVdNc1EwRkJSWE5DTEU5QlFVOHNTVUZEZEVSMFFpeEZRVUZSZFc1RExHdENRVUZ2UW5adVF5eEZRVUZSZDI1RExITkNRVUYzUW5odVF5eEZRVUZSZVc1RExGVkJRVmw2YmtNc1JVRkJVVzE2UWl4alFVRlhMRVZCUTI1SExFMUJRVTE1VWl4RlFVRnJRaXhGUVVGUkxFMUJRMmhETld0RExFVkJRVkZ0ZWtJc1UwRkRNRU1zYlVKQlFWcDFWU3hUUVVGeFJDeHRRa0ZCY0VKQkxGRkJRVkZETEZGQlJXaEZReXhIUVVGTlJpeFJRVUZSUXl4VlFVRlZSU3hMUVVGTFJDeEhRVWMzUWl4RFFVRkRRU3hGUVVGSmFFOHNTVUZCYVVKQkxFVkJRV0ZuVHl4RlFVRkpMRWRCUjNSRU5XNURMRVZCUVZGNWJrTXNWVUZCV1RkRExFVkJRV2RDYWtZc1pVRkJaVGhJTEZkQlFXRTNReXhGUVVGblFtcEdMR1ZCUVdWdFNTeGhRVU12UmpsdVF5eEZRVUZSZDI1RExIVkNRVUYzUWl4RlFVTm9RM2h1UXl4RlFVRlJkVzVETEd0Q1FVRnZRaXhsTEd0RFEyUTFRaXhKUVVGSmNGTXNSVUZCYlVKdWRrSXNUVUZCVVVFc1MwRkJTMjEyUWl4cFFrRkJiMElzVTBGQlZVTXNSMEZET1VRc1QwRkJVVUVzUjBGQlQwRXNSVUZCU1VNc1YwRkJZMFFzUlVGQlRTeERRVUZGTEZGQlFWZEJMRWxCUlhoRU4zcENMRTlCUVU5RExHVkJRV1Y0UWl4RlFVRlRMR0ZCUVdNc1EwRkJSWE5DTEU5QlFVOHNTVUZEZEVSMFFpeEZRVUZSYzJ0RExGRkJRVXNzUlVGRFlpeE5RVUZOZGtVc1JVRkJhVUlzUlVGQlVTeE5RVU42UWtrc1JVRkJaU3hGUVVGUkxFMUJRM1pDZFVVc1JVRkJZU3hGUVVGUkxFdEJRM0pDZWtVc1JVRkJXU3hGUVVGUkxFMUJRM0JDT0Vnc1JVRkJOa0lzUlVGQlVTeE5RVU55UXpOSUxFVkJRVlZxVEN4RlFVRm5RaXhGUVVGUkxFOUJRMnhEYTB3c1JVRkJjVUlzUlVGQlVTeE5RVU0zUW00eFFpeEhRVUZSTEVWQlFVbHJNVUlzUlVGQlVYQjZRaXhUUVVGVExEaENRVVUzUW1jM1FpeEZRVUZ4UXl4dlFrRkJaR3dyUWl4WFFVTkpMR2xDUVVGMFFrRXNWVUZCVlcwclFpeFRRVU50UWl4blFrRkJjRU51SzBJc1ZVRkJWVzByUWl4UlFVRlJkbTVETEdOQlEzUkNMRTFCUVUwMGFrTXNWVUZCVjNaRkxFVkJRV1ZFTEZWQlR6VkNiSGxDTEZsQlFWbDViVUlzUjBGRFVqZGhMRTFCUVUwMllTeEhRVU5PY25WQ0xFdEJRVXR4TDBJc1owSkJRV3RDYUZJc1JVRkJTeXRSTEZsQlQyaERMRmRCUTBrc1RVRkJUeXhaUVU5WWRrSXNVMEZEU1N4SlFVRkxOemxDTEV0QlFVdHJhVU1zVVVGRlRpeFBRVVZLTEUxQlFVMXVVeXhGUVVGTkwzWkNMRXRCUVVzcmRrSXNUVUZEV0c5VExFVkJRVmx1YVVNc1MwRkJTM0YxUWl4TFFVRkxPRlFzVlVGRmRFSTVWQ3hGUVVGUE1sUXNSVUZEVUN4SlFVTkJMRVZCUVVrdlNDeEZRVUZWY1Vjc1RVRkJUWFJuUXl4TFFVRkxjWFZDTEV0QlFVMHNVVUZCVXl4dlFrRkJjVUlzVFVGQlR5eE5RVUZQTEdGQlFXTXNUMEZCVVN4TFFVRk5MRlZCUVZjc2NVSkJRWE5DTEdWQlFXZENMR3RDUVVGdFFpeFRRVUZWTEdGQlFXTXNVMEZCVlN4MVFrRkRMMDF5ZFVJc1MwRkJTM0YxUWl4TFFVRkxiMU1zWlVGRFZuQlRMRVZCUVVzclZDeFJRVUZWY0dsRExFdEJRVXR4ZFVJc1MwRkJTMjlUTEdOQlJUZENMRWxCUTBsNlowTXNTMEZCUzNka0xFZEJRMFIxYTBJc1JVRkJNa0pRTEhkQ1FVRXdRbEVzUlVGREwwTkhMRVZCUTBrc1NVRkJTVW9zUlVGQk1rSk9MRlZCUVZVeFVpeEZRVUZMYjFNc1IwRkRPVU1zU1VGQlNVb3NSVUZCTWtKT0xGVkJRVlV4VWl4SFFVTTNReXhKUVVGSloxTXNSVUZCTWtKT0xGVkJRVlV4VWl4RlFVRkxiMU1zUlVGQlZ6bFVMRWRCUlhaRkxFMUJRVTl0Uml4SFFVTklMRTlCUVU5NGVrSXNTMEZCU3pCNlFpeGhRVUZoTEZGQlFWTkdMRWRCUlhSRGVIcENMRXRCUVV0M1pDeEhRVUZIZVdkQ0xGZEJRV0ZxSzBJc1MwRkJTM04zUWl4UFFVRlBNazRzV1VGQll6aEVMRVZCUVRKQ1VpeHJRa0ZETVVWMmFFTXNTMEZCUzNGcFF5eHZRa0ZQVkVFc2IwSkJRMGx5YVVNc1MwRkJTM2RrTEVkQlFVYzRWaXhQUVVGVExFdEJRMVIwZWtJc1MwRkJTM0YxUWl4TFFVRkxlVVlzVjBGRFZqbDZRaXhMUVVGTGQyUXNSMEZCUnpoclFpeFJRVUZSZGs4c1VVRkZjRUl2ZWtJc1MwRkJTelk0UWl4VlFVVlVOemhDTEV0QlFVdDNaQ3hIUVVGSE1GY3NVVUZCVlhGUExFZEJRV04yYVVNc1MwRkJTekEzUWl4UlFVRlJMRU5CUTNwRGRGWXNXVUZCWVN3NFFrRkRZbmRZTEZGQlFWTXlSU3hKUVVWaWRtbERMRXRCUVV0M1pDeEhRVUZIUkN4VlFVRlpORmdzUjBGQlRXNHhRaXhMUVVGTEt6bENMRTlCUVU4MVNTeEZRVUZIZUdVc1RVRkRla016Vnl4TFFVRkxkMlFzUjBGQlIwWXNVVUZCVlRkakxFZEJRVXRVTEV0QlFVdHBPRUlzVVVGQlVTeHJRa0ZCYlVKNE4wSXNSMEZSTTBSdk1FSXNUVUZCVFhOSkxFZEJRMFp1T1VJc1MwRkJTM0pGTEZWQlFWY3NSVUZIYUVJc1NVRkJTeXhKUVVGSll5eEZRVUZKTEVWQlFVZEJMRVZCUVVrd1owTXNSVUZCVVM5cFF5eFBRVUZSY1VNc1NVRkJTeXhEUVVOeVF5eE5RVUZOTkROQ0xFVkJRVk00U1N4RlFVRlJNV2RETEVkQlEycENLMnhETEVWQlFXRXZiRU1zU1VGQlRUQm5ReXhGUVVGUkwybERMRTlCUVZNc1IwRkRNVU1zUlVGQlNXbG5ReXhGUVVGdFFtOUpMR05CUVdOd1R5eEZRVUZSY2pCQ0xFdEJRVXR4TDBJc1owSkJRV2RDTVc5Q0xFbEJSVGxFTEUxQlFVMHdXQ3hGUVVGUExFbEJRMUl3VkN4RlFVRXlRbEFzZDBKQlEzaENiazRzUlVGQlQyNDJRaXhWUVVOUWJUQkNMRVZCUVV0blNTeFRRVUZYYUVNc1JVRkJUMjQyUWl4UlFVRlJiVGhDTEZWQlJTOUNjakpDTEV0QlFVdHhkVUlzUzBGQlN6Sk5MSEZDUVVkV0xHbENRVUZ2UW5KclFpeEZRVUZQSzNKQ0xFOUJRVTl3Uml4WFFVRlhNMjFDTEVkQlFWRkJMRVZCUVV0Mll5eFJRVU5vUkRSR0xFdEJRVXR4ZFVJc1MwRkJTekpOTEd0Q1FVRnJRa01zV1VGRGJFTTFUU3hGUVVGTFowa3NWVUZCVnl4SFFVODFRaXhKUVVOUk1Fd3NSVUZCTWtKUUxITkNRVVV6UW5ob1F5eExRVUZMZDJRc1IwRkJSekJaTEV0QlFVdDJaaXhIUVVkaU0xY3NTMEZCUzNka0xFZEJRVWN3V1N4TFFVRkxkbVlzUlVGQlRUQllMRWRCUnpOQ0xFMUJRVTgxZEVJc1IwRkRTSGxGTEVWQlFVMHNlVU5CUlU1ek9VSXNTVUZIUVN4RlFVRkpWQ3hGUVVFeVFqVlZMRmRCUVZVc1MwRkRja051ZEVJc1MwRkJTM0pGTEZWQlFWY3NSVUZEYUVKeFJTeExRVUZMTUhwQ0xHRkJRV0VzVjBGRGJrSXhla0lzUzBGQlN6UjZRaXhyUWtGVmVFSnJTeXhsUVVNeVFpeEpRVUZhT1RsQ0xFdEJRVXQzWkN4TFFVTmFlR1FzUzBGQlMzZGtMRWRCUVVkeFZ5eFJRVU5TTjNwQ0xFdEJRVXQzWkN4SFFVRkxMRTFCVVd4Q2RWTXNUVUZEU1N4SlFVRkpTeXhGUVVGUmNIZENMRXRCUVV0dmQwSXNUMEZCVXl4SFFVTXhRaXhOUVVGTmVWQXNSVUZCVXpjdlFpeExRVUZMY1hWQ0xFdEJRVXRwVFN4UFFVRlRMRTFCUVZFc1MwRkRNVU1zU1VGQlNYWllMRVZCUVU4c1IwRkZVQzlwUWl4TFFVRkxjWFZDTEV0QlFVdDBUQ3hQUVVOU0xGRkJRVlU0WXl4SFFVRnhReXhOUVVFelFqazFRaXhQUVVGUEwwWXNTMEZCUzNGMVFpeExRVUZMZEV3c1QwRkRiRU1zVDBGQlV6aGpMRWRCUVhGRExFdEJRVE5DT1RWQ0xFOUJRVTh2Uml4TFFVRkxjWFZDTEV0QlFVdDBUQ3hUUVVONlEwRXNSVUZCVHl4SlFVRk5MMmxDTEV0QlFVdHhkVUlzUzBGQlMzUk1MRTFCUjNaQ0wybENMRXRCUVV0eGRVSXNTMEZCUzNsU0xHOUNRVU5XTVZBc1JVRkJUWEIzUWl4TFFVRkxjWFZDTEV0QlFVdDNUU3hwUWtGQmEwSXNSVUZCU1RaRUxFVkJRVmR5Uml4VlFVZG9SSEkxUWl4TFFVRkxjUzlDTEdsQ1FVTk9hbEFzUlVGQlRUSlFMRWxCUVUwc1IwRkZhRUlzVFVGQlRVTXNSMEZCWlN4RlFVRkpOMFlzUlVGQllYWkdMRkZCUVZGNFJTeEhRVVU1UXl4UFFVRlJlVkFzUlVGRFNpeFJRVVk0UXl4SlFVRnlRemN2UWl4TFFVRkxjWFZDTEV0QlFVdDJUQ3hUUVVGVE0ycENMRkZCUVZFc1MwRkhOVUlzU1VGQlRXRXNTMEZCUzNGMVFpeExRVUZMZGt3c1UwRkJWeXhKUVVGTk9XbENMRXRCUVV0eGRVSXNTMEZCUzNaTUxGVkJRMjVFUXl4RlFVTkJMMmxDTEV0QlFVdHhkVUlzUzBGQlN6UkNMRTFCUTFRclVDeEZRVUZoTld4RExFOUJRVk1zU1VGQlRUUnNReXhGUVVGbExFbEJVWEJFYTBNc1VVRkRTU3hSUVVGVFNDeEZRVUV5UWs0c1YwRkhOVU42YmtNc1JVRkJVWE5yUXl4SFFVRkxRU3hITERSQ1EyNU5ZaTlwUXl4UFFVRlBReXhsUVVGbGVFSXNSVUZCVXl4aFFVRmpMRU5CUVVWelFpeFBRVUZQTEVsQlEzUkVkRUlzUlVGQlVTdHJReXhUUVVGTkxFVkJRMlFzVFVGQlRUUkVMRVZCUVdkQ0xFVkJRVkVzVFVGRGVFSXZSQ3hGUVVGclFpeEZRVUZSTEUxQmFVSm9RelZyUXl4RlFVRlJLMnRETEVsQmFFSlNMRk5CUVdFeFVTeEhRVU5VTEUxQlFVMHlVU3hGUVVGVk0xRXNSVUZCU3pKUkxGRkJSWEpDTEVsQlEwa3NSMEZCU1N4dlFrRkJkVUo2Unl4clFrRkJiMEo1Unl4SFFVRlhNa1FzUlVGQlkzSkxMRk5CUTNCRkxFOUJRVThzU1VGQlNVTXNaVUZIYmtJc1RVRkJUemt6UWl4SlFVTlFMRWxCUVV0MUswSXNSVUZEUkN4SlFVTkpMRTlCUVU4c1NVRkJTVW9zUlVGQlowSnFSaXhsUVVGbExFTkJRVU1zVlVGQlZUVmFMRTlCUVU4c1ZVRkJWWFJwUWl4TFFVRkxMRTlCUVUwc2NVSkJSWEpHTEUxQlFVOW5SQ3hQTERSQ1EyeENabXhHTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUTEdGQlFXTXNRMEZCUlhOQ0xFOUJRVThzU1VGRGRFUjBRaXhGUVVGUmMycERMRmRCUVdGMGFrTXNSVUZCVVhrelFpeHpRa0ZCZDBKNk0wSXNSVUZCVVhOdFF5eFZRVUZQTEVWQlEzQkZMRTFCUVUweFFpeEZRVUZyUWl4RlFVRlJMRTFCVTJoRE5XdERMRVZCUVZGemJVTXNTMEZTVWl4VFFVRmpiR3hETEV0QlFWRjNia01zUjBGRGJFSXNUMEZCVDBFc1JVRkJTMnBvUXl4UlFVRlBMRU5CUVVOcmFFTXNSVUZCUzJ4VExFdEJRMnBDZGpGQ0xFVkJRVWw1YmtJc1pVRkJaVGhPTEV0QlEyNUNhMU1zUlVGQlNXeFRMRWRCUVV0Mk1VSXNSVUZCU1hVeFFpeEpRVVZXYTFNc1NVRkRVaXhMUVVsUUxFMUJRVTFETEVWQlFYRkNNVmNzVjBGRGNrSXlWeXhGUVVGMVFqRlhMR0ZCVnpkQ2NubENMRVZCUVZGNU0wSXNjMEpCVmxJc1UwRkJLMEp5TWtJc1JVRkJTMmw2UWl4SFFVTTFRa0VzUlVGQlN6SlZMR2xDUVVOTU5XNURMRVZCUVVsM05FSXNZVUZCWld0UUxFVkJRVzFDTXpaQ0xFdEJRVXQ1TWtJc1JVRkJaMEpxUml4blFrRkRNMFIySzBJc1JVRkJTWGMzUWl4bFFVRnBRbTFOTEVWQlFYRkNOVFpDTEV0QlFVdDVNa0lzUlVGQlowSnFSaXhyUWtGSEwwUjJLMElzUlVGQlNYYzBRaXhoUVVGbGVFZ3NWMEZCVjJwclFpeExRVUZMZVRKQ0xFVkJRV2RDYWtZc1owSkJRMjVFZGl0Q0xFVkJRVWwzTjBJc1pVRkJhVUoyU3l4aFFVRmhiR3RDTEV0QlFVdDVNa0lzUlVGQlowSnFSaXhyUWtGakwwUXpMMElzUlVGQlVYTnFReXhYUVZCU0xGTkJRVzlDYkdsRExFZEJRMmhDTEUxQlFXMUNMR2xDUVVGU1FTeEZRVTltTEZOQlFXOUNaaXhIUVVOb1FpeEpRVUZKZFVrc1JVRkJTU3hGUVVGSGVFa3NSVUZCVXl4RlFVTndRaXhKUVVGTExFbEJRVWx4UXl4RlFVRkpMRVZCUVVkNVpDeEZRVUZKTjJZc1JVRkJTVVFzVDBGQlVYRkRMRVZCUVVsNVpDeEZRVUZIZW1Rc1NVRkRia050Unl4RlFVRkpka2tzUlVGQlNXOU9MRmRCUVZkb1RDeEhRVU5tYlVjc1JVRkJTU3hKUVVOS2VFa3NSMEZCVlN4RlFVVk1kMGtzUlVGQlNTeExRVU5VZUVrc1IwRkJWU3hGUVVWTWQwa3NSVUZCU1N4UFFVRlZRU3hIUVVGTExFMUJRM2hDZUVrc1IwRkJWU3hIUVVkV2NVTXNTVUZEUVhKRExFZEJRVlVzUjBGSGJFSXNUMEZCVDBFc1JVRjRRa2syYjBNc1EwRkJWemR1UXl4SFFVZG1ka0lzUzBGQlMzRndReXhMUVZCUkxFMUJUMFk1YmtNc1JVRkJTV3RwUXl4WlFVRmpiR2xETEVWQlFVa3Jia01zVXl3d1FrTnNRelZETlc1RExFOUJRVTlETEdWQlFXVjRRaXhGUVVGVExHRkJRV01zUTBGQlJYTkNMRTlCUVU4c1NVRkRkRVIwUWl4RlFVRlJiM0JETEdGQlFXVndjRU1zUlVGQlVYRndReXh4UWtGQmRVSnljRU1zUlVGQlVYTndReXhyUWtGQlpTeEZRVU0zUlN4TlFVRk5RU3hGUVVGbEwyNURMRTlCUVU5cldTeFBRVUZQTEUxQlEyNURlbG9zUlVGQlVYTndReXhoUVVGbFFTeEZRVU4yUWtFc1JVRkJiVUlzUzBGQlNTeEpRVU4yUWtFc1JVRkJiMElzVFVGQlNTeEpRVU40UWtFc1JVRkJiVUlzUzBGQlNTeEpRVU4yUWtFc1JVRkJiVUlzUzBGQlNTeEpRVU4yUWtFc1JVRkJjMElzVVVGQlNTeEpRVU14UWtFc1JVRkJjMElzVVVGQlNTeEpRVU14UWtFc1JVRkJiVUlzUzBGQlNTeEpRVU4yUWl4TlFVRk5SQ3hGUVVGMVFqbHVReXhQUVVGUGExa3NUMEZCVHl4TlFVTXpRM3BhTEVWQlFWRnhjRU1zY1VKQlFYVkNRU3hGUVVNdlFqbHVReXhQUVVGUFVTeExRVUZMZFc1RExFZEJRV014YlVNc1UwRkJVWFpDTEVsQlF6bENaMjlETEVWQlFYRkNReXhGUVVGaGFtOURMRWxCUVZGQkxFdEJSemxEY2tJc1JVRkJVVzl3UXl4aFFVUmhMRU5CUVVWcWNFTXNTMEZCVFN4UlFVRlRkMk1zUzBGQlRTeHBRaXg1UWtOb1FqVkRjR0lzVDBGQlQwTXNaVUZCWlhoQ0xFVkJRVk1zWVVGQll5eERRVUZGYzBJc1QwRkJUeXhKUVVOMFJIUkNMRVZCUVZGM0swSXNUMEZCVTNnclFpeEZRVUZSTkRaQ0xGbEJRVk1zUlVGRGJFTXNUVUZCVFRKUExFVkJRVkVzYlVWQlJWSjZWQ3hGUVVFclFpeHZRa0ZCWmpCVUxGZEJRVFpDTEVkQlFVc3NTVUZCU1VFc1YwRkJWeXhMUVVOMlJTeEpRVUZMTEVsQlFVa3ZiVU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpPRzFETEVWQlFVMXVjRU1zVDBGQlVYRkRMRWxCUXpsQ2NYcENMRVZCUVU5NVZDeEZRVUZOT1RkQ0xGZEJRVmRvVEN4SlFVRk5RU3hGUVd0Q2JFTjZReXhGUVVGUk5EWkNMRTlCYUVKUk5rOHNTVUZEV2l4SlFVRjVRMmh1UXl4RlFVRnlRMmx1UXl4RlFVRlJMRWxCUVVsR0xGZEJRVmRETEVkQlFXbENiamhDTEVWQlFVMXZPRUlzUlVGQlRYUndReXhQUVVGUmRYQkRMRVZCUVZNc1IwRkRla1VzU1VGQlMyeHVReXhGUVVGSkxFVkJRVWRCTEVWQlFVazJTeXhGUVVGTE4wc3NSMEZCU3l4RlFVTjBRbXR1UXl4SFFVRlZTaXhGUVVGTlJ5eEZRVUZOYW01RExFbEJRVTBzUjBGRE5VSnJia01zUjBGQlZVb3NSMEZCYlVJc1JVRkJXRWNzUlVGQlRXcHVReXhMUVVGWExFVkJRVTFwYmtNc1JVRkJUV3B1UXl4RlFVRkpMRWxCUVUwc1IwRkRla1JyYmtNc1IwRkJWVW9zUjBGQmRVSXNSMEZCWmtjc1JVRkJUV3B1UXl4RlFVRkpMRXRCUVZrc1JVRkJUV2x1UXl4RlFVRk5hbTVETEVWQlFVa3NTVUZCVFN4SFFVTTVSR3R1UXl4SFFVRlZTaXhGUVVGeFFpeEhRVUZtUnl4RlFVRk5hbTVETEVWQlFVa3NTVUZST1VJc1QwRk9TVFpMTEVWQlFVMHNSMEZCVFN4RlFVTmFjVGhDTEVWQlFWTkJMRVZCUVU5d2JVTXNWVUZCVlN4RlFVRkhiMjFETEVWQlFVOTJjRU1zVDBGQlV5eEhRVUZMTEVsQlJUZERhMDRzUlVGQlRTeEhRVUZOTEVsQlEycENjVGhDTEVWQlFWTkJMRVZCUVU5d2JVTXNWVUZCVlN4RlFVRkhiMjFETEVWQlFVOTJjRU1zVDBGQlV5eEhRVUZMTEUxQlJTOURkWEJETEVkQmRVSllNM0JETEVWQlFWRjNLMElzVDBGd1FsRnRUQ3hKUVVOYUxFbEJRVGhFYkc1RExFVkJRVlZ0YmtNc1JVRkJWVU1zUlVGQlZVTXNSVUZCVlVNc1JVRkJiRWRETEVWQlFTdENMRWxCUVdoQ1RDeEZRVUZQZG5CRExFOUJRV1ZyVGl4RlFVRk5jVGhDTEVWQlFVOTJjRU1zVDBGQlZ6WndReXhGUVVGSkxFVkJRMjVETEUxQlFUbENUaXhGUVVGUFFTeEZRVUZQZG5CRExFOUJRVk1zUzBGRGRrSTBjRU1zU1VGRGEwTXNUVUZCT1VKTUxFVkJRVTlCTEVWQlFVOTJjRU1zVDBGQlV5eEpRVU4yUWpSd1F5eExRVWRTTEUxQlFVMVFMRVZCUVdNc1NVRkJTVk1zV1VGQldVWXNSMEZCWlU0c1JVRkJVU3hKUVVGSlJpeFhRVUZYUXl4SFFVTXhSU3hKUVVGTGFHNURMRVZCUVVrc1JVRkJSMEVzUlVGQlNUWkxMRVZCUVVzM1N5eEhRVUZMTEVWQlEzUkNiVzVETEVWQlFWYzVWQ3hGUVVGUE5sUXNSVUZCVDJ3NFFpeFhRVUZYYUV3c1NVRkRjRU52YmtNc1JVRkJWeTlVTEVWQlFVODJWQ3hGUVVGUGJEaENMRmRCUVZkb1RDeEZRVUZKTEVsQlEzaERjVzVETEVWQlFWZG9WU3hGUVVGUE5sUXNSVUZCVDJ3NFFpeFhRVUZYYUV3c1JVRkJTU3hKUVVONFEzTnVReXhGUVVGWGFsVXNSVUZCVHpaVUxFVkJRVTlzT0VJc1YwRkJWMmhNTEVWQlFVa3NTVUZEZUVOcGJrTXNSVUZCVFU4c1MwRkJVVXdzUjBGQldTeEZRVUZOUXl4SFFVRlpMRVZCUXpWRFNDeEZRVUZOVHl4TlFVRnZRaXhIUVVGWVNpeEpRVUZyUWl4RlFVRk5ReXhIUVVGWkxFVkJRMjVFU2l4RlFVRk5UeXhOUVVGdlFpeEZRVUZZU0N4SlFVRnBRaXhGUVVGcFFpeEhRVUZZUXl4RlFVVXhReXhQUVVGUFRpeEpMRFJDUXpORFdHeHZReXhQUVVGUFF5eGxRVUZsZUVJc1JVRkJVeXhoUVVGakxFTkJRVVZ6UWl4UFFVRlBMRWxCUTNSRUxFMUJRVTAyYjBNc1JVRkJaU3hGUVVGUkxFMUJRM1pDUXl4RlFVRXdRaXhGUVVGUkxFdEJRMnhEUXl4RlFVRXJReXh0UWtGQmFFSklMRmxCTkVJdlFra3NSVUZCY1VJc1EwRkJRek4wUWl4RlFVRk5jMjVDTEV0QlF6bENMRWRCUVVsdlJ5eEZRVUYxUWl4RFFVTjJRaXhOUVVGTk0wc3NSMEZCVlN4RlFVRkpNRXNzUlVGQmQwSTFUQ3hSUVVGUk4yaENMRWRCUTNCRUxFOUJRVTgwZEVJc1JVRkJWVGRMTEVWQlFWTjFSU3hIUVVjeFFpeE5RVUZQTEVOQlFVVXdSaXhSUVVGUkxFVkJRVTFvZEVJc1MwRkJRVUVzU1VGSGVrSTBkRUlzUlVGQldTeERRVUZETlhSQ0xFVkJRVTF6YmtJc1MwRkRja0lzVDBGQlVVRXNSMEZEU2l4SlFVRkxMRTlCUTBRc1QwRkJUM1J1UWl4aFFVRm5RblYwUWl4WlFVRmpMRWxCUVVsTkxFdEJRVXNzUTBGQlF6ZDBRaXhKUVVGVFFTeEZRVU0xUkN4SlFVRkxMR05CUTB3c1VVRkRTU3hQUVVGUFFTeEpRVWR1UWpOakxFVkJRVUVzVVVFM1EzRkNMRU5CUVVONWNVTXNSVUZCWlhoSExFdEJRMnBETEVkQlFUWkNMR2xDUVVGc1FuZEhMRVZCUTFBc1RVRkJUeXhEUVVOSWRIRkRMRXRCUVUwc1ZVRkRUbmRqTEV0QlFVMDBkRUlzUlVGQlZVVXNSVUZCWlhoSExFbEJSM1pETEUxQlFVMDVha01zUlVGQlQzTnhReXhGUVVGamVtOUNMRTlCUVU4c1IwRkRiRU1zVFVGQllTeE5RVUZVTjJoQ0xFVkJRMDhzUTBGRFNFRXNTMEZCVFN4VlFVTk9kMk1zUzBGQlRUSjBRaXhGUVVGdFFrY3NSVUZCWTJ4dVF5eFZRVUZWTEVkQlFVa3daME1zU1VGSE1VTnJSeXhGUVVGaFpDeHhRa0ZCY1VKc2NFTXNSMEZKT1VOemNVTXNSVUZCWTNKeFF5eFBRVUZUTEVWQlEzaENMRU5CUTBWRUxFdEJRVTFuY1VNc1JVRkJZV1FzY1VKQlFYRkNiSEJETEVkQlEzaERkMk1zUzBGQlRUaDBRaXhGUVVGamJHNURMRlZCUVZVc1NVRkZhRU1zUTBGRFJYQkVMRXRCUVUxbmNVTXNSVUZCWVdRc2NVSkJRWEZDYkhCRExFbEJVbkpEWjNGRExFVkJRV0ZtTEdVc05FSkRjRUkxUWpkdVF5eFBRVUZQUXl4bFFVRmxlRUlzUlVGQlV5eGhRVUZqTEVOQlFVVnpRaXhQUVVGUExFbEJRM1JFTEUxQlFVMDJiME1zUlVGQlpTeEZRVUZSTEUxQlEzWkNUeXhGUVVGcFF5eHRRa0ZCVkVZc1RVRkRWQ3h2UWtGQlZFRXNUVUZEY1VNc05rSkJRWHBEYW5CRExFOUJRVTgyZUVJc1ZVRkJWVGwyUWl4VFFVRlRaMG9zUzBGQlMyc3JRaXhOUVVOcVEwZ3NSVUZCSzBNc2JVSkJRV2hDU0N4WlFUUkNMMEpUTEVWQlFYRkNMRU5CUVVOb2RVSXNSVUZCVFdwT0xFdEJRemxDTEUxQlFVMXJOMElzUlVGQllTeEpRVUZKUXl4WFFVdDJRaXhQUVVwQlJDeEZRVUZYUlN4UFFVRlRMRmRCUTJoQ0xFMUJRVTFETEVWQlFWVklMRVZCUVZjM1ZDeFBRVUZQZG5wQ0xFMUJRVTBzUzBGQlN5eEhRVU0zUTJ0TkxFVkJRVk1zU1VGQlRYRTNRaXhKUVVWYVNDeEZRVUZYU1N4alFVRmpjblZDTEVsQlJYQkRNMk1zUlVGQlFTeFJRVGRDY1VJc1JVRkJSMGNzUzBGQlFVRXNSVUZCVFhkakxFdEJRVUZCTEVkQlFWRXdiMElzUlVGQlowSXpNVUlzUzBGRGJFUXNUMEZCU1djM1FpeEhRVUZyUWk5MFFpeGhRVUZuUWpaMFFpeExRVU01UW01R0xFVkJRMDh6TVVJc1JVRkJVMmxPTEVkQlIxUm5kVUlzUlVGQmJVSm9kVUlzUlVGQlRXcE9MRWRCUnk5Q01qWkNMRWxCUTBveGRFSXNZVUZCWjBKMWRFSXNZMEZtVmpsdlF5eEZRV1ZuUTNWaUxFVkJaRTRzYlVKQlFYWkNkWFJDTEZsQlFWbGxMRTlCUTNCQ1ppeFpRVUZaWlN4UFFVRlBOM0JETEVkQlEyNUNRU3hIUVVGUFFTeEZRVUZKT0hCRExHdENRVUZyUW1oQ0xHTkJZVE5DTjBVc1JVRkRUek14UWl4RlFVRlRhVTRzUjBGSFZHZDFRaXhGUVVGdFFpeEpRVUZKU0N4TFFVRkxMRU5CUVVNM2RFSXNTVUZCVVdwT0xFZEJTVGREUVN4RlFVRlRlVFpDTEVWQlFXRmlMR0ZCUVdGdWNFTXNTVUZCVTNkakxFZEJRVkVzUzBGNFFtaEVkbUlzU1VGQlFVRXNTU3cwUWtOUVprY3NUMEZCVDBNc1pVRkJaWGhDTEVWQlFWTXNZVUZCWXl4RFFVRkZjMElzVDBGQlR5eEpRVU4wUkhSQ0xFVkJRVkV3YkVNc1kwRkJaMEl4YkVNc1JVRkJVV2RyUXl4aFFVRmxhR3RETEVWQlFWRXliRU1zWTBGQlowSXpiRU1zUlVGQlVYbHZReXhoUVVGbGVtOURMRVZCUVZGcFZ5eGpRVUZYTEVWQlEycElMRTFCUVUxck1VSXNSVUZCYjBJc1JVRkJVU3hOUVVOc1EyNXlReXhGUVVGUmVXOURMR0ZCUVdVd1F5eEZRVUZyUW00clFpeFJRVU42UXl4TlFVRk5ieXRDTEVWQlFXOUNMRVZCUVZFc1RVRkRiRU53Y2tNc1JVRkJVV2RyUXl4aFFVRmxiMGdzUlVGQmEwSndLMElzVVVGRGVrTXNUVUZCVFhFclFpeEZRVUZaTDNGRExFOUJRVTluY2tNc1lVRkJZU3hKUVdkQ2RFTjBja01zUlVGQlVUSnNReXhqUVdaakxFTkJRVU40UXl4RlFVRlRlbnBDTEV0QlJUVkNMRTFCUVUxMFVDeEZRVUZUSzJsRExFVkJRVkV2YVVNc1QwRkRha0oxTmtJc1JVRkJhVUlzU1VGQlNXeDZRaXhOUVVGTmNrZ3NSMEZEYWtNc1NVRkJTVzF5UXl4RlFVRlJMRVZCUTFwd1NTeEZRVUZSZG1kRExGTkJRVkVzUTBGQlEza3pRaXhGUVVGUk5UTkNMRTFCUlhKQ0xFVkJRVWt3YjBNc1JVRkJhMEp1SzBJc1UwRkJVM0YwUWl4SFFVRlJMRWRCUVU5dlVTeEpRVU14UXpsUUxFVkJRV1ZzTkVJc1IwRkJTMmR2UXl4SlFVTmtZeXhKUVVGVmJuSkRMRWRCUTFwelVDeEZRVUZUYVhKQ0xFVkJRV1ZzTTBJc1MwRkJTelJ1UXl4WFFXdENOME55Y2tNc1JVRkJVVEJzUXl4alFWcGpMRU5CUVVNNFJpeEZRVUZuUW5aSUxFdEJRMjVETEUxQlFVMTBTaXhGUVVGcFFqWlJMRVZCUVdWb2IwTXNUVUZCVFRadVF5eEhRVU4wUTJ4SkxFVkJRVlVzUjBGRGFFSXNTVUZCU3l4SlFVRkpNV2RETEVWQlFVa3NSVUZCUjBFc1JVRkJTV3MwUWl4RlFVRmxkalpDTEU5QlFWRnhReXhKUVVGTExFTkJRelZETEUxQlFVMW5jRU1zUjBGQlowSXNSVUZCU1V3c1JVRkJhMEp3SzBJc1UwRkJVekowUWl4RlFVRmxiRFJDTEVkQlFVbDNhRU1zUjBGRmVFVXNSMEZFUVdRc1JVRkJVVGxuUXl4TFFVRkxiM0JETEVkQlEyTXNWVUZCZGtKQkxFVkJRV04wY2tNc1MwRkRaQ3hOUVVkU0xFOUJRVTluYWtNc1IwRkhXRzVxUXl4RlFVRlJhVmNzVTBGQlZ5eEhMRFJDUTNCRGJrSXhWU3hQUVVGUFF5eGxRVUZsZUVJc1JVRkJVeXhoUVVGakxFTkJRVVZ6UWl4UFFVRlBMRWxCUTNSRWRFSXNSVUZCVVRCeVF5eHJRa0ZCYjBJeGNrTXNSVUZCVVRKeVF5eDFRa0ZCYjBJc1JVRkRlRVFzVFVGQlRVTXNSVUZCYVVJc1JVRkJVU3hMUVdsQ0wwSXNVMEZCVTBNc1JVRkJiVUpzZGtJc1JVRkJUVzEyUWl4SFFVTTVRaXhKUVVGTGJuWkNMRVZCUTBRc1QwRkJUMEVzUlVGRFdDeEhRVUZKYVhaQ0xFVkJRV1ZITEZOQlFWTndka0lzUjBGQlR5eERRVU12UWl4TlFVRk5jWFpDTEVWQlFXTXNRMEZCUlVNc1kwRkJZeXhGUVVGTmVrMHNTVUZCUzNOTkxFVkJRVkV4Y2tNc1VVRkZka1FzVDBGRVFUQnlReXhGUVVGUmVuQkRMRXRCUVV0ellTeEhRVU5PY1haQ0xFVkJSVTRzUjBGQlNYWnJReXhOUVVGTmVXdERMRkZCUVZGMmRrSXNSMEZCVHl4RFFVTXhRaXhOUVVGTmQzWkNMRVZCUVZVc1NVRkJTVEZyUXl4TlFVRk5hMVlzUlVGQlMzWmpMRkZCUXk5Q0xFbEJRVXNzU1VGQlNYRkRMRVZCUVVrc1JVRkJSMEVzUlVGQlNXdGhMRVZCUVV0Mll5eFBRVUZSY1VNc1NVRkROMEl3Y0VNc1JVRkJVVEZ3UXl4SFFVRkxiM0JETEVWQlFXMUNiSFpDTEVWQlFVdHNZU3hIUVVGSmNYQkRMRWRCUlRkRExFOUJRVTlMTEVWQlJVNHNSMEZCYjBJc2FVSkJRVlI0ZGtJc1MwRkJkVUpCTEdGQlFXZENNMUVzVFVGQlR5eERRVU14UkN4TlFVRk5iV2RETEVWQlFWVXNSMEZEYUVJc1NVRkJTeXhOUVVGTk9YRkRMRXRCUVU5ellpeEZRVU5XY0dJc1QwRkJUelo0UWl4VlFVRlZka3NzWlVGQlpYWmpMRXRCUVV0eFVTeEZRVUZOZEdJc1MwRkRNME00Y1VNc1JVRkJVVGx4UXl4SFFVRlBkM0ZETEVWQlFXMUNiSFpDTEVWQlFVdDBZaXhIUVVGTmVYRkRMRWxCUjNKRUxFOUJRVTlMTEVWQlJWZ3NUMEZCVDNoMlFpeEZRV2RDV0N4VFFVRlRlWFpDTEVWQlFXMUNlblpDTEVWQlFVMXRka0lzUjBGRE9VSXNTVUZCUzI1MlFpeEZRVU5FTEU5QlFVOUJMRVZCUTFnc1IwRkJTVUVzUjBGQlVVRXNSVUZCUzNOMlFpeGhRVU5pTEU5QlFVOUlMRVZCUVZGdWRrSXNSVUZCU3pacFFpeExRVVZ1UWl4SFFVRkpMek5DTEUxQlFVMTVhME1zVVVGQlVYWjJRaXhIUVVOdVFpeEpRVUZMTEVsQlFVbHNZU3hGUVVGSkxFVkJRVWRCTEVWQlFVbHJZU3hGUVVGTGRtTXNUMEZCVVhGRExFbEJRemRDYTJFc1JVRkJTMnhoTEVkQlFVc3ljRU1zUlVGQmJVSjZka0lzUlVGQlMyeGhMRWRCUVVseGNFTXNVVUZIZWtNc1IwRkJiMElzYVVKQlFWUnVka0lzUlVGRFdpeEpRVUZMTEUxQlFVMTBZaXhMUVVGUGMySXNSVUZEVm5CaUxFOUJRVTgyZUVJc1ZVRkJWWFpMTEdWQlFXVjJZeXhMUVVGTGNWRXNSVUZCVFhSaUxFdEJRek5EYzJJc1JVRkJTM1JpTEVkQlFVOHJjVU1zUlVGQmJVSjZka0lzUlVGQlMzUmlMRWRCUVUxNWNVTXNTVUZKZEVRc1QwRkJUMjUyUWl4RlFUTkVXRE5qTEVWQlFWRXlja01zYTBKQlVsSXNVMEZCTWtKMFVpeEhRVU4yUWl4TlFVRk5lVklzUlVGQlZTeEhRVU5XVHl4RlFVRmhhRk1zUlVGQlR6RmtMRXRCUTNCQ01uWkNMRVZCUVU5cVV5eEZRVWRpTEU5QlJrRnBVeXhGUVVGTE0zWkNMRXRCUVU5cmRrSXNSVUZCYlVKUkxFVkJRVmxRTEVkQlF6TkRVU3hGUVVGTFF5eFpRVUZqVkN4RlFVRlJNWEpETEU5QlEzQkNMRU5CUVVWcE5rSXNUMEZCVVdsVExFVkJRVTFTTEZGQlFWTkJMRWxCTUVOd1F6bHlReXhGUVVGUk1ISkRMR3RDUVV4U0xGTkJRVEpDY2xJc1JVRkJVWGxTTEVkQlJ5OUNMRTlCUmtGNlVpeEZRVUZQTVdRc1MwRkJUM2wyUWl4RlFVRnRRaTlTTEVWQlFVOHhaQ3hMUVVGTmJYWkNMRWRCUXpsRGVsSXNSVUZCVDJ0VExHbENRVUZqYW05RExFVkJRMlFyTVVJc1NTdzBRa040UkZnNU5FSXNUMEZCVDBNc1pVRkJaWGhDTEVWQlFWTXNZVUZCWXl4RFFVRkZjMElzVDBGQlR5eEpRVU4wUkhSQ0xFVkJRVkZ6TkVJc1VVRkJWWFEwUWl4RlFVRlJielJDTEZGQlFWVndORUlzUlVGQlVXMDRRaXhYUVVGaGJqaENMRVZCUVZGcFZ5eGpRVUZYTEVWQlF6VkZMRTFCUVUxdGFFSXNSVUZCYzBJc1JVRkJVU3hOUVVNNVFtOVdMRVZCUVdNc1JVRkJVU3hOUVVOMFFsb3NSVUZCYVVJc1JVRkJVU3hMUVVWNlFqRm5ReXhGUVVSVkxFVkJRVkVzVFVGRFJqaENMRkZCUVZFc2IwSkJUemxDTEVsQlFVbHRka0lzUlVGRVNtNDRRaXhGUVVGUmFWY3NVMEZCVnl4RlFVVnVRaXhUUVVGWGEyMUNMRWRCUTFCQkxFVkJRVmRCTEVWQlFXOUNMRkZCUVVrc1IwRkJTeXhWUVVONFEwRXNSVUZCVjBFc1JVRkJkVUlzVjBGQlNTeEhRVUZMTEdGQlF6TkRRU3hGUVVGWFFTeEZRVUZyUWl4TlFVRkpMRWRCUVVzc1VVRkRkRU5CTEVWQlFWZEJMRVZCUVdkQ0xFbEJRVWtzUjBGQlN5eE5RVU53UTBFc1JVRkJWMEVzUlVGQk1FSXNZMEZCU1N4SFFVRkxMR2RDUVVNNVEwRXNSVUZCVjBFc1JVRkJlVUlzWVVGQlNTeEhRVUZMTEdWQlF6ZERRU3hGUVVGWFFTeEZRVUYxUWl4WFFVRkpMRWRCUVVzc1lVRlFMME1zUTBGUlIwRXNSVUZCWVc0NFFpeEZRVUZSYlRoQ0xHRkJRV1Z1T0VJc1JVRkJVVzA0UWl4WFFVRmhMRXRCZDBVMVJHNDRRaXhGUVVGUmJ6UkNMRkZCY0VWU0xFMUJUVWw0Y1VJc1dVRkJXVFlyUWl4SFFVTlNlbTFETEV0QlFVdDViVU1zVTBGQlYwRXNSVUZSY0VJM1VpeFBRVUZQZURWQ0xFZEJSVWdzVDBGRVFUaEtMRVZCUVUwc2NVSkJRWE5DT1Vvc1IwRkRlRUpCTEVWQlFVbHFRaXhQUVVGVFp6aENMRVZCUVZkRExFOUJRVk5vTjBJc1JVRkJTV3BDTEU5QlFWTm5PRUlzUlVGQlYyVXNUVUZEY2tRd1R5eEZRVUZsWXl4VlFVRlZkSEpETEVkQlVURkNMRU5CUVVNMFJTeExRVUZMTW0xRExHVkJRV1YyY2tNc1MwRlFjRUpCTEVWQlFVbHFRaXhMUVVOQmFVSXNSVUZCU1dwQ0xFOUJRVk5uT0VJc1JVRkJWME1zVFVGRGJFSkVMRVZCUVZkaExHRkJRMWhpTEVWQlFWZG5RaXhYUVVOa2JqTkNMRXRCUVVzMGJVTXNaVUZCWlhoeVF5eEpRVkYyUTNWeVF5eGxRVUZsZG5KRExFZEJSVmdzU1VGQlNXWXNSVUZCVFN4SFFVRkxaU3hGUVVGSmFrSXNTMEZ2UW01Q0xFOUJiRUpKYVVJc1JVRkJTV3BDTEU5QlFWTm5PRUlzUlVGQlYyRXNZMEZEZUVJMU4wSXNSVUZCU1dwQ0xFOUJRVk5uT0VJc1JVRkJWMmRDTEdGQlEzaENPVGhDTEVkQlFVOWxMRVZCUVVsdGNrTXNXVUZCWXl4TFFVbDZRbTV5UXl4RlFVRkphelZDTEV0QlFVOHNUVUZCVVd3MVFpeEZRVUZKYXpWQ0xFMUJRM1pDYWpaQ0xFZEJRVTlsTEVWQlFVbHJOVUlzU1VGQlRTeExRVWRxUWl4TlFVRlJiRFZDTEVWQlFVbHBUeXhMUVVOYWFGQXNSMEZCVDJVc1JVRkJTV2xQTEVsQlIxZ3NUVUZCVVdwUExFVkJRVWwxWWl4UFFVTmFkR01zUjBGQlQxa3NTMEZCUzBNc1ZVRkJWVVVzUlVGQlNYVmlMRXRCUVUwelZ5eExRVUZMZVcxRExGZEJSWHBEZG1oRExFVkJRVTBzYlVKQlFXOUNPVW9zUlVGQlMyWXNSMEZEZUVKQkxFVkJUMWgxYzBNc1pVRkJaWGh5UXl4SFFVTllMRTFCUVUxNWNrTXNSVUZCYVVKTUxFVkJRVmxpTEd0Q1FVRnJRblp4UXl4SFFVTXZRMnR5UXl4RlFVRlBkRzFETEV0QlFVc3liVU1zWlVGQlpVVXNSVUZCWlhoVExGRkJRekZEZVZJc1JVRkJWV1VzUlVGQlpXWXNVVUZGTDBJc1QwRkVRVUVzUlVGQlVUTXZRaXhSUVVGUmJXZERMRWRCUTFSU0xFbEJVMllzVFVGQlRYaFVMRlZCUVdkQ2JFSXNSVUZCYjBKRExGRkJUWFJEZW5CQ0xGbEJRVmxyTDBJc1IwRkRVblI2UWl4UlFVTkJlRlFzUzBGQlN6aHRReXhSUVVGVlFTeEZRVTl1UWpGVExFbEJRVWxvTlVJc1IwRkRRU3hKUVVGSmFUVkNMRVZCUTBvc1IwRkJiVUlzYVVKQlFWSnFOVUlzUlVGRFVHazFRaXhGUVVGVGNqQkNMRXRCUVVzcmJVTXNZVUZCWVROeVF5eEhRVU4yUW1rMVFpeEZRVUZQYkRaQ0xFOUJRVk5uT0VJc1JVRkJWMkVzWTBGRE0wSXpReXhGUVVGUGJEWkNMRTlCUVZObk9FSXNSVUZCVjJkQ0xGbEJSVE5DYmpOQ0xFdEJRVXRuYmtNc1kwRkJaMElzU1VGQlNVTXNSVUZCYjBJMVV5eEhRVVZzUWl4SlFVRjJRa0VzUlVGQlQydFRMR0ZCUTFBdmVVSXNUVUZCVFd0blFpeGhRVUZoTEZWQlFWZFhMRWxCUzJ4RE4yZENMRTFCUVUxclowSXNZVUZCWVN4VlFVRlhWeXhQUVVkcVF5eExRVUZKZFZJc1JVRkJaVWNzVTBGQlV6TnhReXhMUVVGUlFTeEZRVUZKZFc5RExFOUJaWHBETEUxQlFVMHNTVUZCU1ROdlF5eE5RVUZOTEdsQ1FVRnRRa2tzUjBGaWJrTXNTVUZCU3pSRkxFdEJRVXRuYmtNc1kwRkRUaXhOUVVGTkxFbEJRVWxvYzBNc1RVRkJUU3h2UkVGSGFFSnhOVUlzUlVGQlUzSXdRaXhMUVVGTFoyNURMR05CUVdORkxHVkJRV1U1Y2tNc1IwRkRka05wTlVJc1NVRkZRWEl3UWl4TFFVRkxaMjVETEdOQlFXZENMRXRCUTNKQ2VIcENMRTFCUVUxclowSXNZVUZCWVN4VlFVRlhWeXhMUVdNNVF6QlRMR0ZCUVdFeGMwTXNSMEZEVkN4SlFVRkpiME1zUlVGQlNTeEZRVVZTTEUxQlFVMTNia01zUlVGQlNTeERRVU5PT1hCRExFdEJRVTAwVEN4UFFVRlBNVXdzUlVGQlNUSm9RaXhQUVVGUExFdEJSVFZDTEZGQlFUSkNNV1FzU1VGQmRrSTJNMElzUlVGQlZ6aE9MRVZCUVVVNWNFTXNUVUZEWWl4TlFVRk5MRWxCUVVsaExFMUJRVTBzZFVKQlFYbENhWEJETEVWQlFVVTVjRU1zVFVGSEwwTXNSMEZCU1Rod1F5eEZRVUZGT1hCRExFOUJRVk5uT0VJc1JVRkJWMkVzWTBGRGRFSnBUaXhGUVVGRk9YQkRMRTlCUVZObk9FSXNSVUZCVjJkQ0xGZEJRVmtzUTBGRGJFTXNUVUZCVFdkUkxFVkJRVkV4Y1VNc1JVRkJTU3hGUVVOc1FpeExRVUV5UWl4TlFVRndRbkJETEVWQlFVa3lhRUlzVTBGQlUzWm1MRWxCUVdOQkxFZEJRVXR3UXl4RlFVRkpSQ3hUUVVNelF5eE5RVUZOWjNSRExFVkJRVTB2YzBNc1JVRkJTV3RFTEZWQlFWVTBjRU1zUlVGQlR6RnhReXhIUVVOcVF5eEhRVUZKTW5GRExFZEJRVTl5YUVNc1QwRkJUM0ZvUXl4SlFVRXdRaXhOUVVGc1FpOXpReXhGUVVGSk1taENMRTlCUVU5MlppeEhRVU5xUXl4TlFVRk5MRWxCUVVsNlFpeE5RVUZOTEhWQ1FVVndRbWx3UXl4RlFVRkZjME1zV1VGQlkzaG5ReXhQUVVGUGNXaERMRWRCUnpOQ0xFZEJRVWtzVFVGQlVTOXpReXhGUVVGSk1taENMRTlCUVU5MlppeEZRVUZKTEVkQlFVa3NRMEZETTBJc1RVRkJUVEJ4UXl4RlFVRlJNWEZETEVWQlFVa3NSVUZEYkVJc1QwRkJVMEVzUjBGRlJDeE5RVVJOY0VNc1JVRkJTVEpvUWl4UFFVRlBkbVlzU1VGSGFrSkJMRWxCUVUxd1F5eEZRVUZKUkN4VFFVZHNRalp3UXl4RlFVRkZNMUFzU1VGQlRXbzJRaXhGUVVGSmEwUXNWVUZCVlRSd1F5eEZRVUZQTVhGRExGRkJSemRDZDI1RExFVkJRVVV6VUN4SlFVRk5MRWxCUjFvc1RVRkJUWGd3UWl4RlFVRlBla1lzUlVGQlNUSm9RaXhQUVVGUGRtWXNSVUZCU1N4SFFVTTFRaXhIUVVGSkxFdEJRVTl4UkN4SFFVRlJhVWNzVDBGQlQycEhMRWxCUVZOQkxFVkJRVTBzUTBGRGNrTXNUVUZCVFhGdVF5eEZRVUZSTVhGRExFVkJRVWtzUlVGRGJFSXNUMEZCVTBFc1IwRkJSeXhEUVVOU0xFMUJRVTF0Unl4RlFVRkpka2tzUlVGQlNUSm9RaXhQUVVGUGRtWXNSMEZEY2tJc1IwRkJTU3hOUVVGUmJVY3NSMEZCUzIxRUxFOUJRVTl1UkN4SlFVRk5RU3hGUVVGSExFZEJRek5DYmtjc1JVRkRSaXhOUVVWS0xFZEJRVWxCTEVsQlFVMXdReXhGUVVGSlJDeFBRVU5XTEUxQlJWSTJjRU1zUlVGQlJUVTJRaXhIUVVGTGRFUXNUMEZCVHpGTUxFVkJRVWxyUkN4VlFVRlZOSEJETEVWQlFVOHhjVU1zUlVGQlNTeEpRVWN6UXl4SFFVRkpjRU1zUlVGQlNUSm9RaXhUUVVGVGRtWXNSMEZCU1N4RFFVTnFRaXhOUVVGTk5IRkRMRVZCUVZWeWJrTXNTMEZCUzNOdVF5eFRRVUZUYW5SRExFVkJRVWx4VGl4UFFVRlBha3dzU1VGRGVrTXNTVUZCU1RZeFFpeEZRVUZSYVZZc1pVRkJaWFJFTEVWQlFVVTVjRU1zUzBGQlRXdDBReXhIUVVrdlFpeE5RVUZOTEVsQlFVbHljME1zVFVGQlRTeHRRa0ZJYUVKcGNFTXNSVUZCUlhSMFFpeExRVUZQTUhkQ0xFVkJUMnBDTEU5QlJFRnVhVU1zUlVGQlRTeHRRa0ZCYjBJM1N5eEZRVUZMTkhCRExFZEJRM2hDUVN4RlFVVlljVVFzVTBGQlUycDBReXhIUVVOTUxFbEJRMGtzVDBGQlQxa3NTMEZCUzA0c1RVRkJUVTRzUlVGQlN6SkdMRXRCUVVzNGJVTXNVMEZGYUVNc1RVRkJUM0p0UXl4SFFVTklMRTlCUVU4c1IwRkhaaXh6UWtGQmMwSjBSeXhGUVVGTmEzUkRMRWRCUTNoQ0xFOUJRVkZzZEVNc1IwRkRTaXhMUVVGTFp6aENMRVZCUVZkVkxGRkJRMW9zVFVGQk1FSXNhVUpCUVZwM1VTeEZRVU5zUWl4TFFVRkxiRklzUlVGQlYydENMRmRCUTFvc1dVRkJiVUl2TkVJc1NVRkJXaXR2UXl4RlFVTllMRXRCUVV0c1VpeEZRVUZYYjBJc1kwRkRXaXhOUVVFd1FpeHBRa0ZCV2poUUxFZEJRVEpETEdsQ1FVRmFRU3hGUVVOcVJDeExRVUZMYkZJc1JVRkJWME1zVFVGRGFFSXNTMEZCUzBRc1JVRkJWMkVzWVVGRFdpeFBRVUZQZGpGQ0xFMUJRVTE1YTBNc1VVRkJVVzFDTEVsQlFWbEJMRVZCUVZGcWRFTXNUMEZCVXl4RlFVTjBSQ3hMUVVGTEt6ZENMRVZCUVZkbExFbEJRMmhDTEV0QlFVdG1MRVZCUVZkblFpeFhRVU5hTEU5QlFVOHhNVUlzVFVGQlRYbHJReXhSUVVGUmJVSXNTVUZOYWtONGFVTXNWVUZEVVRkRkxFdEJRVXRuYmtNc1pVRkRUR2h1UXl4TFFVRkxaMjVETEdOQlFXTlJMREJDUVVrdlFuaDBReXhGUVVGUmN6UkNMRkZCUVZWQkxFVkJVMnhDTEUxQlFVMHlWU3hGUVVOR2NpOUNMRmxCUVZsNWMwSXNSMEZEVW5Jd1FpeExRVUZMY1RCQ0xFOUJRVk5CTEVWQlEyUnlNRUlzUzBGQlN6aHNReXhSUVVGVkxFZEJRMlk1YkVNc1MwRkJTM2x1UXl4VlFVRlpjRlFzUlVGVmNrSTJVeXhsUVVGbFVTeEhRVVZZTEVkQlJFRXhia01zUzBGQlN6aHNReXhSUVVGUmVuQkRMRXRCUVV0eGNrTXNSMEZEWkRGdVF5eExRVUZMT0d4RExGRkJRVkV4Y2tNc1UwRkJWelJHTEV0QlFVdDVia01zVlVGQlZXeENMRmxCUVdFc1EwRkZjRVFzVFVGQlRXeFRMRVZCUVZOdFV5eEZRVUZaWkN4clFrRkJhMEl4YkVNc1MwRkJTM2x1UXl4VlFVRlhlbTVETEV0QlFVczRiRU1zVTBGRmJFVXNUMEZFUVRsc1F5eExRVUZMZDI1RExIbENRVU5GYmxRc1JVRkZXQ3hQUVVGUExFdEJTMWh0VkN4NVFrRkRTWGh1UXl4TFFVRkxlVzVETEZWQlFWa3NTMEZEYWtKNmJrTXNTMEZCU3poc1F5eFJRVUZWTEUwc2VVSkRibE4yUW5aeFF5eFBRVUZQUXl4bFFVRmxlRUlzUlVGQlV5eGhRVUZqTEVOQlFVVnpRaXhQUVVGUExFbEJRM1JFZEVJc1JVRkJVVEJ6UXl4VlFVRlpNWE5ETEVWQlFWRXJja01zWTBGQlZ5eEZRVU4yUXl4TlFVRk5NVUlzUlVGQkswTXNiVUpCUVdoQ1NDeFpRVTB2UWpWdFF5eEZRVUZYTDBJc1QwRkJUelo0UWl4VlFVRlZPWFpDTEZOQlF6VkNiMjVETEVWQlFXbERMRzFDUVVGVVJpeE5RVU5VTEc5Q1FVRlVRU3hOUVVOdlFpdzJRa0ZCZUVKc2JrTXNSVUZCVTJkS0xFdEJRVXRySzBJc1RVRkRhRUp0UkN4RlFVRnBReXh0UWtGQlZFTXNUVUZEVkN4dlFrRkJWRUVzVFVGRGIwSXNOa0pCUVhoQ2RIRkRMRVZCUVZOblNpeExRVUZMYzJoRExFMUJUWFJDTEZOQlFWTTNRaXhGUVVGVE0zRkRMRWRCUTJRc1QwRkJVMmx3UXl4SlFVRXdRbXB3UXl4aFFVRmxPRzlETEdGQmJFSjJReXhEUVVGRE9XOURMRWRCUTNsQ0xHMUNRVUYyUWpodlF5eFpRVUZaWlN4UFFVTndRbVlzV1VGQldXVXNUMEZCVHpkd1F5eEhRVU51UWtFc1JVRkJTVGh3UXl4clFrRkJhMEpvUWl4WlFXVnhRMlVzUTBGQlR6ZHdReXhMUVVOdVJYTndReXhIUVVGclFuUndReXhoUVVGbGIzQkRMRTFCUTJwRGJVUXNSMEZCYTBKMmMwTXNZVUZCWlhkelF5eExRVVV4UXpWMFF5eEZRVUZSSzNKRExGTkJRVmRCTEVWQk5FSnVRaTl5UXl4RlFVRlJNSE5ETEZWQk0wSlNMRk5CUVZOQkxFVkJRVlYwY2tNc1JVRkJTM2RyUWl4SFFVTndRaXhKUVVGTGVHdENMRWRCUVhOQ0xHbENRVUZTUVN4RlFVTm1MRTlCUVU4c1JVRkZXQ3hIUVVGSmNVY3NUVUZCVFhsclF5eFJRVUZST1hGRExFZEJRVTBzUTBGRGNFSXNTVUZCU3l4SlFVRkpjVUlzUlVGQlNTeEZRVUZIZVdRc1JVRkJTVGxsTEVWQlFVbG9RaXhQUVVGUmNVTXNSVUZCU1hsa0xFVkJRVWQ2WkN4SlFVTnVReXhIUVVGSmFYRkRMRVZCUVZWMGNrTXNSVUZCU1hGQ0xFbEJRMlFzVDBGQlR5eEZRVWRtTEU5QlFVOHNSVUZGV0N4SFFVRkpjM0JETEVWQlFWTXpjVU1zUjBGRFZDeFBRVUZQTEVWQlJWZ3NSMEZCU1VFc1JVRkJTWGRyUWl4UlFVTnJRaXh0UWtGQlpuaHJRaXhGUVVGSmQydENMRkZCUTFVc1NVRkJja0pzYWtJc1ZVRkJWWFJETEU5QlExWXNUMEZCVDNOelF5eEZRVUZWZEhKRExFVkJRVWwzYTBJc1ZVRkJWU3hIUVVWdVF5eEpRVUZMTEUxQlFVMTJhMElzUzBGQlQwUXNSVUZEWkN4SFFVRkpSeXhQUVVGUE5uaENMRlZCUVZWMlN5eGxRVUZsZG1Nc1MwRkJTMnhNTEVWQlFVdERMRWxCUVZGeGNrTXNSVUZCVlhSeVF5eEZRVUZKUXl4SlFVTm9SU3hQUVVGUExFVkJSMllzVDBGQlR5eEpMRFJDUXpsRFNpeFRRVUZUWnpKQ0xFVkJRVkZxTWtJc1IwRkRkRUlzUjBGQlNVRXNSVUZCU3l4UFFWZFlMRk5CUVdWQkxFZEJRMklzU1VGQlN5eEpRVUZKUXl4TFFVRlBaekpDTEVWQlFWRnFSU3hWUVVOMFFtaDVRaXhGUVVGSlF5eEhRVUZQWnpKQ0xFVkJRVkZxUlN4VlFVRlZMM2hDTEVkQlJTOUNMRTlCUVU5RUxFVkJabE41YzBNc1EwRkJUWHB6UXl4SExEaENRVEpDZUVKcE1rSXNSVUZCVVdwRkxGVkJRVlY2YTBJc1IwRkRiRUl3YjBJc1JVRkJVV3BGTEZWQlFWVnZUeXhwUWtGQmJVSXNVMEZCVTNOTkxFVkJRVTk2Y0VJc1IwRkpia1FzVDBGSVFYSmxMRXRCUVVzclRDeFhRVUZoTDB3c1MwRkJTeXRNTEZsQlFXTXNTVUZEY0VNdlRDeExRVUZMSzB3c1YwRkJWeXhKUVVGTkt6ZENMRWRCUVZNNWJrTXNTMEZCU3l0TUxGZEJRVmNzU1VGQlRTczNRaXhKUVVGVkxFbEJRemRFZW5KRExFdEJRVXRuYVVJc1IwRkRSSEpsTEUxQllWUnhlRUlzUlVGQlVXcEZMRlZCUVZWTkxFdEJRVThzVTBGQlUyOWhMRVZCUVU5NmNFSXNSMEZEZGtNc1UwRkJVekZXTEVsQlExQXpTU3hMUVVGTE5Fa3NTVUZCU1dzdlFpeEZRVUZQYmk5Q0xFZEJRMmhDTUZZc1JVRkJSeTlvUWl4TlFVRk5NRVFzUzBGQlRYUkVMRmRCUzJwQ0xFOUJSa0ZwVFN4RlFVRkhNRllzUjBGQlMwRXNSVUZEVW5KbExFdEJRVXN5U1N4SFFVRkhiUzlDTEVWQlFVOXVMMElzUjBGRFVqTkpMRTFCWVZSeGVFSXNSVUZCVVdwRkxGVkJRVlY0YTBJc1NVRkRiRUo1YjBJc1JVRkJVV3BGTEZWQlFWVlBMR1ZCUTJ4Q01FUXNSVUZCVVdwRkxGVkJRVlZSTEcxQ1FVTnNRbmxFTEVWQlFWRnFSU3hWUVVGVmNWRXNiMEpCUVhOQ0xGTkJRVk54U3l4RlFVRlBlbkJDTEVkQlNYUkVMRWRCU0VGeVpTeExRVUZMSzB3c1YwRkJZUzlNTEV0QlFVc3JUQ3haUVVGakxFZEJSMnBETEVkQlFVdHlVQ3hWUVVGVmRFTXNUMEZGYWtJc1QwRkVRVFJHTEV0QlFVc3JUQ3hYUVVGaExFZEJRMWd2VEN4TFFVbFVMRWxCVlVrMGFFTXNSVUZXUVcxSExFVkJRVmt2YmtNc1MwRkJTeXRNTEZkQlFWY3NTVUZCVFNzM1FpeEhRVU4wUXl4SlFVRkxReXhGUVVGWExFOUJRVTh2YmtNc1MwRkhka0lzUjBGQlNTeEhRVUZMZEVRc1ZVRkJWWFJETEU5QlJXcENMR05CUkU4MFJpeExRVUZMSzB3c1YwRkJWeXhKUVVGTkt6ZENMRWRCUTNSQ09XNURMRXRCUzFRc1NVRkJTeXhKUVVGSmRrUXNSVUZCU1N4RlFVRkhRU3hGUVVGSmMzSkRMRVZCUVZVemRFTXNUMEZCVVhGRExFbEJSWEJETEVsQlJFRnRiRU1zUlVGQlMyMUhMRVZCUVZWMGNrTXNUVUZEU2pSb1FpeEhRVUZOZFdwQ0xFVkJRVWQyYWtJc1MwRkJUMEVzUlVGQlNTeERRVU0zUWpCd1FpeEZRVUZWTTI5RExFOUJRVTh6UXl4RlFVRkhMRWRCUTNCQ0xFMUJWVW9zVDBGS2VVSXNTVUZCY2tKemNrTXNSVUZCVlROMFF5eGxRVU5NTkVZc1MwRkJTeXRNTEZkQlFWY3NTVUZCVFNzM1FpeEhRVWQ0UWpsdVF5eE5RVmRVY1hoQ0xFVkJRVkZxUlN4VlFVRlZOV2hDTEV0QlFVOHNVMEZCVTNNNFFpeEhRVU5vUXpsdVF5eExRVUZMSzB3c1YwRkJZUzlNTEV0QlFVc3JUQ3haUVVGakxFZEJTM0pETEVsQlNFRXNTVUZCU1hoS0xFVkJRVThzU1VGQlNXUXNUVUZCVFM5RkxGVkJRVlYwUXl4UFFVRlRMRWRCUTNCRE1uUkRMRVZCUVZrdmJrTXNTMEZCU3l0TUxGZEJRVmNzU1VGQlRTczNRaXhIUVVVM1FuSnlReXhGUVVGSkxFVkJRVWRCTEVWQlFVbERMRlZCUVZWMFF5eFBRVUZSY1VNc1NVRkRjRU00Uml4RlFVRkxPVVlzUlVGQlNTeEhRVUZMUXl4VlFVRlZSQ3hIUVVjeFFpeEhRVUZKYzNKRExFVkJSVWNzUTBGQlNYUnlReXhGUVVGSkxFVkJRV0lzU1VGQlN5eEpRVUZYTmtzc1IwRkVhRUo1WjBNc1JVRkJXVUVzUlVGQlZXeHdReXhOUVVGTkxFbEJRMGw2UlN4UFFVRlJjVU1zUlVGQlNUWkxMRWxCUVU4M1N5eEZRVU5xUkhOeVF5eEZRVUZWZEhKRExFZEJRVWRJTEUxQlFVMHdSQ3hMUVVGTmRVTXNSMEZKTjBJc1QwRkJUM1pETEUxQlNWUnhlRUlzUlVGQlVXcEZMRlZCUVZWelJ5eGhRVUZsY2tNc1JVRkJVV3BGTEZWQlFWVTFhRUlzUzBGVmJrUTJiRUlzUlVGQlVXcEZMRlZCUVZVM2RFSXNWVUZCV1N4VFFVRlRkVzlETEVkQlJYSkRMRTlCUkVFNWJrTXNTMEZCU3l0TUxGZEJRV0V2VEN4TFFVRkxLMHdzV1VGQll5eEhRVU01UWk5TUxFdEJRVXNyVEN4WFFVRlhMRWxCUVUwck4wSXNTVUZCVlN4SlFWZDZRM3BYTEVWQlFWRnFSU3hWUVVGVk5HRXNZVUZCWlN4VFFVRlRSaXhIUVVONFF5eFJRVUZWT1c1RExFdEJRVXRVTEZWQlFWVjFiME1zUjBGQlR6RjBReXhWUTNSTE9VSTJkRU1zUlVGQk1rSXNSMEZITDBJc1UwRkJVME1zUlVGQmIwSkRMRWRCUlRWQ0xFbEJRVWxETEVWQlFXVklMRVZCUVhsQ1JTeEhRVU0xUXl4UlFVRnhRamR3UXl4SlFVRnFRamh3UXl4RlFVTklMRTlCUVU5QkxFVkJRV0Z3ZFVNc1VVRkhja0lzU1VGQlNVUXNSVUZCVTJ0MVF5eEZRVUY1UWtVc1IwRkJXU3hEUVVkcVJHNTFReXhSUVVGVExFbEJUMVlzVDBGSVFYRjFReXhGUVVGdlFrWXNSMEZCVlRkb1F5eExRVUZMZGswc1JVRkJUME1zVVVGQlUwUXNSVUZCVVVFc1JVRkJUME1zVVVGQlUydDFReXhIUVVkd1JXNTFReXhGUVVGUFF5eFJRM0JDWm10MVF5eEZRVUZ2UWpWMVF5eEZRVUZKTEVOQlFVTlZMRVZCUVZOemRVTXNTMEZEYWtNc1NVRkJTU3hKUVVGSmFuUkRMRXRCUVU5cGRFTXNSVUZEV0Vvc1JVRkJiMEo0V0N4RlFVRkZORmdzUlVGQldXcDBReXhMUVVGVE5uTkRMRVZCUVc5Q2VGZ3NSVUZCUlRFeVFpeEZRVUZUY1VJc1NVRkROVVZGTEU5QlFVOURMR1ZCUVdWNFFpeEZRVUZUY1VJc1JVRkJTeXhEUVVGRlNTeFpRVUZaTEVWQlFVMW5UQ3hKUVVGTE5taERMRVZCUVZkcWRFTXNUVU5LTTBVMmMwTXNSVUZCYjBKNFdDeEZRVUZKTEVOQlFVTjBNVUlzUlVGQlMyMTBReXhKUVVGVmFIUkRMRTlCUVU4MmVFSXNWVUZCVlhaTExHVkJRV1YyWXl4TFFVRkxiRXdzUlVGQlMyMTBReXhIUTBOc1Jrd3NSVUZCYjBJemEwTXNSVUZCUzNaS0xFbEJRMGdzYjBKQlFWaHJSQ3hSUVVFd1FrRXNUMEZCVDNOeVF5eGhRVU14UTJwMFF5eFBRVUZQUXl4bFFVRmxlRUlzUlVGQlUydEVMRTlCUVU5emNrTXNXVUZCWVN4RFFVRkZiSFJETEUxQlFVOHNWMEZGTjBSRExFOUJRVTlETEdWQlFXVjRRaXhGUVVGVExHRkJRV01zUTBGQlJYTkNMRTlCUVU4c1MwTkdOMEkwYzBNc1JVRkJiMElzVHlJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXRjeTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12UUdKaFltVnNMM0oxYm5ScGJXVXZhR1ZzY0dWeWN5OWxjMjB2WkdWbWFXNWxVSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCaVlXSmxiQzl5ZFc1MGFXMWxMMmhsYkhCbGNuTXZaWE50TDI5aWFtVmpkRk53Y21WaFpESXVhbk1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZibTlrWlY5dGIyUjFiR1Z6TDNKbFpIVjRMMlZ6TDNKbFpIVjRMbXB6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMMjV2WkdWZmJXOWtkV3hsY3k5emIyTnJaWFF1YVc4dFkyeHBaVzUwTDI1dlpHVmZiVzlrZFd4bGN5OWtaV0oxWnk5emNtTXZZbkp2ZDNObGNpNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12YzI5amEyVjBMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdlpHVmlkV2N2YzNKakwyTnZiVzF2Ymk1cWN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5dWIyUmxYMjF2WkhWc1pYTXZjMjlqYTJWMExtbHZMV05zYVdWdWRDOXViMlJsWDIxdlpIVnNaWE12Wlc1bmFXNWxMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdlpHVmlkV2N2YzNKakwySnliM2R6WlhJdWFuTWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmJtOWtaVjl0YjJSMWJHVnpMM052WTJ0bGRDNXBieTFqYkdsbGJuUXZibTlrWlY5dGIyUjFiR1Z6TDJWdVoybHVaUzVwYnkxamJHbGxiblF2Ym05a1pWOXRiMlIxYkdWekwyUmxZblZuTDNOeVl5OWpiMjF0YjI0dWFuTWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmJtOWtaVjl0YjJSMWJHVnpMM052WTJ0bGRDNXBieTFqYkdsbGJuUXZibTlrWlY5dGIyUjFiR1Z6TDNOdlkydGxkQzVwYnkxd1lYSnpaWEl2Ym05a1pWOXRiMlIxYkdWekwyUmxZblZuTDNOeVl5OWljbTkzYzJWeUxtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwyNXZaR1ZmYlc5a2RXeGxjeTl6YjJOclpYUXVhVzh0WTJ4cFpXNTBMMjV2WkdWZmJXOWtkV3hsY3k5emIyTnJaWFF1YVc4dGNHRnljMlZ5TDI1dlpHVmZiVzlrZFd4bGN5OWtaV0oxWnk5emNtTXZZMjl0Ylc5dUxtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTlYY3k1MGN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5emNtTXZZV04wYVc5dWN5OTNjeTloY0dsVWIxTmxjblpsY2xKbGNYVmxjM1F1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwyRmpkR2x2Ym5NdmQzTXZjMlZ5ZG1WeVZHOUJjR2xDY21Ga1kyRnpkQzUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdllXTjBhVzl1Y3k5M2N5OXpaWEoyWlhKVWIwRndhVVZ0YVhRdWRITWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmMzSmpMMjFoY0ZSdlUzUmhkR1ZVYjFCeWIzQnpMM04wYjNKaFoyVXVkSE1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZjM0pqTDIxcFpHUnNaWGRoY21VdmFXNWtaWGd1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzSmxaSFZqWlhKekwyRnVZV3g1ZW1VdWRITWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmMzSmpMM0psWkhWalpYSnpMMkZ3YVV4dlp5NTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXpjbU12Y21Wa2RXTmxjbk12WVhCd0xuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl5WldSMVkyVnljeTlpYjI5MFQzQjBhVzl1TG5Seklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDNOeVl5OXlaV1IxWTJWeWN5OXBibVJsZUM1MGN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5emNtTXZjbVZrZFdObGNuTXZjRzl6ZEhNdWRITWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmMzSmpMM0psWkhWalpYSnpMM0J2YzNSelEyaHBiR1F1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzSmxaSFZqWlhKekwzQnZjM1J6VFhWc2RHa3VkSE1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZjM0pqTDNKbFpIVmpaWEp6TDNCdmMzUnpVMmx1WjJ4bExuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl5WldSMVkyVnljeTl3YjNOMGMxUnBiV1ZzYVc1bExuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl5WldSMVkyVnljeTl3YjNOMGMxUnBiV1ZzYVc1bFUzUnZZMnN1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzSmxaSFZqWlhKekwzQnZjM1J6VkdsdFpXeHBibVZhWlhKdkxuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl5WldSMVkyVnljeTl3YjNOMGMxUnBiV1ZzYVc1bFdtVnliMEZtZEdWeUxuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl5WldSMVkyVnljeTl5WVc1cmN5NTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXpjbU12Y21Wa2RXTmxjbk12YzJWMGRHbHVaeTUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdmNtVmtkV05sY25NdmRHaHlaV0ZrTG5Seklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDNOeVl5OXlaV1IxWTJWeWN5OTBhSEpsWVdSRVpYUmhhV3d1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzSmxaSFZqWlhKekwzUm9jbVZoWkhNdWRITWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmMzSmpMM0psWkhWalpYSnpMM1IxYm1WRGFDNTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXpjbU12Y21Wa2RXTmxjbk12ZFhObGNpNTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXpjbU12YzNSdmNtVXZRV04wYVc5dVRHOW5jeTUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdmMzUnZjbVV2UVc1aGJIbDZaUzUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdmMzUnZjbVV2UVhCd0xuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl6ZEc5eVpTOUNiMjkwVDNCMGFXOXVMblJ6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMM055WXk5emRHOXlaUzlOWlc1MVRHOW5jeTUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdmMzUnZjbVV2VUc5emRDNTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXpjbU12YzNSdmNtVXZVRzl6ZEUxMWJIUnBMblJ6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMM055WXk5emRHOXlaUzlRYjNOMGN5NTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXpjbU12YzNSdmNtVXZVRzl6ZEhOVGFXNW5iR1V1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzTjBiM0psTDFCdmMzUnpWR2x0Wld4cGJtVXVkSE1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZjM0pqTDNOMGIzSmxMMUJ2YzNSelZHbHRaV3hwYm1WVGRHOWpheTUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdmMzUnZjbVV2VUc5emRITlVhVzFsYkdsdVpWcGxjbTh1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzTjBiM0psTDFCdmMzUnpWR2x0Wld4cGJtVmFaWEp2UVdaMFpYSXVkSE1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZjM0pqTDNOMGIzSmxMMUpoYm10ekxuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl6ZEc5eVpTOVRaWFIwYVc1bkxuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwzTnlZeTl6ZEc5eVpTOVVhSEpsWVdRdWRITWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmMzSmpMM04wYjNKbEwxUm9jbVZoWkhNdWRITWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmMzSmpMM04wYjNKbEwxUjFibVZEYUM1MGN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5emNtTXZjM1J2Y21VdlZYTmxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl6Y21NdmMzUnZjbVV2WVhCcFUzUnZjbVV1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2YzNKakwzTjBiM0psTDJsdVpHVjRMblJ6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMM055WXk5M2N5NWhjR2t1ZDI5eWEyVnlMblJ6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMaTlqYjIxdGIyNHZjM0pqTDFCdmMzUk5aWE56WVdkbExuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUxpOWpiMjF0YjI0dmMzSmpMMU5qYUdWdFlTNTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpNHZZMjl0Ylc5dUwzTnlZeTlUWlhGMVpXNWpaUzUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTR2WTI5dGJXOXVMM055WXk5amIyNW1MblJ6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMaTlqYjIxdGIyNHZjM0pqTDJSbFptbHVaUzUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTR2WTI5dGJXOXVMM055WXk5bGJXOTBhVzl1Y3k5cGJtUmxlQzUwY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTR2WTI5dGJXOXVMM055WXk5bGJXOTBhVzl1Y3k5dGIyUmxiQzlRYkdGcGJpNTBjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpNHZZMjl0Ylc5dUwzTnlZeTlsYlc5MGFXOXVjeTl0YjJSbGJDOVNkWE56Wld4c0xuUnpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUxpOWpiMjF0YjI0dmMzSmpMMlZ0YjNScGIyNXpMMjF2WkdWc0wxSjFjM05sYkd4VGFXMXdiR1V1ZEhNaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR1TDJOdmJXMXZiaTl6Y21NdlpXMXZkR2x2Ym5NdmJXOWtaV3d2YVc1a1pYZ3VkSE1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHVMMk52YlcxdmJpOXViMlJsWDIxdlpIVnNaWE12YjNNdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR1TDJOdmJXMXZiaTl1YjJSbFgyMXZaSFZzWlhNdmNISnZZMlZ6Y3k5aWNtOTNjMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwySjFhV3hrTDJOcWN5OWpiMjUwY21saUwySmhZMnR2TWk1cWN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5dWIyUmxYMjF2WkhWc1pYTXZjMjlqYTJWMExtbHZMV05zYVdWdWRDOWlkV2xzWkM5amFuTXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTHk0dmJtOWtaVjl0YjJSMWJHVnpMM052WTJ0bGRDNXBieTFqYkdsbGJuUXZZblZwYkdRdlkycHpMMjFoYm1GblpYSXVhbk1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZibTlrWlY5dGIyUjFiR1Z6TDNOdlkydGxkQzVwYnkxamJHbGxiblF2WW5WcGJHUXZZMnB6TDI5dUxtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwyNXZaR1ZmYlc5a2RXeGxjeTl6YjJOclpYUXVhVzh0WTJ4cFpXNTBMMkoxYVd4a0wyTnFjeTl6YjJOclpYUXVhbk1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZibTlrWlY5dGIyUjFiR1Z6TDNOdlkydGxkQzVwYnkxamJHbGxiblF2WW5WcGJHUXZZMnB6TDNWeWJDNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12YzI5amEyVjBMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdlpXNW5hVzVsTG1sdkxXTnNhV1Z1ZEM5aWRXbHNaQzlqYW5NdlkyOXVkSEpwWWk5b1lYTXRZMjl5Y3k1cWN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5dWIyUmxYMjF2WkhWc1pYTXZjMjlqYTJWMExtbHZMV05zYVdWdWRDOXViMlJsWDIxdlpIVnNaWE12Wlc1bmFXNWxMbWx2TFdOc2FXVnVkQzlpZFdsc1pDOWphbk12WTI5dWRISnBZaTl3WVhKelpYRnpMbXB6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMMjV2WkdWZmJXOWtkV3hsY3k5emIyTnJaWFF1YVc4dFkyeHBaVzUwTDI1dlpHVmZiVzlrZFd4bGN5OWxibWRwYm1VdWFXOHRZMnhwWlc1MEwySjFhV3hrTDJOcWN5OWpiMjUwY21saUwzQmhjbk5sZFhKcExtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwyNXZaR1ZmYlc5a2RXeGxjeTl6YjJOclpYUXVhVzh0WTJ4cFpXNTBMMjV2WkdWZmJXOWtkV3hsY3k5bGJtZHBibVV1YVc4dFkyeHBaVzUwTDJKMWFXeGtMMk5xY3k5amIyNTBjbWxpTDNsbFlYTjBMbXB6SWl3aWQyVmljR0ZqYXpvdkwzUmhiR3R1TFdGd2FTOHVMMjV2WkdWZmJXOWtkV3hsY3k5emIyTnJaWFF1YVc4dFkyeHBaVzUwTDI1dlpHVmZiVzlrZFd4bGN5OWxibWRwYm1VdWFXOHRZMnhwWlc1MEwySjFhV3hrTDJOcWN5OW5iRzlpWVd4VWFHbHpMbUp5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZibTlrWlY5dGIyUjFiR1Z6TDNOdlkydGxkQzVwYnkxamJHbGxiblF2Ym05a1pWOXRiMlIxYkdWekwyVnVaMmx1WlM1cGJ5MWpiR2xsYm5RdlluVnBiR1F2WTJwekwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwyNXZaR1ZmYlc5a2RXeGxjeTlsYm1kcGJtVXVhVzh0WTJ4cFpXNTBMMkoxYVd4a0wyTnFjeTl6YjJOclpYUXVhbk1pTENKM1pXSndZV05yT2k4dmRHRnNhMjR0WVhCcEx5NHZibTlrWlY5dGIyUjFiR1Z6TDNOdlkydGxkQzVwYnkxamJHbGxiblF2Ym05a1pWOXRiMlIxYkdWekwyVnVaMmx1WlM1cGJ5MWpiR2xsYm5RdlluVnBiR1F2WTJwekwzUnlZVzV6Y0c5eWRDNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12YzI5amEyVjBMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdlpXNW5hVzVsTG1sdkxXTnNhV1Z1ZEM5aWRXbHNaQzlqYW5NdmRISmhibk53YjNKMGN5OXBibVJsZUM1cWN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2TGk5dWIyUmxYMjF2WkhWc1pYTXZjMjlqYTJWMExtbHZMV05zYVdWdWRDOXViMlJsWDIxdlpIVnNaWE12Wlc1bmFXNWxMbWx2TFdOc2FXVnVkQzlpZFdsc1pDOWphbk12ZEhKaGJuTndiM0owY3k5d2IyeHNhVzVuTG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwyNXZaR1ZmYlc5a2RXeGxjeTlsYm1kcGJtVXVhVzh0WTJ4cFpXNTBMMkoxYVd4a0wyTnFjeTkwY21GdWMzQnZjblJ6TDNkbFluTnZZMnRsZEMxamIyNXpkSEoxWTNSdmNpNWljbTkzYzJWeUxtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwyNXZaR1ZmYlc5a2RXeGxjeTl6YjJOclpYUXVhVzh0WTJ4cFpXNTBMMjV2WkdWZmJXOWtkV3hsY3k5bGJtZHBibVV1YVc4dFkyeHBaVzUwTDJKMWFXeGtMMk5xY3k5MGNtRnVjM0J2Y25SekwzZGxZbk52WTJ0bGRDNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12YzI5amEyVjBMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdlpXNW5hVzVsTG1sdkxXTnNhV1Z1ZEM5aWRXbHNaQzlqYW5NdmRISmhibk53YjNKMGN5OTRiV3hvZEhSd2NtVnhkV1Z6ZEM1aWNtOTNjMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwyNXZaR1ZmYlc5a2RXeGxjeTlsYm1kcGJtVXVhVzh0WTJ4cFpXNTBMMkoxYVd4a0wyTnFjeTkxZEdsc0xtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwyNXZaR1ZmYlc5a2RXeGxjeTl6YjJOclpYUXVhVzh0WTJ4cFpXNTBMMjV2WkdWZmJXOWtkV3hsY3k5bGJtZHBibVV1YVc4dGNHRnljMlZ5TDJKMWFXeGtMMk5xY3k5amIyMXRiMjV6TG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwyNXZaR1ZmYlc5a2RXeGxjeTlsYm1kcGJtVXVhVzh0Y0dGeWMyVnlMMkoxYVd4a0wyTnFjeTlqYjI1MGNtbGlMMkpoYzJVMk5DMWhjbkpoZVdKMVptWmxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZMaTl1YjJSbFgyMXZaSFZzWlhNdmMyOWphMlYwTG1sdkxXTnNhV1Z1ZEM5dWIyUmxYMjF2WkhWc1pYTXZaVzVuYVc1bExtbHZMWEJoY25ObGNpOWlkV2xzWkM5amFuTXZaR1ZqYjJSbFVHRmphMlYwTG1KeWIzZHpaWEl1YW5NaUxDSjNaV0p3WVdOck9pOHZkR0ZzYTI0dFlYQnBMeTR2Ym05a1pWOXRiMlIxYkdWekwzTnZZMnRsZEM1cGJ5MWpiR2xsYm5RdmJtOWtaVjl0YjJSMWJHVnpMMlZ1WjJsdVpTNXBieTF3WVhKelpYSXZZblZwYkdRdlkycHpMMlZ1WTI5a1pWQmhZMnRsZEM1aWNtOTNjMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwyNXZaR1ZmYlc5a2RXeGxjeTlsYm1kcGJtVXVhVzh0Y0dGeWMyVnlMMkoxYVd4a0wyTnFjeTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12YzI5amEyVjBMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdmMyOWphMlYwTG1sdkxYQmhjbk5sY2k5aWRXbHNaQzlqYW5NdlltbHVZWEo1TG1weklpd2lkMlZpY0dGamF6b3ZMM1JoYkd0dUxXRndhUzh1TDI1dlpHVmZiVzlrZFd4bGN5OXpiMk5yWlhRdWFXOHRZMnhwWlc1MEwyNXZaR1ZmYlc5a2RXeGxjeTl6YjJOclpYUXVhVzh0Y0dGeWMyVnlMMkoxYVd4a0wyTnFjeTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk5MFlXeHJiaTFoY0drdkxpOXViMlJsWDIxdlpIVnNaWE12YzI5amEyVjBMbWx2TFdOc2FXVnVkQzl1YjJSbFgyMXZaSFZzWlhNdmMyOWphMlYwTG1sdkxYQmhjbk5sY2k5aWRXbHNaQzlqYW5NdmFYTXRZbWx1WVhKNUxtcHpJaXdpZDJWaWNHRmphem92TDNSaGJHdHVMV0Z3YVM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBYzI5amEyVjBMbWx2TDJOdmJYQnZibVZ1ZEMxbGJXbDBkR1Z5TDJsdVpHVjRMbTFxY3lJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZkMlZpY0dGamF5OWliMjkwYzNSeVlYQWlMQ0ozWldKd1lXTnJPaTh2ZEdGc2EyNHRZWEJwTDNkbFluQmhZMnN2Y25WdWRHbHRaUzlrWldacGJtVWdjSEp2Y0dWeWRIa2daMlYwZEdWeWN5SXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2ZDJWaWNHRmpheTl5ZFc1MGFXMWxMMmhoYzA5M2JsQnliM0JsY25SNUlITm9iM0owYUdGdVpDSXNJbmRsWW5CaFkyczZMeTkwWVd4cmJpMWhjR2t2ZDJWaWNHRmpheTl5ZFc1MGFXMWxMMjFoYTJVZ2JtRnRaWE53WVdObElHOWlhbVZqZENJc0luZGxZbkJoWTJzNkx5OTBZV3hyYmkxaGNHa3ZkMlZpY0dGamF5OXpkR0Z5ZEhWd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dTR1ZzY0dWeWN5NWNiaUFxTDF4dVhHNTJZWElnY3lBOUlERXdNREE3WEc1MllYSWdiU0E5SUhNZ0tpQTJNRHRjYm5aaGNpQm9JRDBnYlNBcUlEWXdPMXh1ZG1GeUlHUWdQU0JvSUNvZ01qUTdYRzUyWVhJZ2R5QTlJR1FnS2lBM08xeHVkbUZ5SUhrZ1BTQmtJQ29nTXpZMUxqSTFPMXh1WEc0dktpcGNiaUFxSUZCaGNuTmxJRzl5SUdadmNtMWhkQ0IwYUdVZ1oybDJaVzRnWUhaaGJHQXVYRzRnS2x4dUlDb2dUM0IwYVc5dWN6cGNiaUFxWEc0Z0tpQWdMU0JnYkc5dVoyQWdkbVZ5WW05elpTQm1iM0p0WVhSMGFXNW5JRnRtWVd4elpWMWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjN4T2RXMWlaWEo5SUhaaGJGeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpYVnh1SUNvZ1FIUm9jbTkzY3lCN1JYSnliM0o5SUhSb2NtOTNJR0Z1SUdWeWNtOXlJR2xtSUhaaGJDQnBjeUJ1YjNRZ1lTQnViMjR0Wlcxd2RIa2djM1J5YVc1bklHOXlJR0VnYm5WdFltVnlYRzRnS2lCQWNtVjBkWEp1SUh0VGRISnBibWQ4VG5WdFltVnlmVnh1SUNvZ1FHRndhU0J3ZFdKc2FXTmNiaUFxTDF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtIWmhiQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JpQWdkbUZ5SUhSNWNHVWdQU0IwZVhCbGIyWWdkbUZzTzF4dUlDQnBaaUFvZEhsd1pTQTlQVDBnSjNOMGNtbHVaeWNnSmlZZ2RtRnNMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjR0Z5YzJVb2RtRnNLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsSUQwOVBTQW5iblZ0WW1WeUp5QW1KaUJwYzBacGJtbDBaU2gyWVd3cEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5d2RHbHZibk11Ykc5dVp5QS9JR1p0ZEV4dmJtY29kbUZzS1NBNklHWnRkRk5vYjNKMEtIWmhiQ2s3WEc0Z0lIMWNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDZDJZV3dnYVhNZ2JtOTBJR0VnYm05dUxXVnRjSFI1SUhOMGNtbHVaeUJ2Y2lCaElIWmhiR2xrSUc1MWJXSmxjaTRnZG1Gc1BTY2dLMXh1SUNBZ0lDQWdTbE5QVGk1emRISnBibWRwWm5rb2RtRnNLVnh1SUNBcE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCUVlYSnpaU0IwYUdVZ1oybDJaVzRnWUhOMGNtQWdZVzVrSUhKbGRIVnliaUJ0YVd4c2FYTmxZMjl1WkhNdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhOMGNseHVJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmVnh1SUNvZ1FHRndhU0J3Y21sMllYUmxYRzRnS2k5Y2JseHVablZ1WTNScGIyNGdjR0Z5YzJVb2MzUnlLU0I3WEc0Z0lITjBjaUE5SUZOMGNtbHVaeWh6ZEhJcE8xeHVJQ0JwWmlBb2MzUnlMbXhsYm1kMGFDQStJREV3TUNrZ2UxeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVJQ0IyWVhJZ2JXRjBZMmdnUFNBdlhpZ3RQeWcvT2x4Y1pDc3BQMXhjTGo5Y1hHUXJLU0FxS0cxcGJHeHBjMlZqYjI1a2N6OThiWE5sWTNNL2ZHMXpmSE5sWTI5dVpITS9mSE5sWTNNL2ZITjhiV2x1ZFhSbGN6OThiV2x1Y3o5OGJYeG9iM1Z5Y3o5OGFISnpQM3hvZkdSaGVYTS9mR1I4ZDJWbGEzTS9mSGQ4ZVdWaGNuTS9mSGx5Y3o5OGVTay9KQzlwTG1WNFpXTW9YRzRnSUNBZ2MzUnlYRzRnSUNrN1hHNGdJR2xtSUNnaGJXRjBZMmdwSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JpQWdkbUZ5SUc0Z1BTQndZWEp6WlVac2IyRjBLRzFoZEdOb1d6RmRLVHRjYmlBZ2RtRnlJSFI1Y0dVZ1BTQW9iV0YwWTJoYk1sMGdmSHdnSjIxekp5a3VkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdjM2RwZEdOb0lDaDBlWEJsS1NCN1hHNGdJQ0FnWTJGelpTQW5lV1ZoY25Nbk9seHVJQ0FnSUdOaGMyVWdKM2xsWVhJbk9seHVJQ0FnSUdOaGMyVWdKM2x5Y3ljNlhHNGdJQ0FnWTJGelpTQW5lWEluT2x4dUlDQWdJR05oYzJVZ0oza25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNGdLaUI1TzF4dUlDQWdJR05oYzJVZ0ozZGxaV3R6SnpwY2JpQWdJQ0JqWVhObElDZDNaV1ZySnpwY2JpQWdJQ0JqWVhObElDZDNKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQnVJQ29nZHp0Y2JpQWdJQ0JqWVhObElDZGtZWGx6SnpwY2JpQWdJQ0JqWVhObElDZGtZWGtuT2x4dUlDQWdJR05oYzJVZ0oyUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNGdLaUJrTzF4dUlDQWdJR05oYzJVZ0oyaHZkWEp6SnpwY2JpQWdJQ0JqWVhObElDZG9iM1Z5SnpwY2JpQWdJQ0JqWVhObElDZG9jbk1uT2x4dUlDQWdJR05oYzJVZ0oyaHlKenBjYmlBZ0lDQmpZWE5sSUNkb0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCdUlDb2dhRHRjYmlBZ0lDQmpZWE5sSUNkdGFXNTFkR1Z6SnpwY2JpQWdJQ0JqWVhObElDZHRhVzUxZEdVbk9seHVJQ0FnSUdOaGMyVWdKMjFwYm5Nbk9seHVJQ0FnSUdOaGMyVWdKMjFwYmljNlhHNGdJQ0FnWTJGelpTQW5iU2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiaUFxSUcwN1hHNGdJQ0FnWTJGelpTQW5jMlZqYjI1a2N5YzZYRzRnSUNBZ1kyRnpaU0FuYzJWamIyNWtKenBjYmlBZ0lDQmpZWE5sSUNkelpXTnpKenBjYmlBZ0lDQmpZWE5sSUNkelpXTW5PbHh1SUNBZ0lHTmhjMlVnSjNNbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUc0Z0tpQnpPMXh1SUNBZ0lHTmhjMlVnSjIxcGJHeHBjMlZqYjI1a2N5YzZYRzRnSUNBZ1kyRnpaU0FuYldsc2JHbHpaV052Ym1Rbk9seHVJQ0FnSUdOaGMyVWdKMjF6WldOekp6cGNiaUFnSUNCallYTmxJQ2R0YzJWakp6cGNiaUFnSUNCallYTmxJQ2R0Y3ljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnYmp0Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRk5vYjNKMElHWnZjbTFoZENCbWIzSWdZRzF6WUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYlhOY2JpQXFJRUJ5WlhSMWNtNGdlMU4wY21sdVozMWNiaUFxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHWnRkRk5vYjNKMEtHMXpLU0I3WEc0Z0lIWmhjaUJ0YzBGaWN5QTlJRTFoZEdndVlXSnpLRzF6S1R0Y2JpQWdhV1lnS0cxelFXSnpJRDQ5SUdRcElIdGNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNXliM1Z1WkNodGN5QXZJR1FwSUNzZ0oyUW5PMXh1SUNCOVhHNGdJR2xtSUNodGMwRmljeUErUFNCb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjbTkxYm1Rb2JYTWdMeUJvS1NBcklDZG9KenRjYmlBZ2ZWeHVJQ0JwWmlBb2JYTkJZbk1nUGowZ2JTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCTllYUm9Mbkp2ZFc1a0tHMXpJQzhnYlNrZ0t5QW5iU2M3WEc0Z0lIMWNiaUFnYVdZZ0tHMXpRV0p6SUQ0OUlITXBJSHRjYmlBZ0lDQnlaWFIxY200Z1RXRjBhQzV5YjNWdVpDaHRjeUF2SUhNcElDc2dKM01uTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ0Y3lBcklDZHRjeWM3WEc1OVhHNWNiaThxS2x4dUlDb2dURzl1WnlCbWIzSnRZWFFnWm05eUlHQnRjMkF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRzF6WEc0Z0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOVhHNGdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCbWJYUk1iMjVuS0cxektTQjdYRzRnSUhaaGNpQnRjMEZpY3lBOUlFMWhkR2d1WVdKektHMXpLVHRjYmlBZ2FXWWdLRzF6UVdKeklENDlJR1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjR3gxY21Gc0tHMXpMQ0J0YzBGaWN5d2daQ3dnSjJSaGVTY3BPMXh1SUNCOVhHNGdJR2xtSUNodGMwRmljeUErUFNCb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCc2RYSmhiQ2h0Y3l3Z2JYTkJZbk1zSUdnc0lDZG9iM1Z5SnlrN1hHNGdJSDFjYmlBZ2FXWWdLRzF6UVdKeklENDlJRzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjR3gxY21Gc0tHMXpMQ0J0YzBGaWN5d2diU3dnSjIxcGJuVjBaU2NwTzF4dUlDQjlYRzRnSUdsbUlDaHRjMEZpY3lBK1BTQnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnNkWEpoYkNodGN5d2diWE5CWW5Nc0lITXNJQ2R6WldOdmJtUW5LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiWE1nS3lBbklHMXpKenRjYm4xY2JseHVMeW9xWEc0Z0tpQlFiSFZ5WVd4cGVtRjBhVzl1SUdobGJIQmxjaTVjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJ3YkhWeVlXd29iWE1zSUcxelFXSnpMQ0J1TENCdVlXMWxLU0I3WEc0Z0lIWmhjaUJwYzFCc2RYSmhiQ0E5SUcxelFXSnpJRDQ5SUc0Z0tpQXhMalU3WEc0Z0lISmxkSFZ5YmlCTllYUm9Mbkp2ZFc1a0tHMXpJQzhnYmlrZ0t5QW5JQ2NnS3lCdVlXMWxJQ3NnS0dselVHeDFjbUZzSUQ4Z0ozTW5JRG9nSnljcE8xeHVmVnh1SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWDJSbFptbHVaVkJ5YjNCbGNuUjVLRzlpYWl3Z2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNCcFppQW9hMlY1SUdsdUlHOWlhaWtnZTF4dUlDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodlltb3NJR3RsZVN3Z2UxeHVJQ0FnSUNBZ2RtRnNkV1U2SUhaaGJIVmxMRnh1SUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsWEc0Z0lDQWdmU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYjJKcVcydGxlVjBnUFNCMllXeDFaVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ2WW1vN1hHNTlJaXdpYVcxd2IzSjBJR1JsWm1sdVpWQnliM0JsY25SNUlHWnliMjBnWENJdUwyUmxabWx1WlZCeWIzQmxjblI1TG1welhDSTdYRzVjYm1aMWJtTjBhVzl1SUc5M2JrdGxlWE1vYjJKcVpXTjBMQ0JsYm5WdFpYSmhZbXhsVDI1c2VTa2dlMXh1SUNCMllYSWdhMlY1Y3lBOUlFOWlhbVZqZEM1clpYbHpLRzlpYW1WamRDazdYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1wSUh0Y2JpQWdJQ0IyWVhJZ2MzbHRZbTlzY3lBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9iMkpxWldOMEtUdGNibHh1SUNBZ0lHbG1JQ2hsYm5WdFpYSmhZbXhsVDI1c2VTa2dlMXh1SUNBZ0lDQWdjM2x0WW05c2N5QTlJSE41YldKdmJITXVabWxzZEdWeUtHWjFibU4wYVc5dUlDaHplVzBwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9iMkpxWldOMExDQnplVzBwTG1WdWRXMWxjbUZpYkdVN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCclpYbHpMbkIxYzJndVlYQndiSGtvYTJWNWN5d2djM2x0WW05c2N5azdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdhMlY1Y3p0Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdYMjlpYW1WamRGTndjbVZoWkRJb2RHRnlaMlYwS1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJSE52ZFhKalpTQTlJR0Z5WjNWdFpXNTBjMXRwWFNBaFBTQnVkV3hzSUQ4Z1lYSm5kVzFsYm5SelcybGRJRG9nZTMwN1hHNWNiaUFnSUNCcFppQW9hU0FsSURJcElIdGNiaUFnSUNBZ0lHOTNia3RsZVhNb1QySnFaV04wS0hOdmRYSmpaU2tzSUhSeWRXVXBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQmtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUd0bGVTd2djMjkxY21ObFcydGxlVjBwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXljeWtnZTF4dUlDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9kR0Z5WjJWMExDQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5Y3loemIzVnlZMlVwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiM2R1UzJWNWN5aFBZbXBsWTNRb2MyOTFjbU5sS1NrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHdGxlU3dnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHpiM1Z5WTJVc0lHdGxlU2twTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhSaGNtZGxkRHRjYm4waUxDSnBiWEJ2Y25RZ1gyOWlhbVZqZEZOd2NtVmhaQ0JtY205dElDZEFZbUZpWld3dmNuVnVkR2x0WlM5b1pXeHdaWEp6TDJWemJTOXZZbXBsWTNSVGNISmxZV1F5Snp0Y2JseHVMeW9xWEc0Z0tpQkJaR0Z3ZEdWa0lHWnliMjBnVW1WaFkzUTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzltWVdObFltOXZheTl5WldGamRDOWliRzlpTDIxaGMzUmxjaTl3WVdOcllXZGxjeTl6YUdGeVpXUXZabTl5YldGMFVISnZaRVZ5Y205eVRXVnpjMkZuWlM1cWMxeHVJQ3BjYmlBcUlFUnZJRzV2ZENCeVpYRjFhWEpsSUhSb2FYTWdiVzlrZFd4bElHUnBjbVZqZEd4NUlTQlZjMlVnYm05eWJXRnNJSFJvY205M0lHVnljbTl5SUdOaGJHeHpMaUJVYUdWelpTQnRaWE56WVdkbGN5QjNhV3hzSUdKbElISmxjR3hoWTJWa0lIZHBkR2dnWlhKeWIzSWdZMjlrWlhOY2JpQXFJR1IxY21sdVp5QmlkV2xzWkM1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmpiMlJsWEc0Z0tpOWNibVoxYm1OMGFXOXVJR1p2Y20xaGRGQnliMlJGY25KdmNrMWxjM05oWjJVb1kyOWtaU2tnZTF4dUlDQnlaWFIxY200Z1hDSk5hVzVwWm1sbFpDQlNaV1IxZUNCbGNuSnZjaUFqWENJZ0t5QmpiMlJsSUNzZ1hDSTdJSFpwYzJsMElHaDBkSEJ6T2k4dmNtVmtkWGd1YW5NdWIzSm5MMFZ5Y205eWN6OWpiMlJsUFZ3aUlDc2dZMjlrWlNBcklGd2lJR1p2Y2lCMGFHVWdablZzYkNCdFpYTnpZV2RsSUc5eUlGd2lJQ3NnSjNWelpTQjBhR1VnYm05dUxXMXBibWxtYVdWa0lHUmxkaUJsYm5acGNtOXViV1Z1ZENCbWIzSWdablZzYkNCbGNuSnZjbk11SUNjN1hHNTlYRzVjYmk4dklFbHViR2x1WldRZ2RtVnljMmx2YmlCdlppQjBhR1VnWUhONWJXSnZiQzF2WW5ObGNuWmhZbXhsWUNCd2IyeDVabWxzYkZ4dWRtRnlJQ1FrYjJKelpYSjJZV0pzWlNBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnVTNsdFltOXNJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JRk41YldKdmJDNXZZbk5sY25aaFlteGxJSHg4SUNkQVFHOWljMlZ5ZG1GaWJHVW5PMXh1ZlNrb0tUdGNibHh1THlvcVhHNGdLaUJVYUdWelpTQmhjbVVnY0hKcGRtRjBaU0JoWTNScGIyNGdkSGx3WlhNZ2NtVnpaWEoyWldRZ1lua2dVbVZrZFhndVhHNGdLaUJHYjNJZ1lXNTVJSFZ1YTI1dmQyNGdZV04wYVc5dWN5d2dlVzkxSUcxMWMzUWdjbVYwZFhKdUlIUm9aU0JqZFhKeVpXNTBJSE4wWVhSbExseHVJQ29nU1dZZ2RHaGxJR04xY25KbGJuUWdjM1JoZEdVZ2FYTWdkVzVrWldacGJtVmtMQ0I1YjNVZ2JYVnpkQ0J5WlhSMWNtNGdkR2hsSUdsdWFYUnBZV3dnYzNSaGRHVXVYRzRnS2lCRWJ5QnViM1FnY21WbVpYSmxibU5sSUhSb1pYTmxJR0ZqZEdsdmJpQjBlWEJsY3lCa2FYSmxZM1JzZVNCcGJpQjViM1Z5SUdOdlpHVXVYRzRnS2k5Y2JuWmhjaUJ5WVc1a2IyMVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQnlZVzVrYjIxVGRISnBibWNvS1NCN1hHNGdJSEpsZEhWeWJpQk5ZWFJvTG5KaGJtUnZiU2dwTG5SdlUzUnlhVzVuS0RNMktTNXpkV0p6ZEhKcGJtY29OeWt1YzNCc2FYUW9KeWNwTG1wdmFXNG9KeTRuS1R0Y2JuMDdYRzVjYm5aaGNpQkJZM1JwYjI1VWVYQmxjeUE5SUh0Y2JpQWdTVTVKVkRvZ1hDSkFRSEpsWkhWNEwwbE9TVlJjSWlBcklISmhibVJ2YlZOMGNtbHVaeWdwTEZ4dUlDQlNSVkJNUVVORk9pQmNJa0JBY21Wa2RYZ3ZVa1ZRVEVGRFJWd2lJQ3NnY21GdVpHOXRVM1J5YVc1bktDa3NYRzRnSUZCU1QwSkZYMVZPUzA1UFYwNWZRVU5VU1U5T09pQm1kVzVqZEdsdmJpQlFVazlDUlY5VlRrdE9UMWRPWDBGRFZFbFBUaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYQ0pBUUhKbFpIVjRMMUJTVDBKRlgxVk9TMDVQVjA1ZlFVTlVTVTlPWENJZ0t5QnlZVzVrYjIxVGRISnBibWNvS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkFjR0Z5WVcwZ2UyRnVlWDBnYjJKcUlGUm9aU0J2WW1wbFkzUWdkRzhnYVc1emNHVmpkQzVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlIUm9aU0JoY21kMWJXVnVkQ0JoY0hCbFlYSnpJSFJ2SUdKbElHRWdjR3hoYVc0Z2IySnFaV04wTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzFCc1lXbHVUMkpxWldOMEtHOWlhaWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JRzlpYWlBaFBUMGdKMjlpYW1WamRDY2dmSHdnYjJKcUlEMDlQU0J1ZFd4c0tTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIWmhjaUJ3Y205MGJ5QTlJRzlpYWp0Y2JseHVJQ0IzYUdsc1pTQW9UMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0hCeWIzUnZLU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEJ5YjNSdklEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0hCeWIzUnZLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZb2IySnFLU0E5UFQwZ2NISnZkRzg3WEc1OVhHNWNiaTh2SUVsdWJHbHVaV1FnTHlCemFHOXlkR1Z1WldRZ2RtVnljMmx2YmlCdlppQmdhMmx1WkU5bVlDQm1jbTl0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5cWIyNXpZMmhzYVc1clpYSjBMMnRwYm1RdGIyWmNibVoxYm1OMGFXOXVJRzFwYm1sTGFXNWtUMllvZG1Gc0tTQjdYRzRnSUdsbUlDaDJZV3dnUFQwOUlIWnZhV1FnTUNrZ2NtVjBkWEp1SUNkMWJtUmxabWx1WldRbk8xeHVJQ0JwWmlBb2RtRnNJRDA5UFNCdWRXeHNLU0J5WlhSMWNtNGdKMjUxYkd3bk8xeHVJQ0IyWVhJZ2RIbHdaU0E5SUhSNWNHVnZaaUIyWVd3N1hHNWNiaUFnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ1kyRnpaU0FuWW05dmJHVmhiaWM2WEc0Z0lDQWdZMkZ6WlNBbmMzUnlhVzVuSnpwY2JpQWdJQ0JqWVhObElDZHVkVzFpWlhJbk9seHVJQ0FnSUdOaGMyVWdKM041YldKdmJDYzZYRzRnSUNBZ1kyRnpaU0FuWm5WdVkzUnBiMjRuT2x4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pUdGNiaUFnSUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkNrcElISmxkSFZ5YmlBbllYSnlZWGtuTzF4dUlDQnBaaUFvYVhORVlYUmxLSFpoYkNrcElISmxkSFZ5YmlBblpHRjBaU2M3WEc0Z0lHbG1JQ2hwYzBWeWNtOXlLSFpoYkNrcElISmxkSFZ5YmlBblpYSnliM0luTzF4dUlDQjJZWElnWTI5dWMzUnlkV04wYjNKT1lXMWxJRDBnWTNSdmNrNWhiV1VvZG1Gc0tUdGNibHh1SUNCemQybDBZMmdnS0dOdmJuTjBjblZqZEc5eVRtRnRaU2tnZTF4dUlDQWdJR05oYzJVZ0oxTjViV0p2YkNjNlhHNGdJQ0FnWTJGelpTQW5VSEp2YldselpTYzZYRzRnSUNBZ1kyRnpaU0FuVjJWaGEwMWhjQ2M2WEc0Z0lDQWdZMkZ6WlNBblYyVmhhMU5sZENjNlhHNGdJQ0FnWTJGelpTQW5UV0Z3SnpwY2JpQWdJQ0JqWVhObElDZFRaWFFuT2x4dUlDQWdJQ0FnY21WMGRYSnVJR052Ym5OMGNuVmpkRzl5VG1GdFpUdGNiaUFnZlNBdkx5QnZkR2hsY2x4dVhHNWNiaUFnY21WMGRYSnVJSFI1Y0dVdWMyeHBZMlVvT0N3Z0xURXBMblJ2VEc5M1pYSkRZWE5sS0NrdWNtVndiR0ZqWlNndlhGeHpMMmNzSUNjbktUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzUnZjazVoYldVb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0xtTnZibk4wY25WamRHOXlJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdkbUZzTG1OdmJuTjBjblZqZEc5eUxtNWhiV1VnT2lCdWRXeHNPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMFZ5Y205eUtIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z2RtRnNJR2x1YzNSaGJtTmxiMllnUlhKeWIzSWdmSHdnZEhsd1pXOW1JSFpoYkM1dFpYTnpZV2RsSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUIyWVd3dVkyOXVjM1J5ZFdOMGIzSWdKaVlnZEhsd1pXOW1JSFpoYkM1amIyNXpkSEoxWTNSdmNpNXpkR0ZqYTFSeVlXTmxUR2x0YVhRZ1BUMDlJQ2R1ZFcxaVpYSW5PMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMFJoZEdVb2RtRnNLU0I3WEc0Z0lHbG1JQ2gyWVd3Z2FXNXpkR0Z1WTJWdlppQkVZWFJsS1NCeVpYUjFjbTRnZEhKMVpUdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQjJZV3d1ZEc5RVlYUmxVM1J5YVc1bklEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlIUjVjR1Z2WmlCMllXd3VaMlYwUkdGMFpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQjBlWEJsYjJZZ2RtRnNMbk5sZEVSaGRHVWdQVDA5SUNkbWRXNWpkR2x2YmljN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUd0cGJtUlBaaWgyWVd3cElIdGNiaUFnZG1GeUlIUjVjR1ZQWmxaaGJDQTlJSFI1Y0dWdlppQjJZV3c3WEc1Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCMGVYQmxUMlpXWVd3Z1BTQnRhVzVwUzJsdVpFOW1LSFpoYkNrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RIbHdaVTltVm1Gc08xeHVmVnh1WEc0dktpcGNiaUFxSUVCa1pYQnlaV05oZEdWa1hHNGdLbHh1SUNvZ0tpcFhaU0J5WldOdmJXMWxibVFnZFhOcGJtY2dkR2hsSUdCamIyNW1hV2QxY21WVGRHOXlaV0FnYldWMGFHOWtYRzRnS2lCdlppQjBhR1VnWUVCeVpXUjFlR3B6TDNSdmIyeHJhWFJnSUhCaFkydGhaMlVxS2l3Z2QyaHBZMmdnY21Wd2JHRmpaWE1nWUdOeVpXRjBaVk4wYjNKbFlDNWNiaUFxWEc0Z0tpQlNaV1IxZUNCVWIyOXNhMmwwSUdseklHOTFjaUJ5WldOdmJXMWxibVJsWkNCaGNIQnliMkZqYUNCbWIzSWdkM0pwZEdsdVp5QlNaV1IxZUNCc2IyZHBZeUIwYjJSaGVTeGNiaUFxSUdsdVkyeDFaR2x1WnlCemRHOXlaU0J6WlhSMWNDd2djbVZrZFdObGNuTXNJR1JoZEdFZ1ptVjBZMmhwYm1jc0lHRnVaQ0J0YjNKbExseHVJQ3BjYmlBcUlDb3FSbTl5SUcxdmNtVWdaR1YwWVdsc2N5d2djR3hsWVhObElISmxZV1FnZEdocGN5QlNaV1IxZUNCa2IyTnpJSEJoWjJVNktpcGNiaUFxSUNvcWFIUjBjSE02THk5eVpXUjFlQzVxY3k1dmNtY3ZhVzUwY205a2RXTjBhVzl1TDNkb2VTMXlkR3N0YVhNdGNtVmtkWGd0ZEc5a1lYa3FLbHh1SUNwY2JpQXFJR0JqYjI1bWFXZDFjbVZUZEc5eVpXQWdabkp2YlNCU1pXUjFlQ0JVYjI5c2EybDBJR2x6SUdGdUlHbHRjSEp2ZG1Wa0lIWmxjbk5wYjI0Z2IyWWdZR055WldGMFpWTjBiM0psWUNCMGFHRjBYRzRnS2lCemFXMXdiR2xtYVdWeklITmxkSFZ3SUdGdVpDQm9aV3h3Y3lCaGRtOXBaQ0JqYjIxdGIyNGdZblZuY3k1Y2JpQXFYRzRnS2lCWmIzVWdjMmh2ZFd4a0lHNXZkQ0JpWlNCMWMybHVaeUIwYUdVZ1lISmxaSFY0WUNCamIzSmxJSEJoWTJ0aFoyVWdZbmtnYVhSelpXeG1JSFJ2WkdGNUxDQmxlR05sY0hRZ1ptOXlJR3hsWVhKdWFXNW5JSEIxY25CdmMyVnpMbHh1SUNvZ1ZHaGxJR0JqY21WaGRHVlRkRzl5WldBZ2JXVjBhRzlrSUdaeWIyMGdkR2hsSUdOdmNtVWdZSEpsWkhWNFlDQndZV05yWVdkbElIZHBiR3dnYm05MElHSmxJSEpsYlc5MlpXUXNJR0oxZENCM1pTQmxibU52ZFhKaFoyVmNiaUFxSUdGc2JDQjFjMlZ5Y3lCMGJ5QnRhV2R5WVhSbElIUnZJSFZ6YVc1bklGSmxaSFY0SUZSdmIyeHJhWFFnWm05eUlHRnNiQ0JTWldSMWVDQmpiMlJsTGx4dUlDcGNiaUFxSUVsbUlIbHZkU0IzWVc1MElIUnZJSFZ6WlNCZ1kzSmxZWFJsVTNSdmNtVmdJSGRwZEdodmRYUWdkR2hwY3lCMmFYTjFZV3dnWkdWd2NtVmpZWFJwYjI0Z2QyRnlibWx1Wnl3Z2RYTmxYRzRnS2lCMGFHVWdZR3hsWjJGamVWOWpjbVZoZEdWVGRHOXlaV0FnYVcxd2IzSjBJR2x1YzNSbFlXUTZYRzRnS2x4dUlDb2dZR2x0Y0c5eWRDQjdJR3hsWjJGamVWOWpjbVZoZEdWVGRHOXlaU0JoY3lCamNtVmhkR1ZUZEc5eVpYMGdabkp2YlNBbmNtVmtkWGduWUZ4dUlDcGNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWVGRHOXlaU2h5WldSMVkyVnlMQ0J3Y21Wc2IyRmtaV1JUZEdGMFpTd2daVzVvWVc1alpYSXBJSHRjYmlBZ2RtRnlJRjl5WldZeU8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2NISmxiRzloWkdWa1UzUmhkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnZEhsd1pXOW1JR1Z1YUdGdVkyVnlJRDA5UFNBblpuVnVZM1JwYjI0bklIeDhJSFI1Y0dWdlppQmxibWhoYm1ObGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQjBlWEJsYjJZZ1lYSm5kVzFsYm5Seld6TmRJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEMDlQU0JjSW5CeWIyUjFZM1JwYjI1Y0lpQS9JR1p2Y20xaGRGQnliMlJGY25KdmNrMWxjM05oWjJVb01Da2dPaUFuU1hRZ2JHOXZhM01nYkdsclpTQjViM1VnWVhKbElIQmhjM05wYm1jZ2MyVjJaWEpoYkNCemRHOXlaU0JsYm1oaGJtTmxjbk1nZEc4Z0p5QXJJQ2RqY21WaGRHVlRkRzl5WlNncExpQlVhR2x6SUdseklHNXZkQ0J6ZFhCd2IzSjBaV1F1SUVsdWMzUmxZV1FzSUdOdmJYQnZjMlVnZEdobGJTQW5JQ3NnSjNSdloyVjBhR1Z5SUhSdklHRWdjMmx1WjJ4bElHWjFibU4wYVc5dUxpQlRaV1VnYUhSMGNITTZMeTl5WldSMWVDNXFjeTV2Y21jdmRIVjBiM0pwWVd4ekwyWjFibVJoYldWdWRHRnNjeTl3WVhKMExUUXRjM1J2Y21ValkzSmxZWFJwYm1jdFlTMXpkRzl5WlMxM2FYUm9MV1Z1YUdGdVkyVnljeUJtYjNJZ1lXNGdaWGhoYlhCc1pTNG5LVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2NISmxiRzloWkdWa1UzUmhkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnZEhsd1pXOW1JR1Z1YUdGdVkyVnlJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lHVnVhR0Z1WTJWeUlEMGdjSEpsYkc5aFpHVmtVM1JoZEdVN1hHNGdJQ0FnY0hKbGJHOWhaR1ZrVTNSaGRHVWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHVnVhR0Z1WTJWeUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pXNW9ZVzVqWlhJZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdYQ0p3Y205a2RXTjBhVzl1WENJZ1B5Qm1iM0p0WVhSUWNtOWtSWEp5YjNKTlpYTnpZV2RsS0RFcElEb2dYQ0pGZUhCbFkzUmxaQ0IwYUdVZ1pXNW9ZVzVqWlhJZ2RHOGdZbVVnWVNCbWRXNWpkR2x2Ymk0Z1NXNXpkR1ZoWkN3Z2NtVmpaV2wyWldRNklDZGNJaUFySUd0cGJtUlBaaWhsYm1oaGJtTmxjaWtnS3lCY0lpZGNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHVnVhR0Z1WTJWeUtHTnlaV0YwWlZOMGIzSmxLU2h5WldSMVkyVnlMQ0J3Y21Wc2IyRmtaV1JUZEdGMFpTazdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUhKbFpIVmpaWElnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQVDA5SUZ3aWNISnZaSFZqZEdsdmJsd2lJRDhnWm05eWJXRjBVSEp2WkVWeWNtOXlUV1Z6YzJGblpTZ3lLU0E2SUZ3aVJYaHdaV04wWldRZ2RHaGxJSEp2YjNRZ2NtVmtkV05sY2lCMGJ5QmlaU0JoSUdaMWJtTjBhVzl1TGlCSmJuTjBaV0ZrTENCeVpXTmxhWFpsWkRvZ0oxd2lJQ3NnYTJsdVpFOW1LSEpsWkhWalpYSXBJQ3NnWENJblhDSXBPMXh1SUNCOVhHNWNiaUFnZG1GeUlHTjFjbkpsYm5SU1pXUjFZMlZ5SUQwZ2NtVmtkV05sY2p0Y2JpQWdkbUZ5SUdOMWNuSmxiblJUZEdGMFpTQTlJSEJ5Wld4dllXUmxaRk4wWVhSbE8xeHVJQ0IyWVhJZ1kzVnljbVZ1ZEV4cGMzUmxibVZ5Y3lBOUlGdGRPMXh1SUNCMllYSWdibVY0ZEV4cGMzUmxibVZ5Y3lBOUlHTjFjbkpsYm5STWFYTjBaVzVsY25NN1hHNGdJSFpoY2lCcGMwUnBjM0JoZEdOb2FXNW5JRDBnWm1Gc2MyVTdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHbHpJRzFoYTJWeklHRWdjMmhoYkd4dmR5QmpiM0I1SUc5bUlHTjFjbkpsYm5STWFYTjBaVzVsY25NZ2MyOGdkMlVnWTJGdUlIVnpaVnh1SUNBZ0tpQnVaWGgwVEdsemRHVnVaWEp6SUdGeklHRWdkR1Z0Y0c5eVlYSjVJR3hwYzNRZ2QyaHBiR1VnWkdsemNHRjBZMmhwYm1jdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2NISmxkbVZ1ZEhNZ1lXNTVJR0oxWjNNZ1lYSnZkVzVrSUdOdmJuTjFiV1Z5Y3lCallXeHNhVzVuWEc0Z0lDQXFJSE4xWW5OamNtbGlaUzkxYm5OMVluTmpjbWxpWlNCcGJpQjBhR1VnYldsa1pHeGxJRzltSUdFZ1pHbHpjR0YwWTJndVhHNGdJQ0FxTDF4dVhHNGdJR1oxYm1OMGFXOXVJR1Z1YzNWeVpVTmhiazExZEdGMFpVNWxlSFJNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnYVdZZ0tHNWxlSFJNYVhOMFpXNWxjbk1nUFQwOUlHTjFjbkpsYm5STWFYTjBaVzVsY25NcElIdGNiaUFnSUNBZ0lHNWxlSFJNYVhOMFpXNWxjbk1nUFNCamRYSnlaVzUwVEdsemRHVnVaWEp6TG5Oc2FXTmxLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJQzhxS2x4dUlDQWdLaUJTWldGa2N5QjBhR1VnYzNSaGRHVWdkSEpsWlNCdFlXNWhaMlZrSUdKNUlIUm9aU0J6ZEc5eVpTNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nZTJGdWVYMGdWR2hsSUdOMWNuSmxiblFnYzNSaGRHVWdkSEpsWlNCdlppQjViM1Z5SUdGd2NHeHBZMkYwYVc5dUxseHVJQ0FnS2k5Y2JseHVYRzRnSUdaMWJtTjBhVzl1SUdkbGRGTjBZWFJsS0NrZ2UxeHVJQ0FnSUdsbUlDaHBjMFJwYzNCaGRHTm9hVzVuS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJRndpY0hKdlpIVmpkR2x2Ymx3aUlEOGdabTl5YldGMFVISnZaRVZ5Y205eVRXVnpjMkZuWlNnektTQTZJQ2RaYjNVZ2JXRjVJRzV2ZENCallXeHNJSE4wYjNKbExtZGxkRk4wWVhSbEtDa2dkMmhwYkdVZ2RHaGxJSEpsWkhWalpYSWdhWE1nWlhobFkzVjBhVzVuTGlBbklDc2dKMVJvWlNCeVpXUjFZMlZ5SUdoaGN5QmhiSEpsWVdSNUlISmxZMlZwZG1Wa0lIUm9aU0J6ZEdGMFpTQmhjeUJoYmlCaGNtZDFiV1Z1ZEM0Z0p5QXJJQ2RRWVhOeklHbDBJR1J2ZDI0Z1puSnZiU0IwYUdVZ2RHOXdJSEpsWkhWalpYSWdhVzV6ZEdWaFpDQnZaaUJ5WldGa2FXNW5JR2wwSUdaeWIyMGdkR2hsSUhOMGIzSmxMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmpkWEp5Wlc1MFUzUmhkR1U3WEc0Z0lIMWNiaUFnTHlvcVhHNGdJQ0FxSUVGa1pITWdZU0JqYUdGdVoyVWdiR2x6ZEdWdVpYSXVJRWwwSUhkcGJHd2dZbVVnWTJGc2JHVmtJR0Z1ZVNCMGFXMWxJR0Z1SUdGamRHbHZiaUJwY3lCa2FYTndZWFJqYUdWa0xGeHVJQ0FnS2lCaGJtUWdjMjl0WlNCd1lYSjBJRzltSUhSb1pTQnpkR0YwWlNCMGNtVmxJRzFoZVNCd2IzUmxiblJwWVd4c2VTQm9ZWFpsSUdOb1lXNW5aV1F1SUZsdmRTQnRZWGtnZEdobGJseHVJQ0FnS2lCallXeHNJR0JuWlhSVGRHRjBaU2dwWUNCMGJ5QnlaV0ZrSUhSb1pTQmpkWEp5Wlc1MElITjBZWFJsSUhSeVpXVWdhVzV6YVdSbElIUm9aU0JqWVd4c1ltRmpheTVjYmlBZ0lDcGNiaUFnSUNvZ1dXOTFJRzFoZVNCallXeHNJR0JrYVhOd1lYUmphQ2dwWUNCbWNtOXRJR0VnWTJoaGJtZGxJR3hwYzNSbGJtVnlMQ0IzYVhSb0lIUm9aU0JtYjJ4c2IzZHBibWRjYmlBZ0lDb2dZMkYyWldGMGN6cGNiaUFnSUNwY2JpQWdJQ29nTVM0Z1ZHaGxJSE4xWW5OamNtbHdkR2x2Ym5NZ1lYSmxJSE51WVhCemFHOTBkR1ZrSUdwMWMzUWdZbVZtYjNKbElHVjJaWEo1SUdCa2FYTndZWFJqYUNncFlDQmpZV3hzTGx4dUlDQWdLaUJKWmlCNWIzVWdjM1ZpYzJOeWFXSmxJRzl5SUhWdWMzVmljMk55YVdKbElIZG9hV3hsSUhSb1pTQnNhWE4wWlc1bGNuTWdZWEpsSUdKbGFXNW5JR2x1ZG05clpXUXNJSFJvYVhOY2JpQWdJQ29nZDJsc2JDQnViM1FnYUdGMlpTQmhibmtnWldabVpXTjBJRzl1SUhSb1pTQmdaR2x6Y0dGMFkyZ29LV0FnZEdoaGRDQnBjeUJqZFhKeVpXNTBiSGtnYVc0Z2NISnZaM0psYzNNdVhHNGdJQ0FxSUVodmQyVjJaWElzSUhSb1pTQnVaWGgwSUdCa2FYTndZWFJqYUNncFlDQmpZV3hzTENCM2FHVjBhR1Z5SUc1bGMzUmxaQ0J2Y2lCdWIzUXNJSGRwYkd3Z2RYTmxJR0VnYlc5eVpWeHVJQ0FnS2lCeVpXTmxiblFnYzI1aGNITm9iM1FnYjJZZ2RHaGxJSE4xWW5OamNtbHdkR2x2YmlCc2FYTjBMbHh1SUNBZ0tseHVJQ0FnS2lBeUxpQlVhR1VnYkdsemRHVnVaWElnYzJodmRXeGtJRzV2ZENCbGVIQmxZM1FnZEc4Z2MyVmxJR0ZzYkNCemRHRjBaU0JqYUdGdVoyVnpMQ0JoY3lCMGFHVWdjM1JoZEdWY2JpQWdJQ29nYldsbmFIUWdhR0YyWlNCaVpXVnVJSFZ3WkdGMFpXUWdiWFZzZEdsd2JHVWdkR2x0WlhNZ1pIVnlhVzVuSUdFZ2JtVnpkR1ZrSUdCa2FYTndZWFJqYUNncFlDQmlaV1p2Y21WY2JpQWdJQ29nZEdobElHeHBjM1JsYm1WeUlHbHpJR05oYkd4bFpDNGdTWFFnYVhNc0lHaHZkMlYyWlhJc0lHZDFZWEpoYm5SbFpXUWdkR2hoZENCaGJHd2djM1ZpYzJOeWFXSmxjbk5jYmlBZ0lDb2djbVZuYVhOMFpYSmxaQ0JpWldadmNtVWdkR2hsSUdCa2FYTndZWFJqYUNncFlDQnpkR0Z5ZEdWa0lIZHBiR3dnWW1VZ1kyRnNiR1ZrSUhkcGRHZ2dkR2hsSUd4aGRHVnpkRnh1SUNBZ0tpQnpkR0YwWlNCaWVTQjBhR1VnZEdsdFpTQnBkQ0JsZUdsMGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYkdsemRHVnVaWElnUVNCallXeHNZbUZqYXlCMGJ5QmlaU0JwYm5admEyVmtJRzl1SUdWMlpYSjVJR1JwYzNCaGRHTm9MbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRUVnWm5WdVkzUnBiMjRnZEc4Z2NtVnRiM1psSUhSb2FYTWdZMmhoYm1kbElHeHBjM1JsYm1WeUxseHVJQ0FnS2k5Y2JseHVYRzRnSUdaMWJtTjBhVzl1SUhOMVluTmpjbWxpWlNoc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JHbHpkR1Z1WlhJZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdYQ0p3Y205a2RXTjBhVzl1WENJZ1B5Qm1iM0p0WVhSUWNtOWtSWEp5YjNKTlpYTnpZV2RsS0RRcElEb2dYQ0pGZUhCbFkzUmxaQ0IwYUdVZ2JHbHpkR1Z1WlhJZ2RHOGdZbVVnWVNCbWRXNWpkR2x2Ymk0Z1NXNXpkR1ZoWkN3Z2NtVmpaV2wyWldRNklDZGNJaUFySUd0cGJtUlBaaWhzYVhOMFpXNWxjaWtnS3lCY0lpZGNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dselJHbHpjR0YwWTJocGJtY3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ1hDSndjbTlrZFdOMGFXOXVYQ0lnUHlCbWIzSnRZWFJRY205a1JYSnliM0pOWlhOellXZGxLRFVwSURvZ0oxbHZkU0J0WVhrZ2JtOTBJR05oYkd3Z2MzUnZjbVV1YzNWaWMyTnlhV0psS0NrZ2QyaHBiR1VnZEdobElISmxaSFZqWlhJZ2FYTWdaWGhsWTNWMGFXNW5MaUFuSUNzZ0owbG1JSGx2ZFNCM2IzVnNaQ0JzYVd0bElIUnZJR0psSUc1dmRHbG1hV1ZrSUdGbWRHVnlJSFJvWlNCemRHOXlaU0JvWVhNZ1ltVmxiaUIxY0dSaGRHVmtMQ0J6ZFdKelkzSnBZbVVnWm5KdmJTQmhJQ2NnS3lBblkyOXRjRzl1Wlc1MElHRnVaQ0JwYm5admEyVWdjM1J2Y21VdVoyVjBVM1JoZEdVb0tTQnBiaUIwYUdVZ1kyRnNiR0poWTJzZ2RHOGdZV05qWlhOeklIUm9aU0JzWVhSbGMzUWdjM1JoZEdVdUlDY2dLeUFuVTJWbElHaDBkSEJ6T2k4dmNtVmtkWGd1YW5NdWIzSm5MMkZ3YVM5emRHOXlaU056ZFdKelkzSnBZbVZzYVhOMFpXNWxjaUJtYjNJZ2JXOXlaU0JrWlhSaGFXeHpMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCcGMxTjFZbk5qY21saVpXUWdQU0IwY25WbE8xeHVJQ0FnSUdWdWMzVnlaVU5oYmsxMWRHRjBaVTVsZUhSTWFYTjBaVzVsY25Nb0tUdGNiaUFnSUNCdVpYaDBUR2x6ZEdWdVpYSnpMbkIxYzJnb2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUIxYm5OMVluTmpjbWxpWlNncElIdGNiaUFnSUNBZ0lHbG1JQ2doYVhOVGRXSnpZM0pwWW1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dselJHbHpjR0YwWTJocGJtY3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQwOVBTQmNJbkJ5YjJSMVkzUnBiMjVjSWlBL0lHWnZjbTFoZEZCeWIyUkZjbkp2Y2sxbGMzTmhaMlVvTmlrZ09pQW5XVzkxSUcxaGVTQnViM1FnZFc1emRXSnpZM0pwWW1VZ1puSnZiU0JoSUhOMGIzSmxJR3hwYzNSbGJtVnlJSGRvYVd4bElIUm9aU0J5WldSMVkyVnlJR2x6SUdWNFpXTjFkR2x1Wnk0Z0p5QXJJQ2RUWldVZ2FIUjBjSE02THk5eVpXUjFlQzVxY3k1dmNtY3ZZWEJwTDNOMGIzSmxJM04xWW5OamNtbGlaV3hwYzNSbGJtVnlJR1p2Y2lCdGIzSmxJR1JsZEdGcGJITXVKeWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdselUzVmljMk55YVdKbFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ1pXNXpkWEpsUTJGdVRYVjBZWFJsVG1WNGRFeHBjM1JsYm1WeWN5Z3BPMXh1SUNBZ0lDQWdkbUZ5SUdsdVpHVjRJRDBnYm1WNGRFeHBjM1JsYm1WeWN5NXBibVJsZUU5bUtHeHBjM1JsYm1WeUtUdGNiaUFnSUNBZ0lHNWxlSFJNYVhOMFpXNWxjbk11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjYmlBZ0lDQWdJR04xY25KbGJuUk1hWE4wWlc1bGNuTWdQU0J1ZFd4c08xeHVJQ0FnSUgwN1hHNGdJSDFjYmlBZ0x5b3FYRzRnSUNBcUlFUnBjM0JoZEdOb1pYTWdZVzRnWVdOMGFXOXVMaUJKZENCcGN5QjBhR1VnYjI1c2VTQjNZWGtnZEc4Z2RISnBaMmRsY2lCaElITjBZWFJsSUdOb1lXNW5aUzVjYmlBZ0lDcGNiaUFnSUNvZ1ZHaGxJR0J5WldSMVkyVnlZQ0JtZFc1amRHbHZiaXdnZFhObFpDQjBieUJqY21WaGRHVWdkR2hsSUhOMGIzSmxMQ0IzYVd4c0lHSmxJR05oYkd4bFpDQjNhWFJvSUhSb1pWeHVJQ0FnS2lCamRYSnlaVzUwSUhOMFlYUmxJSFJ5WldVZ1lXNWtJSFJvWlNCbmFYWmxiaUJnWVdOMGFXOXVZQzRnU1hSeklISmxkSFZ5YmlCMllXeDFaU0IzYVd4c1hHNGdJQ0FxSUdKbElHTnZibk5wWkdWeVpXUWdkR2hsSUNvcWJtVjRkQ29xSUhOMFlYUmxJRzltSUhSb1pTQjBjbVZsTENCaGJtUWdkR2hsSUdOb1lXNW5aU0JzYVhOMFpXNWxjbk5jYmlBZ0lDb2dkMmxzYkNCaVpTQnViM1JwWm1sbFpDNWNiaUFnSUNwY2JpQWdJQ29nVkdobElHSmhjMlVnYVcxd2JHVnRaVzUwWVhScGIyNGdiMjVzZVNCemRYQndiM0owY3lCd2JHRnBiaUJ2WW1wbFkzUWdZV04wYVc5dWN5NGdTV1lnZVc5MUlIZGhiblFnZEc5Y2JpQWdJQ29nWkdsemNHRjBZMmdnWVNCUWNtOXRhWE5sTENCaGJpQlBZbk5sY25aaFlteGxMQ0JoSUhSb2RXNXJMQ0J2Y2lCemIyMWxkR2hwYm1jZ1pXeHpaU3dnZVc5MUlHNWxaV1FnZEc5Y2JpQWdJQ29nZDNKaGNDQjViM1Z5SUhOMGIzSmxJR055WldGMGFXNW5JR1oxYm1OMGFXOXVJR2x1ZEc4Z2RHaGxJR052Y25KbGMzQnZibVJwYm1jZ2JXbGtaR3hsZDJGeVpTNGdSbTl5WEc0Z0lDQXFJR1Y0WVcxd2JHVXNJSE5sWlNCMGFHVWdaRzlqZFcxbGJuUmhkR2x2YmlCbWIzSWdkR2hsSUdCeVpXUjFlQzEwYUhWdWEyQWdjR0ZqYTJGblpTNGdSWFpsYmlCMGFHVmNiaUFnSUNvZ2JXbGtaR3hsZDJGeVpTQjNhV3hzSUdWMlpXNTBkV0ZzYkhrZ1pHbHpjR0YwWTJnZ2NHeGhhVzRnYjJKcVpXTjBJR0ZqZEdsdmJuTWdkWE5wYm1jZ2RHaHBjeUJ0WlhSb2IyUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JoWTNScGIyNGdRU0J3YkdGcGJpQnZZbXBsWTNRZ2NtVndjbVZ6Wlc1MGFXNW5JT0tBbkhkb1lYUWdZMmhoYm1kbFpPS0FuUzRnU1hRZ2FYTmNiaUFnSUNvZ1lTQm5iMjlrSUdsa1pXRWdkRzhnYTJWbGNDQmhZM1JwYjI1eklITmxjbWxoYkdsNllXSnNaU0J6YnlCNWIzVWdZMkZ1SUhKbFkyOXlaQ0JoYm1RZ2NtVndiR0Y1SUhWelpYSmNiaUFnSUNvZ2MyVnpjMmx2Ym5Nc0lHOXlJSFZ6WlNCMGFHVWdkR2x0WlNCMGNtRjJaV3hzYVc1bklHQnlaV1IxZUMxa1pYWjBiMjlzYzJBdUlFRnVJR0ZqZEdsdmJpQnRkWE4wSUdoaGRtVmNiaUFnSUNvZ1lTQmdkSGx3WldBZ2NISnZjR1Z5ZEhrZ2QyaHBZMmdnYldGNUlHNXZkQ0JpWlNCZ2RXNWtaV1pwYm1Wa1lDNGdTWFFnYVhNZ1lTQm5iMjlrSUdsa1pXRWdkRzhnZFhObFhHNGdJQ0FxSUhOMGNtbHVaeUJqYjI1emRHRnVkSE1nWm05eUlHRmpkR2x2YmlCMGVYQmxjeTVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgwZ1JtOXlJR052Ym5abGJtbGxibU5sTENCMGFHVWdjMkZ0WlNCaFkzUnBiMjRnYjJKcVpXTjBJSGx2ZFNCa2FYTndZWFJqYUdWa0xseHVJQ0FnS2x4dUlDQWdLaUJPYjNSbElIUm9ZWFFzSUdsbUlIbHZkU0IxYzJVZ1lTQmpkWE4wYjIwZ2JXbGtaR3hsZDJGeVpTd2dhWFFnYldGNUlIZHlZWEFnWUdScGMzQmhkR05vS0NsZ0lIUnZYRzRnSUNBcUlISmxkSFZ5YmlCemIyMWxkR2hwYm1jZ1pXeHpaU0FvWm05eUlHVjRZVzF3YkdVc0lHRWdVSEp2YldselpTQjViM1VnWTJGdUlHRjNZV2wwS1M1Y2JpQWdJQ292WEc1Y2JseHVJQ0JtZFc1amRHbHZiaUJrYVhOd1lYUmphQ2hoWTNScGIyNHBJSHRjYmlBZ0lDQnBaaUFvSVdselVHeGhhVzVQWW1wbFkzUW9ZV04wYVc5dUtTa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDA5UFNCY0luQnliMlIxWTNScGIyNWNJaUEvSUdadmNtMWhkRkJ5YjJSRmNuSnZjazFsYzNOaFoyVW9OeWtnT2lCY0lrRmpkR2x2Ym5NZ2JYVnpkQ0JpWlNCd2JHRnBiaUJ2WW1wbFkzUnpMaUJKYm5OMFpXRmtMQ0IwYUdVZ1lXTjBkV0ZzSUhSNWNHVWdkMkZ6T2lBblhDSWdLeUJyYVc1a1QyWW9ZV04wYVc5dUtTQXJJRndpSnk0Z1dXOTFJRzFoZVNCdVpXVmtJSFJ2SUdGa1pDQnRhV1JrYkdWM1lYSmxJSFJ2SUhsdmRYSWdjM1J2Y21VZ2MyVjBkWEFnZEc4Z2FHRnVaR3hsSUdScGMzQmhkR05vYVc1bklHOTBhR1Z5SUhaaGJIVmxjeXdnYzNWamFDQmhjeUFuY21Wa2RYZ3RkR2gxYm1zbklIUnZJR2hoYm1Sc1pTQmthWE53WVhSamFHbHVaeUJtZFc1amRHbHZibk11SUZObFpTQm9kSFJ3Y3pvdkwzSmxaSFY0TG1wekxtOXlaeTkwZFhSdmNtbGhiSE12Wm5WdVpHRnRaVzUwWVd4ekwzQmhjblF0TkMxemRHOXlaU050YVdSa2JHVjNZWEpsSUdGdVpDQm9kSFJ3Y3pvdkwzSmxaSFY0TG1wekxtOXlaeTkwZFhSdmNtbGhiSE12Wm5WdVpHRnRaVzUwWVd4ekwzQmhjblF0TmkxaGMzbHVZeTFzYjJkcFl5TjFjMmx1WnkxMGFHVXRjbVZrZFhndGRHaDFibXN0Yldsa1pHeGxkMkZ5WlNCbWIzSWdaWGhoYlhCc1pYTXVYQ0lwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnWVdOMGFXOXVMblI1Y0dVZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJRndpY0hKdlpIVmpkR2x2Ymx3aUlEOGdabTl5YldGMFVISnZaRVZ5Y205eVRXVnpjMkZuWlNnNEtTQTZJQ2RCWTNScGIyNXpJRzFoZVNCdWIzUWdhR0YyWlNCaGJpQjFibVJsWm1sdVpXUWdYQ0owZVhCbFhDSWdjSEp2Y0dWeWRIa3VJRmx2ZFNCdFlYa2dhR0YyWlNCdGFYTnpjR1ZzYkdWa0lHRnVJR0ZqZEdsdmJpQjBlWEJsSUhOMGNtbHVaeUJqYjI1emRHRnVkQzRuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FYTkVhWE53WVhSamFHbHVaeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQwOVBTQmNJbkJ5YjJSMVkzUnBiMjVjSWlBL0lHWnZjbTFoZEZCeWIyUkZjbkp2Y2sxbGMzTmhaMlVvT1NrZ09pQW5VbVZrZFdObGNuTWdiV0Y1SUc1dmRDQmthWE53WVhSamFDQmhZM1JwYjI1ekxpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JwYzBScGMzQmhkR05vYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdOMWNuSmxiblJUZEdGMFpTQTlJR04xY25KbGJuUlNaV1IxWTJWeUtHTjFjbkpsYm5SVGRHRjBaU3dnWVdOMGFXOXVLVHRjYmlBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdhWE5FYVhOd1lYUmphR2x1WnlBOUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCc2FYTjBaVzVsY25NZ1BTQmpkWEp5Wlc1MFRHbHpkR1Z1WlhKeklEMGdibVY0ZEV4cGMzUmxibVZ5Y3p0Y2JseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHbHpkR1Z1WlhKekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JHbHpkR1Z1WlhJZ1BTQnNhWE4wWlc1bGNuTmJhVjA3WEc0Z0lDQWdJQ0JzYVhOMFpXNWxjaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmhZM1JwYjI0N1hHNGdJSDFjYmlBZ0x5b3FYRzRnSUNBcUlGSmxjR3hoWTJWeklIUm9aU0J5WldSMVkyVnlJR04xY25KbGJuUnNlU0IxYzJWa0lHSjVJSFJvWlNCemRHOXlaU0IwYnlCallXeGpkV3hoZEdVZ2RHaGxJSE4wWVhSbExseHVJQ0FnS2x4dUlDQWdLaUJaYjNVZ2JXbG5hSFFnYm1WbFpDQjBhR2x6SUdsbUlIbHZkWElnWVhCd0lHbHRjR3hsYldWdWRITWdZMjlrWlNCemNHeHBkSFJwYm1jZ1lXNWtJSGx2ZFNCM1lXNTBJSFJ2WEc0Z0lDQXFJR3h2WVdRZ2MyOXRaU0J2WmlCMGFHVWdjbVZrZFdObGNuTWdaSGx1WVcxcFkyRnNiSGt1SUZsdmRTQnRhV2RvZENCaGJITnZJRzVsWldRZ2RHaHBjeUJwWmlCNWIzVmNiaUFnSUNvZ2FXMXdiR1Z0Wlc1MElHRWdhRzkwSUhKbGJHOWhaR2x1WnlCdFpXTm9ZVzVwYzIwZ1ptOXlJRkpsWkhWNExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J1WlhoMFVtVmtkV05sY2lCVWFHVWdjbVZrZFdObGNpQm1iM0lnZEdobElITjBiM0psSUhSdklIVnpaU0JwYm5OMFpXRmtMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdkbTlwWkgxY2JpQWdJQ292WEc1Y2JseHVJQ0JtZFc1amRHbHZiaUJ5WlhCc1lXTmxVbVZrZFdObGNpaHVaWGgwVW1Wa2RXTmxjaWtnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYm1WNGRGSmxaSFZqWlhJZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdYQ0p3Y205a2RXTjBhVzl1WENJZ1B5Qm1iM0p0WVhSUWNtOWtSWEp5YjNKTlpYTnpZV2RsS0RFd0tTQTZJRndpUlhod1pXTjBaV1FnZEdobElHNWxlSFJTWldSMVkyVnlJSFJ2SUdKbElHRWdablZ1WTNScGIyNHVJRWx1YzNSbFlXUXNJSEpsWTJWcGRtVmtPaUFuWENJZ0t5QnJhVzVrVDJZb2JtVjRkRkpsWkhWalpYSXBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpkWEp5Wlc1MFVtVmtkV05sY2lBOUlHNWxlSFJTWldSMVkyVnlPeUF2THlCVWFHbHpJR0ZqZEdsdmJpQm9ZWE1nWVNCemFXMXBiR2xoY2lCbFptWmxZM1FnZEc4Z1FXTjBhVzl1Vkhsd1pYTXVTVTVKVkM1Y2JpQWdJQ0F2THlCQmJua2djbVZrZFdObGNuTWdkR2hoZENCbGVHbHpkR1ZrSUdsdUlHSnZkR2dnZEdobElHNWxkeUJoYm1RZ2IyeGtJSEp2YjNSU1pXUjFZMlZ5WEc0Z0lDQWdMeThnZDJsc2JDQnlaV05sYVhabElIUm9aU0J3Y21WMmFXOTFjeUJ6ZEdGMFpTNGdWR2hwY3lCbFptWmxZM1JwZG1Wc2VTQndiM0IxYkdGMFpYTmNiaUFnSUNBdkx5QjBhR1VnYm1WM0lITjBZWFJsSUhSeVpXVWdkMmwwYUNCaGJua2djbVZzWlhaaGJuUWdaR0YwWVNCbWNtOXRJSFJvWlNCdmJHUWdiMjVsTGx4dVhHNGdJQ0FnWkdsemNHRjBZMmdvZTF4dUlDQWdJQ0FnZEhsd1pUb2dRV04wYVc5dVZIbHdaWE11VWtWUVRFRkRSVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNGdJQzhxS2x4dUlDQWdLaUJKYm5SbGNtOXdaWEpoWW1sc2FYUjVJSEJ2YVc1MElHWnZjaUJ2WW5ObGNuWmhZbXhsTDNKbFlXTjBhWFpsSUd4cFluSmhjbWxsY3k1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTI5aWMyVnlkbUZpYkdWOUlFRWdiV2x1YVcxaGJDQnZZbk5sY25aaFlteGxJRzltSUhOMFlYUmxJR05vWVc1blpYTXVYRzRnSUNBcUlFWnZjaUJ0YjNKbElHbHVabTl5YldGMGFXOXVMQ0J6WldVZ2RHaGxJRzlpYzJWeWRtRmliR1VnY0hKdmNHOXpZV3c2WEc0Z0lDQXFJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwWXpNNUwzQnliM0J2YzJGc0xXOWljMlZ5ZG1GaWJHVmNiaUFnSUNvdlhHNWNibHh1SUNCbWRXNWpkR2x2YmlCdlluTmxjblpoWW14bEtDa2dlMXh1SUNBZ0lIWmhjaUJmY21WbU8xeHVYRzRnSUNBZ2RtRnlJRzkxZEdWeVUzVmljMk55YVdKbElEMGdjM1ZpYzJOeWFXSmxPMXh1SUNBZ0lISmxkSFZ5YmlCZmNtVm1JRDBnZTF4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQlVhR1VnYldsdWFXMWhiQ0J2WW5ObGNuWmhZbXhsSUhOMVluTmpjbWx3ZEdsdmJpQnRaWFJvYjJRdVhHNGdJQ0FnSUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnpaWEoyWlhJZ1FXNTVJRzlpYW1WamRDQjBhR0YwSUdOaGJpQmlaU0IxYzJWa0lHRnpJR0Z1SUc5aWMyVnlkbVZ5TGx4dUlDQWdJQ0FnSUNvZ1ZHaGxJRzlpYzJWeWRtVnlJRzlpYW1WamRDQnphRzkxYkdRZ2FHRjJaU0JoSUdCdVpYaDBZQ0J0WlhSb2IyUXVYRzRnSUNBZ0lDQWdLaUJBY21WMGRYSnVjeUI3YzNWaWMyTnlhWEIwYVc5dWZTQkJiaUJ2WW1wbFkzUWdkMmwwYUNCaGJpQmdkVzV6ZFdKelkzSnBZbVZnSUcxbGRHaHZaQ0IwYUdGMElHTmhibHh1SUNBZ0lDQWdJQ29nWW1VZ2RYTmxaQ0IwYnlCMWJuTjFZbk5qY21saVpTQjBhR1VnYjJKelpYSjJZV0pzWlNCbWNtOXRJSFJvWlNCemRHOXlaU3dnWVc1a0lIQnlaWFpsYm5RZ1puVnlkR2hsY2x4dUlDQWdJQ0FnSUNvZ1pXMXBjM05wYjI0Z2IyWWdkbUZzZFdWeklHWnliMjBnZEdobElHOWljMlZ5ZG1GaWJHVXVYRzRnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJSE4xWW5OamNtbGlaVG9nWm5WdVkzUnBiMjRnYzNWaWMyTnlhV0psS0c5aWMyVnlkbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiMkp6WlhKMlpYSWdJVDA5SUNkdlltcGxZM1FuSUh4OElHOWljMlZ5ZG1WeUlEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQwOVBTQmNJbkJ5YjJSMVkzUnBiMjVjSWlBL0lHWnZjbTFoZEZCeWIyUkZjbkp2Y2sxbGMzTmhaMlVvTVRFcElEb2dYQ0pGZUhCbFkzUmxaQ0IwYUdVZ2IySnpaWEoyWlhJZ2RHOGdZbVVnWVc0Z2IySnFaV04wTGlCSmJuTjBaV0ZrTENCeVpXTmxhWFpsWkRvZ0oxd2lJQ3NnYTJsdVpFOW1LRzlpYzJWeWRtVnlLU0FySUZ3aUoxd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHOWljMlZ5ZG1WVGRHRjBaU2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYjJKelpYSjJaWEl1Ym1WNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnpaWEoyWlhJdWJtVjRkQ2huWlhSVGRHRjBaU2dwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCdlluTmxjblpsVTNSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIVnVjM1ZpYzJOeWFXSmxJRDBnYjNWMFpYSlRkV0p6WTNKcFltVW9iMkp6WlhKMlpWTjBZWFJsS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQjFibk4xWW5OamNtbGlaVG9nZFc1emRXSnpZM0pwWW1WY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxDQmZjbVZtV3lRa2IySnpaWEoyWVdKc1pWMGdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxDQmZjbVZtTzF4dUlDQjlJQzh2SUZkb1pXNGdZU0J6ZEc5eVpTQnBjeUJqY21WaGRHVmtMQ0JoYmlCY0lrbE9TVlJjSWlCaFkzUnBiMjRnYVhNZ1pHbHpjR0YwWTJobFpDQnpieUIwYUdGMElHVjJaWEo1WEc0Z0lDOHZJSEpsWkhWalpYSWdjbVYwZFhKdWN5QjBhR1ZwY2lCcGJtbDBhV0ZzSUhOMFlYUmxMaUJVYUdseklHVm1abVZqZEdsMlpXeDVJSEJ2Y0hWc1lYUmxjMXh1SUNBdkx5QjBhR1VnYVc1cGRHbGhiQ0J6ZEdGMFpTQjBjbVZsTGx4dVhHNWNiaUFnWkdsemNHRjBZMmdvZTF4dUlDQWdJSFI1Y0dVNklFRmpkR2x2YmxSNWNHVnpMa2xPU1ZSY2JpQWdmU2s3WEc0Z0lISmxkSFZ5YmlCZmNtVm1NaUE5SUh0Y2JpQWdJQ0JrYVhOd1lYUmphRG9nWkdsemNHRjBZMmdzWEc0Z0lDQWdjM1ZpYzJOeWFXSmxPaUJ6ZFdKelkzSnBZbVVzWEc0Z0lDQWdaMlYwVTNSaGRHVTZJR2RsZEZOMFlYUmxMRnh1SUNBZ0lISmxjR3hoWTJWU1pXUjFZMlZ5T2lCeVpYQnNZV05sVW1Wa2RXTmxjbHh1SUNCOUxDQmZjbVZtTWxza0pHOWljMlZ5ZG1GaWJHVmRJRDBnYjJKelpYSjJZV0pzWlN3Z1gzSmxaakk3WEc1OVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lTQlNaV1IxZUNCemRHOXlaU0IwYUdGMElHaHZiR1J6SUhSb1pTQnpkR0YwWlNCMGNtVmxMbHh1SUNwY2JpQXFJQ29xVjJVZ2NtVmpiMjF0Wlc1a0lIVnphVzVuSUdCamIyNW1hV2QxY21WVGRHOXlaV0FnWm5KdmJTQjBhR1ZjYmlBcUlHQkFjbVZrZFhocWN5OTBiMjlzYTJsMFlDQndZV05yWVdkbEtpb3NJSGRvYVdOb0lISmxjR3hoWTJWeklHQmpjbVZoZEdWVGRHOXlaV0E2WEc0Z0tpQXFLbWgwZEhCek9pOHZjbVZrZFhndWFuTXViM0puTDJsdWRISnZaSFZqZEdsdmJpOTNhSGt0Y25SckxXbHpMWEpsWkhWNExYUnZaR0Y1S2lwY2JpQXFYRzRnS2lCVWFHVWdiMjVzZVNCM1lYa2dkRzhnWTJoaGJtZGxJSFJvWlNCa1lYUmhJR2x1SUhSb1pTQnpkRzl5WlNCcGN5QjBieUJqWVd4c0lHQmthWE53WVhSamFDZ3BZQ0J2YmlCcGRDNWNiaUFxWEc0Z0tpQlVhR1Z5WlNCemFHOTFiR1FnYjI1c2VTQmlaU0JoSUhOcGJtZHNaU0J6ZEc5eVpTQnBiaUI1YjNWeUlHRndjQzRnVkc4Z2MzQmxZMmxtZVNCb2IzY2daR2xtWm1WeVpXNTBYRzRnS2lCd1lYSjBjeUJ2WmlCMGFHVWdjM1JoZEdVZ2RISmxaU0J5WlhOd2IyNWtJSFJ2SUdGamRHbHZibk1zSUhsdmRTQnRZWGtnWTI5dFltbHVaU0J6WlhabGNtRnNJSEpsWkhWalpYSnpYRzRnS2lCcGJuUnZJR0VnYzJsdVoyeGxJSEpsWkhWalpYSWdablZ1WTNScGIyNGdZbmtnZFhOcGJtY2dZR052YldKcGJtVlNaV1IxWTJWeWMyQXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdjbVZrZFdObGNpQkJJR1oxYm1OMGFXOXVJSFJvWVhRZ2NtVjBkWEp1Y3lCMGFHVWdibVY0ZENCemRHRjBaU0IwY21WbExDQm5hWFpsYmx4dUlDb2dkR2hsSUdOMWNuSmxiblFnYzNSaGRHVWdkSEpsWlNCaGJtUWdkR2hsSUdGamRHbHZiaUIwYnlCb1lXNWtiR1V1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRoYm5sOUlGdHdjbVZzYjJGa1pXUlRkR0YwWlYwZ1ZHaGxJR2x1YVhScFlXd2djM1JoZEdVdUlGbHZkU0J0WVhrZ2IzQjBhVzl1WVd4c2VTQnpjR1ZqYVdaNUlHbDBYRzRnS2lCMGJ5Qm9lV1J5WVhSbElIUm9aU0J6ZEdGMFpTQm1jbTl0SUhSb1pTQnpaWEoyWlhJZ2FXNGdkVzVwZG1WeWMyRnNJR0Z3Y0hNc0lHOXlJSFJ2SUhKbGMzUnZjbVVnWVZ4dUlDb2djSEpsZG1sdmRYTnNlU0J6WlhKcFlXeHBlbVZrSUhWelpYSWdjMlZ6YzJsdmJpNWNiaUFxSUVsbUlIbHZkU0IxYzJVZ1lHTnZiV0pwYm1WU1pXUjFZMlZ5YzJBZ2RHOGdjSEp2WkhWalpTQjBhR1VnY205dmRDQnlaV1IxWTJWeUlHWjFibU4wYVc5dUxDQjBhR2x6SUcxMWMzUWdZbVZjYmlBcUlHRnVJRzlpYW1WamRDQjNhWFJvSUhSb1pTQnpZVzFsSUhOb1lYQmxJR0Z6SUdCamIyMWlhVzVsVW1Wa2RXTmxjbk5nSUd0bGVYTXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdXMlZ1YUdGdVkyVnlYU0JVYUdVZ2MzUnZjbVVnWlc1b1lXNWpaWEl1SUZsdmRTQnRZWGtnYjNCMGFXOXVZV3hzZVNCemNHVmphV1o1SUdsMFhHNGdLaUIwYnlCbGJtaGhibU5sSUhSb1pTQnpkRzl5WlNCM2FYUm9JSFJvYVhKa0xYQmhjblI1SUdOaGNHRmlhV3hwZEdsbGN5QnpkV05vSUdGeklHMXBaR1JzWlhkaGNtVXNYRzRnS2lCMGFXMWxJSFJ5WVhabGJDd2djR1Z5YzJsemRHVnVZMlVzSUdWMFl5NGdWR2hsSUc5dWJIa2djM1J2Y21VZ1pXNW9ZVzVqWlhJZ2RHaGhkQ0J6YUdsd2N5QjNhWFJvSUZKbFpIVjRYRzRnS2lCcGN5QmdZWEJ3YkhsTmFXUmtiR1YzWVhKbEtDbGdMbHh1SUNwY2JpQXFJRUJ5WlhSMWNtNXpJSHRUZEc5eVpYMGdRU0JTWldSMWVDQnpkRzl5WlNCMGFHRjBJR3hsZEhNZ2VXOTFJSEpsWVdRZ2RHaGxJSE4wWVhSbExDQmthWE53WVhSamFDQmhZM1JwYjI1elhHNGdLaUJoYm1RZ2MzVmljMk55YVdKbElIUnZJR05vWVc1blpYTXVYRzRnS2k5Y2JseHVkbUZ5SUd4bFoyRmplVjlqY21WaGRHVlRkRzl5WlNBOUlHTnlaV0YwWlZOMGIzSmxPMXh1WEc0dktpcGNiaUFxSUZCeWFXNTBjeUJoSUhkaGNtNXBibWNnYVc0Z2RHaGxJR052Ym5OdmJHVWdhV1lnYVhRZ1pYaHBjM1J6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J0WlhOellXZGxJRlJvWlNCM1lYSnVhVzVuSUcxbGMzTmhaMlV1WEc0Z0tpQkFjbVYwZFhKdWN5QjdkbTlwWkgxY2JpQXFMMXh1Wm5WdVkzUnBiMjRnZDJGeWJtbHVaeWh0WlhOellXZGxLU0I3WEc0Z0lDOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMV052Ym5OdmJHVWdLaTljYmlBZ2FXWWdLSFI1Y0dWdlppQmpiMjV6YjJ4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ1kyOXVjMjlzWlM1bGNuSnZjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lHTnZibk52YkdVdVpYSnliM0lvYldWemMyRm5aU2s3WEc0Z0lIMWNiaUFnTHlvZ1pYTnNhVzUwTFdWdVlXSnNaU0J1YnkxamIyNXpiMnhsSUNvdlhHNWNibHh1SUNCMGNua2dlMXh1SUNBZ0lDOHZJRlJvYVhNZ1pYSnliM0lnZDJGeklIUm9jbTkzYmlCaGN5QmhJR052Ym5abGJtbGxibU5sSUhOdklIUm9ZWFFnYVdZZ2VXOTFJR1Z1WVdKc1pWeHVJQ0FnSUM4dklGd2lZbkpsWVdzZ2IyNGdZV3hzSUdWNFkyVndkR2x2Ym5OY0lpQnBiaUI1YjNWeUlHTnZibk52YkdVc1hHNGdJQ0FnTHk4Z2FYUWdkMjkxYkdRZ2NHRjFjMlVnZEdobElHVjRaV04xZEdsdmJpQmhkQ0IwYUdseklHeHBibVV1WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHMWxjM05oWjJVcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN2ZTQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxXVnRjSFI1WEc1Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFZXNWxlSEJsWTNSbFpGTjBZWFJsVTJoaGNHVlhZWEp1YVc1blRXVnpjMkZuWlNocGJuQjFkRk4wWVhSbExDQnlaV1IxWTJWeWN5d2dZV04wYVc5dUxDQjFibVY0Y0dWamRHVmtTMlY1UTJGamFHVXBJSHRjYmlBZ2RtRnlJSEpsWkhWalpYSkxaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9jbVZrZFdObGNuTXBPMXh1SUNCMllYSWdZWEpuZFcxbGJuUk9ZVzFsSUQwZ1lXTjBhVzl1SUNZbUlHRmpkR2x2Ymk1MGVYQmxJRDA5UFNCQlkzUnBiMjVVZVhCbGN5NUpUa2xVSUQ4Z0ozQnlaV3h2WVdSbFpGTjBZWFJsSUdGeVozVnRaVzUwSUhCaGMzTmxaQ0IwYnlCamNtVmhkR1ZUZEc5eVpTY2dPaUFuY0hKbGRtbHZkWE1nYzNSaGRHVWdjbVZqWldsMlpXUWdZbmtnZEdobElISmxaSFZqWlhJbk8xeHVYRzRnSUdsbUlDaHlaV1IxWTJWeVMyVjVjeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnSjFOMGIzSmxJR1J2WlhNZ2JtOTBJR2hoZG1VZ1lTQjJZV3hwWkNCeVpXUjFZMlZ5TGlCTllXdGxJSE4xY21VZ2RHaGxJR0Z5WjNWdFpXNTBJSEJoYzNObFpDQW5JQ3NnSjNSdklHTnZiV0pwYm1WU1pXUjFZMlZ5Y3lCcGN5QmhiaUJ2WW1wbFkzUWdkMmh2YzJVZ2RtRnNkV1Z6SUdGeVpTQnlaV1IxWTJWeWN5NG5PMXh1SUNCOVhHNWNiaUFnYVdZZ0tDRnBjMUJzWVdsdVQySnFaV04wS0dsdWNIVjBVM1JoZEdVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUZ3aVZHaGxJRndpSUNzZ1lYSm5kVzFsYm5ST1lXMWxJQ3NnWENJZ2FHRnpJSFZ1Wlhod1pXTjBaV1FnZEhsd1pTQnZaaUJjWEZ3aVhDSWdLeUJyYVc1a1QyWW9hVzV3ZFhSVGRHRjBaU2tnS3lCY0lseGNYQ0l1SUVWNGNHVmpkR1ZrSUdGeVozVnRaVzUwSUhSdklHSmxJR0Z1SUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0JtYjJ4c2IzZHBibWNnWENJZ0t5QW9YQ0pyWlhsek9pQmNYRndpWENJZ0t5QnlaV1IxWTJWeVMyVjVjeTVxYjJsdUtDZGNJaXdnWENJbktTQXJJRndpWEZ4Y0lsd2lLVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQjFibVY0Y0dWamRHVmtTMlY1Y3lBOUlFOWlhbVZqZEM1clpYbHpLR2x1Y0hWMFUzUmhkR1VwTG1acGJIUmxjaWhtZFc1amRHbHZiaUFvYTJWNUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNGeVpXUjFZMlZ5Y3k1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcElDWW1JQ0YxYm1WNGNHVmpkR1ZrUzJWNVEyRmphR1ZiYTJWNVhUdGNiaUFnZlNrN1hHNGdJSFZ1Wlhod1pXTjBaV1JMWlhsekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHdGxlU2tnZTF4dUlDQWdJSFZ1Wlhod1pXTjBaV1JMWlhsRFlXTm9aVnRyWlhsZElEMGdkSEoxWlR0Y2JpQWdmU2s3WEc0Z0lHbG1JQ2hoWTNScGIyNGdKaVlnWVdOMGFXOXVMblI1Y0dVZ1BUMDlJRUZqZEdsdmJsUjVjR1Z6TGxKRlVFeEJRMFVwSUhKbGRIVnlianRjYmx4dUlDQnBaaUFvZFc1bGVIQmxZM1JsWkV0bGVYTXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmNJbFZ1Wlhod1pXTjBaV1FnWENJZ0t5QW9kVzVsZUhCbFkzUmxaRXRsZVhNdWJHVnVaM1JvSUQ0Z01TQS9JQ2RyWlhsekp5QTZJQ2RyWlhrbktTQXJJRndpSUZ3aUlDc2dLRndpWEZ4Y0lsd2lJQ3NnZFc1bGVIQmxZM1JsWkV0bGVYTXVhbTlwYmlnblhDSXNJRndpSnlrZ0t5QmNJbHhjWENJZ1ptOTFibVFnYVc0Z1hDSWdLeUJoY21kMWJXVnVkRTVoYldVZ0t5QmNJaTRnWENJcElDc2dYQ0pGZUhCbFkzUmxaQ0IwYnlCbWFXNWtJRzl1WlNCdlppQjBhR1VnYTI1dmQyNGdjbVZrZFdObGNpQnJaWGx6SUdsdWMzUmxZV1E2SUZ3aUlDc2dLRndpWEZ4Y0lsd2lJQ3NnY21Wa2RXTmxja3RsZVhNdWFtOXBiaWduWENJc0lGd2lKeWtnS3lCY0lseGNYQ0l1SUZWdVpYaHdaV04wWldRZ2EyVjVjeUIzYVd4c0lHSmxJR2xuYm05eVpXUXVYQ0lwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRnpjMlZ5ZEZKbFpIVmpaWEpUYUdGd1pTaHlaV1IxWTJWeWN5a2dlMXh1SUNCUFltcGxZM1F1YTJWNWN5aHlaV1IxWTJWeWN5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpQW9hMlY1S1NCN1hHNGdJQ0FnZG1GeUlISmxaSFZqWlhJZ1BTQnlaV1IxWTJWeWMxdHJaWGxkTzF4dUlDQWdJSFpoY2lCcGJtbDBhV0ZzVTNSaGRHVWdQU0J5WldSMVkyVnlLSFZ1WkdWbWFXNWxaQ3dnZTF4dUlDQWdJQ0FnZEhsd1pUb2dRV04wYVc5dVZIbHdaWE11U1U1SlZGeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnBibWwwYVdGc1UzUmhkR1VnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUFQwOUlGd2ljSEp2WkhWamRHbHZibHdpSUQ4Z1ptOXliV0YwVUhKdlpFVnljbTl5VFdWemMyRm5aU2d4TWlrZ09pQmNJbFJvWlNCemJHbGpaU0J5WldSMVkyVnlJR1p2Y2lCclpYa2dYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpSUhKbGRIVnlibVZrSUhWdVpHVm1hVzVsWkNCa2RYSnBibWNnYVc1cGRHbGhiR2w2WVhScGIyNHVJRndpSUNzZ1hDSkpaaUIwYUdVZ2MzUmhkR1VnY0dGemMyVmtJSFJ2SUhSb1pTQnlaV1IxWTJWeUlHbHpJSFZ1WkdWbWFXNWxaQ3dnZVc5MUlHMTFjM1FnWENJZ0t5QmNJbVY0Y0d4cFkybDBiSGtnY21WMGRYSnVJSFJvWlNCcGJtbDBhV0ZzSUhOMFlYUmxMaUJVYUdVZ2FXNXBkR2xoYkNCemRHRjBaU0J0WVhrZ1hDSWdLeUJjSW01dmRDQmlaU0IxYm1SbFptbHVaV1F1SUVsbUlIbHZkU0JrYjI0bmRDQjNZVzUwSUhSdklITmxkQ0JoSUhaaGJIVmxJR1p2Y2lCMGFHbHpJSEpsWkhWalpYSXNJRndpSUNzZ1hDSjViM1VnWTJGdUlIVnpaU0J1ZFd4c0lHbHVjM1JsWVdRZ2IyWWdkVzVrWldacGJtVmtMbHdpS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhKbFpIVmpaWElvZFc1a1pXWnBibVZrTENCN1hHNGdJQ0FnSUNCMGVYQmxPaUJCWTNScGIyNVVlWEJsY3k1UVVrOUNSVjlWVGt0T1QxZE9YMEZEVkVsUFRpZ3BYRzRnSUNBZ2ZTa2dQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQVDA5SUZ3aWNISnZaSFZqZEdsdmJsd2lJRDhnWm05eWJXRjBVSEp2WkVWeWNtOXlUV1Z6YzJGblpTZ3hNeWtnT2lCY0lsUm9aU0J6YkdsalpTQnlaV1IxWTJWeUlHWnZjaUJyWlhrZ1hGeGNJbHdpSUNzZ2EyVjVJQ3NnWENKY1hGd2lJSEpsZEhWeWJtVmtJSFZ1WkdWbWFXNWxaQ0IzYUdWdUlIQnliMkpsWkNCM2FYUm9JR0VnY21GdVpHOXRJSFI1Y0dVdUlGd2lJQ3NnS0Z3aVJHOXVKM1FnZEhKNUlIUnZJR2hoYm1Sc1pTQW5YQ0lnS3lCQlkzUnBiMjVVZVhCbGN5NUpUa2xVSUNzZ1hDSW5JRzl5SUc5MGFHVnlJR0ZqZEdsdmJuTWdhVzRnWEZ4Y0luSmxaSFY0THlwY1hGd2lJRndpS1NBcklGd2libUZ0WlhOd1lXTmxMaUJVYUdWNUlHRnlaU0JqYjI1emFXUmxjbVZrSUhCeWFYWmhkR1V1SUVsdWMzUmxZV1FzSUhsdmRTQnRkWE4wSUhKbGRIVnliaUIwYUdVZ1hDSWdLeUJjSW1OMWNuSmxiblFnYzNSaGRHVWdabTl5SUdGdWVTQjFibXR1YjNkdUlHRmpkR2x2Ym5Nc0lIVnViR1Z6Y3lCcGRDQnBjeUIxYm1SbFptbHVaV1FzSUZ3aUlDc2dYQ0pwYmlCM2FHbGphQ0JqWVhObElIbHZkU0J0ZFhOMElISmxkSFZ5YmlCMGFHVWdhVzVwZEdsaGJDQnpkR0YwWlN3Z2NtVm5ZWEprYkdWemN5QnZaaUIwYUdVZ1hDSWdLeUJjSW1GamRHbHZiaUIwZVhCbExpQlVhR1VnYVc1cGRHbGhiQ0J6ZEdGMFpTQnRZWGtnYm05MElHSmxJSFZ1WkdWbWFXNWxaQ3dnWW5WMElHTmhiaUJpWlNCdWRXeHNMbHdpS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlZ4dUx5b3FYRzRnS2lCVWRYSnVjeUJoYmlCdlltcGxZM1FnZDJodmMyVWdkbUZzZFdWeklHRnlaU0JrYVdabVpYSmxiblFnY21Wa2RXTmxjaUJtZFc1amRHbHZibk1zSUdsdWRHOGdZU0J6YVc1bmJHVmNiaUFxSUhKbFpIVmpaWElnWm5WdVkzUnBiMjR1SUVsMElIZHBiR3dnWTJGc2JDQmxkbVZ5ZVNCamFHbHNaQ0J5WldSMVkyVnlMQ0JoYm1RZ1oyRjBhR1Z5SUhSb1pXbHlJSEpsYzNWc2RITmNiaUFxSUdsdWRHOGdZU0J6YVc1bmJHVWdjM1JoZEdVZ2IySnFaV04wTENCM2FHOXpaU0JyWlhseklHTnZjbkpsYzNCdmJtUWdkRzhnZEdobElHdGxlWE1nYjJZZ2RHaGxJSEJoYzNObFpGeHVJQ29nY21Wa2RXTmxjaUJtZFc1amRHbHZibk11WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEpsWkhWalpYSnpJRUZ1SUc5aWFtVmpkQ0IzYUc5elpTQjJZV3gxWlhNZ1kyOXljbVZ6Y0c5dVpDQjBieUJrYVdabVpYSmxiblJjYmlBcUlISmxaSFZqWlhJZ1puVnVZM1JwYjI1eklIUm9ZWFFnYm1WbFpDQjBieUJpWlNCamIyMWlhVzVsWkNCcGJuUnZJRzl1WlM0Z1QyNWxJR2hoYm1SNUlIZGhlU0IwYnlCdlluUmhhVzVjYmlBcUlHbDBJR2x6SUhSdklIVnpaU0JGVXpZZ1lHbHRjRzl5ZENBcUlHRnpJSEpsWkhWalpYSnpZQ0J6ZVc1MFlYZ3VJRlJvWlNCeVpXUjFZMlZ5Y3lCdFlYa2dibVYyWlhJZ2NtVjBkWEp1WEc0Z0tpQjFibVJsWm1sdVpXUWdabTl5SUdGdWVTQmhZM1JwYjI0dUlFbHVjM1JsWVdRc0lIUm9aWGtnYzJodmRXeGtJSEpsZEhWeWJpQjBhR1ZwY2lCcGJtbDBhV0ZzSUhOMFlYUmxYRzRnS2lCcFppQjBhR1VnYzNSaGRHVWdjR0Z6YzJWa0lIUnZJSFJvWlcwZ2QyRnpJSFZ1WkdWbWFXNWxaQ3dnWVc1a0lIUm9aU0JqZFhKeVpXNTBJSE4wWVhSbElHWnZjaUJoYm5sY2JpQXFJSFZ1Y21WamIyZHVhWHBsWkNCaFkzUnBiMjR1WEc0Z0tseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCQklISmxaSFZqWlhJZ1puVnVZM1JwYjI0Z2RHaGhkQ0JwYm5admEyVnpJR1YyWlhKNUlISmxaSFZqWlhJZ2FXNXphV1JsSUhSb1pWeHVJQ29nY0dGemMyVmtJRzlpYW1WamRDd2dZVzVrSUdKMWFXeGtjeUJoSUhOMFlYUmxJRzlpYW1WamRDQjNhWFJvSUhSb1pTQnpZVzFsSUhOb1lYQmxMbHh1SUNvdlhHNWNibHh1Wm5WdVkzUnBiMjRnWTI5dFltbHVaVkpsWkhWalpYSnpLSEpsWkhWalpYSnpLU0I3WEc0Z0lIWmhjaUJ5WldSMVkyVnlTMlY1Y3lBOUlFOWlhbVZqZEM1clpYbHpLSEpsWkhWalpYSnpLVHRjYmlBZ2RtRnlJR1pwYm1Gc1VtVmtkV05sY25NZ1BTQjdmVHRjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEpsWkhWalpYSkxaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJR3RsZVNBOUlISmxaSFZqWlhKTFpYbHpXMmxkTzF4dVhHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY21Wa2RXTmxjbk5iYTJWNVhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdkMkZ5Ym1sdVp5aGNJazV2SUhKbFpIVmpaWElnY0hKdmRtbGtaV1FnWm05eUlHdGxlU0JjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENKY0lpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnlaV1IxWTJWeWMxdHJaWGxkSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0JtYVc1aGJGSmxaSFZqWlhKelcydGxlVjBnUFNCeVpXUjFZMlZ5YzF0clpYbGRPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFpoY2lCbWFXNWhiRkpsWkhWalpYSkxaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9abWx1WVd4U1pXUjFZMlZ5Y3lrN0lDOHZJRlJvYVhNZ2FYTWdkWE5sWkNCMGJ5QnRZV3RsSUhOMWNtVWdkMlVnWkc5dUozUWdkMkZ5YmlCaFltOTFkQ0IwYUdVZ2MyRnRaVnh1SUNBdkx5QnJaWGx6SUcxMWJIUnBjR3hsSUhScGJXVnpMbHh1WEc0Z0lIWmhjaUIxYm1WNGNHVmpkR1ZrUzJWNVEyRmphR1U3WEc1Y2JpQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCMWJtVjRjR1ZqZEdWa1MyVjVRMkZqYUdVZ1BTQjdmVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnphR0Z3WlVGemMyVnlkR2x2YmtWeWNtOXlPMXh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdZWE56WlhKMFVtVmtkV05sY2xOb1lYQmxLR1pwYm1Gc1VtVmtkV05sY25NcE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnYzJoaGNHVkJjM05sY25ScGIyNUZjbkp2Y2lBOUlHVTdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdZMjl0WW1sdVlYUnBiMjRvYzNSaGRHVXNJR0ZqZEdsdmJpa2dlMXh1SUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnZG05cFpDQXdLU0I3WEc0Z0lDQWdJQ0J6ZEdGMFpTQTlJSHQ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoemFHRndaVUZ6YzJWeWRHbHZia1Z5Y205eUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCemFHRndaVUZ6YzJWeWRHbHZia1Z5Y205eU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2QyRnlibWx1WjAxbGMzTmhaMlVnUFNCblpYUlZibVY0Y0dWamRHVmtVM1JoZEdWVGFHRndaVmRoY201cGJtZE5aWE56WVdkbEtITjBZWFJsTENCbWFXNWhiRkpsWkhWalpYSnpMQ0JoWTNScGIyNHNJSFZ1Wlhod1pXTjBaV1JMWlhsRFlXTm9aU2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaDNZWEp1YVc1blRXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1YVc1bktIZGhjbTVwYm1kTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2FHRnpRMmhoYm1kbFpDQTlJR1poYkhObE8xeHVJQ0FnSUhaaGNpQnVaWGgwVTNSaGRHVWdQU0I3ZlR0Y2JseHVJQ0FnSUdadmNpQW9kbUZ5SUY5cElEMGdNRHNnWDJrZ1BDQm1hVzVoYkZKbFpIVmpaWEpMWlhsekxteGxibWQwYURzZ1gya3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlGOXJaWGtnUFNCbWFXNWhiRkpsWkhWalpYSkxaWGx6VzE5cFhUdGNiaUFnSUNBZ0lIWmhjaUJ5WldSMVkyVnlJRDBnWm1sdVlXeFNaV1IxWTJWeWMxdGZhMlY1WFR0Y2JpQWdJQ0FnSUhaaGNpQndjbVYyYVc5MWMxTjBZWFJsUm05eVMyVjVJRDBnYzNSaGRHVmJYMnRsZVYwN1hHNGdJQ0FnSUNCMllYSWdibVY0ZEZOMFlYUmxSbTl5UzJWNUlEMGdjbVZrZFdObGNpaHdjbVYyYVc5MWMxTjBZWFJsUm05eVMyVjVMQ0JoWTNScGIyNHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1bGVIUlRkR0YwWlVadmNrdGxlU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHRmpkR2x2YmxSNWNHVWdQU0JoWTNScGIyNGdKaVlnWVdOMGFXOXVMblI1Y0dVN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQTlQVDBnWENKd2NtOWtkV04wYVc5dVhDSWdQeUJtYjNKdFlYUlFjbTlrUlhKeWIzSk5aWE56WVdkbEtERTBLU0E2SUZ3aVYyaGxiaUJqWVd4c1pXUWdkMmwwYUNCaGJpQmhZM1JwYjI0Z2IyWWdkSGx3WlNCY0lpQXJJQ2hoWTNScGIyNVVlWEJsSUQ4Z1hDSmNYRndpWENJZ0t5QlRkSEpwYm1jb1lXTjBhVzl1Vkhsd1pTa2dLeUJjSWx4Y1hDSmNJaUE2SUNjb2RXNXJibTkzYmlCMGVYQmxLU2NwSUNzZ1hDSXNJSFJvWlNCemJHbGpaU0J5WldSMVkyVnlJR1p2Y2lCclpYa2dYRnhjSWx3aUlDc2dYMnRsZVNBcklGd2lYRnhjSWlCeVpYUjFjbTVsWkNCMWJtUmxabWx1WldRdUlGd2lJQ3NnWENKVWJ5QnBaMjV2Y21VZ1lXNGdZV04wYVc5dUxDQjViM1VnYlhWemRDQmxlSEJzYVdOcGRHeDVJSEpsZEhWeWJpQjBhR1VnY0hKbGRtbHZkWE1nYzNSaGRHVXVJRndpSUNzZ1hDSkpaaUI1YjNVZ2QyRnVkQ0IwYUdseklISmxaSFZqWlhJZ2RHOGdhRzlzWkNCdWJ5QjJZV3gxWlN3Z2VXOTFJR05oYmlCeVpYUjFjbTRnYm5Wc2JDQnBibk4wWldGa0lHOW1JSFZ1WkdWbWFXNWxaQzVjSWlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHNWxlSFJUZEdGMFpWdGZhMlY1WFNBOUlHNWxlSFJUZEdGMFpVWnZja3RsZVR0Y2JpQWdJQ0FnSUdoaGMwTm9ZVzVuWldRZ1BTQm9ZWE5EYUdGdVoyVmtJSHg4SUc1bGVIUlRkR0YwWlVadmNrdGxlU0FoUFQwZ2NISmxkbWx2ZFhOVGRHRjBaVVp2Y2t0bGVUdGNiaUFnSUNCOVhHNWNiaUFnSUNCb1lYTkRhR0Z1WjJWa0lEMGdhR0Z6UTJoaGJtZGxaQ0I4ZkNCbWFXNWhiRkpsWkhWalpYSkxaWGx6TG14bGJtZDBhQ0FoUFQwZ1QySnFaV04wTG10bGVYTW9jM1JoZEdVcExteGxibWQwYUR0Y2JpQWdJQ0J5WlhSMWNtNGdhR0Z6UTJoaGJtZGxaQ0EvSUc1bGVIUlRkR0YwWlNBNklITjBZWFJsTzF4dUlDQjlPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmlhVzVrUVdOMGFXOXVRM0psWVhSdmNpaGhZM1JwYjI1RGNtVmhkRzl5TENCa2FYTndZWFJqYUNrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmthWE53WVhSamFDaGhZM1JwYjI1RGNtVmhkRzl5TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5a3BPMXh1SUNCOU8xeHVmVnh1THlvcVhHNGdLaUJVZFhKdWN5QmhiaUJ2WW1wbFkzUWdkMmh2YzJVZ2RtRnNkV1Z6SUdGeVpTQmhZM1JwYjI0Z1kzSmxZWFJ2Y25Nc0lHbHVkRzhnWVc0Z2IySnFaV04wSUhkcGRHZ2dkR2hsWEc0Z0tpQnpZVzFsSUd0bGVYTXNJR0oxZENCM2FYUm9JR1YyWlhKNUlHWjFibU4wYVc5dUlIZHlZWEJ3WldRZ2FXNTBieUJoSUdCa2FYTndZWFJqYUdBZ1kyRnNiQ0J6YnlCMGFHVjVYRzRnS2lCdFlYa2dZbVVnYVc1MmIydGxaQ0JrYVhKbFkzUnNlUzRnVkdocGN5QnBjeUJxZFhOMElHRWdZMjl1ZG1WdWFXVnVZMlVnYldWMGFHOWtMQ0JoY3lCNWIzVWdZMkZ1SUdOaGJHeGNiaUFxSUdCemRHOXlaUzVrYVhOd1lYUmphQ2hOZVVGamRHbHZia055WldGMGIzSnpMbVJ2VTI5dFpYUm9hVzVuS0NrcFlDQjViM1Z5YzJWc1ppQnFkWE4wSUdacGJtVXVYRzRnS2x4dUlDb2dSbTl5SUdOdmJuWmxibWxsYm1ObExDQjViM1VnWTJGdUlHRnNjMjhnY0dGemN5QmhiaUJoWTNScGIyNGdZM0psWVhSdmNpQmhjeUIwYUdVZ1ptbHljM1FnWVhKbmRXMWxiblFzWEc0Z0tpQmhibVFnWjJWMElHRWdaR2x6Y0dGMFkyZ2dkM0poY0hCbFpDQm1kVzVqZEdsdmJpQnBiaUJ5WlhSMWNtNHVYRzRnS2x4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJueFBZbXBsWTNSOUlHRmpkR2x2YmtOeVpXRjBiM0p6SUVGdUlHOWlhbVZqZENCM2FHOXpaU0IyWVd4MVpYTWdZWEpsSUdGamRHbHZibHh1SUNvZ1kzSmxZWFJ2Y2lCbWRXNWpkR2x2Ym5NdUlFOXVaU0JvWVc1a2VTQjNZWGtnZEc4Z2IySjBZV2x1SUdsMElHbHpJSFJ2SUhWelpTQkZVellnWUdsdGNHOXlkQ0FxSUdGellGeHVJQ29nYzNsdWRHRjRMaUJaYjNVZ2JXRjVJR0ZzYzI4Z2NHRnpjeUJoSUhOcGJtZHNaU0JtZFc1amRHbHZiaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JrYVhOd1lYUmphQ0JVYUdVZ1lHUnBjM0JoZEdOb1lDQm1kVzVqZEdsdmJpQmhkbUZwYkdGaWJHVWdiMjRnZVc5MWNpQlNaV1IxZUZ4dUlDb2djM1J2Y21VdVhHNGdLbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZFOWlhbVZqZEgwZ1ZHaGxJRzlpYW1WamRDQnRhVzFwWTJ0cGJtY2dkR2hsSUc5eWFXZHBibUZzSUc5aWFtVmpkQ3dnWW5WMElIZHBkR2hjYmlBcUlHVjJaWEo1SUdGamRHbHZiaUJqY21WaGRHOXlJSGR5WVhCd1pXUWdhVzUwYnlCMGFHVWdZR1JwYzNCaGRHTm9ZQ0JqWVd4c0xpQkpaaUI1YjNVZ2NHRnpjMlZrSUdGY2JpQXFJR1oxYm1OMGFXOXVJR0Z6SUdCaFkzUnBiMjVEY21WaGRHOXljMkFzSUhSb1pTQnlaWFIxY200Z2RtRnNkV1VnZDJsc2JDQmhiSE52SUdKbElHRWdjMmx1WjJ4bFhHNGdLaUJtZFc1amRHbHZiaTVjYmlBcUwxeHVYRzVjYm1aMWJtTjBhVzl1SUdKcGJtUkJZM1JwYjI1RGNtVmhkRzl5Y3loaFkzUnBiMjVEY21WaGRHOXljeXdnWkdsemNHRjBZMmdwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJoWTNScGIyNURjbVZoZEc5eWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJpYVc1a1FXTjBhVzl1UTNKbFlYUnZjaWhoWTNScGIyNURjbVZoZEc5eWN5d2daR2x6Y0dGMFkyZ3BPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaFkzUnBiMjVEY21WaGRHOXljeUFoUFQwZ0oyOWlhbVZqZENjZ2ZId2dZV04wYVc5dVEzSmxZWFJ2Y25NZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJRndpY0hKdlpIVmpkR2x2Ymx3aUlEOGdabTl5YldGMFVISnZaRVZ5Y205eVRXVnpjMkZuWlNneE5pa2dPaUJjSW1KcGJtUkJZM1JwYjI1RGNtVmhkRzl5Y3lCbGVIQmxZM1JsWkNCaGJpQnZZbXBsWTNRZ2IzSWdZU0JtZFc1amRHbHZiaXdnWW5WMElHbHVjM1JsWVdRZ2NtVmpaV2wyWldRNklDZGNJaUFySUd0cGJtUlBaaWhoWTNScGIyNURjbVZoZEc5eWN5a2dLeUJjSWljdUlGd2lJQ3NnWENKRWFXUWdlVzkxSUhkeWFYUmxJRnhjWENKcGJYQnZjblFnUVdOMGFXOXVRM0psWVhSdmNuTWdabkp2YlZ4Y1hDSWdhVzV6ZEdWaFpDQnZaaUJjWEZ3aWFXMXdiM0owSUNvZ1lYTWdRV04wYVc5dVEzSmxZWFJ2Y25NZ1puSnZiVnhjWENJL1hDSXBPMXh1SUNCOVhHNWNiaUFnZG1GeUlHSnZkVzVrUVdOMGFXOXVRM0psWVhSdmNuTWdQU0I3ZlR0Y2JseHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdZV04wYVc5dVEzSmxZWFJ2Y25NcElIdGNiaUFnSUNCMllYSWdZV04wYVc5dVEzSmxZWFJ2Y2lBOUlHRmpkR2x2YmtOeVpXRjBiM0p6VzJ0bGVWMDdYRzVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR0ZqZEdsdmJrTnlaV0YwYjNJZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUdKdmRXNWtRV04wYVc5dVEzSmxZWFJ2Y25OYmEyVjVYU0E5SUdKcGJtUkJZM1JwYjI1RGNtVmhkRzl5S0dGamRHbHZia055WldGMGIzSXNJR1JwYzNCaGRHTm9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZbTkxYm1SQlkzUnBiMjVEY21WaGRHOXljenRjYm4xY2JseHVMeW9xWEc0Z0tpQkRiMjF3YjNObGN5QnphVzVuYkdVdFlYSm5kVzFsYm5RZ1puVnVZM1JwYjI1eklHWnliMjBnY21sbmFIUWdkRzhnYkdWbWRDNGdWR2hsSUhKcFoyaDBiVzl6ZEZ4dUlDb2dablZ1WTNScGIyNGdZMkZ1SUhSaGEyVWdiWFZzZEdsd2JHVWdZWEpuZFcxbGJuUnpJR0Z6SUdsMElIQnliM1pwWkdWeklIUm9aU0J6YVdkdVlYUjFjbVVnWm05eVhHNGdLaUIwYUdVZ2NtVnpkV3gwYVc1bklHTnZiWEJ2YzJsMFpTQm1kVzVqZEdsdmJpNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2V5NHVMa1oxYm1OMGFXOXVmU0JtZFc1amN5QlVhR1VnWm5WdVkzUnBiMjV6SUhSdklHTnZiWEJ2YzJVdVhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUVFZ1puVnVZM1JwYjI0Z2IySjBZV2x1WldRZ1lua2dZMjl0Y0c5emFXNW5JSFJvWlNCaGNtZDFiV1Z1ZENCbWRXNWpkR2x2Ym5OY2JpQXFJR1p5YjIwZ2NtbG5hSFFnZEc4Z2JHVm1kQzRnUm05eUlHVjRZVzF3YkdVc0lHTnZiWEJ2YzJVb1ppd2daeXdnYUNrZ2FYTWdhV1JsYm5ScFkyRnNJSFJ2SUdSdmFXNW5YRzRnS2lBb0xpNHVZWEpuY3lrZ1BUNGdaaWhuS0dnb0xpNHVZWEpuY3lrcEtTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kyOXRjRzl6WlNncElIdGNiaUFnWm05eUlDaDJZWElnWDJ4bGJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NJR1oxYm1OeklEMGdibVYzSUVGeWNtRjVLRjlzWlc0cExDQmZhMlY1SUQwZ01Ec2dYMnRsZVNBOElGOXNaVzQ3SUY5clpYa3JLeWtnZTF4dUlDQWdJR1oxYm1OelcxOXJaWGxkSUQwZ1lYSm5kVzFsYm5SelcxOXJaWGxkTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR1oxYm1OekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9ZWEpuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVhKbk8xeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQnBaaUFvWm5WdVkzTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1Oeld6QmRPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1oxYm1OekxuSmxaSFZqWlNobWRXNWpkR2x2YmlBb1lTd2dZaWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZU2hpTG1Gd2NHeDVLSFp2YVdRZ01Dd2dZWEpuZFcxbGJuUnpLU2s3WEc0Z0lDQWdmVHRjYmlBZ2ZTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElITjBiM0psSUdWdWFHRnVZMlZ5SUhSb1lYUWdZWEJ3YkdsbGN5QnRhV1JrYkdWM1lYSmxJSFJ2SUhSb1pTQmthWE53WVhSamFDQnRaWFJvYjJSY2JpQXFJRzltSUhSb1pTQlNaV1IxZUNCemRHOXlaUzRnVkdocGN5QnBjeUJvWVc1a2VTQm1iM0lnWVNCMllYSnBaWFI1SUc5bUlIUmhjMnR6TENCemRXTm9JR0Z6SUdWNGNISmxjM05wYm1kY2JpQXFJR0Z6ZVc1amFISnZibTkxY3lCaFkzUnBiMjV6SUdsdUlHRWdZMjl1WTJselpTQnRZVzV1WlhJc0lHOXlJR3h2WjJkcGJtY2daWFpsY25rZ1lXTjBhVzl1SUhCaGVXeHZZV1F1WEc0Z0tseHVJQ29nVTJWbElHQnlaV1IxZUMxMGFIVnVhMkFnY0dGamEyRm5aU0JoY3lCaGJpQmxlR0Z0Y0d4bElHOW1JSFJvWlNCU1pXUjFlQ0J0YVdSa2JHVjNZWEpsTGx4dUlDcGNiaUFxSUVKbFkyRjFjMlVnYldsa1pHeGxkMkZ5WlNCcGN5QndiM1JsYm5ScFlXeHNlU0JoYzNsdVkyaHliMjV2ZFhNc0lIUm9hWE1nYzJodmRXeGtJR0psSUhSb1pTQm1hWEp6ZEZ4dUlDb2djM1J2Y21VZ1pXNW9ZVzVqWlhJZ2FXNGdkR2hsSUdOdmJYQnZjMmwwYVc5dUlHTm9ZV2x1TGx4dUlDcGNiaUFxSUU1dmRHVWdkR2hoZENCbFlXTm9JRzFwWkdSc1pYZGhjbVVnZDJsc2JDQmlaU0JuYVhabGJpQjBhR1VnWUdScGMzQmhkR05vWUNCaGJtUWdZR2RsZEZOMFlYUmxZQ0JtZFc1amRHbHZibk5jYmlBcUlHRnpJRzVoYldWa0lHRnlaM1Z0Wlc1MGN5NWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2V5NHVMa1oxYm1OMGFXOXVmU0J0YVdSa2JHVjNZWEpsY3lCVWFHVWdiV2xrWkd4bGQyRnlaU0JqYUdGcGJpQjBieUJpWlNCaGNIQnNhV1ZrTGx4dUlDb2dRSEpsZEhWeWJuTWdlMFoxYm1OMGFXOXVmU0JCSUhOMGIzSmxJR1Z1YUdGdVkyVnlJR0Z3Y0d4NWFXNW5JSFJvWlNCdGFXUmtiR1YzWVhKbExseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHRndjR3g1VFdsa1pHeGxkMkZ5WlNncElIdGNiaUFnWm05eUlDaDJZWElnWDJ4bGJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NJRzFwWkdSc1pYZGhjbVZ6SUQwZ2JtVjNJRUZ5Y21GNUtGOXNaVzRwTENCZmEyVjVJRDBnTURzZ1gydGxlU0E4SUY5c1pXNDdJRjlyWlhrckt5a2dlMXh1SUNBZ0lHMXBaR1JzWlhkaGNtVnpXMTlyWlhsZElEMGdZWEpuZFcxbGJuUnpXMTlyWlhsZE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaGpjbVZoZEdWVGRHOXlaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MzUnZjbVVnUFNCamNtVmhkR1ZUZEc5eVpTNWhjSEJzZVNoMmIybGtJREFzSUdGeVozVnRaVzUwY3lrN1hHNWNiaUFnSUNBZ0lIWmhjaUJmWkdsemNHRjBZMmdnUFNCbWRXNWpkR2x2YmlCa2FYTndZWFJqYUNncElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDA5UFNCY0luQnliMlIxWTNScGIyNWNJaUEvSUdadmNtMWhkRkJ5YjJSRmNuSnZjazFsYzNOaFoyVW9NVFVwSURvZ0owUnBjM0JoZEdOb2FXNW5JSGRvYVd4bElHTnZibk4wY25WamRHbHVaeUI1YjNWeUlHMXBaR1JzWlhkaGNtVWdhWE1nYm05MElHRnNiRzkzWldRdUlDY2dLeUFuVDNSb1pYSWdiV2xrWkd4bGQyRnlaU0IzYjNWc1pDQnViM1FnWW1VZ1lYQndiR2xsWkNCMGJ5QjBhR2x6SUdScGMzQmhkR05vTGljcE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdkbUZ5SUcxcFpHUnNaWGRoY21WQlVFa2dQU0I3WEc0Z0lDQWdJQ0FnSUdkbGRGTjBZWFJsT2lCemRHOXlaUzVuWlhSVGRHRjBaU3hjYmlBZ0lDQWdJQ0FnWkdsemNHRjBZMmc2SUdaMWJtTjBhVzl1SUdScGMzQmhkR05vS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZaR2x6Y0dGMFkyZ3VZWEJ3Ykhrb2RtOXBaQ0F3TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdkbUZ5SUdOb1lXbHVJRDBnYldsa1pHeGxkMkZ5WlhNdWJXRndLR1oxYm1OMGFXOXVJQ2h0YVdSa2JHVjNZWEpsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdGFXUmtiR1YzWVhKbEtHMXBaR1JzWlhkaGNtVkJVRWtwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCZlpHbHpjR0YwWTJnZ1BTQmpiMjF3YjNObExtRndjR3g1S0hadmFXUWdNQ3dnWTJoaGFXNHBLSE4wYjNKbExtUnBjM0JoZEdOb0tUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCZmIySnFaV04wVTNCeVpXRmtLRjl2WW1wbFkzUlRjSEpsWVdRb2UzMHNJSE4wYjNKbEtTd2dlMzBzSUh0Y2JpQWdJQ0FnSUNBZ1pHbHpjR0YwWTJnNklGOWthWE53WVhSamFGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNiaUFnZlR0Y2JuMWNibHh1THlwY2JpQXFJRlJvYVhNZ2FYTWdZU0JrZFcxdGVTQm1kVzVqZEdsdmJpQjBieUJqYUdWamF5QnBaaUIwYUdVZ1puVnVZM1JwYjI0Z2JtRnRaU0JvWVhNZ1ltVmxiaUJoYkhSbGNtVmtJR0o1SUcxcGJtbG1hV05oZEdsdmJpNWNiaUFxSUVsbUlIUm9aU0JtZFc1amRHbHZiaUJvWVhNZ1ltVmxiaUJ0YVc1cFptbGxaQ0JoYm1RZ1RrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1Snl3Z2QyRnliaUIwYUdVZ2RYTmxjaTVjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJwYzBOeWRYTm9aV1FvS1NCN2ZWeHVYRzVwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KaUIwZVhCbGIyWWdhWE5EY25WemFHVmtMbTVoYldVZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUdselEzSjFjMmhsWkM1dVlXMWxJQ0U5UFNBbmFYTkRjblZ6YUdWa0p5a2dlMXh1SUNCM1lYSnVhVzVuS0NkWmIzVWdZWEpsSUdOMWNuSmxiblJzZVNCMWMybHVaeUJ0YVc1cFptbGxaQ0JqYjJSbElHOTFkSE5wWkdVZ2IyWWdUazlFUlY5RlRsWWdQVDA5SUZ3aWNISnZaSFZqZEdsdmJsd2lMaUFuSUNzZ0oxUm9hWE1nYldWaGJuTWdkR2hoZENCNWIzVWdZWEpsSUhKMWJtNXBibWNnWVNCemJHOTNaWElnWkdWMlpXeHZjRzFsYm5RZ1luVnBiR1FnYjJZZ1VtVmtkWGd1SUNjZ0t5QW5XVzkxSUdOaGJpQjFjMlVnYkc5dmMyVXRaVzUyYVdaNUlDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZlbVZ5ZEc5emFDOXNiMjl6WlMxbGJuWnBabmtwSUdadmNpQmljbTkzYzJWeWFXWjVJQ2NnS3lBbmIzSWdjMlYwZEdsdVp5QnRiMlJsSUhSdklIQnliMlIxWTNScGIyNGdhVzRnZDJWaWNHRmpheUFvYUhSMGNITTZMeTkzWldKd1lXTnJMbXB6TG05eVp5OWpiMjVqWlhCMGN5OXRiMlJsTHlrZ0p5QXJJQ2QwYnlCbGJuTjFjbVVnZVc5MUlHaGhkbVVnZEdobElHTnZjbkpsWTNRZ1kyOWtaU0JtYjNJZ2VXOTFjaUJ3Y205a2RXTjBhVzl1SUdKMWFXeGtMaWNwTzF4dWZWeHVYRzVsZUhCdmNuUWdleUJCWTNScGIyNVVlWEJsY3lCaGN5QmZYMFJQWDA1UFZGOVZVMFZmWDBGamRHbHZibFI1Y0dWekxDQmhjSEJzZVUxcFpHUnNaWGRoY21Vc0lHSnBibVJCWTNScGIyNURjbVZoZEc5eWN5d2dZMjl0WW1sdVpWSmxaSFZqWlhKekxDQmpiMjF3YjNObExDQmpjbVZoZEdWVGRHOXlaU3dnYkdWbllXTjVYMk55WldGMFpWTjBiM0psSUgwN1hHNGlMQ0l2S2lCbGMyeHBiblF0Wlc1MklHSnliM2R6WlhJZ0tpOWNibHh1THlvcVhHNGdLaUJVYUdseklHbHpJSFJvWlNCM1pXSWdZbkp2ZDNObGNpQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdaR1ZpZFdjb0tXQXVYRzRnS2k5Y2JseHVaWGh3YjNKMGN5NW1iM0p0WVhSQmNtZHpJRDBnWm05eWJXRjBRWEpuY3p0Y2JtVjRjRzl5ZEhNdWMyRjJaU0E5SUhOaGRtVTdYRzVsZUhCdmNuUnpMbXh2WVdRZ1BTQnNiMkZrTzF4dVpYaHdiM0owY3k1MWMyVkRiMnh2Y25NZ1BTQjFjMlZEYjJ4dmNuTTdYRzVsZUhCdmNuUnpMbk4wYjNKaFoyVWdQU0JzYjJOaGJITjBiM0poWjJVb0tUdGNibVY0Y0c5eWRITXVaR1Z6ZEhKdmVTQTlJQ2dvS1NBOVBpQjdYRzVjZEd4bGRDQjNZWEp1WldRZ1BTQm1ZV3h6WlR0Y2JseHVYSFJ5WlhSMWNtNGdLQ2tnUFQ0Z2UxeHVYSFJjZEdsbUlDZ2hkMkZ5Ym1Wa0tTQjdYRzVjZEZ4MFhIUjNZWEp1WldRZ1BTQjBjblZsTzF4dVhIUmNkRngwWTI5dWMyOXNaUzUzWVhKdUtDZEpibk4wWVc1alpTQnRaWFJvYjJRZ1lHUmxZblZuTG1SbGMzUnliM2tvS1dBZ2FYTWdaR1Z3Y21WallYUmxaQ0JoYm1RZ2JtOGdiRzl1WjJWeUlHUnZaWE1nWVc1NWRHaHBibWN1SUVsMElIZHBiR3dnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnYm1WNGRDQnRZV3B2Y2lCMlpYSnphVzl1SUc5bUlHQmtaV0oxWjJBdUp5azdYRzVjZEZ4MGZWeHVYSFI5TzF4dWZTa29LVHRjYmx4dUx5b3FYRzRnS2lCRGIyeHZjbk11WEc0Z0tpOWNibHh1Wlhod2IzSjBjeTVqYjJ4dmNuTWdQU0JiWEc1Y2RDY2pNREF3TUVOREp5eGNibHgwSnlNd01EQXdSa1luTEZ4dVhIUW5JekF3TXpORFF5Y3NYRzVjZENjak1EQXpNMFpHSnl4Y2JseDBKeU13TURZMlEwTW5MRnh1WEhRbkl6QXdOalpHUmljc1hHNWNkQ2NqTURBNU9VTkRKeXhjYmx4MEp5TXdNRGs1UmtZbkxGeHVYSFFuSXpBd1EwTXdNQ2NzWEc1Y2RDY2pNREJEUXpNekp5eGNibHgwSnlNd01FTkROalluTEZ4dVhIUW5JekF3UTBNNU9TY3NYRzVjZENjak1EQkRRME5ESnl4Y2JseDBKeU13TUVORFJrWW5MRnh1WEhRbkl6TXpNREJEUXljc1hHNWNkQ2NqTXpNd01FWkdKeXhjYmx4MEp5TXpNek16UTBNbkxGeHVYSFFuSXpNek16TkdSaWNzWEc1Y2RDY2pNek0yTmtOREp5eGNibHgwSnlNek16WTJSa1luTEZ4dVhIUW5Jek16T1RsRFF5Y3NYRzVjZENjak16TTVPVVpHSnl4Y2JseDBKeU16TTBORE1EQW5MRnh1WEhRbkl6TXpRME16TXljc1hHNWNkQ2NqTXpORFF6WTJKeXhjYmx4MEp5TXpNME5ET1RrbkxGeHVYSFFuSXpNelEwTkRReWNzWEc1Y2RDY2pNek5EUTBaR0p5eGNibHgwSnlNMk5qQXdRME1uTEZ4dVhIUW5JelkyTURCR1JpY3NYRzVjZENjak5qWXpNME5ESnl4Y2JseDBKeU0yTmpNelJrWW5MRnh1WEhRbkl6WTJRME13TUNjc1hHNWNkQ2NqTmpaRFF6TXpKeXhjYmx4MEp5TTVPVEF3UTBNbkxGeHVYSFFuSXprNU1EQkdSaWNzWEc1Y2RDY2pPVGt6TTBOREp5eGNibHgwSnlNNU9UTXpSa1luTEZ4dVhIUW5Jems1UTBNd01DY3NYRzVjZENjak9UbERRek16Snl4Y2JseDBKeU5EUXpBd01EQW5MRnh1WEhRbkkwTkRNREF6TXljc1hHNWNkQ2NqUTBNd01EWTJKeXhjYmx4MEp5TkRRekF3T1RrbkxGeHVYSFFuSTBORE1EQkRReWNzWEc1Y2RDY2pRME13TUVaR0p5eGNibHgwSnlORFF6TXpNREFuTEZ4dVhIUW5JME5ETXpNek15Y3NYRzVjZENjalEwTXpNelkySnl4Y2JseDBKeU5EUXpNek9Ua25MRnh1WEhRbkkwTkRNek5EUXljc1hHNWNkQ2NqUTBNek0wWkdKeXhjYmx4MEp5TkRRelkyTURBbkxGeHVYSFFuSTBORE5qWXpNeWNzWEc1Y2RDY2pRME01T1RBd0p5eGNibHgwSnlORFF6azVNek1uTEZ4dVhIUW5JME5EUTBNd01DY3NYRzVjZENjalEwTkRRek16Snl4Y2JseDBKeU5HUmpBd01EQW5MRnh1WEhRbkkwWkdNREF6TXljc1hHNWNkQ2NqUmtZd01EWTJKeXhjYmx4MEp5TkdSakF3T1RrbkxGeHVYSFFuSTBaR01EQkRReWNzWEc1Y2RDY2pSa1l3TUVaR0p5eGNibHgwSnlOR1JqTXpNREFuTEZ4dVhIUW5JMFpHTXpNek15Y3NYRzVjZENjalJrWXpNelkySnl4Y2JseDBKeU5HUmpNek9Ua25MRnh1WEhRbkkwWkdNek5EUXljc1hHNWNkQ2NqUmtZek0wWkdKeXhjYmx4MEp5TkdSalkyTURBbkxGeHVYSFFuSTBaR05qWXpNeWNzWEc1Y2RDY2pSa1k1T1RBd0p5eGNibHgwSnlOR1JqazVNek1uTEZ4dVhIUW5JMFpHUTBNd01DY3NYRzVjZENjalJrWkRRek16SjF4dVhUdGNibHh1THlvcVhHNGdLaUJEZFhKeVpXNTBiSGtnYjI1c2VTQlhaV0pMYVhRdFltRnpaV1FnVjJWaUlFbHVjM0JsWTNSdmNuTXNJRVpwY21WbWIzZ2dQajBnZGpNeExGeHVJQ29nWVc1a0lIUm9aU0JHYVhKbFluVm5JR1Y0ZEdWdWMybHZiaUFvWVc1NUlFWnBjbVZtYjNnZ2RtVnljMmx2YmlrZ1lYSmxJR3R1YjNkdVhHNGdLaUIwYnlCemRYQndiM0owSUZ3aUpXTmNJaUJEVTFNZ1kzVnpkRzl0YVhwaGRHbHZibk11WEc0Z0tseHVJQ29nVkU5RVR6b2dZV1JrSUdFZ1lHeHZZMkZzVTNSdmNtRm5aV0FnZG1GeWFXRmliR1VnZEc4Z1pYaHdiR2xqYVhSc2VTQmxibUZpYkdVdlpHbHpZV0pzWlNCamIyeHZjbk5jYmlBcUwxeHVYRzR2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnWTI5dGNHeGxlR2wwZVZ4dVpuVnVZM1JwYjI0Z2RYTmxRMjlzYjNKektDa2dlMXh1WEhRdkx5Qk9Ram9nU1c0Z1lXNGdSV3hsWTNSeWIyNGdjSEpsYkc5aFpDQnpZM0pwY0hRc0lHUnZZM1Z0Wlc1MElIZHBiR3dnWW1VZ1pHVm1hVzVsWkNCaWRYUWdibTkwSUdaMWJHeDVYRzVjZEM4dklHbHVhWFJwWVd4cGVtVmtMaUJUYVc1alpTQjNaU0JyYm05M0lIZGxKM0psSUdsdUlFTm9jbTl0WlN3Z2QyVW5iR3dnYW5WemRDQmtaWFJsWTNRZ2RHaHBjeUJqWVhObFhHNWNkQzh2SUdWNGNHeHBZMmwwYkhsY2JseDBhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSGRwYm1SdmR5NXdjbTlqWlhOeklDWW1JQ2gzYVc1a2IzY3VjSEp2WTJWemN5NTBlWEJsSUQwOVBTQW5jbVZ1WkdWeVpYSW5JSHg4SUhkcGJtUnZkeTV3Y205alpYTnpMbDlmYm5kcWN5a3BJSHRjYmx4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MGZWeHVYRzVjZEM4dklFbHVkR1Z5Ym1WMElFVjRjR3h2Y21WeUlHRnVaQ0JGWkdkbElHUnZJRzV2ZENCemRYQndiM0owSUdOdmJHOXljeTVjYmx4MGFXWWdLSFI1Y0dWdlppQnVZWFpwWjJGMGIzSWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JRzVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblFnSmlZZ2JtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDNTBiMHh2ZDJWeVEyRnpaU2dwTG0xaGRHTm9LQzhvWldSblpYeDBjbWxrWlc1MEtWeGNMeWhjWEdRcktTOHBLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUjlYRzVjYmx4MEx5OGdTWE1nZDJWaWEybDBQeUJvZEhSd09pOHZjM1JoWTJ0dmRtVnlabXh2ZHk1amIyMHZZUzh4TmpRMU9UWXdOaTh6TnpZM056TmNibHgwTHk4Z1pHOWpkVzFsYm5RZ2FYTWdkVzVrWldacGJtVmtJR2x1SUhKbFlXTjBMVzVoZEdsMlpUb2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMlpoWTJWaWIyOXJMM0psWVdOMExXNWhkR2wyWlM5d2RXeHNMekUyTXpKY2JseDBjbVYwZFhKdUlDaDBlWEJsYjJZZ1pHOWpkVzFsYm5RZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENBbUppQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdWMzUjViR1VnSmlZZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG5OMGVXeGxMbGRsWW10cGRFRndjR1ZoY21GdVkyVXBJSHg4WEc1Y2RGeDBMeThnU1hNZ1ptbHlaV0oxWno4Z2FIUjBjRG92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDJFdk16azRNVEl3THpNM05qYzNNMXh1WEhSY2RDaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1WTI5dWMyOXNaU0FtSmlBb2QybHVaRzkzTG1OdmJuTnZiR1V1Wm1seVpXSjFaeUI4ZkNBb2QybHVaRzkzTG1OdmJuTnZiR1V1WlhoalpYQjBhVzl1SUNZbUlIZHBibVJ2ZHk1amIyNXpiMnhsTG5SaFlteGxLU2twSUh4OFhHNWNkRngwTHk4Z1NYTWdabWx5WldadmVDQStQU0IyTXpFL1hHNWNkRngwTHk4Z2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlVYjI5c2N5OVhaV0pmUTI5dWMyOXNaU05UZEhsc2FXNW5YMjFsYzNOaFoyVnpYRzVjZEZ4MEtIUjVjR1Z2WmlCdVlYWnBaMkYwYjNJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUWdKaVlnYm1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZEM1MGIweHZkMlZ5UTJGelpTZ3BMbTFoZEdOb0tDOW1hWEpsWm05NFhGd3ZLRnhjWkNzcEx5a2dKaVlnY0dGeWMyVkpiblFvVW1WblJYaHdMaVF4TENBeE1Da2dQajBnTXpFcElIeDhYRzVjZEZ4MEx5OGdSRzkxWW14bElHTm9aV05ySUhkbFltdHBkQ0JwYmlCMWMyVnlRV2RsYm5RZ2FuVnpkQ0JwYmlCallYTmxJSGRsSUdGeVpTQnBiaUJoSUhkdmNtdGxjbHh1WEhSY2RDaDBlWEJsYjJZZ2JtRjJhV2RoZEc5eUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBJQ1ltSUc1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RdWRHOU1iM2RsY2tOaGMyVW9LUzV0WVhSamFDZ3ZZWEJ3YkdWM1pXSnJhWFJjWEM4b1hGeGtLeWt2S1NrN1hHNTlYRzVjYmk4cUtseHVJQ29nUTI5c2IzSnBlbVVnYkc5bklHRnlaM1Z0Wlc1MGN5QnBaaUJsYm1GaWJHVmtMbHh1SUNwY2JpQXFJRUJoY0drZ2NIVmliR2xqWEc0Z0tpOWNibHh1Wm5WdVkzUnBiMjRnWm05eWJXRjBRWEpuY3loaGNtZHpLU0I3WEc1Y2RHRnlaM05iTUYwZ1BTQW9kR2hwY3k1MWMyVkRiMnh2Y25NZ1B5QW5KV01uSURvZ0p5Y3BJQ3RjYmx4MFhIUjBhR2x6TG01aGJXVnpjR0ZqWlNBclhHNWNkRngwS0hSb2FYTXVkWE5sUTI5c2IzSnpJRDhnSnlBbFl5Y2dPaUFuSUNjcElDdGNibHgwWEhSaGNtZHpXekJkSUN0Y2JseDBYSFFvZEdocGN5NTFjMlZEYjJ4dmNuTWdQeUFuSldNZ0p5QTZJQ2NnSnlrZ0sxeHVYSFJjZENjckp5QXJJRzF2WkhWc1pTNWxlSEJ2Y25SekxtaDFiV0Z1YVhwbEtIUm9hWE11WkdsbVppazdYRzVjYmx4MGFXWWdLQ0YwYUdsekxuVnpaVU52Ykc5eWN5a2dlMXh1WEhSY2RISmxkSFZ5Ymp0Y2JseDBmVnh1WEc1Y2RHTnZibk4wSUdNZ1BTQW5ZMjlzYjNJNklDY2dLeUIwYUdsekxtTnZiRzl5TzF4dVhIUmhjbWR6TG5Od2JHbGpaU2d4TENBd0xDQmpMQ0FuWTI5c2IzSTZJR2x1YUdWeWFYUW5LVHRjYmx4dVhIUXZMeUJVYUdVZ1ptbHVZV3dnWENJbFkxd2lJR2x6SUhOdmJXVjNhR0YwSUhSeWFXTnJlU3dnWW1WallYVnpaU0IwYUdWeVpTQmpiM1ZzWkNCaVpTQnZkR2hsY2x4dVhIUXZMeUJoY21kMWJXVnVkSE1nY0dGemMyVmtJR1ZwZEdobGNpQmlaV1p2Y21VZ2IzSWdZV1owWlhJZ2RHaGxJQ1ZqTENCemJ5QjNaU0J1WldWa0lIUnZYRzVjZEM4dklHWnBaM1Z5WlNCdmRYUWdkR2hsSUdOdmNuSmxZM1FnYVc1a1pYZ2dkRzhnYVc1elpYSjBJSFJvWlNCRFUxTWdhVzUwYjF4dVhIUnNaWFFnYVc1a1pYZ2dQU0F3TzF4dVhIUnNaWFFnYkdGemRFTWdQU0F3TzF4dVhIUmhjbWR6V3pCZExuSmxjR3hoWTJVb0x5VmJZUzE2UVMxYUpWMHZaeXdnYldGMFkyZ2dQVDRnZTF4dVhIUmNkR2xtSUNodFlYUmphQ0E5UFQwZ0p5VWxKeWtnZTF4dVhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RIMWNibHgwWEhScGJtUmxlQ3NyTzF4dVhIUmNkR2xtSUNodFlYUmphQ0E5UFQwZ0p5VmpKeWtnZTF4dVhIUmNkRngwTHk4Z1YyVWdiMjVzZVNCaGNtVWdhVzUwWlhKbGMzUmxaQ0JwYmlCMGFHVWdLbXhoYzNRcUlDVmpYRzVjZEZ4MFhIUXZMeUFvZEdobElIVnpaWElnYldGNUlHaGhkbVVnY0hKdmRtbGtaV1FnZEdobGFYSWdiM2R1S1Z4dVhIUmNkRngwYkdGemRFTWdQU0JwYm1SbGVEdGNibHgwWEhSOVhHNWNkSDBwTzF4dVhHNWNkR0Z5WjNNdWMzQnNhV05sS0d4aGMzUkRMQ0F3TENCaktUdGNibjFjYmx4dUx5b3FYRzRnS2lCSmJuWnZhMlZ6SUdCamIyNXpiMnhsTG1SbFluVm5LQ2xnSUhkb1pXNGdZWFpoYVd4aFlteGxMbHh1SUNvZ1RtOHRiM0FnZDJobGJpQmdZMjl1YzI5c1pTNWtaV0oxWjJBZ2FYTWdibTkwSUdFZ1hDSm1kVzVqZEdsdmJsd2lMbHh1SUNvZ1NXWWdZR052Ym5OdmJHVXVaR1ZpZFdkZ0lHbHpJRzV2ZENCaGRtRnBiR0ZpYkdVc0lHWmhiR3h6SUdKaFkydGNiaUFxSUhSdklHQmpiMjV6YjJ4bExteHZaMkF1WEc0Z0tseHVJQ29nUUdGd2FTQndkV0pzYVdOY2JpQXFMMXh1Wlhod2IzSjBjeTVzYjJjZ1BTQmpiMjV6YjJ4bExtUmxZblZuSUh4OElHTnZibk52YkdVdWJHOW5JSHg4SUNnb0tTQTlQaUI3ZlNrN1hHNWNiaThxS2x4dUlDb2dVMkYyWlNCZ2JtRnRaWE53WVdObGMyQXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1Z6Y0dGalpYTmNiaUFxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCellYWmxLRzVoYldWemNHRmpaWE1wSUh0Y2JseDBkSEo1SUh0Y2JseDBYSFJwWmlBb2JtRnRaWE53WVdObGN5a2dlMXh1WEhSY2RGeDBaWGh3YjNKMGN5NXpkRzl5WVdkbExuTmxkRWwwWlcwb0oyUmxZblZuSnl3Z2JtRnRaWE53WVdObGN5azdYRzVjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEdWNGNHOXlkSE11YzNSdmNtRm5aUzV5WlcxdmRtVkpkR1Z0S0Nka1pXSjFaeWNwTzF4dVhIUmNkSDFjYmx4MGZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JseDBYSFF2THlCVGQyRnNiRzkzWEc1Y2RGeDBMeThnV0ZoWUlDaEFVV2w0TFNrZ2MyaHZkV3hrSUhkbElHSmxJR3h2WjJkcGJtY2dkR2hsYzJVL1hHNWNkSDFjYm4xY2JseHVMeW9xWEc0Z0tpQk1iMkZrSUdCdVlXMWxjM0JoWTJWellDNWNiaUFxWEc0Z0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOUlISmxkSFZ5Ym5NZ2RHaGxJSEJ5WlhacGIzVnpiSGtnY0dWeWMybHpkR1ZrSUdSbFluVm5JRzF2WkdWelhHNGdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYkc5aFpDZ3BJSHRjYmx4MGJHVjBJSEk3WEc1Y2RIUnllU0I3WEc1Y2RGeDBjaUE5SUdWNGNHOXlkSE11YzNSdmNtRm5aUzVuWlhSSmRHVnRLQ2RrWldKMVp5Y3BPMXh1WEhSOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dVhIUmNkQzh2SUZOM1lXeHNiM2RjYmx4MFhIUXZMeUJZV0ZnZ0tFQlJhWGd0S1NCemFHOTFiR1FnZDJVZ1ltVWdiRzluWjJsdVp5QjBhR1Z6WlQ5Y2JseDBmVnh1WEc1Y2RDOHZJRWxtSUdSbFluVm5JR2x6YmlkMElITmxkQ0JwYmlCTVV5d2dZVzVrSUhkbEozSmxJR2x1SUVWc1pXTjBjbTl1TENCMGNua2dkRzhnYkc5aFpDQWtSRVZDVlVkY2JseDBhV1lnS0NGeUlDWW1JSFI1Y0dWdlppQndjbTlqWlhOeklDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQW5aVzUySnlCcGJpQndjbTlqWlhOektTQjdYRzVjZEZ4MGNpQTlJSEJ5YjJObGMzTXVaVzUyTGtSRlFsVkhPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJSEk3WEc1OVhHNWNiaThxS2x4dUlDb2dURzlqWVd4emRHOXlZV2RsSUdGMGRHVnRjSFJ6SUhSdklISmxkSFZ5YmlCMGFHVWdiRzlqWVd4emRHOXlZV2RsTGx4dUlDcGNiaUFxSUZSb2FYTWdhWE1nYm1WalpYTnpZWEo1SUdKbFkyRjFjMlVnYzJGbVlYSnBJSFJvY205M2MxeHVJQ29nZDJobGJpQmhJSFZ6WlhJZ1pHbHpZV0pzWlhNZ1kyOXZhMmxsY3k5c2IyTmhiSE4wYjNKaFoyVmNiaUFxSUdGdVpDQjViM1VnWVhSMFpXMXdkQ0IwYnlCaFkyTmxjM01nYVhRdVhHNGdLbHh1SUNvZ1FISmxkSFZ5YmlCN1RHOWpZV3hUZEc5eVlXZGxmVnh1SUNvZ1FHRndhU0J3Y21sMllYUmxYRzRnS2k5Y2JseHVablZ1WTNScGIyNGdiRzlqWVd4emRHOXlZV2RsS0NrZ2UxeHVYSFIwY25rZ2UxeHVYSFJjZEM4dklGUldUVXhMYVhRZ0tFRndjR3hsSUZSV0lFcFRJRkoxYm5ScGJXVXBJR1J2WlhNZ2JtOTBJR2hoZG1VZ1lTQjNhVzVrYjNjZ2IySnFaV04wTENCcWRYTjBJR3h2WTJGc1UzUnZjbUZuWlNCcGJpQjBhR1VnWjJ4dlltRnNJR052Ym5SbGVIUmNibHgwWEhRdkx5QlVhR1VnUW5KdmQzTmxjaUJoYkhOdklHaGhjeUJzYjJOaGJGTjBiM0poWjJVZ2FXNGdkR2hsSUdkc2IySmhiQ0JqYjI1MFpYaDBMbHh1WEhSY2RISmxkSFZ5YmlCc2IyTmhiRk4wYjNKaFoyVTdYRzVjZEgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc1Y2RGeDBMeThnVTNkaGJHeHZkMXh1WEhSY2RDOHZJRmhZV0NBb1FGRnBlQzBwSUhOb2IzVnNaQ0IzWlNCaVpTQnNiMmRuYVc1bklIUm9aWE5sUDF4dVhIUjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWpiMjF0YjI0bktTaGxlSEJ2Y25SektUdGNibHh1WTI5dWMzUWdlMlp2Y20xaGRIUmxjbk45SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE03WEc1Y2JpOHFLbHh1SUNvZ1RXRndJQ1ZxSUhSdklHQktVMDlPTG5OMGNtbHVaMmxtZVNncFlDd2djMmx1WTJVZ2JtOGdWMlZpSUVsdWMzQmxZM1J2Y25NZ1pHOGdkR2hoZENCaWVTQmtaV1poZFd4MExseHVJQ292WEc1Y2JtWnZjbTFoZEhSbGNuTXVhaUE5SUdaMWJtTjBhVzl1SUNoMktTQjdYRzVjZEhSeWVTQjdYRzVjZEZ4MGNtVjBkWEp1SUVwVFQwNHVjM1J5YVc1bmFXWjVLSFlwTzF4dVhIUjlJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVYSFJjZEhKbGRIVnliaUFuVzFWdVpYaHdaV04wWldSS1UwOU9VR0Z5YzJWRmNuSnZjbDA2SUNjZ0t5Qmxjbkp2Y2k1dFpYTnpZV2RsTzF4dVhIUjlYRzU5TzF4dUlpd2lYRzR2S2lwY2JpQXFJRlJvYVhNZ2FYTWdkR2hsSUdOdmJXMXZiaUJzYjJkcFl5Qm1iM0lnWW05MGFDQjBhR1VnVG05a1pTNXFjeUJoYm1RZ2QyVmlJR0p5YjNkelpYSmNiaUFxSUdsdGNHeGxiV1Z1ZEdGMGFXOXVjeUJ2WmlCZ1pHVmlkV2NvS1dBdVhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z2MyVjBkWEFvWlc1MktTQjdYRzVjZEdOeVpXRjBaVVJsWW5WbkxtUmxZblZuSUQwZ1kzSmxZWFJsUkdWaWRXYzdYRzVjZEdOeVpXRjBaVVJsWW5WbkxtUmxabUYxYkhRZ1BTQmpjbVZoZEdWRVpXSjFaenRjYmx4MFkzSmxZWFJsUkdWaWRXY3VZMjlsY21ObElEMGdZMjlsY21ObE8xeHVYSFJqY21WaGRHVkVaV0oxWnk1a2FYTmhZbXhsSUQwZ1pHbHpZV0pzWlR0Y2JseDBZM0psWVhSbFJHVmlkV2N1Wlc1aFlteGxJRDBnWlc1aFlteGxPMXh1WEhSamNtVmhkR1ZFWldKMVp5NWxibUZpYkdWa0lEMGdaVzVoWW14bFpEdGNibHgwWTNKbFlYUmxSR1ZpZFdjdWFIVnRZVzVwZW1VZ1BTQnlaWEYxYVhKbEtDZHRjeWNwTzF4dVhIUmpjbVZoZEdWRVpXSjFaeTVrWlhOMGNtOTVJRDBnWkdWemRISnZlVHRjYmx4dVhIUlBZbXBsWTNRdWEyVjVjeWhsYm5ZcExtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JseDBYSFJqY21WaGRHVkVaV0oxWjF0clpYbGRJRDBnWlc1MlcydGxlVjA3WEc1Y2RIMHBPMXh1WEc1Y2RDOHFLbHh1WEhRcUlGUm9aU0JqZFhKeVpXNTBiSGtnWVdOMGFYWmxJR1JsWW5WbklHMXZaR1VnYm1GdFpYTXNJR0Z1WkNCdVlXMWxjeUIwYnlCemEybHdMbHh1WEhRcUwxeHVYRzVjZEdOeVpXRjBaVVJsWW5WbkxtNWhiV1Z6SUQwZ1cxMDdYRzVjZEdOeVpXRjBaVVJsWW5WbkxuTnJhWEJ6SUQwZ1cxMDdYRzVjYmx4MEx5b3FYRzVjZENvZ1RXRndJRzltSUhOd1pXTnBZV3dnWENJbGJsd2lJR2hoYm1Sc2FXNW5JR1oxYm1OMGFXOXVjeXdnWm05eUlIUm9aU0JrWldKMVp5QmNJbVp2Y20xaGRGd2lJR0Z5WjNWdFpXNTBMbHh1WEhRcVhHNWNkQ29nVm1Gc2FXUWdhMlY1SUc1aGJXVnpJR0Z5WlNCaElITnBibWRzWlN3Z2JHOTNaWElnYjNJZ2RYQndaWEl0WTJGelpTQnNaWFIwWlhJc0lHa3VaUzRnWENKdVhDSWdZVzVrSUZ3aVRsd2lMbHh1WEhRcUwxeHVYSFJqY21WaGRHVkVaV0oxWnk1bWIzSnRZWFIwWlhKeklEMGdlMzA3WEc1Y2JseDBMeW9xWEc1Y2RDb2dVMlZzWldOMGN5QmhJR052Ykc5eUlHWnZjaUJoSUdSbFluVm5JRzVoYldWemNHRmpaVnh1WEhRcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVlXMWxjM0JoWTJVZ1ZHaGxJRzVoYldWemNHRmpaU0J6ZEhKcGJtY2dabTl5SUhSb1pTQmtaV0oxWnlCcGJuTjBZVzVqWlNCMGJ5QmlaU0JqYjJ4dmNtVmtYRzVjZENvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZkZOMGNtbHVaMzBnUVc0Z1FVNVRTU0JqYjJ4dmNpQmpiMlJsSUdadmNpQjBhR1VnWjJsMlpXNGdibUZ0WlhOd1lXTmxYRzVjZENvZ1FHRndhU0J3Y21sMllYUmxYRzVjZENvdlhHNWNkR1oxYm1OMGFXOXVJSE5sYkdWamRFTnZiRzl5S0c1aGJXVnpjR0ZqWlNrZ2UxeHVYSFJjZEd4bGRDQm9ZWE5vSUQwZ01EdGNibHh1WEhSY2RHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dibUZ0WlhOd1lXTmxMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNWNkRngwWEhSb1lYTm9JRDBnS0Nob1lYTm9JRHc4SURVcElDMGdhR0Z6YUNrZ0t5QnVZVzFsYzNCaFkyVXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JseDBYSFJjZEdoaGMyZ2dmRDBnTURzZ0x5OGdRMjl1ZG1WeWRDQjBieUF6TW1KcGRDQnBiblJsWjJWeVhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR055WldGMFpVUmxZblZuTG1OdmJHOXljMXROWVhSb0xtRmljeWhvWVhOb0tTQWxJR055WldGMFpVUmxZblZuTG1OdmJHOXljeTVzWlc1bmRHaGRPMXh1WEhSOVhHNWNkR055WldGMFpVUmxZblZuTG5ObGJHVmpkRU52Ykc5eUlEMGdjMlZzWldOMFEyOXNiM0k3WEc1Y2JseDBMeW9xWEc1Y2RDb2dRM0psWVhSbElHRWdaR1ZpZFdkblpYSWdkMmwwYUNCMGFHVWdaMmwyWlc0Z1lHNWhiV1Z6Y0dGalpXQXVYRzVjZENwY2JseDBLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdibUZ0WlhOd1lXTmxYRzVjZENvZ1FISmxkSFZ5YmlCN1JuVnVZM1JwYjI1OVhHNWNkQ29nUUdGd2FTQndkV0pzYVdOY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z1kzSmxZWFJsUkdWaWRXY29ibUZ0WlhOd1lXTmxLU0I3WEc1Y2RGeDBiR1YwSUhCeVpYWlVhVzFsTzF4dVhIUmNkR3hsZENCbGJtRmliR1ZQZG1WeWNtbGtaU0E5SUc1MWJHdzdYRzVjZEZ4MGJHVjBJRzVoYldWemNHRmpaWE5EWVdOb1pUdGNibHgwWEhSc1pYUWdaVzVoWW14bFpFTmhZMmhsTzF4dVhHNWNkRngwWm5WdVkzUnBiMjRnWkdWaWRXY29MaTR1WVhKbmN5a2dlMXh1WEhSY2RGeDBMeThnUkdsellXSnNaV1EvWEc1Y2RGeDBYSFJwWmlBb0lXUmxZblZuTG1WdVlXSnNaV1FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSamIyNXpkQ0J6Wld4bUlEMGdaR1ZpZFdjN1hHNWNibHgwWEhSY2RDOHZJRk5sZENCZ1pHbG1abUFnZEdsdFpYTjBZVzF3WEc1Y2RGeDBYSFJqYjI1emRDQmpkWEp5SUQwZ1RuVnRZbVZ5S0c1bGR5QkVZWFJsS0NrcE8xeHVYSFJjZEZ4MFkyOXVjM1FnYlhNZ1BTQmpkWEp5SUMwZ0tIQnlaWFpVYVcxbElIeDhJR04xY25JcE8xeHVYSFJjZEZ4MGMyVnNaaTVrYVdabUlEMGdiWE03WEc1Y2RGeDBYSFJ6Wld4bUxuQnlaWFlnUFNCd2NtVjJWR2x0WlR0Y2JseDBYSFJjZEhObGJHWXVZM1Z5Y2lBOUlHTjFjbkk3WEc1Y2RGeDBYSFJ3Y21WMlZHbHRaU0E5SUdOMWNuSTdYRzVjYmx4MFhIUmNkR0Z5WjNOYk1GMGdQU0JqY21WaGRHVkVaV0oxWnk1amIyVnlZMlVvWVhKbmMxc3dYU2s3WEc1Y2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ1lYSm5jMXN3WFNBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmx4MFhIUmNkRngwTHk4Z1FXNTVkR2hwYm1jZ1pXeHpaU0JzWlhRbmN5QnBibk53WldOMElIZHBkR2dnSlU5Y2JseDBYSFJjZEZ4MFlYSm5jeTUxYm5Ob2FXWjBLQ2NsVHljcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJCY0hCc2VTQmhibmtnWUdadmNtMWhkSFJsY25OZ0lIUnlZVzV6Wm05eWJXRjBhVzl1YzF4dVhIUmNkRngwYkdWMElHbHVaR1Y0SUQwZ01EdGNibHgwWEhSY2RHRnlaM05iTUYwZ1BTQmhjbWR6V3pCZExuSmxjR3hoWTJVb0x5VW9XMkV0ZWtFdFdpVmRLUzluTENBb2JXRjBZMmdzSUdadmNtMWhkQ2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUXZMeUJKWmlCM1pTQmxibU52ZFc1MFpYSWdZVzRnWlhOallYQmxaQ0FsSUhSb1pXNGdaRzl1SjNRZ2FXNWpjbVZoYzJVZ2RHaGxJR0Z5Y21GNUlHbHVaR1Y0WEc1Y2RGeDBYSFJjZEdsbUlDaHRZWFJqYUNBOVBUMGdKeVVsSnlrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQW5KU2M3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGFXNWtaWGdyS3p0Y2JseDBYSFJjZEZ4MFkyOXVjM1FnWm05eWJXRjBkR1Z5SUQwZ1kzSmxZWFJsUkdWaWRXY3VabTl5YldGMGRHVnljMXRtYjNKdFlYUmRPMXh1WEhSY2RGeDBYSFJwWmlBb2RIbHdaVzltSUdadmNtMWhkSFJsY2lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dVhIUmNkRngwWEhSY2RHTnZibk4wSUhaaGJDQTlJR0Z5WjNOYmFXNWtaWGhkTzF4dVhIUmNkRngwWEhSY2RHMWhkR05vSUQwZ1ptOXliV0YwZEdWeUxtTmhiR3dvYzJWc1ppd2dkbUZzS1R0Y2JseHVYSFJjZEZ4MFhIUmNkQzh2SUU1dmR5QjNaU0J1WldWa0lIUnZJSEpsYlc5MlpTQmdZWEpuYzF0cGJtUmxlRjFnSUhOcGJtTmxJR2wwSjNNZ2FXNXNhVzVsWkNCcGJpQjBhR1VnWUdadmNtMWhkR0JjYmx4MFhIUmNkRngwWEhSaGNtZHpMbk53YkdsalpTaHBibVJsZUN3Z01TazdYRzVjZEZ4MFhIUmNkRngwYVc1a1pYZ3RMVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSeVpYUjFjbTRnYldGMFkyZzdYRzVjZEZ4MFhIUjlLVHRjYmx4dVhIUmNkRngwTHk4Z1FYQndiSGtnWlc1MkxYTndaV05wWm1saklHWnZjbTFoZEhScGJtY2dLR052Ykc5eWN5d2daWFJqTGlsY2JseDBYSFJjZEdOeVpXRjBaVVJsWW5WbkxtWnZjbTFoZEVGeVozTXVZMkZzYkNoelpXeG1MQ0JoY21kektUdGNibHh1WEhSY2RGeDBZMjl1YzNRZ2JHOW5SbTRnUFNCelpXeG1MbXh2WnlCOGZDQmpjbVZoZEdWRVpXSjFaeTVzYjJjN1hHNWNkRngwWEhSc2IyZEdiaTVoY0hCc2VTaHpaV3htTENCaGNtZHpLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUmtaV0oxWnk1dVlXMWxjM0JoWTJVZ1BTQnVZVzFsYzNCaFkyVTdYRzVjZEZ4MFpHVmlkV2N1ZFhObFEyOXNiM0p6SUQwZ1kzSmxZWFJsUkdWaWRXY3VkWE5sUTI5c2IzSnpLQ2s3WEc1Y2RGeDBaR1ZpZFdjdVkyOXNiM0lnUFNCamNtVmhkR1ZFWldKMVp5NXpaV3hsWTNSRGIyeHZjaWh1WVcxbGMzQmhZMlVwTzF4dVhIUmNkR1JsWW5WbkxtVjRkR1Z1WkNBOUlHVjRkR1Z1WkR0Y2JseDBYSFJrWldKMVp5NWtaWE4wY205NUlEMGdZM0psWVhSbFJHVmlkV2N1WkdWemRISnZlVHNnTHk4Z1dGaFlJRlJsYlhCdmNtRnllUzRnVjJsc2JDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUcxaGFtOXlJSEpsYkdWaGMyVXVYRzVjYmx4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWkdWaWRXY3NJQ2RsYm1GaWJHVmtKeXdnZTF4dVhIUmNkRngwWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmx4MFhIUmNkR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc1Y2RGeDBYSFJuWlhRNklDZ3BJRDArSUh0Y2JseDBYSFJjZEZ4MGFXWWdLR1Z1WVdKc1pVOTJaWEp5YVdSbElDRTlQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1Z1WVdKc1pVOTJaWEp5YVdSbE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkR2xtSUNodVlXMWxjM0JoWTJWelEyRmphR1VnSVQwOUlHTnlaV0YwWlVSbFluVm5MbTVoYldWemNHRmpaWE1wSUh0Y2JseDBYSFJjZEZ4MFhIUnVZVzFsYzNCaFkyVnpRMkZqYUdVZ1BTQmpjbVZoZEdWRVpXSjFaeTV1WVcxbGMzQmhZMlZ6TzF4dVhIUmNkRngwWEhSY2RHVnVZV0pzWldSRFlXTm9aU0E5SUdOeVpXRjBaVVJsWW5WbkxtVnVZV0pzWldRb2JtRnRaWE53WVdObEtUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJsYm1GaWJHVmtRMkZqYUdVN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MGMyVjBPaUIySUQwK0lIdGNibHgwWEhSY2RGeDBaVzVoWW14bFQzWmxjbkpwWkdVZ1BTQjJPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBMeThnUlc1MkxYTndaV05wWm1saklHbHVhWFJwWVd4cGVtRjBhVzl1SUd4dloybGpJR1p2Y2lCa1pXSjFaeUJwYm5OMFlXNWpaWE5jYmx4MFhIUnBaaUFvZEhsd1pXOW1JR055WldGMFpVUmxZblZuTG1sdWFYUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwWEhSY2RHTnlaV0YwWlVSbFluVm5MbWx1YVhRb1pHVmlkV2NwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQmtaV0oxWnp0Y2JseDBmVnh1WEc1Y2RHWjFibU4wYVc5dUlHVjRkR1Z1WkNodVlXMWxjM0JoWTJVc0lHUmxiR2x0YVhSbGNpa2dlMXh1WEhSY2RHTnZibk4wSUc1bGQwUmxZblZuSUQwZ1kzSmxZWFJsUkdWaWRXY29kR2hwY3k1dVlXMWxjM0JoWTJVZ0t5QW9kSGx3Wlc5bUlHUmxiR2x0YVhSbGNpQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QW5PaWNnT2lCa1pXeHBiV2wwWlhJcElDc2dibUZ0WlhOd1lXTmxLVHRjYmx4MFhIUnVaWGRFWldKMVp5NXNiMmNnUFNCMGFHbHpMbXh2Wnp0Y2JseDBYSFJ5WlhSMWNtNGdibVYzUkdWaWRXYzdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBLaUJGYm1GaWJHVnpJR0VnWkdWaWRXY2diVzlrWlNCaWVTQnVZVzFsYzNCaFkyVnpMaUJVYUdseklHTmhiaUJwYm1Oc2RXUmxJRzF2WkdWelhHNWNkQ29nYzJWd1lYSmhkR1ZrSUdKNUlHRWdZMjlzYjI0Z1lXNWtJSGRwYkdSallYSmtjeTVjYmx4MEtseHVYSFFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WVcxbGMzQmhZMlZ6WEc1Y2RDb2dRR0Z3YVNCd2RXSnNhV05jYmx4MEtpOWNibHgwWm5WdVkzUnBiMjRnWlc1aFlteGxLRzVoYldWemNHRmpaWE1wSUh0Y2JseDBYSFJqY21WaGRHVkVaV0oxWnk1ellYWmxLRzVoYldWemNHRmpaWE1wTzF4dVhIUmNkR055WldGMFpVUmxZblZuTG01aGJXVnpjR0ZqWlhNZ1BTQnVZVzFsYzNCaFkyVnpPMXh1WEc1Y2RGeDBZM0psWVhSbFJHVmlkV2N1Ym1GdFpYTWdQU0JiWFR0Y2JseDBYSFJqY21WaGRHVkVaV0oxWnk1emEybHdjeUE5SUZ0ZE8xeHVYRzVjZEZ4MGJHVjBJR2s3WEc1Y2RGeDBZMjl1YzNRZ2MzQnNhWFFnUFNBb2RIbHdaVzltSUc1aGJXVnpjR0ZqWlhNZ1BUMDlJQ2R6ZEhKcGJtY25JRDhnYm1GdFpYTndZV05sY3lBNklDY25LUzV6Y0d4cGRDZ3ZXMXhjY3l4ZEt5OHBPMXh1WEhSY2RHTnZibk4wSUd4bGJpQTlJSE53YkdsMExteGxibWQwYUR0Y2JseHVYSFJjZEdadmNpQW9hU0E5SURBN0lHa2dQQ0JzWlc0N0lHa3JLeWtnZTF4dVhIUmNkRngwYVdZZ0tDRnpjR3hwZEZ0cFhTa2dlMXh1WEhSY2RGeDBYSFF2THlCcFoyNXZjbVVnWlcxd2RIa2djM1J5YVc1bmMxeHVYSFJjZEZ4MFhIUmpiMjUwYVc1MVpUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBibUZ0WlhOd1lXTmxjeUE5SUhOd2JHbDBXMmxkTG5KbGNHeGhZMlVvTDF4Y0tpOW5MQ0FuTGlvL0p5azdYRzVjYmx4MFhIUmNkR2xtSUNodVlXMWxjM0JoWTJWeld6QmRJRDA5UFNBbkxTY3BJSHRjYmx4MFhIUmNkRngwWTNKbFlYUmxSR1ZpZFdjdWMydHBjSE11Y0hWemFDaHVaWGNnVW1WblJYaHdLQ2RlSnlBcklHNWhiV1Z6Y0dGalpYTXVjMnhwWTJVb01Ta2dLeUFuSkNjcEtUdGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHTnlaV0YwWlVSbFluVm5MbTVoYldWekxuQjFjMmdvYm1WM0lGSmxaMFY0Y0NnblhpY2dLeUJ1WVcxbGMzQmhZMlZ6SUNzZ0p5UW5LU2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOVhHNWNibHgwTHlvcVhHNWNkQ29nUkdsellXSnNaU0JrWldKMVp5QnZkWFJ3ZFhRdVhHNWNkQ3BjYmx4MEtpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOUlHNWhiV1Z6Y0dGalpYTmNibHgwS2lCQVlYQnBJSEIxWW14cFkxeHVYSFFxTDF4dVhIUm1kVzVqZEdsdmJpQmthWE5oWW14bEtDa2dlMXh1WEhSY2RHTnZibk4wSUc1aGJXVnpjR0ZqWlhNZ1BTQmJYRzVjZEZ4MFhIUXVMaTVqY21WaGRHVkVaV0oxWnk1dVlXMWxjeTV0WVhBb2RHOU9ZVzFsYzNCaFkyVXBMRnh1WEhSY2RGeDBMaTR1WTNKbFlYUmxSR1ZpZFdjdWMydHBjSE11YldGd0tIUnZUbUZ0WlhOd1lXTmxLUzV0WVhBb2JtRnRaWE53WVdObElEMCtJQ2N0SnlBcklHNWhiV1Z6Y0dGalpTbGNibHgwWEhSZExtcHZhVzRvSnl3bktUdGNibHgwWEhSamNtVmhkR1ZFWldKMVp5NWxibUZpYkdVb0p5Y3BPMXh1WEhSY2RISmxkSFZ5YmlCdVlXMWxjM0JoWTJWek8xeHVYSFI5WEc1Y2JseDBMeW9xWEc1Y2RDb2dVbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9aU0JuYVhabGJpQnRiMlJsSUc1aGJXVWdhWE1nWlc1aFlteGxaQ3dnWm1Gc2MyVWdiM1JvWlhKM2FYTmxMbHh1WEhRcVhHNWNkQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRzVoYldWY2JseDBLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1WEhRcUlFQmhjR2tnY0hWaWJHbGpYRzVjZENvdlhHNWNkR1oxYm1OMGFXOXVJR1Z1WVdKc1pXUW9ibUZ0WlNrZ2UxeHVYSFJjZEdsbUlDaHVZVzFsVzI1aGJXVXViR1Z1WjNSb0lDMGdNVjBnUFQwOUlDY3FKeWtnZTF4dVhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwZlZ4dVhHNWNkRngwYkdWMElHazdYRzVjZEZ4MGJHVjBJR3hsYmp0Y2JseHVYSFJjZEdadmNpQW9hU0E5SURBc0lHeGxiaUE5SUdOeVpXRjBaVVJsWW5WbkxuTnJhWEJ6TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzVjZEZ4MFhIUnBaaUFvWTNKbFlYUmxSR1ZpZFdjdWMydHBjSE5iYVYwdWRHVnpkQ2h1WVcxbEtTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwWm05eUlDaHBJRDBnTUN3Z2JHVnVJRDBnWTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNibHgwWEhSY2RHbG1JQ2hqY21WaGRHVkVaV0oxWnk1dVlXMWxjMXRwWFM1MFpYTjBLRzVoYldVcEtTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRcUlFTnZiblpsY25RZ2NtVm5aWGh3SUhSdklHNWhiV1Z6Y0dGalpWeHVYSFFxWEc1Y2RDb2dRSEJoY21GdElIdFNaV2RGZUhCOUlISmxaM2hsY0Z4dVhIUXFJRUJ5WlhSMWNtNGdlMU4wY21sdVozMGdibUZ0WlhOd1lXTmxYRzVjZENvZ1FHRndhU0J3Y21sMllYUmxYRzVjZENvdlhHNWNkR1oxYm1OMGFXOXVJSFJ2VG1GdFpYTndZV05sS0hKbFoyVjRjQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnlaV2RsZUhBdWRHOVRkSEpwYm1jb0tWeHVYSFJjZEZ4MExuTjFZbk4wY21sdVp5Z3lMQ0J5WldkbGVIQXVkRzlUZEhKcGJtY29LUzVzWlc1bmRHZ2dMU0F5S1Z4dVhIUmNkRngwTG5KbGNHeGhZMlVvTDF4Y0xseGNLbHhjUHlRdkxDQW5LaWNwTzF4dVhIUjlYRzVjYmx4MEx5b3FYRzVjZENvZ1EyOWxjbU5sSUdCMllXeGdMbHh1WEhRcVhHNWNkQ29nUUhCaGNtRnRJSHROYVhobFpIMGdkbUZzWEc1Y2RDb2dRSEpsZEhWeWJpQjdUV2w0WldSOVhHNWNkQ29nUUdGd2FTQndjbWwyWVhSbFhHNWNkQ292WEc1Y2RHWjFibU4wYVc5dUlHTnZaWEpqWlNoMllXd3BJSHRjYmx4MFhIUnBaaUFvZG1Gc0lHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCMllXd3VjM1JoWTJzZ2ZId2dkbUZzTG0xbGMzTmhaMlU3WEc1Y2RGeDBmVnh1WEhSY2RISmxkSFZ5YmlCMllXdzdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBLaUJZV0ZnZ1JFOGdUazlVSUZWVFJTNGdWR2hwY3lCcGN5QmhJSFJsYlhCdmNtRnllU0J6ZEhWaUlHWjFibU4wYVc5dUxseHVYSFFxSUZoWVdDQkpkQ0JYU1V4TUlHSmxJSEpsYlc5MlpXUWdhVzRnZEdobElHNWxlSFFnYldGcWIzSWdjbVZzWldGelpTNWNibHgwS2k5Y2JseDBablZ1WTNScGIyNGdaR1Z6ZEhKdmVTZ3BJSHRjYmx4MFhIUmpiMjV6YjJ4bExuZGhjbTRvSjBsdWMzUmhibU5sSUcxbGRHaHZaQ0JnWkdWaWRXY3VaR1Z6ZEhKdmVTZ3BZQ0JwY3lCa1pYQnlaV05oZEdWa0lHRnVaQ0J1YnlCc2IyNW5aWElnWkc5bGN5QmhibmwwYUdsdVp5NGdTWFFnZDJsc2JDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUcxaGFtOXlJSFpsY25OcGIyNGdiMllnWUdSbFluVm5ZQzRuS1R0Y2JseDBmVnh1WEc1Y2RHTnlaV0YwWlVSbFluVm5MbVZ1WVdKc1pTaGpjbVZoZEdWRVpXSjFaeTVzYjJGa0tDa3BPMXh1WEc1Y2RISmxkSFZ5YmlCamNtVmhkR1ZFWldKMVp6dGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCelpYUjFjRHRjYmlJc0lpOHFJR1Z6YkdsdWRDMWxibllnWW5KdmQzTmxjaUFxTDF4dVhHNHZLaXBjYmlBcUlGUm9hWE1nYVhNZ2RHaGxJSGRsWWlCaWNtOTNjMlZ5SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUdCa1pXSjFaeWdwWUM1Y2JpQXFMMXh1WEc1bGVIQnZjblJ6TG1admNtMWhkRUZ5WjNNZ1BTQm1iM0p0WVhSQmNtZHpPMXh1Wlhod2IzSjBjeTV6WVhabElEMGdjMkYyWlR0Y2JtVjRjRzl5ZEhNdWJHOWhaQ0E5SUd4dllXUTdYRzVsZUhCdmNuUnpMblZ6WlVOdmJHOXljeUE5SUhWelpVTnZiRzl5Y3p0Y2JtVjRjRzl5ZEhNdWMzUnZjbUZuWlNBOUlHeHZZMkZzYzNSdmNtRm5aU2dwTzF4dVpYaHdiM0owY3k1a1pYTjBjbTk1SUQwZ0tDZ3BJRDArSUh0Y2JseDBiR1YwSUhkaGNtNWxaQ0E5SUdaaGJITmxPMXh1WEc1Y2RISmxkSFZ5YmlBb0tTQTlQaUI3WEc1Y2RGeDBhV1lnS0NGM1lYSnVaV1FwSUh0Y2JseDBYSFJjZEhkaGNtNWxaQ0E5SUhSeWRXVTdYRzVjZEZ4MFhIUmpiMjV6YjJ4bExuZGhjbTRvSjBsdWMzUmhibU5sSUcxbGRHaHZaQ0JnWkdWaWRXY3VaR1Z6ZEhKdmVTZ3BZQ0JwY3lCa1pYQnlaV05oZEdWa0lHRnVaQ0J1YnlCc2IyNW5aWElnWkc5bGN5QmhibmwwYUdsdVp5NGdTWFFnZDJsc2JDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUcxaGFtOXlJSFpsY25OcGIyNGdiMllnWUdSbFluVm5ZQzRuS1R0Y2JseDBYSFI5WEc1Y2RIMDdYRzU5S1NncE8xeHVYRzR2S2lwY2JpQXFJRU52Ykc5eWN5NWNiaUFxTDF4dVhHNWxlSEJ2Y25SekxtTnZiRzl5Y3lBOUlGdGNibHgwSnlNd01EQXdRME1uTEZ4dVhIUW5JekF3TURCR1JpY3NYRzVjZENjak1EQXpNME5ESnl4Y2JseDBKeU13TURNelJrWW5MRnh1WEhRbkl6QXdOalpEUXljc1hHNWNkQ2NqTURBMk5rWkdKeXhjYmx4MEp5TXdNRGs1UTBNbkxGeHVYSFFuSXpBd09UbEdSaWNzWEc1Y2RDY2pNREJEUXpBd0p5eGNibHgwSnlNd01FTkRNek1uTEZ4dVhIUW5JekF3UTBNMk5pY3NYRzVjZENjak1EQkRRems1Snl4Y2JseDBKeU13TUVORFEwTW5MRnh1WEhRbkl6QXdRME5HUmljc1hHNWNkQ2NqTXpNd01FTkRKeXhjYmx4MEp5TXpNekF3UmtZbkxGeHVYSFFuSXpNek16TkRReWNzWEc1Y2RDY2pNek16TTBaR0p5eGNibHgwSnlNek16WTJRME1uTEZ4dVhIUW5Jek16TmpaR1JpY3NYRzVjZENjak16TTVPVU5ESnl4Y2JseDBKeU16TXprNVJrWW5MRnh1WEhRbkl6TXpRME13TUNjc1hHNWNkQ2NqTXpORFF6TXpKeXhjYmx4MEp5TXpNME5ETmpZbkxGeHVYSFFuSXpNelEwTTVPU2NzWEc1Y2RDY2pNek5EUTBOREp5eGNibHgwSnlNek0wTkRSa1luTEZ4dVhIUW5JelkyTURCRFF5Y3NYRzVjZENjak5qWXdNRVpHSnl4Y2JseDBKeU0yTmpNelEwTW5MRnh1WEhRbkl6WTJNek5HUmljc1hHNWNkQ2NqTmpaRFF6QXdKeXhjYmx4MEp5TTJOa05ETXpNbkxGeHVYSFFuSXprNU1EQkRReWNzWEc1Y2RDY2pPVGt3TUVaR0p5eGNibHgwSnlNNU9UTXpRME1uTEZ4dVhIUW5Jems1TXpOR1JpY3NYRzVjZENjak9UbERRekF3Snl4Y2JseDBKeU01T1VORE16TW5MRnh1WEhRbkkwTkRNREF3TUNjc1hHNWNkQ2NqUTBNd01ETXpKeXhjYmx4MEp5TkRRekF3TmpZbkxGeHVYSFFuSTBORE1EQTVPU2NzWEc1Y2RDY2pRME13TUVOREp5eGNibHgwSnlORFF6QXdSa1luTEZ4dVhIUW5JME5ETXpNd01DY3NYRzVjZENjalEwTXpNek16Snl4Y2JseDBKeU5EUXpNek5qWW5MRnh1WEhRbkkwTkRNek01T1Njc1hHNWNkQ2NqUTBNek0wTkRKeXhjYmx4MEp5TkRRek16UmtZbkxGeHVYSFFuSTBORE5qWXdNQ2NzWEc1Y2RDY2pRME0yTmpNekp5eGNibHgwSnlORFF6azVNREFuTEZ4dVhIUW5JME5ET1Rrek15Y3NYRzVjZENjalEwTkRRekF3Snl4Y2JseDBKeU5EUTBORE16TW5MRnh1WEhRbkkwWkdNREF3TUNjc1hHNWNkQ2NqUmtZd01ETXpKeXhjYmx4MEp5TkdSakF3TmpZbkxGeHVYSFFuSTBaR01EQTVPU2NzWEc1Y2RDY2pSa1l3TUVOREp5eGNibHgwSnlOR1JqQXdSa1luTEZ4dVhIUW5JMFpHTXpNd01DY3NYRzVjZENjalJrWXpNek16Snl4Y2JseDBKeU5HUmpNek5qWW5MRnh1WEhRbkkwWkdNek01T1Njc1hHNWNkQ2NqUmtZek0wTkRKeXhjYmx4MEp5TkdSak16UmtZbkxGeHVYSFFuSTBaR05qWXdNQ2NzWEc1Y2RDY2pSa1kyTmpNekp5eGNibHgwSnlOR1JqazVNREFuTEZ4dVhIUW5JMFpHT1Rrek15Y3NYRzVjZENjalJrWkRRekF3Snl4Y2JseDBKeU5HUmtORE16TW5YRzVkTzF4dVhHNHZLaXBjYmlBcUlFTjFjbkpsYm5Sc2VTQnZibXg1SUZkbFlrdHBkQzFpWVhObFpDQlhaV0lnU1c1emNHVmpkRzl5Y3l3Z1JtbHlaV1p2ZUNBK1BTQjJNekVzWEc0Z0tpQmhibVFnZEdobElFWnBjbVZpZFdjZ1pYaDBaVzV6YVc5dUlDaGhibmtnUm1seVpXWnZlQ0IyWlhKemFXOXVLU0JoY21VZ2EyNXZkMjVjYmlBcUlIUnZJSE4xY0hCdmNuUWdYQ0lsWTF3aUlFTlRVeUJqZFhOMGIyMXBlbUYwYVc5dWN5NWNiaUFxWEc0Z0tpQlVUMFJQT2lCaFpHUWdZU0JnYkc5allXeFRkRzl5WVdkbFlDQjJZWEpwWVdKc1pTQjBieUJsZUhCc2FXTnBkR3g1SUdWdVlXSnNaUzlrYVhOaFlteGxJR052Ykc5eWMxeHVJQ292WEc1Y2JpOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQmpiMjF3YkdWNGFYUjVYRzVtZFc1amRHbHZiaUIxYzJWRGIyeHZjbk1vS1NCN1hHNWNkQzh2SUU1Q09pQkpiaUJoYmlCRmJHVmpkSEp2YmlCd2NtVnNiMkZrSUhOamNtbHdkQ3dnWkc5amRXMWxiblFnZDJsc2JDQmlaU0JrWldacGJtVmtJR0oxZENCdWIzUWdablZzYkhsY2JseDBMeThnYVc1cGRHbGhiR2w2WldRdUlGTnBibU5sSUhkbElHdHViM2NnZDJVbmNtVWdhVzRnUTJoeWIyMWxMQ0IzWlNkc2JDQnFkWE4wSUdSbGRHVmpkQ0IwYUdseklHTmhjMlZjYmx4MEx5OGdaWGh3YkdsamFYUnNlVnh1WEhScFppQW9kSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2QybHVaRzkzTG5CeWIyTmxjM01nSmlZZ0tIZHBibVJ2ZHk1d2NtOWpaWE56TG5SNWNHVWdQVDA5SUNkeVpXNWtaWEpsY2ljZ2ZId2dkMmx1Wkc5M0xuQnliMk5sYzNNdVgxOXVkMnB6S1NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFI5WEc1Y2JseDBMeThnU1c1MFpYSnVaWFFnUlhod2JHOXlaWElnWVc1a0lFVmtaMlVnWkc4Z2JtOTBJSE4xY0hCdmNuUWdZMjlzYjNKekxseHVYSFJwWmlBb2RIbHdaVzltSUc1aGRtbG5ZWFJ2Y2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2JtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDQW1KaUJ1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwTG5SdlRHOTNaWEpEWVhObEtDa3ViV0YwWTJnb0x5aGxaR2RsZkhSeWFXUmxiblFwWEZ3dktGeGNaQ3NwTHlrcElIdGNibHgwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEgxY2JseHVYSFF2THlCSmN5QjNaV0pyYVhRL0lHaDBkSEE2THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5aEx6RTJORFU1TmpBMkx6TTNOamMzTTF4dVhIUXZMeUJrYjJOMWJXVnVkQ0JwY3lCMWJtUmxabWx1WldRZ2FXNGdjbVZoWTNRdGJtRjBhWFpsT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlptRmpaV0p2YjJzdmNtVmhZM1F0Ym1GMGFYWmxMM0IxYkd3dk1UWXpNbHh1WEhSeVpYUjFjbTRnS0hSNWNHVnZaaUJrYjJOMWJXVnVkQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBJQ1ltSUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQzV6ZEhsc1pTQW1KaUJrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUXVjM1I1YkdVdVYyVmlhMmwwUVhCd1pXRnlZVzVqWlNrZ2ZIeGNibHgwWEhRdkx5QkpjeUJtYVhKbFluVm5QeUJvZEhSd09pOHZjM1JoWTJ0dmRtVnlabXh2ZHk1amIyMHZZUzh6T1RneE1qQXZNemMyTnpjelhHNWNkRngwS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSGRwYm1SdmR5NWpiMjV6YjJ4bElDWW1JQ2gzYVc1a2IzY3VZMjl1YzI5c1pTNW1hWEpsWW5WbklIeDhJQ2gzYVc1a2IzY3VZMjl1YzI5c1pTNWxlR05sY0hScGIyNGdKaVlnZDJsdVpHOTNMbU52Ym5OdmJHVXVkR0ZpYkdVcEtTa2dmSHhjYmx4MFhIUXZMeUJKY3lCbWFYSmxabTk0SUQ0OUlIWXpNVDljYmx4MFhIUXZMeUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxUnZiMnh6TDFkbFlsOURiMjV6YjJ4bEkxTjBlV3hwYm1kZmJXVnpjMkZuWlhOY2JseDBYSFFvZEhsd1pXOW1JRzVoZG1sbllYUnZjaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnYm1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZENBbUppQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBMblJ2VEc5M1pYSkRZWE5sS0NrdWJXRjBZMmdvTDJacGNtVm1iM2hjWEM4b1hGeGtLeWt2S1NBbUppQndZWEp6WlVsdWRDaFNaV2RGZUhBdUpERXNJREV3S1NBK1BTQXpNU2tnZkh4Y2JseDBYSFF2THlCRWIzVmliR1VnWTJobFkyc2dkMlZpYTJsMElHbHVJSFZ6WlhKQloyVnVkQ0JxZFhOMElHbHVJR05oYzJVZ2QyVWdZWEpsSUdsdUlHRWdkMjl5YTJWeVhHNWNkRngwS0hSNWNHVnZaaUJ1WVhacFoyRjBiM0lnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUc1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RZ0ppWWdibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQzUwYjB4dmQyVnlRMkZ6WlNncExtMWhkR05vS0M5aGNIQnNaWGRsWW10cGRGeGNMeWhjWEdRcktTOHBLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRiMnh2Y21sNlpTQnNiMmNnWVhKbmRXMWxiblJ6SUdsbUlHVnVZV0pzWldRdVhHNGdLbHh1SUNvZ1FHRndhU0J3ZFdKc2FXTmNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSQmNtZHpLR0Z5WjNNcElIdGNibHgwWVhKbmMxc3dYU0E5SUNoMGFHbHpMblZ6WlVOdmJHOXljeUEvSUNjbFl5Y2dPaUFuSnlrZ0sxeHVYSFJjZEhSb2FYTXVibUZ0WlhOd1lXTmxJQ3RjYmx4MFhIUW9kR2hwY3k1MWMyVkRiMnh2Y25NZ1B5QW5JQ1ZqSnlBNklDY2dKeWtnSzF4dVhIUmNkR0Z5WjNOYk1GMGdLMXh1WEhSY2RDaDBhR2x6TG5WelpVTnZiRzl5Y3lBL0lDY2xZeUFuSURvZ0p5QW5LU0FyWEc1Y2RGeDBKeXNuSUNzZ2JXOWtkV3hsTG1WNGNHOXlkSE11YUhWdFlXNXBlbVVvZEdocGN5NWthV1ptS1R0Y2JseHVYSFJwWmlBb0lYUm9hWE11ZFhObFEyOXNiM0p6S1NCN1hHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwWTI5dWMzUWdZeUE5SUNkamIyeHZjam9nSnlBcklIUm9hWE11WTI5c2IzSTdYRzVjZEdGeVozTXVjM0JzYVdObEtERXNJREFzSUdNc0lDZGpiMnh2Y2pvZ2FXNW9aWEpwZENjcE8xeHVYRzVjZEM4dklGUm9aU0JtYVc1aGJDQmNJaVZqWENJZ2FYTWdjMjl0Wlhkb1lYUWdkSEpwWTJ0NUxDQmlaV05oZFhObElIUm9aWEpsSUdOdmRXeGtJR0psSUc5MGFHVnlYRzVjZEM4dklHRnlaM1Z0Wlc1MGN5QndZWE56WldRZ1pXbDBhR1Z5SUdKbFptOXlaU0J2Y2lCaFpuUmxjaUIwYUdVZ0pXTXNJSE52SUhkbElHNWxaV1FnZEc5Y2JseDBMeThnWm1sbmRYSmxJRzkxZENCMGFHVWdZMjl5Y21WamRDQnBibVJsZUNCMGJ5QnBibk5sY25RZ2RHaGxJRU5UVXlCcGJuUnZYRzVjZEd4bGRDQnBibVJsZUNBOUlEQTdYRzVjZEd4bGRDQnNZWE4wUXlBOUlEQTdYRzVjZEdGeVozTmJNRjB1Y21Wd2JHRmpaU2d2SlZ0aExYcEJMVm9sWFM5bkxDQnRZWFJqYUNBOVBpQjdYRzVjZEZ4MGFXWWdLRzFoZEdOb0lEMDlQU0FuSlNVbktTQjdYRzVjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwZlZ4dVhIUmNkR2x1WkdWNEt5czdYRzVjZEZ4MGFXWWdLRzFoZEdOb0lEMDlQU0FuSldNbktTQjdYRzVjZEZ4MFhIUXZMeUJYWlNCdmJteDVJR0Z5WlNCcGJuUmxjbVZ6ZEdWa0lHbHVJSFJvWlNBcWJHRnpkQ29nSldOY2JseDBYSFJjZEM4dklDaDBhR1VnZFhObGNpQnRZWGtnYUdGMlpTQndjbTkyYVdSbFpDQjBhR1ZwY2lCdmQyNHBYRzVjZEZ4MFhIUnNZWE4wUXlBOUlHbHVaR1Y0TzF4dVhIUmNkSDFjYmx4MGZTazdYRzVjYmx4MFlYSm5jeTV6Y0d4cFkyVW9iR0Z6ZEVNc0lEQXNJR01wTzF4dWZWeHVYRzR2S2lwY2JpQXFJRWx1ZG05clpYTWdZR052Ym5OdmJHVXVaR1ZpZFdjb0tXQWdkMmhsYmlCaGRtRnBiR0ZpYkdVdVhHNGdLaUJPYnkxdmNDQjNhR1Z1SUdCamIyNXpiMnhsTG1SbFluVm5ZQ0JwY3lCdWIzUWdZU0JjSW1aMWJtTjBhVzl1WENJdVhHNGdLaUJKWmlCZ1kyOXVjMjlzWlM1a1pXSjFaMkFnYVhNZ2JtOTBJR0YyWVdsc1lXSnNaU3dnWm1Gc2JITWdZbUZqYTF4dUlDb2dkRzhnWUdOdmJuTnZiR1V1Ykc5bllDNWNiaUFxWEc0Z0tpQkFZWEJwSUhCMVlteHBZMXh1SUNvdlhHNWxlSEJ2Y25SekxteHZaeUE5SUdOdmJuTnZiR1V1WkdWaWRXY2dmSHdnWTI5dWMyOXNaUzVzYjJjZ2ZId2dLQ2dwSUQwK0lIdDlLVHRjYmx4dUx5b3FYRzRnS2lCVFlYWmxJR0J1WVcxbGMzQmhZMlZ6WUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpYTndZV05sYzF4dUlDb2dRR0Z3YVNCd2NtbDJZWFJsWEc0Z0tpOWNibVoxYm1OMGFXOXVJSE5oZG1Vb2JtRnRaWE53WVdObGN5a2dlMXh1WEhSMGNua2dlMXh1WEhSY2RHbG1JQ2h1WVcxbGMzQmhZMlZ6S1NCN1hHNWNkRngwWEhSbGVIQnZjblJ6TG5OMGIzSmhaMlV1YzJWMFNYUmxiU2duWkdWaWRXY25MQ0J1WVcxbGMzQmhZMlZ6S1R0Y2JseDBYSFI5SUdWc2MyVWdlMXh1WEhSY2RGeDBaWGh3YjNKMGN5NXpkRzl5WVdkbExuSmxiVzkyWlVsMFpXMG9KMlJsWW5Wbkp5azdYRzVjZEZ4MGZWeHVYSFI5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1WEhSY2RDOHZJRk4zWVd4c2IzZGNibHgwWEhRdkx5QllXRmdnS0VCUmFYZ3RLU0J6YUc5MWJHUWdkMlVnWW1VZ2JHOW5aMmx1WnlCMGFHVnpaVDljYmx4MGZWeHVmVnh1WEc0dktpcGNiaUFxSUV4dllXUWdZRzVoYldWemNHRmpaWE5nTGx4dUlDcGNiaUFxSUVCeVpYUjFjbTRnZTFOMGNtbHVaMzBnY21WMGRYSnVjeUIwYUdVZ2NISmxkbWx2ZFhOc2VTQndaWEp6YVhOMFpXUWdaR1ZpZFdjZ2JXOWtaWE5jYmlBcUlFQmhjR2tnY0hKcGRtRjBaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnNiMkZrS0NrZ2UxeHVYSFJzWlhRZ2NqdGNibHgwZEhKNUlIdGNibHgwWEhSeUlEMGdaWGh3YjNKMGN5NXpkRzl5WVdkbExtZGxkRWwwWlcwb0oyUmxZblZuSnlrN1hHNWNkSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzVjZEZ4MEx5OGdVM2RoYkd4dmQxeHVYSFJjZEM4dklGaFlXQ0FvUUZGcGVDMHBJSE5vYjNWc1pDQjNaU0JpWlNCc2IyZG5hVzVuSUhSb1pYTmxQMXh1WEhSOVhHNWNibHgwTHk4Z1NXWWdaR1ZpZFdjZ2FYTnVKM1FnYzJWMElHbHVJRXhUTENCaGJtUWdkMlVuY21VZ2FXNGdSV3hsWTNSeWIyNHNJSFJ5ZVNCMGJ5QnNiMkZrSUNSRVJVSlZSMXh1WEhScFppQW9JWElnSmlZZ2RIbHdaVzltSUhCeWIyTmxjM01nSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUNkbGJuWW5JR2x1SUhCeWIyTmxjM01wSUh0Y2JseDBYSFJ5SUQwZ2NISnZZMlZ6Y3k1bGJuWXVSRVZDVlVjN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2NqdGNibjFjYmx4dUx5b3FYRzRnS2lCTWIyTmhiSE4wYjNKaFoyVWdZWFIwWlcxd2RITWdkRzhnY21WMGRYSnVJSFJvWlNCc2IyTmhiSE4wYjNKaFoyVXVYRzRnS2x4dUlDb2dWR2hwY3lCcGN5QnVaV05sYzNOaGNua2dZbVZqWVhWelpTQnpZV1poY21rZ2RHaHliM2R6WEc0Z0tpQjNhR1Z1SUdFZ2RYTmxjaUJrYVhOaFlteGxjeUJqYjI5cmFXVnpMMnh2WTJGc2MzUnZjbUZuWlZ4dUlDb2dZVzVrSUhsdmRTQmhkSFJsYlhCMElIUnZJR0ZqWTJWemN5QnBkQzVjYmlBcVhHNGdLaUJBY21WMGRYSnVJSHRNYjJOaGJGTjBiM0poWjJWOVhHNGdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCc2IyTmhiSE4wYjNKaFoyVW9LU0I3WEc1Y2RIUnllU0I3WEc1Y2RGeDBMeThnVkZaTlRFdHBkQ0FvUVhCd2JHVWdWRllnU2xNZ1VuVnVkR2x0WlNrZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JoSUhkcGJtUnZkeUJ2WW1wbFkzUXNJR3AxYzNRZ2JHOWpZV3hUZEc5eVlXZGxJR2x1SUhSb1pTQm5iRzlpWVd3Z1kyOXVkR1Y0ZEZ4dVhIUmNkQzh2SUZSb1pTQkNjbTkzYzJWeUlHRnNjMjhnYUdGeklHeHZZMkZzVTNSdmNtRm5aU0JwYmlCMGFHVWdaMnh2WW1Gc0lHTnZiblJsZUhRdVhHNWNkRngwY21WMGRYSnVJR3h2WTJGc1UzUnZjbUZuWlR0Y2JseDBmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNibHgwWEhRdkx5QlRkMkZzYkc5M1hHNWNkRngwTHk4Z1dGaFlJQ2hBVVdsNExTa2djMmh2ZFd4a0lIZGxJR0psSUd4dloyZHBibWNnZEdobGMyVS9YRzVjZEgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmJXMXZiaWNwS0dWNGNHOXlkSE1wTzF4dVhHNWpiMjV6ZENCN1ptOXliV0YwZEdWeWMzMGdQU0J0YjJSMWJHVXVaWGh3YjNKMGN6dGNibHh1THlvcVhHNGdLaUJOWVhBZ0pXb2dkRzhnWUVwVFQwNHVjM1J5YVc1bmFXWjVLQ2xnTENCemFXNWpaU0J1YnlCWFpXSWdTVzV6Y0dWamRHOXljeUJrYnlCMGFHRjBJR0o1SUdSbFptRjFiSFF1WEc0Z0tpOWNibHh1Wm05eWJXRjBkR1Z5Y3k1cUlEMGdablZ1WTNScGIyNGdLSFlwSUh0Y2JseDBkSEo1SUh0Y2JseDBYSFJ5WlhSMWNtNGdTbE5QVGk1emRISnBibWRwWm5rb2RpazdYRzVjZEgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc1Y2RGeDBjbVYwZFhKdUlDZGJWVzVsZUhCbFkzUmxaRXBUVDA1UVlYSnpaVVZ5Y205eVhUb2dKeUFySUdWeWNtOXlMbTFsYzNOaFoyVTdYRzVjZEgxY2JuMDdYRzRpTENKY2JpOHFLbHh1SUNvZ1ZHaHBjeUJwY3lCMGFHVWdZMjl0Ylc5dUlHeHZaMmxqSUdadmNpQmliM1JvSUhSb1pTQk9iMlJsTG1weklHRnVaQ0IzWldJZ1luSnZkM05sY2x4dUlDb2dhVzF3YkdWdFpXNTBZWFJwYjI1eklHOW1JR0JrWldKMVp5Z3BZQzVjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJ6WlhSMWNDaGxibllwSUh0Y2JseDBZM0psWVhSbFJHVmlkV2N1WkdWaWRXY2dQU0JqY21WaGRHVkVaV0oxWnp0Y2JseDBZM0psWVhSbFJHVmlkV2N1WkdWbVlYVnNkQ0E5SUdOeVpXRjBaVVJsWW5Wbk8xeHVYSFJqY21WaGRHVkVaV0oxWnk1amIyVnlZMlVnUFNCamIyVnlZMlU3WEc1Y2RHTnlaV0YwWlVSbFluVm5MbVJwYzJGaWJHVWdQU0JrYVhOaFlteGxPMXh1WEhSamNtVmhkR1ZFWldKMVp5NWxibUZpYkdVZ1BTQmxibUZpYkdVN1hHNWNkR055WldGMFpVUmxZblZuTG1WdVlXSnNaV1FnUFNCbGJtRmliR1ZrTzF4dVhIUmpjbVZoZEdWRVpXSjFaeTVvZFcxaGJtbDZaU0E5SUhKbGNYVnBjbVVvSjIxekp5azdYRzVjZEdOeVpXRjBaVVJsWW5WbkxtUmxjM1J5YjNrZ1BTQmtaWE4wY205NU8xeHVYRzVjZEU5aWFtVmpkQzVyWlhsektHVnVkaWt1Wm05eVJXRmphQ2hyWlhrZ1BUNGdlMXh1WEhSY2RHTnlaV0YwWlVSbFluVm5XMnRsZVYwZ1BTQmxiblpiYTJWNVhUdGNibHgwZlNrN1hHNWNibHgwTHlvcVhHNWNkQ29nVkdobElHTjFjbkpsYm5Sc2VTQmhZM1JwZG1VZ1pHVmlkV2NnYlc5a1pTQnVZVzFsY3l3Z1lXNWtJRzVoYldWeklIUnZJSE5yYVhBdVhHNWNkQ292WEc1Y2JseDBZM0psWVhSbFJHVmlkV2N1Ym1GdFpYTWdQU0JiWFR0Y2JseDBZM0psWVhSbFJHVmlkV2N1YzJ0cGNITWdQU0JiWFR0Y2JseHVYSFF2S2lwY2JseDBLaUJOWVhBZ2IyWWdjM0JsWTJsaGJDQmNJaVZ1WENJZ2FHRnVaR3hwYm1jZ1puVnVZM1JwYjI1ekxDQm1iM0lnZEdobElHUmxZblZuSUZ3aVptOXliV0YwWENJZ1lYSm5kVzFsYm5RdVhHNWNkQ3BjYmx4MEtpQldZV3hwWkNCclpYa2dibUZ0WlhNZ1lYSmxJR0VnYzJsdVoyeGxMQ0JzYjNkbGNpQnZjaUIxY0hCbGNpMWpZWE5sSUd4bGRIUmxjaXdnYVM1bExpQmNJbTVjSWlCaGJtUWdYQ0pPWENJdVhHNWNkQ292WEc1Y2RHTnlaV0YwWlVSbFluVm5MbVp2Y20xaGRIUmxjbk1nUFNCN2ZUdGNibHh1WEhRdktpcGNibHgwS2lCVFpXeGxZM1J6SUdFZ1kyOXNiM0lnWm05eUlHRWdaR1ZpZFdjZ2JtRnRaWE53WVdObFhHNWNkQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRzVoYldWemNHRmpaU0JVYUdVZ2JtRnRaWE53WVdObElITjBjbWx1WnlCbWIzSWdkR2hsSUdadmNpQjBhR1VnWkdWaWRXY2dhVzV6ZEdGdVkyVWdkRzhnWW1VZ1kyOXNiM0psWkZ4dVhIUXFJRUJ5WlhSMWNtNGdlMDUxYldKbGNueFRkSEpwYm1kOUlFRnVJRUZPVTBrZ1kyOXNiM0lnWTI5a1pTQm1iM0lnZEdobElHZHBkbVZ1SUc1aGJXVnpjR0ZqWlZ4dVhIUXFJRUJoY0drZ2NISnBkbUYwWlZ4dVhIUXFMMXh1WEhSbWRXNWpkR2x2YmlCelpXeGxZM1JEYjJ4dmNpaHVZVzFsYzNCaFkyVXBJSHRjYmx4MFhIUnNaWFFnYUdGemFDQTlJREE3WEc1Y2JseDBYSFJtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUc1aGJXVnpjR0ZqWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhSY2RGeDBhR0Z6YUNBOUlDZ29hR0Z6YUNBOFBDQTFLU0F0SUdoaGMyZ3BJQ3NnYm1GdFpYTndZV05sTG1Ob1lYSkRiMlJsUVhRb2FTazdYRzVjZEZ4MFhIUm9ZWE5vSUh3OUlEQTdJQzh2SUVOdmJuWmxjblFnZEc4Z016SmlhWFFnYVc1MFpXZGxjbHh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCamNtVmhkR1ZFWldKMVp5NWpiMnh2Y25OYlRXRjBhQzVoWW5Nb2FHRnphQ2tnSlNCamNtVmhkR1ZFWldKMVp5NWpiMnh2Y25NdWJHVnVaM1JvWFR0Y2JseDBmVnh1WEhSamNtVmhkR1ZFWldKMVp5NXpaV3hsWTNSRGIyeHZjaUE5SUhObGJHVmpkRU52Ykc5eU8xeHVYRzVjZEM4cUtseHVYSFFxSUVOeVpXRjBaU0JoSUdSbFluVm5aMlZ5SUhkcGRHZ2dkR2hsSUdkcGRtVnVJR0J1WVcxbGMzQmhZMlZnTGx4dVhIUXFYRzVjZENvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUc1aGJXVnpjR0ZqWlZ4dVhIUXFJRUJ5WlhSMWNtNGdlMFoxYm1OMGFXOXVmVnh1WEhRcUlFQmhjR2tnY0hWaWJHbGpYRzVjZENvdlhHNWNkR1oxYm1OMGFXOXVJR055WldGMFpVUmxZblZuS0c1aGJXVnpjR0ZqWlNrZ2UxeHVYSFJjZEd4bGRDQndjbVYyVkdsdFpUdGNibHgwWEhSc1pYUWdaVzVoWW14bFQzWmxjbkpwWkdVZ1BTQnVkV3hzTzF4dVhIUmNkR3hsZENCdVlXMWxjM0JoWTJWelEyRmphR1U3WEc1Y2RGeDBiR1YwSUdWdVlXSnNaV1JEWVdOb1pUdGNibHh1WEhSY2RHWjFibU4wYVc5dUlHUmxZblZuS0M0dUxtRnlaM01wSUh0Y2JseDBYSFJjZEM4dklFUnBjMkZpYkdWa1AxeHVYSFJjZEZ4MGFXWWdLQ0ZrWldKMVp5NWxibUZpYkdWa0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJqdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBZMjl1YzNRZ2MyVnNaaUE5SUdSbFluVm5PMXh1WEc1Y2RGeDBYSFF2THlCVFpYUWdZR1JwWm1aZ0lIUnBiV1Z6ZEdGdGNGeHVYSFJjZEZ4MFkyOXVjM1FnWTNWeWNpQTlJRTUxYldKbGNpaHVaWGNnUkdGMFpTZ3BLVHRjYmx4MFhIUmNkR052Ym5OMElHMXpJRDBnWTNWeWNpQXRJQ2h3Y21WMlZHbHRaU0I4ZkNCamRYSnlLVHRjYmx4MFhIUmNkSE5sYkdZdVpHbG1aaUE5SUcxek8xeHVYSFJjZEZ4MGMyVnNaaTV3Y21WMklEMGdjSEpsZGxScGJXVTdYRzVjZEZ4MFhIUnpaV3htTG1OMWNuSWdQU0JqZFhKeU8xeHVYSFJjZEZ4MGNISmxkbFJwYldVZ1BTQmpkWEp5TzF4dVhHNWNkRngwWEhSaGNtZHpXekJkSUQwZ1kzSmxZWFJsUkdWaWRXY3VZMjlsY21ObEtHRnlaM05iTUYwcE8xeHVYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JR0Z5WjNOYk1GMGdJVDA5SUNkemRISnBibWNuS1NCN1hHNWNkRngwWEhSY2RDOHZJRUZ1ZVhSb2FXNW5JR1ZzYzJVZ2JHVjBKM01nYVc1emNHVmpkQ0IzYVhSb0lDVlBYRzVjZEZ4MFhIUmNkR0Z5WjNNdWRXNXphR2xtZENnbkpVOG5LVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1FYQndiSGtnWVc1NUlHQm1iM0p0WVhSMFpYSnpZQ0IwY21GdWMyWnZjbTFoZEdsdmJuTmNibHgwWEhSY2RHeGxkQ0JwYm1SbGVDQTlJREE3WEc1Y2RGeDBYSFJoY21keld6QmRJRDBnWVhKbmMxc3dYUzV5WlhCc1lXTmxLQzhsS0Z0aExYcEJMVm9sWFNrdlp5d2dLRzFoZEdOb0xDQm1iM0p0WVhRcElEMCtJSHRjYmx4MFhIUmNkRngwTHk4Z1NXWWdkMlVnWlc1amIzVnVkR1Z5SUdGdUlHVnpZMkZ3WldRZ0pTQjBhR1Z1SUdSdmJpZDBJR2x1WTNKbFlYTmxJSFJvWlNCaGNuSmhlU0JwYm1SbGVGeHVYSFJjZEZ4MFhIUnBaaUFvYldGMFkyZ2dQVDA5SUNjbEpTY3BJSHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnSnlVbk8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkR2x1WkdWNEt5czdYRzVjZEZ4MFhIUmNkR052Ym5OMElHWnZjbTFoZEhSbGNpQTlJR055WldGMFpVUmxZblZuTG1admNtMWhkSFJsY25OYlptOXliV0YwWFR0Y2JseDBYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQm1iM0p0WVhSMFpYSWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwWEhSY2RGeDBYSFJqYjI1emRDQjJZV3dnUFNCaGNtZHpXMmx1WkdWNFhUdGNibHgwWEhSY2RGeDBYSFJ0WVhSamFDQTlJR1p2Y20xaGRIUmxjaTVqWVd4c0tITmxiR1lzSUhaaGJDazdYRzVjYmx4MFhIUmNkRngwWEhRdkx5Qk9iM2NnZDJVZ2JtVmxaQ0IwYnlCeVpXMXZkbVVnWUdGeVozTmJhVzVrWlhoZFlDQnphVzVqWlNCcGRDZHpJR2x1YkdsdVpXUWdhVzRnZEdobElHQm1iM0p0WVhSZ1hHNWNkRngwWEhSY2RGeDBZWEpuY3k1emNHeHBZMlVvYVc1a1pYZ3NJREVwTzF4dVhIUmNkRngwWEhSY2RHbHVaR1Y0TFMwN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBjbVYwZFhKdUlHMWhkR05vTzF4dVhIUmNkRngwZlNrN1hHNWNibHgwWEhSY2RDOHZJRUZ3Y0d4NUlHVnVkaTF6Y0dWamFXWnBZeUJtYjNKdFlYUjBhVzVuSUNoamIyeHZjbk1zSUdWMFl5NHBYRzVjZEZ4MFhIUmpjbVZoZEdWRVpXSjFaeTVtYjNKdFlYUkJjbWR6TG1OaGJHd29jMlZzWml3Z1lYSm5jeWs3WEc1Y2JseDBYSFJjZEdOdmJuTjBJR3h2WjBadUlEMGdjMlZzWmk1c2IyY2dmSHdnWTNKbFlYUmxSR1ZpZFdjdWJHOW5PMXh1WEhSY2RGeDBiRzluUm00dVlYQndiSGtvYzJWc1ppd2dZWEpuY3lrN1hHNWNkRngwZlZ4dVhHNWNkRngwWkdWaWRXY3VibUZ0WlhOd1lXTmxJRDBnYm1GdFpYTndZV05sTzF4dVhIUmNkR1JsWW5WbkxuVnpaVU52Ykc5eWN5QTlJR055WldGMFpVUmxZblZuTG5WelpVTnZiRzl5Y3lncE8xeHVYSFJjZEdSbFluVm5MbU52Ykc5eUlEMGdZM0psWVhSbFJHVmlkV2N1YzJWc1pXTjBRMjlzYjNJb2JtRnRaWE53WVdObEtUdGNibHgwWEhSa1pXSjFaeTVsZUhSbGJtUWdQU0JsZUhSbGJtUTdYRzVjZEZ4MFpHVmlkV2N1WkdWemRISnZlU0E5SUdOeVpXRjBaVVJsWW5WbkxtUmxjM1J5YjNrN0lDOHZJRmhZV0NCVVpXMXdiM0poY25rdUlGZHBiR3dnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnYm1WNGRDQnRZV3B2Y2lCeVpXeGxZWE5sTGx4dVhHNWNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHUmxZblZuTENBblpXNWhZbXhsWkNjc0lIdGNibHgwWEhSY2RHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNWNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVYSFJjZEZ4MFoyVjBPaUFvS1NBOVBpQjdYRzVjZEZ4MFhIUmNkR2xtSUNobGJtRmliR1ZQZG1WeWNtbGtaU0FoUFQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbGJtRmliR1ZQZG1WeWNtbGtaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhScFppQW9ibUZ0WlhOd1lXTmxjME5oWTJobElDRTlQU0JqY21WaGRHVkVaV0oxWnk1dVlXMWxjM0JoWTJWektTQjdYRzVjZEZ4MFhIUmNkRngwYm1GdFpYTndZV05sYzBOaFkyaGxJRDBnWTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE53WVdObGN6dGNibHgwWEhSY2RGeDBYSFJsYm1GaWJHVmtRMkZqYUdVZ1BTQmpjbVZoZEdWRVpXSjFaeTVsYm1GaWJHVmtLRzVoYldWemNHRmpaU2s3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUnlaWFIxY200Z1pXNWhZbXhsWkVOaFkyaGxPMXh1WEhSY2RGeDBmU3hjYmx4MFhIUmNkSE5sZERvZ2RpQTlQaUI3WEc1Y2RGeDBYSFJjZEdWdVlXSnNaVTkyWlhKeWFXUmxJRDBnZGp0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYSFJjZEM4dklFVnVkaTF6Y0dWamFXWnBZeUJwYm1sMGFXRnNhWHBoZEdsdmJpQnNiMmRwWXlCbWIzSWdaR1ZpZFdjZ2FXNXpkR0Z1WTJWelhHNWNkRngwYVdZZ0tIUjVjR1Z2WmlCamNtVmhkR1ZFWldKMVp5NXBibWwwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc1Y2RGeDBYSFJqY21WaGRHVkVaV0oxWnk1cGJtbDBLR1JsWW5WbktUdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnWkdWaWRXYzdYRzVjZEgxY2JseHVYSFJtZFc1amRHbHZiaUJsZUhSbGJtUW9ibUZ0WlhOd1lXTmxMQ0JrWld4cGJXbDBaWElwSUh0Y2JseDBYSFJqYjI1emRDQnVaWGRFWldKMVp5QTlJR055WldGMFpVUmxZblZuS0hSb2FYTXVibUZ0WlhOd1lXTmxJQ3NnS0hSNWNHVnZaaUJrWld4cGJXbDBaWElnUFQwOUlDZDFibVJsWm1sdVpXUW5JRDhnSnpvbklEb2daR1ZzYVcxcGRHVnlLU0FySUc1aGJXVnpjR0ZqWlNrN1hHNWNkRngwYm1WM1JHVmlkV2N1Ykc5bklEMGdkR2hwY3k1c2IyYzdYRzVjZEZ4MGNtVjBkWEp1SUc1bGQwUmxZblZuTzF4dVhIUjlYRzVjYmx4MEx5b3FYRzVjZENvZ1JXNWhZbXhsY3lCaElHUmxZblZuSUcxdlpHVWdZbmtnYm1GdFpYTndZV05sY3k0Z1ZHaHBjeUJqWVc0Z2FXNWpiSFZrWlNCdGIyUmxjMXh1WEhRcUlITmxjR0Z5WVhSbFpDQmllU0JoSUdOdmJHOXVJR0Z1WkNCM2FXeGtZMkZ5WkhNdVhHNWNkQ3BjYmx4MEtpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JtRnRaWE53WVdObGMxeHVYSFFxSUVCaGNHa2djSFZpYkdsalhHNWNkQ292WEc1Y2RHWjFibU4wYVc5dUlHVnVZV0pzWlNodVlXMWxjM0JoWTJWektTQjdYRzVjZEZ4MFkzSmxZWFJsUkdWaWRXY3VjMkYyWlNodVlXMWxjM0JoWTJWektUdGNibHgwWEhSamNtVmhkR1ZFWldKMVp5NXVZVzFsYzNCaFkyVnpJRDBnYm1GdFpYTndZV05sY3p0Y2JseHVYSFJjZEdOeVpXRjBaVVJsWW5WbkxtNWhiV1Z6SUQwZ1cxMDdYRzVjZEZ4MFkzSmxZWFJsUkdWaWRXY3VjMnRwY0hNZ1BTQmJYVHRjYmx4dVhIUmNkR3hsZENCcE8xeHVYSFJjZEdOdmJuTjBJSE53YkdsMElEMGdLSFI1Y0dWdlppQnVZVzFsYzNCaFkyVnpJRDA5UFNBbmMzUnlhVzVuSnlBL0lHNWhiV1Z6Y0dGalpYTWdPaUFuSnlrdWMzQnNhWFFvTDF0Y1hITXNYU3N2S1R0Y2JseDBYSFJqYjI1emRDQnNaVzRnUFNCemNHeHBkQzVzWlc1bmRHZzdYRzVjYmx4MFhIUm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNibHgwWEhSY2RHbG1JQ2doYzNCc2FYUmJhVjBwSUh0Y2JseDBYSFJjZEZ4MEx5OGdhV2R1YjNKbElHVnRjSFI1SUhOMGNtbHVaM05jYmx4MFhIUmNkRngwWTI5dWRHbHVkV1U3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEc1aGJXVnpjR0ZqWlhNZ1BTQnpjR3hwZEZ0cFhTNXlaWEJzWVdObEtDOWNYQ292Wnl3Z0p5NHFQeWNwTzF4dVhHNWNkRngwWEhScFppQW9ibUZ0WlhOd1lXTmxjMXN3WFNBOVBUMGdKeTBuS1NCN1hHNWNkRngwWEhSY2RHTnlaV0YwWlVSbFluVm5Mbk5yYVhCekxuQjFjMmdvYm1WM0lGSmxaMFY0Y0NnblhpY2dLeUJ1WVcxbGMzQmhZMlZ6TG5OMVluTjBjaWd4S1NBcklDY2tKeWtwTzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE11Y0hWemFDaHVaWGNnVW1WblJYaHdLQ2RlSnlBcklHNWhiV1Z6Y0dGalpYTWdLeUFuSkNjcEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUXZLaXBjYmx4MEtpQkVhWE5oWW14bElHUmxZblZuSUc5MWRIQjFkQzVjYmx4MEtseHVYSFFxSUVCeVpYUjFjbTRnZTFOMGNtbHVaMzBnYm1GdFpYTndZV05sYzF4dVhIUXFJRUJoY0drZ2NIVmliR2xqWEc1Y2RDb3ZYRzVjZEdaMWJtTjBhVzl1SUdScGMyRmliR1VvS1NCN1hHNWNkRngwWTI5dWMzUWdibUZ0WlhOd1lXTmxjeUE5SUZ0Y2JseDBYSFJjZEM0dUxtTnlaV0YwWlVSbFluVm5MbTVoYldWekxtMWhjQ2gwYjA1aGJXVnpjR0ZqWlNrc1hHNWNkRngwWEhRdUxpNWpjbVZoZEdWRVpXSjFaeTV6YTJsd2N5NXRZWEFvZEc5T1lXMWxjM0JoWTJVcExtMWhjQ2h1WVcxbGMzQmhZMlVnUFQ0Z0p5MG5JQ3NnYm1GdFpYTndZV05sS1Z4dVhIUmNkRjB1YW05cGJpZ25MQ2NwTzF4dVhIUmNkR055WldGMFpVUmxZblZuTG1WdVlXSnNaU2duSnlrN1hHNWNkRngwY21WMGRYSnVJRzVoYldWemNHRmpaWE03WEc1Y2RIMWNibHh1WEhRdktpcGNibHgwS2lCU1pYUjFjbTV6SUhSeWRXVWdhV1lnZEdobElHZHBkbVZ1SUcxdlpHVWdibUZ0WlNCcGN5QmxibUZpYkdWa0xDQm1ZV3h6WlNCdmRHaGxjbmRwYzJVdVhHNWNkQ3BjYmx4MEtpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JtRnRaVnh1WEhRcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNWNkQ29nUUdGd2FTQndkV0pzYVdOY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z1pXNWhZbXhsWkNodVlXMWxLU0I3WEc1Y2RGeDBhV1lnS0c1aGJXVmJibUZ0WlM1c1pXNW5kR2dnTFNBeFhTQTlQVDBnSnlvbktTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnNaWFFnYVR0Y2JseDBYSFJzWlhRZ2JHVnVPMXh1WEc1Y2RGeDBabTl5SUNocElEMGdNQ3dnYkdWdUlEMGdZM0psWVhSbFJHVmlkV2N1YzJ0cGNITXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JseDBYSFJjZEdsbUlDaGpjbVZoZEdWRVpXSjFaeTV6YTJsd2MxdHBYUzUwWlhOMEtHNWhiV1VwS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUm1iM0lnS0drZ1BTQXdMQ0JzWlc0Z1BTQmpjbVZoZEdWRVpXSjFaeTV1WVcxbGN5NXNaVzVuZEdnN0lHa2dQQ0JzWlc0N0lHa3JLeWtnZTF4dVhIUmNkRngwYVdZZ0tHTnlaV0YwWlVSbFluVm5MbTVoYldWelcybGRMblJsYzNRb2JtRnRaU2twSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhSeWRXVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSOVhHNWNibHgwTHlvcVhHNWNkQ29nUTI5dWRtVnlkQ0J5WldkbGVIQWdkRzhnYm1GdFpYTndZV05sWEc1Y2RDcGNibHgwS2lCQWNHRnlZVzBnZTFKbFowVjRjSDBnY21WbmVHVndYRzVjZENvZ1FISmxkSFZ5YmlCN1UzUnlhVzVuZlNCdVlXMWxjM0JoWTJWY2JseDBLaUJBWVhCcElIQnlhWFpoZEdWY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z2RHOU9ZVzFsYzNCaFkyVW9jbVZuWlhod0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhKbFoyVjRjQzUwYjFOMGNtbHVaeWdwWEc1Y2RGeDBYSFF1YzNWaWMzUnlhVzVuS0RJc0lISmxaMlY0Y0M1MGIxTjBjbWx1WnlncExteGxibWQwYUNBdElESXBYRzVjZEZ4MFhIUXVjbVZ3YkdGalpTZ3ZYRnd1WEZ3cVhGdy9KQzhzSUNjcUp5azdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBLaUJEYjJWeVkyVWdZSFpoYkdBdVhHNWNkQ3BjYmx4MEtpQkFjR0Z5WVcwZ2UwMXBlR1ZrZlNCMllXeGNibHgwS2lCQWNtVjBkWEp1SUh0TmFYaGxaSDFjYmx4MEtpQkFZWEJwSUhCeWFYWmhkR1ZjYmx4MEtpOWNibHgwWm5WdVkzUnBiMjRnWTI5bGNtTmxLSFpoYkNrZ2UxeHVYSFJjZEdsbUlDaDJZV3dnYVc1emRHRnVZMlZ2WmlCRmNuSnZjaWtnZTF4dVhIUmNkRngwY21WMGRYSnVJSFpoYkM1emRHRmpheUI4ZkNCMllXd3ViV1Z6YzJGblpUdGNibHgwWEhSOVhHNWNkRngwY21WMGRYSnVJSFpoYkR0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRcUlGaFlXQ0JFVHlCT1QxUWdWVk5GTGlCVWFHbHpJR2x6SUdFZ2RHVnRjRzl5WVhKNUlITjBkV0lnWm5WdVkzUnBiMjR1WEc1Y2RDb2dXRmhZSUVsMElGZEpURXdnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnYm1WNGRDQnRZV3B2Y2lCeVpXeGxZWE5sTGx4dVhIUXFMMXh1WEhSbWRXNWpkR2x2YmlCa1pYTjBjbTk1S0NrZ2UxeHVYSFJjZEdOdmJuTnZiR1V1ZDJGeWJpZ25TVzV6ZEdGdVkyVWdiV1YwYUc5a0lHQmtaV0oxWnk1a1pYTjBjbTk1S0NsZ0lHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lHNXZJR3h2Ym1kbGNpQmtiMlZ6SUdGdWVYUm9hVzVuTGlCSmRDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2RtVnljMmx2YmlCdlppQmdaR1ZpZFdkZ0xpY3BPMXh1WEhSOVhHNWNibHgwWTNKbFlYUmxSR1ZpZFdjdVpXNWhZbXhsS0dOeVpXRjBaVVJsWW5WbkxteHZZV1FvS1NrN1hHNWNibHgwY21WMGRYSnVJR055WldGMFpVUmxZblZuTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSE5sZEhWd08xeHVJaXdpTHlvZ1pYTnNhVzUwTFdWdWRpQmljbTkzYzJWeUlDb3ZYRzVjYmk4cUtseHVJQ29nVkdocGN5QnBjeUIwYUdVZ2QyVmlJR0p5YjNkelpYSWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdZR1JsWW5WbktDbGdMbHh1SUNvdlhHNWNibVY0Y0c5eWRITXVabTl5YldGMFFYSm5jeUE5SUdadmNtMWhkRUZ5WjNNN1hHNWxlSEJ2Y25SekxuTmhkbVVnUFNCellYWmxPMXh1Wlhod2IzSjBjeTVzYjJGa0lEMGdiRzloWkR0Y2JtVjRjRzl5ZEhNdWRYTmxRMjlzYjNKeklEMGdkWE5sUTI5c2IzSnpPMXh1Wlhod2IzSjBjeTV6ZEc5eVlXZGxJRDBnYkc5allXeHpkRzl5WVdkbEtDazdYRzVsZUhCdmNuUnpMbVJsYzNSeWIza2dQU0FvS0NrZ1BUNGdlMXh1WEhSc1pYUWdkMkZ5Ym1Wa0lEMGdabUZzYzJVN1hHNWNibHgwY21WMGRYSnVJQ2dwSUQwK0lIdGNibHgwWEhScFppQW9JWGRoY201bFpDa2dlMXh1WEhSY2RGeDBkMkZ5Ym1Wa0lEMGdkSEoxWlR0Y2JseDBYSFJjZEdOdmJuTnZiR1V1ZDJGeWJpZ25TVzV6ZEdGdVkyVWdiV1YwYUc5a0lHQmtaV0oxWnk1a1pYTjBjbTk1S0NsZ0lHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lHNXZJR3h2Ym1kbGNpQmtiMlZ6SUdGdWVYUm9hVzVuTGlCSmRDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2RtVnljMmx2YmlCdlppQmdaR1ZpZFdkZ0xpY3BPMXh1WEhSY2RIMWNibHgwZlR0Y2JuMHBLQ2s3WEc1Y2JpOHFLbHh1SUNvZ1EyOXNiM0p6TGx4dUlDb3ZYRzVjYm1WNGNHOXlkSE11WTI5c2IzSnpJRDBnVzF4dVhIUW5JekF3TURCRFF5Y3NYRzVjZENjak1EQXdNRVpHSnl4Y2JseDBKeU13TURNelEwTW5MRnh1WEhRbkl6QXdNek5HUmljc1hHNWNkQ2NqTURBMk5rTkRKeXhjYmx4MEp5TXdNRFkyUmtZbkxGeHVYSFFuSXpBd09UbERReWNzWEc1Y2RDY2pNREE1T1VaR0p5eGNibHgwSnlNd01FTkRNREFuTEZ4dVhIUW5JekF3UTBNek15Y3NYRzVjZENjak1EQkRRelkySnl4Y2JseDBKeU13TUVORE9Ua25MRnh1WEhRbkl6QXdRME5EUXljc1hHNWNkQ2NqTURCRFEwWkdKeXhjYmx4MEp5TXpNekF3UTBNbkxGeHVYSFFuSXpNek1EQkdSaWNzWEc1Y2RDY2pNek16TTBOREp5eGNibHgwSnlNek16TXpSa1luTEZ4dVhIUW5Jek16TmpaRFF5Y3NYRzVjZENjak16TTJOa1pHSnl4Y2JseDBKeU16TXprNVEwTW5MRnh1WEhRbkl6TXpPVGxHUmljc1hHNWNkQ2NqTXpORFF6QXdKeXhjYmx4MEp5TXpNME5ETXpNbkxGeHVYSFFuSXpNelEwTTJOaWNzWEc1Y2RDY2pNek5EUXprNUp5eGNibHgwSnlNek0wTkRRME1uTEZ4dVhIUW5Jek16UTBOR1JpY3NYRzVjZENjak5qWXdNRU5ESnl4Y2JseDBKeU0yTmpBd1JrWW5MRnh1WEhRbkl6WTJNek5EUXljc1hHNWNkQ2NqTmpZek0wWkdKeXhjYmx4MEp5TTJOa05ETURBbkxGeHVYSFFuSXpZMlEwTXpNeWNzWEc1Y2RDY2pPVGt3TUVOREp5eGNibHgwSnlNNU9UQXdSa1luTEZ4dVhIUW5Jems1TXpORFF5Y3NYRzVjZENjak9Ua3pNMFpHSnl4Y2JseDBKeU01T1VORE1EQW5MRnh1WEhRbkl6azVRME16TXljc1hHNWNkQ2NqUTBNd01EQXdKeXhjYmx4MEp5TkRRekF3TXpNbkxGeHVYSFFuSTBORE1EQTJOaWNzWEc1Y2RDY2pRME13TURrNUp5eGNibHgwSnlORFF6QXdRME1uTEZ4dVhIUW5JME5ETURCR1JpY3NYRzVjZENjalEwTXpNekF3Snl4Y2JseDBKeU5EUXpNek16TW5MRnh1WEhRbkkwTkRNek0yTmljc1hHNWNkQ2NqUTBNek16azVKeXhjYmx4MEp5TkRRek16UTBNbkxGeHVYSFFuSTBORE16TkdSaWNzWEc1Y2RDY2pRME0yTmpBd0p5eGNibHgwSnlORFF6WTJNek1uTEZ4dVhIUW5JME5ET1Rrd01DY3NYRzVjZENjalEwTTVPVE16Snl4Y2JseDBKeU5EUTBORE1EQW5MRnh1WEhRbkkwTkRRME16TXljc1hHNWNkQ2NqUmtZd01EQXdKeXhjYmx4MEp5TkdSakF3TXpNbkxGeHVYSFFuSTBaR01EQTJOaWNzWEc1Y2RDY2pSa1l3TURrNUp5eGNibHgwSnlOR1JqQXdRME1uTEZ4dVhIUW5JMFpHTURCR1JpY3NYRzVjZENjalJrWXpNekF3Snl4Y2JseDBKeU5HUmpNek16TW5MRnh1WEhRbkkwWkdNek0yTmljc1hHNWNkQ2NqUmtZek16azVKeXhjYmx4MEp5TkdSak16UTBNbkxGeHVYSFFuSTBaR016TkdSaWNzWEc1Y2RDY2pSa1kyTmpBd0p5eGNibHgwSnlOR1JqWTJNek1uTEZ4dVhIUW5JMFpHT1Rrd01DY3NYRzVjZENjalJrWTVPVE16Snl4Y2JseDBKeU5HUmtORE1EQW5MRnh1WEhRbkkwWkdRME16TXlkY2JsMDdYRzVjYmk4cUtseHVJQ29nUTNWeWNtVnVkR3g1SUc5dWJIa2dWMlZpUzJsMExXSmhjMlZrSUZkbFlpQkpibk53WldOMGIzSnpMQ0JHYVhKbFptOTRJRDQ5SUhZek1TeGNiaUFxSUdGdVpDQjBhR1VnUm1seVpXSjFaeUJsZUhSbGJuTnBiMjRnS0dGdWVTQkdhWEpsWm05NElIWmxjbk5wYjI0cElHRnlaU0JyYm05M2JseHVJQ29nZEc4Z2MzVndjRzl5ZENCY0lpVmpYQ0lnUTFOVElHTjFjM1J2YldsNllYUnBiMjV6TGx4dUlDcGNiaUFxSUZSUFJFODZJR0ZrWkNCaElHQnNiMk5oYkZOMGIzSmhaMlZnSUhaaGNtbGhZbXhsSUhSdklHVjRjR3hwWTJsMGJIa2daVzVoWW14bEwyUnBjMkZpYkdVZ1kyOXNiM0p6WEc0Z0tpOWNibHh1THk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdOdmJYQnNaWGhwZEhsY2JtWjFibU4wYVc5dUlIVnpaVU52Ykc5eWN5Z3BJSHRjYmx4MEx5OGdUa0k2SUVsdUlHRnVJRVZzWldOMGNtOXVJSEJ5Wld4dllXUWdjMk55YVhCMExDQmtiMk4xYldWdWRDQjNhV3hzSUdKbElHUmxabWx1WldRZ1luVjBJRzV2ZENCbWRXeHNlVnh1WEhRdkx5QnBibWwwYVdGc2FYcGxaQzRnVTJsdVkyVWdkMlVnYTI1dmR5QjNaU2R5WlNCcGJpQkRhSEp2YldVc0lIZGxKMnhzSUdwMWMzUWdaR1YwWldOMElIUm9hWE1nWTJGelpWeHVYSFF2THlCbGVIQnNhV05wZEd4NVhHNWNkR2xtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUIzYVc1a2IzY3VjSEp2WTJWemN5QW1KaUFvZDJsdVpHOTNMbkJ5YjJObGMzTXVkSGx3WlNBOVBUMGdKM0psYm1SbGNtVnlKeUI4ZkNCM2FXNWtiM2N1Y0hKdlkyVnpjeTVmWDI1M2FuTXBLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUnlkV1U3WEc1Y2RIMWNibHh1WEhRdkx5QkpiblJsY201bGRDQkZlSEJzYjNKbGNpQmhibVFnUldSblpTQmtieUJ1YjNRZ2MzVndjRzl5ZENCamIyeHZjbk11WEc1Y2RHbG1JQ2gwZVhCbGIyWWdibUYyYVdkaGRHOXlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJ1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwSUNZbUlHNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXVkRzlNYjNkbGNrTmhjMlVvS1M1dFlYUmphQ2d2S0dWa1oyVjhkSEpwWkdWdWRDbGNYQzhvWEZ4a0t5a3ZLU2tnZTF4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVnh1WEc1Y2RDOHZJRWx6SUhkbFltdHBkRDhnYUhSMGNEb3ZMM04wWVdOcmIzWmxjbVpzYjNjdVkyOXRMMkV2TVRZME5UazJNRFl2TXpjMk56Y3pYRzVjZEM4dklHUnZZM1Z0Wlc1MElHbHpJSFZ1WkdWbWFXNWxaQ0JwYmlCeVpXRmpkQzF1WVhScGRtVTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzltWVdObFltOXZheTl5WldGamRDMXVZWFJwZG1VdmNIVnNiQzh4TmpNeVhHNWNkSEpsZEhWeWJpQW9kSGx3Wlc5bUlHUnZZM1Z0Wlc1MElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RZ0ppWWdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExuTjBlV3hsSUNZbUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEM1emRIbHNaUzVYWldKcmFYUkJjSEJsWVhKaGJtTmxLU0I4ZkZ4dVhIUmNkQzh2SUVseklHWnBjbVZpZFdjL0lHaDBkSEE2THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5aEx6TTVPREV5TUM4ek56WTNOek5jYmx4MFhIUW9kSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2QybHVaRzkzTG1OdmJuTnZiR1VnSmlZZ0tIZHBibVJ2ZHk1amIyNXpiMnhsTG1acGNtVmlkV2NnZkh3Z0tIZHBibVJ2ZHk1amIyNXpiMnhsTG1WNFkyVndkR2x2YmlBbUppQjNhVzVrYjNjdVkyOXVjMjlzWlM1MFlXSnNaU2twS1NCOGZGeHVYSFJjZEM4dklFbHpJR1pwY21WbWIzZ2dQajBnZGpNeFAxeHVYSFJjZEM4dklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012Vkc5dmJITXZWMlZpWDBOdmJuTnZiR1VqVTNSNWJHbHVaMTl0WlhOellXZGxjMXh1WEhSY2RDaDBlWEJsYjJZZ2JtRjJhV2RoZEc5eUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBJQ1ltSUc1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RdWRHOU1iM2RsY2tOaGMyVW9LUzV0WVhSamFDZ3ZabWx5WldadmVGeGNMeWhjWEdRcktTOHBJQ1ltSUhCaGNuTmxTVzUwS0ZKbFowVjRjQzRrTVN3Z01UQXBJRDQ5SURNeEtTQjhmRnh1WEhSY2RDOHZJRVJ2ZFdKc1pTQmphR1ZqYXlCM1pXSnJhWFFnYVc0Z2RYTmxja0ZuWlc1MElHcDFjM1FnYVc0Z1kyRnpaU0IzWlNCaGNtVWdhVzRnWVNCM2IzSnJaWEpjYmx4MFhIUW9kSGx3Wlc5bUlHNWhkbWxuWVhSdmNpQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQ0FtSmlCdVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MExuUnZURzkzWlhKRFlYTmxLQ2t1YldGMFkyZ29MMkZ3Y0d4bGQyVmlhMmwwWEZ3dktGeGNaQ3NwTHlrcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOdmJHOXlhWHBsSUd4dlp5QmhjbWQxYldWdWRITWdhV1lnWlc1aFlteGxaQzVjYmlBcVhHNGdLaUJBWVhCcElIQjFZbXhwWTF4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUdadmNtMWhkRUZ5WjNNb1lYSm5jeWtnZTF4dVhIUmhjbWR6V3pCZElEMGdLSFJvYVhNdWRYTmxRMjlzYjNKeklEOGdKeVZqSnlBNklDY25LU0FyWEc1Y2RGeDBkR2hwY3k1dVlXMWxjM0JoWTJVZ0sxeHVYSFJjZENoMGFHbHpMblZ6WlVOdmJHOXljeUEvSUNjZ0pXTW5JRG9nSnlBbktTQXJYRzVjZEZ4MFlYSm5jMXN3WFNBclhHNWNkRngwS0hSb2FYTXVkWE5sUTI5c2IzSnpJRDhnSnlWaklDY2dPaUFuSUNjcElDdGNibHgwWEhRbkt5Y2dLeUJ0YjJSMWJHVXVaWGh3YjNKMGN5NW9kVzFoYm1sNlpTaDBhR2x6TG1ScFptWXBPMXh1WEc1Y2RHbG1JQ2doZEdocGN5NTFjMlZEYjJ4dmNuTXBJSHRjYmx4MFhIUnlaWFIxY200N1hHNWNkSDFjYmx4dVhIUmpiMjV6ZENCaklEMGdKMk52Ykc5eU9pQW5JQ3NnZEdocGN5NWpiMnh2Y2p0Y2JseDBZWEpuY3k1emNHeHBZMlVvTVN3Z01Dd2dZeXdnSjJOdmJHOXlPaUJwYm1obGNtbDBKeWs3WEc1Y2JseDBMeThnVkdobElHWnBibUZzSUZ3aUpXTmNJaUJwY3lCemIyMWxkMmhoZENCMGNtbGphM2tzSUdKbFkyRjFjMlVnZEdobGNtVWdZMjkxYkdRZ1ltVWdiM1JvWlhKY2JseDBMeThnWVhKbmRXMWxiblJ6SUhCaGMzTmxaQ0JsYVhSb1pYSWdZbVZtYjNKbElHOXlJR0ZtZEdWeUlIUm9aU0FsWXl3Z2MyOGdkMlVnYm1WbFpDQjBiMXh1WEhRdkx5Qm1hV2QxY21VZ2IzVjBJSFJvWlNCamIzSnlaV04wSUdsdVpHVjRJSFJ2SUdsdWMyVnlkQ0IwYUdVZ1ExTlRJR2x1ZEc5Y2JseDBiR1YwSUdsdVpHVjRJRDBnTUR0Y2JseDBiR1YwSUd4aGMzUkRJRDBnTUR0Y2JseDBZWEpuYzFzd1hTNXlaWEJzWVdObEtDOGxXMkV0ZWtFdFdpVmRMMmNzSUcxaGRHTm9JRDArSUh0Y2JseDBYSFJwWmlBb2JXRjBZMmdnUFQwOUlDY2xKU2NwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjZEZ4MGFXNWtaWGdyS3p0Y2JseDBYSFJwWmlBb2JXRjBZMmdnUFQwOUlDY2xZeWNwSUh0Y2JseDBYSFJjZEM4dklGZGxJRzl1YkhrZ1lYSmxJR2x1ZEdWeVpYTjBaV1FnYVc0Z2RHaGxJQ3BzWVhOMEtpQWxZMXh1WEhSY2RGeDBMeThnS0hSb1pTQjFjMlZ5SUcxaGVTQm9ZWFpsSUhCeWIzWnBaR1ZrSUhSb1pXbHlJRzkzYmlsY2JseDBYSFJjZEd4aGMzUkRJRDBnYVc1a1pYZzdYRzVjZEZ4MGZWeHVYSFI5S1R0Y2JseHVYSFJoY21kekxuTndiR2xqWlNoc1lYTjBReXdnTUN3Z1l5azdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1NXNTJiMnRsY3lCZ1kyOXVjMjlzWlM1a1pXSjFaeWdwWUNCM2FHVnVJR0YyWVdsc1lXSnNaUzVjYmlBcUlFNXZMVzl3SUhkb1pXNGdZR052Ym5OdmJHVXVaR1ZpZFdkZ0lHbHpJRzV2ZENCaElGd2lablZ1WTNScGIyNWNJaTVjYmlBcUlFbG1JR0JqYjI1emIyeGxMbVJsWW5WbllDQnBjeUJ1YjNRZ1lYWmhhV3hoWW14bExDQm1ZV3hzY3lCaVlXTnJYRzRnS2lCMGJ5QmdZMjl1YzI5c1pTNXNiMmRnTGx4dUlDcGNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYm1WNGNHOXlkSE11Ykc5bklEMGdZMjl1YzI5c1pTNWtaV0oxWnlCOGZDQmpiMjV6YjJ4bExteHZaeUI4ZkNBb0tDa2dQVDRnZTMwcE8xeHVYRzR2S2lwY2JpQXFJRk5oZG1VZ1lHNWhiV1Z6Y0dGalpYTmdMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnVZVzFsYzNCaFkyVnpYRzRnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2MyRjJaU2h1WVcxbGMzQmhZMlZ6S1NCN1hHNWNkSFJ5ZVNCN1hHNWNkRngwYVdZZ0tHNWhiV1Z6Y0dGalpYTXBJSHRjYmx4MFhIUmNkR1Y0Y0c5eWRITXVjM1J2Y21GblpTNXpaWFJKZEdWdEtDZGtaV0oxWnljc0lHNWhiV1Z6Y0dGalpYTXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSbGVIQnZjblJ6TG5OMGIzSmhaMlV1Y21WdGIzWmxTWFJsYlNnblpHVmlkV2NuS1R0Y2JseDBYSFI5WEc1Y2RIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNWNkRngwTHk4Z1UzZGhiR3h2ZDF4dVhIUmNkQzh2SUZoWVdDQW9RRkZwZUMwcElITm9iM1ZzWkNCM1pTQmlaU0JzYjJkbmFXNW5JSFJvWlhObFAxeHVYSFI5WEc1OVhHNWNiaThxS2x4dUlDb2dURzloWkNCZ2JtRnRaWE53WVdObGMyQXVYRzRnS2x4dUlDb2dRSEpsZEhWeWJpQjdVM1J5YVc1bmZTQnlaWFIxY201eklIUm9aU0J3Y21WMmFXOTFjMng1SUhCbGNuTnBjM1JsWkNCa1pXSjFaeUJ0YjJSbGMxeHVJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUd4dllXUW9LU0I3WEc1Y2RHeGxkQ0J5TzF4dVhIUjBjbmtnZTF4dVhIUmNkSElnUFNCbGVIQnZjblJ6TG5OMGIzSmhaMlV1WjJWMFNYUmxiU2duWkdWaWRXY25LVHRjYmx4MGZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JseDBYSFF2THlCVGQyRnNiRzkzWEc1Y2RGeDBMeThnV0ZoWUlDaEFVV2w0TFNrZ2MyaHZkV3hrSUhkbElHSmxJR3h2WjJkcGJtY2dkR2hsYzJVL1hHNWNkSDFjYmx4dVhIUXZMeUJKWmlCa1pXSjFaeUJwYzI0bmRDQnpaWFFnYVc0Z1RGTXNJR0Z1WkNCM1pTZHlaU0JwYmlCRmJHVmpkSEp2Yml3Z2RISjVJSFJ2SUd4dllXUWdKRVJGUWxWSFhHNWNkR2xtSUNnaGNpQW1KaUIwZVhCbGIyWWdjSEp2WTJWemN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdKMlZ1ZGljZ2FXNGdjSEp2WTJWemN5a2dlMXh1WEhSY2RISWdQU0J3Y205alpYTnpMbVZ1ZGk1RVJVSlZSenRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJ5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRXh2WTJGc2MzUnZjbUZuWlNCaGRIUmxiWEIwY3lCMGJ5QnlaWFIxY200Z2RHaGxJR3h2WTJGc2MzUnZjbUZuWlM1Y2JpQXFYRzRnS2lCVWFHbHpJR2x6SUc1bFkyVnpjMkZ5ZVNCaVpXTmhkWE5sSUhOaFptRnlhU0IwYUhKdmQzTmNiaUFxSUhkb1pXNGdZU0IxYzJWeUlHUnBjMkZpYkdWeklHTnZiMnRwWlhNdmJHOWpZV3h6ZEc5eVlXZGxYRzRnS2lCaGJtUWdlVzkxSUdGMGRHVnRjSFFnZEc4Z1lXTmpaWE56SUdsMExseHVJQ3BjYmlBcUlFQnlaWFIxY200Z2UweHZZMkZzVTNSdmNtRm5aWDFjYmlBcUlFQmhjR2tnY0hKcGRtRjBaVnh1SUNvdlhHNWNibVoxYm1OMGFXOXVJR3h2WTJGc2MzUnZjbUZuWlNncElIdGNibHgwZEhKNUlIdGNibHgwWEhRdkx5QlVWazFNUzJsMElDaEJjSEJzWlNCVVZpQktVeUJTZFc1MGFXMWxLU0JrYjJWeklHNXZkQ0JvWVhabElHRWdkMmx1Wkc5M0lHOWlhbVZqZEN3Z2FuVnpkQ0JzYjJOaGJGTjBiM0poWjJVZ2FXNGdkR2hsSUdkc2IySmhiQ0JqYjI1MFpYaDBYRzVjZEZ4MEx5OGdWR2hsSUVKeWIzZHpaWElnWVd4emJ5Qm9ZWE1nYkc5allXeFRkRzl5WVdkbElHbHVJSFJvWlNCbmJHOWlZV3dnWTI5dWRHVjRkQzVjYmx4MFhIUnlaWFIxY200Z2JHOWpZV3hUZEc5eVlXZGxPMXh1WEhSOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dVhIUmNkQzh2SUZOM1lXeHNiM2RjYmx4MFhIUXZMeUJZV0ZnZ0tFQlJhWGd0S1NCemFHOTFiR1FnZDJVZ1ltVWdiRzluWjJsdVp5QjBhR1Z6WlQ5Y2JseDBmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZZMjl0Ylc5dUp5a29aWGh3YjNKMGN5azdYRzVjYm1OdmJuTjBJSHRtYjNKdFlYUjBaWEp6ZlNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dVhHNHZLaXBjYmlBcUlFMWhjQ0FsYWlCMGJ5QmdTbE5QVGk1emRISnBibWRwWm5rb0tXQXNJSE5wYm1ObElHNXZJRmRsWWlCSmJuTndaV04wYjNKeklHUnZJSFJvWVhRZ1lua2daR1ZtWVhWc2RDNWNiaUFxTDF4dVhHNW1iM0p0WVhSMFpYSnpMbW9nUFNCbWRXNWpkR2x2YmlBb2Rpa2dlMXh1WEhSMGNua2dlMXh1WEhSY2RISmxkSFZ5YmlCS1UwOU9Mbk4wY21sdVoybG1lU2gyS1R0Y2JseDBmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNibHgwWEhSeVpYUjFjbTRnSjF0VmJtVjRjR1ZqZEdWa1NsTlBUbEJoY25ObFJYSnliM0pkT2lBbklDc2daWEp5YjNJdWJXVnpjMkZuWlR0Y2JseDBmVnh1ZlR0Y2JpSXNJbHh1THlvcVhHNGdLaUJVYUdseklHbHpJSFJvWlNCamIyMXRiMjRnYkc5bmFXTWdabTl5SUdKdmRHZ2dkR2hsSUU1dlpHVXVhbk1nWVc1a0lIZGxZaUJpY205M2MyVnlYRzRnS2lCcGJYQnNaVzFsYm5SaGRHbHZibk1nYjJZZ1lHUmxZblZuS0NsZ0xseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlITmxkSFZ3S0dWdWRpa2dlMXh1WEhSamNtVmhkR1ZFWldKMVp5NWtaV0oxWnlBOUlHTnlaV0YwWlVSbFluVm5PMXh1WEhSamNtVmhkR1ZFWldKMVp5NWtaV1poZFd4MElEMGdZM0psWVhSbFJHVmlkV2M3WEc1Y2RHTnlaV0YwWlVSbFluVm5MbU52WlhKalpTQTlJR052WlhKalpUdGNibHgwWTNKbFlYUmxSR1ZpZFdjdVpHbHpZV0pzWlNBOUlHUnBjMkZpYkdVN1hHNWNkR055WldGMFpVUmxZblZuTG1WdVlXSnNaU0E5SUdWdVlXSnNaVHRjYmx4MFkzSmxZWFJsUkdWaWRXY3VaVzVoWW14bFpDQTlJR1Z1WVdKc1pXUTdYRzVjZEdOeVpXRjBaVVJsWW5WbkxtaDFiV0Z1YVhwbElEMGdjbVZ4ZFdseVpTZ25iWE1uS1R0Y2JseDBZM0psWVhSbFJHVmlkV2N1WkdWemRISnZlU0E5SUdSbGMzUnliM2s3WEc1Y2JseDBUMkpxWldOMExtdGxlWE1vWlc1MktTNW1iM0pGWVdOb0tHdGxlU0E5UGlCN1hHNWNkRngwWTNKbFlYUmxSR1ZpZFdkYmEyVjVYU0E5SUdWdWRsdHJaWGxkTzF4dVhIUjlLVHRjYmx4dVhIUXZLaXBjYmx4MEtpQlVhR1VnWTNWeWNtVnVkR3g1SUdGamRHbDJaU0JrWldKMVp5QnRiMlJsSUc1aGJXVnpMQ0JoYm1RZ2JtRnRaWE1nZEc4Z2MydHBjQzVjYmx4MEtpOWNibHh1WEhSamNtVmhkR1ZFWldKMVp5NXVZVzFsY3lBOUlGdGRPMXh1WEhSamNtVmhkR1ZFWldKMVp5NXphMmx3Y3lBOUlGdGRPMXh1WEc1Y2RDOHFLbHh1WEhRcUlFMWhjQ0J2WmlCemNHVmphV0ZzSUZ3aUpXNWNJaUJvWVc1a2JHbHVaeUJtZFc1amRHbHZibk1zSUdadmNpQjBhR1VnWkdWaWRXY2dYQ0ptYjNKdFlYUmNJaUJoY21kMWJXVnVkQzVjYmx4MEtseHVYSFFxSUZaaGJHbGtJR3RsZVNCdVlXMWxjeUJoY21VZ1lTQnphVzVuYkdVc0lHeHZkMlZ5SUc5eUlIVndjR1Z5TFdOaGMyVWdiR1YwZEdWeUxDQnBMbVV1SUZ3aWJsd2lJR0Z1WkNCY0lrNWNJaTVjYmx4MEtpOWNibHgwWTNKbFlYUmxSR1ZpZFdjdVptOXliV0YwZEdWeWN5QTlJSHQ5TzF4dVhHNWNkQzhxS2x4dVhIUXFJRk5sYkdWamRITWdZU0JqYjJ4dmNpQm1iM0lnWVNCa1pXSjFaeUJ1WVcxbGMzQmhZMlZjYmx4MEtpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JtRnRaWE53WVdObElGUm9aU0J1WVcxbGMzQmhZMlVnYzNSeWFXNW5JR1p2Y2lCMGFHVWdabTl5SUhSb1pTQmtaV0oxWnlCcGJuTjBZVzVqWlNCMGJ5QmlaU0JqYjJ4dmNtVmtYRzVjZENvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZkZOMGNtbHVaMzBnUVc0Z1FVNVRTU0JqYjJ4dmNpQmpiMlJsSUdadmNpQjBhR1VnWjJsMlpXNGdibUZ0WlhOd1lXTmxYRzVjZENvZ1FHRndhU0J3Y21sMllYUmxYRzVjZENvdlhHNWNkR1oxYm1OMGFXOXVJSE5sYkdWamRFTnZiRzl5S0c1aGJXVnpjR0ZqWlNrZ2UxeHVYSFJjZEd4bGRDQm9ZWE5vSUQwZ01EdGNibHh1WEhSY2RHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dibUZ0WlhOd1lXTmxMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNWNkRngwWEhSb1lYTm9JRDBnS0Nob1lYTm9JRHc4SURVcElDMGdhR0Z6YUNrZ0t5QnVZVzFsYzNCaFkyVXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JseDBYSFJjZEdoaGMyZ2dmRDBnTURzZ0x5OGdRMjl1ZG1WeWRDQjBieUF6TW1KcGRDQnBiblJsWjJWeVhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR055WldGMFpVUmxZblZuTG1OdmJHOXljMXROWVhSb0xtRmljeWhvWVhOb0tTQWxJR055WldGMFpVUmxZblZuTG1OdmJHOXljeTVzWlc1bmRHaGRPMXh1WEhSOVhHNWNkR055WldGMFpVUmxZblZuTG5ObGJHVmpkRU52Ykc5eUlEMGdjMlZzWldOMFEyOXNiM0k3WEc1Y2JseDBMeW9xWEc1Y2RDb2dRM0psWVhSbElHRWdaR1ZpZFdkblpYSWdkMmwwYUNCMGFHVWdaMmwyWlc0Z1lHNWhiV1Z6Y0dGalpXQXVYRzVjZENwY2JseDBLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdibUZ0WlhOd1lXTmxYRzVjZENvZ1FISmxkSFZ5YmlCN1JuVnVZM1JwYjI1OVhHNWNkQ29nUUdGd2FTQndkV0pzYVdOY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z1kzSmxZWFJsUkdWaWRXY29ibUZ0WlhOd1lXTmxLU0I3WEc1Y2RGeDBiR1YwSUhCeVpYWlVhVzFsTzF4dVhIUmNkR3hsZENCbGJtRmliR1ZQZG1WeWNtbGtaU0E5SUc1MWJHdzdYRzVjZEZ4MGJHVjBJRzVoYldWemNHRmpaWE5EWVdOb1pUdGNibHgwWEhSc1pYUWdaVzVoWW14bFpFTmhZMmhsTzF4dVhHNWNkRngwWm5WdVkzUnBiMjRnWkdWaWRXY29MaTR1WVhKbmN5a2dlMXh1WEhSY2RGeDBMeThnUkdsellXSnNaV1EvWEc1Y2RGeDBYSFJwWmlBb0lXUmxZblZuTG1WdVlXSnNaV1FwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSamIyNXpkQ0J6Wld4bUlEMGdaR1ZpZFdjN1hHNWNibHgwWEhSY2RDOHZJRk5sZENCZ1pHbG1abUFnZEdsdFpYTjBZVzF3WEc1Y2RGeDBYSFJqYjI1emRDQmpkWEp5SUQwZ1RuVnRZbVZ5S0c1bGR5QkVZWFJsS0NrcE8xeHVYSFJjZEZ4MFkyOXVjM1FnYlhNZ1BTQmpkWEp5SUMwZ0tIQnlaWFpVYVcxbElIeDhJR04xY25JcE8xeHVYSFJjZEZ4MGMyVnNaaTVrYVdabUlEMGdiWE03WEc1Y2RGeDBYSFJ6Wld4bUxuQnlaWFlnUFNCd2NtVjJWR2x0WlR0Y2JseDBYSFJjZEhObGJHWXVZM1Z5Y2lBOUlHTjFjbkk3WEc1Y2RGeDBYSFJ3Y21WMlZHbHRaU0E5SUdOMWNuSTdYRzVjYmx4MFhIUmNkR0Z5WjNOYk1GMGdQU0JqY21WaGRHVkVaV0oxWnk1amIyVnlZMlVvWVhKbmMxc3dYU2s3WEc1Y2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ1lYSm5jMXN3WFNBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmx4MFhIUmNkRngwTHk4Z1FXNTVkR2hwYm1jZ1pXeHpaU0JzWlhRbmN5QnBibk53WldOMElIZHBkR2dnSlU5Y2JseDBYSFJjZEZ4MFlYSm5jeTUxYm5Ob2FXWjBLQ2NsVHljcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJCY0hCc2VTQmhibmtnWUdadmNtMWhkSFJsY25OZ0lIUnlZVzV6Wm05eWJXRjBhVzl1YzF4dVhIUmNkRngwYkdWMElHbHVaR1Y0SUQwZ01EdGNibHgwWEhSY2RHRnlaM05iTUYwZ1BTQmhjbWR6V3pCZExuSmxjR3hoWTJVb0x5VW9XMkV0ZWtFdFdpVmRLUzluTENBb2JXRjBZMmdzSUdadmNtMWhkQ2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUXZMeUJKWmlCM1pTQmxibU52ZFc1MFpYSWdZVzRnWlhOallYQmxaQ0FsSUhSb1pXNGdaRzl1SjNRZ2FXNWpjbVZoYzJVZ2RHaGxJR0Z5Y21GNUlHbHVaR1Y0WEc1Y2RGeDBYSFJjZEdsbUlDaHRZWFJqYUNBOVBUMGdKeVVsSnlrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQW5KU2M3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGFXNWtaWGdyS3p0Y2JseDBYSFJjZEZ4MFkyOXVjM1FnWm05eWJXRjBkR1Z5SUQwZ1kzSmxZWFJsUkdWaWRXY3VabTl5YldGMGRHVnljMXRtYjNKdFlYUmRPMXh1WEhSY2RGeDBYSFJwWmlBb2RIbHdaVzltSUdadmNtMWhkSFJsY2lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dVhIUmNkRngwWEhSY2RHTnZibk4wSUhaaGJDQTlJR0Z5WjNOYmFXNWtaWGhkTzF4dVhIUmNkRngwWEhSY2RHMWhkR05vSUQwZ1ptOXliV0YwZEdWeUxtTmhiR3dvYzJWc1ppd2dkbUZzS1R0Y2JseHVYSFJjZEZ4MFhIUmNkQzh2SUU1dmR5QjNaU0J1WldWa0lIUnZJSEpsYlc5MlpTQmdZWEpuYzF0cGJtUmxlRjFnSUhOcGJtTmxJR2wwSjNNZ2FXNXNhVzVsWkNCcGJpQjBhR1VnWUdadmNtMWhkR0JjYmx4MFhIUmNkRngwWEhSaGNtZHpMbk53YkdsalpTaHBibVJsZUN3Z01TazdYRzVjZEZ4MFhIUmNkRngwYVc1a1pYZ3RMVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSeVpYUjFjbTRnYldGMFkyZzdYRzVjZEZ4MFhIUjlLVHRjYmx4dVhIUmNkRngwTHk4Z1FYQndiSGtnWlc1MkxYTndaV05wWm1saklHWnZjbTFoZEhScGJtY2dLR052Ykc5eWN5d2daWFJqTGlsY2JseDBYSFJjZEdOeVpXRjBaVVJsWW5WbkxtWnZjbTFoZEVGeVozTXVZMkZzYkNoelpXeG1MQ0JoY21kektUdGNibHh1WEhSY2RGeDBZMjl1YzNRZ2JHOW5SbTRnUFNCelpXeG1MbXh2WnlCOGZDQmpjbVZoZEdWRVpXSjFaeTVzYjJjN1hHNWNkRngwWEhSc2IyZEdiaTVoY0hCc2VTaHpaV3htTENCaGNtZHpLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUmtaV0oxWnk1dVlXMWxjM0JoWTJVZ1BTQnVZVzFsYzNCaFkyVTdYRzVjZEZ4MFpHVmlkV2N1ZFhObFEyOXNiM0p6SUQwZ1kzSmxZWFJsUkdWaWRXY3VkWE5sUTI5c2IzSnpLQ2s3WEc1Y2RGeDBaR1ZpZFdjdVkyOXNiM0lnUFNCamNtVmhkR1ZFWldKMVp5NXpaV3hsWTNSRGIyeHZjaWh1WVcxbGMzQmhZMlVwTzF4dVhIUmNkR1JsWW5WbkxtVjRkR1Z1WkNBOUlHVjRkR1Z1WkR0Y2JseDBYSFJrWldKMVp5NWtaWE4wY205NUlEMGdZM0psWVhSbFJHVmlkV2N1WkdWemRISnZlVHNnTHk4Z1dGaFlJRlJsYlhCdmNtRnllUzRnVjJsc2JDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUcxaGFtOXlJSEpsYkdWaGMyVXVYRzVjYmx4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWkdWaWRXY3NJQ2RsYm1GaWJHVmtKeXdnZTF4dVhIUmNkRngwWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmx4MFhIUmNkR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc1Y2RGeDBYSFJuWlhRNklDZ3BJRDArSUh0Y2JseDBYSFJjZEZ4MGFXWWdLR1Z1WVdKc1pVOTJaWEp5YVdSbElDRTlQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR1Z1WVdKc1pVOTJaWEp5YVdSbE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkR2xtSUNodVlXMWxjM0JoWTJWelEyRmphR1VnSVQwOUlHTnlaV0YwWlVSbFluVm5MbTVoYldWemNHRmpaWE1wSUh0Y2JseDBYSFJjZEZ4MFhIUnVZVzFsYzNCaFkyVnpRMkZqYUdVZ1BTQmpjbVZoZEdWRVpXSjFaeTV1WVcxbGMzQmhZMlZ6TzF4dVhIUmNkRngwWEhSY2RHVnVZV0pzWldSRFlXTm9aU0E5SUdOeVpXRjBaVVJsWW5WbkxtVnVZV0pzWldRb2JtRnRaWE53WVdObEtUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJsYm1GaWJHVmtRMkZqYUdVN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MGMyVjBPaUIySUQwK0lIdGNibHgwWEhSY2RGeDBaVzVoWW14bFQzWmxjbkpwWkdVZ1BTQjJPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBMeThnUlc1MkxYTndaV05wWm1saklHbHVhWFJwWVd4cGVtRjBhVzl1SUd4dloybGpJR1p2Y2lCa1pXSjFaeUJwYm5OMFlXNWpaWE5jYmx4MFhIUnBaaUFvZEhsd1pXOW1JR055WldGMFpVUmxZblZuTG1sdWFYUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwWEhSY2RHTnlaV0YwWlVSbFluVm5MbWx1YVhRb1pHVmlkV2NwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQmtaV0oxWnp0Y2JseDBmVnh1WEc1Y2RHWjFibU4wYVc5dUlHVjRkR1Z1WkNodVlXMWxjM0JoWTJVc0lHUmxiR2x0YVhSbGNpa2dlMXh1WEhSY2RHTnZibk4wSUc1bGQwUmxZblZuSUQwZ1kzSmxZWFJsUkdWaWRXY29kR2hwY3k1dVlXMWxjM0JoWTJVZ0t5QW9kSGx3Wlc5bUlHUmxiR2x0YVhSbGNpQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QW5PaWNnT2lCa1pXeHBiV2wwWlhJcElDc2dibUZ0WlhOd1lXTmxLVHRjYmx4MFhIUnVaWGRFWldKMVp5NXNiMmNnUFNCMGFHbHpMbXh2Wnp0Y2JseDBYSFJ5WlhSMWNtNGdibVYzUkdWaWRXYzdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBLaUJGYm1GaWJHVnpJR0VnWkdWaWRXY2diVzlrWlNCaWVTQnVZVzFsYzNCaFkyVnpMaUJVYUdseklHTmhiaUJwYm1Oc2RXUmxJRzF2WkdWelhHNWNkQ29nYzJWd1lYSmhkR1ZrSUdKNUlHRWdZMjlzYjI0Z1lXNWtJSGRwYkdSallYSmtjeTVjYmx4MEtseHVYSFFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WVcxbGMzQmhZMlZ6WEc1Y2RDb2dRR0Z3YVNCd2RXSnNhV05jYmx4MEtpOWNibHgwWm5WdVkzUnBiMjRnWlc1aFlteGxLRzVoYldWemNHRmpaWE1wSUh0Y2JseDBYSFJqY21WaGRHVkVaV0oxWnk1ellYWmxLRzVoYldWemNHRmpaWE1wTzF4dVhIUmNkR055WldGMFpVUmxZblZuTG01aGJXVnpjR0ZqWlhNZ1BTQnVZVzFsYzNCaFkyVnpPMXh1WEc1Y2RGeDBZM0psWVhSbFJHVmlkV2N1Ym1GdFpYTWdQU0JiWFR0Y2JseDBYSFJqY21WaGRHVkVaV0oxWnk1emEybHdjeUE5SUZ0ZE8xeHVYRzVjZEZ4MGJHVjBJR2s3WEc1Y2RGeDBZMjl1YzNRZ2MzQnNhWFFnUFNBb2RIbHdaVzltSUc1aGJXVnpjR0ZqWlhNZ1BUMDlJQ2R6ZEhKcGJtY25JRDhnYm1GdFpYTndZV05sY3lBNklDY25LUzV6Y0d4cGRDZ3ZXMXhjY3l4ZEt5OHBPMXh1WEhSY2RHTnZibk4wSUd4bGJpQTlJSE53YkdsMExteGxibWQwYUR0Y2JseHVYSFJjZEdadmNpQW9hU0E5SURBN0lHa2dQQ0JzWlc0N0lHa3JLeWtnZTF4dVhIUmNkRngwYVdZZ0tDRnpjR3hwZEZ0cFhTa2dlMXh1WEhSY2RGeDBYSFF2THlCcFoyNXZjbVVnWlcxd2RIa2djM1J5YVc1bmMxeHVYSFJjZEZ4MFhIUmpiMjUwYVc1MVpUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBibUZ0WlhOd1lXTmxjeUE5SUhOd2JHbDBXMmxkTG5KbGNHeGhZMlVvTDF4Y0tpOW5MQ0FuTGlvL0p5azdYRzVjYmx4MFhIUmNkR2xtSUNodVlXMWxjM0JoWTJWeld6QmRJRDA5UFNBbkxTY3BJSHRjYmx4MFhIUmNkRngwWTNKbFlYUmxSR1ZpZFdjdWMydHBjSE11Y0hWemFDaHVaWGNnVW1WblJYaHdLQ2RlSnlBcklHNWhiV1Z6Y0dGalpYTXVjM1ZpYzNSeUtERXBJQ3NnSnlRbktTazdYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmpjbVZoZEdWRVpXSjFaeTV1WVcxbGN5NXdkWE5vS0c1bGR5QlNaV2RGZUhBb0oxNG5JQ3NnYm1GdFpYTndZV05sY3lBcklDY2tKeWtwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEM4cUtseHVYSFFxSUVScGMyRmliR1VnWkdWaWRXY2diM1YwY0hWMExseHVYSFFxWEc1Y2RDb2dRSEpsZEhWeWJpQjdVM1J5YVc1bmZTQnVZVzFsYzNCaFkyVnpYRzVjZENvZ1FHRndhU0J3ZFdKc2FXTmNibHgwS2k5Y2JseDBablZ1WTNScGIyNGdaR2x6WVdKc1pTZ3BJSHRjYmx4MFhIUmpiMjV6ZENCdVlXMWxjM0JoWTJWeklEMGdXMXh1WEhSY2RGeDBMaTR1WTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE11YldGd0tIUnZUbUZ0WlhOd1lXTmxLU3hjYmx4MFhIUmNkQzR1TG1OeVpXRjBaVVJsWW5WbkxuTnJhWEJ6TG0xaGNDaDBiMDVoYldWemNHRmpaU2t1YldGd0tHNWhiV1Z6Y0dGalpTQTlQaUFuTFNjZ0t5QnVZVzFsYzNCaFkyVXBYRzVjZEZ4MFhTNXFiMmx1S0Njc0p5azdYRzVjZEZ4MFkzSmxZWFJsUkdWaWRXY3VaVzVoWW14bEtDY25LVHRjYmx4MFhIUnlaWFIxY200Z2JtRnRaWE53WVdObGN6dGNibHgwZlZ4dVhHNWNkQzhxS2x4dVhIUXFJRkpsZEhWeWJuTWdkSEoxWlNCcFppQjBhR1VnWjJsMlpXNGdiVzlrWlNCdVlXMWxJR2x6SUdWdVlXSnNaV1FzSUdaaGJITmxJRzkwYUdWeWQybHpaUzVjYmx4MEtseHVYSFFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WVcxbFhHNWNkQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmx4MEtpQkFZWEJwSUhCMVlteHBZMXh1WEhRcUwxeHVYSFJtZFc1amRHbHZiaUJsYm1GaWJHVmtLRzVoYldVcElIdGNibHgwWEhScFppQW9ibUZ0WlZ0dVlXMWxMbXhsYm1kMGFDQXRJREZkSUQwOVBTQW5LaWNwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFJjZEgxY2JseHVYSFJjZEd4bGRDQnBPMXh1WEhSY2RHeGxkQ0JzWlc0N1hHNWNibHgwWEhSbWIzSWdLR2tnUFNBd0xDQnNaVzRnUFNCamNtVmhkR1ZFWldKMVp5NXphMmx3Y3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1WEhSY2RGeDBhV1lnS0dOeVpXRjBaVVJsWW5WbkxuTnJhWEJ6VzJsZExuUmxjM1FvYm1GdFpTa3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEdadmNpQW9hU0E5SURBc0lHeGxiaUE5SUdOeVpXRjBaVVJsWW5WbkxtNWhiV1Z6TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzVjZEZ4MFhIUnBaaUFvWTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE5iYVYwdWRHVnpkQ2h1WVcxbEtTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkSDFjYmx4dVhIUXZLaXBjYmx4MEtpQkRiMjUyWlhKMElISmxaMlY0Y0NCMGJ5QnVZVzFsYzNCaFkyVmNibHgwS2x4dVhIUXFJRUJ3WVhKaGJTQjdVbVZuUlhod2ZTQnlaV2Q0WlhCY2JseDBLaUJBY21WMGRYSnVJSHRUZEhKcGJtZDlJRzVoYldWemNHRmpaVnh1WEhRcUlFQmhjR2tnY0hKcGRtRjBaVnh1WEhRcUwxeHVYSFJtZFc1amRHbHZiaUIwYjA1aGJXVnpjR0ZqWlNoeVpXZGxlSEFwSUh0Y2JseDBYSFJ5WlhSMWNtNGdjbVZuWlhod0xuUnZVM1J5YVc1bktDbGNibHgwWEhSY2RDNXpkV0p6ZEhKcGJtY29NaXdnY21WblpYaHdMblJ2VTNSeWFXNW5LQ2t1YkdWdVozUm9JQzBnTWlsY2JseDBYSFJjZEM1eVpYQnNZV05sS0M5Y1hDNWNYQ3BjWEQ4a0x5d2dKeW9uS1R0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRcUlFTnZaWEpqWlNCZ2RtRnNZQzVjYmx4MEtseHVYSFFxSUVCd1lYSmhiU0I3VFdsNFpXUjlJSFpoYkZ4dVhIUXFJRUJ5WlhSMWNtNGdlMDFwZUdWa2ZWeHVYSFFxSUVCaGNHa2djSEpwZG1GMFpWeHVYSFFxTDF4dVhIUm1kVzVqZEdsdmJpQmpiMlZ5WTJVb2RtRnNLU0I3WEc1Y2RGeDBhV1lnS0haaGJDQnBibk4wWVc1alpXOW1JRVZ5Y205eUtTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RtRnNMbk4wWVdOcklIeDhJSFpoYkM1dFpYTnpZV2RsTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2RtRnNPMXh1WEhSOVhHNWNibHgwTHlvcVhHNWNkQ29nV0ZoWUlFUlBJRTVQVkNCVlUwVXVJRlJvYVhNZ2FYTWdZU0IwWlcxd2IzSmhjbmtnYzNSMVlpQm1kVzVqZEdsdmJpNWNibHgwS2lCWVdGZ2dTWFFnVjBsTVRDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUcxaGFtOXlJSEpsYkdWaGMyVXVYRzVjZENvdlhHNWNkR1oxYm1OMGFXOXVJR1JsYzNSeWIza29LU0I3WEc1Y2RGeDBZMjl1YzI5c1pTNTNZWEp1S0NkSmJuTjBZVzVqWlNCdFpYUm9iMlFnWUdSbFluVm5MbVJsYzNSeWIza29LV0FnYVhNZ1pHVndjbVZqWVhSbFpDQmhibVFnYm04Z2JHOXVaMlZ5SUdSdlpYTWdZVzU1ZEdocGJtY3VJRWwwSUhkcGJHd2dZbVVnY21WdGIzWmxaQ0JwYmlCMGFHVWdibVY0ZENCdFlXcHZjaUIyWlhKemFXOXVJRzltSUdCa1pXSjFaMkF1SnlrN1hHNWNkSDFjYmx4dVhIUmpjbVZoZEdWRVpXSjFaeTVsYm1GaWJHVW9ZM0psWVhSbFJHVmlkV2N1Ykc5aFpDZ3BLVHRjYmx4dVhIUnlaWFIxY200Z1kzSmxZWFJsUkdWaWRXYzdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2MyVjBkWEE3WEc0aUxDSnBiWEJ2Y25RZ2FXOHNJSHNnVTI5amEyVjBJSDBnWm5KdmJTQW5jMjlqYTJWMExtbHZMV05zYVdWdWRDYzdYRzVjYm1sdGNHOXlkQ0JDYjI5MFQzQjBhVzl1SUdaeWIyMGdKMk52YlcxdmJpOUNiMjkwVDNCMGFXOXVKenRjYm1sdGNHOXlkQ0JUWlhGMVpXNWpaU0JtY205dElDZGpiMjF0YjI0dlUyVnhkV1Z1WTJVbk8xeHVhVzF3YjNKMElHTnZibVlnWm5KdmJTQW5ZMjl0Ylc5dUwyTnZibVluTzF4dWFXMXdiM0owSUdSbFptbHVaU0JtY205dElDZGpiMjF0YjI0dlpHVm1hVzVsSnp0Y2JseHVhVzF3YjNKMElGZHpRMnhwWlc1MFZHOUJjR2xTWlhGMVpYTjBRV04wYVc5dWN5Qm1jbTl0SUNkaGNHa3ZZV04wYVc5dWN5OTNjeTloY0dsVWIxTmxjblpsY2xKbGNYVmxjM1FuTzF4dWFXMXdiM0owSUZkelUyVnlkbVZ5Vkc5QmNHbENjbTloWkdOaGMzUkJZM1JwYjI0Z1puSnZiU0FuWVhCcEwyRmpkR2x2Ym5NdmQzTXZjMlZ5ZG1WeVZHOUJjR2xDY21Ga1kyRnpkQ2M3WEc1cGJYQnZjblFnVjNOVFpYSjJaWEpVYjBGd2FVVnRhWFJCWTNScGIyNGdabkp2YlNBbllYQnBMMkZqZEdsdmJuTXZkM012YzJWeWRtVnlWRzlCY0dsRmJXbDBKenRjYm1sdGNHOXlkQ0JCY0dsVGRHRjBaU0JtY205dElDZGhjR2t2YzNSdmNtVW5PMXh1YVcxd2IzSjBJRmR6UVhCcFYyOXlhMlZ5SUdaeWIyMGdKMkZ3YVM5M2N5NWhjR2t1ZDI5eWEyVnlKenRjYmx4dWFXMXdiM0owSUdGd2FWTjBiM0psSUdaeWIyMGdKeTR2YzNSdmNtVXZZWEJwVTNSdmNtVW5PMXh1WEc1MGVYQmxJRk4wYjNKbElEMGdZVzU1TzF4dVhHNHZMeUJVVDBSUE9pRGpnNi9qZzd6amdxdmpnN3pqZ2EvbHJaRGpnNi9qZzd6amdxdmpnN3pqZ3BMbmxKL21pSkRqZ2FmamdZM2pnb3NvNDRPUjQ0T1Y0NEtwNDRPODQ0T2U0NE96NDRLNTVaQ1I1TGlLS1Z4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdWM01nZTF4dUlDQnBaRG9nYzNSeWFXNW5PMXh1SUNCM1pXSlhiM0pyWlhJNklGZHpRWEJwVjI5eWEyVnlPMXh1SUNCemRHOXlaWE02SUhzZ1czTTZJSE4wY21sdVoxMDZJRk4wYjNKbElIMGdmQ0I3ZlNBOUlIdDlPMXh1SUNCcGIzTTZJSHNnVzNNNklITjBjbWx1WjEwNklGTnZZMnRsZENCOUlId2dlMzBnUFNCN2ZUdGNiaUFnYldWMGFHOWtjem9nZXlCYmN6b2djM1J5YVc1blhUb2dSblZ1WTNScGIyNGdmU0I4SUh0OUlEMGdlMzA3WEc0Z0lIQjFZbXhwWTBOaGJHeGlZV05yY3pvZ2V5QmJjem9nYzNSeWFXNW5YVG9nUm5WdVkzUnBiMjRnZlNCOElIdDlJRDBnZTMwN1hHNGdJSE4wWVhScFl5Qm5aWFFnYzJWeWRtVnlLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmpiMjVtTG1WdWRpQTlQVDBnWkdWbWFXNWxMa1JGVmtWTVQxQk5SVTVVSUh4OElHTnZibVl1Wlc1MklEMDlQU0JrWldacGJtVXVURTlEUVV4SVQxTlVJRDhnWkdWbWFXNWxMa1JGVmtWTVQxQk5SVTVVWDBSUFRVRkpUaUE2SUdSbFptbHVaUzVRVWs5RVZVTlVTVTlPWDBSUFRVRkpUanRjYmlBZ2ZWeHVJQ0J6ZEdGMGFXTWdaMlYwSUc5d2RHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdleUJtYjNKalpVNWxkem9nZEhKMVpTQjlPMXh1SUNCOVhHNGdJR052Ym5OMGNuVmpkRzl5S0hkbFlsZHZjbXRsY2pvZ1YzTkJjR2xYYjNKclpYSXBJSHRjYmlBZ0lDQjBhR2x6TG5WelpTQTlJSFJvYVhNdWRYTmxMbUpwYm1Rb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1MGRXNWxJRDBnZEdocGN5NTBkVzVsTG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NTBkVzVsWkNBOUlIUm9hWE11ZEhWdVpXUXVZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TG5WdWRIVnVaU0E5SUhSb2FYTXVkVzUwZFc1bExtSnBibVFvZEdocGN5azdYRzRnSUNBZ2RHaHBjeTVsZUdVZ1BTQjBhR2x6TG1WNFpTNWlhVzVrS0hSb2FYTXBPMXh1SUNBZ0lIUm9hWE11YjI1U1pYTndiMjV6WlUxbFFWQkpJRDBnZEdocGN5NXZibEpsYzNCdmJuTmxUV1ZCVUVrdVltbHVaQ2gwYUdsektUdGNiaUFnSUNCMGFHbHpMbTltWmxKbGMzQnZibk5sUTJoQlVFa2dQU0IwYUdsekxtOW1abEpsYzNCdmJuTmxRMmhCVUVrdVltbHVaQ2gwYUdsektUdGNiaUFnSUNCMGFHbHpMbk4xWW5OamNtbGlaU0E5SUhSb2FYTXVjM1ZpYzJOeWFXSmxMbUpwYm1Rb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1bGVHVkRZV3hzWW1GamF5QTlJSFJvYVhNdVpYaGxRMkZzYkdKaFkyc3VZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TG05dUlEMGdkR2hwY3k1dmJpNWlhVzVrS0hSb2FYTXBPMXh1SUNBZ0lIUm9hWE11YjJabUlEMGdkR2hwY3k1dlptWXVZbWx1WkNoMGFHbHpLVHRjYmx4dUlDQWdJSFJvYVhNdWQyVmlWMjl5YTJWeUlEMGdkMlZpVjI5eWEyVnlPMXh1SUNBZ0lIUm9hWE11ZDJWaVYyOXlhMlZ5TG5CdmMzUk5aWE56WVdkbEtDZFhVMTlEVDA1VFZGSlZRMVJGUkNjc0lIc2dhVzlVZVhCbE9pQlRaWEYxWlc1alpTNUJVRWxmVTBWVVZWQWdmU2s3WEc0Z0lIMWNibHh1SUNBdkx5QmphR0Z1WjJVZ2FXOGdZMjl1Ym1WamRHbHZiaTVjYmlBZ2NIVmliR2xqSUhWelpTaHBaRG9nYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjM1J2Y21WelcybGtYU0FtSmlCMGFHbHpMbWx2YzF0MGFHbHpMbWxrWFNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVwWkNBOUlHbGtPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJsZUdVb2JXVjBhRzlrT2lCemRISnBibWNzSUhCaGNtRnRjem9nVTNSdmNtVXBPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQnBaaUFvZEdocGMxdHRaWFJvYjJSZElDWW1JSFI1Y0dWdlppQjBhR2x6VzIxbGRHaHZaRjBnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSFJvYVhOYmJXVjBhRzlrWFNod1lYSmhiWE1wTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGFHbHpMbTFsZEdodlpITmJiV1YwYUc5a1hTQW1KaUIwZVhCbGIyWWdkR2hwY3k1dFpYUm9iMlJ6VzIxbGRHaHZaRjBnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXVjBhRzlrYzF0dFpYUm9iMlJkS0hCaGNtRnRjeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ2IyNVNaWE53YjI1elpVTm9RVkJKS0dOb0tTQjdYRzRnSUNBZ1kyOXVjM1FnWjJWMFVtVnpjRzl1YzJWRGFFRlFTU0E5SUNoaFkzUnBiMjVOWlhSb2IyUXBJRDArSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFvY21WemNHOXVjMlVwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1lXTjBhVzl1VTNSaGRHVWdQU0JoWTNScGIyNU5aWFJvYjJRb2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzSmxjMXQwYUdsekxtbGtYU0FtSmlCMGFHbHpMbk4wYjNKbGMxdDBhR2x6TG1sa1hTNWthWE53WVhSamFDaGhZM1JwYjI1VGRHRjBaU2s3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQmpZV3hzWW1GamF6b2dZVzU1SUQwZ1oyVjBVbVZ6Y0c5dWMyVkRhRUZRU1NoWGMxTmxjblpsY2xSdlFYQnBRbkp2WVdSallYTjBRV04wYVc5dUtUdGNiaUFnSUNCMGFHbHpMbTl1S0dOb0xDQmpZV3hzWW1GamF5azdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdiMlptVW1WemNHOXVjMlZEYUVGUVNTaGphQ2tnZTF4dUlDQWdJSFJvYVhNdWIyWm1LR05vS1R0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1oyVjBTVzlRWVhKaGJYTW9ZbTl2ZEU5d2RHbHZiam9nUW05dmRFOXdkR2x2YmlrNklITjBjbWx1WnlCN1hHNGdJQ0FnYkdWMElIQmhjbUZ0Y3lBOUlDY25PMXh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLR0p2YjNSUGNIUnBiMjRwTG1admNrVmhZMmdvS0d0bGVTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHdGxlU0E5UFQwZ0oybGtKeWtnY21WMGRYSnVPMXh1SUNBZ0lDQWdhV1lnS0d0bGVTQTlQVDBnSjJSbFptRjFiSFJRY205d2N5Y3BJSEpsZEhWeWJqdGNiaUFnSUNBZ0lHTnZibk4wSUhaaGJIVmxJRDBnWW05dmRFOXdkR2x2Ymx0clpYbGRPMXh1SUNBZ0lDQWdjR0Z5WVcxeklDczlJR0FrZTJ0bGVYMDlKSHRsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvZG1Gc2RXVXBmU1pnTzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQndZWEpoYlhNdWNtVndiR0ZqWlNndkppUXZMQ0FuSnlrN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElIUjFibVVvWW05dmRFOXdkR2x2YmpvZ1FtOXZkRTl3ZEdsdmJpa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NTFjMlVvWW05dmRFOXdkR2x2Ymk1cFpDa3BJSHRjYmlBZ0lDQWdJQzh2SUdsa1hHNGdJQ0FnSUNCMGFHbHpMbWxrSUQwZ1ltOXZkRTl3ZEdsdmJpNXBaRHRjYmx4dUlDQWdJQ0FnTHk4Z2MzUnZjbVV1WEc0Z0lDQWdJQ0IwYUdsekxuTjBiM0psYzF0MGFHbHpMbWxrWFNBOUlHRndhVk4wYjNKbEtDazdYRzRnSUNBZ0lDQjBhR2x6TG5OMGIzSmxjMXQwYUdsekxtbGtYUzV6ZFdKelkzSnBZbVVvZEdocGN5NXpkV0p6WTNKcFltVXBPMXh1WEc0Z0lDQWdJQ0JqYjI1emRDQmhjR2xUZEdGMFpTQTlJRzVsZHlCQmNHbFRkR0YwWlNoaWIyOTBUM0IwYVc5dUtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1emRHOXlaWE5iZEdocGN5NXBaRjB1WkdsemNHRjBZMmdvZXlBdUxpNWhjR2xUZEdGMFpTd2dkSGx3WlRvZ0oxTkZWRlZRUlVSZlFWQkpYMU5VVDFKRkp5QjlLVHRjYmx4dUlDQWdJQ0FnTHk4Z2QzTWdjMlZ5ZG1WeUxseHVJQ0FnSUNBZ1kyOXVjM1FnYVc5UVlYSmhiWE1nUFNCMGFHbHpMbWRsZEVsdlVHRnlZVzF6S0dKdmIzUlBjSFJwYjI0cE8xeHVJQ0FnSUNBZ1kyOXVjM1FnWlc1a2NHOXBiblFnUFNCZ0pIdFRaWEYxWlc1alpTNUlWRlJRVTE5UVVrOVVUME5QVEgwdkx5UjdWM011YzJWeWRtVnlmVG9rZTJSbFptbHVaUzVRVDFKVVV5NVRUME5MUlZSZlNVOTlQeVI3YVc5UVlYSmhiWE45WUR0Y2JpQWdJQ0FnSUhSb2FYTXVhVzl6VzNSb2FYTXVhV1JkSUQwZ2FXOG9aVzVrY0c5cGJuUXNJRmR6TG05d2RHbHZiaWs3WEc0Z0lDQWdJQ0IwYUdsekxtbHZjMXQwYUdsekxtbGtYUzV2YmlnblkyOXVibVZqZENjc0lIUm9hWE11ZEhWdVpXUXBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxtOXVVbVZ6Y0c5dWMyVkRhRUZRU1NoaWIyOTBUM0IwYVc5dUxtTm9LVHRjYmlBZ0lDQWdJSFJvYVhNdWIyNVNaWEYxWlhOMFFWQkpLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxtOXVVbVZ6Y0c5dWMyVk5aVUZRU1NncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ2RXNTBkVzVsS0dKdmIzUlBjSFJwYjI0NklFSnZiM1JQY0hScGIyNHBJSHRjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduUUVCQVFDQkJVRWtnVlU1VVZVNUZKeWs3WEc0Z0lDQWdZMjl1YzNRZ2FXUWdQU0JpYjI5MFQzQjBhVzl1SUNZbUlHSnZiM1JQY0hScGIyNHVhV1FnUHlCaWIyOTBUM0IwYVc5dUxtbGtJRG9nZEdocGN5NXBaRHRjYmlBZ0lDQnBaaUFvZEdocGN5NXBiM05iYVdSZEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG1sdmMxdHBaRjFiSjJScGMyTnZibTVsWTNRblhTZ3BPMXh1SUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11YVc5elcybGtYVHRjYmlBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TG5OMGIzSmxjMXRwWkYwN1hHNGdJQ0FnSUNCcFppQW9UMkpxWldOMExtdGxlWE1vZEdocGN5NXBiM01wTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cFpDQTlJRTlpYW1WamRDNXJaWGx6S0hSb2FYTXVhVzl6S1Zzd1hUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJSFIxYm1Wa0tDa2dlMXh1SUNBZ0lIUm9hWE11ZDJWaVYyOXlhMlZ5TG5CdmMzUk5aWE56WVdkbEtDZFVWVTVGUkNjc0lIc2dhV1E2SUhSb2FYTXVhV1FzSUdsdlZIbHdaVG9nVTJWeGRXVnVZMlV1UVZCSlgxTkZWRlZRSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQnZibEpsY1hWbGMzUkJVRWtvS1NCN1hHNGdJQ0FnWTI5dWMzUWdZV04wYVc5dWN5QTlJRmR6UTJ4cFpXNTBWRzlCY0dsU1pYRjFaWE4wUVdOMGFXOXVjenRjYmlBZ0lDQmpiMjV6ZENCaFkzUnBiMjVMWlhseklEMGdUMkpxWldOMExtdGxlWE1vWVdOMGFXOXVjeWs3WEc0Z0lDQWdZMjl1YzNRZ1lXTjBhVzl1VEdWdVozUm9JRDBnWVdOMGFXOXVTMlY1Y3k1c1pXNW5kR2c3WEc0Z0lDQWdZMjl1YzNRZ1oyVjBRMjl5WlVGUVNTQTlJQ2hoWTNScGIyNU9ZVzFsTENCaVpXWnZjbVZHZFc1amRHbHZiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNoeVpYRjFaWE4wVUdGeVlXMXpMQ0JqWVd4c1ltRmpheUE5SUNncElEMCtJSHQ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxaSFY0VTNSaGRHVWdQU0IwYUdsekxuTjBiM0psYzF0MGFHbHpMbWxrWFM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCZmNtVnhkV1Z6ZEZOMFlYUmxJRDBnVTJWeGRXVnVZMlV1WjJWMFVtVnhkV1Z6ZEZOMFlYUmxLR0ZqZEdsdmJrNWhiV1VzSUhKbFpIVjRVM1JoZEdVc0lISmxjWFZsYzNSUVlYSmhiWE1wTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JmWVdOMGFXOXVVM1JoZEdVZ1BTQlRaWEYxWlc1alpTNW5aWFJTWlhGMVpYTjBRV04wYVc5dVUzUmhkR1VvWVdOMGFXOXVUbUZ0WlN3Z2NtVnhkV1Z6ZEZCaGNtRnRjeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnY21WeGRXVnpkRk4wWVhSbExDQmhZM1JwYjI1VGRHRjBaU0I5SUQwZ1ltVm1iM0psUm5WdVkzUnBiMjRvY21Wa2RYaFRkR0YwWlN3Z1gzSmxjWFZsYzNSVGRHRjBaU3dnWDJGamRHbHZibE4wWVhSbEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2RXSnNhV05EWVd4c1ltRmphM05iY21WeGRXVnpkRk4wWVhSbExuUjVjR1ZkSUQwZ1kyRnNiR0poWTJzN1hHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh5WlhGMVpYTjBVM1JoZEdVdWRIbHdaU3dnY21WeGRXVnpkRk4wWVhSbExtRndjQzV2Wm1aelpYUkdhVzVrU1dRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdmMxdDBhR2x6TG1sa1hTNWxiV2wwS0hKbGNYVmxjM1JUZEdGMFpTNTBlWEJsTENCeVpYRjFaWE4wVTNSaGRHVXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emRHOXlaWE5iZEdocGN5NXBaRjB1WkdsemNHRjBZMmdvWVdOMGFXOXVVM1JoZEdVcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ1lXTjBhVzl1VG05a1pVTnVkQ0E5SURBN0lHRmpkR2x2Yms1dlpHVkRiblFnUENCaFkzUnBiMjVNWlc1bmRHZzdJR0ZqZEdsdmJrNXZaR1ZEYm5Rckt5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1lXTjBhVzl1VG1GdFpTQTlJR0ZqZEdsdmJrdGxlWE5iWVdOMGFXOXVUbTlrWlVOdWRGMDdYRzRnSUNBZ0lDQmpiMjV6ZENCaFkzUnBiMjVRYkdGcGJrNWhiV1VnUFNCaFkzUnBiMjVPWVcxbExuSmxjR3hoWTJVb1UyVnhkV1Z1WTJVdVFWQkpYMVJQWDFORlVsWkZVbDlTUlZGVlJWTlVMQ0FuSnlrN1hHNGdJQ0FnSUNCamIyNXpkQ0JpWldadmNtVkdkVzVqZEdsdmJpQTlJR0ZqZEdsdmJuTmJZV04wYVc5dVRtRnRaVjA3WEc0Z0lDQWdJQ0IwYUdsekxtMWxkR2h2WkhOYllXTjBhVzl1VUd4aGFXNU9ZVzFsWFNBOUlHZGxkRU52Y21WQlVFa29ZV04wYVc5dVRtRnRaU3dnWW1WbWIzSmxSblZ1WTNScGIyNHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdiMjVTWlhOd2IyNXpaVTFsUVZCSktDa2dlMXh1SUNBZ0lHTnZibk4wSUdkbGRGUnZUV1ZCVUVrZ1BTQW9ZV04wYVc5dUtTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLSEpsYzNCdmJuTmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdGamRHbHZibE4wWVhSbElEMGdZV04wYVc5dUtISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHOXlaWE5iZEdocGN5NXBaRjB1WkdsemNHRjBZMmdvWVdOMGFXOXVVM1JoZEdVcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOU8xeHVJQ0FnSUdOdmJuTjBJR05oYkd4aVlXTnJPaUJoYm5rZ1BTQm5aWFJVYjAxbFFWQkpLRmR6VTJWeWRtVnlWRzlCY0dsRmJXbDBRV04wYVc5dUtUdGNiaUFnSUNCMGFHbHpMbTl1S0ZObGNYVmxibU5sTGtOQlZFTklYMDFGWDB0RldTd2dZMkZzYkdKaFkyc3BPMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0J2YmlodmJrdGxlU3dnWTJGc2JHSmhZMnNnUFNBb0tTQTlQaUI3ZlNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1sa0lDWW1JQ0YwYUdsekxtbHZjMXQwYUdsekxtbGtYUzVmWTJGc2JHSmhZMnR6VzJBa0pIdHZia3RsZVgxZ1hTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1cGIzTmJkR2hwY3k1cFpGMHViMjRvYjI1TFpYa3NJR05oYkd4aVlXTnJLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJRzltWmlodlptWkxaWGtwSUh0Y2JpQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZFBSa1luTENCMGFHbHpMbWxrTENCdlptWkxaWGtzSUhSb2FYTXVhVzl6S1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVwYjNOYmRHaHBjeTVwWkYwZ0ppWWdkR2hwY3k1cGIzTmJkR2hwY3k1cFpGMHVYMk5oYkd4aVlXTnJjMXRnSkNSN2IyWm1TMlY1ZldCZEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG1sdmMxdDBhR2x6TG1sa1hTNXZabVlvYjJabVMyVjVLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJSE4xWW5OamNtbGlaU2h6ZEdGMFpTa2dlMXh1SUNBZ0lHTnZibk4wSUdGd2FWTjBZWFJsSUQwZ2RHaHBjeTV6ZEc5eVpYTmJkR2hwY3k1cFpGMHVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQmpiMjV6ZENCcGIxUjVjR1VnUFNCVFpYRjFaVzVqWlM1amIyNTJaWEowVTJWeWRtVnlWRzlCY0dsSmIxUjVjR1VvZEdocGN5NXBaQ3dnWVhCcFUzUmhkR1V1WVhCd0xtRmpkR2x2Ym1Wa0tUdGNiaUFnSUNCMGFHbHpMbVY0WlVOaGJHeGlZV05yS0dGd2FWTjBZWFJsTG1Gd2NDNWhZM1JwYjI1bFpDd2dZWEJwVTNSaGRHVXBPMXh1SUNBZ0lIUm9hWE11ZDJWaVYyOXlhMlZ5TG5CdmMzUk5aWE56WVdkbEtHRndhVk4wWVhSbExtRndjQzVoWTNScGIyNWxaQ3dnZXlBdUxpNWhjR2xUZEdGMFpTd2dhVzlVZVhCbElIMHBPMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JsZUdWRFlXeHNZbUZqYXlodFpYUm9iMlFzSUdGd2FWTjBZWFJsS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJoWTNScGIyNVVlWEJsTENCaFkzUnBiMjVPWVcxbElIMGdQU0JUWlhGMVpXNWpaUzVuWlhSVFpYRjFaVzVqWlVGamRHbHZiazFoY0NodFpYUm9iMlFwTzF4dUlDQWdJR2xtSUNoaFkzUnBiMjVPWVcxbElDRTlQU0JUWlhGMVpXNWpaUzVCVUVsZlFsSlBRVVJEUVZOVVgwTkJURXhDUVVOTEtTQjdYRzRnSUNBZ0lDQnBaaUFvWVdOMGFXOXVWSGx3WlNBOVBUMGdVMlZ4ZFdWdVkyVXVRVkJKWDFKRlUxQlBUbE5GWDFSWlVFVmZSVTFKVkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdkV0pzYVdORFlXeHNZbUZqYTNOYllXTjBhVzl1VG1GdFpWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUhCdmMzUnpMQ0IwYUhKbFlXUXNJSFZ6WlhJZ2ZTQTlJR0Z3YVZOMFlYUmxPMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSFZpYkdsalEyRnNiR0poWTJ0elcyRmpkR2x2Yms1aGJXVmRLR0Z3YVZOMFlYUmxMQ0I3SUhCdmMzUnpMQ0IwYUhKbFlXUXNJSFZwWkRvZ2RYTmxjaTUxYVdRZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWVdOMGFXOXVWSGx3WlNBOVBUMGdVMlZ4ZFdWdVkyVXVRVkJKWDFKRlUxQlBUbE5GWDFSWlVFVmZRbEpQUVVSRFFWTlVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV3ZFdKc2FXTkRZV3hzWW1GamEzTmJVMlZ4ZFdWdVkyVXVRVkJKWDBKU1QwRkVRMEZUVkY5RFFVeE1Ra0ZEUzEwcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QndiM04wY3l3Z2RHaHlaV0ZrTENCMWMyVnlJSDBnUFNCaGNHbFRkR0YwWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3ZFdKc2FXTkRZV3hzWW1GamEzTmJVMlZ4ZFdWdVkyVXVRVkJKWDBKU1QwRkVRMEZUVkY5RFFVeE1Ra0ZEUzEwb1lXTjBhVzl1VG1GdFpTd2dleUJ3YjNOMGN5d2dkR2h5WldGa0xDQjFhV1E2SUhWelpYSXVkV2xrSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGTmxjWFZsYm1ObElHWnliMjBnSjJOdmJXMXZiaTlUWlhGMVpXNWpaU2M3WEc1cGJYQnZjblFnUlcxdmRHbHZibk1nWm5KdmJTQW5ZMjl0Ylc5dUwyVnRiM1JwYjI1ekwybHVaR1Y0Snp0Y2JseHVZMjl1YzNRZ1pXMXZkR2x2Ym5NZ1BTQnVaWGNnUlcxdmRHbHZibk1vS1R0Y2JteGxkQ0JoWTNScGIyNXpJRDBnZTMwN1hHNWNiazlpYW1WamRDNXJaWGx6S0ZObGNYVmxibU5sTG0xaGNDa3VabTl5UldGamFDZ29aVzVrY0c5cGJuUXBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RIbHdaU0E5SUdBa2UxTmxjWFZsYm1ObExrRlFTVjlVVDE5VFJWSldSVkpmVWtWUlZVVlRWSDBrZTJWdVpIQnZhVzUwZldBN1hHNGdJR0ZqZEdsdmJuTmJkSGx3WlYwZ1BTQW9jbVZrZFhoVGRHRjBaU3dnY21WeGRXVnpkRk4wWVhSbExDQmhZM1JwYjI1VGRHRjBaU2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaGlaV1p2Y21WR2RXNWpkR2x2Ym5OYmNtVnhkV1Z6ZEZOMFlYUmxMblI1Y0dWZEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ltVm1iM0psUm5WdVkzUnBiMjV6VzNKbGNYVmxjM1JUZEdGMFpTNTBlWEJsWFNoeVpXUjFlRk4wWVhSbExDQnlaWEYxWlhOMFUzUmhkR1VzSUdGamRHbHZibE4wWVhSbEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSHNnY21WeGRXVnpkRk4wWVhSbExDQmhZM1JwYjI1VGRHRjBaU0I5TzF4dUlDQjlPMXh1ZlNrN1hHNWNibU52Ym5OMElHSmxabTl5WlVaMWJtTjBhVzl1Y3lBOUlIdGNiaUFnY0c5emREb2dLSEpsWkhWNFUzUmhkR1VzSUhKbGNYVmxjM1JUZEdGMFpTd2dZV04wYVc5dVUzUmhkR1VwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdGd2NDQjlJRDBnY21WeGRXVnpkRk4wWVhSbE8xeHVYRzRnSUNBZ2FXWWdLR0Z3Y0M1cGMwMWxaR2xoUTJncElIdGNiaUFnSUNBZ0lDOHZJQ0FnSUNBZ2FXWWdLSGRwYm1SdmR5NTBZV3hyYmsxbFpHbGhJQ1ltSUhkcGJtUnZkeTUwWVd4cmJrMWxaR2xoTG1OMWNuSmxiblJVYVcxbEtTQjdYRzRnSUNBZ0lDQnBaaUFvWVhCd0xtTjFjbkpsYm5SVWFXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JUZEdGMFpTNWhjSEF1YVc1d2RYUkRkWEp5Wlc1MFZHbHRaU0E5SUhkcGJtUnZkeTUwWVd4cmJrMWxaR2xoTG1OMWNuSmxiblJVYVcxbE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEZOMFlYUmxMbUZ3Y0M1cGJuQjFkRU4xY25KbGJuUlVhVzFsSUQwZ01EdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYRjFaWE4wVTNSaGRHVXVkR2h5WldGa0xtVnRiM1JwYjI1eklEMGdlMzA3WEc1Y2JpQWdJQ0JwWmlBb1lYQndMbWx1Y0hWMFUzUmhiWEJKWkNrZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9aVzF2ZEdsdmJuTXVZbUZzWVc1alpYTXBMbVp2Y2tWaFkyZ29LR0poYkdGdVkyVkxaWGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0dWdGIzUnBiMjV6TG1KaGJHRnVZMlZ6VzJKaGJHRnVZMlZMWlhsZElDWW1JSEpsWkhWNFUzUmhkR1V1ZEdoeVpXRmtMbVZ0YjNScGIyNXpXMkpoYkdGdVkyVkxaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ltRnNZVzVqWlNBOUlHVnRiM1JwYjI1ekxtSmhiR0Z1WTJWelcySmhiR0Z1WTJWTFpYbGRLR0Z3Y0M1cGJuQjFkRk4wWVcxd1NXUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR0poYkdGdVkyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSmhiR0Z1WTJVdVptOXlSV0ZqYUNnb1lpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjBlWEJsU1dRZ1BTQlBZbXBsWTNRdWEyVjVjeWhpS1Zzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEhsd1pVeGhZbVZzSUQwZ1pXMXZkR2x2Ym5NdWFXUkxaWGxVZVhCbGMxdDBlWEJsU1dSZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY21WeGRXVnpkRk4wWVhSbExuUm9jbVZoWkM1bGJXOTBhVzl1YzF0aVlXeGhibU5sUzJWNVhTa2djbVZ4ZFdWemRGTjBZWFJsTG5Sb2NtVmhaQzVsYlc5MGFXOXVjMXRpWVd4aGJtTmxTMlY1WFNBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbGNYVmxjM1JUZEdGMFpTNTBhSEpsWVdRdVpXMXZkR2x2Ym5OYlltRnNZVzVqWlV0bGVWMWJkSGx3WlV4aFltVnNYU2tnY21WeGRXVnpkRk4wWVhSbExuUm9jbVZoWkM1bGJXOTBhVzl1YzF0aVlXeGhibU5sUzJWNVhWdDBlWEJsVEdGaVpXeGRJRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wVTNSaGRHVXVkR2h5WldGa0xtVnRiM1JwYjI1elcySmhiR0Z1WTJWTFpYbGRXM1I1Y0dWTVlXSmxiRjBnUFNCaVczUjVjR1ZKWkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmhZM1JwYjI1VGRHRjBaUzVoY0hBZ1BTQjdJQzR1TG1Gd2NDQjlPMXh1SUNBZ0lDQWdZV04wYVc5dVUzUmhkR1V1WVhCd0xtbHVjSFYwVTNSaGJYQkpaQ0E5SURBN1hHNGdJQ0FnSUNCeVpYRjFaWE4wVTNSaGRHVXVZWEJ3TG1sdWNIVjBVM1JoYlhCSlpDQTlJREE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIc2djbVZ4ZFdWemRGTjBZWFJsTENCaFkzUnBiMjVUZEdGMFpTQjlPMXh1SUNCOUxGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWVdOMGFXOXVjenRjYmlJc0ltbHRjRzl5ZENCVFpYRjFaVzVqWlNCbWNtOXRJQ2RqYjIxdGIyNHZVMlZ4ZFdWdVkyVW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0FvY21WemNHOXVjMlVwSUQwK0lIdGNiaUFnWTI5dWMzUWdkSGx3WlNBOUlHQWtlMU5sY1hWbGJtTmxMbE5GVWxaRlVsOVVUMTlCVUVsZlFsSlBRVVJEUVZOVWZTUjdjbVZ6Y0c5dWMyVXVkSGx3WlgxZ08xeHVJQ0J5WlhSMWNtNGdleUF1TGk1eVpYTndiMjV6WlN3Z2RIbHdaU0I5TzF4dWZUdGNiaUlzSW1sdGNHOXlkQ0JUWlhGMVpXNWpaU0JtY205dElDZGpiMjF0YjI0dlUyVnhkV1Z1WTJVbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQW9jbVZ6Y0c5dWMyVXBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RIbHdaU0E5SUdBa2UxTmxjWFZsYm1ObExsTkZVbFpGVWw5VVQxOUJVRWxmUlUxSlZIMGtlM0psYzNCdmJuTmxMblI1Y0dWOVlEdGNiaUFnY21WMGRYSnVJSHNnTGk0dWNtVnpjRzl1YzJVc0lIUjVjR1VnZlR0Y2JuMDdYRzRpTENKcGJYQnZjblFnWkdWbWFXNWxJR1p5YjIwZ0oyTnZiVzF2Ymk5a1pXWnBibVVuTzF4dVhHNXBiWEJ2Y25RZ1FYQndJR1p5YjIwZ0oyRndhUzl6ZEc5eVpTOUJjSEFuTzF4dVhHNHZMMmx0Y0c5eWRDQlVZV3hyYmxObGMzTnBiMjRnWm5KdmJTQmNJbU5zYVdWdWRDOXZjR1Z5WVhScGIyNXpMMVJoYkd0dVUyVnpjMmx2Ymx3aU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUNkVFJWSldSVkpmVkU5ZlFWQkpXMEpTVDBGRVEwRlRWRjA2Y0c5emRDYzZJSE5sZEZOMGIzSmhaMlZJZEcxc1VHOXpkSE1zWEc0Z0lDZFRSVkpXUlZKZlZFOWZRVkJKVzBWTlNWUmRPbWRsZEUxdmNtVW5PaUJ6WlhSVGRHOXlZV2RsU0hSdGJGQnZjM1J6TEZ4dUlDQW5VMFZTVmtWU1gxUlBYMEZRU1Z0RlRVbFVYVHBtWlhSamFGQnZjM1J6SnpvZ0tITjBZWFJsTENCd2NtOXdjeWtnUFQ0Z2UxeHVJQ0FnSUM4dmMyVjBVM1J2Y21GblpWQnZjM1J6S0NCemRHRjBaU3dnY0hKdmNITWdLVHRjYmlBZ0lDQnlaWFIxY200Z2V5QnpkR0YwWlN3Z2NISnZjSE1nZlR0Y2JpQWdmU3hjYmlBZ0oxTkZVbFpGVWw5VVQxOUJVRWxiUlUxSlZGMDZZMmhoYm1kbFZHaHlaV0ZrSnpvZ0tITjBZWFJsTENCd2NtOXdjeWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnWVhCd0lIMGdQU0J6ZEdGMFpUdGNiaUFnSUNCamIyNXpkQ0I3SUhKdmIzUkRhQ0I5SUQwZ1lYQndPMXh1SUNBZ0lHTnZibk4wSUhzZ2MzUnZjbUZuWlV0bGVTQjlJRDBnWkdWbWFXNWxPMXh1SUNBZ0lHTnZibk4wSUhCdmMzUkxaWGtnUFNCaGNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dVZ1BUMDlJRUZ3Y0M1a2FYTndWR2h5WldGa1ZIbHdaVTExYkhScElEOGdjM1J2Y21GblpVdGxlUzV3YjNOMFUybHVaMnhsSURvZ2MzUnZjbUZuWlV0bGVTNXdiM04wVFhWc2RHazdYRzRnSUNBZ0x5OVVZV3hyYmxObGMzTnBiMjR1YzJWMFUzUnZjbUZuWlNoeWIyOTBRMmdzSUdSbFptbHVaUzV6ZEc5eVlXZGxTMlY1VzNCdmMzUkxaWGxkTENCYlhTazdYRzRnSUNBZ2NtVjBkWEp1SUhzZ2MzUmhkR1VzSUhCeWIzQnpJSDA3WEc0Z0lIMHNYRzRnSUM4dklDQmNJazlPWDE5RFRFbERTMTlOVlV4VVNWTlVVa1ZCVFZ3aU9pQnpaWFJUZEc5eVlXZGxVRzl6ZEhNc1hHNGdJQ2RQVGw5RFRFbERTMTlOUlU1Vkp6b2dLSE4wWVhSbExDQndjbTl3Y3lrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2NtOXZkRU5vSUgwZ1BTQnpkR0YwWlM1aGNIQTdYRzRnSUNBZ0x5OGdJQ0FnVkdGc2EyNVRaWE56YVc5dUxuTmxkRk4wYjNKaFoyVW9jbTl2ZEVOb0xDQmtaV1pwYm1VdWMzUnZjbUZuWlV0bGVTNWhjSEFzSUhOMFlYUmxMbUZ3Y0NrN1hHNGdJQ0FnY21WMGRYSnVJSHNnYzNSaGRHVXNJSEJ5YjNCeklIMDdYRzRnSUgwc1hHNGdJQ2RTUlZOSldrVmZSVTVFWDFkSlRrUlBWeWM2SUNoemRHRjBaU3dnY0hKdmNITXBJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdleUJ6ZEdGMFpTd2djSEp2Y0hNZ2ZUdGNiaUFnZlN4Y2JpQWdjMlYwVTNSdmNtRm5aVkJ2YzNSekxGeHVJQ0J6WlhSVGRHOXlZV2RsU0hSdGJGQnZjM1J6TEZ4dUlDQnpaWFJUZEc5eVlXZGxVRzl6ZEhOVWFXMWxiR2x1WlN4Y2JpQWdMeThnSUdkbGRGTjBiM0poWjJWUWIzTjBjMVJwYldWc2FXNWxMRnh1SUNBdkx5QWdaMlYwVTNSdmNtRm5aVkJ2YzNSelZHbHRaV3hwYm1WYVpYSnZMRnh1ZlR0Y2JseHVablZ1WTNScGIyNGdjMlYwVTNSdmNtRm5aVkJ2YzNSektITjBZWFJsTENCd2NtOXdjeWtnZTF4dUlDQmpiMjV6ZENCN0lHRndjQ0I5SUQwZ2MzUmhkR1U3WEc0Z0lHbG1JQ2hoY0hBdWFYTk5aV1JwWVVOb0tTQjdYRzRnSUNBZ2MzUmhkR1VnUFNCelpYUlRkRzl5WVdkbFVHOXpkSE5VYVcxbGJHbHVaU2h6ZEdGMFpTazdYRzRnSUNBZ2NtVjBkWEp1SUhzZ2MzUmhkR1VzSUhCeWIzQnpJSDA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJSE5sZEZOMGIzSmhaMlZJZEcxc1VHOXpkSE1vYzNSaGRHVXNJSEJ5YjNCektUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSVGRHOXlZV2RsU0hSdGJGQnZjM1J6S0hOMFlYUmxMQ0J3Y205d2N5a2dlMXh1SUNCamIyNXpkQ0I3SUdGd2NDQjlJRDBnYzNSaGRHVTdYRzRnSUdOdmJuTjBJSHNnYzNSdmNtRm5aVXRsZVNCOUlEMGdaR1ZtYVc1bE8xeHVJQ0JwWmlBb1lYQndMbWx6VW05dmRFTm9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QndiM04wYzAxMWJIUnBMQ0J3YjNOMGMxTnBibWRzWlNCOUlEMGdjM1JoZEdVN1hHNGdJQ0FnTHk4Z0lDQWdWR0ZzYTI1VFpYTnphVzl1TG5ObGRGTjBiM0poWjJVb1lYQndMbkp2YjNSRGFDd2djM1J2Y21GblpVdGxlUzV3YjNOMGMwMTFiSFJwTENCd2IzTjBjMDExYkhScEtUdGNiaUFnSUNBdkx5QWdJQ0JVWVd4cmJsTmxjM05wYjI0dWMyVjBVM1J2Y21GblpTaGhjSEF1Y205dmRFTm9MQ0J6ZEc5eVlXZGxTMlY1TG5CdmMzUnpVMmx1WjJ4bExDQndiM04wYzFOcGJtZHNaU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZXlCemRHRjBaU3dnY0hKdmNITWdmVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwVTNSdmNtRm5aVkJ2YzNSelZHbHRaV3hwYm1Vb1lXTjBhVzl1S1NCN1hHNGdJR052Ym5OMElIc2dZWEJ3TENCMGFISmxZV1FzSUhCdmMzUnpWR2x0Wld4cGJtVTZJSEJ2YzNSelZHbHRaV3hwYm1WQmJHd2dmU0E5SUdGamRHbHZianRjYmlBZ1kyOXVjM1FnZXlCemRHOXlZV2RsUzJWNUlIMGdQU0JrWldacGJtVTdYRzVjYmlBZ2FXWWdLR0Z3Y0M1cGMwMWxaR2xoUTJncElIdGNiaUFnSUNCamIyNXpkQ0J3YjNOMGMxUnBiV1ZzYVc1bFFXeHNUR1Z1WjNSb0lEMGdjRzl6ZEhOVWFXMWxiR2x1WlVGc2JDQW1KaUJ3YjNOMGMxUnBiV1ZzYVc1bFFXeHNMbXhsYm1kMGFDQS9JSEJ2YzNSelZHbHRaV3hwYm1WQmJHd3ViR1Z1WjNSb0lEb2dNRHRjYmlBZ0lDQnNaWFFnY0c5emRITlVhVzFsYkdsdVpWcGxjbTlUWldOdmJtUWdQU0JiWFR0Y2JpQWdJQ0JzWlhRZ2NHOXpkSE5VYVcxbGJHbHVaU0E5SUZ0ZE8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQndiM04wYzFScGJXVnNhVzVsUVd4c1RHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNod2IzTjBjMVJwYldWc2FXNWxRV3hzVzJsZExtTjFjbkpsYm5SVWFXMWxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEJ2YzNSelZHbHRaV3hwYm1WYVpYSnZVMlZqYjI1a0xuQjFjMmdvY0c5emRITlVhVzFsYkdsdVpVRnNiRnRwWFNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCd2IzTjBjMVJwYldWc2FXNWxMbkIxYzJnb2NHOXpkSE5VYVcxbGJHbHVaVUZzYkZ0cFhTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1lXTjBhVzl1TG5CdmMzUnpWR2x0Wld4cGJtVWdQU0J3YjNOMGMxUnBiV1ZzYVc1bFdtVnliMU5sWTI5dVpEdGNiaUFnSUNBdkx5QWdJQ0JVWVd4cmJsTmxjM05wYjI0dWMyVjBVM1J2Y21GblpTaDBhSEpsWVdRdVkyZ3NJSE4wYjNKaFoyVkxaWGt1Y0c5emRITlVhVzFsYkdsdVpWcGxjbThzSUhCdmMzUnpWR2x0Wld4cGJtVmFaWEp2VTJWamIyNWtLVHRjYmlBZ0lDQXZMeUFnSUNCVVlXeHJibE5sYzNOcGIyNHVjMlYwVTNSdmNtRm5aU2gwYUhKbFlXUXVZMmdzSUhOMGIzSmhaMlZMWlhrdWNHOXpkSE5VYVcxbGJHbHVaU3dnY0c5emRITlVhVzFsYkdsdVpTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHRmpkR2x2Ymp0Y2JuMWNiaThxWEc1bWRXNWpkR2x2YmlCaFpHUlRkRzl5WVdkbFVHOXpkSE5VYVcxbGJHbHVaU2hoWTNScGIyNHBJSHRjYmlBZ1kyOXVjM1FnZXlCaGNIQXNJSEJ2YzNSelZHbHRaV3hwYm1VZ2ZTQTlJR0ZqZEdsdmJqdGNibHh1SUNCamIyNXpkQ0I3SUhOMGIzSmhaMlZMWlhrZ2ZTQTlJR1JsWm1sdVpUdGNiaUFnYVdZZ0tHRndjQzVwYzAxbFpHbGhRMmdwSUh0Y2JpQWdJQ0JqYjI1emRDQmhaR1JRYjNOMGMxUnBiV1ZzYVc1bElEMGdjRzl6ZEhOVWFXMWxiR2x1WlZzd1hUdGNiaUFnSUNCc1pYUWdjRzl6ZEhOVWFXMWxiR2x1WlZwbGNtOGdQU0JiWFR0Y2JpQWdJQ0JzWlhRZ2NHOXpkSE5VYVcxbGJHbHVaU0E5SUZ0ZE8xeHVJQ0FnSUd4bGRDQndiM04wYzFScGJXVnNhVzVsV21WeWIweGxibWQwYUNBOUlEQTdYRzRnSUNBZ2JHVjBJSEJ2YzNSelZHbHRaV3hwYm1WTVpXNW5kR2dnUFNBd08xeHVYRzRnSUNBZ2FXWWdLR0ZrWkZCdmMzUnpWR2x0Wld4cGJtVXVZM1Z5Y21WdWRGUnBiV1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSEJ2YzNSelZHbHRaV3hwYm1WYVpYSnZJRDBnWjJWMFUzUnZjbUZuWlZCdmMzUnpWR2x0Wld4cGJtVmFaWEp2S0dGd2NDNXliMjkwUTJncE8xeHVJQ0FnSUNBZ2NHOXpkSE5VYVcxbGJHbHVaVnBsY205TVpXNW5kR2dnUFNCd2IzTjBjMVJwYldWc2FXNWxXbVZ5Ynk1c1pXNW5kR2c3WEc1Y2JpQWdJQ0FnSUM4dklDQWdJQ0FnWm05eUtHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhCdmMzUnpWR2x0Wld4cGJtVmFaWEp2VEdWdVozUm9PeUJwS3lzcGUxeHVJQ0FnSUNBZ0x5OGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QWdJQ0FnSUhBdWMzQnNhV05sS0RRc01DeHdNaWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIQnZjM1J6VkdsdFpXeHBibVVnUFNCblpYUlRkRzl5WVdkbFVHOXpkSE5VYVcxbGJHbHVaU2hoY0hBdWNtOXZkRU5vS1R0Y2JpQWdJQ0FnSUhCdmMzUnpWR2x0Wld4cGJtVk1aVzVuZEdnZ1BTQndiM04wYzFScGJXVnNhVzVsTG14bGJtZDBhRHRjYmlBZ0lDQWdJR2xtSUNod2IzTjBjMVJwYldWc2FXNWxUR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIQnZjM1J6VkdsdFpXeHBibVZNWlc1bmRHZzdJR2tyS3lrZ2UzMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2Jpb3ZYRzR2S2x4dVpuVnVZM1JwYjI0Z1oyVjBVM1J2Y21GblpWQnZjM1J6VkdsdFpXeHBibVZhWlhKdktISnZiM1JEYUNrZ2UxeHVJQ0JqYjI1emRDQjdJSE4wYjNKaFoyVkxaWGtnZlNBOUlHUmxabWx1WlR0Y2JpQWdZMjl1YzNRZ2NtVnpjRzl1YzJVZ1BTQlVZV3hyYmxObGMzTnBiMjR1WjJWMFUzUnZjbUZuWlNoeWIyOTBRMmdzSUhOMGIzSmhaMlZMWlhrdWNHOXpkSE5VYVcxbGJHbHVaVnBsY204cE8xeHVJQ0J5WlhSMWNtNGdjbVZ6Y0c5dWMyVXVZMjl1YzNSeWRXTjBiM0l1Ym1GdFpTQTlQVDBnWENKQmNuSmhlVndpSUQ4Z2NtVnpjRzl1YzJVZ09pQmJYVHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwVTNSdmNtRm5aVkJ2YzNSelZHbHRaV3hwYm1Vb2NtOXZkRU5vS1NCN1hHNGdJR052Ym5OMElIc2djM1J2Y21GblpVdGxlU0I5SUQwZ1pHVm1hVzVsTzF4dUlDQmpiMjV6ZENCeVpYTndiMjV6WlNBOUlGUmhiR3R1VTJWemMybHZiaTVuWlhSVGRHOXlZV2RsS0hKdmIzUkRhQ3dnYzNSdmNtRm5aVXRsZVM1d2IzTjBjMVJwYldWc2FXNWxLVHRjYmlBZ2NtVjBkWEp1SUhKbGMzQnZibk5sTG1OdmJuTjBjblZqZEc5eUxtNWhiV1VnUFQwOUlGd2lRWEp5WVhsY0lpQS9JSEpsYzNCdmJuTmxJRG9nVzEwN1hHNTlYRzRxTDF4dUlpd2lhVzF3YjNKMElGTmphR1Z0WVNCbWNtOXRJQ2RqYjIxdGIyNHZVMk5vWlcxaEp6dGNibHh1YVcxd2IzSjBJSE4wYjNKaFoyVWdabkp2YlNBbllYQnBMMjFoY0ZSdlUzUmhkR1ZVYjFCeWIzQnpMM04wYjNKaFoyVW5PMXh1YVcxd2IzSjBJRUZ3Y0NCbWNtOXRJQ2RoY0drdmMzUnZjbVV2UVhCd0p6dGNibWx0Y0c5eWRDQlFiM04wY3lCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VUc5emRITW5PMXh1YVcxd2IzSjBJRlJvY21WaFpDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlZHaHlaV0ZrSnp0Y2JtbHRjRzl5ZENCVWFISmxZV1J6SUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlVYUhKbFlXUnpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQjFjR1JoZEdWQlkzUnBiMjQ2SUNoemRHOXlaU2tnUFQ0Z0tHNWxlSFFwSUQwK0lDaGhZM1JwYjI0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCemRHRjBaU0E5SUhOMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdhV1lnS0dGamRHbHZiaWtnZTF4dUlDQWdJQ0FnWVdOMGFXOXVMbUZ3Y0NBOUlHRmpkR2x2Ymk1aGNIQWdQeUI3SUM0dUxuTjBZWFJsTG1Gd2NDd2dMaTR1WVdOMGFXOXVMbUZ3Y0NCOUlEb2djM1JoZEdVdVlYQndPMXh1SUNBZ0lDQWdZV04wYVc5dUxtRndjQzVoWTNScGIyNWxaQ0E5SUdGamRHbHZiaTUwZVhCbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaG1kVzVqZEdsdmJuTmJZV04wYVc5dUxuUjVjR1ZkS1NCN1hHNGdJQ0FnSUNCaFkzUnBiMjRnUFNCbWRXNWpkR2x2Ym5OYllXTjBhVzl1TG5SNWNHVmRLSE4wWVhSbExDQmhZM1JwYjI0cE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1lXTjBhVzl1S1NCN1hHNGdJQ0FnSUNCdVpYaDBLR0ZqZEdsdmJpazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dWZUdGNibHh1WTI5dWMzUWdablZ1WTNScGIyNXpJRDBnZTF4dUlDQW5VMFZTVmtWU1gxUlBYMEZRU1Z0RlRVbFVYVHAwZFc1bEp6b2dLSE4wWVhSbExDQmhZM1JwYjI0cElEMCtJSHRjYmlBZ0lDQmhZM1JwYjI0dVlYQndXMkJ2Wm1aelpYUWtlMkZqZEdsdmJpNWhjSEF1WkdsemNGUm9jbVZoWkZSNWNHVjlSbWx1WkVsa1lGMGdQU0JoWTNScGIyNHVZWEJ3TG05bVpuTmxkRVpwYm1SSlpEdGNiaUFnSUNCaFkzUnBiMjR1WVhCd0xuSnZiM1JEYUNBOUlHRmpkR2x2Ymk1MGFISmxZV1F1WTJnN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1MGRXNWxaRU5vSUQwZ1lXTjBhVzl1TG5Sb2NtVmhaQzVqYURzZ0x5OGdZMmhoYm1kbFZHaHlaV0ZrNDRHdTZacWI0NEd1NW82bDU3YWE0NEdYNDRHbTQ0R0U0NEdmNVkrazQ0R0U0NEs1NDRPczQ0T0Q0NE9KNDRHdVEwZ29iR2wyWlVOdWRPT0NrdU9EaCtPQ3IrT0RxdU9Eb2VPRHMrT0RpT09CbWVPQ2krZVVxT21BbENuamdhampnWmZqZ2Fia3Y1M21qSUZjYmlBZ0lDQmhZM1JwYjI0dVlYQndMbVJsZEdGcGJFTm9JRDBnWVdOMGFXOXVMblJvY21WaFpDNWphRHRjYmlBZ0lDQmhZM1JwYjI0dVlYQndMbWx6VkhWdVpTQTlJSFJ5ZFdVN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1cGMxSnZiM1JEYUNBOUlHRmpkR2x2Ymk1aGNIQXVjbTl2ZEVOb0lEMDlQU0JoWTNScGIyNHVkR2h5WldGa0xtTm9PMXh1SUNBZ0lHRmpkR2x2Ymk1aGNIQXVhWE5OWldScFlVTm9JRDBnUVhCd0xtZGxkRWx6VFdWa2FXRkRhQ2hoWTNScGIyNHVkR2h5WldGa0xtTm9LVHRjYmlBZ0lDQmhZM1JwYjI0dVlYQndMbVJwYzNCVWFISmxZV1JVZVhCbElEMGdZV04wYVc5dUxtRndjQzVwYzAxbFpHbGhRMmdnUHlCQmNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dWVWFXMWxiR2x1WlNBNklFRndjQzVrYVhOd1ZHaHlaV0ZrVkhsd1pVMTFiSFJwTzF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1YVhOVWIyZG5iR1ZOZFd4MGFYTjBjbVZoYlNBOUlHWmhiSE5sTzF4dUlDQWdJR0ZqZEdsdmJpNTBhSEpsWVdRdWRHbDBiR1VnUFNCaFkzUnBiMjR1ZEdoeVpXRmtMbk5sY25abGNrMWxkR0Z6V3lkMGFYUnNaU2RkTzF4dUlDQWdJR0ZqZEdsdmJpNTBhSEpsWVdRdWFHRnpVMnhoYzJnZ1BTQlRZMmhsYldFdVoyVjBRbTl2YkNoaFkzUnBiMjR1ZEdoeVpXRmtMbWhoYzFOc1lYTm9LVHRjYmlBZ0lDQmhZM1JwYjI0dWRHaHlaV0ZrY3lBOUlGUm9jbVZoWkhNdVoyVjBUV1Z5WjJWa1ZHaHlaV0ZrY3loemRHRjBaUzUwYUhKbFlXUnpMQ0JoWTNScGIyNHVkR2h5WldGa0tUdGNiaUFnSUNCaFkzUnBiMjR1ZEdoeVpXRmtSR1YwWVdsc0lEMGdleUF1TGk1aFkzUnBiMjR1ZEdoeVpXRmtJSDA3WEc0Z0lDQWdhV1lnS0dGamRHbHZiaTVoY0hBdWFYTlNiMjkwUTJncElIdGNiaUFnSUNBZ0lHRmpkR2x2Ymk1aGNIQXVjbTl2ZEZScGRHeGxJRDBnWVdOMGFXOXVMblJvY21WaFpDNTBhWFJzWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dGamRHbHZiaTVoY0hBdWFYTk5aV1JwWVVOb0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCemNtTWdQU0JCY0hBdVoyVjBUV1ZrYVdGVGNtTW9ZV04wYVc5dUxuUm9jbVZoWkM1d2NtOTBiMk52YkN3Z1lXTjBhVzl1TG5Sb2NtVmhaQzVqYUNrN1hHNGdJQ0FnSUNCaFkzUnBiMjR1WVhCd0xtTm9WSGx3WlNBOUlFRndjQzVuWlhSTlpXUnBZVlI1Y0dWR2NtOXRVM0pqS0hOeVl5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdGamRHbHZiaTVoY0hBdVkyaFVlWEJsSUQwZ1FYQndMbTFsWkdsaFZHRm5WSGx3WlU1dk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUgwc1hHNGdJQ2RUUlZKV1JWSmZWRTlmUVZCSlcwVk5TVlJkT21abGRHTm9VRzl6ZEhNbk9pQW9jM1JoZEdVc0lHRmpkR2x2YmlrZ1BUNGdlMXh1SUNBZ0lHRmpkR2x2Ymk1aGNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dVZ1BTQmhZM1JwYjI0dVlYQndMbWx6VFdWa2FXRkRhQ0EvSUVGd2NDNWthWE53VkdoeVpXRmtWSGx3WlZScGJXVnNhVzVsSURvZ1FYQndMbVJwYzNCVWFISmxZV1JVZVhCbFRYVnNkR2s3WEc0Z0lDQWdZV04wYVc5dUxtRndjQzV2Wm1aelpYUkdhVzVrU1dRZ1BTQkJjSEF1WjJWMFQyWm1jMlYwUm1sdVpFbGtLSHNnY0c5emRITTZJR0ZqZEdsdmJpNXdiM04wY3lCOUtUdGNiaUFnSUNCaFkzUnBiMjR1WVhCd1cyQnZabVp6WlhRa2UyRmpkR2x2Ymk1aGNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dWOVJtbHVaRWxrWUYwZ1BTQmhZM1JwYjI0dVlYQndMbTltWm5ObGRFWnBibVJKWkR0Y2JpQWdJQ0JoWTNScGIyNGdQU0I3SUM0dUxsQnZjM1J6TG1kbGRFRnVlVUZqZEdsdmJsQnZjM1J6S0dGamRHbHZiaXdnYzNSaGRHVXBJSDA3WEc0Z0lDQWdhV1lnS0dGamRHbHZiaTVoY0hBdWFYTk5aV1JwWVVOb0tTQjdYRzRnSUNBZ0lDQmhZM1JwYjI0Z1BTQnpkRzl5WVdkbExuTmxkRk4wYjNKaFoyVlFiM04wYzFScGJXVnNhVzVsS0dGamRHbHZiaWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lIMHNYRzRnSUNkQlVFbGZWRTlmVTBWU1ZrVlNXMUpGVVZWRlUxUmRPbU5vWVc1blpWUm9jbVZoWkNjNklDaHpkR0YwWlN3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUNBZ1lXTjBhVzl1TG1Gd2NDQTlJR0ZqZEdsdmJpNWhjSEFnUHlCN0lDNHVMbk4wWVhSbExtRndjQ3dnTGk0dVlXTjBhVzl1TG1Gd2NDQjlJRG9nYzNSaGRHVXVZWEJ3TzF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1YVhOTlpXUnBZVU5vSUQwZ1FYQndMbWRsZEVselRXVmthV0ZEYUNoaFkzUnBiMjR1ZEdoeVpXRmtMbU5vS1R0Y2JpQWdJQ0JoWTNScGIyNHVZWEJ3TG05bVpuTmxkRVpwYm1SSlpDQTlJRUZ3Y0M1a1pXWmhkV3gwVDJabWMyVjBSbWx1WkVsa08xeHVJQ0FnSUdGamRHbHZiaTVoY0hBdWIyWm1jMlYwVkdsdFpXeHBibVZHYVc1a1NXUWdQU0JCY0hBdVpHVm1ZWFZzZEU5bVpuTmxkRVpwYm1SSlpEdGNiaUFnSUNCaFkzUnBiMjR1WVhCd0xtOW1abk5sZEUxMWJIUnBSbWx1WkVsa0lEMGdRWEJ3TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1dlptWnpaWFJUYVc1bmJHVkdhVzVrU1dRZ1BTQkJjSEF1WkdWbVlYVnNkRTltWm5ObGRFWnBibVJKWkR0Y2JpQWdJQ0JoWTNScGIyNHVZWEJ3TG05bVpuTmxkRU5vYVd4a1JtbHVaRWxrSUQwZ1FYQndMbVJsWm1GMWJIUlBabVp6WlhSR2FXNWtTV1E3WEc0Z0lDQWdZV04wYVc5dUxtRndjQzV2Wm1aelpYUk1iMmR6Um1sdVpFbGtJRDBnUVhCd0xtUmxabUYxYkhSUFptWnpaWFJHYVc1a1NXUTdYRzRnSUNBZ1lXTjBhVzl1TG5Sb2NtVmhaQ0E5SUdGamRHbHZiaTUwYUhKbFlXUWdQeUI3SUM0dUxuTjBZWFJsTG5Sb2NtVmhaQ3dnTGk0dVlXTjBhVzl1TG5Sb2NtVmhaQ0I5SURvZ2MzUmhkR1V1ZEdoeVpXRmtPMXh1SUNBZ0lHRmpkR2x2Ymk1d2IzTjBjeUE5SUc1bGR5QlFiM04wY3lncE8xeHVJQ0FnSUdGamRHbHZiaTV3YjNOMGMwMTFiSFJwSUQwZ2JtVjNJRkJ2YzNSektDazdYRzRnSUNBZ1lXTjBhVzl1TG5CdmMzUnpRMmhwYkdRZ1BTQnVaWGNnVUc5emRITW9LVHRjYmlBZ0lDQmhZM1JwYjI0dWNHOXpkSE5VYVcxbGJHbHVaU0E5SUc1bGR5QlFiM04wY3lncE8xeHVJQ0FnSUdGamRHbHZiaTV3YjNOMGMxTnBibWRzWlNBOUlHNWxkeUJRYjNOMGN5Z3BPMXh1SUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lIMHNYRzRnSUNkVFJWSldSVkpmVkU5ZlFWQkpXMFZOU1ZSZE9tTm9ZVzVuWlZSb2NtVmhaQ2M2SUNoemRHRjBaU3dnWVdOMGFXOXVLU0E5UGlCN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1cGMxSnZiM1JEYUNBOUlHRmpkR2x2Ymk1aGNIQXVjbTl2ZEVOb0lEMDlQU0JoWTNScGIyNHVkR2h5WldGa0xtTm9PMXh1SUNBZ0lHRmpkR2x2Ymk1aGNIQXVkSFZ1WldSRGFDQTlJR0ZqZEdsdmJpNTBhSEpsWVdRdVkyZzdYRzRnSUNBZ1lXTjBhVzl1TG5Sb2NtVmhaQzUwYVhSc1pTQTlJR0ZqZEdsdmJpNTBhSEpsWVdRdWMyVnlkbVZ5VFdWMFlYTmJKM1JwZEd4bEoxMDdYRzRnSUNBZ1lXTjBhVzl1TG5Sb2NtVmhaSE1nUFNCVWFISmxZV1J6TG1kbGRFMWxjbWRsWkZSb2NtVmhaSE1vYzNSaGRHVXVkR2h5WldGa2N5d2dZV04wYVc5dUxuUm9jbVZoWkNrN1hHNGdJQ0FnWVdOMGFXOXVMblJvY21WaFpFUmxkR0ZwYkNBOUlIc2dMaTR1WVdOMGFXOXVMblJvY21WaFpDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lIMHNYRzRnSUNkVFJWSldSVkpmVkU5ZlFWQkpXMFZOU1ZSZE9uVndaR0YwWlZSb2NtVmhaQ2M2SUNoemRHRjBaU3dnWVdOMGFXOXVLU0E5UGlCN1hHNGdJQ0FnWVdOMGFXOXVMblJvY21WaFpITWdQU0JVYUhKbFlXUnpMbWRsZEUxbGNtZGxaRlJvY21WaFpITW9jM1JoZEdVdWRHaHlaV0ZrY3l3Z1lXTjBhVzl1TG5Sb2NtVmhaQ2s3WEc0Z0lDQWdZV04wYVc5dUxuUm9jbVZoWkVSbGRHRnBiQ0E5SUhzZ0xpNHVZV04wYVc5dUxuUm9jbVZoWkNCOU8xeHVJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUgwc1hHNGdJQ2RUUlZKV1JWSmZWRTlmUVZCSlcwVk5TVlJkT25Wd1pHRjBaVlJvY21WaFpGTmxjblpsY2sxbGRHRnpKem9nS0hOMFlYUmxMQ0JoWTNScGIyNHBJRDArSUh0Y2JpQWdJQ0JoWTNScGIyNHVkR2h5WldGa2N5QTlJRlJvY21WaFpITXVaMlYwVFdWeVoyVmtWR2h5WldGa2N5aHpkR0YwWlM1MGFISmxZV1J6TENCaFkzUnBiMjR1ZEdoeVpXRmtLVHRjYmlBZ0lDQmhZM1JwYjI0dWRHaHlaV0ZrUkdWMFlXbHNJRDBnZXlBdUxpNWhZM1JwYjI0dWRHaHlaV0ZrSUgwN1hHNGdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnZlN4Y2JpQWdKMU5GVWxaRlVsOVVUMTlCVUVsYlVrVlJWVVZUVkYwNmNHOXpkQ2M2SUNoemRHRjBaU3dnWVdOMGFXOXVLU0E5UGlCN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1cGJuQjFkRk4wWVcxd1NXUWdQU0F3TzF4dUlDQWdJSEpsZEhWeWJpQmhZM1JwYjI0N1hHNGdJSDBzWEc0Z0lDZFRSVkpXUlZKZlZFOWZRVkJKVzBKU1QwRkVRMEZUVkYwNmNHOXpkQ2M2SUNoemRHRjBaU3dnWVdOMGFXOXVLU0E5UGlCN1hHNGdJQ0FnTHk4ZzQ0T200NE84NDRLMjQ0Tzg0NEdNNUx1SzU0Kys1WnlvNDRDQjZaYXk2S2FuNDRHWDQ0R200NEdFNDRLTGRHaHlaV0ZrNDRHdTVhQzA1WkNJWEc0Z0lDQWdhV1lnS0hOMFlYUmxMblJvY21WaFpDNWphQ0E5UFQwZ1lXTjBhVzl1TG5Sb2NtVmhaQzVqYUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLR0ZqZEdsdmJpNTBhSEpsWVdRdVpXMXZkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pXMXZkR2x2Ymt0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loaFkzUnBiMjR1ZEdoeVpXRmtMbVZ0YjNScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnRiM1JwYjI1TFpYbHpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaFkzUnBiMjVGYlc5MGFXOXVjeUE5SUhzZ0xpNHVZV04wYVc5dUxuUm9jbVZoWkM1bGJXOTBhVzl1Y3lCOU8xeHVJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJpNTBhSEpsWVdRdVpXMXZkR2x2Ym5NZ1BTQjdJQzR1TG5OMFlYUmxMblJvY21WaFpDNWxiVzkwYVc5dWN5QjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9ZV04wYVc5dVJXMXZkR2x2Ym5NcExtWnZja1ZoWTJnb0tHVnRiM1JwYjI1TmIyUmxiRXRsZVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9ZV04wYVc5dVJXMXZkR2x2Ym5OYlpXMXZkR2x2YmsxdlpHVnNTMlY1WFNrdVptOXlSV0ZqYUNnb1pXMXZkR2x2Ymt0bGVTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNHVkR2h5WldGa0xtVnRiM1JwYjI1elcyVnRiM1JwYjI1TmIyUmxiRXRsZVYxYlpXMXZkR2x2Ymt0bGVWMGdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJpNTBhSEpsWVdRdVpXMXZkR2x2Ym5OYlpXMXZkR2x2YmsxdlpHVnNTMlY1WFZ0bGJXOTBhVzl1UzJWNVhTQXJJR0ZqZEdsdmJrVnRiM1JwYjI1elcyVnRiM1JwYjI1TmIyUmxiRXRsZVYxYlpXMXZkR2x2Ymt0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQmhZM1JwYjI0dWRHaHlaV0ZrUkdWMFlXbHNJRDBnZXlBdUxpNWhZM1JwYjI0dWRHaHlaV0ZrSUgwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCaFkzUnBiMjR1ZEdoeVpXRmtMbU5vSUQwZ2MzUmhkR1V1ZEdoeVpXRmtMbU5vTzF4dUlDQWdJR0ZqZEdsdmJpQTlJRkJ2YzNSekxtZGxkRUZ1ZVVGamRHbHZibEJ2YzNSektHRmpkR2x2Yml3Z2MzUmhkR1VwTzF4dUlDQWdJSEpsZEhWeWJpQmhZM1JwYjI0N1hHNGdJSDBzWEc0Z0lDZFRSVkpXUlZKZlZFOWZRVkJKVzBWTlNWUmRPbWRsZEUxdmNtVW5PaUFvYzNSaGRHVXNJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1YjJabWMyVjBSbWx1WkVsa0lEMGdRWEJ3TG1kbGRFOW1abk5sZEVacGJtUkpaQ2g3SUhCdmMzUnpPaUJoWTNScGIyNHVjRzl6ZEhNZ2ZTazdYRzRnSUNBZ1lXTjBhVzl1TG1Gd2NGdGdiMlptYzJWMEpIdGhZM1JwYjI0dVlYQndMbVJwYzNCVWFISmxZV1JVZVhCbGZVWnBibVJKWkdCZElEMGdZV04wYVc5dUxtRndjQzV2Wm1aelpYUkdhVzVrU1dRN1hHNGdJQ0FnWVdOMGFXOXVJRDBnVUc5emRITXVaMlYwUVc1NVFXTjBhVzl1VUc5emRITW9ZV04wYVc5dUxDQnpkR0YwWlNrN1hHNGdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnZlN4Y2JpQWdKMEZRU1Y5VVQxOVRSVkpXUlZKYlVrVlJWVVZUVkYwNlkyaGhibWRsVkdoeVpXRmtSR1YwWVdsc0p6b2dLSE4wWVhSbExDQmhZM1JwYjI0cElEMCtJSHRjYmlBZ0lDQmtaV3hsZEdVZ1lXTjBhVzl1TG5Sb2NtVmhaRHRjYmlBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQjlMRnh1SUNBblUwVlNWa1ZTWDFSUFgwRlFTVnRGVFVsVVhUcGphR0Z1WjJWVWFISmxZV1JFWlhSaGFXd25PaUFvYzNSaGRHVXNJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1WkdWMFlXbHNRMmdnUFNCaFkzUnBiMjR1ZEdoeVpXRmtMbU5vTzF4dUlDQWdJR0ZqZEdsdmJpNTBhSEpsWVdSeklEMGdWR2h5WldGa2N5NW5aWFJOWlhKblpXUlVhSEpsWVdSektITjBZWFJsTG5Sb2NtVmhaSE1zSUdGamRHbHZiaTUwYUhKbFlXUXBPMXh1SUNBZ0lHRmpkR2x2Ymk1MGFISmxZV1JFWlhSaGFXd2dQU0I3SUM0dUxtRmpkR2x2Ymk1MGFISmxZV1FnZlR0Y2JpQWdJQ0JoWTNScGIyNHVkR2h5WldGa1JHVjBZV2xzTG5ScGRHeGxJRDBnWVdOMGFXOXVMblJvY21WaFpDNXpaWEoyWlhKTlpYUmhjeTUwYVhSc1pUdGNiaUFnSUNCaFkzUnBiMjR1ZEdoeVpXRmtSR1YwWVdsc0xtVnRiM1JwYjI1eklEMGdleUF1TGk1emRHRjBaUzUwYUhKbFlXUnpXMkZqZEdsdmJpNWhjSEF1WkdWMFlXbHNRMmhkTG1WdGIzUnBiMjV6SUgwN1hHNWNiaUFnSUNBdkx5QlVUMFJQSU9XUHBPT0JoT1M3bGVhbm1PT0JvT09CcUdoaGMxTnNZWE5vNDRHTTVxQzg1N1NONDRHVjQ0S000NEdtNDRHRTQ0R3E0NEdFWTI5c2JHVmpkR2x2YnVPQmpPV3RtT1djcU9PQm1lT0NpMXh1SUNBZ0lDOHZJR2hoYzFOc1lYTm80NEd2Ykc5allYUnBiMjdqZ1l6bGo0TG5oYWZqZ2FmamdZM2pnYXJqZ1lSRFRFbEZUbFRqZ2FEamdham1yYVBqZ1pmamdZVGxnS1RqZ3BMbGo1Ymx2cGZsaDdybW5hWGpnYXJqZ1lUamdaL2pnb0hqZ0lGY2JpQWdJQ0F2THlEbWk2SGx2TFhtcVovb2c3M2pnYWZqZ2E5SFJWUmZRMHhKUlU1VVgwMUZWRUZUNDRLUzVhNmY2S0dNNDRHWDQ0R201cTJqNDRHWDQ0R0U1WUNrNDRLUzQ0SzE0NE84NDRPUTQ0Tzg0NEdyNXJpaDQ0R1g0NEdtNXB1MDVwYXc0NEdYNDRHbTQ0S0U0NEtMNWIrRjZLYUI0NEdNNDRHQzQ0S0w0NENDWEc0Z0lDQWdZV04wYVc5dUxuUm9jbVZoWkVSbGRHRnBiQzVvWVhOVGJHRnphQ0E5SUdGamRHbHZiaTUwYUhKbFlXUkVaWFJoYVd3dWFHRnpVMnhoYzJnZ1BUMDlJRzUxYkd3Z1B5QjBjblZsSURvZ1UyTm9aVzFoTG1kbGRFSnZiMndvWVdOMGFXOXVMblJvY21WaFpFUmxkR0ZwYkM1b1lYTlRiR0Z6YUNrN1hHNGdJQ0FnWkdWc1pYUmxJR0ZqZEdsdmJpNTBhSEpsWVdRN1hHNGdJQ0FnWVdOMGFXOXVMblJvY21WaFpDQTlJR0ZqZEdsdmJqdGNiaUFnSUNCeVpYUjFjbTRnWVdOMGFXOXVPMXh1SUNCOUxGeHVJQ0FuUTB4UFUwVmZURWxPUzFNbk9pQW9jM1JoZEdVc0lHRmpkR2x2YmlrZ1BUNGdlMXh1SUNBZ0lHRmpkR2x2Ymk1aGNIQWdQU0JoWTNScGIyNHVZWEJ3SUQ4Z2V5QXVMaTV6ZEdGMFpTNWhjSEFzSUM0dUxtRmpkR2x2Ymk1aGNIQWdmU0E2SUhOMFlYUmxMbUZ3Y0R0Y2JpQWdJQ0JoWTNScGIyNHVkR2h5WldGa0lEMGdZV04wYVc5dUxuUm9jbVZoWkNBL0lIc2dMaTR1YzNSaGRHVXVkR2h5WldGa0xDQXVMaTVoWTNScGIyNHVkR2h5WldGa0lIMGdPaUJ6ZEdGMFpTNTBhSEpsWVdRN1hHNGdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnZlN4Y2JpQWdKMDlPWDBOTVNVTkxYMVJQWDAxVlRGUkpYMVJJVWtWQlJDYzZJQ2h6ZEdGMFpTd2dZV04wYVc5dUtTQTlQaUI3WEc0Z0lDQWdZV04wYVc5dUxtRndjQzVwYzB4cGJtdERhQ0E5SUdaaGJITmxPMXh1SUNBZ0lHRmpkR2x2Ymk1aGNIQXVhWE5TYjI5MFEyZ2dQU0JoWTNScGIyNHVkR2h5WldGa0xtTm9JRDA5UFNCemRHRjBaUzVoY0hBdWNtOXZkRU5vTzF4dVhHNGdJQ0FnYVdZZ0tITjBZWFJsTG5Sb2NtVmhaSE5iWVdOMGFXOXVMblJvY21WaFpDNWphRjBwSUh0Y2JpQWdJQ0FnSUdGamRHbHZiaTUwYUhKbFlXUWdQU0J6ZEdGMFpTNTBhSEpsWVdSelcyRmpkR2x2Ymk1MGFISmxZV1F1WTJoZE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JoWTNScGIyNHVkR2h5WldGa0lEMGdleUF1TGk1emRHRjBaUzUwYUhKbFlXUXNJQzR1TG1GamRHbHZiaTUwYUhKbFlXUWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQjlMRnh1SUNBblQwNWZRMHhKUTB0ZlZFOWZWRWxOUlV4SlRrVmZWRWhTUlVGRUp6b2dLSE4wWVhSbExDQmhZM1JwYjI0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCamFDQTlJR0ZqZEdsdmJpNTBhSEpsWVdRdVkyZzdYRzRnSUNBZ1lXTjBhVzl1TG5Sb2NtVmhaQ0E5SUhzZ0xpNHVjM1JoZEdVdWRHaHlaV0ZrTENBdUxpNWhZM1JwYjI0dWRHaHlaV0ZrSUgwN1hHNGdJQ0FnWVdOMGFXOXVMblJvY21WaFpDNWphQ0E5SUdOb08xeHVJQ0FnSUdOdmJuTjBJSE55WXlBOUlFRndjQzVuWlhSTlpXUnBZVk55WXloaFkzUnBiMjR1ZEdoeVpXRmtMbkJ5YjNSdlkyOXNMQ0JoWTNScGIyNHVkR2h5WldGa0xtTm9LVHRjYmlBZ0lDQmhZM1JwYjI0dWRHaHlaV0ZrTG1acGJtUlVlWEJsSUQwZ1ZHaHlaV0ZrTG1kbGRFWnBibVJVZVhCbFJuSnZiVk55WXloemNtTXBPMXh1SUNBZ0lHRmpkR2x2Ymk1d2IzTjBjMVJwYldWc2FXNWxJRDBnVzEwN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1cGMwMWxaR2xoUTJnZ1BTQjBjblZsTzF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1YjJabWMyVjBSbWx1WkVsa0lEMGdRWEJ3TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1dlptWnpaWFJEYUdsc1pFWnBibVJKWkNBOUlFRndjQzVrWldaaGRXeDBUMlptYzJWMFJtbHVaRWxrTzF4dUlDQWdJSEpsZEhWeWJpQmhZM1JwYjI0N1hHNGdJSDBzWEc0Z0lDZFBUbDlEVEVsRFMxOVVUMTlUU1U1SFRFVmZWRWhTUlVGRUp6b2dLSE4wWVhSbExDQmhZM1JwYjI0cElEMCtJSHRjYmlBZ0lDQmhZM1JwYjI0dWRHaHlaV0ZrSUQwZ2V5QXVMaTV6ZEdGMFpTNTBhSEpsWVdRc0lDNHVMbUZqZEdsdmJpNTBhSEpsWVdRZ2ZUdGNiaUFnSUNCaFkzUnBiMjR1WVhCd0lEMGdjM1JoZEdVdVlYQndPMXh1SUNBZ0lHRmpkR2x2Ymk1aGNIQXVhWE5NYVc1clEyZ2dQU0JtWVd4elpUdGNiaUFnSUNCeVpYUjFjbTRnWVdOMGFXOXVPMXh1SUNCOUxGeHVJQ0FuVDA1ZlEweEpRMHRmVkU5ZlEwaEpURVJmVkVoU1JVRkVKem9nS0hOMFlYUmxMQ0JoWTNScGIyNHBJRDArSUh0Y2JpQWdJQ0JoWTNScGIyNHVkR2h5WldGa0lEMGdleUF1TGk1emRHRjBaUzUwYUhKbFlXUXNJQzR1TG1GamRHbHZiaTUwYUhKbFlXUWdmVHRjYmlBZ0lDQmhZM1JwYjI0dWNHOXpkSE5EYUdsc1pDQTlJRnRkTzF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1YjJabWMyVjBSbWx1WkVsa0lEMGdRWEJ3TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNGdJQ0FnWVdOMGFXOXVMbUZ3Y0M1dlptWnpaWFJEYUdsc1pFWnBibVJKWkNBOUlFRndjQzVrWldaaGRXeDBUMlptYzJWMFJtbHVaRWxrTzF4dUlDQWdJSEpsZEhWeWJpQmhZM1JwYjI0N1hHNGdJSDBzWEc0Z0lDZFBUbDlEVEVsRFMxOU5SVTVWSnpvZ0tITjBZWFJsTENCaFkzUnBiMjRwSUQwK0lIdGNiaUFnSUNCaFkzUnBiMjR1WVhCd0xtUmxjMk1nUFNCaFkzUnBiMjR1ZFdrdWJXVnVkVU52YlhCdmJtVnVkRHRjYmlBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TzF4dUlDQjlMRnh1SUNBblVrVlRTVnBGWDBWT1JGOVhTVTVFVDFjbk9pQW9jM1JoZEdVc0lHRmpkR2x2YmlrZ1BUNGdlMXh1SUNBZ0lHRmpkR2x2Ymk1MGFISmxZV1FnUFNCemRHRjBaUzUwYUhKbFlXUTdYRzRnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ2ZTeGNiaUFnSjA5T1gwTk1TVU5MWDFSUFIwZE1SVjlFU1ZOUVgwUkZWRUZKVENjNklDaHpkR0YwWlN3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUNBZ0x5OGdWRTlFVHlEbGo2VGpnWVRrdTVYbXA1ampnYURqZ2Fob1lYTlRiR0Z6YU9PQmpPYWd2T2UwamVPQmxlT0NqT09CcHVPQmhPT0JxdU9CaEdOdmJHeGxZM1JwYjI3amdZemxyWmpsbktqamdabmpnb3RjYmlBZ0lDQXZMeUJvWVhOVGJHRnphT09CcjJ4dlkyRjBhVzl1NDRHTTVZK0M1NFduNDRHbjQ0R040NEdxNDRHRVEweEpSVTVVNDRHZzQ0R281cTJqNDRHWDQ0R0U1WUNrNDRLUzVZK1c1YjZYNVllNjVwMmw0NEdxNDRHRTQ0R2Y0NEtCNDRDQlhHNGdJQ0FnTHk4ZzVvdWg1YnkxNXFtZjZJTzk0NEduNDRHdlIwVlVYME5NU1VWT1ZGOU5SVlJCVStPQ2t1V3VuK2loak9PQmwrT0JwdWF0bytPQmwrT0JoT1dBcE9PQ2t1T0N0ZU9Edk9PRGtPT0R2T09CcSthNG9lT0JsK09CcHVhYnRPYVdzT09CbCtPQnB1T0NoT09DaStXL2hlaW1nZU9Cak9PQmd1T0NpK09BZ2x4dUlDQWdJR0ZqZEdsdmJpNTBhSEpsWVdSRVpYUmhhV3d1YUdGelUyeGhjMmdnUFNCaFkzUnBiMjR1ZEdoeVpXRmtSR1YwWVdsc0xtaGhjMU5zWVhOb0lEMDlQU0J1ZFd4c0lEOGdkSEoxWlNBNklGTmphR1Z0WVM1blpYUkNiMjlzS0dGamRHbHZiaTUwYUhKbFlXUkVaWFJoYVd3dWFHRnpVMnhoYzJncE8xeHVJQ0FnSUhKbGRIVnliaUJoWTNScGIyNDdYRzRnSUgwc1hHNGdJQ2RVVDBkSFRFVmZRbFZDUWt4RlgxQlBVMVFuT2lBb2MzUmhkR1VzSUdGamRHbHZiaWtnUFQ0Z2UxeHVJQ0FnSUdGamRHbHZiaTUwYUhKbFlXUWdQU0J6ZEdGMFpTNTBhSEpsWVdRN1hHNGdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnZlN4Y2JpQWdKMU5VUVZKVVgweEpUa3RmVFVWRVNVRW5PaUFvYzNSaGRHVXNJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQWdJR0ZqZEdsdmJpNWhjSEF1YVhOTWFXNXJRMmdnUFNCMGNuVmxPMXh1SUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjQ3WEc0Z0lIMHNYRzRnSUNkSFJWUmZRMHhKUlU1VVgwMUZWRUZUSnpvZ0tITjBZWFJsTENCaFkzUnBiMjRwSUQwK0lIdGNiaUFnSUNCc1pYUWdkWEJrWVhSbFJteG5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2JHVjBJSHNnWTJ4cFpXNTBUV1YwWVhNZ2ZTQTlJR0ZqZEdsdmJqdGNiaUFnSUNCc1pYUWdleUJ6WlhKMlpYSk5aWFJoY3lCOUlEMGdjM1JoZEdVdWRHaHlaV0ZrTzF4dUlDQWdJR0ZqZEdsdmJpNTBhSEpsWVdRZ1BTQjdmVHRjYmx4dUlDQWdJQzh2SUUxbGRHRnpYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9ZMnhwWlc1MFRXVjBZWE1wTG1admNrVmhZMmdvS0d0bGVTd2dhU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR05zYVdWdWRFMWxkR0Z6VzJ0bGVWMGdKaVlnWTJ4cFpXNTBUV1YwWVhOYmEyVjVYU0FoUFQwZ0p5Y2dKaVlnYzJWeWRtVnlUV1YwWVhOYmEyVjVYU0FoUFQwZ1kyeHBaVzUwVFdWMFlYTmJhMlY1WFNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGamRHbHZiaTUwYUhKbFlXUXVjMlZ5ZG1WeVRXVjBZWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQmhZM1JwYjI0dWRHaHlaV0ZrTG5ObGNuWmxjazFsZEdGeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RYQmtZWFJsUm14bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1TG5Sb2NtVmhaQzV6WlhKMlpYSk5aWFJoYzF0clpYbGRJRDBnWTJ4cFpXNTBUV1YwWVhOYmEyVjVYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR2xtSUNoMWNHUmhkR1ZHYkdjcElIdGNiaUFnSUNBZ0lHRmpkR2x2Ymk1MGFISmxZV1JFWlhSaGFXd2dQU0I3SUM0dUxuTjBZWFJsTG5Sb2NtVmhaRVJsZEdGcGJDQjlPMXh1SUNBZ0lDQWdZV04wYVc5dUxuUm9jbVZoWkVSbGRHRnBiQzV6WlhKMlpYSk5aWFJoY3lBOUlIdGNiaUFnSUNBZ0lDQWdMaTR1WVdOMGFXOXVMblJvY21WaFpFUmxkR0ZwYkM1elpYSjJaWEpOWlhSaGN5eGNiaUFnSUNBZ0lDQWdMaTR1WVdOMGFXOXVMblJvY21WaFpDNXpaWEoyWlhKTlpYUmhjeXhjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dU8xeHVJQ0FnSUgxY2JpQWdmU3hjYm4wN1hHNGlMQ0pwYlhCdmNuUWdRVzVoYkhsNlpTQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlFXNWhiSGw2WlNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElDaHpkR0YwWlNBOUlHNWxkeUJCYm1Gc2VYcGxLQ2tzSUdGamRHbHZiaWtnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdZV04wYVc5dUxtRnVZV3g1ZW1VZ1B5QnpkR0YwWlM1dFpYSm5aU2hoWTNScGIyNHVZVzVoYkhsNlpTa2dPaUJ6ZEdGMFpUdGNibjA3WEc0aUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBb2MzUmhkR1VnUFNCYlhTd2dZV04wYVc5dUtTQTlQaUJiWVdOMGFXOXVMblI1Y0dVc0lDNHVMbk4wWVhSbFhUdGNiaUlzSW1sdGNHOXlkQ0JCY0hBZ1puSnZiU0FuWVhCcEwzTjBiM0psTDBGd2NDYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJQ2h6ZEdGMFpTQTlJRzVsZHlCQmNIQW9LU3dnWVdOMGFXOXVLU0E5UGlCN1hHNGdJSEpsZEhWeWJpQmhZM1JwYjI0dVlYQndJRDhnYm1WM0lFRndjQ2hoWTNScGIyNHVZWEJ3S1NBNklITjBZWFJsTzF4dWZUdGNiaUlzSW1sdGNHOXlkQ0JDYjI5MFQzQjBhVzl1SUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlDYjI5MFQzQjBhVzl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ0tITjBZWFJsSUQwZ2JtVjNJRUp2YjNSUGNIUnBiMjRvS1N3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUhKbGRIVnliaUJoWTNScGIyNHVZbTl2ZEU5d2RHbHZiaUEvSUhOMFlYUmxMbTFsY21kbEtHRmpkR2x2Ymk1aWIyOTBUM0IwYVc5dUtTQTZJSE4wWVhSbE8xeHVmVHRjYmlJc0ltbHRjRzl5ZENCN0lHTnZiV0pwYm1WU1pXUjFZMlZ5Y3lCOUlHWnliMjBnSjNKbFpIVjRKenRjYmx4dWFXMXdiM0owSUdGdVlXeDVlbVVnWm5KdmJTQW5MaTloYm1Gc2VYcGxKenRjYm1sdGNHOXlkQ0JoY0dsTWIyY2dabkp2YlNBbkxpOWhjR2xNYjJjbk8xeHVhVzF3YjNKMElHRndjQ0JtY205dElDY3VMMkZ3Y0NjN1hHNXBiWEJ2Y25RZ1ltOXZkRTl3ZEdsdmJpQm1jbTl0SUNjdUwySnZiM1JQY0hScGIyNG5PMXh1YVcxd2IzSjBJSEJ2YzNSeklHWnliMjBnSnk0dmNHOXpkSE1uTzF4dWFXMXdiM0owSUhCdmMzUnpRMmhwYkdRZ1puSnZiU0FuTGk5d2IzTjBjME5vYVd4a0p6dGNibWx0Y0c5eWRDQndiM04wYzAxMWJIUnBJR1p5YjIwZ0p5NHZjRzl6ZEhOTmRXeDBhU2M3WEc1cGJYQnZjblFnY0c5emRITlRhVzVuYkdVZ1puSnZiU0FuTGk5d2IzTjBjMU5wYm1kc1pTYzdYRzVwYlhCdmNuUWdjRzl6ZEhOVWFXMWxiR2x1WlNCbWNtOXRJQ2N1TDNCdmMzUnpWR2x0Wld4cGJtVW5PMXh1YVcxd2IzSjBJSEJ2YzNSelZHbHRaV3hwYm1WVGRHOWpheUJtY205dElDY3VMM0J2YzNSelZHbHRaV3hwYm1WVGRHOWpheWM3WEc1cGJYQnZjblFnY0c5emRITlVhVzFsYkdsdVpWcGxjbThnWm5KdmJTQW5MaTl3YjNOMGMxUnBiV1ZzYVc1bFdtVnlieWM3WEc1cGJYQnZjblFnY0c5emRITlVhVzFsYkdsdVpWcGxjbTlCWm5SbGNpQm1jbTl0SUNjdUwzQnZjM1J6VkdsdFpXeHBibVZhWlhKdlFXWjBaWEluTzF4dWFXMXdiM0owSUhKaGJtdHpJR1p5YjIwZ0p5NHZjbUZ1YTNNbk8xeHVhVzF3YjNKMElITmxkSFJwYm1jZ1puSnZiU0FuTGk5elpYUjBhVzVuSnp0Y2JtbHRjRzl5ZENCMGFISmxZV1FnWm5KdmJTQW5MaTkwYUhKbFlXUW5PMXh1YVcxd2IzSjBJSFJvY21WaFpFUmxkR0ZwYkNCbWNtOXRJQ2N1TDNSb2NtVmhaRVJsZEdGcGJDYzdYRzVwYlhCdmNuUWdkR2h5WldGa2N5Qm1jbTl0SUNjdUwzUm9jbVZoWkhNbk8xeHVhVzF3YjNKMElIUjFibVZEYUNCbWNtOXRJQ2N1TDNSMWJtVkRhQ2M3WEc1cGJYQnZjblFnZFhObGNpQm1jbTl0SUNjdUwzVnpaWEluTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnY21Wa2RXTmxja1pwYkdWeklEMGdlMXh1SUNCaGNIQXNYRzRnSUhWelpYSXNYRzRnSUhSMWJtVkRhQ3hjYmlBZ2NtRnVhM01zWEc0Z0lIUm9jbVZoWkN4Y2JpQWdkR2h5WldGa2N5eGNiaUFnZEdoeVpXRmtSR1YwWVdsc0xGeHVJQ0JoYm1Gc2VYcGxMRnh1SUNCaWIyOTBUM0IwYVc5dUxGeHVJQ0J6WlhSMGFXNW5MRnh1SUNCd2IzTjBjeXhjYmlBZ2NHOXpkSE5VYVcxbGJHbHVaU3hjYmlBZ2NHOXpkSE5VYVcxbGJHbHVaVk4wYjJOckxGeHVJQ0J3YjNOMGMxUnBiV1ZzYVc1bFdtVnlieXhjYmlBZ2NHOXpkSE5VYVcxbGJHbHVaVnBsY205QlpuUmxjaXhjYmlBZ2NHOXpkSE5OZFd4MGFTeGNiaUFnY0c5emRITlRhVzVuYkdVc1hHNGdJSEJ2YzNSelEyaHBiR1FzWEc0Z0lHRndhVXh2Wnl4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR052YldKcGJtVlNaV1IxWTJWeWN5aHlaV1IxWTJWeVJtbHNaWE1wTzF4dUlpd2lhVzF3YjNKMElGQnZjM1FnWm5KdmJTQW5ZWEJwTDNOMGIzSmxMMUJ2YzNRbk8xeHVhVzF3YjNKMElGQnZjM1J6SUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlRYjNOMGN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJQ2h6ZEdGMFpUb2dVRzl6ZEZ0ZElEMGdXMTBzSUdGamRHbHZiaWtnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdZV04wYVc5dUxuQnZjM1J6SUQ4Z2JtVjNJRkJ2YzNSektHRmpkR2x2Ymk1d2IzTjBjeWtnT2lCemRHRjBaVHRjYm4wN1hHNGlMQ0pwYlhCdmNuUWdVRzl6ZENCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VUc5emRDYzdYRzVwYlhCdmNuUWdVRzl6ZEhNZ1puSnZiU0FuWVhCcEwzTjBiM0psTDFCdmMzUnpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnS0hOMFlYUmxPaUJRYjNOMFcxMGdQU0JiWFN3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUhOM2FYUmphQ0FvWVdOMGFXOXVMblI1Y0dVcElIdGNiaUFnSUNCallYTmxJQ2RCVUVsZlZFOWZVMFZTVmtWU1cxSkZVVlZGVTFSZE9tTm9ZVzVuWlZSb2NtVmhaQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCdmMzUnpLQ2s3WEc0Z0lDQWdZMkZ6WlNBblUwVlNWa1ZTWDFSUFgwRlFTVnRGVFVsVVhUcG1aWFJqYUZCdmMzUnpKenBjYmlBZ0lDQmpZWE5sSUNkVFJWSldSVkpmVkU5ZlFWQkpXMEpTVDBGRVEwRlRWRjA2Y0c5emRDYzZYRzRnSUNBZ0lDQnBaaUFvWVdOMGFXOXVMbkJ2YzNSelEyaHBiR1FnSmlZZ1lXTjBhVzl1TG5CdmMzUnpRMmhwYkdRdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lXTjBhVzl1TG5Sb2NtVmhaQzVqYUNBOVBUMGdZV04wYVc5dUxuQnZjM1J6UTJocGJHUmJNRjB1WTJncElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXeTR1TG5OMFlYUmxMQ0F1TGk1aFkzUnBiMjR1Y0c5emRITkRhR2xzWkYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oxTkZVbFpGVWw5VVQxOUJVRWxiUlUxSlZGMDZaMlYwVFc5eVpTYzZYRzRnSUNBZ0lDQnBaaUFvWVdOMGFXOXVMbkJ2YzNSelEyaHBiR1FnSmlZZ1lXTjBhVzl1TG5CdmMzUnpRMmhwYkdRdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXeTR1TG1GamRHbHZiaTV3YjNOMGMwTm9hV3hrTENBdUxpNXpkR0YwWlYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjM1JoZEdVN1hHNTlPMXh1SWl3aWFXMXdiM0owSUdOdmJtWWdabkp2YlNBblkyOXRiVzl1TDJOdmJtWW5PMXh1WEc1cGJYQnZjblFnVUc5emRDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlVHOXpkQ2M3WEc1cGJYQnZjblFnVUc5emRITWdabkp2YlNBbllYQnBMM04wYjNKbEwxQnZjM1J6Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ0tITjBZWFJsT2lCUWIzTjBXMTBnUFNCYlhTd2dZV04wYVc5dUtTQTlQaUI3WEc0Z0lITjNhWFJqYUNBb1lXTjBhVzl1TG5SNWNHVXBJSHRjYmlBZ0lDQmpZWE5sSUNkUFRsOURURWxEUzE5TlZVeFVTVk5VVWtWQlRTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TG5CdmMzUnpUWFZzZEdrN1hHNGdJQ0FnWTJGelpTQW5RMHhKUlU1VVgxUlBYMU5GVWxaRlVsdEZUVWxVWFRwamFHRnVaMlZVYUhKbFlXUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRYjNOMGN5Z3BPMXh1SUNBZ0lHTmhjMlVnSjFORlVsWkZVbDlVVDE5QlVFbGJSVTFKVkYwNlptVjBZMmhRYjNOMGN5YzZYRzRnSUNBZ0lDQnBaaUFvWVdOMGFXOXVMbkJ2YzNSelRYVnNkR2tnSmlZZ1lXTjBhVzl1TG5CdmMzUnpUWFZzZEdrdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lXTjBhVzl1TG1Gd2NDNXBjMUp2YjNSRGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiTGk0dVlXTjBhVzl1TG5CdmMzUnpUWFZzZEdsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JqWVhObElDZFRSVkpXUlZKZlZFOWZRVkJKVzBKU1QwRkVRMEZUVkYwNmNHOXpkQ2M2WEc0Z0lDQWdJQ0F2THlCd2IzTjBUWFZzZEduamdhL2xyWkRrdnB2amdhN21pcFhucUwvamdwTGxoYWpqZ2Fib29ham5wTHJqZ1puamdvdmt1NVhtcDVoY2JpQWdJQ0FnSUdsbUlDaGhZM1JwYjI0dWNHOXpkSE5OZFd4MGFTQW1KaUJoWTNScGIyNHVjRzl6ZEhOTmRXeDBhUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTNScGIyNHVZWEJ3TG5KdmIzUkRhQ0E5UFQwZ1lXTjBhVzl1TG5CdmMzUnpUWFZzZEdsYk1GMHVZMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1d5NHVMbk4wWVhSbExDQXVMaTVoWTNScGIyNHVjRzl6ZEhOTmRXeDBhVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjFORlVsWkZVbDlVVDE5QlVFbGJSVTFKVkYwNloyVjBUVzl5WlNjNlhHNGdJQ0FnSUNCcFppQW9ZV04wYVc5dUxuQnZjM1J6VFhWc2RHa2dKaVlnWVdOMGFXOXVMbkJ2YzNSelRYVnNkR2t1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYlc5eVpWQnZjM1JOZFd4cGRDQTlJRnRkTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNXNaVzVuZEdnZ0t5QmhZM1JwYjI0dWNHOXpkSE5OZFd4MGFTNXNaVzVuZEdnZ1BpQmpiMjVtTG1acGJtUlBibVZNYVcxcGRFTnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHMXZjbVZRYjNOMFRYVnNhWFFnUFNCYkxpNHVZV04wYVc5dUxuQnZjM1J6VFhWc2RHa3NJQzR1TG5OMFlYUmxYVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlc5eVpWQnZjM1JOZFd4cGRDNXpiR2xqWlNnd0xDQmpiMjVtTG1acGJtUlBibVZNYVcxcGRFTnVkQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZzdUxpNWhZM1JwYjI0dWNHOXpkSE5OZFd4MGFTd2dMaTR1YzNSaGRHVmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnZlZ4dUlDQnlaWFIxY200Z2MzUmhkR1U3WEc1OU8xeHVJaXdpYVcxd2IzSjBJRkJ2YzNRZ1puSnZiU0FuWVhCcEwzTjBiM0psTDFCdmMzUW5PMXh1YVcxd2IzSjBJRkJ2YzNSelUybHVaMnhsSUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlRYjNOMGMxTnBibWRzWlNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElDaHpkR0YwWlRvZ1VHOXpkRnRkSUQwZ1cxMHNJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQnpkMmwwWTJnZ0tHRmpkR2x2Ymk1MGVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNBblQwNWZRMHhKUTB0ZlRWVk1WRWxUVkZKRlFVMG5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymk1d2IzTjBjMU5wYm1kc1pUdGNiaUFnSUNCallYTmxJQ2RCVUVsZlZFOWZVMFZTVmtWU1cxSkZVVlZGVTFSZE9tTm9ZVzVuWlZSb2NtVmhaQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCdmMzUnpVMmx1WjJ4bEtDazdYRzRnSUNBZ1kyRnpaU0FuVTBWU1ZrVlNYMVJQWDBGUVNWdEZUVWxVWFRwbVpYUmphRkJ2YzNSekp6cGNiaUFnSUNCallYTmxJQ2RUUlZKV1JWSmZWRTlmUVZCSlcwSlNUMEZFUTBGVFZGMDZjRzl6ZENjNlhHNGdJQ0FnSUNCcFppQW9ZV04wYVc5dUxuQnZjM1J6VTJsdVoyeGxJQ1ltSUdGamRHbHZiaTV3YjNOMGMxTnBibWRzWlM1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJMaTR1YzNSaGRHVXNJQzR1TG1GamRHbHZiaTV3YjNOMGMxTnBibWRzWlYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkVFJWSldSVkpmVkU5ZlFWQkpXMFZOU1ZSZE9tZGxkRTF2Y21Vbk9seHVJQ0FnSUNBZ2FXWWdLR0ZqZEdsdmJpNXdiM04wYzFOcGJtZHNaU0FtSmlCaFkzUnBiMjR1Y0c5emRITlRhVzVuYkdVdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXeTR1TG1GamRHbHZiaTV3YjNOMGMxTnBibWRzWlN3Z0xpNHVjM1JoZEdWZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSE4wWVhSbE8xeHVmVHRjYmlJc0ltbHRjRzl5ZENCUWIzTjBJR1p5YjIwZ0oyRndhUzl6ZEc5eVpTOVFiM04wSnp0Y2JtbHRjRzl5ZENCUWIzTjBjMVJwYldWc2FXNWxJR1p5YjIwZ0oyRndhUzl6ZEc5eVpTOVFiM04wYzFScGJXVnNhVzVsSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ0tITjBZWFJsT2lCUWIzTjBXMTBnUFNCYlhTd2dZV04wYVc5dUtTQTlQaUI3WEc0Z0lITjNhWFJqYUNBb1lXTjBhVzl1TG5SNWNHVXBJSHRjYmlBZ0lDQmpZWE5sSUNkQlVFbGZWRTlmVTBWU1ZrVlNXMUpGVVZWRlUxUmRPbU5vWVc1blpWUm9jbVZoWkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnZjM1J6VkdsdFpXeHBibVVvS1R0Y2JpQWdJQ0JqWVhObElDZFZUazFQVlU1VVgxQlBVMVJUWDFSSlRVVk1TVTVGSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJ6ZEdGMFpTNXRZWEFvS0hCMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhCMExtUnBjM0JHYkdjZ1BTQndkQzVqZFhKeVpXNTBWR2x0WlNBOFBTQmhZM1JwYjI0dWJXVmthV0ZEZFhKeVpXNTBWR2x0WlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCME8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ1kyRnpaU0FuUTB4RlFWSmZVRTlUVkZOZlZFbE5SVXhKVGtVbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUZzdUxpNWhZM1JwYjI0dWNHOXpkSE5VYVcxbGJHbHVaVjA3WEc0Z0lDQWdZMkZ6WlNBblUwVlNWa1ZTWDFSUFgwRlFTVnRGVFVsVVhUcG1aWFJqYUZCdmMzUnpKenBjYmlBZ0lDQWdJR2xtSUNoaFkzUnBiMjR1Y0c5emRITlVhVzFsYkdsdVpTQW1KaUJoWTNScGIyNHVjRzl6ZEhOVWFXMWxiR2x1WlM1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJMaTR1YzNSaGRHVXNJQzR1TG1GamRHbHZiaTV3YjNOMGMxUnBiV1ZzYVc1bFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0owNUZXRlJmVUU5VFZGTmZWRWxOUlV4SlRrVW5PbHh1SUNBZ0lDQWdhV1lnS0dGamRHbHZiaTV3YjNOMGMxUnBiV1ZzYVc1bElDWW1JR0ZqZEdsdmJpNXdiM04wYzFScGJXVnNhVzVsTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGc3VMaTV6ZEdGMFpTd2dMaTR1WVdOMGFXOXVMbkJ2YzNSelZHbHRaV3hwYm1WZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNBblVGSkZWbDlRVDFOVVUxOVVTVTFGVEVsT1JTYzZYRzRnSUNBZ0lDQnBaaUFvWVdOMGFXOXVMbkJ2YzNSelZHbHRaV3hwYm1VZ0ppWWdZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVV1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1d5NHVMbUZqZEdsdmJpNXdiM04wYzFScGJXVnNhVzVsWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjFORlVsWkZVbDlVVDE5QlVFbGJRbEpQUVVSRFFWTlVYVHB3YjNOMEp6cGNiaUFnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVMbkJ2YzNSelZHbHRaV3hwYm1VZ0ppWmNiaUFnSUNBZ0lDQWdZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVV1YkdWdVozUm9JRDRnTUNBbUpseHVJQ0FnSUNBZ0lDQmhZM1JwYjI0dWNHOXpkSE5VYVcxbGJHbHVaVnN3WFM1MWFXUWdQVDA5SUdGamRHbHZiaTUxYzJWeUxuVnBaQ0FtSmx4dUlDQWdJQ0FnSUNCaFkzUnBiMjR1Y0c5emRITlVhVzFsYkdsdVpWc3dYUzVqYUNBOVBUMGdZV04wYVc5dUxuUm9jbVZoWkM1amFGeHVJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJMaTR1YzNSaGRHVXNJQzR1TG1GamRHbHZiaTV3YjNOMGMxUnBiV1ZzYVc1bFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oxTkZVbFpGVWw5VVQxOUJVRWxiUlUxSlZGMDZaMlYwVFc5eVpTYzZYRzRnSUNBZ0lDQnBaaUFvWVdOMGFXOXVMbkJ2YzNSelZHbHRaV3hwYm1VZ0ppWWdZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVV1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1d5NHVMbUZqZEdsdmJpNXdiM04wYzFScGJXVnNhVzVsTENBdUxpNXpkR0YwWlYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjM1JoZEdVN1hHNTlPMXh1SWl3aWFXMXdiM0owSUZCdmMzUWdabkp2YlNBbllYQnBMM04wYjNKbEwxQnZjM1FuTzF4dWFXMXdiM0owSUZCdmMzUnpWR2x0Wld4cGJtVlRkRzlqYXlCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VUc5emRITlVhVzFsYkdsdVpWTjBiMk5ySnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ0tITjBZWFJsT2lCUWIzTjBXMTBnUFNCYlhTd2dZV04wYVc5dUtTQTlQaUI3WEc0Z0lITjNhWFJqYUNBb1lXTjBhVzl1TG5SNWNHVXBJSHRjYmlBZ0lDQmpZWE5sSUNkVFJWSldSVkpmVkU5ZlFWQkpXMEpTVDBGRVEwRlRWRjA2Y0c5emRDYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TG5CdmMzUnpWR2x0Wld4cGJtVlRkRzlqYXlBL0lGc3VMaTV6ZEdGMFpTd2dZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVZUZEc5amExMGdPaUJ6ZEdGMFpUdGNiaUFnSUNCallYTmxJQ2REVEVWQlVsOVFUMU5VVTE5VVNVMUZURWxPUlNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWVdOMGFXOXVMbkJ2YzNSelZHbHRaV3hwYm1WVGRHOWpheUEvSUZzdUxpNXpkR0YwWlN3Z1lXTjBhVzl1TG5CdmMzUnpWR2x0Wld4cGJtVlRkRzlqYTEwZ09pQnpkR0YwWlR0Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymk1d2IzTjBjMVJwYldWc2FXNWxVM1J2WTJzZ1B5QnVaWGNnVUc5emRITlVhVzFsYkdsdVpWTjBiMk5yS0dGamRHbHZiaTV3YjNOMGMxUnBiV1ZzYVc1bFUzUnZZMnNwSURvZ2MzUmhkR1U3WEc0Z0lIMWNibjA3WEc0aUxDSnBiWEJ2Y25RZ1VHOXpkQ0JtY205dElDZGhjR2t2YzNSdmNtVXZVRzl6ZENjN1hHNXBiWEJ2Y25RZ1VHOXpkRlJwYldWc2FXNWxXbVZ5YnlCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VUc5emRITlVhVzFsYkdsdVpWcGxjbThuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENBb2MzUmhkR1U2SUZCdmMzUmJYU0E5SUZ0ZExDQmhZM1JwYjI0cElEMCtJSHRjYmlBZ2MzZHBkR05vSUNoaFkzUnBiMjR1ZEhsd1pTa2dlMXh1SUNBZ0lHTmhjMlVnSjFORlVsWkZVbDlVVDE5QlVFbGJRbEpQUVVSRFFWTlVYVHB3YjNOMEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCaFkzUnBiMjR1Y0c5emRITlVhVzFsYkdsdVpWcGxjbThnUHlCYkxpNHVjM1JoZEdVc0lHRmpkR2x2Ymk1d2IzTjBjMVJwYldWc2FXNWxXbVZ5YjEwZ09pQnpkR0YwWlR0Y2JpQWdJQ0JqWVhObElDZERURVZCVWw5UVQxTlVVMTlVU1UxRlRFbE9SU2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVZhWlhKdklEOGdXeTR1TG5OMFlYUmxMQ0JoWTNScGIyNHVjRzl6ZEhOVWFXMWxiR2x1WlZwbGNtOWRJRG9nYzNSaGRHVTdYRzRnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNHVjRzl6ZEhOVWFXMWxiR2x1WlZwbGNtOGdQeUJ1WlhjZ1VHOXpkRlJwYldWc2FXNWxXbVZ5YnloaFkzUnBiMjR1Y0c5emRITlVhVzFsYkdsdVpWcGxjbThwSURvZ2MzUmhkR1U3WEc0Z0lIMWNibjA3WEc0aUxDSnBiWEJ2Y25RZ1VHOXpkQ0JtY205dElDZGhjR2t2YzNSdmNtVXZVRzl6ZENjN1hHNXBiWEJ2Y25RZ1VHOXpkSE5VYVcxbGJHbHVaVnBsY205QlpuUmxjaUJtY205dElDZGhjR2t2YzNSdmNtVXZVRzl6ZEhOVWFXMWxiR2x1WlZwbGNtOUJablJsY2ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElDaHpkR0YwWlRvZ1VHOXpkRnRkSUQwZ1cxMHNJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQnpkMmwwWTJnZ0tHRmpkR2x2Ymk1MGVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNBblUwVlNWa1ZTWDFSUFgwRlFTVnRDVWs5QlJFTkJVMVJkT25CdmMzUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2Ymk1d2IzTjBjMVJwYldWc2FXNWxXbVZ5YjBGbWRHVnlJRDhnV3k0dUxuTjBZWFJsTENCaFkzUnBiMjR1Y0c5emRITlVhVzFsYkdsdVpWcGxjbTlCWm5SbGNsMGdPaUJ6ZEdGMFpUdGNiaUFnSUNCallYTmxJQ2REVEVWQlVsOVFUMU5VVTE5VVNVMUZURWxPUlNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWVdOMGFXOXVMbkJ2YzNSelZHbHRaV3hwYm1WYVpYSnZRV1owWlhJZ1B5QmJMaTR1YzNSaGRHVXNJR0ZqZEdsdmJpNXdiM04wYzFScGJXVnNhVzVsV21WeWIwRm1kR1Z5WFNBNklITjBZWFJsTzF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQnlaWFIxY200Z1lXTjBhVzl1TG5CdmMzUnpWR2x0Wld4cGJtVmFaWEp2UVdaMFpYSWdQeUJ1WlhjZ1VHOXpkSE5VYVcxbGJHbHVaVnBsY205QlpuUmxjaWhoWTNScGIyNHVjRzl6ZEhOVWFXMWxiR2x1WlZwbGNtOUJablJsY2lrZ09pQnpkR0YwWlR0Y2JpQWdmVnh1ZlR0Y2JpSXNJbWx0Y0c5eWRDQlFiM04wY3lCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VUc5emRITW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0FvYzNSaGRHVWdQU0JiWFN3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUd4bGRDQndiM04wY3lBOUlGdGRPMXh1SUNCc1pYUWdjRzl6ZEV4bGJtZDBhQ0E5SURBN1hHNGdJR052Ym5OMElITnZjblJYWVhSamFFTnVkQ0E5SUNoaExDQmlLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHRXVZMmdnUFQwOUlHRmpkR2x2Ymk1aGNIQXVjbTl2ZEVOb0lIeDhJR0l1WTJnZ1BUMDlJR0ZqZEdsdmJpNWhjSEF1Y205dmRFTm9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR0V1YkdsMlpVTnVkQ0E4SUdJdWJHbDJaVU51ZENrZ2NtVjBkWEp1SURFN1hHNGdJQ0FnYVdZZ0tHRXViR2wyWlVOdWRDQStJR0l1YkdsMlpVTnVkQ2tnY21WMGRYSnVJQzB4TzF4dUlDQWdJSEpsZEhWeWJpQXdPMXh1SUNCOU8xeHVYRzRnSUhOM2FYUmphQ0FvWVdOMGFXOXVMblI1Y0dVcElIdGNiaUFnSUNCallYTmxJQ2RUUlZKV1JWSmZWRTlmUVZCSlcwVk5TVlJkT21abGRHTm9VRzl6ZEhNbk9seHVJQ0FnSUNBZ2FXWWdLR0ZqZEdsdmJpNWhjSEF1YVhOTWFXNXJRMmdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMFlYUmxPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J3YjNOMGN5QTlJRkJ2YzNSekxtZGxkRVJwYzNCUWIzTjBjeWhoWTNScGIyNHBPMXh1SUNBZ0lDQWdjRzl6ZEV4bGJtZDBhQ0E5SUhCdmMzUnpJQ1ltSUhCdmMzUnpMbXhsYm1kMGFDQS9JSEJ2YzNSekxteGxibWQwYUNBNklEQTdYRzVjYmlBZ0lDQWdJR2xtSUNod2IzTjBUR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHRjBaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSE4wWVhSbExtMWhjQ2dvY21GdWF5a2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZV04wYVc5dUxuUm9jbVZoWkM1amFDQTlQVDBnY21GdWF5NWphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1eVlXNXJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRjJhV052YmpvZ2NHOXpkSE5iY0c5emRFeGxibWQwYUNBdElERmRMbVpoZG1samIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRnRjRWxrT2lCd2IzTjBjMXR3YjNOMFRHVnVaM1JvSUMwZ01WMHVjM1JoYlhCSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMzUTZJSEJ2YzNSelczQnZjM1JNWlc1bmRHZ2dMU0F4WFM1d2IzTjBMRnh1SUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmhibXM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUdOaGMyVWdKMU5GVWxaRlVsOVVUMTlCVUVsYlFsSlBRVVJEUVZOVVhUcDBkVzVsSnpwY2JpQWdJQ0JqWVhObElDZFRSVkpXUlZKZlZFOWZRVkJKVzBKU1QwRkVRMEZUVkYwNlkyaGhibWRsVkdoeVpXRmtKenBjYmlBZ0lDQmpZWE5sSUNkVFJWSldSVkpmVkU5ZlFWQkpXMEpTVDBGRVEwRlRWRjA2WkdselkyOXVibVZqZENjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnYzNSaGRHVmNiaUFnSUNBZ0lDQWdMbTFoY0Nnb2NtRnVheWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoaFkzUnBiMjR1ZEdoeVpXRmtMbU5vSUQwOVBTQnlZVzVyTG1Ob0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZXlBdUxpNXlZVzVyTENCc2FYWmxRMjUwT2lCaFkzUnBiMjR1ZEdoeVpXRmtMbXhwZG1WRGJuUWdmVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmhibXM3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1YzI5eWRDaHpiM0owVjJGMFkyaERiblFwTzF4dUlDQWdJR05oYzJVZ0oxTkZVbFpGVWw5VVQxOUJVRWxiUWxKUFFVUkRRVk5VWFRwd2IzTjBKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQnpkR0YwWlM1dFlYQW9LSEpoYm1zcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHRmpkR2x2Ymk1d2IzTjBjMXN3WFM1amFDQTlQVDBnY21GdWF5NWphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1eVlXNXJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHbDBiR1U2SUdGamRHbHZiaTV3YjNOMGMxc3dYUzUwYVhSc1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlXMXdTV1E2SUdGamRHbHZiaTV3YjNOMGMxc3dYUzV6ZEdGdGNFbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRjJhV052YmpvZ1lXTjBhVzl1TG5CdmMzUnpXekJkTG1aaGRtbGpiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM04wT2lCaFkzUnBiMjR1Y0c5emRITmJNRjB1Y0c5emRDeGNiaUFnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVlXNXJPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdZMkZ6WlNBblUwVlNWa1ZTWDFSUFgwRlFTVnRGVFVsVVhUcHlZVzVySnpwY2JpQWdJQ0FnSUM4dklITjBZWFJsNDRHb1lXTjBhVzl1TG5KaGJtdmpnYTdrdUtIbWxybmxyWmpsbktqamdabmpnb3Zsb0xUbGtJaGNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTQW1KaUJ6ZEdGMFpTNXNaVzVuZEdnZ1BpQXdJQ1ltSUdGamRHbHZiaTV5WVc1cklDWW1JR0ZqZEdsdmJpNXlZVzVyTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtVjNVbUZ1YTNNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbUZ1YTBOdWRDQTlJR0ZqZEdsdmJpNXlZVzVyTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnYkdWMElHeGhjM1JRYjNOMElEMGdZV04wYVc5dUxuSmhibXRiTUYwN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2djbUZ1YTBOdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUc1bGQxSmhibXNnUFNCaFkzUnBiMjR1Y21GdWExdHBYVHRjYmlBZ0lDQWdJQ0FnSUNCc1lYTjBVRzl6ZENBOUlHNWxkMUpoYm1zdWRYQmtZWFJsVkdsdFpTQStJR3hoYzNSUWIzTjBMblZ3WkdGMFpWUnBiV1VnUHlCdVpYZFNZVzVySURvZ2JHRnpkRkJ2YzNRN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JtVjNVbUZ1YXk1amFDQTlQVDBnYzNSaGRHVmJNRjB1WTJncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQxSmhibXNnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM0dUxtNWxkMUpoYm1zc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGRtVkRiblE2SUhOMFlYUmxXekJkTG14cGRtVkRiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnVaWGRTWVc1cmN5NXdkWE5vS0c1bGQxSmhibXNwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdibVYzVW1GdWEzTXVjMjl5ZENoemIzSjBWMkYwWTJoRGJuUXBPMXh1SUNBZ0lDQWdJQ0J1WlhkU1lXNXJjMXN3WFM1bVlXbGpiMjRnUFNCc1lYTjBVRzl6ZEM1bVlYWnBZMjl1TzF4dUlDQWdJQ0FnSUNCdVpYZFNZVzVyYzFzd1hTNXdiM04wSUQwZ2JHRnpkRkJ2YzNRdWNHOXpkRHRjYmlBZ0lDQWdJQ0FnYm1WM1VtRnVhM05iTUYwdWMzUmhiWEJKWkNBOUlHeGhjM1JRYjNOMExuTjBZVzF3U1dRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYZFNZVzVyY3p0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNHVjbUZ1YXlBL0lHRmpkR2x2Ymk1eVlXNXJJRG9nYzNSaGRHVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNHVjbUZ1YXlBL0lHRmpkR2x2Ymk1eVlXNXJJRG9nYzNSaGRHVTdYRzRnSUgxY2JuMDdYRzRpTENKcGJYQnZjblFnVTJWMGRHbHVaeUJtY205dElDZGhjR2t2YzNSdmNtVXZVMlYwZEdsdVp5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJQ2h6ZEdGMFpTQTlJRzVsZHlCVFpYUjBhVzVuS0Nrc0lHRmpkR2x2YmlrZ1BUNGdlMXh1SUNCeVpYUjFjbTRnWVdOMGFXOXVMbk5sZEhScGJtY2dQeUJ6ZEdGMFpTNXRaWEpuWlNoaFkzUnBiMjR1YzJWMGRHbHVaeWtnT2lCemRHRjBaVHRjYm4wN1hHNGlMQ0pwYlhCdmNuUWdWR2h5WldGa0lHWnliMjBnSjJGd2FTOXpkRzl5WlM5VWFISmxZV1FuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENBb2MzUmhkR1VnUFNCdVpYY2dWR2h5WldGa0tIdDlMQ0I3ZlNrc0lHRmpkR2x2YmlrZ1BUNGdlMXh1SUNCemQybDBZMmdnS0dGamRHbHZiaTUwZVhCbEtTQjdYRzRnSUNBZ1kyRnpaU0FuVTBWVVZWQkZSRjlCVUVsZlUxUlBVa1VuT2x4dUlDQWdJR05oYzJVZ0oxTkZVbFpGVWw5VVQxOUJVRWxiUlUxSlZGMDZkSFZ1WlNjNlhHNGdJQ0FnWTJGelpTQW5VMFZTVmtWU1gxUlBYMEZRU1Z0RlRVbFVYVHBqYUdGdVoyVlVhSEpsWVdRbk9seHVJQ0FnSUdOaGMyVWdKMU5GVWxaRlVsOVVUMTlCVUVsYlJVMUpWRjA2Wm1WMFkyaFFiM04wY3ljNlhHNGdJQ0FnWTJGelpTQW5VMFZTVmtWU1gxUlBYMEZRU1Z0RlRVbFVYVHAxY0dSaGRHVlVhSEpsWVdSVFpYSjJaWEpOWlhSaGN5YzZYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRlJvY21WaFpDaGhZM1JwYjI0dWRHaHlaV0ZrS1R0Y2JpQWdJQ0JqWVhObElDZFRSVkpXUlZKZlZFOWZRVkJKVzBKU1QwRkVRMEZUVkYwNmRIVnVaU2M2WEc0Z0lDQWdZMkZ6WlNBblUwVlNWa1ZTWDFSUFgwRlFTVnRDVWs5QlJFTkJVMVJkT21Ob1lXNW5aVlJvY21WaFpDYzZYRzRnSUNBZ1kyRnpaU0FuVTBWU1ZrVlNYMVJQWDBGUVNWdENVazlCUkVOQlUxUmRPbVJwYzJOdmJtNWxZM1FuT2x4dUlDQWdJQ0FnTHk4ZzQ0T200NE84NDRLMjQ0Tzg0NEdNNUx1SzU0Kys1WnlvNDRDQjZaYXk2S2FuNDRHWDQ0R200NEdFNDRLTGRHaHlaV0ZrNDRHdTVhQzA1WkNJWEc0Z0lDQWdJQ0JwWmlBb2MzUmhkR1V1WTJnZ1BUMDlJR0ZqZEdsdmJpNTBhSEpsWVdRdVkyZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJpNTBhSEpsWVdRZ1B5QnpkR0YwWlM1dFpYSm5aU2hoWTNScGIyNHVkR2h5WldGa0tTQTZJSE4wWVhSbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUdOaGMyVWdKMU5GVWxaRlVsOVVUMTlCVUVsYlFsSlBRVVJEUVZOVVhUcHdiM04wSnpwY2JpQWdJQ0FnSUM4dklPT0RwdU9Edk9PQ3R1T0R2T09Cak9TN2l1ZVB2dVdjcU9PQWdlbVdzdWltcCtPQmwrT0JwdU9CaE9PQ2kzUm9jbVZoWk9PQnJ1V2d0T1dRaUZ4dUlDQWdJQ0FnYVdZZ0tITjBZWFJsTG1Ob0lEMDlQU0JoWTNScGIyNHVkR2h5WldGa0xtTm9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNHVkR2h5WldGa0lEOGdjM1JoZEdVdWJXVnlaMlVvWVdOMGFXOXVMblJvY21WaFpDa2dPaUJ6ZEdGMFpUdGNiaUFnSUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2MzUmhkR1U3WEc1OU8xeHVJaXdpYVcxd2IzSjBJRlJvY21WaFpDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlZHaHlaV0ZrSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ0tITjBZWFJsSUQwZ2JtVjNJRlJvY21WaFpDaDdmU3dnZTMwcExDQmhZM1JwYjI0cElEMCtJSHRjYmlBZ2NtVjBkWEp1SUdGamRHbHZiaTUwYUhKbFlXUkVaWFJoYVd3Z1B5QnpkR0YwWlM1dFpYSm5aU2hoWTNScGIyNHVkR2h5WldGa1JHVjBZV2xzS1NBNklITjBZWFJsTzF4dWZUdGNiaUlzSW1sdGNHOXlkQ0JVYUhKbFlXUnpJR1p5YjIwZ0oyRndhUzl6ZEc5eVpTOVVhSEpsWVdSekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdLSE4wWVhSbElEMGdibVYzSUZSb2NtVmhaSE1vS1N3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUhKbGRIVnliaUJoWTNScGIyNHVkR2h5WldGa2N5QS9JSE4wWVhSbExtMWxjbWRsS0dGamRHbHZiaTUwYUhKbFlXUnpLU0E2SUhOMFlYUmxPMXh1ZlR0Y2JpSXNJbWx0Y0c5eWRDQlFiM04wSUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlRYjNOMEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdLSE4wWVhSbE9pQlFiM04wSUQwZ2JtVjNJRkJ2YzNRb0tTd2dZV04wYVc5dUtTQTlQaUI3WEc0Z0lDOHZJR052Ym5OdmJHVXViRzluS0dGamRHbHZiaTUwZVhCbExDQmhZM1JwYjI0cE8xeHVJQ0J6ZDJsMFkyZ2dLR0ZqZEdsdmJpNTBlWEJsS1NCN1hHNGdJQ0FnWTJGelpTQW5VMFZTVmtWU1gxUlBYMEZRU1Z0RlRVbFVYVHAwZFc1bEp6cGNiaUFnSUNBZ0lHbG1JQ2hoWTNScGIyNHVkR2h5WldGa0xteGhjM1JRYjNOMExtTm9JRDA5UFNBbkp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCdmMzUW9lMXh1SUNBZ0lDQWdJQ0FnSUdOb09pQmhZM1JwYjI0dWRHaHlaV0ZrTG1Ob0xGeHVJQ0FnSUNBZ0lDQWdJR05vY3pvZ1lXTjBhVzl1TG5Sb2NtVmhaQzVqYUhNc1hHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklHRmpkR2x2Ymk1MGFISmxZV1F1ZEdsMGJHVXNYRzRnSUNBZ0lDQWdJQ0FnWm1GMmFXTnZiam9nWVdOMGFXOXVMblJvY21WaFpDNW1ZWFpwWTI5dUxGeHVJQ0FnSUNBZ0lDQjlJR0Z6SUZCdmMzUXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRYjNOMEtHRmpkR2x2Ymk1MGFISmxZV1F1YkdGemRGQnZjM1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJR05oYzJVZ0oxTkZVbFpGVWw5VVQxOUJVRWxiUWxKUFFVUkRRVk5VWFRwMGRXNWxKenBjYmlBZ0lDQmpZWE5sSUNkVFJWSldSVkpmVkU5ZlFWQkpXMEpTVDBGRVEwRlRWRjA2WTJoaGJtZGxWR2h5WldGa0p6cGNiaUFnSUNCallYTmxJQ2RUUlZKV1JWSmZWRTlmUVZCSlcwSlNUMEZFUTBGVFZGMDZaR2x6WTI5dWJtVmpkQ2M2WEc0Z0lDQWdJQ0JqYjI1emRDQjdJSFJvY21WaFpDQjlJRDBnWVdOMGFXOXVPMXh1SUNBZ0lDQWdhV1lnS0hSb2NtVmhaQzVqYUNBOVBUMGdjM1JoZEdVdVkyZ3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjRzl6ZENBOUlIc2dMaTR1YzNSaGRHVXNJR3hwZG1WRGJuUTZJSFJvY21WaFpDNXNhWFpsUTI1MElIMGdZWE1nVUc5emREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRYjNOMEtIQnZjM1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ1kyRnpaU0FuVTBWU1ZrVlNYMVJQWDBGUVNWdENVazlCUkVOQlUxUmRPbkJ2YzNRbk9seHVJQ0FnSUNBZ1kyOXVjM1FnY0c5emRDQTlJR0ZqZEdsdmJpNXdiM04wYzFzd1hUdGNiaUFnSUNBZ0lHbG1JQ2h3YjNOMExtTm9JRDA5UFNCemRHRjBaUzVqYUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ2YzNRb2UxeHVJQ0FnSUNBZ0lDQWdJQzR1TG5OMFlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUhScGRHeGxPaUJ3YjNOMExuUnBkR3hsTEZ4dUlDQWdJQ0FnSUNBZ0lITjBZVzF3U1dRNklIQnZjM1F1YzNSaGJYQkpaQ3hjYmlBZ0lDQWdJQ0FnSUNCbVlYWnBZMjl1T2lCd2IzTjBMbVpoZG1samIyNHNYRzRnSUNBZ0lDQWdJQ0FnY0c5emREb2djRzl6ZEM1d2IzTjBMRnh1SUNBZ0lDQWdJQ0I5SUdGeklGQnZjM1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ6ZEdGMFpUdGNibjA3WEc0aUxDSnBiWEJ2Y25RZ1ZYTmxjaUJtY205dElDZGhjR2t2YzNSdmNtVXZWWE5sY2ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElDaHpkR0YwWlNBOUlHNWxkeUJWYzJWeUtDa3NJR0ZqZEdsdmJpa2dQVDRnZTF4dUlDQnlaWFIxY200Z1lXTjBhVzl1TG5WelpYSWdQeUJ6ZEdGMFpTNXRaWEpuWlNoaFkzUnBiMjR1ZFhObGNpa2dPaUJ6ZEdGMFpUdGNibjA3WEc0aUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJCWTNScGIyNU1iMmR6SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRnRkTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1UyTm9aVzFoSUdaeWIyMGdKMk52YlcxdmJpOVRZMmhsYldFbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCQmJtRnNlWHBsSUdWNGRHVnVaSE1nVTJOb1pXMWhJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxek9pQmhibmtnUFNCN2ZTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnWTI5dWMzUWdiR2wyWlVOdWRDQTlJREE3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxLSHNnYkdsMlpVTnVkQ0I5S1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGTmphR1Z0WVNCbWNtOXRJQ2RqYjIxdGIyNHZVMk5vWlcxaEp6dGNibHh1YVcxd2IzSjBJRkJ2YzNRZ1puSnZiU0FuWVhCcEwzTjBiM0psTDFCdmMzUW5PMXh1YVcxd2IzSjBJRlJvY21WaFpDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlZHaHlaV0ZrSnp0Y2JseHVaWGh3YjNKMElIUjVjR1VnUm5KdmJWUjVjR1VnUFNBblEyZ25JSHdnSjBKaFkydFViMUp2YjNSRGFDY2dmQ0FuVkc5TlpXUnBZU2NnZkNBblRHbHVhM01uSUh3Z0oyWnBibVJOWldScFlVTm9KeUI4SUNjbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCQmNIQWdaWGgwWlc1a2N5QlRZMmhsYldFZ2UxeHVJQ0J6ZEdGMGFXTWdaMlYwSUdSbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZCdmMzUXVaR1ZtWVhWc2RFWnBibVJKWkR0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElHUnBjM0JVYUhKbFlXUlVlWEJsVkdsdFpXeHBibVVvS1RvZ0oxUnBiV1ZzYVc1bEp5QjdYRzRnSUNBZ2NtVjBkWEp1SUNkVWFXMWxiR2x1WlNjN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRDQmthWE53VkdoeVpXRmtWSGx3WlZOcGJtZHNaU2dwT2lBblUybHVaMnhsSnlCN1hHNGdJQ0FnY21WMGRYSnVJQ2RUYVc1bmJHVW5PMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnWkdsemNGUm9jbVZoWkZSNWNHVk5kV3gwYVNncE9pQW5UWFZzZEdrbklIdGNiaUFnSUNCeVpYUjFjbTRnSjAxMWJIUnBKenRjYmlBZ2ZWeHVJQ0J6ZEdGMGFXTWdaMlYwSUdScGMzQlVhSEpsWVdSVWVYQmxRMmhwYkdRb0tUb2dKME5vYVd4a0p5QjdYRzRnSUNBZ2NtVjBkWEp1SUNkRGFHbHNaQ2M3WEc0Z0lIMWNiaUFnYzNSaGRHbGpJR2RsZENCa2FYTndWR2h5WldGa1ZIbHdaVXh2WjNNb0tUb2dKMHh2WjNNbklIdGNiaUFnSUNCeVpYUjFjbTRnSjB4dlozTW5PMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnYldWa2FXRlVZV2RVZVhCbFRtOG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZG9kRzFzSnp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElHMWxaR2xoVkdGblZIbHdaVUYxWkdsdktDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbllYVmthVzhuTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ2JXVmthV0ZVWVdkVWVYQmxWbWxrWlc4b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNkMmFXUmxieWM3WEc0Z0lIMWNiaUFnYzNSaGRHbGpJR2RsZENCdFpXUnBZVlI1Y0dWTmNETW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZHRjRE1uTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ2JXVmthV0ZVZVhCbFRYQTBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5iWEEwSnp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElHMWxaR2xoVkhsd1pVMDBZU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMjAwWVNjN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRDQnRaV1JwWVVOb2N5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z1cwRndjQzV0WldScFlWUjVjR1ZOY0RNc0lFRndjQzV0WldScFlWUjVjR1ZOY0RRc0lFRndjQzV0WldScFlWUjVjR1ZOTkdGZE8xeHVJQ0I5WEc0Z0lITjBZWFJwWXlCblpYUWdiV1ZrYVdGRGFGUmhaMVI1Y0dWektDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNCYlFYQndMbTFsWkdsaFZIbHdaVTF3TTEwNklFRndjQzV0WldScFlWUmhaMVI1Y0dWQmRXUnBieXhjYmlBZ0lDQWdJRnRCY0hBdWJXVmthV0ZVZVhCbFRYQTBYVG9nUVhCd0xtMWxaR2xoVkdGblZIbHdaVlpwWkdWdkxGeHVJQ0FnSUNBZ1cwRndjQzV0WldScFlWUjVjR1ZOTkdGZE9pQkJjSEF1YldWa2FXRlVZV2RVZVhCbFFYVmthVzhzWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVJQ0J6ZEdGMGFXTWdaMlYwVFdWa2FXRlVlWEJsS0hOeVl5d2djR0Z5WVcxektTQjdYRzRnSUNBZ2FXWWdLSEJoY21GdGN5QW1KaUJ3WVhKaGJYTXVZMmhVZVhCbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NHRnlZVzF6TG1Ob1ZIbHdaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUVGd2NDNW5aWFJOWldScFlWUjVjR1ZHY205dFUzSmpLSE55WXlrN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRFMWxaR2xoVkhsd1pVWnliMjFUY21Nb2MzSmpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JXVmthV0ZEYUZSaFoxUjVjR1ZMWlhseklEMGdUMkpxWldOMExtdGxlWE1vUVhCd0xtMWxaR2xoUTJoVVlXZFVlWEJsY3lrN1hHNGdJQ0FnWTI5dWMzUWdiV1ZrYVdGRGFGUmhaMVI1Y0dWTVpXNW5kR2dnUFNCdFpXUnBZVU5vVkdGblZIbHdaVXRsZVhNdWJHVnVaM1JvTzF4dUlDQWdJR3hsZENCdFpXUnBZVlI1Y0dVZ1BTQW5hSFJ0YkNjN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdFpXUnBZVU5vVkdGblZIbHdaVXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0J5WldkRmVIQWdQU0J1WlhjZ1VtVm5SWGh3S0dBdUpIdHRaV1JwWVVOb1ZHRm5WSGx3WlV0bGVYTmJhVjE5SkdBcE8xeHVJQ0FnSUNBZ2FXWWdLSE55WXk1dFlYUmphQ2h5WldkRmVIQXBLU0I3WEc0Z0lDQWdJQ0FnSUcxbFpHbGhWSGx3WlNBOUlFRndjQzV0WldScFlVTm9WR0ZuVkhsd1pYTmJiV1ZrYVdGRGFGUmhaMVI1Y0dWTFpYbHpXMmxkWFR0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdFpXUnBZVlI1Y0dVN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUhaaGJHbGtTVzV3ZFhSUWIzTjBLSFpoYkhWbEtTQjdYRzRnSUNBZ2FXWWdLQzljWEhKY1hHNGtmRnhjYmlSOFhGeHlKQzluYVcwdWRHVnpkQ2gyWVd4MVpTa3BJSEpsZEhWeWJpQW5URUZUVkNCVVdWQkZJRUpTUlVGTElFeEpUa1V1Snp0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ2RtRnNhV1JRYjNOMEtIWmhiSFZsS1NCN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsSUQwOVBTQW5KeWtnY21WMGRYSnVJQ2RPVHlCSlRsQlZWQ0JRVDFOVUp6dGNiaUFnSUNCcFppQW9MMTVjWEhKY1hHNHJKSHhjWEc0ckpIeGNYSElySkM5bkxuUmxjM1FvZG1Gc2RXVXBLU0J5WlhSMWNtNGdKMDlPVEZrZ1RrVlhJRXhKVGtVbk8xeHVJQ0FnSUdsbUlDZ3ZYbHhjY3lza0wyY3VkR1Z6ZENoMllXeDFaU2twSUhKbGRIVnliaUFuYjI1c2VTQnpjR0ZqWlNjN1hHNGdJQ0FnYVdZZ0tDOWVYRnh5WEZ4dUt5aGNYSE44WEZ4VEtTc2tmRjVjWEc0cktGeGNjM3hjWEZNcEt5UjhYbHhjY2lzb1hGeHpmRnhjVXlrckpDOHVkR1Z6ZENoMllXeDFaU2twSUhKbGRIVnliaUFuUlUxUVZGa2dVRTlUVkNjN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHZGxkRmRwWkhSb0tIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2QybHVaRzkzSUQwOVBTQW5iMkpxWldOMEp5QW1KaUIzYVc1a2IzY3VhVzV1WlhKWGFXUjBhQ2tnY21WMGRYSnVJSGRwYm1SdmR5NXBibTVsY2xkcFpIUm9PMXh1SUNBZ0lHbG1JQ2h3WVhKaGJYTXVkMmxrZEdncElIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjR0Z5WVcxekxuZHBaSFJvSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHRnlZVzF6TG5kcFpIUm9MbWx1WkdWNFQyWW9KM0I0SnlrZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCT2RXMWlaWElvY0dGeVlXMXpMbmRwWkhSb0xuSmxjR3hoWTJVb0ozQjRKeXdnSnljcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIQmhjbUZ0Y3k1M2FXUjBhRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SURBN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBTR1ZwWjJoMEtIQmhjbUZ0Y3lBOUlIdDlLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUNkdlltcGxZM1FuSUNZbUlIZHBibVJ2ZHk1cGJtNWxja2hsYVdkb2RDa2djbVYwZFhKdUlIZHBibVJ2ZHk1cGJtNWxja2hsYVdkb2REdGNiaUFnSUNCeVpYUjFjbTRnTUR0Y2JpQWdmVnh1WEc0Z0lHbGtPaUJ6ZEhKcGJtYzdYRzVjYmlBZ0x5OGc0NEs1NDRPczQ0T0Q0NE9KNVorNjVweXM2WmFpNllDalhHNGdJR2x6VW05dmRFTm9PaUJpYjI5c1pXRnVPMXh1SUNCcGMweHBibXREYURvZ1ltOXZiR1ZoYmp0Y2JpQWdhWE5OWldScFlVTm9PaUJpYjI5c1pXRnVPMXh1SUNCcGMxUjFibVU2SUdKdmIyeGxZVzQ3WEc0Z0lISnZiM1JEYURvZ2MzUnlhVzVuTzF4dUlDQnliMjkwVkdsMGJHVTZJSE4wY21sdVp6dGNiaUFnWTJoVWVYQmxPaUFuZG1sa1pXOG5JSHdnSjJGMVpHbHZKeUI4SUNkb2RHMXNKenRjYmlBZ1pHbHpjRlJvY21WaFpGUjVjR1U2SUNkTmRXeDBhU2NnZkNBblUybHVaMnhsSnlCOElDZERhR2xzWkNjZ2ZDQW5WR2x0Wld4cGJtVW5JSHdnSjB4dlozTW5PMXh1SUNCMGRXNWxaRU5vT2lCemRISnBibWM3WEc0Z0lHMTFiSFJwYzNSeVpXRnRPaUJpYjI5c1pXRnVPMXh1WEc0Z0lDOHZJT2FLbGVlb3YrYURoZVdnc1Z4dUlDQm1hVzVrVkhsd1pUb2dKMmgwYld3bklId2dKMjF3TXljZ2ZDQW5iWEEwSnlCOElDZHROR0VuSUh3Z0oyRjFaR2x2SnlCOElDZDJhV1JsYnljN1hHNGdJRzltWm5ObGRFWnBibVJKWkRvZ2MzUnlhVzVuTzF4dUlDQnZabVp6WlhSVWFXMWxiR2x1WlVacGJtUkpaRG9nYzNSeWFXNW5JRDBnVUc5emRDNWtaV1poZFd4MFJtbHVaRWxrTzF4dUlDQnZabVp6WlhSVGFXNW5iR1ZHYVc1a1NXUTZJSE4wY21sdVp5QTlJRkJ2YzNRdVpHVm1ZWFZzZEVacGJtUkpaRHRjYmlBZ2IyWm1jMlYwVFhWc2RHbEdhVzVrU1dRNklITjBjbWx1WnlBOUlGQnZjM1F1WkdWbVlYVnNkRVpwYm1SSlpEdGNiaUFnYjJabWMyVjBRMmhwYkdSR2FXNWtTV1E2SUhOMGNtbHVaeUE5SUZCdmMzUXVaR1ZtWVhWc2RFWnBibVJKWkR0Y2JpQWdiMlptYzJWMFRHOW5jMFpwYm1SSlpEb2djM1J5YVc1bklEMGdVRzl6ZEM1a1pXWmhkV3gwUm1sdVpFbGtPMXh1WEc0Z0lDOHZJT1dGcGVXS20rZUt0dWFGaTF4dUlDQnBibkIxZEZCdmMzUTZJSE4wY21sdVp6dGNiaUFnYVc1d2RYUlRkR0Z0Y0Vsa09pQnpkSEpwYm1jZ2ZDQnVkVzFpWlhJN1hHNGdJR2x1Y0hWMFEzVnljbVZ1ZEZScGJXVTZJRzUxYldKbGNqdGNiaUFnYVc1d2RYUlRaV0Z5WTJnNklITjBjbWx1Wnp0Y2JseHVJQ0F2THlEamdaM2pnYTdrdTVaY2JpQWdhWE5VYjJkbmJHVk5kV3gwYVhOMGNtVmhiVG9nWW05dmJHVmhianRjYmlBZ2FYTlNZVzVyUkdWMFlXbHNUVzlrWlRvZ1ltOXZiR1ZoYmp0Y2JpQWdZV04wYVc5dVpXUTZJSE4wY21sdVp6dGNiaUFnWkdWaWRXYzZJSE4wY21sdVp6dGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdZWEpoYlhNNklHRnVlU0E5SUh0OUxDQmpZV3hzSUQwZ0p5Y3BJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ0x5OGc1cnFXNVlLWlhHNGdJQ0FnWTI5dWMzUWdZMmdnUFNCd1lYSmhiWE11WTJnZ1B5QndZWEpoYlhNdVkyZ2dPaUFuSnp0Y2JseHVJQ0FnSUM4dklFbEVYRzRnSUNBZ1kyOXVjM1FnYVdRZ1BTQndZWEpoYlhNdWFXUWdQeUJ3WVhKaGJYTXVhV1FnT2lBbkp6dGNibHh1SUNBZ0lDOHZJT09DdWVPRHJPT0RnK09EaWVXZnV1YWNyT21Xb3VtQW8xeHVJQ0FnSUdOdmJuTjBJR2x6VkhWdVpTQTlJRk5qYUdWdFlTNXBjMU5sZENod1lYSmhiWE11YVhOVWRXNWxLU0EvSUhCaGNtRnRjeTVwYzFSMWJtVWdPaUJtWVd4elpUdGNiaUFnSUNCamIyNXpkQ0JwYzAxbFpHbGhRMmdnUFNCVFkyaGxiV0V1YVhOVFpYUW9jR0Z5WVcxekxtbHpUV1ZrYVdGRGFDa2dQeUJ3WVhKaGJYTXVhWE5OWldScFlVTm9JRG9nUVhCd0xtZGxkRWx6VFdWa2FXRkRhQ2hqYUNrN1hHNGdJQ0FnWTI5dWMzUWdhWE5NYVc1clEyZ2dQU0JUWTJobGJXRXVhWE5UWlhRb2NHRnlZVzF6TG1selRHbHVhME5vS1NBL0lIQmhjbUZ0Y3k1cGMweHBibXREYUNBNklHWmhiSE5sTzF4dUlDQWdJR052Ym5OMElISnZiM1JEYUNBOUlIQmhjbUZ0Y3k1eWIyOTBRMmdnUHlCd1lYSmhiWE11Y205dmRFTm9JRG9nWTJnN1hHNGdJQ0FnWTI5dWMzUWdhWE5TYjI5MFEyZ2dQU0JUWTJobGJXRXVhWE5UWlhRb2NHRnlZVzF6TG1selVtOXZkRU5vS1NBL0lIQmhjbUZ0Y3k1cGMxSnZiM1JEYUNBNklISnZiM1JEYUNBOVBUMGdZMmc3WEc0Z0lDQWdZMjl1YzNRZ2NtOXZkRlJwZEd4bElEMGdjR0Z5WVcxekxuSnZiM1JVYVhSc1pTQS9JSEJoY21GdGN5NXliMjkwVkdsMGJHVWdPaUFuZEdGc2EyNG5PMXh1SUNBZ0lHTnZibk4wSUhOeVl5QTlJRUZ3Y0M1blpYUk5aV1JwWVZOeVl5aHdZWEpoYlhNdWNISnZkRzlqYjJ3c0lHTm9LVHRjYmlBZ0lDQmpiMjV6ZENCamFGUjVjR1VnUFNCQmNIQXVaMlYwVFdWa2FXRlVlWEJsS0hOeVl5d2djR0Z5WVcxektUdGNiaUFnSUNCamIyNXpkQ0IwZFc1bFpFTm9JRDBnY0dGeVlXMXpJQ1ltSUhCaGNtRnRjeTUwZFc1bFpFTm9JRDhnY0dGeVlXMXpMblIxYm1Wa1EyZ2dPaUFuSnp0Y2JpQWdJQ0JqYjI1emRDQmthWE53VkdoeVpXRmtWSGx3WlNBOUlFRndjQzVuWlhSRWFYTndWR2h5WldGa1ZIbHdaU2h3WVhKaGJYTXNJR2x6VFdWa2FXRkRhQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JYVnNkR2x6ZEhKbFlXMGdQU0JUWTJobGJXRXVhWE5UWlhRb2NHRnlZVzF6TG0xMWJIUnBjM1J5WldGdEtTQS9JSEJoY21GdGN5NXRkV3gwYVhOMGNtVmhiU0E2SUhSeWRXVTdYRzVjYmlBZ0lDQXZMeURtaXBYbnFML21nNFhsb0xGY2JpQWdJQ0JqYjI1emRDQm1hVzVrVkhsd1pTQTlJSEJoY21GdGN5QW1KaUJ3WVhKaGJYTXVabWx1WkZSNWNHVWdQeUJ3WVhKaGJYTXVabWx1WkZSNWNHVWdPaUJVYUhKbFlXUXVabWx1WkZSNWNHVkJiR3c3WEc0Z0lDQWdZMjl1YzNRZ2IyWm1jMlYwUm1sdVpFbGtJRDBnY0dGeVlXMXpJQ1ltSUhCaGNtRnRjeTV2Wm1aelpYUkdhVzVrU1dRZ1B5QndZWEpoYlhNdWIyWm1jMlYwUm1sdVpFbGtJRG9nUVhCd0xtUmxabUYxYkhSUFptWnpaWFJHYVc1a1NXUTdYRzRnSUNBZ1kyOXVjM1FnYjJabWMyVjBWR2x0Wld4cGJtVkdhVzVrU1dRZ1BTQndZWEpoYlhNZ0ppWWdjR0Z5WVcxekxtOW1abk5sZEZScGJXVnNhVzVsUm1sdVpFbGtJRDhnY0dGeVlXMXpMbTltWm5ObGRGUnBiV1ZzYVc1bFJtbHVaRWxrSURvZ1FYQndMbVJsWm1GMWJIUlBabVp6WlhSR2FXNWtTV1E3WEc0Z0lDQWdZMjl1YzNRZ2IyWm1jMlYwVTJsdVoyeGxSbWx1WkVsa0lEMGdjR0Z5WVcxeklDWW1JSEJoY21GdGN5NXZabVp6WlhSVGFXNW5iR1ZHYVc1a1NXUWdQeUJ3WVhKaGJYTXViMlptYzJWMFUybHVaMnhsUm1sdVpFbGtJRG9nUVhCd0xtUmxabUYxYkhSUFptWnpaWFJHYVc1a1NXUTdYRzRnSUNBZ1kyOXVjM1FnYjJabWMyVjBUWFZzZEdsR2FXNWtTV1FnUFNCd1lYSmhiWE1nSmlZZ2NHRnlZVzF6TG05bVpuTmxkRTExYkhScFJtbHVaRWxrSUQ4Z2NHRnlZVzF6TG05bVpuTmxkRTExYkhScFJtbHVaRWxrSURvZ1FYQndMbVJsWm1GMWJIUlBabVp6WlhSR2FXNWtTV1E3WEc0Z0lDQWdZMjl1YzNRZ2IyWm1jMlYwUTJocGJHUkdhVzVrU1dRZ1BTQndZWEpoYlhNZ0ppWWdjR0Z5WVcxekxtOW1abk5sZEVOb2FXeGtSbWx1WkVsa0lEOGdjR0Z5WVcxekxtOW1abk5sZEVOb2FXeGtSbWx1WkVsa0lEb2dRWEJ3TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNGdJQ0FnWTI5dWMzUWdiMlptYzJWMFRHOW5jMFpwYm1SSlpDQTlJSEJoY21GdGN5QW1KaUJ3WVhKaGJYTXViMlptYzJWMFRHOW5jMFpwYm1SSlpDQS9JSEJoY21GdGN5NXZabVp6WlhSTWIyZHpSbWx1WkVsa0lEb2dRWEJ3TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNWNiaUFnSUNBdkx5RGxoYVhsaXB2bmlyYm1oWXRjYmlBZ0lDQmpiMjV6ZENCcGJuQjFkRkJ2YzNRZ1BTQndZWEpoYlhNdWFXNXdkWFJRYjNOMElEOGdjR0Z5WVcxekxtbHVjSFYwVUc5emRDQTZJQ2NuTzF4dUlDQWdJR052Ym5OMElHbHVjSFYwVTNSaGJYQkpaQ0E5SUhCaGNtRnRjeTVwYm5CMWRGTjBZVzF3U1dRZ1B5QndZWEpoYlhNdWFXNXdkWFJUZEdGdGNFbGtJRG9nWm1Gc2MyVTdYRzRnSUNBZ1kyOXVjM1FnYVc1d2RYUkRkWEp5Wlc1MFZHbHRaU0E5SUhCaGNtRnRjeTVwYm5CMWRFTjFjbkpsYm5SVWFXMWxJRDhnY0dGeVlXMXpMbWx1Y0hWMFEzVnljbVZ1ZEZScGJXVWdPaUF3TGpBN1hHNGdJQ0FnWTI5dWMzUWdhVzV3ZFhSVFpXRnlZMmdnUFNCd1lYSmhiWE11YVc1d2RYUlRaV0Z5WTJnZ1B5QndZWEpoYlhNdWFXNXdkWFJUWldGeVkyZ2dPaUFuSnp0Y2JseHVJQ0FnSUM4dklPT0JuZU9CcnVTN2xseHVJQ0FnSUdOdmJuTjBJR2x6Vkc5bloyeGxUWFZzZEdsemRISmxZVzBnUFNCVFkyaGxiV0V1YVhOVFpYUW9jR0Z5WVcxekxtbHpWRzluWjJ4bFRYVnNkR2x6ZEhKbFlXMHBJRDhnY0dGeVlXMXpMbWx6Vkc5bloyeGxUWFZzZEdsemRISmxZVzBnT2lCbVlXeHpaVHRjYmlBZ0lDQmpiMjV6ZENCcGMxSmhibXRFWlhSaGFXeE5iMlJsSUQwZ1UyTm9aVzFoTG1selUyVjBLSEJoY21GdGN5NXBjMUpoYm10RVpYUmhhV3hOYjJSbEtTQS9JSEJoY21GdGN5NXBjMUpoYm10RVpYUmhhV3hOYjJSbElEb2dabUZzYzJVN1hHNGdJQ0FnWTI5dWMzUWdZV04wYVc5dVpXUWdQU0J3WVhKaGJYTWdKaVlnY0dGeVlXMXpMbUZqZEdsdmJtVmtJRDhnY0dGeVlXMXpMbUZqZEdsdmJtVmtJRG9nSnljN1hHNGdJQ0FnWTI5dWMzUWdaR1ZpZFdjZ1BTQlRZMmhsYldFdWFYTlRaWFFvY0dGeVlXMXpMbVJsWW5WbktTQS9JSEJoY21GdGN5NWtaV0oxWnlBNklDY25PMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxLSHRjYmlBZ0lDQWdJQzh2SUVsRVhHNGdJQ0FnSUNCcFpDeGNibHh1SUNBZ0lDQWdMeThnNDRLNTQ0T3M0NE9ENDRPSjVaKzY1cHlzNlphaTZZQ2pYRzRnSUNBZ0lDQnBjMVIxYm1Vc1hHNGdJQ0FnSUNCcGMxSnZiM1JEYUN4Y2JpQWdJQ0FnSUdselRHbHVhME5vTEZ4dUlDQWdJQ0FnYVhOTlpXUnBZVU5vTEZ4dUlDQWdJQ0FnY205dmRFTm9MRnh1SUNBZ0lDQWdjbTl2ZEZScGRHeGxMRnh1SUNBZ0lDQWdZMmhVZVhCbExGeHVJQ0FnSUNBZ1pHbHpjRlJvY21WaFpGUjVjR1VzWEc0Z0lDQWdJQ0IwZFc1bFpFTm9MQ0F2THlCamFHRnVaMlZVYUhKbFlXVGpnYTdwbXB2amdhN21qcVhudHByamdaZmpnYWJqZ1lUamdaL2xqNlRqZ1lUamdybmpnNnpqZzRQamc0bmpnYTVEU0Noc2FYWmxRMjUwNDRLUzQ0T0g0NEt2NDRPcTQ0T2g0NE96NDRPSTQ0R1o0NEtMNTVTbzZZQ1VLZU9CcU9PQmwrT0JwdVMvbmVhTWdWeHVJQ0FnSUNBZ2JYVnNkR2x6ZEhKbFlXMHNJQzh2SUdScGMzQlVhSEpsWVdSVWVYQmw0NEdNUTJocGJHUXNJRlJwYldWc2FXNWw0NEdyNDRHcTQ0R2o0NEdtNDRLQ2JYVnNkR2x6ZEhKbFlXM25pcmJtaFl2amdwTG50cTNtaklIamdabmpnb3RjYmx4dUlDQWdJQ0FnTHk4Z0lDQWdJQ0IwYUhKbFlXUlRZM0p2Ykd4WkxGeHVYRzRnSUNBZ0lDQXZMeURtaXBYbnFML21nNFhsb0xGY2JpQWdJQ0FnSUdacGJtUlVlWEJsTEZ4dUlDQWdJQ0FnYjJabWMyVjBSbWx1WkVsa0xGeHVJQ0FnSUNBZ2IyWm1jMlYwVkdsdFpXeHBibVZHYVc1a1NXUXNYRzRnSUNBZ0lDQnZabVp6WlhSVGFXNW5iR1ZHYVc1a1NXUXNYRzRnSUNBZ0lDQnZabVp6WlhSTmRXeDBhVVpwYm1SSlpDeGNiaUFnSUNBZ0lHOW1abk5sZEVOb2FXeGtSbWx1WkVsa0xGeHVJQ0FnSUNBZ2IyWm1jMlYwVEc5bmMwWnBibVJKWkN4Y2JseHVJQ0FnSUNBZ0x5OGdaR1YwWVdsczVvT0Y1YUN4WEc1Y2JpQWdJQ0FnSUM4dklPV0ZwZVdLbStlS3R1YUZpMXh1SUNBZ0lDQWdhVzV3ZFhSUWIzTjBMRnh1SUNBZ0lDQWdhVzV3ZFhSVGRHRnRjRWxrTEZ4dUlDQWdJQ0FnYVc1d2RYUkRkWEp5Wlc1MFZHbHRaU3hjYmlBZ0lDQWdJR2x1Y0hWMFUyVmhjbU5vTEZ4dVhHNGdJQ0FnSUNBdkx5RGpnWjNqZ2E3a3U1WmNiaUFnSUNBZ0lHbHpWRzluWjJ4bFRYVnNkR2x6ZEhKbFlXMHNYRzRnSUNBZ0lDQnBjMUpoYm10RVpYUmhhV3hOYjJSbExGeHVJQ0FnSUNBZ1lXTjBhVzl1WldRc1hHNGdJQ0FnSUNCa1pXSjFaeXhjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJwYzAxbFpHbGhRMjl1ZEdWdWRGUjVjR1VvWTI5dWRHVnVkRlI1Y0dVcElIdGNiaUFnSUNCeVpYUjFjbTRnUVhCd0xtbHpRWFZrYVc5RGIyNTBaVzUwVkhsd1pTaGpiMjUwWlc1MFZIbHdaU2tnZkh3Z1FYQndMbWx6Vm1sa1pXOURiMjUwWlc1MFZIbHdaU2hqYjI1MFpXNTBWSGx3WlNrN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ2FYTkJkV1JwYjBOdmJuUmxiblJVZVhCbEtHTnZiblJsYm5SVWVYQmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiblJsYm5SVWVYQmxMbWx1WkdWNFQyWW9RWEJ3TG0xbFpHbGhWR0ZuVkhsd1pVRjFaR2x2S1NBK1BTQXdPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2x6Vm1sa1pXOURiMjUwWlc1MFZIbHdaU2hqYjI1MFpXNTBWSGx3WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYjI1MFpXNTBWSGx3WlM1cGJtUmxlRTltS0VGd2NDNXRaV1JwWVZSaFoxUjVjR1ZXYVdSbGJ5a2dQajBnTUR0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCblpYUk5aV1JwWVZOeVl5aHdjbTkwYjJOdmJDd2dZMmdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2ZEc5amIyd2dLeUFuTHljZ0t5QmphQzV5WlhCc1lXTmxLQzljWEM4a0x5d2dKeWNwTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFbHpUV1ZrYVdGRGFDaGphQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQkJjSEF1YldWa2FXRkRhSE11YzI5dFpTZ29aWGgwS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCeVpXZGxlSEFnUFNCdVpYY2dVbVZuUlhod0tHQXVKSHRsZUhSOVhGd3ZKSHd1Skh0bGVIUjlKR0FwTzF4dUlDQWdJQ0FnY21WMGRYSnVJR05vTG0xaGRHTm9LSEpsWjJWNGNDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwUkdsemNGUm9jbVZoWkZSNWNHVW9jR0Z5WVcxekxDQnBjMDFsWkdsaFEyZ3BJSHRjYmlBZ0lDQnBaaUFvY0dGeVlXMXpJQ1ltSUhCaGNtRnRjeTVrYVhOd1ZHaHlaV0ZrVkhsd1pTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIQmhjbUZ0Y3k1a2FYTndWR2h5WldGa1ZIbHdaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6VFdWa2FXRkRhQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnUVhCd0xtUnBjM0JVYUhKbFlXUlVlWEJsVkdsdFpXeHBibVU3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRWEJ3TG1ScGMzQlVhSEpsWVdSVWVYQmxUWFZzZEdrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFOW1abk5sZEVacGJtUkpaQ2g3SUhCdmMzUnpJSDBwSUh0Y2JpQWdJQ0JwWmlBb2NHOXpkSE1nSmlZZ2NHOXpkSE5iTUYwZ0ppWWdjRzl6ZEhOYk1GMHVYMmxrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY0c5emRITmJNRjB1WDJsa08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdVRzl6ZEM1a1pXWmhkV3gwUm1sdVpFbGtPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2RsZEZOMFpYQlViMFJwYzNCVWFISmxZV1JVZVhCbEtIc2dZWEJ3TENCeVlXNXJjeUI5T2lCaGJua3NJSFJvY21WaFpGTjBZWFIxY3pvZ1lXNTVMQ0IwYjBOb09pQnpkSEpwYm1jc0lHTnNhV05yWldRNklFWnliMjFVZVhCbElEMGdKeWNwSUh0Y2JpQWdJQ0JzWlhRZ1lXWjBaWEpFYVhOd1ZHaHlaV0ZrVkhsd1pTQTlJQ2NuTzF4dUlDQWdJR052Ym5OMElHSmxabTl5WlVScGMzQlVhSEpsWVdSVWVYQmxJRDBnWVhCd0lDWW1JR0Z3Y0M1a2FYTndWR2h5WldGa1ZIbHdaU0EvSUdGd2NDNWthWE53VkdoeVpXRmtWSGx3WlNBNklFRndjQzVrYVhOd1ZHaHlaV0ZrVkhsd1pVMTFiSFJwTzF4dUlDQWdJR0Z3Y0NBOUlFRndjQzVuWlhSVGRHVndSR2x6Y0ZSb2NtVmhaRlI1Y0dVb2V5QmhjSEFzSUhKaGJtdHpJSDBzSUhSb2NtVmhaRk4wWVhSMWN5d2dkRzlEYUN3Z1kyeHBZMnRsWkNrN1hHNGdJQ0FnWVdaMFpYSkVhWE53VkdoeVpXRmtWSGx3WlNBOUlHRndjQzVrYVhOd1ZHaHlaV0ZrVkhsd1pUdGNiaUFnSUNCeVpYUjFjbTRnZXlCaGNIQXNJSE4wWlhCVWJ6b2dZQ1I3WW1WbWIzSmxSR2x6Y0ZSb2NtVmhaRlI1Y0dWOUlIUnZJQ1I3WVdaMFpYSkVhWE53VkdoeVpXRmtWSGx3WlgxZ0lIMDdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwVTNSbGNFUnBjM0JVYUhKbFlXUlVlWEJsS0hzZ1lYQndMQ0J5WVc1cmN5QjlMQ0IwYUhKbFlXUlRkR0YwZFhNNklHRnVlU0E5SUh0OUxDQjBiME5vTENCamJHbGphMlZrS1NCN1hHNGdJQ0FnWTI5dWMzUWdiRzluSUQwZ1ptRnNjMlU3WEc0Z0lDQWdZMjl1YzNRZ2RYQmtZWFJsWkVGd2NDQTlJR0Z3Y0NBL0lHRndjQ0E2SUh0OU8xeHVJQ0FnSUhWd1pHRjBaV1JCY0hBdWIyWm1jMlYwUm1sdVpFbGtJRDBnUVhCd0xtUmxabUYxYkhSUFptWnpaWFJHYVc1a1NXUTdYRzVjYmlBZ0lDQnBaaUFvYkc5bktTQmpiMjV6YjJ4bExteHZaeWh5WVc1cmN5azdYRzRnSUNBZ2FXWWdLR3h2WnlrZ1kyOXVjMjlzWlM1c2IyY29kR2h5WldGa1UzUmhkSFZ6S1R0Y2JseHVJQ0FnSUdsbUlDaDBhSEpsWVdSVGRHRjBkWE11YVhOTlpXUnBZVU5vS1NCN1hHNGdJQ0FnSUNCcFppQW9iRzluS1NCamIyNXpiMnhsTG14dlp5Z25RaWNwTzF4dUlDQWdJQ0FnZFhCa1lYUmxaRUZ3Y0M1a2FYTndWR2h5WldGa1ZIbHdaU0E5SUVGd2NDNWthWE53VkdoeVpXRmtWSGx3WlZScGJXVnNhVzVsTzF4dUlDQWdJQ0FnZFhCa1lYUmxaRUZ3Y0M1dlptWnpaWFJHYVc1a1NXUWdQU0IxY0dSaGRHVmtRWEJ3TG05bVpuTmxkRlJwYldWc2FXNWxSbWx1WkVsa0lEOGdkWEJrWVhSbFpFRndjQzV2Wm1aelpYUlVhVzFsYkdsdVpVWnBibVJKWkNBNklFRndjQzVrWldaaGRXeDBUMlptYzJWMFJtbHVaRWxrTzF4dUlDQWdJQ0FnZFhCa1lYUmxaRUZ3Y0M1cGMweHBibXREYUNBOUlHTnNhV05yWldRZ1BUMDlJQ2RNYVc1cmN5Y2dmSHdnWTJ4cFkydGxaQ0E5UFQwZ0oyWnBibVJOWldScFlVTm9KeUI4ZkNCamJHbGphMlZrSUQwOVBTQW5WRzlOWldScFlTY2dQeUIwY25WbElEb2dabUZzYzJVN1hHNGdJQ0FnSUNCMWNHUmhkR1ZrUVhCd0xtbHpUV1ZrYVdGRGFDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhCa1lYUmxaRUZ3Y0R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1kyeHBZMnRsWkNBOVBUMGdKMEpoWTJ0VWIxSnZiM1JEYUNjcElIdGNiaUFnSUNBZ0lIVndaR0YwWldSQmNIQXVhWE5NYVc1clEyZ2dQU0JtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZMnhwWTJ0bFpDQTlQVDBnSjB4cGJtdHpKeUFtSmlCeVlXNXJjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JvWVhabFRXVnVkVWx1WkdWNElEMGdjbUZ1YTNNdWMyOXRaU2dvYldrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFwTG1Ob0lEMDlQU0IwYjBOb0lIeDhJRzFwTG1Ob0lEMDlQU0IwYjBOb0lDc2dKeThuTzF4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hzYjJjcElHTnZibk52YkdVdWJHOW5LQ2RESUNjZ0t5Qm9ZWFpsVFdWdWRVbHVaR1Y0SUNzZ0p5Y3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb0lXaGhkbVZOWlc1MVNXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3h2WnlrZ1kyOXVjMjlzWlM1c2IyY29KMFFuS1R0Y2JseHVJQ0FnSUNBZ0lDQjFjR1JoZEdWa1FYQndMbTltWm5ObGRFWnBibVJKWkNBOUlFRndjQzVrWldaaGRXeDBUMlptYzJWMFJtbHVaRWxrTzF4dUlDQWdJQ0FnSUNCMWNHUmhkR1ZrUVhCd0xtUnBjM0JVYUhKbFlXUlVlWEJsSUQwZ1FYQndMbVJwYzNCVWFISmxZV1JVZVhCbFEyaHBiR1E3WEc0Z0lDQWdJQ0FnSUhWd1pHRjBaV1JCY0hBdWFYTk1hVzVyUTJnZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFhCa1lYUmxaRUZ3Y0R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RYQmtZWFJsWkVGd2NDNXliMjkwUTJnZ1BUMDlJSFJ2UTJncElIdGNiaUFnSUNBZ0lHbG1JQ2gxY0dSaGRHVmtRWEJ3TG0xMWJIUnBjM1J5WldGdEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoc2IyY3BJR052Ym5OdmJHVXViRzluS0NkRkp5azdYRzRnSUNBZ0lDQWdJSFZ3WkdGMFpXUkJjSEF1WkdsemNGUm9jbVZoWkZSNWNHVWdQU0JCY0hBdVpHbHpjRlJvY21WaFpGUjVjR1ZOZFd4MGFUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hzYjJjcElHTnZibk52YkdVdWJHOW5LQ2RHSnlrN1hHNGdJQ0FnSUNBZ0lIVndaR0YwWldSQmNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dVZ1BTQkJjSEF1WkdsemNGUm9jbVZoWkZSNWNHVlRhVzVuYkdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoc2IyY3BJR052Ym5OdmJHVXViRzluS0NkSEp5azdYRzRnSUNBZ0lDQjFjR1JoZEdWa1FYQndMbVJwYzNCVWFISmxZV1JVZVhCbElEMGdRWEJ3TG1ScGMzQlVhSEpsWVdSVWVYQmxRMmhwYkdRN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoc2IyY3BJR052Ym5OdmJHVXViRzluS0dGd2NDazdYRzRnSUNBZ2NtVjBkWEp1SUhWd1pHRjBaV1JCY0hBN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQlRZMmhsYldFZ1puSnZiU0FuWTI5dGJXOXVMMU5qYUdWdFlTYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFSnZiM1JQY0hScGIyNGdaWGgwWlc1a2N5QlRZMmhsYldFZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loaWIyOTBUM0IwYVc5dU9pQmhibmtnUFNCN2ZTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsS0hzZ0xpNHVZbTl2ZEU5d2RHbHZiaUI5S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCeVpXSjFhV3hrUVhSMGNtbGlkWFJsY3loaGRIUnlhV0oxZEdWektTQjdYRzRnSUNBZ2JHVjBJSEpsWW5WcGJHUkJkSFJ5YVdKMWRHVnpUMkpxT2lCaGJua2dQU0I3ZlR0Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loaGRIUnlhV0oxZEdWektTNW1iM0pGWVdOb0tDaHBLU0E5UGlCN1hHNGdJQ0FnSUNCeVpXSjFhV3hrUVhSMGNtbGlkWFJsYzA5aWFsdGhkSFJ5YVdKMWRHVnpXMmxkTG01aGJXVmRJRDBnWVhSMGNtbGlkWFJsYzF0cFhTNTJZV3gxWlR0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZpZFdsc1pFRjBkSEpwWW5WMFpYTlBZbW83WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCVFkyaGxiV0VnWm5KdmJTQW5ZMjl0Ylc5dUwxTmphR1Z0WVNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUUxbGJuVk1iMmR6SUdWNGRHVnVaSE1nVTJOb1pXMWhJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxek9pQmhibmtnUFNCYlhTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnY0dGeVlXMXpJRDBnY0dGeVlXMXpJRDhnY0dGeVlXMXpJRG9nVzEwN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsS0hCaGNtRnRjeWs3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCVFkyaGxiV0VnWm5KdmJTQW5ZMjl0Ylc5dUwxTmphR1Z0WVNjN1hHNXBiWEJ2Y25RZ1kyOXVaaUJtY205dElDZGpiMjF0YjI0dlkyOXVaaWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ2YzNRZ1pYaDBaVzVrY3lCVFkyaGxiV0VnZTF4dUlDQnpkR0YwYVdNZ1oyVjBJR1JsWm1GMWJIUkdhVzVrU1dRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNjd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREFuTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1pHVm1ZWFZzZEZaaGJIVmxjeWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdYMmxrT2lBbkp5eGNiaUFnSUNBZ0lHTm9PaUFuTHljc1hHNGdJQ0FnSUNCamFITTZJRnNuTHlkZExGeHVJQ0FnSUNBZ1ptRjJhV052YmpvZ1kyOXVaaTVrWldaaGRXeDBSbUYyYVdOdmJpeGNiaUFnSUNBZ0lHWnBibVJVZVhCbE9pQW5TSFJ0YkNjc1hHNGdJQ0FnSUNCc1lYbGxjam9nTVN4Y2JpQWdJQ0FnSUhCdmMzUTZJQ2NuTEZ4dUlDQWdJQ0FnY0hKdmRHOWpiMnc2SUNkb2RIUndjem9uTEZ4dUlDQWdJQ0FnYzNSaGJYQkpaRG9nTUN4Y2JpQWdJQ0FnSUhScGRHeGxPaUFuZEdGc2EyNG5MRnh1SUNBZ0lDQWdiR2wyWlVOdWREb2dNQ3hjYmlBZ0lDQWdJSFZwWkRvZ0p5Y3NYRzRnSUNBZ0lDQjFkSGx3WlRvZ0p5Y3NYRzRnSUNBZ0lDQmthWE53Um14bk9pQjBjblZsTEZ4dUlDQWdJQ0FnWkdGMFlUb2diblZzYkN4Y2JpQWdJQ0FnSUdOeVpXRjBaVlJwYldVNklHNWxkeUJFWVhSbEtDa3NYRzRnSUNBZ0lDQmpkWEp5Wlc1MFZHbHRaVG9nYm1WM0lFUmhkR1VvS1N4Y2JpQWdJQ0FnSUhWd1pHRjBaVlJwYldVNklHNWxkeUJFWVhSbEtDa3NYRzRnSUNBZ2ZUdGNiaUFnZlZ4dUlDQmZhV1E2SUhOMGNtbHVaeUE5SUZCdmMzUXVaR1ZtWVhWc2RGWmhiSFZsY3k1ZmFXUTdYRzRnSUdOb09pQnpkSEpwYm1jZ1BTQlFiM04wTG1SbFptRjFiSFJXWVd4MVpYTXVZMmc3WEc0Z0lHTm9jem9nYzNSeWFXNW5XMTBnUFNCUWIzTjBMbVJsWm1GMWJIUldZV3gxWlhNdVkyaHpPMXh1SUNCbVlYWnBZMjl1T2lCemRISnBibWNnUFNCUWIzTjBMbVJsWm1GMWJIUldZV3gxWlhNdVptRjJhV052Ymp0Y2JpQWdabWx1WkZSNWNHVTZJSE4wY21sdVp5QTlJRkJ2YzNRdVpHVm1ZWFZzZEZaaGJIVmxjeTVtYVc1a1ZIbHdaVHRjYmlBZ2JHRjVaWEk2SUc1MWJXSmxjaUE5SUZCdmMzUXVaR1ZtWVhWc2RGWmhiSFZsY3k1c1lYbGxjanRjYmlBZ2NHOXpkRG9nYzNSeWFXNW5JRDBnVUc5emRDNWtaV1poZFd4MFZtRnNkV1Z6TG5CdmMzUTdYRzRnSUhCeWIzUnZZMjlzT2lCemRISnBibWNnUFNCUWIzTjBMbVJsWm1GMWJIUldZV3gxWlhNdWNISnZkRzlqYjJ3N1hHNGdJSE4wWVcxd1NXUTZJRzUxYldKbGNpQTlJRkJ2YzNRdVpHVm1ZWFZzZEZaaGJIVmxjeTV6ZEdGdGNFbGtPMXh1SUNCMGFYUnNaVG9nYzNSeWFXNW5JRDBnVUc5emRDNWtaV1poZFd4MFZtRnNkV1Z6TG5ScGRHeGxPMXh1SUNCc2FYWmxRMjUwT2lCdWRXMWlaWElnUFNCUWIzTjBMbVJsWm1GMWJIUldZV3gxWlhNdWJHbDJaVU51ZER0Y2JpQWdkV2xrT2lCemRISnBibWNnUFNCUWIzTjBMbVJsWm1GMWJIUldZV3gxWlhNdWRXbGtPMXh1SUNCMWRIbHdaVG9nYzNSeWFXNW5JRDBnVUc5emRDNWtaV1poZFd4MFZtRnNkV1Z6TG5WMGVYQmxPMXh1SUNCa2FYTndSbXhuT2lCaWIyOXNaV0Z1SUQwZ1VHOXpkQzVrWldaaGRXeDBWbUZzZFdWekxtUnBjM0JHYkdjN1hHNGdJR1JoZEdFNklHRnVlU0E5SUZCdmMzUXVaR1ZtWVhWc2RGWmhiSFZsY3k1a1lYUmhPMXh1SUNCamNtVmhkR1ZVYVcxbE9pQkVZWFJsSUQwZ1VHOXpkQzVrWldaaGRXeDBWbUZzZFdWekxtTnlaV0YwWlZScGJXVTdYRzRnSUdOMWNuSmxiblJVYVcxbE9pQkVZWFJsSUQwZ1VHOXpkQzVrWldaaGRXeDBWbUZzZFdWekxtTjFjbkpsYm5SVWFXMWxPMXh1SUNCMWNHUmhkR1ZVYVcxbE9pQkVZWFJsSUQwZ1VHOXpkQzVrWldaaGRXeDBWbUZzZFdWekxuVndaR0YwWlZScGJXVTdYRzRnSUdOdmJuTjBjblZqZEc5eUtIQmhjbUZ0Y3o4NklGQnZjM1FwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lHTnZibk4wSUhaaGJIVmxjeUE5SUhCaGNtRnRjeUEvSUhzZ0xpNHVVRzl6ZEM1a1pXWmhkV3gwVm1Gc2RXVnpMQ0F1TGk1d1lYSmhiWE1nZlNBNklGQnZjM1F1WkdWbVlYVnNkRlpoYkhWbGN6dGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdVb2RtRnNkV1Z6S1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGQnZjM1FnWm5KdmJTQW5ZWEJwTDNOMGIzSmxMMUJ2YzNRbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUWIzTjBUWFZzZEdrZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lod1lYSmhiWE02SUZCdmMzUmJYU0E5SUZ0ZEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCaGNtRnRjenRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUVGd2NDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlFYQndKenRjYm1sdGNHOXlkQ0JRYjNOMElHWnliMjBnSjJGd2FTOXpkRzl5WlM5UWIzTjBKenRjYm1sdGNHOXlkQ0JRYjNOMFRYVnNkR2tnWm5KdmJTQW5ZWEJwTDNOMGIzSmxMMUJ2YzNSTmRXeDBhU2M3WEc1cGJYQnZjblFnVUc5emRITlRhVzVuYkdVZ1puSnZiU0FuWVhCcEwzTjBiM0psTDFCdmMzUnpVMmx1WjJ4bEp6dGNibWx0Y0c5eWRDQlFiM04wYzFScGJXVnNhVzVsSUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlRYjNOMGMxUnBiV1ZzYVc1bEp6dGNibWx0Y0c5eWRDQlFiM04wYzFScGJXVnNhVzVsVTNSdlkyc2dabkp2YlNBbllYQnBMM04wYjNKbEwxQnZjM1J6VkdsdFpXeHBibVZUZEc5amF5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQnZjM1J6SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0dGeVlXMXpPaUJRYjNOMFcxMGdQU0JiWFNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwUkdsemNGQnZjM1J6S0hOMFlYUmxLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QmhjSEFzSUhCdmMzUnpWR2x0Wld4cGJtVXNJSEJ2YzNSelRYVnNkR2tzSUhCdmMzUnpVMmx1WjJ4bExDQndiM04wYzBOb2FXeGtMQ0J3YjNOMGMweHZaM01nZlNBOUlITjBZWFJsTzF4dUlDQWdJSE4zYVhSamFDQW9ZWEJ3TG1ScGMzQlVhSEpsWVdSVWVYQmxLU0I3WEc0Z0lDQWdJQ0JqWVhObElFRndjQzVrYVhOd1ZHaHlaV0ZrVkhsd1pWUnBiV1ZzYVc1bE9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHOXpkSE5VYVcxbGJHbHVaVHRjYmlBZ0lDQWdJR05oYzJVZ1FYQndMbVJwYzNCVWFISmxZV1JVZVhCbFRYVnNkR2s2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3YjNOMGMwMTFiSFJwTzF4dUlDQWdJQ0FnWTJGelpTQkJjSEF1WkdsemNGUm9jbVZoWkZSNWNHVlRhVzVuYkdVNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2IzTjBjMU5wYm1kc1pUdGNiaUFnSUNBZ0lHTmhjMlVnUVhCd0xtUnBjM0JVYUhKbFlXUlVlWEJsUTJocGJHUTZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndiM04wYzBOb2FXeGtPMXh1SUNBZ0lDQWdZMkZ6WlNCQmNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dWTWIyZHpPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjRzl6ZEhOTWIyZHpPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFJCYm5sQlkzUnBiMjVRYjNOMGN5aGhZM1JwYjI0c0lITjBZWFJsS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJoY0hBc0lIQnZjM1J6SUgwZ1BTQmhZM1JwYjI0N1hHNGdJQ0FnWTI5dWMzUWdaWGhwYzNSUWIzTjBjeUE5SUhCdmMzUnpJQ1ltSUhCdmMzUnpMbXhsYm1kMGFDQStJREE3WEc0Z0lDQWdZV04wYVc5dUxuQnZjM1J6VFhWc2RHa2dQU0J1WlhjZ1VHOXpkRTExYkhScEtDazdYRzRnSUNBZ1lXTjBhVzl1TG5CdmMzUnpVMmx1WjJ4bElEMGdibVYzSUZCdmMzUnpVMmx1WjJ4bEtDazdYRzRnSUNBZ1lXTjBhVzl1TG5CdmMzUnpRMmhwYkdRZ1BTQmJYVHRjYmlBZ0lDQmhZM1JwYjI0dWNHOXpkSE5NYjJkeklEMGdXMTA3WEc1Y2JpQWdJQ0J6ZDJsMFkyZ2dLR0Z3Y0M1a2FYTndWR2h5WldGa1ZIbHdaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQkJjSEF1WkdsemNGUm9jbVZoWkZSNWNHVlVhVzFsYkdsdVpUcGNiaUFnSUNBZ0lDQWdZV04wYVc5dUlEMGdVRzl6ZEhNdVoyVjBRVzU1UVdOMGFXOXVVRzl6ZEhOVWFXMWxiR2x1WlNoaFkzUnBiMjRzSUhCdmMzUnpMQ0J6ZEdGMFpTd2daWGhwYzNSUWIzTjBjeWs3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNCQmNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dWTmRXeDBhVHBjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVMbkJ2YzNSelRYVnNkR2tnUFNCbGVHbHpkRkJ2YzNSeklEOGdjRzl6ZEhNZ09pQmJYVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUVGd2NDNWthWE53VkdoeVpXRmtWSGx3WlZOcGJtZHNaVHBjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVMbkJ2YzNSelUybHVaMnhsSUQwZ1pYaHBjM1JRYjNOMGN5QS9JSEJ2YzNSeklEb2dXMTA3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNCQmNIQXVaR2x6Y0ZSb2NtVmhaRlI1Y0dWRGFHbHNaRHBjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVMbkJ2YzNSelEyaHBiR1FnUFNCbGVHbHpkRkJ2YzNSeklEOGdjRzl6ZEhNZ09pQmJYVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUVGd2NDNWthWE53VkdoeVpXRmtWSGx3WlV4dlozTTZYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXdiM04wYzB4dlozTWdQU0JsZUdsemRGQnZjM1J6SUQ4Z2NHOXpkSE1nT2lCYlhUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJqdGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBRVzU1UVdOMGFXOXVVRzl6ZEhOVWFXMWxiR2x1WlNoaFkzUnBiMjRzSUhCdmMzUnpMQ0J6ZEdGMFpTd2daWGhwYzNSUWIzTjBjeWtnZTF4dUlDQWdJR2xtSUNoaFkzUnBiMjR1ZEhsd1pTQTlQVDBnSjFORlVsWkZVbDlVVDE5QlVFbGJRbEpQUVVSRFFWTlVYVHB3YjNOMEp5a2dlMXh1SUNBZ0lDQWdZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVVnUFNCdVpYY2dVRzl6ZEhOVWFXMWxiR2x1WlNncE8xeHVJQ0FnSUNBZ1lXTjBhVzl1TG5CdmMzUnpWR2x0Wld4cGJtVXVjSFZ6YUNoaFkzUnBiMjR1Y0c5emRITmJNRjBwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWVdOMGFXOXVMblI1Y0dVZ1BUMDlJQ2RUUlZKV1JWSmZWRTlmUVZCSlcwVk5TVlJkT21abGRHTm9VRzl6ZEhNbktTQjdYRzRnSUNBZ0lDQmhZM1JwYjI0dWNHOXpkSE5VYVcxbGJHbHVaU0E5SUc1bGR5QlFiM04wYzFScGJXVnNhVzVsS0NrN1hHNGdJQ0FnSUNCaFkzUnBiMjR1Y0c5emRITlVhVzFsYkdsdVpWTjBiMk5ySUQwZ2JtVjNJRkJ2YzNSelZHbHRaV3hwYm1WVGRHOWpheWdwTzF4dVhHNGdJQ0FnSUNCcFppQW9aWGhwYzNSUWIzTjBjeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3YjNOMGMweGxibWQwYUNBOUlIQnZjM1J6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCd2IzTjBjMHhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCdmMzUnpXMmxkTG1OMWNuSmxiblJVYVcxbElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNHVjRzl6ZEhOVWFXMWxiR2x1WlM1d2RYTm9LSEJ2YzNSelcybGRLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV04wYVc5dUxuQnZjM1J6VkdsdFpXeHBibVZUZEc5amF5NXdkWE5vS0hCdmMzUnpXMmxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdGamRHbHZianRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUZCdmMzUWdabkp2YlNBbllYQnBMM04wYjNKbEwxQnZjM1FuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJRYjNOMFUybHVaMnhsSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0dGeVlXMXpPaUJRYjNOMFcxMGdQU0JiWFNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JRYjNOMElHWnliMjBnSjJGd2FTOXpkRzl5WlM5UWIzTjBKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzl6ZEhOVWFXMWxiR2x1WlNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0hCaGNtRnRjem9nVUc5emRGdGRJRDBnVzEwcElIdGNiaUFnSUNCeVpYUjFjbTRnY0dGeVlXMXpPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnVUc5emRDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlVHOXpkQ2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ2YzNSVWFXMWxiR2x1WlZOMGIyTnJJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxek9pQlFiM04wVzEwZ1BTQmJYU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndZWEpoYlhNN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQlFiM04wSUdaeWIyMGdKMkZ3YVM5emRHOXlaUzlRYjNOMEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VHOXpkRlJwYldWc2FXNWxXbVZ5YnlCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0hCaGNtRnRjem9nVUc5emRGdGRJRDBnVzEwcElIdGNiaUFnSUNCeVpYUjFjbTRnY0dGeVlXMXpPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnVUc5emRDQm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlVHOXpkQ2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ2YzNSVWFXMWxiR2x1WlU5MGFHVnlWR2hoYmxwbGNtOGdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHdZWEpoYlhNNklGQnZjM1JiWFNBOUlGdGRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhjbUZ0Y3p0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGQnZjM1FnWm5KdmJTQW5ZWEJwTDNOMGIzSmxMMUJ2YzNRbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCU1lXNXJjeUI3WEc0Z0lHTnZibk4wY25WamRHOXlLSEJoY21GdGN6b2dVRzl6ZEZ0ZElEMGdXMTBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjR0Z5WVcxek8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdVMk5vWlcxaElHWnliMjBnSjJOdmJXMXZiaTlUWTJobGJXRW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlRaWFIwYVc1bklHVjRkR1Z1WkhNZ1UyTm9aVzFoSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0dGeVlXMXpPaUJoYm5rZ1BTQjdmU2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ1kyOXVjM1FnWTJ4cFpXNTBJRDBnY0dGeVlXMXpJQ1ltSUhCaGNtRnRjeTVqYkdsbGJuUWdQeUJ3WVhKaGJYTXVZMnhwWlc1MElEb2dlMzA3WEc0Z0lDQWdZMjl1YzNRZ1kyOXRiVzl1SUQwZ2NHRnlZVzF6SUNZbUlIQmhjbUZ0Y3k1amIyMXRiMjRnUHlCd1lYSmhiWE11WTI5dGJXOXVJRG9nZTMwN1hHNGdJQ0FnWTI5dWMzUWdjMlZ5ZG1WeUlEMGdjR0Z5WVcxeklDWW1JSEJoY21GdGN5NXpaWEoyWlhJZ1B5QndZWEpoYlhNdWMyVnlkbVZ5SURvZ2UzMDdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbEtIdGNiaUFnSUNBZ0lHTnNhV1Z1ZEN4Y2JpQWdJQ0FnSUdOdmJXMXZiaXhjYmlBZ0lDQWdJSE5sY25abGNpeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRk5qYUdWdFlTQm1jbTl0SUNkamIyMXRiMjR2VTJOb1pXMWhKenRjYm1sdGNHOXlkQ0JUWlhGMVpXNWpaU0JtY205dElDZGpiMjF0YjI0dlUyVnhkV1Z1WTJVbk8xeHVhVzF3YjNKMElHTnZibVlnWm5KdmJTQW5ZMjl0Ylc5dUwyTnZibVluTzF4dVhHNXBiWEJ2Y25RZ1FYQndJR1p5YjIwZ0oyRndhUzl6ZEc5eVpTOUJjSEFuTzF4dWFXMXdiM0owSUVKdmIzUlBjSFJwYjI0Z1puSnZiU0FuWVhCcEwzTjBiM0psTDBKdmIzUlBjSFJwYjI0bk8xeHVYRzVsZUhCdmNuUWdkSGx3WlNCVWFISmxZV1JUZEdGMGRYTlVlWEJsSUQwZ2UxeHVJQ0JrYVhOd1ZIbHdaVG9nYzNSeWFXNW5PMXh1SUNCcGMwTnlaV0YwWlRvZ1ltOXZiR1ZoYmp0Y2JpQWdhWE5TWlhGMWFYSmxWWEJ6WlhKME9pQmliMjlzWldGdU8xeHVJQ0JwYzAxMWJIUnBjM1J5WldGdE9pQmliMjlzWldGdU8xeHVJQ0JwYzAxbFpHbGhRMmc2SUdKdmIyeGxZVzQ3WEc0Z0lHbHpWRzluWjJ4bFRYVnNkR2x6ZEhKbFlXMDZJR0p2YjJ4bFlXNDdYRzRnSUdkbGRFMXZjbVU2SUdKdmIyeGxZVzQ3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCVWFISmxZV1FnWlhoMFpXNWtjeUJUWTJobGJXRWdlMXh1SUNCemRHRjBhV01nWjJWMElHWnBibVJVZVhCbFFXeHNLQ2s2SUNkQmJHd25JSHRjYmlBZ0lDQnlaWFIxY200Z0owRnNiQ2M3WEc0Z0lIMWNiaUFnYzNSaGRHbGpJR2RsZENCbWFXNWtWSGx3WlVoMGJXd29LVG9nSjBoMGJXd25JSHRjYmlBZ0lDQnlaWFIxY200Z0owaDBiV3duTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1ptbHVaRlI1Y0dWTmRYTnBZeWdwT2lBblRYVnphV01uSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMDExYzJsakp6dGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBJR1pwYm1SVWVYQmxVR1JtS0NrNklDZFFaR1luSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMUJrWmljN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRDQm1hVzVrVkhsd1pWWnBaR1Z2S0NrNklDZFdhV1JsYnljZ2UxeHVJQ0FnSUhKbGRIVnliaUFuVm1sa1pXOG5PMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnWm1sdVpGUjVjR1ZQZEdobGNpZ3BPaUFuVDNSb1pYSW5JSHRjYmlBZ0lDQnlaWFIxY200Z0owOTBhR1Z5Snp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElHWnBibVJVZVhCbGN5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ1cxUm9jbVZoWkM1bWFXNWtWSGx3WlVoMGJXeGRPaUJiSjNSbGVIUXZhSFJ0YkNkZExGeHVJQ0FnSUNBZ1cxUm9jbVZoWkM1bWFXNWtWSGx3WlUxMWMybGpYVG9nV3lkaGRXUnBieWNzSUNkaGRXUnBieTl0Y0dWbkp5d2dKMkYxWkdsdkwyMXdOQ2NzSUNkaGRXUnBieTk0TFhkaGRpY3NJQ2RoZFdScGJ5OXRhV1JwSnl3Z0oyRndjR3hwWTJGMGFXOXVMM2d0YzIxaFppZGRMRnh1SUNBZ0lDQWdXMVJvY21WaFpDNW1hVzVrVkhsd1pWWnBaR1Z2WFRvZ1cxeHVJQ0FnSUNBZ0lDQW5kbWxrWlc4bkxGeHVJQ0FnSUNBZ0lDQW5kbWxrWlc4dmJYQmxaeWNzWEc0Z0lDQWdJQ0FnSUNkMmFXUmxieTl0Y0RRbkxGeHVJQ0FnSUNBZ0lDQW5kbWxrWlc4dmNYVnBZMnQwYVcxbEp5eGNiaUFnSUNBZ0lDQWdKM1pwWkdWdkwzZ3RiWE10ZDIxMkp5eGNiaUFnSUNBZ0lDQWdKMkZ3Y0d4cFkyRjBhVzl1TDNndGMyaHZZMnQzWVhabExXWnNZWE5vSnl4Y2JpQWdJQ0FnSUNBZ0ozWnBaR1Z2THpObmNIQXlKeXhjYmlBZ0lDQWdJRjBzWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVJQ0J6ZEdGMGFXTWdaMlYwUkdWbVlYVnNkRlJwZEd4bEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmRHRnNhMjRuTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFUmxabUYxYkhSR1lYWnBZMjl1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJnYUhSMGNITTZMeThrZTJOdmJtWXVZWE56WlhSelZWSk1mUzltWVhacFkyOXVMbWxqYjJBN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ2FYTlhhVzVrYjNkUFltb29jR0Z5WVcxektTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCaGNtRnRjeTVoYkdWeWRDQS9JSFJ5ZFdVZ09pQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lHaHlaV1k2SUhOMGNtbHVaenRjYmlBZ1kyZzZJSE4wY21sdVp6dGNiaUFnWTJoek9pQmJjM1J5YVc1blhTQTlJRnNuTHlkZE8xeHVJQ0JvWVhOVGJHRnphRG9nWW05dmJHVmhianRjYmlBZ2NISnZkRzlqYjJ3NklITjBjbWx1WnlBOUlGTmxjWFZsYm1ObExsUkJURXRPWDFCU1QxUlBRMDlNTzF4dUlDQmpiMjUwWlc1MFZIbHdaVG9nYzNSeWFXNW5PMXh1SUNCamFHRnljMlYwT2lCemRISnBibWNnUFNBblZWUkdMVGduTzF4dUlDQm9iM04wT2lCemRISnBibWNnUFNBbkp6dGNiaUFnWm1GMmFXTnZiam9nYzNSeWFXNW5JRDBnVkdoeVpXRmtMbWRsZEVSbFptRjFiSFJHWVhacFkyOXVLQ2s3WEc0Z0lHWnBibVJVZVhCbE9pQW5RV3hzSnlCOElDZElkRzFzSnlCOElDZE5kWE5wWXljZ2ZDQW5WbWxrWlc4bklEMGdWR2h5WldGa0xtWnBibVJVZVhCbFFXeHNPMXh1SUNCMGFYUnNaVG9nYzNSeWFXNW5JRDBnVkdoeVpXRmtMbWRsZEVSbFptRjFiSFJVYVhSc1pTZ3BPMXh1SUNCdFpYUmhjem9nWVc1NUlEMGdXMTA3WEc0Z0lHVnRiM1JwYjI1ek9pQmhibmtnUFNCN2ZUdGNiaUFnYzJWeWRtVnlUV1YwWVhNNklHRnVlU0E5SUh0OU8xeHVJQ0JqYkdsbGJuUk5aWFJoY3pvZ1lXNTVJRDBnZTMwN1hHNGdJR3hwYm10ek9pQmhibmtnUFNCYlhUdGNiaUFnYURGek9pQmhibmtnUFNCYlhUdGNiaUFnWVhWa2FXOXpPaUJoYm5rZ1BTQmJYVHRjYmlBZ2RtbGtaVzl6T2lCaGJua2dQU0JiWFR0Y2JpQWdiR0Y1WlhJNklHNTFiV0psY2lBOUlGUm9jbVZoWkM1blpYUk1ZWGxsY2lncE8xeHVJQ0J0WldScFlVbHVaR1Y0T2lCaGJua2dQU0JiWFR0Y2JpQWdjRzl6ZEVOdWREb2diblZ0WW1WeUlEMGdNRHRjYmlBZ2JYVnNkR2xRYjNOMFEyNTBPaUJ1ZFcxaVpYSWdQU0F3TzF4dUlDQnBjMU5sYkdaRGFEb2dZbTl2YkdWaGJpQTlJR1poYkhObE8xeHVJQ0JqY21WaGRHVlVhVzFsT2lCemRISnBibWNnUFNBbkp6dGNiaUFnZFhCa1lYUmxWR2x0WlRvZ2MzUnlhVzVuSUQwZ0p5YzdYRzRnSUdOdmJuTjBjblZqZEc5eUtIQmhjbUZ0Y3pvZ1lXNTVJRDBnZTMwc0lHSnZiM1JQY0hScGIyNC9PaUJDYjI5MFQzQjBhVzl1SUh3Z2UzMHBJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVJQ0FnSUdOdmJuTjBJSFJvY21WaFpDQTlJRlJvY21WaFpDNXBjMWRwYm1SdmQwOWlhaWh3WVhKaGJYTXBJRDhnVkdoeVpXRmtMbU52Ym5OMGNuVmpkRzl5Um5KdmJWZHBibVJ2ZHlod1lYSmhiWE1zSUdKdmIzUlBjSFJwYjI0cElEb2djR0Z5WVcxek8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlNoMGFISmxZV1FwTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdOdmJuTjBjblZqZEc5eVJuSnZiVmRwYm1SdmR5aHdZWEpoYlhNc0lHSnZiM1JQY0hScGIyNHBJSHRjYmlBZ0lDQmpiMjV6ZENCaWIyOTBRMmdnUFNCaWIyOTBUM0IwYVc5dUxtTm9JRDhnWW05dmRFOXdkR2x2Ymk1amFDQTZJR1poYkhObE8xeHVJQ0FnSUdOdmJuTjBJR05vSUQwZ1ZHaHlaV0ZrTG1kbGRFTm9LR0p2YjNSUGNIUnBiMjRwTzF4dVhHNGdJQ0FnYkdWMElIUm9jbVZoWkRvZ1lXNTVJRDBnZTMwN1hHNGdJQ0FnYkdWMElHaHlaV1lnUFNBbkp6dGNiaUFnSUNCMGFISmxZV1F1WTJnZ1BTQmphRHRjYmlBZ0lDQjBhSEpsWVdRdVkyaHpJRDBnV3ljdkoxMDdYRzRnSUNBZ2RHaHlaV0ZrTG1oaGMxTnNZWE5vSUQwZ1ltOXZkRTl3ZEdsdmJpNW9ZWE56YkdGemFDQS9JRk5qYUdWdFlTNW5aWFJDYjI5c0tHSnZiM1JQY0hScGIyNHVhR0Z6YzJ4aGMyZ3BJRG9nWm1Gc2MyVTdYRzRnSUNBZ2RHaHlaV0ZrTG5CeWIzUnZZMjlzSUQwZ0ozUmhiR3R1T2ljN1hHNGdJQ0FnZEdoeVpXRmtMbU52Ym5SbGJuUlVlWEJsSUQwZ0p5YzdYRzRnSUNBZ2RHaHlaV0ZrTG1Ob1lYSnpaWFFnUFNBblZWUkdMVGduTzF4dUlDQWdJSFJvY21WaFpDNW9iM04wSUQwZ0p5YzdYRzRnSUNBZ2RHaHlaV0ZrTG1aaGRtbGpiMjRnUFNCVWFISmxZV1F1WjJWMFJHVm1ZWFZzZEVaaGRtbGpiMjRvS1R0Y2JpQWdJQ0IwYUhKbFlXUXVabWx1WkZSNWNHVWdQU0JVYUhKbFlXUXVabWx1WkZSNWNHVkJiR3c3WEc1Y2JpQWdJQ0JwWmlBb1ltOXZkRU5vS1NCN1hHNGdJQ0FnSUNBdkx5QlZVa3pqZ2E3amdyUGpnNDNqZ3EvamdyZmpnNmZqZzdQbWxvZmxyWmZsaUpmamdZdmpnb25qZ2FmamdhOVFVazlVVDBOUFRPT0JyK1dJcE9XSXBlT0JwK09CamVPQnF1T0JoT09BZ2x4dUlDQWdJQ0FnZEdoeVpXRmtMbkJ5YjNSdlkyOXNJRDBnVkdoeVpXRmtMbWRsZEZCeWIzUnZZMjlzS0dKdmIzUkRhQ2s3WEc0Z0lDQWdJQ0IwYUhKbFlXUXVhRzl6ZENBOUlGUm9jbVZoWkM1blpYUkliM04wS0dKdmIzUkRhQ2s3WEc0Z0lDQWdJQ0IwYUhKbFlXUXVZMmh6SUQwZ1ltOXZkRU5vTG1Ob2N5QW1KaUJpYjI5MFEyZ3VZMmh6TG14bGJtZDBhQ0ErSURBZ1B5QmliMjkwUTJndVkyaHpJRG9nVkdoeVpXRmtMbWRsZEVOb2N5aGphQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbVZoWkM1d2NtOTBiMk52YkNBOUlHeHZZMkYwYVc5dUxuQnliM1J2WTI5c0lEOGdiRzlqWVhScGIyNHVjSEp2ZEc5amIyd2dPaUFuUHo4L1B6b25PMXh1SUNBZ0lDQWdkR2h5WldGa0xtTm9jeUE5SUhCaGNtRnRjeTVqYUhNZ0ppWWdjR0Z5WVcxekxtTm9jeTVzWlc1bmRHZ2dQaUF3SUQ4Z2NHRnlZVzF6TG1Ob2N5QTZJRlJvY21WaFpDNW5aWFJEYUhNb1kyZ3BPMXh1SUNBZ0lDQWdkR2h5WldGa0xtTnZiblJsYm5SVWVYQmxJRDBnWkc5amRXMWxiblF1WTI5dWRHVnVkRlI1Y0dVZ1B5QmtiMk4xYldWdWRDNWpiMjUwWlc1MFZIbHdaU0E2SUNjbk8xeHVJQ0FnSUNBZ2RHaHlaV0ZrTG1Ob1lYSnpaWFFnUFNCa2IyTjFiV1Z1ZEM1amFHRnljMlYwSUQ4Z1pHOWpkVzFsYm5RdVkyaGhjbk5sZENBNklDY25PMXh1WEc0Z0lDQWdJQ0IwYUhKbFlXUXVhRzl6ZENBOUlHeHZZMkYwYVc5dUxtaHZjM1FnUHlCc2IyTmhkR2x2Ymk1b2IzTjBJRG9nSnljN1hHNGdJQ0FnSUNCMGFISmxZV1F1Wm1GMmFXTnZiaUE5SUZSb2NtVmhaQzVuWlhSR1lYWnBZMjl1Um5KdmJWZHBibVJ2ZHloM2FXNWtiM2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvY21WaFpDNTBhWFJzWlNBOUlGUm9jbVZoWkM1blpYUkVaV1poZFd4MFZHbDBiR1VvS1R0Y2JpQWdJQ0IwYUhKbFlXUXViV1YwWVhNZ1BTQmJYVHRjYmlBZ0lDQjBhSEpsWVdRdWMyVnlkbVZ5VFdWMFlYTWdQU0I3ZlR0Y2JpQWdJQ0IwYUhKbFlXUXVZMnhwWlc1MFRXVjBZWE1nUFNCN2ZUdGNiaUFnSUNCMGFISmxZV1F1WlcxdmRHbHZibk1nUFNCN2ZUdGNiaUFnSUNCMGFISmxZV1F1YkdsdWEzTWdQU0JiWFR0Y2JpQWdJQ0IwYUhKbFlXUXVhREZ6SUQwZ1cxMDdYRzRnSUNBZ2RHaHlaV0ZrTG1GMVpHbHZjeUE5SUZ0ZE8xeHVJQ0FnSUhSb2NtVmhaQzUyYVdSbGIzTWdQU0JiWFR0Y2JpQWdJQ0IwYUhKbFlXUXViR0Y1WlhJZ1BTQlVhSEpsWVdRdVoyVjBUR0Y1WlhJb2RHaHlaV0ZrTG1Ob0tUdGNiaUFnSUNCMGFISmxZV1F1YldWa2FXRkpibVJsZUNBOUlGdGRPMXh1SUNBZ0lIUm9jbVZoWkM1d2IzTjBRMjUwSUQwZ01EdGNiaUFnSUNCMGFISmxZV1F1YlhWc2RHbFFiM04wUTI1MElEMGdNRHRjYmlBZ0lDQjBhSEpsWVdRdWFYTlRaV3htUTJnZ1BTQlVhSEpsWVdRdVoyVjBTWE5UWld4bVEyZ29hSEpsWml3Z2RHaHlaV0ZrTG1Ob0tUdGNiaUFnSUNCMGFISmxZV1F1WTNKbFlYUmxWR2x0WlNBOUlDY25PMXh1SUNBZ0lIUm9jbVZoWkM1MWNHUmhkR1ZVYVcxbElEMGdKeWM3WEc0Z0lDQWdjbVYwZFhKdUlIUm9jbVZoWkR0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCblpYUkRhQ2hpYjI5MFQzQjBhVzl1T2lCaGJua3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ltOXZkRTl3ZEdsdmJpQW1KaUJpYjI5MFQzQjBhVzl1TG1Ob0lDWW1JR0p2YjNSUGNIUnBiMjR1WTJnZ0lUMDlJQ2NuSUQ4Z1ltOXZkRTl3ZEdsdmJpNWphQ0E2SUNjdkp6dGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFJEYUZSdmNDaGphQ2tnZTF4dUlDQWdJR2xtSUNoamFDQWhQVDBnSnljcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBbkx5Y2dLeUJqYUM1emNHeHBkQ2duTHljcFd6RmRPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFTm9jeWhmWTJncElIdGNiaUFnSUNCc1pYUWdZMmh6SUQwZ1d5Y3ZKMTA3WEc1Y2JpQWdJQ0JwWmlBb1gyTm9JQ0U5UFNBbkp5a2dlMXh1SUNBZ0lDQWdMeTlqYUNBOUlHTm9MbkpsY0d4aFkyVW9MMXhjZFRBd01tWWtMMmNzSUNjbktUdGNiaUFnSUNBZ0lHTnZibk4wSUdOb0lEMGdYMk5vTG5Oc2FXTmxLQzB4S1NBOVBUMGdKeThuSUQ4Z1gyTm9JRG9nWDJOb0lDc2dKeThuTzF4dVhHNGdJQ0FnSUNCcFppQW9ZMmdnSVQwOUlDY3ZKeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYUVGeWNpQTlJR05vTG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOb1RHVnVaM1JvSUQwZ1kyaEJjbkl1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JtVjNRMmdnUFNBbkp6dGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JqYUV4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTm9RWEp5VzJsZElDRTlQU0FuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1EyZ2dLejBnWTJoQmNuSmJhVjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SU9TNGdPZVZxdWFjZ09XK2pPT0JqQy9qZ2E3bG9MVGxrSWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkME5vSUQwZ2JtVjNRMmd1YzJ4cFkyVW9MVEVwSUQwOVBTQW5MeWNnUHlCdVpYZERhQ0E2SUc1bGQwTm9JQ3NnSnk4bk8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5RGt1SURubGFybW5JRGxpSjNqZ1l3djQ0R3U1YUMwNVpDSVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhkRGFDQTlJRzVsZDBOb0xuTnNhV05sS0RBc0lERXBJRDA5UFNBbkx5Y2dQeUJ1WlhkRGFDQTZJQ2N2SnlBcklHNWxkME5vTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlEbW5JRGx2b3pqZ1l3djU0U2g0NEdYNDRHdTQ0S3o0NE9ONDRLdjQ0SzM0NE9uNDRPejQ0S1M1NVNmNW9pUVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDI1dlUyeGhjMmhEYUNBOUlHNWxkME5vTG5Oc2FXTmxLREFzSUMweEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWphSE11Y0hWemFDZ2dibTlUYkdGemFFTm9JQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphSE11Y0hWemFDaHVaWGREYUNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamFITTdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwU0c5emRDaGphQ2tnZTF4dUlDQWdJR2xtSUNoamFDNXBibVJsZUU5bUtDY3VKeWtnUGowZ01Da2dlMXh1SUNBZ0lDQWdZMmdnUFNCamFDNXlaWEJzWVdObEtDZG9kSFJ3Y3pvdkx5Y3NJQ2NuS1M1eVpYQnNZV05sS0Nkb2RIUndPaTh2Snl3Z0p5Y3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTm9MbkpsY0d4aFkyVW9MMTVjWEM4dkxDQW5KeWt1Y21Wd2JHRmpaU2d2WEZ3dkxpb2tMeXdnSnljcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMjl1Wmk1a2IyMWhhVzQ3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2RsZEZCeWIzUnZZMjlzS0doeVpXWXBJSHRjYmlBZ0lDQnBaaUFvYUhKbFppNXBibVJsZUU5bUtDZG9kSFJ3T2ljcElENDlJREFwSUhKbGRIVnliaUFuYUhSMGNEb25PMXh1SUNBZ0lHbG1JQ2hvY21WbUxtbHVaR1Y0VDJZb0oyaDBkSEJ6T2ljcElENDlJREFwSUhKbGRIVnliaUFuYUhSMGNITTZKenRjYmlBZ0lDQnBaaUFvYkc5allYUnBiMjRnSmlZZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3cElISmxkSFZ5YmlCc2IyTmhkR2x2Ymk1d2NtOTBiMk52YkR0Y2JpQWdJQ0J5WlhSMWNtNGdKejgvUHo4Nkp6dGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFJKYzFObGJHWkRhQ2hvY21WbUxDQmphQ2tnZTF4dUlDQWdJR052Ym5OMElISmxjR3hoWTJWa1NISmxaaUE5SUdoeVpXWmNiaUFnSUNBZ0lDNXlaWEJzWVdObEtDZG9kSFJ3T2k4bkxDQW5KeWxjYmlBZ0lDQWdJQzV5WlhCc1lXTmxLQ2RvZEhSd2N6b3ZKeXdnSnljcFhHNGdJQ0FnSUNBdWNtVndiR0ZqWlNndlhGeDFNREF5WmlRdkxDQW5KeWs3WEc0Z0lDQWdjbVYwZFhKdUlISmxjR3hoWTJWa1NISmxaaUE5UFQwZ1kyZzdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwVEdGNVpYSW9ZMmdnUFNBbkx5Y3BJSHRjYmlBZ0lDQnlaWFIxY200Z1kyZ3VjM0JzYVhRb0p5OG5LUzVzWlc1bmRHZ2dMU0F4TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFMWxaR2xoVTNKaktIUm9jbVZoWkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJCY0hBdVoyVjBUV1ZrYVdGVGNtTW9kR2h5WldGa0xuQnliM1J2WTI5c0xDQjBhSEpsWVdRdVkyZ3BPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2RsZEUxbFpHbGhWR0ZuVkhsd1pTaDBhSEpsWVdRcElIdGNiaUFnSUNCamIyNXpkQ0J6Y21NZ1BTQlVhSEpsWVdRdVoyVjBUV1ZrYVdGVGNtTW9kR2h5WldGa0tUdGNiaUFnSUNCeVpYUjFjbTRnUVhCd0xtZGxkRTFsWkdsaFZIbHdaU2h6Y21Nc0lHNTFiR3dwTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFWmhkbWxqYjI1R2NtOXRWMmx1Wkc5M0tIZHBibVJ2ZHlrZ2UxeHVJQ0FnSUdsbUlDaDNhVzVrYjNjZ0ppWWdkMmx1Wkc5M0xtUnZZM1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMUlEMGdkMmx1Wkc5M0xtUnZZM1Z0Wlc1MExtVjJZV3gxWVhSbEtGeHVJQ0FnSUNBZ0lDQmNJaTh2YkdsdWExdGpiMjUwWVdsdWN5aEFjbVZzTENkcFkyOXVKeWx2Y2loamIyNTBZV2x1Y3loQWNtVnNMQ2RKUTA5T0p5a3BYVnN4WFM5QWFISmxabHdpTEZ4dUlDQWdJQ0FnSUNCM2FXNWtiM2N1Wkc5amRXMWxiblFzWEc0Z0lDQWdJQ0FnSUc1MWJHd3NYRzRnSUNBZ0lDQWdJRElzWEc0Z0lDQWdJQ0FnSUc1MWJHeGNiaUFnSUNBZ0lDa3VjM1J5YVc1blZtRnNkV1U3WEc0Z0lDQWdJQ0JqYjI1emRDQm9JRDBnSjJoMGRIQTZMeThuTzF4dUlDQWdJQ0FnWTI5dWMzUWdhSE1nUFNBbmFIUjBjSE02THk4bk8xeHVJQ0FnSUNBZ1kyOXVjM1FnYkNBOUlHeHZZMkYwYVc5dUxtaHZjM1E3WEc0Z0lDQWdJQ0JwWmlBb2RTNXBibVJsZUU5bUtHZ3BJSHg4SUhVdWFXNWtaWGhQWmlob2N5a3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkWEpzSUQwZ2FDQXJJR3dnS3lBb2RTQjhmQ0FuTDJaaGRtbGpiMjR1YVdOdkp5azdYRzRnSUNBZ0lDQWdJR052Ym5OMElITjBja051ZENBOUlIVnliQzV6Y0d4cGRDZ25MeThuS1M1c1pXNW5kR2dnTFNBeE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYzNSeVEyNTBJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ5YkR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuSnp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCemRHRjBhV01nWjJWMFUzUmhkSFZ6S0hSb2NtVmhaQ3dnWVhCd0xDQnBjMFY0YVhOMEtUb2dWR2h5WldGa1UzUmhkSFZ6Vkhsd1pTQjdYRzRnSUNBZ2JHVjBJSE4wWVhSMWN5QTlJSHRjYmlBZ0lDQWdJR1JwYzNCVWVYQmxPaUFuSnl3Z0x5OGdWRWxOUlV4SlRrVXNJRTFWVEZSSkxDQlRTVTVIVEVVc0lFTklTVXhFTENCTVQwZFRYRzRnSUNBZ0lDQnBjME55WldGMFpUb2dabUZzYzJVc1hHNGdJQ0FnSUNCcGMxSmxjWFZwY21WVmNITmxjblE2SUdaaGJITmxMRnh1SUNBZ0lDQWdhWE5OZFd4MGFYTjBjbVZoYlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0JwYzAxbFpHbGhRMmc2SUdaaGJITmxMRnh1SUNBZ0lDQWdhWE5VYjJkbmJHVk5kV3gwYVhOMGNtVmhiVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQm5aWFJOYjNKbE9pQm1ZV3h6WlN4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNGdJQ0FnTHlvZ2RHaHlaV0ZrNDRHTTU2bTY0NEd1VTJOb1pXMWg0NEdMNDRHcDQ0R0c0NEdMS0VSQzQ0R3I0NE9INDRPODQ0Sy80NEdNNWEyWTVaeW80NEdYNDRHcTQ0R0VLU0FnSUNBZ0lDQWdLaTljYmlBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dUlDQWdJSE4wWVhSMWN5NXBjME55WldGMFpTQTlJRlJvY21WaFpDNW5aWFJUZEdGMGRYTkRjbVZoZEdVb2FYTkZlR2x6ZENrN1hHNWNiaUFnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNiaUFnSUNBdktpRG1tN1RtbHJEamdZemx2NFhvcG9IamdhcDBhSEpsWVdUamdZdmpnYW5qZ1liamdZc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ292WEc0Z0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JpQWdJQ0J6ZEdGMGRYTXVhWE5TWlhGMWFYSmxWWEJ6WlhKMElEMGdWR2h5WldGa0xtZGxkRk4wWVhSMWMwbHpVbVZ4ZFdseVpWVndjMlZ5ZENoMGFISmxZV1FzSUhOMFlYUjFjeTVwYzBOeVpXRjBaU2s3WEc1Y2JpQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JpQWdJQ0F2S2lCTmRXeDBhWE4wY21WaGJlVzlvdVc4aitPQmkrT0JxZU9CaHVPQml5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNGdJQ0FnYzNSaGRIVnpMbWx6VFhWc2RHbHpkSEpsWVcwZ1BTQlVhSEpsWVdRdVoyVjBVM1JoZEhWelNYTk5kV3gwYVhOMGNtVmhiU2hoY0hBcE8xeHVYRzRnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzRnSUNBZ0x5b2dUWFZzZEdsemRISmxZVzNqZ2E3amc1empnci9qZzdQamdwTG1pcnpqZ1pmamdaL2pnWXNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ292WEc0Z0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JpQWdJQ0J6ZEdGMGRYTXVhWE5VYjJkbmJHVk5kV3gwYVhOMGNtVmhiU0E5SUZSb2NtVmhaQzVuWlhSVGRHRjBkWE5KYzFSdloyZHNaVTExYkhScGMzUnlaV0Z0S0dGd2NDazdYRzVjYmlBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmlBZ0lDQXZLaUIwYUhKbFlXVGpnWXpucWJyamdhNVRZMmhsYldIamdZdmpnYW5qZ1liamdZc29SRUxqZ2F2amc0ZmpnN3pqZ3IvamdZemxyWmpsbktqamdaZmpnYXJqZ1lRcElDQWdJQ0FnSUNBcUwxeHVJQ0FnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzRnSUNBZ2MzUmhkSFZ6TG1selRXVmthV0ZEYUNBOUlGUm9jbVZoWkM1blpYUlRkR0YwZFhOSmMwMWxaR2xoUTJnb2RHaHlaV0ZrTG1Ob0tUdGNiaUFnSUNCeVpYUjFjbTRnYzNSaGRIVnpPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2RsZEZOMFlYUjFjME55WldGMFpTaHBjMFY0YVhOMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNGcGMwVjRhWE4wTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRGTjBZWFIxYzBselVtVnhkV2x5WlZWd2MyVnlkQ2gwYUhKbFlXUXNJR2x6UTNKbFlYUmxJRDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQnBaaUFvSVdselEzSmxZWFJsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9jbVZoWkM1MWNHUmhkR1ZVYVcxbEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMGFISmxZV1JWY0dSaGRHVlVhVzFsSUQwZ2RHaHlaV0ZrTG5Wd1pHRjBaVlJwYldVdVoyVjBWR2x0WlNBL0lIUm9jbVZoWkM1MWNHUmhkR1ZVYVcxbExtZGxkRlJwYldVb0tTQTZJSFJvY21WaFpDNTFjR1JoZEdWVWFXMWxPMXh1WEc0Z0lDQWdJQ0F2THlEbmo3N2xuS2ptbVlMbGlMdmpncExsajVibHZwZGNiaUFnSUNBZ0lHTnZibk4wSUc1dmR5QTlJRzVsZHlCRVlYUmxLQ2s3WEc0Z0lDQWdJQ0JqYjI1emRDQnViM2RaWldGeUlEMGdibTkzTG1kbGRFWjFiR3haWldGeUtDazdYRzRnSUNBZ0lDQmpiMjV6ZENCdWIzZE5iMjUwYUNBOUlHNXZkeTVuWlhSTmIyNTBhQ2dwTzF4dUlDQWdJQ0FnWTI5dWMzUWdibTkzUkdGNUlEMGdibTkzTG1kbGRFUmhkR1VvS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJRzV2ZDBodmRYSWdQU0J1YjNjdVoyVjBTRzkxY25Nb0tUdGNiaUFnSUNBZ0lHTnZibk4wSUc1dmQwMXBiblYwWlhNZ1BTQnViM2N1WjJWMFRXbHVkWFJsY3lncE8xeHVJQ0FnSUNBZ1kyOXVjM1FnWVdOMGFYWmxSR0YwWlNBOUlHNWxkeUJFWVhSbEtHNXZkMWxsWVhJc0lHNXZkMDF2Ym5Sb0xDQnViM2RFWVhrc0lHNXZkMGh2ZFhJZ0xTQmpiMjVtTG1acGJtUlBibVZVYUhKbFlXUkJZM1JwZG1WSWIzVnlLVHRjYmlBZ0lDQWdJR052Ym5OMElHRmpkR2wyWlZScGJXVWdQU0JoWTNScGRtVkVZWFJsTG1kbGRGUnBiV1VvS1R0Y2JseHVJQ0FnSUNBZ0x5OGc0NEs1NDRPczQ0T0Q0NE9KNDRHdTVwdTA1cGF3NXBtQzZaYVQ0NEdvNDRDQjU0Kys1WnlvNXBtQzZaYVRJQzBnYmlEamdwTG1yNVRvdklQamdaZmpnYWJqZ0lIamdybmpnNnpqZzRQamc0bmpnYTdtbTdUbWxyRG1tWUxwbHBQamdZemxqNlRqZ1l2amdhUGpnWi9qZ29sMGNuVmw0NEtTNkwrVTQ0R1pYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHlaV0ZrVlhCa1lYUmxWR2x0WlNBOElHRmpkR2wyWlZScGJXVTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBVM1JoZEhWelNYTk5kV3gwYVhOMGNtVmhiU2hoY0hBcE9pQmliMjlzWldGdUlIdGNiaUFnSUNCcFppQW9ZWEJ3SUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnWVhCd0xtUnBjM0JVYUhKbFlXUlVlWEJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSEpsZEhWeWJpQmhjSEF1WkdsemNGUm9jbVZoWkZSNWNHVWdQVDA5SUVGd2NDNWthWE53VkdoeVpXRmtWSGx3WlUxMWJIUnBJQ1ltSUdGd2NDNXRkV3gwYVhOMGNtVmhiVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhSVGRHRjBkWE5KYzAxbFpHbGhRMmdvWTJncElIdGNiaUFnSUNCeVpYUjFjbTRnUVhCd0xtZGxkRWx6VFdWa2FXRkRhQ2hqYUNrN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBVM1JoZEhWelNYTlViMmRuYkdWTmRXeDBhWE4wY21WaGJTaGhjSEFwT2lCaWIyOXNaV0Z1SUh0Y2JpQWdJQ0F2THlCVVQwUlBPaUJLZFdSblpTQm1hWGdnWVdOMGFXOXVaV1F1WEc0Z0lDQWdhV1lnS0dGd2NDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElHRndjQzVoWTNScGIyNWxaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdjbVYwZFhKdUlHRndjQzVwYzFSdloyZHNaVTExYkhScGMzUnlaV0Z0TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFTnZiblJsYm5SVWVYQmxSbkp2YlVacGJtUlVlWEJsS0dOdmJuUmxiblJVZVhCbEtTQjdYRzRnSUNBZ1kyOXVjM1FnWm1sdVpGUjVjR1ZJZEcxc0lEMGdWR2h5WldGa0xtWnBibVJVZVhCbGMxdFVhSEpsWVdRdVptbHVaRlI1Y0dWSWRHMXNYVHRjYmlBZ0lDQmpiMjV6ZENCbWFXNWtWSGx3WlUxMWMybGpJRDBnVkdoeVpXRmtMbVpwYm1SVWVYQmxjMXRVYUhKbFlXUXVabWx1WkZSNWNHVk5kWE5wWTEwN1hHNGdJQ0FnWTI5dWMzUWdabWx1WkZSNWNHVldhV1JsYnlBOUlGUm9jbVZoWkM1bWFXNWtWSGx3WlhOYlZHaHlaV0ZrTG1acGJtUlVlWEJsVm1sa1pXOWRPMXh1WEc0Z0lDQWdiR1YwSUdacGJtUlVlWEJsT2lCMGVYQmxiMllnVkdoeVpXRmtMbVpwYm1SVWVYQmxTSFJ0YkNCOElIUjVjR1Z2WmlCVWFISmxZV1F1Wm1sdVpGUjVjR1ZOZFhOcFl5QjhJSFI1Y0dWdlppQlVhSEpsWVdRdVptbHVaRlI1Y0dWV2FXUmxieUI4SUhSNWNHVnZaaUJVYUhKbFlXUXVabWx1WkZSNWNHVlBkR2hsY2p0Y2JpQWdJQ0JwWmlBb1kyOXVkR1Z1ZEZSNWNHVWdKaVlnWTI5dWRHVnVkRlI1Y0dVZ0lUMDlJQ2NuS1NCN1hHNGdJQ0FnSUNCc1pYUWdjM0JzYVhSbFpFTnZiblJsYm5SVWVYQmxJRDBnSnljN1hHNGdJQ0FnSUNCcFppQW9ZMjl1ZEdWdWRGUjVjR1V1YVc1a1pYaFBaaWduT3ljcElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNCemNHeHBkR1ZrUTI5dWRHVnVkRlI1Y0dVZ1BTQmpiMjUwWlc1MFZIbHdaUzV6Y0d4cGRDZ25PeWNwV3pCZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR1pwYm1SVWVYQmxTSFJ0YkM1cGJtTnNkV1JsY3loamIyNTBaVzUwVkhsd1pTa2dmSHdnWm1sdVpGUjVjR1ZJZEcxc0xtbHVZMngxWkdWektITndiR2wwWldSRGIyNTBaVzUwVkhsd1pTa3BJSHRjYmlBZ0lDQWdJQ0FnWm1sdVpGUjVjR1VnUFNCVWFISmxZV1F1Wm1sdVpGUjVjR1ZJZEcxc08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR1pwYm1SVWVYQmxUWFZ6YVdNdWFXNWpiSFZrWlhNb1kyOXVkR1Z1ZEZSNWNHVXBJSHg4SUdacGJtUlVlWEJsVFhWemFXTXVhVzVqYkhWa1pYTW9jM0JzYVhSbFpFTnZiblJsYm5SVWVYQmxLU2tnZTF4dUlDQWdJQ0FnSUNCbWFXNWtWSGx3WlNBOUlGUm9jbVZoWkM1bWFXNWtWSGx3WlUxMWMybGpPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0dacGJtUlVlWEJsVm1sa1pXOHVhVzVqYkhWa1pYTW9ZMjl1ZEdWdWRGUjVjR1VwSUh4OElHWnBibVJVZVhCbFZtbGtaVzh1YVc1amJIVmtaWE1vYzNCc2FYUmxaRU52Ym5SbGJuUlVlWEJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQm1hVzVrVkhsd1pTQTlJRlJvY21WaFpDNW1hVzVrVkhsd1pWWnBaR1Z2TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ptbHVaRlI1Y0dVN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBSbWx1WkZSNWNHVkdjbTl0VTNKaktITnlZeWtnZTF4dUlDQWdJR052Ym5OMElITjBjaUE5SUVGd2NDNW5aWFJOWldScFlWUjVjR1ZHY205dFUzSmpLSE55WXlrN1hHNGdJQ0FnY21WMGRYSnVJSE4wY2k1amFHRnlRWFFvTUNrdWRHOVZjSEJsY2tOaGMyVW9LU0FySUhOMGNpNXpiR2xqWlNneEtUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRk5qYUdWdFlTQm1jbTl0SUNkamIyMXRiMjR2VTJOb1pXMWhKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdWR2h5WldGa2N5QmxlSFJsYm1SeklGTmphR1Z0WVNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0hCaGNtRnRjem9nWVc1NUlEMGdlMzBwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpTaHdZWEpoYlhNcE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHZGxkRTFsY21kbFpGUm9jbVZoWkhNb1ltRnpaVlJvY21WaFpITXNJRzFsY21kbFZHaHlaV0ZrS1NCN1hHNGdJQ0FnWW1GelpWUm9jbVZoWkhOYmJXVnlaMlZVYUhKbFlXUXVZMmhkSUQwZ2V5QXVMaTV0WlhKblpWUm9jbVZoWkNCOU8xeHVJQ0FnSUhKbGRIVnliaUJpWVhObFZHaHlaV0ZrY3p0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGTmphR1Z0WVNCbWNtOXRJQ2RqYjIxdGIyNHZVMk5vWlcxaEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1ZIVnVaVU5vSUdWNGRHVnVaSE1nVTJOb1pXMWhJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Z5WVcxek9pQmhibmtnUFNCN2ZTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnY21WMGRYSnVJSEJoY21GdGN6dGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJRk5qYUdWdFlTQm1jbTl0SUNkamIyMXRiMjR2VTJOb1pXMWhKenRjYmx4dWFXMXdiM0owSUZCdmMzUWdabkp2YlNBbllYQnBMM04wYjNKbEwxQnZjM1FuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJWYzJWeUlHVjRkR1Z1WkhNZ1UyTm9aVzFoSUh0Y2JpQWdjM1JoZEdsaklHZGxkQ0JrWldaaGRXeDBUMlptYzJWMFJtbHVaRWxrS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJRYjNOMExtUmxabUYxYkhSR2FXNWtTV1E3WEc0Z0lIMWNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdZWEpoYlhNNklHRnVlU0E5SUh0OUtTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0JqYjI1emRDQjFhV1FnUFNCd1lYSmhiWE1nSmlZZ2NHRnlZVzF6TG5WcFpDQS9JSEJoY21GdGN5NTFhV1FnT2lBbkp6dGNiaUFnSUNCamIyNXpkQ0IxZEhsd1pTQTlJSEJoY21GdGN5QW1KaUJ3WVhKaGJYTXVkWFI1Y0dVZ1B5QndZWEpoYlhNdWRYUjVjR1VnT2lBbkp6dGNibHh1SUNBZ0lDOHZJT1dKaXVtWnBPUzZpT1d1bWx4dUlDQWdJR052Ym5OMElIUjFibVZrUTJnZ1BTQndZWEpoYlhNZ0ppWWdjR0Z5WVcxekxuUjFibVZrUTJnZ1B5QndZWEpoYlhNdWRIVnVaV1JEYUNBNklDY25PMXh1SUNBZ0lHTnZibk4wSUcxMWJIUnBjM1J5WldGdFpXUWdQU0J3WVhKaGJYTWdKaVlnY0dGeVlXMXpMbTExYkhScGMzUnlaV0Z0WldRZ1B5QndZWEpoYlhNdWJYVnNkR2x6ZEhKbFlXMWxaQ0E2SUdaaGJITmxPMXh1SUNBZ0lHTnZibk4wSUdGamRHbHZibVZrSUQwZ2NHRnlZVzF6SUNZbUlIQmhjbUZ0Y3k1aFkzUnBiMjVsWkNBL0lIQmhjbUZ0Y3k1aFkzUnBiMjVsWkNBNklDY25PMXh1SUNBZ0lHTnZibk4wSUc5bVpuTmxkRVpwYm1SSlpDQTlJSEJoY21GdGN5QW1KaUJ3WVhKaGJYTXViMlptYzJWMFJtbHVaRWxrSUQ4Z2NHRnlZVzF6TG05bVpuTmxkRVpwYm1SSlpDQTZJRlZ6WlhJdVpHVm1ZWFZzZEU5bVpuTmxkRVpwYm1SSlpEdGNiaUFnSUNCamIyNXpkQ0J2Wm1aelpYUlRhVzVuYkdWR2FXNWtTV1FnUFNCd1lYSmhiWE1nSmlZZ2NHRnlZVzF6TG05bVpuTmxkRk5wYm1kc1pVWnBibVJKWkNBL0lIQmhjbUZ0Y3k1dlptWnpaWFJUYVc1bmJHVkdhVzVrU1dRZ09pQlZjMlZ5TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNGdJQ0FnWTI5dWMzUWdiMlptYzJWMFRYVnNkR2xHYVc1a1NXUWdQU0J3WVhKaGJYTWdKaVlnY0dGeVlXMXpMbTltWm5ObGRFMTFiSFJwUm1sdVpFbGtJRDhnY0dGeVlXMXpMbTltWm5ObGRFMTFiSFJwUm1sdVpFbGtJRG9nVlhObGNpNWtaV1poZFd4MFQyWm1jMlYwUm1sdVpFbGtPMXh1SUNBZ0lHTnZibk4wSUc5bVpuTmxkRU5vYVd4a1JtbHVaRWxrSUQwZ2NHRnlZVzF6SUNZbUlIQmhjbUZ0Y3k1dlptWnpaWFJEYUdsc1pFWnBibVJKWkNBL0lIQmhjbUZ0Y3k1dlptWnpaWFJEYUdsc1pFWnBibVJKWkNBNklGVnpaWEl1WkdWbVlYVnNkRTltWm5ObGRFWnBibVJKWkR0Y2JpQWdJQ0JqYjI1emRDQnZabVp6WlhSTWIyZHpSbWx1WkVsa0lEMGdjR0Z5WVcxeklDWW1JSEJoY21GdGN5NXZabVp6WlhSTWIyZHpSbWx1WkVsa0lEOGdjR0Z5WVcxekxtOW1abk5sZEV4dlozTkdhVzVrU1dRZ09pQlZjMlZ5TG1SbFptRjFiSFJQWm1aelpYUkdhVzVrU1dRN1hHNWNiaUFnSUNCamIyNXpkQ0J5WlhGMVpYTjBURzluYVc1VWVYQmxJRDBnY0dGeVlXMXpMbkpsY1hWbGMzUk1iMmRwYmxSNWNHVWdQeUJ3WVhKaGJYTXVjbVZ4ZFdWemRFeHZaMmx1Vkhsd1pTQTZJQ2NuTzF4dUlDQWdJR052Ym5OMElHWnlhV1Z1WkhNZ1BTQmJYVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVW9lMXh1SUNBZ0lDQWdkV2xrTEZ4dUlDQWdJQ0FnZFhSNWNHVXNYRzRnSUNBZ0lDQjBkVzVsWkVOb0xGeHVJQ0FnSUNBZ2JYVnNkR2x6ZEhKbFlXMWxaQ3hjYmlBZ0lDQWdJR0ZqZEdsdmJtVmtMRnh1SUNBZ0lDQWdiMlptYzJWMFJtbHVaRWxrTEZ4dUlDQWdJQ0FnYjJabWMyVjBVMmx1WjJ4bFJtbHVaRWxrTEZ4dUlDQWdJQ0FnYjJabWMyVjBUWFZzZEdsR2FXNWtTV1FzWEc0Z0lDQWdJQ0J2Wm1aelpYUkRhR2xzWkVacGJtUkpaQ3hjYmlBZ0lDQWdJRzltWm5ObGRFeHZaM05HYVc1a1NXUXNYRzRnSUNBZ0lDQm1jbWxsYm1SekxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHZGxkRTltWm5ObGRFWnBibVJKWkNoN0lIQnZjM1J6SUgwcElIdGNiaUFnSUNCcFppQW9jRzl6ZEhNZ0ppWWdjRzl6ZEhOYk1GMGdKaVlnY0c5emRITmJNRjB1WDJsa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NHOXpkSE5iTUYwdVgybGtPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVUc5emRDNWtaV1poZFd4MFJtbHVaRWxrTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFaHlaV1lvY0dGeVlXMXpPaUJoYm5rZ1BTQjdmU2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUIzYVc1a2IzY3ViRzlqWVhScGIyNGdKaVlnZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldZcElIdGNiaUFnSUNBZ0lDOHZJSEpsZEhWeWJpQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWFISmxaanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvY0dGeVlXMXpJQ1ltSUhCaGNtRnRjeTVvY21WbUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NHRnlZVzF6TG1oeVpXWTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUFuTHljN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJR0Z3Y0d4NVRXbGtaR3hsZDJGeVpTd2dZM0psWVhSbFUzUnZjbVVnZlNCbWNtOXRJQ2R5WldSMWVDYzdYRzVjYm1sdGNHOXlkQ0J0YVdSa2JHVjNZWEpsSUdaeWIyMGdKMkZ3YVM5dGFXUmtiR1YzWVhKbEx5YzdYRzVwYlhCdmNuUWdZWEJwVW1Wa2RXTmxjbk1nWm5KdmJTQW5ZWEJwTDNKbFpIVmpaWEp6Snp0Y2JseHVaR1ZqYkdGeVpTQm5iRzlpWVd3Z2UxeHVJQ0JwYm5SbGNtWmhZMlVnVFc5a2RXeGxJSHRjYmlBZ0lDQm9iM1E2SUdGdWVUdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQmhjR2xUZEc5eVpTaHBibWwwYVdGc1UzUmhkR1VnUFNCN2ZTa2dlMXh1SUNCc1pYUWdZMjl0Y0c5elpVVnVhR0Z1WTJWeWN5QTlJRzUxYkd3N1hHNGdJR3hsZENCdGFXUmtiR1YzWVhKbGN5QTlJRnR0YVdSa2JHVjNZWEpsTG5Wd1pHRjBaVUZqZEdsdmJsMDdYRzRnSUdOdmJuTjBJSE4wYjNKbElEMGdZM0psWVhSbFUzUnZjbVVvWEc0Z0lDQWdZWEJwVW1Wa2RXTmxjbk1zWEc0Z0lDQWdhVzVwZEdsaGJGTjBZWFJsTEZ4dUlDQWdJR052YlhCdmMyVkZibWhoYm1ObGNuTWdQeUJqYjIxd2IzTmxSVzVvWVc1alpYSnpLR0Z3Y0d4NVRXbGtaR3hsZDJGeVpTZ3VMaTV0YVdSa2JHVjNZWEpsY3lrcElEb2dZWEJ3YkhsTmFXUmtiR1YzWVhKbEtDNHVMbTFwWkdSc1pYZGhjbVZ6S1Z4dUlDQXBPMXh1WEc0Z0lHbG1JQ2h0YjJSMWJHVXVhRzkwS1NCN1hHNGdJQ0FnYlc5a2RXeGxMbWh2ZEM1aFkyTmxjSFFvSnk0dUwzSmxaSFZqWlhKekp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYm1WNGRGSmxaSFZqWlhJZ1BTQnlaWEYxYVhKbEtDY3VMaTl5WldSMVkyVnljeWNwTzF4dUlDQWdJQ0FnYzNSdmNtVXVjbVZ3YkdGalpWSmxaSFZqWlhJb2JtVjRkRkpsWkhWalpYSXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSE4wYjNKbE8xeHVmVnh1SWl3aWFXMXdiM0owSUVKdmIzUlBjSFJwYjI0Z1puSnZiU0FuWTI5dGJXOXVMMEp2YjNSUGNIUnBiMjRuTzF4dVhHNXBiWEJ2Y25RZ1FXTjBhVzl1VEc5bklHWnliMjBnSjJGd2FTOXpkRzl5WlM5QlkzUnBiMjVNYjJkekp6dGNibWx0Y0c5eWRDQkJibUZzZVhwbElHWnliMjBnSjJGd2FTOXpkRzl5WlM5QmJtRnNlWHBsSnp0Y2JtbHRjRzl5ZENCQmNIQWdabkp2YlNBbllYQnBMM04wYjNKbEwwRndjQ2M3WEc1cGJYQnZjblFnVFdWdWRVeHZaM01nWm5KdmJTQW5ZWEJwTDNOMGIzSmxMMDFsYm5WTWIyZHpKenRjYm1sdGNHOXlkQ0JRYjNOMGN5Qm1jbTl0SUNkaGNHa3ZjM1J2Y21VdlVHOXpkSE1uTzF4dWFXMXdiM0owSUZCdmMzUnpWR2x0Wld4cGJtVWdabkp2YlNBbllYQnBMM04wYjNKbEwxQnZjM1J6VkdsdFpXeHBibVVuTzF4dWFXMXdiM0owSUZCdmMzUnpWR2x0Wld4cGJtVlRkRzlqYXlCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VUc5emRITlVhVzFsYkdsdVpWTjBiMk5ySnp0Y2JtbHRjRzl5ZENCU1lXNXJjeUJtY205dElDZGhjR2t2YzNSdmNtVXZVbUZ1YTNNbk8xeHVhVzF3YjNKMElGUm9jbVZoWkNCbWNtOXRJQ2RoY0drdmMzUnZjbVV2VkdoeVpXRmtKenRjYm1sdGNHOXlkQ0JVZFc1bFEyZ2dabkp2YlNBbllYQnBMM04wYjNKbEwxUjFibVZEYUNjN1hHNXBiWEJ2Y25RZ1ZYTmxjaUJtY205dElDZGhjR2t2YzNSdmNtVXZWWE5sY2ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVGd2FWTjBZWFJsSUh0Y2JpQWdjbUZ1YTNNNklGSmhibXR6TzF4dUlDQnRaVzUxVEc5bmN6b2dUV1Z1ZFV4dlozTTdYRzRnSUhCdmMzUnpPaUJRYjNOMGN6dGNiaUFnY0c5emRITk5kV3gwYVRvZ1VHOXpkSE03WEc0Z0lIQnZjM1J6VTJsdVoyeGxPaUJRYjNOMGN6dGNiaUFnY0c5emRITkRhR2xzWkRvZ1VHOXpkSE03WEc0Z0lIQnZjM1J6VkdsdFpXeHBibVU2SUZCdmMzUnpWR2x0Wld4cGJtVTdYRzRnSUhCdmMzUnpWR2x0Wld4cGJtVlRkRzlqYXpvZ1VHOXpkSE5VYVcxbGJHbHVaVk4wYjJOck8xeHVJQ0J3YjNOMGMweHZaM002SUZCdmMzUnpPMXh1SUNCaGJtRnNlWHBsT2lCQmJtRnNlWHBsTzF4dUlDQmliMjkwVDNCMGFXOXVPaUJDYjI5MFQzQjBhVzl1TzF4dUlDQjBhSEpsWVdSek9pQmJWR2h5WldGa1hUdGNiaUFnZEdoeVpXRmtPaUJVYUhKbFlXUTdYRzRnSUhSb2NtVmhaRVJsZEdGcGJEb2dWR2h5WldGa08xeHVJQ0JoY0hBNklFRndjRHRjYmlBZ2RYTmxjam9nVlhObGNqdGNiaUFnZEhWdVpVTm9PaUJVZFc1bFEyZzdYRzRnSUdGamRHbHZia3h2WnpvZ1FXTjBhVzl1VEc5bk8xeHVJQ0JqYjI1emRISjFZM1J2Y2loaWIyOTBUM0IwYVc5dU9pQkNiMjkwVDNCMGFXOXVMQ0JqWVdOb1pYTTZJR0Z1ZVNBOUlIdDlLU0I3WEc0Z0lDQWdkR2hwY3k1aWIyOTBUM0IwYVc5dUlEMGdZbTl2ZEU5d2RHbHZianRjYmlBZ0lDQjBhR2x6TG5KaGJtdHpJRDBnYm1WM0lGSmhibXR6S0NrN1hHNGdJQ0FnZEdocGN5NXRaVzUxVEc5bmN5QTlJRzVsZHlCTlpXNTFURzluY3loallXTm9aWE11YldWdWRVeHZaM01wTzF4dUlDQWdJSFJvYVhNdWNHOXpkSE1nUFNCdVpYY2dVRzl6ZEhNb0tUdGNiaUFnSUNCMGFHbHpMbkJ2YzNSelRYVnNkR2tnUFNCdVpYY2dVRzl6ZEhNb0tUdGNiaUFnSUNCMGFHbHpMbkJ2YzNSelUybHVaMnhsSUQwZ2JtVjNJRkJ2YzNSektDazdYRzRnSUNBZ2RHaHBjeTV3YjNOMGMwTm9hV3hrSUQwZ2JtVjNJRkJ2YzNSektDazdYRzRnSUNBZ2RHaHBjeTV3YjNOMGMxUnBiV1ZzYVc1bElEMGdibVYzSUZCdmMzUnpWR2x0Wld4cGJtVW9LVHRjYmlBZ0lDQjBhR2x6TG5CdmMzUnpWR2x0Wld4cGJtVlRkRzlqYXlBOUlHNWxkeUJRYjNOMGMxUnBiV1ZzYVc1bFUzUnZZMnNvS1R0Y2JpQWdJQ0IwYUdsekxuQnZjM1J6VEc5bmN5QTlJRzVsZHlCUWIzTjBjeWdwTzF4dUlDQWdJSFJvYVhNdVlXNWhiSGw2WlNBOUlHNWxkeUJCYm1Gc2VYcGxLQ2s3WEc0Z0lDQWdkR2hwY3k1MGFISmxZV1FnUFNCdVpYY2dWR2h5WldGa0tIUm9hWE11WW05dmRFOXdkR2x2Yml3Z1kyRmphR1Z6TG5Sb2NtVmhaQ2s3WEc0Z0lDQWdkR2hwY3k1MGFISmxZV1JFWlhSaGFXd2dQU0J1WlhjZ1ZHaHlaV0ZrS0hSb2FYTXVZbTl2ZEU5d2RHbHZiaXdnWTJGamFHVnpMblJvY21WaFpDazdYRzRnSUNBZ2RHaHBjeTVoY0hBZ1BTQnVaWGNnUVhCd0tFRndhVk4wWVhSbExtZGxkRUZ3Y0ZCaGNtRnRjeWgwYUdsekxuUm9jbVZoWkN3Z2RHaHBjeTVpYjI5MFQzQjBhVzl1TENCallXTm9aWE1wS1R0Y2JpQWdJQ0IwYUdsekxuUjFibVZEYUNBOUlHNWxkeUJVZFc1bFEyZ29LVHRjYmlBZ0lDQjBhR2x6TG5WelpYSWdQU0J1WlhjZ1ZYTmxjaWhCY0dsVGRHRjBaUzVuWlhSVmMyVnlVR0Z5WVcxektIUm9hWE1zSUdOaFkyaGxjeWtwTzF4dUlDQWdJSFJvYVhNdVlXTjBhVzl1VEc5bklEMGdibVYzSUVGamRHbHZia3h2WnlncE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHZGxkRUZ3Y0ZCaGNtRnRjeWgwYUhKbFlXUXNJR0p2YjNSUGNIUnBiMjRzSUdOaFkyaGxjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQnBjMVJ5WVc1emFYUnBiMjQ2SUhSeWRXVXNYRzRnSUNBZ0lDQnliMjkwVkdsMGJHVTZJSFJvY21WaFpDNTBhWFJzWlN4Y2JpQWdJQ0FnSUM0dUxtSnZiM1JQY0hScGIyNHNYRzRnSUNBZ0lDQXVMaTUwYUhKbFlXUXNYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFJWYzJWeVVHRnlZVzF6S0hObGJHWXNJR05oWTJobGN5a2dlMXh1SUNBZ0lHbG1JQ2hqWVdOb1pYTWdKaVlnWTJGamFHVnpMblZ6WlhJZ0ppWWdZMkZqYUdWekxuVnpaWEl1ZFdsa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2V5QXVMaTVqWVdOb1pYTXVkWE5sY2lCOU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmthWE53VkdoeVpXRmtWSGx3WlNBOUlITmxiR1l1ZEdoeVpXRmtMbU5vSUQwOVBTQnpaV3htTG1Gd2NDNXliMjkwUTJnZ1B5QkJjSEF1WkdsemNGUm9jbVZoWkZSNWNHVk5kV3gwYVNBNklFRndjQzVrYVhOd1ZHaHlaV0ZrVkhsd1pWTnBibWRzWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3SUdScGMzQlVhSEpsWVdSVWVYQmxJSDA3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWjJWMElHTm9LQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5Sb2NtVmhaQzVqYUR0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElFSnZiM1JQY0hScGIyNGdabkp2YlNBblkyOXRiVzl1TDBKdmIzUlBjSFJwYjI0bk8xeHVhVzF3YjNKMElGQnZjM1JOWlhOellXZGxMQ0I3SUUxbGMzTmhaMlZEYkdsbGJuUkJibVJYYzBGd2FWUjVjR1VzSUUxbGMzTmhaMlZRWVhKaGJYTWdmU0JtY205dElDZGpiMjF0YjI0dlVHOXpkRTFsYzNOaFoyVW5PMXh1YVcxd2IzSjBJRk5sY1hWbGJtTmxJR1p5YjIwZ0oyTnZiVzF2Ymk5VFpYRjFaVzVqWlNjN1hHNWNibWx0Y0c5eWRDQlhjeUJtY205dElDZGhjR2t2VjNNbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCWGMwRndhVmR2Y210bGNpQjdYRzRnSUdsa1B6b2djM1J5YVc1bk8xeHVJQ0JpYjI5MFQzQjBhVzl1T2lCQ2IyOTBUM0IwYVc5dU8xeHVJQ0IzY3pvZ1YzTTdYRzRnSUhkdmNtdGxjam9nVjI5eWEyVnlPMXh1SUNCamIyNXpkSEoxWTNSdmNpaDNiM0pyWlhJNklGZHZjbXRsY2lrZ2UxeHVJQ0FnSUM4dklIZGxZaUJ6YjJOclpYUWdjMlZ5ZG1WeUxseHVJQ0FnSUhSb2FYTXViMjVOWlhOellXZGxJRDBnZEdocGN5NXZiazFsYzNOaFoyVXVZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TG05dVRXVnpjMkZuWlVWeWNtOXlJRDBnZEdocGN5NXZiazFsYzNOaFoyVkZjbkp2Y2k1aWFXNWtLSFJvYVhNcE8xeHVJQ0FnSUhSb2FYTXVjRzl6ZEUxbGMzTmhaMlVnUFNCMGFHbHpMbkJ2YzNSTlpYTnpZV2RsTG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NTNiM0pyWlhJZ1BTQjNiM0pyWlhJN1hHNGdJQ0FnZEdocGN5NTNiM0pyWlhJdWIyNWxjbkp2Y2lBOUlIUm9hWE11YjI1TlpYTnpZV2RsUlhKeWIzSTdYRzRnSUNBZ2RHaHBjeTUzYjNKclpYSXViMjV0WlhOellXZGxJRDBnZEdocGN5NXZiazFsYzNOaFoyVTdYRzRnSUNBZ2RHaHBjeTUzY3lBOUlHNWxkeUJYY3loMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJ3YjNOMFRXVnpjMkZuWlNodFpYUm9iMlE2SUhOMGNtbHVaeXdnY0dGeVlXMXpPaUJOWlhOellXZGxVR0Z5WVcxeklEMGdlMzBzSUcxbGRHaHZaRUpoWTJzL0tUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMzUWdiV1Z6YzJGblpUb2dUV1Z6YzJGblpVTnNhV1Z1ZEVGdVpGZHpRWEJwVkhsd1pTQTlJSHRjYmlBZ0lDQWdJR2xrT2lCMGFHbHpMbWxrTEZ4dUlDQWdJQ0FnZEhsd1pUb2dVRzl6ZEUxbGMzTmhaMlV1VjFOQlVFbGZWRTlmUTB4SlJVNVVYMVJaVUVVc1hHNGdJQ0FnSUNCcGIxUjVjR1U2SUZObGNYVmxibU5sTGtGUVNWOVRSVlJWVUN4Y2JpQWdJQ0FnSUcxbGRHaHZaQ3hjYmlBZ0lDQWdJSEJoY21GdGN5eGNiaUFnSUNBZ0lHMWxkR2h2WkVKaFkyc3NYRzRnSUNBZ2ZUdGNiaUFnSUNCMGFHbHpMbmR2Y210bGNpNXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxLVHRjYmlBZ2ZWeHVJQ0J3Y21sMllYUmxJRzl1VFdWemMyRm5aU2hsT2lCTlpYTnpZV2RsUlhabGJuUXBPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdsa0xDQjBlWEJsTENCcGIxUjVjR1VzSUcxbGRHaHZaQ3dnY0dGeVlXMXpJSDA2SUUxbGMzTmhaMlZEYkdsbGJuUkJibVJYYzBGd2FWUjVjR1VnUFNCbExtUmhkR0U3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaU0E5UFQwZ1VHOXpkRTFsYzNOaFoyVXVRMHhKUlU1VVgxUlBYMWRUUVZCSlgxUlpVRVVwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkM011WlhobEtHMWxkR2h2WkN3Z2NHRnlZVzF6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY0hKcGRtRjBaU0J2YmsxbGMzTmhaMlZGY25KdmNpaGxPaUJGY25KdmNrVjJaVzUwS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dVcE8xeHVJQ0I5WEc1OVhHNWNibTVsZHlCWGMwRndhVmR2Y210bGNpaHpaV3htSUdGeklHRnVlU2s3WEc0aUxDSnBiWEJ2Y25RZ1UyVnhkV1Z1WTJVZ1puSnZiU0FuWTI5dGJXOXVMMU5sY1hWbGJtTmxKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzl6ZEUxbGMzTmhaMlVnZTF4dUlDQXZMeUJJUVU1RVRFVWdRMHhKUlU1VUlFRk9SQ0JYVTBGUVNWeHVJQ0J6ZEdGMGFXTWdaMlYwSUVoQlRrUk1SVjlEVEVsRlRsUmZRVTVFWDFkVFFWQkpLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5TRUZPUkV4RlgwTk1TVVZPVkY5QlRrUmZWMU5CVUVrbk8xeHVJQ0I5WEc0Z0lITjBZWFJwWXlCblpYUWdWMU5CVUVsZlZFOWZRMHhKUlU1VVgxUlpVRVVvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2RYVTBGUVNWOVVUMTlEVEVsRlRsUmZWRmxRUlNjN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRDQkRURWxGVGxSZlZFOWZWMU5CVUVsZlZGbFFSU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKME5NU1VWT1ZGOVVUMTlYVTBGUVNWOVVXVkJGSnp0Y2JpQWdmVnh1WEc0Z0lDOHZJRWhCVGtSTVJWOUJVRWxmUVU1RVgwTk1TVVZPVkZ4dUlDQnpkR0YwYVdNZ1oyVjBJRWhCVGtSTVJWOUJVRWxmUVU1RVgwTk1TVVZPVkNncElIdGNiaUFnSUNCeVpYUjFjbTRnSjBoQlRrUk1SVjlCVUVsZlFVNUVYME5NU1VWT1ZDYzdYRzRnSUgxY2JpQWdjM1JoZEdsaklHZGxkQ0JCVUVsZlZFOWZRMHhKUlU1VVgxUlpVRVVvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2RCVUVsZlZFOWZRMHhKUlU1VVgxUlpVRVVuTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1EweEpSVTVVWDFSUFgwRlFTVjlVV1ZCRktDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBblEweEpSVTVVWDFSUFgwRlFTVjlVV1ZCRkp6dGNiaUFnZlZ4dVhHNGdJQzh2SUVoQlRrUk1SVjlCVUVsZlFVNUVYMFZZVkZ4dUlDQnpkR0YwYVdNZ1oyVjBJRWhCVGtSTVJWOUZXRlJmUVU1RVgwRlFTU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMGhCVGtSTVJWOUZXRlJmUVU1RVgwRlFTU2M3WEc0Z0lIMWNiaUFnYzNSaGRHbGpJR2RsZENCTlJVUkpRVjlVVDE5RFRFbEZUbFJmVkZsUVJTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0owMUZSRWxCWDFSUFgwTk1TVVZPVkY5VVdWQkZKenRjYmlBZ2ZWeHVJQ0J6ZEdGMGFXTWdaMlYwSUVWWVZGOVVUMTlCVUVsZlZGbFFSU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMFZZVkY5VVQxOUJVRWxmVkZsUVJTYzdYRzRnSUgxY2JseHVJQ0F2THlCSVFVNUVURVZmUTB4SlJVNVVYMEZPUkY5RldGUmNiaUFnYzNSaGRHbGpJR2RsZENCSVFVNUVURVZmUlZoVVgwRk9SRjlEVEVsRlRsUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZG9ZVzVrYkdWRmVIUkJibVJEYkdsbGJuUW5PMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnUTB4SlJVNVVYMVJQWDBWWVZGOVVXVkJGS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuUTB4SlJVNVVYMVJQWDBWWVZGOVVXVkJGSnp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElFVllWRjlVVDE5RFRFbEZUbFJmVkZsUVJTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0owVllWRjlVVDE5RFRFbEZUbFJmVkZsUVJTYzdYRzRnSUgxY2JpQWdjM1JoZEdsaklHZGxkQ0JJUVU1RVRFVmZUVVZFU1VGZlUwVlNWa1ZTWDBGT1JGOU5SVVJKUVY5RFRFbEZUbFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2RvWVc1a2JHVk5aV1JwWVZObGNuWmxja0Z1WkUxbFpHbGhRMnhwWlc1MEp6dGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBJRTFGUkVsQlgxTkZVbFpGVWw5VVQxOU5SVVJKUVY5RFRFbEZUbFJmVkZsUVJTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0owMUZSRWxCWDFORlVsWkZVbDlVVDE5TlJVUkpRVjlEVEVsRlRsUmZWRmxRUlNjN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRDQk5SVVJKUVY5RFRFbEZUbFJmVkU5ZlRVVkVTVUZmVTBWU1ZrVlNYMVJaVUVVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNkTlJVUkpRVjlEVEVsRlRsUmZWRTlmVFVWRVNVRmZVMFZTVmtWU1gxUlpVRVVuTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJqYjI1MlpYSjBRWEJwVkc5RGJHbGxiblJCWTNScGIyNVVlWEJsS0dGamRHbHZibFI1Y0dVcElIdGNiaUFnSUNCcFppQW9ZV04wYVc5dVZIbHdaUzVwYm1SbGVFOW1LRk5sY1hWbGJtTmxMa0ZRU1Y5VVQxOVRSVkpXUlZKZlVrVlJWVVZUVkNrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNVVlWEJsTG5KbGNHeGhZMlVvVTJWeGRXVnVZMlV1UVZCSlgxUlBYMU5GVWxaRlVsOVNSVkZWUlZOVUxDQlRaWEYxWlc1alpTNUJVRWxmVkU5ZlEweEpSVTVVWDFKRlVWVkZVMVFwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWVdOMGFXOXVWSGx3WlM1cGJtUmxlRTltS0ZObGNYVmxibU5sTGxORlVsWkZVbDlVVDE5QlVFbGZSVTFKVkNrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNVVlWEJsTG5KbGNHeGhZMlVvVTJWeGRXVnVZMlV1VTBWU1ZrVlNYMVJQWDBGUVNWOUZUVWxVTENCVFpYRjFaVzVqWlM1QlVFbGZWRTlmUTB4SlJVNVVYMFZOU1ZRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1lXTjBhVzl1Vkhsd1pTNXBibVJsZUU5bUtGTmxjWFZsYm1ObExsTkZVbFpGVWw5VVQxOUJVRWxmUWxKUFFVUkRRVk5VS1NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJsUjVjR1V1Y21Wd2JHRmpaU2hUWlhGMVpXNWpaUzVUUlZKV1JWSmZWRTlmUVZCSlgwSlNUMEZFUTBGVFZDd2dVMlZ4ZFdWdVkyVXVRVkJKWDFSUFgwTk1TVVZPVkY5Q1VrOUJSRU5CVTFRcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZRUZRU1Y5VVQxOURURWxGVGxSYlFVTlVTVTlPWFRva2UyRmpkR2x2YmxSNWNHVjlZRHRjYmlBZ2ZWeHVJQ0J6ZEdGMGFXTWdaMlYwVFdWemMyRm5aVlI1Y0dWektHRmpkR2x2YmxSNWNHVXBJSHRjYmlBZ0lDQmpiMjV6ZENCemNHeHBkR1ZrTVNBOUlHRmpkR2x2YmxSNWNHVXVjM0JzYVhRb0p6b25LVHRjYmlBZ0lDQmpiMjV6ZENCemNHeHBkR1ZrTWlBOUlITndiR2wwWldReFd6QmRMbk53YkdsMEtDZGJKeWs3WEc0Z0lDQWdZMjl1YzNRZ2FXOVVlWEJsSUQwZ2MzQnNhWFJsWkRKYk1WMHVjbVZ3YkdGalpTZ25YU2NzSUNjbktUdGNiaUFnSUNCamIyNXpkQ0JsZUdWTlpYUm9iMlFnUFNCemNHeHBkR1ZrTVZzeFhUdGNiaUFnSUNCeVpYUjFjbTRnZXlCcGIxUjVjR1VzSUdWNFpVMWxkR2h2WkNCOU8xeHVJQ0I5WEc0Z0lITjBZWFJwWXlCamIyNTJaWEowUlhoMFZHOURiR2xsYm5SQlkzUnBiMjVVZVhCbEtHRmpkR2x2YmxSNWNHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lFVllWRjlVVDE5RFRFbEZUbFJiUVVOVVNVOU9YVG9rZTJGamRHbHZibFI1Y0dWOVlEdGNiaUFnZlZ4dWZWeHVYRzR2THlCamIyMXRiMjR1WEc1bGVIQnZjblFnWTI5dWMzUWdTR0Z1Wkd4bFRXVnpjMkZuWlUxbGRHaHZaQ0E5SUNkb1lXNWtiR1VuTzF4dVpYaHdiM0owSUdOdmJuTjBJRWhoYm1Sc1pWSmxjWFZsYzNSTlpYUm9iMlFnUFNBbmFHRnVaR3hsSnp0Y2JtVjRjRzl5ZENCMGVYQmxJRWx2Vkhsd1pWWmhiSFZsY3lBOVhHNGdJSHdnZEhsd1pXOW1JRk5sY1hWbGJtTmxMa0ZRU1Y5VFJWUlZVRnh1SUNCOElIUjVjR1Z2WmlCVFpYRjFaVzVqWlM1QlVFbGZVa1ZSVlVWVFZGOVVXVkJGWEc0Z0lId2dkSGx3Wlc5bUlGTmxjWFZsYm1ObExrRlFTVjlTUlZOUVQwNVRSVjlVV1ZCRlgwVk5TVlJjYmlBZ2ZDQjBlWEJsYjJZZ1UyVnhkV1Z1WTJVdVFWQkpYMUpGVTFCUFRsTkZYMVJaVUVWZlFsSlBRVVJEUVZOVVhHNGdJSHdnZEhsd1pXOW1JRk5sY1hWbGJtTmxMbFZPUzA1UFYwNDdYRzVsZUhCdmNuUWdkSGx3WlNCSmIxUjVjR1VnUFNCN1hHNGdJR2x2Vkhsd1pUb2dTVzlVZVhCbE8xeHVmVHRjYm1WNGNHOXlkQ0IwZVhCbElFMWxjM05oWjJWUVlYSmhiWE5HY21WbElEMGdleUJyWlhrNklITjBjbWx1WnpzZ2RtRnNkV1U2SUdGdWVTQjlJSHdnZTMwN1hHNWxlSEJ2Y25RZ2RIbHdaU0JOWlhOellXZGxVR0Z5WVcxeklEMGdleUJyWlhrNklITjBjbWx1WnpzZ2RtRnNkV1U2SUdGdWVTQjlJSHdnZTMwN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUUxbGMzTmhaMlZEYkdsbGJuUkJibVJYYzBGd2FWUjVjR1VnUFNCN1hHNGdJR2xrT2lCemRISnBibWM3WEc0Z0lIUjVjR1U2SUhSNWNHVnZaaUJRYjNOMFRXVnpjMkZuWlM1WFUwRlFTVjlVVDE5RFRFbEZUbFJmVkZsUVJTQjhJSFI1Y0dWdlppQlFiM04wVFdWemMyRm5aUzVEVEVsRlRsUmZWRTlmVjFOQlVFbGZWRmxRUlR0Y2JpQWdhVzlVZVhCbE9pQkpiMVI1Y0dWV1lXeDFaWE03WEc0Z0lHMWxkR2h2WkRvZ2MzUnlhVzVuTzF4dUlDQndZWEpoYlhNL09pQk5aWE56WVdkbFVHRnlZVzF6TzF4dUlDQnRaWFJvYjJSQ1lXTnJQem9nYzNSeWFXNW5PMXh1ZlR0Y2JseHVaWGh3YjNKMElIUjVjR1VnVFdWemMyRm5aVU5zYVdWdWRFRnVaRVY0ZEZSNWNHVWdQU0I3WEc0Z0lHbGtPaUJ6ZEhKcGJtYzdYRzRnSUhSNWNHVTZJSFI1Y0dWdlppQlFiM04wVFdWemMyRm5aUzVGV0ZSZlZFOWZRMHhKUlU1VVgxUlpVRVVnZkNCMGVYQmxiMllnVUc5emRFMWxjM05oWjJVdVEweEpSVTVVWDFSUFgwVllWRjlVV1ZCRk8xeHVJQ0JwYjFSNWNHVTZJRWx2Vkhsd1pWWmhiSFZsY3p0Y2JpQWdiV1YwYUc5a09pQnpkSEpwYm1jN1hHNGdJR2h5WldZNklITjBjbWx1Wnp0Y2JpQWdjR0Z5WVcxelB6b2dUV1Z6YzJGblpWQmhjbUZ0Y3p0Y2JpQWdiV1YwYUc5a1FtRmphejg2SUhOMGNtbHVaenRjYm4wN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUUxbGMzTmhaMlZOWldScFlVTnNhV1Z1ZEVGdVpFMWxaR2xoVTJWeWRtVnlWSGx3WlNBOUlIdGNiaUFnYVdRNklITjBjbWx1Wnp0Y2JpQWdkSGx3WlRvZ2RIbHdaVzltSUZCdmMzUk5aWE56WVdkbExrMUZSRWxCWDBOTVNVVk9WRjlVVDE5TlJVUkpRVjlUUlZKV1JWSmZWRmxRUlNCOElIUjVjR1Z2WmlCUWIzTjBUV1Z6YzJGblpTNU5SVVJKUVY5VFJWSldSVkpmVkU5ZlRVVkVTVUZmUTB4SlJVNVVYMVJaVUVVN1hHNGdJRzFsZEdodlpEb2djM1J5YVc1bk8xeHVJQ0J3WVhKaGJYTS9PaUJOWlhOellXZGxVR0Z5WVcxek8xeHVJQ0J0WlhSb2IyUkNZV05yUHpvZ2MzUnlhVzVuTzF4dWZUdGNiaUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGTmphR1Z0WVNCN1hHNGdJR1Z5Y205eVZHaHliM2M2SUdGdWVUdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHZjSFJwYjI0NklHRnVlU0E5SUh0OUtTQjdYRzRnSUNBZ0x5cGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29YRzRnSUNBZ0lDQjBhR2x6TEZ4dUlDQWdJQ0FnSjE5VFJWUmZRMDlNVlUxT1V5Y3NYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQmJYU3hjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklHWmhiSE5sWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdLVHRjYmlvdlhHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBWSGx3WlNoMllXeDFaVG9nWVc1NUtTQjdYRzRnSUNBZ2FXWWdLSFpoYkhWbElEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1hDSk9kV3hzWENJN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMllXeDFaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1hDSlZibVJsWm1sdVpXUmNJanRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbU52Ym5OMGNuVmpkRzl5TG01aGJXVTdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdhWE5UWlhRb2RtRnNPaUJoYm5rcElIdGNiaUFnSUNCeVpYUjFjbTRnVTJOb1pXMWhMbWRsZEZSNWNHVW9kbUZzS1NBOVBUMGdYQ0pWYm1SbFptbHVaV1JjSWlCOGZDQlRZMmhsYldFdVoyVjBWSGx3WlNoMllXd3BJRDA5UFNCY0lrNTFiR3hjSWlBL0lHWmhiSE5sSURvZ2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhSQ2IyOXNLSFpoYkRvZ1lXNTVLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd3Z1BUMDlJRndpWW05dmJHVmhibHdpS1NCeVpYUjFjbTRnZG1Gc08xeHVJQ0FnSUhKbGRIVnliaUIyWVd3Z1BUMDlJRndpZEhKMVpWd2lJRDhnZEhKMVpTQTZJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHbHpRVzV2Ym5sdGIzVnpSblZ1WXlobWJpa2dlMXh1SUNBZ0lHTnZibk4wSUdadVUzUnlhVzVuSUQwZ1ptNHVkRzlUZEhKcGJtY29LVHRjYmx4dUlDQWdJR2xtSUNobWJsTjBjbWx1WnlBOVBUMGdYQ0ptZFc1amRHbHZiaWdwZTMxY0lpa2djbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdhV1lnS0dadVUzUnlhVzVuSUQwOVBTQmNJbVoxYm1OMGFXOXVLQ2tnZTMxY0lpa2djbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdhV1lnS0dadVUzUnlhVzVuSUQwOVBTQmNJbVoxYm1OMGFXOXVJQ2dwZTMxY0lpa2djbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdhV1lnS0dadVUzUnlhVzVuSUQwOVBTQmNJbVoxYm1OMGFXOXVJQ2dwSUh0OVhDSXBJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJR2xtSUNobWJsTjBjbWx1WnlBOVBUMGdYQ0lvS1QwK2UzMWNJaWtnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdZM0psWVhSbEtITjBZWFJsT2lCaGJua3BJSHRjYmlBZ0lDQmpiMjV6ZENCamJHRnpjMDVoYldVZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxtNWhiV1U3WEc0Z0lDQWdZMjl1YzNRZ2MzUmhkR1ZVZVhCbElEMGdVMk5vWlcxaExtZGxkRlI1Y0dVb2MzUmhkR1VwTzF4dUlDQWdJR3hsZENCMllXeHBaRTFsZEdodlpITWdQU0I3ZlR0Y2JseHVJQ0FnSUU5aWFtVmpkQzVyWlhsektITjBZWFJsS1M1bWIzSkZZV05vS0NoclpYa3BJRDArSUh0Y2JpQWdJQ0FnSUM4dklGQnliM0JsY25ScFpYTWdMbHh1SUNBZ0lDQWdiR1YwSUhaaGJIVmxjenRjYmlBZ0lDQWdJR3hsZENCa1pXWWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2JHVjBJSFI1Y0dVNklHRnVlVHRjYmlBZ0lDQWdJR3hsZENCcGMwRmpZMlZ3ZEU1MWJHd2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lHeGxkQ0JwYzBGalkyVndkRUpzWVc1cklEMGdabUZzYzJVN1hHNGdJQ0FnSUNCc1pYUWdkbUZzYVdRNklHRnVlU0E5SUNncElEMCtJSHQ5TzF4dUlDQWdJQ0FnYkdWMElIWmhiSFZsT2lCaGJua2dQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQXZMeUJCYzNOcFoyNGdVSEp2Y0dWeWRHbGxjeUF1WEc0Z0lDQWdJQ0JwWmlBb1UyTm9aVzFoTG1kbGRGUjVjR1VvYzNSaGRHVmJhMlY1WFNrZ1BUMDlJRndpVDJKcVpXTjBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ2MzUmhkR1ZiYTJWNVhUdGNiaUFnSUNBZ0lDQWdiR1YwSUdselJXMXdkSGxQWW1wbFkzUWdQU0JQWW1wbFkzUXVhMlY1Y3loMllXeDFaWE1wTG14bGJtZDBhQ0E5UFQwZ01EdGNiaUFnSUNBZ0lDQWdhWE5CWTJObGNIUk9kV3hzSUQwZ2RtRnNkV1Z6TG1selFXTmpaWEIwVG5Wc2JDQS9JSFpoYkhWbGN5NXBjMEZqWTJWd2RFNTFiR3dnT2lCcGMwRmpZMlZ3ZEU1MWJHdzdYRzRnSUNBZ0lDQWdJR2x6UVdOalpYQjBRbXhoYm1zZ1BTQjJZV3gxWlhNdWFYTkJZMk5sY0hSQ2JHRnVheUEvSUhaaGJIVmxjeTVwYzBGalkyVndkRUpzWVc1cklEb2dhWE5CWTJObGNIUkNiR0Z1YXp0Y2JpQWdJQ0FnSUNBZ1pHVm1JRDBnSVdselJXMXdkSGxQWW1wbFkzUWdKaVlnZG1Gc2RXVnpMbVJsWmlBL0lIWmhiSFZsY3k1a1pXWWdPaUJrWldZN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ0lXbHpSVzF3ZEhsUFltcGxZM1FnSmlZZ0tIWmhiSFZsY3k1MllXeDFaU0I4ZkNCMllXeDFaWE11ZG1Gc2RXVWdQVDA5SUZ3aVhDSXBJRDhnZG1Gc2RXVnpMblpoYkhWbElEb2dkbUZzZFdWek8xeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHbHpSVzF3ZEhsUFltcGxZM1FnSmlZZ1pHVm1JRDhnWkdWbUlEb2dkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lIUjVjR1VnUFNCVFkyaGxiV0V1WjJWMFZIbHdaU2gyWVd4MVpTazdYRzRnSUNBZ0lDQWdJSFpoYkdsa0lEMGdkbUZzZFdWekxuWmhiR2xrSUQ4Z2RtRnNkV1Z6TG5aaGJHbGtJRG9nZG1Gc2FXUTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlITjBZWFJsVzJ0bGVWMDdYRzRnSUNBZ0lDQWdJR1JsWmlBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNCcGMwRmpZMlZ3ZEU1MWJHd2dQU0JwYzBGalkyVndkRTUxYkd3N1hHNGdJQ0FnSUNBZ0lHbHpRV05qWlhCMFFteGhibXNnUFNCcGMwRmpZMlZ3ZEVKc1lXNXJPMXh1SUNBZ0lDQWdJQ0IwZVhCbElEMGdVMk5vWlcxaExtZGxkRlI1Y0dVb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCMllXeHBaQ0E5SUhaaGJHbGtPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCV1lXeHBaR0YwWlNCR2RXNWpkR2x2Ym5NZ0xseHVJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2FXUkdkVzVqSUQwZ0tGOTJZV3gxWlRvZ1lXNTVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsY25KdmNpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCdmFXNTBaWElnUFNCZ0pIdGpiR0Z6YzA1aGJXVjlMaVI3YTJWNWZXQTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWmhiR2xrVm1Gc2RXVWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNhV1JVZVhCbElEMGdkSGx3WlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGeVlXMXpWbUZzZFdVZ1BTQmZkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCaGNtRnRjMVI1Y0dVZ1BTQlRZMmhsYldFdVoyVjBWSGx3WlNoZmRtRnNkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3WVhKaGJYTlVlWEJsSUNFOVBTQjBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQmdVME5JUlUxQlgxUlpVRVVnT2lBa2UzQnZhVzUwWlhKOUlGdDJZV3hwWkZSNWNHVTZJQ1I3ZEhsd1pYMWRXM0JoY21GdGMxUjVjR1U2SUNSN2NHRnlZVzF6Vkhsd1pYMWRZRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9hWE5CWTJObGNIUk9kV3hzSUNZbUlGOTJZV3gxWlNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdZRk5EU0VWTlFWOUpVMTlCUTBORlVGUmZUbFZNVENBNklDQWtlM0J2YVc1MFpYSjlZRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9hWE5CWTJObGNIUkNiR0Z1YXlBbUppQmZkbUZzZFdVZ1BUMDlJRndpWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJR0JUUTBoRlRVRmZTVk5mUVVORFJWQlVYMEpNUVU1TElEb2dJQ1I3Y0c5cGJuUmxjbjFnTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hUWTJobGJXRXVaMlYwVkhsd1pTaDJZV3hwWkNrZ1BUMDlJRndpUm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeHBaQ2hmZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlHQlRRMGhGVFVGZldVOVZVbDlXUVV4SlJGOU5SVlJJVDBRZ09pQWdKSHR3YjJsdWRHVnlmV0E3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnY0c5cGJuUmxjaXhjYmlBZ0lDQWdJQ0FnSUNCMllXeHBaRlpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJSFpoYkdsa1ZIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNCd1lYSmhiWE5XWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0J3WVhKaGJYTlVlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lHVnljbTl5TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ2V5QndiMmx1ZEdWeUxDQjJZV3hwWkZaaGJIVmxMQ0IyWVd4cFpGUjVjR1VzSUhCaGNtRnRjMVpoYkhWbExDQndZWEpoYlhOVWVYQmxMQ0JsY25KdmNpQjlJRDBnZG1Gc2FXUkdkVzVqS0haaGJIVmxLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHVnljbTl5SUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwYUdsekxDQnJaWGtzSUh0Y2JpQWdJQ0FnSUNBZ0lDQm5aWFE2SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJSE5sZERvZ0tGOTJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjRzlwYm5SbGNpd2dkbUZzYVdSV1lXeDFaU3dnZG1Gc2FXUlVlWEJsTENCd1lYSmhiWE5XWVd4MVpTd2djR0Z5WVcxelZIbHdaU3dnWlhKeWIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkdsa1VtVnpkV3gwSUQwZ2RtRnNhV1JHZFc1aktIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJRjkyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzZ0xpNHVkR2hwY3l3Z1cydGxlVjA2SUhaaGJIVmxJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkdsa1YyRnliaWgyWVd4cFpGSmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVaWEp5YjNKVWFISnZkeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJR05oYmxObGRDaHJaWGs2SUdGdWVTd2dkbUZzYVdSV1lXeDFaVG9nWVc1NUtTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR052Ym5OMElHTjFjbkpsYm5SV1lXeDFaU0E5SUhSb2FYTmJhMlY1WFR0Y2JpQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFZtRnNkV1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR04xY25KbGJuUldZV3gxWlNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIWmhiR2xrVm1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIWmhiR2xrVm1Gc2RXVWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUhzZ1pYSnliM0lnZlNBOUlDaDBhR2x6VzJ0bGVWMGdQU0IyWVd4cFpGWmhiSFZsS1R0Y2JpQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdselcydGxlVjBnUFNCamRYSnlaVzUwVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNJa0pCUkNCRFFVNGdVMFZVSUV0RldUb2dYQ0lnS3lCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVWdLeUJjSWlCY0lpQXJJR3RsZVNrN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YQ0pDUlVaUFJWSWdWa0ZNVlVWY0lpazdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvZEhsd1pXOW1JSFJvYVhOYmEyVjVYU2s3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b2RHaHBjMXRyWlhsZEtUdGNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhjSWtGR1ZFVlNJRlpCVEZWRlhDSXBPMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0hSNWNHVnZaaUIyWVd4cFpGWmhiSFZsS1R0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaDJZV3hwWkZaaGJIVmxLVHRjYmlBZ0lDQWdJSFJvY205M0lHQkNRVVFnUTBGT0lGTkZWRG9nSkh0bGZXQTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdiV1Z5WjJVb2NHRnlZVzF6SUQwZ2UzMHNJR2x0YlhWMFlXSnNaU0E5SUhSeWRXVXBJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdjR0Z5WVcxelZIbHdaU0E5SUZOamFHVnRZUzVuWlhSVWVYQmxLSEJoY21GdGN5azdYRzRnSUNBZ0lDQmpiMjV6ZENCdlltcExaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9jR0Z5WVcxektUdGNibHh1SUNBZ0lDQWdhV1lnS0c5aWFrdGxlWE11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYldWeVoyVmtUMkpxT2lCaGJua2dQU0I3SUM0dUxuUm9hWE1nZlR0Y2JpQWdJQ0FnSUNBZ2IySnFTMlY1Y3k1bWIzSkZZV05vS0NoclpYa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGMxdHJaWGxkSUNFOVBTQndZWEpoYlhOYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZMkZ1VTJWMEtHdGxlU3dnY0dGeVlXMXpXMnRsZVYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjbWRsWkU5aWFsdHJaWGxkSUQwZ2NHRnlZVzF6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hDSkNRVVFnVFVWU1IwVWdRU0E2SUZ3aUlDc2dhMlY1SUNzZ1hDSWdYQ0lnS3lCd1lYSmhiWE5iYTJWNVhTQXJJRndpSUZ3aUlDc2dkSGx3Wlc5bUlIQmhjbUZ0YzF0clpYbGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNod1lYSmhiWE5VZVhCbElEMDlQU0JjSWtGeWNtRjVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnRaWEpuWldSUFltb2dQU0JQWW1wbFkzUXVkbUZzZFdWektHMWxjbWRsWkU5aWFpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdktseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTWdRU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2V5QWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV1p5WlhOb0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnS0R4MGVYQmxiMllnUVQ1MGFHbHpMbU52Ym5OMGNuVmpkRzl5S1RzZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBiVzExZEdGaWJHVWdQeUJ1WlhjZ0tEeDBlWEJsYjJZZ1UyTm9aVzFoUG5Sb2FYTXVZMjl1YzNSeWRXTjBiM0lwS0cxbGNtZGxaRTlpYWlrZ09pQnRaWEpuWldSUFltbzdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHRiWFYwWVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWdnYldWeVoyVmtUMkpxSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUNnOGRIbHdaVzltSUZOamFHVnRZVDUwYUdsekxtTnZibk4wY25WamRHOXlLU2h0WlhKblpXUlBZbW9wTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV1Z5WjJWa1QySnFPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QW9QSFI1Y0dWdlppQlRZMmhsYldFK2RHaHBjeTVqYjI1emRISjFZM1J2Y2lrb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWxjbkp2Y2xSb2NtOTNLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaHdZWEpoYlhNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWlNrN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdCQ1FVUWdUVVZTUjBVZ1FpQTZJQ1I3VTJOb1pXMWhMbWRsZEZSNWNHVW9jR0Z5WVcxektYMGdKSHRsZldBN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9jR0Z5WVcxektUdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dVcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWUVKQlJDQk5SVkpIUlNCRElEb2dKSHRUWTJobGJXRXVaMlYwVkhsd1pTaHdZWEpoYlhNcGZTQWtlMlY5WUNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYSmhiWE03WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnZEc5S1UwOU9LRzlpYWpvZ1lXNTVJRDBnZEdocGN5a2dlMXh1SUNBZ0lHeGxkQ0JxYzI5dVQySnFPaUJoYm5rZ1BTQjdmVHRjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeWh2WW1vcExtWnZja1ZoWTJnb0tHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJSFpoYkhWbGN6b2dZVzU1SUQwZ2IySnFXMnRsZVYwN1hHNGdJQ0FnSUNCcFppQW9kbUZzZFdWekxtTnZibk4wY25WamRHOXlMbTVoYldVZ1BUMDlJRndpVDJKcVpXTjBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpYTXVkSGx3WlNBbUppQWhkbUZzZFdWekxtUmxabUYxYkhRcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpYTWdQU0IwYUdsekxuUnZTbE5QVGloMllXeDFaWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gyWVd4MVpYTXVaR1ZtWVhWc2RDQjhmQ0IyWVd4MVpYTXVaR1ZtWVhWc2RDQTlQVDBnWENKY0lpQjhmQ0IyWVd4MVpYTXVaR1ZtWVhWc2RDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnFjMjl1VDJKcVcydGxlVjBnUFNCMllXeDFaWE11WkdWbVlYVnNkRHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR3B6YjI1UFltcGJhMlY1WFNBOUlIWmhiSFZsY3p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdhbk52Yms5aWFqdGNiaUFnZlZ4dVhHNGdJR1p2Y2tWaFkyZ29ablZ1WXlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVkbUZzZFdWektIUm9hWE1wTG1admNrVmhZMmdvWm5WdVl5azdYRzRnSUgxY2JseHVJQ0JqYjI1allYUW9ablZ1WXlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxkSFZ5YmtsdGJYVjBZV0pzWlNoUFltcGxZM1F1ZG1Gc2RXVnpLSFJvYVhNcExtTnZibU5oZENobWRXNWpLU3dnWm5WdVl5azdYRzRnSUgxY2JseHVJQ0J0WVhBb1puVnVZeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGRIVnlia2x0YlhWMFlXSnNaU2hQWW1wbFkzUXVkbUZzZFdWektIUm9hWE1wTG0xaGNDaG1kVzVqS1N3Z1puVnVZeWs3WEc0Z0lIMWNibHh1SUNCbWFXeDBaWElvWm5WdVl5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsZEhWeWJrbHRiWFYwWVdKc1pTaFBZbXBsWTNRdWRtRnNkV1Z6S0hSb2FYTXBMbVpwYkhSbGNpaG1kVzVqS1N3Z1puVnVZeWs3WEc0Z0lIMWNibHh1SUNCeVpXUjFZMlVvWm5WdVl5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsZEhWeWJrbHRiWFYwWVdKc1pTaFBZbXBsWTNRdWRtRnNkV1Z6S0hSb2FYTXBMbkpsWkhWalpTaG1kVzVqS1N3Z1puVnVZeWs3WEc0Z0lIMWNibHh1SUNCbWFXNWtLR1oxYm1NcElIdGNiaUFnSUNCeVpYUjFjbTRnVDJKcVpXTjBMblpoYkhWbGN5aDBhR2x6S1M1bWFXNWtLR1oxYm1NcE8xeHVJQ0I5WEc1Y2JpQWdjMjl5ZENobWRXNWpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1MllXeDFaWE1vZEdocGN5a3VjMjl5ZENobWRXNWpLVHRjYmlBZ2ZWeHVYRzRnSUhCMWMyZ29kbUZzZFdVcElIdGNiaUFnSUNCamIyNXpkQ0IyWVd4MVpYTWdQU0JQWW1wbFkzUXVkbUZzZFdWektIUm9hWE1wTzF4dUlDQWdJSFpoYkhWbGN5NXdkWE5vS0haaGJIVmxLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WlhSMWNtNUpiVzExZEdGaWJHVW9kbUZzZFdWektUdGNiaUFnZlZ4dVhHNGdJSFZ1YzJocFpuUW9kbUZzZFdVcElIdGNiaUFnSUNCamIyNXpkQ0IyWVd4MVpYTWdQU0JQWW1wbFkzUXVkbUZzZFdWektIUm9hWE1wTzF4dUlDQWdJSFpoYkhWbGN5NTFibk5vYVdaMEtIWmhiSFZsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYUjFjbTVKYlcxMWRHRmliR1VvZG1Gc2RXVnpLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRGTm9hV1owS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSFpoYkhWbGN5QTlJRTlpYW1WamRDNTJZV3gxWlhNb2RHaHBjeWs3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpkV3gwY3lBOUlIWmhiSFZsY3k1emFHbG1kQ2dwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGRIVnlia2x0YlhWMFlXSnNaU2h5WlhOMWJIUnpLVHRjYmlBZ2ZWeHVYRzRnSUhCdmNDaDJZV3gxWlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFpoYkhWbGN6b2dZVzU1SUQwZ1QySnFaV04wTG5aaGJIVmxjeWgwYUdsektUdGNiaUFnSUNCMllXeDFaWE11Y0c5d0tIWmhiSFZsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYUjFjbTVKYlcxMWRHRmliR1VvZG1Gc2RXVnpLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnlia2x0YlhWMFlXSnNaU2gyWVd4MVpYTXNJR1oxYm1NZ1BTQW9LU0E5UGlCN2ZTa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbUZzZFdWeklEMDlQU0JjSW5WdVpHVm1hVzVsWkZ3aUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJQ2c4ZEhsd1pXOW1JRk5qYUdWdFlUNTBhR2x6TG1OdmJuTjBjblZqZEc5eUtTZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kbUZzZFdWekxteGxibWQwYUNBOVBUMGdNQ0FtSmlCUFltcGxZM1F1YTJWNWN5aDBhR2x6S1M1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR2xtSUNoVGRISnBibWNvWm5WdVl5a3VhVzVrWlhoUFppaGNJbU55WldGMFpVVnNaVzFsYm5SY0lpa2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dLRHgwZVhCbGIyWWdVMk5vWlcxaFBuUm9hWE11WTI5dWMzUnlkV04wYjNJcEtIWmhiSFZsY3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMllXeDFaWE5iTUYwZ0ppWWdkbUZzZFdWeld6QmRXMXdpSkNSMGVYQmxiMlpjSWwwZ0ppWWdkbUZzZFdWeld6QmRXMXdpSkNSMGVYQmxiMlpjSWwwdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlNBOVBUMGdYQ0pUZVcxaWIyeGNJaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbGN6dGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlBb1BIUjVjR1Z2WmlCVFkyaGxiV0UrZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWtvZG1Gc2RXVnpLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVd4cFpGZGhjbTRvZG1Gc2FXUlNaWE4xYkhRcElIdGNiaUFnSUNCamIyNXpiMnhsTG5kaGNtNG9YQ0lqSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJMXdpS1R0Y2JpQWdJQ0JqYjI1emIyeGxMbmRoY200b1hDSWpYQ0lnS3lCMllXeHBaRkpsYzNWc2RDNXdiMmx1ZEdWeUtUdGNiaUFnSUNCamIyNXpiMnhsTG5kaGNtNG9YQ0lqSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJMXdpS1R0Y2JpQWdJQ0JqYjI1emIyeGxMbmRoY200b1hDSWpJeU1nYVc1cGRHbGhiR2w2WldSV1lXeHBaRlI1Y0dWY0lpazdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLSFpoYkdsa1VtVnpkV3gwTG5aaGJHbGtWSGx3WlNrN1hHNGdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGd2lJeU1qSUdsdWFYUnBZV3hwZW1Wa1ZtRnNhV1JXWVd4MVpWd2lLVHRjYmlBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvZG1Gc2FXUlNaWE4xYkhRdWRtRnNhV1JXWVd4MVpTazdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRndpSXlNaklIQmhjbUZ0YzFSNWNHVmNJaWs3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0haaGJHbGtVbVZ6ZFd4MExuQmhjbUZ0YzFSNWNHVXBPMXh1SUNBZ0lHTnZibk52YkdVdWQyRnliaWhjSWlNakl5QndZWEpoYlhOV1lXeDFaVndpS1R0Y2JpQWdJQ0JqYjI1emIyeGxMbmRoY200b2RtRnNhV1JTWlhOMWJIUXVjR0Z5WVcxelZtRnNkV1VwTzF4dUlDQWdJR052Ym5OdmJHVXVkMkZ5YmloY0lpTWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNalhDSXBPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnVTJOb1pXMWhJR1p5YjIwZ0oyTnZiVzF2Ymk5VFkyaGxiV0VuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJUWlhGMVpXNWpaU0I3WEc0Z0lITjBZWFJwWXlCblpYUWdWRUZNUzA1ZlVGSlBWRTlEVDB3b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNkMFlXeHJiam9uTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1NGUlVVRjlRVWs5VVQwTlBUQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMmgwZEhBNkp6dGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBJRWhVVkZCVFgxQlNUMVJQUTA5TUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmFIUjBjSE02Snp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElGVk9TMDVQVjA1ZlVGSlBWRTlEVDB3b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNjL1B6OC9PaWM3WEc0Z0lIMWNiaUFnYzNSaGRHbGpJR2RsZENCRFFWUkRTRjlOUlY5TFJWa29LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZEFRMEZVUTBoZlRVVW5PMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnUVZCSlgxTkZVRUZTUVZSRlgwbFBYMVJaVUVWZlUxUkJVbFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2RiSnp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElFRlFTVjlUUlZCQlVrRlVSVjlKVDE5VVdWQkZYMFZPUkNncElIdGNiaUFnSUNCeVpYUjFjbTRnSjEwbk8xeHVJQ0I5WEc0Z0lITjBZWFJwWXlCblpYUWdRVkJKWDFKRlVWVkZVMVJmVkZsUVJTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0oxSkZVVlZGVTFRbk8xeHVJQ0I5WEc0Z0lITjBZWFJwWXlCblpYUWdRVkJKWDFKRlUxQlBUbE5GWDFSWlVFVmZSVTFKVkNncElIdGNiaUFnSUNCeVpYUjFjbTRnSjBWTlNWUW5PMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnUVZCSlgxSkZVMUJQVGxORlgxUlpVRVZmUWxKUFFVUkRRVk5VS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuUWxKUFFVUkRRVk5VSnp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElFRlFTVjlUUlZSVlVDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0owRlFTVjlUUlZSVlVDYzdYRzRnSUgxY2JpQWdjM1JoZEdsaklHZGxkQ0JWVGt0T1QxZE9LQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5WVTVMVGs5WFRpYzdYRzRnSUgxY2JpQWdjM1JoZEdsaklHZGxkQ0JEVDA1T1JVTlVTVTlPWDFORlVsWkZVbDlMUlZrb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNkRFQwNU9SVU5VU1U5T1gxTkZVbFpGVWljN1hHNGdJSDFjYmlBZ2MzUmhkR2xqSUdkbGRDQkJVRWxmVkU5ZlUwVlNWa1ZTWDFKRlVWVkZVMVFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0JCVUVsZlZFOWZVMFZTVmtWU1d5UjdVMlZ4ZFdWdVkyVXVRVkJKWDFKRlVWVkZVMVJmVkZsUVJYMWRKSHRUWlhGMVpXNWpaUzVOUlZSSVQwUmZRMDlNVDA1OVlEdGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBJRk5GVWxaRlVsOVVUMTlCVUVsZlJVMUpWQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZRk5GVWxaRlVsOVVUMTlCVUVsYkpIdFRaWEYxWlc1alpTNUJVRWxmVWtWVFVFOU9VMFZmVkZsUVJWOUZUVWxVZlYwa2UxTmxjWFZsYm1ObExrMUZWRWhQUkY5RFQweFBUbjFnTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1UwVlNWa1ZTWDFSUFgwRlFTVjlDVWs5QlJFTkJVMVFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0JUUlZKV1JWSmZWRTlmUVZCSld5UjdVMlZ4ZFdWdVkyVXVRVkJKWDFKRlUxQlBUbE5GWDFSWlVFVmZRbEpQUVVSRFFWTlVmVjBrZTFObGNYVmxibU5sTGsxRlZFaFBSRjlEVDB4UFRuMWdPMXh1SUNCOVhHNGdJSE4wWVhScFl5Qm5aWFFnUVZCSlgxUlBYME5NU1VWT1ZGOVNSVkZWUlZOVUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZ1FWQkpYMVJQWDBOTVNVVk9WRnNrZTFObGNYVmxibU5sTGtGUVNWOVNSVkZWUlZOVVgxUlpVRVY5WFNSN1UyVnhkV1Z1WTJVdVRVVlVTRTlFWDBOUFRFOU9mV0E3WEc0Z0lIMWNiaUFnYzNSaGRHbGpJR2RsZENCQlVFbGZWRTlmUTB4SlJVNVVYMFZOU1ZRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdCQlVFbGZWRTlmUTB4SlJVNVVXeVI3VTJWeGRXVnVZMlV1UVZCSlgxSkZVMUJQVGxORlgxUlpVRVZmUlUxSlZIMWRKSHRUWlhGMVpXNWpaUzVOUlZSSVQwUmZRMDlNVDA1OVlEdGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBJRUZRU1Y5VVQxOURURWxGVGxSZlFsSlBRVVJEUVZOVUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZ1FWQkpYMVJQWDBOTVNVVk9WRnNrZTFObGNYVmxibU5sTGtGUVNWOVNSVk5RVDA1VFJWOVVXVkJGWDBKU1QwRkVRMEZUVkgxZEpIdFRaWEYxWlc1alpTNU5SVlJJVDBSZlEwOU1UMDU5WUR0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElFRlFTVjlDVWs5QlJFTkJVMVJmUTBGTVRFSkJRMHNvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2QwZFc1bEp6dGNiaUFnZlZ4dUlDQnpkR0YwYVdNZ1oyVjBJRkpGUkZWWVgwRkRWRWxQVGw5TFJWa29LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZDBlWEJsSnp0Y2JpQWdmVnh1SUNCemRHRjBhV01nWjJWMElFMUZWRWhQUkY5RFQweFBUaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKem9uTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1FVUkVYME5NU1VWT1ZGOUJRMVJKVDA1ZlVGSkZSa2xZS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuUVZCSlgxUlBYME5NU1VWT1ZDYzdYRzRnSUgxY2JpQWdjM1JoZEdsaklHZGxkQ0J0WVhBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUhSMWJtVTZJSHRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRkIxWW14cFkxTjBZWFJsT2lCN2ZTeGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRGQnlhWFpoZEdWVGRHRjBaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbVZoWkRvZ1d5ZGphQ2NzSUNkb1lYTlRiR0Z6YUNjc0lDZHdjbTkwYjJOdmJDZGRMRnh1SUNBZ0lDQWdJQ0FnSUdGd2NEb2dXeWR0ZFd4MGFYTjBjbVZoYlNjc0lDZHliMjkwUTJnbkxDQW5aR2x6Y0ZSb2NtVmhaRlI1Y0dVbkxDQW5ZV04wYVc5dVpXUW5MQ0FuYjJabWMyVjBSbWx1WkVsa0p5d2dKMmx6Vkc5bloyeGxUWFZzZEdsemRISmxZVzBuWFN4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjbVZ6Y0c5dWMyVkZiV2wwVTNSaGRHVTZJSHNnZFhObGNqb2dXeWQxYVdRblhTd2djMlYwZEdsdVp6b2dKeW9uTENCMGFISmxZV1E2SUNjcUp5QjlMRnh1SUNBZ0lDQWdJQ0J5WlhOd2IyNXpaVUp5YjJGa1kyRnpkRk4wWVhSbE9pQjdJSFJvY21WaFpEb2dXeWRzYVhabFEyNTBKeXdnSjJOb0oxMGdmU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0JtWlhSamFGQnZjM1J6T2lCN1hHNGdJQ0FnSUNBZ0lISmxjWFZsYzNSUWRXSnNhV05UZEdGMFpUb2dlMzBzWEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JRY21sMllYUmxVM1JoZEdVNklIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKbFlXUTZJRnNuWTJnbkxDQW5jSEp2ZEc5amIyd25MQ0FuYUc5emRDY3NJQ2RvWVhOVGJHRnphQ2RkTEZ4dUlDQWdJQ0FnSUNBZ0lHRndjRG9nV3lkdGRXeDBhWE4wY21WaGJTY3NJQ2R5YjI5MFEyZ25MQ0FuWkdsemNGUm9jbVZoWkZSNWNHVW5MQ0FuWVdOMGFXOXVaV1FuTENBbmIyWm1jMlYwUm1sdVpFbGtKeXdnSjJselZHOW5aMnhsVFhWc2RHbHpkSEpsWVcwblhTeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnY21WemNHOXVjMlZGYldsMFUzUmhkR1U2SUhzZ2NHOXpkSE02SUNjcUp5d2dkR2h5WldGa09pQW5LaWNnZlN4Y2JpQWdJQ0FnSUNBZ2NtVnpjRzl1YzJWQ2NtOWhaR05oYzNSVGRHRjBaVG9nZTMwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ1oyVjBUVzl5WlRvZ2UxeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFVIVmliR2xqVTNSaGRHVTZJSHQ5TEZ4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wVUhKcGRtRjBaVk4wWVhSbE9pQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeVpXRmtPaUJiSjJOb0oxMHNYRzRnSUNBZ0lDQWdJQ0FnWVhCd09pQmJKMjExYkhScGMzUnlaV0Z0Snl3Z0oyUnBjM0JVYUhKbFlXUlVlWEJsSnl3Z0oyOW1abk5sZEVacGJtUkpaQ2RkTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpVVnRhWFJUZEdGMFpUb2dlMXh1SUNBZ0lDQWdJQ0FnSUdGd2NEb2dXeWRrYVhOd1ZHaHlaV0ZrVkhsd1pTY3NJQ2R2Wm1aelpYUkdhVzVrU1dRblhTeGNiaUFnSUNBZ0lDQWdJQ0J3YjNOMGN6b2dKeW9uTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpVSnliMkZrWTJGemRGTjBZWFJsT2lCN2ZTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQjFjR1JoZEdWVWFISmxZV1E2SUh0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEZCMVlteHBZMU4wWVhSbE9pQjdmU3hjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRkJ5YVhaaGRHVlRkR0YwWlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY21WaFpEb2dXeWRqYUNjc0lDZHdjbTkwYjJOdmJDY3NJQ2RvYjNOMEp5d2dKMmhoYzFOc1lYTm9KMTBzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lISmxjM0J2Ym5ObFJXMXBkRk4wWVhSbE9pQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeVpXRmtPaUFuS2ljc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSEpsYzNCdmJuTmxRbkp2WVdSallYTjBVM1JoZEdVNklIdDlMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR05vWVc1blpWUm9jbVZoWkRvZ2UxeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFVIVmliR2xqVTNSaGRHVTZJSHQ5TEZ4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wVUhKcGRtRjBaVk4wWVhSbE9pQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeVpXRmtPaUJiSjJOb0p5d2dKMmhoYzFOc1lYTm9KeXdnSjNCeWIzUnZZMjlzSjEwc1hHNGdJQ0FnSUNBZ0lDQWdZWEJ3T2lCYkozUjFibVZrUTJnbkxDQW5iWFZzZEdsemRISmxZVzBuTENBbmNtOXZkRU5vSnl3Z0oyUnBjM0JVYUhKbFlXUlVlWEJsSnl3Z0oyRmpkR2x2Ym1Wa0p5d2dKMjltWm5ObGRFWnBibVJKWkNjc0lDZHBjMVJ2WjJkc1pVMTFiSFJwYzNSeVpXRnRKMTBzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lISmxjM0J2Ym5ObFJXMXBkRk4wWVhSbE9pQjdJSFJvY21WaFpEb2dKeW9uSUgwc1hHNGdJQ0FnSUNBZ0lISmxjM0J2Ym5ObFFuSnZZV1JqWVhOMFUzUmhkR1U2SUhzZ2RHaHlaV0ZrT2lCYkoyeHBkbVZEYm5RbkxDQW5ZMmduWFNCOUxGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHTm9ZVzVuWlZSb2NtVmhaRVJsZEdGcGJEb2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBVSFZpYkdsalUzUmhkR1U2SUh0OUxGeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFVISnBkbUYwWlZOMFlYUmxPaUI3SUhSb2NtVmhaRG9nV3lkamFDZGRJSDBzWEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sUlcxcGRGTjBZWFJsT2lCN0lIUm9jbVZoWkRvZ0p5b25JSDBzWEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sUW5KdllXUmpZWE4wVTNSaGRHVTZJSHQ5TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUdGa1pFWnBibVJEYUdsc1pEb2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBVSFZpYkdsalUzUmhkR1U2SUh0OUxGeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFVISnBkbUYwWlZOMFlYUmxPaUI3SUhSb2NtVmhaRG9nV3lkamFDZGRJSDBzWEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sUlcxcGRGTjBZWFJsT2lCN0lIUm9jbVZoWkRvZ0p5b25JSDBzWEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sUW5KdllXUmpZWE4wVTNSaGRHVTZJSHQ5TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUhKaGJtczZJSHRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRkIxWW14cFkxTjBZWFJsT2lCN2ZTeGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRGQnlhWFpoZEdWVGRHRjBaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lHRndjRG9nV3lkbWFXNWtWSGx3WlNjc0lDZHliMjkwUTJnbkxDQW5hWE5TWVc1clJHVjBZV2xzVFc5a1pTZGRMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCeVpYTndiMjV6WlVWdGFYUlRkR0YwWlRvZ2V5QnlZVzVyT2lBbktpY2dmU3hjYmlBZ0lDQWdJQ0FnY21WemNHOXVjMlZDY205aFpHTmhjM1JUZEdGMFpUb2dlMzBzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnY0c5emREb2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBVSFZpYkdsalUzUmhkR1U2SUh0OUxGeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFVISnBkbUYwWlZOMFlYUmxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ2RYTmxjam9nV3lkMWFXUW5MQ0FuZFhSNWNHVW5YU3hjYmlBZ0lDQWdJQ0FnSUNCaGNIQTZJRnNuYVc1d2RYUlFiM04wSnl3Z0oybHVjSFYwVTNSaGJYQkpaQ2NzSUNkcGJuQjFkRU4xY25KbGJuUlVhVzFsSnl3Z0oyUnBjM0JVYUhKbFlXUlVlWEJsSjEwc1hHNGdJQ0FnSUNBZ0lDQWdkR2h5WldGa09pQmJKMlpwYm1SVWVYQmxKeXdnSjNScGRHeGxKeXdnSjNCeWIzUnZZMjlzSnl3Z0oyTm9KeXdnSjJOb2N5Y3NJQ2RsYlc5MGFXOXVjeWNzSUNkbVlYWnBZMjl1Snl3Z0oyTnZiblJsYm5SVWVYQmxKMTBzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lISmxjM0J2Ym5ObFJXMXBkRk4wWVhSbE9pQjdmU3hjYmlBZ0lDQWdJQ0FnY21WemNHOXVjMlZDY205aFpHTmhjM1JUZEdGMFpUb2dleUJ3YjNOMGN6b2dKeW9uTENCMGFISmxZV1E2SUZzblkyZ25MQ0FuWlcxdmRHbHZibk1uTENBbmNHOXpkRU51ZENkZExDQjFjMlZ5T2lCYkozVnBaQ2RkSUgwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2RYQmtZWFJsVkdoeVpXRmtVMlZ5ZG1WeVRXVjBZWE02SUh0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEZCMVlteHBZMU4wWVhSbE9pQjdJSFJvY21WaFpEb2dXeWR6WlhKMlpYSk5aWFJoY3lkZElIMHNYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUlFjbWwyWVhSbFUzUmhkR1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEpsWVdRNklGc25hRzl6ZENjc0lDZHdjbTkwYjJOdmJDY3NJQ2RqYUNkZExGeHVJQ0FnSUNBZ0lDQWdJSFZ6WlhJNklGc25kV2xrSjEwc0lDOHZJT2FIdU9XL3RTQXVabTl5UldGamFPT0JsZU9Dak9PQnF1T0JoT09CcnVPQnArUzRnT2FYcHVPQmsrT0JydVc5b3VPQnErUy9ydWF0bzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpVVnRhWFJUZEdGMFpUb2dleUIwYUhKbFlXUTZJQ2NxSnlCOUxGeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpVSnliMkZrWTJGemRGTjBZWFJsT2lCN2ZTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQmthWE5qYjI1dVpXTjBPaUI3WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JRZFdKc2FXTlRkR0YwWlRvZ2UzMHNYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUlFjbWwyWVhSbFUzUmhkR1U2SUh0OUxGeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpVVnRhWFJUZEdGMFpUb2dlMzBzWEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sUW5KdllXUmpZWE4wVTNSaGRHVTZJSHNnZEdoeVpXRmtPaUJiSjJ4cGRtVkRiblFuTENBblkyZ25YU0I5TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRGTmxjWFZsYm1ObFFXTjBhVzl1VFdGd0tHMWxkR2h2WkNrNklIc2djMlZ4ZFdWdVkyVTZJSE4wY21sdVp6c2dZV04wYVc5dVZIbHdaVG9nYzNSeWFXNW5PeUJoWTNScGIyNU9ZVzFsT2lCemRISnBibWNnZlNCN1hHNGdJQ0FnWTI5dWMzUWdjM0JzYVhSbFpDQTlJRzFsZEdodlpDNXpjR3hwZENoVFpYRjFaVzVqWlM1TlJWUklUMFJmUTA5TVQwNHBPMXh1SUNBZ0lHTnZibk4wSUhObGNYVmxibU5sSUQwZ2MzQnNhWFJsWkZzd1hTNXpjR3hwZENnbld5Y3BXekJkTzF4dUlDQWdJR3hsZENCaFkzUnBiMjVVZVhCbE8xeHVYRzRnSUNBZ2FXWWdLSE53YkdsMFpXUmJNRjB1YVc1a1pYaFBaaWhnV3lSN1UyVnhkV1Z1WTJVdVFWQkpYMUpGVVZWRlUxUmZWRmxRUlgxZFlDa2dQaUF3S1NCN1hHNGdJQ0FnSUNCaFkzUnBiMjVVZVhCbElEMGdVMlZ4ZFdWdVkyVXVRVkJKWDFKRlVWVkZVMVJmVkZsUVJUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWVdOMGFXOXVWSGx3WlNBOVhHNGdJQ0FnSUNBZ0lITndiR2wwWldSYk1GMHVhVzVrWlhoUFppaGdXeVI3VTJWeGRXVnVZMlV1UVZCSlgxSkZVMUJQVGxORlgxUlpVRVZmUlUxSlZIMWRZQ2tnUGlBd1hHNGdJQ0FnSUNBZ0lDQWdQeUJUWlhGMVpXNWpaUzVCVUVsZlVrVlRVRTlPVTBWZlZGbFFSVjlGVFVsVVhHNGdJQ0FnSUNBZ0lDQWdPaUJUWlhGMVpXNWpaUzVCVUVsZlVrVlRVRTlPVTBWZlZGbFFSVjlDVWs5QlJFTkJVMVE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1lXTjBhVzl1VG1GdFpTQTlJSE53YkdsMFpXUmJNVjA3WEc0Z0lDQWdjbVYwZFhKdUlIc2djMlZ4ZFdWdVkyVXNJR0ZqZEdsdmJsUjVjR1VzSUdGamRHbHZiazVoYldVZ2ZUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5QjFjR1JoZEdWRFlXeHNZbUZqYTBWNFpVTnZibVJwZEdsdmJrMWhjQ2hoWTNScGIyNU9ZVzFsS1RvZ2V5QmxiV2wwT2lCaWIyOXNaV0Z1T3lCaWNtOWhaR05oYzNRNklHSnZiMnhsWVc0Z2ZTQjdYRzRnSUNBZ2JHVjBJR0ZqZEdsMlpWSmxjM0J2Ym5ObFRXRndJRDBnZXlCbGJXbDBPaUIwY25WbExDQmljbTloWkdOaGMzUTZJSFJ5ZFdVZ2ZUdGNiaUFnSUNCcFppQW9VMlZ4ZFdWdVkyVXViV0Z3VzJGamRHbHZiazVoYldWZEtTQjdYRzRnSUNBZ0lDQmhZM1JwZG1WU1pYTndiMjV6WlUxaGNDNWxiV2wwSUQwZ0lTaFBZbXBsWTNRdWEyVjVjeWhUWlhGMVpXNWpaUzV0WVhCYllXTjBhVzl1VG1GdFpWMHVjbVZ6Y0c5dWMyVkZiV2wwVTNSaGRHVXBMbXhsYm1kMGFDQStJREFwTzF4dUlDQWdJQ0FnWVdOMGFYWmxVbVZ6Y0c5dWMyVk5ZWEF1WW5KdllXUmpZWE4wSUQwZ0lTaFBZbXBsWTNRdWEyVjVjeWhUWlhGMVpXNWpaUzV0WVhCYllXTjBhVzl1VG1GdFpWMHVjbVZ6Y0c5dWMyVkNjbTloWkdOaGMzUlRkR0YwWlNrdWJHVnVaM1JvSUQ0Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJoWTNScGRtVlNaWE53YjI1elpVMWhjRHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJqYjI1MlpYSjBVMlZ5ZG1WeVZHOUJjR2xKYjFSNWNHVW9hVVp5WVcxbFNXUXNJR0ZqZEdsdmJsUjVjR1VwSUh0Y2JpQWdJQ0JwWmlBb1lXTjBhVzl1Vkhsd1pTNXBibVJsZUU5bUtHQWtlMU5sY1hWbGJtTmxMa0ZRU1Y5VFJWQkJVa0ZVUlY5SlQxOVVXVkJGWDFOVVFWSlVmU1I3VTJWeGRXVnVZMlV1UVZCSlgxSkZVVlZGVTFSZlZGbFFSWDBrZTFObGNYVmxibU5sTGtGUVNWOVRSVkJCVWtGVVJWOUpUMTlVV1ZCRlgwVk9SSDFnS1NBK1BTQXdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVMlZ4ZFdWdVkyVXVRVkJKWDFKRlVWVkZVMVJmVkZsUVJUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ1lXTjBhVzl1Vkhsd1pTNXBibVJsZUU5bUtGeHVJQ0FnSUNBZ0lDQmdKSHRUWlhGMVpXNWpaUzVCVUVsZlUwVlFRVkpCVkVWZlNVOWZWRmxRUlY5VFZFRlNWSDBrZTFObGNYVmxibU5sTGtGUVNWOVNSVk5RVDA1VFJWOVVXVkJGWDBKU1QwRkVRMEZUVkgwa2UxTmxjWFZsYm1ObExrRlFTVjlUUlZCQlVrRlVSVjlKVDE5VVdWQkZYMFZPUkgxZ1hHNGdJQ0FnSUNBcElENDlJREJjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlRaWEYxWlc1alpTNUJVRWxmVWtWVFVFOU9VMFZmVkZsUVJWOUNVazlCUkVOQlUxUTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lHRmpkR2x2YmxSNWNHVXVhVzVrWlhoUFppaGdKSHRUWlhGMVpXNWpaUzVCVUVsZlUwVlFRVkpCVkVWZlNVOWZWRmxRUlY5VFZFRlNWSDBrZTFObGNYVmxibU5sTGtGUVNWOVNSVk5RVDA1VFJWOVVXVkJGWDBWTlNWUjlKSHRUWlhGMVpXNWpaUzVCVUVsZlUwVlFRVkpCVkVWZlNVOWZWRmxRUlY5RlRrUjlZQ2tnUGoxY2JpQWdJQ0FnSURCY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJUWlhGMVpXNWpaUzVCVUVsZlVrVlRVRTlPVTBWZlZGbFFSVjlGVFVsVU8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdVMlZ4ZFdWdVkyVXVRVkJKWDFORlZGVlFPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR052Ym5abGNuUkZlSFJVYjBOc2FXVnVkRUZqZEdsdmJsUjVjR1VvYVVaeVlXMWxTV1FzSUdGamRHbHZibFI1Y0dVcElIdGNiaUFnSUNCaFkzUnBiMjVVZVhCbElEMGdVMlZ4ZFdWdVkyVXVZMjl1ZG1WeWRFRndhVlJ2UTJ4cFpXNTBRV04wYVc5dVZIbHdaU2hoWTNScGIyNVVlWEJsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZV04wYVc5dVZIbHdaVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJqYjI1MlpYSjBRWEJwVkc5RGJHbGxiblJCWTNScGIyNVVlWEJsS0dGamRHbHZibFI1Y0dVcElIdGNiaUFnSUNCcFppQW9ZV04wYVc5dVZIbHdaUzVwYm1SbGVFOW1LRk5sY1hWbGJtTmxMa0ZRU1Y5VVQxOVRSVkpXUlZKZlVrVlJWVVZUVkNrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNVVlWEJsTG5KbGNHeGhZMlVvVTJWeGRXVnVZMlV1UVZCSlgxUlBYMU5GVWxaRlVsOVNSVkZWUlZOVUxDQlRaWEYxWlc1alpTNUJVRWxmVkU5ZlEweEpSVTVVWDFKRlVWVkZVMVFwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWVdOMGFXOXVWSGx3WlM1cGJtUmxlRTltS0ZObGNYVmxibU5sTGxORlVsWkZVbDlVVDE5QlVFbGZSVTFKVkNrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoWTNScGIyNVVlWEJsTG5KbGNHeGhZMlVvVTJWeGRXVnVZMlV1VTBWU1ZrVlNYMVJQWDBGUVNWOUZUVWxVTENCVFpYRjFaVzVqWlM1QlVFbGZWRTlmUTB4SlJVNVVYMFZOU1ZRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1lXTjBhVzl1Vkhsd1pTNXBibVJsZUU5bUtGTmxjWFZsYm1ObExsTkZVbFpGVWw5VVQxOUJVRWxmUWxKUFFVUkRRVk5VS1NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0ZqZEdsdmJsUjVjR1V1Y21Wd2JHRmpaU2hUWlhGMVpXNWpaUzVUUlZKV1JWSmZWRTlmUVZCSlgwSlNUMEZFUTBGVFZDd2dVMlZ4ZFdWdVkyVXVRVkJKWDFSUFgwTk1TVVZPVkY5Q1VrOUJSRU5CVTFRcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZV04wYVc5dVZIbHdaVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhSU1pYRjFaWE4wVTNSaGRHVW9ZV04wYVc5dVRtRnRaU3dnY21Wa2RYaFRkR0YwWlN3Z2NtVnhkV1Z6ZEZCaGNtRnRjeWtnZTF4dUlDQWdJR052Ym5OMElHVnVaSEJ2YVc1MFMyVjVJRDBnWVdOMGFXOXVUbUZ0WlM1eVpYQnNZV05sS0ZObGNYVmxibU5sTGtGUVNWOVVUMTlUUlZKV1JWSmZVa1ZSVlVWVFZDd2dKeWNwTzF4dUlDQWdJR052Ym5OMElIc2djbVZ4ZFdWemRGQjFZbXhwWTFOMFlYUmxMQ0J5WlhGMVpYTjBVSEpwZG1GMFpWTjBZWFJsSUgwZ1BTQlRaWEYxWlc1alpTNXRZWEJiWlc1a2NHOXBiblJMWlhsZE8xeHVJQ0FnSUd4bGRDQnlaWEYxWlhOMFUzUmhkR1VnUFNCN0lGdFRaWEYxWlc1alpTNVNSVVJWV0Y5QlExUkpUMDVmUzBWWlhUb2daVzVrY0c5cGJuUkxaWGtnZlR0Y2JseHVJQ0FnSUU5aWFtVmpkQzVyWlhsektISmxjWFZsYzNSUWNtbDJZWFJsVTNSaGRHVXBMbVp2Y2tWaFkyZ29LSE4wWVhSbFMyVjVLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9JWEpsY1hWbGMzUlRkR0YwWlZ0emRHRjBaVXRsZVYwcElISmxjWFZsYzNSVGRHRjBaVnR6ZEdGMFpVdGxlVjBnUFNCN2ZUdGNiaUFnSUNBZ0lISmxjWFZsYzNSUWNtbDJZWFJsVTNSaGRHVmJjM1JoZEdWTFpYbGRMbVp2Y2tWaFkyZ29LR052YkhWdGJrNWhiV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGeVpYRjFaWE4wVTNSaGRHVmJjM1JoZEdWTFpYbGRXMk52YkhWdGJrNWhiV1ZkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhaaGJIVmxJRDBnY21Wa2RYaFRkR0YwWlZ0emRHRjBaVXRsZVYxYlkyOXNkVzF1VG1GdFpWMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjWFZsYzNSUVlYSmhiWE1nSmlZZ2NtVnhkV1Z6ZEZCaGNtRnRjMXR6ZEdGMFpVdGxlVjBnSmlZZ1UyTm9aVzFoTG1selUyVjBLSEpsY1hWbGMzUlFZWEpoYlhOYmMzUmhkR1ZMWlhsZFcyTnZiSFZ0Yms1aGJXVmRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQnlaWEYxWlhOMFVHRnlZVzF6VzNOMFlYUmxTMlY1WFZ0amIyeDFiVzVPWVcxbFhUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEZOMFlYUmxXM04wWVhSbFMyVjVYVnRqYjJ4MWJXNU9ZVzFsWFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLSEpsY1hWbGMzUlFkV0pzYVdOVGRHRjBaU2t1Wm05eVJXRmphQ2dvYzNSaGRHVkxaWGtwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2doY21WeGRXVnpkRk4wWVhSbFczTjBZWFJsUzJWNVhTa2djbVZ4ZFdWemRGTjBZWFJsVzNOMFlYUmxTMlY1WFNBOUlIdDlPMXh1WEc0Z0lDQWdJQ0J5WlhGMVpYTjBVSFZpYkdsalUzUmhkR1ZiYzNSaGRHVkxaWGxkTG1admNrVmhZMmdvS0dOdmJIVnRiazVoYldVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnlaWEYxWlhOMFUzUmhkR1ZiYzNSaGRHVkxaWGxkVzJOdmJIVnRiazVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRk4wWVhSbFczTjBZWFJsUzJWNVhWdGpiMngxYlc1T1lXMWxYU0E5SUhKbGNYVmxjM1JRWVhKaGJYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWEYxWlhOMFUzUmhkR1U3WEc0Z0lIMWNibHh1SUNCemRHRjBhV01nWjJWMFVtVnpjRzl1YzJWVGRHRjBaU2h5WlhOd2IyNXpaVlI1Y0dVc0lISmxjWFZsYzNSVGRHRjBaU3dnZFhCa1lYUmxVM1JoZEdVcElIdGNiaUFnSUNCamIyNXpkQ0JsYm1Sd2IybHVkRXRsZVNBOUlISmxjWFZsYzNSVGRHRjBaUzUwZVhCbE8xeHVJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxVMk5vWlcxaElEMGdVMlZ4ZFdWdVkyVXViV0Z3VzJWdVpIQnZhVzUwUzJWNVhWdGdjbVZ6Y0c5dWMyVWtlM0psYzNCdmJuTmxWSGx3WlgxVGRHRjBaV0JkTzF4dUlDQWdJR3hsZENCeVpYTndiMjV6WlZOMFlYUmxJRDBnZXlCYlUyVnhkV1Z1WTJVdVVrVkVWVmhmUVVOVVNVOU9YMHRGV1YwNklHVnVaSEJ2YVc1MFMyVjVJSDA3WEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vY21WemNHOXVjMlZUWTJobGJXRXBMbVp2Y2tWaFkyZ29LSFZ3WkdGMFpWTjBZWFJsUzJWNUtTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2RYQmtZWFJsVTNSaGRHVmJkWEJrWVhSbFUzUmhkR1ZMWlhsZEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZiSFZ0Yms1aGJXVnpJRDBnY21WemNHOXVjMlZUWTJobGJXRmJkWEJrWVhSbFUzUmhkR1ZMWlhsZE8xeHVJQ0FnSUNBZ0lDQnNaWFFnZFhCa1lYUmxVM1JoZEdWV1lXeDFaU0E5SUhWd1pHRjBaVk4wWVhSbFczVndaR0YwWlZOMFlYUmxTMlY1WFR0Y2JseHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIVndaR0YwWlZOMFlYUmxWbUZzZFdVdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyMXZaR1ZzSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpWTjBZWFJsVm1Gc2RXVWdQU0IxY0dSaGRHVlRkR0YwWlZaaGJIVmxMblJ2U2xOUFRpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhWd1pHRjBaVk4wWVhSbFZtRnNkV1V1WDJsa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFZ3WkdGMFpWTjBZWFJsVm1Gc2RXVXVYMTkyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb1kyOXNkVzF1VG1GdFpYTWdQVDA5SUNjcUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5sVTNSaGRHVWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVMaTV5WlhOd2IyNXpaVk4wWVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnVzNWd1pHRjBaVk4wWVhSbFMyVjVYVG9nZFhCa1lYUmxVM1JoZEdWV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR052YkhWdGJrNWhiV1Z6TG1admNrVmhZMmdvS0dOdmJIVnRiazVoYldVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxY0dSaGRHVlRkR0YwWlZ0MWNHUmhkR1ZUZEdGMFpVdGxlVjFiWTI5c2RXMXVUbUZ0WlYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOd2IyNXpaVk4wWVhSbElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzR1TG5KbGMzQnZibk5sVTNSaGRHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXM1Z3WkdGMFpWTjBZWFJsUzJWNVhUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTGk0dWNtVnpjRzl1YzJWVGRHRjBaVnQxY0dSaGRHVlRkR0YwWlV0bGVWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JiWTI5c2RXMXVUbUZ0WlYwNklIVndaR0YwWlZOMFlYUmxXM1Z3WkdGMFpWTjBZWFJsUzJWNVhWdGpiMngxYlc1T1lXMWxYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWUZORlVWVkZUa05GSUVWU1VrOVNPaUJPVDE5VlVFUkJWRVZmVTFSQlZFVmZRMDlNVlUxT1gwNUJUVVU2SUNSN2NtVnhkV1Z6ZEZOMFlYUmxMblI1Y0dWOU9pQWtlM1Z3WkdGMFpWTjBZWFJsUzJWNWZTNGtlMk52YkhWdGJrNWhiV1Y5WUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1lGTkZVVlZGVGtORklFVlNVazlTT2lCT1QxOVZVRVJCVkVWZlUxUkJWRVZmUzBWWk9pQWtlM0psY1hWbGMzUlRkR0YwWlM1MGVYQmxmVG9nSkh0MWNHUmhkR1ZUZEdGMFpVdGxlWDFnTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE53YjI1elpWTjBZWFJsTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRGSmxjWFZsYzNSQlkzUnBiMjVUZEdGMFpTaGhZM1JwYjI1T1lXMWxMQ0J5WlhGMVpYTjBVR0Z5WVcxek1TQTlJRzUxYkd3c0lISmxjWFZsYzNSUVlYSmhiWE15SUQwZ2JuVnNiQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnY21WeGRXVnpkRkJoY21GdGN6RWdQVDA5SUNkemRISnBibWNuSUNZbUlISmxjWFZsYzNSUVlYSmhiWE15SUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZXlCMGVYQmxPaUJoWTNScGIyNU9ZVzFsSUgwN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGVYQmxiMllnY21WeGRXVnpkRkJoY21GdGN6RWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCeVpYRjFaWE4wVUdGeVlXMXpNaUE5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN0lDNHVMbkpsY1hWbGMzUlFZWEpoYlhNeExDQXVMaTV5WlhGMVpYTjBVR0Z5WVcxek1pd2dkSGx3WlRvZ1lXTjBhVzl1VG1GdFpTQjlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlISmxjWFZsYzNSUVlYSmhiWE14SUQwOVBTQW5jM1J5YVc1bkp5QW1KaUIwZVhCbGIyWWdjbVZ4ZFdWemRGQmhjbUZ0Y3pJZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdleUF1TGk1eVpYRjFaWE4wVUdGeVlXMXpNaXdnZEhsd1pUb2dZV04wYVc5dVRtRnRaU0I5TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2V5QXVMaTV5WlhGMVpYTjBVR0Z5WVcxek1Td2dkSGx3WlRvZ1lXTjBhVzl1VG1GdFpTQjlPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnYjNNZ1puSnZiU0FuYjNNbk8xeHVhVzF3YjNKMElIQnliMk5sYzNNZ1puSnZiU0FuY0hKdlkyVnpjeWM3WEc1Y2JtbHRjRzl5ZENCa1pXWnBibVVnWm5KdmJTQW5MaTlrWldacGJtVW5PMXh1WEc1amIyNXpkQ0I3SUZCU1QwUlZRMVJKVDA0c0lFUkZWa1ZNVDFCTlJVNVVMQ0JRVWs5RVZVTlVTVTlPWDBSUFRVRkpUaXdnUkVWV1JVeFBVRTFGVGxSZlJFOU5RVWxPTENCVFZVSmZSRTlOUVVsT1V5d2dVRTlTVkZNZ2ZTQTlJR1JsWm1sdVpUdGNibU52Ym5OMElHRndhVlpsY2lBOUlERTdYRzVqYjI1emRDQm9iM04wVG1GdFpTQTlJRzl6TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RvYjNOMGJtRnRaU2NwSUQ4Z2IzTXVhRzl6ZEc1aGJXVW9LU0E2SUVSRlZrVk1UMUJOUlU1VVgwUlBUVUZKVGp0Y2JtTnZibk4wSUdWdWRpQTlJR2RsZEVWdWRpaG9iM04wVG1GdFpTazdYRzVqYjI1emRDQm1hV3hsY3lBOUlIdGNiaUFnWTJ4cFpXNTBPaUFuZEdGc2EyNHVZMnhwWlc1MExtcHpKeXhjYmlBZ1lYQnBPaUFuZEdGc2EyNHVZWEJwTG1wekp5eGNiaUFnZDNOWGIzSnJaWEk2SUNkM2N5NWhjR2t1ZDI5eWEyVnlMbXB6Snl4Y2JpQWdaWGgwT2lBbmRHRnNhMjR1WlhoMExtcHpKeXhjYmlBZ1kyOTJaWEk2SUNkMFlXeHJiaTVqYjNabGNpNXFjeWNzWEc0Z0lIUjFibVU2SUNkMFlXeHJiaTUwZFc1bExtcHpKeXhjYmlBZ1kyOXRjRzl1Wlc1MGN6b2dKM1JoYkd0dUxtTnZiWEJ2Ym1WdWRITXVhbk1uTEZ4dWZUdGNibU52Ym5OMElHbHpSR1YySUQwZ1pXNTJJRDA5UFNCRVJWWkZURTlRVFVWT1ZEdGNibU52Ym5OMElHUnZiV0ZwYmlBOUlHVnVkaUE5UFQwZ1VGSlBSRlZEVkVsUFRpQS9JRkJTVDBSVlExUkpUMDVmUkU5TlFVbE9JRG9nUkVWV1JVeFBVRTFGVGxSZlJFOU5RVWxPTzF4dVkyOXVjM1FnZDNkM1ZWSk1JRDBnWUNSN1UxVkNYMFJQVFVGSlRsTXVWMWRYZlM0a2UyUnZiV0ZwYm4xZ08xeHVZMjl1YzNRZ1kyOTJaWEpWVWt3Z1BTQmdKSHRUVlVKZlJFOU5RVWxPVXk1RFQxWkZVbjB1Skh0a2IyMWhhVzU5WUR0Y2JtTnZibk4wSUdGd2FWVlNUQ0E5SUdBa2UxTlZRbDlFVDAxQlNVNVRMa0ZRU1gwdUpIdGtiMjFoYVc1OVlEdGNibU52Ym5OMElHRndhVUZqWTJWemMxVlNUQ0E5SUdselJHVjJJRDhnWUNSN1pHOXRZV2x1ZlRva2UxQlBVbFJUTGtSRlZrVk1UMUJOUlU1VVgwRlFTWDB2Skh0bWFXeGxjeTVoY0dsOVlDQTZJR0FrZTJGd2FWVlNUSDB2ZGlSN1lYQnBWbVZ5ZldBN1hHNWpiMjV6ZENCamJHbGxiblJWVWt3Z1BTQnBjMFJsZGlBL0lHQWtlMlJ2YldGcGJuMDZKSHRRVDFKVVV5NUVSVlpGVEU5UVRVVk9WRjlEVEVsRlRsUjlMeVI3Wm1sc1pYTXVZMnhwWlc1MGZXQWdPaUJnSkh0VFZVSmZSRTlOUVVsT1V5NURURWxGVGxSOUxpUjdaRzl0WVdsdWZXQTdYRzVqYjI1emRDQmtaWE5qVlZKTUlEMGdZQ1I3VTFWQ1gwUlBUVUZKVGxNdVJFVlRRMzB1Skh0a2IyMWhhVzU5WUR0Y2JtTnZibk4wSUhCdmNuUmhiRlZTVENBOUlHQWtlMU5WUWw5RVQwMUJTVTVUTGxCUFVsUkJUSDB1Skh0a2IyMWhhVzU5WUR0Y2JtTnZibk4wSUdGemMyVjBjMVZTVENBOUlHQWtlMU5WUWw5RVQwMUJTVTVUTGtGVFUwVlVVMzB1Skh0a2IyMWhhVzU5WUR0Y2JtTnZibk4wSUdGMWRHOVZVa3dnUFNCZ0pIdFRWVUpmUkU5TlFVbE9VeTVCVlZSUGZTNGtlMlJ2YldGcGJuMWdPMXh1WTI5dWMzUWdaWGgwVlZKTUlEMGdZQ1I3VTFWQ1gwUlBUVUZKVGxNdVJWaFVmUzRrZTJSdmJXRnBibjFnTzF4dVkyOXVjM1FnWTI5dGNGVlNUQ0E5SUdBa2UxTlZRbDlFVDAxQlNVNVRMa05QVFZCOUxpUjdaRzl0WVdsdWZXQTdYRzVqYjI1emRDQnZkMjVWVWt3Z1BTQmdKSHRUVlVKZlJFOU5RVWxPVXk1UFYwNTlMaVI3Wkc5dFlXbHVmV0E3WEc1amIyNXpkQ0J1WlhkelZWSk1JRDBnWUNSN1UxVkNYMFJQVFVGSlRsTXVUa1ZYVTMwdUpIdGtiMjFoYVc1OVlEdGNibU52Ym5OMElIUjFibVZWVWt3Z1BTQmdKSHRUVlVKZlJFOU5RVWxPVXk1VVZVNUZmUzRrZTJSdmJXRnBibjFnTzF4dVkyOXVjM1FnWTI5dGNHOXVaVzUwYzFWU1RDQTlJR0FrZTFOVlFsOUVUMDFCU1U1VExrTlBUVkJQVGtWT1ZGTjlMaVI3Wkc5dFlXbHVmV0E3WEc1amIyNXpkQ0JpWVc1dVpYSlZVa3dnUFNCZ0pIdFRWVUpmUkU5TlFVbE9VeTVDUVU1T1JWSjlMaVI3Wkc5dFlXbHVmV0E3WEc1amIyNXpkQ0IwY21GdWMyRmpkR2x2YmxWU1RDQTlJR0FrZTFOVlFsOUVUMDFCU1U1VExsUlNRVTVUUVVOVVNVOU9mUzRrZTJSdmJXRnBibjFnTzF4dVkyOXVjM1FnWVhOelpYUnpTVzFuVUdGMGFDQTlJR0FrZTJGemMyVjBjMVZTVEgwdmFXMW5MMkE3WEc1amIyNXpkQ0JoYzNObGRITkRiM1psY2xCaGRHZ2dQU0JnSkh0aGMzTmxkSE5WVWt4OUwyTnZkbVZ5TDJBN1hHNWpiMjV6ZENCaGMzTmxkSE5KWTI5dVVHRjBhQ0E5SUdBa2UyRnpjMlYwYzFWU1RIMHZhV052Ymk5Z08xeHVZMjl1YzNRZ1lYTnpaWFJ6U25OUVlYUm9JRDBnWUNSN1lYTnpaWFJ6VlZKTWZTOXFjeTlnTzF4dVkyOXVjM1FnYzJWemMybHZibFZTVENBOUlHQWtlMU5WUWw5RVQwMUJTVTVUTGxORlUxTkpUMDU5TGlSN1pHOXRZV2x1ZldBN1hHNWpiMjV6ZENCa1pYTmpjbWx3ZEdsdmJpQTlJQ2QwWVd4cmJpQmpZVzRnYzJoaGNtVWdZMjl0YldWdWRITWdkMmwwYUNCMWMyVnljeUIzWVhSamFHbHVaeUIwYUdVZ2MyRnRaU0JYUlVJZ2NHRm5aUzRnVUd4bFlYTmxJR1Z1YW05NUlIUm9aU0IzYjNKc1pDQnZaaUIwWVd4cmJpNG5PMXh1WTI5dWMzUWdiSEJNWVc1bmRXRm5aWE1nUFNCYlhHNGdJQ2RsYmljc1hHNGdJQ2Q2YUNjc1hHNGdJQ2RxWVNjc1hHNGdJQ2RrWlNjc1hHNGdJQ2RtY2ljc1hHNGdJQ2RvYVNjc1hHNGdJQ2R3ZENjc1hHNGdJQ2RwZENjc1hHNGdJQ2R5ZFNjc1hHNGdJQ2RyYnljc1hHNGdJQ2RsY3ljc1hHNGdJQ2RwWkNjc1hHNGdJQ2QwY2ljc1hHNGdJQ2R1YkNjc1hHNGdJQ2RoY2ljc1hHNGdJQ2Q2YUMxVVZ5Y3NYRzRnSUNkd2JDY3NYRzRnSUNkemRpY3NYRzRnSUNkMGFDY3NYRzRnSUNkbVlTY3NYRzRnSUNkdWJpY3NYRzRnSUNkbllTY3NYRzRnSUNkb1pTY3NYRzRnSUNkdGNpY3NYRzVkTzF4dVhHNWpiMjV6ZENCa1pXWmhkV3gwUW1seWRHaGtZWGxWYm1sNGRHbHRaU0E5SURFd01EQXdNREF3TURBd01EQTdYRzVqYjI1emRDQm1hVzVrVDI1bFZHaHlaV0ZrUVdOMGFYWmxTRzkxY2lBOUlERTdYRzVqYjI1emRDQm1hVzVrVDI1bFVHOXpkRU51ZENBOUlETXdPMXh1WTI5dWMzUWdabWx1WkU5dVpVeHBiV2wwUTI1MElEMGdNekF3TzF4dVkyOXVjM1FnYjJkd1NXMWhaMlZ6SUQwZ2UxeHVJQ0JJZEcxc09pQmdMeThrZTJGemMyVjBjMGx0WjFCaGRHaDlkR0ZzYTI1ZmJHOW5iMTlvZEcxc0xuQnVaMkFzWEc0Z0lFMTFjMmxqT2lCZ0x5OGtlMkZ6YzJWMGMwbHRaMUJoZEdoOWRHRnNhMjVmYkc5bmIxOXRkWE5wWXk1d2JtZGdMRnh1SUNCV2FXUmxiem9nWUM4dkpIdGhjM05sZEhOSmJXZFFZWFJvZlhSaGJHdHVYMnh2WjI5ZmRtbGtaVzh1Y0c1bllDeGNibjA3WEc1amIyNXpkQ0JrWldaaGRXeDBSbUYyYVdOdmJpQTlJR0F2THlSN1UxVkNYMFJQVFVGSlRsTXVRVk5UUlZSVGZTNGtlMlJ2YldGcGJuMHZabUYyYVdOdmJpNXBZMjlnTzF4dVhHNWpiMjV6ZENCamIyNW1PaUJoYm5rZ1BTQjdYRzRnSUdSdmJXRnBiaXhjYmlBZ2FYTkVaWFlzWEc0Z0lHVnVkaXhjYmlBZ1ptbHNaWE1zWEc0Z0lHaHZjM1JPWVcxbExGeHVJQ0JoY0dsVlVrd3NYRzRnSUdGd2FVRmpZMlZ6YzFWU1RDeGNiaUFnWTI5MlpYSlZVa3dzWEc0Z0lIZDNkMVZTVEN4Y2JpQWdaR1Z6WTFWU1RDeGNiaUFnY0c5eWRHRnNWVkpNTEZ4dUlDQmpiR2xsYm5SVlVrd3NYRzRnSUdGemMyVjBjMVZTVEN4Y2JpQWdZWFYwYjFWU1RDeGNiaUFnWlhoMFZWSk1MRnh1SUNCamIyMXdWVkpNTEZ4dUlDQnZkMjVWVWt3c1hHNGdJRzVsZDNOVlVrd3NYRzRnSUhSMWJtVlZVa3dzWEc0Z0lHSmhibTVsY2xWU1RDeGNiaUFnWTI5dGNHOXVaVzUwYzFWU1RDeGNiaUFnZEhKaGJuTmhZM1JwYjI1VlVrd3NYRzRnSUdGemMyVjBjMGx0WjFCaGRHZ3NYRzRnSUdGemMyVjBjME52ZG1WeVVHRjBhQ3hjYmlBZ1lYTnpaWFJ6U1dOdmJsQmhkR2dzWEc0Z0lHRnpjMlYwYzBwelVHRjBhQ3hjYmlBZ2MyVnpjMmx2YmxWU1RDeGNiaUFnWkdWelkzSnBjSFJwYjI0c1hHNGdJR0Z3YVZabGNpeGNiaUFnYkhCTVlXNW5kV0ZuWlhNc1hHNGdJR1JsWm1GMWJIUkNhWEowYUdSaGVWVnVhWGgwYVcxbExGeHVJQ0JtYVc1a1QyNWxWR2h5WldGa1FXTjBhWFpsU0c5MWNpeGNiaUFnWm1sdVpFOXVaVkJ2YzNSRGJuUXNYRzRnSUdacGJtUlBibVZNYVcxcGRFTnVkQ3hjYmlBZ2IyZHdTVzFoWjJWekxGeHVJQ0JrWldaaGRXeDBSbUYyYVdOdmJpeGNibjA3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3SUM0dUxtTnZibVlnZlR0Y2JseHVMeThnVkU5RVR6b2dUVzkyWlNCMGJ5QnpaWEoyWlhJZ1kyOXVaaWdnYm05MElIVnpaU0JtY205dElHTnNhV1Z1ZENBcExseHVablZ1WTNScGIyNGdaMlYwUlc1MktHaHZjM1JPWVcxbEtTQjdYRzRnSUM4dklHWnliMjBnWTJ4cFpXNTBMbHh1SUNCcFppQW9jSEp2WTJWemN5NTBhWFJzWlNBOVBUMGdKMkp5YjNkelpYSW5LU0I3WEc0Z0lDQWdhV1lnS0d4dlkyRjBhVzl1TG1oeVpXWXVhVzVrWlhoUFppaGtaV1pwYm1VdVJFVldSVXhQVUUxRlRsUmZSRTlOUVVsT0tTQStQU0F3S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0J3YjNKMElEMGdUblZ0WW1WeUtHeHZZMkYwYVc5dUxuQnZjblFwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSEJ2Y25RZ1BUMDlJR1JsWm1sdVpTNVFUMUpVVXk1RVJWWkZURTlRVFVWT1ZGOURURWxGVGxRZ2ZIeGNiaUFnSUNBZ0lDQWdjRzl5ZENBOVBUMGdaR1ZtYVc1bExsQlBVbFJUTGtSRlZrVk1UMUJOUlU1VVgwRlFTU0I4ZkZ4dUlDQWdJQ0FnSUNCd2IzSjBJRDA5UFNCa1pXWnBibVV1VUU5U1ZGTXVSRVZXUlV4UFVFMUZUbFJmUTA5V1JWSWdmSHhjYmlBZ0lDQWdJQ0FnY0c5eWRDQTlQVDBnWkdWbWFXNWxMbEJQVWxSVExrUkZWa1ZNVDFCTlJVNVVYME5QVFZCUFRrVk9WRk1nZkh4Y2JpQWdJQ0FnSUNBZ2NHOXlkQ0E5UFQwZ1pHVm1hVzVsTGxCUFVsUlRMa1JGVmtWTVQxQk5SVTVVWDFSVlRrVmNiaUFnSUNBZ0lDQWdQeUJrWldacGJtVXVSRVZXUlV4UFVFMUZUbFJjYmlBZ0lDQWdJQ0FnT2lCa1pXWnBibVV1VEU5RFFVeElUMU5VTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1pHVm1hVzVsTGxCU1QwUlZRMVJKVDA0N1hHNGdJQ0FnTHk4Z1puSnZiU0J6WlhKMlpYSXVYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHaHZjM1JPWVcxbExtbHVaR1Y0VDJZb1pHVm1hVzVsTGtGWFUxOUlUMU5VWDB0RldTa2dQajBnTUNBL0lHUmxabWx1WlM1UVVrOUVWVU5VU1U5T0lEb2daR1ZtYVc1bExrUkZWa1ZNVDFCTlJVNVVPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnY0hKdlkyVnpjeUJtY205dElDZHdjbTlqWlhOekp6dGNibHh1WTI5dWMzUWdhRzl6ZEU1aGJXVWdQU0J3Y205alpYTnpMbVZ1ZGk1SVQxTlVUa0ZOUlNBL0lIQnliMk5sYzNNdVpXNTJMa2hQVTFST1FVMUZJRG9nSjJ4dlkyRnNhRzl6ZENjN1hHNWpiMjV6ZENCa1pXWnBibVU2SUdGdWVTQTlJSHRjYmlBZ1FWQlFYMDVCVFVVNklDZDBZV3hyYmljc1hHNGdJRkJTVDBSVlExUkpUMDQ2SUNkUVVrOUVWVU5VU1U5T0p5eGNiaUFnVEU5RFFVeElUMU5VT2lBblRFOURRVXhJVDFOVUp5eGNiaUFnUkVWV1JVeFBVRTFGVGxRNklDZEVSVlpGVEU5UVRVVk9WQ2NzWEc0Z0lGQlNUMFJWUTFSSlQwNWZTVkE2SUdodmMzUk9ZVzFsTEZ4dUlDQlFVazlFVlVOVVNVOU9YMFJQVFVGSlRqb2dKM1JoYkd0dUxtbHZKeXhjYmlBZ1JFVldSVXhQVUUxRlRsUmZSRTlOUVVsT09pQW5iRzlqWVd4b2IzTjBKeXhjYmlBZ1FWZFRYMGhQVTFSZlMwVlpPaUFuWldNeUxtbHVkR1Z5Ym1Gc0p5eGNiaUFnVUU5U1ZGTTZJSHRjYmlBZ0lDQklWRlJRT2lBNE1DeGNiaUFnSUNCSVZGUlFVem9nTkRRekxGeHVJQ0FnSUVSRlZrVk1UMUJOUlU1VVgwTlBWa1ZTT2lBNE1EQXdMRnh1SUNBZ0lFUkZWa1ZNVDFCTlJVNVVYMEZRU1RvZ09EQXdNU3hjYmlBZ0lDQkVSVlpGVEU5UVRVVk9WRjlEVDAxUVQwNUZUbFJUT2lBNE1EQXlMRnh1SUNBZ0lFUkZWa1ZNVDFCTlJVNVVYMVJWVGtVNklEZ3dNRE1zWEc0Z0lDQWdSRVZXUlV4UFVFMUZUbFJmUTB4SlJVNVVPaUE0TURnd0xGeHVJQ0FnSUZKRlJFbFRPaUEyTXpjNUxGeHVJQ0FnSUUxUFRrZFBPaUF5TnpBeE55eGNiaUFnSUNCVFQwTkxSVlJmU1U4NklERXdORFF6TEZ4dUlDQjlMRnh1SUNCVFZVSmZSRTlOUVVsT1V6b2dlMXh1SUNBZ0lGZFhWem9nSjNkM2R5Y3NYRzRnSUNBZ1FWQkpPaUFuWVhCcEp5eGNiaUFnSUNCRVJWTkRPaUFuWkdWell5Y3NYRzRnSUNBZ1VFOVNWRUZNT2lBbmNHOXlkR0ZzSnl4Y2JpQWdJQ0JEVEVsRlRsUTZJQ2RqYkdsbGJuUW5MRnh1SUNBZ0lFRlRVMFZVVXpvZ0oyRnpjMlYwY3ljc1hHNGdJQ0FnVTBWVFUwbFBUam9nSjNObGMzTnBiMjRuTEZ4dUlDQWdJRUZWVkU4NklDZGhkWFJ2Snl4Y2JpQWdJQ0JQVjA0NklDZHZkMjRuTEZ4dUlDQWdJRTVGVjFNNklDZHVaWGR6Snl4Y2JpQWdJQ0JDUVU1T1JWSTZJQ2RpWVc1dVpYSW5MRnh1SUNBZ0lFTlBWa1ZTT2lBblkyOTJaWEluTEZ4dUlDQWdJRkpCVGtzNklDZHlZVzVySnl4Y2JpQWdJQ0JGV0ZRNklDZGxlSFFuTEZ4dUlDQWdJRU5QVFZCUFRrVk9WRk02SUNkamIyMXdiMjVsYm5Sekp5eGNiaUFnSUNCVVZVNUZPaUFuZEhWdVpTY3NYRzRnSUNBZ1ZGSkJUbE5CUTFSSlQwNDZJQ2QwY21GdWMyRmpkR2x2Ymljc1hHNGdJSDBzWEc0Z0lFRlFVRjlVV1ZCRlV6b2dlMXh1SUNBZ0lFTk1TVVZPVkRvZ0owTk1TVVZPVkNjc1hHNGdJQ0FnVUU5U1ZFRk1PaUFuVUU5U1ZFRk1KeXhjYmlBZ0lDQkZXRlJGVGxOSlQwNDZJQ2RGV0ZSRlRsTkpUMDRuTEZ4dUlDQWdJRUZRU1RvZ0owRlFTU2NzWEc0Z0lDQWdRMDlXUlZJNklDZERUMVpGVWljc1hHNGdJQ0FnUTA5TlVFOU9SVTVVVXpvZ0owTlBUVkJQVGtWT1ZGTW5MRnh1SUNBZ0lGUlZUa1U2SUNkVVZVNUZKeXhjYmlBZ2ZTeGNiaUFnVlZKTU9pQjdYRzRnSUNBZ2RIZHBkSFJsY2pvZ0oyaDBkSEJ6T2k4dmRIZHBkSFJsY2k1amIyMHZKeXhjYmlBZ0lDQm1ZV05sWW05dmF6b2dKMmgwZEhCek9pOHZkM2QzTG1aaFkyVmliMjlyTG1OdmJTOG5MRnh1SUNBZ0lHRndjSE4wYjNKbE9pQW5hSFIwY0hNNkx5OXBkSFZ1WlhNdVlYQndiR1V1WTI5dEwyRndjQzlwWkNjc1hHNGdJQ0FnY0d4aGVYTjBiM0psT2lBbmFIUjBjSE02THk5d2JHRjVMbWR2YjJkc1pTNWpiMjB2YzNSdmNtVXZZWEJ3Y3k5a1pYUmhhV3h6UDJsa1BTY3NYRzRnSUNBZ1kyaHliMjFsUlhoMFpXNXphVzl1T2lBbmFIUjBjSE02THk5amFISnZiV1V1WjI5dloyeGxMbU52YlM5M1pXSnpkRzl5WlM5a1pYUmhhV3d2ZEdGc2EyNHRabTl5TFdOb2NtOXRaUzlrYTI1bmJtMWtiR052Wm1GdFluQm1ZV05qWlhCaWJtcG5abWh2YkdkaWJ6OW9iRDFsYmljc1hHNGdJSDBzWEc0Z0lIUmhiR3R1UTJ4cFpXNTBTbk02SUNkMFlXeHJiaTVqYkdsbGJuUXVhbk1uTEZ4dUlDQjBZV3hyYmtGd2FVcHpPaUFuZEdGc2EyNHVZWEJwTG1wekp5eGNiaUFnZEdGc2EyNVNZVzVyU25NNklDZDBZV3hyYmk1eVlXNXJMbXB6Snl4Y2JpQWdibTlKYm01bGNrNXZkR2xtT2lBblUyOXljbmtzSUU1dklFWjFibU4wYVc5dUxpY3NYRzRnSUdKaGJtNWxja05zWVhOek9pQW5kR0ZzYTI1ZlltRnVibVZ5Snl4Y2JpQWdjM1J2Y21GblpVdGxlVG9nZTF4dUlDQWdJR0poYzJWTFpYazZJQ2RBZEdGc2EyNUFKeXhjYmlBZ0lDQndiM04wYzFScGJXVnNhVzVsV21WeWJ6b2dKM0J2YzNSelZHbHRaV3hwYm1WYVpYSnZKeXhjYmlBZ0lDQndiM04wYzFScGJXVnNhVzVsT2lBbmNHOXpkSE5VYVcxbGJHbHVaU2NzWEc0Z0lDQWdjRzl6ZEhOVGFXNW5iR1U2SUNkd2IzTjBjMU5wYm1kc1pTY3NYRzRnSUNBZ2NHOXpkSE5OZFd4MGFUb2dKM0J2YzNSelRYVnNkR2tuTEZ4dUlDQWdJSEJ2YzNSelEyaHBiR1E2SUNkd2IzTjBjME5vYVd4a0p5eGNiaUFnSUNCd2IzTjBjMHh2WjNNNklDZHdiM04wYzB4dlozTW5MRnh1SUNBZ0lIUm9jbVZoWkhNNklDZDBhSEpsWVdSekp5eGNiaUFnZlN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1JsWm1sdVpUdGNiaUlzSW1sdGNHOXlkQ0JGYlc5MGFXOXVUVzlrWld3Z1puSnZiU0FuWTI5dGJXOXVMMlZ0YjNScGIyNXpMMjF2WkdWc0wybHVaR1Y0Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUlcxdmRHbHZibk1nZTF4dUlDQnpkR0YwYVdNZ1oyVjBJR1JsWm1GMWJIUk5iMlJsYkV0bGVTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0ozSjFjM05sYkd4VGFXMXdiR1VuTzF4dUlDQjlYRzRnSUhOMFlYUnBZeUJuWlhRZ1ZGbFFSVk1vS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJRXhKUzBVNklIc2dTVVE2SURFc0lFeEJRa1ZNT2lBblRHbHJaU2NnZlN4Y2JpQWdJQ0FnSUVsT1ZFVlNSVk5VT2lCN0lFbEVPaUF4TURBeUxDQk1RVUpGVERvZ0owbHVkR1Z5WlhOMEp5QjlMRnh1SUNBZ0lDQWdSRWxUUTA5V1JWSlpPaUI3SUVsRU9pQXhNREF6TENCTVFVSkZURG9nSjBScGMyTnZkbVZ5ZVNjZ2ZTeGNiaUFnSUNBZ0lGTlZUazVaT2lCN0lFbEVPaUF4TURBMExDQk1RVUpGVERvZ0oxTjFibTU1SnlCOUxGeHVJQ0FnSUNBZ1VFVkJRMFU2SUhzZ1NVUTZJREV3TURVc0lFeEJRa1ZNT2lBblVHVmhZMlVuSUgwc1hHNGdJQ0FnSUNCRFNFVkZVam9nZXlCSlJEb2dNVEF3Tml3Z1RFRkNSVXc2SUNkRGFHVmxjaWNnZlN4Y2JpQWdJQ0FnSUUxUFRrVlpPaUI3SUVsRU9pQXhNREEzTENCTVFVSkZURG9nSjAxdmJtVjVKeUI5TEZ4dUlDQWdJQ0FnVlU1TVNVdEZPaUI3SUVsRU9pQXlNREF4TENCTVFVSkZURG9nSjFWdWJHbHJaU2NnZlN4Y2JpQWdJQ0FnSUV4UFZrVTZJSHNnU1VRNklETXdNREFzSUV4QlFrVk1PaUFuVEc5MlpTY2dmU3hjYmlBZ0lDQWdJRk5WVUZKSlUwVTZJSHNnU1VRNklERXdNREF4TENCTVFVSkZURG9nSjFOMWNuQnlhWE5sSnlCOUxGeHVJQ0FnSUNBZ1JWaERTVlJGT2lCN0lFbEVPaUF4TURBd01pd2dURUZDUlV3NklDZEZlR05wZEdVbklIMHNYRzRnSUNBZ0lDQklRVkJRV1RvZ2V5QkpSRG9nTVRBd01ETXNJRXhCUWtWTU9pQW5TR0Z3Y0hrbklIMHNYRzRnSUNBZ0lDQktUMWs2SUhzZ1NVUTZJREV3TURBMExDQk1RVUpGVERvZ0owcHZlU2NnZlN4Y2JpQWdJQ0FnSUVkTVFVUTZJSHNnU1VRNklESXdNREF4TENCTVFVSkZURG9nSjBkc1lXUW5JSDBzWEc0Z0lDQWdJQ0JUUVZSSlUwWkJRMVJKVDA0NklIc2dTVVE2SURJd01EQXlMQ0JNUVVKRlREb2dKMU5oZEdselptRmpkR2x2YmljZ2ZTeGNiaUFnSUNBZ0lFTlBUVVpQVWxRNklIc2dTVVE2SURNd01EQXhMQ0JNUVVKRlREb2dKME52YldadmNuUW5JSDBzWEc0Z0lDQWdJQ0JTUlV4QldEb2dleUJKUkRvZ016QXdNRElzSUV4QlFrVk1PaUFuVW1Wc1lYZ25JSDBzWEc0Z0lDQWdJQ0JVU1ZKRlJEb2dleUJKUkRvZ016QXdNRE1zSUV4QlFrVk1PaUFuVkdseVpXUW5JSDBzWEc0Z0lDQWdJQ0JUVEVWRlVGazZJSHNnU1VRNklEVXdNREF4TENCTVFVSkZURG9nSjFOc1pXVndlU2NnZlN4Y2JpQWdJQ0FnSUZOTVFVTkxPaUI3SUVsRU9pQTJNREF3TVN3Z1RFRkNSVXc2SUNkVGJHRmpheWNnZlN4Y2JpQWdJQ0FnSUVKUFVrbE9Sem9nZXlCSlJEb2dOakF3TURJc0lFeEJRa1ZNT2lBblFtOXlhVzVuSnlCOUxGeHVJQ0FnSUNBZ1RVVk1RVTVEU0U5TVdUb2dleUJKUkRvZ056QXdNREVzSUV4QlFrVk1PaUFuVFdWc1lXNWphRzlzZVNjZ2ZTeGNiaUFnSUNBZ0lGTkJSRG9nZXlCSlJEb2dOekF3TURJc0lFeEJRa1ZNT2lBblUyRmtKeUI5TEZ4dUlDQWdJQ0FnVlU1UVRFVkJVMEZPVkRvZ2V5QkpSRG9nTnpBd01ETXNJRXhCUWtWTU9pQW5WVzV3YkdWaGMyRnVkQ2NnZlN4Y2JpQWdJQ0FnSUVaU1ZWTlVVa0ZVUlVRNklIc2dTVVE2SURjd01EQTBMQ0JNUVVKRlREb2dKMFp5ZFhOMGNtRjBaV1FuSUgwc1hHNGdJQ0FnSUNCRVNWTlRRVlJKVTBaSlJVUTZJSHNnU1VRNklEZ3dNREF4TENCTVFVSkZURG9nSjBScGMzTmhkR2x6Wm1sbFpDY2dmU3hjYmlBZ0lDQWdJRUZPUjBWU09pQjdJRWxFT2lBNE1EQXdNaXdnVEVGQ1JVdzZJQ2RCYm1kbGNpY2dmU3hjYmlBZ0lDQWdJRmRQVWxKWk9pQjdJRWxFT2lBNE1EQXdNeXdnVEVGQ1JVdzZJQ2RYYjNKeWVTY2dmU3hjYmlBZ0lDQWdJRVpGUVZJNklIc2dTVVE2SURnd01EQTBMQ0JNUVVKRlREb2dKMFpsWVhJbklIMHNYRzRnSUNBZ0lDQlhUMUpTV1Y5R1JVRlNPaUI3SUVsRU9pQTRNREF3TlN3Z1RFRkNSVXc2SUNkWGIzSnllU1pHWldGeUp5QjlMRnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwUjNKaGNHaE5ZWGhPZFcwb2JXOWtaV3hMWlhrZ1BTQkZiVzkwYVc5dWN5NWtaV1poZFd4MFRXOWtaV3hMWlhrc0lIUnZkR0ZzVG5WdElEMGdNQ3dnWVdSa1dtVnlieUE5SUhSeWRXVXBJSHRjYmlBZ0lDQnNaWFFnWjNKaGNHaE5ZWGhPZFcwZ1BTQXdPMXh1SUNBZ0lHeGxkQ0JzYVcxcGRITWdQU0I3ZlR0Y2JpQWdJQ0J6ZDJsMFkyZ2dLRzF2WkdWc1MyVjVLU0I3WEc0Z0lDQWdJQ0JqWVhObElDZHdiR0ZwYmljNlhHNGdJQ0FnSUNBZ0lHeHBiV2wwY3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0F4T2lBeExGeHVJQ0FnSUNBZ0lDQWdJRFU2SURJc1hHNGdJQ0FnSUNBZ0lDQWdNVEE2SURNc1hHNGdJQ0FnSUNBZ0lDQWdNekE2SURRc1hHNGdJQ0FnSUNBZ0lDQWdOekE2SURVc1hHNGdJQ0FnSUNBZ0lDQWdNVEF3T2lBMkxGeHVJQ0FnSUNBZ0lDQWdJREkxTURvZ055eGNiaUFnSUNBZ0lDQWdJQ0ExTURBNklEZ3NYRzRnSUNBZ0lDQWdJQ0FnTnpVd09pQTVMRnh1SUNBZ0lDQWdJQ0FnSURFd01EQTZJREV3TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdKM0oxYzNObGJHeFRhVzF3YkdVbk9seHVJQ0FnSUNBZ0lDQnNhVzFwZEhNZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnTmpvZ05TeGNiaUFnSUNBZ0lDQWdJQ0F4TURvZ05TeGNiaUFnSUNBZ0lDQWdJQ0F5TURvZ05TeGNiaUFnSUNBZ0lDQWdJQ0F6TURvZ05TeGNiaUFnSUNBZ0lDQWdJQ0ExTURvZ05TeGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUNkeWRYTnpaV3hzSnpwY2JpQWdJQ0FnSUNBZ2JHbHRhWFJ6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJREU2SURFc1hHNGdJQ0FnSUNBZ0lDQWdOVG9nTWl4Y2JpQWdJQ0FnSUNBZ0lDQXhNRG9nTXl4Y2JpQWdJQ0FnSUNBZ0lDQXpNRG9nTkN4Y2JpQWdJQ0FnSUNBZ0lDQTNNRG9nTlN4Y2JpQWdJQ0FnSUNBZ0lDQXhNREE2SURZc1hHNGdJQ0FnSUNBZ0lDQWdNalV3T2lBM0xGeHVJQ0FnSUNBZ0lDQWdJRFV3TURvZ09DeGNiaUFnSUNBZ0lDQWdJQ0EzTlRBNklEa3NYRzRnSUNBZ0lDQWdJQ0FnTVRBd01Eb2dNVEFzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHeHBiV2wwUzJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0d4cGJXbDBjeWs3WEc0Z0lDQWdZMjl1YzNRZ2JHbHRhWFJNWlc1bmRHZ2dQU0JzYVcxcGRFdGxlWE11YkdWdVozUm9JQzBnTVR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUd4cGJXbDBUR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR3RsZVU1MWJUb2dZVzU1SUQwZ2JHbHRhWFJMWlhselcybGRPMXh1SUNBZ0lDQWdZMjl1YzNRZ1pXMXZkR2x2Ymt4cGJXbDBUblZ0SUQwZ2JHbHRhWFJ6VzJ0bGVVNTFiVjA3WEc0Z0lDQWdJQ0JwWmlBb2EyVjVUblZ0SUQ0Z2RHOTBZV3hPZFcwcElHSnlaV0ZyTzF4dUlDQWdJQ0FnWjNKaGNHaE5ZWGhPZFcwZ1BTQmxiVzkwYVc5dVRHbHRhWFJPZFcwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1lXUmtJSHBsY204Z1ozSmhjR2dnYzNCaFkyVmNiaUFnSUNCeVpYUjFjbTRnWVdSa1dtVnlieUEvSUdkeVlYQm9UV0Y0VG5WdElDc2dNU0E2SUdkeVlYQm9UV0Y0VG5WdE8xeHVJQ0I5WEc1Y2JpQWdZbVZzYjI1blEyOTJaWEpVZVhCbGN6b2dZVzU1TzF4dUlDQnBaRXRsZVZSNWNHVnpPaUJoYm5rN1hHNGdJSFI1Y0dWelFYSnlZWGs2SUdGdWVUdGNiaUFnYlc5a1pXdzZJR0Z1ZVR0Y2JpQWdZbUZzWVc1alpYTTZJR0Z1ZVR0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZEhsd1pTQTlJQ2NuS1NCN1hHNGdJQ0FnZEdocGN5NWlaV3h2Ym1kRGIzWmxjbFI1Y0dWeklEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1cFpFdGxlVlI1Y0dWeklEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1MGVYQmxjMEZ5Y21GNUlEMGdXMTA3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loRmJXOTBhVzl1Y3k1cGJuQjFkSE1wTG1admNrVmhZMmdvS0d4aFltVnNLU0E5UGlCN1hHNGdJQ0FnSUNCRmJXOTBhVzl1Y3k1cGJuQjFkSE5iYkdGaVpXeGRMbVp2Y2tWaFkyZ29LSE4wWVcxd1NXUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpWld4dmJtZERiM1psY2xSNWNHVnpXM04wWVcxd1NXUmRJRDBnYkdGaVpXdzdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJRTlpYW1WamRDNXJaWGx6S0VWdGIzUnBiMjV6TGxSWlVFVlRLUzVtYjNKRllXTm9LQ2hyWlhrcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWRIbHdaWE5CY25KaGVTNXdkWE5vS0d0bGVTazdYRzRnSUNBZ0lDQmpiMjV6ZENCdlltb2dQU0JGYlc5MGFXOXVjeTVVV1ZCRlUxdHJaWGxkTzF4dUlDQWdJQ0FnZEdocGN5NXBaRXRsZVZSNWNHVnpXMjlpYWk1SlJGMGdQU0J2WW1vdVRFRkNSVXc3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IwYUdsekxtMXZaR1ZzSUQwZ1JXMXZkR2x2YmsxdlpHVnNPMXh1WEc0Z0lDQWdkR2hwY3k1aVlXeGhibU5sY3lBOUlIdGNiaUFnSUNBZ0lIQnNZV2x1T2lCRmJXOTBhVzl1VFc5a1pXd3VVR3hoYVc0dVoyVjBVMkYyWlVKaGJHRnVZMlVzWEc0Z0lDQWdJQ0J5ZFhOelpXeHNPaUJGYlc5MGFXOXVUVzlrWld3dVVuVnpjMlZzYkM1blpYUlRZWFpsUW1Gc1lXNWpaU3hjYmlBZ0lDQWdJSEoxYzNObGJHeFRhVzF3YkdVNklFVnRiM1JwYjI1TmIyUmxiQzVTZFhOelpXeHNVMmx0Y0d4bExtZGxkRk5oZG1WQ1lXeGhibU5sTEZ4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCemRHRjBhV01nWjJWMElHbHVjSFYwY3lncElIdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa3hKUzBVdVRFRkNSVXhkT2lCYk1Td2dNaXdnTXl3Z05Dd2dOVjBzWEc0Z0lDQWdJQ0JiUlcxdmRHbHZibk11VkZsUVJWTXVUVTlPUlZrdVRFRkNSVXhkT2lCYk1UQXdYU3hjYmx4dUlDQWdJQ0FnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa1ZZUTBsVVJTNU1RVUpGVEYwNklGc3hNVEF4TENBeE1UQXlMQ0F4TVRBekxDQXhNREF4TENBeE1EQXlYU3hjYmlBZ0lDQWdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUlRVkJRV1M1TVFVSkZURjA2SUZzeE1qQXhMQ0F4TWpBeUxDQXhNakF6TENBeE1qQTBMQ0F4TXpBeExDQXhNekF5TENBeE16QXpMQ0F4TXpBMExDQXhNekExTENBeE16QTJMQ0F4TXpBM1hTeGNiaUFnSUNBZ0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1S1Qxa3VURUZDUlV4ZE9pQmJNVFF3TVN3Z01UUXdNaXdnTVRVd01Td2dNVFV3TWl3Z01UVXdNeXdnTVRVd05GMHNYRzRnSUNBZ0lDQmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVVrVk1RVmd1VEVGQ1JVeGRPaUJiTVRZd01Td2dNVFl3TWl3Z01UWXdNeXdnTVRjd01Td2dNVGN3TWl3Z01UY3dNeXdnTVRnd01Td2dNVGd3TWl3Z01UZ3dNMTBzWEc1Y2JpQWdJQ0FnSUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVUVEVGRFN5NU1RVUpGVEYwNklGc3lNREF4TENBeU1EQXlMQ0F5TURBekxDQXlNREEwTENBeU1EQTFMQ0F5TVRBeExDQXlNVEF5TENBeU1UQXpYU3hjYmlBZ0lDQWdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NU5SVXhCVGtOSVQweFpMa3hCUWtWTVhUb2dXekl6TURFc0lESXpNRElzSURJek1ETXNJREl5TURFc0lESXlNRElzSURJeU1ETXNJREl5TURRc0lESXlNRFVzSURJME1ERXNJREkwTURJc0lESTBNRE1zSURJME1EUXNJREkxTURFc0lESTFNRElzSURJMU1ETmRMRnh1SUNBZ0lDQWdXMFZ0YjNScGIyNXpMbFJaVUVWVExrRk9SMFZTTGt4QlFrVk1YVG9nV3pJM01ERXNJREkzTURJc0lESTNNRE1zSURJM01EUXNJREkzTURVc0lESTNNRFlzSURJMk1ERXNJREkyTURKZExGeHVJQ0FnSUNBZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGxkUFVsSlpYMFpGUVZJdVRFRkNSVXhkT2lCYk1qa3dOQ3dnTWprd05Td2dNamt3Tml3Z01qZ3dNU3dnTWpnd01pd2dNamd3TXl3Z01qZ3dOQ3dnTWpnd05Td2dNamd3Tml3Z01qa3dNU3dnTWprd00xMHNYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFFnYldGd0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBdkx5QkdiR0YwSUd4cGEyVmNiaUFnSUNBZ0lERTZJQ2Z3bjVHTkp5eGNiaUFnSUNBZ0lESTZJQ2Zpbkl6dnVJOG5MRnh1SUNBZ0lDQWdNem9nSi9DZmtZQW5MRnh1SUNBZ0lDQWdORG9nSi9DZmtxRW5MRnh1SUNBZ0lDQWdOVG9nSi9DZmtxb25MRnh1SUNBZ0lDQWdNVEE2SUNjbkxGeHVJQ0FnSUNBZ01UQXdPaUFuOEorU3RTY3NYRzVjYmlBZ0lDQWdJQzh2SUZOMWNISnBjMlVvVUc5emFURXBYRzRnSUNBZ0lDQXhNREF4T2lBbjhKK1lzeWNzWEc0Z0lDQWdJQ0F4TURBeU9pQW44SitZdFNjc1hHNWNiaUFnSUNBZ0lDOHZJRVY0WTJsMFpTaFFiM05wTVNsY2JpQWdJQ0FnSURFeE1ERTZJQ2Z3bjZTakp5eGNiaUFnSUNBZ0lERXhNREk2SUNmd241aUdKeXhjYmlBZ0lDQWdJREV4TURNNklDZnduNlNwSnl4Y2JseHVJQ0FnSUNBZ0x5OGdTR0Z3Y0hrb1VHOXphVElwWEc0Z0lDQWdJQ0F4TWpBeE9pQW44SitTa3ljc1hHNGdJQ0FnSUNBeE1qQXlPaUFuOEorbHNDY3NYRzRnSUNBZ0lDQXhNakF6T2lBbjhKK1lqU2NzWEc0Z0lDQWdJQ0F4TWpBME9pQW44SitZdXljc1hHNWNiaUFnSUNBZ0lDOHZJRXB2ZVNoUWIzTnBNaWxjYmlBZ0lDQWdJREV6TURFNklDZnduNWlFSnl4Y2JpQWdJQ0FnSURFek1ESTZJQ2ZpbktnbkxGeHVJQ0FnSUNBZ01UTXdNem9nSi9DZm1JRW5MRnh1SUNBZ0lDQWdNVE13TkRvZ0ovQ2ZqYm9uTEZ4dUlDQWdJQ0FnTVRNd05Ub2dKL0NmbUlvbkxGeHVJQ0FnSUNBZ01UTXdOam9nSi9DZm1KZ25MRnh1SUNBZ0lDQWdNVE13TnpvZ0ovQ2ZqSjhuTEZ4dVhHNGdJQ0FnSUNBdkx5QkhiR0ZrS0ZCdmMya3pLVnh1SUNBZ0lDQWdNVFF3TVRvZ0ovQ2ZwYk1uTEZ4dUlDQWdJQ0FnTVRRd01qb2dKL0NmbUlNbkxGeHVYRzRnSUNBZ0lDQXZMeUJUWVhScGMyWmhZM1JwYjI0b1VHOXphVE1wWEc0Z0lDQWdJQ0F4TlRBeE9pQW44SitZaXljc1hHNGdJQ0FnSUNBeE5UQXlPaUFuOEorT2dpY3NYRzRnSUNBZ0lDQXhOVEF6T2lBbjhKK05zQ2NzWEc0Z0lDQWdJQ0F4TlRBME9pQW44SituZ1Njc1hHNWNiaUFnSUNBZ0lDOHZJRU52YldadmNuUW9VRzl6YVRRcFhHNGdJQ0FnSUNBeE5qQXhPaUFuOEorWWpDY3NYRzRnSUNBZ0lDQXhOakF5T2lBbjhKK2twQ2NzWEc0Z0lDQWdJQ0F4TmpBek9pQW44SitZaVNjc1hHNWNiaUFnSUNBZ0lDOHZJRkpsYkdGNEtGQnZjMmswS1Z4dUlDQWdJQ0FnTVRjd01Ub2dKL0NmbVlJbkxGeHVJQ0FnSUNBZ01UY3dNam9nSitLWWxlKzRqeWNzWEc0Z0lDQWdJQ0F4TnpBek9pQW44SitOdFNjc1hHNWNiaUFnSUNBZ0lDOHZJRlJwY21Wa0tGQnZjMmswS1Z4dUlDQWdJQ0FnTVRnd01Ub2dKL0NmbUpBbkxGeHVJQ0FnSUNBZ01UZ3dNam9nSi9DZm1LNG5MRnh1SUNBZ0lDQWdNVGd3TXpvZ0ovQ2ZtSzhuTEZ4dVhHNGdJQ0FnSUNBdkx5QlRiR0ZqYXloT1pXZGhOQ2xjYmlBZ0lDQWdJREl3TURFNklDZnduNWlGSnl4Y2JpQWdJQ0FnSURJd01ESTZJQ2Z3bjVLbUp5eGNiaUFnSUNBZ0lESXdNRE02SUNmd242VzZKeXhjYmlBZ0lDQWdJREl3TURRNklDZnduNWl5Snl4Y2JpQWdJQ0FnSURJd01EVTZJQ2Z3bjVtRUp5eGNibHh1SUNBZ0lDQWdMeThnUW05eWFXNW5LRTVsWjJFMEtWeHVJQ0FnSUNBZ01qRXdNVG9nSi9DZm1KSW5MRnh1SUNBZ0lDQWdNakV3TWpvZ0ovQ2ZtSkVuTEZ4dUlDQWdJQ0FnTWpFd016b2dKL0NmbUpVbkxGeHVYRzRnSUNBZ0lDQXZMeUJOWld4aGJtTm9iMng1S0U1bFoyRTBLVnh1SUNBZ0lDQWdNakl3TVRvZ0ovQ2ZtS2tuTEZ4dUlDQWdJQ0FnTWpJd01qb2dKL0NmbUo0bkxGeHVJQ0FnSUNBZ01qSXdNem9nSi9DZm1KUW5MRnh1SUNBZ0lDQWdNakl3TkRvZ0ovQ2ZtSjhuTEZ4dUlDQWdJQ0FnTWpJd05Ub2dKL0NmcEtJbkxGeHVYRzRnSUNBZ0lDQXZMeUJUWVdRb1RtVm5ZVE1wWEc0Z0lDQWdJQ0F5TXpBeE9pQW44SitZclNjc1hHNGdJQ0FnSUNBeU16QXlPaUFuOEorWXBTY3NYRzRnSUNBZ0lDQXlNekF6T2lBbjhKK1l2eWNzWEc1Y2JpQWdJQ0FnSUM4dklGVnVjR3hsWVhOaGJuUW9UbVZuWVRNcFhHNGdJQ0FnSUNBeU5EQXhPaUFuOEora2xTY3NYRzRnSUNBZ0lDQXlOREF5T2lBbjhKK2traWNzWEc0Z0lDQWdJQ0F5TkRBek9pQW44SitZdHljc1hHNGdJQ0FnSUNBeU5EQTBPaUFuOEora3B5Y3NYRzVjYmlBZ0lDQWdJQzh2SUdaeWRYTjBjbUYwWldRb1RtVm5ZVE1wWEc0Z0lDQWdJQ0F5TlRBeE9pQW44Situa0Njc1hHNGdJQ0FnSUNBeU5UQXlPaUFuOEora2xDY3NYRzRnSUNBZ0lDQXlOVEF6T2lBbjhKK2txQ2NzWEc1Y2JpQWdJQ0FnSUM4dklHUnBjM05oZEdselptbGxaQ2hPWldkaE1pbGNiaUFnSUNBZ0lESTJNREU2SUNmd241aWdKeXhjYmlBZ0lDQWdJREkyTURJNklDZnduNWkrSnl4Y2JseHVJQ0FnSUNBZ0x5OGdRVzVuWlhJb1RtVm5ZVElwWEc0Z0lDQWdJQ0F5TnpBeE9pQW44SitZb1Njc1hHNGdJQ0FnSUNBeU56QXlPaUFuOEora3JDY3NYRzRnSUNBZ0lDQXlOekF6T2lBbjhKK1NsQ2NzWEc0Z0lDQWdJQ0F5TnpBME9pQW44SitTb2ljc1hHNGdJQ0FnSUNBeU56QTFPaUFuOEorWXBDY3NYRzRnSUNBZ0lDQXlOekEyT2lBbjhKK1J2eWNzWEc1Y2JpQWdJQ0FnSUM4dklGZHZjbko1S0U1bFoyRXhLVnh1SUNBZ0lDQWdNamd3TVRvZ0ovQ2ZtS01uTEZ4dUlDQWdJQ0FnTWpnd01qb2dKL0NmbUtzbkxGeHVJQ0FnSUNBZ01qZ3dNem9nSi9DZm1KTW5MRnh1SUNBZ0lDQWdNamd3TkRvZ0ovQ2ZtSlluTEZ4dUlDQWdJQ0FnTWpnd05Ub2dKL0NmbUtnbkxGeHVJQ0FnSUNBZ01qZ3dOam9nSi9DZm1MQW5MRnh1WEc0Z0lDQWdJQ0F2THlCR1pXRnlLRTVsWjJFeEtWeHVJQ0FnSUNBZ01qa3dNVG9nSi9DZnBiWW5MRnh1SUNBZ0lDQWdNamt3TWpvZ0ovQ2ZwSzRuTEZ4dUlDQWdJQ0FnTWprd016b2dKL0NmcGJVbkxGeHVJQ0FnSUNBZ01qa3dORG9nSi9DZm1MRW5MRnh1SUNBZ0lDQWdNamt3TlRvZ0ovQ2ZtWUFuTEZ4dUlDQWdJQ0FnTWprd05qb2dKL0Nma29BbkxGeHVJQ0FnSUgwN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQkZiVzkwYVc5dWN5Qm1jbTl0SUNkamIyMXRiMjR2WlcxdmRHbHZibk12YVc1a1pYZ25PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlFiR0ZwYmlCN1hHNGdJSE4wWVhScFl5Qm5aWFFnVkZsUVJWTW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlGdEZiVzkwYVc5dWN5NVVXVkJGVXk1TVNVdEZYVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhSVFlYWmxRbUZzWVc1alpTaHpkR0Z0Y0Vsa0tTQjdYRzRnSUNBZ1kyOXVjM1FnWW1Gc1lXNWpaU0E5SUh0Y2JpQWdJQ0FnSURFNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NU1TVXRGTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQmlZV3hoYm1ObFczTjBZVzF3U1dSZElEOGdZbUZzWVc1alpWdHpkR0Z0Y0Vsa1hTQTZJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBVMk5vWlcxaGN5Z3BJSHRjYmlBZ0lDQnNaWFFnYzJOb1pXMWhjeUE5SUh0OU8xeHVJQ0FnSUZCc1lXbHVMbFJaVUVWVExtWnZja1ZoWTJnb0tHOWlhaXdnYVNrZ1BUNGdlMXh1SUNBZ0lDQWdjMk5vWlcxaGMxdHZZbW91VEVGQ1JVeGRJRDBnZXlCMGVYQmxPaUJPZFcxaVpYSXNJR1JsWm1GMWJIUTZJREFzSUcxcGJqb2dNQ0I5TzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQnpZMmhsYldGek8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdSVzF2ZEdsdmJuTWdabkp2YlNBblkyOXRiVzl1TDJWdGIzUnBiMjV6TDJsdVpHVjRKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVblZ6YzJWc2JDQjdYRzRnSUhOMFlYUnBZeUJuWlhRZ1ZGbFFSVk1vS1NCN1hHNGdJQ0FnY21WMGRYSnVJRnRjYmlBZ0lDQWdJRVZ0YjNScGIyNXpMbFJaVUVWVExsTlZVRkpKVTBVc1hHNGdJQ0FnSUNCRmJXOTBhVzl1Y3k1VVdWQkZVeTVGV0VOSlZFVXNYRzRnSUNBZ0lDQkZiVzkwYVc5dWN5NVVXVkJGVXk1SVFWQlFXU3hjYmlBZ0lDQWdJRVZ0YjNScGIyNXpMbFJaVUVWVExrcFBXU3hjYmlBZ0lDQWdJRVZ0YjNScGIyNXpMbFJaVUVWVExrZE1RVVFzWEc0Z0lDQWdJQ0JGYlc5MGFXOXVjeTVVV1ZCRlV5NVRRVlJKVTBaQlExUkpUMDRzWEc0Z0lDQWdJQ0JGYlc5MGFXOXVjeTVVV1ZCRlV5NURUMDFHVDFKVUxGeHVJQ0FnSUNBZ1JXMXZkR2x2Ym5NdVZGbFFSVk11VWtWTVFWZ3NYRzRnSUNBZ0lDQkZiVzkwYVc5dWN5NVVXVkJGVXk1VVNWSkZSQ3hjYmlBZ0lDQWdJRVZ0YjNScGIyNXpMbFJaVUVWVExsTk1SVVZRV1N4Y2JpQWdJQ0FnSUVWdGIzUnBiMjV6TGxSWlVFVlRMbE5NUVVOTExGeHVJQ0FnSUNBZ1JXMXZkR2x2Ym5NdVZGbFFSVk11UWs5U1NVNUhMRnh1SUNBZ0lDQWdSVzF2ZEdsdmJuTXVWRmxRUlZNdVRVVk1RVTVEU0U5TVdTeGNiaUFnSUNBZ0lFVnRiM1JwYjI1ekxsUlpVRVZUTGxOQlJDeGNiaUFnSUNBZ0lFVnRiM1JwYjI1ekxsUlpVRVZUTGxWT1VFeEZRVk5CVGxRc1hHNGdJQ0FnSUNCRmJXOTBhVzl1Y3k1VVdWQkZVeTVHVWxWVFZGSkJWRVZFTEZ4dUlDQWdJQ0FnUlcxdmRHbHZibk11VkZsUVJWTXVSRWxUVTBGVVNWTkdTVVZFTEZ4dUlDQWdJQ0FnUlcxdmRHbHZibk11VkZsUVJWTXVRVTVIUlZJc1hHNGdJQ0FnSUNCRmJXOTBhVzl1Y3k1VVdWQkZVeTVYVDFKU1dTeGNiaUFnSUNBZ0lFVnRiM1JwYjI1ekxsUlpVRVZUTGtaRlFWSXNYRzRnSUNBZ1hUdGNiaUFnZlZ4dVhHNGdJSFI1Y0dWelFYSnlZWGs2SUdGdWVUdGNiaUFnWTI5dWMzUnlkV04wYjNJb2RIbHdaU2tnZTF4dUlDQWdJSFJvYVhNdWRIbHdaWE5CY25KaGVTQTlJRnRkTzF4dUlDQWdJRTlpYW1WamRDNXJaWGx6S0ZKMWMzTmxiR3d1VkZsUVJWTXBMbVp2Y2tWaFkyZ29LR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxuUjVjR1Z6UVhKeVlYa3VjSFZ6YUNoU2RYTnpaV3hzTGxSWlVFVlRXMmx1WkdWNFhTNU1RVUpGVENrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBVMkYyWlVKaGJHRnVZMlVvYzNSaGJYQkpaQ2tnZTF4dUlDQWdJR052Ym5OMElHSmhiR0Z1WTJVZ1BTQjdYRzRnSUNBZ0lDQXZMeUJUZFhCeWFYTmxLRkJ2YzJreEtWeHVJQ0FnSUNBZ01UQXdNVG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGxOVlVGSkpVMFV1U1VSZE9pQXhJSDFkTEZ4dUlDQWdJQ0FnTVRBd01qb2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMbE5WVUZKSlUwVXVTVVJkT2lBeElIMWRMRnh1WEc0Z0lDQWdJQ0F2THlCRmVHTnBkR1VvVUc5emFURXBYRzRnSUNBZ0lDQXhNVEF4T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVJWaERTVlJGTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURFeE1ESTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVGV0VOSlZFVXVTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNVEV3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrVllRMGxVUlM1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJRWhoY0hCNUtGQnZjMmt5S1Z4dUlDQWdJQ0FnTVRJd01Ub2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa2hCVUZCWkxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lERXlNREk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1SVFWQlFXUzVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F4TWpBek9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVTRUZRVUZrdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01USXdORG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtoQlVGQlpMa2xFWFRvZ01TQjlYU3hjYmx4dUlDQWdJQ0FnTHk4Z1NtOTVLRkJ2YzJreUtWeHVJQ0FnSUNBZ01UTXdNVG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtwUFdTNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXhNekF5T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVNrOVpMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREV6TURNNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUtUMWt1U1VSZE9pQXhJSDFkTEZ4dUlDQWdJQ0FnTVRNd05Eb2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa3BQV1M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeE16QTFPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11U2s5WkxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lERXpNRFk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1S1Qxa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNVE13TnpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrcFBXUzVKUkYwNklERWdmVjBzWEc1Y2JpQWdJQ0FnSUM4dklFZHNZV1FvVUc5emFUTXBYRzRnSUNBZ0lDQXhOREF4T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVIweEJSQzVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F4TkRBeU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVSMHhCUkM1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJRk5oZEdselptRmpkR2x2YmloUWIzTnBNeWxjYmlBZ0lDQWdJREUxTURFNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NVRRVlJKVTBaQlExUkpUMDR1U1VSZE9pQXhJSDFkTEZ4dUlDQWdJQ0FnTVRVd01qb2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMbE5CVkVsVFJrRkRWRWxQVGk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeE5UQXpPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VTBGVVNWTkdRVU5VU1U5T0xrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lERTFNRFE2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1VFFWUkpVMFpCUTFSSlQwNHVTVVJkT2lBeElIMWRMRnh1WEc0Z0lDQWdJQ0F2THlCRGIyMW1iM0owS0ZCdmMyazBLVnh1SUNBZ0lDQWdNVFl3TVRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrTlBUVVpQVWxRdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01UWXdNam9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtOUFRVWlBVbFF1U1VSZE9pQXhJSDFkTEZ4dVhHNGdJQ0FnSUNBdkx5QlNaV3hoZUNoUWIzTnBOQ2xjYmlBZ0lDQWdJREUzTURFNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NVNSVXhCV0M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeE56QXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VWtWTVFWZ3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNVGN3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExsSkZURUZZTGtsRVhUb2dNU0I5WFN4Y2JseHVJQ0FnSUNBZ0x5OGdWR2x5WldRb1VHOXphVFFwWEc0Z0lDQWdJQ0F4T0RBeE9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWRWxTUlVRdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01UZ3dNam9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGxSSlVrVkVMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREU0TURNNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NVVTVkpGUkM1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJRk5zWVdOcktFNWxaMkUwS1Z4dUlDQWdJQ0FnTWpBd01Ub2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMbE5NUVVOTExrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lESXdNREk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1VFRFRkRTeTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5TURBek9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVVMHhCUTBzdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qQXdORG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGxOTVFVTkxMa2xFWFRvZ01TQjlYU3hjYmx4dUlDQWdJQ0FnTHk4Z1FtOXlhVzVuS0U1bFoyRTBLVnh1SUNBZ0lDQWdNakV3TVRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrSlBVa2xPUnk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU1UQXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UWs5U1NVNUhMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREl4TURNNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUNUMUpKVGtjdVNVUmRPaUF4SUgxZExGeHVYRzRnSUNBZ0lDQXZMeUJOWld4aGJtTm9iMng1S0U1bFoyRTBLVnh1SUNBZ0lDQWdNakl3TVRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrMUZURUZPUTBoUFRGa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNakl3TWpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrMUZURUZPUTBoUFRGa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNakl3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrMUZURUZPUTBoUFRGa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNakl3TkRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrMUZURUZPUTBoUFRGa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNakl3TlRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrMUZURUZPUTBoUFRGa3VTVVJkT2lBeElIMWRMRnh1WEc0Z0lDQWdJQ0F2THlCVFlXUW9UbVZuWVRNcFhHNGdJQ0FnSUNBeU16QXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VTBGRUxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lESXpNREk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1VFFVUXVTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNak13TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExsTkJSQzVKUkYwNklERWdmVjBzWEc1Y2JpQWdJQ0FnSUM4dklGVnVjR3hsWVhOaGJuUW9UbVZuWVRNcFhHNGdJQ0FnSUNBeU5EQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VlU1UVRFVkJVMEZPVkM1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU5EQXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VlU1UVRFVkJVMEZPVkM1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU5EQXpPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VlU1UVRFVkJVMEZPVkM1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU5EQTBPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VlU1UVRFVkJVMEZPVkM1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJR1p5ZFhOMGNtRjBaV1FvVG1WbllUTXBYRzRnSUNBZ0lDQXlOVEF4T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVJsSlZVMVJTUVZSRlJDNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOVEF5T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVJsSlZVMVJTUVZSRlJDNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOVEF6T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVJsSlZVMVJTUVZSRlJDNUpSRjA2SURFZ2ZWMHNYRzVjYmlBZ0lDQWdJQzh2SUdScGMzTmhkR2x6Wm1sbFpDaE9aV2RoTWlsY2JpQWdJQ0FnSURJMk1ERTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVFU1ZOVFFWUkpVMFpKUlVRdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qWXdNam9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtSSlUxTkJWRWxUUmtsRlJDNUpSRjA2SURFZ2ZWMHNYRzVjYmlBZ0lDQWdJQzh2SUVGdVoyVnlLRTVsWjJFeUtWeHVJQ0FnSUNBZ01qY3dNVG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtGT1IwVlNMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREkzTURJNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUJUa2RGVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU56QXpPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UVU1SFJWSXVTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNamN3TkRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrRk9SMFZTTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURJM01EVTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVCVGtkRlVpNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOekEyT2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVFVNUhSVkl1U1VSZE9pQXhJSDFkTEZ4dVhHNGdJQ0FnSUNBdkx5QlhiM0p5ZVNoT1pXZGhNU2xjYmlBZ0lDQWdJREk0TURFNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NVhUMUpTV1M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1Vsa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNamd3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExsZFBVbEpaTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURJNE1EUTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVYVDFKU1dTNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlPREExT2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVYwOVNVbGt1U1VSZE9pQXhJSDFkTEZ4dUlDQWdJQ0FnTWpnd05qb2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMbGRQVWxKWkxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lESTRNRGM2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1WFQxSlNXUzVKUkYwNklERWdmVjBzWEc1Y2JpQWdJQ0FnSUM4dklFWmxZWElvVG1WbllURXBYRzRnSUNBZ0lDQXlPVEF4T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBeU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9UQXpPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UmtWQlVpNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlPVEEwT2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBMU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9UQTJPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UmtWQlVpNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lISmxkSFZ5YmlCaVlXeGhibU5sVzNOMFlXMXdTV1JkSUQ4Z1ltRnNZVzVqWlZ0emRHRnRjRWxrWFNBNklHNTFiR3c3WEc0Z0lIMWNibHh1SUNCemRHRjBhV01nWjJWMFUyTm9aVzFoY3lncElIdGNiaUFnSUNCc1pYUWdjMk5vWlcxaGN5QTlJSHQ5TzF4dUlDQWdJRkoxYzNObGJHd3VWRmxRUlZNdVptOXlSV0ZqYUNnb2IySnFMQ0JwS1NBOVBpQjdYRzRnSUNBZ0lDQnpZMmhsYldGelcyOWlhaTVNUVVKRlRGMGdQU0I3SUhSNWNHVTZJRTUxYldKbGNpd2daR1ZtWVhWc2REb2dNQ3dnYldsdU9pQXdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdjbVYwZFhKdUlITmphR1Z0WVhNN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQkZiVzkwYVc5dWN5Qm1jbTl0SUNkamIyMXRiMjR2WlcxdmRHbHZibk12YVc1a1pYZ25PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlNkWE56Wld4c1UybHRjR3hsSUh0Y2JpQWdjM1JoZEdsaklHZGxkQ0JVV1ZCRlV5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z1cxeHVJQ0FnSUNBZ1JXMXZkR2x2Ym5NdVZGbFFSVk11UlZoRFNWUkZMRnh1SUNBZ0lDQWdSVzF2ZEdsdmJuTXVWRmxRUlZNdVNFRlFVRmtzWEc0Z0lDQWdJQ0JGYlc5MGFXOXVjeTVVV1ZCRlV5NUtUMWtzWEc0Z0lDQWdJQ0JGYlc5MGFXOXVjeTVVV1ZCRlV5NVNSVXhCV0N4Y2JpQWdJQ0FnSUVWdGIzUnBiMjV6TGxSWlVFVlRMbE5NUVVOTExGeHVJQ0FnSUNBZ1JXMXZkR2x2Ym5NdVZGbFFSVk11VFVWTVFVNURTRTlNV1N4Y2JpQWdJQ0FnSUVWdGIzUnBiMjV6TGxSWlVFVlRMa0ZPUjBWU0xGeHVJQ0FnSUNBZ1JXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWl4Y2JpQWdJQ0JkTzF4dUlDQjlYRzVjYmlBZ2RIbHdaWE5CY25KaGVUb2dZVzU1TzF4dUlDQmpiMjV6ZEhKMVkzUnZjaWgwZVhCbEtTQjdYRzRnSUNBZ2RHaHBjeTUwZVhCbGMwRnljbUY1SUQwZ1cxMDdYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9VblZ6YzJWc2JGTnBiWEJzWlM1VVdWQkZVeWt1Wm05eVJXRmphQ2dvYVc1a1pYZ3BJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkSGx3WlhOQmNuSmhlUzV3ZFhOb0tGSjFjM05sYkd4VGFXMXdiR1V1VkZsUVJWTmJhVzVrWlhoZExreEJRa1ZNS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCblpYUlRZWFpsUW1Gc1lXNWpaU2h6ZEdGdGNFbGtLU0I3WEc0Z0lDQWdZMjl1YzNRZ1ltRnNZVzVqWlNBOUlIdGNiaUFnSUNBZ0lDOHZJRk4xY0hKcGMyVW9VRzl6YVRFcFhHNGdJQ0FnSUNBeE1EQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UlZoRFNWUkZMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREV3TURJNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUZXRU5KVkVVdVNVUmRPaUF4SUgxZExGeHVYRzRnSUNBZ0lDQXZMeUJGZUdOcGRHVW9VRzl6YVRFcFhHNGdJQ0FnSUNBeE1UQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UlZoRFNWUkZMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREV4TURJNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUZXRU5KVkVVdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01URXdNem9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtWWVEwbFVSUzVKUkYwNklERWdmVjBzWEc1Y2JpQWdJQ0FnSUM4dklFaGhjSEI1S0ZCdmMya3lLVnh1SUNBZ0lDQWdNVEl3TVRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExraEJVRkJaTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURFeU1ESTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVJUVZCUVdTNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXhNakF6T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVNFRlFVRmt1U1VSZE9pQXhJSDFkTEZ4dUlDQWdJQ0FnTVRJd05Eb2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa2hCVUZCWkxrbEVYVG9nTVNCOVhTeGNibHh1SUNBZ0lDQWdMeThnU205NUtGQnZjMmt5S1Z4dUlDQWdJQ0FnTVRNd01Ub2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa3BQV1M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeE16QXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11U2s5WkxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lERXpNRE02SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1S1Qxa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNVE13TkRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrcFBXUzVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F4TXpBMU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVTazlaTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURFek1EWTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVLVDFrdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01UTXdOem9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGtwUFdTNUpSRjA2SURFZ2ZWMHNYRzVjYmlBZ0lDQWdJQzh2SUVkc1lXUW9VRzl6YVRNcFhHNGdJQ0FnSUNBeE5EQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11U2s5WkxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lERTBNREk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1S1Qxa3VTVVJkT2lBeElIMWRMRnh1WEc0Z0lDQWdJQ0F2THlCVFlYUnBjMlpoWTNScGIyNG9VRzl6YVRNcFhHNGdJQ0FnSUNBeE5UQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11U2s5WkxrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lERTFNREk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1S1Qxa3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNVFV3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrcFBXUzVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F4TlRBME9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVTazlaTGtsRVhUb2dNU0I5WFN4Y2JseHVJQ0FnSUNBZ0x5OGdRMjl0Wm05eWRDaFFiM05wTkNsY2JpQWdJQ0FnSURFMk1ERTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVTUlV4QldDNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXhOakF5T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVVrVk1RVmd1U1VSZE9pQXhJSDFkTEZ4dVhHNGdJQ0FnSUNBdkx5QlNaV3hoZUNoUWIzTnBOQ2xjYmlBZ0lDQWdJREUzTURFNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NVNSVXhCV0M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeE56QXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VWtWTVFWZ3VTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNVGN3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExsSkZURUZZTGtsRVhUb2dNU0I5WFN4Y2JseHVJQ0FnSUNBZ0x5OGdWR2x5WldRb1VHOXphVFFwWEc0Z0lDQWdJQ0F4T0RBeE9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWRWxTUlVRdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01UZ3dNam9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGxSSlVrVkVMa2xFWFRvZ01TQjlYU3hjYmlBZ0lDQWdJREU0TURNNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NVVTVkpGUkM1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJRk5zWVdOcktFNWxaMkUwS1Z4dUlDQWdJQ0FnTWpBd01Ub2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMbE5NUVVOTExrbEVYVG9nTVNCOVhTeGNiaUFnSUNBZ0lESXdNREk2SUZ0N0lGdEZiVzkwYVc5dWN5NVVXVkJGVXk1VFRFRkRTeTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5TURBek9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVVMHhCUTBzdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qQXdORG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGxOTVFVTkxMa2xFWFRvZ01TQjlYU3hjYmx4dUlDQWdJQ0FnTHk4Z1FtOXlhVzVuS0U1bFoyRTBLVnh1SUNBZ0lDQWdNakV3TVRvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExsTk1RVU5MTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURJeE1ESTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVUVEVGRFN5NUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlNVEF6T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVUweEJRMHN1U1VSZE9pQXhJSDFkTEZ4dVhHNGdJQ0FnSUNBdkx5Qk5aV3hoYm1Ob2IyeDVLRTVsWjJFMEtWeHVJQ0FnSUNBZ01qSXdNVG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGsxRlRFRk9RMGhQVEZrdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qSXdNam9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGsxRlRFRk9RMGhQVEZrdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qSXdNem9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGsxRlRFRk9RMGhQVEZrdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qSXdORG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGsxRlRFRk9RMGhQVEZrdVNVUmRPaUF4SUgxZExGeHVJQ0FnSUNBZ01qSXdOVG9nVzNzZ1cwVnRiM1JwYjI1ekxsUlpVRVZUTGsxRlRFRk9RMGhQVEZrdVNVUmRPaUF4SUgxZExGeHVYRzRnSUNBZ0lDQXZMeUJUWVdRb1RtVm5ZVE1wWEc0Z0lDQWdJQ0F5TXpBeE9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVUVVZNUVU1RFNFOU1XUzVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5TXpBeU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVUVVZNUVU1RFNFOU1XUzVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5TXpBek9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVUVVZNUVU1RFNFOU1XUzVKUkYwNklERWdmVjBzWEc1Y2JpQWdJQ0FnSUM4dklGVnVjR3hsWVhOaGJuUW9UbVZuWVRNcFhHNGdJQ0FnSUNBeU5EQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VFVWTVFVNURTRTlNV1M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU5EQXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VFVWTVFVNURTRTlNV1M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU5EQXpPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VFVWTVFVNURTRTlNV1M1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU5EQTBPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VFVWTVFVNURTRTlNV1M1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJR1p5ZFhOMGNtRjBaV1FvVG1WbllUTXBYRzRnSUNBZ0lDQXlOVEF4T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVRVVk1RVTVEU0U5TVdTNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOVEF5T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVRVVk1RVTVEU0U5TVdTNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOVEF6T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVRVVk1RVTVEU0U5TVdTNUpSRjA2SURFZ2ZWMHNYRzVjYmlBZ0lDQWdJQzh2SUdScGMzTmhkR2x6Wm1sbFpDaE9aV2RoTWlsY2JpQWdJQ0FnSURJMk1ERTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVCVGtkRlVpNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOakF5T2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVFVNUhSVkl1U1VSZE9pQXhJSDFkTEZ4dVhHNGdJQ0FnSUNBdkx5QkJibWRsY2loT1pXZGhNaWxjYmlBZ0lDQWdJREkzTURFNklGdDdJRnRGYlc5MGFXOXVjeTVVV1ZCRlV5NUJUa2RGVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU56QXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11UVU1SFJWSXVTVVJkT2lBeElIMWRMRnh1SUNBZ0lDQWdNamN3TXpvZ1czc2dXMFZ0YjNScGIyNXpMbFJaVUVWVExrRk9SMFZTTGtsRVhUb2dNU0I5WFN4Y2JpQWdJQ0FnSURJM01EUTZJRnQ3SUZ0RmJXOTBhVzl1Y3k1VVdWQkZVeTVCVGtkRlVpNUpSRjA2SURFZ2ZWMHNYRzRnSUNBZ0lDQXlOekExT2lCYmV5QmJSVzF2ZEdsdmJuTXVWRmxRUlZNdVFVNUhSVkl1U1VSZE9pQXhJSDFkTEZ4dUlDQWdJQ0FnTWpjd05qb2dXM3NnVzBWdGIzUnBiMjV6TGxSWlVFVlRMa0ZPUjBWU0xrbEVYVG9nTVNCOVhTeGNibHh1SUNBZ0lDQWdMeThnVjI5eWNua29UbVZuWVRFcFhHNGdJQ0FnSUNBeU9EQXhPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQXlPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQXpPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQTBPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQTFPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQTJPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNGdJQ0FnSUNBeU9EQTNPaUJiZXlCYlJXMXZkR2x2Ym5NdVZGbFFSVk11VjA5U1VsbGZSa1ZCVWk1SlJGMDZJREVnZlYwc1hHNWNiaUFnSUNBZ0lDOHZJRVpsWVhJb1RtVm5ZVEVwWEc0Z0lDQWdJQ0F5T1RBeE9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWMDlTVWxsZlJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBeU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWMDlTVWxsZlJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBek9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWMDlTVWxsZlJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBME9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWMDlTVWxsZlJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBMU9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWMDlTVWxsZlJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdJQ0F5T1RBMk9pQmJleUJiUlcxdmRHbHZibk11VkZsUVJWTXVWMDlTVWxsZlJrVkJVaTVKUkYwNklERWdmVjBzWEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1ltRnNZVzVqWlZ0emRHRnRjRWxrWFNBL0lHSmhiR0Z1WTJWYmMzUmhiWEJKWkYwZ09pQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRGTmphR1Z0WVhNb0tTQjdYRzRnSUNBZ2JHVjBJSE5qYUdWdFlYTWdQU0I3ZlR0Y2JpQWdJQ0JTZFhOelpXeHNVMmx0Y0d4bExsUlpVRVZUTG1admNrVmhZMmdvS0c5aWFpd2dhU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2MyTm9aVzFoYzF0dlltb3VURUZDUlV4ZElEMGdleUIwZVhCbE9pQk9kVzFpWlhJc0lHUmxabUYxYkhRNklEQXNJRzFwYmpvZ01DQjlPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCelkyaGxiV0Z6TzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1VHeGhhVzRnWm5KdmJTQW5MaTlRYkdGcGJpYzdYRzVwYlhCdmNuUWdVblZ6YzJWc2JDQm1jbTl0SUNjdUwxSjFjM05sYkd3bk8xeHVhVzF3YjNKMElGSjFjM05sYkd4VGFXMXdiR1VnWm5KdmJTQW5MaTlTZFhOelpXeHNVMmx0Y0d4bEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCUWJHRnBiaXhjYmlBZ1VuVnpjMlZzYkN4Y2JpQWdVblZ6YzJWc2JGTnBiWEJzWlN4Y2JuMDdYRzRpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSjI5ekp5bGNiaUlzSWk4dklITm9hVzBnWm05eUlIVnphVzVuSUhCeWIyTmxjM01nYVc0Z1luSnZkM05sY2x4dWRtRnlJSEJ5YjJObGMzTWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQ5TzF4dVhHNHZMeUJqWVdOb1pXUWdabkp2YlNCM2FHRjBaWFpsY2lCbmJHOWlZV3dnYVhNZ2NISmxjMlZ1ZENCemJ5QjBhR0YwSUhSbGMzUWdjblZ1Ym1WeWN5QjBhR0YwSUhOMGRXSWdhWFJjYmk4dklHUnZiaWQwSUdKeVpXRnJJSFJvYVc1bmN5NGdJRUoxZENCM1pTQnVaV1ZrSUhSdklIZHlZWEFnYVhRZ2FXNGdZU0IwY25rZ1kyRjBZMmdnYVc0Z1kyRnpaU0JwZENCcGMxeHVMeThnZDNKaGNIQmxaQ0JwYmlCemRISnBZM1FnYlc5a1pTQmpiMlJsSUhkb2FXTm9JR1J2WlhOdUozUWdaR1ZtYVc1bElHRnVlU0JuYkc5aVlXeHpMaUFnU1hRbmN5QnBibk5wWkdVZ1lWeHVMeThnWm5WdVkzUnBiMjRnWW1WallYVnpaU0IwY25rdlkyRjBZMmhsY3lCa1pXOXdkR2x0YVhwbElHbHVJR05sY25SaGFXNGdaVzVuYVc1bGN5NWNibHh1ZG1GeUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRN1hHNTJZWElnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTzF4dVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFUyVjBWR2x0YjNWMEtDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmMyVjBWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVablZ1WTNScGIyNGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0FvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqYkdWaGNsUnBiV1Z2ZFhRZ2FHRnpJRzV2ZENCaVpXVnVJR1JsWm1sdVpXUW5LVHRjYm4xY2JpaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpaWFJVYVcxbGIzVjBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWREdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ2ZWeHVmU0FvS1NsY2JtWjFibU4wYVc5dUlISjFibFJwYldWdmRYUW9ablZ1S1NCN1hHNGdJQ0FnYVdZZ0tHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BUMDlJSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXViM0p0WVd3Z1pXNTJhWEp2YldWdWRITWdhVzRnYzJGdVpTQnphWFIxWVhScGIyNXpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHbG1JSE5sZEZScGJXVnZkWFFnZDJGemJpZDBJR0YyWVdsc1lXSnNaU0JpZFhRZ2QyRnpJR3hoZEhSbGNpQmtaV1pwYm1Wa1hHNGdJQ0FnYVdZZ0tDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBJSHg4SUNGallXTm9aV1JUWlhSVWFXMWxiM1YwS1NBbUppQnpaWFJVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzRzSURBcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzYUdWdUlIZG9aVzRnYzI5dFpXSnZaSGtnYUdGeklITmpjbVYzWldRZ2QybDBhQ0J6WlhSVWFXMWxiM1YwSUdKMWRDQnVieUJKTGtVdUlHMWhaR1J1WlhOelhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnZDJVZ1lYSmxJR2x1SUVrdVJTNGdZblYwSUhSb1pTQnpZM0pwY0hRZ2FHRnpJR0psWlc0Z1pYWmhiR1ZrSUhOdklFa3VSUzRnWkc5bGMyNG5kQ0IwY25WemRDQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQjNhR1Z1SUdOaGJHeGxaQ0J1YjNKdFlXeHNlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCbWRXNHNJREFwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29kR2hwY3l3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVYRzU5WEc1bWRXNWpkR2x2YmlCeWRXNURiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLU0I3WEc0Z0lDQWdhV1lnS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdZMnhsWVhKVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2xtSUdOc1pXRnlWR2x0Wlc5MWRDQjNZWE51SjNRZ1lYWmhhV3hoWW14bElHSjFkQ0IzWVhNZ2JHRjBkR1Z5SUdSbFptbHVaV1JjYmlBZ0lDQnBaaUFvS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0I4ZkNBaFkyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMEtTQW1KaUJqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQjNaU0JoY21VZ2FXNGdTUzVGTGlCaWRYUWdkR2hsSUhOamNtbHdkQ0JvWVhNZ1ltVmxiaUJsZG1Gc1pXUWdjMjhnU1M1RkxpQmtiMlZ6YmlkMElDQjBjblZ6ZENCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCM2FHVnVJR05oYkd4bFpDQnViM0p0WVd4c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUcxaGNtdGxjaWs3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0l1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYjIxbElIWmxjbk5wYjI1eklHOW1JRWt1UlM0Z2FHRjJaU0JrYVdabVpYSmxiblFnY25Wc1pYTWdabTl5SUdOc1pXRnlWR2x0Wlc5MWRDQjJjeUJ6WlhSVWFXMWxiM1YwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMExtTmhiR3dvZEdocGN5d2diV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1WEc1Y2JuMWNiblpoY2lCeGRXVjFaU0E5SUZ0ZE8xeHVkbUZ5SUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc1MllYSWdZM1Z5Y21WdWRGRjFaWFZsTzF4dWRtRnlJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNibHh1Wm5WdVkzUnBiMjRnWTJ4bFlXNVZjRTVsZUhSVWFXTnJLQ2tnZTF4dUlDQWdJR2xtSUNnaFpISmhhVzVwYm1jZ2ZId2dJV04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXWWdLR04xY25KbGJuUlJkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1VnUFNCamRYSnlaVzUwVVhWbGRXVXVZMjl1WTJGMEtIRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ1pISmhhVzVSZFdWMVpTZ3BPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pISmhhVzVSZFdWMVpTZ3BJSHRjYmlBZ0lDQnBaaUFvWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUhKMWJsUnBiV1Z2ZFhRb1kyeGxZVzVWY0U1bGVIUlVhV05yS1R0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUhSeWRXVTdYRzVjYmlBZ0lDQjJZWElnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bEtHeGxiaWtnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J4ZFdWMVpUdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ3NyY1hWbGRXVkpibVJsZUNBOElHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlZ0eGRXVjFaVWx1WkdWNFhTNXlkVzRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdZM1Z5Y21WdWRGRjFaWFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUhKMWJrTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGIzVjBLVHRjYm4xY2JseHVjSEp2WTJWemN5NXVaWGgwVkdsamF5QTlJR1oxYm1OMGFXOXVJQ2htZFc0cElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpXMmtnTFNBeFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J4ZFdWMVpTNXdkWE5vS0c1bGR5QkpkR1Z0S0daMWJpd2dZWEpuY3lrcE8xeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dnUFQwOUlERWdKaVlnSVdSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISjFibFJwYldWdmRYUW9aSEpoYVc1UmRXVjFaU2s3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThnZGpnZ2JHbHJaWE1nY0hKbFpHbGpkR2xpYkdVZ2IySnFaV04wYzF4dVpuVnVZM1JwYjI0Z1NYUmxiU2htZFc0c0lHRnljbUY1S1NCN1hHNGdJQ0FnZEdocGN5NW1kVzRnUFNCbWRXNDdYRzRnSUNBZ2RHaHBjeTVoY25KaGVTQTlJR0Z5Y21GNU8xeHVmVnh1U1hSbGJTNXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11Wm5WdUxtRndjR3g1S0c1MWJHd3NJSFJvYVhNdVlYSnlZWGtwTzF4dWZUdGNibkJ5YjJObGMzTXVkR2wwYkdVZ1BTQW5Zbkp2ZDNObGNpYzdYRzV3Y205alpYTnpMbUp5YjNkelpYSWdQU0IwY25WbE8xeHVjSEp2WTJWemN5NWxibllnUFNCN2ZUdGNibkJ5YjJObGMzTXVZWEpuZGlBOUlGdGRPMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVJRDBnSnljN0lDOHZJR1Z0Y0hSNUlITjBjbWx1WnlCMGJ5QmhkbTlwWkNCeVpXZGxlSEFnYVhOemRXVnpYRzV3Y205alpYTnpMblpsY25OcGIyNXpJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJRzV2YjNBb0tTQjdmVnh1WEc1d2NtOWpaWE56TG05dUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVlXUmtUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZibU5sSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjJabUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1nUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVsYldsMElEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNISmxjR1Z1WkV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y0hKbGNHVnVaRTl1WTJWTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1Y2JuQnliMk5sYzNNdWJHbHpkR1Z1WlhKeklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIc2djbVYwZFhKdUlGdGRJSDFjYmx4dWNISnZZMlZ6Y3k1aWFXNWthVzVuSUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0J5YjJObGMzTXVZbWx1WkdsdVp5QnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0p5azdYRzU5TzF4dVhHNXdjbTlqWlhOekxtTjNaQ0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlDY3ZKeUI5TzF4dWNISnZZMlZ6Y3k1amFHUnBjaUE5SUdaMWJtTjBhVzl1SUNoa2FYSXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnliMk5sYzNNdVkyaGthWElnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ2NwTzF4dWZUdGNibkJ5YjJObGMzTXVkVzFoYzJzZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJREE3SUgwN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiaThxS2x4dUlDb2dTVzVwZEdsaGJHbDZaU0JpWVdOcmIyWm1JSFJwYldWeUlIZHBkR2dnWUc5d2RITmdMbHh1SUNwY2JpQXFJQzBnWUcxcGJtQWdhVzVwZEdsaGJDQjBhVzFsYjNWMElHbHVJRzFwYkd4cGMyVmpiMjVrY3lCYk1UQXdYVnh1SUNvZ0xTQmdiV0Y0WUNCdFlYZ2dkR2x0Wlc5MWRDQmJNVEF3TURCZFhHNGdLaUF0SUdCcWFYUjBaWEpnSUZzd1hWeHVJQ29nTFNCZ1ptRmpkRzl5WUNCYk1sMWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBjMXh1SUNvZ1FHRndhU0J3ZFdKc2FXTmNiaUFxTDF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NUNZV05yYjJabUlEMGdkbTlwWkNBd08xeHVablZ1WTNScGIyNGdRbUZqYTI5bVppaHZjSFJ6S1NCN1hHNGdJQ0FnYjNCMGN5QTlJRzl3ZEhNZ2ZId2dlMzA3WEc0Z0lDQWdkR2hwY3k1dGN5QTlJRzl3ZEhNdWJXbHVJSHg4SURFd01EdGNiaUFnSUNCMGFHbHpMbTFoZUNBOUlHOXdkSE11YldGNElIeDhJREV3TURBd08xeHVJQ0FnSUhSb2FYTXVabUZqZEc5eUlEMGdiM0IwY3k1bVlXTjBiM0lnZkh3Z01qdGNiaUFnSUNCMGFHbHpMbXBwZEhSbGNpQTlJRzl3ZEhNdWFtbDBkR1Z5SUQ0Z01DQW1KaUJ2Y0hSekxtcHBkSFJsY2lBOFBTQXhJRDhnYjNCMGN5NXFhWFIwWlhJZ09pQXdPMXh1SUNBZ0lIUm9hWE11WVhSMFpXMXdkSE1nUFNBd08xeHVmVnh1Wlhod2IzSjBjeTVDWVdOcmIyWm1JRDBnUW1GamEyOW1aanRjYmk4cUtseHVJQ29nVW1WMGRYSnVJSFJvWlNCaVlXTnJiMlptSUdSMWNtRjBhVzl1TGx4dUlDcGNiaUFxSUVCeVpYUjFjbTRnZTA1MWJXSmxjbjFjYmlBcUlFQmhjR2tnY0hWaWJHbGpYRzRnS2k5Y2JrSmhZMnR2Wm1ZdWNISnZkRzkwZVhCbExtUjFjbUYwYVc5dUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCdGN5QTlJSFJvYVhNdWJYTWdLaUJOWVhSb0xuQnZkeWgwYUdsekxtWmhZM1J2Y2l3Z2RHaHBjeTVoZEhSbGJYQjBjeXNyS1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVxYVhSMFpYSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmhibVFnUFNCTllYUm9MbkpoYm1SdmJTZ3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHVjJhV0YwYVc5dUlEMGdUV0YwYUM1bWJHOXZjaWh5WVc1a0lDb2dkR2hwY3k1cWFYUjBaWElnS2lCdGN5azdYRzRnSUNBZ0lDQWdJRzF6SUQwZ0tFMWhkR2d1Wm14dmIzSW9jbUZ1WkNBcUlERXdLU0FtSURFcElEMDlJREFnUHlCdGN5QXRJR1JsZG1saGRHbHZiaUE2SUcxeklDc2daR1YyYVdGMGFXOXVPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNXRhVzRvYlhNc0lIUm9hWE11YldGNEtTQjhJREE3WEc1OU8xeHVMeW9xWEc0Z0tpQlNaWE5sZENCMGFHVWdiblZ0WW1WeUlHOW1JR0YwZEdWdGNIUnpMbHh1SUNwY2JpQXFJRUJoY0drZ2NIVmliR2xqWEc0Z0tpOWNia0poWTJ0dlptWXVjSEp2ZEc5MGVYQmxMbkpsYzJWMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJvYVhNdVlYUjBaVzF3ZEhNZ1BTQXdPMXh1ZlR0Y2JpOHFLbHh1SUNvZ1UyVjBJSFJvWlNCdGFXNXBiWFZ0SUdSMWNtRjBhVzl1WEc0Z0tseHVJQ29nUUdGd2FTQndkV0pzYVdOY2JpQXFMMXh1UW1GamEyOW1aaTV3Y205MGIzUjVjR1V1YzJWMFRXbHVJRDBnWm5WdVkzUnBiMjRnS0cxcGJpa2dlMXh1SUNBZ0lIUm9hWE11YlhNZ1BTQnRhVzQ3WEc1OU8xeHVMeW9xWEc0Z0tpQlRaWFFnZEdobElHMWhlR2x0ZFcwZ1pIVnlZWFJwYjI1Y2JpQXFYRzRnS2lCQVlYQnBJSEIxWW14cFkxeHVJQ292WEc1Q1lXTnJiMlptTG5CeWIzUnZkSGx3WlM1elpYUk5ZWGdnUFNCbWRXNWpkR2x2YmlBb2JXRjRLU0I3WEc0Z0lDQWdkR2hwY3k1dFlYZ2dQU0J0WVhnN1hHNTlPMXh1THlvcVhHNGdLaUJUWlhRZ2RHaGxJR3BwZEhSbGNseHVJQ3BjYmlBcUlFQmhjR2tnY0hWaWJHbGpYRzRnS2k5Y2JrSmhZMnR2Wm1ZdWNISnZkRzkwZVhCbExuTmxkRXBwZEhSbGNpQTlJR1oxYm1OMGFXOXVJQ2hxYVhSMFpYSXBJSHRjYmlBZ0lDQjBhR2x6TG1wcGRIUmxjaUE5SUdwcGRIUmxjanRjYm4wN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiblpoY2lCZlgybHRjRzl5ZEVSbFptRjFiSFFnUFNBb2RHaHBjeUFtSmlCMGFHbHpMbDlmYVcxd2IzSjBSR1ZtWVhWc2RDa2dmSHdnWm5WdVkzUnBiMjRnS0cxdlpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb2JXOWtJQ1ltSUcxdlpDNWZYMlZ6VFc5a2RXeGxLU0EvSUcxdlpDQTZJSHNnWENKa1pXWmhkV3gwWENJNklHMXZaQ0I5TzF4dWZUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUdWNGNHOXlkSE11WTI5dWJtVmpkQ0E5SUdWNGNHOXlkSE11YVc4Z1BTQmxlSEJ2Y25SekxsTnZZMnRsZENBOUlHVjRjRzl5ZEhNdVRXRnVZV2RsY2lBOUlHVjRjRzl5ZEhNdWNISnZkRzlqYjJ3Z1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCMWNteGZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMM1Z5YkM1cWMxd2lLVHRjYm1OdmJuTjBJRzFoYm1GblpYSmZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMjFoYm1GblpYSXVhbk5jSWlrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKTllXNWhaMlZ5WENJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQnRZVzVoWjJWeVgycHpYekV1VFdGdVlXZGxjanNnZlNCOUtUdGNibU52Ym5OMElITnZZMnRsZEY5cWMxOHhJRDBnY21WeGRXbHlaU2hjSWk0dmMyOWphMlYwTG1welhDSXBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lVMjlqYTJWMFhDSXNJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUJ6YjJOclpYUmZhbk5mTVM1VGIyTnJaWFE3SUgwZ2ZTazdYRzVqYjI1emRDQmtaV0oxWjE4eElEMGdYMTlwYlhCdmNuUkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSmtaV0oxWjF3aUtTazdJQzh2SUdSbFluVm5LQ2xjYm1OdmJuTjBJR1JsWW5WbklEMGdaR1ZpZFdkZk1TNWtaV1poZFd4MEtGd2ljMjlqYTJWMExtbHZMV05zYVdWdWRGd2lLVHNnTHk4Z1pHVmlkV2NvS1Z4dUx5b3FYRzRnS2lCTllXNWhaMlZ5Y3lCallXTm9aUzVjYmlBcUwxeHVZMjl1YzNRZ1kyRmphR1VnUFNCN2ZUdGNibVoxYm1OMGFXOXVJR3h2YjJ0MWNDaDFjbWtzSUc5d2RITXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFZ5YVNBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnZTF4dUlDQWdJQ0FnSUNCdmNIUnpJRDBnZFhKcE8xeHVJQ0FnSUNBZ0lDQjFjbWtnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dUlDQWdJRzl3ZEhNZ1BTQnZjSFJ6SUh4OElIdDlPMXh1SUNBZ0lHTnZibk4wSUhCaGNuTmxaQ0E5SUhWeWJGOXFjMTh4TG5WeWJDaDFjbWtzSUc5d2RITXVjR0YwYUNCOGZDQmNJaTl6YjJOclpYUXVhVzljSWlrN1hHNGdJQ0FnWTI5dWMzUWdjMjkxY21ObElEMGdjR0Z5YzJWa0xuTnZkWEpqWlR0Y2JpQWdJQ0JqYjI1emRDQnBaQ0E5SUhCaGNuTmxaQzVwWkR0Y2JpQWdJQ0JqYjI1emRDQndZWFJvSUQwZ2NHRnljMlZrTG5CaGRHZzdYRzRnSUNBZ1kyOXVjM1FnYzJGdFpVNWhiV1Z6Y0dGalpTQTlJR05oWTJobFcybGtYU0FtSmlCd1lYUm9JR2x1SUdOaFkyaGxXMmxrWFZ0Y0ltNXpjSE5jSWwwN1hHNGdJQ0FnWTI5dWMzUWdibVYzUTI5dWJtVmpkR2x2YmlBOUlHOXdkSE11Wm05eVkyVk9aWGNnZkh4Y2JpQWdJQ0FnSUNBZ2IzQjBjMXRjSW1admNtTmxJRzVsZHlCamIyNXVaV04wYVc5dVhDSmRJSHg4WEc0Z0lDQWdJQ0FnSUdaaGJITmxJRDA5UFNCdmNIUnpMbTExYkhScGNHeGxlQ0I4ZkZ4dUlDQWdJQ0FnSUNCellXMWxUbUZ0WlhOd1lXTmxPMXh1SUNBZ0lHeGxkQ0JwYnp0Y2JpQWdJQ0JwWmlBb2JtVjNRMjl1Ym1WamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCa1pXSjFaeWhjSW1sbmJtOXlhVzVuSUhOdlkydGxkQ0JqWVdOb1pTQm1iM0lnSlhOY0lpd2djMjkxY21ObEtUdGNiaUFnSUNBZ0lDQWdhVzhnUFNCdVpYY2diV0Z1WVdkbGNsOXFjMTh4TGsxaGJtRm5aWElvYzI5MWNtTmxMQ0J2Y0hSektUdGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFkyRmphR1ZiYVdSZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXSjFaeWhjSW01bGR5QnBieUJwYm5OMFlXNWpaU0JtYjNJZ0pYTmNJaXdnYzI5MWNtTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsVzJsa1hTQTlJRzVsZHlCdFlXNWhaMlZ5WDJwelh6RXVUV0Z1WVdkbGNpaHpiM1Z5WTJVc0lHOXdkSE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbHZJRDBnWTJGamFHVmJhV1JkTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvY0dGeWMyVmtMbkYxWlhKNUlDWW1JQ0Z2Y0hSekxuRjFaWEo1S1NCN1hHNGdJQ0FnSUNBZ0lHOXdkSE11Y1hWbGNua2dQU0J3WVhKelpXUXVjWFZsY25sTFpYazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJwYnk1emIyTnJaWFFvY0dGeWMyVmtMbkJoZEdnc0lHOXdkSE1wTzF4dWZWeHVaWGh3YjNKMGN5NXBieUE5SUd4dmIydDFjRHRjYm1WNGNHOXlkSE11WTI5dWJtVmpkQ0E5SUd4dmIydDFjRHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUd4dmIydDFjRHRjYmk4dklITnZJSFJvWVhRZ1hDSnNiMjlyZFhCY0lpQmpZVzRnWW1VZ2RYTmxaQ0JpYjNSb0lHRnpJR0VnWm5WdVkzUnBiMjRnS0dVdVp5NGdZR2x2S0M0dUxpbGdLU0JoYm1RZ1lYTWdZVnh1THk4Z2JtRnRaWE53WVdObElDaGxMbWN1SUdCcGJ5NWpiMjV1WldOMEtDNHVMaWxnS1N3Z1ptOXlJR0poWTJ0M1lYSmtJR052YlhCaGRHbGlhV3hwZEhsY2JrOWlhbVZqZEM1aGMzTnBaMjRvYkc5dmEzVndMQ0I3WEc0Z0lDQWdUV0Z1WVdkbGNqb2diV0Z1WVdkbGNsOXFjMTh4TGsxaGJtRm5aWElzWEc0Z0lDQWdVMjlqYTJWME9pQnpiMk5yWlhSZmFuTmZNUzVUYjJOclpYUXNYRzRnSUNBZ2FXODZJR3h2YjJ0MWNDeGNiaUFnSUNCamIyNXVaV04wT2lCc2IyOXJkWEFzWEc1OUtUdGNiaThxS2x4dUlDb2dVSEp2ZEc5amIyd2dkbVZ5YzJsdmJpNWNiaUFxWEc0Z0tpQkFjSFZpYkdsalhHNGdLaTljYm5aaGNpQnpiMk5yWlhSZmFXOWZjR0Z5YzJWeVh6RWdQU0J5WlhGMWFYSmxLRndpYzI5amEyVjBMbWx2TFhCaGNuTmxjbHdpS1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW5CeWIzUnZZMjlzWENJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQnpiMk5yWlhSZmFXOWZjR0Z5YzJWeVh6RXVjSEp2ZEc5amIydzdJSDBnZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiRzl2YTNWd08xeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzUyWVhJZ1gxOWpjbVZoZEdWQ2FXNWthVzVuSUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJOeVpXRjBaVUpwYm1ScGJtY3BJSHg4SUNoUFltcGxZM1F1WTNKbFlYUmxJRDhnS0daMWJtTjBhVzl1S0c4c0lHMHNJR3NzSUdzeUtTQjdYRzRnSUNBZ2FXWWdLR3N5SUQwOVBTQjFibVJsWm1sdVpXUXBJR3N5SUQwZ2F6dGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ieXdnYXpJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlHMWJhMTA3SUgwZ2ZTazdYRzU5S1NBNklDaG1kVzVqZEdsdmJpaHZMQ0J0TENCckxDQnJNaWtnZTF4dUlDQWdJR2xtSUNock1pQTlQVDBnZFc1a1pXWnBibVZrS1NCck1pQTlJR3M3WEc0Z0lDQWdiMXRyTWwwZ1BTQnRXMnRkTzF4dWZTa3BPMXh1ZG1GeUlGOWZjMlYwVFc5a2RXeGxSR1ZtWVhWc2RDQTlJQ2gwYUdseklDWW1JSFJvYVhNdVgxOXpaWFJOYjJSMWJHVkVaV1poZFd4MEtTQjhmQ0FvVDJKcVpXTjBMbU55WldGMFpTQS9JQ2htZFc1amRHbHZiaWh2TENCMktTQjdYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzhzSUZ3aVpHVm1ZWFZzZEZ3aUxDQjdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJSFpoYkhWbE9pQjJJSDBwTzF4dWZTa2dPaUJtZFc1amRHbHZiaWh2TENCMktTQjdYRzRnSUNBZ2IxdGNJbVJsWm1GMWJIUmNJbDBnUFNCMk8xeHVmU2s3WEc1MllYSWdYMTlwYlhCdmNuUlRkR0Z5SUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJsdGNHOXlkRk4wWVhJcElIeDhJR1oxYm1OMGFXOXVJQ2h0YjJRcElIdGNiaUFnSUNCcFppQW9iVzlrSUNZbUlHMXZaQzVmWDJWelRXOWtkV3hsS1NCeVpYUjFjbTRnYlc5a08xeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjdmVHRjYmlBZ0lDQnBaaUFvYlc5a0lDRTlJRzUxYkd3cElHWnZjaUFvZG1GeUlHc2dhVzRnYlc5a0tTQnBaaUFvYXlBaFBUMGdYQ0prWldaaGRXeDBYQ0lnSmlZZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHMXZaQ3dnYXlrcElGOWZZM0psWVhSbFFtbHVaR2x1WnloeVpYTjFiSFFzSUcxdlpDd2dheWs3WEc0Z0lDQWdYMTl6WlhSTmIyUjFiR1ZFWldaaGRXeDBLSEpsYzNWc2RDd2diVzlrS1R0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHRjYm5aaGNpQmZYMmx0Y0c5eWRFUmxabUYxYkhRZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZmFXMXdiM0owUkdWbVlYVnNkQ2tnZkh3Z1puVnVZM1JwYjI0Z0tHMXZaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9iVzlrSUNZbUlHMXZaQzVmWDJWelRXOWtkV3hsS1NBL0lHMXZaQ0E2SUhzZ1hDSmtaV1poZFd4MFhDSTZJRzF2WkNCOU8xeHVmVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtVjRjRzl5ZEhNdVRXRnVZV2RsY2lBOUlIWnZhV1FnTUR0Y2JtTnZibk4wSUdWdVoybHVaVjlwYjE5amJHbGxiblJmTVNBOUlISmxjWFZwY21Vb1hDSmxibWRwYm1VdWFXOHRZMnhwWlc1MFhDSXBPMXh1WTI5dWMzUWdjMjlqYTJWMFgycHpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOXpiMk5yWlhRdWFuTmNJaWs3WEc1amIyNXpkQ0J3WVhKelpYSWdQU0JmWDJsdGNHOXlkRk4wWVhJb2NtVnhkV2x5WlNoY0luTnZZMnRsZEM1cGJ5MXdZWEp6WlhKY0lpa3BPMXh1WTI5dWMzUWdiMjVmYW5OZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDI5dUxtcHpYQ0lwTzF4dVkyOXVjM1FnWW1GamEyOHlYMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTlqYjI1MGNtbGlMMkpoWTJ0dk1pNXFjMXdpS1R0Y2JtTnZibk4wSUdOdmJYQnZibVZ1ZEY5bGJXbDBkR1Z5WHpFZ1BTQnlaWEYxYVhKbEtGd2lRSE52WTJ0bGRDNXBieTlqYjIxd2IyNWxiblF0WlcxcGRIUmxjbHdpS1R0Y2JtTnZibk4wSUdSbFluVm5YekVnUFNCZlgybHRjRzl5ZEVSbFptRjFiSFFvY21WeGRXbHlaU2hjSW1SbFluVm5YQ0lwS1RzZ0x5OGdaR1ZpZFdjb0tWeHVZMjl1YzNRZ1pHVmlkV2NnUFNCa1pXSjFaMTh4TG1SbFptRjFiSFFvWENKemIyTnJaWFF1YVc4dFkyeHBaVzUwT20xaGJtRm5aWEpjSWlrN0lDOHZJR1JsWW5WbktDbGNibU5zWVhOeklFMWhibUZuWlhJZ1pYaDBaVzVrY3lCamIyMXdiMjVsYm5SZlpXMXBkSFJsY2w4eExrVnRhWFIwWlhJZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIVnlhU3dnYjNCMGN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gyRTdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJuTndjeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMVluTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFZ5YVNBbUppQmNJbTlpYW1WamRGd2lJRDA5UFNCMGVYQmxiMllnZFhKcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpJRDBnZFhKcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKcElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc5d2RITWdQU0J2Y0hSeklIeDhJSHQ5TzF4dUlDQWdJQ0FnSUNCdmNIUnpMbkJoZEdnZ1BTQnZjSFJ6TG5CaGRHZ2dmSHdnWENJdmMyOWphMlYwTG1sdlhDSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzQjBjeUE5SUc5d2RITTdYRzRnSUNBZ0lDQWdJR1Z1WjJsdVpWOXBiMTlqYkdsbGJuUmZNUzVwYm5OMFlXeHNWR2x0WlhKR2RXNWpkR2x2Ym5Nb2RHaHBjeXdnYjNCMGN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVmpiMjV1WldOMGFXOXVLRzl3ZEhNdWNtVmpiMjV1WldOMGFXOXVJQ0U5UFNCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZqYjI1dVpXTjBhVzl1UVhSMFpXMXdkSE1vYjNCMGN5NXlaV052Ym01bFkzUnBiMjVCZEhSbGJYQjBjeUI4ZkNCSmJtWnBibWwwZVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNXVaV04wYVc5dVJHVnNZWGtvYjNCMGN5NXlaV052Ym01bFkzUnBiMjVFWld4aGVTQjhmQ0F4TURBd0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXTnZibTVsWTNScGIyNUVaV3hoZVUxaGVDaHZjSFJ6TG5KbFkyOXVibVZqZEdsdmJrUmxiR0Y1VFdGNElIeDhJRFV3TURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KaGJtUnZiV2w2WVhScGIyNUdZV04wYjNJb0tGOWhJRDBnYjNCMGN5NXlZVzVrYjIxcGVtRjBhVzl1Um1GamRHOXlLU0FoUFQwZ2JuVnNiQ0FtSmlCZllTQWhQVDBnZG05cFpDQXdJRDhnWDJFZ09pQXdMalVwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUpoWTJ0dlptWWdQU0J1WlhjZ1ltRmphMjh5WDJwelh6RXVRbUZqYTI5bVppaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNDZJSFJvYVhNdWNtVmpiMjV1WldOMGFXOXVSR1ZzWVhrb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGVEb2dkR2hwY3k1eVpXTnZibTVsWTNScGIyNUVaV3hoZVUxaGVDZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FtbDBkR1Z5T2lCMGFHbHpMbkpoYm1SdmJXbDZZWFJwYjI1R1lXTjBiM0lvS1N4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHbHRaVzkxZENodWRXeHNJRDA5SUc5d2RITXVkR2x0Wlc5MWRDQS9JREl3TURBd0lEb2diM0IwY3k1MGFXMWxiM1YwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WaFpIbFRkR0YwWlNBOUlGd2lZMnh2YzJWa1hDSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYSnBJRDBnZFhKcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCZmNHRnljMlZ5SUQwZ2IzQjBjeTV3WVhKelpYSWdmSHdnY0dGeWMyVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnVZMjlrWlhJZ1BTQnVaWGNnWDNCaGNuTmxjaTVGYm1OdlpHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1ZqYjJSbGNpQTlJRzVsZHlCZmNHRnljMlZ5TGtSbFkyOWtaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVhWMGIwTnZibTVsWTNRZ1BTQnZjSFJ6TG1GMWRHOURiMjV1WldOMElDRTlQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMkYxZEc5RGIyNXVaV04wS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNHVnVLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxZMjl1Ym1WamRHbHZiaWgyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWVhKbmRXMWxiblJ6TG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WldOdmJtNWxZM1JwYjI0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbFkyOXVibVZqZEdsdmJpQTlJQ0VoZGp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbFkyOXVibVZqZEdsdmJrRjBkR1Z0Y0hSektIWXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWWdQVDA5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpXTnZibTVsWTNScGIyNUJkSFJsYlhCMGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVmpiMjV1WldOMGFXOXVRWFIwWlcxd2RITWdQU0IyTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNGdJQ0FnY21WamIyNXVaV04wYVc5dVJHVnNZWGtvZGlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDJFN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gySUQwOVBTQjFibVJsWm1sdVpXUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZqYjI1dVpXTjBhVzl1UkdWc1lYazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxZMjl1Ym1WamRHbHZia1JsYkdGNUlEMGdkanRjYmlBZ0lDQWdJQ0FnS0Y5aElEMGdkR2hwY3k1aVlXTnJiMlptS1NBOVBUMGdiblZzYkNCOGZDQmZZU0E5UFQwZ2RtOXBaQ0F3SUQ4Z2RtOXBaQ0F3SURvZ1gyRXVjMlYwVFdsdUtIWXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdjbUZ1Wkc5dGFYcGhkR2x2YmtaaFkzUnZjaWgyS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmWVR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFlnUFQwOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlZVzVrYjIxcGVtRjBhVzl1Um1GamRHOXlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlZVzVrYjIxcGVtRjBhVzl1Um1GamRHOXlJRDBnZGp0Y2JpQWdJQ0FnSUNBZ0tGOWhJRDBnZEdocGN5NWlZV05yYjJabUtTQTlQVDBnYm5Wc2JDQjhmQ0JmWVNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMkV1YzJWMFNtbDBkR1Z5S0hZcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVmpiMjV1WldOMGFXOXVSR1ZzWVhsTllYZ29kaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdYMkU3WEc0Z0lDQWdJQ0FnSUdsbUlDaDJJRDA5UFNCMWJtUmxabWx1WldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVmpiMjV1WldOMGFXOXVSR1ZzWVhsTllYZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxZMjl1Ym1WamRHbHZia1JsYkdGNVRXRjRJRDBnZGp0Y2JpQWdJQ0FnSUNBZ0tGOWhJRDBnZEdocGN5NWlZV05yYjJabUtTQTlQVDBnYm5Wc2JDQjhmQ0JmWVNBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dYMkV1YzJWMFRXRjRLSFlwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNGdJQ0FnZEdsdFpXOTFkQ2gyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWVhKbmRXMWxiblJ6TG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBhVzFsYjNWMElEMGdkanRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZOMFlYSjBjeUIwY25scGJtY2dkRzhnY21WamIyNXVaV04wSUdsbUlISmxZMjl1Ym1WamRHbHZiaUJwY3lCbGJtRmliR1ZrSUdGdVpDQjNaU0JvWVhabElHNXZkRnh1SUNBZ0lDQXFJSE4wWVhKMFpXUWdjbVZqYjI1dVpXTjBhVzVuSUhsbGRGeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J0WVhsaVpWSmxZMjl1Ym1WamRFOXVUM0JsYmlncElIdGNiaUFnSUNBZ0lDQWdMeThnVDI1c2VTQjBjbmtnZEc4Z2NtVmpiMjV1WldOMElHbG1JR2wwSjNNZ2RHaGxJR1pwY25OMElIUnBiV1VnZDJVbmNtVWdZMjl1Ym1WamRHbHVaMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNKbFkyOXVibVZqZEdsdVp5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WamIyNXVaV04wYVc5dUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUpoWTJ0dlptWXVZWFIwWlcxd2RITWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHdGxaWEJ6SUhKbFkyOXVibVZqZEdsdmJpQm1jbTl0SUdacGNtbHVaeUIwZDJsalpTQm1iM0lnZEdobElITmhiV1VnY21WamIyNXVaV04wYVc5dUlHeHZiM0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNXVaV04wS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1kzVnljbVZ1ZENCMGNtRnVjM0J2Y25RZ1lITnZZMnRsZEdBdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWJpQXRJRzl3ZEdsdmJtRnNMQ0JqWVd4c1ltRmphMXh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdjMlZzWmx4dUlDQWdJQ0FxSUVCd2RXSnNhV05jYmlBZ0lDQWdLaTljYmlBZ0lDQnZjR1Z1S0dadUtTQjdYRzRnSUNBZ0lDQWdJR1JsWW5WbktGd2ljbVZoWkhsVGRHRjBaU0FsYzF3aUxDQjBhR2x6TGw5eVpXRmtlVk4wWVhSbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0g1MGFHbHpMbDl5WldGa2VWTjBZWFJsTG1sdVpHVjRUMllvWENKdmNHVnVYQ0lwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUdSbFluVm5LRndpYjNCbGJtbHVaeUFsYzF3aUxDQjBhR2x6TG5WeWFTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNW5hVzVsSUQwZ2JtVjNJR1Z1WjJsdVpWOXBiMTlqYkdsbGJuUmZNUzVUYjJOclpYUW9kR2hwY3k1MWNta3NJSFJvYVhNdWIzQjBjeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE52WTJ0bGRDQTlJSFJvYVhNdVpXNW5hVzVsTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WaFpIbFRkR0YwWlNBOUlGd2liM0JsYm1sdVoxd2lPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTnJhWEJTWldOdmJtNWxZM1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnTHk4Z1pXMXBkQ0JnYjNCbGJtQmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IzQmxibE4xWWtSbGMzUnliM2tnUFNCdmJsOXFjMTh4TG05dUtITnZZMnRsZEN3Z1hDSnZjR1Z1WENJc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1YjI1dmNHVnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iaUFtSmlCbWJpZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdaVzFwZENCZ1pYSnliM0pnWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVUzVmlJRDBnYjI1ZmFuTmZNUzV2YmloemIyTnJaWFFzSUZ3aVpYSnliM0pjSWl3Z0tHVnljaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXY29YQ0psY25KdmNsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WTJ4bFlXNTFjQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmNtVmhaSGxUZEdGMFpTQTlJRndpWTJ4dmMyVmtYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbVZ5Y205eVhDSXNJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ptNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYmlobGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVDI1c2VTQmtieUIwYUdseklHbG1JSFJvWlhKbElHbHpJRzV2SUdadUlIUnZJR2hoYm1Sc1pTQjBhR1VnWlhKeWIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTG0xaGVXSmxVbVZqYjI1dVpXTjBUMjVQY0dWdUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptRnNjMlVnSVQwOUlIUm9hWE11WDNScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnBiV1Z2ZFhRZ1BTQjBhR2x6TGw5MGFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdjb1hDSmpiMjV1WldOMElHRjBkR1Z0Y0hRZ2QybHNiQ0IwYVcxbGIzVjBJR0ZtZEdWeUlDVmtYQ0lzSUhScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hScGJXVnZkWFFnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dWdVUzVmlSR1Z6ZEhKdmVTZ3BPeUF2THlCd2NtVjJaVzUwY3lCaElISmhZMlVnWTI5dVpHbDBhVzl1SUhkcGRHZ2dkR2hsSUNkdmNHVnVKeUJsZG1WdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJWMElIUnBiV1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGFXMWxjaUE5SUhSb2FYTXVjMlYwVkdsdFpXOTFkRVp1S0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldKMVp5aGNJbU52Ym01bFkzUWdZWFIwWlcxd2RDQjBhVzFsWkNCdmRYUWdZV1owWlhJZ0pXUmNJaXdnZEdsdFpXOTFkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCbGJsTjFZa1JsYzNSeWIza29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjJOclpYUXVZMnh2YzJVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJBZEhNdGFXZHViM0psWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5amEyVjBMbVZ0YVhRb1hDSmxjbkp2Y2x3aUxDQnVaWGNnUlhKeWIzSW9YQ0owYVcxbGIzVjBYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUhScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwY3k1aGRYUnZWVzV5WldZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhVzFsY2k1MWJuSmxaaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZFdKekxuQjFjMmdvWm5WdVkzUnBiMjRnYzNWaVJHVnpkSEp2ZVNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdsdFpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkV0p6TG5CMWMyZ29iM0JsYmxOMVlrUmxjM1J5YjNrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMVluTXVjSFZ6YUNobGNuSnZjbE4xWWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJiR2xoY3lCbWIzSWdiM0JsYmlncFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUhObGJHWmNiaUFnSUNBZ0tpQkFjSFZpYkdsalhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWJtVmpkQ2htYmlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y0dWdUtHWnVLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIVndiMjRnZEhKaGJuTndiM0owSUc5d1pXNHVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dWIzQmxiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1pHVmlkV2NvWENKdmNHVnVYQ0lwTzF4dUlDQWdJQ0FnSUNBdkx5QmpiR1ZoY2lCdmJHUWdjM1ZpYzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zWldGdWRYQW9LVHRjYmlBZ0lDQWdJQ0FnTHk4Z2JXRnlheUJoY3lCdmNHVnVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxZV1I1VTNSaGRHVWdQU0JjSW05d1pXNWNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKdmNHVnVYQ0lwTzF4dUlDQWdJQ0FnSUNBdkx5QmhaR1FnYm1WM0lITjFZbk5jYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMjlqYTJWMElEMGdkR2hwY3k1bGJtZHBibVU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1ZpY3k1d2RYTm9LRzl1WDJwelh6RXViMjRvYzI5amEyVjBMQ0JjSW5CcGJtZGNJaXdnZEdocGN5NXZibkJwYm1jdVltbHVaQ2gwYUdsektTa3NJRzl1WDJwelh6RXViMjRvYzI5amEyVjBMQ0JjSW1SaGRHRmNJaXdnZEdocGN5NXZibVJoZEdFdVltbHVaQ2gwYUdsektTa3NJRzl1WDJwelh6RXViMjRvYzI5amEyVjBMQ0JjSW1WeWNtOXlYQ0lzSUhSb2FYTXViMjVsY25KdmNpNWlhVzVrS0hSb2FYTXBLU3dnYjI1ZmFuTmZNUzV2YmloemIyTnJaWFFzSUZ3aVkyeHZjMlZjSWl3Z2RHaHBjeTV2Ym1Oc2IzTmxMbUpwYm1Rb2RHaHBjeWtwTENCdmJsOXFjMTh4TG05dUtIUm9hWE11WkdWamIyUmxjaXdnWENKa1pXTnZaR1ZrWENJc0lIUm9hWE11YjI1a1pXTnZaR1ZrTG1KcGJtUW9kR2hwY3lrcEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyRnNiR1ZrSUhWd2IyNGdZU0J3YVc1bkxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2Ym5CcGJtY29LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEZKbGMyVnlkbVZrS0Z3aWNHbHVaMXdpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGc2JHVmtJSGRwZEdnZ1pHRjBZUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNWtZWFJoS0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtaV052WkdWeUxtRmtaQ2hrWVhSaEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyRnNiR1ZrSUhkb1pXNGdjR0Z5YzJWeUlHWjFiR3g1SUdSbFkyOWtaWE1nWVNCd1lXTnJaWFF1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVaR1ZqYjJSbFpDaHdZV05yWlhRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJXbDBVbVZ6WlhKMlpXUW9YQ0p3WVdOclpYUmNJaXdnY0dGamEyVjBLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIVndiMjRnYzI5amEyVjBJR1Z5Y205eUxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2Ym1WeWNtOXlLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmtaV0oxWnloY0ltVnljbTl5WENJc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEZKbGMyVnlkbVZrS0Z3aVpYSnliM0pjSWl3Z1pYSnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCemIyTnJaWFFnWm05eUlIUm9aU0JuYVhabGJpQmdibk53WUM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFOdlkydGxkSDFjYmlBZ0lDQWdLaUJBY0hWaWJHbGpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyOWphMlYwS0c1emNDd2diM0IwY3lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYzI5amEyVjBJRDBnZEdocGN5NXVjM0J6VzI1emNGMDdYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyOWphMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YjJOclpYUWdQU0J1WlhjZ2MyOWphMlYwWDJwelh6RXVVMjlqYTJWMEtIUm9hWE1zSUc1emNDd2diM0IwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNXpjSE5iYm5Od1hTQTlJSE52WTJ0bGREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMjlqYTJWME8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRFlXeHNaV1FnZFhCdmJpQmhJSE52WTJ0bGRDQmpiRzl6WlM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6YjJOclpYUmNiaUFnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5a1pYTjBjbTk1S0hOdlkydGxkQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1YzNCeklEMGdUMkpxWldOMExtdGxlWE1vZEdocGN5NXVjM0J6S1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQnVjM0FnYjJZZ2JuTndjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MyOWphMlYwSUQwZ2RHaHBjeTV1YzNCelcyNXpjRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzI5amEyVjBMbUZqZEdsMlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2ljMjlqYTJWMElDVnpJR2x6SUhOMGFXeHNJR0ZqZEdsMlpTd2djMnRwY0hCcGJtY2dZMnh2YzJWY0lpd2dibk53S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnh2YzJVb0tUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YzSnBkR1Z6SUdFZ2NHRmphMlYwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJoWTJ0bGRGeHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDNCaFkydGxkQ2h3WVdOclpYUXBJSHRjYmlBZ0lDQWdJQ0FnWkdWaWRXY29YQ0ozY21sMGFXNW5JSEJoWTJ0bGRDQWxhbHdpTENCd1lXTnJaWFFwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsYm1OdlpHVmtVR0ZqYTJWMGN5QTlJSFJvYVhNdVpXNWpiMlJsY2k1bGJtTnZaR1VvY0dGamEyVjBLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCbGJtTnZaR1ZrVUdGamEyVjBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxibWRwYm1VdWQzSnBkR1VvWlc1amIyUmxaRkJoWTJ0bGRITmJhVjBzSUhCaFkydGxkQzV2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYkdWaGJpQjFjQ0IwY21GdWMzQnZjblFnYzNWaWMyTnlhWEIwYVc5dWN5QmhibVFnY0dGamEyVjBJR0oxWm1abGNpNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTJ4bFlXNTFjQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1pHVmlkV2NvWENKamJHVmhiblZ3WENJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMVluTXVabTl5UldGamFDZ29jM1ZpUkdWemRISnZlU2tnUFQ0Z2MzVmlSR1Z6ZEhKdmVTZ3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkV0p6TG14bGJtZDBhQ0E5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWamIyUmxjaTVrWlhOMGNtOTVLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5zYjNObElIUm9aU0JqZFhKeVpXNTBJSE52WTJ0bGRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDJOc2IzTmxLQ2tnZTF4dUlDQWdJQ0FnSUNCa1pXSjFaeWhjSW1ScGMyTnZibTVsWTNSY0lpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMydHBjRkpsWTI5dWJtVmpkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxZMjl1Ym1WamRHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVZMnh2YzJVb1hDSm1iM0pqWldRZ1kyeHZjMlZjSWlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtVnVaMmx1WlNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXNW5hVzVsTG1Oc2IzTmxLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZzYVdGeklHWnZjaUJqYkc5elpTZ3BYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdScGMyTnZibTVsWTNRb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amJHOXpaU2dwTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEWVd4c1pXUWdkWEJ2YmlCbGJtZHBibVVnWTJ4dmMyVXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVkyeHZjMlVvY21WaGMyOXVMQ0JrWlhOamNtbHdkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQmtaV0oxWnloY0ltTnNiM05sWkNCa2RXVWdkRzhnSlhOY0lpd2djbVZoYzI5dUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amJHVmhiblZ3S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WW1GamEyOW1aaTV5WlhObGRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaV0ZrZVZOMFlYUmxJRDBnWENKamJHOXpaV1JjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFVtVnpaWEoyWldRb1hDSmpiRzl6WlZ3aUxDQnlaV0Z6YjI0c0lHUmxjMk55YVhCMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNKbFkyOXVibVZqZEdsdmJpQW1KaUFoZEdocGN5NXphMmx3VW1WamIyNXVaV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxZMjl1Ym1WamRDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUYwZEdWdGNIUWdZU0J5WldOdmJtNWxZM1JwYjI0dVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsWTI5dWJtVmpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzSmxZMjl1Ym1WamRHbHVaeUI4ZkNCMGFHbHpMbk5yYVhCU1pXTnZibTVsWTNRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWc1ppQTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtSmhZMnR2Wm1ZdVlYUjBaVzF3ZEhNZ1BqMGdkR2hwY3k1ZmNtVmpiMjV1WldOMGFXOXVRWFIwWlcxd2RITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxZblZuS0Z3aWNtVmpiMjV1WldOMElHWmhhV3hsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZbUZqYTI5bVppNXlaWE5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKeVpXTnZibTVsWTNSZlptRnBiR1ZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZqYjI1dVpXTjBhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa1pXeGhlU0E5SUhSb2FYTXVZbUZqYTI5bVppNWtkWEpoZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKM2FXeHNJSGRoYVhRZ0pXUnRjeUJpWldadmNtVWdjbVZqYjI1dVpXTjBJR0YwZEdWdGNIUmNJaXdnWkdWc1lYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WamIyNXVaV04wYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnBiV1Z5SUQwZ2RHaHBjeTV6WlhSVWFXMWxiM1YwUm00b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpaV3htTG5OcmFYQlNaV052Ym01bFkzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldKMVp5aGNJbUYwZEdWdGNIUnBibWNnY21WamIyNXVaV04wWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRGSmxjMlZ5ZG1Wa0tGd2ljbVZqYjI1dVpXTjBYMkYwZEdWdGNIUmNJaXdnYzJWc1ppNWlZV05yYjJabUxtRjBkR1Z0Y0hSektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYUdWamF5QmhaMkZwYmlCbWIzSWdkR2hsSUdOaGMyVWdjMjlqYTJWMElHTnNiM05sWkNCcGJpQmhZbTkyWlNCbGRtVnVkSE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyVnNaaTV6YTJsd1VtVmpiMjV1WldOMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1dmNHVnVLQ2hsY25JcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKeVpXTnZibTVsWTNRZ1lYUjBaVzF3ZENCbGNuSnZjbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYM0psWTI5dWJtVmpkR2x1WnlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1ppNXlaV052Ym01bFkzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRkpsYzJWeWRtVmtLRndpY21WamIyNXVaV04wWDJWeWNtOXlYQ0lzSUdWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXSjFaeWhjSW5KbFkyOXVibVZqZENCemRXTmpaWE56WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV2Ym5KbFkyOXVibVZqZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENCa1pXeGhlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJ6TG1GMWRHOVZibkpsWmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1Z5TG5WdWNtVm1LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4xWW5NdWNIVnphQ2htZFc1amRHbHZiaUJ6ZFdKRVpYTjBjbTk1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRZV3hzWldRZ2RYQnZiaUJ6ZFdOalpYTnpablZzSUhKbFkyOXVibVZqZEM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjV5WldOdmJtNWxZM1FvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdGMGRHVnRjSFFnUFNCMGFHbHpMbUpoWTJ0dlptWXVZWFIwWlcxd2RITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxZMjl1Ym1WamRHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSmhZMnR2Wm1ZdWNtVnpaWFFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFVtVnpaWEoyWldRb1hDSnlaV052Ym01bFkzUmNJaXdnWVhSMFpXMXdkQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1TllXNWhaMlZ5SUQwZ1RXRnVZV2RsY2p0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTV2YmlBOUlIWnZhV1FnTUR0Y2JtWjFibU4wYVc5dUlHOXVLRzlpYWl3Z1pYWXNJR1p1S1NCN1hHNGdJQ0FnYjJKcUxtOXVLR1YyTENCbWJpazdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhOMVlrUmxjM1J5YjNrb0tTQjdYRzRnSUNBZ0lDQWdJRzlpYWk1dlptWW9aWFlzSUdadUtUdGNiaUFnSUNCOU8xeHVmVnh1Wlhod2IzSjBjeTV2YmlBOUlHOXVPMXh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1MllYSWdYMTlwYlhCdmNuUkVaV1poZFd4MElEMGdLSFJvYVhNZ0ppWWdkR2hwY3k1ZlgybHRjRzl5ZEVSbFptRjFiSFFwSUh4OElHWjFibU4wYVc5dUlDaHRiMlFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLRzF2WkNBbUppQnRiMlF1WDE5bGMwMXZaSFZzWlNrZ1B5QnRiMlFnT2lCN0lGd2laR1ZtWVhWc2RGd2lPaUJ0YjJRZ2ZUdGNibjA3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWxlSEJ2Y25SekxsTnZZMnRsZENBOUlIWnZhV1FnTUR0Y2JtTnZibk4wSUhOdlkydGxkRjlwYjE5d1lYSnpaWEpmTVNBOUlISmxjWFZwY21Vb1hDSnpiMk5yWlhRdWFXOHRjR0Z5YzJWeVhDSXBPMXh1WTI5dWMzUWdiMjVmYW5OZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDI5dUxtcHpYQ0lwTzF4dVkyOXVjM1FnWTI5dGNHOXVaVzUwWDJWdGFYUjBaWEpmTVNBOUlISmxjWFZwY21Vb1hDSkFjMjlqYTJWMExtbHZMMk52YlhCdmJtVnVkQzFsYldsMGRHVnlYQ0lwTzF4dVkyOXVjM1FnWkdWaWRXZGZNU0E5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpWkdWaWRXZGNJaWtwT3lBdkx5QmtaV0oxWnlncFhHNWpiMjV6ZENCa1pXSjFaeUE5SUdSbFluVm5YekV1WkdWbVlYVnNkQ2hjSW5OdlkydGxkQzVwYnkxamJHbGxiblE2YzI5amEyVjBYQ0lwT3lBdkx5QmtaV0oxWnlncFhHNHZLaXBjYmlBcUlFbHVkR1Z5Ym1Gc0lHVjJaVzUwY3k1Y2JpQXFJRlJvWlhObElHVjJaVzUwY3lCallXNG5kQ0JpWlNCbGJXbDBkR1ZrSUdKNUlIUm9aU0IxYzJWeUxseHVJQ292WEc1amIyNXpkQ0JTUlZORlVsWkZSRjlGVmtWT1ZGTWdQU0JQWW1wbFkzUXVabkpsWlhwbEtIdGNiaUFnSUNCamIyNXVaV04wT2lBeExGeHVJQ0FnSUdOdmJtNWxZM1JmWlhKeWIzSTZJREVzWEc0Z0lDQWdaR2x6WTI5dWJtVmpkRG9nTVN4Y2JpQWdJQ0JrYVhOamIyNXVaV04wYVc1bk9pQXhMRnh1SUNBZ0lDOHZJRVYyWlc1MFJXMXBkSFJsY2lCeVpYTmxjblpsWkNCbGRtVnVkSE02SUdoMGRIQnpPaTh2Ym05a1pXcHpMbTl5Wnk5aGNHa3ZaWFpsYm5SekxtaDBiV3dqWlhabGJuUnpYMlYyWlc1MFgyNWxkMnhwYzNSbGJtVnlYRzRnSUNBZ2JtVjNUR2x6ZEdWdVpYSTZJREVzWEc0Z0lDQWdjbVZ0YjNabFRHbHpkR1Z1WlhJNklERXNYRzU5S1R0Y2JtTnNZWE56SUZOdlkydGxkQ0JsZUhSbGJtUnpJR052YlhCdmJtVnVkRjlsYldsMGRHVnlYekV1UlcxcGRIUmxjaUI3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWUZOdlkydGxkR0FnWTI5dWMzUnlkV04wYjNJdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNIVmliR2xqWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYVc4c0lHNXpjQ3dnYjNCMGN5a2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibTVsWTNSbFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyVnBkbVZDZFdabVpYSWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1FuVm1abVZ5SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXUnpJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWTJ0eklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabXhoWjNNZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBieUE5SUdsdk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01emNDQTlJRzV6Y0R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEhNZ0ppWWdiM0IwY3k1aGRYUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GMWRHZ2dQU0J2Y0hSekxtRjFkR2c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFXOHVYMkYxZEc5RGIyNXVaV04wS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNHVnVLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRmRvWlhSb1pYSWdkR2hsSUhOdlkydGxkQ0JwY3lCamRYSnlaVzUwYkhrZ1pHbHpZMjl1Ym1WamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBJR1JwYzJOdmJtNWxZM1JsWkNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRjBhR2x6TG1OdmJtNWxZM1JsWkR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTNWaWMyTnlhV0psSUhSdklHOXdaVzRzSUdOc2IzTmxJR0Z1WkNCd1lXTnJaWFFnWlhabGJuUnpYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMVlrVjJaVzUwY3lncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1ZpY3lsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXOGdQU0IwYUdsekxtbHZPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjFZbk1nUFNCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Ymw5cWMxOHhMbTl1S0dsdkxDQmNJbTl3Wlc1Y0lpd2dkR2hwY3k1dmJtOXdaVzR1WW1sdVpDaDBhR2x6S1Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Ymw5cWMxOHhMbTl1S0dsdkxDQmNJbkJoWTJ0bGRGd2lMQ0IwYUdsekxtOXVjR0ZqYTJWMExtSnBibVFvZEdocGN5a3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNWZhbk5mTVM1dmJpaHBieXdnWENKbGNuSnZjbHdpTENCMGFHbHpMbTl1WlhKeWIzSXVZbWx1WkNoMGFHbHpLU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZibDlxYzE4eExtOXVLR2x2TENCY0ltTnNiM05sWENJc0lIUm9hWE11YjI1amJHOXpaUzVpYVc1a0tIUm9hWE1wS1N4Y2JpQWdJQ0FnSUNBZ1hUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YyaGxkR2hsY2lCMGFHVWdVMjlqYTJWMElIZHBiR3dnZEhKNUlIUnZJSEpsWTI5dWJtVmpkQ0IzYUdWdUlHbDBjeUJOWVc1aFoyVnlJR052Ym01bFkzUnpJRzl5SUhKbFkyOXVibVZqZEhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhRZ1lXTjBhWFpsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTRjBhR2x6TG5OMVluTTdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGd2lUM0JsYm5OY0lpQjBhR1VnYzI5amEyVjBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJtNWxZM1FvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZibTVsWTNSbFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMVlrVjJaVzUwY3lncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVhVzliWENKZmNtVmpiMjV1WldOMGFXNW5YQ0pkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJ5NXZjR1Z1S0NrN0lDOHZJR1Z1YzNWeVpTQnZjR1Z1WEc0Z0lDQWdJQ0FnSUdsbUlDaGNJbTl3Wlc1Y0lpQTlQVDBnZEdocGN5NXBieTVmY21WaFpIbFRkR0YwWlNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNXZjR1Z1S0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJiR2xoY3lCbWIzSWdZMjl1Ym1WamRDZ3BYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IzQmxiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1Ym1WamRDZ3BPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrY3lCaElHQnRaWE56WVdkbFlDQmxkbVZ1ZEM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnYzJWc1pseHVJQ0FnSUNBcUlFQndkV0pzYVdOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6Wlc1a0tDNHVMbUZ5WjNNcElIdGNiaUFnSUNBZ0lDQWdZWEpuY3k1MWJuTm9hV1owS0Z3aWJXVnpjMkZuWlZ3aUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJXbDBMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozTXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVDNabGNuSnBaR1VnWUdWdGFYUmdMbHh1SUNBZ0lDQXFJRWxtSUhSb1pTQmxkbVZ1ZENCcGN5QnBiaUJnWlhabGJuUnpZQ3dnYVhRbmN5QmxiV2wwZEdWa0lHNXZjbTFoYkd4NUxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCelpXeG1YRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdWdGFYUW9aWFlzSUM0dUxtRnlaM01wSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRkpGVTBWU1ZrVkVYMFZXUlU1VVV5NW9ZWE5QZDI1UWNtOXdaWEowZVNobGRpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblhDSW5JQ3NnWlhZZ0t5QW5YQ0lnYVhNZ1lTQnlaWE5sY25abFpDQmxkbVZ1ZENCdVlXMWxKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1lYSm5jeTUxYm5Ob2FXWjBLR1YyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGamEyVjBJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2MyOWphMlYwWDJsdlgzQmhjbk5sY2w4eExsQmhZMnRsZEZSNWNHVXVSVlpGVGxRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQmhjbWR6TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQndZV05yWlhRdWIzQjBhVzl1Y3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0J3WVdOclpYUXViM0IwYVc5dWN5NWpiMjF3Y21WemN5QTlJSFJvYVhNdVpteGhaM011WTI5dGNISmxjM01nSVQwOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBdkx5QmxkbVZ1ZENCaFkyc2dZMkZzYkdKaFkydGNiaUFnSUNBZ0lDQWdhV1lnS0Z3aVpuVnVZM1JwYjI1Y0lpQTlQVDBnZEhsd1pXOW1JR0Z5WjNOYllYSm5jeTVzWlc1bmRHZ2dMU0F4WFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhV1FnUFNCMGFHbHpMbWxrY3lzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXY29YQ0psYldsMGRHbHVaeUJ3WVdOclpYUWdkMmwwYUNCaFkyc2dhV1FnSldSY0lpd2dhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lXTnJJRDBnWVhKbmN5NXdiM0FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzSmxaMmx6ZEdWeVFXTnJRMkZzYkdKaFkyc29hV1FzSUdGamF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lXTnJaWFF1YVdRZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYzFSeVlXNXpjRzl5ZEZkeWFYUmhZbXhsSUQwZ2RHaHBjeTVwYnk1bGJtZHBibVVnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXOHVaVzVuYVc1bExuUnlZVzV6Y0c5eWRDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYnk1bGJtZHBibVV1ZEhKaGJuTndiM0owTG5keWFYUmhZbXhsTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrYVhOallYSmtVR0ZqYTJWMElEMGdkR2hwY3k1bWJHRm5jeTUyYjJ4aGRHbHNaU0FtSmlBb0lXbHpWSEpoYm5Od2IzSjBWM0pwZEdGaWJHVWdmSHdnSVhSb2FYTXVZMjl1Ym1WamRHVmtLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUnBjMk5oY21SUVlXTnJaWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2laR2x6WTJGeVpDQndZV05yWlhRZ1lYTWdkR2hsSUhSeVlXNXpjRzl5ZENCcGN5QnViM1FnWTNWeWNtVnVkR3g1SUhkeWFYUmhZbXhsWENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFJvYVhNdVkyOXVibVZqZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTV2ZEdsbWVVOTFkR2R2YVc1blRHbHpkR1Z1WlhKektIQmhZMnRsZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhZMnRsZENod1lXTnJaWFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtRblZtWm1WeUxuQjFjMmdvY0dGamEyVjBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjl5WldkcGMzUmxja0ZqYTBOaGJHeGlZV05yS0dsa0xDQmhZMnNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEdsdFpXOTFkQ0E5SUhSb2FYTXVabXhoWjNNdWRHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJwYldWdmRYUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhZMnR6VzJsa1hTQTlJR0ZqYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCQWRITXRhV2R1YjNKbFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhScGJXVnlJRDBnZEdocGN5NXBieTV6WlhSVWFXMWxiM1YwUm00b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WVdOcmMxdHBaRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJvYVhNdWMyVnVaRUoxWm1abGNpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5ObGJtUkNkV1ptWlhKYmFWMHVhV1FnUFQwOUlHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxZblZuS0Z3aWNtVnRiM1pwYm1jZ2NHRmphMlYwSUhkcGRHZ2dZV05ySUdsa0lDVmtJR1p5YjIwZ2RHaGxJR0oxWm1abGNsd2lMQ0JwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRUoxWm1abGNpNXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKbGRtVnVkQ0IzYVhSb0lHRmpheUJwWkNBbFpDQm9ZWE1nZEdsdFpXUWdiM1YwSUdGbWRHVnlJQ1ZrSUcxelhDSXNJR2xrTENCMGFXMWxiM1YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZqYXk1allXeHNLSFJvYVhNc0lHNWxkeUJGY25KdmNpaGNJbTl3WlhKaGRHbHZiaUJvWVhNZ2RHbHRaV1FnYjNWMFhDSXBLVHRjYmlBZ0lDQWdJQ0FnZlN3Z2RHbHRaVzkxZENrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVdOcmMxdHBaRjBnUFNBb0xpNHVZWEpuY3lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRSFJ6TFdsbmJtOXlaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYnk1amJHVmhjbFJwYldWdmRYUkdiaWgwYVcxbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyc3VZWEJ3Ykhrb2RHaHBjeXdnVzI1MWJHd3NJQzR1TG1GeVozTmRLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWdVpITWdZU0J3WVdOclpYUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NHRmphMlYwWEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQndZV05yWlhRb2NHRmphMlYwS1NCN1hHNGdJQ0FnSUNBZ0lIQmhZMnRsZEM1dWMzQWdQU0IwYUdsekxtNXpjRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBieTVmY0dGamEyVjBLSEJoWTJ0bGRDazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR3hsWkNCMWNHOXVJR1Z1WjJsdVpTQmdiM0JsYm1BdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzl1YjNCbGJpZ3BJSHRjYmlBZ0lDQWdJQ0FnWkdWaWRXY29YQ0owY21GdWMzQnZjblFnYVhNZ2IzQmxiaUF0SUdOdmJtNWxZM1JwYm1kY0lpazdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NWhkWFJvSUQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aGRYUm9LQ2hrWVhSaEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZV05yWlhRb2V5QjBlWEJsT2lCemIyTnJaWFJmYVc5ZmNHRnljMlZ5WHpFdVVHRmphMlYwVkhsd1pTNURUMDVPUlVOVUxDQmtZWFJoSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhZMnRsZENoN0lIUjVjR1U2SUhOdlkydGxkRjlwYjE5d1lYSnpaWEpmTVM1UVlXTnJaWFJVZVhCbExrTlBUazVGUTFRc0lHUmhkR0U2SUhSb2FYTXVZWFYwYUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRZV3hzWldRZ2RYQnZiaUJsYm1kcGJtVWdiM0lnYldGdVlXZGxjaUJnWlhKeWIzSmdMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElHVnljbHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNWxjbkp2Y2lobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1OdmJtNWxZM1JsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKamIyNXVaV04wWDJWeWNtOXlYQ0lzSUdWeWNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIVndiMjRnWlc1bmFXNWxJR0JqYkc5elpXQXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NtVmhjMjl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1JsYzJOeWFYQjBhVzl1WEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQnZibU5zYjNObEtISmxZWE52Yml3Z1pHVnpZM0pwY0hScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnWkdWaWRXY29YQ0pqYkc5elpTQW9KWE1wWENJc0lISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWJtVmpkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxtbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFJTWlhObGNuWmxaQ2hjSW1ScGMyTnZibTVsWTNSY0lpd2djbVZoYzI5dUxDQmtaWE5qY21sd2RHbHZiaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5oYkd4bFpDQjNhWFJvSUhOdlkydGxkQ0J3WVdOclpYUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NHRmphMlYwWEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQnZibkJoWTJ0bGRDaHdZV05yWlhRcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MyRnRaVTVoYldWemNHRmpaU0E5SUhCaFkydGxkQzV1YzNBZ1BUMDlJSFJvYVhNdWJuTndPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYTmhiV1ZPWVcxbGMzQmhZMlVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2NHRmphMlYwTG5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYzI5amEyVjBYMmx2WDNCaGNuTmxjbDh4TGxCaFkydGxkRlI1Y0dVdVEwOU9Ua1ZEVkRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jR0ZqYTJWMExtUmhkR0VnSmlZZ2NHRmphMlYwTG1SaGRHRXVjMmxrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbGtJRDBnY0dGamEyVjBMbVJoZEdFdWMybGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1WTI5dWJtVmpkQ2hwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbU52Ym01bFkzUmZaWEp5YjNKY0lpd2dibVYzSUVWeWNtOXlLRndpU1hRZ2MyVmxiWE1nZVc5MUlHRnlaU0IwY25scGJtY2dkRzhnY21WaFkyZ2dZU0JUYjJOclpYUXVTVThnYzJWeWRtVnlJR2x1SUhZeUxuZ2dkMmwwYUNCaElIWXpMbmdnWTJ4cFpXNTBMQ0JpZFhRZ2RHaGxlU0JoY21VZ2JtOTBJR052YlhCaGRHbGliR1VnS0cxdmNtVWdhVzVtYjNKdFlYUnBiMjRnYUdWeVpUb2dhSFIwY0hNNkx5OXpiMk5yWlhRdWFXOHZaRzlqY3k5Mk15OXRhV2R5WVhScGJtY3Rabkp2YlMweUxYZ3RkRzh0TXkwd0x5bGNJaWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYzI5amEyVjBYMmx2WDNCaGNuTmxjbDh4TGxCaFkydGxkRlI1Y0dVdVJWWkZUbFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUhOdlkydGxkRjlwYjE5d1lYSnpaWEpmTVM1UVlXTnJaWFJVZVhCbExrSkpUa0ZTV1Y5RlZrVk9WRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVaWFpsYm5Rb2NHRmphMlYwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnYzI5amEyVjBYMmx2WDNCaGNuTmxjbDh4TGxCaFkydGxkRlI1Y0dVdVFVTkxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J6YjJOclpYUmZhVzlmY0dGeWMyVnlYekV1VUdGamEyVjBWSGx3WlM1Q1NVNUJVbGxmUVVOTE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1aFkyc29jR0ZqYTJWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ2MyOWphMlYwWDJsdlgzQmhjbk5sY2w4eExsQmhZMnRsZEZSNWNHVXVSRWxUUTA5T1RrVkRWRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVaR2x6WTI5dWJtVmpkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0J6YjJOclpYUmZhVzlmY0dGeWMyVnlYekV1VUdGamEyVjBWSGx3WlM1RFQwNU9SVU5VWDBWU1VrOVNPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHVnpkSEp2ZVNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdWeWNpQTlJRzVsZHlCRmNuSnZjaWh3WVdOclpYUXVaR0YwWVM1dFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkFkSE10YVdkdWIzSmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5TG1SaGRHRWdQU0J3WVdOclpYUXVaR0YwWVM1a1lYUmhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRkpsYzJWeWRtVmtLRndpWTI5dWJtVmpkRjlsY25KdmNsd2lMQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOaGJHeGxaQ0IxY0c5dUlHRWdjMlZ5ZG1WeUlHVjJaVzUwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJoWTJ0bGRGeHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1bGRtVnVkQ2h3WVdOclpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZWEpuY3lBOUlIQmhZMnRsZEM1a1lYUmhJSHg4SUZ0ZE8xeHVJQ0FnSUNBZ0lDQmtaV0oxWnloY0ltVnRhWFIwYVc1bklHVjJaVzUwSUNWcVhDSXNJR0Z5WjNNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYm5Wc2JDQWhQU0J3WVdOclpYUXVhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2lZWFIwWVdOb2FXNW5JR0ZqYXlCallXeHNZbUZqYXlCMGJ5QmxkbVZ1ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVozTXVjSFZ6YUNoMGFHbHpMbUZqYXlod1lXTnJaWFF1YVdRcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYjI1dVpXTjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRVYyWlc1MEtHRnlaM01wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXTmxhWFpsUW5WbVptVnlMbkIxYzJnb1QySnFaV04wTG1aeVpXVjZaU2hoY21kektTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1pXMXBkRVYyWlc1MEtHRnlaM01wSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyRnVlVXhwYzNSbGJtVnljeUFtSmlCMGFHbHpMbDloYm5sTWFYTjBaVzVsY25NdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnNhWE4wWlc1bGNuTWdQU0IwYUdsekxsOWhibmxNYVhOMFpXNWxjbk11YzJ4cFkyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdiR2x6ZEdWdVpYSWdiMllnYkdsemRHVnVaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHpkR1Z1WlhJdVlYQndiSGtvZEdocGN5d2dZWEpuY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2MzVndaWEl1WlcxcGRDNWhjSEJzZVNoMGFHbHpMQ0JoY21kektUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VISnZaSFZqWlhNZ1lXNGdZV05ySUdOaGJHeGlZV05ySUhSdklHVnRhWFFnZDJsMGFDQmhiaUJsZG1WdWRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdOcktHbGtLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5sYkdZZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNCc1pYUWdjMlZ1ZENBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCeVpYWmxiblFnWkc5MVlteGxJR05oYkd4aVlXTnJjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5sYm5RcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZ1ZENBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV0oxWnloY0luTmxibVJwYm1jZ1lXTnJJQ1ZxWENJc0lHRnlaM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1d1lXTnJaWFFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJSE52WTJ0bGRGOXBiMTl3WVhKelpYSmZNUzVRWVdOclpYUlVlWEJsTGtGRFN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWVhKbmN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRZV3hzWldRZ2RYQnZiaUJoSUhObGNuWmxjaUJoWTJ0dWIzZHNaV2RsYldWdWRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCd1lXTnJaWFJjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVZV05yS0hCaFkydGxkQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JoWTJzZ1BTQjBhR2x6TG1GamEzTmJjR0ZqYTJWMExtbGtYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2lablZ1WTNScGIyNWNJaUE5UFQwZ2RIbHdaVzltSUdGamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKallXeHNhVzVuSUdGamF5QWxjeUIzYVhSb0lDVnFYQ0lzSUhCaFkydGxkQzVwWkN3Z2NHRmphMlYwTG1SaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTnJMbUZ3Y0d4NUtIUm9hWE1zSUhCaFkydGxkQzVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxtRmphM05iY0dGamEyVjBMbWxrWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2lZbUZrSUdGamF5QWxjMXdpTENCd1lXTnJaWFF1YVdRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR3hsWkNCMWNHOXVJSE5sY25abGNpQmpiMjV1WldOMExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2Ym1OdmJtNWxZM1FvYVdRcElIdGNiaUFnSUNBZ0lDQWdaR1ZpZFdjb1hDSnpiMk5yWlhRZ1kyOXVibVZqZEdWa0lIZHBkR2dnYVdRZ0pYTmNJaXdnYVdRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sa0lEMGdhV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Ym1WamRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJXbDBRblZtWm1WeVpXUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKamIyNXVaV04wWENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmJXbDBJR0oxWm1abGNtVmtJR1YyWlc1MGN5QW9jbVZqWldsMlpXUWdZVzVrSUdWdGFYUjBaV1FwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmxiV2wwUW5WbVptVnlaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WalpXbDJaVUoxWm1abGNpNW1iM0pGWVdOb0tDaGhjbWR6S1NBOVBpQjBhR2x6TG1WdGFYUkZkbVZ1ZENoaGNtZHpLU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZqWldsMlpVSjFabVpsY2lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJDZFdabVpYSXVabTl5UldGamFDZ29jR0ZqYTJWMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01dmRHbG1lVTkxZEdkdmFXNW5UR2x6ZEdWdVpYSnpLSEJoWTJ0bGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoWTJ0bGRDaHdZV05yWlhRcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrUW5WbVptVnlJRDBnVzEwN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOaGJHeGxaQ0IxY0c5dUlITmxjblpsY2lCa2FYTmpiMjV1WldOMExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2Ym1ScGMyTnZibTVsWTNRb0tTQjdYRzRnSUNBZ0lDQWdJR1JsWW5WbktGd2ljMlZ5ZG1WeUlHUnBjMk52Ym01bFkzUWdLQ1Z6S1Z3aUxDQjBhR2x6TG01emNDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVnpkSEp2ZVNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVkyeHZjMlVvWENKcGJ5QnpaWEoyWlhJZ1pHbHpZMjl1Ym1WamRGd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIVndiMjRnWm05eVkyVmtJR05zYVdWdWRDOXpaWEoyWlhJZ2MybGtaU0JrYVhOamIyNXVaV04wYVc5dWN5eGNiaUFnSUNBZ0tpQjBhR2x6SUcxbGRHaHZaQ0JsYm5OMWNtVnpJSFJvWlNCdFlXNWhaMlZ5SUhOMGIzQnpJSFJ5WVdOcmFXNW5JSFZ6SUdGdVpGeHVJQ0FnSUNBcUlIUm9ZWFFnY21WamIyNXVaV04wYVc5dWN5QmtiMjRuZENCblpYUWdkSEpwWjJkbGNtVmtJR1p2Y2lCMGFHbHpMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXpkV0p6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamJHVmhiaUJ6ZFdKelkzSnBjSFJwYjI1eklIUnZJR0YyYjJsa0lISmxZMjl1Ym1WamRHbHZibk5jYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNWaWN5NW1iM0pGWVdOb0tDaHpkV0pFWlhOMGNtOTVLU0E5UGlCemRXSkVaWE4wY205NUtDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZFdKeklEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzliWENKZlpHVnpkSEp2ZVZ3aVhTaDBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkdselkyOXVibVZqZEhNZ2RHaGxJSE52WTJ0bGRDQnRZVzUxWVd4c2VTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2MyVnNabHh1SUNBZ0lDQXFJRUJ3ZFdKc2FXTmNiaUFnSUNBZ0tpOWNiaUFnSUNCa2FYTmpiMjV1WldOMEtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYjI1dVpXTjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2ljR1Z5Wm05eWJXbHVaeUJrYVhOamIyNXVaV04wSUNnbGN5bGNJaXdnZEdocGN5NXVjM0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lXTnJaWFFvZXlCMGVYQmxPaUJ6YjJOclpYUmZhVzlmY0dGeWMyVnlYekV1VUdGamEyVjBWSGx3WlM1RVNWTkRUMDVPUlVOVUlIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklISmxiVzkyWlNCemIyTnJaWFFnWm5KdmJTQndiMjlzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1Z6ZEhKdmVTZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYjI1dVpXTjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdacGNtVWdaWFpsYm5SelhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVZMnh2YzJVb1hDSnBieUJqYkdsbGJuUWdaR2x6WTI5dWJtVmpkRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV3hwWVhNZ1ptOXlJR1JwYzJOdmJtNWxZM1FvS1Z4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUJ6Wld4bVhHNGdJQ0FnSUNvZ1FIQjFZbXhwWTF4dUlDQWdJQ0FxTDF4dUlDQWdJR05zYjNObEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a2FYTmpiMjV1WldOMEtDazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkSE1nZEdobElHTnZiWEJ5WlhOeklHWnNZV2N1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZMjl0Y0hKbGMzTWdMU0JwWmlCZ2RISjFaV0FzSUdOdmJYQnlaWE56WlhNZ2RHaGxJSE5sYm1ScGJtY2daR0YwWVZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnYzJWc1pseHVJQ0FnSUNBcUlFQndkV0pzYVdOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjIxd2NtVnpjeWhqYjIxd2NtVnpjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkekxtTnZiWEJ5WlhOeklEMGdZMjl0Y0hKbGMzTTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklHRWdiVzlrYVdacFpYSWdabTl5SUdFZ2MzVmljMlZ4ZFdWdWRDQmxkbVZ1ZENCbGJXbHpjMmx2YmlCMGFHRjBJSFJvWlNCbGRtVnVkQ0J0WlhOellXZGxJSGRwYkd3Z1ltVWdaSEp2Y0hCbFpDQjNhR1Z1SUhSb2FYTWdjMjlqYTJWMElHbHpJRzV2ZEZ4dUlDQWdJQ0FxSUhKbFlXUjVJSFJ2SUhObGJtUWdiV1Z6YzJGblpYTXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QnpaV3htWEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkQ0IyYjJ4aGRHbHNaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYkdGbmN5NTJiMnhoZEdsc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFJ6SUdFZ2JXOWthV1pwWlhJZ1ptOXlJR0VnYzNWaWMyVnhkV1Z1ZENCbGRtVnVkQ0JsYldsemMybHZiaUIwYUdGMElIUm9aU0JqWVd4c1ltRmpheUIzYVd4c0lHSmxJR05oYkd4bFpDQjNhWFJvSUdGdUlHVnljbTl5SUhkb1pXNGdkR2hsWEc0Z0lDQWdJQ29nWjJsMlpXNGdiblZ0WW1WeUlHOW1JRzFwYkd4cGMyVmpiMjVrY3lCb1lYWmxJR1ZzWVhCelpXUWdkMmwwYUc5MWRDQmhiaUJoWTJ0dWIzZHNaV1JuWlcxbGJuUWdabkp2YlNCMGFHVWdjMlZ5ZG1WeU9seHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1lHQmdYRzRnSUNBZ0lDb2djMjlqYTJWMExuUnBiV1Z2ZFhRb05UQXdNQ2t1WlcxcGRDaGNJbTE1TFdWMlpXNTBYQ0lzSUNobGNuSXBJRDArSUh0Y2JpQWdJQ0FnS2lBZ0lHbG1JQ2hsY25JcElIdGNiaUFnSUNBZ0tpQWdJQ0FnTHk4Z2RHaGxJSE5sY25abGNpQmthV1FnYm05MElHRmphMjV2ZDJ4bFpHZGxJSFJvWlNCbGRtVnVkQ0JwYmlCMGFHVWdaMmwyWlc0Z1pHVnNZWGxjYmlBZ0lDQWdLaUFnSUgxY2JpQWdJQ0FnS2lCOUtUdGNiaUFnSUNBZ0tpQmdZR0JjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSE5sYkdaY2JpQWdJQ0FnS2lCQWNIVmliR2xqWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2x0Wlc5MWRDaDBhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011ZEdsdFpXOTFkQ0E5SUhScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlpHUnpJR0VnYkdsemRHVnVaWElnZEdoaGRDQjNhV3hzSUdKbElHWnBjbVZrSUhkb1pXNGdZVzU1SUdWMlpXNTBJR2x6SUdWdGFYUjBaV1F1SUZSb1pTQmxkbVZ1ZENCdVlXMWxJR2x6SUhCaGMzTmxaQ0JoY3lCMGFHVWdabWx5YzNRZ1lYSm5kVzFsYm5RZ2RHOGdkR2hsWEc0Z0lDQWdJQ29nWTJGc2JHSmhZMnN1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiR2x6ZEdWdVpYSmNiaUFnSUNBZ0tpQkFjSFZpYkdsalhHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1QmJua29iR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZVzU1VEdsemRHVnVaWEp6SUQwZ2RHaHBjeTVmWVc1NVRHbHpkR1Z1WlhKeklIeDhJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloYm5sTWFYTjBaVzVsY25NdWNIVnphQ2hzYVhOMFpXNWxjaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlpHUnpJR0VnYkdsemRHVnVaWElnZEdoaGRDQjNhV3hzSUdKbElHWnBjbVZrSUhkb1pXNGdZVzU1SUdWMlpXNTBJR2x6SUdWdGFYUjBaV1F1SUZSb1pTQmxkbVZ1ZENCdVlXMWxJR2x6SUhCaGMzTmxaQ0JoY3lCMGFHVWdabWx5YzNRZ1lYSm5kVzFsYm5RZ2RHOGdkR2hsWEc0Z0lDQWdJQ29nWTJGc2JHSmhZMnN1SUZSb1pTQnNhWE4wWlc1bGNpQnBjeUJoWkdSbFpDQjBieUIwYUdVZ1ltVm5hVzV1YVc1bklHOW1JSFJvWlNCc2FYTjBaVzVsY25NZ1lYSnlZWGt1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiR2x6ZEdWdVpYSmNiaUFnSUNBZ0tpQkFjSFZpYkdsalhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKbGNHVnVaRUZ1ZVNoc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aGJubE1hWE4wWlc1bGNuTWdQU0IwYUdsekxsOWhibmxNYVhOMFpXNWxjbk1nZkh3Z1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRnVlVXhwYzNSbGJtVnljeTUxYm5Ob2FXWjBLR3hwYzNSbGJtVnlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaWE1nZEdobElHeHBjM1JsYm1WeUlIUm9ZWFFnZDJsc2JDQmlaU0JtYVhKbFpDQjNhR1Z1SUdGdWVTQmxkbVZ1ZENCcGN5QmxiV2wwZEdWa0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd4cGMzUmxibVZ5WEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHOW1aa0Z1ZVNoc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMkZ1ZVV4cGMzUmxibVZ5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnNhWE4wWlc1bGNuTWdQU0IwYUdsekxsOWhibmxNYVhOMFpXNWxjbk03WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3hwYzNSbGJtVnljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYVhOMFpXNWxjaUE5UFQwZ2JHbHpkR1Z1WlhKelcybGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JsYm1WeWN5NXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZ1ZVV4cGMzUmxibVZ5Y3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUdGdUlHRnljbUY1SUc5bUlHeHBjM1JsYm1WeWN5QjBhR0YwSUdGeVpTQnNhWE4wWlc1cGJtY2dabTl5SUdGdWVTQmxkbVZ1ZENCMGFHRjBJR2x6SUhOd1pXTnBabWxsWkM0Z1ZHaHBjeUJoY25KaGVTQmpZVzRnWW1VZ2JXRnVhWEIxYkdGMFpXUXNYRzRnSUNBZ0lDb2daUzVuTGlCMGJ5QnlaVzF2ZG1VZ2JHbHpkR1Z1WlhKekxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQjFZbXhwWTF4dUlDQWdJQ0FxTDF4dUlDQWdJR3hwYzNSbGJtVnljMEZ1ZVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGdWVVeHBjM1JsYm1WeWN5QjhmQ0JiWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdSa2N5QmhJR3hwYzNSbGJtVnlJSFJvWVhRZ2QybHNiQ0JpWlNCbWFYSmxaQ0IzYUdWdUlHRnVlU0JsZG1WdWRDQnBjeUJsYldsMGRHVmtMaUJVYUdVZ1pYWmxiblFnYm1GdFpTQnBjeUJ3WVhOelpXUWdZWE1nZEdobElHWnBjbk4wSUdGeVozVnRaVzUwSUhSdklIUm9aVnh1SUNBZ0lDQXFJR05oYkd4aVlXTnJMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElHeHBjM1JsYm1WeVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBOGNISmxQanhqYjJSbFBseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ2MyOWphMlYwTG05dVFXNTVUM1YwWjI5cGJtY29LR1YyWlc1MExDQXVMaTVoY21kektTQTlQaUI3WEc0Z0lDQWdJQ29nSUNCamIyNXpiMnhsTG14dlp5aGxkbVZ1ZENrN1hHNGdJQ0FnSUNvZ2ZTazdYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQThMM0J5WlQ0OEwyTnZaR1UrWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0hWaWJHbGpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNUJibmxQZFhSbmIybHVaeWhzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloYm5sUGRYUm5iMmx1WjB4cGMzUmxibVZ5Y3lBOUlIUm9hWE11WDJGdWVVOTFkR2R2YVc1blRHbHpkR1Z1WlhKeklIeDhJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloYm5sUGRYUm5iMmx1WjB4cGMzUmxibVZ5Y3k1d2RYTm9LR3hwYzNSbGJtVnlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pITWdZU0JzYVhOMFpXNWxjaUIwYUdGMElIZHBiR3dnWW1VZ1ptbHlaV1FnZDJobGJpQmhibmtnWlhabGJuUWdhWE1nWlcxcGRIUmxaQzRnVkdobElHVjJaVzUwSUc1aGJXVWdhWE1nY0dGemMyVmtJR0Z6SUhSb1pTQm1hWEp6ZENCaGNtZDFiV1Z1ZENCMGJ5QjBhR1ZjYmlBZ0lDQWdLaUJqWVd4c1ltRmpheTRnVkdobElHeHBjM1JsYm1WeUlHbHpJR0ZrWkdWa0lIUnZJSFJvWlNCaVpXZHBibTVwYm1jZ2IyWWdkR2hsSUd4cGMzUmxibVZ5Y3lCaGNuSmhlUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnNhWE4wWlc1bGNseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1BIQnlaVDQ4WTI5a1pUNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlITnZZMnRsZEM1d2NtVndaVzVrUVc1NVQzVjBaMjlwYm1jb0tHVjJaVzUwTENBdUxpNWhjbWR6S1NBOVBpQjdYRzRnSUNBZ0lDb2dJQ0JqYjI1emIyeGxMbXh2WnlobGRtVnVkQ2s3WEc0Z0lDQWdJQ29nZlNrN1hHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBOEwzQnlaVDQ4TDJOdlpHVStYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjSFZpYkdsalhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKbGNHVnVaRUZ1ZVU5MWRHZHZhVzVuS0d4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGdWVVOTFkR2R2YVc1blRHbHpkR1Z1WlhKeklEMGdkR2hwY3k1ZllXNTVUM1YwWjI5cGJtZE1hWE4wWlc1bGNuTWdmSHdnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGdWVVOTFkR2R2YVc1blRHbHpkR1Z1WlhKekxuVnVjMmhwWm5Rb2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ0YjNabGN5QjBhR1VnYkdsemRHVnVaWElnZEdoaGRDQjNhV3hzSUdKbElHWnBjbVZrSUhkb1pXNGdZVzU1SUdWMlpXNTBJR2x6SUdWdGFYUjBaV1F1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiR2x6ZEdWdVpYSmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlEeHdjbVUrUEdOdlpHVStYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQmpiMjV6ZENCb1lXNWtiR1Z5SUQwZ0tHVjJaVzUwTENBdUxpNWhjbWR6S1NBOVBpQjdYRzRnSUNBZ0lDb2dJQ0JqYjI1emIyeGxMbXh2WnlobGRtVnVkQ2s3WEc0Z0lDQWdJQ29nZlZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nYzI5amEyVjBMbTl1UVc1NVQzVjBaMjlwYm1jb2FHRnVaR3hsY2lrN1hHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lBdkx5QjBhR1Z1SUd4aGRHVnlYRzRnSUNBZ0lDb2djMjlqYTJWMExtOW1aa0Z1ZVU5MWRHZHZhVzVuS0doaGJtUnNaWElwTzF4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUEM5d2NtVStQQzlqYjJSbFBseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQjFZbXhwWTF4dUlDQWdJQ0FxTDF4dUlDQWdJRzltWmtGdWVVOTFkR2R2YVc1bktHeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmWVc1NVQzVjBaMjlwYm1kTWFYTjBaVzVsY25NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiR2x6ZEdWdVpYSnpJRDBnZEdocGN5NWZZVzU1VDNWMFoyOXBibWRNYVhOMFpXNWxjbk03WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3hwYzNSbGJtVnljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYVhOMFpXNWxjaUE5UFQwZ2JHbHpkR1Z1WlhKelcybGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JsYm1WeWN5NXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZ1ZVU5MWRHZHZhVzVuVEdsemRHVnVaWEp6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGRIVnlibk1nWVc0Z1lYSnlZWGtnYjJZZ2JHbHpkR1Z1WlhKeklIUm9ZWFFnWVhKbElHeHBjM1JsYm1sdVp5Qm1iM0lnWVc1NUlHVjJaVzUwSUhSb1lYUWdhWE1nYzNCbFkybG1hV1ZrTGlCVWFHbHpJR0Z5Y21GNUlHTmhiaUJpWlNCdFlXNXBjSFZzWVhSbFpDeGNiaUFnSUNBZ0tpQmxMbWN1SUhSdklISmxiVzkyWlNCc2FYTjBaVzVsY25NdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNIVmliR2xqWEc0Z0lDQWdJQ292WEc0Z0lDQWdiR2x6ZEdWdVpYSnpRVzU1VDNWMFoyOXBibWNvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloYm5sUGRYUm5iMmx1WjB4cGMzUmxibVZ5Y3lCOGZDQmJYVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUbTkwYVdaNUlIUm9aU0JzYVhOMFpXNWxjbk1nWm05eUlHVmhZMmdnY0dGamEyVjBJSE5sYm5SY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0J3WVdOclpYUmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYm05MGFXWjVUM1YwWjI5cGJtZE1hWE4wWlc1bGNuTW9jR0ZqYTJWMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDloYm5sUGRYUm5iMmx1WjB4cGMzUmxibVZ5Y3lBbUppQjBhR2x6TGw5aGJubFBkWFJuYjJsdVoweHBjM1JsYm1WeWN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3hwYzNSbGJtVnljeUE5SUhSb2FYTXVYMkZ1ZVU5MWRHZHZhVzVuVEdsemRHVnVaWEp6TG5Oc2FXTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR3hwYzNSbGJtVnlJRzltSUd4cGMzUmxibVZ5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JsYm1WeUxtRndjR3g1S0hSb2FYTXNJSEJoWTJ0bGRDNWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JtVjRjRzl5ZEhNdVUyOWphMlYwSUQwZ1UyOWphMlYwTzF4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNTJZWElnWDE5cGJYQnZjblJFWldaaGRXeDBJRDBnS0hSb2FYTWdKaVlnZEdocGN5NWZYMmx0Y0c5eWRFUmxabUYxYkhRcElIeDhJR1oxYm1OMGFXOXVJQ2h0YjJRcElIdGNiaUFnSUNCeVpYUjFjbTRnS0cxdlpDQW1KaUJ0YjJRdVgxOWxjMDF2WkhWc1pTa2dQeUJ0YjJRZ09pQjdJRndpWkdWbVlYVnNkRndpT2lCdGIyUWdmVHRjYm4wN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMblZ5YkNBOUlIWnZhV1FnTUR0Y2JtTnZibk4wSUdWdVoybHVaVjlwYjE5amJHbGxiblJmTVNBOUlISmxjWFZwY21Vb1hDSmxibWRwYm1VdWFXOHRZMnhwWlc1MFhDSXBPMXh1WTI5dWMzUWdaR1ZpZFdkZk1TQTlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2laR1ZpZFdkY0lpa3BPeUF2THlCa1pXSjFaeWdwWEc1amIyNXpkQ0JrWldKMVp5QTlJR1JsWW5Wblh6RXVaR1ZtWVhWc2RDaGNJbk52WTJ0bGRDNXBieTFqYkdsbGJuUTZkWEpzWENJcE95QXZMeUJrWldKMVp5Z3BYRzR2S2lwY2JpQXFJRlZTVENCd1lYSnpaWEl1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSFZ5YVNBdElIVnliRnh1SUNvZ1FIQmhjbUZ0SUhCaGRHZ2dMU0IwYUdVZ2NtVnhkV1Z6ZENCd1lYUm9JRzltSUhSb1pTQmpiMjV1WldOMGFXOXVYRzRnS2lCQWNHRnlZVzBnYkc5aklDMGdRVzRnYjJKcVpXTjBJRzFsWVc1MElIUnZJRzFwYldsaklIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1Y2JpQXFJQ0FnSUNBZ0lDQkVaV1poZFd4MGN5QjBieUIzYVc1a2IzY3ViRzlqWVhScGIyNHVYRzRnS2lCQWNIVmliR2xqWEc0Z0tpOWNibVoxYm1OMGFXOXVJSFZ5YkNoMWNta3NJSEJoZEdnZ1BTQmNJbHdpTENCc2IyTXBJSHRjYmlBZ0lDQnNaWFFnYjJKcUlEMGdkWEpwTzF4dUlDQWdJQzh2SUdSbFptRjFiSFFnZEc4Z2QybHVaRzkzTG14dlkyRjBhVzl1WEc0Z0lDQWdiRzlqSUQwZ2JHOWpJSHg4SUNoMGVYQmxiMllnYkc5allYUnBiMjRnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnSmlZZ2JHOWpZWFJwYjI0cE8xeHVJQ0FnSUdsbUlDaHVkV3hzSUQwOUlIVnlhU2xjYmlBZ0lDQWdJQ0FnZFhKcElEMGdiRzlqTG5CeWIzUnZZMjlzSUNzZ1hDSXZMMXdpSUNzZ2JHOWpMbWh2YzNRN1hHNGdJQ0FnTHk4Z2NtVnNZWFJwZG1VZ2NHRjBhQ0J6ZFhCd2IzSjBYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjFjbWtnUFQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2lMMXdpSUQwOVBTQjFjbWt1WTJoaGNrRjBLREFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hDSXZYQ0lnUFQwOUlIVnlhUzVqYUdGeVFYUW9NU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNta2dQU0JzYjJNdWNISnZkRzlqYjJ3Z0t5QjFjbWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY21rZ1BTQnNiMk11YUc5emRDQXJJSFZ5YVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9JUzllS0doMGRIQnpQM3gzYzNNL0tUcGNYQzljWEM4dkxuUmxjM1FvZFhKcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKd2NtOTBiMk52YkMxc1pYTnpJSFZ5YkNBbGMxd2lMQ0IxY21rcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGd2lkVzVrWldacGJtVmtYQ0lnSVQwOUlIUjVjR1Z2WmlCc2IyTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY21rZ1BTQnNiMk11Y0hKdmRHOWpiMndnS3lCY0lpOHZYQ0lnS3lCMWNtazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbWtnUFNCY0ltaDBkSEJ6T2k4dlhDSWdLeUIxY21rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdjR0Z5YzJWY2JpQWdJQ0FnSUNBZ1pHVmlkV2NvWENKd1lYSnpaU0FsYzF3aUxDQjFjbWtwTzF4dUlDQWdJQ0FnSUNCdlltb2dQU0JsYm1kcGJtVmZhVzlmWTJ4cFpXNTBYekV1Y0dGeWMyVW9kWEpwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYldGclpTQnpkWEpsSUhkbElIUnlaV0YwSUdCc2IyTmhiR2h2YzNRNk9EQmdJR0Z1WkNCZ2JHOWpZV3hvYjNOMFlDQmxjWFZoYkd4NVhHNGdJQ0FnYVdZZ0tDRnZZbW91Y0c5eWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0wxNG9hSFIwY0h4M2N5a2tMeTUwWlhOMEtHOWlhaTV3Y205MGIyTnZiQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlpYWk1d2IzSjBJRDBnWENJNE1Gd2lPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0M5ZUtHaDBkSEI4ZDNNcGN5UXZMblJsYzNRb2IySnFMbkJ5YjNSdlkyOXNLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkpxTG5CdmNuUWdQU0JjSWpRME0xd2lPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHOWlhaTV3WVhSb0lEMGdiMkpxTG5CaGRHZ2dmSHdnWENJdlhDSTdYRzRnSUNBZ1kyOXVjM1FnYVhCMk5pQTlJRzlpYWk1b2IzTjBMbWx1WkdWNFQyWW9YQ0k2WENJcElDRTlQU0F0TVR0Y2JpQWdJQ0JqYjI1emRDQm9iM04wSUQwZ2FYQjJOaUEvSUZ3aVcxd2lJQ3NnYjJKcUxtaHZjM1FnS3lCY0lsMWNJaUE2SUc5aWFpNW9iM04wTzF4dUlDQWdJQzh2SUdSbFptbHVaU0IxYm1seGRXVWdhV1JjYmlBZ0lDQnZZbW91YVdRZ1BTQnZZbW91Y0hKdmRHOWpiMndnS3lCY0lqb3ZMMXdpSUNzZ2FHOXpkQ0FySUZ3aU9sd2lJQ3NnYjJKcUxuQnZjblFnS3lCd1lYUm9PMXh1SUNBZ0lDOHZJR1JsWm1sdVpTQm9jbVZtWEc0Z0lDQWdiMkpxTG1oeVpXWWdQVnh1SUNBZ0lDQWdJQ0J2WW1vdWNISnZkRzlqYjJ3Z0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENJNkx5OWNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9iM04wSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hzYjJNZ0ppWWdiRzlqTG5CdmNuUWdQVDA5SUc5aWFpNXdiM0owSUQ4Z1hDSmNJaUE2SUZ3aU9sd2lJQ3NnYjJKcUxuQnZjblFwTzF4dUlDQWdJSEpsZEhWeWJpQnZZbW83WEc1OVhHNWxlSEJ2Y25SekxuVnliQ0E5SUhWeWJEdGNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dVpYaHdiM0owY3k1b1lYTkRUMUpUSUQwZ2RtOXBaQ0F3TzF4dUx5OGdhVzF3YjNKMFpXUWdabkp2YlNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlkyOXRjRzl1Wlc1MEwyaGhjeTFqYjNKelhHNXNaWFFnZG1Gc2RXVWdQU0JtWVd4elpUdGNiblJ5ZVNCN1hHNGdJQ0FnZG1Gc2RXVWdQU0IwZVhCbGIyWWdXRTFNU0hSMGNGSmxjWFZsYzNRZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbVhHNGdJQ0FnSUNBZ0lDZDNhWFJvUTNKbFpHVnVkR2xoYkhNbklHbHVJRzVsZHlCWVRVeElkSFJ3VW1WeGRXVnpkQ2dwTzF4dWZWeHVZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQzh2SUdsbUlGaE5URWgwZEhBZ2MzVndjRzl5ZENCcGN5QmthWE5oWW14bFpDQnBiaUJKUlNCMGFHVnVJR2wwSUhkcGJHd2dkR2h5YjNkY2JpQWdJQ0F2THlCM2FHVnVJSFJ5ZVdsdVp5QjBieUJqY21WaGRHVmNibjFjYm1WNGNHOXlkSE11YUdGelEwOVNVeUE5SUhaaGJIVmxPMXh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc0dkx5QnBiWEJ2Y25SbFpDQm1jbTl0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5bllXeHJiaTl4ZFdWeWVYTjBjbWx1WjF4dUx5b3FYRzRnS2lCRGIyMXdhV3hsY3lCaElIRjFaWEo1YzNSeWFXNW5YRzRnS2lCU1pYUjFjbTV6SUhOMGNtbHVaeUJ5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUIwYUdVZ2IySnFaV04wWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlYRzRnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFxTDF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NWtaV052WkdVZ1BTQmxlSEJ2Y25SekxtVnVZMjlrWlNBOUlIWnZhV1FnTUR0Y2JtWjFibU4wYVc5dUlHVnVZMjlrWlNodlltb3BJSHRjYmlBZ0lDQnNaWFFnYzNSeUlEMGdKeWM3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0JwYmlCdlltb3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOWlhaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMGNpNXNaVzVuZEdncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUnlJQ3M5SUNjbUp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNpQXJQU0JsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvYVNrZ0t5QW5QU2NnS3lCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2IySnFXMmxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjM1J5TzF4dWZWeHVaWGh3YjNKMGN5NWxibU52WkdVZ1BTQmxibU52WkdVN1hHNHZLaXBjYmlBcUlGQmhjbk5sY3lCaElITnBiWEJzWlNCeGRXVnllWE4wY21sdVp5QnBiblJ2SUdGdUlHOWlhbVZqZEZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J4YzF4dUlDb2dRR0Z3YVNCd2NtbDJZWFJsWEc0Z0tpOWNibVoxYm1OMGFXOXVJR1JsWTI5a1pTaHhjeWtnZTF4dUlDQWdJR3hsZENCeGNua2dQU0I3ZlR0Y2JpQWdJQ0JzWlhRZ2NHRnBjbk1nUFNCeGN5NXpjR3hwZENnbkppY3BPMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3TENCc0lEMGdjR0ZwY25NdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR3hsZENCd1lXbHlJRDBnY0dGcGNuTmJhVjB1YzNCc2FYUW9KejBuS1R0Y2JpQWdJQ0FnSUNBZ2NYSjVXMlJsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h3WVdseVd6QmRLVjBnUFNCa1pXTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2NHRnBjbHN4WFNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnhjbms3WEc1OVhHNWxlSEJ2Y25SekxtUmxZMjlrWlNBOUlHUmxZMjlrWlR0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTV3WVhKelpTQTlJSFp2YVdRZ01EdGNiaTh2SUdsdGNHOXlkR1ZrSUdaeWIyMGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMmRoYkd0dUwzQmhjbk5sZFhKcFhHNHZLaXBjYmlBcUlGQmhjbk5sY3lCaGJpQlZVa2xjYmlBcVhHNGdLaUJBWVhWMGFHOXlJRk4wWlhabGJpQk1aWFpwZEdoaGJpQThjM1JsZG1WdWJHVjJhWFJvWVc0dVkyOXRQaUFvVFVsVUlHeHBZMlZ1YzJVcFhHNGdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQXFMMXh1WTI5dWMzUWdjbVVnUFNBdlhpZy9PaWcvSVZ0ZU9rQmRLenBiWGpwQVhGd3ZYU3BBS1Nob2RIUndmR2gwZEhCemZIZHpmSGR6Y3lrNlhGd3ZYRnd2S1Q4b0tEODZLQ2hiWGpwQVhTb3BLRDg2T2loYlhqcEFYU29wS1Q4cFAwQXBQeWdvUHpwYllTMW1NQzA1WFhzd0xEUjlPaWw3TWl3M2ZWdGhMV1l3TFRsZGV6QXNOSDE4VzE0NlhGd3ZQeU5kS2lrb1B6bzZLRnhjWkNvcEtUOHBLQ2dvWEZ3dktEODZXMTQvSTEwb1B5RmJYajhqWEZ3dlhTcGNYQzViWGo4alhGd3ZMbDByS0Q4Nld6OGpYWHdrS1NrcEtseGNMejhwUHloYlhqOGpYRnd2WFNvcEtTZy9PbHhjUHloYlhpTmRLaWtwUHlnL09pTW9MaW9wS1Q4cEx6dGNibU52Ym5OMElIQmhjblJ6SUQwZ1cxeHVJQ0FnSUNkemIzVnlZMlVuTENBbmNISnZkRzlqYjJ3bkxDQW5ZWFYwYUc5eWFYUjVKeXdnSjNWelpYSkpibVp2Snl3Z0ozVnpaWEluTENBbmNHRnpjM2R2Y21RbkxDQW5hRzl6ZENjc0lDZHdiM0owSnl3Z0ozSmxiR0YwYVhabEp5d2dKM0JoZEdnbkxDQW5aR2x5WldOMGIzSjVKeXdnSjJacGJHVW5MQ0FuY1hWbGNua25MQ0FuWVc1amFHOXlKMXh1WFR0Y2JtWjFibU4wYVc5dUlIQmhjbk5sS0hOMGNpa2dlMXh1SUNBZ0lHTnZibk4wSUhOeVl5QTlJSE4wY2l3Z1lpQTlJSE4wY2k1cGJtUmxlRTltS0NkYkp5a3NJR1VnUFNCemRISXVhVzVrWlhoUFppZ25YU2NwTzF4dUlDQWdJR2xtSUNoaUlDRTlJQzB4SUNZbUlHVWdJVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdjM1J5SUQwZ2MzUnlMbk4xWW5OMGNtbHVaeWd3TENCaUtTQXJJSE4wY2k1emRXSnpkSEpwYm1jb1lpd2daU2t1Y21Wd2JHRmpaU2d2T2k5bkxDQW5PeWNwSUNzZ2MzUnlMbk4xWW5OMGNtbHVaeWhsTENCemRISXViR1Z1WjNSb0tUdGNiaUFnSUNCOVhHNGdJQ0FnYkdWMElHMGdQU0J5WlM1bGVHVmpLSE4wY2lCOGZDQW5KeWtzSUhWeWFTQTlJSHQ5TENCcElEMGdNVFE3WEc0Z0lDQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJQ0FnSUNCMWNtbGJjR0Z5ZEhOYmFWMWRJRDBnYlZ0cFhTQjhmQ0FuSnp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dJZ0lUMGdMVEVnSmlZZ1pTQWhQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQjFjbWt1YzI5MWNtTmxJRDBnYzNKak8xeHVJQ0FnSUNBZ0lDQjFjbWt1YUc5emRDQTlJSFZ5YVM1b2IzTjBMbk4xWW5OMGNtbHVaeWd4TENCMWNta3VhRzl6ZEM1c1pXNW5kR2dnTFNBeEtTNXlaWEJzWVdObEtDODdMMmNzSUNjNkp5azdYRzRnSUNBZ0lDQWdJSFZ5YVM1aGRYUm9iM0pwZEhrZ1BTQjFjbWt1WVhWMGFHOXlhWFI1TG5KbGNHeGhZMlVvSjFzbkxDQW5KeWt1Y21Wd2JHRmpaU2duWFNjc0lDY25LUzV5WlhCc1lXTmxLQzg3TDJjc0lDYzZKeWs3WEc0Z0lDQWdJQ0FnSUhWeWFTNXBjSFkyZFhKcElEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdkWEpwTG5CaGRHaE9ZVzFsY3lBOUlIQmhkR2hPWVcxbGN5aDFjbWtzSUhWeWFWc25jR0YwYUNkZEtUdGNiaUFnSUNCMWNta3VjWFZsY25sTFpYa2dQU0J4ZFdWeWVVdGxlU2gxY21rc0lIVnlhVnNuY1hWbGNua25YU2s3WEc0Z0lDQWdjbVYwZFhKdUlIVnlhVHRjYm4xY2JtVjRjRzl5ZEhNdWNHRnljMlVnUFNCd1lYSnpaVHRjYm1aMWJtTjBhVzl1SUhCaGRHaE9ZVzFsY3lodlltb3NJSEJoZEdncElIdGNiaUFnSUNCamIyNXpkQ0J5WldkNElEMGdMMXhjTDNzeUxEbDlMMmNzSUc1aGJXVnpJRDBnY0dGMGFDNXlaWEJzWVdObEtISmxaM2dzSUZ3aUwxd2lLUzV6Y0d4cGRDaGNJaTljSWlrN1hHNGdJQ0FnYVdZZ0tIQmhkR2d1YzNWaWMzUnlLREFzSURFcElEMDlJQ2N2SnlCOGZDQndZWFJvTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J1WVcxbGN5NXpjR3hwWTJVb01Dd2dNU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h3WVhSb0xuTjFZbk4wY2lod1lYUm9MbXhsYm1kMGFDQXRJREVzSURFcElEMDlJQ2N2SnlrZ2UxeHVJQ0FnSUNBZ0lDQnVZVzFsY3k1emNHeHBZMlVvYm1GdFpYTXViR1Z1WjNSb0lDMGdNU3dnTVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVZVzFsY3p0Y2JuMWNibVoxYm1OMGFXOXVJSEYxWlhKNVMyVjVLSFZ5YVN3Z2NYVmxjbmtwSUh0Y2JpQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ2UzMDdYRzRnSUNBZ2NYVmxjbmt1Y21Wd2JHRmpaU2d2S0Q4Nlhud21LU2hiWGlZOVhTb3BQVDhvVzE0bVhTb3BMMmNzSUdaMWJtTjBhVzl1SUNna01Dd2dKREVzSUNReUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNna01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnNrTVYwZ1BTQWtNanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQmtZWFJoTzF4dWZWeHVJaXdpTHk4Z2FXMXdiM0owWldRZ1puSnZiU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZFc1emFHbG1kR2x2TDNsbFlYTjBYRzRuZFhObElITjBjbWxqZENjN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMbmxsWVhOMElEMGdaWGh3YjNKMGN5NWtaV052WkdVZ1BTQmxlSEJ2Y25SekxtVnVZMjlrWlNBOUlIWnZhV1FnTUR0Y2JtTnZibk4wSUdGc2NHaGhZbVYwSUQwZ0p6QXhNak0wTlRZM09EbEJRa05FUlVaSFNFbEtTMHhOVGs5UVVWSlRWRlZXVjFoWldtRmlZMlJsWm1kb2FXcHJiRzF1YjNCeGNuTjBkWFozZUhsNkxWOG5Mbk53YkdsMEtDY25LU3dnYkdWdVozUm9JRDBnTmpRc0lHMWhjQ0E5SUh0OU8xeHViR1YwSUhObFpXUWdQU0F3TENCcElEMGdNQ3dnY0hKbGRqdGNiaThxS2x4dUlDb2dVbVYwZFhKdUlHRWdjM1J5YVc1bklISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2MzQmxZMmxtYVdWa0lHNTFiV0psY2k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYm5WdElGUm9aU0J1ZFcxaVpYSWdkRzhnWTI5dWRtVnlkQzVjYmlBcUlFQnlaWFIxY201eklIdFRkSEpwYm1kOUlGUm9aU0J6ZEhKcGJtY2djbVZ3Y21WelpXNTBZWFJwYjI0Z2IyWWdkR2hsSUc1MWJXSmxjaTVjYmlBcUlFQmhjR2tnY0hWaWJHbGpYRzRnS2k5Y2JtWjFibU4wYVc5dUlHVnVZMjlrWlNodWRXMHBJSHRjYmlBZ0lDQnNaWFFnWlc1amIyUmxaQ0E5SUNjbk8xeHVJQ0FnSUdSdklIdGNiaUFnSUNBZ0lDQWdaVzVqYjJSbFpDQTlJR0ZzY0doaFltVjBXMjUxYlNBbElHeGxibWQwYUYwZ0t5QmxibU52WkdWa08xeHVJQ0FnSUNBZ0lDQnVkVzBnUFNCTllYUm9MbVpzYjI5eUtHNTFiU0F2SUd4bGJtZDBhQ2s3WEc0Z0lDQWdmU0IzYUdsc1pTQW9iblZ0SUQ0Z01DazdYRzRnSUNBZ2NtVjBkWEp1SUdWdVkyOWtaV1E3WEc1OVhHNWxlSEJ2Y25SekxtVnVZMjlrWlNBOUlHVnVZMjlrWlR0Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1SUhSb1pTQnBiblJsWjJWeUlIWmhiSFZsSUhOd1pXTnBabWxsWkNCaWVTQjBhR1VnWjJsMlpXNGdjM1J5YVc1bkxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCemRISWdWR2hsSUhOMGNtbHVaeUIwYnlCamIyNTJaWEowTGx4dUlDb2dRSEpsZEhWeWJuTWdlMDUxYldKbGNuMGdWR2hsSUdsdWRHVm5aWElnZG1Gc2RXVWdjbVZ3Y21WelpXNTBaV1FnWW5rZ2RHaGxJSE4wY21sdVp5NWNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYm1aMWJtTjBhVzl1SUdSbFkyOWtaU2h6ZEhJcElIdGNiaUFnSUNCc1pYUWdaR1ZqYjJSbFpDQTlJREE3WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElITjBjaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQmtaV052WkdWa0lEMGdaR1ZqYjJSbFpDQXFJR3hsYm1kMGFDQXJJRzFoY0Z0emRISXVZMmhoY2tGMEtHa3BYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdSbFkyOWtaV1E3WEc1OVhHNWxlSEJ2Y25SekxtUmxZMjlrWlNBOUlHUmxZMjlrWlR0Y2JpOHFLbHh1SUNvZ1dXVmhjM1E2SUVFZ2RHbHVlU0JuY205M2FXNW5JR2xrSUdkbGJtVnlZWFJ2Y2k1Y2JpQXFYRzRnS2lCQWNtVjBkWEp1Y3lCN1UzUnlhVzVuZlNCQklIVnVhWEYxWlNCcFpDNWNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYm1aMWJtTjBhVzl1SUhsbFlYTjBLQ2tnZTF4dUlDQWdJR052Ym5OMElHNXZkeUE5SUdWdVkyOWtaU2dyYm1WM0lFUmhkR1VvS1NrN1hHNGdJQ0FnYVdZZ0tHNXZkeUFoUFQwZ2NISmxkaWxjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sWldRZ1BTQXdMQ0J3Y21WMklEMGdibTkzTzF4dUlDQWdJSEpsZEhWeWJpQnViM2NnS3lBbkxpY2dLeUJsYm1OdlpHVW9jMlZsWkNzcktUdGNibjFjYm1WNGNHOXlkSE11ZVdWaGMzUWdQU0I1WldGemREdGNiaTh2WEc0dkx5Qk5ZWEFnWldGamFDQmphR0Z5WVdOMFpYSWdkRzhnYVhSeklHbHVaR1Y0TGx4dUx5OWNibVp2Y2lBb095QnBJRHdnYkdWdVozUm9PeUJwS3lzcFhHNGdJQ0FnYldGd1cyRnNjR2hoWW1WMFcybGRYU0E5SUdrN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11WjJ4dlltRnNWR2hwYzFOb2FXMGdQU0IyYjJsa0lEQTdYRzVsZUhCdmNuUnpMbWRzYjJKaGJGUm9hWE5UYUdsdElEMGdLQ2dwSUQwK0lIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITmxiR1lnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGJHWTdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSGRwYm1SdmR6dGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkdkVzVqZEdsdmJpaGNJbkpsZEhWeWJpQjBhR2x6WENJcEtDazdYRzRnSUNBZ2ZWeHVmU2tvS1R0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTV3WVhKelpTQTlJR1Y0Y0c5eWRITXVhVzV6ZEdGc2JGUnBiV1Z5Um5WdVkzUnBiMjV6SUQwZ1pYaHdiM0owY3k1MGNtRnVjM0J2Y25SeklEMGdaWGh3YjNKMGN5NVVjbUZ1YzNCdmNuUWdQU0JsZUhCdmNuUnpMbkJ5YjNSdlkyOXNJRDBnWlhod2IzSjBjeTVUYjJOclpYUWdQU0IyYjJsa0lEQTdYRzVqYjI1emRDQnpiMk5yWlhSZmFuTmZNU0E5SUhKbGNYVnBjbVVvWENJdUwzTnZZMnRsZEM1cWMxd2lLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbE52WTJ0bGRGd2lMQ0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnYzI5amEyVjBYMnB6WHpFdVUyOWphMlYwT3lCOUlIMHBPMXh1Wlhod2IzSjBjeTV3Y205MGIyTnZiQ0E5SUhOdlkydGxkRjlxYzE4eExsTnZZMnRsZEM1d2NtOTBiMk52YkR0Y2JuWmhjaUIwY21GdWMzQnZjblJmYW5OZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDNSeVlXNXpjRzl5ZEM1cWMxd2lLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbFJ5WVc1emNHOXlkRndpTENCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2RISmhibk53YjNKMFgycHpYekV1VkhKaGJuTndiM0owT3lCOUlIMHBPMXh1ZG1GeUlHbHVaR1Y0WDJwelh6RWdQU0J5WlhGMWFYSmxLRndpTGk5MGNtRnVjM0J2Y25SekwybHVaR1Y0TG1welhDSXBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lkSEpoYm5Od2IzSjBjMXdpTENCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2FXNWtaWGhmYW5OZk1TNTBjbUZ1YzNCdmNuUnpPeUI5SUgwcE8xeHVkbUZ5SUhWMGFXeGZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMM1YwYVd3dWFuTmNJaWs3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pwYm5OMFlXeHNWR2x0WlhKR2RXNWpkR2x2Ym5OY0lpd2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSFYwYVd4ZmFuTmZNUzVwYm5OMFlXeHNWR2x0WlhKR2RXNWpkR2x2Ym5NN0lIMGdmU2s3WEc1MllYSWdjR0Z5YzJWMWNtbGZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMk52Ym5SeWFXSXZjR0Z5YzJWMWNta3Vhbk5jSWlrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKd1lYSnpaVndpTENCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2NHRnljMlYxY21sZmFuTmZNUzV3WVhKelpUc2dmU0I5S1R0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVkbUZ5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ0E5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTlwYlhCdmNuUkVaV1poZFd4MEtTQjhmQ0JtZFc1amRHbHZiaUFvYlc5a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNodGIyUWdKaVlnYlc5a0xsOWZaWE5OYjJSMWJHVXBJRDhnYlc5a0lEb2dleUJjSW1SbFptRjFiSFJjSWpvZ2JXOWtJSDA3WEc1OU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVUYjJOclpYUWdQU0IyYjJsa0lEQTdYRzVqYjI1emRDQnBibVJsZUY5cWMxOHhJRDBnY21WeGRXbHlaU2hjSWk0dmRISmhibk53YjNKMGN5OXBibVJsZUM1cWMxd2lLVHRjYm1OdmJuTjBJSFYwYVd4ZmFuTmZNU0E5SUhKbGNYVnBjbVVvWENJdUwzVjBhV3d1YW5OY0lpazdYRzVqYjI1emRDQndZWEp6WlhGelgycHpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOWpiMjUwY21saUwzQmhjbk5sY1hNdWFuTmNJaWs3WEc1amIyNXpkQ0J3WVhKelpYVnlhVjlxYzE4eElEMGdjbVZ4ZFdseVpTaGNJaTR2WTI5dWRISnBZaTl3WVhKelpYVnlhUzVxYzF3aUtUdGNibU52Ym5OMElHUmxZblZuWHpFZ1BTQmZYMmx0Y0c5eWRFUmxabUYxYkhRb2NtVnhkV2x5WlNoY0ltUmxZblZuWENJcEtUc2dMeThnWkdWaWRXY29LVnh1WTI5dWMzUWdZMjl0Y0c5dVpXNTBYMlZ0YVhSMFpYSmZNU0E5SUhKbGNYVnBjbVVvWENKQWMyOWphMlYwTG1sdkwyTnZiWEJ2Ym1WdWRDMWxiV2wwZEdWeVhDSXBPMXh1WTI5dWMzUWdaVzVuYVc1bFgybHZYM0JoY25ObGNsOHhJRDBnY21WeGRXbHlaU2hjSW1WdVoybHVaUzVwYnkxd1lYSnpaWEpjSWlrN1hHNWpiMjV6ZENCa1pXSjFaeUE5SUNnd0xDQmtaV0oxWjE4eExtUmxabUYxYkhRcEtGd2laVzVuYVc1bExtbHZMV05zYVdWdWREcHpiMk5yWlhSY0lpazdJQzh2SUdSbFluVm5LQ2xjYm1Oc1lYTnpJRk52WTJ0bGRDQmxlSFJsYm1SeklHTnZiWEJ2Ym1WdWRGOWxiV2wwZEdWeVh6RXVSVzFwZEhSbGNpQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMjlqYTJWMElHTnZibk4wY25WamRHOXlMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOFQySnFaV04wZlNCMWNta2diM0lnYjNCMGFXOXVjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJ6SUMwZ2IzQjBhVzl1YzF4dUlDQWdJQ0FxSUVCaGNHa2djSFZpYkdsalhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2RYSnBMQ0J2Y0hSeklEMGdlMzBwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFZ5YVNBbUppQmNJbTlpYW1WamRGd2lJRDA5UFNCMGVYQmxiMllnZFhKcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpJRDBnZFhKcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKcElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZFhKcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNta2dQU0FvTUN3Z2NHRnljMlYxY21sZmFuTmZNUzV3WVhKelpTa29kWEpwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNdWFHOXpkRzVoYldVZ1BTQjFjbWt1YUc5emREdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RITXVjMlZqZFhKbElEMGdkWEpwTG5CeWIzUnZZMjlzSUQwOVBTQmNJbWgwZEhCelhDSWdmSHdnZFhKcExuQnliM1J2WTI5c0lEMDlQU0JjSW5kemMxd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBjeTV3YjNKMElEMGdkWEpwTG5CdmNuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kWEpwTG5GMVpYSjVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNdWNYVmxjbmtnUFNCMWNta3VjWFZsY25rN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9iM0IwY3k1b2IzTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjSFJ6TG1odmMzUnVZVzFsSUQwZ0tEQXNJSEJoY25ObGRYSnBYMnB6WHpFdWNHRnljMlVwS0c5d2RITXVhRzl6ZENrdWFHOXpkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBb01Dd2dkWFJwYkY5cWMxOHhMbWx1YzNSaGJHeFVhVzFsY2taMWJtTjBhVzl1Y3lrb2RHaHBjeXdnYjNCMGN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVmpkWEpsSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJRzUxYkd3Z0lUMGdiM0IwY3k1elpXTjFjbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUc5d2RITXVjMlZqZFhKbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQjBlWEJsYjJZZ2JHOWpZWFJwYjI0Z0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdYQ0pvZEhSd2N6cGNJaUE5UFQwZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3N1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxtaHZjM1J1WVcxbElDWW1JQ0Z2Y0hSekxuQnZjblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHNXZJSEJ2Y25RZ2FYTWdjM0JsWTJsbWFXVmtJRzFoYm5WaGJHeDVMQ0IxYzJVZ2RHaGxJSEJ5YjNSdlkyOXNJR1JsWm1GMWJIUmNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RITXVjRzl5ZENBOUlIUm9hWE11YzJWamRYSmxJRDhnWENJME5ETmNJaUE2SUZ3aU9EQmNJanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbWh2YzNSdVlXMWxJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkSE11YUc5emRHNWhiV1VnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2RIbHdaVzltSUd4dlkyRjBhVzl1SUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z2JHOWpZWFJwYjI0dWFHOXpkRzVoYldVZ09pQmNJbXh2WTJGc2FHOXpkRndpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3YjNKMElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RITXVjRzl5ZENCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBlWEJsYjJZZ2JHOWpZWFJwYjI0Z0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdiRzlqWVhScGIyNHVjRzl5ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JR3h2WTJGMGFXOXVMbkJ2Y25SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUIwYUdsekxuTmxZM1Z5WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCY0lqUTBNMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUZ3aU9EQmNJaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSEpoYm5Od2IzSjBjeUE5SUc5d2RITXVkSEpoYm5Od2IzSjBjeUI4ZkNCYlhDSndiMnhzYVc1blhDSXNJRndpZDJWaWMyOWphMlYwWENKZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbFlXUjVVM1JoZEdVZ1BTQmNJbHdpTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR5YVhSbFFuVm1abVZ5SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISmxka0oxWm1abGNreGxiaUE5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjNCMGN5QTlJRTlpYW1WamRDNWhjM05wWjI0b2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFEb2dYQ0l2Wlc1bmFXNWxMbWx2WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWjJWdWREb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYVhSb1EzSmxaR1Z1ZEdsaGJITTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhCbmNtRmtaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhScGJXVnpkR0Z0Y0ZCaGNtRnRPaUJjSW5SY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGJXVnRZbVZ5VlhCbmNtRmtaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1JWYm1GMWRHaHZjbWw2WldRNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndaWEpOWlhOellXZGxSR1ZtYkdGMFpUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY21WemFHOXNaRG9nTVRBeU5GeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1emNHOXlkRTl3ZEdsdmJuTTZJSHQ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnh2YzJWUGJrSmxabTl5WlhWdWJHOWhaRG9nZEhKMVpWeHVJQ0FnSUNBZ0lDQjlMQ0J2Y0hSektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnpMbkJoZEdnZ1BTQjBhR2x6TG05d2RITXVjR0YwYUM1eVpYQnNZV05sS0M5Y1hDOGtMeXdnWENKY0lpa2dLeUJjSWk5Y0lqdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxtOXdkSE11Y1hWbGNua2dQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViM0IwY3k1eGRXVnllU0E5SUNnd0xDQndZWEp6WlhGelgycHpYekV1WkdWamIyUmxLU2gwYUdsekxtOXdkSE11Y1hWbGNua3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklITmxkQ0J2YmlCb1lXNWtjMmhoYTJWY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwWkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJuY21Ga1pYTWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CcGJtZEpiblJsY25aaGJDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsdVoxUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBdkx5QnpaWFFnYjI0Z2FHVmhjblJpWldGMFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsdVoxUnBiV1Z2ZFhSVWFXMWxjaUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWVdSa1JYWmxiblJNYVhOMFpXNWxjaUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJ6TG1Oc2IzTmxUMjVDWldadmNtVjFibXh2WVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJHYVhKbFptOTRJR05zYjNObGN5QjBhR1VnWTI5dWJtVmpkR2x2YmlCM2FHVnVJSFJvWlNCY0ltSmxabTl5WlhWdWJHOWhaRndpSUdWMlpXNTBJR2x6SUdWdGFYUjBaV1FnWW5WMElHNXZkQ0JEYUhKdmJXVXVJRlJvYVhNZ1pYWmxiblFnYkdsemRHVnVaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGJuTjFjbVZ6SUdWMlpYSjVJR0p5YjNkelpYSWdZbVZvWVhabGN5QjBhR1VnYzJGdFpTQW9ibThnWENKa2FYTmpiMjV1WldOMFhDSWdaWFpsYm5RZ1lYUWdkR2hsSUZOdlkydGxkQzVKVHlCc1pYWmxiQ0IzYUdWdUlIUm9aU0J3WVdkbElHbHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWTJ4dmMyVmtMM0psYkc5aFpHVmtLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0ppWldadmNtVjFibXh2WVdSY0lpd2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwY21GdWMzQnZjblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITnBiR1Z1ZEd4NUlHTnNiM05sSUhSb1pTQjBjbUZ1YzNCdmNuUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEhKaGJuTndiM0owTG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwY21GdWMzQnZjblF1WTJ4dmMyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWh2YzNSdVlXMWxJQ0U5UFNCY0lteHZZMkZzYUc5emRGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZabVpzYVc1bFJYWmxiblJNYVhOMFpXNWxjaUE5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOc2IzTmxLRndpZEhKaGJuTndiM0owSUdOc2IzTmxYQ0lzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQmNJbTVsZEhkdmNtc2dZMjl1Ym1WamRHbHZiaUJzYjNOMFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2liMlptYkdsdVpWd2lMQ0IwYUdsekxtOW1abXhwYm1WRmRtVnVkRXhwYzNSbGJtVnlMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNHVnVLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU55WldGMFpYTWdkSEpoYm5Od2IzSjBJRzltSUhSb1pTQm5hWFpsYmlCMGVYQmxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIUnlZVzV6Y0c5eWRDQnVZVzFsWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VkhKaGJuTndiM0owZlZ4dUlDQWdJQ0FxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOeVpXRjBaVlJ5WVc1emNHOXlkQ2h1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJR1JsWW5WbktDZGpjbVZoZEdsdVp5QjBjbUZ1YzNCdmNuUWdYQ0lsYzF3aUp5d2dibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhGMVpYSjVJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnZEdocGN5NXZjSFJ6TG5GMVpYSjVLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1lYQndaVzVrSUdWdVoybHVaUzVwYnlCd2NtOTBiMk52YkNCcFpHVnVkR2xtYVdWeVhHNGdJQ0FnSUNBZ0lIRjFaWEo1TGtWSlR5QTlJR1Z1WjJsdVpWOXBiMTl3WVhKelpYSmZNUzV3Y205MGIyTnZiRHRjYmlBZ0lDQWdJQ0FnTHk4Z2RISmhibk53YjNKMElHNWhiV1ZjYmlBZ0lDQWdJQ0FnY1hWbGNua3VkSEpoYm5Od2IzSjBJRDBnYm1GdFpUdGNiaUFnSUNBZ0lDQWdMeThnYzJWemMybHZiaUJwWkNCcFppQjNaU0JoYkhKbFlXUjVJR2hoZG1VZ2IyNWxYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWxrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjWFZsY25rdWMybGtJRDBnZEdocGN5NXBaRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM0IwY3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lIUm9hWE11YjNCMGN5NTBjbUZ1YzNCdmNuUlBjSFJwYjI1elcyNWhiV1ZkTENCMGFHbHpMbTl3ZEhNc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhGMVpYSjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyOWphMlYwT2lCMGFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHOXpkRzVoYldVNklIUm9hWE11YUc5emRHNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV04xY21VNklIUm9hWE11YzJWamRYSmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXlkRG9nZEdocGN5NXdiM0owWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmtaV0oxWnloY0ltOXdkR2x2Ym5NNklDVnFYQ0lzSUc5d2RITXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUdsdVpHVjRYMnB6WHpFdWRISmhibk53YjNKMGMxdHVZVzFsWFNodmNIUnpLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEhKaGJuTndiM0owSUhSdklIVnpaU0JoYm1RZ2MzUmhjblJ6SUhCeWIySmxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRR0Z3YVNCd2NtbDJZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdiM0JsYmlncElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhSeVlXNXpjRzl5ZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBjeTV5WlcxbGJXSmxjbFZ3WjNKaFpHVWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lGTnZZMnRsZEM1d2NtbHZjbGRsWW5OdlkydGxkRk4xWTJObGMzTWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEhKaGJuTndiM0owY3k1cGJtUmxlRTltS0Z3aWQyVmljMjlqYTJWMFhDSXBJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk53YjNKMElEMGdYQ0ozWldKemIyTnJaWFJjSWp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ3dJRDA5UFNCMGFHbHpMblJ5WVc1emNHOXlkSE11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJGYldsMElHVnljbTl5SUc5dUlHNWxlSFFnZEdsamF5QnpieUJwZENCallXNGdZbVVnYkdsemRHVnVaV1FnZEc5Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBWR2x0Wlc5MWRFWnVLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbVZ5Y205eVhDSXNJRndpVG04Z2RISmhibk53YjNKMGN5QmhkbUZwYkdGaWJHVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpjRzl5ZENBOUlIUm9hWE11ZEhKaGJuTndiM0owYzFzd1hUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxZV1I1VTNSaGRHVWdQU0JjSW05d1pXNXBibWRjSWp0Y2JpQWdJQ0FnSUNBZ0x5OGdVbVYwY25rZ2QybDBhQ0IwYUdVZ2JtVjRkQ0IwY21GdWMzQnZjblFnYVdZZ2RHaGxJSFJ5WVc1emNHOXlkQ0JwY3lCa2FYTmhZbXhsWkNBb2FuTnZibkE2SUdaaGJITmxLVnh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTndiM0owSUQwZ2RHaHBjeTVqY21WaGRHVlVjbUZ1YzNCdmNuUW9kSEpoYm5Od2IzSjBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXY29YQ0psY25KdmNpQjNhR2xzWlNCamNtVmhkR2x1WnlCMGNtRnVjM0J2Y25RNklDVnpYQ0lzSUdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBjbUZ1YzNCdmNuUnpMbk5vYVdaMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl3Wlc0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGNtRnVjM0J2Y25RdWIzQmxiaWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZSeVlXNXpjRzl5ZENoMGNtRnVjM0J2Y25RcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCamRYSnlaVzUwSUhSeVlXNXpjRzl5ZEM0Z1JHbHpZV0pzWlhNZ2RHaGxJR1Y0YVhOMGFXNW5JRzl1WlNBb2FXWWdZVzU1S1M1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGUnlZVzV6Y0c5eWRDaDBjbUZ1YzNCdmNuUXBJSHRjYmlBZ0lDQWdJQ0FnWkdWaWRXY29YQ0p6WlhSMGFXNW5JSFJ5WVc1emNHOXlkQ0FsYzF3aUxDQjBjbUZ1YzNCdmNuUXVibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUnlZVzV6Y0c5eWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKamJHVmhjbWx1WnlCbGVHbHpkR2x1WnlCMGNtRnVjM0J2Y25RZ0pYTmNJaXdnZEdocGN5NTBjbUZ1YzNCdmNuUXVibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnlZVzV6Y0c5eWRDNXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QnpaWFFnZFhBZ2RISmhibk53YjNKMFhHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhKaGJuTndiM0owSUQwZ2RISmhibk53YjNKME8xeHVJQ0FnSUNBZ0lDQXZMeUJ6WlhRZ2RYQWdkSEpoYm5Od2IzSjBJR3hwYzNSbGJtVnljMXh1SUNBZ0lDQWdJQ0IwY21GdWMzQnZjblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXZiaWhjSW1SeVlXbHVYQ0lzSUhSb2FYTXViMjVFY21GcGJpNWlhVzVrS0hSb2FYTXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xtOXVLRndpY0dGamEyVjBYQ0lzSUhSb2FYTXViMjVRWVdOclpYUXVZbWx1WkNoMGFHbHpLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXZiaWhjSW1WeWNtOXlYQ0lzSUhSb2FYTXViMjVGY25KdmNpNWlhVzVrS0hSb2FYTXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xtOXVLRndpWTJ4dmMyVmNJaXdnY21WaGMyOXVJRDArSUhSb2FYTXViMjVEYkc5elpTaGNJblJ5WVc1emNHOXlkQ0JqYkc5elpWd2lMQ0J5WldGemIyNHBLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVSEp2WW1WeklHRWdkSEpoYm5Od2IzSjBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIUnlZVzV6Y0c5eWRDQnVZVzFsWEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKdlltVW9ibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQmtaV0oxWnlnbmNISnZZbWx1WnlCMGNtRnVjM0J2Y25RZ1hDSWxjMXdpSnl3Z2JtRnRaU2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQjBjbUZ1YzNCdmNuUWdQU0IwYUdsekxtTnlaV0YwWlZSeVlXNXpjRzl5ZENodVlXMWxLVHRjYmlBZ0lDQWdJQ0FnYkdWMElHWmhhV3hsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCVGIyTnJaWFF1Y0hKcGIzSlhaV0p6YjJOclpYUlRkV05qWlhOeklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5dVZISmhibk53YjNKMFQzQmxiaUE5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htWVdsc1pXUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXY29KM0J5YjJKbElIUnlZVzV6Y0c5eWRDQmNJaVZ6WENJZ2IzQmxibVZrSnl3Z2JtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzNCdmNuUXVjMlZ1WkNoYmV5QjBlWEJsT2lCY0luQnBibWRjSWl3Z1pHRjBZVG9nWENKd2NtOWlaVndpSUgxZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpjRzl5ZEM1dmJtTmxLRndpY0dGamEyVjBYQ0lzSUcxelp5QTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWmhhV3hsWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hjSW5CdmJtZGNJaUE5UFQwZ2JYTm5MblI1Y0dVZ0ppWWdYQ0p3Y205aVpWd2lJRDA5UFNCdGMyY3VaR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldKMVp5Z25jSEp2WW1VZ2RISmhibk53YjNKMElGd2lKWE5jSWlCd2IyNW5KeXdnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkWEJuY21Ga2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKMWNHZHlZV1JwYm1kY0lpd2dkSEpoYm5Od2IzSjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwY21GdWMzQnZjblFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZOdlkydGxkQzV3Y21sdmNsZGxZbk52WTJ0bGRGTjFZMk5sYzNNZ1BTQmNJbmRsWW5OdlkydGxkRndpSUQwOVBTQjBjbUZ1YzNCdmNuUXVibUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdjb0ozQmhkWE5wYm1jZ1kzVnljbVZ1ZENCMGNtRnVjM0J2Y25RZ1hDSWxjMXdpSnl3Z2RHaHBjeTUwY21GdWMzQnZjblF1Ym1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSEpoYm5Od2IzSjBMbkJoZFhObEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1ZV2xzWldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRndpWTJ4dmMyVmtYQ0lnUFQwOUlIUm9hWE11Y21WaFpIbFRkR0YwWlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXSjFaeWhjSW1Ob1lXNW5hVzVuSUhSeVlXNXpjRzl5ZENCaGJtUWdjMlZ1WkdsdVp5QjFjR2R5WVdSbElIQmhZMnRsZEZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z1ZFhBb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFZISmhibk53YjNKMEtIUnlZVzV6Y0c5eWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzNCdmNuUXVjMlZ1WkNoYmV5QjBlWEJsT2lCY0luVndaM0poWkdWY0lpQjlYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFJTWlhObGNuWmxaQ2hjSW5Wd1ozSmhaR1ZjSWl3Z2RISmhibk53YjNKMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Y0c5eWRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ3WjNKaFpHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWJIVnphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5LQ2R3Y205aVpTQjBjbUZ1YzNCdmNuUWdYQ0lsYzF3aUlHWmhhV3hsWkNjc0lHNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSWdQU0J1WlhjZ1JYSnliM0lvWENKd2NtOWlaU0JsY25KdmNsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRSFJ6TFdsbmJtOXlaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSXVkSEpoYm5Od2IzSjBJRDBnZEhKaGJuTndiM0owTG01aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEZKbGMyVnlkbVZrS0Z3aWRYQm5jbUZrWlVWeWNtOXlYQ0lzSUdWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdaeVpXVjZaVlJ5WVc1emNHOXlkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobVlXbHNaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRVzU1SUdOaGJHeGlZV05ySUdOaGJHeGxaQ0JpZVNCMGNtRnVjM0J2Y25RZ2MyaHZkV3hrSUdKbElHbG5ibTl5WldRZ2MybHVZMlVnYm05M1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtWVdsc1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlXNTFjQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5Od2IzSjBMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjM0J2Y25RZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRWhoYm1Sc1pTQmhibmtnWlhKeWIzSWdkR2hoZENCb1lYQndaVzV6SUhkb2FXeGxJSEJ5YjJKcGJtZGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyNWxjbkp2Y2lBOUlHVnljaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2lBOUlHNWxkeUJGY25KdmNpaGNJbkJ5YjJKbElHVnljbTl5T2lCY0lpQXJJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCQWRITXRhV2R1YjNKbFhHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpNTBjbUZ1YzNCdmNuUWdQU0IwY21GdWMzQnZjblF1Ym1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdaeVpXVjZaVlJ5WVc1emNHOXlkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdjb0ozQnliMkpsSUhSeVlXNXpjRzl5ZENCY0lpVnpYQ0lnWm1GcGJHVmtJR0psWTJGMWMyVWdiMllnWlhKeWIzSTZJQ1Z6Snl3Z2JtRnRaU3dnWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEZKbGMyVnlkbVZrS0Z3aWRYQm5jbUZrWlVWeWNtOXlYQ0lzSUdWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2IyNVVjbUZ1YzNCdmNuUkRiRzl6WlNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVpYSnliM0lvWENKMGNtRnVjM0J2Y25RZ1kyeHZjMlZrWENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkR2hsSUhOdlkydGxkQ0JwY3lCamJHOXpaV1FnZDJocGJHVWdkMlVuY21VZ2NISnZZbWx1WjF4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCdmJtTnNiM05sS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1bGNuSnZjaWhjSW5OdlkydGxkQ0JqYkc5elpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCMGFHVWdjMjlqYTJWMElHbHpJSFZ3WjNKaFpHVmtJSGRvYVd4bElIZGxKM0psSUhCeWIySnBibWRjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYjI1MWNHZHlZV1JsS0hSdktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSEpoYm5Od2IzSjBJQ1ltSUhSdkxtNWhiV1VnSVQwOUlIUnlZVzV6Y0c5eWRDNXVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvSjF3aUpYTmNJaUIzYjNKcmN5QXRJR0ZpYjNKMGFXNW5JRndpSlhOY0lpY3NJSFJ2TG01aGJXVXNJSFJ5WVc1emNHOXlkQzV1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbVZsZW1WVWNtRnVjM0J2Y25Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVWdZV3hzSUd4cGMzUmxibVZ5Y3lCdmJpQjBhR1VnZEhKaGJuTndiM0owSUdGdVpDQnZiaUJ6Wld4bVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOc1pXRnVkWEFnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzNCdmNuUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb1hDSnZjR1Z1WENJc0lHOXVWSEpoYm5Od2IzSjBUM0JsYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMzQnZjblF1Y21WdGIzWmxUR2x6ZEdWdVpYSW9YQ0psY25KdmNsd2lMQ0J2Ym1WeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Y0c5eWRDNXlaVzF2ZG1WTWFYTjBaVzVsY2loY0ltTnNiM05sWENJc0lHOXVWSEpoYm5Od2IzSjBRMnh2YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZabVlvWENKamJHOXpaVndpTENCdmJtTnNiM05sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyWm1LRndpZFhCbmNtRmthVzVuWENJc0lHOXVkWEJuY21Ga1pTazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhSeVlXNXpjRzl5ZEM1dmJtTmxLRndpYjNCbGJsd2lMQ0J2YmxSeVlXNXpjRzl5ZEU5d1pXNHBPMXh1SUNBZ0lDQWdJQ0IwY21GdWMzQnZjblF1YjI1alpTaGNJbVZ5Y205eVhDSXNJRzl1WlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0IwY21GdWMzQnZjblF1YjI1alpTaGNJbU5zYjNObFhDSXNJRzl1VkhKaGJuTndiM0owUTJ4dmMyVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVZMlVvWENKamJHOXpaVndpTENCdmJtTnNiM05sS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Ym1ObEtGd2lkWEJuY21Ga2FXNW5YQ0lzSUc5dWRYQm5jbUZrWlNrN1hHNGdJQ0FnSUNBZ0lIUnlZVzV6Y0c5eWRDNXZjR1Z1S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOaGJHeGxaQ0IzYUdWdUlHTnZibTVsWTNScGIyNGdhWE1nWkdWbGJXVmtJRzl3Wlc0dVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCdmJrOXdaVzRvS1NCN1hHNGdJQ0FnSUNBZ0lHUmxZblZuS0Z3aWMyOWphMlYwSUc5d1pXNWNJaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZoWkhsVGRHRjBaU0E5SUZ3aWIzQmxibHdpTzF4dUlDQWdJQ0FnSUNCVGIyTnJaWFF1Y0hKcGIzSlhaV0p6YjJOclpYUlRkV05qWlhOeklEMGdYQ0ozWldKemIyTnJaWFJjSWlBOVBUMGdkR2hwY3k1MGNtRnVjM0J2Y25RdWJtRnRaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKdmNHVnVYQ0lwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzZFhOb0tDazdYRzRnSUNBZ0lDQWdJQzh2SUhkbElHTm9aV05ySUdadmNpQmdjbVZoWkhsVGRHRjBaV0FnYVc0Z1kyRnpaU0JoYmlCZ2IzQmxibUJjYmlBZ0lDQWdJQ0FnTHk4Z2JHbHpkR1Z1WlhJZ1lXeHlaV0ZrZVNCamJHOXpaV1FnZEdobElITnZZMnRsZEZ4dUlDQWdJQ0FnSUNCcFppQW9YQ0p2Y0dWdVhDSWdQVDA5SUhSb2FYTXVjbVZoWkhsVGRHRjBaU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnpMblZ3WjNKaFpHVWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEhKaGJuTndiM0owTG5CaGRYTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV0oxWnloY0luTjBZWEowYVc1bklIVndaM0poWkdVZ2NISnZZbVZ6WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHa2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JDQTlJSFJvYVhNdWRYQm5jbUZrWlhNdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliMkpsS0hSb2FYTXVkWEJuY21Ga1pYTmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pYTWdZU0J3WVdOclpYUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFZWEJwSUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQnZibEJoWTJ0bGRDaHdZV05yWlhRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0Z3aWIzQmxibWx1WjF3aUlEMDlQU0IwYUdsekxuSmxZV1I1VTNSaGRHVWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2liM0JsYmx3aUlEMDlQU0IwYUdsekxuSmxZV1I1VTNSaGRHVWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMnh2YzJsdVoxd2lJRDA5UFNCMGFHbHpMbkpsWVdSNVUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktDZHpiMk5yWlhRZ2NtVmpaV2wyWlRvZ2RIbHdaU0JjSWlWelhDSXNJR1JoZEdFZ1hDSWxjMXdpSnl3Z2NHRmphMlYwTG5SNWNHVXNJSEJoWTJ0bGRDNWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRkpsYzJWeWRtVmtLRndpY0dGamEyVjBYQ0lzSUhCaFkydGxkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYjJOclpYUWdhWE1nYkdsMlpTQXRJR0Z1ZVNCd1lXTnJaWFFnWTI5MWJuUnpYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSU1pYTmxjblpsWkNoY0ltaGxZWEowWW1WaGRGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2NHRmphMlYwTG5SNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liM0JsYmx3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVTR0Z1WkhOb1lXdGxLRXBUVDA0dWNHRnljMlVvY0dGamEyVjBMbVJoZEdFcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luQnBibWRjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYTmxkRkJwYm1kVWFXMWxiM1YwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRkJoWTJ0bGRDaGNJbkJ2Ym1kY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEZKbGMyVnlkbVZrS0Z3aWNHbHVaMXdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJXbDBVbVZ6WlhKMlpXUW9YQ0p3YjI1blhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2laWEp5YjNKY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWEp5SUQwZ2JtVjNJRVZ5Y205eUtGd2ljMlZ5ZG1WeUlHVnljbTl5WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQWRITXRhV2R1YjNKbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y2k1amIyUmxJRDBnY0dGamEyVjBMbVJoZEdFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNUZjbkp2Y2lobGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2liV1Z6YzJGblpWd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSU1pYTmxjblpsWkNoY0ltUmhkR0ZjSWl3Z2NHRmphMlYwTG1SaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSU1pYTmxjblpsWkNoY0ltMWxjM05oWjJWY0lpd2djR0ZqYTJWMExtUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxZblZuS0Nkd1lXTnJaWFFnY21WalpXbDJaV1FnZDJsMGFDQnpiMk5yWlhRZ2NtVmhaSGxUZEdGMFpTQmNJaVZ6WENJbkxDQjBhR2x6TG5KbFlXUjVVM1JoZEdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR3hsWkNCMWNHOXVJR2hoYm1SemFHRnJaU0JqYjIxd2JHVjBhVzl1TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1JoZEdFZ0xTQm9ZVzVrYzJoaGEyVWdiMkpxWEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1SVlXNWtjMmhoYTJVb1pHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSU1pYTmxjblpsWkNoY0ltaGhibVJ6YUdGclpWd2lMQ0JrWVhSaEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cFpDQTlJR1JoZEdFdWMybGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnlZVzV6Y0c5eWRDNXhkV1Z5ZVM1emFXUWdQU0JrWVhSaExuTnBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR2R5WVdSbGN5QTlJSFJvYVhNdVptbHNkR1Z5VlhCbmNtRmtaWE1vWkdGMFlTNTFjR2R5WVdSbGN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHbHVaMGx1ZEdWeWRtRnNJRDBnWkdGMFlTNXdhVzVuU1c1MFpYSjJZV3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2x1WjFScGJXVnZkWFFnUFNCa1lYUmhMbkJwYm1kVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoZUZCaGVXeHZZV1FnUFNCa1lYUmhMbTFoZUZCaGVXeHZZV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVQY0dWdUtDazdYRzRnSUNBZ0lDQWdJQzh2SUVsdUlHTmhjMlVnYjNCbGJpQm9ZVzVrYkdWeUlHTnNiM05sY3lCemIyTnJaWFJjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2lZMnh2YzJWa1hDSWdQVDA5SUhSb2FYTXVjbVZoWkhsVGRHRjBaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhObGRGQnBibWRVYVcxbGIzVjBLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZEhNZ1lXNWtJSEpsYzJWMGN5QndhVzVuSUhScGJXVnZkWFFnZEdsdFpYSWdZbUZ6WldRZ2IyNGdjMlZ5ZG1WeUlIQnBibWR6TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WelpYUlFhVzVuVkdsdFpXOTFkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYkdWaGNsUnBiV1Z2ZFhSR2JpaDBhR2x6TG5CcGJtZFVhVzFsYjNWMFZHbHRaWElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJwYm1kVWFXMWxiM1YwVkdsdFpYSWdQU0IwYUdsekxuTmxkRlJwYldWdmRYUkdiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1UTJ4dmMyVW9YQ0p3YVc1bklIUnBiV1Z2ZFhSY0lpazdYRzRnSUNBZ0lDQWdJSDBzSUhSb2FYTXVjR2x1WjBsdWRHVnlkbUZzSUNzZ2RHaHBjeTV3YVc1blZHbHRaVzkxZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkSE11WVhWMGIxVnVjbVZtS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnBibWRVYVcxbGIzVjBWR2x0WlhJdWRXNXlaV1lvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRFlXeHNaV1FnYjI0Z1lHUnlZV2x1WUNCbGRtVnVkRnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRR0Z3YVNCd2NtbDJZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVFY21GcGJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWlVKMVptWmxjaTV6Y0d4cFkyVW9NQ3dnZEdocGN5NXdjbVYyUW5WbVptVnlUR1Z1S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwZEdsdVp5QndjbVYyUW5WbVptVnlUR1Z1SUQwZ01DQnBjeUIyWlhKNUlHbHRjRzl5ZEdGdWRGeHVJQ0FnSUNBZ0lDQXZMeUJtYjNJZ1pYaGhiWEJzWlN3Z2QyaGxiaUIxY0dkeVlXUnBibWNzSUhWd1ozSmhaR1VnY0dGamEyVjBJR2x6SUhObGJuUWdiM1psY2l4Y2JpQWdJQ0FnSUNBZ0x5OGdZVzVrSUdFZ2JtOXVlbVZ5YnlCd2NtVjJRblZtWm1WeVRHVnVJR052ZFd4a0lHTmhkWE5sSUhCeWIySnNaVzF6SUc5dUlHQmtjbUZwYm1CY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WMlFuVm1abVZ5VEdWdUlEMGdNRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tEQWdQVDA5SUhSb2FYTXVkM0pwZEdWQ2RXWm1aWEl1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbVJ5WVdsdVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtYkhWemFDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVpzZFhOb0lIZHlhWFJsSUdKMVptWmxjbk11WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JtYkhWemFDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2lZMnh2YzJWa1hDSWdJVDA5SUhSb2FYTXVjbVZoWkhsVGRHRjBaU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGNtRnVjM0J2Y25RdWQzSnBkR0ZpYkdVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNGMGFHbHpMblZ3WjNKaFpHbHVaeUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaVUoxWm1abGNpNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJoWTJ0bGRITWdQU0IwYUdsekxtZGxkRmR5YVhSaFlteGxVR0ZqYTJWMGN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKbWJIVnphR2x1WnlBbFpDQndZV05yWlhSeklHbHVJSE52WTJ0bGRGd2lMQ0J3WVdOclpYUnpMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ5WVc1emNHOXlkQzV6Wlc1a0tIQmhZMnRsZEhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2EyVmxjQ0IwY21GamF5QnZaaUJqZFhKeVpXNTBJR3hsYm1kMGFDQnZaaUIzY21sMFpVSjFabVpsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzNCc2FXTmxJSGR5YVhSbFFuVm1abVZ5SUdGdVpDQmpZV3hzWW1GamEwSjFabVpsY2lCdmJpQmdaSEpoYVc1Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWFpDZFdabVpYSk1aVzRnUFNCd1lXTnJaWFJ6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRGSmxjMlZ5ZG1Wa0tGd2labXgxYzJoY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSVzV6ZFhKbElIUm9aU0JsYm1OdlpHVmtJSE5wZW1VZ2IyWWdkR2hsSUhkeWFYUmxRblZtWm1WeUlHbHpJR0psYkc5M0lIUm9aU0J0WVhoUVlYbHNiMkZrSUhaaGJIVmxJSE5sYm5RZ1lua2dkR2hsSUhObGNuWmxjaUFvYjI1c2VTQm1iM0lnU0ZSVVVGeHVJQ0FnSUNBcUlHeHZibWN0Y0c5c2JHbHVaeWxjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWM0pwZEdGaWJHVlFZV05yWlhSektDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnphRzkxYkdSRGFHVmphMUJoZVd4dllXUlRhWHBsSUQwZ2RHaHBjeTV0WVhoUVlYbHNiMkZrSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnlZVzV6Y0c5eWRDNXVZVzFsSUQwOVBTQmNJbkJ2Ykd4cGJtZGNJaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaVUoxWm1abGNpNXNaVzVuZEdnZ1BpQXhPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYTm9iM1ZzWkVOb1pXTnJVR0Y1Ykc5aFpGTnBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5keWFYUmxRblZtWm1WeU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR3hsZENCd1lYbHNiMkZrVTJsNlpTQTlJREU3SUM4dklHWnBjbk4wSUhCaFkydGxkQ0IwZVhCbFhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkR2hwY3k1M2NtbDBaVUoxWm1abGNpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUhSb2FYTXVkM0pwZEdWQ2RXWm1aWEpiYVYwdVpHRjBZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Y1Ykc5aFpGTnBlbVVnS3owZ0tEQXNJSFYwYVd4ZmFuTmZNUzVpZVhSbFRHVnVaM1JvS1Noa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDRnTUNBbUppQndZWGxzYjJGa1UybDZaU0ErSUhSb2FYTXViV0Y0VUdGNWJHOWhaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5LRndpYjI1c2VTQnpaVzVrSUNWa0lHOTFkQ0J2WmlBbFpDQndZV05yWlhSelhDSXNJR2tzSUhSb2FYTXVkM0pwZEdWQ2RXWm1aWEl1YkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1M2NtbDBaVUoxWm1abGNpNXpiR2xqWlNnd0xDQnBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGVXeHZZV1JUYVhwbElDczlJREk3SUM4dklITmxjR0Z5WVhSdmNpQXJJSEJoWTJ0bGRDQjBlWEJsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pHVmlkV2NvWENKd1lYbHNiMkZrSUhOcGVtVWdhWE1nSldRZ0tHMWhlRG9nSldRcFhDSXNJSEJoZVd4dllXUlRhWHBsTENCMGFHbHpMbTFoZUZCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNjbWwwWlVKMVptWmxjanRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkhNZ1lTQnRaWE56WVdkbExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUcxbGMzTmhaMlV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTJGc2JHSmhZMnNnWm5WdVkzUnBiMjR1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdVMjlqYTJWMGZTQm1iM0lnWTJoaGFXNXBibWN1WEc0Z0lDQWdJQ29nUUdGd2FTQndkV0pzYVdOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IzY21sMFpTaHRjMmNzSUc5d2RHbHZibk1zSUdadUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRkJoWTJ0bGRDaGNJbTFsYzNOaFoyVmNJaXdnYlhObkxDQnZjSFJwYjI1ekxDQm1iaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0J6Wlc1a0tHMXpaeXdnYjNCMGFXOXVjeXdnWm00cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtVR0ZqYTJWMEtGd2liV1Z6YzJGblpWd2lMQ0J0YzJjc0lHOXdkR2x2Ym5Nc0lHWnVLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGJtUnpJR0VnY0dGamEyVjBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIQmhZMnRsZENCMGVYQmxMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmtZWFJoTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sYm1SUVlXTnJaWFFvZEhsd1pTd2daR0YwWVN3Z2IzQjBhVzl1Y3l3Z1ptNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2lablZ1WTNScGIyNWNJaUE5UFQwZ2RIbHdaVzltSUdSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnVJRDBnWkdGMFlUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRndpWm5WdVkzUnBiMjVjSWlBOVBUMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadUlEMGdiM0IwYVc5dWN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk1nUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaGNJbU5zYjNOcGJtZGNJaUE5UFQwZ2RHaHBjeTV5WldGa2VWTjBZWFJsSUh4OElGd2lZMnh2YzJWa1hDSWdQVDA5SUhSb2FYTXVjbVZoWkhsVGRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtTnZiWEJ5WlhOeklEMGdabUZzYzJVZ0lUMDlJRzl3ZEdsdmJuTXVZMjl0Y0hKbGMzTTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIQmhZMnRsZENBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJSFI1Y0dVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQmtZWFJoTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN6b2diM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFJTWlhObGNuWmxaQ2hjSW5CaFkydGxkRU55WldGMFpWd2lMQ0J3WVdOclpYUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsUW5WbVptVnlMbkIxYzJnb2NHRmphMlYwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1p1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJtTmxLRndpWm14MWMyaGNJaXdnWm00cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac2RYTm9LQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5zYjNObGN5QjBhR1VnWTI5dWJtVmpkR2x2Ymk1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCaGNHa2djSFZpYkdsalhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTJ4dmMyVW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR05zYjNObElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZia05zYjNObEtGd2labTl5WTJWa0lHTnNiM05sWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXY29YQ0p6YjJOclpYUWdZMnh2YzJsdVp5QXRJSFJsYkd4cGJtY2dkSEpoYm5Od2IzSjBJSFJ2SUdOc2IzTmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGNtRnVjM0J2Y25RdVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyeGxZVzUxY0VGdVpFTnNiM05sSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dlptWW9YQ0oxY0dkeVlXUmxYQ0lzSUdOc1pXRnVkWEJCYm1SRGJHOXpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVppaGNJblZ3WjNKaFpHVkZjbkp2Y2x3aUxDQmpiR1ZoYm5Wd1FXNWtRMnh2YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4dmMyVW9LVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZDJGcGRFWnZjbFZ3WjNKaFpHVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjNZV2wwSUdadmNpQjFjR2R5WVdSbElIUnZJR1pwYm1semFDQnphVzVqWlNCM1pTQmpZVzRuZENCelpXNWtJSEJoWTJ0bGRITWdkMmhwYkdVZ2NHRjFjMmx1WnlCaElIUnlZVzV6Y0c5eWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZibU5sS0Z3aWRYQm5jbUZrWlZ3aUxDQmpiR1ZoYm5Wd1FXNWtRMnh2YzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZibU5sS0Z3aWRYQm5jbUZrWlVWeWNtOXlYQ0lzSUdOc1pXRnVkWEJCYm1SRGJHOXpaU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjSW05d1pXNXBibWRjSWlBOVBUMGdkR2hwY3k1eVpXRmtlVk4wWVhSbElIeDhJRndpYjNCbGJsd2lJRDA5UFNCMGFHbHpMbkpsWVdSNVUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVmhaSGxUZEdGMFpTQTlJRndpWTJ4dmMybHVaMXdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkM0pwZEdWQ2RXWm1aWEl1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZibU5sS0Z3aVpISmhhVzVjSWl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTFjR2R5WVdScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRoYVhSR2IzSlZjR2R5WVdSbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMGFHbHpMblZ3WjNKaFpHbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkaGFYUkdiM0pWY0dkeVlXUmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEWVd4c1pXUWdkWEJ2YmlCMGNtRnVjM0J2Y25RZ1pYSnliM0pjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzl1UlhKeWIzSW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lHUmxZblZuS0Z3aWMyOWphMlYwSUdWeWNtOXlJQ1ZxWENJc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUZOdlkydGxkQzV3Y21sdmNsZGxZbk52WTJ0bGRGTjFZMk5sYzNNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFVtVnpaWEoyWldRb1hDSmxjbkp2Y2x3aUxDQmxjbklwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1UTJ4dmMyVW9YQ0owY21GdWMzQnZjblFnWlhKeWIzSmNJaXdnWlhKeUtUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyRnNiR1ZrSUhWd2IyNGdkSEpoYm5Od2IzSjBJR05zYjNObExseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHRndhU0J3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNURiRzl6WlNoeVpXRnpiMjRzSUdSbGMyTnlhWEIwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoY0ltOXdaVzVwYm1kY0lpQTlQVDBnZEdocGN5NXlaV0ZrZVZOMFlYUmxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbTl3Wlc1Y0lpQTlQVDBnZEdocGN5NXlaV0ZrZVZOMFlYUmxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbU5zYjNOcGJtZGNJaUE5UFQwZ2RHaHBjeTV5WldGa2VWTjBZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldKMVp5Z25jMjlqYTJWMElHTnNiM05sSUhkcGRHZ2djbVZoYzI5dU9pQmNJaVZ6WENJbkxDQnlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyeGxZWElnZEdsdFpYSnpYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeVZHbHRaVzkxZEVadUtIUm9hWE11Y0dsdVoxUnBiV1Z2ZFhSVWFXMWxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEc5d0lHVjJaVzUwSUdaeWIyMGdabWx5YVc1bklHRm5ZV2x1SUdadmNpQjBjbUZ1YzNCdmNuUmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSEpoYm5Od2IzSjBMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeWhjSW1Oc2IzTmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWlc1emRYSmxJSFJ5WVc1emNHOXlkQ0IzYjI0bmRDQnpkR0Y1SUc5d1pXNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSEpoYm5Od2IzSjBMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaMjV2Y21VZ1puVnlkR2hsY2lCMGNtRnVjM0J2Y25RZ1kyOXRiWFZ1YVdOaGRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwY21GdWMzQnZjblF1Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhKbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0p2Wm1ac2FXNWxYQ0lzSUhSb2FYTXViMlptYkdsdVpVVjJaVzUwVEdsemRHVnVaWElzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0J5WldGa2VTQnpkR0YwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXRmtlVk4wWVhSbElEMGdYQ0pqYkc5elpXUmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05zWldGeUlITmxjM05wYjI0Z2FXUmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhV1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaVzFwZENCamJHOXpaU0JsZG1WdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwVW1WelpYSjJaV1FvWENKamJHOXpaVndpTENCeVpXRnpiMjRzSUdSbGMyTnlhWEIwYVc5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTnNaV0Z1SUdKMVptWmxjbk1nWVdaMFpYSXNJSE52SUhWelpYSnpJR05oYmlCemRHbHNiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaM0poWWlCMGFHVWdZblZtWm1WeWN5QnZiaUJnWTJ4dmMyVmdJR1YyWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlhWFJsUW5WbVptVnlJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWFpDZFdabVpYSk1aVzRnUFNBd08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFWnBiSFJsY25NZ2RYQm5jbUZrWlhNc0lISmxkSFZ5Ym1sdVp5QnZibXg1SUhSb2IzTmxJRzFoZEdOb2FXNW5JR05zYVdWdWRDQjBjbUZ1YzNCdmNuUnpMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2MyVnlkbVZ5SUhWd1ozSmhaR1Z6WEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JtYVd4MFpYSlZjR2R5WVdSbGN5aDFjR2R5WVdSbGN5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm1hV3gwWlhKbFpGVndaM0poWkdWeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUd4bGRDQnBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYWlBOUlIVndaM0poWkdWekxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2c3SUdrZ1BDQnFPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaCtkR2hwY3k1MGNtRnVjM0J2Y25SekxtbHVaR1Y0VDJZb2RYQm5jbUZrWlhOYmFWMHBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkhSbGNtVmtWWEJuY21Ga1pYTXVjSFZ6YUNoMWNHZHlZV1JsYzF0cFhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkhSbGNtVmtWWEJuY21Ga1pYTTdYRzRnSUNBZ2ZWeHVmVnh1Wlhod2IzSjBjeTVUYjJOclpYUWdQU0JUYjJOclpYUTdYRzVUYjJOclpYUXVjSEp2ZEc5amIyd2dQU0JsYm1kcGJtVmZhVzlmY0dGeWMyVnlYekV1Y0hKdmRHOWpiMnc3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JuWmhjaUJmWDJsdGNHOXlkRVJsWm1GMWJIUWdQU0FvZEdocGN5QW1KaUIwYUdsekxsOWZhVzF3YjNKMFJHVm1ZWFZzZENrZ2ZId2dablZ1WTNScGIyNGdLRzF2WkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvYlc5a0lDWW1JRzF2WkM1ZlgyVnpUVzlrZFd4bEtTQS9JRzF2WkNBNklIc2dYQ0prWldaaGRXeDBYQ0k2SUcxdlpDQjlPMXh1ZlR0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVWSEpoYm5Od2IzSjBJRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdaVzVuYVc1bFgybHZYM0JoY25ObGNsOHhJRDBnY21WeGRXbHlaU2hjSW1WdVoybHVaUzVwYnkxd1lYSnpaWEpjSWlrN1hHNWpiMjV6ZENCamIyMXdiMjVsYm5SZlpXMXBkSFJsY2w4eElEMGdjbVZ4ZFdseVpTaGNJa0J6YjJOclpYUXVhVzh2WTI5dGNHOXVaVzUwTFdWdGFYUjBaWEpjSWlrN1hHNWpiMjV6ZENCMWRHbHNYMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTkxZEdsc0xtcHpYQ0lwTzF4dVkyOXVjM1FnWkdWaWRXZGZNU0E5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpWkdWaWRXZGNJaWtwT3lBdkx5QmtaV0oxWnlncFhHNWpiMjV6ZENCa1pXSjFaeUE5SUNnd0xDQmtaV0oxWjE4eExtUmxabUYxYkhRcEtGd2laVzVuYVc1bExtbHZMV05zYVdWdWREcDBjbUZ1YzNCdmNuUmNJaWs3SUM4dklHUmxZblZuS0NsY2JtTnNZWE56SUZSeVlXNXpjRzl5ZEVWeWNtOXlJR1Y0ZEdWdVpITWdSWEp5YjNJZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtISmxZWE52Yml3Z1pHVnpZM0pwY0hScGIyNHNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9jbVZoYzI5dUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pYTmpjbWx3ZEdsdmJpQTlJR1JsYzJOeWFYQjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SbGVIUWdQU0JqYjI1MFpYaDBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNCY0lsUnlZVzV6Y0c5eWRFVnljbTl5WENJN1hHNGdJQ0FnZlZ4dWZWeHVZMnhoYzNNZ1ZISmhibk53YjNKMElHVjRkR1Z1WkhNZ1kyOXRjRzl1Wlc1MFgyVnRhWFIwWlhKZk1TNUZiV2wwZEdWeUlIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVjbUZ1YzNCdmNuUWdZV0p6ZEhKaFkzUWdZMjl1YzNSeWRXTjBiM0l1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5NWNiaUFnSUNBZ0tpQkFZWEJwSUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hSektTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR0ZpYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0tEQXNJSFYwYVd4ZmFuTmZNUzVwYm5OMFlXeHNWR2x0WlhKR2RXNWpkR2x2Ym5NcEtIUm9hWE1zSUc5d2RITXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkSE1nUFNCdmNIUnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuRjFaWEo1SUQwZ2IzQjBjeTV4ZFdWeWVUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXRmtlVk4wWVhSbElEMGdYQ0pjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6YjJOclpYUWdQU0J2Y0hSekxuTnZZMnRsZER0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlcxcGRITWdZVzRnWlhKeWIzSXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2NtVmhjMjl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1JsYzJOeWFYQjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR052Ym5SbGVIUWdMU0IwYUdVZ1pYSnliM0lnWTI5dWRHVjRkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMVJ5WVc1emNHOXlkSDBnWm05eUlHTm9ZV2x1YVc1blhHNGdJQ0FnSUNvZ1FHRndhU0J3Y205MFpXTjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnZia1Z5Y205eUtISmxZWE52Yml3Z1pHVnpZM0pwY0hScGIyNHNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSXVaVzFwZEZKbGMyVnlkbVZrS0Z3aVpYSnliM0pjSWl3Z2JtVjNJRlJ5WVc1emNHOXlkRVZ5Y205eUtISmxZWE52Yml3Z1pHVnpZM0pwY0hScGIyNHNJR052Ym5SbGVIUXBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUU5d1pXNXpJSFJvWlNCMGNtRnVjM0J2Y25RdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVlYQnBJSEIxWW14cFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5d1pXNG9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGNJbU5zYjNObFpGd2lJRDA5UFNCMGFHbHpMbkpsWVdSNVUzUmhkR1VnZkh3Z1hDSmNJaUE5UFQwZ2RHaHBjeTV5WldGa2VWTjBZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxZV1I1VTNSaGRHVWdQU0JjSW05d1pXNXBibWRjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHOVBjR1Z1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5zYjNObGN5QjBhR1VnZEhKaGJuTndiM0owTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUdGd2FTQndkV0pzYVdOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYkc5elpTZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2liM0JsYm1sdVoxd2lJRDA5UFNCMGFHbHpMbkpsWVdSNVUzUmhkR1VnZkh3Z1hDSnZjR1Z1WENJZ1BUMDlJSFJvYVhNdWNtVmhaSGxUZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYjBOc2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVEyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkhNZ2JYVnNkR2x3YkdVZ2NHRmphMlYwY3k1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYbDlJSEJoWTJ0bGRITmNiaUFnSUNBZ0tpQkFZWEJwSUhCMVlteHBZMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxibVFvY0dGamEyVjBjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9YQ0p2Y0dWdVhDSWdQVDA5SUhSb2FYTXVjbVZoWkhsVGRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtbDBaU2h3WVdOclpYUnpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ2JXbG5hSFFnYUdGd2NHVnVJR2xtSUhSb1pTQjBjbUZ1YzNCdmNuUWdkMkZ6SUhOcGJHVnVkR3g1SUdOc2IzTmxaQ0JwYmlCMGFHVWdZbVZtYjNKbGRXNXNiMkZrSUdWMlpXNTBJR2hoYm1Sc1pYSmNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFluVm5LRndpZEhKaGJuTndiM0owSUdseklHNXZkQ0J2Y0dWdUxDQmthWE5qWVhKa2FXNW5JSEJoWTJ0bGRITmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGc2JHVmtJSFZ3YjI0Z2IzQmxibHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRR0Z3YVNCd2NtOTBaV04wWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2Yms5d1pXNG9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZoWkhsVGRHRjBaU0E5SUZ3aWIzQmxibHdpTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR5YVhSaFlteGxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJdVpXMXBkRkpsYzJWeWRtVmtLRndpYjNCbGJsd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIZHBkR2dnWkdGMFlTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCa1lYUmhYRzRnSUNBZ0lDb2dRR0Z3YVNCd2NtOTBaV04wWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2YmtSaGRHRW9aR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lXTnJaWFFnUFNBb01Dd2daVzVuYVc1bFgybHZYM0JoY25ObGNsOHhMbVJsWTI5a1pWQmhZMnRsZENrb1pHRjBZU3dnZEdocGN5NXpiMk5yWlhRdVltbHVZWEo1Vkhsd1pTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVFZV05yWlhRb2NHRmphMlYwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGc2JHVmtJSGRwZEdnZ1lTQmtaV052WkdWa0lIQmhZMnRsZEM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCaGNHa2djSEp2ZEdWamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNVFZV05yWlhRb2NHRmphMlYwS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5TG1WdGFYUlNaWE5sY25abFpDaGNJbkJoWTJ0bGRGd2lMQ0J3WVdOclpYUXBPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRZV3hzWldRZ2RYQnZiaUJqYkc5elpTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmhjR2tnY0hKdmRHVmpkR1ZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVEYkc5elpTaGtaWFJoYVd4ektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVmhaSGxUZEdGMFpTQTlJRndpWTJ4dmMyVmtYQ0k3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlMbVZ0YVhSU1pYTmxjblpsWkNoY0ltTnNiM05sWENJc0lHUmxkR0ZwYkhNcE8xeHVJQ0FnSUgxY2JuMWNibVY0Y0c5eWRITXVWSEpoYm5Od2IzSjBJRDBnVkhKaGJuTndiM0owTzF4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMblJ5WVc1emNHOXlkSE1nUFNCMmIybGtJREE3WEc1amIyNXpkQ0J3YjJ4c2FXNW5YMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTl3YjJ4c2FXNW5MbXB6WENJcE8xeHVZMjl1YzNRZ2QyVmljMjlqYTJWMFgycHpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOTNaV0p6YjJOclpYUXVhbk5jSWlrN1hHNWxlSEJ2Y25SekxuUnlZVzV6Y0c5eWRITWdQU0I3WEc0Z0lDQWdkMlZpYzI5amEyVjBPaUIzWldKemIyTnJaWFJmYW5OZk1TNVhVeXhjYmlBZ0lDQndiMnhzYVc1bk9pQndiMnhzYVc1blgycHpYekV1VUc5c2JHbHVaMXh1ZlR0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVkbUZ5SUY5ZmFXMXdiM0owUkdWbVlYVnNkQ0E5SUNoMGFHbHpJQ1ltSUhSb2FYTXVYMTlwYlhCdmNuUkVaV1poZFd4MEtTQjhmQ0JtZFc1amRHbHZiaUFvYlc5a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNodGIyUWdKaVlnYlc5a0xsOWZaWE5OYjJSMWJHVXBJRDhnYlc5a0lEb2dleUJjSW1SbFptRjFiSFJjSWpvZ2JXOWtJSDA3WEc1OU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVTWlhGMVpYTjBJRDBnWlhod2IzSjBjeTVRYjJ4c2FXNW5JRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdkSEpoYm5Od2IzSjBYMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTR2ZEhKaGJuTndiM0owTG1welhDSXBPMXh1WTI5dWMzUWdaR1ZpZFdkZk1TQTlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2laR1ZpZFdkY0lpa3BPeUF2THlCa1pXSjFaeWdwWEc1amIyNXpkQ0I1WldGemRGOXFjMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Ym5SeWFXSXZlV1ZoYzNRdWFuTmNJaWs3WEc1amIyNXpkQ0J3WVhKelpYRnpYMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTR2WTI5dWRISnBZaTl3WVhKelpYRnpMbXB6WENJcE8xeHVZMjl1YzNRZ1pXNW5hVzVsWDJsdlgzQmhjbk5sY2w4eElEMGdjbVZ4ZFdseVpTaGNJbVZ1WjJsdVpTNXBieTF3WVhKelpYSmNJaWs3WEc1amIyNXpkQ0I0Yld4b2RIUndjbVZ4ZFdWemRGOXFjMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZlRzFzYUhSMGNISmxjWFZsYzNRdWFuTmNJaWs3WEc1amIyNXpkQ0JqYjIxd2IyNWxiblJmWlcxcGRIUmxjbDh4SUQwZ2NtVnhkV2x5WlNoY0lrQnpiMk5yWlhRdWFXOHZZMjl0Y0c5dVpXNTBMV1Z0YVhSMFpYSmNJaWs3WEc1amIyNXpkQ0IxZEdsc1gycHpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpNHZkWFJwYkM1cWMxd2lLVHRjYm1OdmJuTjBJR2RzYjJKaGJGUm9hWE5mYW5OZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TGk5bmJHOWlZV3hVYUdsekxtcHpYQ0lwTzF4dVkyOXVjM1FnWkdWaWRXY2dQU0FvTUN3Z1pHVmlkV2RmTVM1a1pXWmhkV3gwS1NoY0ltVnVaMmx1WlM1cGJ5MWpiR2xsYm5RNmNHOXNiR2x1WjF3aUtUc2dMeThnWkdWaWRXY29LVnh1Wm5WdVkzUnBiMjRnWlcxd2RIa29LU0I3SUgxY2JtTnZibk4wSUdoaGMxaElVaklnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHTnZibk4wSUhob2NpQTlJRzVsZHlCNGJXeG9kSFJ3Y21WeGRXVnpkRjlxYzE4eExsaElVaWg3WEc0Z0lDQWdJQ0FnSUhoa2IyMWhhVzQ2SUdaaGJITmxYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHd2dJVDBnZUdoeUxuSmxjM0J2Ym5ObFZIbHdaVHRjYm4wcEtDazdYRzVqYkdGemN5QlFiMnhzYVc1bklHVjRkR1Z1WkhNZ2RISmhibk53YjNKMFgycHpYekV1VkhKaGJuTndiM0owSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCWVNGSWdVRzlzYkdsdVp5QmpiMjV6ZEhKMVkzUnZjaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJ6WEc0Z0lDQWdJQ29nUUdGd2FTQndkV0pzYVdOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodmNIUnpLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLRzl3ZEhNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmJHeHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCc2IyTmhkR2x2YmlBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5UVTB3Z1BTQmNJbWgwZEhCek9sd2lJRDA5UFNCc2IyTmhkR2x2Ymk1d2NtOTBiMk52YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2IzSjBJRDBnYkc5allYUnBiMjR1Y0c5eWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITnZiV1VnZFhObGNpQmhaMlZ1ZEhNZ2FHRjJaU0JsYlhCMGVTQmdiRzlqWVhScGIyNHVjRzl5ZEdCY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGNHOXlkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmNuUWdQU0JwYzFOVFRDQS9JRndpTkRRelhDSWdPaUJjSWpnd1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuaGtJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZEhsd1pXOW1JR3h2WTJGMGFXOXVJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkSE11YUc5emRHNWhiV1VnSVQwOUlHeHZZMkYwYVc5dUxtaHZjM1J1WVcxbEtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzSjBJQ0U5UFNCdmNIUnpMbkJ2Y25RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuaHpJRDBnYjNCMGN5NXpaV04xY21VZ0lUMDlJR2x6VTFOTU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQllTRklnYzNWd2NHOXlkSE1nWW1sdVlYSjVYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JtYjNKalpVSmhjMlUyTkNBOUlHOXdkSE1nSmlZZ2IzQjBjeTVtYjNKalpVSmhjMlUyTkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZFhCd2IzSjBjMEpwYm1GeWVTQTlJR2hoYzFoSVVqSWdKaVlnSVdadmNtTmxRbUZ6WlRZME8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWNtRnVjM0J2Y25RZ2JtRnRaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFFnYm1GdFpTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRndpY0c5c2JHbHVaMXdpTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJQY0dWdWN5QjBhR1VnYzI5amEyVjBJQ2gwY21sbloyVnljeUJ3YjJ4c2FXNW5LUzRnVjJVZ2QzSnBkR1VnWVNCUVNVNUhJRzFsYzNOaFoyVWdkRzhnWkdWMFpYSnRhVzVsWEc0Z0lDQWdJQ29nZDJobGJpQjBhR1VnZEhKaGJuTndiM0owSUdseklHOXdaVzR1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrYjA5d1pXNG9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjRzlzYkNncE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUVlYVnpaWE1nY0c5c2JHbHVaeTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05oYkd4aVlXTnJJSFZ3YjI0Z1luVm1abVZ5Y3lCaGNtVWdabXgxYzJobFpDQmhibVFnZEhKaGJuTndiM0owSUdseklIQmhkWE5sWkZ4dUlDQWdJQ0FxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCaGRYTmxLRzl1VUdGMWMyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV0ZrZVZOMFlYUmxJRDBnWENKd1lYVnphVzVuWENJN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCaGRYTmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVmlkV2NvWENKd1lYVnpaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxZV1I1VTNSaGRHVWdQU0JjSW5CaGRYTmxaRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVRWVhWelpTZ3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1d2IyeHNhVzVuSUh4OElDRjBhR2x6TG5keWFYUmhZbXhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHOTBZV3dnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0c5c2JHbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5LRndpZDJVZ1lYSmxJR04xY25KbGJuUnNlU0J3YjJ4c2FXNW5JQzBnZDJGcGRHbHVaeUIwYnlCd1lYVnpaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzUmhiQ3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVqWlNoY0luQnZiR3hEYjIxd2JHVjBaVndpTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5LRndpY0hKbExYQmhkWE5sSUhCdmJHeHBibWNnWTI5dGNHeGxkR1ZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzB0ZEc5MFlXd2dmSHdnY0dGMWMyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTNjbWwwWVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2lkMlVnWVhKbElHTjFjbkpsYm5Sc2VTQjNjbWwwYVc1bklDMGdkMkZwZEdsdVp5QjBieUJ3WVhWelpWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNSaGJDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNWpaU2hjSW1SeVlXbHVYQ0lzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWaWRXY29YQ0p3Y21VdGNHRjFjMlVnZDNKcGRHbHVaeUJqYjIxd2JHVjBaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMUzEwYjNSaGJDQjhmQ0J3WVhWelpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjFjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVGRHRnlkSE1nY0c5c2JHbHVaeUJqZVdOc1pTNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmhjR2tnY0hWaWJHbGpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NHOXNiQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1pHVmlkV2NvWENKd2IyeHNhVzVuWENJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmJHeHBibWNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUnZVRzlzYkNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbkJ2Ykd4Y0lpazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFOTJaWEpzYjJGa2N5QnZia1JoZEdFZ2RHOGdaR1YwWldOMElIQmhlV3h2WVdSekxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHRndhU0J3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNUVZWFJoS0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnWkdWaWRXY29YQ0p3YjJ4c2FXNW5JR2R2ZENCa1lYUmhJQ1Z6WENJc0lHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqWVd4c1ltRmpheUE5SUhCaFkydGxkQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQnBkSE1nZEdobElHWnBjbk4wSUcxbGMzTmhaMlVnZDJVZ1kyOXVjMmxrWlhJZ2RHaGxJSFJ5WVc1emNHOXlkQ0J2Y0dWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hDSnZjR1Z1YVc1blhDSWdQVDA5SUhSb2FYTXVjbVZoWkhsVGRHRjBaU0FtSmlCd1lXTnJaWFF1ZEhsd1pTQTlQVDBnWENKdmNHVnVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VDNCbGJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdhWFJ6SUdFZ1kyeHZjMlVnY0dGamEyVjBMQ0IzWlNCamJHOXpaU0IwYUdVZ2IyNW5iMmx1WnlCeVpYRjFaWE4wYzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z3aVkyeHZjMlZjSWlBOVBUMGdjR0ZqYTJWMExuUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1UTJ4dmMyVW9leUJrWlhOamNtbHdkR2x2YmpvZ1hDSjBjbUZ1YzNCdmNuUWdZMnh2YzJWa0lHSjVJSFJvWlNCelpYSjJaWEpjSWlCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnZkR2hsY25kcGMyVWdZbmx3WVhOeklHOXVSR0YwWVNCaGJtUWdhR0Z1Wkd4bElIUm9aU0J0WlhOellXZGxYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VUdGamEyVjBLSEJoWTJ0bGRDazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUM4dklHUmxZMjlrWlNCd1lYbHNiMkZrWEc0Z0lDQWdJQ0FnSUNnd0xDQmxibWRwYm1WZmFXOWZjR0Z5YzJWeVh6RXVaR1ZqYjJSbFVHRjViRzloWkNrb1pHRjBZU3dnZEdocGN5NXpiMk5yWlhRdVltbHVZWEo1Vkhsd1pTa3VabTl5UldGamFDaGpZV3hzWW1GamF5azdYRzRnSUNBZ0lDQWdJQzh2SUdsbUlHRnVJR1YyWlc1MElHUnBaQ0J1YjNRZ2RISnBaMmRsY2lCamJHOXphVzVuWEc0Z0lDQWdJQ0FnSUdsbUlDaGNJbU5zYjNObFpGd2lJQ0U5UFNCMGFHbHpMbkpsWVdSNVUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlIZGxJR2R2ZENCa1lYUmhJSGRsSjNKbElHNXZkQ0J3YjJ4c2FXNW5YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Ykd4cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZEZKbGMyVnlkbVZrS0Z3aWNHOXNiRU52YlhCc1pYUmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z3aWIzQmxibHdpSUQwOVBTQjBhR2x6TG5KbFlXUjVVM1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CdmJHd29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktDZHBaMjV2Y21sdVp5QndiMnhzSUMwZ2RISmhibk53YjNKMElITjBZWFJsSUZ3aUpYTmNJaWNzSUhSb2FYTXVjbVZoWkhsVGRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbTl5SUhCdmJHeHBibWNzSUhObGJtUWdZU0JqYkc5elpTQndZV05yWlhRdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCa2IwTnNiM05sS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamJHOXpaU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxZblZuS0Z3aWQzSnBkR2x1WnlCamJHOXpaU0J3WVdOclpYUmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxLRnQ3SUhSNWNHVTZJRndpWTJ4dmMyVmNJaUI5WFNrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJR2xtSUNoY0ltOXdaVzVjSWlBOVBUMGdkR2hwY3k1eVpXRmtlVk4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXSjFaeWhjSW5SeVlXNXpjRzl5ZENCdmNHVnVJQzBnWTJ4dmMybHVaMXdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYjNObEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBiaUJqWVhObElIZGxKM0psSUhSeWVXbHVaeUIwYnlCamJHOXpaU0IzYUdsc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FHRnVaSE5vWVd0cGJtY2dhWE1nYVc0Z2NISnZaM0psYzNNZ0tFZElMVEUyTkNsY2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWW5WbktGd2lkSEpoYm5Od2IzSjBJRzV2ZENCdmNHVnVJQzBnWkdWbVpYSnlhVzVuSUdOc2IzTmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJtTmxLRndpYjNCbGJsd2lMQ0JqYkc5elpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWM0pwZEdWeklHRWdjR0ZqYTJWMGN5QndZWGxzYjJGa0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWkdGMFlTQndZV05yWlhSelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1pISmhhVzRnWTJGc2JHSmhZMnRjYmlBZ0lDQWdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IzY21sMFpTaHdZV05yWlhSektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQzSnBkR0ZpYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0tEQXNJR1Z1WjJsdVpWOXBiMTl3WVhKelpYSmZNUzVsYm1OdlpHVlFZWGxzYjJGa0tTaHdZV05yWlhSekxDQmtZWFJoSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaRzlYY21sMFpTaGtZWFJoTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFVtVnpaWEoyWldRb1hDSmtjbUZwYmx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlZ1WlhKaGRHVnpJSFZ5YVNCbWIzSWdZMjl1Ym1WamRHbHZiaTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ5YVNncElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhGMVpYSjVJRDBnZEdocGN5NXhkV1Z5ZVNCOGZDQjdmVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMk5vWlcxaElEMGdkR2hwY3k1dmNIUnpMbk5sWTNWeVpTQS9JRndpYUhSMGNITmNJaUE2SUZ3aWFIUjBjRndpTzF4dUlDQWdJQ0FnSUNCc1pYUWdjRzl5ZENBOUlGd2lYQ0k3WEc0Z0lDQWdJQ0FnSUM4dklHTmhZMmhsSUdKMWMzUnBibWNnYVhNZ1ptOXlZMlZrWEc0Z0lDQWdJQ0FnSUdsbUlDaG1ZV3h6WlNBaFBUMGdkR2hwY3k1dmNIUnpMblJwYldWemRHRnRjRkpsY1hWbGMzUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnhkV1Z5ZVZ0MGFHbHpMbTl3ZEhNdWRHbHRaWE4wWVcxd1VHRnlZVzFkSUQwZ0tEQXNJSGxsWVhOMFgycHpYekV1ZVdWaGMzUXBLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuTjFjSEJ2Y25SelFtbHVZWEo1SUNZbUlDRnhkV1Z5ZVM1emFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIRjFaWEo1TG1JMk5DQTlJREU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdZWFp2YVdRZ2NHOXlkQ0JwWmlCa1pXWmhkV3gwSUdadmNpQnpZMmhsYldGY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBjeTV3YjNKMElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tGd2lhSFIwY0hOY0lpQTlQVDBnYzJOb1pXMWhJQ1ltSUU1MWJXSmxjaWgwYUdsekxtOXdkSE11Y0c5eWRDa2dJVDA5SURRME15a2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWENKb2RIUndYQ0lnUFQwOUlITmphR1Z0WVNBbUppQk9kVzFpWlhJb2RHaHBjeTV2Y0hSekxuQnZjblFwSUNFOVBTQTRNQ2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNKMElEMGdYQ0k2WENJZ0t5QjBhR2x6TG05d2RITXVjRzl5ZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJtTnZaR1ZrVVhWbGNua2dQU0FvTUN3Z2NHRnljMlZ4YzE5cWMxOHhMbVZ1WTI5a1pTa29jWFZsY25rcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGNIWTJJRDBnZEdocGN5NXZjSFJ6TG1odmMzUnVZVzFsTG1sdVpHVjRUMllvWENJNlhDSXBJQ0U5UFNBdE1UdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaHpZMmhsYldFZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENJNkx5OWNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9hWEIyTmlBL0lGd2lXMXdpSUNzZ2RHaHBjeTV2Y0hSekxtaHZjM1J1WVcxbElDc2dYQ0pkWENJZ09pQjBhR2x6TG05d2RITXVhRzl6ZEc1aGJXVXBJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjblFnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnpMbkJoZEdnZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dWdVkyOWtaV1JSZFdWeWVTNXNaVzVuZEdnZ1B5QmNJajljSWlBcklHVnVZMjlrWldSUmRXVnllU0E2SUZ3aVhDSXBLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRM0psWVhSbGN5QmhJSEpsY1hWbGMzUXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JXVjBhRzlrWEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WeGRXVnpkQ2h2Y0hSeklEMGdlMzBwSUh0Y2JpQWdJQ0FnSUNBZ1QySnFaV04wTG1GemMybG5iaWh2Y0hSekxDQjdJSGhrT2lCMGFHbHpMbmhrTENCNGN6b2dkR2hwY3k1NGN5QjlMQ0IwYUdsekxtOXdkSE1wTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGSmxjWFZsYzNRb2RHaHBjeTUxY21rb0tTd2diM0IwY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGJtUnpJR1JoZEdFdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWkdGMFlTQjBieUJ6Wlc1a0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmhiR3hsWkNCMWNHOXVJR1pzZFhOb0xseHVJQ0FnSUNBcUlFQmhjR2tnY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHUnZWM0pwZEdVb1pHRjBZU3dnWm00cElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnhJRDBnZEdocGN5NXlaWEYxWlhOMEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHaHZaRG9nWENKUVQxTlVYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCa1lYUmhYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCeVpYRXViMjRvWENKemRXTmpaWE56WENJc0lHWnVLVHRjYmlBZ0lDQWdJQ0FnY21WeExtOXVLRndpWlhKeWIzSmNJaXdnS0hob2NsTjBZWFIxY3l3Z1kyOXVkR1Y0ZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmtWeWNtOXlLRndpZUdoeUlIQnZjM1FnWlhKeWIzSmNJaXdnZUdoeVUzUmhkSFZ6TENCamIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTjBZWEowY3lCaElIQnZiR3dnWTNsamJHVXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFZWEJwSUhCeWFYWmhkR1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmtiMUJ2Ykd3b0tTQjdYRzRnSUNBZ0lDQWdJR1JsWW5WbktGd2llR2h5SUhCdmJHeGNJaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsY1NBOUlIUm9hWE11Y21WeGRXVnpkQ2dwTzF4dUlDQWdJQ0FnSUNCeVpYRXViMjRvWENKa1lYUmhYQ0lzSUhSb2FYTXViMjVFWVhSaExtSnBibVFvZEdocGN5a3BPMXh1SUNBZ0lDQWdJQ0J5WlhFdWIyNG9YQ0psY25KdmNsd2lMQ0FvZUdoeVUzUmhkSFZ6TENCamIyNTBaWGgwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1UlhKeWIzSW9YQ0o0YUhJZ2NHOXNiQ0JsY25KdmNsd2lMQ0I0YUhKVGRHRjBkWE1zSUdOdmJuUmxlSFFwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2IyeHNXR2h5SUQwZ2NtVnhPMXh1SUNBZ0lIMWNibjFjYm1WNGNHOXlkSE11VUc5c2JHbHVaeUE5SUZCdmJHeHBibWM3WEc1amJHRnpjeUJTWlhGMVpYTjBJR1Y0ZEdWdVpITWdZMjl0Y0c5dVpXNTBYMlZ0YVhSMFpYSmZNUzVGYldsMGRHVnlJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhGMVpYTjBJR052Ym5OMGNuVmpkRzl5WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWMxeHVJQ0FnSUNBcUlFQmhjR2tnY0hWaWJHbGpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9kWEpwTENCdmNIUnpLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNnd0xDQjFkR2xzWDJwelh6RXVhVzV6ZEdGc2JGUnBiV1Z5Um5WdVkzUnBiMjV6S1NoMGFHbHpMQ0J2Y0hSektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnpJRDBnYjNCMGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFpYUm9iMlFnUFNCdmNIUnpMbTFsZEdodlpDQjhmQ0JjSWtkRlZGd2lPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnlhU0E5SUhWeWFUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGMzbHVZeUE5SUdaaGJITmxJQ0U5UFNCdmNIUnpMbUZ6ZVc1ak8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0IxYm1SbFptbHVaV1FnSVQwOUlHOXdkSE11WkdGMFlTQS9JRzl3ZEhNdVpHRjBZU0E2SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzSmxZWFJsS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOeVpXRjBaWE1nZEdobElGaElVaUJ2WW1wbFkzUWdZVzVrSUhObGJtUnpJSFJvWlNCeVpYRjFaWE4wTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTNKbFlYUmxLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Y0hSeklEMGdLREFzSUhWMGFXeGZhbk5mTVM1d2FXTnJLU2gwYUdsekxtOXdkSE1zSUZ3aVlXZGxiblJjSWl3Z1hDSndabmhjSWl3Z1hDSnJaWGxjSWl3Z1hDSndZWE56Y0doeVlYTmxYQ0lzSUZ3aVkyVnlkRndpTENCY0ltTmhYQ0lzSUZ3aVkybHdhR1Z5YzF3aUxDQmNJbkpsYW1WamRGVnVZWFYwYUc5eWFYcGxaRndpTENCY0ltRjFkRzlWYm5KbFpsd2lLVHRjYmlBZ0lDQWdJQ0FnYjNCMGN5NTRaRzl0WVdsdUlEMGdJU0YwYUdsekxtOXdkSE11ZUdRN1hHNGdJQ0FnSUNBZ0lHOXdkSE11ZUhOamFHVnRaU0E5SUNFaGRHaHBjeTV2Y0hSekxuaHpPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjRhSElnUFNBb2RHaHBjeTU0YUhJZ1BTQnVaWGNnZUcxc2FIUjBjSEpsY1hWbGMzUmZhbk5mTVM1WVNGSW9iM0IwY3lrcE8xeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZpZFdjb1hDSjRhSElnYjNCbGJpQWxjem9nSlhOY0lpd2dkR2hwY3k1dFpYUm9iMlFzSUhSb2FYTXVkWEpwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGhvY2k1dmNHVnVLSFJvYVhNdWJXVjBhRzlrTENCMGFHbHpMblZ5YVN3Z2RHaHBjeTVoYzNsdVl5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEhNdVpYaDBjbUZJWldGa1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV6WlhSRWFYTmhZbXhsU0dWaFpHVnlRMmhsWTJzZ0ppWWdlR2h5TG5ObGRFUnBjMkZpYkdWSVpXRmtaWEpEYUdWamF5aDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0JwYmlCMGFHbHpMbTl3ZEhNdVpYaDBjbUZJWldGa1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hSekxtVjRkSEpoU0dWaFpHVnljeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLR2tzSUhSb2FYTXViM0IwY3k1bGVIUnlZVWhsWVdSbGNuTmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGMFkyZ2dLR1VwSUhzZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGd2lVRTlUVkZ3aUlEMDlQU0IwYUdsekxtMWxkR2h2WkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLRndpUTI5dWRHVnVkQzEwZVhCbFhDSXNJRndpZEdWNGRDOXdiR0ZwYmp0amFHRnljMlYwUFZWVVJpMDRYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYUmphQ0FvWlNrZ2V5QjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLRndpUVdOalpYQjBYQ0lzSUZ3aUtpOHFYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRjBZMmdnS0dVcElIc2dmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1UySUdOb1pXTnJYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YQ0ozYVhSb1EzSmxaR1Z1ZEdsaGJITmNJaUJwYmlCNGFISXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0YUhJdWQybDBhRU55WldSbGJuUnBZV3h6SUQwZ2RHaHBjeTV2Y0hSekxuZHBkR2hEY21Wa1pXNTBhV0ZzY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkSE11Y21WeGRXVnpkRlJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0YUhJdWRHbHRaVzkxZENBOUlIUm9hWE11YjNCMGN5NXlaWEYxWlhOMFZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tEUWdJVDA5SUhob2NpNXlaV0ZrZVZOMFlYUmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tESXdNQ0E5UFQwZ2VHaHlMbk4wWVhSMWN5QjhmQ0F4TWpJeklEMDlQU0I0YUhJdWMzUmhkSFZ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNU1iMkZrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ0WVd0bElITjFjbVVnZEdobElHQmxjbkp2Y21BZ1pYWmxiblFnYUdGdVpHeGxjaUIwYUdGMEozTWdkWE5sY2kxelpYUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pHOWxjeUJ1YjNRZ2RHaHliM2NnYVc0Z2RHaGxJSE5oYldVZ2RHbGpheUJoYm1RZ1oyVjBjeUJqWVhWbmFIUWdhR1Z5WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGUnBiV1Z2ZFhSR2JpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1UlhKeWIzSW9kSGx3Wlc5bUlIaG9jaTV6ZEdGMGRYTWdQVDA5SUZ3aWJuVnRZbVZ5WENJZ1B5QjRhSEl1YzNSaGRIVnpJRG9nTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldKMVp5aGNJbmhvY2lCa1lYUmhJQ1Z6WENJc0lIUm9hWE11WkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCNGFISXVjMlZ1WkNoMGFHbHpMbVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJPWldWa0lIUnZJR1JsWm1WeUlITnBibU5sSUM1amNtVmhkR1VvS1NCcGN5QmpZV3hzWldRZ1pHbHlaV04wYkhrZ1puSnZiU0IwYUdVZ1kyOXVjM1J5ZFdOMGIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHRnVaQ0IwYUhWeklIUm9aU0FuWlhKeWIzSW5JR1YyWlc1MElHTmhiaUJ2Ym14NUlHSmxJRzl1YkhrZ1ltOTFibVFnS21GbWRHVnlLaUIwYUdseklHVjRZMlZ3ZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2IyTmpkWEp6TGlBZ1ZHaGxjbVZtYjNKbExDQmhiSE52TENCM1pTQmpZVzV1YjNRZ2RHaHliM2NnYUdWeVpTQmhkQ0JoYkd3dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRlJwYldWdmRYUkdiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrVnljbTl5S0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnWENKMWJtUmxabWx1WldSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1SbGVDQTlJRkpsY1hWbGMzUXVjbVZ4ZFdWemRITkRiM1Z1ZENzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnVW1WeGRXVnpkQzV5WlhGMVpYTjBjMXQwYUdsekxtbHVaR1Y0WFNBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGc2JHVmtJSFZ3YjI0Z1pYSnliM0l1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBWVhCcElIQnlhWFpoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2YmtWeWNtOXlLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbVZ5Y205eVhDSXNJR1Z5Y2l3Z2RHaHBjeTU0YUhJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1pXRnVkWEFvZEhKMVpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnNaV0Z1Y3lCMWNDQm9iM1Z6WlM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOc1pXRnVkWEFvWm5KdmJVVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjSW5WdVpHVm1hVzVsWkZ3aUlEMDlQU0IwZVhCbGIyWWdkR2hwY3k1NGFISWdmSHdnYm5Wc2JDQTlQVDBnZEdocGN5NTRhSElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuaG9jaTV2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVnUFNCbGJYQjBlVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnliMjFGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuaG9jaTVoWW05eWRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGMFkyZ2dLR1VwSUhzZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWkc5amRXMWxiblFnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQlNaWEYxWlhOMExuSmxjWFZsYzNSelczUm9hWE11YVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlR2h5SUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMkZzYkdWa0lIVndiMjRnYkc5aFpDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmhjR2tnY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVURzloWkNncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUhSb2FYTXVlR2h5TG5KbGMzQnZibk5sVkdWNGREdGNiaUFnSUNBZ0lDQWdhV1lnS0dSaGRHRWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRGSmxjMlZ5ZG1Wa0tGd2laR0YwWVZ3aUxDQmtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkRkpsYzJWeWRtVmtLRndpYzNWalkyVnpjMXdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeGxZVzUxY0NncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmliM0owY3lCMGFHVWdjbVZ4ZFdWemRDNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmhjR2tnY0hWaWJHbGpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lXSnZjblFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJ4bFlXNTFjQ2dwTzF4dUlDQWdJSDFjYm4xY2JtVjRjRzl5ZEhNdVVtVnhkV1Z6ZENBOUlGSmxjWFZsYzNRN1hHNVNaWEYxWlhOMExuSmxjWFZsYzNSelEyOTFiblFnUFNBd08xeHVVbVZ4ZFdWemRDNXlaWEYxWlhOMGN5QTlJSHQ5TzF4dUx5b3FYRzRnS2lCQlltOXlkSE1nY0dWdVpHbHVaeUJ5WlhGMVpYTjBjeUIzYUdWdUlIVnViRzloWkdsdVp5QjBhR1VnZDJsdVpHOTNMaUJVYUdseklHbHpJRzVsWldSbFpDQjBieUJ3Y21WMlpXNTBYRzRnS2lCdFpXMXZjbmtnYkdWaGEzTWdLR1V1Wnk0Z2QyaGxiaUIxYzJsdVp5QkpSU2tnWVc1a0lIUnZJR1Z1YzNWeVpTQjBhR0YwSUc1dklITndkWEpwYjNWeklHVnljbTl5SUdselhHNGdLaUJsYldsMGRHVmtMbHh1SUNvdlhHNXBaaUFvZEhsd1pXOW1JR1J2WTNWdFpXNTBJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lLU0I3WEc0Z0lDQWdMeThnUUhSekxXbG5ibTl5WlZ4dUlDQWdJR2xtSUNoMGVYQmxiMllnWVhSMFlXTm9SWFpsYm5RZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJBZEhNdGFXZHViM0psWEc0Z0lDQWdJQ0FnSUdGMGRHRmphRVYyWlc1MEtGd2liMjUxYm14dllXUmNJaXdnZFc1c2IyRmtTR0Z1Wkd4bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJoWkdSRmRtVnVkRXhwYzNSbGJtVnlJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR1Z5YldsdVlYUnBiMjVGZG1WdWRDQTlJRndpYjI1d1lXZGxhR2xrWlZ3aUlHbHVJR2RzYjJKaGJGUm9hWE5mYW5OZk1TNW5iRzlpWVd4VWFHbHpVMmhwYlNBL0lGd2ljR0ZuWldocFpHVmNJaUE2SUZ3aWRXNXNiMkZrWENJN1hHNGdJQ0FnSUNBZ0lHRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb2RHVnliV2x1WVhScGIyNUZkbVZ1ZEN3Z2RXNXNiMkZrU0dGdVpHeGxjaXdnWm1Gc2MyVXBPMXh1SUNBZ0lIMWNibjFjYm1aMWJtTjBhVzl1SUhWdWJHOWhaRWhoYm1Sc1pYSW9LU0I3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0JwYmlCU1pYRjFaWE4wTG5KbGNYVmxjM1J6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hTWlhGMVpYTjBMbkpsY1hWbGMzUnpMbWhoYzA5M2JsQnliM0JsY25SNUtHa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlNaWEYxWlhOMExuSmxjWFZsYzNSelcybGRMbUZpYjNKMEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RFSnBibUZ5ZVZSNWNHVWdQU0JsZUhCdmNuUnpMblZ6YVc1blFuSnZkM05sY2xkbFlsTnZZMnRsZENBOUlHVjRjRzl5ZEhNdVYyVmlVMjlqYTJWMElEMGdaWGh3YjNKMGN5NXVaWGgwVkdsamF5QTlJSFp2YVdRZ01EdGNibU52Ym5OMElHZHNiMkpoYkZSb2FYTmZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMaTluYkc5aVlXeFVhR2x6TG1welhDSXBPMXh1Wlhod2IzSjBjeTV1WlhoMFZHbGpheUE5SUNnb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2FYTlFjbTl0YVhObFFYWmhhV3hoWW14bElEMGdkSGx3Wlc5bUlGQnliMjFwYzJVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQjBlWEJsYjJZZ1VISnZiV2x6WlM1eVpYTnZiSFpsSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0k3WEc0Z0lDQWdhV1lnS0dselVISnZiV2x6WlVGMllXbHNZV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kySWdQVDRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2t1ZEdobGJpaGpZaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0dOaUxDQnpaWFJVYVcxbGIzVjBSbTRwSUQwK0lITmxkRlJwYldWdmRYUkdiaWhqWWl3Z01DazdYRzRnSUNBZ2ZWeHVmU2tvS1R0Y2JtVjRjRzl5ZEhNdVYyVmlVMjlqYTJWMElEMGdaMnh2WW1Gc1ZHaHBjMTlxYzE4eExtZHNiMkpoYkZSb2FYTlRhR2x0TGxkbFlsTnZZMnRsZENCOGZDQm5iRzlpWVd4VWFHbHpYMnB6WHpFdVoyeHZZbUZzVkdocGMxTm9hVzB1VFc5NlYyVmlVMjlqYTJWME8xeHVaWGh3YjNKMGN5NTFjMmx1WjBKeWIzZHpaWEpYWldKVGIyTnJaWFFnUFNCMGNuVmxPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBRbWx1WVhKNVZIbHdaU0E5SUZ3aVlYSnlZWGxpZFdabVpYSmNJanRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dWRtRnlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDQTlJQ2gwYUdseklDWW1JSFJvYVhNdVgxOXBiWEJ2Y25SRVpXWmhkV3gwS1NCOGZDQm1kVzVqZEdsdmJpQW9iVzlrS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2h0YjJRZ0ppWWdiVzlrTGw5ZlpYTk5iMlIxYkdVcElEOGdiVzlrSURvZ2V5QmNJbVJsWm1GMWJIUmNJam9nYlc5a0lIMDdYRzU5TzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NVhVeUE5SUhadmFXUWdNRHRjYm1OdmJuTjBJSFJ5WVc1emNHOXlkRjlxYzE4eElEMGdjbVZ4ZFdseVpTaGNJaTR1TDNSeVlXNXpjRzl5ZEM1cWMxd2lLVHRjYm1OdmJuTjBJSEJoY25ObGNYTmZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjI1MGNtbGlMM0JoY25ObGNYTXVhbk5jSWlrN1hHNWpiMjV6ZENCNVpXRnpkRjlxYzE4eElEMGdjbVZ4ZFdseVpTaGNJaTR1TDJOdmJuUnlhV0l2ZVdWaGMzUXVhbk5jSWlrN1hHNWpiMjV6ZENCMWRHbHNYMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTR2ZFhScGJDNXFjMXdpS1R0Y2JtTnZibk4wSUhkbFluTnZZMnRsZEY5amIyNXpkSEoxWTNSdmNsOXFjMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZkMlZpYzI5amEyVjBMV052Ym5OMGNuVmpkRzl5TG1welhDSXBPMXh1WTI5dWMzUWdaR1ZpZFdkZk1TQTlJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2laR1ZpZFdkY0lpa3BPeUF2THlCa1pXSjFaeWdwWEc1amIyNXpkQ0JsYm1kcGJtVmZhVzlmY0dGeWMyVnlYekVnUFNCeVpYRjFhWEpsS0Z3aVpXNW5hVzVsTG1sdkxYQmhjbk5sY2x3aUtUdGNibU52Ym5OMElHUmxZblZuSUQwZ0tEQXNJR1JsWW5Wblh6RXVaR1ZtWVhWc2RDa29YQ0psYm1kcGJtVXVhVzh0WTJ4cFpXNTBPbmRsWW5OdlkydGxkRndpS1RzZ0x5OGdaR1ZpZFdjb0tWeHVMeThnWkdWMFpXTjBJRkpsWVdOMFRtRjBhWFpsSUdWdWRtbHliMjV0Wlc1MFhHNWpiMjV6ZENCcGMxSmxZV04wVG1GMGFYWmxJRDBnZEhsd1pXOW1JRzVoZG1sbllYUnZjaUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmx4dUlDQWdJSFI1Y0dWdlppQnVZWFpwWjJGMGIzSXVjSEp2WkhWamRDQTlQVDBnWENKemRISnBibWRjSWlBbUpseHVJQ0FnSUc1aGRtbG5ZWFJ2Y2k1d2NtOWtkV04wTG5SdlRHOTNaWEpEWVhObEtDa2dQVDA5SUZ3aWNtVmhZM1J1WVhScGRtVmNJanRjYm1Oc1lYTnpJRmRUSUdWNGRHVnVaSE1nZEhKaGJuTndiM0owWDJwelh6RXVWSEpoYm5Od2IzSjBJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJYWldKVGIyTnJaWFFnZEhKaGJuTndiM0owSUdOdmJuTjBjblZqZEc5eUxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHRndhU0I3VDJKcVpXTjBmU0JqYjI1dVpXTjBhVzl1SUc5d2RHbHZibk5jYmlBZ0lDQWdLaUJBWVhCcElIQjFZbXhwWTF4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RITXBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9iM0IwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNWd2NHOXlkSE5DYVc1aGNua2dQU0FoYjNCMGN5NW1iM0pqWlVKaGMyVTJORHRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWSEpoYm5Od2IzSjBJRzVoYldVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVlYQnBJSEIxWW14cFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRDQnVZVzFsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSjNaV0p6YjJOclpYUmNJanRjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUM0JsYm5NZ2MyOWphMlYwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWkc5UGNHVnVLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVkyaGxZMnNvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JHVjBJSEJ5YjJKbElIUnBiV1Z2ZFhSY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbWtnUFNCMGFHbHpMblZ5YVNncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtOTBiMk52YkhNZ1BTQjBhR2x6TG05d2RITXVjSEp2ZEc5amIyeHpPMXh1SUNBZ0lDQWdJQ0F2THlCU1pXRmpkQ0JPWVhScGRtVWdiMjVzZVNCemRYQndiM0owY3lCMGFHVWdKMmhsWVdSbGNuTW5JRzl3ZEdsdmJpd2dZVzVrSUhkcGJHd2djSEpwYm5RZ1lTQjNZWEp1YVc1bklHbG1JR0Z1ZVhSb2FXNW5JR1ZzYzJVZ2FYTWdjR0Z6YzJWa1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5d2RITWdQU0JwYzFKbFlXTjBUbUYwYVhabFhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUh0OVhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUNnd0xDQjFkR2xzWDJwelh6RXVjR2xqYXlrb2RHaHBjeTV2Y0hSekxDQmNJbUZuWlc1MFhDSXNJRndpY0dWeVRXVnpjMkZuWlVSbFpteGhkR1ZjSWl3Z1hDSndabmhjSWl3Z1hDSnJaWGxjSWl3Z1hDSndZWE56Y0doeVlYTmxYQ0lzSUZ3aVkyVnlkRndpTENCY0ltTmhYQ0lzSUZ3aVkybHdhR1Z5YzF3aUxDQmNJbkpsYW1WamRGVnVZWFYwYUc5eWFYcGxaRndpTENCY0lteHZZMkZzUVdSa2NtVnpjMXdpTENCY0luQnliM1J2WTI5c1ZtVnljMmx2Ymx3aUxDQmNJbTl5YVdkcGJsd2lMQ0JjSW0xaGVGQmhlV3h2WVdSY0lpd2dYQ0ptWVcxcGJIbGNJaXdnWENKamFHVmphMU5sY25abGNrbGtaVzUwYVhSNVhDSXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hSekxtVjRkSEpoU0dWaFpHVnljeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwY3k1b1pXRmtaWEp6SUQwZ2RHaHBjeTV2Y0hSekxtVjRkSEpoU0dWaFpHVnljenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFgyTnZibk4wY25WamRHOXlYMnB6WHpFdWRYTnBibWRDY205M2MyVnlWMlZpVTI5amEyVjBJQ1ltSUNGcGMxSmxZV04wVG1GMGFYWmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2NISnZkRzlqYjJ4elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHNWxkeUIzWldKemIyTnJaWFJmWTI5dWMzUnlkV04wYjNKZmFuTmZNUzVYWldKVGIyTnJaWFFvZFhKcExDQndjbTkwYjJOdmJITXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJRzVsZHlCM1pXSnpiMk5yWlhSZlkyOXVjM1J5ZFdOMGIzSmZhbk5mTVM1WFpXSlRiMk5yWlhRb2RYSnBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHNWxkeUIzWldKemIyTnJaWFJmWTI5dWMzUnlkV04wYjNKZmFuTmZNUzVYWldKVGIyTnJaWFFvZFhKcExDQndjbTkwYjJOdmJITXNJRzl3ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1WdGFYUlNaWE5sY25abFpDaGNJbVZ5Y205eVhDSXNJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1M2N5NWlhVzVoY25sVWVYQmxJRDBnZEdocGN5NXpiMk5yWlhRdVltbHVZWEo1Vkhsd1pTQjhmQ0IzWldKemIyTnJaWFJmWTI5dWMzUnlkV04wYjNKZmFuTmZNUzVrWldaaGRXeDBRbWx1WVhKNVZIbHdaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeWN5Z3BPMXh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJaR1J6SUdWMlpXNTBJR3hwYzNSbGJtVnljeUIwYnlCMGFHVWdjMjlqYTJWMFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5Y3lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2N5NXZibTl3Wlc0Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hSekxtRjFkRzlWYm5KbFppa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzTXVYM052WTJ0bGRDNTFibkpsWmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrOXdaVzRvS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2N5NXZibU5zYjNObElEMGdZMnh2YzJWRmRtVnVkQ0E5UGlCMGFHbHpMbTl1UTJ4dmMyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnpZM0pwY0hScGIyNDZJRndpZDJWaWMyOWphMlYwSUdOdmJtNWxZM1JwYjI0Z1kyeHZjMlZrWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBPaUJqYkc5elpVVjJaVzUwWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kekxtOXViV1Z6YzJGblpTQTlJR1YySUQwK0lIUm9hWE11YjI1RVlYUmhLR1YyTG1SaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHpMbTl1WlhKeWIzSWdQU0JsSUQwK0lIUm9hWE11YjI1RmNuSnZjaWhjSW5kbFluTnZZMnRsZENCbGNuSnZjbHdpTENCbEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YzSnBkR1Z6SUdSaGRHRWdkRzhnYzI5amEyVjBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1lYSnlZWGtnYjJZZ2NHRmphMlYwY3k1Y2JpQWdJQ0FnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCM2NtbDBaU2h3WVdOclpYUnpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkM0pwZEdGaWJHVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdMeThnWlc1amIyUmxVR0ZqYTJWMElHVm1abWxqYVdWdWRDQmhjeUJwZENCMWMyVnpJRmRUSUdaeVlXMXBibWRjYmlBZ0lDQWdJQ0FnTHk4Z2JtOGdibVZsWkNCbWIzSWdaVzVqYjJSbFVHRjViRzloWkZ4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIQmhZMnRsZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCaFkydGxkQ0E5SUhCaFkydGxkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnNZWE4wVUdGamEyVjBJRDBnYVNBOVBUMGdjR0ZqYTJWMGN5NXNaVzVuZEdnZ0xTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tEQXNJR1Z1WjJsdVpWOXBiMTl3WVhKelpYSmZNUzVsYm1OdlpHVlFZV05yWlhRcEtIQmhZMnRsZEN3Z2RHaHBjeTV6ZFhCd2IzSjBjMEpwYm1GeWVTd2daR0YwWVNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVd4M1lYbHpJR055WldGMFpTQmhJRzVsZHlCdlltcGxZM1FnS0VkSUxUUXpOeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZjSFJ6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGM1pXSnpiMk5yWlhSZlkyOXVjM1J5ZFdOMGIzSmZhbk5mTVM1MWMybHVaMEp5YjNkelpYSlhaV0pUYjJOclpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoWTJ0bGRDNXZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJ6TG1OdmJYQnlaWE56SUQwZ2NHRmphMlYwTG05d2RHbHZibk11WTI5dGNISmxjM003WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGN5NXdaWEpOWlhOellXZGxSR1ZtYkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JHVnVJRDBnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQWRITXRhV2R1YjNKbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0luTjBjbWx1WjF3aUlEMDlQU0IwZVhCbGIyWWdaR0YwWVNBL0lFSjFabVpsY2k1aWVYUmxUR1Z1WjNSb0tHUmhkR0VwSURvZ1pHRjBZUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdWdUlEd2dkR2hwY3k1dmNIUnpMbkJsY2sxbGMzTmhaMlZFWldac1lYUmxMblJvY21WemFHOXNaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkSE11WTI5dGNISmxjM01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYjIxbGRHbHRaWE1nZEdobElIZGxZbk52WTJ0bGRDQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlHTnNiM05sWkNCaWRYUWdkR2hsSUdKeWIzZHpaWElnWkdsa2JpZDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYUdGMlpTQmhJR05vWVc1alpTQnZaaUJwYm1admNtMXBibWNnZFhNZ1lXSnZkWFFnYVhRZ2VXVjBMQ0JwYmlCMGFHRjBJR05oYzJVZ2MyVnVaQ0IzYVd4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2h5YjNjZ1lXNGdaWEp5YjNKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMlZpYzI5amEyVjBYMk52Ym5OMGNuVmpkRzl5WDJwelh6RXVkWE5wYm1kQ2NtOTNjMlZ5VjJWaVUyOWphMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVlWEJsUlhKeWIzSWdhWE1nZEdoeWIzZHVJSGRvWlc0Z2NHRnpjMmx1WnlCMGFHVWdjMlZqYjI1a0lHRnlaM1Z0Wlc1MElHOXVJRk5oWm1GeWFWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY3k1elpXNWtLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjeTV6Wlc1a0tHUmhkR0VzSUc5d2RITXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFluVm5LRndpZDJWaWMyOWphMlYwSUdOc2IzTmxaQ0JpWldadmNtVWdiMjVqYkc5elpTQmxkbVZ1ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGMzUlFZV05yWlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ptRnJaU0JrY21GcGJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCa1pXWmxjaUIwYnlCdVpYaDBJSFJwWTJzZ2RHOGdZV3hzYjNjZ1UyOWphMlYwSUhSdklHTnNaV0Z5SUhkeWFYUmxRblZtWm1WeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2d3TENCM1pXSnpiMk5yWlhSZlkyOXVjM1J5ZFdOMGIzSmZhbk5mTVM1dVpYaDBWR2xqYXlrb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhSU1pYTmxjblpsWkNoY0ltUnlZV2x1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TENCMGFHbHpMbk5sZEZScGJXVnZkWFJHYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyeHZjMlZ6SUhOdlkydGxkQzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1J2UTJ4dmMyVW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTUzY3lBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjeTVqYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY3lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWdVpYSmhkR1Z6SUhWeWFTQm1iM0lnWTI5dWJtVmpkR2x2Ymk1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCaGNHa2djSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWeWFTZ3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIRjFaWEo1SUQwZ2RHaHBjeTV4ZFdWeWVTQjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJOb1pXMWhJRDBnZEdocGN5NXZjSFJ6TG5ObFkzVnlaU0EvSUZ3aWQzTnpYQ0lnT2lCY0luZHpYQ0k3WEc0Z0lDQWdJQ0FnSUd4bGRDQndiM0owSUQwZ1hDSmNJanRjYmlBZ0lDQWdJQ0FnTHk4Z1lYWnZhV1FnY0c5eWRDQnBaaUJrWldaaGRXeDBJR1p2Y2lCelkyaGxiV0ZjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGN5NXdiM0owSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvS0Z3aWQzTnpYQ0lnUFQwOUlITmphR1Z0WVNBbUppQk9kVzFpWlhJb2RHaHBjeTV2Y0hSekxuQnZjblFwSUNFOVBTQTBORE1wSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tGd2lkM05jSWlBOVBUMGdjMk5vWlcxaElDWW1JRTUxYldKbGNpaDBhR2x6TG05d2RITXVjRzl5ZENrZ0lUMDlJRGd3S1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmNuUWdQU0JjSWpwY0lpQXJJSFJvYVhNdWIzQjBjeTV3YjNKME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUdGd2NHVnVaQ0IwYVcxbGMzUmhiWEFnZEc4Z1ZWSkpYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEhNdWRHbHRaWE4wWVcxd1VtVnhkV1Z6ZEhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhGMVpYSjVXM1JvYVhNdWIzQjBjeTUwYVcxbGMzUmhiWEJRWVhKaGJWMGdQU0FvTUN3Z2VXVmhjM1JmYW5OZk1TNTVaV0Z6ZENrb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCamIyMXRkVzVwWTJGMFpTQmlhVzVoY25rZ2MzVndjRzl5ZENCallYQmhZbWxzYVhScFpYTmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbk4xY0hCdmNuUnpRbWx1WVhKNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeGRXVnllUzVpTmpRZ1BTQXhPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z1WTI5a1pXUlJkV1Z5ZVNBOUlDZ3dMQ0J3WVhKelpYRnpYMnB6WHpFdVpXNWpiMlJsS1NoeGRXVnllU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x3ZGpZZ1BTQjBhR2x6TG05d2RITXVhRzl6ZEc1aGJXVXVhVzVrWlhoUFppaGNJanBjSWlrZ0lUMDlJQzB4TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hOamFHVnRZU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJam92TDF3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNocGNIWTJJRDhnWENKYlhDSWdLeUIwYUdsekxtOXdkSE11YUc5emRHNWhiV1VnS3lCY0lsMWNJaUE2SUhSb2FYTXViM0IwY3k1b2IzTjBibUZ0WlNrZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5eWRDQXJYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl3ZEhNdWNHRjBhQ0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aVzVqYjJSbFpGRjFaWEo1TG14bGJtZDBhQ0EvSUZ3aVAxd2lJQ3NnWlc1amIyUmxaRkYxWlhKNUlEb2dYQ0pjSWlrcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR1pXRjBkWEpsSUdSbGRHVmpkR2x2YmlCbWIzSWdWMlZpVTI5amEyVjBMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdkMmhsZEdobGNpQjBhR2x6SUhSeVlXNXpjRzl5ZENCcGN5QmhkbUZwYkdGaWJHVXVYRzRnSUNBZ0lDb2dRR0Z3YVNCd2RXSnNhV05jYmlBZ0lDQWdLaTljYmlBZ0lDQmphR1ZqYXlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhkMlZpYzI5amEyVjBYMk52Ym5OMGNuVmpkRzl5WDJwelh6RXVWMlZpVTI5amEyVjBPMXh1SUNBZ0lIMWNibjFjYm1WNGNHOXlkSE11VjFNZ1BTQlhVenRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dUx5OGdZbkp2ZDNObGNpQnphR2x0SUdadmNpQjRiV3hvZEhSd2NtVnhkV1Z6ZENCdGIyUjFiR1ZjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JtVjRjRzl5ZEhNdVdFaFNJRDBnZG05cFpDQXdPMXh1WTI5dWMzUWdhR0Z6WDJOdmNuTmZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjI1MGNtbGlMMmhoY3kxamIzSnpMbXB6WENJcE8xeHVZMjl1YzNRZ1oyeHZZbUZzVkdocGMxOXFjMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMmRzYjJKaGJGUm9hWE11YW5OY0lpazdYRzVtZFc1amRHbHZiaUJZU0ZJb2IzQjBjeWtnZTF4dUlDQWdJR052Ym5OMElIaGtiMjFoYVc0Z1BTQnZjSFJ6TG5oa2IyMWhhVzQ3WEc0Z0lDQWdMeThnV0UxTVNIUjBjRkpsY1hWbGMzUWdZMkZ1SUdKbElHUnBjMkZpYkdWa0lHOXVJRWxGWEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRndpZFc1a1pXWnBibVZrWENJZ0lUMDlJSFI1Y0dWdlppQllUVXhJZEhSd1VtVnhkV1Z6ZENBbUppQW9JWGhrYjIxaGFXNGdmSHdnYUdGelgyTnZjbk5mYW5OZk1TNW9ZWE5EVDFKVEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QllUVXhJZEhSd1VtVnhkV1Z6ZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGRHTm9JQ2hsS1NCN0lIMWNiaUFnSUNCcFppQW9JWGhrYjIxaGFXNHBJSHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1oyeHZZbUZzVkdocGMxOXFjMTh4TG1kc2IySmhiRlJvYVhOVGFHbHRXMXRjSWtGamRHbDJaVndpWFM1amIyNWpZWFFvWENKUFltcGxZM1JjSWlrdWFtOXBiaWhjSWxoY0lpbGRLRndpVFdsamNtOXpiMlowTGxoTlRFaFVWRkJjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVXBJSHNnZlZ4dUlDQWdJSDFjYm4xY2JtVjRjRzl5ZEhNdVdFaFNJRDBnV0VoU08xeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1bGVIQnZjblJ6TG1KNWRHVk1aVzVuZEdnZ1BTQmxlSEJ2Y25SekxtbHVjM1JoYkd4VWFXMWxja1oxYm1OMGFXOXVjeUE5SUdWNGNHOXlkSE11Y0dsamF5QTlJSFp2YVdRZ01EdGNibU52Ym5OMElHZHNiMkpoYkZSb2FYTmZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMmRzYjJKaGJGUm9hWE11YW5OY0lpazdYRzVtZFc1amRHbHZiaUJ3YVdOcktHOWlhaXdnTGk0dVlYUjBjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQmhkSFJ5TG5KbFpIVmpaU2dvWVdOakxDQnJLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2WW1vdWFHRnpUM2R1VUhKdmNHVnlkSGtvYXlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGalkxdHJYU0E5SUc5aWFsdHJYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVdOak8xeHVJQ0FnSUgwc0lIdDlLVHRjYm4xY2JtVjRjRzl5ZEhNdWNHbGpheUE5SUhCcFkyczdYRzR2THlCTFpXVndJR0VnY21WbVpYSmxibU5sSUhSdklIUm9aU0J5WldGc0lIUnBiV1Z2ZFhRZ1puVnVZM1JwYjI1eklITnZJSFJvWlhrZ1kyRnVJR0psSUhWelpXUWdkMmhsYmlCdmRtVnljbWxrWkdWdVhHNWpiMjV6ZENCT1FWUkpWa1ZmVTBWVVgxUkpUVVZQVlZRZ1BTQnpaWFJVYVcxbGIzVjBPMXh1WTI5dWMzUWdUa0ZVU1ZaRlgwTk1SVUZTWDFSSlRVVlBWVlFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzVtZFc1amRHbHZiaUJwYm5OMFlXeHNWR2x0WlhKR2RXNWpkR2x2Ym5Nb2IySnFMQ0J2Y0hSektTQjdYRzRnSUNBZ2FXWWdLRzl3ZEhNdWRYTmxUbUYwYVhabFZHbHRaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lHOWlhaTV6WlhSVWFXMWxiM1YwUm00Z1BTQk9RVlJKVmtWZlUwVlVYMVJKVFVWUFZWUXVZbWx1WkNobmJHOWlZV3hVYUdselgycHpYekV1WjJ4dlltRnNWR2hwYzFOb2FXMHBPMXh1SUNBZ0lDQWdJQ0J2WW1vdVkyeGxZWEpVYVcxbGIzVjBSbTRnUFNCT1FWUkpWa1ZmUTB4RlFWSmZWRWxOUlU5VlZDNWlhVzVrS0dkc2IySmhiRlJvYVhOZmFuTmZNUzVuYkc5aVlXeFVhR2x6VTJocGJTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J2WW1vdWMyVjBWR2x0Wlc5MWRFWnVJRDBnYzJWMFZHbHRaVzkxZEM1aWFXNWtLR2RzYjJKaGJGUm9hWE5mYW5OZk1TNW5iRzlpWVd4VWFHbHpVMmhwYlNrN1hHNGdJQ0FnSUNBZ0lHOWlhaTVqYkdWaGNsUnBiV1Z2ZFhSR2JpQTlJR05zWldGeVZHbHRaVzkxZEM1aWFXNWtLR2RzYjJKaGJGUm9hWE5mYW5OZk1TNW5iRzlpWVd4VWFHbHpVMmhwYlNrN1hHNGdJQ0FnZlZ4dWZWeHVaWGh3YjNKMGN5NXBibk4wWVd4c1ZHbHRaWEpHZFc1amRHbHZibk1nUFNCcGJuTjBZV3hzVkdsdFpYSkdkVzVqZEdsdmJuTTdYRzR2THlCaVlYTmxOalFnWlc1amIyUmxaQ0JpZFdabVpYSnpJR0Z5WlNCaFltOTFkQ0F6TXlVZ1ltbG5aMlZ5SUNob2RIUndjem92TDJWdUxuZHBhMmx3WldScFlTNXZjbWN2ZDJscmFTOUNZWE5sTmpRcFhHNWpiMjV6ZENCQ1FWTkZOalJmVDFaRlVraEZRVVFnUFNBeExqTXpPMXh1THk4Z2QyVWdZMjkxYkdRZ1lXeHpieUJvWVhabElIVnpaV1FnWUc1bGR5QkNiRzlpS0Z0dlltcGRLUzV6YVhwbFlDd2dZblYwSUdsMElHbHpiaWQwSUhOMWNIQnZjblJsWkNCcGJpQkpSVGxjYm1aMWJtTjBhVzl1SUdKNWRHVk1aVzVuZEdnb2IySnFLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ2WW1vZ1BUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWMFpqaE1aVzVuZEdnb2IySnFLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdZWEp5WVhsaWRXWm1aWElnYjNJZ1lteHZZbHh1SUNBZ0lISmxkSFZ5YmlCTllYUm9MbU5sYVd3b0tHOWlhaTVpZVhSbFRHVnVaM1JvSUh4OElHOWlhaTV6YVhwbEtTQXFJRUpCVTBVMk5GOVBWa1ZTU0VWQlJDazdYRzU5WEc1bGVIQnZjblJ6TG1KNWRHVk1aVzVuZEdnZ1BTQmllWFJsVEdWdVozUm9PMXh1Wm5WdVkzUnBiMjRnZFhSbU9FeGxibWQwYUNoemRISXBJSHRjYmlBZ0lDQnNaWFFnWXlBOUlEQXNJR3hsYm1kMGFDQTlJREE3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHd2dQU0J6ZEhJdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR01nUFNCemRISXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR01nUENBd2VEZ3dLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaVzVuZEdnZ0t6MGdNVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoaklEd2dNSGc0TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhQ0FyUFNBeU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR01nUENBd2VHUTRNREFnZkh3Z1l5QStQU0F3ZUdVd01EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxibWQwYUNBclBTQXpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FTc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVnVaM1JvSUNzOUlEUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUd4bGJtZDBhRHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1Wlhod2IzSjBjeTVGVWxKUFVsOVFRVU5MUlZRZ1BTQmxlSEJ2Y25SekxsQkJRMHRGVkY5VVdWQkZVMTlTUlZaRlVsTkZJRDBnWlhod2IzSjBjeTVRUVVOTFJWUmZWRmxRUlZNZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCUVFVTkxSVlJmVkZsUVJWTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwT3lBdkx5QnVieUJOWVhBZ1BTQnVieUJ3YjJ4NVptbHNiRnh1Wlhod2IzSjBjeTVRUVVOTFJWUmZWRmxRUlZNZ1BTQlFRVU5MUlZSZlZGbFFSVk03WEc1UVFVTkxSVlJmVkZsUVJWTmJYQ0p2Y0dWdVhDSmRJRDBnWENJd1hDSTdYRzVRUVVOTFJWUmZWRmxRUlZOYlhDSmpiRzl6WlZ3aVhTQTlJRndpTVZ3aU8xeHVVRUZEUzBWVVgxUlpVRVZUVzF3aWNHbHVaMXdpWFNBOUlGd2lNbHdpTzF4dVVFRkRTMFZVWDFSWlVFVlRXMXdpY0c5dVoxd2lYU0E5SUZ3aU0xd2lPMXh1VUVGRFMwVlVYMVJaVUVWVFcxd2liV1Z6YzJGblpWd2lYU0E5SUZ3aU5Gd2lPMXh1VUVGRFMwVlVYMVJaVUVWVFcxd2lkWEJuY21Ga1pWd2lYU0E5SUZ3aU5Wd2lPMXh1VUVGRFMwVlVYMVJaVUVWVFcxd2libTl2Y0Z3aVhTQTlJRndpTmx3aU8xeHVZMjl1YzNRZ1VFRkRTMFZVWDFSWlVFVlRYMUpGVmtWU1UwVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dVpYaHdiM0owY3k1UVFVTkxSVlJmVkZsUVJWTmZVa1ZXUlZKVFJTQTlJRkJCUTB0RlZGOVVXVkJGVTE5U1JWWkZVbE5GTzF4dVQySnFaV04wTG10bGVYTW9VRUZEUzBWVVgxUlpVRVZUS1M1bWIzSkZZV05vS0d0bGVTQTlQaUI3WEc0Z0lDQWdVRUZEUzBWVVgxUlpVRVZUWDFKRlZrVlNVMFZiVUVGRFMwVlVYMVJaVUVWVFcydGxlVjFkSUQwZ2EyVjVPMXh1ZlNrN1hHNWpiMjV6ZENCRlVsSlBVbDlRUVVOTFJWUWdQU0I3SUhSNWNHVTZJRndpWlhKeWIzSmNJaXdnWkdGMFlUb2dYQ0p3WVhKelpYSWdaWEp5YjNKY0lpQjlPMXh1Wlhod2IzSjBjeTVGVWxKUFVsOVFRVU5MUlZRZ1BTQkZVbEpQVWw5UVFVTkxSVlE3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibVY0Y0c5eWRITXVaR1ZqYjJSbElEMGdaWGh3YjNKMGN5NWxibU52WkdVZ1BTQjJiMmxrSURBN1hHNWpiMjV6ZENCamFHRnljeUE5SUNkQlFrTkVSVVpIU0VsS1MweE5UazlRVVZKVFZGVldWMWhaV21GaVkyUmxabWRvYVdwcmJHMXViM0J4Y25OMGRYWjNlSGw2TURFeU16UTFOamM0T1Nzdkp6dGNiaTh2SUZWelpTQmhJR3h2YjJ0MWNDQjBZV0pzWlNCMGJ5Qm1hVzVrSUhSb1pTQnBibVJsZUM1Y2JtTnZibk4wSUd4dmIydDFjQ0E5SUhSNWNHVnZaaUJWYVc1ME9FRnljbUY1SUQwOVBTQW5kVzVrWldacGJtVmtKeUEvSUZ0ZElEb2dibVYzSUZWcGJuUTRRWEp5WVhrb01qVTJLVHRjYm1admNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z1kyaGhjbk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCc2IyOXJkWEJiWTJoaGNuTXVZMmhoY2tOdlpHVkJkQ2hwS1YwZ1BTQnBPMXh1ZlZ4dVkyOXVjM1FnWlc1amIyUmxJRDBnS0dGeWNtRjVZblZtWm1WeUtTQTlQaUI3WEc0Z0lDQWdiR1YwSUdKNWRHVnpJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29ZWEp5WVhsaWRXWm1aWElwTENCcExDQnNaVzRnUFNCaWVYUmxjeTVzWlc1bmRHZ3NJR0poYzJVMk5DQTlJQ2NuTzF4dUlDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrZ0t6MGdNeWtnZTF4dUlDQWdJQ0FnSUNCaVlYTmxOalFnS3owZ1kyaGhjbk5iWW5sMFpYTmJhVjBnUGo0Z01sMDdYRzRnSUNBZ0lDQWdJR0poYzJVMk5DQXJQU0JqYUdGeWMxc29LR0o1ZEdWelcybGRJQ1lnTXlrZ1BEd2dOQ2tnZkNBb1lubDBaWE5iYVNBcklERmRJRDQrSURRcFhUdGNiaUFnSUNBZ0lDQWdZbUZ6WlRZMElDczlJR05vWVhKeld5Z29ZbmwwWlhOYmFTQXJJREZkSUNZZ01UVXBJRHc4SURJcElId2dLR0o1ZEdWelcya2dLeUF5WFNBK1BpQTJLVjA3WEc0Z0lDQWdJQ0FnSUdKaGMyVTJOQ0FyUFNCamFHRnljMXRpZVhSbGMxdHBJQ3NnTWwwZ0ppQTJNMTA3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hzWlc0Z0pTQXpJRDA5UFNBeUtTQjdYRzRnSUNBZ0lDQWdJR0poYzJVMk5DQTlJR0poYzJVMk5DNXpkV0p6ZEhKcGJtY29NQ3dnWW1GelpUWTBMbXhsYm1kMGFDQXRJREVwSUNzZ0p6MG5PMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNoc1pXNGdKU0F6SUQwOVBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUdKaGMyVTJOQ0E5SUdKaGMyVTJOQzV6ZFdKemRISnBibWNvTUN3Z1ltRnpaVFkwTG14bGJtZDBhQ0F0SURJcElDc2dKejA5Snp0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHSmhjMlUyTkR0Y2JuMDdYRzVsZUhCdmNuUnpMbVZ1WTI5a1pTQTlJR1Z1WTI5a1pUdGNibU52Ym5OMElHUmxZMjlrWlNBOUlDaGlZWE5sTmpRcElEMCtJSHRjYmlBZ0lDQnNaWFFnWW5WbVptVnlUR1Z1WjNSb0lEMGdZbUZ6WlRZMExteGxibWQwYUNBcUlEQXVOelVzSUd4bGJpQTlJR0poYzJVMk5DNXNaVzVuZEdnc0lHa3NJSEFnUFNBd0xDQmxibU52WkdWa01Td2daVzVqYjJSbFpESXNJR1Z1WTI5a1pXUXpMQ0JsYm1OdlpHVmtORHRjYmlBZ0lDQnBaaUFvWW1GelpUWTBXMkpoYzJVMk5DNXNaVzVuZEdnZ0xTQXhYU0E5UFQwZ0p6MG5LU0I3WEc0Z0lDQWdJQ0FnSUdKMVptWmxja3hsYm1kMGFDMHRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ltRnpaVFkwVzJKaGMyVTJOQzVzWlc1bmRHZ2dMU0F5WFNBOVBUMGdKejBuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpZFdabVpYSk1aVzVuZEdndExUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0JoY25KaGVXSjFabVpsY2lBOUlHNWxkeUJCY25KaGVVSjFabVpsY2loaWRXWm1aWEpNWlc1bmRHZ3BMQ0JpZVhSbGN5QTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHRnljbUY1WW5WbVptVnlLVHRjYmlBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHVnVPeUJwSUNzOUlEUXBJSHRjYmlBZ0lDQWdJQ0FnWlc1amIyUmxaREVnUFNCc2IyOXJkWEJiWW1GelpUWTBMbU5vWVhKRGIyUmxRWFFvYVNsZE8xeHVJQ0FnSUNBZ0lDQmxibU52WkdWa01pQTlJR3h2YjJ0MWNGdGlZWE5sTmpRdVkyaGhja052WkdWQmRDaHBJQ3NnTVNsZE8xeHVJQ0FnSUNBZ0lDQmxibU52WkdWa015QTlJR3h2YjJ0MWNGdGlZWE5sTmpRdVkyaGhja052WkdWQmRDaHBJQ3NnTWlsZE8xeHVJQ0FnSUNBZ0lDQmxibU52WkdWa05DQTlJR3h2YjJ0MWNGdGlZWE5sTmpRdVkyaGhja052WkdWQmRDaHBJQ3NnTXlsZE8xeHVJQ0FnSUNBZ0lDQmllWFJsYzF0d0t5dGRJRDBnS0dWdVkyOWtaV1F4SUR3OElESXBJSHdnS0dWdVkyOWtaV1F5SUQ0K0lEUXBPMXh1SUNBZ0lDQWdJQ0JpZVhSbGMxdHdLeXRkSUQwZ0tDaGxibU52WkdWa01pQW1JREUxS1NBOFBDQTBLU0I4SUNobGJtTnZaR1ZrTXlBK1BpQXlLVHRjYmlBZ0lDQWdJQ0FnWW5sMFpYTmJjQ3NyWFNBOUlDZ29aVzVqYjJSbFpETWdKaUF6S1NBOFBDQTJLU0I4SUNobGJtTnZaR1ZrTkNBbUlEWXpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdGeWNtRjVZblZtWm1WeU8xeHVmVHRjYm1WNGNHOXlkSE11WkdWamIyUmxJRDBnWkdWamIyUmxPMXh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNWpiMjV6ZENCamIyMXRiMjV6WDJwelh6RWdQU0J5WlhGMWFYSmxLRndpTGk5amIyMXRiMjV6TG1welhDSXBPMXh1WTI5dWMzUWdZbUZ6WlRZMFgyRnljbUY1WW5WbVptVnlYMnB6WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTlqYjI1MGNtbGlMMkpoYzJVMk5DMWhjbkpoZVdKMVptWmxjaTVxYzF3aUtUdGNibU52Ym5OMElIZHBkR2hPWVhScGRtVkJjbkpoZVVKMVptWmxjaUE5SUhSNWNHVnZaaUJCY25KaGVVSjFabVpsY2lBOVBUMGdYQ0ptZFc1amRHbHZibHdpTzF4dVkyOXVjM1FnWkdWamIyUmxVR0ZqYTJWMElEMGdLR1Z1WTI5a1pXUlFZV05yWlhRc0lHSnBibUZ5ZVZSNWNHVXBJRDArSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWdVkyOWtaV1JRWVdOclpYUWdJVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRndpYldWemMyRm5aVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ2JXRndRbWx1WVhKNUtHVnVZMjlrWldSUVlXTnJaWFFzSUdKcGJtRnllVlI1Y0dVcFhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJSFI1Y0dVZ1BTQmxibU52WkdWa1VHRmphMlYwTG1Ob1lYSkJkQ2d3S1R0Y2JpQWdJQ0JwWmlBb2RIbHdaU0E5UFQwZ1hDSmlYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklGd2liV1Z6YzJGblpWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWkdWamIyUmxRbUZ6WlRZMFVHRmphMlYwS0dWdVkyOWtaV1JRWVdOclpYUXVjM1ZpYzNSeWFXNW5LREVwTENCaWFXNWhjbmxVZVhCbEtWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J3WVdOclpYUlVlWEJsSUQwZ1kyOXRiVzl1YzE5cWMxOHhMbEJCUTB0RlZGOVVXVkJGVTE5U1JWWkZVbE5GVzNSNWNHVmRPMXh1SUNBZ0lHbG1JQ2doY0dGamEyVjBWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXRiVzl1YzE5cWMxOHhMa1ZTVWs5U1gxQkJRMHRGVkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHVnVZMjlrWldSUVlXTnJaWFF1YkdWdVozUm9JRDRnTVZ4dUlDQWdJQ0FnSUNBL0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJR052YlcxdmJuTmZhbk5mTVM1UVFVTkxSVlJmVkZsUVJWTmZVa1ZXUlZKVFJWdDBlWEJsWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFNklHVnVZMjlrWldSUVlXTnJaWFF1YzNWaWMzUnlhVzVuS0RFcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCamIyMXRiMjV6WDJwelh6RXVVRUZEUzBWVVgxUlpVRVZUWDFKRlZrVlNVMFZiZEhsd1pWMWNiaUFnSUNBZ0lDQWdmVHRjYm4wN1hHNWpiMjV6ZENCa1pXTnZaR1ZDWVhObE5qUlFZV05yWlhRZ1BTQW9aR0YwWVN3Z1ltbHVZWEo1Vkhsd1pTa2dQVDRnZTF4dUlDQWdJR2xtSUNoM2FYUm9UbUYwYVhabFFYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZqYjJSbFpDQTlJQ2d3TENCaVlYTmxOalJmWVhKeVlYbGlkV1ptWlhKZmFuTmZNUzVrWldOdlpHVXBLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRndRbWx1WVhKNUtHUmxZMjlrWldRc0lHSnBibUZ5ZVZSNWNHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHNnWW1GelpUWTBPaUIwY25WbExDQmtZWFJoSUgwN0lDOHZJR1poYkd4aVlXTnJJR1p2Y2lCdmJHUWdZbkp2ZDNObGNuTmNiaUFnSUNCOVhHNTlPMXh1WTI5dWMzUWdiV0Z3UW1sdVlYSjVJRDBnS0dSaGRHRXNJR0pwYm1GeWVWUjVjR1VwSUQwK0lIdGNiaUFnSUNCemQybDBZMmdnS0dKcGJtRnllVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNCY0ltSnNiMkpjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmtZWFJoSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGxDZFdabVpYSWdQeUJ1WlhjZ1FteHZZaWhiWkdGMFlWMHBJRG9nWkdGMFlUdGNiaUFnSUNBZ0lDQWdZMkZ6WlNCY0ltRnljbUY1WW5WbVptVnlYQ0k2WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHRjBZVHNnTHk4Z1lYTnpkVzFwYm1jZ2RHaGxJR1JoZEdFZ2FYTWdZV3h5WldGa2VTQmhiaUJCY25KaGVVSjFabVpsY2x4dUlDQWdJSDFjYm4wN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmtaV052WkdWUVlXTnJaWFE3WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNibU52Ym5OMElHTnZiVzF2Ym5OZmFuTmZNU0E5SUhKbGNYVnBjbVVvWENJdUwyTnZiVzF2Ym5NdWFuTmNJaWs3WEc1amIyNXpkQ0IzYVhSb1RtRjBhWFpsUW14dllpQTlJSFI1Y0dWdlppQkNiRzlpSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnZkh4Y2JpQWdJQ0FvZEhsd1pXOW1JRUpzYjJJZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWmNiaUFnSUNBZ0lDQWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0VKc2IySXBJRDA5UFNCY0lsdHZZbXBsWTNRZ1FteHZZa052Ym5OMGNuVmpkRzl5WFZ3aUtUdGNibU52Ym5OMElIZHBkR2hPWVhScGRtVkJjbkpoZVVKMVptWmxjaUE5SUhSNWNHVnZaaUJCY25KaGVVSjFabVpsY2lBOVBUMGdYQ0ptZFc1amRHbHZibHdpTzF4dUx5OGdRWEp5WVhsQ2RXWm1aWEl1YVhOV2FXVjNJRzFsZEdodlpDQnBjeUJ1YjNRZ1pHVm1hVzVsWkNCcGJpQkpSVEV3WEc1amIyNXpkQ0JwYzFacFpYY2dQU0J2WW1vZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0pjYmlBZ0lDQWdJQ0FnUHlCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhjb2IySnFLVnh1SUNBZ0lDQWdJQ0E2SUc5aWFpQW1KaUJ2WW1vdVluVm1abVZ5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGxDZFdabVpYSTdYRzU5TzF4dVkyOXVjM1FnWlc1amIyUmxVR0ZqYTJWMElEMGdLSHNnZEhsd1pTd2daR0YwWVNCOUxDQnpkWEJ3YjNKMGMwSnBibUZ5ZVN3Z1kyRnNiR0poWTJzcElEMCtJSHRjYmlBZ0lDQnBaaUFvZDJsMGFFNWhkR2wyWlVKc2IySWdKaVlnWkdGMFlTQnBibk4wWVc1alpXOW1JRUpzYjJJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMWNIQnZjblJ6UW1sdVlYSjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRnNiR0poWTJzb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNWpiMlJsUW14dllrRnpRbUZ6WlRZMEtHUmhkR0VzSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElHbG1JQ2gzYVhSb1RtRjBhWFpsUVhKeVlYbENkV1ptWlhJZ0ppWmNiaUFnSUNBZ0lDQWdLR1JoZEdFZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaUI4ZkNCcGMxWnBaWGNvWkdGMFlTa3BLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkWEJ3YjNKMGMwSnBibUZ5ZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1WTI5a1pVSnNiMkpCYzBKaGMyVTJOQ2h1WlhjZ1FteHZZaWhiWkdGMFlWMHBMQ0JqWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeThnY0d4aGFXNGdjM1J5YVc1blhHNGdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR052YlcxdmJuTmZhbk5mTVM1UVFVTkxSVlJmVkZsUVJWTmJkSGx3WlYwZ0t5QW9aR0YwWVNCOGZDQmNJbHdpS1NrN1hHNTlPMXh1WTI5dWMzUWdaVzVqYjJSbFFteHZZa0Z6UW1GelpUWTBJRDBnS0dSaGRHRXNJR05oYkd4aVlXTnJLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdabWxzWlZKbFlXUmxjaUE5SUc1bGR5QkdhV3hsVW1WaFpHVnlLQ2s3WEc0Z0lDQWdabWxzWlZKbFlXUmxjaTV2Ym14dllXUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOdmJuUmxiblFnUFNCbWFXeGxVbVZoWkdWeUxuSmxjM1ZzZEM1emNHeHBkQ2hjSWl4Y0lpbGJNVjA3WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05yS0Z3aVlsd2lJQ3NnWTI5dWRHVnVkQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1ptbHNaVkpsWVdSbGNpNXlaV0ZrUVhORVlYUmhWVkpNS0dSaGRHRXBPMXh1ZlR0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHVnVZMjlrWlZCaFkydGxkRHRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVaWGh3YjNKMGN5NWtaV052WkdWUVlYbHNiMkZrSUQwZ1pYaHdiM0owY3k1a1pXTnZaR1ZRWVdOclpYUWdQU0JsZUhCdmNuUnpMbVZ1WTI5a1pWQmhlV3h2WVdRZ1BTQmxlSEJ2Y25SekxtVnVZMjlrWlZCaFkydGxkQ0E5SUdWNGNHOXlkSE11Y0hKdmRHOWpiMndnUFNCMmIybGtJREE3WEc1amIyNXpkQ0JsYm1OdlpHVlFZV05yWlhSZmFuTmZNU0E5SUhKbGNYVnBjbVVvWENJdUwyVnVZMjlrWlZCaFkydGxkQzVxYzF3aUtUdGNibVY0Y0c5eWRITXVaVzVqYjJSbFVHRmphMlYwSUQwZ1pXNWpiMlJsVUdGamEyVjBYMnB6WHpFdVpHVm1ZWFZzZER0Y2JtTnZibk4wSUdSbFkyOWtaVkJoWTJ0bGRGOXFjMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZaR1ZqYjJSbFVHRmphMlYwTG1welhDSXBPMXh1Wlhod2IzSjBjeTVrWldOdlpHVlFZV05yWlhRZ1BTQmtaV052WkdWUVlXTnJaWFJmYW5OZk1TNWtaV1poZFd4ME8xeHVZMjl1YzNRZ1UwVlFRVkpCVkU5U0lEMGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2d6TUNrN0lDOHZJSE5sWlNCb2RIUndjem92TDJWdUxuZHBhMmx3WldScFlTNXZjbWN2ZDJscmFTOUVaV3hwYldsMFpYSWpRVk5EU1VsZlpHVnNhVzFwZEdWa1gzUmxlSFJjYm1OdmJuTjBJR1Z1WTI5a1pWQmhlV3h2WVdRZ1BTQW9jR0ZqYTJWMGN5d2dZMkZzYkdKaFkyc3BJRDArSUh0Y2JpQWdJQ0F2THlCemIyMWxJSEJoWTJ0bGRITWdiV0Y1SUdKbElHRmtaR1ZrSUhSdklIUm9aU0JoY25KaGVTQjNhR2xzWlNCbGJtTnZaR2x1Wnl3Z2MyOGdkR2hsSUdsdWFYUnBZV3dnYkdWdVozUm9JRzExYzNRZ1ltVWdjMkYyWldSY2JpQWdJQ0JqYjI1emRDQnNaVzVuZEdnZ1BTQndZV05yWlhSekxteGxibWQwYUR0Y2JpQWdJQ0JqYjI1emRDQmxibU52WkdWa1VHRmphMlYwY3lBOUlHNWxkeUJCY25KaGVTaHNaVzVuZEdncE8xeHVJQ0FnSUd4bGRDQmpiM1Z1ZENBOUlEQTdYRzRnSUNBZ2NHRmphMlYwY3k1bWIzSkZZV05vS0Nod1lXTnJaWFFzSUdrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ptOXlZMlVnWW1GelpUWTBJR1Z1WTI5a2FXNW5JR1p2Y2lCaWFXNWhjbmtnY0dGamEyVjBjMXh1SUNBZ0lDQWdJQ0FvTUN3Z1pXNWpiMlJsVUdGamEyVjBYMnB6WHpFdVpHVm1ZWFZzZENrb2NHRmphMlYwTENCbVlXeHpaU3dnWlc1amIyUmxaRkJoWTJ0bGRDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxibU52WkdWa1VHRmphMlYwYzF0cFhTQTlJR1Z1WTI5a1pXUlFZV05yWlhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0t5dGpiM1Z1ZENBOVBUMGdiR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc29aVzVqYjJSbFpGQmhZMnRsZEhNdWFtOXBiaWhUUlZCQlVrRlVUMUlwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNTlPMXh1Wlhod2IzSjBjeTVsYm1OdlpHVlFZWGxzYjJGa0lEMGdaVzVqYjJSbFVHRjViRzloWkR0Y2JtTnZibk4wSUdSbFkyOWtaVkJoZVd4dllXUWdQU0FvWlc1amIyUmxaRkJoZVd4dllXUXNJR0pwYm1GeWVWUjVjR1VwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JsYm1OdlpHVmtVR0ZqYTJWMGN5QTlJR1Z1WTI5a1pXUlFZWGxzYjJGa0xuTndiR2wwS0ZORlVFRlNRVlJQVWlrN1hHNGdJQ0FnWTI5dWMzUWdjR0ZqYTJWMGN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWlc1amIyUmxaRkJoWTJ0bGRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkdWamIyUmxaRkJoWTJ0bGRDQTlJQ2d3TENCa1pXTnZaR1ZRWVdOclpYUmZhbk5mTVM1a1pXWmhkV3gwS1NobGJtTnZaR1ZrVUdGamEyVjBjMXRwWFN3Z1ltbHVZWEo1Vkhsd1pTazdYRzRnSUNBZ0lDQWdJSEJoWTJ0bGRITXVjSFZ6YUNoa1pXTnZaR1ZrVUdGamEyVjBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmxZMjlrWldSUVlXTnJaWFF1ZEhsd1pTQTlQVDBnWENKbGNuSnZjbHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY0dGamEyVjBjenRjYm4wN1hHNWxlSEJ2Y25SekxtUmxZMjlrWlZCaGVXeHZZV1FnUFNCa1pXTnZaR1ZRWVhsc2IyRmtPMXh1Wlhod2IzSjBjeTV3Y205MGIyTnZiQ0E5SURRN1hHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm1WNGNHOXlkSE11Y21WamIyNXpkSEoxWTNSUVlXTnJaWFFnUFNCbGVIQnZjblJ6TG1SbFkyOXVjM1J5ZFdOMFVHRmphMlYwSUQwZ2RtOXBaQ0F3TzF4dVkyOXVjM1FnYVhOZlltbHVZWEo1WDJwelh6RWdQU0J5WlhGMWFYSmxLRndpTGk5cGN5MWlhVzVoY25rdWFuTmNJaWs3WEc0dktpcGNiaUFxSUZKbGNHeGhZMlZ6SUdWMlpYSjVJRUoxWm1abGNpQjhJRUZ5Y21GNVFuVm1abVZ5SUh3Z1FteHZZaUI4SUVacGJHVWdhVzRnY0dGamEyVjBJSGRwZEdnZ1lTQnVkVzFpWlhKbFpDQndiR0ZqWldodmJHUmxjaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjR0ZqYTJWMElDMGdjMjlqYTJWMExtbHZJR1YyWlc1MElIQmhZMnRsZEZ4dUlDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZTQjNhWFJvSUdSbFkyOXVjM1J5ZFdOMFpXUWdjR0ZqYTJWMElHRnVaQ0JzYVhOMElHOW1JR0oxWm1abGNuTmNiaUFxSUVCd2RXSnNhV05jYmlBcUwxeHVablZ1WTNScGIyNGdaR1ZqYjI1emRISjFZM1JRWVdOclpYUW9jR0ZqYTJWMEtTQjdYRzRnSUNBZ1kyOXVjM1FnWW5WbVptVnljeUE5SUZ0ZE8xeHVJQ0FnSUdOdmJuTjBJSEJoWTJ0bGRFUmhkR0VnUFNCd1lXTnJaWFF1WkdGMFlUdGNiaUFnSUNCamIyNXpkQ0J3WVdOcklEMGdjR0ZqYTJWME8xeHVJQ0FnSUhCaFkyc3VaR0YwWVNBOUlGOWtaV052Ym5OMGNuVmpkRkJoWTJ0bGRDaHdZV05yWlhSRVlYUmhMQ0JpZFdabVpYSnpLVHRjYmlBZ0lDQndZV05yTG1GMGRHRmphRzFsYm5SeklEMGdZblZtWm1WeWN5NXNaVzVuZEdnN0lDOHZJRzUxYldKbGNpQnZaaUJpYVc1aGNua2dKMkYwZEdGamFHMWxiblJ6SjF4dUlDQWdJSEpsZEhWeWJpQjdJSEJoWTJ0bGREb2djR0ZqYXl3Z1luVm1abVZ5Y3pvZ1luVm1abVZ5Y3lCOU8xeHVmVnh1Wlhod2IzSjBjeTVrWldOdmJuTjBjblZqZEZCaFkydGxkQ0E5SUdSbFkyOXVjM1J5ZFdOMFVHRmphMlYwTzF4dVpuVnVZM1JwYjI0Z1gyUmxZMjl1YzNSeWRXTjBVR0ZqYTJWMEtHUmhkR0VzSUdKMVptWmxjbk1wSUh0Y2JpQWdJQ0JwWmlBb0lXUmhkR0VwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrWVhSaE8xeHVJQ0FnSUdsbUlDaHBjMTlpYVc1aGNubGZhbk5mTVM1cGMwSnBibUZ5ZVNoa1lYUmhLU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3YkdGalpXaHZiR1JsY2lBOUlIc2dYM0JzWVdObGFHOXNaR1Z5T2lCMGNuVmxMQ0J1ZFcwNklHSjFabVpsY25NdWJHVnVaM1JvSUgwN1hHNGdJQ0FnSUNBZ0lHSjFabVpsY25NdWNIVnphQ2hrWVhSaEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnNZV05sYUc5c1pHVnlPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxkMFJoZEdFZ1BTQnVaWGNnUVhKeVlYa29aR0YwWVM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHUmhkR0V1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGQwUmhkR0ZiYVYwZ1BTQmZaR1ZqYjI1emRISjFZM1JRWVdOclpYUW9aR0YwWVZ0cFhTd2dZblZtWm1WeWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZDBSaGRHRTdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJrWVhSaElEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlDRW9aR0YwWVNCcGJuTjBZVzVqWlc5bUlFUmhkR1VwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1bGQwUmhkR0VnUFNCN2ZUdGNiaUFnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JyWlhrZ2FXNGdaR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGtZWFJoTENCclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1JHRjBZVnRyWlhsZElEMGdYMlJsWTI5dWMzUnlkV04wVUdGamEyVjBLR1JoZEdGYmEyVjVYU3dnWW5WbVptVnljeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZDBSaGRHRTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJrWVhSaE8xeHVmVnh1THlvcVhHNGdLaUJTWldOdmJuTjBjblZqZEhNZ1lTQmlhVzVoY25rZ2NHRmphMlYwSUdaeWIyMGdhWFJ6SUhCc1lXTmxhRzlzWkdWeUlIQmhZMnRsZENCaGJtUWdZblZtWm1WeWMxeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCd1lXTnJaWFFnTFNCbGRtVnVkQ0J3WVdOclpYUWdkMmwwYUNCd2JHRmpaV2h2YkdSbGNuTmNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJR0oxWm1abGNuTWdMU0JpYVc1aGNua2dZblZtWm1WeWN5QjBieUJ3ZFhRZ2FXNGdjR3hoWTJWb2IyeGtaWElnY0c5emFYUnBiMjV6WEc0Z0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOUlISmxZMjl1YzNSeWRXTjBaV1FnY0dGamEyVjBYRzRnS2lCQWNIVmliR2xqWEc0Z0tpOWNibVoxYm1OMGFXOXVJSEpsWTI5dWMzUnlkV04wVUdGamEyVjBLSEJoWTJ0bGRDd2dZblZtWm1WeWN5a2dlMXh1SUNBZ0lIQmhZMnRsZEM1a1lYUmhJRDBnWDNKbFkyOXVjM1J5ZFdOMFVHRmphMlYwS0hCaFkydGxkQzVrWVhSaExDQmlkV1ptWlhKektUdGNiaUFnSUNCd1lXTnJaWFF1WVhSMFlXTm9iV1Z1ZEhNZ1BTQjFibVJsWm1sdVpXUTdJQzh2SUc1dklHeHZibWRsY2lCMWMyVm1kV3hjYmlBZ0lDQnlaWFIxY200Z2NHRmphMlYwTzF4dWZWeHVaWGh3YjNKMGN5NXlaV052Ym5OMGNuVmpkRkJoWTJ0bGRDQTlJSEpsWTI5dWMzUnlkV04wVUdGamEyVjBPMXh1Wm5WdVkzUnBiMjRnWDNKbFkyOXVjM1J5ZFdOMFVHRmphMlYwS0dSaGRHRXNJR0oxWm1abGNuTXBJSHRjYmlBZ0lDQnBaaUFvSVdSaGRHRXBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtZWFJoTzF4dUlDQWdJR2xtSUNoa1lYUmhJQ1ltSUdSaGRHRXVYM0JzWVdObGFHOXNaR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaWRXWm1aWEp6VzJSaGRHRXViblZ0WFRzZ0x5OGdZWEJ3Y205d2NtbGhkR1VnWW5WbVptVnlJQ2h6YUc5MWJHUWdZbVVnYm1GMGRYSmhiQ0J2Y21SbGNpQmhibmwzWVhrcFhHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmtZWFJoTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXMmxkSUQwZ1gzSmxZMjl1YzNSeWRXTjBVR0ZqYTJWMEtHUmhkR0ZiYVYwc0lHSjFabVpsY25NcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJrWVhSaElEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhMlY1SUdsdUlHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b1pHRjBZU3dnYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGYmEyVjVYU0E5SUY5eVpXTnZibk4wY25WamRGQmhZMnRsZENoa1lYUmhXMnRsZVYwc0lHSjFabVpsY25NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmtZWFJoTzF4dWZWeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1bGVIQnZjblJ6TGtSbFkyOWtaWElnUFNCbGVIQnZjblJ6TGtWdVkyOWtaWElnUFNCbGVIQnZjblJ6TGxCaFkydGxkRlI1Y0dVZ1BTQmxlSEJ2Y25SekxuQnliM1J2WTI5c0lEMGdkbTlwWkNBd08xeHVZMjl1YzNRZ1kyOXRjRzl1Wlc1MFgyVnRhWFIwWlhKZk1TQTlJSEpsY1hWcGNtVW9YQ0pBYzI5amEyVjBMbWx2TDJOdmJYQnZibVZ1ZEMxbGJXbDBkR1Z5WENJcE8xeHVZMjl1YzNRZ1ltbHVZWEo1WDJwelh6RWdQU0J5WlhGMWFYSmxLRndpTGk5aWFXNWhjbmt1YW5OY0lpazdYRzVqYjI1emRDQnBjMTlpYVc1aGNubGZhbk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMMmx6TFdKcGJtRnllUzVxYzF3aUtUdGNibU52Ym5OMElHUmxZblZuWHpFZ1BTQnlaWEYxYVhKbEtGd2laR1ZpZFdkY0lpazdJQzh2SUdSbFluVm5LQ2xjYm1OdmJuTjBJR1JsWW5WbklEMGdaR1ZpZFdkZk1TNWtaV1poZFd4MEtGd2ljMjlqYTJWMExtbHZMWEJoY25ObGNsd2lLVHNnTHk4Z1pHVmlkV2NvS1Z4dUx5b3FYRzRnS2lCUWNtOTBiMk52YkNCMlpYSnphVzl1TGx4dUlDcGNiaUFxSUVCd2RXSnNhV05jYmlBcUwxeHVaWGh3YjNKMGN5NXdjbTkwYjJOdmJDQTlJRFU3WEc1MllYSWdVR0ZqYTJWMFZIbHdaVHRjYmlobWRXNWpkR2x2YmlBb1VHRmphMlYwVkhsd1pTa2dlMXh1SUNBZ0lGQmhZMnRsZEZSNWNHVmJVR0ZqYTJWMFZIbHdaVnRjSWtOUFRrNUZRMVJjSWwwZ1BTQXdYU0E5SUZ3aVEwOU9Ua1ZEVkZ3aU8xeHVJQ0FnSUZCaFkydGxkRlI1Y0dWYlVHRmphMlYwVkhsd1pWdGNJa1JKVTBOUFRrNUZRMVJjSWwwZ1BTQXhYU0E5SUZ3aVJFbFRRMDlPVGtWRFZGd2lPMXh1SUNBZ0lGQmhZMnRsZEZSNWNHVmJVR0ZqYTJWMFZIbHdaVnRjSWtWV1JVNVVYQ0pkSUQwZ01sMGdQU0JjSWtWV1JVNVVYQ0k3WEc0Z0lDQWdVR0ZqYTJWMFZIbHdaVnRRWVdOclpYUlVlWEJsVzF3aVFVTkxYQ0pkSUQwZ00xMGdQU0JjSWtGRFMxd2lPMXh1SUNBZ0lGQmhZMnRsZEZSNWNHVmJVR0ZqYTJWMFZIbHdaVnRjSWtOUFRrNUZRMVJmUlZKU1QxSmNJbDBnUFNBMFhTQTlJRndpUTA5T1RrVkRWRjlGVWxKUFVsd2lPMXh1SUNBZ0lGQmhZMnRsZEZSNWNHVmJVR0ZqYTJWMFZIbHdaVnRjSWtKSlRrRlNXVjlGVmtWT1ZGd2lYU0E5SURWZElEMGdYQ0pDU1U1QlVsbGZSVlpGVGxSY0lqdGNiaUFnSUNCUVlXTnJaWFJVZVhCbFcxQmhZMnRsZEZSNWNHVmJYQ0pDU1U1QlVsbGZRVU5MWENKZElEMGdObDBnUFNCY0lrSkpUa0ZTV1Y5QlEwdGNJanRjYm4wcEtGQmhZMnRsZEZSNWNHVWdQU0JsZUhCdmNuUnpMbEJoWTJ0bGRGUjVjR1VnZkh3Z0tHVjRjRzl5ZEhNdVVHRmphMlYwVkhsd1pTQTlJSHQ5S1NrN1hHNHZLaXBjYmlBcUlFRWdjMjlqYTJWMExtbHZJRVZ1WTI5a1pYSWdhVzV6ZEdGdVkyVmNiaUFxTDF4dVkyeGhjM01nUlc1amIyUmxjaUI3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlc1amIyUmxjaUJqYjI1emRISjFZM1J2Y2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnY21Wd2JHRmpaWElnTFNCamRYTjBiMjBnY21Wd2JHRmpaWElnZEc4Z2NHRnpjeUJrYjNkdUlIUnZJRXBUVDA0dWNHRnljMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh5WlhCc1lXTmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsY0d4aFkyVnlJRDBnY21Wd2JHRmpaWEk3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVZ1WTI5a1pTQmhJSEJoWTJ0bGRDQmhjeUJoSUhOcGJtZHNaU0J6ZEhKcGJtY2dhV1lnYm05dUxXSnBibUZ5ZVN3Z2IzSWdZWE1nWVZ4dUlDQWdJQ0FxSUdKMVptWmxjaUJ6WlhGMVpXNWpaU3dnWkdWd1pXNWthVzVuSUc5dUlIQmhZMnRsZENCMGVYQmxMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhaUF0SUhCaFkydGxkQ0J2WW1wbFkzUmNiaUFnSUNBZ0tpOWNiaUFnSUNCbGJtTnZaR1VvYjJKcUtTQjdYRzRnSUNBZ0lDQWdJR1JsWW5WbktGd2laVzVqYjJScGJtY2djR0ZqYTJWMElDVnFYQ0lzSUc5aWFpazdYRzRnSUNBZ0lDQWdJR2xtSUNodlltb3VkSGx3WlNBOVBUMGdVR0ZqYTJWMFZIbHdaUzVGVmtWT1ZDQjhmQ0J2WW1vdWRIbHdaU0E5UFQwZ1VHRmphMlYwVkhsd1pTNUJRMHNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxOWlhVzVoY25sZmFuTmZNUzVvWVhOQ2FXNWhjbmtvYjJKcUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYWk1MGVYQmxJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IySnFMblI1Y0dVZ1BUMDlJRkJoWTJ0bGRGUjVjR1V1UlZaRlRsUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdVR0ZqYTJWMFZIbHdaUzVDU1U1QlVsbGZSVlpGVGxSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1VHRmphMlYwVkhsd1pTNUNTVTVCVWxsZlFVTkxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1WdVkyOWtaVUZ6UW1sdVlYSjVLRzlpYWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0MGFHbHpMbVZ1WTI5a1pVRnpVM1J5YVc1bktHOWlhaWxkTzF4dUlDQWdJSDFjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGYm1OdlpHVWdjR0ZqYTJWMElHRnpJSE4wY21sdVp5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCbGJtTnZaR1ZCYzFOMGNtbHVaeWh2WW1vcElIdGNiaUFnSUNBZ0lDQWdMeThnWm1seWMzUWdhWE1nZEhsd1pWeHVJQ0FnSUNBZ0lDQnNaWFFnYzNSeUlEMGdYQ0pjSWlBcklHOWlhaTUwZVhCbE8xeHVJQ0FnSUNBZ0lDQXZMeUJoZEhSaFkyaHRaVzUwY3lCcFppQjNaU0JvWVhabElIUm9aVzFjYmlBZ0lDQWdJQ0FnYVdZZ0tHOWlhaTUwZVhCbElEMDlQU0JRWVdOclpYUlVlWEJsTGtKSlRrRlNXVjlGVmtWT1ZDQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFMblI1Y0dVZ1BUMDlJRkJoWTJ0bGRGUjVjR1V1UWtsT1FWSlpYMEZEU3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeUlDczlJRzlpYWk1aGRIUmhZMmh0Wlc1MGN5QXJJRndpTFZ3aU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUdsbUlIZGxJR2hoZG1VZ1lTQnVZVzFsYzNCaFkyVWdiM1JvWlhJZ2RHaGhiaUJnTDJCY2JpQWdJQ0FnSUNBZ0x5OGdkMlVnWVhCd1pXNWtJR2wwSUdadmJHeHZkMlZrSUdKNUlHRWdZMjl0YldFZ1lDeGdYRzRnSUNBZ0lDQWdJR2xtSUNodlltb3Vibk53SUNZbUlGd2lMMXdpSUNFOVBTQnZZbW91Ym5Od0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISWdLejBnYjJKcUxtNXpjQ0FySUZ3aUxGd2lPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHbHRiV1ZrYVdGMFpXeDVJR1p2Ykd4dmQyVmtJR0o1SUhSb1pTQnBaRnh1SUNBZ0lDQWdJQ0JwWmlBb2JuVnNiQ0FoUFNCdlltb3VhV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY2lBclBTQnZZbW91YVdRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnYW5OdmJpQmtZWFJoWEc0Z0lDQWdJQ0FnSUdsbUlDaHVkV3hzSUNFOUlHOWlhaTVrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISWdLejBnU2xOUFRpNXpkSEpwYm1kcFpua29iMkpxTG1SaGRHRXNJSFJvYVhNdWNtVndiR0ZqWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1JsWW5WbktGd2laVzVqYjJSbFpDQWxhaUJoY3lBbGMxd2lMQ0J2WW1vc0lITjBjaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZEhJN1hHNGdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWdVkyOWtaU0J3WVdOclpYUWdZWE1nSjJKMVptWmxjaUJ6WlhGMVpXNWpaU2NnWW5rZ2NtVnRiM1pwYm1jZ1lteHZZbk1zSUdGdVpGeHVJQ0FnSUNBcUlHUmxZMjl1YzNSeWRXTjBhVzVuSUhCaFkydGxkQ0JwYm5SdklHOWlhbVZqZENCM2FYUm9JSEJzWVdObGFHOXNaR1Z5Y3lCaGJtUmNiaUFnSUNBZ0tpQmhJR3hwYzNRZ2IyWWdZblZtWm1WeWN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCbGJtTnZaR1ZCYzBKcGJtRnllU2h2WW1vcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHVmpiMjV6ZEhKMVkzUnBiMjRnUFNCaWFXNWhjbmxmYW5OZk1TNWtaV052Ym5OMGNuVmpkRkJoWTJ0bGRDaHZZbW9wTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3WVdOcklEMGdkR2hwY3k1bGJtTnZaR1ZCYzFOMGNtbHVaeWhrWldOdmJuTjBjblZqZEdsdmJpNXdZV05yWlhRcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaWRXWm1aWEp6SUQwZ1pHVmpiMjV6ZEhKMVkzUnBiMjR1WW5WbVptVnljenRjYmlBZ0lDQWdJQ0FnWW5WbVptVnljeTUxYm5Ob2FXWjBLSEJoWTJzcE95QXZMeUJoWkdRZ2NHRmphMlYwSUdsdVptOGdkRzhnWW1WbmFXNXVhVzVuSUc5bUlHUmhkR0VnYkdsemRGeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1luVm1abVZ5Y3pzZ0x5OGdkM0pwZEdVZ1lXeHNJSFJvWlNCaWRXWm1aWEp6WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1RmJtTnZaR1Z5SUQwZ1JXNWpiMlJsY2p0Y2JpOHFLbHh1SUNvZ1FTQnpiMk5yWlhRdWFXOGdSR1ZqYjJSbGNpQnBibk4wWVc1alpWeHVJQ3BjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgwZ1pHVmpiMlJsY2x4dUlDb3ZYRzVqYkdGemN5QkVaV052WkdWeUlHVjRkR1Z1WkhNZ1kyOXRjRzl1Wlc1MFgyVnRhWFIwWlhKZk1TNUZiV2wwZEdWeUlIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkVaV052WkdWeUlHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQnlaWFpwZG1WeUlDMGdZM1Z6ZEc5dElISmxkbWwyWlhJZ2RHOGdjR0Z6Y3lCa2IzZHVJSFJ2SUVwVFQwNHVjM1J5YVc1bmFXWjVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jbVYyYVhabGNpa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxkbWwyWlhJZ1BTQnlaWFpwZG1WeU8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRVpXTnZaR1Z6SUdGdUlHVnVZMjlrWldRZ2NHRmphMlYwSUhOMGNtbHVaeUJwYm5SdklIQmhZMnRsZENCS1UwOU9MbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHOWlhaUF0SUdWdVkyOWtaV1FnY0dGamEyVjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lXUmtLRzlpYWlrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY0dGamEyVjBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFpQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGamEyVjBJRDBnZEdocGN5NWtaV052WkdWVGRISnBibWNvYjJKcUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdZV05yWlhRdWRIbHdaU0E5UFQwZ1VHRmphMlYwVkhsd1pTNUNTVTVCVWxsZlJWWkZUbFFnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXTnJaWFF1ZEhsd1pTQTlQVDBnVUdGamEyVjBWSGx3WlM1Q1NVNUJVbGxmUVVOTEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWW1sdVlYSjVJSEJoWTJ0bGRDZHpJR3B6YjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsWTI5dWMzUnlkV04wYjNJZ1BTQnVaWGNnUW1sdVlYSjVVbVZqYjI1emRISjFZM1J2Y2lod1lXTnJaWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHNXZJR0YwZEdGamFHMWxiblJ6TENCc1lXSmxiR1ZrSUdKcGJtRnllU0JpZFhRZ2JtOGdZbWx1WVhKNUlHUmhkR0VnZEc4Z1ptOXNiRzkzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQmhZMnRsZEM1aGRIUmhZMmh0Wlc1MGN5QTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZFhCbGNpNWxiV2wwVW1WelpYSjJaV1FvWENKa1pXTnZaR1ZrWENJc0lIQmhZMnRsZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdibTl1TFdKcGJtRnllU0JtZFd4c0lIQmhZMnRsZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMWNHVnlMbVZ0YVhSU1pYTmxjblpsWkNoY0ltUmxZMjlrWldSY0lpd2djR0ZqYTJWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHBjMTlpYVc1aGNubGZhbk5mTVM1cGMwSnBibUZ5ZVNodlltb3BJSHg4SUc5aWFpNWlZWE5sTmpRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklISmhkeUJpYVc1aGNua2daR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbkpsWTI5dWMzUnlkV04wYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm5iM1FnWW1sdVlYSjVJR1JoZEdFZ2QyaGxiaUJ1YjNRZ2NtVmpiMjV6ZEhKMVkzUnBibWNnWVNCd1lXTnJaWFJjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXTnJaWFFnUFNCMGFHbHpMbkpsWTI5dWMzUnlkV04wYjNJdWRHRnJaVUpwYm1GeWVVUmhkR0VvYjJKcUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGamEyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsWTJWcGRtVmtJR1pwYm1Gc0lHSjFabVpsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyOXVjM1J5ZFdOMGIzSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZFhCbGNpNWxiV2wwVW1WelpYSjJaV1FvWENKa1pXTnZaR1ZrWENJc0lIQmhZMnRsZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lWVzVyYm05M2JpQjBlWEJsT2lCY0lpQXJJRzlpYWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JHVmpiMlJsSUdFZ2NHRmphMlYwSUZOMGNtbHVaeUFvU2xOUFRpQmtZWFJoS1Z4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSE4wY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnY0dGamEyVjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pHVmpiMlJsVTNSeWFXNW5LSE4wY2lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYVNBOUlEQTdYRzRnSUNBZ0lDQWdJQzh2SUd4dmIyc2dkWEFnZEhsd1pWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd0lEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nVG5WdFltVnlLSE4wY2k1amFHRnlRWFFvTUNrcExGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JwWmlBb1VHRmphMlYwVkhsd1pWdHdMblI1Y0dWZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJblZ1YTI1dmQyNGdjR0ZqYTJWMElIUjVjR1VnWENJZ0t5QndMblI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUd4dmIyc2dkWEFnWVhSMFlXTm9iV1Z1ZEhNZ2FXWWdkSGx3WlNCaWFXNWhjbmxjYmlBZ0lDQWdJQ0FnYVdZZ0tIQXVkSGx3WlNBOVBUMGdVR0ZqYTJWMFZIbHdaUzVDU1U1QlVsbGZSVlpGVGxRZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhBdWRIbHdaU0E5UFQwZ1VHRmphMlYwVkhsd1pTNUNTVTVCVWxsZlFVTkxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRnlkQ0E5SUdrZ0t5QXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0hOMGNpNWphR0Z5UVhRb0t5dHBLU0FoUFQwZ1hDSXRYQ0lnSmlZZ2FTQWhQU0J6ZEhJdWJHVnVaM1JvS1NCN0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0oxWmlBOUlITjBjaTV6ZFdKemRISnBibWNvYzNSaGNuUXNJR2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dKMVppQWhQU0JPZFcxaVpYSW9ZblZtS1NCOGZDQnpkSEl1WTJoaGNrRjBLR2twSUNFOVBTQmNJaTFjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrbHNiR1ZuWVd3Z1lYUjBZV05vYldWdWRITmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCd0xtRjBkR0ZqYUcxbGJuUnpJRDBnVG5WdFltVnlLR0oxWmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnYkc5dmF5QjFjQ0J1WVcxbGMzQmhZMlVnS0dsbUlHRnVlU2xjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2lMMXdpSUQwOVBTQnpkSEl1WTJoaGNrRjBLR2tnS3lBeEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSaGNuUWdQU0JwSUNzZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaklEMGdjM1J5TG1Ob1lYSkJkQ2hwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YQ0lzWENJZ1BUMDlJR01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNCemRISXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEF1Ym5Od0lEMGdjM1J5TG5OMVluTjBjbWx1WnloemRHRnlkQ3dnYVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3TG01emNDQTlJRndpTDF3aU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUd4dmIyc2dkWEFnYVdSY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WNGRDQTlJSE4wY2k1amFHRnlRWFFvYVNBcklERXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1hDSmNJaUFoUFQwZ2JtVjRkQ0FtSmlCT2RXMWlaWElvYm1WNGRDa2dQVDBnYm1WNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSaGNuUWdQU0JwSUNzZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaklEMGdjM1J5TG1Ob1lYSkJkQ2hwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iblZzYkNBOVBTQmpJSHg4SUU1MWJXSmxjaWhqS1NBaFBTQmpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDMHRhVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNCemRISXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEF1YVdRZ1BTQk9kVzFpWlhJb2MzUnlMbk4xWW5OMGNtbHVaeWh6ZEdGeWRDd2dhU0FySURFcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCc2IyOXJJSFZ3SUdwemIyNGdaR0YwWVZ4dUlDQWdJQ0FnSUNCcFppQW9jM1J5TG1Ob1lYSkJkQ2dySzJrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3WVhsc2IyRmtJRDBnZEdocGN5NTBjbmxRWVhKelpTaHpkSEl1YzNWaWMzUnlLR2twS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRVpXTnZaR1Z5TG1selVHRjViRzloWkZaaGJHbGtLSEF1ZEhsd1pTd2djR0Y1Ykc5aFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TG1SaGRHRWdQU0J3WVhsc2IyRmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lhVzUyWVd4cFpDQndZWGxzYjJGa1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1JsWW5WbktGd2laR1ZqYjJSbFpDQWxjeUJoY3lBbGFsd2lMQ0J6ZEhJc0lIQXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjRHRjYmlBZ0lDQjlYRzRnSUNBZ2RISjVVR0Z5YzJVb2MzUnlLU0I3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnU2xOUFRpNXdZWEp6WlNoemRISXNJSFJvYVhNdWNtVjJhWFpsY2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnpkR0YwYVdNZ2FYTlFZWGxzYjJGa1ZtRnNhV1FvZEhsd1pTd2djR0Y1Ykc5aFpDa2dlMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdVR0ZqYTJWMFZIbHdaUzVEVDA1T1JVTlVPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2NHRjViRzloWkNBOVBUMGdYQ0p2WW1wbFkzUmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVUdGamEyVjBWSGx3WlM1RVNWTkRUMDVPUlVOVU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYbHNiMkZrSUQwOVBTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJoWTJ0bGRGUjVjR1V1UTA5T1RrVkRWRjlGVWxKUFVqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RIbHdaVzltSUhCaGVXeHZZV1FnUFQwOUlGd2ljM1J5YVc1blhDSWdmSHdnZEhsd1pXOW1JSEJoZVd4dllXUWdQVDA5SUZ3aWIySnFaV04wWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGQmhZMnRsZEZSNWNHVXVSVlpGVGxRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGQmhZMnRsZEZSNWNHVXVRa2xPUVZKWlgwVldSVTVVT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtIQmhlV3h2WVdRcElDWW1JSEJoZVd4dllXUXViR1Z1WjNSb0lENGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVUdGamEyVjBWSGx3WlM1QlEwczZYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJoWTJ0bGRGUjVjR1V1UWtsT1FWSlpYMEZEU3pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUVhKeVlYa3VhWE5CY25KaGVTaHdZWGxzYjJGa0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkVaV0ZzYkc5allYUmxjeUJoSUhCaGNuTmxjaWR6SUhKbGMyOTFjbU5sYzF4dUlDQWdJQ0FxTDF4dUlDQWdJR1JsYzNSeWIza29LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbFkyOXVjM1J5ZFdOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNXpkSEoxWTNSdmNpNW1hVzVwYzJobFpGSmxZMjl1YzNSeWRXTjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzVsZUhCdmNuUnpMa1JsWTI5a1pYSWdQU0JFWldOdlpHVnlPMXh1THlvcVhHNGdLaUJCSUcxaGJtRm5aWElnYjJZZ1lTQmlhVzVoY25rZ1pYWmxiblFuY3lBblluVm1abVZ5SUhObGNYVmxibU5sSnk0Z1UyaHZkV3hrWEc0Z0tpQmlaU0JqYjI1emRISjFZM1JsWkNCM2FHVnVaWFpsY2lCaElIQmhZMnRsZENCdlppQjBlWEJsSUVKSlRrRlNXVjlGVmtWT1ZDQnBjMXh1SUNvZ1pHVmpiMlJsWkM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnY0dGamEyVjBYRzRnS2lCQWNtVjBkWEp1SUh0Q2FXNWhjbmxTWldOdmJuTjBjblZqZEc5eWZTQnBibWwwYVdGc2FYcGxaQ0J5WldOdmJuTjBjblZqZEc5eVhHNGdLaTljYm1Oc1lYTnpJRUpwYm1GeWVWSmxZMjl1YzNSeWRXTjBiM0lnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hCaFkydGxkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoWTJ0bGRDQTlJSEJoWTJ0bGREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWRXWm1aWEp6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVmpiMjVRWVdOcklEMGdjR0ZqYTJWME8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTlpYUm9iMlFnZEc4Z1ltVWdZMkZzYkdWa0lIZG9aVzRnWW1sdVlYSjVJR1JoZEdFZ2NtVmpaV2wyWldRZ1puSnZiU0JqYjI1dVpXTjBhVzl1WEc0Z0lDQWdJQ29nWVdaMFpYSWdZU0JDU1U1QlVsbGZSVlpGVGxRZ2NHRmphMlYwTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRDZFdabVpYSWdmQ0JCY25KaGVVSjFabVpsY24wZ1ltbHVSR0YwWVNBdElIUm9aU0J5WVhjZ1ltbHVZWEo1SUdSaGRHRWdjbVZqWldsMlpXUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdHVkV3hzSUh3Z1QySnFaV04wZlNCeVpYUjFjbTV6SUc1MWJHd2dhV1lnYlc5eVpTQmlhVzVoY25rZ1pHRjBZU0JwY3lCbGVIQmxZM1JsWkNCdmNseHVJQ0FnSUNBcUlDQWdZU0J5WldOdmJuTjBjblZqZEdWa0lIQmhZMnRsZENCdlltcGxZM1FnYVdZZ1lXeHNJR0oxWm1abGNuTWdhR0YyWlNCaVpXVnVJSEpsWTJWcGRtVmtMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIUmhhMlZDYVc1aGNubEVZWFJoS0dKcGJrUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpZFdabVpYSnpMbkIxYzJnb1ltbHVSR0YwWVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtSjFabVpsY25NdWJHVnVaM1JvSUQwOVBTQjBhR2x6TG5KbFkyOXVVR0ZqYXk1aGRIUmhZMmh0Wlc1MGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaRzl1WlNCM2FYUm9JR0oxWm1abGNpQnNhWE4wWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lXTnJaWFFnUFNCaWFXNWhjbmxmYW5OZk1TNXlaV052Ym5OMGNuVmpkRkJoWTJ0bGRDaDBhR2x6TG5KbFkyOXVVR0ZqYXl3Z2RHaHBjeTVpZFdabVpYSnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm1sdWFYTm9aV1JTWldOdmJuTjBjblZqZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaFkydGxkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyeGxZVzV6SUhWd0lHSnBibUZ5ZVNCd1lXTnJaWFFnY21WamIyNXpkSEoxWTNScGIyNGdkbUZ5YVdGaWJHVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHWnBibWx6YUdWa1VtVmpiMjV6ZEhKMVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNVFZV05ySUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWlkV1ptWlhKeklEMGdXMTA3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzVsZUhCdmNuUnpMbWhoYzBKcGJtRnllU0E5SUdWNGNHOXlkSE11YVhOQ2FXNWhjbmtnUFNCMmIybGtJREE3WEc1amIyNXpkQ0IzYVhSb1RtRjBhWFpsUVhKeVlYbENkV1ptWlhJZ1BTQjBlWEJsYjJZZ1FYSnlZWGxDZFdabVpYSWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lqdGNibU52Ym5OMElHbHpWbWxsZHlBOUlDaHZZbW9wSUQwK0lIdGNiaUFnSUNCeVpYUjFjbTRnZEhsd1pXOW1JRUZ5Y21GNVFuVm1abVZ5TG1selZtbGxkeUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lYRzRnSUNBZ0lDQWdJRDhnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzS0c5aWFpbGNiaUFnSUNBZ0lDQWdPaUJ2WW1vdVluVm1abVZ5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGxDZFdabVpYSTdYRzU5TzF4dVkyOXVjM1FnZEc5VGRISnBibWNnUFNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTzF4dVkyOXVjM1FnZDJsMGFFNWhkR2wyWlVKc2IySWdQU0IwZVhCbGIyWWdRbXh2WWlBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUh4OFhHNGdJQ0FnS0hSNWNHVnZaaUJDYkc5aUlDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlDWW1YRzRnSUNBZ0lDQWdJSFJ2VTNSeWFXNW5MbU5oYkd3b1FteHZZaWtnUFQwOUlGd2lXMjlpYW1WamRDQkNiRzlpUTI5dWMzUnlkV04wYjNKZFhDSXBPMXh1WTI5dWMzUWdkMmwwYUU1aGRHbDJaVVpwYkdVZ1BTQjBlWEJsYjJZZ1JtbHNaU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJSHg4WEc0Z0lDQWdLSFI1Y0dWdlppQkdhV3hsSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUNZbVhHNGdJQ0FnSUNBZ0lIUnZVM1J5YVc1bkxtTmhiR3dvUm1sc1pTa2dQVDA5SUZ3aVcyOWlhbVZqZENCR2FXeGxRMjl1YzNSeWRXTjBiM0pkWENJcE8xeHVMeW9xWEc0Z0tpQlNaWFIxY201eklIUnlkV1VnYVdZZ2IySnFJR2x6SUdFZ1FuVm1abVZ5TENCaGJpQkJjbkpoZVVKMVptWmxjaXdnWVNCQ2JHOWlJRzl5SUdFZ1JtbHNaUzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMEpwYm1GeWVTaHZZbW9wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLQ2gzYVhSb1RtRjBhWFpsUVhKeVlYbENkV1ptWlhJZ0ppWWdLRzlpYWlCcGJuTjBZVzVqWlc5bUlFRnljbUY1UW5WbVptVnlJSHg4SUdselZtbGxkeWh2WW1vcEtTa2dmSHhjYmlBZ0lDQWdJQ0FnS0hkcGRHaE9ZWFJwZG1WQ2JHOWlJQ1ltSUc5aWFpQnBibk4wWVc1alpXOW1JRUpzYjJJcElIeDhYRzRnSUNBZ0lDQWdJQ2gzYVhSb1RtRjBhWFpsUm1sc1pTQW1KaUJ2WW1vZ2FXNXpkR0Z1WTJWdlppQkdhV3hsS1NrN1hHNTlYRzVsZUhCdmNuUnpMbWx6UW1sdVlYSjVJRDBnYVhOQ2FXNWhjbms3WEc1bWRXNWpkR2x2YmlCb1lYTkNhVzVoY25rb2IySnFMQ0IwYjBwVFQwNHBJSHRjYmlBZ0lDQnBaaUFvSVc5aWFpQjhmQ0IwZVhCbGIyWWdiMkpxSUNFOVBTQmNJbTlpYW1WamRGd2lLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYjJKcUtTa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diQ0E5SUc5aWFpNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhOQ2FXNWhjbmtvYjJKcVcybGRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6UW1sdVlYSjVLRzlpYWlrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h2WW1vdWRHOUtVMDlPSUNZbVhHNGdJQ0FnSUNBZ0lIUjVjR1Z2WmlCdlltb3VkRzlLVTA5T0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWmNiaUFnSUNBZ0lDQWdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnpRbWx1WVhKNUtHOWlhaTUwYjBwVFQwNG9LU3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9ZMjl1YzNRZ2EyVjVJR2x1SUc5aWFpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhaXdnYTJWNUtTQW1KaUJvWVhOQ2FXNWhjbmtvYjJKcVcydGxlVjBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlYRzVsZUhCdmNuUnpMbWhoYzBKcGJtRnllU0E5SUdoaGMwSnBibUZ5ZVR0Y2JpSXNJaThxS2x4dUlDb2dTVzVwZEdsaGJHbDZaU0JoSUc1bGR5QmdSVzFwZEhSbGNtQXVYRzRnS2x4dUlDb2dRR0Z3YVNCd2RXSnNhV05jYmlBcUwxeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdSVzFwZEhSbGNpaHZZbW9wSUh0Y2JpQWdhV1lnS0c5aWFpa2djbVYwZFhKdUlHMXBlR2x1S0c5aWFpazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RXbDRhVzRnZEdobElHVnRhWFIwWlhJZ2NISnZjR1Z5ZEdsbGN5NWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFYRzRnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5WEc0Z0tpQkFZWEJwSUhCeWFYWmhkR1ZjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJ0YVhocGJpaHZZbW9wSUh0Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlFVnRhWFIwWlhJdWNISnZkRzkwZVhCbEtTQjdYRzRnSUNBZ2IySnFXMnRsZVYwZ1BTQkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pWdHJaWGxkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2WW1vN1hHNTlYRzVjYmk4cUtseHVJQ29nVEdsemRHVnVJRzl1SUhSb1pTQm5hWFpsYmlCZ1pYWmxiblJnSUhkcGRHZ2dZR1p1WUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWlhabGJuUmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdadVhHNGdLaUJBY21WMGRYSnVJSHRGYldsMGRHVnlmVnh1SUNvZ1FHRndhU0J3ZFdKc2FXTmNiaUFxTDF4dVhHNUZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXZiaUE5WEc1RmJXbDBkR1Z5TG5CeWIzUnZkSGx3WlM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SUQwZ1puVnVZM1JwYjI0b1pYWmxiblFzSUdadUtYdGNiaUFnZEdocGN5NWZZMkZzYkdKaFkydHpJRDBnZEdocGN5NWZZMkZzYkdKaFkydHpJSHg4SUh0OU8xeHVJQ0FvZEdocGN5NWZZMkZzYkdKaFkydHpXeWNrSnlBcklHVjJaVzUwWFNBOUlIUm9hWE11WDJOaGJHeGlZV05yYzFzbkpDY2dLeUJsZG1WdWRGMGdmSHdnVzEwcFhHNGdJQ0FnTG5CMWMyZ29abTRwTzF4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNiaThxS2x4dUlDb2dRV1JrY3lCaGJpQmdaWFpsYm5SZ0lHeHBjM1JsYm1WeUlIUm9ZWFFnZDJsc2JDQmlaU0JwYm5admEyVmtJR0VnYzJsdVoyeGxYRzRnS2lCMGFXMWxJSFJvWlc0Z1lYVjBiMjFoZEdsallXeHNlU0J5WlcxdmRtVmtMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmxkbVZ1ZEZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdabTVjYmlBcUlFQnlaWFIxY200Z2UwVnRhWFIwWlhKOVhHNGdLaUJBWVhCcElIQjFZbXhwWTF4dUlDb3ZYRzVjYmtWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG05dVkyVWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDd2dabTRwZTF4dUlDQm1kVzVqZEdsdmJpQnZiaWdwSUh0Y2JpQWdJQ0IwYUdsekxtOW1aaWhsZG1WdWRDd2diMjRwTzF4dUlDQWdJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUgxY2JseHVJQ0J2Ymk1bWJpQTlJR1p1TzF4dUlDQjBhR2x6TG05dUtHVjJaVzUwTENCdmJpazdYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCU1pXMXZkbVVnZEdobElHZHBkbVZ1SUdOaGJHeGlZV05ySUdadmNpQmdaWFpsYm5SZ0lHOXlJR0ZzYkZ4dUlDb2djbVZuYVhOMFpYSmxaQ0JqWVd4c1ltRmphM011WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR1YyWlc1MFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtYmx4dUlDb2dRSEpsZEhWeWJpQjdSVzFwZEhSbGNuMWNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYmx4dVJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdWIyWm1JRDFjYmtWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVXhwYzNSbGJtVnlJRDFjYmtWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lBOVhHNUZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJRDBnWm5WdVkzUnBiMjRvWlhabGJuUXNJR1p1S1h0Y2JpQWdkR2hwY3k1ZlkyRnNiR0poWTJ0eklEMGdkR2hwY3k1ZlkyRnNiR0poWTJ0eklIeDhJSHQ5TzF4dVhHNGdJQzh2SUdGc2JGeHVJQ0JwWmlBb01DQTlQU0JoY21kMWJXVnVkSE11YkdWdVozUm9LU0I3WEc0Z0lDQWdkR2hwY3k1ZlkyRnNiR0poWTJ0eklEMGdlMzA3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibHh1SUNBdkx5QnpjR1ZqYVdacFl5QmxkbVZ1ZEZ4dUlDQjJZWElnWTJGc2JHSmhZMnR6SUQwZ2RHaHBjeTVmWTJGc2JHSmhZMnR6V3lja0p5QXJJR1YyWlc1MFhUdGNiaUFnYVdZZ0tDRmpZV3hzWW1GamEzTXBJSEpsZEhWeWJpQjBhR2x6TzF4dVhHNGdJQzh2SUhKbGJXOTJaU0JoYkd3Z2FHRnVaR3hsY25OY2JpQWdhV1lnS0RFZ1BUMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbDlqWVd4c1ltRmphM05iSnlRbklDc2daWFpsYm5SZE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeThnY21WdGIzWmxJSE53WldOcFptbGpJR2hoYm1Sc1pYSmNiaUFnZG1GeUlHTmlPMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTmhiR3hpWVdOcmN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR05pSUQwZ1kyRnNiR0poWTJ0elcybGRPMXh1SUNBZ0lHbG1JQ2hqWWlBOVBUMGdabTRnZkh3Z1kySXVabTRnUFQwOUlHWnVLU0I3WEc0Z0lDQWdJQ0JqWVd4c1ltRmphM011YzNCc2FXTmxLR2tzSURFcE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk4Z1VtVnRiM1psSUdWMlpXNTBJSE53WldOcFptbGpJR0Z5Y21GNWN5Qm1iM0lnWlhabGJuUWdkSGx3WlhNZ2RHaGhkQ0J1YjF4dUlDQXZMeUJ2Ym1VZ2FYTWdjM1ZpYzJOeWFXSmxaQ0JtYjNJZ2RHOGdZWFp2YVdRZ2JXVnRiM0o1SUd4bFlXc3VYRzRnSUdsbUlDaGpZV3hzWW1GamEzTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgyTmhiR3hpWVdOcmMxc25KQ2NnS3lCbGRtVnVkRjA3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZEdocGN6dGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JXMXBkQ0JnWlhabGJuUmdJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHRnlaM011WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR1YyWlc1MFhHNGdLaUJBY0dGeVlXMGdlMDFwZUdWa2ZTQXVMaTVjYmlBcUlFQnlaWFIxY200Z2UwVnRhWFIwWlhKOVhHNGdLaTljYmx4dVJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdVpXMXBkQ0E5SUdaMWJtTjBhVzl1S0dWMlpXNTBLWHRjYmlBZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUQwZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUh4OElIdDlPMXh1WEc0Z0lIWmhjaUJoY21keklEMGdibVYzSUVGeWNtRjVLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4S1Z4dUlDQWdJQ3dnWTJGc2JHSmhZMnR6SUQwZ2RHaHBjeTVmWTJGc2JHSmhZMnR6V3lja0p5QXJJR1YyWlc1MFhUdGNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNVHNnYVNBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR0Z5WjNOYmFTQXRJREZkSUQwZ1lYSm5kVzFsYm5SelcybGRPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHTmhiR3hpWVdOcmN5a2dlMXh1SUNBZ0lHTmhiR3hpWVdOcmN5QTlJR05oYkd4aVlXTnJjeTV6YkdsalpTZ3dLVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVJRDBnWTJGc2JHSmhZMnR6TG14bGJtZDBhRHNnYVNBOElHeGxianNnS3l0cEtTQjdYRzRnSUNBZ0lDQmpZV3hzWW1GamEzTmJhVjB1WVhCd2JIa29kR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc0dkx5QmhiR2xoY3lCMWMyVmtJR1p2Y2lCeVpYTmxjblpsWkNCbGRtVnVkSE1nS0hCeWIzUmxZM1JsWkNCdFpYUm9iMlFwWEc1RmJXbDBkR1Z5TG5CeWIzUnZkSGx3WlM1bGJXbDBVbVZ6WlhKMlpXUWdQU0JGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzVsYldsME8xeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJpQmhjbkpoZVNCdlppQmpZV3hzWW1GamEzTWdabTl5SUdCbGRtVnVkR0F1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR1YyWlc1MFhHNGdLaUJBY21WMGRYSnVJSHRCY25KaGVYMWNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYmx4dVJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdWJHbHpkR1Z1WlhKeklEMGdablZ1WTNScGIyNG9aWFpsYm5RcGUxeHVJQ0IwYUdsekxsOWpZV3hzWW1GamEzTWdQU0IwYUdsekxsOWpZV3hzWW1GamEzTWdmSHdnZTMwN1hHNGdJSEpsZEhWeWJpQjBhR2x6TGw5allXeHNZbUZqYTNOYkp5UW5JQ3NnWlhabGJuUmRJSHg4SUZ0ZE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCRGFHVmpheUJwWmlCMGFHbHpJR1Z0YVhSMFpYSWdhR0Z6SUdCbGRtVnVkR0FnYUdGdVpHeGxjbk11WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR1YyWlc1MFhHNGdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNvZ1FHRndhU0J3ZFdKc2FXTmNiaUFxTDF4dVhHNUZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNW9ZWE5NYVhOMFpXNWxjbk1nUFNCbWRXNWpkR2x2YmlobGRtVnVkQ2w3WEc0Z0lISmxkSFZ5YmlBaElTQjBhR2x6TG14cGMzUmxibVZ5Y3lobGRtVnVkQ2t1YkdWdVozUm9PMXh1ZlR0Y2JpSXNJaTh2SUZSb1pTQnRiMlIxYkdVZ1kyRmphR1ZjYm5aaGNpQmZYM2RsWW5CaFkydGZiVzlrZFd4bFgyTmhZMmhsWDE4Z1BTQjdmVHRjYmx4dUx5OGdWR2hsSUhKbGNYVnBjbVVnWm5WdVkzUnBiMjVjYm1aMWJtTjBhVzl1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2JXOWtkV3hsU1dRcElIdGNibHgwTHk4Z1EyaGxZMnNnYVdZZ2JXOWtkV3hsSUdseklHbHVJR05oWTJobFhHNWNkSFpoY2lCallXTm9aV1JOYjJSMWJHVWdQU0JmWDNkbFluQmhZMnRmYlc5a2RXeGxYMk5oWTJobFgxOWJiVzlrZFd4bFNXUmRPMXh1WEhScFppQW9ZMkZqYUdWa1RXOWtkV3hsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MFhIUnlaWFIxY200Z1kyRmphR1ZrVFc5a2RXeGxMbVY0Y0c5eWRITTdYRzVjZEgxY2JseDBMeThnUTNKbFlYUmxJR0VnYm1WM0lHMXZaSFZzWlNBb1lXNWtJSEIxZENCcGRDQnBiblJ2SUhSb1pTQmpZV05vWlNsY2JseDBkbUZ5SUcxdlpIVnNaU0E5SUY5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWTJGamFHVmZYMXR0YjJSMWJHVkpaRjBnUFNCN1hHNWNkRngwTHk4Z2JtOGdiVzlrZFd4bExtbGtJRzVsWldSbFpGeHVYSFJjZEM4dklHNXZJRzF2WkhWc1pTNXNiMkZrWldRZ2JtVmxaR1ZrWEc1Y2RGeDBaWGh3YjNKMGN6b2dlMzFjYmx4MGZUdGNibHh1WEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNibHgwWDE5M1pXSndZV05yWDIxdlpIVnNaWE5mWDF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmx4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JseDBjbVYwZFhKdUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dWZWeHVYRzRpTENJdkx5QmtaV1pwYm1VZ1oyVjBkR1Z5SUdaMWJtTjBhVzl1Y3lCbWIzSWdhR0Z5Ylc5dWVTQmxlSEJ2Y25SelhHNWZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFnUFNBb1pYaHdiM0owY3l3Z1pHVm1hVzVwZEdsdmJpa2dQVDRnZTF4dVhIUm1iM0lvZG1GeUlHdGxlU0JwYmlCa1pXWnBibWwwYVc5dUtTQjdYRzVjZEZ4MGFXWW9YMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2S0dSbFptbHVhWFJwYjI0c0lHdGxlU2tnSmlZZ0lWOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieWhsZUhCdmNuUnpMQ0JyWlhrcEtTQjdYRzVjZEZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnYTJWNUxDQjdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJR2RsZERvZ1pHVm1hVzVwZEdsdmJsdHJaWGxkSUgwcE8xeHVYSFJjZEgxY2JseDBmVnh1ZlRzaUxDSmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThnUFNBb2IySnFMQ0J3Y205d0tTQTlQaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2djSEp2Y0NrcElpd2lMeThnWkdWbWFXNWxJRjlmWlhOTmIyUjFiR1VnYjI0Z1pYaHdiM0owYzF4dVgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXlJRDBnS0dWNGNHOXlkSE1wSUQwK0lIdGNibHgwYVdZb2RIbHdaVzltSUZONWJXSnZiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnVTNsdFltOXNMblJ2VTNSeWFXNW5WR0ZuS1NCN1hHNWNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2dleUIyWVd4MVpUb2dKMDF2WkhWc1pTY2dmU2s3WEc1Y2RIMWNibHgwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lDZGZYMlZ6VFc5a2RXeGxKeXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm4wN0lpd2lMeThnYzNSaGNuUjFjRnh1THk4Z1RHOWhaQ0JsYm5SeWVTQnRiMlIxYkdVZ1lXNWtJSEpsZEhWeWJpQmxlSEJ2Y25SelhHNHZMeUJVYUdseklHVnVkSEo1SUcxdlpIVnNaU0JwY3lCeVpXWmxjbVZ1WTJWa0lHSjVJRzkwYUdWeUlHMXZaSFZzWlhNZ2MyOGdhWFFnWTJGdUozUWdZbVVnYVc1c2FXNWxaRnh1ZG1GeUlGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOGdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0RnME1qRXBPMXh1SWwwc0ltNWhiV1Z6SWpwYkluTWlMQ0p0SWl3aWFDSXNJbVFpTENKd2JIVnlZV3dpTENKdGN5SXNJbTF6UVdKeklpd2liaUlzSW01aGJXVWlMQ0pwYzFCc2RYSmhiQ0lzSWsxaGRHZ2lMQ0p5YjNWdVpDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0oyWVd3aUxDSnZjSFJwYjI1eklpd2lkSGx3WlNJc0lteGxibWQwYUNJc0luTjBjaUlzSWxOMGNtbHVaeUlzSW0xaGRHTm9JaXdpWlhobFl5SXNJbkJoY25ObFJteHZZWFFpTENKMGIweHZkMlZ5UTJGelpTSXNJbkJoY25ObElpd2lhWE5HYVc1cGRHVWlMQ0pzYjI1bklpd2lZV0p6SWl3aVptMTBVMmh2Y25RaUxDSkZjbkp2Y2lJc0lrcFRUMDRpTENKemRISnBibWRwWm5raUxDSmZaR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSnZZbW9pTENKclpYa2lMQ0oyWVd4MVpTSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laVzUxYldWeVlXSnNaU0lzSW1OdmJtWnBaM1Z5WVdKc1pTSXNJbmR5YVhSaFlteGxJaXdpYjNkdVMyVjVjeUlzSW05aWFtVmpkQ0lzSW1WdWRXMWxjbUZpYkdWUGJteDVJaXdpYTJWNWN5SXNJbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lJc0luTjViV0p2YkhNaUxDSm1hV3gwWlhJaUxDSnplVzBpTENKblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lpTENKd2RYTm9JaXdpWVhCd2JIa2lMQ0pmYjJKcVpXTjBVM0J5WldGa01pSXNJblJoY21kbGRDSXNJbWtpTENKaGNtZDFiV1Z1ZEhNaUxDSnpiM1Z5WTJVaUxDSm1iM0pGWVdOb0lpd2laMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eWN5SXNJbVJsWm1sdVpWQnliM0JsY25ScFpYTWlMQ0ptYjNKdFlYUlFjbTlrUlhKeWIzSk5aWE56WVdkbElpd2lZMjlrWlNJc0lpUWtiMkp6WlhKMllXSnNaU0lzSWxONWJXSnZiQ0lzSW05aWMyVnlkbUZpYkdVaUxDSnlZVzVrYjIxVGRISnBibWNpTENKeVlXNWtiMjBpTENKMGIxTjBjbWx1WnlJc0luTjFZbk4wY21sdVp5SXNJbk53YkdsMElpd2lhbTlwYmlJc0lrRmpkR2x2YmxSNWNHVnpJaXdpU1U1SlZDSXNJbEpGVUV4QlEwVWlMQ0pRVWs5Q1JWOVZUa3RPVDFkT1gwRkRWRWxQVGlJc0ltbHpVR3hoYVc1UFltcGxZM1FpTENKd2NtOTBieUlzSW1kbGRGQnliM1J2ZEhsd1pVOW1JaXdpWTNKbFlYUmxVM1J2Y21VaUxDSnlaV1IxWTJWeUlpd2ljSEpsYkc5aFpHVmtVM1JoZEdVaUxDSmxibWhoYm1ObGNpSXNJbDl5WldZeUlpd2lkVzVrWldacGJtVmtJaXdpWTNWeWNtVnVkRkpsWkhWalpYSWlMQ0pqZFhKeVpXNTBVM1JoZEdVaUxDSmpkWEp5Wlc1MFRHbHpkR1Z1WlhKeklpd2libVY0ZEV4cGMzUmxibVZ5Y3lJc0ltbHpSR2x6Y0dGMFkyaHBibWNpTENKbGJuTjFjbVZEWVc1TmRYUmhkR1ZPWlhoMFRHbHpkR1Z1WlhKeklpd2ljMnhwWTJVaUxDSm5aWFJUZEdGMFpTSXNJbk4xWW5OamNtbGlaU0lzSW14cGMzUmxibVZ5SWl3aWFYTlRkV0p6WTNKcFltVmtJaXdpYVc1a1pYZ2lMQ0pwYm1SbGVFOW1JaXdpYzNCc2FXTmxJaXdpWkdsemNHRjBZMmdpTENKaFkzUnBiMjRpTENKc2FYTjBaVzVsY25NaUxDSnlaWEJzWVdObFVtVmtkV05sY2lJc0ltNWxlSFJTWldSMVkyVnlJaXdpWDNKbFppSXNJbTkxZEdWeVUzVmljMk55YVdKbElpd2liMkp6WlhKMlpYSWlMQ0p2WW5ObGNuWmxVM1JoZEdVaUxDSnVaWGgwSWl3aWRXNXpkV0p6WTNKcFltVWlMQ0owYUdseklpd2liR1ZuWVdONVgyTnlaV0YwWlZOMGIzSmxJaXdpWTI5dFltbHVaVkpsWkhWalpYSnpJaXdpY21Wa2RXTmxjbk1pTENKeVpXUjFZMlZ5UzJWNWN5SXNJbVpwYm1Gc1VtVmtkV05sY25NaUxDSnphR0Z3WlVGemMyVnlkR2x2YmtWeWNtOXlJaXdpWm1sdVlXeFNaV1IxWTJWeVMyVjVjeUlzSW1GemMyVnlkRkpsWkhWalpYSlRhR0Z3WlNJc0ltVWlMQ0p6ZEdGMFpTSXNJbWhoYzBOb1lXNW5aV1FpTENKdVpYaDBVM1JoZEdVaUxDSmZhU0lzSWw5clpYa2lMQ0p3Y21WMmFXOTFjMU4wWVhSbFJtOXlTMlY1SWl3aWJtVjRkRk4wWVhSbFJtOXlTMlY1SWl3aVltbHVaRUZqZEdsdmJrTnlaV0YwYjNJaUxDSmhZM1JwYjI1RGNtVmhkRzl5SWl3aVltbHVaRUZqZEdsdmJrTnlaV0YwYjNKeklpd2lZV04wYVc5dVEzSmxZWFJ2Y25NaUxDSmliM1Z1WkVGamRHbHZia055WldGMGIzSnpJaXdpWTI5dGNHOXpaU0lzSWw5c1pXNGlMQ0ptZFc1amN5SXNJa0Z5Y21GNUlpd2lZWEpuSWl3aWNtVmtkV05sSWl3aVlTSXNJbUlpTENKaGNIQnNlVTFwWkdSc1pYZGhjbVVpTENKdGFXUmtiR1YzWVhKbGN5SXNJbk4wYjNKbElpd2lYMlJwYzNCaGRHTm9JaXdpYldsa1pHeGxkMkZ5WlVGUVNTSXNJbU5vWVdsdUlpd2liV0Z3SWl3aWJXbGtaR3hsZDJGeVpTSXNJbVp2Y20xaGRFRnlaM01pTENKaGNtZHpJaXdpZFhObFEyOXNiM0p6SWl3aWJtRnRaWE53WVdObElpd2lhSFZ0WVc1cGVtVWlMQ0prYVdabUlpd2lZeUlzSW1OdmJHOXlJaXdpYkdGemRFTWlMQ0p5WlhCc1lXTmxJaXdpYzJGMlpTSXNJbTVoYldWemNHRmpaWE1pTENKemRHOXlZV2RsSWl3aWMyVjBTWFJsYlNJc0luSmxiVzkyWlVsMFpXMGlMQ0psY25KdmNpSXNJbXh2WVdRaUxDSnlJaXdpWjJWMFNYUmxiU0lzSW5CeWIyTmxjM01pTENKbGJuWWlMQ0pFUlVKVlJ5SXNJbmRwYm1SdmR5SXNJbDlmYm5kcWN5SXNJbTVoZG1sbllYUnZjaUlzSW5WelpYSkJaMlZ1ZENJc0ltUnZZM1Z0Wlc1MElpd2laRzlqZFcxbGJuUkZiR1Z0Wlc1MElpd2ljM1I1YkdVaUxDSlhaV0pyYVhSQmNIQmxZWEpoYm1ObElpd2lZMjl1YzI5c1pTSXNJbVpwY21WaWRXY2lMQ0psZUdObGNIUnBiMjRpTENKMFlXSnNaU0lzSW5CaGNuTmxTVzUwSWl3aVVtVm5SWGh3SWl3aUpERWlMQ0pzYjJOaGJGTjBiM0poWjJVaUxDSnNiMk5oYkhOMGIzSmhaMlVpTENKa1pYTjBjbTk1SWl3aWQyRnlibVZrSWl3aWQyRnliaUlzSW1OdmJHOXljeUlzSW14dlp5SXNJbVJsWW5Wbklpd2labTl5YldGMGRHVnljeUlzSW1vaUxDSjJJaXdpYldWemMyRm5aU0lzSW1OeVpXRjBaVVJsWW5Wbklpd2ljSEpsZGxScGJXVWlMQ0p1WVcxbGMzQmhZMlZ6UTJGamFHVWlMQ0psYm1GaWJHVmtRMkZqYUdVaUxDSmxibUZpYkdWUGRtVnljbWxrWlNJc0ltVnVZV0pzWldRaUxDSnpaV3htSWl3aVkzVnljaUlzSWs1MWJXSmxjaUlzSWtSaGRHVWlMQ0p3Y21WMklpd2lZMjlsY21ObElpd2lkVzV6YUdsbWRDSXNJbVp2Y20xaGRDSXNJbVp2Y20xaGRIUmxjaUlzSW1OaGJHd2lMQ0p6Wld4bFkzUkRiMnh2Y2lJc0ltVjRkR1Z1WkNJc0ltZGxkQ0lzSW5ObGRDSXNJbWx1YVhRaUxDSmtaV3hwYldsMFpYSWlMQ0p1WlhkRVpXSjFaeUlzSW5SdlRtRnRaWE53WVdObElpd2ljbVZuWlhod0lpd2laR1ZtWVhWc2RDSXNJbk4wWVdOcklpd2laR2x6WVdKc1pTSXNJbTVoYldWeklpd2ljMnRwY0hNaUxDSmxibUZpYkdVaUxDSnNaVzRpTENKMFpYTjBJaXdpYUdGemFDSXNJbU5vWVhKRGIyUmxRWFFpTENKemRXSnpkSElpTENKWGN5SXNJbU52Ym5OMGNuVmpkRzl5SWl3aWQyVmlWMjl5YTJWeUlpd2ljM1J2Y21Weklpd2lhVzl6SWl3aWJXVjBhRzlrY3lJc0luQjFZbXhwWTBOaGJHeGlZV05yY3lJc0luVnpaU0lzSW1KcGJtUWlMQ0owZFc1bElpd2lkSFZ1WldRaUxDSjFiblIxYm1VaUxDSmxlR1VpTENKdmJsSmxjM0J2Ym5ObFRXVkJVRWtpTENKdlptWlNaWE53YjI1elpVTm9RVkJKSWl3aVpYaGxRMkZzYkdKaFkyc2lMQ0p2YmlJc0ltOW1aaUlzSW5CdmMzUk5aWE56WVdkbElpd2lhVzlVZVhCbElpd2lRVkJKWDFORlZGVlFJaXdpUkVWV1JVeFBVRTFGVGxRaUxDSk1UME5CVEVoUFUxUWlMQ0pFUlZaRlRFOVFUVVZPVkY5RVQwMUJTVTRpTENKUVVrOUVWVU5VU1U5T1gwUlBUVUZKVGlJc0ltWnZjbU5sVG1WM0lpd2lhV1FpTENKdFpYUm9iMlFpTENKd1lYSmhiWE1pTENKdmJsSmxjM0J2Ym5ObFEyaEJVRWtpTENKamFDSXNJbU5oYkd4aVlXTnJJaXdpWVdOMGFXOXVUV1YwYUc5a0lpd2ljbVZ6Y0c5dWMyVWlMQ0poWTNScGIyNVRkR0YwWlNJc0ltZGxkRkpsYzNCdmJuTmxRMmhCVUVraUxDSm5aWFJKYjFCaGNtRnRjeUlzSW1KdmIzUlBjSFJwYjI0aUxDSmxibU52WkdWVlVrbERiMjF3YjI1bGJuUWlMQ0poY0dsVGRHRjBaU0lzSW1sdlVHRnlZVzF6SWl3aVpXNWtjRzlwYm5RaUxDSklWRlJRVTE5UVVrOVVUME5QVENJc0luTmxjblpsY2lJc0lsQlBVbFJUSWl3aVUwOURTMFZVWDBsUElpd2liM0IwYVc5dUlpd2liMjVTWlhGMVpYTjBRVkJKSWl3aVlXTjBhVzl1Y3lJc0ltRmpkR2x2Ymt0bGVYTWlMQ0poWTNScGIyNU1aVzVuZEdnaUxDSm5aWFJEYjNKbFFWQkpJaXdpWVdOMGFXOXVUbUZ0WlNJc0ltSmxabTl5WlVaMWJtTjBhVzl1SWl3aWNtVnhkV1Z6ZEZCaGNtRnRjeUlzSW5KbFpIVjRVM1JoZEdVaUxDSmZjbVZ4ZFdWemRGTjBZWFJsSWl3aVoyVjBVbVZ4ZFdWemRGTjBZWFJsSWl3aVgyRmpkR2x2YmxOMFlYUmxJaXdpWjJWMFVtVnhkV1Z6ZEVGamRHbHZibE4wWVhSbElpd2ljbVZ4ZFdWemRGTjBZWFJsSWl3aVpXMXBkQ0lzSW1GamRHbHZiazV2WkdWRGJuUWlMQ0poWTNScGIyNVFiR0ZwYms1aGJXVWlMQ0pCVUVsZlZFOWZVMFZTVmtWU1gxSkZVVlZGVTFRaUxDSm5aWFJVYjAxbFFWQkpJaXdpUTBGVVEwaGZUVVZmUzBWWklpd2liMjVMWlhraUxDSmZZMkZzYkdKaFkydHpJaXdpYjJabVMyVjVJaXdpWTI5dWRtVnlkRk5sY25abGNsUnZRWEJwU1c5VWVYQmxJaXdpWVhCd0lpd2lZV04wYVc5dVpXUWlMQ0poWTNScGIyNVVlWEJsSWl3aVoyVjBVMlZ4ZFdWdVkyVkJZM1JwYjI1TllYQWlMQ0pCVUVsZlFsSlBRVVJEUVZOVVgwTkJURXhDUVVOTElpd2lRVkJKWDFKRlUxQlBUbE5GWDFSWlVFVmZSVTFKVkNJc0luQnZjM1J6SWl3aWRHaHlaV0ZrSWl3aWRYTmxjaUlzSW5WcFpDSXNJa0ZRU1Y5U1JWTlFUMDVUUlY5VVdWQkZYMEpTVDBGRVEwRlRWQ0lzSW1WdGIzUnBiMjV6SWl3aVltVm1iM0psUm5WdVkzUnBiMjV6SWl3aWNHOXpkQ0lzSW1selRXVmthV0ZEYUNJc0ltTjFjbkpsYm5SVWFXMWxJaXdpYVc1d2RYUkRkWEp5Wlc1MFZHbHRaU0lzSW5SaGJHdHVUV1ZrYVdFaUxDSnBibkIxZEZOMFlXMXdTV1FpTENKaVlXeGhibU5sY3lJc0ltSmhiR0Z1WTJWTFpYa2lMQ0ppWVd4aGJtTmxJaXdpZEhsd1pVbGtJaXdpZEhsd1pVeGhZbVZzSWl3aWFXUkxaWGxVZVhCbGN5SXNJbE5GVWxaRlVsOVVUMTlCVUVsZlFsSlBRVVJEUVZOVUlpd2lVMFZTVmtWU1gxUlBYMEZRU1Y5RlRVbFVJaXdpYzJWMFUzUnZjbUZuWlVoMGJXeFFiM04wY3lJc0luQnliM0J6SWl3aWMzUnZjbUZuWlV0bGVTSXNJbWx6VW05dmRFTm9JaXdpY0c5emRITk5kV3gwYVNJc0luQnZjM1J6VTJsdVoyeGxJaXdpYzJWMFUzUnZjbUZuWlZCdmMzUnpWR2x0Wld4cGJtVWlMQ0p3YjNOMGMxUnBiV1ZzYVc1bElpd2ljRzl6ZEhOVWFXMWxiR2x1WlVGc2JDSXNJbkJ2YzNSelZHbHRaV3hwYm1WQmJHeE1aVzVuZEdnaUxDSndiM04wYzFScGJXVnNhVzVsV21WeWIxTmxZMjl1WkNJc0luSnZiM1JEYUNJc0ltUnBjM0JVYUhKbFlXUlVlWEJsSWl3aVpHbHpjRlJvY21WaFpGUjVjR1ZOZFd4MGFTSXNJbkJ2YzNSVGFXNW5iR1VpTENKd2IzTjBUWFZzZEdraUxDSnpaWFJUZEc5eVlXZGxVRzl6ZEhNaUxDSjFjR1JoZEdWQlkzUnBiMjRpTENKbWRXNWpkR2x2Ym5NaUxDSnZabVp6WlhSR2FXNWtTV1FpTENKMGRXNWxaRU5vSWl3aVpHVjBZV2xzUTJnaUxDSnBjMVIxYm1VaUxDSm5aWFJKYzAxbFpHbGhRMmdpTENKa2FYTndWR2h5WldGa1ZIbHdaVlJwYldWc2FXNWxJaXdpYVhOVWIyZG5iR1ZOZFd4MGFYTjBjbVZoYlNJc0luUnBkR3hsSWl3aWMyVnlkbVZ5VFdWMFlYTWlMQ0pvWVhOVGJHRnphQ0lzSW1kbGRFSnZiMndpTENKMGFISmxZV1J6SWl3aVoyVjBUV1Z5WjJWa1ZHaHlaV0ZrY3lJc0luUm9jbVZoWkVSbGRHRnBiQ0lzSW5KdmIzUlVhWFJzWlNJc0luTnlZeUlzSW1kbGRFMWxaR2xoVTNKaklpd2ljSEp2ZEc5amIyd2lMQ0pqYUZSNWNHVWlMQ0puWlhSTlpXUnBZVlI1Y0dWR2NtOXRVM0pqSWl3aWJXVmthV0ZVWVdkVWVYQmxUbThpTENKblpYUlBabVp6WlhSR2FXNWtTV1FpTENKblpYUkJibmxCWTNScGIyNVFiM04wY3lJc0ltUmxabUYxYkhSUFptWnpaWFJHYVc1a1NXUWlMQ0p2Wm1aelpYUlVhVzFsYkdsdVpVWnBibVJKWkNJc0ltOW1abk5sZEUxMWJIUnBSbWx1WkVsa0lpd2liMlptYzJWMFUybHVaMnhsUm1sdVpFbGtJaXdpYjJabWMyVjBRMmhwYkdSR2FXNWtTV1FpTENKdlptWnpaWFJNYjJkelJtbHVaRWxrSWl3aWNHOXpkSE5EYUdsc1pDSXNJbUZqZEdsdmJrVnRiM1JwYjI1eklpd2laVzF2ZEdsdmJrMXZaR1ZzUzJWNUlpd2laVzF2ZEdsdmJrdGxlU0lzSW1selRHbHVhME5vSWl3aVptbHVaRlI1Y0dVaUxDSm5aWFJHYVc1a1ZIbHdaVVp5YjIxVGNtTWlMQ0prWlhOaklpd2lkV2tpTENKdFpXNTFRMjl0Y0c5dVpXNTBJaXdpZFhCa1lYUmxSbXhuSWl3aVkyeHBaVzUwVFdWMFlYTWlMQ0poYm1Gc2VYcGxJaXdpYldWeVoyVWlMQ0p5WldSMVkyVnlSbWxzWlhNaUxDSjBkVzVsUTJnaUxDSnlZVzVyY3lJc0luTmxkSFJwYm1jaUxDSndiM04wYzFScGJXVnNhVzVsVTNSdlkyc2lMQ0p3YjNOMGMxUnBiV1ZzYVc1bFdtVnlieUlzSW5CdmMzUnpWR2x0Wld4cGJtVmFaWEp2UVdaMFpYSWlMQ0poY0dsTWIyY2lMQ0p0YjNKbFVHOXpkRTExYkdsMElpd2labWx1WkU5dVpVeHBiV2wwUTI1MElpd2ljSFFpTENKa2FYTndSbXhuSWl3aWJXVmthV0ZEZFhKeVpXNTBWR2x0WlNJc0luQnZjM1JNWlc1bmRHZ2lMQ0p6YjNKMFYyRjBZMmhEYm5RaUxDSnNhWFpsUTI1MElpd2laMlYwUkdsemNGQnZjM1J6SWl3aWNtRnVheUlzSW1aaGRtbGpiMjRpTENKemRHRnRjRWxrSWl3aWMyOXlkQ0lzSW01bGQxSmhibXR6SWl3aWNtRnVhME51ZENJc0lteGhjM1JRYjNOMElpd2libVYzVW1GdWF5SXNJblZ3WkdGMFpWUnBiV1VpTENKbVlXbGpiMjRpTENKamFITWlMQ0pCYm1Gc2VYcGxJaXdpYzNWd1pYSWlMQ0pqY21WaGRHVWlMQ0pCY0hBaUxDSmtaV1poZFd4MFJtbHVaRWxrSWl3aWFYTlRaWFFpTENKblpYUk5aV1JwWVZSNWNHVWlMQ0puWlhSRWFYTndWR2h5WldGa1ZIbHdaU0lzSW0xMWJIUnBjM1J5WldGdElpd2labWx1WkZSNWNHVkJiR3dpTENKcGJuQjFkRkJ2YzNRaUxDSnBibkIxZEZObFlYSmphQ0lzSW1selVtRnVhMFJsZEdGcGJFMXZaR1VpTENKdFpXUnBZVlI1Y0dWTmNETWlMQ0p0WldScFlWUjVjR1ZOY0RRaUxDSnRaV1JwWVZSNWNHVk5OR0VpTENKdFpXUnBZVlJoWjFSNWNHVkJkV1JwYnlJc0ltMWxaR2xoVkdGblZIbHdaVlpwWkdWdklpd2liV1ZrYVdGRGFGUmhaMVI1Y0dWTFpYbHpJaXdpYldWa2FXRkRhRlJoWjFSNWNHVnpJaXdpYldWa2FXRkRhRlJoWjFSNWNHVk1aVzVuZEdnaUxDSnRaV1JwWVZSNWNHVWlMQ0p5WldkRmVIQWlMQ0pwYm01bGNsZHBaSFJvSWl3aWQybGtkR2dpTENKcGJtNWxja2hsYVdkb2RDSXNJbU52Ym5SbGJuUlVlWEJsSWl3aWFYTkJkV1JwYjBOdmJuUmxiblJVZVhCbElpd2lhWE5XYVdSbGIwTnZiblJsYm5SVWVYQmxJaXdpYldWa2FXRkRhSE1pTENKemIyMWxJaXdpWlhoMElpd2lYMmxrSWl3aWRHaHlaV0ZrVTNSaGRIVnpJaXdpZEc5RGFDSXNJbU5zYVdOclpXUWlMQ0poWm5SbGNrUnBjM0JVYUhKbFlXUlVlWEJsSWl3aVltVm1iM0psUkdsemNGUm9jbVZoWkZSNWNHVWlMQ0puWlhSVGRHVndSR2x6Y0ZSb2NtVmhaRlI1Y0dVaUxDSnpkR1Z3Vkc4aUxDSjFjR1JoZEdWa1FYQndJaXdpYldraUxDSmthWE53VkdoeVpXRmtWSGx3WlVOb2FXeGtJaXdpWkdsemNGUm9jbVZoWkZSNWNHVlRhVzVuYkdVaUxDSkNiMjkwVDNCMGFXOXVJaXdpWVhSMGNtbGlkWFJsY3lJc0luSmxZblZwYkdSQmRIUnlhV0oxZEdWelQySnFJaXdpVFdWdWRVeHZaM01pTENKUWIzTjBJaXdpWkdWbVlYVnNkRlpoYkhWbGN5SXNJbXhoZVdWeUlpd2lkWFI1Y0dVaUxDSmtZWFJoSWl3aVkzSmxZWFJsVkdsdFpTSXNJblpoYkhWbGN5SXNJbVJsWm1GMWJIUkdZWFpwWTI5dUlpd2lVRzl6ZEhNaUxDSndiM04wYzB4dlozTWlMQ0prYVhOd1ZHaHlaV0ZrVkhsd1pVeHZaM01pTENKbGVHbHpkRkJ2YzNSeklpd2laMlYwUVc1NVFXTjBhVzl1VUc5emRITlVhVzFsYkdsdVpTSXNJbkJ2YzNSelRHVnVaM1JvSWl3aVUyVjBkR2x1WnlJc0ltTnNhV1Z1ZENJc0ltTnZiVzF2YmlJc0lsUm9jbVZoWkNJc0lsUkJURXRPWDFCU1QxUlBRMDlNSWl3aVkyaGhjbk5sZENJc0ltaHZjM1FpTENKblpYUkVaV1poZFd4MFJtRjJhV052YmlJc0ltZGxkRVJsWm1GMWJIUlVhWFJzWlNJc0ltMWxkR0Z6SWl3aWJHbHVhM01pTENKb01YTWlMQ0poZFdScGIzTWlMQ0oyYVdSbGIzTWlMQ0puWlhSTVlYbGxjaUlzSW0xbFpHbGhTVzVrWlhnaUxDSndiM04wUTI1MElpd2liWFZzZEdsUWIzTjBRMjUwSWl3aWFYTlRaV3htUTJnaUxDSnBjMWRwYm1SdmQwOWlhaUlzSW1OdmJuTjBjblZqZEc5eVJuSnZiVmRwYm1SdmR5SXNJbVpwYm1SVWVYQmxTSFJ0YkNJc0ltWnBibVJVZVhCbFRYVnphV01pTENKbWFXNWtWSGx3WlZacFpHVnZJaXdpWVhOelpYUnpWVkpNSWl3aVlXeGxjblFpTENKaWIyOTBRMmdpTENKblpYUkRhQ0lzSW1oaGMzTnNZWE5vSWl3aVoyVjBVSEp2ZEc5amIyd2lMQ0puWlhSSWIzTjBJaXdpWjJWMFEyaHpJaXdpYkc5allYUnBiMjRpTENKblpYUkdZWFpwWTI5dVJuSnZiVmRwYm1SdmR5SXNJbWRsZEVselUyVnNaa05vSWl3aVgyTm9JaXdpWTJoQmNuSWlMQ0pqYUV4bGJtZDBhQ0lzSW01bGQwTm9JaXdpWkc5dFlXbHVJaXdpYUhKbFppSXNJblVpTENKbGRtRnNkV0YwWlNJc0luTjBjbWx1WjFaaGJIVmxJaXdpYUhNaUxDSnNJaXdpZFhKc0lpd2lhWE5GZUdsemRDSXNJbk4wWVhSMWN5SXNJbVJwYzNCVWVYQmxJaXdpYVhORGNtVmhkR1VpTENKcGMxSmxjWFZwY21WVmNITmxjblFpTENKcGMwMTFiSFJwYzNSeVpXRnRJaXdpWjJWMFRXOXlaU0lzSW1kbGRGTjBZWFIxYzBOeVpXRjBaU0lzSW1kbGRGTjBZWFIxYzBselVtVnhkV2x5WlZWd2MyVnlkQ0lzSW1kbGRGTjBZWFIxYzBselRYVnNkR2x6ZEhKbFlXMGlMQ0puWlhSVGRHRjBkWE5KYzFSdloyZHNaVTExYkhScGMzUnlaV0Z0SWl3aVoyVjBVM1JoZEhWelNYTk5aV1JwWVVOb0lpd2lkR2h5WldGa1ZYQmtZWFJsVkdsdFpTSXNJbWRsZEZScGJXVWlMQ0p1YjNjaUxDSnViM2RaWldGeUlpd2laMlYwUm5Wc2JGbGxZWElpTENKdWIzZE5iMjUwYUNJc0ltZGxkRTF2Ym5Sb0lpd2libTkzUkdGNUlpd2laMlYwUkdGMFpTSXNJbTV2ZDBodmRYSWlMQ0puWlhSSWIzVnljeUlzSW1kbGRFMXBiblYwWlhNaUxDSm1hVzVrVDI1bFZHaHlaV0ZrUVdOMGFYWmxTRzkxY2lJc0ltWnBibVJVZVhCbGN5SXNJbk53YkdsMFpXUkRiMjUwWlc1MFZIbHdaU0lzSW1sdVkyeDFaR1Z6SWl3aVkyaGhja0YwSWl3aWRHOVZjSEJsY2tOaGMyVWlMQ0pVYUhKbFlXUnpJaXdpWW1GelpWUm9jbVZoWkhNaUxDSnRaWEpuWlZSb2NtVmhaQ0lzSWxSMWJtVkRhQ0lzSWxWelpYSWlMQ0p0ZFd4MGFYTjBjbVZoYldWa0lpd2ljbVZ4ZFdWemRFeHZaMmx1Vkhsd1pTSXNJbVp5YVdWdVpITWlMQ0pwYm1sMGFXRnNVM1JoZEdVaUxDSkJjR2xUZEdGMFpTSXNJbU5oWTJobGN5SXNJbTFsYm5WTWIyZHpJaXdpWjJWMFFYQndVR0Z5WVcxeklpd2laMlYwVlhObGNsQmhjbUZ0Y3lJc0ltRmpkR2x2Ymt4dlp5SXNJbWx6VkhKaGJuTnBkR2x2YmlJc0lsZHpRWEJwVjI5eWEyVnlJaXdpZDI5eWEyVnlJaXdpYjI1TlpYTnpZV2RsSWl3aWIyNU5aWE56WVdkbFJYSnliM0lpTENKdmJtVnljbTl5SWl3aWIyNXRaWE56WVdkbElpd2lkM01pTENKdFpYUm9iMlJDWVdOcklpd2lWMU5CVUVsZlZFOWZRMHhKUlU1VVgxUlpVRVVpTENKRFRFbEZUbFJmVkU5ZlYxTkJVRWxmVkZsUVJTSXNJa0ZRU1Y5VVQxOURURWxGVGxSZlVrVlJWVVZUVkNJc0lrRlFTVjlVVDE5RFRFbEZUbFJmUlUxSlZDSXNJa0ZRU1Y5VVQxOURURWxGVGxSZlFsSlBRVVJEUVZOVUlpd2ljM0JzYVhSbFpERWlMQ0psZUdWTlpYUm9iMlFpTENKSVlXNWtiR1ZOWlhOellXZGxUV1YwYUc5a0lpd2lTR0Z1Wkd4bFVtVnhkV1Z6ZEUxbGRHaHZaQ0lzSWxOamFHVnRZU0lzSW1kbGRGUjVjR1VpTENKbWJpSXNJbVp1VTNSeWFXNW5JaXdpWTJ4aGMzTk9ZVzFsSWl3aVpHVm1JaXdpYVhOQlkyTmxjSFJPZFd4c0lpd2lhWE5CWTJObGNIUkNiR0Z1YXlJc0luWmhiR2xrSWl3aWFYTkZiWEIwZVU5aWFtVmpkQ0lzSW5aaGJHbGtSblZ1WXlJc0lsOTJZV3gxWlNJc0luQnZhVzUwWlhJaUxDSjJZV3hwWkZaaGJIVmxJaXdpZG1Gc2FXUlVlWEJsSWl3aWNHRnlZVzF6Vm1Gc2RXVWlMQ0p3WVhKaGJYTlVlWEJsSWl3aWRtRnNhV1JTWlhOMWJIUWlMQ0oyWVd4cFpGZGhjbTRpTENKbGNuSnZjbFJvY205M0lpd2lZMkZ1VTJWMElpd2lZM1Z5Y21WdWRGWmhiSFZsSWl3aWFXMXRkWFJoWW14bElpd2liMkpxUzJWNWN5SXNJbTFsY21kbFpFOWlhaUlzSW5SdlNsTlBUaUlzSW1wemIyNVBZbW9pTENKbWRXNWpJaXdpWTI5dVkyRjBJaXdpY21WMGRYSnVTVzF0ZFhSaFlteGxJaXdpWm1sdVpDSXNJbWRsZEZOb2FXWjBJaXdpY21WemRXeDBjeUlzSW5Ob2FXWjBJaXdpY0c5d0lpd2lVMlZ4ZFdWdVkyVWlMQ0pCVUVsZlVrVlJWVVZUVkY5VVdWQkZJaXdpVFVWVVNFOUVYME5QVEU5T0lpd2ljbVZ4ZFdWemRGQjFZbXhwWTFOMFlYUmxJaXdpY21WeGRXVnpkRkJ5YVhaaGRHVlRkR0YwWlNJc0luSmxjM0J2Ym5ObFJXMXBkRk4wWVhSbElpd2ljbVZ6Y0c5dWMyVkNjbTloWkdOaGMzUlRkR0YwWlNJc0ltWmxkR05vVUc5emRITWlMQ0oxY0dSaGRHVlVhSEpsWVdRaUxDSmphR0Z1WjJWVWFISmxZV1FpTENKamFHRnVaMlZVYUhKbFlXUkVaWFJoYVd3aUxDSmhaR1JHYVc1a1EyaHBiR1FpTENKMWNHUmhkR1ZVYUhKbFlXUlRaWEoyWlhKTlpYUmhjeUlzSW1ScGMyTnZibTVsWTNRaUxDSnpjR3hwZEdWa0lpd2ljMlZ4ZFdWdVkyVWlMQ0poWTNScGRtVlNaWE53YjI1elpVMWhjQ0lzSW1KeWIyRmtZMkZ6ZENJc0ltbEdjbUZ0WlVsa0lpd2lRVkJKWDFORlVFRlNRVlJGWDBsUFgxUlpVRVZmVTFSQlVsUWlMQ0pCVUVsZlUwVlFRVkpCVkVWZlNVOWZWRmxRUlY5RlRrUWlMQ0pqYjI1MlpYSjBRWEJwVkc5RGJHbGxiblJCWTNScGIyNVVlWEJsSWl3aVpXNWtjRzlwYm5STFpYa2lMQ0pTUlVSVldGOUJRMVJKVDA1ZlMwVlpJaXdpYzNSaGRHVkxaWGtpTENKamIyeDFiVzVPWVcxbElpd2ljbVZ6Y0c5dWMyVlVlWEJsSWl3aWRYQmtZWFJsVTNSaGRHVWlMQ0p5WlhOd2IyNXpaVk5qYUdWdFlTSXNJbkpsYzNCdmJuTmxVM1JoZEdVaUxDSjFjR1JoZEdWVGRHRjBaVXRsZVNJc0ltTnZiSFZ0Yms1aGJXVnpJaXdpZFhCa1lYUmxVM1JoZEdWV1lXeDFaU0lzSWw5ZmRpSXNJbkpsY1hWbGMzUlFZWEpoYlhNeElpd2ljbVZ4ZFdWemRGQmhjbUZ0Y3pJaUxDSlFVazlFVlVOVVNVOU9JaXdpVTFWQ1gwUlBUVUZKVGxNaUxDSm9iM04wVG1GdFpTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2lhRzl6ZEc1aGJXVWlMQ0p3YjNKMElpd2lSRVZXUlV4UFVFMUZUbFJmUTB4SlJVNVVJaXdpUkVWV1JVeFBVRTFGVGxSZlFWQkpJaXdpUkVWV1JVeFBVRTFGVGxSZlEwOVdSVklpTENKRVJWWkZURTlRVFVWT1ZGOURUMDFRVDA1RlRsUlRJaXdpUkVWV1JVeFBVRTFGVGxSZlZGVk9SU0lzSWtGWFUxOUlUMU5VWDB0RldTSXNJbWRsZEVWdWRpSXNJbVpwYkdWeklpd2lZWEJwSWl3aWQzTlhiM0pyWlhJaUxDSmpiM1psY2lJc0ltTnZiWEJ2Ym1WdWRITWlMQ0pwYzBSbGRpSXNJbmQzZDFWU1RDSXNJbGRYVnlJc0ltTnZkbVZ5VlZKTUlpd2lRMDlXUlZJaUxDSmhjR2xWVWt3aUxDSkJVRWtpTENKaGNHbEJZMk5sYzNOVlVrd2lMQ0pqYkdsbGJuUlZVa3dpTENKRFRFbEZUbFFpTENKa1pYTmpWVkpNSWl3aVJFVlRReUlzSW5CdmNuUmhiRlZTVENJc0lsQlBVbFJCVENJc0lrRlRVMFZVVXlJc0ltRjFkRzlWVWt3aUxDSkJWVlJQSWl3aVpYaDBWVkpNSWl3aVJWaFVJaXdpWTI5dGNGVlNUQ0lzSWtOUFRWQWlMQ0p2ZDI1VlVrd2lMQ0pQVjA0aUxDSnVaWGR6VlZKTUlpd2lUa1ZYVXlJc0luUjFibVZWVWt3aUxDSlVWVTVGSWl3aVkyOXRjRzl1Wlc1MGMxVlNUQ0lzSWtOUFRWQlBUa1ZPVkZNaUxDSmhjM05sZEhOSmJXZFFZWFJvSWl3aVkyOXVaaUlzSW1KaGJtNWxjbFZTVENJc0lrSkJUazVGVWlJc0luUnlZVzV6WVdOMGFXOXVWVkpNSWl3aVZGSkJUbE5CUTFSSlQwNGlMQ0poYzNObGRITkRiM1psY2xCaGRHZ2lMQ0poYzNObGRITkpZMjl1VUdGMGFDSXNJbUZ6YzJWMGMwcHpVR0YwYUNJc0luTmxjM05wYjI1VlVrd2lMQ0pUUlZOVFNVOU9JaXdpWkdWelkzSnBjSFJwYjI0aUxDSmhjR2xXWlhJaUxDSnNjRXhoYm1kMVlXZGxjeUlzSW1SbFptRjFiSFJDYVhKMGFHUmhlVlZ1YVhoMGFXMWxJaXdpWm1sdVpFOXVaVkJ2YzNSRGJuUWlMQ0p2WjNCSmJXRm5aWE1pTENKSWRHMXNJaXdpVFhWemFXTWlMQ0pXYVdSbGJ5SXNJbVJsWm1sdVpTSXNJa0ZRVUY5T1FVMUZJaXdpVUZKUFJGVkRWRWxQVGw5SlVDSXNJa2hQVTFST1FVMUZJaXdpU0ZSVVVDSXNJa2hVVkZCVElpd2lVa1ZFU1ZNaUxDSk5UMDVIVHlJc0lsSkJUa3NpTENKQlVGQmZWRmxRUlZNaUxDSkZXRlJGVGxOSlQwNGlMQ0pWVWt3aUxDSjBkMmwwZEdWeUlpd2labUZqWldKdmIyc2lMQ0poY0hCemRHOXlaU0lzSW5Cc1lYbHpkRzl5WlNJc0ltTm9jbTl0WlVWNGRHVnVjMmx2YmlJc0luUmhiR3R1UTJ4cFpXNTBTbk1pTENKMFlXeHJia0Z3YVVweklpd2lkR0ZzYTI1U1lXNXJTbk1pTENKdWIwbHVibVZ5VG05MGFXWWlMQ0ppWVc1dVpYSkRiR0Z6Y3lJc0ltSmhjMlZMWlhraUxDSkZiVzkwYVc5dWN5SXNJbUpsYkc5dVowTnZkbVZ5Vkhsd1pYTWlMQ0owZVhCbGMwRnljbUY1SWl3aWFXNXdkWFJ6SWl3aWJHRmlaV3dpTENKVVdWQkZVeUlzSWtsRUlpd2lURUZDUlV3aUxDSnRiMlJsYkNJc0luQnNZV2x1SWl3aVVHeGhhVzRpTENKblpYUlRZWFpsUW1Gc1lXNWpaU0lzSW5KMWMzTmxiR3dpTENKU2RYTnpaV3hzSWl3aWNuVnpjMlZzYkZOcGJYQnNaU0lzSWxKMWMzTmxiR3hUYVcxd2JHVWlMQ0pNU1V0Rklpd2lTVTVVUlZKRlUxUWlMQ0pFU1ZORFQxWkZVbGtpTENKVFZVNU9XU0lzSWxCRlFVTkZJaXdpUTBoRlJWSWlMQ0pOVDA1RldTSXNJbFZPVEVsTFJTSXNJa3hQVmtVaUxDSlRWVkJTU1ZORklpd2lSVmhEU1ZSRklpd2lTRUZRVUZraUxDSktUMWtpTENKSFRFRkVJaXdpVTBGVVNWTkdRVU5VU1U5T0lpd2lRMDlOUms5U1ZDSXNJbEpGVEVGWUlpd2lWRWxTUlVRaUxDSlRURVZGVUZraUxDSlRURUZEU3lJc0lrSlBVa2xPUnlJc0lrMUZURUZPUTBoUFRGa2lMQ0pUUVVRaUxDSlZUbEJNUlVGVFFVNVVJaXdpUmxKVlUxUlNRVlJGUkNJc0lrUkpVMU5CVkVsVFJrbEZSQ0lzSWtGT1IwVlNJaXdpVjA5U1Vsa2lMQ0pHUlVGU0lpd2lWMDlTVWxsZlJrVkJVaUlzSW0xdlpHVnNTMlY1SWl3aVpHVm1ZWFZzZEUxdlpHVnNTMlY1SWl3aWRHOTBZV3hPZFcwaUxDSmhaR1JhWlhKdklpd2laM0poY0doTllYaE9kVzBpTENKc2FXMXBkSE1pTENKc2FXMXBkRXRsZVhNaUxDSnNhVzFwZEV4bGJtZDBhQ0lzSW10bGVVNTFiU0lzSW1WdGIzUnBiMjVNYVcxcGRFNTFiU0lzSW5OamFHVnRZWE1pTENKdGFXNGlMQ0pqWVdOb1pXUlRaWFJVYVcxbGIzVjBJaXdpWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSWl3aVpHVm1ZWFZzZEZObGRGUnBiVzkxZENJc0ltUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUWlMQ0p5ZFc1VWFXMWxiM1YwSWl3aVpuVnVJaXdpYzJWMFZHbHRaVzkxZENJc0ltTnNaV0Z5VkdsdFpXOTFkQ0lzSW1OMWNuSmxiblJSZFdWMVpTSXNJbkYxWlhWbElpd2laSEpoYVc1cGJtY2lMQ0p4ZFdWMVpVbHVaR1Y0SWl3aVkyeGxZVzVWY0U1bGVIUlVhV05ySWl3aVpISmhhVzVSZFdWMVpTSXNJblJwYldWdmRYUWlMQ0p5ZFc0aUxDSnRZWEpyWlhJaUxDSnlkVzVEYkdWaGNsUnBiV1Z2ZFhRaUxDSkpkR1Z0SWl3aVlYSnlZWGtpTENKdWIyOXdJaXdpYm1WNGRGUnBZMnNpTENKd2NtOTBiM1I1Y0dVaUxDSmljbTkzYzJWeUlpd2lZWEpuZGlJc0luWmxjbk5wYjI0aUxDSjJaWEp6YVc5dWN5SXNJbUZrWkV4cGMzUmxibVZ5SWl3aWIyNWpaU0lzSW5KbGJXOTJaVXhwYzNSbGJtVnlJaXdpY21WdGIzWmxRV3hzVEdsemRHVnVaWEp6SWl3aWNISmxjR1Z1WkV4cGMzUmxibVZ5SWl3aWNISmxjR1Z1WkU5dVkyVk1hWE4wWlc1bGNpSXNJbUpwYm1ScGJtY2lMQ0pqZDJRaUxDSmphR1JwY2lJc0ltUnBjaUlzSW5WdFlYTnJJaXdpUW1GamEyOW1aaUlzSW05d2RITWlMQ0p0WVhnaUxDSm1ZV04wYjNJaUxDSnFhWFIwWlhJaUxDSmhkSFJsYlhCMGN5SXNJbVIxY21GMGFXOXVJaXdpY0c5M0lpd2ljbUZ1WkNJc0ltUmxkbWxoZEdsdmJpSXNJbVpzYjI5eUlpd2ljbVZ6WlhRaUxDSnpaWFJOYVc0aUxDSnpaWFJOWVhnaUxDSnpaWFJLYVhSMFpYSWlMQ0pmWDJsdGNHOXlkRVJsWm1GMWJIUWlMQ0p0YjJRaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWTI5dWJtVmpkQ0lzSW1sdklpd2lVMjlqYTJWMElpd2lUV0Z1WVdkbGNpSXNJblZ5YkY5cWMxOHhJaXdpYldGdVlXZGxjbDlxYzE4eElpd2ljMjlqYTJWMFgycHpYekVpTENKallXTm9aU0lzSW14dmIydDFjQ0lzSW5WeWFTSXNJbkJoY25ObFpDSXNJbkJoZEdnaUxDSnpZVzFsVG1GdFpYTndZV05sSWl3aWJYVnNkR2x3YkdWNElpd2ljWFZsY25raUxDSnhkV1Z5ZVV0bGVTSXNJbk52WTJ0bGRDSXNJbUZ6YzJsbmJpSXNJbk52WTJ0bGRGOXBiMTl3WVhKelpYSmZNU0lzSWw5ZlkzSmxZWFJsUW1sdVpHbHVaeUlzSW04aUxDSnJJaXdpYXpJaUxDSmZYM05sZEUxdlpIVnNaVVJsWm1GMWJIUWlMQ0pmWDJsdGNHOXlkRk4wWVhJaUxDSnlaWE4xYkhRaUxDSmxibWRwYm1WZmFXOWZZMnhwWlc1MFh6RWlMQ0p3WVhKelpYSWlMQ0p2Ymw5cWMxOHhJaXdpWW1GamEyOHlYMnB6WHpFaUxDSmpiMjF3YjI1bGJuUmZaVzFwZEhSbGNsOHhJaXdpUlcxcGRIUmxjaUlzSWw5aElpd2libk53Y3lJc0luTjFZbk1pTENKcGJuTjBZV3hzVkdsdFpYSkdkVzVqZEdsdmJuTWlMQ0p5WldOdmJtNWxZM1JwYjI0aUxDSnlaV052Ym01bFkzUnBiMjVCZEhSbGJYQjBjeUlzSWtsdVptbHVhWFI1SWl3aWNtVmpiMjV1WldOMGFXOXVSR1ZzWVhraUxDSnlaV052Ym01bFkzUnBiMjVFWld4aGVVMWhlQ0lzSW5KaGJtUnZiV2w2WVhScGIyNUdZV04wYjNJaUxDSmlZV05yYjJabUlpd2lYM0psWVdSNVUzUmhkR1VpTENKZmNHRnljMlZ5SWl3aVpXNWpiMlJsY2lJc0lrVnVZMjlrWlhJaUxDSmtaV052WkdWeUlpd2lSR1ZqYjJSbGNpSXNJbDloZFhSdlEyOXVibVZqZENJc0ltRjFkRzlEYjI1dVpXTjBJaXdpYjNCbGJpSXNJbDl5WldOdmJtNWxZM1JwYjI0aUxDSmZjbVZqYjI1dVpXTjBhVzl1UVhSMFpXMXdkSE1pTENKZmNtVmpiMjV1WldOMGFXOXVSR1ZzWVhraUxDSmZjbUZ1Wkc5dGFYcGhkR2x2YmtaaFkzUnZjaUlzSWw5eVpXTnZibTVsWTNScGIyNUVaV3hoZVUxaGVDSXNJbDkwYVcxbGIzVjBJaXdpYldGNVltVlNaV052Ym01bFkzUlBiazl3Wlc0aUxDSmZjbVZqYjI1dVpXTjBhVzVuSWl3aWNtVmpiMjV1WldOMElpd2laVzVuYVc1bElpd2ljMnRwY0ZKbFkyOXVibVZqZENJc0ltOXdaVzVUZFdKRVpYTjBjbTk1SWl3aWIyNXZjR1Z1SWl3aVpYSnliM0pUZFdJaUxDSmxjbklpTENKamJHVmhiblZ3SWl3aVpXMXBkRkpsYzJWeWRtVmtJaXdpZEdsdFpYSWlMQ0p6WlhSVWFXMWxiM1YwUm00aUxDSmpiRzl6WlNJc0ltRjFkRzlWYm5KbFppSXNJblZ1Y21WbUlpd2liMjV3YVc1bklpd2liMjVrWVhSaElpd2liMjVqYkc5elpTSXNJbTl1WkdWamIyUmxaQ0lzSW1Ga1pDSXNJbkJoWTJ0bGRDSXNJbTV6Y0NJc0lsOWtaWE4wY205NUlpd2lZV04wYVhabElpd2lYMk5zYjNObElpd2lYM0JoWTJ0bGRDSXNJbVZ1WTI5a1pXUlFZV05yWlhSeklpd2laVzVqYjJSbElpd2lkM0pwZEdVaUxDSnpkV0pFWlhOMGNtOTVJaXdpY21WaGMyOXVJaXdpWkdWc1lYa2lMQ0p2Ym5KbFkyOXVibVZqZENJc0ltRjBkR1Z0Y0hRaUxDSmxkaUlzSWxKRlUwVlNWa1ZFWDBWV1JVNVVVeUlzSW1aeVpXVjZaU0lzSW1OdmJtNWxZM1JmWlhKeWIzSWlMQ0prYVhOamIyNXVaV04wYVc1bklpd2libVYzVEdsemRHVnVaWElpTENKamIyNXVaV04wWldRaUxDSnlaV05sYVhabFFuVm1abVZ5SWl3aWMyVnVaRUoxWm1abGNpSXNJbWxrY3lJc0ltRmphM01pTENKbWJHRm5jeUlzSW1GMWRHZ2lMQ0p6ZFdKRmRtVnVkSE1pTENKdmJuQmhZMnRsZENJc0luTmxibVFpTENKUVlXTnJaWFJVZVhCbElpd2lSVlpGVGxRaUxDSmpiMjF3Y21WemN5SXNJbUZqYXlJc0lsOXlaV2RwYzNSbGNrRmphME5oYkd4aVlXTnJJaXdpYVhOVWNtRnVjM0J2Y25SWGNtbDBZV0pzWlNJc0luUnlZVzV6Y0c5eWRDSXNJblp2YkdGMGFXeGxJaXdpYm05MGFXWjVUM1YwWjI5cGJtZE1hWE4wWlc1bGNuTWlMQ0pqYkdWaGNsUnBiV1Z2ZFhSR2JpSXNJa05QVGs1RlExUWlMQ0p6YVdRaUxDSnZibU52Ym01bFkzUWlMQ0pDU1U1QlVsbGZSVlpGVGxRaUxDSnZibVYyWlc1MElpd2lRVU5MSWl3aVFrbE9RVkpaWDBGRFN5SXNJbTl1WVdOcklpd2lSRWxUUTA5T1RrVkRWQ0lzSW05dVpHbHpZMjl1Ym1WamRDSXNJa05QVGs1RlExUmZSVkpTVDFJaUxDSmxiV2wwUlhabGJuUWlMQ0pmWVc1NVRHbHpkR1Z1WlhKeklpd2ljMlZ1ZENJc0ltVnRhWFJDZFdabVpYSmxaQ0lzSW05dVFXNTVJaXdpY0hKbGNHVnVaRUZ1ZVNJc0ltOW1aa0Z1ZVNJc0lteHBjM1JsYm1WeWMwRnVlU0lzSW05dVFXNTVUM1YwWjI5cGJtY2lMQ0pmWVc1NVQzVjBaMjlwYm1kTWFYTjBaVzVsY25NaUxDSndjbVZ3Wlc1a1FXNTVUM1YwWjI5cGJtY2lMQ0p2Wm1aQmJubFBkWFJuYjJsdVp5SXNJbXhwYzNSbGJtVnljMEZ1ZVU5MWRHZHZhVzVuSWl3aWJHOWpJaXdpYUdGelEwOVNVeUlzSWxoTlRFaDBkSEJTWlhGMVpYTjBJaXdpWkdWamIyUmxJaXdpY1hNaUxDSnhjbmtpTENKd1lXbHljeUlzSW5CaGFYSWlMQ0prWldOdlpHVlZVa2xEYjIxd2IyNWxiblFpTENKeVpTSXNJbkJoY25Seklpd2lZWFYwYUc5eWFYUjVJaXdpYVhCMk5uVnlhU0lzSW5CaGRHaE9ZVzFsY3lJc0lpUXdJaXdpSkRJaUxDSjVaV0Z6ZENJc0ltRnNjR2hoWW1WMElpd2ljMlZsWkNJc0ltNTFiU0lzSW1WdVkyOWtaV1FpTENKa1pXTnZaR1ZrSWl3aVoyeHZZbUZzVkdocGMxTm9hVzBpTENKR2RXNWpkR2x2YmlJc0luUnlZVzV6Y0c5eWRITWlMQ0pVY21GdWMzQnZjblFpTENKMGNtRnVjM0J2Y25SZmFuTmZNU0lzSW1sdVpHVjRYMnB6WHpFaUxDSjFkR2xzWDJwelh6RWlMQ0p3WVhKelpYVnlhVjlxYzE4eElpd2ljR0Z5YzJWeGMxOXFjMTh4SWl3aVpHVmlkV2RmTVNJc0ltVnVaMmx1WlY5cGIxOXdZWEp6WlhKZk1TSXNJbk5sWTNWeVpTSXNJbkpsWVdSNVUzUmhkR1VpTENKM2NtbDBaVUoxWm1abGNpSXNJbkJ5WlhaQ2RXWm1aWEpNWlc0aUxDSmhaMlZ1ZENJc0luZHBkR2hEY21Wa1pXNTBhV0ZzY3lJc0luVndaM0poWkdVaUxDSjBhVzFsYzNSaGJYQlFZWEpoYlNJc0luSmxiV1Z0WW1WeVZYQm5jbUZrWlNJc0luSmxhbVZqZEZWdVlYVjBhRzl5YVhwbFpDSXNJbkJsY2sxbGMzTmhaMlZFWldac1lYUmxJaXdpZEdoeVpYTm9iMnhrSWl3aWRISmhibk53YjNKMFQzQjBhVzl1Y3lJc0ltTnNiM05sVDI1Q1pXWnZjbVYxYm14dllXUWlMQ0oxY0dkeVlXUmxjeUlzSW5CcGJtZEpiblJsY25aaGJDSXNJbkJwYm1kVWFXMWxiM1YwSWl3aWNHbHVaMVJwYldWdmRYUlVhVzFsY2lJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnZabVpzYVc1bFJYWmxiblJNYVhOMFpXNWxjaUlzSW05dVEyeHZjMlVpTENKamNtVmhkR1ZVY21GdWMzQnZjblFpTENKRlNVOGlMQ0p3Y21sdmNsZGxZbk52WTJ0bGRGTjFZMk5sYzNNaUxDSnpaWFJVY21GdWMzQnZjblFpTENKdmJrUnlZV2x1SWl3aWIyNVFZV05yWlhRaUxDSnZia1Z5Y205eUlpd2ljSEp2WW1VaUxDSm1ZV2xzWldRaUxDSnZibFJ5WVc1emNHOXlkRTl3Wlc0aUxDSnRjMmNpTENKMWNHZHlZV1JwYm1jaUxDSndZWFZ6WlNJc0ltWnNkWE5vSWl3aVpuSmxaWHBsVkhKaGJuTndiM0owSWl3aWIyNVVjbUZ1YzNCdmNuUkRiRzl6WlNJc0ltOXVkWEJuY21Ga1pTSXNJblJ2SWl3aWIyNVBjR1Z1SWl3aWIyNUlZVzVrYzJoaGEyVWlMQ0p5WlhObGRGQnBibWRVYVcxbGIzVjBJaXdpYzJWdVpGQmhZMnRsZENJc0ltWnBiSFJsY2xWd1ozSmhaR1Z6SWl3aWJXRjRVR0Y1Ykc5aFpDSXNJbkJoWTJ0bGRITWlMQ0puWlhSWGNtbDBZV0pzWlZCaFkydGxkSE1pTENKd1lYbHNiMkZrVTJsNlpTSXNJbUo1ZEdWTVpXNW5kR2dpTENKamJHVmhiblZ3UVc1a1EyeHZjMlVpTENKM1lXbDBSbTl5VlhCbmNtRmtaU0lzSW5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSm1hV3gwWlhKbFpGVndaM0poWkdWeklpd2lWSEpoYm5Od2IzSjBSWEp5YjNJaUxDSmpiMjUwWlhoMElpd2laRzlQY0dWdUlpd2laRzlEYkc5elpTSXNJbTl1UkdGMFlTSXNJbVJsWTI5a1pWQmhZMnRsZENJc0ltSnBibUZ5ZVZSNWNHVWlMQ0prWlhSaGFXeHpJaXdpY0c5c2JHbHVaMTlxYzE4eElpd2lkMlZpYzI5amEyVjBYMnB6WHpFaUxDSjNaV0p6YjJOclpYUWlMQ0pYVXlJc0luQnZiR3hwYm1jaUxDSlFiMnhzYVc1bklpd2lVbVZ4ZFdWemRDSXNJbmxsWVhOMFgycHpYekVpTENKNGJXeG9kSFJ3Y21WeGRXVnpkRjlxYzE4eElpd2laMnh2WW1Gc1ZHaHBjMTlxYzE4eElpd2laVzF3ZEhraUxDSm9ZWE5ZU0ZJeUlpd2lXRWhTSWl3aWVHUnZiV0ZwYmlJc0ltbHpVMU5NSWl3aWVHUWlMQ0o0Y3lJc0ltWnZjbU5sUW1GelpUWTBJaXdpYzNWd2NHOXlkSE5DYVc1aGNua2lMQ0p3YjJ4c0lpd2liMjVRWVhWelpTSXNJblJ2ZEdGc0lpd2laRzlRYjJ4c0lpd2laR1ZqYjJSbFVHRjViRzloWkNJc0ltVnVZMjlrWlZCaGVXeHZZV1FpTENKa2IxZHlhWFJsSWl3aWMyTm9aVzFoSWl3aWRHbHRaWE4wWVcxd1VtVnhkV1Z6ZEhNaUxDSmlOalFpTENKbGJtTnZaR1ZrVVhWbGNua2lMQ0p5WlhGMVpYTjBJaXdpY21WeElpd2llR2h5VTNSaGRIVnpJaXdpY0c5c2JGaG9jaUlzSW1GemVXNWpJaXdpY0dsamF5SXNJbmh6WTJobGJXVWlMQ0o0YUhJaUxDSmxlSFJ5WVVobFlXUmxjbk1pTENKelpYUkVhWE5oWW14bFNHVmhaR1Z5UTJobFkyc2lMQ0p6WlhSU1pYRjFaWE4wU0dWaFpHVnlJaXdpY21WeGRXVnpkRlJwYldWdmRYUWlMQ0p2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVpTENKdmJreHZZV1FpTENKeVpYRjFaWE4wYzBOdmRXNTBJaXdpY21WeGRXVnpkSE1pTENKbWNtOXRSWEp5YjNJaUxDSmhZbTl5ZENJc0luSmxjM0J2Ym5ObFZHVjRkQ0lzSW1GMGRHRmphRVYyWlc1MElpd2lkVzVzYjJGa1NHRnVaR3hsY2lJc0luUmxjbTFwYm1GMGFXOXVSWFpsYm5RaUxDSmtaV1poZFd4MFFtbHVZWEo1Vkhsd1pTSXNJblZ6YVc1blFuSnZkM05sY2xkbFlsTnZZMnRsZENJc0lsZGxZbE52WTJ0bGRDSXNJbEJ5YjIxcGMyVWlMQ0p5WlhOdmJIWmxJaXdpWTJJaUxDSjBhR1Z1SWl3aVRXOTZWMlZpVTI5amEyVjBJaXdpZDJWaWMyOWphMlYwWDJOdmJuTjBjblZqZEc5eVgycHpYekVpTENKcGMxSmxZV04wVG1GMGFYWmxJaXdpY0hKdlpIVmpkQ0lzSW1Ob1pXTnJJaXdpY0hKdmRHOWpiMnh6SWl3aWFHVmhaR1Z5Y3lJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhKeklpd2lYM052WTJ0bGRDSXNJbU5zYjNObFJYWmxiblFpTENKc1lYTjBVR0ZqYTJWMElpd2laVzVqYjJSbFVHRmphMlYwSWl3aVFuVm1abVZ5SWl3aWFHRnpYMk52Y25OZmFuTmZNU0lzSW1GMGRISWlMQ0poWTJNaUxDSk9RVlJKVmtWZlUwVlVYMVJKVFVWUFZWUWlMQ0pPUVZSSlZrVmZRMHhGUVZKZlZFbE5SVTlWVkNJc0luVnpaVTVoZEdsMlpWUnBiV1Z5Y3lJc0luVjBaamhNWlc1bmRHZ2lMQ0pqWldsc0lpd2ljMmw2WlNJc0lrVlNVazlTWDFCQlEwdEZWQ0lzSWxCQlEwdEZWRjlVV1ZCRlUxOVNSVlpGVWxORklpd2lVRUZEUzBWVVgxUlpVRVZUSWl3aVkyaGhjbk1pTENKVmFXNTBPRUZ5Y21GNUlpd2lZWEp5WVhsaWRXWm1aWElpTENKaWVYUmxjeUlzSW1KaGMyVTJOQ0lzSW1WdVkyOWtaV1F4SWl3aVpXNWpiMlJsWkRJaUxDSmxibU52WkdWa015SXNJbVZ1WTI5a1pXUTBJaXdpWW5WbVptVnlUR1Z1WjNSb0lpd2ljQ0lzSWtGeWNtRjVRblZtWm1WeUlpd2lZMjl0Ylc5dWMxOXFjMTh4SWl3aVltRnpaVFkwWDJGeWNtRjVZblZtWm1WeVgycHpYekVpTENKM2FYUm9UbUYwYVhabFFYSnlZWGxDZFdabVpYSWlMQ0prWldOdlpHVkNZWE5sTmpSUVlXTnJaWFFpTENKdFlYQkNhVzVoY25raUxDSkNiRzlpSWl3aVpXNWpiMlJsWkZCaFkydGxkQ0lzSW5kcGRHaE9ZWFJwZG1WQ2JHOWlJaXdpWlc1amIyUmxRbXh2WWtGelFtRnpaVFkwSWl3aVptbHNaVkpsWVdSbGNpSXNJa1pwYkdWU1pXRmtaWElpTENKdmJteHZZV1FpTENKamIyNTBaVzUwSWl3aWNtVmhaRUZ6UkdGMFlWVlNUQ0lzSW1selZtbGxkeUlzSW1KMVptWmxjaUlzSW1WdVkyOWtaVkJoWTJ0bGRGOXFjMTh4SWl3aVpHVmpiMlJsVUdGamEyVjBYMnB6WHpFaUxDSlRSVkJCVWtGVVQxSWlMQ0ptY205dFEyaGhja052WkdVaUxDSmpiM1Z1ZENJc0ltVnVZMjlrWldSUVlYbHNiMkZrSWl3aVpHVmpiMlJsWkZCaFkydGxkQ0lzSW5KbFkyOXVjM1J5ZFdOMFVHRmphMlYwSWl3aVpHVmpiMjV6ZEhKMVkzUlFZV05yWlhRaUxDSnBjMTlpYVc1aGNubGZhbk5mTVNJc0lsOWtaV052Ym5OMGNuVmpkRkJoWTJ0bGRDSXNJbUoxWm1abGNuTWlMQ0pwYzBKcGJtRnllU0lzSW5Cc1lXTmxhRzlzWkdWeUlpd2lYM0JzWVdObGFHOXNaR1Z5SWl3aWFYTkJjbkpoZVNJc0ltNWxkMFJoZEdFaUxDSmZjbVZqYjI1emRISjFZM1JRWVdOclpYUWlMQ0p3WVdOclpYUkVZWFJoSWl3aWNHRmpheUlzSW1GMGRHRmphRzFsYm5Seklpd2lZbWx1WVhKNVgycHpYekVpTENKeVpYQnNZV05sY2lJc0ltaGhjMEpwYm1GeWVTSXNJbVZ1WTI5a1pVRnpVM1J5YVc1bklpd2laVzVqYjJSbFFYTkNhVzVoY25raUxDSmtaV052Ym5OMGNuVmpkR2x2YmlJc0luSmxkbWwyWlhJaUxDSmtaV052WkdWVGRISnBibWNpTENKeVpXTnZibk4wY25WamRHOXlJaXdpUW1sdVlYSjVVbVZqYjI1emRISjFZM1J2Y2lJc0luUmhhMlZDYVc1aGNubEVZWFJoSWl3aWMzUmhjblFpTENKaWRXWWlMQ0p3WVhsc2IyRmtJaXdpZEhKNVVHRnljMlVpTENKcGMxQmhlV3h2WVdSV1lXeHBaQ0lzSW1acGJtbHphR1ZrVW1WamIyNXpkSEoxWTNScGIyNGlMQ0p5WldOdmJsQmhZMnNpTENKaWFXNUVZWFJoSWl3aWQybDBhRTVoZEdsMlpVWnBiR1VpTENKR2FXeGxJaXdpYldsNGFXNGlMQ0psZG1WdWRDSXNJbU5oYkd4aVlXTnJjeUlzSW1oaGMweHBjM1JsYm1WeWN5SXNJbDlmZDJWaWNHRmphMTl0YjJSMWJHVmZZMkZqYUdWZlh5SXNJbDlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThpTENKdGIyUjFiR1ZKWkNJc0ltTmhZMmhsWkUxdlpIVnNaU0lzSWw5ZmQyVmljR0ZqYTE5dGIyUjFiR1Z6WDE4aUxDSmtaV1pwYm1sMGFXOXVJaXdpY0hKdmNDSXNJblJ2VTNSeWFXNW5WR0ZuSWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVwiLCBcIldvcmtlclwiLCB1bmRlZmluZWQsIF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ3cy5hcGkud29ya2VyLmpzXCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIG5ldy1jYXAgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRlbnQsIHdvcmtlckNvbnN0cnVjdG9yLCB3b3JrZXJPcHRpb25zLCB1cmwpIHtcbiAgdmFyIGdsb2JhbFNjb3BlID0gc2VsZiB8fCB3aW5kb3c7XG5cbiAgdHJ5IHtcbiAgICB0cnkge1xuICAgICAgdmFyIGJsb2I7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIE5ldyBBUElcbiAgICAgICAgYmxvYiA9IG5ldyBnbG9iYWxTY29wZS5CbG9iKFtjb250ZW50XSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEJsb2JCdWlsZGVyID0gRGVwcmVjYXRlZCwgYnV0IHdpZGVseSBpbXBsZW1lbnRlZFxuICAgICAgICB2YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWxTY29wZS5CbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5XZWJLaXRCbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5Nb3pCbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5NU0Jsb2JCdWlsZGVyO1xuICAgICAgICBibG9iID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICBibG9iID0gYmxvYi5nZXRCbG9iKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBVUkwgPSBnbG9iYWxTY29wZS5VUkwgfHwgZ2xvYmFsU2NvcGUud2Via2l0VVJMO1xuICAgICAgdmFyIG9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICB2YXIgd29ya2VyID0gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXShvYmplY3RVUkwsIHdvcmtlck9wdGlvbnMpO1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVUkwpO1xuICAgICAgcmV0dXJuIHdvcmtlcjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXShcImRhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCxcIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKSwgd29ya2VyT3B0aW9ucyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRocm93IEVycm9yKFwiSW5saW5lIHdvcmtlciBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKHVybCwgd29ya2VyT3B0aW9ucyk7XG4gIH1cbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdvcycpXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTcxOSk7XG4iXSwibmFtZXMiOlsiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsImNvZGUiLCIkJG9ic2VydmFibGUiLCJTeW1ib2wiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwic3BsaXQiLCJqb2luIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJFcnJvciIsInVuZGVmaW5lZCIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInNsaWNlIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwidHlwZSIsImxpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCJ1bnN1YnNjcmliZSIsInRoaXMiLCJsZWdhY3lfY3JlYXRlU3RvcmUiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiZSIsInN0YXRlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiQXJyYXkiLCJhcmciLCJyZWR1Y2UiLCJhIiwiYiIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtYXAiLCJtaWRkbGV3YXJlIiwibGl2ZUNudENsYXNzTmFtZSIsInRhbGtuQVBJIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYmFubmVyQ2xhc3MiLCJiYW5uZXIiLCJxdWVyeVNlbGVjdG9yIiwiaHJlZiIsImdldEF0dHJpYnV0ZSIsInRhZyIsInN0eWxlIiwiZGlzcGxheSIsIndpZHRoIiwiaGVpZ2h0IiwiY2giLCJfY2giLCJfY2gxIiwicmVwbGFjZSIsIl9jaDIiLCJlbmRzV2l0aCIsInN0YXJ0c1dpdGgiLCJnZXRDaCIsImNyZWF0ZUVsZW1lbnQiLCJkb21haW4iLCJzZXRTdHlsZXMiLCJnZXRBIiwibGl2ZSIsInNwYW4iLCJpbm5lclRleHQiLCJjbGFzc05hbWUiLCJzaXplIiwicG9zaXRpb24iLCJyaWdodCIsImJvcmRlciIsImJhY2tncm91bmQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiY29sb3IiLCJnZXRMaXZlIiwiaW1nIiwic3JjIiwiYXNzZXRzSW1nUGF0aCIsImdldEltZyIsImFwcGVuZCIsImlkIiwidHVuZSIsImlvVHlwZSIsIm1ldGhvZCIsIkFQSV9SRVNQT05TRV9UWVBFX0JST0FEQ0FTVCIsImlubmVySFRNTCIsInRocmVhZCIsImxpdmVDbnQiLCJhcGlDYWxsYmFjayIsImF0dGFjaEV2ZW50IiwiV2luZG93IiwiY29uc3RydWN0b3IiLCJBUFBfVFlQRVMiLCJBUEkiLCJwYXJlbnRIcmVmIiwibG9jYXRpb24iLCJzZXR1cE1hdGgiLCJib290T3B0aW9uIiwiYXBpIiwiYmluZCIsImluamVjdFN0YXRlVG9BcHAiLCJwb3N0TWVzc2FnZSIsIm9uTWVzc2FnZSIsImV4ZVB1YmxpY0NhbGxiYWNrIiwib25FcnJvciIsImJvb3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvbm5lZCIsIndzQXBpIiwib25lcnJvciIsIm9ubWVzc2FnZSIsInBhcmFtcyIsImNhbGxiYWNrIiwiU0VUX0NBTExCQUNLX01FVEhPRCIsImFwaVN0YXRlIiwibWVzc2FnZSIsIkNMSUVOVF9UT19XU0FQSV9UWVBFIiwiQVBJX1NFVFVQIiwiY3VycmVudFRhcmdldCIsImRhdGEiLCJtZXRob2RCYWNrIiwiV29ya2VyIiwiV1NBUElfVE9fQ0xJRU5UX1RZUEUiLCJhY3Rpb25UeXBlIiwiY29udmVydEFwaVRvQ2xpZW50QWN0aW9uVHlwZSIsImV4ZU1ldGhvZCIsImdldE1lc3NhZ2VUeXBlcyIsIkNMSUVOVCIsImJhY2tQYXJhbXMiLCJQT1JUQUwiLCJFWFRFTlNJT04iLCJjb25zb2xlIiwid2FybiIsIkFQSV9SRVNQT05TRV9UWVBFX0VNSVQiLCJzZXRTdG9yYWdlSHRtbFBvc3RzIiwicHJvcHMiLCJhcHAiLCJzdG9yYWdlS2V5IiwiaXNSb290Q2giLCJwb3N0c011bHRpIiwicG9zdHNTaW5nbGUiLCJzZXRTdG9yYWdlUG9zdHNUaW1lbGluZSIsInBvc3RzVGltZWxpbmUiLCJwb3N0c1RpbWVsaW5lQWxsIiwiaXNNZWRpYUNoIiwicG9zdHNUaW1lbGluZUFsbExlbmd0aCIsInBvc3RzVGltZWxpbmVaZXJvU2Vjb25kIiwiY3VycmVudFRpbWUiLCJyb290Q2giLCJkaXNwVGhyZWFkVHlwZSIsImRpc3BUaHJlYWRUeXBlTXVsdGkiLCJwb3N0U2luZ2xlIiwicG9zdE11bHRpIiwic2V0U3RvcmFnZVBvc3RzIiwidXBkYXRlQWN0aW9uIiwiYWN0aW9uZWQiLCJmdW5jdGlvbnMiLCJvZmZzZXRGaW5kSWQiLCJ0dW5lZENoIiwiZGV0YWlsQ2giLCJpc1R1bmUiLCJnZXRJc01lZGlhQ2giLCJkaXNwVGhyZWFkVHlwZVRpbWVsaW5lIiwiaXNUb2dnbGVNdWx0aXN0cmVhbSIsInRpdGxlIiwic2VydmVyTWV0YXMiLCJoYXNTbGFzaCIsImdldEJvb2wiLCJ0aHJlYWRzIiwiZ2V0TWVyZ2VkVGhyZWFkcyIsInRocmVhZERldGFpbCIsInJvb3RUaXRsZSIsImdldE1lZGlhU3JjIiwicHJvdG9jb2wiLCJjaFR5cGUiLCJnZXRNZWRpYVR5cGVGcm9tU3JjIiwibWVkaWFUYWdUeXBlTm8iLCJnZXRPZmZzZXRGaW5kSWQiLCJwb3N0cyIsImdldEFueUFjdGlvblBvc3RzIiwiZGVmYXVsdE9mZnNldEZpbmRJZCIsIm9mZnNldFRpbWVsaW5lRmluZElkIiwib2Zmc2V0TXVsdGlGaW5kSWQiLCJvZmZzZXRTaW5nbGVGaW5kSWQiLCJvZmZzZXRDaGlsZEZpbmRJZCIsIm9mZnNldExvZ3NGaW5kSWQiLCJwb3N0c0NoaWxkIiwiaW5wdXRTdGFtcElkIiwiZW1vdGlvbnMiLCJhY3Rpb25FbW90aW9ucyIsImVtb3Rpb25Nb2RlbEtleSIsImVtb3Rpb25LZXkiLCJpc0xpbmtDaCIsImZpbmRUeXBlIiwiZ2V0RmluZFR5cGVGcm9tU3JjIiwiZGVzYyIsInVpIiwibWVudUNvbXBvbmVudCIsInVwZGF0ZUZsZyIsImNsaWVudE1ldGFzIiwiX3dpbiIsInZlciIsIm9uIiwidXNlSW8iLCJ1bnR1bmUiLCJyYW5rIiwiZmV0Y2hQb3N0cyIsInBvc3QiLCJhbmFseXplIiwibWVyZ2UiLCJyZWR1Y2VyRmlsZXMiLCJ1c2VyIiwidHVuZUNoIiwicmFua3MiLCJzZXR0aW5nIiwicG9zdHNUaW1lbGluZVN0b2NrIiwicG9zdHNUaW1lbGluZVplcm8iLCJwb3N0c1RpbWVsaW5lWmVyb0FmdGVyIiwiYXBpTG9nIiwibW9yZVBvc3RNdWxpdCIsImZpbmRPbmVMaW1pdENudCIsInB0IiwiZGlzcEZsZyIsIm1lZGlhQ3VycmVudFRpbWUiLCJ1aWQiLCJwb3N0TGVuZ3RoIiwic29ydFdhdGNoQ250IiwiZ2V0RGlzcFBvc3RzIiwiZmF2aWNvbiIsInN0YW1wSWQiLCJzb3J0IiwibmV3UmFua3MiLCJyYW5rQ250IiwibGFzdFBvc3QiLCJuZXdSYW5rIiwidXBkYXRlVGltZSIsImZhaWNvbiIsImNocyIsIkFuYWx5emUiLCJzdXBlciIsImNyZWF0ZSIsIkFwcCIsImNhbGwiLCJkZWZhdWx0RmluZElkIiwiaXNTZXQiLCJnZXRNZWRpYVR5cGUiLCJnZXREaXNwVGhyZWFkVHlwZSIsIm11bHRpc3RyZWFtIiwiZmluZFR5cGVBbGwiLCJpbnB1dFBvc3QiLCJpbnB1dEN1cnJlbnRUaW1lIiwiaW5wdXRTZWFyY2giLCJpc1JhbmtEZXRhaWxNb2RlIiwiZGVidWciLCJtZWRpYVR5cGVNcDMiLCJtZWRpYVR5cGVNcDQiLCJtZWRpYVR5cGVNNGEiLCJtZWRpYVRhZ1R5cGVBdWRpbyIsIm1lZGlhVGFnVHlwZVZpZGVvIiwibWVkaWFDaFRhZ1R5cGVLZXlzIiwibWVkaWFDaFRhZ1R5cGVzIiwibWVkaWFDaFRhZ1R5cGVMZW5ndGgiLCJtZWRpYVR5cGUiLCJyZWdFeHAiLCJSZWdFeHAiLCJtYXRjaCIsInRlc3QiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiTnVtYmVyIiwiaW5uZXJIZWlnaHQiLCJjb250ZW50VHlwZSIsImlzQXVkaW9Db250ZW50VHlwZSIsImlzVmlkZW9Db250ZW50VHlwZSIsIm1lZGlhQ2hzIiwic29tZSIsImV4dCIsInJlZ2V4cCIsIl9pZCIsInRocmVhZFN0YXR1cyIsInRvQ2giLCJjbGlja2VkIiwiYWZ0ZXJEaXNwVGhyZWFkVHlwZSIsImJlZm9yZURpc3BUaHJlYWRUeXBlIiwiZ2V0U3RlcERpc3BUaHJlYWRUeXBlIiwic3RlcFRvIiwidXBkYXRlZEFwcCIsIm1pIiwiZGlzcFRocmVhZFR5cGVDaGlsZCIsImRpc3BUaHJlYWRUeXBlU2luZ2xlIiwiQm9vdE9wdGlvbiIsImF0dHJpYnV0ZXMiLCJyZWJ1aWxkQXR0cmlidXRlc09iaiIsIm5hbWUiLCJNZW51TG9ncyIsIlBvc3QiLCJkZWZhdWx0VmFsdWVzIiwibGF5ZXIiLCJ1dHlwZSIsImNyZWF0ZVRpbWUiLCJ2YWx1ZXMiLCJkZWZhdWx0RmF2aWNvbiIsIkRhdGUiLCJQb3N0cyIsInBvc3RzTG9ncyIsImRpc3BUaHJlYWRUeXBlTG9ncyIsImV4aXN0UG9zdHMiLCJnZXRBbnlBY3Rpb25Qb3N0c1RpbWVsaW5lIiwicG9zdHNMZW5ndGgiLCJTZXR0aW5nIiwiY2xpZW50IiwiY29tbW9uIiwic2VydmVyIiwiVGhyZWFkIiwiVEFMS05fUFJPVE9DT0wiLCJjaGFyc2V0IiwiaG9zdCIsImdldERlZmF1bHRGYXZpY29uIiwiZ2V0RGVmYXVsdFRpdGxlIiwibWV0YXMiLCJsaW5rcyIsImgxcyIsImF1ZGlvcyIsInZpZGVvcyIsImdldExheWVyIiwibWVkaWFJbmRleCIsInBvc3RDbnQiLCJtdWx0aVBvc3RDbnQiLCJpc1NlbGZDaCIsImlzV2luZG93T2JqIiwiY29uc3RydWN0b3JGcm9tV2luZG93IiwiZmluZFR5cGVIdG1sIiwiZmluZFR5cGVNdXNpYyIsImZpbmRUeXBlVmlkZW8iLCJhc3NldHNVUkwiLCJhbGVydCIsImJvb3RDaCIsImhhc3NsYXNoIiwiZ2V0UHJvdG9jb2wiLCJnZXRIb3N0IiwiZ2V0Q2hzIiwiZ2V0RmF2aWNvbkZyb21XaW5kb3ciLCJnZXRJc1NlbGZDaCIsImNoQXJyIiwiY2hMZW5ndGgiLCJuZXdDaCIsInUiLCJldmFsdWF0ZSIsInN0cmluZ1ZhbHVlIiwiaCIsImhzIiwibCIsInVybCIsImlzRXhpc3QiLCJzdGF0dXMiLCJkaXNwVHlwZSIsImlzQ3JlYXRlIiwiaXNSZXF1aXJlVXBzZXJ0IiwiaXNNdWx0aXN0cmVhbSIsImdldE1vcmUiLCJnZXRTdGF0dXNDcmVhdGUiLCJnZXRTdGF0dXNJc1JlcXVpcmVVcHNlcnQiLCJnZXRTdGF0dXNJc011bHRpc3RyZWFtIiwiZ2V0U3RhdHVzSXNUb2dnbGVNdWx0aXN0cmVhbSIsImdldFN0YXR1c0lzTWVkaWFDaCIsInRocmVhZFVwZGF0ZVRpbWUiLCJnZXRUaW1lIiwibm93Iiwibm93WWVhciIsImdldEZ1bGxZZWFyIiwibm93TW9udGgiLCJnZXRNb250aCIsIm5vd0RheSIsImdldERhdGUiLCJub3dIb3VyIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZmluZE9uZVRocmVhZEFjdGl2ZUhvdXIiLCJmaW5kVHlwZXMiLCJzcGxpdGVkQ29udGVudFR5cGUiLCJpbmNsdWRlcyIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiVGhyZWFkcyIsImJhc2VUaHJlYWRzIiwibWVyZ2VUaHJlYWQiLCJUdW5lQ2giLCJVc2VyIiwibXVsdGlzdHJlYW1lZCIsInJlcXVlc3RMb2dpblR5cGUiLCJmcmllbmRzIiwiaW5pdGlhbFN0YXRlIiwiQXBpU3RhdGUiLCJjYWNoZXMiLCJtZW51TG9ncyIsImdldEFwcFBhcmFtcyIsImdldFVzZXJQYXJhbXMiLCJhY3Rpb25Mb2ciLCJpc1RyYW5zaXRpb24iLCJzZWxmIiwic2NyaXB0IiwiY3VycmVudFNjcmlwdCIsImlzUHVyZUFwaSIsIkJvb2xlYW4iLCJTVUJfRE9NQUlOUyIsIkJBTk5FUiIsImFwaVdpbmRvdyIsInRoZW4iLCJfd2luZG93IiwiUHVibGljQXBpIiwiZW52IiwiUFJPRFVDVElPTiIsIkhUVFBTX1BST1RPQ09MIiwiZXh0ZW5zaW9uTW9kZSIsImV4dGVuc2lvbk1vZGVOb25lIiwiZGVmYXVsdFByb3BzIiwibW9kZSIsImluaXRpYWxSb290Q2giLCJnZXRJbml0aWFsUm9vdENoIiwiZmlyc3RIYXNTbGFzaCIsImdldEZpcnN0SGFzU2xhY2giLCJnZXRMYXN0SGFzU2xhY2giLCJnZXRBY3RpdmVDaCIsIkhUVFBfUFJPVE9DT0wiLCJjb3ZlclVSTCIsIlBST0RVQ1RJT05fRE9NQUlOIiwiTE9DQUxIT1NUIiwiREVWRUxPUE1FTlRfRE9NQUlOIiwiREVWRUxPUE1FTlQiLCJQT1JUUyIsIkRFVkVMT1BNRU5UX0NMSUVOVCIsIkRFVkVMT1BNRU5UX0FQSSIsIkRFVkVMT1BNRU5UX0NPVkVSIiwiREVWRUxPUE1FTlRfVFVORSIsIkRFVkVMT1BNRU5UX0NPTVBPTkVOVFMiLCJleHRTY3JpcHQiLCJjbGllbnRTY3JpcHQiLCJsYXN0SGFzU2xhc2giLCJBUElfVE9fU0VSVkVSX1JFUVVFU1QiLCJBUElfVE9fQ0xJRU5UX1JFUVVFU1QiLCJTRVJWRVJfVE9fQVBJX0VNSVQiLCJBUElfVE9fQ0xJRU5UX0VNSVQiLCJTRVJWRVJfVE9fQVBJX0JST0FEQ0FTVCIsIkFQSV9UT19DTElFTlRfQlJPQURDQVNUIiwic3BsaXRlZDEiLCJIYW5kbGVNZXNzYWdlTWV0aG9kIiwiSGFuZGxlUmVxdWVzdE1ldGhvZCIsIlNjaGVtYSIsIm9wdGlvbiIsInZhbCIsImdldFR5cGUiLCJmbiIsImZuU3RyaW5nIiwiZGVmIiwiaXNBY2NlcHROdWxsIiwiaXNBY2NlcHRCbGFuayIsInZhbGlkIiwiaXNFbXB0eU9iamVjdCIsInZhbGlkRnVuYyIsIl92YWx1ZSIsImVycm9yIiwicG9pbnRlciIsInZhbGlkVmFsdWUiLCJ2YWxpZFR5cGUiLCJwYXJhbXNWYWx1ZSIsInBhcmFtc1R5cGUiLCJnZXQiLCJzZXQiLCJ2YWxpZFJlc3VsdCIsInZhbGlkV2FybiIsImVycm9yVGhyb3ciLCJjYW5TZXQiLCJjdXJyZW50VmFsdWUiLCJpbW11dGFibGUiLCJvYmpLZXlzIiwibWVyZ2VkT2JqIiwidG9KU09OIiwianNvbk9iaiIsImRlZmF1bHQiLCJmdW5jIiwiY29uY2F0IiwicmV0dXJuSW1tdXRhYmxlIiwiZmluZCIsInVuc2hpZnQiLCJnZXRTaGlmdCIsInJlc3VsdHMiLCJzaGlmdCIsInBvcCIsIlN0cmluZyIsIlNlcXVlbmNlIiwiQVBJX1JFUVVFU1RfVFlQRSIsIk1FVEhPRF9DT0xPTiIsInJlcXVlc3RQdWJsaWNTdGF0ZSIsInJlcXVlc3RQcml2YXRlU3RhdGUiLCJyZXNwb25zZUVtaXRTdGF0ZSIsInJlc3BvbnNlQnJvYWRjYXN0U3RhdGUiLCJ1cGRhdGVUaHJlYWQiLCJjaGFuZ2VUaHJlYWQiLCJjaGFuZ2VUaHJlYWREZXRhaWwiLCJhZGRGaW5kQ2hpbGQiLCJ1cGRhdGVUaHJlYWRTZXJ2ZXJNZXRhcyIsImRpc2Nvbm5lY3QiLCJzcGxpdGVkIiwic2VxdWVuY2UiLCJhY3Rpb25OYW1lIiwiYWN0aXZlUmVzcG9uc2VNYXAiLCJlbWl0IiwiYnJvYWRjYXN0IiwiaUZyYW1lSWQiLCJBUElfU0VQQVJBVEVfSU9fVFlQRV9TVEFSVCIsIkFQSV9TRVBBUkFURV9JT19UWVBFX0VORCIsInJlZHV4U3RhdGUiLCJyZXF1ZXN0UGFyYW1zIiwiZW5kcG9pbnRLZXkiLCJyZXF1ZXN0U3RhdGUiLCJSRURVWF9BQ1RJT05fS0VZIiwic3RhdGVLZXkiLCJjb2x1bW5OYW1lIiwicmVzcG9uc2VUeXBlIiwidXBkYXRlU3RhdGUiLCJyZXNwb25zZVNjaGVtYSIsInJlc3BvbnNlU3RhdGUiLCJ1cGRhdGVTdGF0ZUtleSIsImNvbHVtbk5hbWVzIiwidXBkYXRlU3RhdGVWYWx1ZSIsIl9fdiIsInJlcXVlc3RQYXJhbXMxIiwicmVxdWVzdFBhcmFtczIiLCJUYWxrblNldHVwSnMiLCJlYXNlSW5PdXRRdWFkIiwidCIsImMiLCJkIiwiaG9zdE5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImhvc3RuYW1lIiwicG9ydCIsIkFXU19IT1NUX0tFWSIsImdldEVudiIsImZpbGVzIiwid3NXb3JrZXIiLCJjb3ZlciIsImNvbXBvbmVudHMiLCJpc0RldiIsInd3d1VSTCIsIldXVyIsIkNPVkVSIiwiYXBpVVJMIiwiYXBpQWNjZXNzVVJMIiwiY2xpZW50VVJMIiwiZGVzY1VSTCIsIkRFU0MiLCJwb3J0YWxVUkwiLCJBU1NFVFMiLCJhdXRvVVJMIiwiQVVUTyIsImV4dFVSTCIsIkVYVCIsImNvbXBVUkwiLCJDT01QIiwib3duVVJMIiwiT1dOIiwibmV3c1VSTCIsIk5FV1MiLCJ0dW5lVVJMIiwiVFVORSIsImNvbXBvbmVudHNVUkwiLCJDT01QT05FTlRTIiwiY29uZiIsImJhbm5lclVSTCIsInRyYW5zYWN0aW9uVVJMIiwiVFJBTlNBQ1RJT04iLCJhc3NldHNDb3ZlclBhdGgiLCJhc3NldHNJY29uUGF0aCIsImFzc2V0c0pzUGF0aCIsInNlc3Npb25VUkwiLCJTRVNTSU9OIiwiZGVzY3JpcHRpb24iLCJhcGlWZXIiLCJscExhbmd1YWdlcyIsImRlZmF1bHRCaXJ0aGRheVVuaXh0aW1lIiwiZmluZE9uZVBvc3RDbnQiLCJvZ3BJbWFnZXMiLCJIdG1sIiwiTXVzaWMiLCJWaWRlbyIsImRlZmluZSIsIkFQUF9OQU1FIiwiUFJPRFVDVElPTl9JUCIsIkhPU1ROQU1FIiwiSFRUUCIsIkhUVFBTIiwiUkVESVMiLCJNT05HTyIsIlNPQ0tFVF9JTyIsIlJBTksiLCJVUkwiLCJ0d2l0dGVyIiwiZmFjZWJvb2siLCJhcHBzdG9yZSIsInBsYXlzdG9yZSIsImNocm9tZUV4dGVuc2lvbiIsInRhbGtuQ2xpZW50SnMiLCJ0YWxrbkFwaUpzIiwidGFsa25SYW5rSnMiLCJub0lubmVyTm90aWYiLCJiYXNlS2V5IiwiV29ya2VyX2ZuIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnRlbnQiLCJ3b3JrZXJDb25zdHJ1Y3RvciIsIndvcmtlck9wdGlvbnMiLCJnbG9iYWxTY29wZSIsImJsb2IiLCJCbG9iIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsImdldEJsb2IiLCJ3ZWJraXRVUkwiLCJvYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ3b3JrZXIiLCJyZXZva2VPYmplY3RVUkwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInByb3RvdHlwZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwibyIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwiciIsInRvU3RyaW5nVGFnIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiXSwic291cmNlUm9vdCI6IiJ9