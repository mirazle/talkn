(()=>{var I={5857:(I,g,F)=>{"use strict";function B(I,g,F){return g in I?Object.defineProperty(I,g,{value:F,enumerable:!0,configurable:!0,writable:!0}):I[g]=F,I}function C(I,g){var F=Object.keys(I);if(Object.getOwnPropertySymbols){var B=Object.getOwnPropertySymbols(I);g&&(B=B.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),F.push.apply(F,B)}return F}function c(I){for(var g=1;g<arguments.length;g++){var F=null!=arguments[g]?arguments[g]:{};g%2?C(Object(F),!0).forEach((function(g){B(I,g,F[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(F)):C(Object(F)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(F,g))}))}return I}function U(I){return"Minified Redux error #"+I+"; visit https://redux.js.org/Errors?code="+I+" for the full message or use the non-minified dev environment for full errors. "}F.r(g),F.d(g,{__DO_NOT_USE__ActionTypes:()=>l,applyMiddleware:()=>G,bindActionCreators:()=>b,combineReducers:()=>d,compose:()=>A,createStore:()=>i,legacy_createStore:()=>V});var Q="function"==typeof Symbol&&Symbol.observable||"@@observable",t=function(){return Math.random().toString(36).substring(7).split("").join(".")},l={INIT:"@@redux/INIT"+t(),REPLACE:"@@redux/REPLACE"+t(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+t()}};function s(I){if("object"!=typeof I||null===I)return!1;for(var g=I;null!==Object.getPrototypeOf(g);)g=Object.getPrototypeOf(g);return Object.getPrototypeOf(I)===g}function i(I,g,F){var B;if("function"==typeof g&&"function"==typeof F||"function"==typeof F&&"function"==typeof arguments[3])throw new Error(U(0));if("function"==typeof g&&void 0===F&&(F=g,g=void 0),void 0!==F){if("function"!=typeof F)throw new Error(U(1));return F(i)(I,g)}if("function"!=typeof I)throw new Error(U(2));var C=I,c=g,t=[],V=t,d=!1;function e(){V===t&&(V=t.slice())}function b(){if(d)throw new Error(U(3));return c}function A(I){if("function"!=typeof I)throw new Error(U(4));if(d)throw new Error(U(5));var g=!0;return e(),V.push(I),function(){if(g){if(d)throw new Error(U(6));g=!1,e();var F=V.indexOf(I);V.splice(F,1),t=null}}}function G(I){if(!s(I))throw new Error(U(7));if(void 0===I.type)throw new Error(U(8));if(d)throw new Error(U(9));try{d=!0,c=C(c,I)}finally{d=!1}for(var g=t=V,F=0;F<g.length;F++)(0,g[F])();return I}function R(I){if("function"!=typeof I)throw new Error(U(10));C=I,G({type:l.REPLACE})}function u(){var I,g=A;return(I={subscribe:function(I){if("object"!=typeof I||null===I)throw new Error(U(11));function F(){I.next&&I.next(b())}return F(),{unsubscribe:g(F)}}})[Q]=function(){return this},I}return G({type:l.INIT}),(B={dispatch:G,subscribe:A,getState:b,replaceReducer:R})[Q]=u,B}var V=i;function d(I){for(var g=Object.keys(I),F={},B=0;B<g.length;B++){var C=g[B];"function"==typeof I[C]&&(F[C]=I[C])}var c,Q=Object.keys(F);try{!function(I){Object.keys(I).forEach((function(g){var F=I[g];if(void 0===F(void 0,{type:l.INIT}))throw new Error(U(12));if(void 0===F(void 0,{type:l.PROBE_UNKNOWN_ACTION()}))throw new Error(U(13))}))}(F)}catch(I){c=I}return function(I,g){if(void 0===I&&(I={}),c)throw c;for(var B=!1,C={},t=0;t<Q.length;t++){var l=Q[t],s=F[l],i=I[l],V=s(i,g);if(void 0===V)throw g&&g.type,new Error(U(14));C[l]=V,B=B||V!==i}return(B=B||Q.length!==Object.keys(I).length)?C:I}}function e(I,g){return function(){return g(I.apply(this,arguments))}}function b(I,g){if("function"==typeof I)return e(I,g);if("object"!=typeof I||null===I)throw new Error(U(16));var F={};for(var B in I){var C=I[B];"function"==typeof C&&(F[B]=e(C,g))}return F}function A(){for(var I=arguments.length,g=new Array(I),F=0;F<I;F++)g[F]=arguments[F];return 0===g.length?function(I){return I}:1===g.length?g[0]:g.reduce((function(I,g){return function(){return I(g.apply(void 0,arguments))}}))}function G(){for(var I=arguments.length,g=new Array(I),F=0;F<I;F++)g[F]=arguments[F];return function(I){return function(){var F=I.apply(void 0,arguments),B=function(){throw new Error(U(15))},C={getState:F.getState,dispatch:function(){return B.apply(void 0,arguments)}},Q=g.map((function(I){return I(C)}));return B=A.apply(void 0,Q)(F.dispatch),c(c({},F),{},{dispatch:B})}}}},8200:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7771)),c=B(F(300)),U=B(F(1665)),Q="talkn_banner_live_cnt";g.default=I=>{document.querySelectorAll(`.${U.default.bannerClass}`).forEach((g=>{if(!g.querySelector("a img")){const B=g.getAttribute("data-href");if(B){(F=g).style.display="flex",F.style["justify-content"]="flex-start",F.style["align-items"]="flex-start",F.style.width="64px",F.style.height="64px",g=F;const t=(I=>{if(!I||""===I)return"/";const g=I.replace("https:/","").replace("http:/",""),F=g.endsWith("/")?g:g+"/";return F.startsWith("/")?F:"/"+F})(B),l=(I=>{let g=document.createElement("a");return g.href=`//${c.default.domain}${I}`,g.style.display="inline-block",g=(I=>(I.style.display="inline-flex",I.style.width="inherit",I.style.height="inherit",I.style["justify-content"]="center",I.style["align-items"]="center",I))(g),g})(t),s=(()=>{let I=document.createElement("span");return I.innerText="0",I.className=Q,I=(I=>{const g="28px";return I.style.display="flex",I.style["justify-content"]="center",I.style["align-items"]="center",I.style.position="relative",I.style.right="17px",I.style.border="1px solid rgba(255,255,255,1)",I.style["border-radius"]=g,I.style.background="rgba(79, 174, 159, 0.6)",I.style.margin="0",I.style.padding="0",I.style.width=g,I.style.height=g,I.style["min-width"]=g,I.style["min-height"]=g,I.style["max-width"]=g,I.style["max-height"]=g,I.style["text-align"]="center",I.style["font-size"]="13px",I.style["font-weight"]="300",I.style["line-height"]="10px",I.style["letter-spacing"]="0",I.style.color="rgb(255, 255, 255)",I})(I),I})(),i=(()=>{let I=document.createElement("img");return I.src=`//${c.default.assetsImgPath}logo128.png`,I=(I=>(I.style.display="inline-block",I.style.width="58px",I.style.height="58px",I))(I),I})();l.append(i),g.append(l),g.append(s),((I,g,F)=>{const B=`${U.default.bannerClass}: ${g}`;I.tune({ch:g,id:B},((I,g,B)=>{((I,g,F,B,c)=>{F===C.default.API_RESPONSE_TYPE_BROADCAST&&document.querySelectorAll(`.${U.default.bannerClass}[data-href="${g}"]`).forEach((I=>{I.querySelector(`.${Q}`).innerHTML=c.thread.liveCnt}))})(0,F,I,0,B)}))})(I,t,B)}}var F}))}},2874:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7509)),c=B(F(6552)),U=B(F(1223)),Q=B(F(7771)),t=B(F(1665)),l=B(F(8527)),s=B(F(4546));class i{constructor(I){this.id=t.default.APP_TYPES.API,this.store=(0,s.default)(),this.parentHref=location.href,this.id=I,this.bootOption=new c.default(this.id);const g={...new l.default(this.bootOption)};this.store.dispatch({...g,type:"INIT_CLIENT"}),this.api=this.api.bind(this),this.injectStateToApp=this.injectStateToApp.bind(this),this.postMessage=this.postMessage.bind(this),this.onMessage=this.onMessage.bind(this),this.exePublicCallback=this.exePublicCallback.bind(this),this.onError=this.onError.bind(this)}static get SET_CALLBACK_METHOD(){return"tune"}boot(){return new Promise((I=>{this.conned=I,this.wsApi=new C.default,this.wsApi.onerror=this.onError,this.wsApi.onmessage=this.onMessage}))}api(I,g={},F){I===i.SET_CALLBACK_METHOD&&F&&(this.callback=F),this.postMessage(I,g)}injectStateToApp(I){this.api("fetchPosts",I),this.api("rank",I)}postMessage(I,g={}){const F={id:g.id?g.id:this.id,type:U.default.CLIENT_TO_WSAPI_TYPE,ioType:Q.default.API_SETUP,method:I,params:g};this.wsApi.postMessage(F)}onMessage(I){const{currentTarget:g,data:F}=I,{type:B,method:C,ioType:c,params:Q,methodBack:l}=F;if(g instanceof Worker&&B===U.default.WSAPI_TO_CLIENT_TYPE){const I=U.default.convertApiToClientActionType(C),{ioType:g,exeMethod:F}=U.default.getMessageTypes(I),B={...Q,type:I};if(this.exePublicCallback(g,F,B),"WS_CONSTRUCTED"===C&&(this.conned(this),this.id===t.default.APP_TYPES.CLIENT)){const I=Q.ch?{...this.bootOption,ch:Q.ch}:this.bootOption;this.api("tune",I)}this.id!==t.default.APP_TYPES.PORTAL&&this.id!==t.default.APP_TYPES.EXTENSION||"SERVER_TO_API[EMIT]:tune"===C&&this.injectStateToApp(Q)}}onError(I){console.warn(I)}exePublicCallback(I,g,F){this.callback&&(I!==Q.default.API_RESPONSE_TYPE_EMIT&&I!==Q.default.API_RESPONSE_TYPE_BROADCAST||this.callback(I,g,F))}}g.default=i},7536:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1665)),c=B(F(6926));function U(I,g){const{app:F}=I,{storageKey:B}=C.default;if(F.isRootCh){const{postsMulti:g,postsSingle:F}=I}return{state:I,props:g}}function Q(I){const{app:g,thread:F,postsTimeline:B}=I,{storageKey:c}=C.default;if(g.isMediaCh){const g=B&&B.length?B.length:0;let F=[],C=[];for(let I=0;I<g;I++)0===B[I].currentTime?F.push(B[I]):C.push(B[I]);I.postsTimeline=F}return I}g.default={"SERVER_TO_API[BROADCAST]:post":U,"SERVER_TO_API[EMIT]:getMore":U,"SERVER_TO_API[EMIT]:fetchPosts":(I,g)=>({state:I,props:g}),"SERVER_TO_API[EMIT]:changeThread":(I,g)=>{const{app:F}=I,{rootCh:B}=F,{storageKey:U}=C.default;return F.dispThreadType===c.default.dispThreadTypeMulti?U.postSingle:U.postMulti,{state:I,props:g}},ON_CLICK_MENU:(I,g)=>{const{rootCh:F}=I.app;return{state:I,props:g}},RESIZE_END_WINDOW:(I,g)=>({state:I,props:g}),setStoragePosts:function(I,g){const{app:F}=I;return F.isMediaCh?{state:I=Q(I),props:g}:U(I,g)},setStorageHtmlPosts:U,setStoragePostsTimeline:Q}},843:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(7536)),U=B(F(6926)),Q=B(F(9478)),t=B(F(8091)),l=B(F(978));g.default={updateAction:I=>g=>F=>{const B=I.getState();console.log("API",F),F&&(F.app=F.app?{...B.app,...F.app}:B.app,F.app.actioned=F.type),s[F.type]&&(F=s[F.type](B,F)),F&&g(F)}};const s={"SERVER_TO_API[EMIT]:tune":(I,g)=>{if(g.app[`offset${g.app.dispThreadType}FindId`]=g.app.offsetFindId,g.app.tuned=g.thread.ch,g.app.detailCh=g.thread.ch,g.app.isRootCh=g.app.rootCh===g.thread.ch,g.app.isMediaCh=U.default.getIsMediaCh(g.thread.ch),g.app.isToggleMultistream=!1,g.thread.title=g.thread.serverMetas.title,g.thread.hasSlash=C.default.getBool(g.thread.hasSlash),g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g.app.isRootCh&&(g.app.rootTitle=g.thread.title),g.app.isMediaCh){const I=U.default.getMediaSrc(g.thread.protocol,g.thread.ch);g.app.chType=U.default.getMediaTypeFromSrc(I)}else g.app.chType=U.default.mediaTagTypeNo;return g},"SERVER_TO_API[EMIT]:fetchPosts":(I,g)=>((g={...Q.default.getAnyActionPosts(g,I)}).app.offsetFindId=U.default.getOffsetFindId({posts:g.posts}),g.app[`offset${g.app.dispThreadType}FindId`]=g.app.offsetFindId,g.app.isMediaCh&&(g=c.default.setStoragePostsTimeline(g)),g),"API_TO_SERVER[REQUEST]:changeThread":(I,g)=>(g.app=g.app?{...I.app,...g.app}:I.app,g.app.offsetFindId=U.default.defaultOffsetFindId,g.app.offsetTimelineFindId=U.default.defaultOffsetFindId,g.app.offsetMultiFindId=U.default.defaultOffsetFindId,g.app.offsetSingleFindId=U.default.defaultOffsetFindId,g.app.offsetChildFindId=U.default.defaultOffsetFindId,g.app.offsetLogsFindId=U.default.defaultOffsetFindId,g.thread=g.thread?{...I.thread,...g.thread}:I.thread,g.posts=new Q.default,g.postsMulti=new Q.default,g.postsChild=new Q.default,g.postsTimeline=new Q.default,g.postsSingle=new Q.default,g),"SERVER_TO_API[EMIT]:changeThread":(I,g)=>(g.app.tuned=g.thread.ch,g.thread.title=g.thread.serverMetas.title,g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g),"SERVER_TO_API[EMIT]:updateThread":(I,g)=>(g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(I,g)=>(g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g),"SERVER_TO_API[REQUEST]:post":(I,g)=>(g.app.inputStampId=0,g),"SERVER_TO_API[BROADCAST]:post":(I,g)=>{if(I.thread.ch===g.thread.ch&&g.thread.emotions&&Object.keys(g.thread.emotions).length>0){const F={...g.thread.emotions};g.thread.emotions={...I.thread.emotions},Object.keys(F).forEach((I=>{Object.keys(F[I]).forEach((B=>{g.thread.emotions[I][B]=g.thread.emotions[I][B]+F[I][B]}))})),g.threadDetail={...g.thread}}return g.thread.ch=I.thread.ch,g=Q.default.getAnyActionPosts(g,I)},"SERVER_TO_API[EMIT]:getMore":(I,g)=>(g.app.offsetFindId=U.default.getOffsetFindId({posts:g.posts}),g.app[`offset${g.app.dispThreadType}FindId`]=g.app.offsetFindId,Q.default.getAnyActionPosts(g,I)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(I,g)=>(delete g.thread,g),"SERVER_TO_API[EMIT]:changeThreadDetail":(I,g)=>(g.app.detailCh=g.thread.ch,g.threads=l.default.getMergedThreads(I.threads,g.thread),g.threadDetail={...g.thread},g.threadDetail.title=g.thread.serverMetas.title,g.threadDetail.emotions={...I.threads[g.app.detailCh].emotions},g.threadDetail.hasSlash=null===g.threadDetail.hasSlash||C.default.getBool(g.threadDetail.hasSlash),delete g.thread,g.thread=g,g),CLOSE_LINKS:(I,g)=>(g.app=g.app?{...I.app,...g.app}:I.app,g.thread=g.thread?{...I.thread,...g.thread}:I.thread,g),ON_CLICK_TO_MULTI_THREAD:(I,g)=>(g.app.isLinkCh=!1,g.app.isRootCh=g.thread.ch===I.app.rootCh,I.threads[g.thread.ch]?g.thread=I.threads[g.thread.ch]:g.thread={...I.thread,...g.thread},g),ON_CLICK_TO_TIMELINE_THREAD:(I,g)=>{const F=g.thread.ch;g.thread={...I.thread,...g.thread},g.thread.ch=F;const B=U.default.getMediaSrc(g.thread.protocol,g.thread.ch);return g.thread.findType=t.default.getFindTypeFromSrc(B),g.postsTimeline=[],g.app.isMediaCh=!0,g.app.offsetFindId=U.default.defaultOffsetFindId,g.app.offsetChildFindId=U.default.defaultOffsetFindId,g},ON_CLICK_TO_SINGLE_THREAD:(I,g)=>(g.thread={...I.thread,...g.thread},g.app=I.app,g.app.isLinkCh=!1,g),ON_CLICK_TO_CHILD_THREAD:(I,g)=>(g.thread={...I.thread,...g.thread},g.postsChild=[],g.app.offsetFindId=U.default.defaultOffsetFindId,g.app.offsetChildFindId=U.default.defaultOffsetFindId,g),ON_CLICK_MENU:(I,g)=>(g.app.desc=g.ui.menuComponent,g),RESIZE_END_WINDOW:(I,g)=>(g.thread=I.thread,g),ON_CLICK_TOGGLE_DISP_DETAIL:(I,g)=>(g.threadDetail.hasSlash=null===g.threadDetail.hasSlash||C.default.getBool(g.threadDetail.hasSlash),g),TOGGLE_BUBBLE_POST:(I,g)=>(g.thread=I.thread,g),START_LINK_MEDIA:(I,g)=>(g.app.isLinkCh=!0,g),GET_CLIENT_METAS:(I,g)=>{let F=!1,{clientMetas:B}=g,{serverMetas:C}=I.thread;if(g.thread={},Object.keys(B).forEach(((I,c)=>{B[I]&&""!==B[I]&&C[I]!==B[I]&&(g.thread.serverMetas||(g.thread.serverMetas={}),F=!0,g.thread.serverMetas[I]=B[I])})),F)return g.threadDetail={...I.threadDetail},g.threadDetail.serverMetas={...g.threadDetail.serverMetas,...g.thread.serverMetas},g}}},1006:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.PublicApi=void 0,g.PublicApi=class{constructor(I){const{api:g,store:F}=I;return{ver:"2021/02/01",on:I=>g("onResponseChAPI",I),useIo:I=>g("use",I),tune:(I,F)=>g("tune",I,F),untune:I=>g("untune",{id:I}),rank:I=>g("rank",{thread:{ch:I}}),fetchPosts:I=>g("fetchPosts",{thread:{ch:I}}),post:(I={})=>g("post",{app:{...I}}),getState:()=>F.getState()}}}},9580:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=(I=[],g)=>[g.type,...I]},9300:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1534));g.default=(I=new C.default,g)=>g.analyze?I.merge(g.analyze):I},3966:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(6926));g.default=(I=new C.default,g)=>g.app?new C.default(g.app):I},7157:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(2169));g.default=(I=new C.default,g)=>g.bootOption?I.merge(g.bootOption):I},8262:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.reducerFiles=void 0;const C=F(5857),c=B(F(9580)),U=B(F(9300)),Q=B(F(3966)),t=B(F(7157)),l=B(F(4326)),s=B(F(1169)),i=B(F(8870)),V=B(F(1731)),d=B(F(7849)),e=B(F(6739)),b=B(F(784)),A=B(F(219)),G=B(F(155)),R=B(F(1895)),u=B(F(8372)),Z=B(F(1422)),x=B(F(7474)),X=B(F(3695)),L=B(F(44));g.reducerFiles={app:Q.default,user:L.default,tuneCh:X.default,ranks:G.default,thread:u.default,threads:x.default,threadDetail:Z.default,analyze:U.default,bootOption:t.default,setting:R.default,posts:l.default,postsTimeline:d.default,postsTimelineStock:e.default,postsTimelineZero:b.default,postsTimelineZeroAfter:A.default,postsMulti:i.default,postsSingle:V.default,postsChild:s.default,actioned:c.default},g.default=(0,C.combineReducers)(g.reducerFiles)},4326:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(9478));g.default=(I=[],g)=>g.posts?new C.default(g.posts):I},1169:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(9478));g.default=(I=[],g)=>{switch(g.type){case"API_TO_SERVER[REQUEST]:changeThread":return new C.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(g.postsChild&&g.postsChild.length>0&&g.thread.ch===g.postsChild[0].ch)return[...I,...g.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsChild&&g.postsChild.length>0)return[...g.postsChild,...I]}return I}},8870:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(300)),c=B(F(9478));g.default=(I=[],g)=>{switch(g.type){case"ON_CLICK_MULTISTREAM":return g.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new c.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(g.postsMulti&&g.postsMulti.length>0&&g.app.isRootCh)return[...g.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(g.postsMulti&&g.postsMulti.length>0&&g.app.rootCh===g.postsMulti[0].ch)return[...I,...g.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsMulti&&g.postsMulti.length>0){let F=[];return I.length+g.postsMulti.length>C.default.findOneLimitCnt?(F=[...g.postsMulti,...I],F.slice(0,C.default.findOneLimitCnt)):[...g.postsMulti,...I]}}return I}},1731:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(386));g.default=(I=[],g)=>{switch(g.type){case"ON_CLICK_MULTISTREAM":return g.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new C.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(g.postsSingle&&g.postsSingle.length>0)return[...I,...g.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsSingle&&g.postsSingle.length>0)return[...g.postsSingle,...I]}return I}},7849:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(5390));g.default=(I=[],g)=>{switch(g.type){case"API_TO_SERVER[REQUEST]:changeThread":return new C.default;case"UNMOUNT_POSTS_TIMELINE":return I.map((I=>(I.dispFlg=I.currentTime<=g.mediaCurrentTime,I)));case"CLEAR_POSTS_TIMELINE":return[...g.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(g.postsTimeline&&g.postsTimeline.length>0)return[...I,...g.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(g.postsTimeline&&g.postsTimeline.length>0)return[...g.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(g.postsTimeline&&g.postsTimeline.length>0&&g.postsTimeline[0].uid===g.user.uid&&g.postsTimeline[0].ch===g.thread.ch)return[...I,...g.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(g.postsTimeline&&g.postsTimeline.length>0)return[...g.postsTimeline,...I]}return I}},6739:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1083));g.default=(I=[],g)=>{switch(g.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return g.postsTimelineStock?[...I,g.postsTimelineStock]:I;default:return g.postsTimelineStock?new C.default(g.postsTimelineStock):I}}},784:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(2342));g.default=(I=[],g)=>{switch(g.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return g.postsTimelineZero?[...I,g.postsTimelineZero]:I;default:return g.postsTimelineZero?new C.default(g.postsTimelineZero):I}}},219:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(3189));g.default=(I=[],g)=>{switch(g.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return g.postsTimelineZeroAfter?[...I,g.postsTimelineZeroAfter]:I;default:return g.postsTimelineZeroAfter?new C.default(g.postsTimelineZeroAfter):I}}},155:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(9478));g.default=(I=[],g)=>{let F=[],B=0;const c=(I,F)=>I.ch===g.app.rootCh||F.ch===g.app.rootCh?0:I.liveCnt<F.liveCnt?1:I.liveCnt>F.liveCnt?-1:0;switch(g.type){case"SERVER_TO_API[EMIT]:fetchPosts":return g.app.isLinkCh?I:(F=C.default.getDispPosts(g),B=F&&F.length?F.length:0,0===B?I:I.map((I=>g.thread.ch===I.ch?{...I,favicon:F[B-1].favicon,stampId:F[B-1].stampId,post:F[B-1].post}:I)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return I.map((I=>g.thread.ch===I.ch?{...I,liveCnt:g.thread.liveCnt}:I)).sort(c);case"SERVER_TO_API[BROADCAST]:post":return I.map((I=>g.posts[0].ch===I.ch?{...I,title:g.posts[0].title,stampId:g.posts[0].stampId,favicon:g.posts[0].favicon,post:g.posts[0].post}:I));case"SERVER_TO_API[EMIT]:rank":if(I&&I.length>0&&g.rank&&g.rank.length>0){const F=[],B=g.rank.length;let C=g.rank[0];for(let c=0;c<B;c++){let B=g.rank[c];C=B.updateTime>C.updateTime?B:C,B.ch===I[0].ch&&(B={...B,liveCnt:I[0].liveCnt}),F.push(B)}return F.sort(c),F[0].faicon=C.favicon,F[0].post=C.post,F[0].stampId=C.stampId,F}return g.rank?g.rank:I;default:return g.rank?g.rank:I}}},1895:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(4919));g.default=(I=new C.default,g)=>g.setting?I.merge(g.setting):I},8372:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8091));g.default=(I=new C.default({},{}),g)=>{switch(g.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new C.default(g.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(I.ch===g.thread.ch)return g.thread?I.merge(g.thread):I;case"SERVER_TO_API[BROADCAST]:post":if(I.ch===g.thread.ch)return g.thread?I.merge(g.thread):I}return I}},1422:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8091));g.default=(I=new C.default({},{}),g)=>g.threadDetail?I.merge(g.threadDetail):I},7474:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(978));g.default=(I=new C.default,g)=>g.threads?I.merge(g.threads):I},3695:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(2749));g.default=(I=new C.default,g)=>{switch(g.type){case"SERVER_TO_API[EMIT]:tune":return new C.default(g.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:F}=g;if(F.ch===I.ch)return{...I,liveCnt:F.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const B=g.posts[0];if(B.ch===I.ch)return{...I,title:B.title,stampId:B.stampId,favicon:B.favicon,post:B.post}}return I}},44:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7444));g.default=(I=new C.default,g)=>g.user?I.merge(g.user):I},8188:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(){return[]}}},1534:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),this.create({liveCnt:0})}}g.default=c},6926:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(2749)),U=B(F(8091));class Q extends C.default{constructor(I={},g=""){super(),this.offsetTimelineFindId=c.default.defaultFindId,this.offsetSingleFindId=c.default.defaultFindId,this.offsetMultiFindId=c.default.defaultFindId,this.offsetChildFindId=c.default.defaultFindId,this.offsetLogsFindId=c.default.defaultFindId;const F=I.ch?I.ch:"/",B=I.id?I.id:"",t=C.default.isSet(I.isMediaCh)?I.isMediaCh:Q.getIsMediaCh(F),l=!!C.default.isSet(I.isLinkCh)&&I.isLinkCh,s=I.rootCh?I.rootCh:F,i=C.default.isSet(I.isRootCh)?I.isRootCh:s===F,V=I.rootTitle?I.rootTitle:"talkn",d=Q.getMediaSrc(I.protocol,F),e=Q.getMediaType(d,I),b=I&&I.tuned?I.tuned:"",A=Q.getDispThreadType(I,t),G=!C.default.isSet(I.multistream)||I.multistream,R=I&&I.findType?I.findType:U.default.findTypeAll,u=I&&I.offsetFindId?I.offsetFindId:Q.defaultOffsetFindId,Z=I&&I.offsetTimelineFindId?I.offsetTimelineFindId:Q.defaultOffsetFindId,x=I&&I.offsetSingleFindId?I.offsetSingleFindId:Q.defaultOffsetFindId,X=I&&I.offsetMultiFindId?I.offsetMultiFindId:Q.defaultOffsetFindId,L=I&&I.offsetChildFindId?I.offsetChildFindId:Q.defaultOffsetFindId,n=I&&I.offsetLogsFindId?I.offsetLogsFindId:Q.defaultOffsetFindId,a=I.inputPost?I.inputPost:"",W=!!I.inputStampId&&I.inputStampId,N=I.inputCurrentTime?I.inputCurrentTime:0,E=I.inputSearch?I.inputSearch:"",S=!!C.default.isSet(I.isToggleMultistream)&&I.isToggleMultistream,y=!!C.default.isSet(I.isRankDetailMode)&&I.isRankDetailMode,o=I&&I.actioned?I.actioned:"",m=C.default.isSet(I.debug)?I.debug:"";return this.create({id:B,isRootCh:i,isLinkCh:l,isMediaCh:t,rootCh:s,rootTitle:V,chType:e,dispThreadType:A,tuned:b,multistream:G,findType:R,offsetFindId:u,offsetTimelineFindId:Z,offsetSingleFindId:x,offsetMultiFindId:X,offsetChildFindId:L,offsetLogsFindId:n,inputPost:a,inputStampId:W,inputCurrentTime:N,inputSearch:E,isToggleMultistream:S,isRankDetailMode:y,actioned:o,debug:m})}static get defaultOffsetFindId(){return c.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[Q.mediaTypeMp3,Q.mediaTypeMp4,Q.mediaTypeM4a]}static get mediaChTagTypes(){return{[Q.mediaTypeMp3]:Q.mediaTagTypeAudio,[Q.mediaTypeMp4]:Q.mediaTagTypeVideo,[Q.mediaTypeM4a]:Q.mediaTagTypeAudio}}static getMediaType(I,g){return g&&g.chType?g.chType:Q.getMediaTypeFromSrc(I)}static getMediaTypeFromSrc(I){const g=Object.keys(Q.mediaChTagTypes),F=g.length;let B="html";for(let C=0;C<F;C++){const F=new RegExp(`.${g[C]}$`);if(I.match(F)){B=Q.mediaChTagTypes[g[C]];break}}return B}static validInputPost(I){return!!/\r\n$|\n$|\r$/gim.test(I)&&"LAST TYPE BREAK LINE."}static validPost(I){return""===I?"NO INPUT POST":/^\r\n+$|\n+$|\r+$/g.test(I)?"ONLY NEW LINE":/^\s+$/g.test(I)?"only space":!!/^\r\n+(\s|\S)+$|^\n+(\s|\S)+$|^\r+(\s|\S)+$/.test(I)&&"EMPTY POST"}static getWidth(I){return"object"==typeof window&&window.innerWidth?window.innerWidth:I.width?"string"==typeof I.width&&I.width.indexOf("px")>=0?Number(I.width.replace("px","")):I.width:0}static getHeight(I={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(I){return Q.isAudioContentType(I)||Q.isVideoContentType(I)}static isAudioContentType(I){return I.indexOf(Q.mediaTagTypeAudio)>=0}static isVideoContentType(I){return I.indexOf(Q.mediaTagTypeVideo)>=0}static getMediaSrc(I,g){return I+"/"+g.replace(/\/$/,"")}static getIsMediaCh(I){return Q.mediaChs.some((g=>{const F=new RegExp(`.${g}/$|.${g}$`);return I.match(F)}))}static getDispThreadType(I,g){return I&&I.dispThreadType?I.dispThreadType:g?Q.dispThreadTypeTimeline:Q.dispThreadTypeMulti}static getOffsetFindId({posts:I}){return I&&I[0]&&I[0]._id?I[0]._id:c.default.defaultFindId}static getStepToDispThreadType({app:I,ranks:g},F,B,C=""){let c="";const U=I&&I.dispThreadType?I.dispThreadType:Q.dispThreadTypeMulti;return c=(I=Q.getStepDispThreadType({app:I,ranks:g},F,B,C)).dispThreadType,{app:I,stepTo:`${U} to ${c}`}}static getStepDispThreadType({app:I,ranks:g},F={},B,C){const c=I||{};if(c.offsetFindId=Q.defaultOffsetFindId,F.isMediaCh)return c.dispThreadType=Q.dispThreadTypeTimeline,c.offsetFindId=c.offsetTimelineFindId?c.offsetTimelineFindId:Q.defaultOffsetFindId,c.isLinkCh="Links"===C||"findMediaCh"===C||"ToMedia"===C,c.isMediaCh=!0,c;if("BackToRootCh"===C&&(c.isLinkCh=!1),"Links"===C&&g.length>0){if(!g.some((I=>I.ch===B||I.ch===B+"/")))return c.offsetFindId=Q.defaultOffsetFindId,c.dispThreadType=Q.dispThreadTypeChild,c.isLinkCh=!0,c}return c.rootCh===B?c.multistream?c.dispThreadType=Q.dispThreadTypeMulti:c.dispThreadType=Q.dispThreadTypeSingle:c.dispThreadType=Q.dispThreadTypeChild,c}}g.default=Q},2169:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),this.create({...I})}static rebuildAttributes(I){let g={};return Object.keys(I).forEach((F=>{g[I[F].name]=I[F].value})),g}}g.default=c},8455:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I=[]){return super(),I=I||[],this.create(I)}}g.default=c},2749:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(300));class U extends C.default{constructor(I){super(),this.ch=U.defaultValues.ch,this.chs=U.defaultValues.chs,this.favicon=U.defaultValues.favicon,this.findType=U.defaultValues.findType,this.layer=U.defaultValues.layer,this.post=U.defaultValues.post,this.protocol=U.defaultValues.protocol,this.stampId=U.defaultValues.stampId,this.title=U.defaultValues.title,this.liveCnt=U.defaultValues.liveCnt,this.uid=U.defaultValues.uid,this.utype=U.defaultValues.utype,this.dispFlg=U.defaultValues.dispFlg,this.data=U.defaultValues.data,this.createTime=U.defaultValues.createTime,this.currentTime=U.defaultValues.currentTime,this.updateTime=U.defaultValues.updateTime;const g=I?{...U.defaultValues,...I}:U.defaultValues;return this.create(g)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:c.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}g.default=U},5154:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},9478:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(6926)),c=B(F(5154)),U=B(F(386)),Q=B(F(5390)),t=B(F(1083));class l{constructor(I=[]){return I}static getDispPosts(I){const{app:g,postsTimeline:F,postsMulti:B,postsSingle:c,postsChild:U,postsLogs:Q}=I;switch(g.dispThreadType){case C.default.dispThreadTypeTimeline:return F;case C.default.dispThreadTypeMulti:return B;case C.default.dispThreadTypeSingle:return c;case C.default.dispThreadTypeChild:return U;case C.default.dispThreadTypeLogs:return Q}}static getAnyActionPosts(I,g){const{app:F,posts:B}=I,Q=B&&B.length>0;switch(I.postsMulti=new c.default,I.postsSingle=new U.default,I.postsChild=[],I.postsLogs=[],F.dispThreadType){case C.default.dispThreadTypeTimeline:I=l.getAnyActionPostsTimeline(I,B,g,Q);break;case C.default.dispThreadTypeMulti:I.postsMulti=Q?B:[];break;case C.default.dispThreadTypeSingle:I.postsSingle=Q?B:[];break;case C.default.dispThreadTypeChild:I.postsChild=Q?B:[];break;case C.default.dispThreadTypeLogs:I.postsLogs=Q?B:[]}return I}static getAnyActionPostsTimeline(I,g,F,B){if("SERVER_TO_API[BROADCAST]:post"===I.type)I.postsTimeline=new Q.default,I.postsTimeline.push(I.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===I.type&&(I.postsTimeline=new Q.default,I.postsTimelineStock=new t.default,B)){const F=g.length;for(let B=0;B<F;B++)0===g[B].currentTime?I.postsTimeline.push(g[B]):I.postsTimelineStock.push(g[B])}return I}}g.default=l},386:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},5390:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},1083:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},2342:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},3189:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},8207:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=class{constructor(I=[]){return I}}},4919:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){super();const g=I&&I.client?I.client:{},F=I&&I.common?I.common:{},B=I&&I.server?I.server:{};return this.create({client:g,common:F,server:B})}}g.default=c},8091:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(7771)),U=B(F(300)),Q=B(F(6926));class t extends C.default{constructor(I={},g){super(),this.chs=["/"],this.protocol=c.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=t.getDefaultFavicon(),this.findType=t.findTypeAll,this.title=t.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=t.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const F=t.isWindowObj(I)?t.constructorFromWindow(I,g):I;return this.create(F)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[t.findTypeHtml]:["text/html"],[t.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[t.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return`https://${U.default.assetsURL}/favicon.ico`}static isWindowObj(I){return!!I.alert}static constructorFromWindow(I,g){const F=!!g.ch&&g.ch,B=t.getCh(g);let c={};return c.ch=B,c.chs=["/"],c.hasSlash=!!g.hasslash&&C.default.getBool(g.hasslash),c.protocol="talkn:",c.contentType="",c.charset="UTF-8",c.host="",c.favicon=t.getDefaultFavicon(),c.findType=t.findTypeAll,F?(c.protocol=t.getProtocol(F),c.host=t.getHost(F),c.chs=F.chs&&F.chs.length>0?F.chs:t.getChs(B)):(c.protocol=location.protocol?location.protocol:"????:",c.chs=I.chs&&I.chs.length>0?I.chs:t.getChs(B),c.contentType=document.contentType?document.contentType:"",c.charset=document.charset?document.charset:"",c.host=location.host?location.host:"",c.favicon=t.getFaviconFromWindow(window)),c.title=t.getDefaultTitle(),c.metas=[],c.serverMetas={},c.clientMetas={},c.emotions={},c.links=[],c.h1s=[],c.audios=[],c.videos=[],c.layer=t.getLayer(c.ch),c.mediaIndex=[],c.postCnt=0,c.multiPostCnt=0,c.isSelfCh=t.getIsSelfCh("",c.ch),c.createTime="",c.updateTime="",c}static getCh(I){return I&&I.ch&&""!==I.ch?I.ch:"/"}static getChTop(I){return""!==I?"/"+I.split("/")[1]:""}static getChs(I){let g=["/"];if(""!==I){const B="/"===I.slice(-1)?I:I+"/";if("/"!==B){const I=B.split("/"),C=I.length;let c="";for(var F=1;F<C;F++)""!==I[F]&&(c+=I[F],c="/"===c.slice(-1)?c:c+"/",c="/"===c.slice(0,1)?c:"/"+c,g.push(c))}}return g}static getHost(I){return I.indexOf(".")>=0?(I=I.replace("https://","").replace("http://","")).replace(/^\//,"").replace(/\/.*$/,""):U.default.domain}static getProtocol(I){return I.indexOf("http:")>=0?"http:":I.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(I,g){return I.replace("http:/","").replace("https:/","").replace(/\u002f$/,"")===g}static getLayer(I="/"){return I.split("/").length-1}static getMediaSrc(I){return Q.default.getMediaSrc(I.protocol,I.ch)}static getMediaTagType(I){const g=t.getMediaSrc(I);return Q.default.getMediaType(g,null)}static getFaviconFromWindow(I){if(I&&I.document){const g=I.document.evaluate("//link[contains(@rel,'icon')or(contains(@rel,'ICON'))][1]/@href",I.document,null,2,null).stringValue,F="http://",B="https://",C=location.host;if(g.indexOf(F)||g.indexOf(B)){const I=F+C+(g||"/favicon.ico");return 1==I.split("//").length-1?I:g}return g}return""}static getStatus(I,g,F){let B={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return B.isCreate=t.getStatusCreate(F),B.isRequireUpsert=t.getStatusIsRequireUpsert(I,B.isCreate),B.isMultistream=t.getStatusIsMultistream(g),B.isToggleMultistream=t.getStatusIsToggleMultistream(g),B.isMediaCh=t.getStatusIsMediaCh(I.ch),B}static getStatusCreate(I){return!I}static getStatusIsRequireUpsert(I,g=!1){if(!g)return!0;if(I.updateTime){const g=I.updateTime.getTime?I.updateTime.getTime():I.updateTime,F=new Date,B=F.getFullYear(),C=F.getMonth(),c=F.getDate(),Q=F.getHours();return F.getMinutes(),g<new Date(B,C,c,Q-U.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(I){return void 0===I||void 0===I.dispThreadType||I.dispThreadType===Q.default.dispThreadTypeMulti&&I.multistream}static getStatusIsMediaCh(I){return Q.default.getIsMediaCh(I)}static getStatusIsToggleMultistream(I){return void 0!==I&&void 0!==I.actioned&&I.isToggleMultistream}static getContentTypeFromFindType(I){const g=t.findTypes[t.findTypeHtml],F=t.findTypes[t.findTypeMusic],B=t.findTypes[t.findTypeVideo];let C;if(I&&""!==I){let c="";I.indexOf(";")>0&&(c=I.split(";")[0]),(g.includes(I)||g.includes(c))&&(C=t.findTypeHtml),(F.includes(I)||F.includes(c))&&(C=t.findTypeMusic),(B.includes(I)||B.includes(c))&&(C=t.findTypeVideo)}return C}static getFindTypeFromSrc(I){const g=Q.default.getMediaTypeFromSrc(I);return g.charAt(0).toUpperCase()+g.slice(1)}}g.default=t},978:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c extends C.default{constructor(I={}){return super(),this.create(I)}static getMergedThreads(I,g){return I[g.ch]={...g},I}}g.default=c},7444:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216)),c=B(F(2749));class U extends C.default{static get defaultOffsetFindId(){return c.default.defaultFindId}constructor(I={}){super();const g=I&&I.uid?I.uid:"",F=I&&I.utype?I.utype:"",B=I&&I.tuned?I.tuned:"",C=!(!I||!I.multistreamed)&&I.multistreamed,c=I&&I.actioned?I.actioned:"",Q=I&&I.offsetFindId?I.offsetFindId:U.defaultOffsetFindId,t=I&&I.offsetSingleFindId?I.offsetSingleFindId:U.defaultOffsetFindId,l=I&&I.offsetMultiFindId?I.offsetMultiFindId:U.defaultOffsetFindId,s=I&&I.offsetChildFindId?I.offsetChildFindId:U.defaultOffsetFindId,i=I&&I.offsetLogsFindId?I.offsetLogsFindId:U.defaultOffsetFindId;return I.requestLoginType&&I.requestLoginType,this.create({uid:g,utype:F,tuned:B,multistreamed:C,actioned:c,offsetFindId:Q,offsetSingleFindId:t,offsetMultiFindId:l,offsetChildFindId:s,offsetLogsFindId:i,friends:[]})}static getOffsetFindId({posts:I}){return I&&I[0]&&I[0]._id?I[0]._id:c.default.defaultFindId}static getHref(I={}){return"undefined"!=typeof window&&window.location&&window.location.href,I&&I.href?I.href:"/"}}g.default=U},4546:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=F(5857),c=B(F(843)),U=B(F(8262));g.default=function(I={}){let g=[c.default.updateAction];return(0,C.createStore)(U.default,I,(0,C.applyMiddleware)(...g))}},8527:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8188)),c=B(F(1534)),U=B(F(6926)),Q=B(F(8455)),t=B(F(9478)),l=B(F(5390)),s=B(F(1083)),i=B(F(8207)),V=B(F(8091)),d=B(F(7444));class e{constructor(I,g={}){this.bootOption=I,this.ranks=new i.default,this.menuLogs=new Q.default(g.menuLogs),this.posts=new t.default,this.postsMulti=new t.default,this.postsSingle=new t.default,this.postsChild=new t.default,this.postsTimeline=new l.default,this.postsTimelineStock=new s.default,this.postsLogs=new t.default,this.analyze=new c.default,this.thread=new V.default(this.bootOption,g.thread),this.threadDetail=new V.default(this.bootOption,g.thread),this.app=new U.default(e.getAppParams(this.thread,this.bootOption,g)),this.user=new d.default(e.getUserParams(this,g)),this.actionLog=new C.default}static getAppParams(I,g,F){return{isTransition:!0,rootTitle:I.title,...g,...I}}static getUserParams(I,g){return g&&g.user&&g.user.uid?{...g.user}:{dispThreadType:I.thread.ch===I.app.rootCh?U.default.dispThreadTypeMulti:U.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}g.default=e},5719:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1665)),c=B(F(8200)),U=B(F(2874)),Q=F(1006),t=document.currentScript,l=Boolean(-1===t.getAttribute("src").indexOf(C.default.SUB_DOMAINS.BANNER)),s=new U.default(C.default.APP_TYPES.API);window.talknAPI=new Promise((I=>{s.boot().then((g=>{const F=new Q.PublicApi(g);l?window.talknAPI=F:(0,c.default)(F),I(F)}))}))},6552:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(7771)),c=B(F(300)),U=B(F(1665));class Q{constructor(I,g){this.env=U.default.PRODUCTION,this.type=U.default.APP_TYPES.PORTAL,this.ch="/",this.hasSlash=!0,this.protocol=C.default.HTTPS_PROTOCOL,this.host=location.host,this.extensionMode=Q.extensionModeNone,this.defaultProps={id:"",params:{ch:"/",hasSlash:!0,protocol:C.default.HTTPS_PROTOCOL,host:location.host,mode:Q.extensionModeNone}};const F=Q.getInitialRootCh(c.default.env),B=Q.getFirstHasSlach(F);this.env=c.default.env,this.id=I,this.hasSlash=g&&void 0!==g.hasSlash?g.hasSlash:Q.getLastHasSlach(F),this.ch=g&&g.ch?g.ch:Q.getCh(F,B,this.hasSlash),this.protocol=g&&g.protocol?g.protocol:Q.getProtocol(),this.host=g&&g.host?g.host:location.host,this.extensionMode=g&&g.mode?g.mode:Q.extensionModeNone}static get extensionModeModal(){return"Modal"}static get extensionModeBottom(){return"Bottom"}static get extensionModeEmbed(){return"Embed"}static get extensionModeLiveMedia(){return"LiveMedia"}static get extensionModeOutWindow(){return"OutWindow"}static get extensionModeNone(){return"None"}static getInitialRootCh(I){let g=location.href;switch(g=g.replace(`${C.default.HTTPS_PROTOCOL}/`,"").replace(`${C.default.HTTP_PROTOCOL}/`,""),I){case U.default.PRODUCTION:g=g.indexOf(c.default.coverURL)>=0?g.replace(`/${c.default.coverURL}/`,"/"):g.replace(`/${U.default.PRODUCTION_DOMAIN}`,"/");break;case U.default.LOCALHOST:g=g.indexOf(c.default.coverURL)>=0?g.replace(`/${c.default.coverURL}/`,"/"):g.replace(`/${U.default.DEVELOPMENT_DOMAIN}`,"/");break;case U.default.DEVELOPMENT:g=g.replace(`:${U.default.PORTS.DEVELOPMENT_CLIENT}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_API}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_COVER}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_TUNE}`,"").replace(`:${U.default.PORTS.DEVELOPMENT_COMPONENTS}`,""),0===g.indexOf(`/${U.default.DEVELOPMENT_DOMAIN}/`)&&(g=g.replace(`/${U.default.DEVELOPMENT_DOMAIN}`,""))}return g}static getType(I,g){let F=U.default.APP_TYPES.API;return I?U.default.APP_TYPES.EXTENSION:g?U.default.APP_TYPES.CLIENT:F}static getProtocol(){return location.protocol===C.default.HTTPS_PROTOCOL?C.default.HTTPS_PROTOCOL:location.protocol===C.default.HTTP_PROTOCOL?C.default.HTTP_PROTOCOL:C.default.TALKN_PROTOCOL}static getFirstHasSlach(I){return I.startsWith("/")}static getLastHasSlach(I){return I.endsWith("/")}static getCh(I,g,F){let B=I;return B=g?B:`/${B}`,B=F?B:`${B}/`,B=B.replace(/^\/\//,"/"),B}}g.default=Q},1223:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.HandleRequestMethod=g.HandleMessageMethod=void 0;const C=B(F(7771));g.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(I){return 0===I.indexOf(C.default.API_TO_SERVER_REQUEST)?I.replace(C.default.API_TO_SERVER_REQUEST,C.default.API_TO_CLIENT_REQUEST):0===I.indexOf(C.default.SERVER_TO_API_EMIT)?I.replace(C.default.SERVER_TO_API_EMIT,C.default.API_TO_CLIENT_EMIT):0===I.indexOf(C.default.SERVER_TO_API_BROADCAST)?I.replace(C.default.SERVER_TO_API_BROADCAST,C.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${I}`}static getMessageTypes(I){const g=I.split(":");return{ioType:g[0].split("[")[1].replace("]",""),exeMethod:g[1]}}static convertExtToClientActionType(I){return`EXT_TO_CLIENT[ACTION]:${I}`}},g.HandleMessageMethod="handle",g.HandleRequestMethod="handle"},1216:(I,g)=>{"use strict";Object.defineProperty(g,"__esModule",{value:!0});class F{constructor(I={}){}static getType(I){return null===I?"Null":void 0===I?"Undefined":I.constructor.name}static isSet(I){return"Undefined"!==F.getType(I)&&"Null"!==F.getType(I)}static getBool(I){return"boolean"==typeof I?I:"true"===I}static isAnonymousFunc(I){const g=I.toString();return"function(){}"===g||"function() {}"===g||"function (){}"===g||"function () {}"===g||"()=>{}"===g}create(I){const g=this.constructor.name;return F.getType(I),Object.keys(I).forEach((B=>{let C,c,U=null,Q=!1,t=!1,l=()=>{},s=null;if("Object"===F.getType(I[B])){C=I[B];let g=0===Object.keys(C).length;Q=C.isAcceptNull?C.isAcceptNull:Q,t=C.isAcceptBlank?C.isAcceptBlank:t,U=!g&&C.def?C.def:U,s=g||!C.value&&""!==C.value?C:C.value,s=g&&U?U:s,c=F.getType(s),l=C.valid?C.valid:l}else s=I[B],U=s,Q=Q,t=t,c=F.getType(s),l=l;const i=I=>{let C=null;const U=`${g}.${B}`,i=s,V=c,d=I,e=F.getType(I);return e!==c&&(C=`SCHEMA_TYPE : ${U} [validType: ${c}][paramsType: ${e}]`),Q&&null===I&&(C=`SCHEMA_IS_ACCEPT_NULL :  ${U}`),t&&""===I&&(C=`SCHEMA_IS_ACCEPT_BLANK :  ${U}`),"Function"===F.getType(l)&&l(I)&&(C=`SCHEMA_YOUR_VALID_METHOD :  ${U}`),{pointer:U,validValue:i,validType:V,paramsValue:d,paramsType:e,error:C}},{pointer:V,validValue:d,validType:e,paramsValue:b,paramsType:A,error:G}=i(s);if(null===G)Object.defineProperty(this,B,{get:()=>s,set:I=>{const g=i(s);if(null===G)return s=I,{...this,[B]:s};throw this.validWarn(g),G},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw G;console.warn(G)}})),this}canSet(I,g){try{const F=this[I];if(void 0===F)return!0;if(null===F)return!0;if(void 0===g)return!0;if(null===g)return!0;const{error:B}=this[I]=g;return!B&&(this[I]=F,!0)}catch(F){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+I),console.warn("BEFOER VALUE"),console.warn(typeof this[I]),console.warn(this[I]),console.warn("AFTER VALUE"),console.warn(typeof g),console.warn(g),`BAD CAN SET: ${F}`}}merge(I={},g=!0){try{const B=F.getType(I),C=Object.keys(I);if(C.length>0){let F={...this};return C.forEach((g=>{this[g]!==I[g]&&(this.canSet(g,I[g])?F[g]=I[g]:console.warn("BAD MERGE A : "+g+" "+I[g]+" "+typeof I[g]))})),"Array"===B?(F=Object.values(F),g?new this.constructor(F):F):g?new this.constructor(F):F}return new this.constructor}catch(g){if(this.errorThrow)throw console.warn(I),console.warn(g),`BAD MERGE B : ${F.getType(I)} ${g}`;return console.warn(I),console.warn(g),console.warn(`BAD MERGE C : ${F.getType(I)} ${g}`),I}}toJSON(I=this){let g={};return Object.keys(I).forEach((F=>{let B=I[F];"Object"===B.constructor.name&&(B.type||B.default||(B=this.toJSON(B))),B.default||""===B.default||0===B.default?g[F]=B.default:g[F]=B})),g}forEach(I){return Object.values(this).forEach(I)}concat(I){return this.returnImmutable(Object.values(this).concat(I),I)}map(I){return this.returnImmutable(Object.values(this).map(I),I)}filter(I){return this.returnImmutable(Object.values(this).filter(I),I)}reduce(I){return this.returnImmutable(Object.values(this).reduce(I),I)}find(I){return Object.values(this).find(I)}sort(I){return Object.values(this).sort(I)}push(I){const g=Object.values(this);return g.push(I),this.returnImmutable(g)}unshift(I){const g=Object.values(this);return g.unshift(I),this.returnImmutable(g)}getShift(){const I=Object.values(this).shift();return this.returnImmutable(I)}pop(I){const g=Object.values(this);return g.pop(I),this.returnImmutable(g)}returnImmutable(I,g=(()=>{})){return void 0===I?new this.constructor:0===I.length&&0===Object.keys(this).length?String(g).indexOf("createElement")>0?[]:new this.constructor(I):I[0]&&I[0].$$typeof&&"Symbol"===I[0].$$typeof.constructor.name?I:new this.constructor(I)}validWarn(I){console.warn("##########################"),console.warn("#"+I.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(I.validType),console.warn("### initializedValidValue"),console.warn(I.validValue),console.warn("### paramsType"),console.warn(I.paramsType),console.warn("### paramsValue"),console.warn(I.paramsValue),console.warn("##########################")}}g.default=F},7771:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(1216));class c{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${c.API_REQUEST_TYPE}]${c.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${c.API_RESPONSE_TYPE_EMIT}]${c.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${c.API_RESPONSE_TYPE_BROADCAST}]${c.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${c.API_REQUEST_TYPE}]${c.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${c.API_RESPONSE_TYPE_EMIT}]${c.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${c.API_RESPONSE_TYPE_BROADCAST}]${c.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(I){const g=I.split(c.METHOD_COLON),F=g[0].split("[")[0];let B;return B=g[0].indexOf(`[${c.API_REQUEST_TYPE}]`)>0?c.API_REQUEST_TYPE:g[0].indexOf(`[${c.API_RESPONSE_TYPE_EMIT}]`)>0?c.API_RESPONSE_TYPE_EMIT:c.API_RESPONSE_TYPE_BROADCAST,{sequence:F,actionType:B,actionName:g[1]}}static updateCallbackExeConditionMap(I){let g={emit:!0,broadcast:!0};return c.map[I]&&(g.emit=!(Object.keys(c.map[I].responseEmitState).length>0),g.broadcast=!(Object.keys(c.map[I].responseBroadcastState).length>0)),g}static convertServerToApiIoType(I,g){return g.indexOf(`${c.API_SEPARATE_IO_TYPE_START}${c.API_REQUEST_TYPE}${c.API_SEPARATE_IO_TYPE_END}`)>=0?c.API_REQUEST_TYPE:g.indexOf(`${c.API_SEPARATE_IO_TYPE_START}${c.API_RESPONSE_TYPE_BROADCAST}${c.API_SEPARATE_IO_TYPE_END}`)>=0?c.API_RESPONSE_TYPE_BROADCAST:g.indexOf(`${c.API_SEPARATE_IO_TYPE_START}${c.API_RESPONSE_TYPE_EMIT}${c.API_SEPARATE_IO_TYPE_END}`)>=0?c.API_RESPONSE_TYPE_EMIT:c.API_SETUP}static convertExtToClientActionType(I,g){return c.convertApiToClientActionType(g)}static convertApiToClientActionType(I){return 0===I.indexOf(c.API_TO_SERVER_REQUEST)?I.replace(c.API_TO_SERVER_REQUEST,c.API_TO_CLIENT_REQUEST):0===I.indexOf(c.SERVER_TO_API_EMIT)?I.replace(c.SERVER_TO_API_EMIT,c.API_TO_CLIENT_EMIT):0===I.indexOf(c.SERVER_TO_API_BROADCAST)?I.replace(c.SERVER_TO_API_BROADCAST,c.API_TO_CLIENT_BROADCAST):I}static getRequestState(I,g,F){const B=I.replace(c.API_TO_SERVER_REQUEST,""),{requestPublicState:U,requestPrivateState:Q}=c.map[B];let t={[c.REDUX_ACTION_KEY]:B};return Object.keys(Q).forEach((I=>{t[I]||(t[I]={}),Q[I].forEach((B=>{if(!t[I][B]){let c=g[I][B];F&&F[I]&&C.default.isSet(F[I][B])&&(c=F[I][B]),t[I][B]=c}}))})),Object.keys(U).forEach((I=>{t[I]||(t[I]={}),U[I].forEach((g=>{t[I][g]||(t[I][g]=F)}))})),t}static getResponseState(I,g,F){const B=g.type,C=c.map[B][`response${I}State`];let U={[c.REDUX_ACTION_KEY]:B};return Object.keys(C).forEach((I=>{if(!F[I])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${g.type}: ${I}`;{const B=C[I];let c=F[I];switch(c.constructor.name){case"model":c=c.toJSON(),delete c._id,delete c.__v}"*"===B?U={...U,[I]:c}:B.forEach((B=>{if(void 0===F[I][B])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${g.type}: ${I}.${B}`;U={...U,[I]:{...U[I],[B]:F[I][B]}}}))}})),U}static getRequestActionState(I,g=null,F=null){return"string"==typeof g&&null===F?{type:I}:"object"==typeof g&&"object"==typeof F?{...g,...F,type:I}:"string"==typeof g&&"object"==typeof F?{...F,type:I}:{...g,type:I}}}g.default=c},300:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(6894)),c=B(F(8399)),U=B(F(1665)),{PRODUCTION:Q,DEVELOPMENT:t,PRODUCTION_DOMAIN:l,DEVELOPMENT_DOMAIN:s,SUB_DOMAINS:i,PORTS:V}=U.default,d=C.default.hasOwnProperty("hostname")?C.default.hostname():s,e=function(I){if("browser"===c.default.title){if(location.href.indexOf(U.default.DEVELOPMENT_DOMAIN)>=0){const I=Number(location.port);return I===U.default.PORTS.DEVELOPMENT_CLIENT||I===U.default.PORTS.DEVELOPMENT_API||I===U.default.PORTS.DEVELOPMENT_COVER||I===U.default.PORTS.DEVELOPMENT_COMPONENTS||I===U.default.PORTS.DEVELOPMENT_TUNE?U.default.DEVELOPMENT:U.default.LOCALHOST}return U.default.PRODUCTION}return I.indexOf(U.default.AWS_HOST_KEY)>=0?U.default.PRODUCTION:U.default.DEVELOPMENT}(d),b={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js",cover:"talkn.cover.js",tune:"talkn.tune.js",components:"talkn.components.js"},A=e===t,G=e===Q?l:s,R=`${i.WWW}.${G}`,u=`${i.COVER}.${G}`,Z=`${i.API}.${G}`,x=A?`${G}:${V.DEVELOPMENT_API}/${b.api}`:`${Z}/v1`,X=A?`${G}:${V.DEVELOPMENT_CLIENT}/${b.client}`:`${i.CLIENT}.${G}`,L=`${i.DESC}.${G}`,n=`${i.PORTAL}.${G}`,a=`${i.ASSETS}.${G}`,W=`${i.AUTO}.${G}`,N=`${i.EXT}.${G}`,E=`${i.COMP}.${G}`,S=`${i.OWN}.${G}`,y=`${i.NEWS}.${G}`,o=`${i.TUNE}.${G}`,m=`${i.COMPONENTS}.${G}`,h=`${a}/img/`,Y={domain:G,isDev:A,env:e,files:b,hostName:d,apiURL:Z,apiAccessURL:x,coverURL:u,wwwURL:R,descURL:L,portalURL:n,clientURL:X,assetsURL:a,autoURL:W,extURL:N,compURL:E,ownURL:S,newsURL:y,tuneURL:o,bannerURL:`${i.BANNER}.${G}`,componentsURL:m,transactionURL:`${i.TRANSACTION}.${G}`,assetsImgPath:h,assetsCoverPath:`${a}/cover/`,assetsIconPath:`${a}/icon/`,assetsJsPath:`${a}/js/`,sessionURL:`${i.SESSION}.${G}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],defaultBirthdayUnixtime:1e12,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${h}talkn_logo_html.png`,Music:`//${h}talkn_logo_music.png`,Video:`//${h}talkn_logo_video.png`},defaultFavicon:`//${i.ASSETS}.${G}/favicon.ico`};g.default={...Y}},1665:function(I,g,F){"use strict";var B=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0});const C=B(F(8399)),c={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:C.default.env.HOSTNAME?C.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_COVER:8e3,DEVELOPMENT_API:8001,DEVELOPMENT_COMPONENTS:8002,DEVELOPMENT_TUNE:8003,DEVELOPMENT_CLIENT:8080,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",COVER:"cover",RANK:"rank",EXT:"ext",COMPONENTS:"components",TUNE:"tune",TRANSACTION:"transaction"},APP_TYPES:{CLIENT:"CLIENT",PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",COVER:"COVER",COMPONENTS:"COMPONENTS",TUNE:"TUNE"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",talknRankJs:"talkn.rank.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};g.default=c},7509:(I,g,F)=>{"use strict";F.r(g),F.d(g,{default:()=>c});var B=F(477),C=F.n(B);function c(){return C()('(()=>{var e={7824:e=>{var t=1e3,s=60*t,r=60*s,n=24*r;function i(e,t,s,r){var n=t>=1.5*s;return Math.round(e/s)+" "+r+(n?"s":"")}e.exports=function(e,o){o=o||{};var a,u,c=typeof e;if("string"===c&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var o=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*n;case"hours":case"hour":case"hrs":case"hr":case"h":return o*r;case"minutes":case"minute":case"mins":case"min":case"m":return o*s;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===c&&isFinite(e))return o.long?(a=e,(u=Math.abs(a))>=n?i(a,u,n,"day"):u>=r?i(a,u,r,"hour"):u>=s?i(a,u,s,"minute"):u>=t?i(a,u,t,"second"):a+" ms"):function(e){var i=Math.abs(e);return i>=n?Math.round(e/n)+"d":i>=r?Math.round(e/r)+"h":i>=s?Math.round(e/s)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},5857:(e,t,s)=>{"use strict";function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}s.r(t),s.d(t,{__DO_NOT_USE__ActionTypes:()=>c,applyMiddleware:()=>_,bindActionCreators:()=>T,combineReducers:()=>p,compose:()=>E,createStore:()=>l,legacy_createStore:()=>h});var a="function"==typeof Symbol&&Symbol.observable||"@@observable",u=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+u(),REPLACE:"@@redux/REPLACE"+u(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+u()}};function d(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,s){var r;if("function"==typeof t&&"function"==typeof s||"function"==typeof s&&"function"==typeof arguments[3])throw new Error(o(0));if("function"==typeof t&&void 0===s&&(s=t,t=void 0),void 0!==s){if("function"!=typeof s)throw new Error(o(1));return s(l)(e,t)}if("function"!=typeof e)throw new Error(o(2));var n=e,i=t,u=[],h=u,p=!1;function f(){h===u&&(h=u.slice())}function T(){if(p)throw new Error(o(3));return i}function E(e){if("function"!=typeof e)throw new Error(o(4));if(p)throw new Error(o(5));var t=!0;return f(),h.push(e),function(){if(t){if(p)throw new Error(o(6));t=!1,f();var s=h.indexOf(e);h.splice(s,1),u=null}}}function _(e){if(!d(e))throw new Error(o(7));if(void 0===e.type)throw new Error(o(8));if(p)throw new Error(o(9));try{p=!0,i=n(i,e)}finally{p=!1}for(var t=u=h,s=0;s<t.length;s++)(0,t[s])();return e}function g(e){if("function"!=typeof e)throw new Error(o(10));n=e,_({type:c.REPLACE})}function y(){var e,t=E;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(o(11));function s(){e.next&&e.next(T())}return s(),{unsubscribe:t(s)}}})[a]=function(){return this},e}return _({type:c.INIT}),(r={dispatch:_,subscribe:E,getState:T,replaceReducer:g})[a]=y,r}var h=l;function p(e){for(var t=Object.keys(e),s={},r=0;r<t.length;r++){var n=t[r];"function"==typeof e[n]&&(s[n]=e[n])}var i,a=Object.keys(s);try{!function(e){Object.keys(e).forEach((function(t){var s=e[t];if(void 0===s(void 0,{type:c.INIT}))throw new Error(o(12));if(void 0===s(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(o(13))}))}(s)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,n={},u=0;u<a.length;u++){var c=a[u],d=s[c],l=e[c],h=d(l,t);if(void 0===h)throw t&&t.type,new Error(o(14));n[c]=h,r=r||h!==l}return(r=r||a.length!==Object.keys(e).length)?n:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function T(e,t){if("function"==typeof e)return f(e,t);if("object"!=typeof e||null===e)throw new Error(o(16));var s={};for(var r in e){var n=e[r];"function"==typeof n&&(s[r]=f(n,t))}return s}function E(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function _(){for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];return function(e){return function(){var s=e.apply(void 0,arguments),r=function(){throw new Error(o(15))},n={getState:s.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(n)}));return r=E.apply(void 0,a)(s.dispatch),i(i({},s),{},{dispatch:r})}}}},3669:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(9231)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9231:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},6930:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(9462)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9462:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},1517:(e,t,s)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const s="color: "+this.color;t.splice(1,0,s,"color: inherit");let r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(n=r))})),t.splice(n,0,s)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=s(8929)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},8929:(e,t,s)=>{e.exports=function(e){function t(e){let s,n,i,o=null;function a(...e){if(!a.enabled)return;const r=a,n=Number(new Date),i=n-(s||n);r.diff=i,r.prev=s,r.curr=n,s=n,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((s,n)=>{if("%%"===s)return"%";o++;const i=t.formatters[n];if("function"==typeof i){const t=e[o];s=i.call(r,t),e.splice(o,1),o--}return s})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(n!==t.namespaces&&(n=t.namespaces,i=t.enabled(e)),i),set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,s){const r=t(this.namespace+(void 0===s?":":s)+e);return r.log=this.log,r}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\\.\\*\\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let s;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\\s,]+/),n=r.length;for(s=0;s<n;s++)r[s]&&("-"===(e=r[s].replace(/\\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let s,r;for(s=0,r=t.skips.length;s<r;s++)if(t.skips[s].test(e))return!1;for(s=0,r=t.names.length;s<r;s++)if(t.names[s].test(e))return!0;return!1},t.humanize=s(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((s=>{t[s]=e[s]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let s=0;for(let t=0;t<e.length;t++)s=(s<<5)-s+e.charCodeAt(t),s|=0;return t.colors[Math.abs(s)%t.colors.length]},t.enable(t.load()),t}},198:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7046)),i=r(s(7771)),o=r(s(300)),a=r(s(1665)),u=r(s(1069)),c=r(s(5027)),d=r(s(9093)),l=r(s(8527)),h=r(s(4546));class p{constructor(e){this.stores={},this.ios={},this.methods={},this.publicCallbacks={},this.use=this.use.bind(this),this.tune=this.tune.bind(this),this.tuned=this.tuned.bind(this),this.untune=this.untune.bind(this),this.exe=this.exe.bind(this),this.onResponseMeAPI=this.onResponseMeAPI.bind(this),this.offResponseChAPI=this.offResponseChAPI.bind(this),this.subscribe=this.subscribe.bind(this),this.exeCallback=this.exeCallback.bind(this),this.on=this.on.bind(this),this.off=this.off.bind(this),this.webWorker=e,this.webWorker.postMessage("WS_CONSTRUCTED",{ioType:i.default.API_SETUP})}static get server(){return o.default.env===a.default.DEVELOPMENT||o.default.env===a.default.LOCALHOST?a.default.DEVELOPMENT_DOMAIN:a.default.PRODUCTION_DOMAIN}static get option(){return{forceNew:!0}}use(e){return!(!this.stores[e]||!this.ios[this.id]||(this.id=e,0))}exe(e,t){return this[e]&&"function"==typeof this[e]?(this[e](t),!0):!(!this.methods[e]||"function"!=typeof this.methods[e]||(this.methods[e](t),0))}onResponseChAPI(e){const t=(e=>t=>{const s=e(t);this.stores[this.id]&&this.stores[this.id].dispatch(s)})(c.default);this.on(e,t)}offResponseChAPI(e){this.off(e)}getIoParams(e){let t="";return Object.keys(e).forEach((s=>{if("id"===s)return;if("defaultProps"===s)return;const r=e[s];t+=`${s}=${encodeURIComponent(r)}&`})),t.replace(/&$/,"")}tune(e){if(!this.use(e.id)){this.id=e.id,this.stores[this.id]=(0,h.default)(),this.stores[this.id].subscribe(this.subscribe);const t=new l.default(e);this.stores[this.id].dispatch({...t,type:"SETUPED_API_STORE"});const s=this.getIoParams(e),r=`${i.default.HTTPS_PROTOCOL}//${p.server}:${a.default.PORTS.SOCKET_IO}?${s}`;this.ios[this.id]=(0,n.default)(r,p.option),this.ios[this.id].on("connect",this.tuned),this.onResponseChAPI(e.ch),this.onRequestAPI(),this.onResponseMeAPI()}}untune(e){const t=e&&e.id?e.id:this.id;return!!this.ios[t]&&(this.ios[t].disconnect(),delete this.ios[t],delete this.stores[t],Object.keys(this.ios).length>0&&(this.id=Object.keys(this.ios)[0]),!0)}tuned(){this.webWorker.postMessage("TUNED",{id:this.id,ioType:i.default.API_SETUP})}onRequestAPI(){const e=u.default,t=Object.keys(e),s=t.length,r=(e,t)=>(s,r=(()=>{}))=>{const n=this.stores[this.id].getState(),o=i.default.getRequestState(e,n,s),a=i.default.getRequestActionState(e,s),{requestState:u,actionState:c}=t(n,o,a);return this.publicCallbacks[u.type]=r,this.ios[this.id].emit(u.type,u),this.stores[this.id].dispatch(c)};for(let n=0;n<s;n++){const s=t[n],o=s.replace(i.default.API_TO_SERVER_REQUEST,""),a=e[s];this.methods[o]=r(s,a)}}onResponseMeAPI(){const e=(e=>t=>{const s=e(t);this.stores[this.id].dispatch(s)})(d.default);this.on(i.default.CATCH_ME_KEY,e)}on(e,t=(()=>{})){this.ios[this.id]._callbacks[`$${e}`]||this.ios[this.id].on(e,t)}off(e){this.ios[this.id]._callbacks[`$${e}`]&&this.ios[this.id].off(e)}subscribe(e){const t=this.stores[this.id].getState(),s=i.default.convertServerToApiIoType(this.id,t.app.actioned);this.exeCallback(t.app.actioned,t),this.webWorker.postMessage(t.app.actioned,{...t,ioType:s})}exeCallback(e,t){const{actionType:s,actionName:r}=i.default.getSequenceActionMap(e);if(r!==i.default.API_BROADCAST_CALLBACK&&s===i.default.API_RESPONSE_TYPE_EMIT&&this.publicCallbacks[r]){const{posts:e,thread:s,user:n}=t;this.publicCallbacks[r](t,{posts:e,thread:s,uid:n.uid})}if(s===i.default.API_RESPONSE_TYPE_BROADCAST&&this.publicCallbacks[i.default.API_BROADCAST_CALLBACK]){const{posts:e,thread:s,user:n}=t;this.publicCallbacks[i.default.API_BROADCAST_CALLBACK](r,{posts:e,thread:s,uid:n.uid})}}}t.default=p},1069:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771)),i=new(r(s(3365)).default);let o={};Object.keys(n.default.map).forEach((e=>{const t=`${n.default.API_TO_SERVER_REQUEST}${e}`;o[t]=(e,t,s)=>a[t.type]?a[t.type](e,t,s):{requestState:t,actionState:s}}));const a={post:(e,t,s)=>{const{app:r}=t;return r.isMediaCh&&(r.currentTime?t.app.inputCurrentTime=window.talknMedia.currentTime:t.app.inputCurrentTime=0),t.thread.emotions={},r.inputStampId?Object.keys(i.balances).forEach((s=>{if(i.balances[s]&&e.thread.emotions[s]){const e=i.balances[s](r.inputStampId);e&&e.forEach((e=>{const r=Object.keys(e)[0],n=i.idKeyTypes[r];t.thread.emotions[s]||(t.thread.emotions[s]={}),t.thread.emotions[s][n]||(t.thread.emotions[s][n]=0),t.thread.emotions[s][n]=e[r]}))}})):(s.app={...r},s.app.inputStampId=0,t.app.inputStampId=0),{requestState:t,actionState:s}}};t.default=o},5027:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771));t.default=e=>{const t=`${n.default.SERVER_TO_API_BROADCAST}${e.type}`;return{...e,type:t}}},9093:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7771));t.default=e=>{const t=`${n.default.SERVER_TO_API_EMIT}${e.type}`;return{...e,type:t}}},7536:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1665)),i=r(s(6926));function o(e,t){const{app:s}=e,{storageKey:r}=n.default;if(s.isRootCh){const{postsMulti:t,postsSingle:s}=e}return{state:e,props:t}}function a(e){const{app:t,thread:s,postsTimeline:r}=e,{storageKey:i}=n.default;if(t.isMediaCh){const t=r&&r.length?r.length:0;let s=[],n=[];for(let e=0;e<t;e++)0===r[e].currentTime?s.push(r[e]):n.push(r[e]);e.postsTimeline=s}return e}t.default={"SERVER_TO_API[BROADCAST]:post":o,"SERVER_TO_API[EMIT]:getMore":o,"SERVER_TO_API[EMIT]:fetchPosts":(e,t)=>({state:e,props:t}),"SERVER_TO_API[EMIT]:changeThread":(e,t)=>{const{app:s}=e,{rootCh:r}=s,{storageKey:o}=n.default;return s.dispThreadType===i.default.dispThreadTypeMulti?o.postSingle:o.postMulti,{state:e,props:t}},ON_CLICK_MENU:(e,t)=>{const{rootCh:s}=e.app;return{state:e,props:t}},RESIZE_END_WINDOW:(e,t)=>({state:e,props:t}),setStoragePosts:function(e,t){const{app:s}=e;return s.isMediaCh?{state:e=a(e),props:t}:o(e,t)},setStorageHtmlPosts:o,setStoragePostsTimeline:a}},843:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(7536)),o=r(s(6926)),a=r(s(9478)),u=r(s(8091)),c=r(s(978));t.default={updateAction:e=>t=>s=>{const r=e.getState();console.log("API",s),s&&(s.app=s.app?{...r.app,...s.app}:r.app,s.app.actioned=s.type),d[s.type]&&(s=d[s.type](r,s)),s&&t(s)}};const d={"SERVER_TO_API[EMIT]:tune":(e,t)=>{if(t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,t.app.tuned=t.thread.ch,t.app.detailCh=t.thread.ch,t.app.isRootCh=t.app.rootCh===t.thread.ch,t.app.isMediaCh=o.default.getIsMediaCh(t.thread.ch),t.app.isToggleMultistream=!1,t.thread.title=t.thread.serverMetas.title,t.thread.hasSlash=n.default.getBool(t.thread.hasSlash),t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t.app.isRootCh&&(t.app.rootTitle=t.thread.title),t.app.isMediaCh){const e=o.default.getMediaSrc(t.thread.protocol,t.thread.ch);t.app.chType=o.default.getMediaTypeFromSrc(e)}else t.app.chType=o.default.mediaTagTypeNo;return t},"SERVER_TO_API[EMIT]:fetchPosts":(e,t)=>((t={...a.default.getAnyActionPosts(t,e)}).app.offsetFindId=o.default.getOffsetFindId({posts:t.posts}),t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,t.app.isMediaCh&&(t=i.default.setStoragePostsTimeline(t)),t),"API_TO_SERVER[REQUEST]:changeThread":(e,t)=>(t.app=t.app?{...e.app,...t.app}:e.app,t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetTimelineFindId=o.default.defaultOffsetFindId,t.app.offsetMultiFindId=o.default.defaultOffsetFindId,t.app.offsetSingleFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t.app.offsetLogsFindId=o.default.defaultOffsetFindId,t.thread=t.thread?{...e.thread,...t.thread}:e.thread,t.posts=new a.default,t.postsMulti=new a.default,t.postsChild=new a.default,t.postsTimeline=new a.default,t.postsSingle=new a.default,t),"SERVER_TO_API[EMIT]:changeThread":(e,t)=>(t.app.tuned=t.thread.ch,t.thread.title=t.thread.serverMetas.title,t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[EMIT]:updateThread":(e,t)=>(t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[EMIT]:updateThreadServerMetas":(e,t)=>(t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t),"SERVER_TO_API[REQUEST]:post":(e,t)=>(t.app.inputStampId=0,t),"SERVER_TO_API[BROADCAST]:post":(e,t)=>{if(e.thread.ch===t.thread.ch&&t.thread.emotions&&Object.keys(t.thread.emotions).length>0){const s={...t.thread.emotions};t.thread.emotions={...e.thread.emotions},Object.keys(s).forEach((e=>{Object.keys(s[e]).forEach((r=>{t.thread.emotions[e][r]=t.thread.emotions[e][r]+s[e][r]}))})),t.threadDetail={...t.thread}}return t.thread.ch=e.thread.ch,t=a.default.getAnyActionPosts(t,e)},"SERVER_TO_API[EMIT]:getMore":(e,t)=>(t.app.offsetFindId=o.default.getOffsetFindId({posts:t.posts}),t.app[`offset${t.app.dispThreadType}FindId`]=t.app.offsetFindId,a.default.getAnyActionPosts(t,e)),"API_TO_SERVER[REQUEST]:changeThreadDetail":(e,t)=>(delete t.thread,t),"SERVER_TO_API[EMIT]:changeThreadDetail":(e,t)=>(t.app.detailCh=t.thread.ch,t.threads=c.default.getMergedThreads(e.threads,t.thread),t.threadDetail={...t.thread},t.threadDetail.title=t.thread.serverMetas.title,t.threadDetail.emotions={...e.threads[t.app.detailCh].emotions},t.threadDetail.hasSlash=null===t.threadDetail.hasSlash||n.default.getBool(t.threadDetail.hasSlash),delete t.thread,t.thread=t,t),CLOSE_LINKS:(e,t)=>(t.app=t.app?{...e.app,...t.app}:e.app,t.thread=t.thread?{...e.thread,...t.thread}:e.thread,t),ON_CLICK_TO_MULTI_THREAD:(e,t)=>(t.app.isLinkCh=!1,t.app.isRootCh=t.thread.ch===e.app.rootCh,e.threads[t.thread.ch]?t.thread=e.threads[t.thread.ch]:t.thread={...e.thread,...t.thread},t),ON_CLICK_TO_TIMELINE_THREAD:(e,t)=>{const s=t.thread.ch;t.thread={...e.thread,...t.thread},t.thread.ch=s;const r=o.default.getMediaSrc(t.thread.protocol,t.thread.ch);return t.thread.findType=u.default.getFindTypeFromSrc(r),t.postsTimeline=[],t.app.isMediaCh=!0,t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t},ON_CLICK_TO_SINGLE_THREAD:(e,t)=>(t.thread={...e.thread,...t.thread},t.app=e.app,t.app.isLinkCh=!1,t),ON_CLICK_TO_CHILD_THREAD:(e,t)=>(t.thread={...e.thread,...t.thread},t.postsChild=[],t.app.offsetFindId=o.default.defaultOffsetFindId,t.app.offsetChildFindId=o.default.defaultOffsetFindId,t),ON_CLICK_MENU:(e,t)=>(t.app.desc=t.ui.menuComponent,t),RESIZE_END_WINDOW:(e,t)=>(t.thread=e.thread,t),ON_CLICK_TOGGLE_DISP_DETAIL:(e,t)=>(t.threadDetail.hasSlash=null===t.threadDetail.hasSlash||n.default.getBool(t.threadDetail.hasSlash),t),TOGGLE_BUBBLE_POST:(e,t)=>(t.thread=e.thread,t),START_LINK_MEDIA:(e,t)=>(t.app.isLinkCh=!0,t),GET_CLIENT_METAS:(e,t)=>{let s=!1,{clientMetas:r}=t,{serverMetas:n}=e.thread;if(t.thread={},Object.keys(r).forEach(((e,i)=>{r[e]&&""!==r[e]&&n[e]!==r[e]&&(t.thread.serverMetas||(t.thread.serverMetas={}),s=!0,t.thread.serverMetas[e]=r[e])})),s)return t.threadDetail={...e.threadDetail},t.threadDetail.serverMetas={...t.threadDetail.serverMetas,...t.thread.serverMetas},t}}},9580:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e=[],t)=>[t.type,...e]},9300:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1534));t.default=(e=new n.default,t)=>t.analyze?e.merge(t.analyze):e},3966:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6926));t.default=(e=new n.default,t)=>t.app?new n.default(t.app):e},7157:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2169));t.default=(e=new n.default,t)=>t.bootOption?e.merge(t.bootOption):e},8262:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.reducerFiles=void 0;const n=s(5857),i=r(s(9580)),o=r(s(9300)),a=r(s(3966)),u=r(s(7157)),c=r(s(4326)),d=r(s(1169)),l=r(s(8870)),h=r(s(1731)),p=r(s(7849)),f=r(s(6739)),T=r(s(784)),E=r(s(219)),_=r(s(155)),g=r(s(1895)),y=r(s(8372)),m=r(s(1422)),S=r(s(7474)),C=r(s(3695)),P=r(s(44));t.reducerFiles={app:a.default,user:P.default,tuneCh:C.default,ranks:_.default,thread:y.default,threads:S.default,threadDetail:m.default,analyze:o.default,bootOption:u.default,setting:g.default,posts:c.default,postsTimeline:p.default,postsTimelineStock:f.default,postsTimelineZero:T.default,postsTimelineZeroAfter:E.default,postsMulti:l.default,postsSingle:h.default,postsChild:d.default,actioned:i.default},t.default=(0,n.combineReducers)(t.reducerFiles)},4326:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(9478));t.default=(e=[],t)=>t.posts?new n.default(t.posts):e},1169:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(9478));t.default=(e=[],t)=>{switch(t.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(t.postsChild&&t.postsChild.length>0&&t.thread.ch===t.postsChild[0].ch)return[...e,...t.postsChild];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsChild&&t.postsChild.length>0)return[...t.postsChild,...e]}return e}},8870:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(300)),i=r(s(9478));t.default=(e=[],t)=>{switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsMulti;case"CLIENT_TO_SERVER[EMIT]:changeThread":return new i.default;case"SERVER_TO_API[EMIT]:fetchPosts":if(t.postsMulti&&t.postsMulti.length>0&&t.app.isRootCh)return[...t.postsMulti];break;case"SERVER_TO_API[BROADCAST]:post":if(t.postsMulti&&t.postsMulti.length>0&&t.app.rootCh===t.postsMulti[0].ch)return[...e,...t.postsMulti];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsMulti&&t.postsMulti.length>0){let s=[];return e.length+t.postsMulti.length>n.default.findOneLimitCnt?(s=[...t.postsMulti,...e],s.slice(0,n.default.findOneLimitCnt)):[...t.postsMulti,...e]}}return e}},1731:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(386));t.default=(e=[],t)=>{switch(t.type){case"ON_CLICK_MULTISTREAM":return t.postsSingle;case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[BROADCAST]:post":if(t.postsSingle&&t.postsSingle.length>0)return[...e,...t.postsSingle];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsSingle&&t.postsSingle.length>0)return[...t.postsSingle,...e]}return e}},7849:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(5390));t.default=(e=[],t)=>{switch(t.type){case"API_TO_SERVER[REQUEST]:changeThread":return new n.default;case"UNMOUNT_POSTS_TIMELINE":return e.map((e=>(e.dispFlg=e.currentTime<=t.mediaCurrentTime,e)));case"CLEAR_POSTS_TIMELINE":return[...t.postsTimeline];case"SERVER_TO_API[EMIT]:fetchPosts":case"NEXT_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[...e,...t.postsTimeline];break;case"PREV_POSTS_TIMELINE":if(t.postsTimeline&&t.postsTimeline.length>0)return[...t.postsTimeline];break;case"SERVER_TO_API[BROADCAST]:post":if(t.postsTimeline&&t.postsTimeline.length>0&&t.postsTimeline[0].uid===t.user.uid&&t.postsTimeline[0].ch===t.thread.ch)return[...e,...t.postsTimeline];break;case"SERVER_TO_API[EMIT]:getMore":if(t.postsTimeline&&t.postsTimeline.length>0)return[...t.postsTimeline,...e]}return e}},6739:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1083));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineStock?[...e,t.postsTimelineStock]:e;default:return t.postsTimelineStock?new n.default(t.postsTimelineStock):e}}},784:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2342));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineZero?[...e,t.postsTimelineZero]:e;default:return t.postsTimelineZero?new n.default(t.postsTimelineZero):e}}},219:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3189));t.default=(e=[],t)=>{switch(t.type){case"SERVER_TO_API[BROADCAST]:post":case"CLEAR_POSTS_TIMELINE":return t.postsTimelineZeroAfter?[...e,t.postsTimelineZeroAfter]:e;default:return t.postsTimelineZeroAfter?new n.default(t.postsTimelineZeroAfter):e}}},155:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(9478));t.default=(e=[],t)=>{let s=[],r=0;const i=(e,s)=>e.ch===t.app.rootCh||s.ch===t.app.rootCh?0:e.liveCnt<s.liveCnt?1:e.liveCnt>s.liveCnt?-1:0;switch(t.type){case"SERVER_TO_API[EMIT]:fetchPosts":return t.app.isLinkCh?e:(s=n.default.getDispPosts(t),r=s&&s.length?s.length:0,0===r?e:e.map((e=>t.thread.ch===e.ch?{...e,favicon:s[r-1].favicon,stampId:s[r-1].stampId,post:s[r-1].post}:e)));case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":return e.map((e=>t.thread.ch===e.ch?{...e,liveCnt:t.thread.liveCnt}:e)).sort(i);case"SERVER_TO_API[BROADCAST]:post":return e.map((e=>t.posts[0].ch===e.ch?{...e,title:t.posts[0].title,stampId:t.posts[0].stampId,favicon:t.posts[0].favicon,post:t.posts[0].post}:e));case"SERVER_TO_API[EMIT]:rank":if(e&&e.length>0&&t.rank&&t.rank.length>0){const s=[],r=t.rank.length;let n=t.rank[0];for(let i=0;i<r;i++){let r=t.rank[i];n=r.updateTime>n.updateTime?r:n,r.ch===e[0].ch&&(r={...r,liveCnt:e[0].liveCnt}),s.push(r)}return s.sort(i),s[0].faicon=n.favicon,s[0].post=n.post,s[0].stampId=n.stampId,s}return t.rank?t.rank:e;default:return t.rank?t.rank:e}}},1895:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(4919));t.default=(e=new n.default,t)=>t.setting?e.merge(t.setting):e},8372:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8091));t.default=(e=new n.default({},{}),t)=>{switch(t.type){case"SETUPED_API_STORE":case"SERVER_TO_API[EMIT]:tune":case"SERVER_TO_API[EMIT]:changeThread":case"SERVER_TO_API[EMIT]:fetchPosts":case"SERVER_TO_API[EMIT]:updateThreadServerMetas":return new n.default(t.thread);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":if(e.ch===t.thread.ch)return t.thread?e.merge(t.thread):e;case"SERVER_TO_API[BROADCAST]:post":if(e.ch===t.thread.ch)return t.thread?e.merge(t.thread):e}return e}},1422:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8091));t.default=(e=new n.default({},{}),t)=>t.threadDetail?e.merge(t.threadDetail):e},7474:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(978));t.default=(e=new n.default,t)=>t.threads?e.merge(t.threads):e},3695:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2749));t.default=(e=new n.default,t)=>{switch(t.type){case"SERVER_TO_API[EMIT]:tune":return new n.default(t.thread.lastPost);case"SERVER_TO_API[BROADCAST]:tune":case"SERVER_TO_API[BROADCAST]:changeThread":case"SERVER_TO_API[BROADCAST]:disconnect":const{thread:s}=t;if(s.ch===e.ch)return{...e,liveCnt:s.liveCnt};break;case"SERVER_TO_API[BROADCAST]:post":const r=t.posts[0];if(r.ch===e.ch)return{...e,title:r.title,stampId:r.stampId,favicon:r.favicon,post:r.post}}return e}},44:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(7444));t.default=(e=new n.default,t)=>t.user?e.merge(t.user):e},8188:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){return[]}}},1534:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create({liveCnt:0})}}t.default=i},6926:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(2749)),o=r(s(8091));class a extends n.default{constructor(e={},t=""){super(),this.offsetTimelineFindId=i.default.defaultFindId,this.offsetSingleFindId=i.default.defaultFindId,this.offsetMultiFindId=i.default.defaultFindId,this.offsetChildFindId=i.default.defaultFindId,this.offsetLogsFindId=i.default.defaultFindId;const s=e.ch?e.ch:"/",r=e.id?e.id:"",u=n.default.isSet(e.isMediaCh)?e.isMediaCh:a.getIsMediaCh(s),c=!!n.default.isSet(e.isLinkCh)&&e.isLinkCh,d=e.rootCh?e.rootCh:s,l=n.default.isSet(e.isRootCh)?e.isRootCh:d===s,h=e.rootTitle?e.rootTitle:"talkn",p=a.getMediaSrc(e.protocol,s),f=a.getMediaType(p,e),T=e&&e.tuned?e.tuned:"",E=a.getDispThreadType(e,u),_=!n.default.isSet(e.multistream)||e.multistream,g=e&&e.findType?e.findType:o.default.findTypeAll,y=e&&e.offsetFindId?e.offsetFindId:a.defaultOffsetFindId,m=e&&e.offsetTimelineFindId?e.offsetTimelineFindId:a.defaultOffsetFindId,S=e&&e.offsetSingleFindId?e.offsetSingleFindId:a.defaultOffsetFindId,C=e&&e.offsetMultiFindId?e.offsetMultiFindId:a.defaultOffsetFindId,P=e&&e.offsetChildFindId?e.offsetChildFindId:a.defaultOffsetFindId,O=e&&e.offsetLogsFindId?e.offsetLogsFindId:a.defaultOffsetFindId,I=e.inputPost?e.inputPost:"",A=!!e.inputStampId&&e.inputStampId,b=e.inputCurrentTime?e.inputCurrentTime:0,R=e.inputSearch?e.inputSearch:"",v=!!n.default.isSet(e.isToggleMultistream)&&e.isToggleMultistream,M=!!n.default.isSet(e.isRankDetailMode)&&e.isRankDetailMode,D=e&&e.actioned?e.actioned:"",w=n.default.isSet(e.debug)?e.debug:"";return this.create({id:r,isRootCh:l,isLinkCh:c,isMediaCh:u,rootCh:d,rootTitle:h,chType:f,dispThreadType:E,tuned:T,multistream:_,findType:g,offsetFindId:y,offsetTimelineFindId:m,offsetSingleFindId:S,offsetMultiFindId:C,offsetChildFindId:P,offsetLogsFindId:O,inputPost:I,inputStampId:A,inputCurrentTime:b,inputSearch:R,isToggleMultistream:v,isRankDetailMode:M,actioned:D,debug:w})}static get defaultOffsetFindId(){return i.default.defaultFindId}static get dispThreadTypeTimeline(){return"Timeline"}static get dispThreadTypeSingle(){return"Single"}static get dispThreadTypeMulti(){return"Multi"}static get dispThreadTypeChild(){return"Child"}static get dispThreadTypeLogs(){return"Logs"}static get mediaTagTypeNo(){return"html"}static get mediaTagTypeAudio(){return"audio"}static get mediaTagTypeVideo(){return"video"}static get mediaTypeMp3(){return"mp3"}static get mediaTypeMp4(){return"mp4"}static get mediaTypeM4a(){return"m4a"}static get mediaChs(){return[a.mediaTypeMp3,a.mediaTypeMp4,a.mediaTypeM4a]}static get mediaChTagTypes(){return{[a.mediaTypeMp3]:a.mediaTagTypeAudio,[a.mediaTypeMp4]:a.mediaTagTypeVideo,[a.mediaTypeM4a]:a.mediaTagTypeAudio}}static getMediaType(e,t){return t&&t.chType?t.chType:a.getMediaTypeFromSrc(e)}static getMediaTypeFromSrc(e){const t=Object.keys(a.mediaChTagTypes),s=t.length;let r="html";for(let n=0;n<s;n++){const s=new RegExp(`.${t[n]}$`);if(e.match(s)){r=a.mediaChTagTypes[t[n]];break}}return r}static validInputPost(e){return!!/\\r\\n$|\\n$|\\r$/gim.test(e)&&"LAST TYPE BREAK LINE."}static validPost(e){return""===e?"NO INPUT POST":/^\\r\\n+$|\\n+$|\\r+$/g.test(e)?"ONLY NEW LINE":/^\\s+$/g.test(e)?"only space":!!/^\\r\\n+(\\s|\\S)+$|^\\n+(\\s|\\S)+$|^\\r+(\\s|\\S)+$/.test(e)&&"EMPTY POST"}static getWidth(e){return"object"==typeof window&&window.innerWidth?window.innerWidth:e.width?"string"==typeof e.width&&e.width.indexOf("px")>=0?Number(e.width.replace("px","")):e.width:0}static getHeight(e={}){return"object"==typeof window&&window.innerHeight?window.innerHeight:0}static isMediaContentType(e){return a.isAudioContentType(e)||a.isVideoContentType(e)}static isAudioContentType(e){return e.indexOf(a.mediaTagTypeAudio)>=0}static isVideoContentType(e){return e.indexOf(a.mediaTagTypeVideo)>=0}static getMediaSrc(e,t){return e+"/"+t.replace(/\\/$/,"")}static getIsMediaCh(e){return a.mediaChs.some((t=>{const s=new RegExp(`.${t}/$|.${t}$`);return e.match(s)}))}static getDispThreadType(e,t){return e&&e.dispThreadType?e.dispThreadType:t?a.dispThreadTypeTimeline:a.dispThreadTypeMulti}static getOffsetFindId({posts:e}){return e&&e[0]&&e[0]._id?e[0]._id:i.default.defaultFindId}static getStepToDispThreadType({app:e,ranks:t},s,r,n=""){let i="";const o=e&&e.dispThreadType?e.dispThreadType:a.dispThreadTypeMulti;return i=(e=a.getStepDispThreadType({app:e,ranks:t},s,r,n)).dispThreadType,{app:e,stepTo:`${o} to ${i}`}}static getStepDispThreadType({app:e,ranks:t},s={},r,n){const i=e||{};if(i.offsetFindId=a.defaultOffsetFindId,s.isMediaCh)return i.dispThreadType=a.dispThreadTypeTimeline,i.offsetFindId=i.offsetTimelineFindId?i.offsetTimelineFindId:a.defaultOffsetFindId,i.isLinkCh="Links"===n||"findMediaCh"===n||"ToMedia"===n,i.isMediaCh=!0,i;if("BackToRootCh"===n&&(i.isLinkCh=!1),"Links"===n&&t.length>0){if(!t.some((e=>e.ch===r||e.ch===r+"/")))return i.offsetFindId=a.defaultOffsetFindId,i.dispThreadType=a.dispThreadTypeChild,i.isLinkCh=!0,i}return i.rootCh===r?i.multistream?i.dispThreadType=a.dispThreadTypeMulti:i.dispThreadType=a.dispThreadTypeSingle:i.dispThreadType=a.dispThreadTypeChild,i}}t.default=a},2169:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create({...e})}static rebuildAttributes(e){let t={};return Object.keys(e).forEach((s=>{t[e[s].name]=e[s].value})),t}}t.default=i},8455:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e=[]){return super(),e=e||[],this.create(e)}}t.default=i},2749:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(300));class o extends n.default{constructor(e){super(),this.ch=o.defaultValues.ch,this.chs=o.defaultValues.chs,this.favicon=o.defaultValues.favicon,this.findType=o.defaultValues.findType,this.layer=o.defaultValues.layer,this.post=o.defaultValues.post,this.protocol=o.defaultValues.protocol,this.stampId=o.defaultValues.stampId,this.title=o.defaultValues.title,this.liveCnt=o.defaultValues.liveCnt,this.uid=o.defaultValues.uid,this.utype=o.defaultValues.utype,this.dispFlg=o.defaultValues.dispFlg,this.data=o.defaultValues.data,this.createTime=o.defaultValues.createTime,this.currentTime=o.defaultValues.currentTime,this.updateTime=o.defaultValues.updateTime;const t=e?{...o.defaultValues,...e}:o.defaultValues;return this.create(t)}static get defaultFindId(){return"000000000000000000000000"}static get defaultValues(){return{ch:"/",chs:["/"],favicon:i.default.defaultFavicon,findType:"Html",layer:1,post:"",protocol:"https:",stampId:0,title:"talkn",liveCnt:0,uid:"",utype:"",dispFlg:!0,data:null,createTime:new Date,currentTime:new Date,updateTime:new Date}}}t.default=o},5154:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},9478:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6926)),i=r(s(5154)),o=r(s(386)),a=r(s(5390)),u=r(s(1083));class c{constructor(e=[]){return e}static getDispPosts(e){const{app:t,postsTimeline:s,postsMulti:r,postsSingle:i,postsChild:o,postsLogs:a}=e;switch(t.dispThreadType){case n.default.dispThreadTypeTimeline:return s;case n.default.dispThreadTypeMulti:return r;case n.default.dispThreadTypeSingle:return i;case n.default.dispThreadTypeChild:return o;case n.default.dispThreadTypeLogs:return a}}static getAnyActionPosts(e,t){const{app:s,posts:r}=e,a=r&&r.length>0;switch(e.postsMulti=new i.default,e.postsSingle=new o.default,e.postsChild=[],e.postsLogs=[],s.dispThreadType){case n.default.dispThreadTypeTimeline:e=c.getAnyActionPostsTimeline(e,r,t,a);break;case n.default.dispThreadTypeMulti:e.postsMulti=a?r:[];break;case n.default.dispThreadTypeSingle:e.postsSingle=a?r:[];break;case n.default.dispThreadTypeChild:e.postsChild=a?r:[];break;case n.default.dispThreadTypeLogs:e.postsLogs=a?r:[]}return e}static getAnyActionPostsTimeline(e,t,s,r){if("SERVER_TO_API[BROADCAST]:post"===e.type)e.postsTimeline=new a.default,e.postsTimeline.push(e.posts[0]);else if("SERVER_TO_API[EMIT]:fetchPosts"===e.type&&(e.postsTimeline=new a.default,e.postsTimelineStock=new u.default,r)){const s=t.length;for(let r=0;r<s;r++)0===t[r].currentTime?e.postsTimeline.push(t[r]):e.postsTimelineStock.push(t[r])}return e}}t.default=c},386:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},5390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},1083:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},2342:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},3189:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},8207:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e=[]){return e}}},4919:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){super();const t=e&&e.client?e.client:{},s=e&&e.common?e.common:{},r=e&&e.server?e.server:{};return this.create({client:t,common:s,server:r})}}t.default=i},8091:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(7771)),o=r(s(300)),a=r(s(6926));class u extends n.default{constructor(e={},t){super(),this.chs=["/"],this.protocol=i.default.TALKN_PROTOCOL,this.charset="UTF-8",this.host="",this.favicon=u.getDefaultFavicon(),this.findType=u.findTypeAll,this.title=u.getDefaultTitle(),this.metas=[],this.emotions={},this.serverMetas={},this.clientMetas={},this.links=[],this.h1s=[],this.audios=[],this.videos=[],this.layer=u.getLayer(),this.mediaIndex=[],this.postCnt=0,this.multiPostCnt=0,this.isSelfCh=!1,this.createTime="",this.updateTime="";const s=u.isWindowObj(e)?u.constructorFromWindow(e,t):e;return this.create(s)}static get findTypeAll(){return"All"}static get findTypeHtml(){return"Html"}static get findTypeMusic(){return"Music"}static get findTypeVideo(){return"Video"}static get findTypeOther(){return"Other"}static get findTypes(){return{[u.findTypeHtml]:["text/html"],[u.findTypeMusic]:["audio","audio/mpeg","audio/mp4","audio/x-wav","audio/midi","application/x-smaf"],[u.findTypeVideo]:["video","video/mpeg","video/mp4","video/quicktime","video/x-ms-wmv","application/x-shockwave-flash","video/3gpp2"]}}static getDefaultTitle(){return"talkn"}static getDefaultFavicon(){return`https://${o.default.assetsURL}/favicon.ico`}static isWindowObj(e){return!!e.alert}static constructorFromWindow(e,t){const s=!!t.ch&&t.ch,r=u.getCh(t);let i={};return i.ch=r,i.chs=["/"],i.hasSlash=!!t.hasslash&&n.default.getBool(t.hasslash),i.protocol="talkn:",i.contentType="",i.charset="UTF-8",i.host="",i.favicon=u.getDefaultFavicon(),i.findType=u.findTypeAll,s?(i.protocol=u.getProtocol(s),i.host=u.getHost(s),i.chs=s.chs&&s.chs.length>0?s.chs:u.getChs(r)):(i.protocol=location.protocol?location.protocol:"????:",i.chs=e.chs&&e.chs.length>0?e.chs:u.getChs(r),i.contentType=document.contentType?document.contentType:"",i.charset=document.charset?document.charset:"",i.host=location.host?location.host:"",i.favicon=u.getFaviconFromWindow(window)),i.title=u.getDefaultTitle(),i.metas=[],i.serverMetas={},i.clientMetas={},i.emotions={},i.links=[],i.h1s=[],i.audios=[],i.videos=[],i.layer=u.getLayer(i.ch),i.mediaIndex=[],i.postCnt=0,i.multiPostCnt=0,i.isSelfCh=u.getIsSelfCh("",i.ch),i.createTime="",i.updateTime="",i}static getCh(e){return e&&e.ch&&""!==e.ch?e.ch:"/"}static getChTop(e){return""!==e?"/"+e.split("/")[1]:""}static getChs(e){let t=["/"];if(""!==e){const r="/"===e.slice(-1)?e:e+"/";if("/"!==r){const e=r.split("/"),n=e.length;let i="";for(var s=1;s<n;s++)""!==e[s]&&(i+=e[s],i="/"===i.slice(-1)?i:i+"/",i="/"===i.slice(0,1)?i:"/"+i,t.push(i))}}return t}static getHost(e){return e.indexOf(".")>=0?(e=e.replace("https://","").replace("http://","")).replace(/^\\//,"").replace(/\\/.*$/,""):o.default.domain}static getProtocol(e){return e.indexOf("http:")>=0?"http:":e.indexOf("https:")>=0?"https:":location&&location.protocol?location.protocol:"????:"}static getIsSelfCh(e,t){return e.replace("http:/","").replace("https:/","").replace(/\\u002f$/,"")===t}static getLayer(e="/"){return e.split("/").length-1}static getMediaSrc(e){return a.default.getMediaSrc(e.protocol,e.ch)}static getMediaTagType(e){const t=u.getMediaSrc(e);return a.default.getMediaType(t,null)}static getFaviconFromWindow(e){if(e&&e.document){const t=e.document.evaluate("//link[contains(@rel,\'icon\')or(contains(@rel,\'ICON\'))][1]/@href",e.document,null,2,null).stringValue,s="http://",r="https://",n=location.host;if(t.indexOf(s)||t.indexOf(r)){const e=s+n+(t||"/favicon.ico");return 1==e.split("//").length-1?e:t}return t}return""}static getStatus(e,t,s){let r={dispType:"",isCreate:!1,isRequireUpsert:!1,isMultistream:!1,isMediaCh:!1,isToggleMultistream:!1,getMore:!1};return r.isCreate=u.getStatusCreate(s),r.isRequireUpsert=u.getStatusIsRequireUpsert(e,r.isCreate),r.isMultistream=u.getStatusIsMultistream(t),r.isToggleMultistream=u.getStatusIsToggleMultistream(t),r.isMediaCh=u.getStatusIsMediaCh(e.ch),r}static getStatusCreate(e){return!e}static getStatusIsRequireUpsert(e,t=!1){if(!t)return!0;if(e.updateTime){const t=e.updateTime.getTime?e.updateTime.getTime():e.updateTime,s=new Date,r=s.getFullYear(),n=s.getMonth(),i=s.getDate(),a=s.getHours();return s.getMinutes(),t<new Date(r,n,i,a-o.default.findOneThreadActiveHour).getTime()}return!1}static getStatusIsMultistream(e){return void 0===e||void 0===e.dispThreadType||e.dispThreadType===a.default.dispThreadTypeMulti&&e.multistream}static getStatusIsMediaCh(e){return a.default.getIsMediaCh(e)}static getStatusIsToggleMultistream(e){return void 0!==e&&void 0!==e.actioned&&e.isToggleMultistream}static getContentTypeFromFindType(e){const t=u.findTypes[u.findTypeHtml],s=u.findTypes[u.findTypeMusic],r=u.findTypes[u.findTypeVideo];let n;if(e&&""!==e){let i="";e.indexOf(";")>0&&(i=e.split(";")[0]),(t.includes(e)||t.includes(i))&&(n=u.findTypeHtml),(s.includes(e)||s.includes(i))&&(n=u.findTypeMusic),(r.includes(e)||r.includes(i))&&(n=u.findTypeVideo)}return n}static getFindTypeFromSrc(e){const t=a.default.getMediaTypeFromSrc(e);return t.charAt(0).toUpperCase()+t.slice(1)}}t.default=u},978:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i extends n.default{constructor(e={}){return super(),this.create(e)}static getMergedThreads(e,t){return e[t.ch]={...t},e}}t.default=i},7444:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216)),i=r(s(2749));class o extends n.default{static get defaultOffsetFindId(){return i.default.defaultFindId}constructor(e={}){super();const t=e&&e.uid?e.uid:"",s=e&&e.utype?e.utype:"",r=e&&e.tuned?e.tuned:"",n=!(!e||!e.multistreamed)&&e.multistreamed,i=e&&e.actioned?e.actioned:"",a=e&&e.offsetFindId?e.offsetFindId:o.defaultOffsetFindId,u=e&&e.offsetSingleFindId?e.offsetSingleFindId:o.defaultOffsetFindId,c=e&&e.offsetMultiFindId?e.offsetMultiFindId:o.defaultOffsetFindId,d=e&&e.offsetChildFindId?e.offsetChildFindId:o.defaultOffsetFindId,l=e&&e.offsetLogsFindId?e.offsetLogsFindId:o.defaultOffsetFindId;return e.requestLoginType&&e.requestLoginType,this.create({uid:t,utype:s,tuned:r,multistreamed:n,actioned:i,offsetFindId:a,offsetSingleFindId:u,offsetMultiFindId:c,offsetChildFindId:d,offsetLogsFindId:l,friends:[]})}static getOffsetFindId({posts:e}){return e&&e[0]&&e[0]._id?e[0]._id:i.default.defaultFindId}static getHref(e={}){return"undefined"!=typeof window&&window.location&&window.location.href,e&&e.href?e.href:"/"}}t.default=o},4546:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(5857),i=r(s(843)),o=r(s(8262));t.default=function(e={}){let t=[i.default.updateAction];return(0,n.createStore)(o.default,e,(0,n.applyMiddleware)(...t))}},8527:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8188)),i=r(s(1534)),o=r(s(6926)),a=r(s(8455)),u=r(s(9478)),c=r(s(5390)),d=r(s(1083)),l=r(s(8207)),h=r(s(8091)),p=r(s(7444));class f{constructor(e,t={}){this.bootOption=e,this.ranks=new l.default,this.menuLogs=new a.default(t.menuLogs),this.posts=new u.default,this.postsMulti=new u.default,this.postsSingle=new u.default,this.postsChild=new u.default,this.postsTimeline=new c.default,this.postsTimelineStock=new d.default,this.postsLogs=new u.default,this.analyze=new i.default,this.thread=new h.default(this.bootOption,t.thread),this.threadDetail=new h.default(this.bootOption,t.thread),this.app=new o.default(f.getAppParams(this.thread,this.bootOption,t)),this.user=new p.default(f.getUserParams(this,t)),this.actionLog=new n.default}static getAppParams(e,t,s){return{isTransition:!0,rootTitle:e.title,...t,...e}}static getUserParams(e,t){return t&&t.user&&t.user.uid?{...t.user}:{dispThreadType:e.thread.ch===e.app.rootCh?o.default.dispThreadTypeMulti:o.default.dispThreadTypeSingle}}get ch(){return this.thread.ch}}t.default=f},8421:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1223)),i=r(s(7771)),o=r(s(198));class a{constructor(e){this.onMessage=this.onMessage.bind(this),this.onMessageError=this.onMessageError.bind(this),this.postMessage=this.postMessage.bind(this),this.worker=e,this.worker.onerror=this.onMessageError,this.worker.onmessage=this.onMessage,this.ws=new o.default(this)}postMessage(e,t={},s){const r={id:this.id,type:n.default.WSAPI_TO_CLIENT_TYPE,ioType:i.default.API_SETUP,method:e,params:t,methodBack:s};this.worker.postMessage(r)}onMessage(e){const{id:t,type:s,ioType:r,method:i,params:o}=e.data;s===n.default.CLIENT_TO_WSAPI_TYPE&&this.ws.exe(i,o)}onMessageError(e){console.warn(e)}}t.default=a,new a(self)},1223:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HandleRequestMethod=t.HandleMessageMethod=void 0;const n=r(s(7771));t.default=class{static get HANDLE_CLIENT_AND_WSAPI(){return"HANDLE_CLIENT_AND_WSAPI"}static get WSAPI_TO_CLIENT_TYPE(){return"WSAPI_TO_CLIENT_TYPE"}static get CLIENT_TO_WSAPI_TYPE(){return"CLIENT_TO_WSAPI_TYPE"}static get HANDLE_API_AND_CLIENT(){return"HANDLE_API_AND_CLIENT"}static get API_TO_CLIENT_TYPE(){return"API_TO_CLIENT_TYPE"}static get CLIENT_TO_API_TYPE(){return"CLIENT_TO_API_TYPE"}static get HANDLE_EXT_AND_API(){return"HANDLE_EXT_AND_API"}static get MEDIA_TO_CLIENT_TYPE(){return"MEDIA_TO_CLIENT_TYPE"}static get EXT_TO_API_TYPE(){return"EXT_TO_API_TYPE"}static get HANDLE_EXT_AND_CLIENT(){return"handleExtAndClient"}static get CLIENT_TO_EXT_TYPE(){return"CLIENT_TO_EXT_TYPE"}static get EXT_TO_CLIENT_TYPE(){return"EXT_TO_CLIENT_TYPE"}static get HANDLE_MEDIA_SERVER_AND_MEDIA_CLIENT(){return"handleMediaServerAndMediaClient"}static get MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE(){return"MEDIA_SERVER_TO_MEDIA_CLIENT_TYPE"}static get MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE(){return"MEDIA_CLIENT_TO_MEDIA_SERVER_TYPE"}static convertApiToClientActionType(e){return 0===e.indexOf(n.default.API_TO_SERVER_REQUEST)?e.replace(n.default.API_TO_SERVER_REQUEST,n.default.API_TO_CLIENT_REQUEST):0===e.indexOf(n.default.SERVER_TO_API_EMIT)?e.replace(n.default.SERVER_TO_API_EMIT,n.default.API_TO_CLIENT_EMIT):0===e.indexOf(n.default.SERVER_TO_API_BROADCAST)?e.replace(n.default.SERVER_TO_API_BROADCAST,n.default.API_TO_CLIENT_BROADCAST):`API_TO_CLIENT[ACTION]:${e}`}static getMessageTypes(e){const t=e.split(":");return{ioType:t[0].split("[")[1].replace("]",""),exeMethod:t[1]}}static convertExtToClientActionType(e){return`EXT_TO_CLIENT[ACTION]:${e}`}},t.HandleMessageMethod="handle",t.HandleRequestMethod="handle"},1216:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e={}){}static getType(e){return null===e?"Null":void 0===e?"Undefined":e.constructor.name}static isSet(e){return"Undefined"!==s.getType(e)&&"Null"!==s.getType(e)}static getBool(e){return"boolean"==typeof e?e:"true"===e}static isAnonymousFunc(e){const t=e.toString();return"function(){}"===t||"function() {}"===t||"function (){}"===t||"function () {}"===t||"()=>{}"===t}create(e){const t=this.constructor.name;return s.getType(e),Object.keys(e).forEach((r=>{let n,i,o=null,a=!1,u=!1,c=()=>{},d=null;if("Object"===s.getType(e[r])){n=e[r];let t=0===Object.keys(n).length;a=n.isAcceptNull?n.isAcceptNull:a,u=n.isAcceptBlank?n.isAcceptBlank:u,o=!t&&n.def?n.def:o,d=t||!n.value&&""!==n.value?n:n.value,d=t&&o?o:d,i=s.getType(d),c=n.valid?n.valid:c}else d=e[r],o=d,a=a,u=u,i=s.getType(d),c=c;const l=e=>{let n=null;const o=`${t}.${r}`,l=d,h=i,p=e,f=s.getType(e);return f!==i&&(n=`SCHEMA_TYPE : ${o} [validType: ${i}][paramsType: ${f}]`),a&&null===e&&(n=`SCHEMA_IS_ACCEPT_NULL :  ${o}`),u&&""===e&&(n=`SCHEMA_IS_ACCEPT_BLANK :  ${o}`),"Function"===s.getType(c)&&c(e)&&(n=`SCHEMA_YOUR_VALID_METHOD :  ${o}`),{pointer:o,validValue:l,validType:h,paramsValue:p,paramsType:f,error:n}},{pointer:h,validValue:p,validType:f,paramsValue:T,paramsType:E,error:_}=l(d);if(null===_)Object.defineProperty(this,r,{get:()=>d,set:e=>{const t=l(d);if(null===_)return d=e,{...this,[r]:d};throw this.validWarn(t),_},enumerable:!0,configurable:!0});else{if(this.errorThrow)throw _;console.warn(_)}})),this}canSet(e,t){try{const s=this[e];if(void 0===s)return!0;if(null===s)return!0;if(void 0===t)return!0;if(null===t)return!0;const{error:r}=this[e]=t;return!r&&(this[e]=s,!0)}catch(s){throw console.warn("BAD CAN SET KEY: "+this.constructor.name+" "+e),console.warn("BEFOER VALUE"),console.warn(typeof this[e]),console.warn(this[e]),console.warn("AFTER VALUE"),console.warn(typeof t),console.warn(t),`BAD CAN SET: ${s}`}}merge(e={},t=!0){try{const r=s.getType(e),n=Object.keys(e);if(n.length>0){let s={...this};return n.forEach((t=>{this[t]!==e[t]&&(this.canSet(t,e[t])?s[t]=e[t]:console.warn("BAD MERGE A : "+t+" "+e[t]+" "+typeof e[t]))})),"Array"===r?(s=Object.values(s),t?new this.constructor(s):s):t?new this.constructor(s):s}return new this.constructor}catch(t){if(this.errorThrow)throw console.warn(e),console.warn(t),`BAD MERGE B : ${s.getType(e)} ${t}`;return console.warn(e),console.warn(t),console.warn(`BAD MERGE C : ${s.getType(e)} ${t}`),e}}toJSON(e=this){let t={};return Object.keys(e).forEach((s=>{let r=e[s];"Object"===r.constructor.name&&(r.type||r.default||(r=this.toJSON(r))),r.default||""===r.default||0===r.default?t[s]=r.default:t[s]=r})),t}forEach(e){return Object.values(this).forEach(e)}concat(e){return this.returnImmutable(Object.values(this).concat(e),e)}map(e){return this.returnImmutable(Object.values(this).map(e),e)}filter(e){return this.returnImmutable(Object.values(this).filter(e),e)}reduce(e){return this.returnImmutable(Object.values(this).reduce(e),e)}find(e){return Object.values(this).find(e)}sort(e){return Object.values(this).sort(e)}push(e){const t=Object.values(this);return t.push(e),this.returnImmutable(t)}unshift(e){const t=Object.values(this);return t.unshift(e),this.returnImmutable(t)}getShift(){const e=Object.values(this).shift();return this.returnImmutable(e)}pop(e){const t=Object.values(this);return t.pop(e),this.returnImmutable(t)}returnImmutable(e,t=(()=>{})){return void 0===e?new this.constructor:0===e.length&&0===Object.keys(this).length?String(t).indexOf("createElement")>0?[]:new this.constructor(e):e[0]&&e[0].$$typeof&&"Symbol"===e[0].$$typeof.constructor.name?e:new this.constructor(e)}validWarn(e){console.warn("##########################"),console.warn("#"+e.pointer),console.warn("##########################"),console.warn("### initializedValidType"),console.warn(e.validType),console.warn("### initializedValidValue"),console.warn(e.validValue),console.warn("### paramsType"),console.warn(e.paramsType),console.warn("### paramsValue"),console.warn(e.paramsValue),console.warn("##########################")}}t.default=s},7771:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1216));class i{static get TALKN_PROTOCOL(){return"talkn:"}static get HTTP_PROTOCOL(){return"http:"}static get HTTPS_PROTOCOL(){return"https:"}static get UNKNOWN_PROTOCOL(){return"????:"}static get CATCH_ME_KEY(){return"@CATCH_ME"}static get API_SEPARATE_IO_TYPE_START(){return"["}static get API_SEPARATE_IO_TYPE_END(){return"]"}static get API_REQUEST_TYPE(){return"REQUEST"}static get API_RESPONSE_TYPE_EMIT(){return"EMIT"}static get API_RESPONSE_TYPE_BROADCAST(){return"BROADCAST"}static get API_SETUP(){return"API_SETUP"}static get UNKNOWN(){return"UNKNOWN"}static get CONNECTION_SERVER_KEY(){return"CONNECTION_SERVER"}static get API_TO_SERVER_REQUEST(){return`API_TO_SERVER[${i.API_REQUEST_TYPE}]${i.METHOD_COLON}`}static get SERVER_TO_API_EMIT(){return`SERVER_TO_API[${i.API_RESPONSE_TYPE_EMIT}]${i.METHOD_COLON}`}static get SERVER_TO_API_BROADCAST(){return`SERVER_TO_API[${i.API_RESPONSE_TYPE_BROADCAST}]${i.METHOD_COLON}`}static get API_TO_CLIENT_REQUEST(){return`API_TO_CLIENT[${i.API_REQUEST_TYPE}]${i.METHOD_COLON}`}static get API_TO_CLIENT_EMIT(){return`API_TO_CLIENT[${i.API_RESPONSE_TYPE_EMIT}]${i.METHOD_COLON}`}static get API_TO_CLIENT_BROADCAST(){return`API_TO_CLIENT[${i.API_RESPONSE_TYPE_BROADCAST}]${i.METHOD_COLON}`}static get API_BROADCAST_CALLBACK(){return"tune"}static get REDUX_ACTION_KEY(){return"type"}static get METHOD_COLON(){return":"}static get ADD_CLIENT_ACTION_PREFIX(){return"API_TO_CLIENT"}static get map(){return{tune:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{user:["uid"],setting:"*",thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},fetchPosts:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"],app:["multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{posts:"*",thread:"*"},responseBroadcastState:{}},getMore:{requestPublicState:{},requestPrivateState:{thread:["ch"],app:["multistream","dispThreadType","offsetFindId"]},responseEmitState:{app:["dispThreadType","offsetFindId"],posts:"*"},responseBroadcastState:{}},updateThread:{requestPublicState:{},requestPrivateState:{thread:["ch","protocol","host","hasSlash"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},changeThread:{requestPublicState:{},requestPrivateState:{thread:["ch","hasSlash","protocol"],app:["tuned","multistream","rootCh","dispThreadType","actioned","offsetFindId","isToggleMultistream"]},responseEmitState:{thread:"*"},responseBroadcastState:{thread:["liveCnt","ch"]}},changeThreadDetail:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},addFindChild:{requestPublicState:{},requestPrivateState:{thread:["ch"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},rank:{requestPublicState:{},requestPrivateState:{app:["findType","rootCh","isRankDetailMode"]},responseEmitState:{rank:"*"},responseBroadcastState:{}},post:{requestPublicState:{},requestPrivateState:{user:["uid","utype"],app:["inputPost","inputStampId","inputCurrentTime","dispThreadType"],thread:["findType","title","protocol","ch","chs","emotions","favicon","contentType"]},responseEmitState:{},responseBroadcastState:{posts:"*",thread:["ch","emotions","postCnt"],user:["uid"]}},updateThreadServerMetas:{requestPublicState:{thread:["serverMetas"]},requestPrivateState:{thread:["host","protocol","ch"],user:["uid"]},responseEmitState:{thread:"*"},responseBroadcastState:{}},disconnect:{requestPublicState:{},requestPrivateState:{},responseEmitState:{},responseBroadcastState:{thread:["liveCnt","ch"]}}}}static getSequenceActionMap(e){const t=e.split(i.METHOD_COLON),s=t[0].split("[")[0];let r;return r=t[0].indexOf(`[${i.API_REQUEST_TYPE}]`)>0?i.API_REQUEST_TYPE:t[0].indexOf(`[${i.API_RESPONSE_TYPE_EMIT}]`)>0?i.API_RESPONSE_TYPE_EMIT:i.API_RESPONSE_TYPE_BROADCAST,{sequence:s,actionType:r,actionName:t[1]}}static updateCallbackExeConditionMap(e){let t={emit:!0,broadcast:!0};return i.map[e]&&(t.emit=!(Object.keys(i.map[e].responseEmitState).length>0),t.broadcast=!(Object.keys(i.map[e].responseBroadcastState).length>0)),t}static convertServerToApiIoType(e,t){return t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_REQUEST_TYPE}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_REQUEST_TYPE:t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_RESPONSE_TYPE_BROADCAST}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_RESPONSE_TYPE_BROADCAST:t.indexOf(`${i.API_SEPARATE_IO_TYPE_START}${i.API_RESPONSE_TYPE_EMIT}${i.API_SEPARATE_IO_TYPE_END}`)>=0?i.API_RESPONSE_TYPE_EMIT:i.API_SETUP}static convertExtToClientActionType(e,t){return i.convertApiToClientActionType(t)}static convertApiToClientActionType(e){return 0===e.indexOf(i.API_TO_SERVER_REQUEST)?e.replace(i.API_TO_SERVER_REQUEST,i.API_TO_CLIENT_REQUEST):0===e.indexOf(i.SERVER_TO_API_EMIT)?e.replace(i.SERVER_TO_API_EMIT,i.API_TO_CLIENT_EMIT):0===e.indexOf(i.SERVER_TO_API_BROADCAST)?e.replace(i.SERVER_TO_API_BROADCAST,i.API_TO_CLIENT_BROADCAST):e}static getRequestState(e,t,s){const r=e.replace(i.API_TO_SERVER_REQUEST,""),{requestPublicState:o,requestPrivateState:a}=i.map[r];let u={[i.REDUX_ACTION_KEY]:r};return Object.keys(a).forEach((e=>{u[e]||(u[e]={}),a[e].forEach((r=>{if(!u[e][r]){let i=t[e][r];s&&s[e]&&n.default.isSet(s[e][r])&&(i=s[e][r]),u[e][r]=i}}))})),Object.keys(o).forEach((e=>{u[e]||(u[e]={}),o[e].forEach((t=>{u[e][t]||(u[e][t]=s)}))})),u}static getResponseState(e,t,s){const r=t.type,n=i.map[r][`response${e}State`];let o={[i.REDUX_ACTION_KEY]:r};return Object.keys(n).forEach((e=>{if(!s[e])throw`SEQUENCE ERROR: NO_UPDATE_STATE_KEY: ${t.type}: ${e}`;{const r=n[e];let i=s[e];switch(i.constructor.name){case"model":i=i.toJSON(),delete i._id,delete i.__v}"*"===r?o={...o,[e]:i}:r.forEach((r=>{if(void 0===s[e][r])throw`SEQUENCE ERROR: NO_UPDATE_STATE_COLUMN_NAME: ${t.type}: ${e}.${r}`;o={...o,[e]:{...o[e],[r]:s[e][r]}}}))}})),o}static getRequestActionState(e,t=null,s=null){return"string"==typeof t&&null===s?{type:e}:"object"==typeof t&&"object"==typeof s?{...t,...s,type:e}:"string"==typeof t&&"object"==typeof s?{...s,type:e}:{...t,type:e}}}t.default=i},300:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(6894)),i=r(s(8399)),o=r(s(1665)),{PRODUCTION:a,DEVELOPMENT:u,PRODUCTION_DOMAIN:c,DEVELOPMENT_DOMAIN:d,SUB_DOMAINS:l,PORTS:h}=o.default,p=n.default.hasOwnProperty("hostname")?n.default.hostname():d,f=function(e){if("browser"===i.default.title){if(location.href.indexOf(o.default.DEVELOPMENT_DOMAIN)>=0){const e=Number(location.port);return e===o.default.PORTS.DEVELOPMENT_CLIENT||e===o.default.PORTS.DEVELOPMENT_API||e===o.default.PORTS.DEVELOPMENT_COVER||e===o.default.PORTS.DEVELOPMENT_COMPONENTS||e===o.default.PORTS.DEVELOPMENT_TUNE?o.default.DEVELOPMENT:o.default.LOCALHOST}return o.default.PRODUCTION}return e.indexOf(o.default.AWS_HOST_KEY)>=0?o.default.PRODUCTION:o.default.DEVELOPMENT}(p),T={client:"talkn.client.js",api:"talkn.api.js",wsWorker:"ws.api.worker.js",ext:"talkn.ext.js",cover:"talkn.cover.js",tune:"talkn.tune.js",components:"talkn.components.js"},E=f===u,_=f===a?c:d,g=`${l.WWW}.${_}`,y=`${l.COVER}.${_}`,m=`${l.API}.${_}`,S=E?`${_}:${h.DEVELOPMENT_API}/${T.api}`:`${m}/v1`,C=E?`${_}:${h.DEVELOPMENT_CLIENT}/${T.client}`:`${l.CLIENT}.${_}`,P=`${l.DESC}.${_}`,O=`${l.PORTAL}.${_}`,I=`${l.ASSETS}.${_}`,A=`${l.AUTO}.${_}`,b=`${l.EXT}.${_}`,R=`${l.COMP}.${_}`,v=`${l.OWN}.${_}`,M=`${l.NEWS}.${_}`,D=`${l.TUNE}.${_}`,w=`${l.COMPONENTS}.${_}`,L=`${I}/img/`,F={domain:_,isDev:E,env:f,files:T,hostName:p,apiURL:m,apiAccessURL:S,coverURL:y,wwwURL:g,descURL:P,portalURL:O,clientURL:C,assetsURL:I,autoURL:A,extURL:b,compURL:R,ownURL:v,newsURL:M,tuneURL:D,bannerURL:`${l.BANNER}.${_}`,componentsURL:w,transactionURL:`${l.TRANSACTION}.${_}`,assetsImgPath:L,assetsCoverPath:`${I}/cover/`,assetsIconPath:`${I}/icon/`,assetsJsPath:`${I}/js/`,sessionURL:`${l.SESSION}.${_}`,description:"talkn can share comments with users watching the same WEB page. Please enjoy the world of talkn.",apiVer:1,lpLanguages:["en","zh","ja","de","fr","hi","pt","it","ru","ko","es","id","tr","nl","ar","zh-TW","pl","sv","th","fa","nn","ga","he","mr"],defaultBirthdayUnixtime:1e12,findOneThreadActiveHour:1,findOnePostCnt:30,findOneLimitCnt:300,ogpImages:{Html:`//${L}talkn_logo_html.png`,Music:`//${L}talkn_logo_music.png`,Video:`//${L}talkn_logo_video.png`},defaultFavicon:`//${l.ASSETS}.${_}/favicon.ico`};t.default={...F}},1665:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(8399)),i={APP_NAME:"talkn",PRODUCTION:"PRODUCTION",LOCALHOST:"LOCALHOST",DEVELOPMENT:"DEVELOPMENT",PRODUCTION_IP:n.default.env.HOSTNAME?n.default.env.HOSTNAME:"localhost",PRODUCTION_DOMAIN:"talkn.io",DEVELOPMENT_DOMAIN:"localhost",AWS_HOST_KEY:"ec2.internal",PORTS:{HTTP:80,HTTPS:443,DEVELOPMENT_COVER:8e3,DEVELOPMENT_API:8001,DEVELOPMENT_COMPONENTS:8002,DEVELOPMENT_TUNE:8003,DEVELOPMENT_CLIENT:8080,REDIS:6379,MONGO:27017,SOCKET_IO:10443},SUB_DOMAINS:{WWW:"www",API:"api",DESC:"desc",PORTAL:"portal",CLIENT:"client",ASSETS:"assets",SESSION:"session",AUTO:"auto",OWN:"own",NEWS:"news",BANNER:"banner",COVER:"cover",RANK:"rank",EXT:"ext",COMPONENTS:"components",TUNE:"tune",TRANSACTION:"transaction"},APP_TYPES:{CLIENT:"CLIENT",PORTAL:"PORTAL",EXTENSION:"EXTENSION",API:"API",COVER:"COVER",COMPONENTS:"COMPONENTS",TUNE:"TUNE"},URL:{twitter:"https://twitter.com/",facebook:"https://www.facebook.com/",appstore:"https://itunes.apple.com/app/id",playstore:"https://play.google.com/store/apps/details?id=",chromeExtension:"https://chrome.google.com/webstore/detail/talkn-for-chrome/dkngnmdlcofambpfaccepbnjgfholgbo?hl=en"},talknClientJs:"talkn.client.js",talknApiJs:"talkn.api.js",talknRankJs:"talkn.rank.js",noInnerNotif:"Sorry, No Function.",bannerClass:"talkn_banner",storageKey:{baseKey:"@talkn@",postsTimelineZero:"postsTimelineZero",postsTimeline:"postsTimeline",postsSingle:"postsSingle",postsMulti:"postsMulti",postsChild:"postsChild",postsLogs:"postsLogs",threads:"threads"}};t.default=i},3365:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(1025));class i{constructor(e=""){this.belongCoverTypes={},this.idKeyTypes={},this.typesArray=[],Object.keys(i.inputs).forEach((e=>{i.inputs[e].forEach((t=>{this.belongCoverTypes[t]=e}))})),Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(e);const t=i.TYPES[e];this.idKeyTypes[t.ID]=t.LABEL})),this.model=n.default,this.balances={plain:n.default.Plain.getSaveBalance,russell:n.default.Russell.getSaveBalance,russellSimple:n.default.RussellSimple.getSaveBalance}}static get defaultModelKey(){return"russellSimple"}static get TYPES(){return{LIKE:{ID:1,LABEL:"Like"},INTEREST:{ID:1002,LABEL:"Interest"},DISCOVERY:{ID:1003,LABEL:"Discovery"},SUNNY:{ID:1004,LABEL:"Sunny"},PEACE:{ID:1005,LABEL:"Peace"},CHEER:{ID:1006,LABEL:"Cheer"},MONEY:{ID:1007,LABEL:"Money"},UNLIKE:{ID:2001,LABEL:"Unlike"},LOVE:{ID:3e3,LABEL:"Love"},SUPRISE:{ID:10001,LABEL:"Surprise"},EXCITE:{ID:10002,LABEL:"Excite"},HAPPY:{ID:10003,LABEL:"Happy"},JOY:{ID:10004,LABEL:"Joy"},GLAD:{ID:20001,LABEL:"Glad"},SATISFACTION:{ID:20002,LABEL:"Satisfaction"},COMFORT:{ID:30001,LABEL:"Comfort"},RELAX:{ID:30002,LABEL:"Relax"},TIRED:{ID:30003,LABEL:"Tired"},SLEEPY:{ID:50001,LABEL:"Sleepy"},SLACK:{ID:60001,LABEL:"Slack"},BORING:{ID:60002,LABEL:"Boring"},MELANCHOLY:{ID:70001,LABEL:"Melancholy"},SAD:{ID:70002,LABEL:"Sad"},UNPLEASANT:{ID:70003,LABEL:"Unpleasant"},FRUSTRATED:{ID:70004,LABEL:"Frustrated"},DISSATISFIED:{ID:80001,LABEL:"Dissatisfied"},ANGER:{ID:80002,LABEL:"Anger"},WORRY:{ID:80003,LABEL:"Worry"},FEAR:{ID:80004,LABEL:"Fear"},WORRY_FEAR:{ID:80005,LABEL:"Worry&Fear"}}}static getGraphMaxNum(e=i.defaultModelKey,t=0,s=!0){let r=0,n={};switch(e){case"plain":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10};break;case"russellSimple":n={6:5,10:5,20:5,30:5,50:5};break;case"russell":n={1:1,5:2,10:3,30:4,70:5,100:6,250:7,500:8,750:9,1e3:10}}const o=Object.keys(n),a=o.length-1;for(let e=0;e<a;e++){const s=o[e],i=n[s];if(s>t)break;r=i}return s?r+1:r}static get inputs(){return{[i.TYPES.LIKE.LABEL]:[1,2,3,4,5],[i.TYPES.MONEY.LABEL]:[100],[i.TYPES.EXCITE.LABEL]:[1101,1102,1103,1001,1002],[i.TYPES.HAPPY.LABEL]:[1201,1202,1203,1204,1301,1302,1303,1304,1305,1306,1307],[i.TYPES.JOY.LABEL]:[1401,1402,1501,1502,1503,1504],[i.TYPES.RELAX.LABEL]:[1601,1602,1603,1701,1702,1703,1801,1802,1803],[i.TYPES.SLACK.LABEL]:[2001,2002,2003,2004,2005,2101,2102,2103],[i.TYPES.MELANCHOLY.LABEL]:[2301,2302,2303,2201,2202,2203,2204,2205,2401,2402,2403,2404,2501,2502,2503],[i.TYPES.ANGER.LABEL]:[2701,2702,2703,2704,2705,2706,2601,2602],[i.TYPES.WORRY_FEAR.LABEL]:[2904,2905,2906,2801,2802,2803,2804,2805,2806,2901,2903]}}static get map(){return{1:"👍",2:"✌️",3:"👀",4:"💡",5:"💪",10:"",100:"💵",1001:"😳",1002:"😵",1101:"🤣",1102:"😆",1103:"🤩",1201:"💓",1202:"🥰",1203:"😍",1204:"😻",1301:"😄",1302:"✨",1303:"😁",1304:"🍺",1305:"😊",1306:"😘",1307:"🌟",1401:"🥳",1402:"😃",1501:"😋",1502:"🎂",1503:"🍰",1504:"🧁",1601:"😌",1602:"🤤",1603:"😉",1701:"🙂",1702:"☕️",1703:"🍵",1801:"😐",1802:"😮",1803:"😯",2001:"😅",2002:"💦",2003:"🥺",2004:"😲",2005:"🙄",2101:"😒",2102:"😑",2103:"😕",2201:"😩",2202:"😞",2203:"😔",2204:"😟",2205:"🤢",2301:"😭",2302:"😥",2303:"😿",2401:"🤕",2402:"🤒",2403:"😷",2404:"🤧",2501:"🧐",2502:"🤔",2503:"🤨",2601:"😠",2602:"😾",2701:"😡",2702:"🤬",2703:"💔",2704:"💢",2705:"😤",2706:"👿",2801:"😣",2802:"😫",2803:"😓",2804:"😖",2805:"😨",2806:"😰",2901:"🥶",2902:"🤮",2903:"🥵",2904:"😱",2905:"🙀",2906:"💀"}}}t.default=i},2703:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{static get TYPES(){return[n.default.TYPES.LIKE]}static getSaveBalance(e){const t={1:[{[n.default.TYPES.LIKE.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},6663:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{constructor(e){this.typesArray=[],Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(i.TYPES[e].LABEL)}))}static get TYPES(){return[n.default.TYPES.SUPRISE,n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.GLAD,n.default.TYPES.SATISFACTION,n.default.TYPES.COMFORT,n.default.TYPES.RELAX,n.default.TYPES.TIRED,n.default.TYPES.SLEEPY,n.default.TYPES.SLACK,n.default.TYPES.BORING,n.default.TYPES.MELANCHOLY,n.default.TYPES.SAD,n.default.TYPES.UNPLEASANT,n.default.TYPES.FRUSTRATED,n.default.TYPES.DISSATISFIED,n.default.TYPES.ANGER,n.default.TYPES.WORRY,n.default.TYPES.FEAR]}static getSaveBalance(e){const t={1001:[{[n.default.TYPES.SUPRISE.ID]:1}],1002:[{[n.default.TYPES.SUPRISE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.GLAD.ID]:1}],1402:[{[n.default.TYPES.GLAD.ID]:1}],1501:[{[n.default.TYPES.SATISFACTION.ID]:1}],1502:[{[n.default.TYPES.SATISFACTION.ID]:1}],1503:[{[n.default.TYPES.SATISFACTION.ID]:1}],1504:[{[n.default.TYPES.SATISFACTION.ID]:1}],1601:[{[n.default.TYPES.COMFORT.ID]:1}],1602:[{[n.default.TYPES.COMFORT.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.BORING.ID]:1}],2102:[{[n.default.TYPES.BORING.ID]:1}],2103:[{[n.default.TYPES.BORING.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.SAD.ID]:1}],2302:[{[n.default.TYPES.SAD.ID]:1}],2303:[{[n.default.TYPES.SAD.ID]:1}],2401:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2402:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2403:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2404:[{[n.default.TYPES.UNPLEASANT.ID]:1}],2501:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2502:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2503:[{[n.default.TYPES.FRUSTRATED.ID]:1}],2601:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2602:[{[n.default.TYPES.DISSATISFIED.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY.ID]:1}],2802:[{[n.default.TYPES.WORRY.ID]:1}],2803:[{[n.default.TYPES.WORRY.ID]:1}],2804:[{[n.default.TYPES.WORRY.ID]:1}],2805:[{[n.default.TYPES.WORRY.ID]:1}],2806:[{[n.default.TYPES.WORRY.ID]:1}],2807:[{[n.default.TYPES.WORRY.ID]:1}],2901:[{[n.default.TYPES.FEAR.ID]:1}],2902:[{[n.default.TYPES.FEAR.ID]:1}],2903:[{[n.default.TYPES.FEAR.ID]:1}],2904:[{[n.default.TYPES.FEAR.ID]:1}],2905:[{[n.default.TYPES.FEAR.ID]:1}],2906:[{[n.default.TYPES.FEAR.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},3005:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(3365));class i{constructor(e){this.typesArray=[],Object.keys(i.TYPES).forEach((e=>{this.typesArray.push(i.TYPES[e].LABEL)}))}static get TYPES(){return[n.default.TYPES.EXCITE,n.default.TYPES.HAPPY,n.default.TYPES.JOY,n.default.TYPES.RELAX,n.default.TYPES.SLACK,n.default.TYPES.MELANCHOLY,n.default.TYPES.ANGER,n.default.TYPES.WORRY_FEAR]}static getSaveBalance(e){const t={1001:[{[n.default.TYPES.EXCITE.ID]:1}],1002:[{[n.default.TYPES.EXCITE.ID]:1}],1101:[{[n.default.TYPES.EXCITE.ID]:1}],1102:[{[n.default.TYPES.EXCITE.ID]:1}],1103:[{[n.default.TYPES.EXCITE.ID]:1}],1201:[{[n.default.TYPES.HAPPY.ID]:1}],1202:[{[n.default.TYPES.HAPPY.ID]:1}],1203:[{[n.default.TYPES.HAPPY.ID]:1}],1204:[{[n.default.TYPES.HAPPY.ID]:1}],1301:[{[n.default.TYPES.JOY.ID]:1}],1302:[{[n.default.TYPES.JOY.ID]:1}],1303:[{[n.default.TYPES.JOY.ID]:1}],1304:[{[n.default.TYPES.JOY.ID]:1}],1305:[{[n.default.TYPES.JOY.ID]:1}],1306:[{[n.default.TYPES.JOY.ID]:1}],1307:[{[n.default.TYPES.JOY.ID]:1}],1401:[{[n.default.TYPES.JOY.ID]:1}],1402:[{[n.default.TYPES.JOY.ID]:1}],1501:[{[n.default.TYPES.JOY.ID]:1}],1502:[{[n.default.TYPES.JOY.ID]:1}],1503:[{[n.default.TYPES.JOY.ID]:1}],1504:[{[n.default.TYPES.JOY.ID]:1}],1601:[{[n.default.TYPES.RELAX.ID]:1}],1602:[{[n.default.TYPES.RELAX.ID]:1}],1701:[{[n.default.TYPES.RELAX.ID]:1}],1702:[{[n.default.TYPES.RELAX.ID]:1}],1703:[{[n.default.TYPES.RELAX.ID]:1}],1801:[{[n.default.TYPES.TIRED.ID]:1}],1802:[{[n.default.TYPES.TIRED.ID]:1}],1803:[{[n.default.TYPES.TIRED.ID]:1}],2001:[{[n.default.TYPES.SLACK.ID]:1}],2002:[{[n.default.TYPES.SLACK.ID]:1}],2003:[{[n.default.TYPES.SLACK.ID]:1}],2004:[{[n.default.TYPES.SLACK.ID]:1}],2101:[{[n.default.TYPES.SLACK.ID]:1}],2102:[{[n.default.TYPES.SLACK.ID]:1}],2103:[{[n.default.TYPES.SLACK.ID]:1}],2201:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2202:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2203:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2204:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2205:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2301:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2302:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2303:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2401:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2402:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2403:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2404:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2501:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2502:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2503:[{[n.default.TYPES.MELANCHOLY.ID]:1}],2601:[{[n.default.TYPES.ANGER.ID]:1}],2602:[{[n.default.TYPES.ANGER.ID]:1}],2701:[{[n.default.TYPES.ANGER.ID]:1}],2702:[{[n.default.TYPES.ANGER.ID]:1}],2703:[{[n.default.TYPES.ANGER.ID]:1}],2704:[{[n.default.TYPES.ANGER.ID]:1}],2705:[{[n.default.TYPES.ANGER.ID]:1}],2706:[{[n.default.TYPES.ANGER.ID]:1}],2801:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2802:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2803:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2804:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2805:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2806:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2807:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2901:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2902:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2903:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2904:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2905:[{[n.default.TYPES.WORRY_FEAR.ID]:1}],2906:[{[n.default.TYPES.WORRY_FEAR.ID]:1}]};return t[e]?t[e]:null}static getSchemas(){let e={};return i.TYPES.forEach(((t,s)=>{e[t.LABEL]={type:Number,default:0,min:0}})),e}}t.default=i},1025:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(s(2703)),i=r(s(6663)),o=r(s(3005));t.default={Plain:n.default,Russell:i.default,RussellSimple:o.default}},6894:(e,t,s)=>{e.exports=s(6894)},8399:e=>{var t,s,r=e.exports={};function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(e){if(t===setTimeout)return setTimeout(e,0);if((t===n||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(s){try{return t.call(null,e,0)}catch(s){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:n}catch(e){t=n}try{s="function"==typeof clearTimeout?clearTimeout:i}catch(e){s=i}}();var a,u=[],c=!1,d=-1;function l(){c&&a&&(c=!1,a.length?u=a.concat(u):d=-1,u.length&&h())}function h(){if(!c){var e=o(l);c=!0;for(var t=u.length;t;){for(a=u,u=[];++d<t;)a&&a[d].run();d=-1,t=u.length}a=null,c=!1,function(e){if(s===clearTimeout)return clearTimeout(e);if((s===i||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(e);try{s(e)}catch(t){try{return s.call(null,e)}catch(t){return s.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)t[s-1]=arguments[s];u.push(new p(e,t)),1!==u.length||c||o(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5159:(e,t)=>{"use strict";function s(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Object.defineProperty(t,"__esModule",{value:!0}),t.Backoff=void 0,t.Backoff=s,s.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),s=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-s:e+s}return 0|Math.min(e,this.max)},s.prototype.reset=function(){this.attempts=0},s.prototype.setMin=function(e){this.ms=e},s.prototype.setMax=function(e){this.max=e},s.prototype.setJitter=function(e){this.jitter=e}},7046:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.connect=t.io=t.Socket=t.Manager=t.protocol=void 0;const n=s(3084),i=s(4168);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return i.Manager}});const o=s(8312);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return o.Socket}});const a=r(s(3669)).default("socket.io-client"),u={};function c(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const s=n.url(e,t.path||"/socket.io"),r=s.source,o=s.id,c=s.path,d=u[o]&&c in u[o].nsps;let l;return t.forceNew||t["force new connection"]||!1===t.multiplex||d?(a("ignoring socket cache for %s",r),l=new i.Manager(r,t)):(u[o]||(a("new io instance for %s",r),u[o]=new i.Manager(r,t)),l=u[o]),s.query&&!t.query&&(t.query=s.queryKey),l.socket(s.path,t)}t.io=c,t.connect=c,t.default=c,Object.assign(c,{Manager:i.Manager,Socket:o.Socket,io:c,connect:c});var d=s(7116);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return d.protocol}}),e.exports=c},4168:function(e,t,s){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,s,r){void 0===r&&(r=s),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,r){void 0===r&&(r=s),e[r]=t[s]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&r(t,e,s);return n(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const a=s(9684),u=s(8312),c=i(s(7116)),d=s(7149),l=s(5159),h=s(5260),p=o(s(3669)).default("socket.io-client:manager");class f extends h.Emitter{constructor(e,t){var s;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,a.installTimerFunctions(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=t.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new l.Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||c;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(p("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=new a.Socket(this.uri,this.opts);const t=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const r=d.on(t,"open",(function(){s.onopen(),e&&e()})),n=d.on(t,"error",(t=>{p("error"),s.cleanup(),s._readyState="closed",this.emitReserved("error",t),e?e(t):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;p("connect attempt will timeout after %d",e),0===e&&r();const s=this.setTimeoutFn((()=>{p("connect attempt timed out after %d",e),r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(r),this.subs.push(n),this}connect(e){return this.open(e)}onopen(){p("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(d.on(e,"ping",this.onping.bind(this)),d.on(e,"data",this.ondata.bind(this)),d.on(e,"error",this.onerror.bind(this)),d.on(e,"close",this.onclose.bind(this)),d.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){p("error",e),this.emitReserved("error",e)}socket(e,t){let s=this.nsps[e];return s||(s=new u.Socket(this,e,t),this.nsps[e]=s),s}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void p("socket %s is still active, skipping close",e);this._close()}_packet(e){p("writing packet %j",e);const t=this.encoder.encode(e);for(let s=0;s<t.length;s++)this.engine.write(t[s],e.options)}cleanup(){p("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){p("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){p("closed due to %s",e),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();p("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const s=this.setTimeoutFn((()=>{e.skipReconnect||(p("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(p("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(p("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=f},7149:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,s){return e.on(t,s),function(){e.off(t,s)}}},8312:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const n=s(7116),i=s(7149),o=s(5260),a=r(s(3669)).default("socket.io-client:socket"),u=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class c extends o.Emitter{constructor(e,t,s){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",this.onopen.bind(this)),i.on(e,"packet",this.onpacket.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(u.hasOwnProperty(e))throw new Error(\'"\'+e+\'" is a reserved event name\');t.unshift(e);const s={type:n.PacketType.EVENT,data:t,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;a("emitting packet with ack id %d",e);const r=t.pop();this._registerAckCallback(e,r),s.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s):a("discard packet as the transport is not currently writable"),this.flags={},this}_registerAckCallback(e,t){const s=this.flags.timeout;if(void 0===s)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(a("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));a("event with ack id %d has timed out after %d ms",e,s),t.call(this,new Error("operation has timed out"))}),s);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){a("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:n.PacketType.CONNECT,data:e})})):this.packet({type:n.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){a("close (%s)",e),this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case n.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case n.PacketType.EVENT:case n.PacketType.BINARY_EVENT:this.onevent(e);break;case n.PacketType.ACK:case n.PacketType.BINARY_ACK:this.onack(e);break;case n.PacketType.DISCONNECT:this.ondisconnect();break;case n.PacketType.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];a("emitting event %j",t),null!=e.id&&(a("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const s of t)s.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let s=!1;return function(...r){s||(s=!0,a("sending ack %j",r),t.packet({type:n.PacketType.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(a("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):a("bad ack %s",e.id)}onconnect(e){a("socket connected with id %s",e),this.id=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){a("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(a("performing disconnect (%s)",this.nsp),this.packet({type:n.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const s of t)s.apply(this,e.data)}}}t.Socket=c},3084:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const n=s(9684),i=r(s(3669)).default("socket.io-client:url");t.url=function(e,t="",s){let r=e;s=s||"undefined"!=typeof location&&location,null==e&&(e=s.protocol+"//"+s.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?s.protocol+e:s.host+e),/^(https?|wss?):\\/\\//.test(e)||(i("protocol-less url %s",e),e=void 0!==s?s.protocol+"//"+e:"https://"+e),i("parse %s",e),r=n.parse(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const o=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+o+":"+r.port+t,r.href=r.protocol+"://"+o+(s&&s.port===r.port?"":":"+r.port),r}},2319:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasCORS=void 0;let s=!1;try{s="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}t.hasCORS=s},6879:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0,t.encode=function(e){let t="";for(let s in e)e.hasOwnProperty(s)&&(t.length&&(t+="&"),t+=encodeURIComponent(s)+"="+encodeURIComponent(e[s]));return t},t.decode=function(e){let t={},s=e.split("&");for(let e=0,r=s.length;e<r;e++){let r=s[e].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}},5199:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;const s=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.parse=function(e){const t=e,n=e.indexOf("["),i=e.indexOf("]");-1!=n&&-1!=i&&(e=e.substring(0,n)+e.substring(n,i).replace(/:/g,";")+e.substring(i,e.length));let o=s.exec(e||""),a={},u=14;for(;u--;)a[r[u]]=o[u]||"";return-1!=n&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a.pathNames=function(e,t){const s=t.replace(/\\/{2,9}/g,"/").split("/");return"/"!=t.substr(0,1)&&0!==t.length||s.splice(0,1),"/"==t.substr(t.length-1,1)&&s.splice(s.length-1,1),s}(0,a.path),a.queryKey=function(e,t){const s={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(s[t]=r)})),s}(0,a.query),a}},296:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yeast=t.decode=t.encode=void 0;const s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={};let n,i=0,o=0;function a(e){let t="";do{t=s[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}for(t.encode=a,t.decode=function(e){let t=0;for(o=0;o<e.length;o++)t=64*t+r[e.charAt(o)];return t},t.yeast=function(){const e=a(+new Date);return e!==n?(i=0,n=e):e+"."+a(i++)};o<64;o++)r[s[o]]=o},7400:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.globalThisShim=void 0,t.globalThisShim="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},9684:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.installTimerFunctions=t.transports=t.Transport=t.protocol=t.Socket=void 0;const r=s(2350);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return r.Socket}}),t.protocol=r.Socket.protocol;var n=s(4556);Object.defineProperty(t,"Transport",{enumerable:!0,get:function(){return n.Transport}});var i=s(2345);Object.defineProperty(t,"transports",{enumerable:!0,get:function(){return i.transports}});var o=s(8419);Object.defineProperty(t,"installTimerFunctions",{enumerable:!0,get:function(){return o.installTimerFunctions}});var a=s(5199);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return a.parse}})},2350:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const n=s(2345),i=s(8419),o=s(6879),a=s(5199),u=r(s(6930)),c=s(5260),d=s(8075),l=(0,u.default)("engine.io-client:socket");class h extends c.Emitter{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=(0,a.parse)(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=(0,a.parse)(t.host).host),(0,i.installTimerFunctions)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=(0,o.decode)(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){l(\'creating transport "%s"\',e);const t=Object.assign({},this.opts.query);t.EIO=d.protocol,t.transport=e,this.id&&(t.sid=this.id);const s=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return l("options: %j",s),new n.transports[e](s)}open(){let e;if(this.opts.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return l("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){l("setting transport %s",e.name),this.transport&&(l("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(e=>this.onClose("transport close",e)))}probe(e){l(\'probing transport "%s"\',e);let t=this.createTransport(e),s=!1;h.priorWebsocketSuccess=!1;const r=()=>{s||(l(\'probe transport "%s" opened\',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!s)if("pong"===r.type&&"probe"===r.data){if(l(\'probe transport "%s" pong\',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;h.priorWebsocketSuccess="websocket"===t.name,l(\'pausing current transport "%s"\',this.transport.name),this.transport.pause((()=>{s||"closed"!==this.readyState&&(l("changing transport and sending upgrade packet"),c(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{l(\'probe transport "%s" failed\',e);const s=new Error("probe error");s.transport=t.name,this.emitReserved("upgradeError",s)}})))};function n(){s||(s=!0,c(),t.close(),t=null)}const i=s=>{const r=new Error("probe error: "+s);r.transport=t.name,n(),l(\'probe transport "%s" failed because of error: %s\',e,s),this.emitReserved("upgradeError",r)};function o(){i("transport closed")}function a(){i("socket closed")}function u(e){t&&e.name!==t.name&&(l(\'"%s" works - aborting "%s"\',e.name,t.name),n())}const c=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",o),this.off("close",a),this.off("upgrading",u)};t.once("open",r),t.once("error",i),t.once("close",o),this.once("close",a),this.once("upgrading",u),t.open()}onOpen(){if(l("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){l("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(l(\'socket receive: type "%s", data "%s"\',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else l(\'packet received with socket readyState "%s"\',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();l("flushing %d packets in socket",e.length),this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const s=this.writeBuffer[t].data;if(s&&(e+=(0,i.byteLength)(s)),t>0&&e>this.maxPayload)return l("only send %d out of %d packets",t,this.writeBuffer.length),this.writeBuffer.slice(0,t);e+=2}return l("payload size is %d (max: %d)",e,this.maxPayload),this.writeBuffer}write(e,t,s){return this.sendPacket("message",e,t,s),this}send(e,t,s){return this.sendPacket("message",e,t,s),this}sendPacket(e,t,s,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const n={type:e,data:t,options:s};this.emitReserved("packetCreate",n),this.writeBuffer.push(n),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),l("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},s=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():e()})):this.upgrading?s():e()),this}onError(e){l("socket error %j",e),h.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(l(\'socket close with reason: "%s"\',e),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let s=0;const r=e.length;for(;s<r;s++)~this.transports.indexOf(e[s])&&t.push(e[s]);return t}}t.Socket=h,h.protocol=d.protocol},4556:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Transport=void 0;const n=s(8075),i=s(5260),o=s(8419),a=(0,r(s(6930)).default)("engine.io-client:transport");class u extends Error{constructor(e,t,s){super(e),this.description=t,this.context=s,this.type="TransportError"}}class c extends i.Emitter{constructor(e){super(),this.writable=!1,(0,o.installTimerFunctions)(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t,s){return super.emitReserved("error",new u(e,t,s)),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):a("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=(0,n.decodePacket)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}}t.Transport=c},2345:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transports=void 0;const r=s(9044),n=s(8275);t.transports={websocket:n.WS,polling:r.Polling}},9044:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.Polling=void 0;const n=s(4556),i=r(s(6930)),o=s(296),a=s(6879),u=s(8075),c=s(1696),d=s(5260),l=s(8419),h=s(7400),p=(0,i.default)("engine.io-client:polling");function f(){}const T=null!=new c.XHR({xdomain:!1}).responseType;class E extends n.Transport{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let s=location.port;s||(s=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||s!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=T&&!t}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{p("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(p("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){p("pre-pause polling complete"),--e||t()}))),this.writable||(p("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){p("pre-pause writing complete"),--e||t()})))}else t()}poll(){p("polling"),this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){p("polling got data %s",e),(0,u.decodePayload)(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState?this.poll():p(\'ignoring poll - transport state "%s"\',this.readyState))}doClose(){const e=()=>{p("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(p("transport open - closing"),e()):(p("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,(0,u.encodePayload)(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,o.yeast)()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const r=(0,a.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new _(this.uri(),e)}doWrite(e,t){const s=this.request({method:"POST",data:e});s.on("success",t),s.on("error",((e,t)=>{this.onError("xhr post error",e,t)}))}doPoll(){p("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,t)=>{this.onError("xhr poll error",e,t)})),this.pollXhr=e}}t.Polling=E;class _ extends d.Emitter{constructor(e,t){super(),(0,l.installTimerFunctions)(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=(0,l.pick)(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new c.XHR(e);try{p("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},p("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=_.requestsCount++,_.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=f,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete _.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(t.Request=_,_.requestsCount=0,_.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",g);else if("function"==typeof addEventListener){const e="onpagehide"in h.globalThisShim?"pagehide":"unload";addEventListener(e,g,!1)}function g(){for(let e in _.requests)_.requests.hasOwnProperty(e)&&_.requests[e].abort()}},3884:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultBinaryType=t.usingBrowserWebSocket=t.WebSocket=t.nextTick=void 0;const r=s(7400);t.nextTick="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),t.WebSocket=r.globalThisShim.WebSocket||r.globalThisShim.MozWebSocket,t.usingBrowserWebSocket=!0,t.defaultBinaryType="arraybuffer"},8275:function(e,t,s){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WS=void 0;const n=s(4556),i=s(6879),o=s(296),a=s(8419),u=s(3884),c=r(s(6930)),d=s(8075),l=(0,c.default)("engine.io-client:websocket"),h="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class p extends n.Transport{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,s=h?{}:(0,a.pick)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=u.usingBrowserWebSocket&&!h?t?new u.WebSocket(e,t):new u.WebSocket(e):new u.WebSocket(e,t,s)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType||u.defaultBinaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],r=t===e.length-1;(0,d.encodePacket)(s,this.supportsBinary,(e=>{const t={};!u.usingBrowserWebSocket&&(s.options&&(t.compress=s.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u.usingBrowserWebSocket?this.ws.send(e):this.ws.send(e,t)}catch(e){l("websocket closed before onclose event")}r&&(0,u.nextTick)((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,o.yeast)()),this.supportsBinary||(e.b64=1);const r=(0,i.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}check(){return!!u.WebSocket}}t.WS=p},1696:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHR=void 0;const r=s(2319),n=s(7400);t.XHR=function(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r.hasCORS))return new XMLHttpRequest}catch(e){}if(!t)try{return new(n.globalThisShim[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},8419:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.byteLength=t.installTimerFunctions=t.pick=void 0;const r=s(7400);t.pick=function(e,...t){return t.reduce(((t,s)=>(e.hasOwnProperty(s)&&(t[s]=e[s]),t)),{})};const n=setTimeout,i=clearTimeout;t.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=n.bind(r.globalThisShim),e.clearTimeoutFn=i.bind(r.globalThisShim)):(e.setTimeoutFn=setTimeout.bind(r.globalThisShim),e.clearTimeoutFn=clearTimeout.bind(r.globalThisShim))},t.byteLength=function(e){return"string"==typeof e?function(e){let t=0,s=0;for(let r=0,n=e.length;r<n;r++)t=e.charCodeAt(r),t<128?s+=1:t<2048?s+=2:t<55296||t>=57344?s+=3:(r++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))}},7193:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_PACKET=t.PACKET_TYPES_REVERSE=t.PACKET_TYPES=void 0;const s=Object.create(null);t.PACKET_TYPES=s,s.open="0",s.close="1",s.ping="2",s.pong="3",s.message="4",s.upgrade="5",s.noop="6";const r=Object.create(null);t.PACKET_TYPES_REVERSE=r,Object.keys(s).forEach((e=>{r[s[e]]=e})),t.ERROR_PACKET={type:"error",data:"parser error"}},482:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0;const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<s.length;e++)r[s.charCodeAt(e)]=e;t.encode=e=>{let t,r=new Uint8Array(e),n=r.length,i="";for(t=0;t<n;t+=3)i+=s[r[t]>>2],i+=s[(3&r[t])<<4|r[t+1]>>4],i+=s[(15&r[t+1])<<2|r[t+2]>>6],i+=s[63&r[t+2]];return n%3==2?i=i.substring(0,i.length-1)+"=":n%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=e=>{let t,s,n,i,o,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const d=new ArrayBuffer(a),l=new Uint8Array(d);for(t=0;t<u;t+=4)s=r[e.charCodeAt(t)],n=r[e.charCodeAt(t+1)],i=r[e.charCodeAt(t+2)],o=r[e.charCodeAt(t+3)],l[c++]=s<<2|n>>4,l[c++]=(15&n)<<4|i>>2,l[c++]=(3&i)<<6|63&o;return d}},5822:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(7193),n=s(482),i="function"==typeof ArrayBuffer,o=(e,t)=>{if(i){const s=(0,n.decode)(e);return a(s,t)}return{base64:!0,data:e}},a=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};t.default=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const s=e.charAt(0);return"b"===s?{type:"message",data:o(e.substring(1),t)}:r.PACKET_TYPES_REVERSE[s]?e.length>1?{type:r.PACKET_TYPES_REVERSE[s],data:e.substring(1)}:{type:r.PACKET_TYPES_REVERSE[s]}:r.ERROR_PACKET}},4591:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=s(7193),n="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,o=(e,t)=>{const s=new FileReader;return s.onload=function(){const e=s.result.split(",")[1];t("b"+e)},s.readAsDataURL(e)};t.default=({type:e,data:t},s,a)=>{return n&&t instanceof Blob?s?a(t):o(t,a):i&&(t instanceof ArrayBuffer||(u=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(u):u&&u.buffer instanceof ArrayBuffer))?s?a(t):o(new Blob([t]),a):a(r.PACKET_TYPES[e]+(t||""));var u}},8075:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePayload=t.decodePacket=t.encodePayload=t.encodePacket=t.protocol=void 0;const r=s(4591);t.encodePacket=r.default;const n=s(5822);t.decodePacket=n.default;const i=String.fromCharCode(30);t.encodePayload=(e,t)=>{const s=e.length,n=new Array(s);let o=0;e.forEach(((e,a)=>{(0,r.default)(e,!1,(e=>{n[a]=e,++o===s&&t(n.join(i))}))}))},t.decodePayload=(e,t)=>{const s=e.split(i),r=[];for(let e=0;e<s.length;e++){const i=(0,n.default)(s[e],t);if(r.push(i),"error"===i.type)break}return r},t.protocol=4},3155:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=s(790);function n(e,t){if(!e)return e;if(r.isBinary(e)){const s={_placeholder:!0,num:t.length};return t.push(e),s}if(Array.isArray(e)){const s=new Array(e.length);for(let r=0;r<e.length;r++)s[r]=n(e[r],t);return s}if("object"==typeof e&&!(e instanceof Date)){const s={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(s[r]=n(e[r],t));return s}return e}function i(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let s=0;s<e.length;s++)e[s]=i(e[s],t);else if("object"==typeof e)for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&(e[s]=i(e[s],t));return e}t.deconstructPacket=function(e){const t=[],s=e.data,r=e;return r.data=n(s,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=i(e.data,t),e.attachments=void 0,e}},7116:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=s(5260),n=s(3155),i=s(790),o=s(1517).default("socket.io-parser");var a;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(a=t.PacketType||(t.PacketType={})),t.Encoder=class{constructor(e){this.replacer=e}encode(e){return o("encoding packet %j",e),e.type!==a.EVENT&&e.type!==a.ACK||!i.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==a.BINARY_EVENT&&e.type!==a.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),o("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=n.deconstructPacket(e),s=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(s),r}};class u extends r.Emitter{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===a.BINARY_EVENT||t.type===a.BINARY_ACK?(this.reconstructor=new c(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!i.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const s={type:Number(e.charAt(0))};if(void 0===a[s.type])throw new Error("unknown packet type "+s.type);if(s.type===a.BINARY_EVENT||s.type===a.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const n=e.substring(r,t);if(n!=Number(n)||"-"!==e.charAt(t))throw new Error("Illegal attachments");s.attachments=Number(n)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);s.nsp=e.substring(r,t)}else s.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const s=e.charAt(t);if(null==s||Number(s)!=s){--t;break}if(t===e.length)break}s.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(!u.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return o("decoded %s as %j",e,s),s}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case a.CONNECT:return"object"==typeof t;case a.DISCONNECT:return void 0===t;case a.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=u;class c{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=n.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},790:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const s="function"==typeof ArrayBuffer,r=Object.prototype.toString,n="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function o(e){return s&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||n&&e instanceof Blob||i&&e instanceof File}t.isBinary=o,t.hasBinary=function e(t,s){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let s=0,r=t.length;s<r;s++)if(e(t[s]))return!0;return!1}if(o(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const s in t)if(Object.prototype.hasOwnProperty.call(t,s)&&e(t[s]))return!0;return!1}},5260:(e,t,s)=>{"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}s.r(t),s.d(t,{Emitter:()=>r}),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function s(){this.off(e,s),t.apply(this,arguments)}return s.fn=t,this.on(e,s),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var n=0;n<r.length;n++)if((s=r[n])===t||s.fn===t){r.splice(n,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),s=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(s){r=0;for(var n=(s=s.slice(0)).length;r<n;++r)s[r].apply(this,t)}return this},r.prototype.emitReserved=r.prototype.emit,r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}}},t={};function s(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,s),i.exports}s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(8421)})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,',"Worker",void 0,F.p+"ws.api.worker.js")}},477:I=>{"use strict";I.exports=function(I,g,F,B){var C=self||window;try{try{var c;try{c=new C.Blob([I])}catch(g){(c=new(C.BlobBuilder||C.WebKitBlobBuilder||C.MozBlobBuilder||C.MSBlobBuilder)).append(I),c=c.getBlob()}var U=C.URL||C.webkitURL,Q=U.createObjectURL(c),t=new C[g](Q,F);return U.revokeObjectURL(Q),t}catch(B){return new C[g]("data:application/javascript,".concat(encodeURIComponent(I)),F)}}catch(I){if(!B)throw Error("Inline worker is not supported");return new C[g](B,F)}}},6894:(I,g,F)=>{I.exports=F(6894)},8399:I=>{var g,F,B=I.exports={};function C(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function U(I){if(g===setTimeout)return setTimeout(I,0);if((g===C||!g)&&setTimeout)return g=setTimeout,setTimeout(I,0);try{return g(I,0)}catch(F){try{return g.call(null,I,0)}catch(F){return g.call(this,I,0)}}}!function(){try{g="function"==typeof setTimeout?setTimeout:C}catch(I){g=C}try{F="function"==typeof clearTimeout?clearTimeout:c}catch(I){F=c}}();var Q,t=[],l=!1,s=-1;function i(){l&&Q&&(l=!1,Q.length?t=Q.concat(t):s=-1,t.length&&V())}function V(){if(!l){var I=U(i);l=!0;for(var g=t.length;g;){for(Q=t,t=[];++s<g;)Q&&Q[s].run();s=-1,g=t.length}Q=null,l=!1,function(I){if(F===clearTimeout)return clearTimeout(I);if((F===c||!F)&&clearTimeout)return F=clearTimeout,clearTimeout(I);try{F(I)}catch(g){try{return F.call(null,I)}catch(g){return F.call(this,I)}}}(I)}}function d(I,g){this.fun=I,this.array=g}function e(){}B.nextTick=function(I){var g=new Array(arguments.length-1);if(arguments.length>1)for(var F=1;F<arguments.length;F++)g[F-1]=arguments[F];t.push(new d(I,g)),1!==t.length||l||U(V)},d.prototype.run=function(){this.fun.apply(null,this.array)},B.title="browser",B.browser=!0,B.env={},B.argv=[],B.version="",B.versions={},B.on=e,B.addListener=e,B.once=e,B.off=e,B.removeListener=e,B.removeAllListeners=e,B.emit=e,B.prependListener=e,B.prependOnceListener=e,B.listeners=function(I){return[]},B.binding=function(I){throw new Error("process.binding is not supported")},B.cwd=function(){return"/"},B.chdir=function(I){throw new Error("process.chdir is not supported")},B.umask=function(){return 0}}},g={};function F(B){var C=g[B];if(void 0!==C)return C.exports;var c=g[B]={exports:{}};return I[B].call(c.exports,c,c.exports,F),c.exports}F.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return F.d(g,{a:g}),g},F.d=(I,g)=>{for(var B in g)F.o(g,B)&&!F.o(I,B)&&Object.defineProperty(I,B,{enumerable:!0,get:g[B]})},F.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),F.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),F.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},(()=>{var I;F.g.importScripts&&(I=F.g.location+"");var g=F.g.document;if(!I&&g&&(g.currentScript&&(I=g.currentScript.src),!I)){var B=g.getElementsByTagName("script");B.length&&(I=B[B.length-1].src)}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),F.p=I})(),F(5719)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,