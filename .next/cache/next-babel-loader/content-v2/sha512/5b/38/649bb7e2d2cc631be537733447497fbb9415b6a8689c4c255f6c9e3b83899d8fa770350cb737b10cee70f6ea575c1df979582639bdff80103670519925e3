{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport sitemapJson from 'json/news/sitemap.json';\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { CategoryState, MktTypeState } from 'state';\nimport styled from 'styled-components';\nimport StylesVars from 'styles/StylesVars';\nconst navigationScrollClassName = 'navigationScroll';\n\nconst LineNavigation = props => {\n  const {\n    lineNavScrollWidth,\n    setLineNavScrollWidth,\n    categories,\n    isFixedSmallNav,\n    redirectTo\n  } = props;\n  const [mktType] = useRecoilState(MktTypeState);\n  const [category] = useRecoilState(CategoryState);\n  const setNavScrollIndex = React.useState(0)[1];\n  const [scrollingId, setScrolligId] = React.useState(0);\n  const menus = categories.concat(categories).concat(categories);\n\n  const onScrollEnd = async mktType => {\n    const navigationScroll = document.querySelector(`.${navigationScrollClassName}`);\n\n    if (navigationScroll) {\n      if (lineNavScrollWidth === navigationScroll.scrollWidth) {\n        if (scrollingId > 0) {\n          const scrollY = window.scrollY;\n          const sitemap = sitemapJson.find(sitemap => sitemap.Market === mktType);\n          const categories = sitemap ? sitemap.Categories : [];\n          const lineMenus = categories.concat(categories).concat(categories);\n          const oneScroll = Math.round(lineNavScrollWidth / lineMenus.length);\n          const scrollPosCnt = Math.round(navigationScroll.scrollLeft / oneScroll);\n          const scrollNavIndex = scrollPosCnt + 2;\n          const category = lineMenus[scrollNavIndex].category;\n          await redirectTo(mktType, category); // scroll.\n\n          window.scrollTo(0, scrollY);\n          setScrolligId(0);\n          setNavScrollIndex(Number(scrollNavIndex));\n        }\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  const onScroll = () => {\n    if (scrollingId > 0) clearTimeout(scrollingId);\n    /* eslint-disable-next-line @typescript-eslint/no-misused-promises */\n\n    setScrolligId(Number(setTimeout(() => onScrollEnd(mktType), 100)));\n  }; // did update.\n\n\n  React.useEffect(() => {\n    const navigationScroll = document.querySelector(`.${navigationScrollClassName}`);\n\n    if (navigationScroll) {\n      const scrollNavIndex = menus.findIndex((menu, i) => menu.category === category && i > categories.length);\n      const oneScroll = Math.round(lineNavScrollWidth / menus.length);\n      navigationScroll.scrollTo((scrollNavIndex - 2) * oneScroll, 0);\n      setLineNavScrollWidth(navigationScroll.scrollWidth);\n      setNavScrollIndex(scrollNavIndex);\n    }\n  }, [lineNavScrollWidth, category]);\n  return /*#__PURE__*/_jsx(Container, {\n    isFixedSmallNav: isFixedSmallNav,\n    children: /*#__PURE__*/_jsx(\"ul\", {\n      className: navigationScrollClassName,\n      onScroll: onScroll,\n      children: menus.map((menu, i) => {\n        const key = menu.label + String(i);\n        const className = menu.category === category ? 'active' : '';\n        return /*#__PURE__*/_jsxs(\"li\", {\n          className: className,\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            children: /*#__PURE__*/_jsx(\"label\", {\n              children: menu.label\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"lamp\",\n            children: \"\\xA0\"\n          })]\n        }, key);\n      })\n    })\n  });\n};\n\nexport default LineNavigation;\nconst Container = styled.nav.withConfig({\n  displayName: \"LineNavigation__Container\",\n  componentId: \"sc-148d60j-0\"\n})([\"position:\", \";top:\", \";z-index:91;width:100%;height:30px;overflow-x:scroll;transition:\", \";ul{display:flex;flex-flow:row nowrap;width:100%;max-width:\", \"px;height:100%;margin:0 auto;overflow-y:hidden;background:#fff;scroll-snap-type:x mandatory;scroll-snap-points-x:repeat(100%);}li{display:flex;flex:1;align-items:center;justify-content:center;width:20%;min-width:20%;height:22px;scroll-snap-align:center;}li button{height:100%;background:rgba(255,255,255,0);border:0;outline:0;@media (max-width:\", \"px){width:80%;}@media (min-width:calc(\", \"px + 1px)){width:60%;}}li.active button{font-weight:500;color:#fff;background:rgba(79,174,159,1);border-radius:10px;}\"], props => props.isFixedSmallNav ? 'fixed' : 'relative', props => props.isFixedSmallNav ? `${StylesVars.baseHeight}px` : 0, StylesVars.transitionDuration, StylesVars.maxWidth, StylesVars.spLayoutWidth, StylesVars.spLayoutWidth);","map":null,"metadata":{},"sourceType":"module"}