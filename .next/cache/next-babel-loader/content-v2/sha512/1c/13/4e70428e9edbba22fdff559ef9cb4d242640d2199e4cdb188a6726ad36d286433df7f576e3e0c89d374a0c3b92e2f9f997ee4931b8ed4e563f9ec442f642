{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { UrlState } from 'state';\nimport styled from 'styled-components';\nimport ContentsOrder from 'components/organisms/Main/ContentsOrder';\nimport Thread from 'components/organisms/Main/Thread';\nimport StylesVars from 'styles/StylesVars';\nimport { scrollLeftAnimation } from 'utils/Animation';\nimport { LocalStorageKeys } from 'utils/Constants';\nimport { urlToCh } from 'utils/Func';\nimport { talknScriptHost } from 'utils/Networks';\n\nvar getTalknPostTranslateY = function getTalknPostTranslateY(scrollLeft, scrollWidth) {\n  var talknPostTranslateYRate = Math.round(scrollLeft * 2 / scrollWidth * 100) / 100;\n  var talknPostTranslateY = -(Number(StylesVars.baseHeight) * talknPostTranslateYRate) + Number(StylesVars.baseHeight);\n  return String(talknPostTranslateY);\n};\n\nvar Main = function Main(props) {\n  var setUrl = useRecoilState(UrlState)[1];\n  var contents = props.contents,\n      isFixedSmallNav = props.isFixedSmallNav,\n      isSpLayout = props.isSpLayout,\n      talknPostFixed = props.talknPostFixed,\n      talknPostRight = props.talknPostRight,\n      talknPostWidth = props.talknPostWidth;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      threadOnlyMode = _React$useState2[0],\n      setThreadOnlyMode = _React$useState2[1];\n\n  var _React$useState3 = React.useState(String(0)),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      talknPostTranslateY = _React$useState4[0],\n      setTalknPostTranslateY = _React$useState4[1];\n\n  var _React$useState5 = React.useState(true),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      handScrollMode = _React$useState6[0],\n      setHandScrollMode = _React$useState6[1];\n\n  var updateUrl = function updateUrl(url) {\n    var iframeContainer = document.querySelector('#talknLiveMedia');\n    var iframe = document.querySelector('#talknLiveMedia iframe');\n    setUrl(url);\n    iframeContainer.dataset.url = url;\n    iframe.src = \"https://\".concat(talknScriptHost).concat(urlToCh(url));\n    localStorage.setItem(LocalStorageKeys.url, url);\n  }; // handle on\n\n\n  var handleOnClickContents = function handleOnClickContents(e, index) {\n    var parentElement = e.target.parentElement;\n    var clickedUrl = String(parentElement === null || parentElement === void 0 ? void 0 : parentElement.dataset.url);\n    var imageScroll = document.querySelector('.imageSlider ol');\n    var main = document.querySelector('main');\n    updateUrl(clickedUrl);\n    imageScroll === null || imageScroll === void 0 ? void 0 : imageScroll.scroll(imageScroll.clientWidth * index, 0);\n\n    if (main && main.scrollLeft === 0) {\n      scrollLeftAnimation(main, main.scrollWidth, setHandScrollMode);\n    }\n  };\n\n  var onScroll = React.useCallback(function (e) {\n    var main = e.target;\n    var scrollLeft = (main === null || main === void 0 ? void 0 : main.scrollLeft) || 0;\n    var scrollWidth = (main === null || main === void 0 ? void 0 : main.scrollWidth) || 0;\n\n    if (scrollLeft === 0) {\n      setThreadOnlyMode(false);\n    }\n\n    if (scrollWidth / 2 === scrollLeft) {\n      setThreadOnlyMode(true);\n    }\n\n    setTalknPostTranslateY(getTalknPostTranslateY(scrollLeft, scrollWidth));\n  }, []);\n  React.useEffect(function () {\n    var main = document.querySelector('main');\n\n    if (main) {\n      setTalknPostTranslateY(getTalknPostTranslateY(main === null || main === void 0 ? void 0 : main.scrollLeft, main === null || main === void 0 ? void 0 : main.scrollWidth));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxs(Container, {\n    handScrollMode: handScrollMode,\n    isFixedSmallNav: isFixedSmallNav,\n    onScroll: onScroll,\n    children: [/*#__PURE__*/_jsx(ContentsOrder, {\n      contents: contents,\n      handleOnClickContents: handleOnClickContents\n    }), /*#__PURE__*/_jsx(Thread, {\n      isSpLayout: isSpLayout,\n      threadOnlyMode: threadOnlyMode,\n      talknPostTranslateY: talknPostTranslateY,\n      talknPostFixed: talknPostFixed,\n      talknPostRight: talknPostRight,\n      talknPostWidth: talknPostWidth\n    })]\n  });\n};\n\nexport default Main;\nvar Container = styled.main.withConfig({\n  displayName: \"Main__Container\",\n  componentId: \"xqmfse-0\"\n})([\"z-index:1;display:flex;flex-flow:row nowrap;height:100%;margin:\", \"px auto 0;overflow-x:scroll;overflow-y:hidden;background:#fff;scroll-snap-type:\", \";scroll-snap-points-x:\", \";@media (max-width:\", \"px){width:100%;max-width:100%;}@media (min-width:calc(\", \"px + 1px)){width:100%;max-width:\", \"px;}\"], function (props) {\n  return props.isFixedSmallNav ? Number(StylesVars.baseHeight) * 5 + 10 : 0;\n}, function (props) {\n  return props.handScrollMode ? 'x mandatory' : 'none';\n}, function (props) {\n  return props.handScrollMode ? 'repeat(100%)' : 'none';\n}, StylesVars.spLayoutWidth, StylesVars.spLayoutWidth, StylesVars.maxWidth);","map":null,"metadata":{},"sourceType":"module"}