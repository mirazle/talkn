{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n//import Memcached from 'memcached';\nimport { useRouter } from 'next/router';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { getServerSidePropsWrap } from 'service';\nimport { CategoryState, MktTypeState, UrlState } from 'state';\nimport styled from 'styled-components';\nimport Footer from 'components/organisms/Footer';\nimport Header from 'components/organisms/Header';\nimport ImageSlider from 'components/organisms/ImageSlider';\nimport Main from 'components/organisms/Main';\nimport { getTalknPostLayout } from 'components/organisms/Main/Thread';\nimport Navigation from 'components/organisms/Navigation';\nimport StylesVars from 'styles/StylesVars';\nimport { LocalStorageKeys } from 'utils/Constants';\nimport { urlToCh } from 'utils/Func';\nimport { talknScriptHost } from 'utils/Networks';\nconst navigationScrollClassName = 'navigationScroll';\nconst talknPostScrollTop = 1113;\nconst footerScrollTop = 1050;\n\nconst TalknMedia = props => {\n  const router = useRouter(); // disp key datas.\n\n  const [mktType, setMktType] = useRecoilState(MktTypeState);\n  const [category, setCategory] = useRecoilState(CategoryState);\n  const [url, setUrl] = useRecoilState(UrlState);\n  const {\n    0: contents,\n    1: setContents\n  } = useState(props.contents); // layout total\n\n  const {\n    0: isSpLayout,\n    1: setIsSpLayout\n  } = useState(false);\n  const {\n    0: isMaxLayout,\n    1: setIsMaxLayout\n  } = useState(false);\n  const {\n    0: isFixedSmallNav,\n    1: setFixedSmallNav\n  } = useState(false);\n  const [openSelectContentsOrder, setOpenSelectContentsOrder] = React.useState(false);\n  const [lineNavScrollWidth, setLineNavScrollWidth] = React.useState(0); // layout talkn post footer TODO: 直す\n\n  const {\n    0: talknPostWidth,\n    1: setTalknPostWidth\n  } = useState(String(0));\n  const {\n    0: talknPostRight,\n    1: setTalknPostRight\n  } = useState(String(0));\n  const {\n    0: talknPostFixed,\n    1: setTalknPostFixed\n  } = useState(true);\n  const {\n    0: isDispFooter,\n    1: setIsDispFooter\n  } = useState(false);\n\n  const updateUrl = url => {\n    const iframeContainer = document.querySelector('#talknLiveMedia');\n    const iframe = document.querySelector('#talknLiveMedia iframe');\n    setUrl(url);\n\n    if (iframeContainer && iframe) {\n      console.log('UPDATE');\n      iframeContainer.dataset.url = url;\n      iframe.src = `https://${talknScriptHost}${urlToCh(url)}`;\n      localStorage.setItem(LocalStorageKeys.url, url);\n    }\n  };\n\n  const redirectTo = async (mktType, category) => {\n    setOpenSelectContentsOrder(false);\n    return await router.push(`/${mktType}/${category}`);\n  };\n\n  const windowEvents = {\n    load: React.useCallback(() => {// console.log(window.talknAPI);\n    }, []),\n    scroll: React.useCallback(() => {\n      setFixedSmallNav(window.scrollY >= 90);\n      setTalknPostFixed(window.scrollY + window.innerHeight <= talknPostScrollTop);\n      setIsDispFooter(window.scrollY >= footerScrollTop);\n    }, []),\n    resize: React.useCallback(() => {\n      const navigationScroll = document.querySelector(`.${navigationScrollClassName}`);\n\n      const _isSpLayout = window.innerWidth < Number(StylesVars.spLayoutWidth);\n\n      const _isMaxLayout = Number(StylesVars.maxWidth) < window.innerWidth;\n\n      setIsSpLayout(_isSpLayout);\n      setIsMaxLayout(_isMaxLayout);\n      const {\n        width,\n        right\n      } = getTalknPostLayout(window.innerWidth, _isMaxLayout, _isSpLayout);\n      setTalknPostWidth(String(width));\n      setTalknPostRight(String(right));\n\n      if (navigationScroll) {\n        setLineNavScrollWidth(navigationScroll.scrollWidth);\n      }\n    }, [])\n  }; // did mount\n\n  React.useEffect(() => {\n    windowEvents.resize();\n\n    switch (window.document.readyState) {\n      case 'interactive':\n      case 'complete':\n        break;\n\n      case 'loading':\n        window.addEventListener('load', windowEvents.load);\n        break;\n    }\n\n    window.addEventListener('resize', windowEvents.resize);\n    window.addEventListener('scroll', windowEvents.scroll);\n    return () => {\n      window.removeEventListener('load', windowEvents.load);\n      window.removeEventListener('resize', windowEvents.resize);\n      window.removeEventListener('scroll', windowEvents.scroll);\n    };\n  }, []); // did update\n\n  React.useEffect(() => {\n    const cacheUrl = localStorage.getItem(LocalStorageKeys.url);\n    if (props.contents !== contents) setContents(props.contents);\n    if (mktType !== props.mktType) setMktType(props.mktType);\n    if (category !== props.category) setCategory(props.category);\n\n    if (url !== props.url) {\n      updateUrl(props.url);\n    }\n\n    if (cacheUrl && url !== cacheUrl) {\n      updateUrl(cacheUrl);\n    }\n  }, [props.contents, props.mktType, props.category, props.url]); // did update url\n\n  React.useEffect(() => {\n    localStorage.setItem(LocalStorageKeys.url, url);\n  }, [url]);\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      isMaxLayout: isMaxLayout,\n      isFixedSmallNav: isFixedSmallNav,\n      isDispFooter: isDispFooter,\n      openSelectContentsOrder: openSelectContentsOrder,\n      setOpenSelectContentsOrder: setOpenSelectContentsOrder\n    }), /*#__PURE__*/_jsxs(Body, {\n      children: [/*#__PURE__*/_jsx(AdvertWrap, {\n        children: /*#__PURE__*/_jsx(Advert, {})\n      }), /*#__PURE__*/_jsxs(Content, {\n        children: [/*#__PURE__*/_jsx(Navigation, {\n          isSpLayout: isSpLayout,\n          isFixedSmallNav: isFixedSmallNav,\n          lineNavScrollWidth: lineNavScrollWidth,\n          setLineNavScrollWidth: setLineNavScrollWidth,\n          redirectTo: redirectTo\n        }), /*#__PURE__*/_jsx(ImageSlider, {\n          contents: contents,\n          isSpLayout: isSpLayout,\n          isFixedSmallNav: isFixedSmallNav\n        }), /*#__PURE__*/_jsx(Main, {\n          isFixedSmallNav: isFixedSmallNav,\n          isSpLayout: isSpLayout,\n          contents: contents,\n          talknPostFixed: talknPostFixed,\n          talknPostRight: talknPostRight,\n          talknPostWidth: talknPostWidth\n        })]\n      }), /*#__PURE__*/_jsx(AdvertWrap, {\n        children: /*#__PURE__*/_jsx(Advert, {})\n      })]\n    }), /*#__PURE__*/_jsx(Footer, {\n      mktType: mktType,\n      category: category,\n      redirectTo: redirectTo\n    })]\n  });\n};\n\nexport default TalknMedia;\nexport const getServerSideProps = getServerSidePropsWrap;\nconst AdvertWrapSize = 300;\nconst Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"hj6qpc-0\"\n})([\"width:100%;height:100%;padding:0;margin:0 auto;\"]);\nconst Body = styled.div.withConfig({\n  displayName: \"pages__Body\",\n  componentId: \"hj6qpc-1\"\n})([\"display:flex;flex-flow:row nowrap;width:100%;max-width:\", \"px;margin:0 auto;\"], Number(StylesVars.maxWidth) + AdvertWrapSize * 2);\nconst AdvertWrap = styled.div.withConfig({\n  displayName: \"pages__AdvertWrap\",\n  componentId: \"hj6qpc-2\"\n})([\"flex:1;max-width:\", \"px;height:800px;margin-top:80px;\"], AdvertWrapSize);\nconst Advert = styled.div.withConfig({\n  displayName: \"pages__Advert\",\n  componentId: \"hj6qpc-3\"\n})([\"width:100%;height:100%;background:#cdc;\"]);\nconst Content = styled.div.withConfig({\n  displayName: \"pages__Content\",\n  componentId: \"hj6qpc-4\"\n})([\"display:flex;flex-flow:row wrap;align-items:center;justify-content:center;width:100%;max-width:\", \"px;\"], StylesVars.maxWidth);","map":null,"metadata":{},"sourceType":"module"}