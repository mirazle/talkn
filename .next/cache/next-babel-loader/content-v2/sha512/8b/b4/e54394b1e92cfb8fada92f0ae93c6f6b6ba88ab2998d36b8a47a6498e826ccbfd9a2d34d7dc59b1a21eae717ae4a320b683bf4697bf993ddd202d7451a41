{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { UrlState } from 'state';\nimport styled from 'styled-components';\nimport ContentsOrder from 'components/organisms/Main/ContentsOrder';\nimport Thread from 'components/organisms/Main/Thread';\nimport StylesVars from 'styles/StylesVars';\nimport { scrollLeftAnimation } from 'utils/Animation';\nimport { LocalStorageKeys } from 'utils/Constants';\nimport { urlToCh } from 'utils/Func';\nimport { talknScriptHost } from 'utils/Networks';\n\nconst getTalknPostTranslateY = (scrollLeft, scrollWidth) => {\n  const talknPostTranslateYRate = Math.round(scrollLeft * 2 / scrollWidth * 100) / 100;\n  const talknPostTranslateY = -(Number(StylesVars.baseHeight) * talknPostTranslateYRate) + Number(StylesVars.baseHeight);\n  return String(talknPostTranslateY);\n};\n\nconst Main = props => {\n  const setUrl = useRecoilState(UrlState)[1];\n  const {\n    contents,\n    isFixedSmallNav,\n    isSpLayout,\n    talknPostFixed,\n    talknPostRight,\n    talknPostWidth\n  } = props;\n  const [threadOnlyMode, setThreadOnlyMode] = React.useState(false);\n  const [talknPostTranslateY, setTalknPostTranslateY] = React.useState(String(0));\n  const [handScrollMode, setHandScrollMode] = React.useState(true);\n\n  const updateUrl = url => {\n    const iframeContainer = document.querySelector('#talknLiveMedia');\n    const iframe = document.querySelector('#talknLiveMedia iframe');\n    setUrl(url);\n    iframeContainer.dataset.url = url;\n    iframe.src = `https://${talknScriptHost}${urlToCh(url)}`;\n    localStorage.setItem(LocalStorageKeys.url, url);\n  }; // handle on\n\n\n  const handleOnClickContents = (e, index) => {\n    const parentElement = e.target.parentElement;\n    const clickedUrl = String(parentElement === null || parentElement === void 0 ? void 0 : parentElement.dataset.url);\n    const imageScroll = document.querySelector('.imageSlider ol');\n    const main = document.querySelector('main');\n    updateUrl(clickedUrl);\n    imageScroll === null || imageScroll === void 0 ? void 0 : imageScroll.scroll(imageScroll.clientWidth * index, 0);\n\n    if (main && main.scrollLeft === 0) {\n      scrollLeftAnimation(main, main.scrollWidth, setHandScrollMode);\n    }\n  };\n\n  const onScroll = React.useCallback(e => {\n    const main = e.target;\n    const scrollLeft = (main === null || main === void 0 ? void 0 : main.scrollLeft) || 0;\n    const scrollWidth = (main === null || main === void 0 ? void 0 : main.scrollWidth) || 0;\n\n    if (scrollLeft === 0) {\n      setThreadOnlyMode(false);\n    }\n\n    if (scrollWidth / 2 === scrollLeft) {\n      setThreadOnlyMode(true);\n    }\n\n    setTalknPostTranslateY(getTalknPostTranslateY(scrollLeft, scrollWidth));\n  }, []);\n  React.useEffect(() => {\n    const main = document.querySelector('main');\n\n    if (main) {\n      setTalknPostTranslateY(getTalknPostTranslateY(main === null || main === void 0 ? void 0 : main.scrollLeft, main === null || main === void 0 ? void 0 : main.scrollWidth));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxs(Container, {\n    handScrollMode: handScrollMode,\n    isFixedSmallNav: isFixedSmallNav,\n    onScroll: onScroll,\n    children: [/*#__PURE__*/_jsx(ContentsOrder, {\n      contents: contents,\n      handleOnClickContents: handleOnClickContents\n    }), /*#__PURE__*/_jsx(Thread, {\n      isSpLayout: isSpLayout,\n      threadOnlyMode: threadOnlyMode,\n      talknPostTranslateY: talknPostTranslateY,\n      talknPostFixed: talknPostFixed,\n      talknPostRight: talknPostRight,\n      talknPostWidth: talknPostWidth\n    })]\n  });\n};\n\nexport default Main;\nconst Container = styled.main.withConfig({\n  displayName: \"Main__Container\",\n  componentId: \"xqmfse-0\"\n})([\"z-index:1;display:flex;flex-flow:row nowrap;height:100%;margin:\", \"px auto 0;overflow-x:scroll;overflow-y:hidden;background:#fff;scroll-snap-type:\", \";scroll-snap-points-x:\", \";@media (max-width:\", \"px){width:100%;max-width:100%;}@media (min-width:calc(\", \"px + 1px)){width:100%;max-width:\", \"px;}\"], props => props.isFixedSmallNav ? Number(StylesVars.baseHeight) * 5 + 10 : 0, props => props.handScrollMode ? 'x mandatory' : 'none', props => props.handScrollMode ? 'repeat(100%)' : 'none', StylesVars.spLayoutWidth, StylesVars.spLayoutWidth, StylesVars.maxWidth);","map":null,"metadata":{},"sourceType":"module"}